//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.832
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("UnPrcInfoConfDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class UnPrcInfoConfDataSet : System.Data.DataSet {
        
        private PriceInfoDataTable tablePriceInfo;
        
        private LotInfoDataTable tableLotInfo;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnPrcInfoConfDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected UnPrcInfoConfDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["PriceInfo"] != null)) {
                    base.Tables.Add(new PriceInfoDataTable(ds.Tables["PriceInfo"]));
                }
                if ((ds.Tables["LotInfo"] != null)) {
                    base.Tables.Add(new LotInfoDataTable(ds.Tables["LotInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PriceInfoDataTable PriceInfo {
            get {
                return this.tablePriceInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LotInfoDataTable LotInfo {
            get {
                return this.tableLotInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            UnPrcInfoConfDataSet cln = ((UnPrcInfoConfDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PriceInfo"] != null)) {
                    base.Tables.Add(new PriceInfoDataTable(ds.Tables["PriceInfo"]));
                }
                if ((ds.Tables["LotInfo"] != null)) {
                    base.Tables.Add(new LotInfoDataTable(ds.Tables["LotInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePriceInfo = ((PriceInfoDataTable)(base.Tables["PriceInfo"]));
            if ((initTable == true)) {
                if ((this.tablePriceInfo != null)) {
                    this.tablePriceInfo.InitVars();
                }
            }
            this.tableLotInfo = ((LotInfoDataTable)(base.Tables["LotInfo"]));
            if ((initTable == true)) {
                if ((this.tableLotInfo != null)) {
                    this.tableLotInfo.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "UnPrcInfoConfDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UnitPriceInfoConfDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePriceInfo = new PriceInfoDataTable();
            base.Tables.Add(this.tablePriceInfo);
            this.tableLotInfo = new LotInfoDataTable();
            base.Tables.Add(this.tableLotInfo);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePriceInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLotInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            UnPrcInfoConfDataSet ds = new UnPrcInfoConfDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void PriceInfoRowChangeEventHandler(object sender, PriceInfoRowChangeEvent e);
        
        public delegate void LotInfoRowChangeEventHandler(object sender, LotInfoRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PriceInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPriceStartDate;
            
            private System.Data.DataColumn columnListPrice;
            
            private System.Data.DataColumn columnSalesUnitCost;
            
            private System.Data.DataColumn columnStockRate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceInfoDataTable() {
                this.TableName = "PriceInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PriceInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PriceInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceStartDateColumn {
                get {
                    return this.columnPriceStartDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ListPriceColumn {
                get {
                    return this.columnListPrice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesUnitCostColumn {
                get {
                    return this.columnSalesUnitCost;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StockRateColumn {
                get {
                    return this.columnStockRate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceInfoRow this[int index] {
                get {
                    return ((PriceInfoRow)(this.Rows[index]));
                }
            }
            
            public event PriceInfoRowChangeEventHandler PriceInfoRowChanging;
            
            public event PriceInfoRowChangeEventHandler PriceInfoRowChanged;
            
            public event PriceInfoRowChangeEventHandler PriceInfoRowDeleting;
            
            public event PriceInfoRowChangeEventHandler PriceInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPriceInfoRow(PriceInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceInfoRow AddPriceInfoRow(System.DateTime PriceStartDate, double ListPrice, double SalesUnitCost, double StockRate) {
                PriceInfoRow rowPriceInfoRow = ((PriceInfoRow)(this.NewRow()));
                rowPriceInfoRow.ItemArray = new object[] {
                        PriceStartDate,
                        ListPrice,
                        SalesUnitCost,
                        StockRate};
                this.Rows.Add(rowPriceInfoRow);
                return rowPriceInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceInfoRow FindByPriceStartDate(System.DateTime PriceStartDate) {
                return ((PriceInfoRow)(this.Rows.Find(new object[] {
                            PriceStartDate})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PriceInfoDataTable cln = ((PriceInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PriceInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPriceStartDate = base.Columns["PriceStartDate"];
                this.columnListPrice = base.Columns["ListPrice"];
                this.columnSalesUnitCost = base.Columns["SalesUnitCost"];
                this.columnStockRate = base.Columns["StockRate"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPriceStartDate = new System.Data.DataColumn("PriceStartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceStartDate);
                this.columnListPrice = new System.Data.DataColumn("ListPrice", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnListPrice);
                this.columnSalesUnitCost = new System.Data.DataColumn("SalesUnitCost", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesUnitCost);
                this.columnStockRate = new System.Data.DataColumn("StockRate", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockRate);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPriceStartDate}, true));
                this.columnPriceStartDate.AllowDBNull = false;
                this.columnPriceStartDate.Unique = true;
                this.columnPriceStartDate.Caption = "価格開始日";
                this.columnListPrice.Caption = "定価";
                this.columnListPrice.DefaultValue = ((double)(0));
                this.columnSalesUnitCost.Caption = "原価単価";
                this.columnSalesUnitCost.DefaultValue = ((double)(0));
                this.columnStockRate.Caption = "仕入率";
                this.columnStockRate.DefaultValue = ((double)(0));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceInfoRow NewPriceInfoRow() {
                return ((PriceInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PriceInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PriceInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PriceInfoRowChanged != null)) {
                    this.PriceInfoRowChanged(this, new PriceInfoRowChangeEvent(((PriceInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PriceInfoRowChanging != null)) {
                    this.PriceInfoRowChanging(this, new PriceInfoRowChangeEvent(((PriceInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PriceInfoRowDeleted != null)) {
                    this.PriceInfoRowDeleted(this, new PriceInfoRowChangeEvent(((PriceInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PriceInfoRowDeleting != null)) {
                    this.PriceInfoRowDeleting(this, new PriceInfoRowChangeEvent(((PriceInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePriceInfoRow(PriceInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                UnPrcInfoConfDataSet ds = new UnPrcInfoConfDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PriceInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LotInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLotCount;
            
            private System.Data.DataColumn columnCountRange;
            
            private System.Data.DataColumn columnPriceFl;
            
            private System.Data.DataColumn columnRateVal;
            
            private System.Data.DataColumn columnUpRate;
            
            private System.Data.DataColumn columnGrsProfitSecureRate;
            
            private System.Data.DataColumn columnUnPrcFracProcUnit;
            
            private System.Data.DataColumn columnUnPrcFracProcDiv;
            
            private System.Data.DataColumn columnUnPrcFracProcDivName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotInfoDataTable() {
                this.TableName = "LotInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LotInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LotInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LotCountColumn {
                get {
                    return this.columnLotCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CountRangeColumn {
                get {
                    return this.columnCountRange;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceFlColumn {
                get {
                    return this.columnPriceFl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RateValColumn {
                get {
                    return this.columnRateVal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UpRateColumn {
                get {
                    return this.columnUpRate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GrsProfitSecureRateColumn {
                get {
                    return this.columnGrsProfitSecureRate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnPrcFracProcUnitColumn {
                get {
                    return this.columnUnPrcFracProcUnit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnPrcFracProcDivColumn {
                get {
                    return this.columnUnPrcFracProcDiv;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnPrcFracProcDivNameColumn {
                get {
                    return this.columnUnPrcFracProcDivName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotInfoRow this[int index] {
                get {
                    return ((LotInfoRow)(this.Rows[index]));
                }
            }
            
            public event LotInfoRowChangeEventHandler LotInfoRowChanging;
            
            public event LotInfoRowChangeEventHandler LotInfoRowChanged;
            
            public event LotInfoRowChangeEventHandler LotInfoRowDeleting;
            
            public event LotInfoRowChangeEventHandler LotInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLotInfoRow(LotInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotInfoRow AddLotInfoRow(double LotCount, string CountRange, double PriceFl, double RateVal, double UpRate, double GrsProfitSecureRate, double UnPrcFracProcUnit, int UnPrcFracProcDiv, string UnPrcFracProcDivName) {
                LotInfoRow rowLotInfoRow = ((LotInfoRow)(this.NewRow()));
                rowLotInfoRow.ItemArray = new object[] {
                        LotCount,
                        CountRange,
                        PriceFl,
                        RateVal,
                        UpRate,
                        GrsProfitSecureRate,
                        UnPrcFracProcUnit,
                        UnPrcFracProcDiv,
                        UnPrcFracProcDivName};
                this.Rows.Add(rowLotInfoRow);
                return rowLotInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotInfoRow FindByLotCount(double LotCount) {
                return ((LotInfoRow)(this.Rows.Find(new object[] {
                            LotCount})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LotInfoDataTable cln = ((LotInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LotInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLotCount = base.Columns["LotCount"];
                this.columnCountRange = base.Columns["CountRange"];
                this.columnPriceFl = base.Columns["PriceFl"];
                this.columnRateVal = base.Columns["RateVal"];
                this.columnUpRate = base.Columns["UpRate"];
                this.columnGrsProfitSecureRate = base.Columns["GrsProfitSecureRate"];
                this.columnUnPrcFracProcUnit = base.Columns["UnPrcFracProcUnit"];
                this.columnUnPrcFracProcDiv = base.Columns["UnPrcFracProcDiv"];
                this.columnUnPrcFracProcDivName = base.Columns["UnPrcFracProcDivName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLotCount = new System.Data.DataColumn("LotCount", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotCount);
                this.columnCountRange = new System.Data.DataColumn("CountRange", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountRange);
                this.columnPriceFl = new System.Data.DataColumn("PriceFl", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceFl);
                this.columnRateVal = new System.Data.DataColumn("RateVal", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateVal);
                this.columnUpRate = new System.Data.DataColumn("UpRate", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpRate);
                this.columnGrsProfitSecureRate = new System.Data.DataColumn("GrsProfitSecureRate", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrsProfitSecureRate);
                this.columnUnPrcFracProcUnit = new System.Data.DataColumn("UnPrcFracProcUnit", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnPrcFracProcUnit);
                this.columnUnPrcFracProcDiv = new System.Data.DataColumn("UnPrcFracProcDiv", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnPrcFracProcDiv);
                this.columnUnPrcFracProcDivName = new System.Data.DataColumn("UnPrcFracProcDivName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnPrcFracProcDivName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLotCount}, true));
                this.columnLotCount.AllowDBNull = false;
                this.columnLotCount.Unique = true;
                this.columnLotCount.DefaultValue = ((double)(0));
                this.columnCountRange.Caption = "数量範囲";
                this.columnPriceFl.Caption = "単価";
                this.columnPriceFl.DefaultValue = ((double)(0));
                this.columnRateVal.Caption = "掛率";
                this.columnRateVal.DefaultValue = ((double)(0));
                this.columnUpRate.Caption = "UP率";
                this.columnUpRate.DefaultValue = ((double)(0));
                this.columnGrsProfitSecureRate.Caption = "粗利確保率";
                this.columnGrsProfitSecureRate.DefaultValue = ((double)(0));
                this.columnUnPrcFracProcUnit.Caption = "端数処理単位";
                this.columnUnPrcFracProcUnit.DefaultValue = ((double)(0));
                this.columnUnPrcFracProcDiv.DefaultValue = ((int)(0));
                this.columnUnPrcFracProcDivName.Caption = "端数処理方法";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotInfoRow NewLotInfoRow() {
                return ((LotInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LotInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LotInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LotInfoRowChanged != null)) {
                    this.LotInfoRowChanged(this, new LotInfoRowChangeEvent(((LotInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LotInfoRowChanging != null)) {
                    this.LotInfoRowChanging(this, new LotInfoRowChangeEvent(((LotInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LotInfoRowDeleted != null)) {
                    this.LotInfoRowDeleted(this, new LotInfoRowChangeEvent(((LotInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LotInfoRowDeleting != null)) {
                    this.LotInfoRowDeleting(this, new LotInfoRowChangeEvent(((LotInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLotInfoRow(LotInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                UnPrcInfoConfDataSet ds = new UnPrcInfoConfDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LotInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PriceInfoRow : System.Data.DataRow {
            
            private PriceInfoDataTable tablePriceInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PriceInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePriceInfo = ((PriceInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PriceStartDate {
                get {
                    return ((System.DateTime)(this[this.tablePriceInfo.PriceStartDateColumn]));
                }
                set {
                    this[this.tablePriceInfo.PriceStartDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ListPrice {
                get {
                    try {
                        return ((double)(this[this.tablePriceInfo.ListPriceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'PriceInfo\' にある列 \'ListPrice\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tablePriceInfo.ListPriceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SalesUnitCost {
                get {
                    try {
                        return ((double)(this[this.tablePriceInfo.SalesUnitCostColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'PriceInfo\' にある列 \'SalesUnitCost\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tablePriceInfo.SalesUnitCostColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockRate {
                get {
                    try {
                        return ((double)(this[this.tablePriceInfo.StockRateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'PriceInfo\' にある列 \'StockRate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tablePriceInfo.StockRateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsListPriceNull() {
                return this.IsNull(this.tablePriceInfo.ListPriceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetListPriceNull() {
                this[this.tablePriceInfo.ListPriceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesUnitCostNull() {
                return this.IsNull(this.tablePriceInfo.SalesUnitCostColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesUnitCostNull() {
                this[this.tablePriceInfo.SalesUnitCostColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockRateNull() {
                return this.IsNull(this.tablePriceInfo.StockRateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockRateNull() {
                this[this.tablePriceInfo.StockRateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LotInfoRow : System.Data.DataRow {
            
            private LotInfoDataTable tableLotInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LotInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLotInfo = ((LotInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LotCount {
                get {
                    return ((double)(this[this.tableLotInfo.LotCountColumn]));
                }
                set {
                    this[this.tableLotInfo.LotCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountRange {
                get {
                    try {
                        return ((string)(this[this.tableLotInfo.CountRangeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'LotInfo\' にある列 \'CountRange\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLotInfo.CountRangeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PriceFl {
                get {
                    try {
                        return ((double)(this[this.tableLotInfo.PriceFlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'LotInfo\' にある列 \'PriceFl\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLotInfo.PriceFlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RateVal {
                get {
                    try {
                        return ((double)(this[this.tableLotInfo.RateValColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'LotInfo\' にある列 \'RateVal\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLotInfo.RateValColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UpRate {
                get {
                    try {
                        return ((double)(this[this.tableLotInfo.UpRateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'LotInfo\' にある列 \'UpRate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLotInfo.UpRateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GrsProfitSecureRate {
                get {
                    try {
                        return ((double)(this[this.tableLotInfo.GrsProfitSecureRateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'LotInfo\' にある列 \'GrsProfitSecureRate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLotInfo.GrsProfitSecureRateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UnPrcFracProcUnit {
                get {
                    try {
                        return ((double)(this[this.tableLotInfo.UnPrcFracProcUnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'LotInfo\' にある列 \'UnPrcFracProcUnit\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLotInfo.UnPrcFracProcUnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnPrcFracProcDiv {
                get {
                    try {
                        return ((int)(this[this.tableLotInfo.UnPrcFracProcDivColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'LotInfo\' にある列 \'UnPrcFracProcDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLotInfo.UnPrcFracProcDivColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnPrcFracProcDivName {
                get {
                    try {
                        return ((string)(this[this.tableLotInfo.UnPrcFracProcDivNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'LotInfo\' にある列 \'UnPrcFracProcDivName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableLotInfo.UnPrcFracProcDivNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountRangeNull() {
                return this.IsNull(this.tableLotInfo.CountRangeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountRangeNull() {
                this[this.tableLotInfo.CountRangeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceFlNull() {
                return this.IsNull(this.tableLotInfo.PriceFlColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceFlNull() {
                this[this.tableLotInfo.PriceFlColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateValNull() {
                return this.IsNull(this.tableLotInfo.RateValColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateValNull() {
                this[this.tableLotInfo.RateValColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpRateNull() {
                return this.IsNull(this.tableLotInfo.UpRateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpRateNull() {
                this[this.tableLotInfo.UpRateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrsProfitSecureRateNull() {
                return this.IsNull(this.tableLotInfo.GrsProfitSecureRateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrsProfitSecureRateNull() {
                this[this.tableLotInfo.GrsProfitSecureRateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnPrcFracProcUnitNull() {
                return this.IsNull(this.tableLotInfo.UnPrcFracProcUnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnPrcFracProcUnitNull() {
                this[this.tableLotInfo.UnPrcFracProcUnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnPrcFracProcDivNull() {
                return this.IsNull(this.tableLotInfo.UnPrcFracProcDivColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnPrcFracProcDivNull() {
                this[this.tableLotInfo.UnPrcFracProcDivColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnPrcFracProcDivNameNull() {
                return this.IsNull(this.tableLotInfo.UnPrcFracProcDivNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnPrcFracProcDivNameNull() {
                this[this.tableLotInfo.UnPrcFracProcDivNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PriceInfoRowChangeEvent : System.EventArgs {
            
            private PriceInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceInfoRowChangeEvent(PriceInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PriceInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LotInfoRowChangeEvent : System.EventArgs {
            
            private LotInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotInfoRowChangeEvent(LotInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LotInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591