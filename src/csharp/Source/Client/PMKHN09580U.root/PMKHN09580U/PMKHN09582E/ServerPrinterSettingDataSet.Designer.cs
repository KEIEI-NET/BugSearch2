//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3082
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.UIData {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ServerPrinterSettingDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ServerPrinterSettingDataSet : global::System.Data.DataSet {
        
        private SrvPrtStDataTable tableSrvPrtSt;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ServerPrinterSettingDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ServerPrinterSettingDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SrvPrtSt"] != null)) {
                    base.Tables.Add(new SrvPrtStDataTable(ds.Tables["SrvPrtSt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SrvPrtStDataTable SrvPrtSt {
            get {
                return this.tableSrvPrtSt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ServerPrinterSettingDataSet cln = ((ServerPrinterSettingDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SrvPrtSt"] != null)) {
                    base.Tables.Add(new SrvPrtStDataTable(ds.Tables["SrvPrtSt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSrvPrtSt = ((SrvPrtStDataTable)(base.Tables["SrvPrtSt"]));
            if ((initTable == true)) {
                if ((this.tableSrvPrtSt != null)) {
                    this.tableSrvPrtSt.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ServerPrinterSettingDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ServerPrinterSettingDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSrvPrtSt = new SrvPrtStDataTable();
            base.Tables.Add(this.tableSrvPrtSt);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSrvPrtSt() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ServerPrinterSettingDataSet ds = new ServerPrinterSettingDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SrvPrtStRowChangeEventHandler(object sender, SrvPrtStRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SrvPrtStDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCreateDateTime;
            
            private global::System.Data.DataColumn columnUpdateDateTime;
            
            private global::System.Data.DataColumn columnEnterpriseCode;
            
            private global::System.Data.DataColumn columnGUID;
            
            private global::System.Data.DataColumn columnUpdEmployeeCpde;
            
            private global::System.Data.DataColumn columnUpdAssemblyId1;
            
            private global::System.Data.DataColumn columnUpdAssemblyId2;
            
            private global::System.Data.DataColumn columnLogicalDeleteCode;
            
            private global::System.Data.DataColumn columnPrinterMngNo;
            
            private global::System.Data.DataColumn columnPrinterName;
            
            private global::System.Data.DataColumn columnPrinterPort;
            
            private global::System.Data.DataColumn columnPrinterKind;
            
            private global::System.Data.DataColumn columnDeletedDate;
            
            private global::System.Data.DataColumn columnPrinterKindName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SrvPrtStDataTable() {
                this.TableName = "SrvPrtSt";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SrvPrtStDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SrvPrtStDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateTimeColumn {
                get {
                    return this.columnCreateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateTimeColumn {
                get {
                    return this.columnUpdateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnterpriseCodeColumn {
                get {
                    return this.columnEnterpriseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GUIDColumn {
                get {
                    return this.columnGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdEmployeeCpdeColumn {
                get {
                    return this.columnUpdEmployeeCpde;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdAssemblyId1Column {
                get {
                    return this.columnUpdAssemblyId1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdAssemblyId2Column {
                get {
                    return this.columnUpdAssemblyId2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogicalDeleteCodeColumn {
                get {
                    return this.columnLogicalDeleteCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrinterMngNoColumn {
                get {
                    return this.columnPrinterMngNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrinterNameColumn {
                get {
                    return this.columnPrinterName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrinterPortColumn {
                get {
                    return this.columnPrinterPort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrinterKindColumn {
                get {
                    return this.columnPrinterKind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedDateColumn {
                get {
                    return this.columnDeletedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrinterKindNameColumn {
                get {
                    return this.columnPrinterKindName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SrvPrtStRow this[int index] {
                get {
                    return ((SrvPrtStRow)(this.Rows[index]));
                }
            }
            
            public event SrvPrtStRowChangeEventHandler SrvPrtStRowChanging;
            
            public event SrvPrtStRowChangeEventHandler SrvPrtStRowChanged;
            
            public event SrvPrtStRowChangeEventHandler SrvPrtStRowDeleting;
            
            public event SrvPrtStRowChangeEventHandler SrvPrtStRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSrvPrtStRow(SrvPrtStRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SrvPrtStRow AddSrvPrtStRow(System.DateTime CreateDateTime, System.DateTime UpdateDateTime, string EnterpriseCode, System.Guid GUID, string UpdEmployeeCpde, string UpdAssemblyId1, string UpdAssemblyId2, int LogicalDeleteCode, int PrinterMngNo, string PrinterName, string PrinterPort, int PrinterKind, string DeletedDate, string PrinterKindName) {
                SrvPrtStRow rowSrvPrtStRow = ((SrvPrtStRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CreateDateTime,
                        UpdateDateTime,
                        EnterpriseCode,
                        GUID,
                        UpdEmployeeCpde,
                        UpdAssemblyId1,
                        UpdAssemblyId2,
                        LogicalDeleteCode,
                        PrinterMngNo,
                        PrinterName,
                        PrinterPort,
                        PrinterKind,
                        DeletedDate,
                        PrinterKindName};
                rowSrvPrtStRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSrvPrtStRow);
                return rowSrvPrtStRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SrvPrtStRow FindByPrinterMngNo(int PrinterMngNo) {
                return ((SrvPrtStRow)(this.Rows.Find(new object[] {
                            PrinterMngNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SrvPrtStDataTable cln = ((SrvPrtStDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SrvPrtStDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCreateDateTime = base.Columns["CreateDateTime"];
                this.columnUpdateDateTime = base.Columns["UpdateDateTime"];
                this.columnEnterpriseCode = base.Columns["EnterpriseCode"];
                this.columnGUID = base.Columns["GUID"];
                this.columnUpdEmployeeCpde = base.Columns["UpdEmployeeCpde"];
                this.columnUpdAssemblyId1 = base.Columns["UpdAssemblyId1"];
                this.columnUpdAssemblyId2 = base.Columns["UpdAssemblyId2"];
                this.columnLogicalDeleteCode = base.Columns["LogicalDeleteCode"];
                this.columnPrinterMngNo = base.Columns["PrinterMngNo"];
                this.columnPrinterName = base.Columns["PrinterName"];
                this.columnPrinterPort = base.Columns["PrinterPort"];
                this.columnPrinterKind = base.Columns["PrinterKind"];
                this.columnDeletedDate = base.Columns["DeletedDate"];
                this.columnPrinterKindName = base.Columns["PrinterKindName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCreateDateTime = new global::System.Data.DataColumn("CreateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDateTime);
                this.columnUpdateDateTime = new global::System.Data.DataColumn("UpdateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDateTime);
                this.columnEnterpriseCode = new global::System.Data.DataColumn("EnterpriseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnterpriseCode);
                this.columnGUID = new global::System.Data.DataColumn("GUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGUID);
                this.columnUpdEmployeeCpde = new global::System.Data.DataColumn("UpdEmployeeCpde", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdEmployeeCpde);
                this.columnUpdAssemblyId1 = new global::System.Data.DataColumn("UpdAssemblyId1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdAssemblyId1);
                this.columnUpdAssemblyId2 = new global::System.Data.DataColumn("UpdAssemblyId2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdAssemblyId2);
                this.columnLogicalDeleteCode = new global::System.Data.DataColumn("LogicalDeleteCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogicalDeleteCode);
                this.columnPrinterMngNo = new global::System.Data.DataColumn("PrinterMngNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrinterMngNo);
                this.columnPrinterName = new global::System.Data.DataColumn("PrinterName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrinterName);
                this.columnPrinterPort = new global::System.Data.DataColumn("PrinterPort", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrinterPort);
                this.columnPrinterKind = new global::System.Data.DataColumn("PrinterKind", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrinterKind);
                this.columnDeletedDate = new global::System.Data.DataColumn("DeletedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeletedDate);
                this.columnPrinterKindName = new global::System.Data.DataColumn("PrinterKindName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrinterKindName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPrinterMngNo}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SrvPrtStKey1", new global::System.Data.DataColumn[] {
                                this.columnEnterpriseCode,
                                this.columnPrinterMngNo}, false));
                this.columnCreateDateTime.Caption = "作成日時";
                this.columnUpdateDateTime.Caption = "更新日時";
                this.columnEnterpriseCode.AllowDBNull = false;
                this.columnEnterpriseCode.Caption = "企業コード";
                this.columnUpdEmployeeCpde.Caption = "更新従業員コード";
                this.columnUpdAssemblyId1.Caption = "更新アセンブリID1";
                this.columnUpdAssemblyId2.Caption = "更新アセンブリ2";
                this.columnLogicalDeleteCode.Caption = "論理削除区分";
                this.columnPrinterMngNo.AllowDBNull = false;
                this.columnPrinterMngNo.Unique = true;
                this.columnPrinterMngNo.Caption = "プリンタ管理No";
                this.columnPrinterName.Caption = "プリンタ名";
                this.columnPrinterPort.Caption = "プリンタパス";
                this.columnPrinterKind.Caption = "プリンタ種別";
                this.columnDeletedDate.Caption = "削除日";
                this.columnPrinterKindName.Caption = "プリンタ種別名";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SrvPrtStRow NewSrvPrtStRow() {
                return ((SrvPrtStRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SrvPrtStRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SrvPrtStRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SrvPrtStRowChanged != null)) {
                    this.SrvPrtStRowChanged(this, new SrvPrtStRowChangeEvent(((SrvPrtStRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SrvPrtStRowChanging != null)) {
                    this.SrvPrtStRowChanging(this, new SrvPrtStRowChangeEvent(((SrvPrtStRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SrvPrtStRowDeleted != null)) {
                    this.SrvPrtStRowDeleted(this, new SrvPrtStRowChangeEvent(((SrvPrtStRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SrvPrtStRowDeleting != null)) {
                    this.SrvPrtStRowDeleting(this, new SrvPrtStRowChangeEvent(((SrvPrtStRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSrvPrtStRow(SrvPrtStRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ServerPrinterSettingDataSet ds = new ServerPrinterSettingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SrvPrtStDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SrvPrtStRow : global::System.Data.DataRow {
            
            private SrvPrtStDataTable tableSrvPrtSt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SrvPrtStRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSrvPrtSt = ((SrvPrtStDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSrvPrtSt.CreateDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SrvPrtSt\' にある列 \'CreateDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSrvPrtSt.CreateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSrvPrtSt.UpdateDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SrvPrtSt\' にある列 \'UpdateDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSrvPrtSt.UpdateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnterpriseCode {
                get {
                    return ((string)(this[this.tableSrvPrtSt.EnterpriseCodeColumn]));
                }
                set {
                    this[this.tableSrvPrtSt.EnterpriseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid GUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableSrvPrtSt.GUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SrvPrtSt\' にある列 \'GUID\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSrvPrtSt.GUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdEmployeeCpde {
                get {
                    try {
                        return ((string)(this[this.tableSrvPrtSt.UpdEmployeeCpdeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SrvPrtSt\' にある列 \'UpdEmployeeCpde\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSrvPrtSt.UpdEmployeeCpdeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdAssemblyId1 {
                get {
                    try {
                        return ((string)(this[this.tableSrvPrtSt.UpdAssemblyId1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SrvPrtSt\' にある列 \'UpdAssemblyId1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSrvPrtSt.UpdAssemblyId1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdAssemblyId2 {
                get {
                    try {
                        return ((string)(this[this.tableSrvPrtSt.UpdAssemblyId2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SrvPrtSt\' にある列 \'UpdAssemblyId2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSrvPrtSt.UpdAssemblyId2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LogicalDeleteCode {
                get {
                    try {
                        return ((int)(this[this.tableSrvPrtSt.LogicalDeleteCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SrvPrtSt\' にある列 \'LogicalDeleteCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSrvPrtSt.LogicalDeleteCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrinterMngNo {
                get {
                    return ((int)(this[this.tableSrvPrtSt.PrinterMngNoColumn]));
                }
                set {
                    this[this.tableSrvPrtSt.PrinterMngNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrinterName {
                get {
                    try {
                        return ((string)(this[this.tableSrvPrtSt.PrinterNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SrvPrtSt\' にある列 \'PrinterName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSrvPrtSt.PrinterNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrinterPort {
                get {
                    try {
                        return ((string)(this[this.tableSrvPrtSt.PrinterPortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SrvPrtSt\' にある列 \'PrinterPort\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSrvPrtSt.PrinterPortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrinterKind {
                get {
                    try {
                        return ((int)(this[this.tableSrvPrtSt.PrinterKindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SrvPrtSt\' にある列 \'PrinterKind\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSrvPrtSt.PrinterKindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeletedDate {
                get {
                    try {
                        return ((string)(this[this.tableSrvPrtSt.DeletedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SrvPrtSt\' にある列 \'DeletedDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSrvPrtSt.DeletedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrinterKindName {
                get {
                    try {
                        return ((string)(this[this.tableSrvPrtSt.PrinterKindNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SrvPrtSt\' にある列 \'PrinterKindName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSrvPrtSt.PrinterKindNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateDateTimeNull() {
                return this.IsNull(this.tableSrvPrtSt.CreateDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateDateTimeNull() {
                this[this.tableSrvPrtSt.CreateDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateDateTimeNull() {
                return this.IsNull(this.tableSrvPrtSt.UpdateDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateDateTimeNull() {
                this[this.tableSrvPrtSt.UpdateDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGUIDNull() {
                return this.IsNull(this.tableSrvPrtSt.GUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGUIDNull() {
                this[this.tableSrvPrtSt.GUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdEmployeeCpdeNull() {
                return this.IsNull(this.tableSrvPrtSt.UpdEmployeeCpdeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdEmployeeCpdeNull() {
                this[this.tableSrvPrtSt.UpdEmployeeCpdeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdAssemblyId1Null() {
                return this.IsNull(this.tableSrvPrtSt.UpdAssemblyId1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdAssemblyId1Null() {
                this[this.tableSrvPrtSt.UpdAssemblyId1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdAssemblyId2Null() {
                return this.IsNull(this.tableSrvPrtSt.UpdAssemblyId2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdAssemblyId2Null() {
                this[this.tableSrvPrtSt.UpdAssemblyId2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogicalDeleteCodeNull() {
                return this.IsNull(this.tableSrvPrtSt.LogicalDeleteCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogicalDeleteCodeNull() {
                this[this.tableSrvPrtSt.LogicalDeleteCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrinterNameNull() {
                return this.IsNull(this.tableSrvPrtSt.PrinterNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrinterNameNull() {
                this[this.tableSrvPrtSt.PrinterNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrinterPortNull() {
                return this.IsNull(this.tableSrvPrtSt.PrinterPortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrinterPortNull() {
                this[this.tableSrvPrtSt.PrinterPortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrinterKindNull() {
                return this.IsNull(this.tableSrvPrtSt.PrinterKindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrinterKindNull() {
                this[this.tableSrvPrtSt.PrinterKindColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedDateNull() {
                return this.IsNull(this.tableSrvPrtSt.DeletedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedDateNull() {
                this[this.tableSrvPrtSt.DeletedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrinterKindNameNull() {
                return this.IsNull(this.tableSrvPrtSt.PrinterKindNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrinterKindNameNull() {
                this[this.tableSrvPrtSt.PrinterKindNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SrvPrtStRowChangeEvent : global::System.EventArgs {
            
            private SrvPrtStRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SrvPrtStRowChangeEvent(SrvPrtStRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SrvPrtStRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591