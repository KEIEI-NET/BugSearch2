//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.8762
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InspectDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InspectDataSet : global::System.Data.DataSet {
        
        private InspectListDataTable tableInspectList;
        
        private InspectDataDataTable tableInspectData;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InspectDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InspectDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["InspectList"] != null)) {
                    base.Tables.Add(new InspectListDataTable(ds.Tables["InspectList"]));
                }
                if ((ds.Tables["InspectData"] != null)) {
                    base.Tables.Add(new InspectDataDataTable(ds.Tables["InspectData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InspectListDataTable InspectList {
            get {
                return this.tableInspectList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InspectDataDataTable InspectData {
            get {
                return this.tableInspectData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            InspectDataSet cln = ((InspectDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["InspectList"] != null)) {
                    base.Tables.Add(new InspectListDataTable(ds.Tables["InspectList"]));
                }
                if ((ds.Tables["InspectData"] != null)) {
                    base.Tables.Add(new InspectDataDataTable(ds.Tables["InspectData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableInspectList = ((InspectListDataTable)(base.Tables["InspectList"]));
            if ((initTable == true)) {
                if ((this.tableInspectList != null)) {
                    this.tableInspectList.InitVars();
                }
            }
            this.tableInspectData = ((InspectDataDataTable)(base.Tables["InspectData"]));
            if ((initTable == true)) {
                if ((this.tableInspectData != null)) {
                    this.tableInspectData.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "InspectDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InspectDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableInspectList = new InspectListDataTable();
            base.Tables.Add(this.tableInspectList);
            this.tableInspectData = new InspectDataDataTable();
            base.Tables.Add(this.tableInspectData);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInspectList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInspectData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InspectDataSet ds = new InspectDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void InspectListRowChangeEventHandler(object sender, InspectListRowChangeEvent e);
        
        public delegate void InspectDataRowChangeEventHandler(object sender, InspectDataRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InspectListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSelectFlag;
            
            private global::System.Data.DataColumn columnInspectStatusDisp;
            
            private global::System.Data.DataColumn columnInspectStatus;
            
            private global::System.Data.DataColumn columnGoodsNo;
            
            private global::System.Data.DataColumn columnHandTerminalCodeDisp;
            
            private global::System.Data.DataColumn columnHandTerminalCode;
            
            private global::System.Data.DataColumn columnInputCnt;
            
            private global::System.Data.DataColumn columnShipmentCnt;
            
            private global::System.Data.DataColumn columnCustNmWareNm;
            
            private global::System.Data.DataColumn columnTransaction;
            
            private global::System.Data.DataColumn columnSalesSlipNum;
            
            private global::System.Data.DataColumn columnSalesRowNo;
            
            private global::System.Data.DataColumn columnGoodsMakerCd;
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            private global::System.Data.DataColumn columnAcPaySlipCd;
            
            private global::System.Data.DataColumn columnAcPayTransCd;
            
            private global::System.Data.DataColumn columnShipmentDay;
            
            private global::System.Data.DataColumn columnGoodsName;
            
            private global::System.Data.DataColumn columnWarehouseShelfNo;
            
            private global::System.Data.DataColumn columnEmployeeCode;
            
            private global::System.Data.DataColumn columnInspectDate;
            
            private global::System.Data.DataColumn columnInspectTime;
            
            private global::System.Data.DataColumn columnGoodsMakerName;
            
            private global::System.Data.DataColumn columnSalesSlipNumHF;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectListDataTable() {
                this.TableName = "InspectList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InspectListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectFlagColumn {
                get {
                    return this.columnSelectFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectStatusDispColumn {
                get {
                    return this.columnInspectStatusDisp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectStatusColumn {
                get {
                    return this.columnInspectStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNoColumn {
                get {
                    return this.columnGoodsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HandTerminalCodeDispColumn {
                get {
                    return this.columnHandTerminalCodeDisp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HandTerminalCodeColumn {
                get {
                    return this.columnHandTerminalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InputCntColumn {
                get {
                    return this.columnInputCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipmentCntColumn {
                get {
                    return this.columnShipmentCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustNmWareNmColumn {
                get {
                    return this.columnCustNmWareNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionColumn {
                get {
                    return this.columnTransaction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesSlipNumColumn {
                get {
                    return this.columnSalesSlipNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesRowNoColumn {
                get {
                    return this.columnSalesRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsMakerCdColumn {
                get {
                    return this.columnGoodsMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcPaySlipCdColumn {
                get {
                    return this.columnAcPaySlipCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcPayTransCdColumn {
                get {
                    return this.columnAcPayTransCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipmentDayColumn {
                get {
                    return this.columnShipmentDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNameColumn {
                get {
                    return this.columnGoodsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseShelfNoColumn {
                get {
                    return this.columnWarehouseShelfNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectDateColumn {
                get {
                    return this.columnInspectDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectTimeColumn {
                get {
                    return this.columnInspectTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsMakerNameColumn {
                get {
                    return this.columnGoodsMakerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesSlipNumHFColumn {
                get {
                    return this.columnSalesSlipNumHF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectListRow this[int index] {
                get {
                    return ((InspectListRow)(this.Rows[index]));
                }
            }
            
            public event InspectListRowChangeEventHandler InspectListRowChanging;
            
            public event InspectListRowChangeEventHandler InspectListRowChanged;
            
            public event InspectListRowChangeEventHandler InspectListRowDeleting;
            
            public event InspectListRowChangeEventHandler InspectListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInspectListRow(InspectListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectListRow AddInspectListRow(
                        bool SelectFlag, 
                        string InspectStatusDisp, 
                        int InspectStatus, 
                        string GoodsNo, 
                        string HandTerminalCodeDisp, 
                        string HandTerminalCode, 
                        string InputCnt, 
                        string ShipmentCnt, 
                        string CustNmWareNm, 
                        string Transaction, 
                        string SalesSlipNum, 
                        string SalesRowNo, 
                        string GoodsMakerCd, 
                        string WarehouseCode, 
                        string AcPaySlipCd, 
                        string AcPayTransCd, 
                        string ShipmentDay, 
                        string GoodsName, 
                        string WarehouseShelfNo, 
                        string EmployeeCode, 
                        string InspectDate, 
                        string InspectTime, 
                        string GoodsMakerName, 
                        string SalesSlipNumHF) {
                InspectListRow rowInspectListRow = ((InspectListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SelectFlag,
                        InspectStatusDisp,
                        InspectStatus,
                        GoodsNo,
                        HandTerminalCodeDisp,
                        HandTerminalCode,
                        InputCnt,
                        ShipmentCnt,
                        CustNmWareNm,
                        Transaction,
                        SalesSlipNum,
                        SalesRowNo,
                        GoodsMakerCd,
                        WarehouseCode,
                        AcPaySlipCd,
                        AcPayTransCd,
                        ShipmentDay,
                        GoodsName,
                        WarehouseShelfNo,
                        EmployeeCode,
                        InspectDate,
                        InspectTime,
                        GoodsMakerName,
                        SalesSlipNumHF};
                rowInspectListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInspectListRow);
                return rowInspectListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InspectListDataTable cln = ((InspectListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InspectListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSelectFlag = base.Columns["SelectFlag"];
                this.columnInspectStatusDisp = base.Columns["InspectStatusDisp"];
                this.columnInspectStatus = base.Columns["InspectStatus"];
                this.columnGoodsNo = base.Columns["GoodsNo"];
                this.columnHandTerminalCodeDisp = base.Columns["HandTerminalCodeDisp"];
                this.columnHandTerminalCode = base.Columns["HandTerminalCode"];
                this.columnInputCnt = base.Columns["InputCnt"];
                this.columnShipmentCnt = base.Columns["ShipmentCnt"];
                this.columnCustNmWareNm = base.Columns["CustNmWareNm"];
                this.columnTransaction = base.Columns["Transaction"];
                this.columnSalesSlipNum = base.Columns["SalesSlipNum"];
                this.columnSalesRowNo = base.Columns["SalesRowNo"];
                this.columnGoodsMakerCd = base.Columns["GoodsMakerCd"];
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
                this.columnAcPaySlipCd = base.Columns["AcPaySlipCd"];
                this.columnAcPayTransCd = base.Columns["AcPayTransCd"];
                this.columnShipmentDay = base.Columns["ShipmentDay"];
                this.columnGoodsName = base.Columns["GoodsName"];
                this.columnWarehouseShelfNo = base.Columns["WarehouseShelfNo"];
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnInspectDate = base.Columns["InspectDate"];
                this.columnInspectTime = base.Columns["InspectTime"];
                this.columnGoodsMakerName = base.Columns["GoodsMakerName"];
                this.columnSalesSlipNumHF = base.Columns["SalesSlipNumHF"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSelectFlag = new global::System.Data.DataColumn("SelectFlag", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectFlag);
                this.columnInspectStatusDisp = new global::System.Data.DataColumn("InspectStatusDisp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectStatusDisp);
                this.columnInspectStatus = new global::System.Data.DataColumn("InspectStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectStatus);
                this.columnGoodsNo = new global::System.Data.DataColumn("GoodsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsNo);
                this.columnHandTerminalCodeDisp = new global::System.Data.DataColumn("HandTerminalCodeDisp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHandTerminalCodeDisp);
                this.columnHandTerminalCode = new global::System.Data.DataColumn("HandTerminalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHandTerminalCode);
                this.columnInputCnt = new global::System.Data.DataColumn("InputCnt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputCnt);
                this.columnShipmentCnt = new global::System.Data.DataColumn("ShipmentCnt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipmentCnt);
                this.columnCustNmWareNm = new global::System.Data.DataColumn("CustNmWareNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustNmWareNm);
                this.columnTransaction = new global::System.Data.DataColumn("Transaction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransaction);
                this.columnSalesSlipNum = new global::System.Data.DataColumn("SalesSlipNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesSlipNum);
                this.columnSalesRowNo = new global::System.Data.DataColumn("SalesRowNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesRowNo);
                this.columnGoodsMakerCd = new global::System.Data.DataColumn("GoodsMakerCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsMakerCd);
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.columnAcPaySlipCd = new global::System.Data.DataColumn("AcPaySlipCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcPaySlipCd);
                this.columnAcPayTransCd = new global::System.Data.DataColumn("AcPayTransCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcPayTransCd);
                this.columnShipmentDay = new global::System.Data.DataColumn("ShipmentDay", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipmentDay);
                this.columnGoodsName = new global::System.Data.DataColumn("GoodsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsName);
                this.columnWarehouseShelfNo = new global::System.Data.DataColumn("WarehouseShelfNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseShelfNo);
                this.columnEmployeeCode = new global::System.Data.DataColumn("EmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnInspectDate = new global::System.Data.DataColumn("InspectDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectDate);
                this.columnInspectTime = new global::System.Data.DataColumn("InspectTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectTime);
                this.columnGoodsMakerName = new global::System.Data.DataColumn("GoodsMakerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsMakerName);
                this.columnSalesSlipNumHF = new global::System.Data.DataColumn("SalesSlipNumHF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesSlipNumHF);
                this.columnSelectFlag.Caption = "選択";
                this.columnInspectStatusDisp.Caption = "検";
                this.columnInspectStatus.Caption = "検品ステータス";
                this.columnGoodsNo.Caption = "商品番号";
                this.columnHandTerminalCodeDisp.Caption = "検品";
                this.columnHandTerminalCode.Caption = "ハンディターミナル区分";
                this.columnInputCnt.Caption = "入庫数";
                this.columnShipmentCnt.Caption = "出庫数";
                this.columnCustNmWareNm.Caption = "仕入先/得意先/相手先倉庫";
                this.columnTransaction.Caption = "取引";
                this.columnSalesSlipNum.Caption = "伝票番号";
                this.columnSalesRowNo.Caption = "行番号";
                this.columnGoodsMakerCd.Caption = "商品メーカーコード";
                this.columnWarehouseCode.Caption = "倉庫コード";
                this.columnAcPaySlipCd.Caption = "受払元伝票区分";
                this.columnAcPayTransCd.Caption = "受払元取引区分";
                this.columnShipmentDay.Caption = "入出荷日";
                this.columnGoodsName.Caption = "品名";
                this.columnWarehouseShelfNo.Caption = "棚番";
                this.columnEmployeeCode.Caption = "検品担当者";
                this.columnInspectDate.Caption = "検品日付";
                this.columnInspectTime.Caption = "検品時刻";
                this.columnSalesSlipNumHF.Caption = "伝票番号引当用";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectListRow NewInspectListRow() {
                return ((InspectListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InspectListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InspectListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InspectListRowChanged != null)) {
                    this.InspectListRowChanged(this, new InspectListRowChangeEvent(((InspectListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InspectListRowChanging != null)) {
                    this.InspectListRowChanging(this, new InspectListRowChangeEvent(((InspectListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InspectListRowDeleted != null)) {
                    this.InspectListRowDeleted(this, new InspectListRowChangeEvent(((InspectListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InspectListRowDeleting != null)) {
                    this.InspectListRowDeleting(this, new InspectListRowChangeEvent(((InspectListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInspectListRow(InspectListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InspectDataSet ds = new InspectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InspectListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InspectDataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAcPaySlipCd;
            
            private global::System.Data.DataColumn columnAcPayTransCd;
            
            private global::System.Data.DataColumn columnAcPaySlipNum;
            
            private global::System.Data.DataColumn columnAcPaySlipRowNo;
            
            private global::System.Data.DataColumn columnGoodsMakerCd;
            
            private global::System.Data.DataColumn columnGoodsNo;
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            private global::System.Data.DataColumn columnInspectDate;
            
            private global::System.Data.DataColumn columnInspectTime;
            
            private global::System.Data.DataColumn columnInspectStatus;
            
            private global::System.Data.DataColumn columnInspectCode;
            
            private global::System.Data.DataColumn columnHandTerminalCode;
            
            private global::System.Data.DataColumn columnMachineName;
            
            private global::System.Data.DataColumn columnNo;
            
            private global::System.Data.DataColumn columnEmployeeCode;
            
            private global::System.Data.DataColumn columnAcPaySlipName;
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnInspectCnt;
            
            private global::System.Data.DataColumn columnEnterpriseCode;
            
            private global::System.Data.DataColumn columnInspectDateTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectDataDataTable() {
                this.TableName = "InspectData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InspectDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcPaySlipCdColumn {
                get {
                    return this.columnAcPaySlipCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcPayTransCdColumn {
                get {
                    return this.columnAcPayTransCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcPaySlipNumColumn {
                get {
                    return this.columnAcPaySlipNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcPaySlipRowNoColumn {
                get {
                    return this.columnAcPaySlipRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsMakerCdColumn {
                get {
                    return this.columnGoodsMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNoColumn {
                get {
                    return this.columnGoodsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectDateColumn {
                get {
                    return this.columnInspectDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectTimeColumn {
                get {
                    return this.columnInspectTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectStatusColumn {
                get {
                    return this.columnInspectStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectCodeColumn {
                get {
                    return this.columnInspectCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HandTerminalCodeColumn {
                get {
                    return this.columnHandTerminalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MachineNameColumn {
                get {
                    return this.columnMachineName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoColumn {
                get {
                    return this.columnNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcPaySlipNameColumn {
                get {
                    return this.columnAcPaySlipName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectCntColumn {
                get {
                    return this.columnInspectCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnterpriseCodeColumn {
                get {
                    return this.columnEnterpriseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectDateTimeColumn {
                get {
                    return this.columnInspectDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectDataRow this[int index] {
                get {
                    return ((InspectDataRow)(this.Rows[index]));
                }
            }
            
            public event InspectDataRowChangeEventHandler InspectDataRowChanging;
            
            public event InspectDataRowChangeEventHandler InspectDataRowChanged;
            
            public event InspectDataRowChangeEventHandler InspectDataRowDeleting;
            
            public event InspectDataRowChangeEventHandler InspectDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInspectDataRow(InspectDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectDataRow AddInspectDataRow(
                        int AcPaySlipCd, 
                        int AcPayTransCd, 
                        string AcPaySlipNum, 
                        int AcPaySlipRowNo, 
                        int GoodsMakerCd, 
                        string GoodsNo, 
                        string WarehouseCode, 
                        string InspectDate, 
                        string InspectTime, 
                        int InspectStatus, 
                        int InspectCode, 
                        int HandTerminalCode, 
                        string MachineName, 
                        int No, 
                        string EmployeeCode, 
                        string AcPaySlipName, 
                        string EmployeeName, 
                        string InspectCnt, 
                        string EnterpriseCode, 
                        long InspectDateTime) {
                InspectDataRow rowInspectDataRow = ((InspectDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AcPaySlipCd,
                        AcPayTransCd,
                        AcPaySlipNum,
                        AcPaySlipRowNo,
                        GoodsMakerCd,
                        GoodsNo,
                        WarehouseCode,
                        InspectDate,
                        InspectTime,
                        InspectStatus,
                        InspectCode,
                        HandTerminalCode,
                        MachineName,
                        No,
                        EmployeeCode,
                        AcPaySlipName,
                        EmployeeName,
                        InspectCnt,
                        EnterpriseCode,
                        InspectDateTime};
                rowInspectDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInspectDataRow);
                return rowInspectDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InspectDataDataTable cln = ((InspectDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InspectDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAcPaySlipCd = base.Columns["AcPaySlipCd"];
                this.columnAcPayTransCd = base.Columns["AcPayTransCd"];
                this.columnAcPaySlipNum = base.Columns["AcPaySlipNum"];
                this.columnAcPaySlipRowNo = base.Columns["AcPaySlipRowNo"];
                this.columnGoodsMakerCd = base.Columns["GoodsMakerCd"];
                this.columnGoodsNo = base.Columns["GoodsNo"];
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
                this.columnInspectDate = base.Columns["InspectDate"];
                this.columnInspectTime = base.Columns["InspectTime"];
                this.columnInspectStatus = base.Columns["InspectStatus"];
                this.columnInspectCode = base.Columns["InspectCode"];
                this.columnHandTerminalCode = base.Columns["HandTerminalCode"];
                this.columnMachineName = base.Columns["MachineName"];
                this.columnNo = base.Columns["No"];
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnAcPaySlipName = base.Columns["AcPaySlipName"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnInspectCnt = base.Columns["InspectCnt"];
                this.columnEnterpriseCode = base.Columns["EnterpriseCode"];
                this.columnInspectDateTime = base.Columns["InspectDateTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAcPaySlipCd = new global::System.Data.DataColumn("AcPaySlipCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcPaySlipCd);
                this.columnAcPayTransCd = new global::System.Data.DataColumn("AcPayTransCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcPayTransCd);
                this.columnAcPaySlipNum = new global::System.Data.DataColumn("AcPaySlipNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcPaySlipNum);
                this.columnAcPaySlipRowNo = new global::System.Data.DataColumn("AcPaySlipRowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcPaySlipRowNo);
                this.columnGoodsMakerCd = new global::System.Data.DataColumn("GoodsMakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsMakerCd);
                this.columnGoodsNo = new global::System.Data.DataColumn("GoodsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsNo);
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.columnInspectDate = new global::System.Data.DataColumn("InspectDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectDate);
                this.columnInspectTime = new global::System.Data.DataColumn("InspectTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectTime);
                this.columnInspectStatus = new global::System.Data.DataColumn("InspectStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectStatus);
                this.columnInspectCode = new global::System.Data.DataColumn("InspectCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectCode);
                this.columnHandTerminalCode = new global::System.Data.DataColumn("HandTerminalCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHandTerminalCode);
                this.columnMachineName = new global::System.Data.DataColumn("MachineName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMachineName);
                this.columnNo = new global::System.Data.DataColumn("No", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo);
                this.columnEmployeeCode = new global::System.Data.DataColumn("EmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnAcPaySlipName = new global::System.Data.DataColumn("AcPaySlipName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcPaySlipName);
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnInspectCnt = new global::System.Data.DataColumn("InspectCnt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectCnt);
                this.columnEnterpriseCode = new global::System.Data.DataColumn("EnterpriseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnterpriseCode);
                this.columnInspectDateTime = new global::System.Data.DataColumn("InspectDateTime", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectDateTime);
                this.columnAcPaySlipCd.Caption = "受払元伝票区分";
                this.columnAcPaySlipCd.DefaultValue = ((int)(0));
                this.columnAcPayTransCd.Caption = "受払元取引区分";
                this.columnAcPayTransCd.DefaultValue = ((int)(0));
                this.columnAcPaySlipNum.Caption = "受払元伝票番号";
                this.columnAcPaySlipRowNo.Caption = "受払元行番号";
                this.columnAcPaySlipRowNo.DefaultValue = ((int)(0));
                this.columnGoodsMakerCd.Caption = "商品メーカーコード";
                this.columnGoodsMakerCd.DefaultValue = ((int)(0));
                this.columnGoodsNo.Caption = "商品番号";
                this.columnWarehouseCode.Caption = "倉庫コード";
                this.columnInspectDate.Caption = "検品日";
                this.columnInspectTime.Caption = "検品時間";
                this.columnInspectStatus.Caption = "検品ステータス";
                this.columnInspectStatus.DefaultValue = ((int)(0));
                this.columnInspectCode.Caption = "検品区分";
                this.columnInspectCode.DefaultValue = ((int)(0));
                this.columnHandTerminalCode.Caption = "ハンディターミナル区分";
                this.columnHandTerminalCode.DefaultValue = ((int)(0));
                this.columnMachineName.Caption = "端末名称";
                this.columnNo.DefaultValue = ((int)(0));
                this.columnEmployeeCode.Caption = "担当者コード";
                this.columnAcPaySlipName.Caption = "処理区分";
                this.columnInspectDateTime.DefaultValue = ((long)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectDataRow NewInspectDataRow() {
                return ((InspectDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InspectDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InspectDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InspectDataRowChanged != null)) {
                    this.InspectDataRowChanged(this, new InspectDataRowChangeEvent(((InspectDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InspectDataRowChanging != null)) {
                    this.InspectDataRowChanging(this, new InspectDataRowChangeEvent(((InspectDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InspectDataRowDeleted != null)) {
                    this.InspectDataRowDeleted(this, new InspectDataRowChangeEvent(((InspectDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InspectDataRowDeleting != null)) {
                    this.InspectDataRowDeleting(this, new InspectDataRowChangeEvent(((InspectDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInspectDataRow(InspectDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InspectDataSet ds = new InspectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InspectDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InspectListRow : global::System.Data.DataRow {
            
            private InspectListDataTable tableInspectList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInspectList = ((InspectListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SelectFlag {
                get {
                    try {
                        return ((bool)(this[this.tableInspectList.SelectFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'SelectFlag\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.SelectFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectStatusDisp {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.InspectStatusDispColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'InspectStatusDisp\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.InspectStatusDispColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InspectStatus {
                get {
                    try {
                        return ((int)(this[this.tableInspectList.InspectStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'InspectStatus\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.InspectStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsNo {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.GoodsNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'GoodsNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.GoodsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HandTerminalCodeDisp {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.HandTerminalCodeDispColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'HandTerminalCodeDisp\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.HandTerminalCodeDispColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HandTerminalCode {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.HandTerminalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'HandTerminalCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.HandTerminalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InputCnt {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.InputCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'InputCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.InputCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipmentCnt {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.ShipmentCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'ShipmentCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.ShipmentCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustNmWareNm {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.CustNmWareNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'CustNmWareNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.CustNmWareNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Transaction {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.TransactionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'Transaction\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.TransactionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesSlipNum {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.SalesSlipNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'SalesSlipNum\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.SalesSlipNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesRowNo {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.SalesRowNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'SalesRowNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.SalesRowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsMakerCd {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.GoodsMakerCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'GoodsMakerCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.GoodsMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.WarehouseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'WarehouseCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcPaySlipCd {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.AcPaySlipCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'AcPaySlipCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.AcPaySlipCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcPayTransCd {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.AcPayTransCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'AcPayTransCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.AcPayTransCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipmentDay {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.ShipmentDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'ShipmentDay\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.ShipmentDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsName {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.GoodsNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'GoodsName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.GoodsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseShelfNo {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.WarehouseShelfNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'WarehouseShelfNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.WarehouseShelfNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.EmployeeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'EmployeeCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.EmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectDate {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.InspectDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'InspectDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.InspectDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectTime {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.InspectTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'InspectTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.InspectTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsMakerName {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.GoodsMakerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'GoodsMakerName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.GoodsMakerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesSlipNumHF {
                get {
                    try {
                        return ((string)(this[this.tableInspectList.SalesSlipNumHFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectList\' にある列 \'SalesSlipNumHF\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectList.SalesSlipNumHFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectFlagNull() {
                return this.IsNull(this.tableInspectList.SelectFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectFlagNull() {
                this[this.tableInspectList.SelectFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectStatusDispNull() {
                return this.IsNull(this.tableInspectList.InspectStatusDispColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectStatusDispNull() {
                this[this.tableInspectList.InspectStatusDispColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectStatusNull() {
                return this.IsNull(this.tableInspectList.InspectStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectStatusNull() {
                this[this.tableInspectList.InspectStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsNoNull() {
                return this.IsNull(this.tableInspectList.GoodsNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsNoNull() {
                this[this.tableInspectList.GoodsNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHandTerminalCodeDispNull() {
                return this.IsNull(this.tableInspectList.HandTerminalCodeDispColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHandTerminalCodeDispNull() {
                this[this.tableInspectList.HandTerminalCodeDispColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHandTerminalCodeNull() {
                return this.IsNull(this.tableInspectList.HandTerminalCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHandTerminalCodeNull() {
                this[this.tableInspectList.HandTerminalCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInputCntNull() {
                return this.IsNull(this.tableInspectList.InputCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInputCntNull() {
                this[this.tableInspectList.InputCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipmentCntNull() {
                return this.IsNull(this.tableInspectList.ShipmentCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipmentCntNull() {
                this[this.tableInspectList.ShipmentCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustNmWareNmNull() {
                return this.IsNull(this.tableInspectList.CustNmWareNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustNmWareNmNull() {
                this[this.tableInspectList.CustNmWareNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionNull() {
                return this.IsNull(this.tableInspectList.TransactionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionNull() {
                this[this.tableInspectList.TransactionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesSlipNumNull() {
                return this.IsNull(this.tableInspectList.SalesSlipNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesSlipNumNull() {
                this[this.tableInspectList.SalesSlipNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesRowNoNull() {
                return this.IsNull(this.tableInspectList.SalesRowNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesRowNoNull() {
                this[this.tableInspectList.SalesRowNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsMakerCdNull() {
                return this.IsNull(this.tableInspectList.GoodsMakerCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsMakerCdNull() {
                this[this.tableInspectList.GoodsMakerCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseCodeNull() {
                return this.IsNull(this.tableInspectList.WarehouseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseCodeNull() {
                this[this.tableInspectList.WarehouseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcPaySlipCdNull() {
                return this.IsNull(this.tableInspectList.AcPaySlipCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcPaySlipCdNull() {
                this[this.tableInspectList.AcPaySlipCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcPayTransCdNull() {
                return this.IsNull(this.tableInspectList.AcPayTransCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcPayTransCdNull() {
                this[this.tableInspectList.AcPayTransCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipmentDayNull() {
                return this.IsNull(this.tableInspectList.ShipmentDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipmentDayNull() {
                this[this.tableInspectList.ShipmentDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsNameNull() {
                return this.IsNull(this.tableInspectList.GoodsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsNameNull() {
                this[this.tableInspectList.GoodsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseShelfNoNull() {
                return this.IsNull(this.tableInspectList.WarehouseShelfNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseShelfNoNull() {
                this[this.tableInspectList.WarehouseShelfNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableInspectList.EmployeeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableInspectList.EmployeeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectDateNull() {
                return this.IsNull(this.tableInspectList.InspectDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectDateNull() {
                this[this.tableInspectList.InspectDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectTimeNull() {
                return this.IsNull(this.tableInspectList.InspectTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectTimeNull() {
                this[this.tableInspectList.InspectTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsMakerNameNull() {
                return this.IsNull(this.tableInspectList.GoodsMakerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsMakerNameNull() {
                this[this.tableInspectList.GoodsMakerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesSlipNumHFNull() {
                return this.IsNull(this.tableInspectList.SalesSlipNumHFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesSlipNumHFNull() {
                this[this.tableInspectList.SalesSlipNumHFColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InspectDataRow : global::System.Data.DataRow {
            
            private InspectDataDataTable tableInspectData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInspectData = ((InspectDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AcPaySlipCd {
                get {
                    try {
                        return ((int)(this[this.tableInspectData.AcPaySlipCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'AcPaySlipCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.AcPaySlipCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AcPayTransCd {
                get {
                    try {
                        return ((int)(this[this.tableInspectData.AcPayTransCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'AcPayTransCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.AcPayTransCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcPaySlipNum {
                get {
                    try {
                        return ((string)(this[this.tableInspectData.AcPaySlipNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'AcPaySlipNum\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.AcPaySlipNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AcPaySlipRowNo {
                get {
                    try {
                        return ((int)(this[this.tableInspectData.AcPaySlipRowNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'AcPaySlipRowNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.AcPaySlipRowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GoodsMakerCd {
                get {
                    try {
                        return ((int)(this[this.tableInspectData.GoodsMakerCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'GoodsMakerCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.GoodsMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsNo {
                get {
                    try {
                        return ((string)(this[this.tableInspectData.GoodsNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'GoodsNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.GoodsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    try {
                        return ((string)(this[this.tableInspectData.WarehouseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'WarehouseCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectDate {
                get {
                    try {
                        return ((string)(this[this.tableInspectData.InspectDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'InspectDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.InspectDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectTime {
                get {
                    try {
                        return ((string)(this[this.tableInspectData.InspectTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'InspectTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.InspectTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InspectStatus {
                get {
                    try {
                        return ((int)(this[this.tableInspectData.InspectStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'InspectStatus\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.InspectStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InspectCode {
                get {
                    try {
                        return ((int)(this[this.tableInspectData.InspectCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'InspectCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.InspectCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HandTerminalCode {
                get {
                    try {
                        return ((int)(this[this.tableInspectData.HandTerminalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'HandTerminalCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.HandTerminalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MachineName {
                get {
                    try {
                        return ((string)(this[this.tableInspectData.MachineNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'MachineName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.MachineNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int No {
                get {
                    try {
                        return ((int)(this[this.tableInspectData.NoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'No\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableInspectData.EmployeeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'EmployeeCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.EmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcPaySlipName {
                get {
                    try {
                        return ((string)(this[this.tableInspectData.AcPaySlipNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'AcPaySlipName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.AcPaySlipNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tableInspectData.EmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'EmployeeName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectCnt {
                get {
                    try {
                        return ((string)(this[this.tableInspectData.InspectCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'InspectCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.InspectCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnterpriseCode {
                get {
                    try {
                        return ((string)(this[this.tableInspectData.EnterpriseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'EnterpriseCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.EnterpriseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long InspectDateTime {
                get {
                    try {
                        return ((long)(this[this.tableInspectData.InspectDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InspectData\' にある列 \'InspectDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInspectData.InspectDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcPaySlipCdNull() {
                return this.IsNull(this.tableInspectData.AcPaySlipCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcPaySlipCdNull() {
                this[this.tableInspectData.AcPaySlipCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcPayTransCdNull() {
                return this.IsNull(this.tableInspectData.AcPayTransCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcPayTransCdNull() {
                this[this.tableInspectData.AcPayTransCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcPaySlipNumNull() {
                return this.IsNull(this.tableInspectData.AcPaySlipNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcPaySlipNumNull() {
                this[this.tableInspectData.AcPaySlipNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcPaySlipRowNoNull() {
                return this.IsNull(this.tableInspectData.AcPaySlipRowNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcPaySlipRowNoNull() {
                this[this.tableInspectData.AcPaySlipRowNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsMakerCdNull() {
                return this.IsNull(this.tableInspectData.GoodsMakerCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsMakerCdNull() {
                this[this.tableInspectData.GoodsMakerCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsNoNull() {
                return this.IsNull(this.tableInspectData.GoodsNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsNoNull() {
                this[this.tableInspectData.GoodsNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseCodeNull() {
                return this.IsNull(this.tableInspectData.WarehouseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseCodeNull() {
                this[this.tableInspectData.WarehouseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectDateNull() {
                return this.IsNull(this.tableInspectData.InspectDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectDateNull() {
                this[this.tableInspectData.InspectDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectTimeNull() {
                return this.IsNull(this.tableInspectData.InspectTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectTimeNull() {
                this[this.tableInspectData.InspectTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectStatusNull() {
                return this.IsNull(this.tableInspectData.InspectStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectStatusNull() {
                this[this.tableInspectData.InspectStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectCodeNull() {
                return this.IsNull(this.tableInspectData.InspectCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectCodeNull() {
                this[this.tableInspectData.InspectCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHandTerminalCodeNull() {
                return this.IsNull(this.tableInspectData.HandTerminalCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHandTerminalCodeNull() {
                this[this.tableInspectData.HandTerminalCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMachineNameNull() {
                return this.IsNull(this.tableInspectData.MachineNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMachineNameNull() {
                this[this.tableInspectData.MachineNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoNull() {
                return this.IsNull(this.tableInspectData.NoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoNull() {
                this[this.tableInspectData.NoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableInspectData.EmployeeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableInspectData.EmployeeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcPaySlipNameNull() {
                return this.IsNull(this.tableInspectData.AcPaySlipNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcPaySlipNameNull() {
                this[this.tableInspectData.AcPaySlipNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tableInspectData.EmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeNameNull() {
                this[this.tableInspectData.EmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectCntNull() {
                return this.IsNull(this.tableInspectData.InspectCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectCntNull() {
                this[this.tableInspectData.InspectCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnterpriseCodeNull() {
                return this.IsNull(this.tableInspectData.EnterpriseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnterpriseCodeNull() {
                this[this.tableInspectData.EnterpriseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectDateTimeNull() {
                return this.IsNull(this.tableInspectData.InspectDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectDateTimeNull() {
                this[this.tableInspectData.InspectDateTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InspectListRowChangeEvent : global::System.EventArgs {
            
            private InspectListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectListRowChangeEvent(InspectListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InspectDataRowChangeEvent : global::System.EventArgs {
            
            private InspectDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectDataRowChangeEvent(InspectDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591