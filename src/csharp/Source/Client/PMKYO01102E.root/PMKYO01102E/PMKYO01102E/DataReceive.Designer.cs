//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3623
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.UIData {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataReceive")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataReceive : global::System.Data.DataSet {
        
        private DataReceiveConditionDataTable tableDataReceiveCondition;
        
        private SettingDataTable tableSetting;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataReceive() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataReceive(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataReceiveCondition"] != null)) {
                    base.Tables.Add(new DataReceiveConditionDataTable(ds.Tables["DataReceiveCondition"]));
                }
                if ((ds.Tables["Setting"] != null)) {
                    base.Tables.Add(new SettingDataTable(ds.Tables["Setting"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataReceiveConditionDataTable DataReceiveCondition {
            get {
                return this.tableDataReceiveCondition;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SettingDataTable Setting {
            get {
                return this.tableSetting;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataReceive cln = ((DataReceive)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataReceiveCondition"] != null)) {
                    base.Tables.Add(new DataReceiveConditionDataTable(ds.Tables["DataReceiveCondition"]));
                }
                if ((ds.Tables["Setting"] != null)) {
                    base.Tables.Add(new SettingDataTable(ds.Tables["Setting"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDataReceiveCondition = ((DataReceiveConditionDataTable)(base.Tables["DataReceiveCondition"]));
            if ((initTable == true)) {
                if ((this.tableDataReceiveCondition != null)) {
                    this.tableDataReceiveCondition.InitVars();
                }
            }
            this.tableSetting = ((SettingDataTable)(base.Tables["Setting"]));
            if ((initTable == true)) {
                if ((this.tableSetting != null)) {
                    this.tableSetting.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataReceive";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataReceive.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataReceiveCondition = new DataReceiveConditionDataTable();
            base.Tables.Add(this.tableDataReceiveCondition);
            this.tableSetting = new SettingDataTable();
            base.Tables.Add(this.tableSetting);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataReceiveCondition() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSetting() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataReceive ds = new DataReceive();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DataReceiveConditionRowChangeEventHandler(object sender, DataReceiveConditionRowChangeEvent e);
        
        public delegate void SettingRowChangeEventHandler(object sender, SettingRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataReceiveConditionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnConditionSectionCd;
            
            private global::System.Data.DataColumn columnConditionSectionNm;
            
            private global::System.Data.DataColumn columnConditionDestSectionCd;
            
            private global::System.Data.DataColumn columnConditionDestSectionNm;

            private global::System.Data.DataColumn columnConditionExtraConDiv; // ADD 2011/11/01 xupz

            private global::System.Data.DataColumn columnConditionStartDate;

            private global::System.Data.DataColumn columnConditionStartTime;
            
            private global::System.Data.DataColumn columnConditionEndDate;
            
            private global::System.Data.DataColumn columnConditionEndTime;
            
            private static System.DateTime columnConditionEndDate_defaultValue = global::System.DateTime.Parse("01/01/0001 00:00:00");
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataReceiveConditionDataTable() {
                this.TableName = "DataReceiveCondition";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataReceiveConditionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataReceiveConditionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionSectionCdColumn {
                get {
                    return this.columnConditionSectionCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionSectionNmColumn {
                get {
                    return this.columnConditionSectionNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionDestSectionCdColumn {
                get {
                    return this.columnConditionDestSectionCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionDestSectionNmColumn {
                get {
                    return this.columnConditionDestSectionNm;
                }
            }

            // ----- ADD 2011/11/01 xupz---------->>>>>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionExtraConDivColumn {
                get
                {
                    return this.columnConditionExtraConDiv;
                }
            }
            // ----- ADD 2011/11/01 xupz----------<<<<<

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionStartDateColumn {
                get {
                    return this.columnConditionStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionStartTimeColumn {
                get {
                    return this.columnConditionStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionEndDateColumn {
                get {
                    return this.columnConditionEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionEndTimeColumn {
                get {
                    return this.columnConditionEndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataReceiveConditionRow this[int index] {
                get {
                    return ((DataReceiveConditionRow)(this.Rows[index]));
                }
            }
            
            public event DataReceiveConditionRowChangeEventHandler DataReceiveConditionRowChanging;
            
            public event DataReceiveConditionRowChangeEventHandler DataReceiveConditionRowChanged;
            
            public event DataReceiveConditionRowChangeEventHandler DataReceiveConditionRowDeleting;
            
            public event DataReceiveConditionRowChangeEventHandler DataReceiveConditionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataReceiveConditionRow(DataReceiveConditionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            //public DataReceiveConditionRow AddDataReceiveConditionRow(string ConditionSectionCd, string ConditionSectionNm, string ConditionDestSectionCd, string ConditionDestSectionNm, System.DateTime ConditionStartDate, string ConditionStartTime, System.DateTime ConditionEndDate, string ConditionEndTime) { // DEL 2011/11/01 xupz
            public DataReceiveConditionRow AddDataReceiveConditionRow(string ConditionSectionCd, string ConditionSectionNm, string ConditionDestSectionCd, string ConditionDestSectionNm, string ConditionExtraConDiv, System.DateTime ConditionStartDate, string ConditionStartTime, System.DateTime ConditionEndDate, string ConditionEndTime)
            { // ADD 2011/11/01 xupz
                DataReceiveConditionRow rowDataReceiveConditionRow = ((DataReceiveConditionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConditionSectionCd,
                        ConditionSectionNm,
                        ConditionDestSectionCd,
                        ConditionDestSectionNm,
                        ConditionExtraConDiv, //ADD 2011/11/01 xupz
                        ConditionStartDate,
                        ConditionStartTime,
                        ConditionEndDate,
                        ConditionEndTime};
                rowDataReceiveConditionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataReceiveConditionRow);
                return rowDataReceiveConditionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataReceiveConditionDataTable cln = ((DataReceiveConditionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataReceiveConditionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConditionSectionCd = base.Columns["ConditionSectionCd"];
                this.columnConditionSectionNm = base.Columns["ConditionSectionNm"];
                this.columnConditionDestSectionCd = base.Columns["ConditionDestSectionCd"];
                this.columnConditionDestSectionNm = base.Columns["ConditionDestSectionNm"];
                this.columnConditionExtraConDiv = base.Columns["ConditionExtraConDiv"]; // ADD 2011/11/01 xupz
                this.columnConditionStartDate = base.Columns["ConditionStartDate"];
                this.columnConditionStartTime = base.Columns["ConditionStartTime"];
                this.columnConditionEndDate = base.Columns["ConditionEndDate"];
                this.columnConditionEndTime = base.Columns["ConditionEndTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConditionSectionCd = new global::System.Data.DataColumn("ConditionSectionCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionSectionCd);
                this.columnConditionSectionNm = new global::System.Data.DataColumn("ConditionSectionNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionSectionNm);
                this.columnConditionDestSectionCd = new global::System.Data.DataColumn("ConditionDestSectionCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionDestSectionCd);
                this.columnConditionDestSectionNm = new global::System.Data.DataColumn("ConditionDestSectionNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionDestSectionNm);
                // ----- ADD 2011/11/01 xupz---------->>>>>
                this.columnConditionExtraConDiv = new global::System.Data.DataColumn("ConditionExtraConDiv", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionExtraConDiv);
                // ----- ADD 2011/11/01 xupz----------<<<<<
                this.columnConditionStartDate = new global::System.Data.DataColumn("ConditionStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionStartDate);
                this.columnConditionStartTime = new global::System.Data.DataColumn("ConditionStartTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionStartTime);
                this.columnConditionEndDate = new global::System.Data.DataColumn("ConditionEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionEndDate);
                this.columnConditionEndTime = new global::System.Data.DataColumn("ConditionEndTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionEndTime);
                this.columnConditionSectionCd.Caption = "送信元拠点コード";
                this.columnConditionSectionNm.Caption = "送信元拠点";
                this.columnConditionDestSectionCd.Caption = "受信対象拠点コード";
                this.columnConditionDestSectionNm.Caption = "受信対象拠点";
                this.columnConditionExtraConDiv.Caption = "抽出条件区分"; // ADD 2011/11/01 xupz
                this.columnConditionStartDate.Caption = "開始日付";
                this.columnConditionStartTime.Caption = "開始時間";
                this.columnConditionEndDate.Caption = "終了日付";
                this.columnConditionEndDate.DefaultValue = ((System.DateTime)(DataReceiveConditionDataTable.columnConditionEndDate_defaultValue));
                this.columnConditionEndTime.Caption = "終了時間";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataReceiveConditionRow NewDataReceiveConditionRow() {
                return ((DataReceiveConditionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataReceiveConditionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataReceiveConditionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataReceiveConditionRowChanged != null)) {
                    this.DataReceiveConditionRowChanged(this, new DataReceiveConditionRowChangeEvent(((DataReceiveConditionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataReceiveConditionRowChanging != null)) {
                    this.DataReceiveConditionRowChanging(this, new DataReceiveConditionRowChangeEvent(((DataReceiveConditionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataReceiveConditionRowDeleted != null)) {
                    this.DataReceiveConditionRowDeleted(this, new DataReceiveConditionRowChangeEvent(((DataReceiveConditionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataReceiveConditionRowDeleting != null)) {
                    this.DataReceiveConditionRowDeleting(this, new DataReceiveConditionRowChangeEvent(((DataReceiveConditionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataReceiveConditionRow(DataReceiveConditionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataReceive ds = new DataReceive();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataReceiveConditionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SettingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnResultRowNo;
            
            private global::System.Data.DataColumn columnResultName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingDataTable() {
                this.TableName = "Setting";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SettingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SettingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultRowNoColumn {
                get {
                    return this.columnResultRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultNameColumn {
                get {
                    return this.columnResultName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow this[int index] {
                get {
                    return ((SettingRow)(this.Rows[index]));
                }
            }
            
            public event SettingRowChangeEventHandler SettingRowChanging;
            
            public event SettingRowChangeEventHandler SettingRowChanged;
            
            public event SettingRowChangeEventHandler SettingRowDeleting;
            
            public event SettingRowChangeEventHandler SettingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSettingRow(SettingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow AddSettingRow(int ResultRowNo, string ResultName) {
                SettingRow rowSettingRow = ((SettingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ResultRowNo,
                        ResultName};
                rowSettingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSettingRow);
                return rowSettingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow FindByResultRowNo(int ResultRowNo) {
                return ((SettingRow)(this.Rows.Find(new object[] {
                            ResultRowNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SettingDataTable cln = ((SettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SettingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnResultRowNo = base.Columns["ResultRowNo"];
                this.columnResultName = base.Columns["ResultName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnResultRowNo = new global::System.Data.DataColumn("ResultRowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResultRowNo);
                this.columnResultName = new global::System.Data.DataColumn("ResultName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResultName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SettingKey1", new global::System.Data.DataColumn[] {
                                this.columnResultRowNo}, true));
                this.columnResultRowNo.AllowDBNull = false;
                this.columnResultRowNo.Unique = true;
                this.columnResultRowNo.Caption = "No.";
                this.columnResultRowNo.DefaultValue = ((int)(0));
                this.columnResultName.Caption = "更新データ";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow NewSettingRow() {
                return ((SettingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SettingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SettingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SettingRowChanged != null)) {
                    this.SettingRowChanged(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SettingRowChanging != null)) {
                    this.SettingRowChanging(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SettingRowDeleted != null)) {
                    this.SettingRowDeleted(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SettingRowDeleting != null)) {
                    this.SettingRowDeleting(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSettingRow(SettingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataReceive ds = new DataReceive();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SettingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataReceiveConditionRow : global::System.Data.DataRow {
            
            private DataReceiveConditionDataTable tableDataReceiveCondition;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataReceiveConditionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataReceiveCondition = ((DataReceiveConditionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConditionSectionCd {
                get {
                    try {
                        return ((string)(this[this.tableDataReceiveCondition.ConditionSectionCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataReceiveCondition\' にある列 \'ConditionSectionCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataReceiveCondition.ConditionSectionCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConditionSectionNm {
                get {
                    try {
                        return ((string)(this[this.tableDataReceiveCondition.ConditionSectionNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataReceiveCondition\' にある列 \'ConditionSectionNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataReceiveCondition.ConditionSectionNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConditionDestSectionCd {
                get {
                    try {
                        return ((string)(this[this.tableDataReceiveCondition.ConditionDestSectionCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataReceiveCondition\' にある列 \'ConditionDestSectionCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataReceiveCondition.ConditionDestSectionCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConditionDestSectionNm {
                get {
                    try {
                        return ((string)(this[this.tableDataReceiveCondition.ConditionDestSectionNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataReceiveCondition\' にある列 \'ConditionDestSectionNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataReceiveCondition.ConditionDestSectionNmColumn] = value;
                }
            }

            // ----- ADD 2011/11/01 xupz---------->>>>>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConditionExtraConDiv {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDataReceiveCondition.ConditionExtraConDivColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataReceiveCondition\' にある列 \'ConditionExtraConDiv\' の値は DBNull です。", e);
                    }
                }
                set
                {
                    this[this.tableDataReceiveCondition.ConditionExtraConDivColumn] = value;
                }
            }
            // ----- ADD 2011/11/01 xupz----------<<<<<
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ConditionStartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDataReceiveCondition.ConditionStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataReceiveCondition\' にある列 \'ConditionStartDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataReceiveCondition.ConditionStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConditionStartTime {
                get {
                    if (this.IsConditionStartTimeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableDataReceiveCondition.ConditionStartTimeColumn]));
                    }
                }
                set {
                    this[this.tableDataReceiveCondition.ConditionStartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ConditionEndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDataReceiveCondition.ConditionEndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataReceiveCondition\' にある列 \'ConditionEndDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataReceiveCondition.ConditionEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConditionEndTime {
                get {
                    if (this.IsConditionEndTimeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableDataReceiveCondition.ConditionEndTimeColumn]));
                    }
                }
                set {
                    this[this.tableDataReceiveCondition.ConditionEndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionSectionCdNull() {
                return this.IsNull(this.tableDataReceiveCondition.ConditionSectionCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionSectionCdNull() {
                this[this.tableDataReceiveCondition.ConditionSectionCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionSectionNmNull() {
                return this.IsNull(this.tableDataReceiveCondition.ConditionSectionNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionSectionNmNull() {
                this[this.tableDataReceiveCondition.ConditionSectionNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionDestSectionCdNull() {
                return this.IsNull(this.tableDataReceiveCondition.ConditionDestSectionCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionDestSectionCdNull() {
                this[this.tableDataReceiveCondition.ConditionDestSectionCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionDestSectionNmNull() {
                return this.IsNull(this.tableDataReceiveCondition.ConditionDestSectionNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionDestSectionNmNull() {
                this[this.tableDataReceiveCondition.ConditionDestSectionNmColumn] = global::System.Convert.DBNull;
            }

            // ----- ADD 2011/11/01 xupz---------->>>>>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionExtraConDivNull()
            {
                return this.IsNull(this.tableDataReceiveCondition.ConditionExtraConDivColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionExtraConDivNull()
            {
                this[this.tableDataReceiveCondition.ConditionExtraConDivColumn] = global::System.Convert.DBNull;
            }
            // ----- ADD 2011/11/01 xupz----------<<<<<
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionStartDateNull() {
                return this.IsNull(this.tableDataReceiveCondition.ConditionStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionStartDateNull() {
                this[this.tableDataReceiveCondition.ConditionStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionStartTimeNull() {
                return this.IsNull(this.tableDataReceiveCondition.ConditionStartTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionStartTimeNull() {
                this[this.tableDataReceiveCondition.ConditionStartTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionEndDateNull() {
                return this.IsNull(this.tableDataReceiveCondition.ConditionEndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionEndDateNull() {
                this[this.tableDataReceiveCondition.ConditionEndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionEndTimeNull() {
                return this.IsNull(this.tableDataReceiveCondition.ConditionEndTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionEndTimeNull() {
                this[this.tableDataReceiveCondition.ConditionEndTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SettingRow : global::System.Data.DataRow {
            
            private SettingDataTable tableSetting;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SettingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetting = ((SettingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ResultRowNo {
                get {
                    return ((int)(this[this.tableSetting.ResultRowNoColumn]));
                }
                set {
                    this[this.tableSetting.ResultRowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResultName {
                get {
                    if (this.IsResultNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSetting.ResultNameColumn]));
                    }
                }
                set {
                    this[this.tableSetting.ResultNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultNameNull() {
                return this.IsNull(this.tableSetting.ResultNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultNameNull() {
                this[this.tableSetting.ResultNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataReceiveConditionRowChangeEvent : global::System.EventArgs {
            
            private DataReceiveConditionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataReceiveConditionRowChangeEvent(DataReceiveConditionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataReceiveConditionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SettingRowChangeEvent : global::System.EventArgs {
            
            private SettingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRowChangeEvent(SettingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591