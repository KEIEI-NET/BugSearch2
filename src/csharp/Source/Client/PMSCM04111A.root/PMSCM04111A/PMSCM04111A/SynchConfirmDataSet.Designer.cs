//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.5485
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SynchConfirmDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SynchConfirmDataSet : global::System.Data.DataSet {
        
        private SynchConfirmDataTable tableSynchConfirm;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SynchConfirmDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SynchConfirmDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SynchConfirm"] != null)) {
                    base.Tables.Add(new SynchConfirmDataTable(ds.Tables["SynchConfirm"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SynchConfirmDataTable SynchConfirm {
            get {
                return this.tableSynchConfirm;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SynchConfirmDataSet cln = ((SynchConfirmDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SynchConfirm"] != null)) {
                    base.Tables.Add(new SynchConfirmDataTable(ds.Tables["SynchConfirm"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSynchConfirm = ((SynchConfirmDataTable)(base.Tables["SynchConfirm"]));
            if ((initTable == true)) {
                if ((this.tableSynchConfirm != null)) {
                    this.tableSynchConfirm.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SynchConfirmDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SynchConfirmDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSynchConfirm = new SynchConfirmDataTable();
            base.Tables.Add(this.tableSynchConfirm);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSynchConfirm() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SynchConfirmDataSet ds = new SynchConfirmDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SynchConfirmRowChangeEventHandler(object sender, SynchConfirmRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SynchConfirmDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTableID;
            
            private global::System.Data.DataColumn columnTableName;
            
            private global::System.Data.DataColumn columnLastSyncUpdDtTm;
            
            private global::System.Data.DataColumn columnSyncCndtinSta;
            
            private global::System.Data.DataColumn columnSyncCndtinDiv;
            
            private global::System.Data.DataColumn columnErrorStatus;
            
            private global::System.Data.DataColumn columnErrorContents;
            
            private global::System.Data.DataColumn columnSelectDiv;
            
            private global::System.Data.DataColumn columnSelection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynchConfirmDataTable() {
                this.TableName = "SynchConfirm";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SynchConfirmDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SynchConfirmDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TableIDColumn {
                get {
                    return this.columnTableID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TableNameColumn {
                get {
                    return this.columnTableName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastSyncUpdDtTmColumn {
                get {
                    return this.columnLastSyncUpdDtTm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncCndtinStaColumn {
                get {
                    return this.columnSyncCndtinSta;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncCndtinDivColumn {
                get {
                    return this.columnSyncCndtinDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorStatusColumn {
                get {
                    return this.columnErrorStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorContentsColumn {
                get {
                    return this.columnErrorContents;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectDivColumn {
                get {
                    return this.columnSelectDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionColumn {
                get {
                    return this.columnSelection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynchConfirmRow this[int index] {
                get {
                    return ((SynchConfirmRow)(this.Rows[index]));
                }
            }
            
            public event SynchConfirmRowChangeEventHandler SynchConfirmRowChanging;
            
            public event SynchConfirmRowChangeEventHandler SynchConfirmRowChanged;
            
            public event SynchConfirmRowChangeEventHandler SynchConfirmRowDeleting;
            
            public event SynchConfirmRowChangeEventHandler SynchConfirmRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSynchConfirmRow(SynchConfirmRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynchConfirmRow AddSynchConfirmRow(string TableID, string TableName, string LastSyncUpdDtTm, int SyncCndtinSta, string SyncCndtinDiv, int ErrorStatus, string ErrorContents, System.Drawing.Image SelectDiv, bool Selection) {
                SynchConfirmRow rowSynchConfirmRow = ((SynchConfirmRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TableID,
                        TableName,
                        LastSyncUpdDtTm,
                        SyncCndtinSta,
                        SyncCndtinDiv,
                        ErrorStatus,
                        ErrorContents,
                        SelectDiv,
                        Selection};
                rowSynchConfirmRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSynchConfirmRow);
                return rowSynchConfirmRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SynchConfirmDataTable cln = ((SynchConfirmDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SynchConfirmDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTableID = base.Columns["TableID"];
                this.columnTableName = base.Columns["TableName"];
                this.columnLastSyncUpdDtTm = base.Columns["LastSyncUpdDtTm"];
                this.columnSyncCndtinSta = base.Columns["SyncCndtinSta"];
                this.columnSyncCndtinDiv = base.Columns["SyncCndtinDiv"];
                this.columnErrorStatus = base.Columns["ErrorStatus"];
                this.columnErrorContents = base.Columns["ErrorContents"];
                this.columnSelectDiv = base.Columns["SelectDiv"];
                this.columnSelection = base.Columns["Selection"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTableID = new global::System.Data.DataColumn("TableID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableID);
                this.columnTableName = new global::System.Data.DataColumn("TableName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableName);
                this.columnLastSyncUpdDtTm = new global::System.Data.DataColumn("LastSyncUpdDtTm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastSyncUpdDtTm);
                this.columnSyncCndtinSta = new global::System.Data.DataColumn("SyncCndtinSta", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncCndtinSta);
                this.columnSyncCndtinDiv = new global::System.Data.DataColumn("SyncCndtinDiv", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncCndtinDiv);
                this.columnErrorStatus = new global::System.Data.DataColumn("ErrorStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorStatus);
                this.columnErrorContents = new global::System.Data.DataColumn("ErrorContents", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorContents);
                this.columnSelectDiv = new global::System.Data.DataColumn("SelectDiv", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectDiv);
                this.columnSelection = new global::System.Data.DataColumn("Selection", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelection);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SynchConfirmKey1", new global::System.Data.DataColumn[] {
                                this.columnTableID}, false));
                this.columnTableID.AllowDBNull = false;
                this.columnTableID.Unique = true;
                this.columnTableName.Caption = "対象テーブル";
                this.columnLastSyncUpdDtTm.Caption = "前回の送信日時";
                this.columnSyncCndtinDiv.Caption = "状態";
                this.columnSelectDiv.Caption = "再送信";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynchConfirmRow NewSynchConfirmRow() {
                return ((SynchConfirmRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SynchConfirmRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SynchConfirmRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SynchConfirmRowChanged != null)) {
                    this.SynchConfirmRowChanged(this, new SynchConfirmRowChangeEvent(((SynchConfirmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SynchConfirmRowChanging != null)) {
                    this.SynchConfirmRowChanging(this, new SynchConfirmRowChangeEvent(((SynchConfirmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SynchConfirmRowDeleted != null)) {
                    this.SynchConfirmRowDeleted(this, new SynchConfirmRowChangeEvent(((SynchConfirmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SynchConfirmRowDeleting != null)) {
                    this.SynchConfirmRowDeleting(this, new SynchConfirmRowChangeEvent(((SynchConfirmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSynchConfirmRow(SynchConfirmRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SynchConfirmDataSet ds = new SynchConfirmDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SynchConfirmDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SynchConfirmRow : global::System.Data.DataRow {
            
            private SynchConfirmDataTable tableSynchConfirm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SynchConfirmRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSynchConfirm = ((SynchConfirmDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableID {
                get {
                    return ((string)(this[this.tableSynchConfirm.TableIDColumn]));
                }
                set {
                    this[this.tableSynchConfirm.TableIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableName {
                get {
                    try {
                        return ((string)(this[this.tableSynchConfirm.TableNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SynchConfirm\' にある列 \'TableName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSynchConfirm.TableNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastSyncUpdDtTm {
                get {
                    try {
                        return ((string)(this[this.tableSynchConfirm.LastSyncUpdDtTmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SynchConfirm\' にある列 \'LastSyncUpdDtTm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSynchConfirm.LastSyncUpdDtTmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SyncCndtinSta {
                get {
                    try {
                        return ((int)(this[this.tableSynchConfirm.SyncCndtinStaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SynchConfirm\' にある列 \'SyncCndtinSta\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSynchConfirm.SyncCndtinStaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SyncCndtinDiv {
                get {
                    try {
                        return ((string)(this[this.tableSynchConfirm.SyncCndtinDivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SynchConfirm\' にある列 \'SyncCndtinDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSynchConfirm.SyncCndtinDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ErrorStatus {
                get {
                    try {
                        return ((int)(this[this.tableSynchConfirm.ErrorStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SynchConfirm\' にある列 \'ErrorStatus\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSynchConfirm.ErrorStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorContents {
                get {
                    try {
                        return ((string)(this[this.tableSynchConfirm.ErrorContentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SynchConfirm\' にある列 \'ErrorContents\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSynchConfirm.ErrorContentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image SelectDiv {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableSynchConfirm.SelectDivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SynchConfirm\' にある列 \'SelectDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSynchConfirm.SelectDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selection {
                get {
                    try {
                        return ((bool)(this[this.tableSynchConfirm.SelectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SynchConfirm\' にある列 \'Selection\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSynchConfirm.SelectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTableNameNull() {
                return this.IsNull(this.tableSynchConfirm.TableNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTableNameNull() {
                this[this.tableSynchConfirm.TableNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastSyncUpdDtTmNull() {
                return this.IsNull(this.tableSynchConfirm.LastSyncUpdDtTmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastSyncUpdDtTmNull() {
                this[this.tableSynchConfirm.LastSyncUpdDtTmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncCndtinStaNull() {
                return this.IsNull(this.tableSynchConfirm.SyncCndtinStaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncCndtinStaNull() {
                this[this.tableSynchConfirm.SyncCndtinStaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncCndtinDivNull() {
                return this.IsNull(this.tableSynchConfirm.SyncCndtinDivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncCndtinDivNull() {
                this[this.tableSynchConfirm.SyncCndtinDivColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorStatusNull() {
                return this.IsNull(this.tableSynchConfirm.ErrorStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorStatusNull() {
                this[this.tableSynchConfirm.ErrorStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorContentsNull() {
                return this.IsNull(this.tableSynchConfirm.ErrorContentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorContentsNull() {
                this[this.tableSynchConfirm.ErrorContentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectDivNull() {
                return this.IsNull(this.tableSynchConfirm.SelectDivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectDivNull() {
                this[this.tableSynchConfirm.SelectDivColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionNull() {
                return this.IsNull(this.tableSynchConfirm.SelectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionNull() {
                this[this.tableSynchConfirm.SelectionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SynchConfirmRowChangeEvent : global::System.EventArgs {
            
            private SynchConfirmRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynchConfirmRowChangeEvent(SynchConfirmRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynchConfirmRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591