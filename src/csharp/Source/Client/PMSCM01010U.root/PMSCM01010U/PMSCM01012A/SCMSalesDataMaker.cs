//****************************************************************************//
// システム         : 自働回答処理
// プログラム名称   : 自働回答処理アクセス
// プログラム概要   : 
//----------------------------------------------------------------------------//
//                (c)Copyright  2009 Broadleaf Co.,Ltd.
//============================================================================//
// 履歴
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 工藤 恵優
// 作 成 日  2009/05/20  修正内容 : 新規作成
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 21024　佐々木 健
// 作 成 日  2010/03/15  修正内容 : ①回答納期で、設定時間範囲外の場合は空白を返す
//                                  ②売上明細データの回答納期がセットされない不具合の修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 21024　佐々木 健
// 作 成 日  2010/03/23  修正内容 : ①枝番が不正な件の対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434　工藤 恵優
// 作 成 日  2010/04/05  修正内容 : 以前に見積伝票データを作成している発注の場合、作成する回答データおよび売上伝票データは見積伝票データを元に作成する
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 工藤 恵優
// 作 成 日  2010/06/24  修正内容 : 「回答作成区分」が「0:自動」の場合、「CMT連携区分」を設定する
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30517　夏野 駿希 
// 作 成 日  2010/07/07  修正内容 : 正しく値がセットされていない項目がある不具合の修正
//                                  仕入形式,BL商品コード名称(掛率),BL商品コード名称(印刷),印刷用品番,印刷用メーカーコード,印刷用メーカー名称,売上金額端数処理区分
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 21024　佐々木 健
// 作 成 日  2011/02/14  修正内容 : データ保存前にWebのデータ状態をチェックするように修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 21024　佐々木 健
// 作 成 日  2011/02/18  修正内容 : キャンセル仕様変更対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 22018　鈴木 正臣
// 作 成 日  2011/05/23  修正内容 : SCM受注明細データ(回答)のセット仕様変更
//                                 SFから指定された車輌情報がPMでヒットしない場合の処理変更(OKにする)
//----------------------------------------------------------------------------//
// 管理番号  10700008-00 作成担当 : 譚洪
// 修 正 日  2011/07/15  修正内容 : Redmine#22829 自動回答、手動回答の両方で売価率の算出方法が不正の対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : wangqx
// 修 正 日  2011/08/10  修正内容 : PCCUOE改修
// 管理番号              作成担当 : 譚洪
// 修 正 日  2011/08/12  修正内容 : Redmine#23554 キャンペーンの売価「売価率、値引率、売価額」が設定されている場合は、掛率マスタの売価の設定をクリアするように仕様変更の対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 譚洪
// 修 正 日  2011/08/15  修正内容 : Redmine#23554 掛率マスタの売価率設定ありで且つ、キャンペーンの売価額設定ありの場合、売価率はクリアの対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 譚洪
// 修 正 日  2011/08/15  修正内容 : Redmine#23637 SCM 部品価格問合せ／発注 明細部の表示と単価情報に関しての対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : wangqx
// 修 正 日  2011/09/19  修正内容 : Redmine#25267 売上データ・売上履歴データ、売上明細データ・売上履歴明細データの仕様変更対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : wangqx
// 修 正 日  2011/09/21  修正内容 : Redmine#25321 伝票印刷設定用帳票ID設定の仕様変更対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 劉立
// 修 正 日  2011/09/22  修正内容 : Redmine#25493 PCCUOE PM側　自動回答時の年式
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : liusy
// 修 正 日  2011/09/29  修正内容 : Redmine#25597 PCCUOE PM側 回答表示順番
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 高峰
// 修 正 日  2011/10/08  修正内容 : Redmine#25771 自動回答時のカラー名称、トリム名称に関して
//  　　　　　　　　　　　　　　　　Redmine#25768 SCM,PCCUOEの各回答時、BLコードはSFから設定されたBLコードを回答する
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 高峰
// 修 正 日  2011/10/10  修正内容 : Redmine#25762 在庫確認の自動回答時、見積データを作成しない
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : wangqx
// 修 正 日  2011/10/11  修正内容 : Redmine#25761 同一品番、同一メーカーコードの部品、１部品として回答する
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 高峰
// 修 正 日  2011/10/11  修正内容 : Redmine#25735 ②号車　印字されていない
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : yangyi
// 修 正 日  2011/10/12  修正内容 : Redmine#25763 手動回答／自動回答時の車台番号に関して
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 譚洪
// 修 正 日  2011/10/10  修正内容 : Redmine#25772 送受信項目にキャンペーンコードを追加の対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 高峰
// 修 正 日  2011/10/15  修正内容 : Redmine#26013 在庫確認した場合のカラー、トリムに関して
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 高峰
// 修 正 日  2011/11/12  修正内容 : Redmine#26533 Redmine#25762の変更を元に戻す
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : liusy
// 修 正 日  2011/11/17  修正内容 : Redmine#7921 PCCforNSで自動回答設定
//----------------------------------------------------------------------------//
// 管理番号  10707327-00 作成担当 : 鄧潘ハン
// 修 正 日  K2011/12/22 修正内容 : 2012/01/25配信分NAC個別対応、Redmine#27446
//                                  PMSF連携／PCCforNS BLﾊﾟｰﾂｵｰﾀﾞｰ 障害対応の修正
//----------------------------------------------------------------------------//
// 管理番号  10800003-00 作成担当 : 20056 對馬 大輔
// 作 成 日  2012/01/04  修正内容 : SCM改良対応
//                                  1)純正情報設定対応
//                                  2)表示順位設定対応
//----------------------------------------------------------------------------//
// 管理番号  10800003-00 作成担当 : 30517 夏野 駿希
// 作 成 日  2012/01/16  修正内容 : SCM改良対応・特記事項対応
//----------------------------------------------------------------------------//
// 管理番号  10800003-00 作成担当 : 20056 對馬 大輔
// 作 成 日  2012/02/07  修正内容 : SCM改良対応・特記事項対応 40桁以上カット対応
//----------------------------------------------------------------------------//
// 管理番号  10707327-00 作成担当 : 20056 對馬 大輔
// 作 成 日  2012/02/12  修正内容 : SCM改良対応
//                                  BLPOS在庫確認でPCC品目設定マスタを有効にする
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 20056 對馬 大輔
// 作 成 日  2012/04/09  修正内容 : BL-Pダイレクト発注対応
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 20056 對馬 大輔
// 作 成 日  2012/04/20  修正内容 : 自動回答時、販売区分設定対応
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 20073 西 毅
// 作 成 日  2012/05/07  修正内容 : 販売区分セットの条件変更
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30745 吉岡 孝憲
// 作 成 日  2012/05/25  修正内容 : 型式（フル型式）が完全な型式では無い場合、空白を設定（No134）
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上 千加子
// 作 成 日  2012/05/28  修正内容 : 障害対応
//                                  BLPOS在庫確認で優良品の代替の時回答しない件の対応
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 20073 西 毅
// 作 成 日  2012/05/30  修正内容 : SCM改良対応・自動見積部品コード
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 三戸　伸悟
// 作 成 日  2012/05/31  修正内容 : 障害№135 ＳＦ側に返すグレード名称を全角で返す
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30745 吉岡 孝憲
// 作 成 日  2012/05/31  修正内容 : SCM受注明細データ（回答）の枝番の編集 障害№220
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上 千加子
// 作 成 日  2012/05/31  修正内容 : 障害№10277 SCM受注データ(車両情報)装備情報の設定方法の変更
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 30747 三戸　伸悟
// 作 成 日  2012/06/18  修正内容 : 障害№10289 手動回答時、標準価格選択画面で選択した標準価格が有効にならない
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 20073 西 毅
// 作 成 日  2012/06/19  修正内容 : 自動見積部品コード空白時のPM側のセット廃止による修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30745 吉岡　孝憲 システムテスト障害№106
// 作 成 日  2012/06/20  修正内容 : 回答納期更新の条件変更
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30745 吉岡　孝憲 SCM障害№166
// 作 成 日  2012/07/03  修正内容 : PCC for NSの問合せ→発注の場合、在庫情報を更新する
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 30747 三戸　伸悟
// 作 成 日  2012/07/11  修正内容 : 障害№115 車台番号の値がシャシーNOになってしまう。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30746 高川　悟
// 作 成 日  2012/10/10  修正内容 : SCM障害改良No163 自動回答時、車台番号(検索)(SearchFrameNo)がセットされない
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 30747 三戸　伸悟
// 作 成 日  2012/08/17  修正内容 : 障害№238 部品を行削除して送信すると表示順位が不正。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上 千加子
// 作 成 日  2012/11/08  修正内容 : 2012/11/14配信 システムテスト障害対応
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 30744 湯上 千加子
// 作 成 日  2012/11/09  修正内容 : SCM改良№10337,10338,10341,10364,10431対応 PCCforNS、BLPの自動回答判定処理統合
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 30744 湯上 千加子
// 作 成 日  2012/11/30  修正内容 : 2012/12/12配信 システムテスト障害№88対応
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : 30744 湯上 千加子
// 作 成 日  2013/01/11  修正内容 : 2013/03/13配信予定 SCM障害№10472対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : wangqx
// 作 成 日  2013/02/18  修正内容 : 2013/03/13配信分　 システム障害 管理№267対応 
//                                  問合せデータを呼出発注を行った際、発注日に問合日がセットされる
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : zhubj
// 作 成 日  2013/02/18  修正内容 : 2013/03/13配信分　 システム障害 管理№108対応
//                                  印刷用BLコード区分：「部品」の場合、印刷された見積伝票、売上伝票のBLコード不具合対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上 千加子
// 作 成 日  2013/03/07  修正内容 : SCM障害№10489対応
//----------------------------------------------------------------------------//
// 管理番号 　　　　　　 作成担当 : 30745 吉岡 孝憲
// 作 成 日  2013/04/05  修正内容 : 2013/05/22配信 SCM障害№50 SPK対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上 千加子
// 作 成 日  2013/04/19  修正内容 : SCM障害№10521対応
//----------------------------------------------------------------------------//
// 管理番号 　　　　　　 作成担当 : 30747 三戸 伸悟
// 作 成 日  2013/05/02  修正内容 : 2013/05/22配信 SCM障害№50 デグレ対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 脇田 靖之
// 作 成 日  2013/08/07  修正内容 : PM-SCM仕掛一覧№10556対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 脇田 靖之
// 作 成 日  2013/08/08  修正内容 : PM-SCM仕掛一覧№10556対応
//                                  商品在庫マスタの課税区分を考慮するように対応
//----------------------------------------------------------------------------//
// 管理番号 　　　　　　 作成担当 : wangl2
// 作 成 日  2013/04/11  修正内容 : RedMine#35269 (SCM障害№73)対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上 千加子
// 作 成 日  2013/05/24  修正内容 : SCM障害№10537対応
//----------------------------------------------------------------------------//
// 管理番号  10900690-00 作成担当 : qijh
// 作 成 日  2013/02/27  修正内容 : 配信日なし分 Redmine#34752 「PMSCMのNo.10385」BLPの対応
//----------------------------------------------------------------------------//
// 管理番号 　　　　　　 作成担当 : 30744 湯上 千加子
// 作 成 日  2013/05/09  修正内容 : SCM障害№10470対応
//----------------------------------------------------------------------------//
// 管理番号  10902175-00 作成担当 : 脇田 靖之
// 作 成 日  2013/06/13  修正内容 : 2013/06/18配信　システムテスト障害№45
//----------------------------------------------------------------------------//
// 管理番号  10902175-00 作成担当 : 脇田 靖之
// 作 成 日  2013/06/17  修正内容 : 2013/06/18配信　システムテスト障害№43
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上 千加子
// 作 成 日  2013/09/17  修正内容 : SCM仕掛一覧№210対応　表示順設定の変更
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 湯上 千加子
// 作 成 日  2013/10/02  修正内容 : SCM仕掛一覧№10577対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 湯上 千加子
// 作 成 日  2013/10/24  修正内容 : 201311XX配信予定システムテスト障害№11,12対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上 千加子
// 作 成 日  2013/10/25  修正内容 : 201311XX配信予定システムテスト障害№13,14対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上 千加子
// 作 成 日  2013/11/28  修正内容 : 商品保証課Redmine#719対応 
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 宮本 利明
// 作 成 日  2014/01/16  修正内容 : 純正定価印字対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上 千加子
// 作 成 日  2014/01/30  修正内容 : Redmine#41771 障害№13対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上 千加子
// 作 成 日  2014/02/05  修正内容 : SCM仕掛一覧№10627対応
//----------------------------------------------------------------------------//
// 管理番号  11070076-00 作成担当 : 30744 湯上 千加子
// 修 正 日  2014/05/08  修正内容 : PM-SCM速度改良 フェーズ２対応
//                                : 01.商品検索アクセスクラス補正処理プロパティ対応
//                                : 02.得意先掛率グループマスタ取得改良対応（回答判定時）
//                                : 03.変更前単価計算呼出回数改良対応
//                                : 04.キャンペーン売価設定マスタ取得改良対応
//                                : 05.得意先マスタ（伝票管理）取得改良対応
//                                : 06.得意先マスタ取得改良対応（金額計算クラス）
//                                : 07.得意先マスタ取得改良対応（金額計算クラス・キャンペーン対応）
//                                : 08.売上データ生成時のシステム日付取得対応
//                                : 09.得意先掛率グループマスタ取得改良対応（売上データ生成時）
//                                : 10.単価計算呼出回数改良
//----------------------------------------------------------------------------//
// 管理番号  11070076-00 作成担当 : 30744 湯上 千加子
// 修 正 日  2014/05/13  修正内容 : PM-SCM速度改良 フェーズ２対応
//                                : 13.フル型式固定番号からのＢＬコード検索回数改良対応
//                                : 14.明細取込区分の更新方法を改良対応
//                                : 15.SCM受発注データ（車両情報）取得方法改良対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上 千加子
// 修 正 日  2014/06/04  修正内容 : SCM仕掛一覧№10659対応
//----------------------------------------------------------------------------//
// 管理番号  11070147-00 作成担当 : 鄧潘ハン
// 修 正 日  2014/07/23  修正内容 : SCM仕掛一覧№10659の3SCM受発注明細データに在庫状況区分のセットの対応
//----------------------------------------------------------------------------//
// 管理番号  11070147-00 作成担当 : 30744 湯上 千加子
// 修 正 日  2014/08/13  修正内容 : 11070147-00 システムテスト障害№5対応
//----------------------------------------------------------------------------//
// 管理番号  11070184-00 作成担当 : 譚洪
// 作 成 日  2014/09/01  修正内容 : SFから問合せの車輌情報・備考を売上伝票入力に表示する
//----------------------------------------------------------------------------//
// 管理番号  11070184-00 作成担当 : 30973 鹿庭 一郎
// 修 正 日  2014/09/22  修正内容 : 11070184-00 SCM仕掛一覧No.10598対応
//                                : 文字列車台番号での発注・問合せ対応
//----------------------------------------------------------------------------//
// 管理番号  11070221-00 作成担当 : 脇田 靖之
// 作 成 日  2014/10/14  修正内容 : SCM障害№10535対応
//                                : PM-SCMセット部品情報表示対応
//----------------------------------------------------------------------------//
// 管理番号  11070221-00 作成担当 : 30744 湯上
// 作 成 日  2014/11/10  修正内容 : 2014/11/26配信システムテスト障害対応
//                                : 品番検索時に結合先品番が回答されない障害の対応
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 30744 湯上
// 作 成 日  2014/12/19  修正内容 : SCM高速化 PMNS対応
//                                : 自動回答方式の追加
//                                : 貸出区分、メーカー希望小売価格、オープン価格区分の追加
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30744 湯上
// 作 成 日  2015/01/07  修正内容 : メーカー希望小売価格対応
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 30744 湯上
// 作 成 日  2015/01/19  修正内容 : リコメンド対応　リコメンド発注時、定価・売価は問合せデータの単価を使用する
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 30744 湯上 千加子
// 修 正 日  2015/01/29  修正内容 : SCM高速化Redmine#87対応 SCM高速化Redmine#61のデグレ対応 
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 30744 湯上
// 作 成 日  2015/01/30  修正内容 : SCM高速化 生産年式、車台番号対応
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 31065 豊沢
// 作 成 日  2015/02/04  修正内容 : PM-SCM社内障害一覧No.72対応
//                                : 商品規格・特記事項の桁数変更対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 吉岡 孝憲　30745
// 作 成 日  2015/02/10  修正内容 : SCM高速化 回答納期区分対応
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 宮本 利明
// 作 成 日  2015/02/24  修正内容 : リコメンド対応 お買い得商品の回答時は定価を算出する
//                                  ※2015/01/19分の修正を削除(定価)
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 下口
// 修 正 日  2015/02/24  修正内容 : SCM高速化 C向け種別対応
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 30744 湯上 千加子
// 修 正 日  2015/02/27  修正内容 : SCM高速化 C向け種別対応
//----------------------------------------------------------------------------//
// 管理番号  11070149-00 作成担当 : 30744 湯上
// 作 成 日  2015/02/09  修正内容 : SCM連携 マルチキャスト対応
//                                : 問合せ行番号枝番の採番方法を修正
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 30744 湯上 千加子
// 修 正 日  2015/03/10  修正内容 : SCM社内障害一覧№98対応
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 30744 湯上 千加子
// 修 正 日  2015/03/11  修正内容 : SCM高速化Redmine#356対応 SCM社内障害一覧№98修正漏れ
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 30744 湯上 千加子
// 修 正 日  2015/03/18  修正内容 : SCM高速化 メーカー希望小売価格対応
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 30744 湯上 千加子
// 修 正 日  2015/03/30  修正内容 : 全体配信システムテスト障害№59対応
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 31065 豊沢
// 作 成 日  2015/06/18  修正内容 : SCM高速化 Redmine3941対応
//                                : Carpodtabで問合せをした際に高速化自動回答データの特記事項が消える障害対応
//----------------------------------------------------------------------------//
// 管理番号  11070266-00 作成担当 : 30744 湯上
// 作 成 日  2015/06/30  修正内容 : SCM高速化 Redmine3941対応
//                                : 売伝などで品番を変更した際に、メーカー希望小売価格などが変更されない不具合対応
//----------------------------------------------------------------------------//
// 管理番号  11470007-00 作成担当 : 田建委
// 修 正 日  2018/04/16  修正内容 : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加
//----------------------------------------------------------------------------//
// 管理番号  11470103-00 作成担当 : 譚洪
// 作 成 日  2018/08/24  修正内容 : 自動回答処理にてセット部品（親・子）の納品数が不具合の障害対応
//----------------------------------------------------------------------------//
// 管理番号  11475116-00 作成担当 : 譚洪
// 作 成 日  2018/10/23  修正内容 : Redmine#49773 自動回答後セット子部品在庫状況不正の障害対応
//----------------------------------------------------------------------------//
// 管理番号  11600001-00 作成担当 : 譚洪
// 作 成 日  2020/12/31  修正内容 : PMKOBETSU-4100 BLP（フル型以外時に型式情報が表示されない）の対応
//----------------------------------------------------------------------------//

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Windows.Forms;

using Broadleaf.Application.Common;
using Broadleaf.Application.Controller.Agent;
using Broadleaf.Application.Controller.Util;
using Broadleaf.Application.Remoting.ParamData;
using Broadleaf.Application.UIData;
using Broadleaf.Application.UIData.Util;
using Broadleaf.Library.Collections;
using Broadleaf.Library.Resources;  // 2011/02/14 Add

namespace Broadleaf.Application.Controller
{
    using CustomerServer        = SingletonInstance<CustomerAgent>;         // 得意先マスタ
    using SalesProcMoneyServer  = SingletonInstance<SalesProcMoneyAgent>;   // 売上金額処理区分マスタ
    using EstimateDefSetServer  = SingletonInstance<EstimateDefSetAgent>;   // 見積初期値設定マスタ
    using SlipPrtSetServer      = SingletonInstance<SlipPrtSetAgent>;       // 伝票印刷設定マスタ
    using SalesTtlStServer      = SingletonInstance<SalesTtlStAgent>;       // 売上全体設定マスタ
    using EmployeeServer        = SingletonInstance<EmployeeAgent>;         // 従業員マスタ
    // 2011/02/14 Add >>>
    using SCMWebServer = SingletonInstance<SCMWebAcsAgent>;         // 従業員マスタ
    // 2011/02/14 Add <<<
    
    using SCMDataTreeType = Tuple<
        UserSCMOrderHeaderRecord,
        UserSCMOrderCarRecord,
        List<ISCMOrderDetailRecord>,
        List<ISCMOrderAnswerRecord>,
        NullObject,
        NullObject,
        NullObject,
        NullObject,
        NullObject,
        NullObject
    >;
    using Broadleaf.Application.Remoting.Adapter;
    using Broadleaf.Application.Remoting;
    using System.Collections;
    using Broadleaf.Library.Text; // ADD 2011/08/10

    // ADD 2013/04/19 SCM障害№10521対応 --------------------------------------------------->>>>>
    using SalesDetailServer = SingletonInstance<SalesDetailAgent>;  // 売上明細データ
    // ADD 2013/04/19 SCM障害№10521対応 ---------------------------------------------------<<<<<

    // DEL 2010/06/24 「回答作成区分」が「0:自動」の場合、「CMT連携区分」を設定する ---------->>>>>
    #region PMSCM01011E::SCMEntityUtil.cs へ移設

    ///// <summary>
    ///// 回答作成区分列挙型
    ///// </summary>
    //public enum AnswerCreateDiv : int
    //{
    //    /// <summary>0:自動</summary>
    //    Auto = 0,
    //    /// <summary>1:手動(Web)</summary>
    //    ManualWeb = 1,
    //    /// <summary>2:手動(その他)</summary>
    //    ManualEtc = 2
    //}

    #endregion // PMSCM01011E::SCMEntityUtil.cs へ移設
    // DEL 2010/06/24 「回答作成区分」が「0:自動」の場合、「CMT連携区分」を設定する ----------<<<<<

    /// <summary>
    /// SCM売上データ作成処理クラス
    /// </summary>
    public abstract class SCMSalesDataMaker
    {
        #region <ログ用定数>

        /// <summary>クラス名称</summary>
        private const string MY_NAME = "SCMSalesDataMaker";

        #endregion // </ログ用定数>


        // --- ADD 2011/11/17 ---------->>>>>
        /// <summary>
        /// 自動回答と自動回答区分
        /// </summary>
        public int runMode
        {
            get { return _runMode; }
            set { _runMode = value; }
        }
        // --- ADD 2011/11/17 ---------->>>>>   

        // --- ADD 2011/09/19 ---------->>>>>
        #region <処理用定数>
        /// <summary>純正メーカー最大コード</summary>
        public static readonly Int32 ctPureGoodsMakerCode = 999;
        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
        /// <summary>端数処理対象金額区分（消費税）</summary>
        public const int ctFracProcMoneyDiv_Tax = 1;
        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<
        #endregion // </処理用定数>

        private List<CustRateGroup> _custRateGroupList = new List<CustRateGroup>();
        // ADD 2014/05/08 PM-SCM速度改良 フェーズ２№09.得意先掛率グループマスタ取得改良対応（売上データ生成時） ---------------------------------->>>>>
        private int _prevCustomerCode = 0;  // 得意先コード前回値
        // ADD 2014/05/08 PM-SCM速度改良 フェーズ２№09.得意先掛率グループマスタ取得改良対応（売上データ生成時） ----------------------------------<<<<<
        private CustRateGroupAcs _custRateGroupAcs = new CustRateGroupAcs();
        private UserGuideAcs _userGuideAcs = new UserGuideAcs();
        private int _runMode = 0;
        // --- ADD 2011/09/19 ----------<<<<<

        #region <回答判定処理>

        /// <summary>回答判定処理</summary>
        private readonly SCMReferee _referee;
        /// <summary>回答判定処理を取得します。</summary>
        private SCMReferee Referee { get { return _referee; } }

        #endregion // </回答判定処理>

        #region <SCM売上データ>

        /// <summary>売上データの生成者マップ</summary>
        private IDictionary<string, SCMSalesListEssence> _scmSalesListEssenceMap;
        /// <summary>売上データの生成者マップを取得します。</summary>
        /// <remarks>キー：問合せ番号(0000000000)+受注ステータス("00")</remarks>
        public IDictionary<string, SCMSalesListEssence> SCMSalesListEssenceMap
        {
            get
            {
                if (_scmSalesListEssenceMap == null)
                {
                    _scmSalesListEssenceMap = new Dictionary<string, SCMSalesListEssence>();
                }
                return _scmSalesListEssenceMap;
            }
        }

        // ADD 2014/02/05 SCM仕掛一覧№10627対応 ----------------------------------->>>>>
        private List<SlipPrtSet> _slipPrtSetList;
        // ADD 2014/02/05 SCM仕掛一覧№10627対応 -----------------------------------<<<<<

        // ADD 2014/05/08 PM-SCM速度改良 フェーズ２№05.得意先マスタ（伝票管理）取得改良対応 --------------------------------->>>>>
        private List<CustSlipMng> _custSlipMngList;

        private SCMPriceCalculator _priceCalculator;
        private bool _priceCalculatorCacheFlag = true;

        /// <summary>
        /// 価格算出クラス
        /// </summary>
        public SCMPriceCalculator PriceCalculator
        {
            get
            {
                if (this._priceCalculator == null)
                {
                    this._priceCalculator = new SCMPriceCalculator();
                }
                return this._priceCalculator;
            }
        }
        // ADD 2014/05/08 PM-SCM速度改良 フェーズ２№05.得意先マスタ（伝票管理）取得改良対応 ---------------------------------<<<<<　

        /// <summary>
        /// SCM売上キーを取得します。
        /// </summary>
        /// <param name="answerRecord">SCM受注明細データ(回答)のレコード</param>
        /// <returns>問合せ番号("0000000000") + 受注ステータス("00")</returns>
        private static string GetSCMSalesKey(ISCMOrderAnswerRecord answerRecord)
        {
            return answerRecord.InquiryNumber.ToString("0000000000") + answerRecord.AcptAnOdrStatus.ToString("00");
        }

        /// <summary>回答データのカウンタマップ</summary>
        private IDictionary<string, int> _answerCounterMap;
        /// <summary>回答データのカウンタマップ</summary>
        /// <remarks>キー：明細データのキー</remarks>
        protected IDictionary<string, int> AnswerCounterMap
        {
            get
            {
                if (_answerCounterMap == null)
                {
                    _answerCounterMap = new Dictionary<string, int>();
                }
                return _answerCounterMap;
            }
        }

        /// <summary>
        /// 回答データの問合せ行番号枝番を取得します。
        /// </summary>
        /// <param name="detailRecord">SCM受注明細データ(問合せ・発注)のレコード</param>
        /// <returns>問合せ行番号に対するカウンタのデクリメント後の値を返します。</returns>
        protected int NextRowNumDerivedNo(ISCMOrderDetailRecord detailRecord)
        {
            const string METHOD_NAME = "NextRowNumDerivedNo()"; // ログ用

            // 2010/03/23 >>>
            //// 商品番号が設定されている場合、再問合せとみなし、枝番はそのまま使用する
            //// （新規明細データとしない）
            //if (!string.IsNullOrEmpty(detailRecord.GoodsNo.Trim()))

            // 品番、メーカーが設定されている場合、再問合せとみなし、枝番はそのまま使用する
            // （新規明細データとしない）
            if (!string.IsNullOrEmpty(detailRecord.GoodsNo.Trim()) && detailRecord.GoodsMakerCd!=0)
            // 2010/03/23 <<<
            {
                #region <Log>

                string msg = "【再問合せ】SCM受注明細データ(問合せ・発注)" + Environment.NewLine + SCMDataHelper.GetProfile(detailRecord);
                EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));

                #endregion // </Log>

                return detailRecord.InqRowNumDerivedNo;
            }

            string key = SCMEntityUtil.GetInqRowNumberKey(detailRecord);
            if (!AnswerCounterMap.ContainsKey(key))
            {
                // UPD 2013/11/28 商品保証部Redmine#719対応 --------------------------->>>>>
                //AnswerCounterMap.Add(key, 0);
                AnswerCounterMap.Add(key, detailRecord.InqRowNumDerivedNo - 1);
                // UPD 2013/11/28 商品保証部Redmine#719対応 ---------------------------<<<<<
            }
            int nextRowNumDerivedNo = ++AnswerCounterMap[key];

            // 2010/03/23 >>>
            //return nextRowNumDerivedNo * (-1);
            // UPD 2013/11/28 商品保証部Redmine#719対応 --------------------------->>>>>
            //return (nextRowNumDerivedNo == 1) ? nextRowNumDerivedNo : (nextRowNumDerivedNo - 1) * (-1);
            return (nextRowNumDerivedNo == detailRecord.InqRowNumDerivedNo) ? nextRowNumDerivedNo : (nextRowNumDerivedNo - 1) * (-1);
            // UPD 2013/11/28 商品保証部Redmine#719対応 ---------------------------<<<<<
            // 2010/03/23 <<<
        }
        // DEL 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ---------------------------------->>>>>
        //// -- ADD 2011/08/10   ------ >>>>>>
        //Hashtable _pccHash = new Hashtable();
        // -- ADD 2011/08/10   ------ <<<<<<
        // DEL 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ----------------------------------<<<<<
        // -- ADD 2011/08/10   ------ >>>>>>
        private Dictionary<int, string> _salesAreaDic = new Dictionary<int, string>();
        // -- ADD 2011/08/10   ------ <<<<<<
        //>>>2012/04/20
        private SCMTtlSt _scmTtlSt = null; // SCM全体設定マスタ
        private Dictionary<int, string> _salesCodeDic = new Dictionary<int, string>(); // 販売区分リスト
        //<<<2012/04/20
        #endregion // </SCM売上データ>

        #region <Constructor>

        /// <summary>
        /// カスタムコンストラクタ
        /// </summary>
        /// <param name="referee">SCM回答判定処理</param>
        protected SCMSalesDataMaker(SCMReferee referee)
        {
            _referee = referee;
        }

        #endregion // </Constructor>

        #region <SCM受注データツリー>

        /// <summary>
        /// SCM受注データツリーのマップを取得します。
        /// </summary>
        /// <remarks>
        /// キー：関連キー
        /// </remarks>
        protected IDictionary<string, SCMDataTreeType> SCMDataTreeMap
        {
            get { return Referee.Searcher.ScmDataTreeMap; }
        }

        #endregion // </SCM受注データツリー>

        #region <得意先>

        /// <summary>
        /// 得意先マスタ
        /// </summary>
        private static CustomerAgent CustomerDB
        {
            get { return CustomerServer.Singleton.Instance; }
        }

        /// <summary>
        /// 得意先情報を取得します。
        /// </summary>
        /// <param name="headerRecord">SCM受注データのレコード</param>
        /// <returns>得意先情報 ※存在しない場合、<c>null</c>を返します。</returns>
        protected static CustomerInfo GetCustomerInfo(ISCMOrderHeaderRecord headerRecord)
        {
            CustomerDB.TakeCustomerInfo(headerRecord);
            if (CustomerDB.CustomerInfoMap.ContainsKey(headerRecord.CustomerCode))
            {
                return CustomerDB.CustomerInfoMap[headerRecord.CustomerCode];
            }
            return null;
        }

        /// <summary>
        /// 得意先掛率グループコードを取得します。
        /// </summary>
        /// <param name="headerRecord">SCM受注データのレコード</param>
        /// <param name="scmGoodsUnitData">付加情報付き商品連結データ</param>
        /// <returns>得意先掛率グループコード</returns>
        private static int GetCustRateGrpCode(
            ISCMOrderHeaderRecord headerRecord,
            SCMGoodsUnitData scmGoodsUnitData
        )
        {
            CustomerDB.TakeCustomerInfo(headerRecord);
            if (CustomerDB.CustomerRateGroupMap.ContainsKey(headerRecord.CustomerCode))
            {
                foreach (CustRateGroup custRateGroup in CustomerDB.CustomerRateGroupMap[headerRecord.CustomerCode])
                {
                    if (custRateGroup.GoodsMakerCd.Equals(scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd))
                    {
                        return custRateGroup.CustRateGrpCode;
                    }
                }
            }
            return 0;
        }
        // --- ADD 2011/09/19 ---------->>>>>
        /// <summary>
        ///  得意先掛率グループコード取得処理
        /// </summary>
        /// <param name="goodsMakerCode">メーカーコード</param>
        /// <returns></returns>
        private int GetCustRateGroupCode(int goodsMakerCode)
        {   
            int pureCode = (goodsMakerCode <= ctPureGoodsMakerCode) ? 0 : 1; // 0:純正 1:優良

            // 単独キー
            CustRateGroup custRateGroup = this._custRateGroupList.Find(
                delegate(CustRateGroup custRate)
                {
                    if ((custRate.GoodsMakerCd == goodsMakerCode) &&
                        (custRate.PureCode == pureCode))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );
            if (custRateGroup != null) return custRateGroup.CustRateGrpCode;

            // 共通キー
            custRateGroup = this._custRateGroupList.Find(
                delegate(CustRateGroup custRate)
                {
                    if ((custRate.GoodsMakerCd == 0) &&
                        (custRate.PureCode == pureCode))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );
            if (custRateGroup != null) return custRateGroup.CustRateGrpCode;

            return -1;
        }
        // --- ADD 2011/09/19 ----------<<<<<

        /// <summary>
        /// 得意先掛率グループコードを取得します。
        /// </summary>
        /// <param name="headerRecord">SCM受注データのレコード</param>
        /// <param name="goodsMakerCd">商品メーカーコード</param>
        /// <returns>得意先掛率グループコード</returns>
        protected static int GetCustRateGrpCode(
            ISCMOrderHeaderRecord headerRecord,
            int goodsMakerCd
        )
        {
            CustomerDB.TakeCustomerInfo(headerRecord);
            if (CustomerDB.CustomerRateGroupMap.ContainsKey(headerRecord.CustomerCode))
            {
                foreach (CustRateGroup custRateGroup in CustomerDB.CustomerRateGroupMap[headerRecord.CustomerCode])
                {
                    if (custRateGroup.GoodsMakerCd.Equals(goodsMakerCd))
                    {
                        return custRateGroup.CustRateGrpCode;
                    }
                }
            }
            return 0;
        }

        // ADD 2014/02/05 SCM仕掛一覧№10627対応 ----------------------------------->>>>>
        /// <summary>
        /// 請求先情報の取得
        /// 　得意先コードから請求先情報を取得する
        /// </summary>
        /// <param name="customerCode">得意先コード</param>
        /// <returns>請求先情報 取得できない場合はnull</returns>
        public CustomerInfo ClaimInfo(int customerCode)
        {
            CustomerInfo claim = null;
            CustomerInfo customerInfo = CustomerDB.CustomerInfoMap[customerCode];
            if (customerInfo != null)
            {
                if (customerInfo.CustomerCode.Equals(customerInfo.ClaimCode))
                {
                    // 得意先と請求先が同じ場合
                    claim = customerInfo.Clone();
                }
                else if (CustomerDB.CustomerInfoMap.ContainsKey(customerInfo.ClaimCode))
                {
                    // 請求先情報がすでに取得済みの場合
                    claim = CustomerDB.CustomerInfoMap[customerInfo.ClaimCode];
                }
                else
                {
                    // 請求先情報が取得されていない場合
                    CustomerDB.TakeCustomerInfo(customerInfo.EnterpriseCode, customerInfo.ClaimCode);
                    if (CustomerDB.CustomerInfoMap.ContainsKey(customerInfo.ClaimCode))
                    {
                        claim = CustomerDB.CustomerInfoMap[customerInfo.ClaimCode];
                    }
                }
            }

            return claim;
        }
        // ADD 2014/02/05 SCM仕掛一覧№10627対応 -----------------------------------<<<<<

        #endregion // </得意先>

        #region <売上金額処理区分>

        /// <summary>
        /// 売上金額処理区分マスタを取得します。
        /// </summary>
        private static SalesProcMoneyAgent SalesProcMoneyDB
        {
            get { return SalesProcMoneyServer.Singleton.Instance; }
        }

        /// <summary>
        /// 売上金額処理区分を取得します。
        /// </summary>
        /// <param name="headerRecord">SCM受注データ</param>
        /// <returns>売上金額処理区分</returns>
        protected static SalesProcMoney GetSalesProcMoney(ISCMOrderHeaderRecord headerRecord)
        {
            IList <SalesProcMoney> foundSalesProcMoneyList = SalesProcMoneyDB.Find(headerRecord.EnterpriseCode);
            if (foundSalesProcMoneyList == null || foundSalesProcMoneyList.Count.Equals(0))
            {
                return null;
            }
            return foundSalesProcMoneyList[0];
        }

        #endregion // </売上処理区分>

        #region <見積初期値設定>

        /// <summary>
        /// 見積初期値設定マスタを取得します。
        /// </summary>
        private static EstimateDefSetAgent EstimateDefSetDB
        {
            get { return EstimateDefSetServer.Singleton.Instance; }
        }

        /// <summary>
        /// 見積初期値設定を取得します。
        /// </summary>
        /// <param name="headerRecord">SCM受注データのレコード</param>
        /// <returns>見積初期値設定</returns>
        protected static EstimateDefSet GetEstimateDefSet(ISCMOrderHeaderRecord headerRecord)
        {
            return EstimateDefSetDB.Find(headerRecord.InqOtherEpCd, headerRecord.InqOtherSecCd);
        }

        #endregion // </見積初期値設定>

        #region <売上全体設定>

        /// <summary>
        /// 売上全体設定マスタを取得します。
        /// </summary>
        protected static SalesTtlStAgent SalesTtlStDB
        {
            get { return SalesTtlStServer.Singleton.Instance; }
        }

        #endregion // </売上全体設定>

        #region <相場回答のみの場合用>

        /// <summary>
        /// 相場回答のみか判断します。
        /// </summary>
        /// <value>
        /// <c>true</c> :相場回答のみです。<br/>
        /// <c>false</c>:相場回答のみではありません。
        /// </value>
        public virtual bool IsSobaAnswerOnly
        {
            get { return false; }
        }

        /// <summary>
        /// 相場回答のみのI/O Writer用パラメータを取得します。
        /// </summary>
        public virtual CustomSerializeArrayList SobaOnlySCMOrderDataParameterList
        {
            get { return new CustomSerializeArrayList(); }
        }

        #endregion // </相場回答のみの場合用>

        // ADD 2013/04/19 SCM障害№10521対応 ------------------------------->>>>>
        #region 売上明細データ

        /// <summary>
        /// 売上明細データ
        /// </summary>
        private static SalesDetailAgent SalesDetailDB
        {
            get { return SalesDetailServer.Singleton.Instance; }
        }

        #endregion // 売上明細データ
        // ADD 2013/04/19 SCM障害№10521対応 -------------------------------<<<<<

        // ADD 2014/05/08 PM-SCM速度改良 フェーズ２№08.売上データ生成時のシステム日付取得対応 ---------------------------------->>>>>
        private DateTime _getServerNowTime;
        private DateTime GetServerNowTime
        {
            get
            {
                if (this._getServerNowTime == DateTime.MinValue)
                {
                    SalesSlipInputAcs salesSlipInputAcs = SalesSlipInputAcs.GetInstance();
                    this._getServerNowTime = salesSlipInputAcs.GetServerNowTime;
                }
                return this._getServerNowTime;
            }
        }
        // ADD 2014/05/08 PM-SCM速度改良 フェーズ２№08.売上データ生成時のシステム日付取得対応 ----------------------------------<<<<<

        // ADD 2015/01/29 SCM高速化Redmine#87 対応 ---------------------------------------->>>>>
        #region <提供部品検索コントローラー>

        private IOfferPartsInfo _iOfferPartsInfo;
        /// <summary>
        ///  提供部品検索コントローラーを取得します
        /// </summary>
        public IOfferPartsInfo IOfferPartsInfo
        {
            get
            {
                if (_iOfferPartsInfo == null)
                {
                    _iOfferPartsInfo = MediationOfferPartsInfo.GetOfferPartsInfo();
                }
                return _iOfferPartsInfo;
            }
        }

        #endregion // <SCM受発注データ（車両情報）>

        // ADD 2015/01/29 SCM高速化Redmine#87対応 ----------------------------------------<<<<<

        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
        #region メーカー希望小売価格情報
        /// <summary>提供データ価格情報</summary>
        private List<GoodsPrice> _ofrPriceList;
        /// <summary>ユーザー登録分価格情報</summary>
        private List<GoodsPrice> _userPriceList;
        /// <summary>セット品用提供データ価格情報</summary>
        private List<GoodsPrice> _setOfrPriceList;
        /// <summary>セット品用ユーザー登録分価格情報</summary>
        private List<GoodsPrice> _setUserPriceList;
        /// <summary>離島価格算出時の拠点コード</summary>
        private string _iSectionCode = string.Empty;
        #endregion
        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<

        /// <summary>
        /// 売上データを生成します。
        /// </summary>
        /// <returns>売上データ</returns>
        public virtual CustomSerializeArrayList CreateSalesData()
        {
            return CreateSalesData(false);
        }

        /// <summary>
        /// 売上データを生成します。
        /// </summary>
        /// <param name="makedAnswerDataAndSalesData">SCM受注明細データ(回答)と売上データを作成済みフラグ</param>
        /// <returns>売上データ</returns>
        protected CustomSerializeArrayList CreateSalesData(bool makedAnswerDataAndSalesData)
        {
            const string METHOD_NAME = "CreateSalesData(bool)"; // ログ用

            // SCM受注明細データ(回答)と売上データを作成
            if (!makedAnswerDataAndSalesData)
            {
                MakeAnswerDataAndSalesData();
            }
            EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg("SCM受注明細データ(回答)と売上データを作成：完了"));

            CustomSerializeArrayList salesData = new CustomSerializeArrayList();
            {
                bool canEntryCarMng = false;

                // 売上データ
                foreach (SCMSalesListEssence salesListEssence in SCMSalesListEssenceMap.Values)
                {
                    CustomSerializeArrayList salesList = salesListEssence.CreateSalesList(out canEntryCarMng);
                    salesData.Add(salesList);
                }

                // リモート参照用パラメータ
                salesData.Add(CreateIOWriteCtrlOptWork(canEntryCarMng));
            }
            EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg("売伝リモート用パラメータの構築：完了"));

            return salesData;
        }

        /// <summary>
        /// SCM受注明細データ(回答)と売上データを作成します。
        /// </summary>
        protected void MakeAnswerDataAndSalesData()
        {
            const string METHOD_NAME = "MakeAnswerDataAndSalesData()";  // ログ用

            // DEL 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ---------------------------------->>>>>
            #region 削除(SCM改良の為)
            //// -- ADD 2011/08/10   ------ >>>>>>
            //_pccHash.Clear();
            //Object pccTtlStArray = null;      // PCC全体設定マスタリスト 検索結果定義
            //// PCC全体設定マスタを取得
            //IPccTtlStDB pccTtlStDB = MediationPccTtlStDB.GetPccTtlStDB();

            //if (pccTtlStDB != null)
            //{
            //    PccTtlStWork pccTtlStWork = new PccTtlStWork();     // パラメータ定義
            //    pccTtlStWork.EnterpriseCode = LoginInfoAcquisition.EnterpriseCode;

            //    int status = pccTtlStDB.Search(ref pccTtlStArray, pccTtlStWork, 0, ConstantManagement.LogicalMode.GetData0);
            //    if (status == (int)ResultUtil.ResultCode.Normal)
            //    {
            //        ArrayList tempArrayList = pccTtlStArray as ArrayList;
            //        for (int i = 0; i < tempArrayList.Count; i++)
            //        {
            //            PccTtlStWork tempPccTtlStWork = (PccTtlStWork)tempArrayList[i];
            //            if (!_pccHash.ContainsKey(tempPccTtlStWork.EnterpriseCode + tempPccTtlStWork.SectionCode))
            //            {
            //                _pccHash.Add((tempPccTtlStWork.EnterpriseCode + tempPccTtlStWork.SectionCode),
            //                    tempPccTtlStWork);
            //            }
            //        }
            //    }
            //}
            //// -- ADD 2011/08/10   ------ <<<<<<
            #endregion
            // DEL 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ----------------------------------<<<<<

            // -- ADD 2011/10/11   ------ >>>>>>
            // 部品情報
            Hashtable partsHash = new Hashtable();
            string tempKey = string.Empty;
            // -- ADD 2011/10/11   ------ <<<<<<

            // -- ADD 2011/09/19   ------ >>>>>>
            // ユーザーガイドマスタデータを取得する
            this._salesAreaDic.Clear();

            ReadUserGdBd(48, ref this._salesAreaDic);
            // -- ADD 2011/09/19   ------ <<<<<<

            //>>>2012/04/20
            this._salesCodeDic.Clear();
            ReadUserGdBd(71, ref this._salesCodeDic);
            //<<<2012/04/20

            // 2011/02/14 Add >>>
            IList<ISCMOrderDetailRecord> answerTargetList = new List<ISCMOrderDetailRecord>();
            // 2011/02/14 Add <<<
            //add start  by liusy 2011/09/29 #25597
            int salesSort = 1;
            //end start  by liusy 2011/09/29 #25597
            // 明細：SCM受注明細データ(問合せ・発注)ごとに回答：SCM受注明細データ(回答)を作成
            foreach (ISCMOrderDetailRecord enmDetailRecord in Referee.Searcher.DetailRecordList)
            {
                // -- ADD 2011/10/11   ------ >>>>>>
                // 回答する単位で部品情報をクリアする
                partsHash.Clear();
                // -- ADD 2011/10/11   ------ <<<<<<
                string detailKey = enmDetailRecord.ToKey();
                if (!Referee.SCMGoodsUnitDataMap.ContainsKey(detailKey))
                {
                    #region <Log>

                    string msg = "明細キー["+ enmDetailRecord.ToKey() + "]は回答できませんでした。";
                    EasyLogger.Write(MY_NAME, METHOD_NAME, LogHelper.GetInfoMsg(msg));

                    #endregion // </Log>

                    continue;
                }

                #region SCM受注データ

                ISCMOrderHeaderRecord headerRecord = null;
                if (Referee.Searcher.RelationalHeaderMap.ContainsKey(enmDetailRecord.ToRelationKey()))
                {
                    headerRecord = Referee.Searcher.RelationalHeaderMap[enmDetailRecord.ToRelationKey()];
                }
                else
                {
                    Debug.Assert(false, "該当するヘッダがありません。");
                    headerRecord = new UserSCMOrderHeaderRecord();
                }

                // SCM受注データを回答用に編集
                headerRecord = CopyAndEditSCMOrderHeaderRecord(headerRecord);

                #endregion // SCM受注データ

                //>>>2012/04/20
                // SCM全体設定マスタ取得
                _scmTtlSt = _referee.TtlStSettingDB.Find(
                    headerRecord.InqOtherEpCd,
                    headerRecord.InqOtherSecCd
                );
                //<<<2012/04/20

                // DEL 2014/02/05 SCM仕掛一覧№10627対応 ----------------------------------->>>>>
                #region 旧ソース
                //// ADD 2013/10/25 201311XX配信予定システムテスト障害№13,14対応 -------------------------------->>>>> 
                //// 消費税転嫁方式取得
                //int consTaxLayMethod = 0;
                //CustomerInfo customer = GetCustomerInfo(headerRecord);
                //if (customer != null)
                //{
                //    // 請求先情報
                //    CustomerInfo claim = new CustomerInfo();
                //    int status = CustomerDB.RealAccesser.ReadDBData(ConstantManagement.LogicalMode.GetData0, customer.EnterpriseCode, customer.ClaimCode, true, false, out claim);
                //    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                //    {
                //        TaxRateSetAgent taxRateSet = new TaxRateSetAgent(headerRecord.EnterpriseCode);
                //        consTaxLayMethod = (claim.CustCTaXLayRefCd == 0) ? taxRateSet.ConsTaxLayMethod : claim.ConsTaxLayMethod;
                //    }
                //}
                //// ADD 2013/10/25 201311XX配信予定システムテスト障害№13,14対応 --------------------------------<<<<<
                #endregion
                // DEL 2014/02/05 SCM仕掛一覧№10627対応 -----------------------------------<<<<<

                // ADD 2014/02/05 SCM仕掛一覧№10627対応 ----------------------------------->>>>>
                int consTaxLayMethod = 0;
                CustomerInfo claim = ClaimInfo(headerRecord.CustomerCode);
                TaxRateSetAgent taxRateSet = new TaxRateSetAgent(headerRecord.EnterpriseCode);
                if (claim != null)
                {
                    consTaxLayMethod = claim.CustCTaXLayRefCd == 0 ? taxRateSet.ConsTaxLayMethod : claim.ConsTaxLayMethod;
                }
                else
                {
                    // 請求先が取得できない場合は、マスタの税率設定をセット
                    consTaxLayMethod = taxRateSet.ConsTaxLayMethod;
                }
                // ADD 2014/02/05 SCM仕掛一覧№10627対応 -----------------------------------<<<<<


                #region SCM受注データ(車両情報)

                ISCMOrderCarRecord carRecord = null;
                if (Referee.Searcher.CarRecordMap.ContainsKey(enmDetailRecord.ToCarKey()))
                {
                    carRecord = Referee.Searcher.CarRecordMap[enmDetailRecord.ToCarKey()];
                }
                else
                {
                    Debug.Assert(false, "該当する車両情報がありません。");
                    carRecord = new UserSCMOrderCarRecord();
                }

                // SCM受注データ(車両情報)を回答用に編集
                // UPD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                //carRecord = CopyAndEditSCMOrderCarRecord(carRecord, enmDetailRecord);
                carRecord = CopyAndEditSCMOrderCarRecord(headerRecord, carRecord, enmDetailRecord);
                // UPD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<

                #endregion // SCM受注データ(車両情報)

                #region SCM受注明細データ(問合せ・発注)

                // SCM受注明細データ(問合せ・発注)を回答用に編集
                ISCMOrderDetailRecord detailRecord = CopyAndEditSCMOrderDetailRecord(enmDetailRecord);

                #endregion // SCM受注明細データ(問合せ・発注)

                // 受注ステータスのマップ
                // 受注ステータス別に伝票(売上データ)を作成
                // ただし、受注ステータスは回答データにて決まるため、
                // 他の関連データは回答データ作成後に受注ステータスを設定する
                IDictionary<string, int> acptAnOdrStatusMap = new Dictionary<string, int>();    // キー：問合せ番号+受注ステータス

                // 対象品目ごとに回答データおよび売上データを作成
                IList<SCMGoodsUnitData> scmGoodsUnitDataList = Referee.SCMGoodsUnitDataMap[detailKey];

                // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
                PartsInfoDataSet partsInfoDataSet = new PartsInfoDataSet();
                partsInfoDataSet = Referee.Searcher.ResultMap[enmDetailRecord.ToKey()].PartsInfoDB;
                this._ofrPriceList = null;
                this._userPriceList = null;
                this._iSectionCode = headerRecord.InqOtherSecCd;
                // 提供データ価格情報、ユーザー登録分価格情報のリストを生成する
                // 2015/03/30 UPD 全体配信システムテスト障害№59対応 ----------------------------------->>>>>
                //if (partsInfoDataSet.OfrPriceDataTable != null && partsInfoDataSet.OfrPriceDataTable.Count != 0)
                if (partsInfoDataSet != null && partsInfoDataSet.OfrPriceDataTable != null && partsInfoDataSet.OfrPriceDataTable.Count != 0)
                // 2015/03/30 UPD 全体配信システムテスト障害№59対応 -----------------------------------<<<<<
                {
                    this.GetGoodsPriceListFromUsrGoodsPriceDataTable(partsInfoDataSet.OfrPriceDataTable, out this._ofrPriceList);
                }
                // 2015/03/30 UPD 全体配信システムテスト障害№59対応 ----------------------------------->>>>>
                //if (partsInfoDataSet.UsrGoodsPrice != null && partsInfoDataSet.UsrGoodsPrice.Count != 0)
                if (partsInfoDataSet != null && partsInfoDataSet.UsrGoodsPrice != null && partsInfoDataSet.UsrGoodsPrice.Count != 0)
                // 2015/03/30 UPD 全体配信システムテスト障害№59対応 ----------------------------------->>>>>
                {
                    this.GetGoodsPriceListFromUsrGoodsPriceDataTable(partsInfoDataSet.UsrGoodsPrice, out this._userPriceList);
                }
                this.PriceCalculator.SetCurrentSCMOrderData(headerRecord.CustomerCode, detailRecord);
                // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<

                foreach (SCMGoodsUnitData scmGoodsUnitData in scmGoodsUnitDataList)
                {
                    #region 削除(SCM改良の為)
                    //>>>2012/01/04
                    //// -- ADD 2011/10/11   ------ >>>>>>
                    //// 在庫確認の自動回答時、回答する部品情報で同一品番、同一メーカーコードの部品が存在した場合
                    //// １部品として回答するように
                    //if (headerRecord.InqOrdDivCd == (int)InqOrdDivCd.Inquiry &&
                    //        scmGoodsUnitData.AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE)
                    //{
                    //    tempKey = scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd + "_" + scmGoodsUnitData.GetAnsPureGoodsNo();
                    //    if (partsHash.ContainsKey(tempKey))
                    //    {
                    //        continue;
                    //    }
                    //    else
                    //    {
                    //        partsHash.Add(tempKey, string.Empty);
                    //    }
                    //}
                    //// -- ADD 2011/10/11   ------ <<<<<<

                    // DEL 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ---------------------------------->>>>>

                    //if (headerRecord.InqOrdDivCd == (int)InqOrdDivCd.Inquiry &&
                    //        scmGoodsUnitData.AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE)
                    //{
                    //    // DEL 2012/05/28 ------------------------------------------------------------------------->>>>>
                    //    //----------------------------------------------------------
                    //    // 親品番が優良の場合、除外。
                    //    //----------------------------------------------------------
                    //    //if (scmGoodsUnitData.RealGoodsUnitData != null)
                    //    //{
                    //        //if ((!IsPureAtOfferKubun(scmGoodsUnitData.RealGoodsUnitData)) &&
                    //        //    (scmGoodsUnitData.AnsPureGoodsNo == scmGoodsUnitData.RealGoodsUnitData.GoodsNo) &&
                    //        //    (scmGoodsUnitData.PureGoodsMakerCd == scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd))
                    //        //{
                    //        //    continue;
                    //        //}
                    //    //}
                    //    // DEL 2012/05/28 -------------------------------------------------------------------------<<<<<

                    //    //----------------------------------------------------------
                    //    // 商品情報(純正情報も含めて)が同一の場合、除外。
                    //    //----------------------------------------------------------
                    //    tempKey = scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd + "_" +
                    //              scmGoodsUnitData.RealGoodsUnitData.GoodsNo + "_" +
                    //              scmGoodsUnitData.PureGoodsMakerCd + "_" +
                    //              scmGoodsUnitData.AnsPureGoodsNo;
                    //    if (partsHash.ContainsKey(tempKey))
                    //    {
                    //        continue;
                    //    }
                    //    else
                    //    {
                    //        partsHash.Add(tempKey, string.Empty);
                    //    }

                    //    //----------------------------------------------------------
                    //    // 親品番が商品情報に含まれない場合、除外。
                    //    //----------------------------------------------------------
                    //    PartsInfoDataSet.UsrGoodsInfoDataTable usrGoodsInfoDataTable = Referee.Searcher.ResultMap[detailKey].PartsInfoDB.UsrGoodsInfo;
                    //    ArrayList goodsList = new ArrayList();
                    //    if ((usrGoodsInfoDataTable != null) && (usrGoodsInfoDataTable.Count != 0)) // 2012/02/12
                    //    { // 2012/02/12
                    //        foreach (PartsInfoDataSet.UsrGoodsInfoRow usrGoodsInfoRow in usrGoodsInfoDataTable)
                    //        {
                    //            if (!string.IsNullOrEmpty(usrGoodsInfoRow.NewGoodsNo))
                    //            {
                    //                goodsList.Add(usrGoodsInfoRow.NewGoodsNo + "_" + usrGoodsInfoRow.GoodsMakerCd);
                    //            }
                    //            else
                    //            {
                    //                goodsList.Add(usrGoodsInfoRow.GoodsNo + "_" + usrGoodsInfoRow.GoodsMakerCd);
                    //            }
                    //        }
                    //        if (!goodsList.Contains(scmGoodsUnitData.AnsPureGoodsNo + "_" + scmGoodsUnitData.PureGoodsMakerCd))
                    //        {
                    //            continue;
                    //        }
                    //    } // 2012/02/12

                    //}
                    ////<<<2012/01/04
                    // DEL 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ----------------------------------<<<<<
                    #endregion

                    if (scmGoodsUnitData.RealGoodsUnitData is NullGoodsUnitData)    // 品番検索で0件だったデータ
                    {
                        #region <Log>

                        string msg = "品番検索で0件だったデータです。";
                        msg += Environment.NewLine + SCMDataHelper.GetLabel(scmGoodsUnitData.SourceDetailRecord);
                        EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));

                        #endregion // </Log>
                    }

                    #region <回答を行わない判定>

                    // 売伝用に手動回答と判定された明細データも受注データの作成が必要
                    // ただし、問合せ・発注種別が"発注"で委託在庫以外のものを対象とする
                    if (!scmGoodsUnitData.CanMakeSalesData())
                    {
                        continue;
                    }

                    #endregion // </回答を行わない判定>

                    // -- ADD 2011/08/10   ------ >>>>>>
                    List<ISCMAcOdSetDtRecord> OdSetDtRecordList = new List<ISCMAcOdSetDtRecord>();
                    // -- ADD 2011/08/10   ------ <<<<<<
                    // SCM受注明細データ(回答)
                    ISCMOrderAnswerRecord answerRecord = new UserSCMOrderAnswerRecord(scmGoodsUnitData.SourceDetailRecord);
                    {
                        // SCM受注明細データ(回答)を編集

                        answerRecord = EditSCMOrderAnswerRecord(answerRecord, scmGoodsUnitData);

                        // DEL 2013/11/28 商品保証部Redmine#719対応 ---------------------------------->>>>>
                        // --- ADD 2012/05/31 ----------------->>>>>>>>>>>>>>>>>>>
                        //// 枝番の編集
                        //// 枝番が１の明細には、受注明細データ（問合せ・発注）の枝番を設定
                        //if (detailRecord.InqRowNumber.Equals(answerRecord.InqRowNumber)
                        //    && answerRecord.InqRowNumDerivedNo.Equals(1))
                        //{
                        //    answerRecord.InqRowNumDerivedNo = detailRecord.InqRowNumDerivedNo;
                        //}
                        // --- ADD 2012/05/31 -----------------<<<<<<<<<<<<<<<<<<<
                        // DEL 2013/11/28 商品保証部Redmine#719対応 ----------------------------------<<<<<

                        // ADD 2013/10/25 201311XX配信予定システムテスト障害№13,14対応 -------------------------------->>>>> 
                        // 消費税転嫁方式の設定
                        answerRecord.ScmConsTaxLayMethod = consTaxLayMethod;
                        // ADD 2013/10/25 201311XX配信予定システムテスト障害№13,14対応 --------------------------------<<<<< 

                        // DEL 2013/09/17 SCM仕掛一覧№210対応 --------------------------------------->>>>>
                        //// --- ADD 三戸 2012/08/17 ---------->>>>>
                        //answerRecord.DisplayOrder = detailRecord.InqRowNumber;
                        //// --- ADD 三戸 2012/08/17 ----------<<<<<
                        // DEL 2013/09/17 SCM仕掛一覧№210対応 ---------------------------------------<<<<<
                        
                        // -- ADD 2011/08/10   ------ >>>>>>
                        // --- UPD 2014/10/14 Y.Wakita ---------->>>>>
                        //// PCCUOEの処理
                        //if (answerRecord.InqOrdDivCd == (int)InqOrdDivCd.Inquiry && 
                        //    scmGoodsUnitData.AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE)
                        if (answerRecord.InqOrdDivCd == (int)InqOrdDivCd.Inquiry)
                        // --- UPD 2014/10/14 Y.Wakita ----------<<<<<
                        {
                            UserSCMOrderAnswerRecord userAnswerRecord = answerRecord as UserSCMOrderAnswerRecord;

                            // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
                            // 提供データ価格情報を取得する
                            string key = answerRecord.GoodsNo + "/" + answerRecord.GoodsMakerCd.ToString() + "/" + enmDetailRecord.ToKey();
                            this._setOfrPriceList = new List<GoodsPrice>();
                            this._setUserPriceList = new List<GoodsPrice>();
                            if (Referee.SetOfferPriceMap.ContainsKey(key))
                            {
                                this._setOfrPriceList = Referee.SetOfferPriceMap[key];
                            }
                            if (Referee.SetUserPriceMap.ContainsKey(key))
                            {
                                this._setUserPriceList = Referee.SetUserPriceMap[key];
                            }
                            // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<

                            // セット情報を設定する
                            EditOdSetDtRecord(userAnswerRecord, scmGoodsUnitData, detailRecord, ref OdSetDtRecordList);
                        }
                        // -- ADD 2011/08/10   ------ <<<<<<

                        // ADD 2014/08/13 11070147-00 システムテスト障害№5対応 ----------------------------------------->>>>> 
                        // 検索タイプがBLコード検索以外の時
                        if (scmGoodsUnitData.SearchedType != SCMSearchedResult.GoodsSearchDivCd.BLCode)
                        {
                            // 前回見積データが存在しない時
                            if (Referee.Searcher.OrgAnswerRecordList.Count == 0)
                            {
                                answerRecord.PrmSetDtlNo2 = 0;
                                answerRecord.PrmSetDtlName2 = string.Empty;
                                // ADD 2015/02/24 下口 SCM高速化 C向け種別・特記事項対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                                answerRecord.PrmSetDtlName2ForFac = string.Empty;
                                answerRecord.PrmSetDtlName2ForCOw = string.Empty;
                                // ADD 2015/02/24 下口 SCM高速化 C向け種別・特記事項対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            }
                            // 再問合せの時
                            else if (Referee.Searcher.OrgAnswerRecordList.Count != 0 && answerRecord.InqOrdDivCd == (int)InqOrdAnsDivCd.Inquiry)
                            {
                                answerRecord.PrmSetDtlNo2 = scmGoodsUnitData.SourceDetailRecord.PrmSetDtlNo2;
                                answerRecord.PrmSetDtlName2 = scmGoodsUnitData.SourceDetailRecord.PrmSetDtlName2;
                                // ADD 2015/02/24 下口 SCM高速化 C向け種別・特記事項対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                                answerRecord.PrmSetDtlName2ForFac = scmGoodsUnitData.SourceDetailRecord.PrmSetDtlName2ForFac;
                                answerRecord.PrmSetDtlName2ForCOw = scmGoodsUnitData.SourceDetailRecord.PrmSetDtlName2ForCOw;
                                // ADD 2015/02/24 下口 SCM高速化 C向け種別・特記事項対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                            }
                        }
                        // ADD 2014/08/13 11070147-00 システムテスト障害№5対応 -----------------------------------------<<<<< 

                        // ADD 2015/06/18 豊沢 SCM高速化 Redmine3941対応 --------------------->>>>>
                        if (false)
                        {
                            if (headerRecord.AutoAnsMthd == 1)
                            {
                                answerRecord.GoodsSpecialNote = scmGoodsUnitData.SourceDetailRecord.GoodsSpecialNote;
                                answerRecord.GoodsSpecialNtForFac = scmGoodsUnitData.SourceDetailRecord.GoodsSpecialNtForFac;
                                answerRecord.GoodsSpecialNtForCOw = scmGoodsUnitData.SourceDetailRecord.GoodsSpecialNtForCOw;
                                answerRecord.PrmSetDtlNo2 = scmGoodsUnitData.SourceDetailRecord.PrmSetDtlNo2;
                                answerRecord.PrmSetDtlName2 = scmGoodsUnitData.SourceDetailRecord.PrmSetDtlName2;
                                answerRecord.PrmSetDtlName2ForFac = scmGoodsUnitData.SourceDetailRecord.PrmSetDtlName2ForFac;
                                answerRecord.PrmSetDtlName2ForCOw = scmGoodsUnitData.SourceDetailRecord.PrmSetDtlName2ForCOw;
                            }
                        }
                        // ADD 2015/06/18 豊沢 SCM高速化 Redmine3941対応 ---------------------<<<<<

                        // SCM受注データツリーに追加
                        string relationKey = SCMEntityUtil.GetRelationKey(answerRecord);
                        if (SCMDataTreeMap.ContainsKey(relationKey))
                        {
                            SCMDataTreeMap[relationKey].Member04.Add(answerRecord);
                        }
                    }
                    
                    // SCM売上データ生成処理に保持
                    string scmSalesKey = GetSCMSalesKey(answerRecord);
                    if (!SCMSalesListEssenceMap.ContainsKey(scmSalesKey))
                    {
                        SCMSalesListEssenceMap.Add(scmSalesKey, CreateSCMSalesListEssence());
                        //add start  by liusy 2011/09/29 #25597
                        //salesSort = 1;
                        //add end  by liusy 2011/09/29 #25597
                    }
                    SCMSalesListEssenceMap[scmSalesKey].AddSCMAnswerRecord(answerRecord, detailRecord);
                    // -- ADD 2011/08/10   ------ >>>>>>
                    SCMSalesListEssenceMap[scmSalesKey].AddSCMSetRecord(answerRecord, OdSetDtRecordList);
                    // -- ADD 2011/08/10   ------ <<<<<<
                    // 受注ステータスを保持
                    if (!acptAnOdrStatusMap.ContainsKey(scmSalesKey))
                    {
                        acptAnOdrStatusMap.Add(scmSalesKey, answerRecord.AcptAnOdrStatus);
                    }

                    #region <売上データの作成を行わない判定>

                    // 自動回答時は相場回答の場合、売上データの作成を行わない
                    if (!CanMakeSalesData(answerRecord))
                    {
                        continue;
                    }

                    #endregion // </売上データの作成を行わない判定>

                    // ----- ADD 2011/11/12 ------ >>>>>
                    //// ----- ADD 2011/10/10 ------ >>>>>
                    //#region <PCCUOEの在庫確認の自動回答時、見積データを作成しない>
                    //// PCCUOEの処理
                    //if (scmGoodsUnitData.AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE &&
                    //    answerRecord.InqOrdDivCd == (int)InqOrdDivCd.Inquiry)
                    //{
                    //    continue;
                    //}
                    //#endregion <PCCUOEの在庫確認の自動回答時、見積データを作成しない>
                    //// ----- ADD 2011/10/10 ------ <<<<<
                    // ----- ADD 2011/11/12 ------ <<<<<

                    // 売上明細データ
                    // UPD 2014/01/16 T.Miyamoto ------------------------------>>>>>
                    //SCMSalesListEssenceMap[scmSalesKey].AddSalesDetailData(
                    //    CreateSalesDetail(scmGoodsUnitData, answerRecord, headerRecord, carRecord),
                    //    answerRecord
                    //);
                    SCMSalesListEssenceMap[scmSalesKey].AddSalesDetailData(
                        CreateSalesDetail(scmGoodsUnitData, answerRecord, headerRecord, carRecord, enmDetailRecord),
                        answerRecord
                    );
                    // UPD 2014/01/16 T.Miyamoto ------------------------------<<<<<

                    // リモート参照用明細パラメータ
                    //modify start  by liusy 2011/09/29 #25597
                    SCMSalesListEssenceMap[scmSalesKey].AddSlipDetailAddInfo(
                        CreateSlipDetailAddInfoWork(answerRecord, carRecord, ref salesSort),
                        answerRecord
                    );
                    //modify end  by liusy 2011/09/29 #25597
                }   // foreach (SCMGoodsUnitData scmGoodsUnitData in scmGoodsUnitDataList)

                answerTargetList.Add(enmDetailRecord);  // 2011/02/14 Add

                // ▽回答データまたは売上明細データが決まらないと実施できない処理▽

                // 受注ステータスを再設定し、SCM売上データ生成処理に保持
                foreach (string scmSalesKey in acptAnOdrStatusMap.Keys)
                {
                    // SCM受注データ
                    headerRecord.AcptAnOdrStatus = acptAnOdrStatusMap[scmSalesKey];
                    // 2011/02/14 Add >>>
                    headerRecord.InqOrdDivCd = ( acptAnOdrStatusMap[scmSalesKey] == (int)AcptAnOdrStatus.Estimate ) ? (int)InqOrdDivCd.Inquiry : (int)InqOrdDivCd.Order;
                    // 2011/02/14 Add <<<
                    SCMSalesListEssenceMap[scmSalesKey].SCMHeaderRecord = headerRecord;

                    // SCM受注データ(車両情報)
                    carRecord.AcptAnOdrStatus = acptAnOdrStatusMap[scmSalesKey];
                    SCMSalesListEssenceMap[scmSalesKey].SCMCarRecord = carRecord;

                    // SCM受注明細データ(問合せ・発注) ※受注ステータスなし
                    SCMSalesListEssenceMap[scmSalesKey].AddSCMDetailRecord(detailRecord);
                    string relationKey = detailRecord.ToRelationKey();
                    if (SCMDataTreeMap.ContainsKey(relationKey))
                    {
                        SCMSalesListEssenceMap[scmSalesKey].SCMDetailRecordMax = SCMDataTreeMap[relationKey].Member03.Count;
                        // 2010/03/31 Add >>>
                        List<ISCMOrderAnswerRecord> answerList;
                        List<ISCMOrderDetailRecord> detailList;
                        Referee.Searcher.GetOriginalDataList(headerRecord, out detailList, out answerList);
                        SCMSalesListEssenceMap[scmSalesKey].SetAnswerDivCdOfSCMHeader(answerList, detailList);  // 回答区分を設定
                        // 2010/03/31 Add <<<
                    }

                    // 売上データ
                    SCMSalesListEssenceMap[scmSalesKey].SalesSlipData = CreateSalesSlip(headerRecord);

                    // 車両管理データ
                    SCMSalesListEssenceMap[scmSalesKey].AddCarManagementData(
                        CreateCarManagementWork(carRecord, headerRecord, enmDetailRecord)
                    );
                }
            }   // foreach (ISCMOrderDetailRecord enmDetailRecord in Referee.Searcher.DetailRecordList)

            // 2011/02/14 Add >>>
            if (IsAutoAnswer())
            {
                int status = 0;
                List<string> deleteKeyList = new List<string>();

                foreach (string key in SCMSalesListEssenceMap.Keys)
                {
                    ISCMOrderHeaderRecord header = SCMSalesListEssenceMap[key].SCMHeaderRecord;

                    List<ISCMOrderDetailRecord> updateList = new List<ISCMOrderDetailRecord>();

                    foreach (ISCMOrderDetailRecord detail in answerTargetList)
                    {
                        if (( header.InqOriginalEpCd.Trim().Equals(detail.InqOriginalEpCd.Trim()) ) && //@@@@20230303
                            ( header.InqOriginalSecCd.Equals(detail.InqOriginalSecCd) ) &&
                            ( header.InqOtherEpCd.Equals(detail.InqOtherEpCd) ) &&
                            ( header.InqOtherSecCd.Equals(detail.InqOtherSecCd) ) &&
                            ( header.InquiryNumber.Equals(detail.InquiryNumber) ))
                        {
                            updateList.Add(detail);
                        }
                    }
                    if (updateList != null && updateList.Count > 0)
                    {
                        // UPD 2014/05/13 PM-SCM速度改良 フェーズ２№14.明細取込区分の更新方法を改良対応 ---------------------------------->>>>>
                        //status = SCMWebServer.Singleton.Instance.UpdateInqDtlTakeinDiv(header, updateList);
                        status = SCMWebServer.Singleton.Instance.UpdateInqDtlTakeinDiv(header, updateList, this.Referee.ScmOdDtInqList, this.Referee.ScmOdDtCarList);
                        // UPD 2014/05/13 PM-SCM速度改良 フェーズ２№14.明細取込区分の更新方法を改良対応 ----------------------------------<<<<<

                        // エラーになった分は自動回答しない
                        if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            deleteKeyList.Add(key);
                        }
                    }
                }

                foreach (string deleteKey in deleteKeyList)
                {
                    if (SCMSalesListEssenceMap.ContainsKey(deleteKey))
                    {
                        SCMSalesListEssenceMap.Remove(deleteKey);
                    }
                }
            }
            // 2011/02/14 Add <<<
        }

        //>>>2012/01/04
        /// <summary>
        /// 純正であるか判断します。
        /// </summary>
        /// <param name="goodsUnitData">商品連結データ</param>
        /// <returns>
        /// <c>true</c> :純正です。<br/>
        /// <c>false</c>:純正ではありません。
        /// </returns>
        /// <exception cref="ArgumentOutOfRangeException">提供区分の値が範囲外です。</exception>
        protected static bool IsPureAtOfferKubun(GoodsUnitData goodsUnitData)
        {
            switch (goodsUnitData.OfferKubun)
            {
                case 0: // ユーザー登録
                    {
                        // 0:純正
                        if (goodsUnitData.GoodsKindCode == 0)
                        {
                            return true;
                        }
                        // 1:その他
                        else if (goodsUnitData.GoodsKindCode == 1)
                        {
                            return false;
                        }
                        return false;
                    }
                case 1: return true;    // 1:提供純正編集
                case 2: return false;   // 2:提供優良編集
                case 3: return true;    // 3:提供純正
                case 4: return false;   // 4:提供優良
                case 5: return false;   // 5:TBO
                case 7: return false;   // 7:オリジナル部品
                default:
                    throw new ArgumentOutOfRangeException(
                        string.Format("提供区分の値が範囲外です。(={0})", goodsUnitData.OfferKubun)
                    );
            }
        }
        //<<<2012/01/04

        /// <summary>
        /// 売上リストの生成者を生成します。
        /// </summary>
        /// <returns>売上リストの生成者</returns>
        protected abstract SCMSalesListEssence CreateSCMSalesListEssence();

        /// <summary>
        /// 売上データを作成可能か判断します。
        /// </summary>
        /// <param name="answerRecord">SCM受注明細データ(回答)のレコード</param>
        /// <returns>
        /// <c>true</c> :作成できます。<br/>
        /// <c>false</c>:作成できません。
        /// </returns>
        protected abstract bool CanMakeSalesData(ISCMOrderAnswerRecord answerRecord);

        // 2011/02/14 Add >>>
        /// <summary>
        /// 自動回答か判断します。
        /// </summary>
        /// <returns></returns>
        protected abstract bool IsAutoAnswer();
        // 2011/02/14 Add <<<

        // 2011/02/18 Add >>>
        /// <summary>
        /// 回答区分を取得します。
        /// </summary>
        /// <param name="acptAnOdrStatus"></param>
        /// <returns></returns>
        protected abstract int GetAnswerCreateDiv(int acptAnOdrStatus);
        // 2011/02/18 Add <<<

        /// <summary>デフォルト売上伝票番号</summary>
        protected const string DEFAULT_SALES_SLIP_NUM = "000000000";

        #region <SCM受注データ>

        /// <summary>
        /// SCM受注データを回答用にコピーおよび編集します。
        /// </summary>
        /// <param name="headerRecord">SCM受注データのレコード</param>
        /// <returns>回答用に編集したSCM受注データのレコード</returns>
        protected virtual ISCMOrderHeaderRecord CopyAndEditSCMOrderHeaderRecord(ISCMOrderHeaderRecord headerRecord)
        {
            const string METHOD_NAME = "CopyAndEditSCMOrderHeaderRecord()"; // ログ用

            UserSCMOrderHeaderRecord userHeaderRecord = headerRecord as UserSCMOrderHeaderRecord;
            {
                if (userHeaderRecord == null)
                {
                    Debug.Assert(false, "User型のSCM受注データではありません。");
                    return headerRecord;
                }
                else
                {
                    #region <Log>

                    string msg = string.Format("SCM受注データを生成中(問合せ番号={0})...", headerRecord.InquiryNumber);
                    EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));

                    #endregion // </Log>
                }
                userHeaderRecord = new UserSCMOrderHeaderRecord(userHeaderRecord);

                userHeaderRecord.CreateDateTime = DateTime.MinValue;            // 001.作成日時     …共通ヘッダ リモート取得
                userHeaderRecord.UpdateDateTime = DateTime.MinValue;            // 002.更新日時     …共通ヘッダ リモート取得
                userHeaderRecord.EnterpriseCode = headerRecord.InqOtherEpCd;    // 003.企業コード   …共通ヘッダ リモート取得
                // 004.GUID             …共通ヘッダ リモート取得
                // 005.更新従業員コード …共通ヘッダ リモート取得
                // 006.更新アセンブリID1…共通ヘッダ リモート取得
                // 007.更新アセンブリID2…共通ヘッダ リモート取得
                // 008.論理削除区分     …共通ヘッダ リモート取得

                // 009.問合せ元企業コード   …SCM受注データ
                // 010.問合せ元企業名称
                // 011.問合せ元拠点コード   …SCM受注データ
                // 012.問合せ元拠点名称
                // 013.問合せ先企業コード   …SCM受注データ
                // 014.問合せ先拠点コード   …SCM受注データ
                // 015.問合せ番号           …SCM受注データ
                // 016.得意先コード         …得意先マスタ 得意先コード(問合せ元コードで取得) ※受信時に設定される
                Debug.Assert(!userHeaderRecord.CustomerCode.Equals(0), "得意先コードが設定されていません。");

                userHeaderRecord.UpdateDate = DateTime.MinValue;    // 017.更新年月日       …リモート取得→Web-DBが設定
                userHeaderRecord.UpdateTime = 0;                    // 018.更新時分ミリ秒   …リモート取得→Web-DBが設定

                // 019.回答区分…10:一部回答/20:回答完了→売上データの構造が完成した後に設定

                // 020.確定日               …SCM受注データ
                // 021.問合せ・発注備考     …SCM受注データ
                // 022.添付ファイル         …SCM受注データ
                // 023.添付ファイル名       …SCM受注データ
                // 024.問合せ従業員コード   …SCM受注データ
                // 025.問合せ従業員名称     …SCM受注データ

                CustomerInfo currentCustomerInfo = GetCustomerInfo(headerRecord);
                if (currentCustomerInfo != null)
                {
                    // 026.回答従業員コード…得意先マスタ.顧客担当者コード(CustomerAgentCd)
                    userHeaderRecord.AnsEmployeeCd = currentCustomerInfo.CustomerAgentCd;

                    // --- DEL m.suzuki 2011/05/23 ---------->>>>>
                    # region // DEL
                    //// 027.回答従業員名称…従業員マスタより取得
                    //userHeaderRecord.AnsEmployeeNm = GetEmployeeName(
                    //    userHeaderRecord.EnterpriseCode,
                    //    userHeaderRecord.AnsEmployeeCd
                    //);

                    //#region <Log>

                    //string msg = string.Format(
                    //    "回答従業員=[{0}]：「{1}」",
                    //    userHeaderRecord.AnsEmployeeCd,
                    //    userHeaderRecord.AnsEmployeeNm
                    //);
                    //EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));

                    //#endregion // </Log>
                    # endregion
                    // --- DEL m.suzuki 2011/05/23 ----------<<<<<
                }
                else
                {
                    #region <Log>

                    string msg = string.Format("得意先マスタに存在しません(={0})", headerRecord.CustomerCode);
                    EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));

                    #endregion // </Log>
                }
                // --- ADD m.suzuki 2011/05/23 ---------->>>>>
                // 026.回答従業員コード(※未設定ならばログイン従業員)
                if ( userHeaderRecord.AnsEmployeeCd == string.Empty )
                {
                    // 回答従業員コード ← ログイン従業員コード
                    userHeaderRecord.AnsEmployeeCd = LoginInfoAcquisition.Employee.EmployeeCode;
                }

                // 027.回答従業員名称…従業員マスタより取得
                userHeaderRecord.AnsEmployeeNm = GetEmployeeName(
                    userHeaderRecord.EnterpriseCode,
                    userHeaderRecord.AnsEmployeeCd
                );

                #region <Log>

                string logMsg = string.Format(
                    "回答従業員=[{0}]：「{1}」",
                    userHeaderRecord.AnsEmployeeCd,
                    userHeaderRecord.AnsEmployeeNm
                );
                EasyLogger.WriteDebugLog( MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg( logMsg ) );

                #endregion // </Log>
                // --- ADD m.suzuki 2011/05/23 ----------<<<<<

                // 028.問合せ日…SCM受注データ

                // 029.受注ステータス…算出→対応する回答データの受注ステータスが正
                userHeaderRecord.AcptAnOdrStatus = SCMDataHelper.GetDefaultAcptAnOdrStatus(userHeaderRecord.InqOrdDivCd);

                userHeaderRecord.SalesSlipNum = DEFAULT_SALES_SLIP_NUM; // 030.売上伝票番号…リモート取得

                // 031.売上伝票合計(税込み)  …算出→売上データの構造が完成した後に設定
                // 032.売上小計(税)          …算出→売上データの構造が完成した後に設定

                // 033.問合せ・発注種別…SCM受注データ
                userHeaderRecord.InqOrdAnsDivCd = (int)InqOrdAnsDivCd.Answer;   // 034.問発・回答種別…2:回答
                // 035.受信日時     …SCM受注データ
                // 036.回答作成区分 …SCM受注データ
                userHeaderRecord.AnswerCreateDiv = GetAnswerCreateDiv(userHeaderRecord.AcptAnOdrStatus);
            }
            return userHeaderRecord;
        }

        ///// <summary>
        ///// 回答作成区分を取得します。
        ///// </summary>
        ///// <param name="acptAnOdrStatus">受注ステータス</param>
        ///// <returns>
        ///// 受注ステータスが「10:見積」「30:売上」の場合、「0:自動」を返します。<br/>
        ///// それ以外（「20:受注」）の場合、「1:手動(Web)」を返します。
        ///// </returns>
        //public static int GetAnswerCreateDiv(int acptAnOdrStatus)
        //{
        //    if (
        //        acptAnOdrStatus.Equals((int)AcptAnOdrStatus.Estimate)
        //            ||
        //        acptAnOdrStatus.Equals((int)AcptAnOdrStatus.Sales)
        //    )
        //    {
        //        return (int)AnswerCreateDivValue.Auto;
        //    }
        //    return (int)AnswerCreateDivValue.ManualWeb;
        //}

        #endregion // </SCM受注データ>

        #region <SCM受注データ(車両情報)>

        /// <summary>
        /// SCM受注データ(車両情報)を回答用にコピーおよび編集します。
        /// </summary>
        /// <remarks>SCM受注データ(車両情報)に値が設定されている場合は、SCM受注データ(車両情報)を優先してセットします。</remarks>
        /// <param name="headerRecord">SCM受注データのレコード</param>
        /// <param name="carRecord">SCM受注データ(車両情報)のレコード</param>
        /// <param name="detailRecord">SCM受注明細データ(問合せ・発注)のレコード</param>
        /// <returns>回答用に編集したSCM受注データ(車両情報)のレコード</returns>
        protected ISCMOrderCarRecord CopyAndEditSCMOrderCarRecord(
            // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
            ISCMOrderHeaderRecord headerRecord,
            // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
            ISCMOrderCarRecord carRecord,
            ISCMOrderDetailRecord detailRecord
        )
        {
            const string METHOD_NAME = "CopyAndEditSCMOrderCarRecord()";    // ログ用

            UserSCMOrderCarRecord userCarRecord = carRecord as UserSCMOrderCarRecord;
            {
                if (userCarRecord == null)
                {
                    Debug.Assert(false, "User型のSCM受注データ(車両情報)ではありません。");
                    return carRecord;
                }
                else
                {
                    #region <Log>

                    string msg = string.Format("SCM受注データ(車両情報)を生成中(問合せ番号={0})...", carRecord.InquiryNumber);
                    EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));

                    #endregion // </Log>
                }
                Guid salesRelationId = userCarRecord.SalesRelationId;
                userCarRecord = new UserSCMOrderCarRecord(userCarRecord);
                userCarRecord.SalesRelationId = salesRelationId;    // 売上データ用関連IDは同じにする∵車両情報は1伝票で1つ

                userCarRecord.CreateDateTime = DateTime.MinValue;           // 001.作成日時     …共通ヘッダ リモート取得
                userCarRecord.UpdateDateTime = DateTime.MinValue;           // 002.更新日時     …共通ヘッダ リモート取得
                userCarRecord.EnterpriseCode = detailRecord.InqOtherEpCd;   // 003.企業コード   …共通ヘッダ リモート取得
                // 004.GUID         userCarRecord
                // 005.更新従業員コード …共通ヘッダ リモート取得
                // 006.更新アセンブリID1…共通ヘッダ リモート取得
                // 007.更新アセンブリID2…共通ヘッダ リモート取得
                // 008.論理削除区分     …共通ヘッダ リモート取得

                // FIXME:009.問合せ元企業コード…得意先マスタ 得意先企業コード ※未設定の場合あり？
                // FIXME:010.問合せ元拠点コード…得意先マスタ 得意先企業コード ※未設定の場合あり？

                // 011.問合せ番号                   …SCM受注データ(車両情報)
                // 012.陸運事務所番号               …SCM受注データ(車両情報)
                // 013.陸運事務所名称               …SCM受注データ(車両情報)
                // 014.車両登録番号(種別)           …SCM受注データ(車両情報)
                // 015.車両登録番号(カナ)           …SCM受注データ(車両情報)
                // 016.車両登録番号(プレート番号)   …SCM受注データ(車両情報)

                // 検索結果を取得
                SCMSearchedResult searchedResult = FindSearchedResult(detailRecord);
                if (searchedResult != null && searchedResult.SearchCarInfo != null)
                {
                    const int SINGLE_ROW = 0;   // FIXME:単一行？

                    // --- UPD m.suzuki 2011/05/23 ---------->>>>>
                    # region // DEL
                    //// 017.型式指定番号…車両検索結果
                    //if (userCarRecord.ModelDesignationNo.Equals(0))
                    //{
                    //    userCarRecord.ModelDesignationNo = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].ModelDesignationNo;
                    //}
                    //// 018.類別番号…車両検索結果
                    //if (userCarRecord.CategoryNo.Equals(0))
                    //{
                    //    userCarRecord.CategoryNo = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].CategoryNo;
                    //}
                    //// 019.メーカーコード…車両検索結果
                    //if (userCarRecord.MakerCode.Equals(0))
                    //{
                    //    userCarRecord.MakerCode = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].MakerCode;
                    //}
                    //// 020.車種コード…車両検索結果
                    //if (userCarRecord.ModelCode.Equals(0))
                    //{
                    //    userCarRecord.ModelCode = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].ModelCode;
                    //}
                    //// 021.車種サブコード…車両検索結果
                    //if (userCarRecord.ModelSubCode.Equals(0))
                    //{
                    //    userCarRecord.ModelSubCode = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].ModelSubCode;
                    //}
                    //// 022.車種名…車両検索結果
                    //if (string.IsNullOrEmpty(userCarRecord.ModelName.Trim()))
                    //{
                    //    userCarRecord.ModelName = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].ModelFullName;
                    //}
                    //// 024.型式(フル型)…車両検索結果
                    //if (string.IsNullOrEmpty(userCarRecord.FullModel.Trim()))
                    //{
                    //    userCarRecord.FullModel = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].FullModel;
                    //}
                    //// 025.車台番号…車両検索結果
                    //if (string.IsNullOrEmpty(userCarRecord.FrameNo.Trim()))
                    //{
                    //    userCarRecord.FrameNo = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].FrameNo;
                    //}
                    //// 026.車台型式…車両検索結果
                    //if (string.IsNullOrEmpty(userCarRecord.FrameModel.Trim()))
                    //{
                    //    // FIXME:userCarRecord.FrameModel = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].FrameModel;
                    //}
                    //// 036.装備オブジェクト…車両検索結果
                    //if (userCarRecord.EquipObj == null || userCarRecord.EquipObj.Length.Equals(0))
                    //{
                    //    // FIXME:userCarRecord.EquipObj = searchedResult.SearchCarInfo.CEqpDefDspInfo;
                    //}
                    # endregion

                    // ----- ADD 2011/08/10 ----- >>>>>
                    // --- DEL 2013/08/09 Y.Wakita ---------->>>>>
                    //if (Referee.Searcher.RelationalHeaderMap[detailRecord.ToRelationKey()].AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE)
                    //{
                    // --- DEL 2013/08/09 Y.Wakita ---------->>>>>
                        if (searchedResult.SearchCarInfo.CarModelUIData.Count > 0)
                        {
                            // 017.型式指定番号…車両検索結果
                            if (searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].ModelDesignationNo != 0)
                            {
                                userCarRecord.ModelDesignationNo = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].ModelDesignationNo;
                            }
                            // 018.類別番号…車両検索結果
                            if (searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].CategoryNo != 0)
                            {
                                userCarRecord.CategoryNo = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].CategoryNo;
                            }
                            // 025.車台番号…車両検索結果
                            // --- UPD 三戸 2012/07/11 ---------->>>>>
                            //if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].FrameNo))
                            //{
                            //    userCarRecord.FrameNo = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].FrameNo;
                            //}
                            if (string.IsNullOrEmpty(userCarRecord.FrameNo.Trim()))
                            {
                                userCarRecord.FrameNo = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].FrameNo;
                            }
                            // --- UPD 三戸 2012/07/11 ----------<<<<<

                            // 037.号車
                            //userCarRecord.CarNo = string.Empty; // DEL 2011/10/11
                            // 038.メーカー名称
                            if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].MakerFullName))
                            {
                                userCarRecord.MakerName = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].MakerFullName;
                            }
                            // 039.グレード名称
                            if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].ModelGradeNm))
                            {
                                // --- UPD 三戸 2012/05/31 №135 ---------->>>>>
                                //userCarRecord.GradeName = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].ModelGradeNm;
                                userCarRecord.GradeName = SCMDataHelper.GetGradeFullName(searchedResult.SearchCarInfo);
                                // --- UPD 三戸 2012/05/31 №135 ----------<<<<<
                            }
                            // 040.ボディー名称
                            if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].BodyName))
                            {
                                userCarRecord.BodyName = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].BodyName;
                            }
                            // 041.ドア数
                            if (searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].DoorCount != 0)
                            {
                                userCarRecord.DoorCount = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].DoorCount;
                            }
                            // 042.エンジン型式名称
                            if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].EngineModelNm))
                            {
                                userCarRecord.EngineModelNm = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].EngineModelNm;
                            }
                            // 043.通称排気量
                            if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].EngineDisplaceNm))
                            {
                                int cmnNmEngineDisPlace = 0;

                                try
                                {
                                    // 通称排気量取得
                                    string strValue = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].EngineDisplaceNm;

                                    // NULLチェック
                                    if (!String.IsNullOrEmpty(strValue))
                                    {
                                        cmnNmEngineDisPlace = Convert.ToInt32(strValue);
                                    }
                                }
                                catch
                                {
                                    // 何もしない。
                                }

                                userCarRecord.CmnNmEngineDisPlace = cmnNmEngineDisPlace;
                            }
                            // 044.原動機型式（エンジン）
                            // --- DEL 三戸 2012/07/11 ---------->>>>>
                            //userCarRecord.EngineModel = string.Empty;
                            // --- DEL 三戸 2012/07/11 ----------<<<<<
                            // 045.変速段数
                            userCarRecord.NumberOfGear = 0;
                            // 046.変速機名称
                            userCarRecord.GearNm = string.Empty;
                            // 047.E区分名称
                            if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].EDivNm))
                            {
                                userCarRecord.EDivNm = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].EDivNm;
                            }
                            // 048.ミッション名称
                            if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].TransmissionNm))
                            {
                                userCarRecord.TransmissionNm = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].TransmissionNm;
                            }
                            // 049.シフト名称
                            if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].ShiftNm))
                            {
                                userCarRecord.ShiftNm = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].ShiftNm;
                            }
                        }

                        if (searchedResult.SearchCarInfo.CarModelInfoSummarized.Count > 0)
                        {
                            // 019.メーカーコード…車両検索結果
                            if (searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].MakerCode != 0)
                            {
                                userCarRecord.MakerCode = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].MakerCode;
                            }
                            // 020.車種コード…車両検索結果
                            if (searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].ModelCode != 0)
                            {
                                userCarRecord.ModelCode = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].ModelCode;
                            }
                            // 021.車種サブコード…車両検索結果
                            if (searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].ModelSubCode != 0)
                            {
                                userCarRecord.ModelSubCode = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].ModelSubCode;
                            }
                            // 022.車種名…車両検索結果
                            if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].ModelFullName))
                            {
                                userCarRecord.ModelName = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].ModelFullName;
                            }
                            // 024.型式(フル型)…車両検索結果
                            if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].FullModel))
                            {
                                // ---- ADD 2012/05/25 ------------>>>>>>>>>>>>>>>>>>>
                                // ---DEL 譚洪 2020/12/31 PMKOBETSU-4100の対応 ------>>>>
                                //if (IsFullModelAll(searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].FullModel,searchedResult.SearchCarInfo.CarModelInfo))
                                //{
                                // ---DEL 譚洪 2020/12/31 PMKOBETSU-4100の対応 ------<<<<
                                // ---- ADD 2012/05/25 ------------<<<<<<<<<<<<<<<<<<<
                                    userCarRecord.FullModel = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].FullModel;
                                // ---- ADD 2012/05/25 ------------>>>>>>>>>>>>>>>>>>>
                                // ---DEL 譚洪 2020/12/31 PMKOBETSU-4100の対応 ------>>>>
                                //}
                                //else
                                //{
                                //    userCarRecord.FullModel = string.Empty;
                                //}
                                // ---DEL 譚洪 2020/12/31 PMKOBETSU-4100の対応 ------<<<<
                                // ---- ADD 2012/05/25 ------------<<<<<<<<<<<<<<<<<<<
                            }
                            // 026.車台型式…車両検索結果
                            if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].FrameModel))
                            {
                                userCarRecord.FrameModel = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].FrameModel;
                            }
                        }

                        // ----- ADD 2011/10/08 ----- >>>>>
                        if (searchedResult.SearchCarInfo.ColorCdInfo.Count > 0)
                        {
                            // ----- DEL 2011/10/15 ----- >>>>>
                            //if (string.IsNullOrEmpty(userCarRecord.RpColorCode))
                            //{
                            //    // 031.リペアカラーコード
                            //    if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.ColorCdInfo[SINGLE_ROW].ColorCode))
                            //    {
                            //        userCarRecord.RpColorCode = searchedResult.SearchCarInfo.ColorCdInfo[SINGLE_ROW].ColorCode;
                            //    }
                            //    // 032.カラー名称1
                            //    if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.ColorCdInfo[SINGLE_ROW].ColorName1))
                            //    {
                            //        userCarRecord.ColorName1 = searchedResult.SearchCarInfo.ColorCdInfo[SINGLE_ROW].ColorName1;
                            //    }
                            //}
                            //else
                            //{
                            // ----- DEL 2011/10/15 ----- <<<<<
                                foreach (PMKEN01010E.ColorCdInfoRow row in searchedResult.SearchCarInfo.ColorCdInfo)
                                {
                                    if (row.ColorCode == userCarRecord.RpColorCode)
                                    {
                                        // 032.カラー名称1
                                        userCarRecord.ColorName1 = row.ColorName1;
                                        break;
                                    }
                                }
                            //} // DEL 2011/10/15
                        }

                        if (searchedResult.SearchCarInfo.TrimCdInfo.Count > 0)
                        {
                            // ----- DEL 2011/10/15 ----- >>>>>
                            //if (string.IsNullOrEmpty(userCarRecord.TrimCode))
                            //{
                            //    // 033.トリムコード
                            //    if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.TrimCdInfo[SINGLE_ROW].TrimCode))
                            //    {
                            //        userCarRecord.TrimCode = searchedResult.SearchCarInfo.TrimCdInfo[SINGLE_ROW].TrimCode;
                            //    }
                            //    // 034.トリム名称
                            //    if (!string.IsNullOrEmpty(searchedResult.SearchCarInfo.TrimCdInfo[SINGLE_ROW].TrimName))
                            //    {
                            //        userCarRecord.TrimName = searchedResult.SearchCarInfo.TrimCdInfo[SINGLE_ROW].TrimName;
                            //    }
                            //}
                            //else
                            //{
                            // ----- DEL 2011/10/15 ----- <<<<<
                                foreach (PMKEN01010E.TrimCdInfoRow row in searchedResult.SearchCarInfo.TrimCdInfo)
                                {
                                    if (row.TrimCode == userCarRecord.TrimCode)
                                    {
                                        // 034.トリム名称
                                        userCarRecord.TrimName = row.TrimName;
                                        break;
                                    }
                                }
                            //} // DEL 2011/10/15
                        }
                        // ----- ADD 2011/10/08 ----- <<<<<

                        // 036.装備オブジェクト…車両検索結果
                        if ( searchedResult.SearchCarInfo.CEqpDefDspInfo != null && searchedResult.SearchCarInfo.CEqpDefDspInfo.Count > 0 )
                        {
                            // --- DEL 2012/05/31 ---------->>>>>
                            //userCarRecord.EquipObj = searchedResult.SearchCarInfo.CEqpDefDspInfo.GetByteArray(true);
                            // --- DEL 2012/05/31 ----------<<<<<
                        }

                        // 023.車検証型式…車両検索結果
                        if (searchedResult.SearchCarInfo.CarModelInfo.Count > 0)
                        {
                            string carInspectCertModel = string.Empty;
                            if (searchedResult.SearchCarInfo.CarModelInfo[SINGLE_ROW].ExhaustGasSign.Trim() != string.Empty)
                            {
                                carInspectCertModel = searchedResult.SearchCarInfo.CarModelInfo[SINGLE_ROW].ExhaustGasSign.Trim();
                                if (searchedResult.SearchCarInfo.CarModelInfo[SINGLE_ROW].SeriesModel.Trim() != string.Empty) carInspectCertModel = carInspectCertModel + '-' + searchedResult.SearchCarInfo.CarModelInfo[SINGLE_ROW].SeriesModel.Trim();
                            }
                            else
                            {
                                if (searchedResult.SearchCarInfo.CarModelInfo[SINGLE_ROW].SeriesModel.Trim() != string.Empty) carInspectCertModel = searchedResult.SearchCarInfo.CarModelInfo[SINGLE_ROW].SeriesModel.Trim();
                            }
                            userCarRecord.CarInspectCertModel = carInspectCertModel; // 車検証型式
                        }

                        // 029.生産年式（NUMタイプ）…車両検索結果
                        // --- UPD 三戸 2012/07/11 ---------->>>>>
                        //int frameNo = TStrConv.StrToIntDef(userCarRecord.FrameNo.Trim(), 0);
                        int frameNo = TStrConv.StrToIntDef(userCarRecord.ChassisNo.Trim(), 0);
                        // --- UPD 三戸 2012/07/11 ----------<<<<<
                        if (searchedResult.SearchCarInfo.PrdTypYearInfo.Count > 0 && frameNo != 0)
                        {
                            int retDateTime = 0;
                            string filter = string.Format("{0}<={1} AND {2}>={3}",
                            searchedResult.SearchCarInfo.PrdTypYearInfo.StProduceFrameNoColumn.ColumnName, frameNo,
                            searchedResult.SearchCarInfo.PrdTypYearInfo.EdProduceFrameNoColumn.ColumnName, frameNo);
                            PMKEN01010E.PrdTypYearInfoRow[] row = (PMKEN01010E.PrdTypYearInfoRow[])searchedResult.SearchCarInfo.PrdTypYearInfo.Select(filter);
                            if (row.Length > 0) retDateTime = row[0].ProduceTypeOfYear;
                            //userCarRecord.ProduceTypeOfYearNum = retDateTime * 100;   // DEL 2011/09/22
                            userCarRecord.ProduceTypeOfYearNum = retDateTime;           // ADD 2011/09/22
                        }
                    // --- DEL 2013/08/09 Y.Wakita ---------->>>>>
                    //}
                    //else
                    //{
                    //// ----- ADD 2011/08/10 ----- <<<<<
                    //    if (searchedResult.SearchCarInfo.CarModelUIData.Count > 0)
                    //    {
                    //        // 017.型式指定番号…車両検索結果
                    //        if (userCarRecord.ModelDesignationNo.Equals(0))
                    //        {
                    //            userCarRecord.ModelDesignationNo = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].ModelDesignationNo;
                    //        }
                    //        // 018.類別番号…車両検索結果
                    //        if (userCarRecord.CategoryNo.Equals(0))
                    //        {
                    //            userCarRecord.CategoryNo = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].CategoryNo;
                    //        }
                    //        // 025.車台番号…車両検索結果
                    //        if (string.IsNullOrEmpty(userCarRecord.FrameNo.Trim()))
                    //        {
                    //            userCarRecord.FrameNo = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].FrameNo;
                    //        }
                    //        // -- ADD 2011/08/10   ------ >>>>>>
                    //        // 号車
                    //        //userCarRecord.CarNo = string.Empty; // DEL 2011/10/11
                    //        // メーカー名称
                    //        if (string.IsNullOrEmpty(userCarRecord.MakerName.Trim()))
                    //        {
                    //            userCarRecord.MakerName = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].MakerFullName;
                    //        }
                    //        // グレード名称
                    //        if (string.IsNullOrEmpty(userCarRecord.GradeName.Trim()))
                    //        {
                    //            // --- UPD 三戸 2012/05/31 №135 ---------->>>>>
                    //            //userCarRecord.GradeName = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].ModelGradeNm;
                    //            userCarRecord.GradeName = SCMDataHelper.GetGradeFullName(searchedResult.SearchCarInfo);
                    //            // --- UPD 三戸 2012/05/31 №135 ----------<<<<<
                    //        }
                    //        // ボディー名称
                    //        if (string.IsNullOrEmpty(userCarRecord.BodyName.Trim()))
                    //        {
                    //            userCarRecord.BodyName = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].BodyName;
                    //        }
                    //        // ドア数
                    //        if (userCarRecord.DoorCount.Equals(0))
                    //        {
                    //            userCarRecord.DoorCount = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].DoorCount;
                    //        }
                    //        // エンジン型式名称
                    //        if (string.IsNullOrEmpty(userCarRecord.EngineModelNm.Trim()))
                    //        {
                    //            userCarRecord.EngineModelNm = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].EngineModelNm;
                    //        }
                    //        // 通称排気量
                    //        if (userCarRecord.CmnNmEngineDisPlace.Equals(0))
                    //        {
                    //            int cmnNmEngineDisPlace = 0;

                    //            try
                    //            {
                    //                // 通称排気量取得
                    //                string strValue = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].EngineDisplaceNm;

                    //                // NULLチェック
                    //                if (!String.IsNullOrEmpty(strValue))
                    //                {
                    //                    cmnNmEngineDisPlace = Convert.ToInt32(strValue);
                    //                }
                    //            }
                    //            catch
                    //            {
                    //                // 何もしない。
                    //            }

                    //            userCarRecord.CmnNmEngineDisPlace = cmnNmEngineDisPlace;
                    //        }
                    //        // 原動機型式（エンジン）
                    //        // --- DEL 三戸 2012/07/11 ---------->>>>>
                    //        //userCarRecord.EngineModel = string.Empty;
                    //        // --- DEL 三戸 2012/07/11 ----------<<<<<
                    //        // 変速段数
                    //        userCarRecord.NumberOfGear = 0;
                    //        // 変速機名称
                    //        userCarRecord.GearNm = string.Empty;
                    //        // E区分名称
                    //        if (string.IsNullOrEmpty(userCarRecord.EDivNm.Trim()))
                    //        {
                    //            userCarRecord.EDivNm = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].EDivNm;
                    //        }
                    //        // ミッション名称
                    //        if (string.IsNullOrEmpty(userCarRecord.TransmissionNm.Trim()))
                    //        {
                    //            userCarRecord.TransmissionNm = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].TransmissionNm;
                    //        }
                    //        // シフト名称
                    //        if (string.IsNullOrEmpty(userCarRecord.ShiftNm.Trim()))
                    //        {
                    //            userCarRecord.ShiftNm = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].ShiftNm;
                    //        }
                    //        // -- ADD 2011/08/10   ------ <<<<<<
                    //    }

                    //    if (searchedResult.SearchCarInfo.CarModelInfoSummarized.Count > 0)
                    //    {
                    //        // 019.メーカーコード…車両検索結果
                    //        if (userCarRecord.MakerCode.Equals(0))
                    //        {
                    //            userCarRecord.MakerCode = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].MakerCode;
                    //        }
                    //        // 020.車種コード…車両検索結果
                    //        if (userCarRecord.ModelCode.Equals(0))
                    //        {
                    //            userCarRecord.ModelCode = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].ModelCode;
                    //        }
                    //        // 021.車種サブコード…車両検索結果
                    //        if (userCarRecord.ModelSubCode.Equals(0))
                    //        {
                    //            userCarRecord.ModelSubCode = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].ModelSubCode;
                    //        }
                    //        // 022.車種名…車両検索結果
                    //        if (string.IsNullOrEmpty(userCarRecord.ModelName.Trim()))
                    //        {
                    //            userCarRecord.ModelName = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].ModelFullName;
                    //        }
                    //        // 024.型式(フル型)…車両検索結果
                    //        if (string.IsNullOrEmpty(userCarRecord.FullModel.Trim()))
                    //        {
                    //            userCarRecord.FullModel = searchedResult.SearchCarInfo.CarModelInfoSummarized[SINGLE_ROW].FullModel;
                    //        }
                    //    }
                    //} // ADD 2011/08/10
                    // --- DEL 2013/08/09 Y.Wakita ----------<<<<<

                    //// 026.車台型式…車両検索結果
                    //if ( string.IsNullOrEmpty( userCarRecord.FrameModel.Trim() ) )
                    //{
                    //    // FIXME:userCarRecord.FrameModel = searchedResult.SearchCarInfo.CarModelUIData[SINGLE_ROW].FrameModel;
                    //}
                    //// 036.装備オブジェクト…車両検索結果
                    //if ( userCarRecord.EquipObj == null || userCarRecord.EquipObj.Length.Equals( 0 ) )
                    //{
                    //    // FIXME:userCarRecord.EquipObj = searchedResult.SearchCarInfo.CEqpDefDspInfo;
                    //}
                    // --- UPD m.suzuki 2011/05/23 ----------<<<<<
                }   // if (searchedResult != null && searchedResult.SearchCarInfo != null)

                // 023.車検証型式           …SCM受注データ(車両情報)
                // 027.シャシーNo           …SCM受注データ(車両情報)
                // 028.車両固定番号         …SCM受注データ(車両情報)
                // 029.生産年式(NUMタイプ)  …SCM受注データ(車両情報)
                // 030.コメント             …SCM受注データ(車両情報)
                // 031.リペアカラーコード   …SCM受注データ(車両情報)
                // 032.カラー名称1          …SCM受注データ(車両情報)
                // 033.トリムコード         …SCM受注データ(車両情報)
                // 034.トリム名称           …SCM受注データ(車両情報)
                // 035.車両走行距離         …SCM受注データ(車両情報)

                // 037.受注ステータス→対応する回答データの受注ステータスが正
                userCarRecord.AcptAnOdrStatus = SCMDataHelper.GetDefaultAcptAnOdrStatus(detailRecord.InqOrdDivCd);
                userCarRecord.SalesSlipNum = DEFAULT_SALES_SLIP_NUM;    // 038.売上伝票番号…リモート取得
                // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
                // SCM受注データに車両管理コード設定時はSCM受注データを優先
                if (headerRecord.CarMngCode.Length != 0)
                {
                    userCarRecord.CarMngCode = headerRecord.CarMngCode; // 048.車両管理コード…SCM受注データ
                }
                // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
            }
            return userCarRecord;
        }

        // ---- ADD 2012/05/25 ------------>>>>>>>>>>>>>>>>>>>
        /* ---DEL 譚洪 2020/12/31 PMKOBETSU-4100の対応 ------>>>>
        /// <summary>
        /// 型式が完全なフル型式として車両情報に存在するか否か
        /// </summary>
        /// <param name="fullModel">対象型式</param>
        /// <param name="carModelInfo">車両情報</param>
        /// <returns>true：完全　false：不完全（部分一致のみ等） </returns>
        private bool IsFullModelAll(string fullModel, PMKEN01010E.CarModelInfoDataTable carModelInfo)
        {
            foreach (PMKEN01010E.CarModelInfoRow row in carModelInfo)
            {
                if (fullModel.Trim().Equals(row.FullModel.Trim()))
                {
                    return true;
                }
            }

            return false;
        }
        // ---DEL 譚洪 2020/12/31 PMKOBETSU-4100の対応 ------<<<< */
        // ---- ADD 2012/05/25 ------------<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// 検索結果を取得します。
        /// </summary>
        /// <param name="detailRecord">SCM受注明細データ(問合せ・発注)のレコード</param>
        /// <returns>検索結果(検索結果が存在しない場合、<c>null</c>を返します)</returns>
        protected SCMSearchedResult FindSearchedResult(ISCMOrderDetailRecord detailRecord)
        {
            string key = detailRecord.ToKey();
            return Referee.Searcher.ResultMap.ContainsKey(key) ? Referee.Searcher.ResultMap[key] : null;
        }

        #endregion // </SCM受注データ(車両情報)>

        #region <SCM受注明細データ(問合せ・発注)>

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)を回答用にコピーおよび編集します。
        /// </summary>
        /// <param name="detailRecord">SCM受注明細データ(問合せ・発注)のレコード</param>
        /// <returns>回答用に編集したSCM受注明細データ(問合せ・発注)のレコード</returns>
        protected ISCMOrderDetailRecord CopyAndEditSCMOrderDetailRecord(ISCMOrderDetailRecord detailRecord)
        {
            UserSCMOrderDetailRecord userDetailRecord = detailRecord as UserSCMOrderDetailRecord;
            {
                if (userDetailRecord == null)
                {
                    Debug.Assert(false, "User型のSCM受注明細データ(問合せ・発注)ではありません。");
                    return detailRecord;
                }
                userDetailRecord = new UserSCMOrderDetailRecord(userDetailRecord);

                userDetailRecord.CreateDateTime = DateTime.MinValue;        // 001.作成日時     …共通ヘッダ リモート取得
                userDetailRecord.UpdateDateTime = DateTime.MinValue;        // 002.更新日時     …共通ヘッダ リモート取得
                userDetailRecord.EnterpriseCode = detailRecord.InqOtherEpCd;// 003.企業コード   …共通ヘッダ リモート取得
                // 004.GUID             …共通ヘッダ リモート取得
                // 005.更新従業員コード …共通ヘッダ リモート取得
                // 006.更新アセンブリID1…共通ヘッダ リモート取得
                // 007.更新アセンブリID2…共通ヘッダ リモート取得
                // 008.論理削除区分     …共通ヘッダ リモート取得
                
                // 009.問合せ元企業コード   …SCM受注明細データ(問合せ・発注)
                // 010.問合せ元拠点コード   …SCM受注明細データ(問合せ・発注)
                // 011.問合せ先企業コード   …SCM受注明細データ(問合せ・発注)
                // 012.問合せ先拠点コード   …SCM受注明細データ(問合せ・発注)
                // 013.問合せ番号           …SCM受注明細データ(問合せ・発注)

                userDetailRecord.UpdateDate = DateTime.MinValue;    // 014.更新年月日       …リモート取得
                userDetailRecord.UpdateTime = 0;                    // 015.更新時分秒ミリ秒 …リモート取得

                // 016.問合せ行番号             …SCM受注明細データ(問合せ・発注)
                // 017.問合せ行番号枝番         …SCM受注明細データ(問合せ・発注)
                // 018.問合せ元明細識別GUID     …SCM受注明細データ(問合せ・発注)
                // 019.問合せ先明細識別GUID     …SCM受注明細データ(問合せ・発注)
                // 020.商品種別                 …SCM受注明細データ(問合せ・発注)
                // 021.リサイクル部品種別       …SCM受注明細データ(問合せ・発注)
                // 022.リサイクル部品種別名称   …SCM受注明細データ(問合せ・発注)
                // 023.納品区分                 …SCM受注明細データ(問合せ・発注)
                // 024.取扱区分                 …SCM受注明細データ(問合せ・発注)
                // 025商品形態                  …SCM受注明細データ(問合せ・発注)
                // 026.納品確認区分             …SCM受注明細データ(問合せ・発注)
                // 027.納品完了予定日           …SCM受注明細データ(問合せ・発注)
                // 028.回答納期                 …SCM受注明細データ(問合せ・発注)
                // 029.BL商品コード             …SCM受注明細データ(問合せ・発注)
                // 030.BL商品コード枝番         …SCM受注明細データ(問合せ・発注)
                // 031.問発商品名               …SCM受注明細データ(問合せ・発注)
                // 032.回答商品名               …SCM受注明細データ(問合せ・発注)
                // 033.発注数                   …SCM受注明細データ(問合せ・発注)
                // 034.納品数                   …SCM受注明細データ(問合せ・発注)
                // 035.商品番号                 …SCM受注明細データ(問合せ・発注)
                // 036.商品メーカーコード       …SCM受注明細データ(問合せ・発注)
                // 037.商品メーカー名称         …SCM受注明細データ(問合せ・発注)
                // 038.純正商品メーカーコード   …SCM受注明細データ(問合せ・発注)
                // 039.問発純正商品番号         …SCM受注明細データ(問合せ・発注)
                // 040.回答純正商品番号         …SCM受注明細データ(問合せ・発注)
                // 041.定価                     …SCM受注明細データ(問合せ・発注)
                // 042.単価                     …SCM受注明細データ(問合せ・発注)
                // 043.商品補足情報             …SCM受注明細データ(問合せ・発注)
                // 044.粗利額                   …SCM受注明細データ(問合せ・発注)
                // 045.粗利率                   …SCM受注明細データ(問合せ・発注)
                // 046.回答期限                 …SCM受注明細データ(問合せ・発注)
                // 047.備考(明細)               …SCM受注明細データ(問合せ・発注)
                // 048.添付ファイル(明細)       …SCM受注明細データ(問合せ・発注)
                // 049.添付ファイル名(明細)     …SCM受注明細データ(問合せ・発注)
                // 050.棚番                     …SCM受注明細データ(問合せ・発注)
                // 051.追加区分                 …SCM受注明細データ(問合せ・発注)
                // 052.訂正区分                 …SCM受注明細データ(問合せ・発注)
                // 053.問合せ・発注種別         …SCM受注明細データ(問合せ・発注)
                // 054.表示順位                 …SCM受注明細データ(問合せ・発注)
            }
            return userDetailRecord;
        }

        #endregion // </SCM受注明細データ(問合せ・発注)>

        #region <SCM受注明細データ(回答)>

        /// <summary>
        /// SCM受注明細データ(回答)を編集します。
        /// </summary>
        /// <param name="answerRecord">SCM受注明細データ(回答)のレコード</param>
        /// <param name="scmGoodsUnitData">付加情報付き商品連結データ</param>
        /// <returns>編集したSCM受注明細データ(回答)のレコード</returns>
        /// <remarks>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        /// </remarks>
        protected virtual ISCMOrderAnswerRecord EditSCMOrderAnswerRecord(
            ISCMOrderAnswerRecord answerRecord,
            SCMGoodsUnitData scmGoodsUnitData
        )
        {
            const string METHOD_NAME = "EditSCMOrderAnswerRecord()";    // ログ用

            UserSCMOrderAnswerRecord userAnswerRecord = answerRecord as UserSCMOrderAnswerRecord;
            {
                if (userAnswerRecord == null)
                {
                    Debug.Assert(false, "User型のSCM受注明細データ(回答)ではありません。");
                    return answerRecord;
                }
                else
                {
                    #region <Log>

                    string msg = string.Format(
                        "SCM受注明細データ(回答)を生成中(問合せ番号={0}, 問合せ行番号={1})...",
                        answerRecord.InquiryNumber,
                        answerRecord.InqRowNumber
                    );
                    EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));

                    #endregion // </Log>
                }

                // 001.作成日時         …共通ヘッダ リモート取得
                // 002.更新日時         …共通ヘッダ リモート取得
                userAnswerRecord.EnterpriseCode = answerRecord.InqOtherEpCd;    // 003.企業コード…共通ヘッダ リモート取得
                // 004.GUID             …共通ヘッダ リモート取得
                // 005.更新従業員コード …共通ヘッダ リモート取得
                // 006.更新アセンブリID1…共通ヘッダ リモート取得
                // 007.更新アセンブリID2…共通ヘッダ リモート取得
                // 008.論理削除区分     …共通ヘッダ リモート取得

                // 009.問合せ元企業コード   …SCM受注明細データ(問合せ・発注)
                // 010.問合せ元拠点コード   …SCM受注明細データ(問合せ・発注)
                // 011.問合せ先企業コード   …SCM受注明細データ(問合せ・発注)
                // 012.問合せ先拠点コード   …SCM受注明細データ(問合せ・発注)
                // 013.問合せ番号           …SCM受注明細データ(問合せ・発注)

                userAnswerRecord.UpdateDate = DateTime.MinValue;    // 014.更新年月日       …リモート取得
                userAnswerRecord.UpdateTime = 0;                    // 015.更新時分秒ミリ秒 …リモート取得

                // 016.問合せ行番号…SCM受注明細データ(問合せ・発注)

                // 017.問合せ行番号枝番…連番付番(問合せ行番号単位)

                // UPD 2013/09/17 SCM仕掛一覧№210対応 --------------------------------------->>>>>
                //userAnswerRecord.InqRowNumDerivedNo = NextRowNumDerivedNo(scmGoodsUnitData.SourceDetailRecord);
                // 品番、メーカーが設定されている場合、再問合せとみなし、枝番はそのまま使用する
                if (!string.IsNullOrEmpty(scmGoodsUnitData.SourceDetailRecord.GoodsNo.Trim()) && scmGoodsUnitData.SourceDetailRecord.GoodsMakerCd != 0)
                {
                    userAnswerRecord.InqRowNumDerivedNo = scmGoodsUnitData.SourceDetailRecord.InqRowNumDerivedNo;
                }
                // 新規明細時は表示順を枝番に設定する
                else
                {
                    // 表示順が設定されていない場合、行番号毎に枝番を採番する
                    if (scmGoodsUnitData.RetDisplayOrder == 0)
                    {
                        userAnswerRecord.InqRowNumDerivedNo = NextRowNumDerivedNo(scmGoodsUnitData.SourceDetailRecord); ;
                    }
                    else
                    {
                        // UPD 2015/02/09 SCM連携 マルチキャスト対応 ---------------------------------------->>>>>
                        //userAnswerRecord.InqRowNumDerivedNo = scmGoodsUnitData.RetDisplayOrder;
                        if (scmGoodsUnitData.RetDisplayOrder == scmGoodsUnitData.SourceDetailRecord.InqRowNumDerivedNo)
                        {
                            userAnswerRecord.InqRowNumDerivedNo = scmGoodsUnitData.SourceDetailRecord.InqRowNumDerivedNo;
                        }
                        else
                        {
                            userAnswerRecord.InqRowNumDerivedNo = scmGoodsUnitData.RetDisplayOrder * (-1);
                        }
                        // UPD 2015/02/09 SCM連携 マルチキャスト対応 ----------------------------------------<<<<<
                    }
                }
                // UPD 2013/09/17 SCM仕掛一覧№210対応 ---------------------------------------<<<<<

                // 018.問合せ元明細識別GUID…SCM受注明細データ(問合せ・発注)
                // 019.問合せ先明細識別GUID…SCM受注明細データ(問合せ・発注)
                // -- ADD 2011/08/10   ------ >>>>>>
                // PCCUOE 発注場合、商品種別を設定しない
                if (!(scmGoodsUnitData.AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE &&
                    answerRecord.InqOrdDivCd == (int)InqOrdDivCd.Order))
                {
                    // -- ADD 2011/08/10   ------ <<<<<<
                    userAnswerRecord.GoodsDivCd = scmGoodsUnitData.GetGoodsDivCd(true);                 // 020.商品種別                 …商品情報(GoodsUnitData)と相場情報からセット
                    // -- ADD 2011/08/10   ------ >>>>>>
                }
                // -- ADD 2011/08/10   ------ <<<<<<
                userAnswerRecord.RecyclePrtKindCode = scmGoodsUnitData.GetRecyclePrtKindCode(true); // 021.リサイクル部品種別       …商品情報(GoodsUnitData)と相場情報からセット
                userAnswerRecord.RecyclePrtKindName = scmGoodsUnitData.GetRecyclePrtKindName(true); // 022.リサイクル部品種別名称   …商品情報(GoodsUnitData)と相場情報からセット

                // 023.納品区分     …SCM受注明細データ(問合せ・発注)
                // 024.取扱区分     …SCM受注明細データ(問合せ・発注)
                // 025.商品形態     …SCM受注明細データ(問合せ・発注)
                // 026.納品確認区分 …SCM受注明細データ(問合せ・発注)
                // 027.納品完了予定日


                // UPD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                #region 旧ソース
                //// UPD 2012/07/03 SCM障害№166 在庫情報取得 T.Yoshioka ------------------------------>>>>>>>>>>>>
                //// UPD 2013/03/07 SCM障害№10489対応 ----------------------------------------------->>>>>
                ////userAnswerRecord.AnswerDeliveryDate = scmGoodsUnitData.GetAnswerDeliveryDate(); // 028.回答納期…SCM納期設定マスタ
                //userAnswerRecord.AnswerDeliveryDate = scmGoodsUnitData.GetAnswerDeliveryDate((int)this._scmTtlSt.FuwioutAutoAnsDiv); // 028.回答納期…SCM納期設定マスタ
                //// UPD 2013/03/07 SCM障害№10489対応 -----------------------------------------------<<<<<
                ////>>>2012/04/09
                ////if (Referee.Searcher.RelationalHeaderMap[scmGoodsUnitData.SourceDetailRecord.ToRelationKey()].AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.SCM || (Referee.Searcher.RelationalHeaderMap[scmGoodsUnitData.SourceDetailRecord.ToRelationKey()].AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE && answerRecord.InqOrdDivCd == (int)InqOrdDivCd.Inquiry)) // ADD 2011/08/10
                ////{ // ADD 2011/08/10
                ////userAnswerRecord.AnswerDeliveryDate = scmGoodsUnitData.GetAnswerDeliveryDate(); // 028.回答納期…SCM納期設定マスタ
                ////} // ADD 2011/08/10

                ////  UPD 2012/06/20 T.Yoshioka システムテスト障害№106 ----------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //// 問合せ後の発注の場合、回答納期は更新しない
                ////    1.PCC for Nsで、問合せ の場合　
                //// OR 2.PCC for Nsで、発注かつ いきなり発注 の場合　
                //// OR 3.BLPで、問合せ の場合
                //// OR 4.BLPで、発注かつ いきなり発注 の場合
                ////if (   (Referee.Searcher.RelationalHeaderMap[scmGoodsUnitData.SourceDetailRecord.ToRelationKey()].AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.SCM 
                ////          && answerRecord.InqOrdDivCd == (int)InqOrdDivCd.Inquiry) 
                ////    || (Referee.Searcher.RelationalHeaderMap[scmGoodsUnitData.SourceDetailRecord.ToRelationKey()].AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.SCM 
                ////          && answerRecord.InqOrdDivCd == (int)InqOrdDivCd.Order 
                ////          && (!(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData))) 
                ////    || (Referee.Searcher.RelationalHeaderMap[scmGoodsUnitData.SourceDetailRecord.ToRelationKey()].AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE 
                ////          && answerRecord.InqOrdDivCd == (int)InqOrdDivCd.Inquiry) 
                ////    || (Referee.Searcher.RelationalHeaderMap[scmGoodsUnitData.SourceDetailRecord.ToRelationKey()].AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE 
                ////          && answerRecord.InqOrdDivCd == (int)InqOrdDivCd.Order 
                ////          && (!(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData))))
                ////if ((Referee.Searcher.RelationalHeaderMap[scmGoodsUnitData.SourceDetailRecord.ToRelationKey()].AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.SCM) ||
                ////    (Referee.Searcher.RelationalHeaderMap[scmGoodsUnitData.SourceDetailRecord.ToRelationKey()].AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE &&
                ////      answerRecord.InqOrdDivCd == (int)InqOrdDivCd.Inquiry) ||
                ////    (Referee.Searcher.RelationalHeaderMap[scmGoodsUnitData.SourceDetailRecord.ToRelationKey()].AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE &&
                ////      answerRecord.InqOrdDivCd == (int)InqOrdDivCd.Order && (!(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData))))
                ////  UPD 2012/06/20 T.Yoshioka システムテスト障害№106 -----------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                ////{
                ////    userAnswerRecord.AnswerDeliveryDate = scmGoodsUnitData.GetAnswerDeliveryDate(); // 028.回答納期…SCM納期設定マスタ
                ////}
                ////<<<20102/04/09
                //// UPD 2012/07/03 SCM障害№166 在庫情報取得 T.Yoshioka ----------------------<<<<<<<<<<<<<<<
                #endregion
                Int16 ansDeliDateDiv = 0;
                userAnswerRecord.AnswerDeliveryDate = scmGoodsUnitData.GetAnswerDeliveryDate((int)this._scmTtlSt.FuwioutAutoAnsDiv,out ansDeliDateDiv); // 028.回答納期…SCM納期設定マスタ
                userAnswerRecord.AnsDeliDateDiv = ansDeliDateDiv;   // 回答納期区分
                // UPD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                // BLコードはSCM受注明細データ(問合せ・発注)の値のまま
                //userAnswerRecord.BLGoodsCode = scmGoodsUnitData.RealGoodsUnitData.BLGoodsCode;  // 029.BL商品コード…商品情報(GoodsUnitData)
                // FIXME:030.BL商品コード枝番…商品情報(GoodsUnitData) ※商品情報にない？
                //userAnswerRecord.BLGoodsDrCode = scmGoodsUnitData.RealGoodsUnitData.BLGoodsDrCode;
                // --- ADD m.suzuki 2011/05/23 ---------->>>>>
                // 029.BL商品コード
                //userAnswerRecord.BLGoodsCode = scmGoodsUnitData.RealGoodsUnitData.BLGoodsCode; // DEL 2011/10/08
                userAnswerRecord.BLGoodsCode = scmGoodsUnitData.SourceDetailRecord.BLGoodsCode; // ADD 2011/10/08

                // 030.BL商品コード枝番
                if ( userAnswerRecord.BLGoodsCode == scmGoodsUnitData.SourceDetailRecord.BLGoodsCode )
                {
                    // 検索結果のBLコードが問合せ明細のBLコードと一致する場合のみ、枝番をセット
                    userAnswerRecord.BLGoodsDrCode = scmGoodsUnitData.SourceDetailRecord.BLGoodsDrCode;
                }
                // --- ADD m.suzuki 2011/05/23 ----------<<<<<

                // FIXME:031.問発商品名…SCM受注明細データ(問合せ・発注)？

                userAnswerRecord.AnsGoodsName = scmGoodsUnitData.RealGoodsUnitData.GoodsName;   // 032.回答商品名…商品情報(GoodsUnitData)

                // 033.発注数…SCM受注明細データ(問合せ・発注)

                userAnswerRecord.DeliveredGoodsCount = userAnswerRecord.SalesOrderCount;    // 034.納品数…SCM受注明細データ(問合せ・発注).発注数

                userAnswerRecord.GoodsNo = scmGoodsUnitData.GetGoodsNo();                           // 035.商品番号             …商品情報(GoodsUnitData)
                userAnswerRecord.GoodsMakerCd = scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd;    // 036.商品メーカーコード   …商品情報(GoodsUnitData)
                userAnswerRecord.GoodsMakerNm = scmGoodsUnitData.RealGoodsUnitData.MakerName;       // 037.商品メーカー名称
                //>>>2012/01/04
                //userAnswerRecord.PureGoodsMakerCd = scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd;// FIXME:038.純正商品メーカーコード
                if (!(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData))
                {
                    userAnswerRecord.PureGoodsMakerCd = scmGoodsUnitData.PureGoodsMakerCd;// FIXME:038.純正商品メーカーコード
                }
                //<<<2012/01/04

                // 039.問発純正商品番号…SCM受注明細データ(問合せ・発注)
                //>>>2012/01/04
                //userAnswerRecord.AnsPureGoodsNo = scmGoodsUnitData.GetAnsPureGoodsNo(); // FIXME:040.回答純正商品番号
                if (!(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData))
                {
                    userAnswerRecord.AnsPureGoodsNo = scmGoodsUnitData.AnsPureGoodsNo; // FIXME:040.回答純正商品番号
                }
                //<<<2012/01/04

                userAnswerRecord.ListPrice = scmGoodsUnitData.GetListPrice();   // 041.定価…算出
                userAnswerRecord.UnitPrice = scmGoodsUnitData.GetUnitPrice();   // 042.単価…算出

                // ADD 2015/01/19 リコメンド対応 ----------------------------------------->>>>>
                // リコメンド時は定価、売価は問合せデータを設定する
                if (!(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData) && answerRecord.BgnGoodsDiv == (short)BgnGoodsDiv.BargainItem)
                {
                    // --- DEL 2015/02/24 T.Miyamoto ------------------------------>>>>>
                    //userAnswerRecord.ListPrice = scmGoodsUnitData.SourceDetailRecord.ListPrice;        // 041.定価…問合せ時の定価
                    // --- DEL 2015/02/24 T.Miyamoto ------------------------------<<<<<
                    userAnswerRecord.UnitPrice = scmGoodsUnitData.SourceDetailRecord.UnitPrice;        // 042.単価…問合せ時の売価
                }
                // ADD 2015/01/19 リコメンド対応 -----------------------------------------<<<<<

                // 043.商品補足情報…SCM受注明細データ(問合せ・発注)

                userAnswerRecord.RoughRrofit = scmGoodsUnitData.GetRoughRrofit();   // 044.粗利額…算出
                userAnswerRecord.RoughRate = scmGoodsUnitData.GetRoughRate();       // 045.粗利率…算出


                // 046.回答期限     …SCM受注明細データ(問合せ・発注)
                // 047.備考(明細)   …SCM受注明細データ(問合せ・発注)
                // 048.添付ファイル(明細)   …未使用
                // 049.添付ファイル名(明細) …未使用

                // 050.棚番…商品情報(GoodsUnitData) ※在庫委託の場合のみセット
                if (scmGoodsUnitData.GetStockDiv().Equals((int)StockDiv.Trust))
                {
                    userAnswerRecord.ShelfNo = scmGoodsUnitData.GetShelfNo();
                }

                // 051.追加区分…SCM受注明細データ(問合せ・発注)
                // 052.訂正区分…SCM受注明細データ(問合せ・発注)

                userAnswerRecord.AcptAnOdrStatus = scmGoodsUnitData.GetAcptAnOdrStatus();           // 053.受注ステータス…算出
                userAnswerRecord.SalesSlipNum = DEFAULT_SALES_SLIP_NUM;                             // 054.売上伝票番号…リモート取得
                userAnswerRecord.SalesRowNo = userAnswerRecord.InqRowNumDerivedNo;                  // 055.売上行番号…連番付番(売上伝票番号単位)
                
                if (scmGoodsUnitData.CampaignInformation.CampaignCode != 0)  // ADD 2011/10/10
                {
                    userAnswerRecord.CampaignCode = scmGoodsUnitData.CampaignInformation.CampaignCode;  // 056.キャンペーンコード…算出
                }
                userAnswerRecord.StockDiv = scmGoodsUnitData.GetStockDiv();                         // 057.在庫区分…算出
                
                // 058.問合せ・発注種別 …SCM受注明細データ(問合せ・発注)
                // 059.表示順位         …SCM受注明細データ(問合せ・発注)
                //>>>2012/01/04
                if (!(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData))
                {
                    // UPD 2013/09/17 SCM仕掛一覧№210対応 --------------------------------------->>>>>
                    //userAnswerRecord.DisplayOrder = scmGoodsUnitData.RetDisplayOrder;
                    // 品番、メーカーが設定されている場合、表示順はそのまま使用する
                    if (!string.IsNullOrEmpty(scmGoodsUnitData.SourceDetailRecord.GoodsNo.Trim()) && scmGoodsUnitData.SourceDetailRecord.GoodsMakerCd != 0)
                    {
                        userAnswerRecord.DisplayOrder = scmGoodsUnitData.SourceDetailRecord.DisplayOrder;
                    }
                    // 新規明細時、部品表示順を設定
                    else
                    {
                        // UPD 2014/11/10 PM-SCM優先案件11月対応分 --------------------------------------->>>>>
                        //userAnswerRecord.DisplayOrder = scmGoodsUnitData.RealGoodsUnitData.JoinDispOrder;
                        // 品番検索時は結合状態で回答しないため表示順はゼロを設定する
                        if (scmGoodsUnitData.SearchedType == SCMSearchedResult.GoodsSearchDivCd.GoodsNo)
                        {
                            userAnswerRecord.DisplayOrder = 0;
                        }
                        else
                        {
                            userAnswerRecord.DisplayOrder = scmGoodsUnitData.RealGoodsUnitData.JoinDispOrder;
                        }
                        // UPD 2014/11/10 PM-SCM優先案件11月対応分 ---------------------------------------<<<<<>
                    }
                    // UPD 2013/09/17 SCM仕掛一覧№210対応 ---------------------------------------<<<<<
                }
                //<<<2012/01/04
                // 060.商品管理番号     …SCM受注明細データ(問合せ・発注)

                // UPD 2012/07/03 SCM障害№166 在庫情報取得 T.Yoshioka ------------------------------>>>>>>>>>>>>
                // --- ADD m.suzuki 2011/05/23 ---------->>>>> // 見積計上時は書き換えない (※在庫情報を再取得しないようにする為)
                // 毎回在庫情報を更新
                userAnswerRecord.PmWarehouseCd = scmGoodsUnitData.GetWarehouseCode();   // PM倉庫コード … 倉庫コード
                userAnswerRecord.PmWarehouseName = scmGoodsUnitData.GetWarehouseName(); // PM倉庫名称 … 倉庫名称
                userAnswerRecord.PmShelfNo = scmGoodsUnitData.GetShelfNo();             // PM棚番 … 棚番
                //if ( !(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData) )
                //{
                //    userAnswerRecord.PmWarehouseCd = scmGoodsUnitData.GetWarehouseCode();   // PM倉庫コード … 倉庫コード
                //    userAnswerRecord.PmWarehouseName = scmGoodsUnitData.GetWarehouseName(); // PM倉庫名称 … 倉庫名称
                //    userAnswerRecord.PmShelfNo = scmGoodsUnitData.GetShelfNo();             // PM棚番 … 棚番
                //}
                // --- ADD m.suzuki 2011/05/23 ----------<<<<<
                // UPD 2012/07/03 SCM障害№166 在庫情報取得 T.Yoshioka ------------------------------<<<<<<<<<<<<<

                // --- ADD LDNS wangqx 2011/08/10 ---------->>>>>
                // 問合せ・発注種別＝2:発注の場合 
                if (userAnswerRecord.InqOrdDivCd == (int)InqOrdDivCd.Order)
                {
                    // 発注の場合、納品区分の設定
                    // UPD 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ---------------------------------->>>>>
                    //// SCM受注明細データ（回答）．納品区分＝PCC全体設定マスタ．納品区分（改修前は受信で取得したSCM受発注明細データ
                    //if (_pccHash.ContainsKey(userAnswerRecord.EnterpriseCode + userAnswerRecord.InqOtherSecCd))
                    //{
                    //    userAnswerRecord.DeliveredGoodsDiv = ((PccTtlStWork)_pccHash[userAnswerRecord.EnterpriseCode + userAnswerRecord.InqOtherSecCd]).DeliveredGoodsDiv;
                    //}
                    // SCM全体設定マスタより納品区分をセット
                    userAnswerRecord.DeliveredGoodsDiv = _scmTtlSt.DeliveredGoodsDiv;
                    // UPD 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ----------------------------------<<<<<
                }
                // 問合せ・発注種別＝1:問合せの場合
                else if (userAnswerRecord.InqOrdDivCd == (int)InqOrdDivCd.Inquiry)
                {
                    // PM現在庫数
                    userAnswerRecord.PmPrsntCount = scmGoodsUnitData.GetStockQty();
                    if (!ListUtil.IsNullOrEmpty(scmGoodsUnitData.SetSCMGoodsUnitDataList))
                    {
                        // SCM受注明細データ（回答）．セット部品メーカーコード＝受信で取得したSCM受発注明細データ（問合せ・発注）．セット部品メーカーコード
                        userAnswerRecord.SetPartsMkrCd = scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd;
                        // SCM受注明細データ（回答）．セット部品番号＝受信で取得したSCM受発注明細データ（問合せ・発注）．セット部品番号
                        userAnswerRecord.SetPartsNumber = scmGoodsUnitData.RealGoodsUnitData.GoodsNo;
                        // SCM受注明細データ（回答）．セット部品親子番号＝0:親
                        userAnswerRecord.SetPartsMainSubNo = 0;
                    }
                }
                // --- ADD LDNS wangqx 2011/08/10 ----------<<<<<

                // 2012/01/16 Add >>>
                // 特記事項
                if (!(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData))
                {
                    //>>>2012/02/07
                    //userAnswerRecord.GoodsSpecialNote = scmGoodsUnitData.RealGoodsUnitData.GoodsSpecialNote;
                    userAnswerRecord.GoodsSpecialNote = scmGoodsUnitData.RealGoodsUnitData.GoodsSpecialNote;
                    // DEL 2015/02/04 豊沢 PM-SCM社内障害一覧No.72対応 ------------------------------------------>>>>>
                    //if (scmGoodsUnitData.RealGoodsUnitData.GoodsSpecialNote.Length > 40) userAnswerRecord.GoodsSpecialNote = scmGoodsUnitData.RealGoodsUnitData.GoodsSpecialNote.Substring(0, 40);
                    // DEL 2015/02/04 豊沢 PM-SCM社内障害一覧No.72対応 ------------------------------------------<<<<<
                    //<<<2012/02/07
                }
                // 2012/01/16 Add <<<
                // --- DEL T.Nishi 2012/06/19 ---------->>>>>
                //// --- ADD T.Nishi 2012/05/30 ---------->>>>>
                //// SCM受注明細データ（回答）．自動見積部品コード
                //if (userAnswerRecord.AutoEstimatePartsCd == "" || userAnswerRecord.AutoEstimatePartsCd == null)
                //{
                    //userAnswerRecord.AutoEstimatePartsCd = GetAutoEstimatePartsCd(userAnswerRecord.BLGoodsCode, 1, 0);
                //}
                //// --- ADD T.Nishi 2012/05/30 ----------<<<<<
                // --- DEL T.Nishi 2012/06/19 ----------<<<<<
            }

            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
            // 主管倉庫・在庫情報を設定
            userAnswerRecord.PmMainMngWarehouseCd = userAnswerRecord.PmWarehouseCd;   // PM主管倉庫コード
            userAnswerRecord.PmMainMngWarehouseName = userAnswerRecord.PmWarehouseName; // PM主管倉庫名称
            userAnswerRecord.PmMainMngShelfNo = userAnswerRecord.PmShelfNo;    // PM主管棚番
            userAnswerRecord.PmMainMngPrsntCount = userAnswerRecord.PmPrsntCount; // PM主管現在個数

            if (scmGoodsUnitData.IsTrustStock())
            {
                // 委託在庫の場合、SCM全体設定のデータ更新倉庫区分より、明細の主管倉庫情報を設定
                if (null != this._scmTtlSt && this._scmTtlSt.DataUpDateWareHDiv == 1 && this._runMode == 1)
                {
                    // 更新倉庫区分が主管倉庫になった場合
                    Warehouse foundWarehouse = scmGoodsUnitData.GetWarehouseInfo(scmGoodsUnitData.RealGoodsUnitData); // 当該委託倉庫情報を取得
                    if (null != foundWarehouse && !string.IsNullOrEmpty(foundWarehouse.MainMngWarehouseCd.Trim()))
                    {
                        // 主管倉庫が設定された場合、対応する在庫情報を取得
                        Stock mainMngStock = GetStockByWarehouseCode(foundWarehouse.MainMngWarehouseCd.Trim(), scmGoodsUnitData);
                        if (null != mainMngStock)
                        {
                            // 主管倉庫情報をSCMデータにセット
                            userAnswerRecord.PmMainMngWarehouseCd = mainMngStock.WarehouseCode;   // PM主管倉庫コード
                            userAnswerRecord.PmMainMngWarehouseName = mainMngStock.WarehouseName; // PM主管倉庫名称
                            userAnswerRecord.PmMainMngShelfNo = !string.IsNullOrEmpty(mainMngStock.WarehouseShelfNo.Trim()) ? mainMngStock.WarehouseShelfNo : "棚番無し"; // PM主管棚番
                            userAnswerRecord.PmMainMngPrsntCount = mainMngStock.ShipmentPosCnt; // PM主管現在個数
                        }

                    }
                }
            }
            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<

            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
            userAnswerRecord.PrmSetDtlNo2 = scmGoodsUnitData.RealGoodsUnitData.PrmSetDtlNo2; // 優良設定詳細コード２
            userAnswerRecord.PrmSetDtlName2 = scmGoodsUnitData.RealGoodsUnitData.PrmSetDtlName2; // 優良設定詳細名称２
            // ADD 2015/02/24 下口 SCM高速化 C向け種別・特記事項対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            userAnswerRecord.PrmSetDtlName2ForFac = scmGoodsUnitData.RealGoodsUnitData.PrmSetDtlName2ForFac;
            userAnswerRecord.PrmSetDtlName2ForCOw = scmGoodsUnitData.RealGoodsUnitData.PrmSetDtlName2ForCOw;
            // ADD 2015/02/24 下口 SCM高速化 C向け種別・特記事項対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

            // DEL 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット----------------------->>>>>
            //switch(scmGoodsUnitData.GetStockDiv())
            //{
            //    // 非在庫
            //    case (int)StockDiv.None:
            //        userAnswerRecord.StockStatusDiv = (int)StockStatusDiv.None;
            //        break;
            //    // 委託在庫
            //    case (int)StockDiv.Trust:
            //        userAnswerRecord.StockStatusDiv = (int)StockStatusDiv.Trust;
            //        break;
            //    // 非在庫・委託在庫以外 --> 在庫あり
            //    default:
            //        userAnswerRecord.StockStatusDiv = (int)StockStatusDiv.StockOn;
            //        break;
            //}
            // DEL 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット-----------------------<<<<<

            // ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット----------------------->>>>>
            // キャンセル状態区分  0:キャンセルなし 10:キャンセル要求 20:キャンセル却下 30:キャンセル確定
            if (userAnswerRecord.CancelCndtinDiv != 0)
            {
                userAnswerRecord.StockStatusDiv = scmGoodsUnitData.SourceDetailRecord.StockStatusDiv;
            }
            else
            {
                // 自動回答区分が「する」
                if (scmGoodsUnitData.RealGoodsUnitData.GoodsNo.Length.Equals(0)
                    && !scmGoodsUnitData.RealGoodsUnitData.BLGoodsCode.Equals(0)
                    && this._scmTtlSt.FuwioutAutoAnsDiv.Equals((int)FuwioutAutoAnsDiv.Auto))
                {
                    userAnswerRecord.StockStatusDiv = 8;
                }
                else
                {
                    userAnswerRecord.StockStatusDiv = GetStockStatusDiv(scmGoodsUnitData, userAnswerRecord);// 在庫状況区分
                }
            }
            // ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット-----------------------<<<<<
            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<

            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
            userAnswerRecord.RentDiv = scmGoodsUnitData.SourceDetailRecord.RentDiv;  // 貸出区分            
            userAnswerRecord.MkrSuggestRtPric = scmGoodsUnitData.SourceDetailRecord.MkrSuggestRtPric;  // メーカー希望小売価格
            userAnswerRecord.OpenPriceDiv = scmGoodsUnitData.SourceDetailRecord.OpenPriceDiv;  // オープン価格区分    
            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<

            // UPD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
            #region 削除
            //// ADD 2015/01/07 メーカー希望小売価格対応 --------------------->>>>>
            //// メーカー希望小売価格設定
            //GoodsPrice retGoodsPrice = null;
            //CalculatorAgent.GetMkrSuggestRtPric(DateTime.Today, scmGoodsUnitData, out retGoodsPrice); // メーカー希望小売価格取得
            //if (retGoodsPrice != null)
            //{
            //    // UPD 2015/03/10 SCM社内障害一覧№98対応 ----------------------------->>>>>
            //    #region 削除
            //    //// ADD 2015/01/29 SCM高速化Redmine#87対応 ----------------------------------------------->>>>>
            //    //// 取得した価格情報がユーザー登録の提供データ品番でオープン価格区分が通常の時、提供データから価格情報を再取得する
            //    //if (IsUserRegistAtOfferKubun(scmGoodsUnitData.RealGoodsUnitData) && retGoodsPrice.OpenPriceDiv != 1)
            //    //{
            //    //    List<GoodsPrice> mkrSuggestRtPricList = new List<GoodsPrice>(); // メーカー希望小売価格リスト
            //    //    GetOfferGoodsPrice(scmGoodsUnitData.RealGoodsUnitData, out mkrSuggestRtPricList);
            //    //    if (mkrSuggestRtPricList != null && mkrSuggestRtPricList.Count != 0)
            //    //    {
            //    //        scmGoodsUnitData.RealGoodsUnitData.MkrSuggestRtPricList = mkrSuggestRtPricList;
            //    //    }
            //    //    retGoodsPrice = null;
            //    //    CalculatorAgent.GetMkrSuggestRtPric(DateTime.Today, scmGoodsUnitData, out retGoodsPrice); // メーカー希望小売価格取得
            //    //}
            //    //// ADD 2015/01/29 SCM高速化Redmine#87対応 -----------------------------------------------<<<<< 
            //    #endregion

            //    // 取得した価格情報がユーザー登録の時
            //    if (IsUserRegistAtOfferKubun(scmGoodsUnitData.RealGoodsUnitData))
            //    {
            //        // 提供データから価格情報を取得する
            //        List<GoodsPrice> mkrSuggestRtPricList = new List<GoodsPrice>(); // メーカー希望小売価格リスト
            //        GetOfferGoodsPrice(scmGoodsUnitData.RealGoodsUnitData, out mkrSuggestRtPricList);
            //        if (mkrSuggestRtPricList != null && mkrSuggestRtPricList.Count != 0)
            //        {
            //            GoodsPrice retGoodsPriceFromOffer = null;
            //            // 提供データの価格情報リストから該当価格情報を取得する
            //            CalculatorAgent.GetMkrSuggestRtPric(DateTime.Today, mkrSuggestRtPricList, out retGoodsPriceFromOffer); // メーカー希望小売価格取得
            //            // 取得した価格情報がオープン価格以外の時、提供データの定価をメーカー希望小売価格とする
            //            if (retGoodsPriceFromOffer != null && retGoodsPriceFromOffer.OpenPriceDiv != 1)
            //            {
            //                retGoodsPrice = retGoodsPriceFromOffer;
            //            }
            //        }
            //    }
            //    // UPD 2015/03/10 SCM社内障害一覧№98対応 -----------------------------<<<<<

            //    userAnswerRecord.MkrSuggestRtPric = (long)retGoodsPrice.ListPrice; // メーカー希望小売価格
            //}
            // ADD 2015/01/07 メーカー希望小売価格対応 ---------------------<<<<<
            #endregion

            GoodsPrice retGoodsPrice = null;
            // 提供データ価格情報取得
            List<GoodsPrice> mkrSuggestRtPricList;
            this.GetGoodsPriceListFromUsrGoodsPriceList(userAnswerRecord.GoodsMakerCd, userAnswerRecord.GoodsNo, this._ofrPriceList, out mkrSuggestRtPricList);
            // 提供データの価格情報がなくユーザー登録品番の時、提供データから価格情報を再取得する
            if ((mkrSuggestRtPricList == null || mkrSuggestRtPricList.Count == 0) && IsUserRegistAtOfferKubun(scmGoodsUnitData.RealGoodsUnitData))
            {
                GetOfferGoodsPrice(scmGoodsUnitData.RealGoodsUnitData, out mkrSuggestRtPricList);
            }
            if (mkrSuggestRtPricList != null && mkrSuggestRtPricList.Count != 0)
            {
                // 提供データの価格情報リストから該当価格情報を取得する
                CalculatorAgent.GetMkrSuggestRtPric(DateTime.Today, mkrSuggestRtPricList, out retGoodsPrice); // メーカー希望小売価格取得
                if (retGoodsPrice != null)
                {
                    if (retGoodsPrice.OpenPriceDiv == 1)  // オープン価格区分（0:通常、1:オープン価格区分)
                    {
                        // 提供データがオープン価格の時はユーザー登録分価格情報から取得する
                        List<GoodsPrice> userPliceList;
                        this.GetGoodsPriceListFromUsrGoodsPriceList(userAnswerRecord.GoodsMakerCd, userAnswerRecord.GoodsNo, this._userPriceList, out userPliceList);
                        if (userPliceList != null && userPliceList.Count != 0)
                        {
                            GoodsPrice retGoodsPriceU = null;
                            // 提供データの価格情報リストから該当価格情報を取得する
                            CalculatorAgent.GetMkrSuggestRtPric(DateTime.Today, userPliceList, out retGoodsPriceU); // メーカー希望小売価格取得
                            if (retGoodsPriceU != null)
                            {
                                retGoodsPrice = retGoodsPriceU;
                            }
                        }
                    }
                }
            }
            // ユーザー登録のみの時はユーザー登録分価格情報から取得する
            else
            {
                List<GoodsPrice> userPliceList;
                this.GetGoodsPriceListFromUsrGoodsPriceList(userAnswerRecord.GoodsMakerCd, userAnswerRecord.GoodsNo, this._userPriceList, out userPliceList);
                if (userPliceList != null && userPliceList.Count != 0)
                {
                    GoodsPrice retGoodsPriceU = null;
                    // 提供データの価格情報リストから該当価格情報を取得する
                    CalculatorAgent.GetMkrSuggestRtPric(DateTime.Today, userPliceList, out retGoodsPriceU); // メーカー希望小売価格取得
                    if (retGoodsPriceU != null)
                    {
                        retGoodsPrice = retGoodsPriceU;
                    }
                }
            }
            if (retGoodsPrice != null)
            {
                userAnswerRecord.MkrSuggestRtPric = (long)retGoodsPrice.ListPrice; // メーカー希望小売価格
            }
            // UPD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<

            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
            userAnswerRecord.ModelPrtsAdptYm = scmGoodsUnitData.SourceDetailRecord.ModelPrtsAdptYm;  // 型式別部品採用年月
            userAnswerRecord.ModelPrtsAblsYm = scmGoodsUnitData.SourceDetailRecord.ModelPrtsAblsYm;  // 型式別部品廃止年月
            userAnswerRecord.ModelPrtsAdptFrameNo = scmGoodsUnitData.SourceDetailRecord.ModelPrtsAdptFrameNo;  // 型式別部品採用車台番号
            userAnswerRecord.ModelPrtsAblsFrameNo = scmGoodsUnitData.SourceDetailRecord.ModelPrtsAblsFrameNo;  // 型式別部品廃止車台番号
            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<

            // ADD 2010/04/05 以前に見積伝票データを作成している発注の場合、作成する回答データおよび売上伝票データは見積伝票データを元に作成する ---------->>>>>
            #region 見積計上用処理

            // FIXME:前回の回答データから再構築
            if (scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData)
            {
                #region <Log>

                EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg("回答データを見積計上します。"));

                #endregion // </Log>

                ((AnsweredGoodsUnitData)scmGoodsUnitData.RealGoodsUnitData).AddUpSalesDetail(userAnswerRecord);
            }

            #endregion // 見積計上用処理
            // ADD 2010/04/05 以前に見積伝票データを作成している発注の場合、作成する回答データおよび売上伝票データは見積伝票データを元に作成する ----------<<<<<

            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            userAnswerRecord.InqBlUtyPtThCd = scmGoodsUnitData.SourceDetailRecord.InqBlUtyPtThCd;  // 問発BL統一部品コード
            userAnswerRecord.InqBlUtyPtSbCd = scmGoodsUnitData.SourceDetailRecord.InqBlUtyPtSbCd;  // 問発BL統一部品サブコード
            userAnswerRecord.AnsBLGoodsCode = scmGoodsUnitData.RealGoodsUnitData.BLGoodsCode;  // 回答BL商品コード
            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

            return userAnswerRecord;
        }
        #endregion // </SCM受注明細データ(回答)>

        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
        /// <summary>
        ///  ユーザー商品価格情報から価格情報リストを取得します
        /// </summary>
        /// <param name="usrGoodsPriceDataTable">PartInfoDataSetユーザー価格情報</param>
        /// <param name="PriceList">価格情報リスト</param>
        private void GetGoodsPriceListFromUsrGoodsPriceDataTable(PartsInfoDataSet.UsrGoodsPriceDataTable usrGoodsPriceDataTable, out List<GoodsPrice> PriceList)
        {
            PriceList = new List<GoodsPrice>();

            if (usrGoodsPriceDataTable == null || usrGoodsPriceDataTable.Count == 0) return;

            foreach (PartsInfoDataSet.UsrGoodsPriceRow row in usrGoodsPriceDataTable.Rows)
            {
                GoodsPrice prc = new GoodsPrice();
                prc.CreateDateTime = new DateTime(row.CreateDateTime);
                prc.UpdateDateTime = new DateTime(row.UpdateDateTime);
                prc.EnterpriseCode = row.EnterpriseCode;
                if (row.IsFileHeaderGuidNull() == false)
                    prc.FileHeaderGuid = row.FileHeaderGuid;
                prc.UpdAssemblyId1 = row.UpdAssemblyId1;
                prc.UpdAssemblyId2 = row.UpdAssemblyId2;
                prc.UpdEmployeeCode = row.UpdEmployeeCode;
                prc.LogicalDeleteCode = row.LogicalDeleteCode;

                prc.GoodsMakerCd = row.GoodsMakerCd;
                prc.GoodsNo = row.GoodsNo;
                prc.ListPrice = row.ListPrice;
                prc.OpenPriceDiv = row.OpenPriceDiv;
                prc.PriceStartDate = row.PriceStartDate;
                prc.SalesUnitCost = row.SalesUnitCost;
                prc.StockRate = row.StockRate;
                if (row.IsUpdateDateNull() == false)
                {
                    prc.UpdateDate = row.UpdateDate;
                }
                else
                {
                    prc.UpdateDate = DateTime.MinValue;
                }
                prc.OfferDate = row.OfferDate;
                PriceList.Add(prc);
            }
        }

        /// <summary>
        ///  価格情報リストからメーカーコード、品番で絞り込んだ価格情報リストを取得します
        /// </summary>
        /// <param name="goodsMakerCd">商品メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="priceListAll">ユーザー登録分価格情報</param>
        /// <param name="priceList">価格情報リスト</param>
        private void GetGoodsPriceListFromUsrGoodsPriceList(int goodsMakerCd, string goodsNo, List<GoodsPrice> priceListAll, out List<GoodsPrice> priceList)
        {
            priceList = new List<GoodsPrice>();

            if (priceListAll == null || priceListAll.Count == 0) return;
            if (goodsMakerCd == 0 || string.IsNullOrEmpty(goodsNo)) return;

            priceList = priceListAll.FindAll(delegate(GoodsPrice goodsPrice)
            {
                if (goodsPrice.GoodsMakerCd == goodsMakerCd && goodsPrice.GoodsNo.Trim() == goodsNo.Trim()) return true;
                else return false;
            });
        }
        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<

        // ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット----------------------->>>>>
        /// <summary>
        /// 在庫状況区分取得
        /// </summary>
        /// <param name="scmGoodsUnitData">SCM用の情報付商品連結データ</param>
        /// <param name="userAnswerRecord">ユーザーDB SCM受注明細データ(回答)</param>
        /// <returns>在庫状況区分</returns>
        /// <remarks>
        /// <br>Note		: 在庫状況区分取得します。</br>
        /// <br>Programmer	: 鄧潘ハン</br>
        /// <br>Date		: 2014/07/23</br>
        /// </remarks>
        private short GetStockStatusDiv(SCMGoodsUnitData scmGoodsUnitData, UserSCMOrderAnswerRecord userAnswerRecord)
        {
            bool isTrust = scmGoodsUnitData.IsTrustStock();

            if (scmGoodsUnitData.ExistsStock)
            {
                // 現在庫数ゼロ
                if (scmGoodsUnitData.GetStockQty() <= 0)
                {
                    // 在庫マスタ無し or 現在庫数ゼロ

                    if (isTrust)
                    {
                        // 委託在庫の場合
                        return 4; // 4:[無し（委託在庫）]
                    }
                    else
                    {
                        // 0:[無し]
                        return 0;
                    }
                }
                else if (scmGoodsUnitData.GetStockQty() - userAnswerRecord.SalesOrderCount < 0)
                {
                    // (現在庫数 － 問合せ数) ＜ ０ → 1:[不足]
                    if (isTrust)
                    {
                        // 委託在庫の場合
                        return 5; // 5:[不足（委託在庫）]
                    }
                    else
                    {
                        return 1;
                    }

                }
                else
                {
                    Stock stock = scmGoodsUnitData.GetStock();
                    // 在庫マスタ 最低在庫数が設定されている場合
                    if (stock.MinimumStockCnt != 0)
                    {
                        // (現在庫数 － 問合せ数) ＜ 最低在庫数 → 2:[在庫残少]
                        if (stock.ShipmentPosCnt - userAnswerRecord.SalesOrderCount < stock.MinimumStockCnt)
                        {

                            if (isTrust)
                            {
                                // 委託在庫の場合
                                return 6; // 6:[在庫残少（委託在庫）]
                            }
                            else
                            {
                                return 2;
                            }
                        }
                        else
                        {
                            // (現在庫数 － 問合せ数)  ≧ 最低在庫数 → 3:[在庫残多]
                            if (isTrust)
                            {
                                // 委託在庫の場合
                                return 7; //7:[在庫残多（委託在庫）]
                            }
                            else
                            {
                                return 3;
                            }
                        }
                    }
                    else
                    {
                        // 在庫マスタ 最低在庫数が設定されていない場合
                        // (現在庫数 － 問合せ数) ≧ ０ → 3:[在庫残多]
                        if (isTrust)
                        {
                            // 委託在庫の場合
                            return 7; //7:[在庫残多（委託在庫）]
                        }
                        else
                        {
                            return 3;
                        }

                    }
                }
            }
            else
            {
                // 在庫マスタ無し
                // 現在庫数ゼロ
                if (isTrust)
                {
                    // 委託在庫の場合
                    return 4; // 4:[無し（委託在庫）]
                }
                else
                {

                    // 0:[無し]
                    return 0;
                }
            }
        }
        // ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット-----------------------<<<<<

        // --- ADD 2018/10/23 譚洪  Redmine#49773 自動回答後セット子部品在庫状況不正の障害対応--->>>>>
        /// <summary>
        /// 在庫状況区分取得（セット情報用）
        /// </summary>
        /// <param name="scmGoodsUnitData">SCM用の情報付商品連結データ</param>
        /// <param name="salesOrderCount">問合数</param>
        /// <returns>在庫状況区分</returns>
        /// <remarks>
        /// <br>Note		: 在庫状況区分取得します。</br>
        /// <br>Programmer	: 譚洪</br>
        /// <br>Date		: 2018/10/23</br>
        /// </remarks>
        private short GetStockStatusDivSet(SCMGoodsUnitData scmGoodsUnitData, double salesOrderCount)
        {
            bool isTrust = scmGoodsUnitData.IsTrustStock();

            if (scmGoodsUnitData.ExistsStock)
            {
                // 現在庫数ゼロ
                if (scmGoodsUnitData.GetStockQty() <= 0)
                {
                    // 在庫マスタ無し or 現在庫数ゼロ

                    if (isTrust)
                    {
                        // 委託在庫の場合
                        return 4; // 4:[無し（委託在庫）]
                    }
                    else
                    {
                        // 0:[無し]
                        return 0;
                    }
                }
                else if (scmGoodsUnitData.GetStockQty() - salesOrderCount < 0)
                {
                    // (現在庫数 － 問合せ数) ＜ ０ → 1:[不足]
                    if (isTrust)
                    {
                        // 委託在庫の場合
                        return 5; // 5:[不足（委託在庫）]
                    }
                    else
                    {
                        return 1;
                    }

                }
                else
                {
                    Stock stock = scmGoodsUnitData.GetStock();
                    // 在庫マスタ 最低在庫数が設定されている場合
                    if (stock.MinimumStockCnt != 0)
                    {
                        // (現在庫数 － 問合せ数) ＜ 最低在庫数 → 2:[在庫残少]
                        if (stock.ShipmentPosCnt - salesOrderCount < stock.MinimumStockCnt)
                        {

                            if (isTrust)
                            {
                                // 委託在庫の場合
                                return 6; // 6:[在庫残少（委託在庫）]
                            }
                            else
                            {
                                return 2;
                            }
                        }
                        else
                        {
                            // (現在庫数 － 問合せ数)  ≧ 最低在庫数 → 3:[在庫残多]
                            if (isTrust)
                            {
                                // 委託在庫の場合
                                return 7; //7:[在庫残多（委託在庫）]
                            }
                            else
                            {
                                return 3;
                            }
                        }
                    }
                    else
                    {
                        // 在庫マスタ 最低在庫数が設定されていない場合
                        // (現在庫数 － 問合せ数) ≧ ０ → 3:[在庫残多]
                        if (isTrust)
                        {
                            // 委託在庫の場合
                            return 7; //7:[在庫残多（委託在庫）]
                        }
                        else
                        {
                            return 3;
                        }

                    }
                }
            }
            else
            {
                // 在庫マスタ無し
                // 現在庫数ゼロ
                if (isTrust)
                {
                    // 委託在庫の場合
                    return 4; // 4:[無し（委託在庫）]
                }
                else
                {

                    // 0:[無し]
                    return 0;
                }
            }
        }
        //  --- ADD 2018/10/23 譚洪  Redmine#49773 自動回答後セット子部品在庫状況不正の障害対応---<<<<<

        // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
        /// <summary>
        /// 指定商品の倉庫コードより在庫情報を取得します。
        /// </summary>
        /// <param name="paramWarehouseCode">倉庫コード</param>
        /// <param name="paramScmGoodsUnitData">商品連結データ</param>
        /// <returns>在庫情報</returns>
        private Stock GetStockByWarehouseCode(string paramWarehouseCode, SCMGoodsUnitData paramScmGoodsUnitData)
        {
            Stock findStock = paramScmGoodsUnitData.RealGoodsUnitData.StockList.Find(
                delegate(Stock stockInfo)
                {
                    return (stockInfo.WarehouseCode.Trim().Equals(paramWarehouseCode.Trim()));
                }
                );
            return findStock;
        }
        // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
        
        // --- ADD LDNS wangqx 2011/08/10 ---------->>>>>
        #region <SCM受注セットデータ>
        /// <summary>
        /// SCM受注セットデータを編集します。
        /// </summary>
        /// <param name="userAnswerRecord">SCM受注明細データ(回答)のレコード</param>
        /// <param name="scmGoodsUnitData">付加情報付き商品連結データ</param>
        /// <param name="detailRecord">SCM受注明細データ(問合せ・発注)</param>
        /// <param name="OdSetDtRecordList">受注セットデータリスト</param>
        /// <returns>編集したSCM受注明細データ(回答)のレコード</returns>
        protected void EditOdSetDtRecord(
            UserSCMOrderAnswerRecord userAnswerRecord,
            SCMGoodsUnitData scmGoodsUnitData,
            ISCMOrderDetailRecord detailRecord,
            ref List<ISCMAcOdSetDtRecord> OdSetDtRecordList
        )
        {
           
            // 親、子フラグ　true：親　false:子
            bool partKindFlag = true;
            ISCMAcOdSetDtRecord parentSetDtRecord = new UserSCMAcOdSetDtRecord();

            // 親部品セット情報を設定する
            SetOdSetDtRecord(userAnswerRecord, scmGoodsUnitData, detailRecord, partKindFlag, ref parentSetDtRecord);
            // セット部品番号
            parentSetDtRecord.SetPartsNumber = scmGoodsUnitData.RealGoodsUnitData.GoodsNo;
            // 商品連結データから取得
            parentSetDtRecord.SetPartsMkrCd = scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd;

            OdSetDtRecordList.Add(parentSetDtRecord);

            // 子部品セット情報がある場合のみ、セット情報を設定する。
            if (scmGoodsUnitData.SetSCMGoodsUnitDataList.Count > 0)
            {
                // 子部品セット情報を設定する
                partKindFlag = false;
                for (int i = 0; i < scmGoodsUnitData.SetSCMGoodsUnitDataList.Count; i++)
                {
                    ISCMAcOdSetDtRecord sonSetDtRecord = new UserSCMAcOdSetDtRecord();
                    SCMGoodsUnitData sonGoodsUnitData = (SCMGoodsUnitData)scmGoodsUnitData.SetSCMGoodsUnitDataList[i];
                    SetOdSetDtRecord(userAnswerRecord, sonGoodsUnitData, detailRecord, partKindFlag, ref sonSetDtRecord);
                    // セット部品番号 
                    sonSetDtRecord.SetPartsNumber = scmGoodsUnitData.RealGoodsUnitData.GoodsNo;
                    // 商品連結データから取得
                    sonSetDtRecord.SetPartsMkrCd = scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd;
                    // セット部品親子番号 0:親,1-*:子
                    // UPD 2013/01/11 2013/03/13配信予定 SCM障害№10472対応 --------------------------------->>>>>
                    //sonSetDtRecord.SetPartsMainSubNo = i + 1;
                    sonSetDtRecord.SetPartsMainSubNo = sonGoodsUnitData.RealGoodsUnitData.DisplayOrder;
                    // UPD 2013/01/11 2013/03/13配信予定 SCM障害№10472対応 ---------------------------------<<<<<
                    OdSetDtRecordList.Add(sonSetDtRecord);
                }
            }
            else 
            {
                OdSetDtRecordList.Clear();
            }
        }
        #endregion

        #region <SCM受注セットデータ設定>
        /// <summary>
        /// SCM受注セットデータを設定します。
        /// </summary>
        /// <param name="userAnswerRecord">SCM受注明細データ(回答)のレコード</param>
        /// <param name="scmGoodsUnitData">付加情報付き商品連結データ</param>
        /// <param name="detailRecord">SCM受注明細データ(問合せ・発注)</param>
        /// <param name="partKindFlag">親、子フラグ</param>
        /// <param name="paramOdSetDtRecord">受注セットデータ</param>
        /// <returns>編集したSCM受注明細データ(回答)のレコード</returns>
        /// <remarks>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問合せ・発注のデータに新BLコード、新BLサブコード項目追加</br>
        /// <br>Update Note : 2018/08/24 譚洪</br>
        /// <br>管理番号    : 11470103-00</br>
        /// <br>            : 自動回答処理にてセット部品（親・子）の納品数が不具合の障害対応</br>
        /// <br>Update Note : 2018/10/23 譚洪</br>
        /// <br>管理番号    : 11475116-00</br>
        /// <br>            : Redmine#49773 自動回答後セット子部品在庫状況不正の障害対応</br>
        /// </remarks>
        protected void SetOdSetDtRecord(
            UserSCMOrderAnswerRecord userAnswerRecord,
            SCMGoodsUnitData scmGoodsUnitData,
            ISCMOrderDetailRecord detailRecord,
            bool partKindFlag,
            //ref ISCMAcOdSetDtRecord OdSetDtRecord // DEL 2013/02/27 qijh #34752
            ref ISCMAcOdSetDtRecord paramOdSetDtRecord // ADD 2013/02/27 qijh #34752

        )
        {
            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
            UserSCMAcOdSetDtRecord OdSetDtRecord = paramOdSetDtRecord as UserSCMAcOdSetDtRecord;
            if (OdSetDtRecord == null)
            {
                Debug.Assert(false, "User型のSCM受注セット部品データではありません。");
                return;
            }
            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
            // 部品セット情報を設定する
            // 元となったSCM受注明細データ(問合せ・発注)．問合せ先企業コード
            OdSetDtRecord.EnterpriseCode = detailRecord.InqOtherEpCd;
            // 元となったSCM受注明細データ(問合せ・発注)．問合せ元企業コード
            OdSetDtRecord.InqOriginalEpCd = detailRecord.InqOriginalEpCd.Trim();//@@@@20230303
            // 元となったSCM受注明細データ(問合せ・発注)．問合せ元拠点コード
            OdSetDtRecord.InqOriginalSecCd = detailRecord.InqOriginalSecCd;
            // 元となったSCM受注明細データ(問合せ・発注)．問合せ先企業コード
            OdSetDtRecord.InqOtherEpCd = detailRecord.InqOtherEpCd;
            // 元となったSCM受注明細データ(問合せ・発注)．問合せ先拠点コード
            OdSetDtRecord.InqOtherSecCd = detailRecord.InqOtherSecCd;
            // 元となったSCM受注明細データ(問合せ・発注)．問合せ番号
            OdSetDtRecord.InquiryNumber = detailRecord.InquiryNumber;
            // 商品種別 商品連結データから取得
            OdSetDtRecord.GoodsDivCd = scmGoodsUnitData.GetGoodsDivCd(true);
            // リサイクル部品種別 商品連結データから取得
            OdSetDtRecord.RecyclePrtKindCode = scmGoodsUnitData.GetRecyclePrtKindCode(true);
            // リサイクル部品種別名称
            OdSetDtRecord.RecyclePrtKindName = scmGoodsUnitData.GetRecyclePrtKindName(true);
            // 納品区分 PCC全体設定マスタ．納品区分
            // UPD 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ---------------------------------->>>>>
            //if (_pccHash.ContainsKey(detailRecord.InqOtherEpCd + detailRecord.InqOtherSecCd))
            //{
            //    OdSetDtRecord.DeliveredGoodsDiv = ((PccTtlStWork)_pccHash[detailRecord.InqOtherEpCd + detailRecord.InqOtherSecCd]).DeliveredGoodsDiv;
            if (_scmTtlSt != null)
            {
                OdSetDtRecord.DeliveredGoodsDiv = _scmTtlSt.DeliveredGoodsDiv;
            // UPD 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ----------------------------------<<<<<
            }
            else
            {
                OdSetDtRecord.DeliveredGoodsDiv = 0;
            }
            // 取扱区分
            OdSetDtRecord.HandleDivCode = detailRecord.HandleDivCode;
            // 商品形態
            OdSetDtRecord.GoodsShape = detailRecord.GoodsShape;
            // 納品確認区分
            OdSetDtRecord.DelivrdGdsConfCd = detailRecord.DelivrdGdsConfCd;
            // 納品完了予定日
            if (detailRecord.DeliGdsCmpltDueDate == DateTime.MinValue)
            {
                OdSetDtRecord.DeliGdsCmpltDueDate = DateTime.MinValue;
            }
            else
            {
                OdSetDtRecord.DeliGdsCmpltDueDate = detailRecord.DeliGdsCmpltDueDate;
            }
            // 回答納期
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            #region 旧ソース
            //// UPD 2013/03/07 SCM障害№10489対応 ---------------------------------------->>>>>
            ////OdSetDtRecord.AnswerDeliveryDate = scmGoodsUnitData.GetAnswerDeliveryDate();
            //OdSetDtRecord.AnswerDeliveryDate = scmGoodsUnitData.GetAnswerDeliveryDate((int)this._scmTtlSt.FuwioutAutoAnsDiv);
            //// UPD 2013/03/07 SCM障害№10489対応 ----------------------------------------<<<<<
            #endregion
            Int16 ansDeliDateDiv = 0;
            OdSetDtRecord.AnswerDeliveryDate = scmGoodsUnitData.GetAnswerDeliveryDate((int)this._scmTtlSt.FuwioutAutoAnsDiv, out ansDeliDateDiv);
            OdSetDtRecord.AnsDeliDateDiv = ansDeliDateDiv;  // 回答納期区分
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

            // BL商品コード
            // UPD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            //OdSetDtRecord.BLGoodsCode = scmGoodsUnitData.RealGoodsUnitData.BLGoodsCode;
            OdSetDtRecord.BLGoodsCode = scmGoodsUnitData.SourceDetailRecord.BLGoodsCode;
            // UPD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

            // BL商品コード枝番
            // 検索結果のBLコードが問合せ明細のBLコードと一致する場合のみ、枝番をセット
            if (userAnswerRecord.BLGoodsCode == scmGoodsUnitData.SourceDetailRecord.BLGoodsCode)
            {
                OdSetDtRecord.BLGoodsDrCode = scmGoodsUnitData.SourceDetailRecord.BLGoodsDrCode;
            }
            else
            {
                OdSetDtRecord.BLGoodsDrCode = 0;
            }

            // ADD 2018/04/16 田建委 新BLコード対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            OdSetDtRecord.InqBlUtyPtThCd = scmGoodsUnitData.SourceDetailRecord.InqBlUtyPtThCd;  // 問発BL統一部品コード
            OdSetDtRecord.InqBlUtyPtSbCd = scmGoodsUnitData.SourceDetailRecord.InqBlUtyPtSbCd;  // 問発BL統一部品サブコード
            OdSetDtRecord.AnsBLGoodsCode = scmGoodsUnitData.RealGoodsUnitData.BLGoodsCode;  // 回答BL商品コード
            // ADD 2018/04/16 田建委 新BLコード対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // 問発商品名
            OdSetDtRecord.InqGoodsName = detailRecord.InqGoodsName;
            // 回答商品名
            OdSetDtRecord.AnsGoodsName = scmGoodsUnitData.RealGoodsUnitData.GoodsName;
            // 商品番号
            OdSetDtRecord.GoodsNo = scmGoodsUnitData.GetGoodsNo();
            // 商品メーカーコード
            OdSetDtRecord.GoodsMakerCd = scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd;
            // 商品メーカー名称
            OdSetDtRecord.GoodsMakerNm = scmGoodsUnitData.RealGoodsUnitData.MakerName;
            // 純正商品メーカーコード
            //>>>2012/01/04
            //OdSetDtRecord.PureGoodsMakerCd = scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd;
            OdSetDtRecord.PureGoodsMakerCd = scmGoodsUnitData.PureGoodsMakerCd;
            //<<<2012/01/04
            // 問発純正商品番号
            OdSetDtRecord.InqPureGoodsNo = detailRecord.InqPureGoodsNo;
            // 回答純正商品番号
            //>>>2012/01/04
            //OdSetDtRecord.AnsPureGoodsNo = scmGoodsUnitData.GetAnsPureGoodsNo();
            OdSetDtRecord.AnsPureGoodsNo = scmGoodsUnitData.AnsPureGoodsNo;
            //<<<2012/01/04
            // 定価
            OdSetDtRecord.ListPrice = scmGoodsUnitData.GetListPrice();
            // 単価
            OdSetDtRecord.UnitPrice = scmGoodsUnitData.GetUnitPrice();
            // 商品補足情報
            OdSetDtRecord.GoodsAddInfo = detailRecord.GoodsAddInfo;
            // 粗利額
            OdSetDtRecord.RoughRrofit = scmGoodsUnitData.GetRoughRrofit();
            // 粗利率
            OdSetDtRecord.RoughRate = scmGoodsUnitData.GetRoughRate();
            // 回答期限
            if (detailRecord.AnswerLimitDate == DateTime.MinValue)
            {
                OdSetDtRecord.AnswerLimitDate = DateTime.MinValue;
            }
            else
            {
                OdSetDtRecord.AnswerLimitDate = detailRecord.AnswerLimitDate;
            }
            // 備考(明細)
            OdSetDtRecord.CommentDtl = detailRecord.CommentDtl;
            // 棚番
            // 商品情報(GoodsUnitData) ※在庫委託の場合のみセット
            if (scmGoodsUnitData.GetStockDiv().Equals((int)StockDiv.Trust))
            {
                OdSetDtRecord.ShelfNo = scmGoodsUnitData.GetShelfNo();
            }
            // PM受注ステータス
            OdSetDtRecord.PMAcptAnOdrStatus = scmGoodsUnitData.GetAcptAnOdrStatus();
            // 親
            if (partKindFlag)
            {
                // セット部品親子番号 0:親,1-*:子
                OdSetDtRecord.SetPartsMainSubNo = 0;
                // PM売上伝票番号
                OdSetDtRecord.PMSalesSlipNum = userAnswerRecord.PMSalesSlipNum;
                // PM売上行番号
                OdSetDtRecord.PMSalesRowNo = userAnswerRecord.PMSalesRowNo;
                // --- UPD 2018/08/24 譚洪  自動回答処理にてセット部品（親・子）の納品数が不具合の障害対応--------->>>>>
                // 発注数
                //OdSetDtRecord.SalesOrderCount = 1;
                OdSetDtRecord.SalesOrderCount = scmGoodsUnitData.RealGoodsUnitData.PartsQty;
                // 納品数
                //OdSetDtRecord.DeliveredGoodsCount = 1;
                OdSetDtRecord.DeliveredGoodsCount = detailRecord.SalesOrderCount;
                // --- UPD 2018/08/24 譚洪  自動回答処理にてセット部品（親・子）の納品数が不具合の障害対応--------<<<<<
            }
            // 子
            else
            {
                // PM売上伝票番号
                OdSetDtRecord.PMSalesSlipNum = 0;
                // PM売上行番号
                OdSetDtRecord.PMSalesRowNo = 0;
                // 発注数
                OdSetDtRecord.SalesOrderCount = scmGoodsUnitData.RealGoodsUnitData.SetQty;
                // --- UPD 2018/08/24 譚洪  自動回答処理にてセット部品（親・子）の納品数が不具合の障害対応--------->>>>>
                // 納品数
                //OdSetDtRecord.DeliveredGoodsCount = scmGoodsUnitData.RealGoodsUnitData.SetQty;
                OdSetDtRecord.DeliveredGoodsCount = detailRecord.SalesOrderCount;
                // --- UPD 2018/08/24 譚洪  自動回答処理にてセット部品（親・子）の納品数が不具合の障害対応--------<<<<<
            }
            
            
            // 見積計上時は書き換えない
            if ( !(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData) )
            {
                // PM倉庫コード
                OdSetDtRecord.PmWarehouseCd = scmGoodsUnitData.GetWarehouseCode();
                // PM倉庫名称
                OdSetDtRecord.PmWarehouseName = scmGoodsUnitData.GetWarehouseName();
                // PM棚番
                OdSetDtRecord.PmShelfNo = scmGoodsUnitData.GetShelfNo();
            }
            else
            {
                // PM倉庫コード
                OdSetDtRecord.PmWarehouseCd = detailRecord.PmWarehouseCd;
                // PM倉庫名称
                OdSetDtRecord.PmWarehouseName = detailRecord.PmWarehouseName;
                // PM棚番
                OdSetDtRecord.PmShelfNo = detailRecord.PmShelfNo;
            }

            // PM現在個数
            OdSetDtRecord.PmPrsntCount = scmGoodsUnitData.GetStockQty();

            // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
            // 主管倉庫・在庫情報を設定
            OdSetDtRecord.PmMainMngWarehouseCd = OdSetDtRecord.PmWarehouseCd;   // PM主管倉庫コード
            OdSetDtRecord.PmMainMngWarehouseName = OdSetDtRecord.PmWarehouseName; // PM主管倉庫名称
            OdSetDtRecord.PmMainMngShelfNo = OdSetDtRecord.PmShelfNo;    // PM主管棚番
            OdSetDtRecord.PmMainMngPrsntCount = OdSetDtRecord.PmPrsntCount; // PM主管現在個数

            if (scmGoodsUnitData.IsTrustStock())
            {
                // 委託在庫の場合、SCM全体設定のデータ更新倉庫区分より、明細の主管倉庫情報を設定
                if (null != this._scmTtlSt && this._scmTtlSt.DataUpDateWareHDiv == 1)
                {
                    // 更新倉庫区分が主管倉庫になった場合
                    Warehouse foundWarehouse = scmGoodsUnitData.GetWarehouseInfo(scmGoodsUnitData.RealGoodsUnitData); // 当該委託倉庫情報を取得
                    if (null != foundWarehouse && !string.IsNullOrEmpty(foundWarehouse.MainMngWarehouseCd.Trim()))
                    {
                        // 主管倉庫が設定された場合、対応する在庫情報を取得
                        Stock mainMngStock = GetStockByWarehouseCode(foundWarehouse.MainMngWarehouseCd.Trim(), scmGoodsUnitData);
                        if (null != mainMngStock)
                        {
                            // 主管倉庫情報をSCMデータにセット
                            OdSetDtRecord.PmMainMngWarehouseCd = mainMngStock.WarehouseCode;   // PM主管倉庫コード
                            OdSetDtRecord.PmMainMngWarehouseName = mainMngStock.WarehouseName; // PM主管倉庫名称
                            OdSetDtRecord.PmMainMngShelfNo = !string.IsNullOrEmpty(mainMngStock.WarehouseShelfNo.Trim()) ? mainMngStock.WarehouseShelfNo : "棚番無し"; // PM主管棚番
                            OdSetDtRecord.PmMainMngPrsntCount = mainMngStock.ShipmentPosCnt; // PM主管現在個数
                        }

                    }
                }
            }
            // --- ADD 2018/10/23 譚洪  Redmine#49773 自動回答後セット子部品在庫状況不正の障害対応--->>>>>
            // 自動回答区分が「する」
            if (scmGoodsUnitData.RealGoodsUnitData.GoodsNo.Length.Equals(0)
                && !scmGoodsUnitData.RealGoodsUnitData.BLGoodsCode.Equals(0)
                && this._scmTtlSt.FuwioutAutoAnsDiv.Equals((int)FuwioutAutoAnsDiv.Auto))
            {
                OdSetDtRecord.StockStatusDiv = 8;
            }
            else
            {
                OdSetDtRecord.StockStatusDiv = GetStockStatusDivSet(scmGoodsUnitData, detailRecord.SalesOrderCount);// 在庫状況区分
            }
            // --- ADD 2018/10/23 譚洪  Redmine#49773 自動回答後セット子部品在庫状況不正の障害対応---<<<<<
            // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
            // ADD 2013/05/09 SCM障害№10470対応 ----------------------------------------->>>>>
            // 商品規格・特記事項
            // --- UPD 2013/06/17 Y.Wakita ---------->>>>>
            //if (scmGoodsUnitData.RealGoodsUnitData.GoodsSpecialNote.Length.Equals(0))
            //{
            //    OdSetDtRecord.GoodsSpclInstruction = scmGoodsUnitData.RealGoodsUnitData.SetSpecialNote;
            //    // 40桁以上の時はカット
            //    if (scmGoodsUnitData.RealGoodsUnitData.SetSpecialNote.Length > 40)
            //    {
            //        OdSetDtRecord.GoodsSpclInstruction = scmGoodsUnitData.RealGoodsUnitData.SetSpecialNote.Substring(0, 40);
            //    }
            //}
            //else
            //{
            //    OdSetDtRecord.GoodsSpclInstruction = scmGoodsUnitData.RealGoodsUnitData.GoodsSpecialNote;
            //    // 40桁以上の時はカット
            //    if (scmGoodsUnitData.RealGoodsUnitData.GoodsSpecialNote.Length > 40)
            //    {
            //        OdSetDtRecord.GoodsSpclInstruction = scmGoodsUnitData.RealGoodsUnitData.GoodsSpecialNote.Substring(0, 40);
            //    }
            //}

            // 商品
            OdSetDtRecord.GoodsSpclInstruction = scmGoodsUnitData.RealGoodsUnitData.GoodsSpecialNote;
            if (scmGoodsUnitData.RealGoodsUnitData.SetSpecialNote.Length != 0)
                // セット品
                OdSetDtRecord.GoodsSpclInstruction = scmGoodsUnitData.RealGoodsUnitData.SetSpecialNote;
            // DEL 2015/02/04 豊沢 PM-SCM社内障害一覧No.72対応 ------------------------------------------>>>>>
            //// 40桁以上の時はカット
            //if (OdSetDtRecord.GoodsSpclInstruction.Length > 40)
            //{
            //    OdSetDtRecord.GoodsSpclInstruction = OdSetDtRecord.GoodsSpclInstruction.Substring(0, 40);
            //}
            // DEL 2015/02/04 豊沢 PM-SCM社内障害一覧No.72対応 ------------------------------------------<<<<<
            // --- UPD 2013/06/17 Y.Wakita ----------<<<<<
            // ADD 2013/05/09 SCM障害№10470対応 -----------------------------------------<<<<<

            // UPD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
            #region 削除
            //// ADD 2015/01/07 メーカー希望小売価格対応 --------------------->>>>>
            //// メーカー希望小売価格設定
            //GoodsPrice retGoodsPrice = null;
            //CalculatorAgent.GetMkrSuggestRtPric(DateTime.Today, scmGoodsUnitData, out retGoodsPrice); // メーカー希望小売価格取得
            //if (retGoodsPrice != null)
            //{
            //    // UPD 2015/03/11 SCM高速化Redmine#356対応 ----------------------------->>>>>
            //    #region 削除
            //    //// ADD 2015/01/29 SCM高速化Redmine#87対応 ----------------------------------------------->>>>>
            //    //// 取得した価格情報がユーザー登録の提供データ品番でオープン価格区分が通常の時、提供データから価格情報を再取得する
            //    //if (IsUserRegistAtOfferKubun(scmGoodsUnitData.RealGoodsUnitData) && retGoodsPrice.OpenPriceDiv != 1)
            //    //{
            //    //    List<GoodsPrice> mkrSuggestRtPricList = new List<GoodsPrice>(); // メーカー希望小売価格リスト
            //    //    GetOfferGoodsPrice(scmGoodsUnitData.RealGoodsUnitData, out mkrSuggestRtPricList);
            //    //    if (mkrSuggestRtPricList != null && mkrSuggestRtPricList.Count != 0)
            //    //    {
            //    //        scmGoodsUnitData.RealGoodsUnitData.MkrSuggestRtPricList = mkrSuggestRtPricList;
            //    //    }
            //    //    retGoodsPrice = null;
            //    //    CalculatorAgent.GetMkrSuggestRtPric(DateTime.Today, scmGoodsUnitData, out retGoodsPrice); // メーカー希望小売価格取得
            //    //}
            //    //// ADD 2015/01/29 SCM高速化Redmine#87対応 -----------------------------------------------<<<<<
            //    #endregion
            //    // 取得した価格情報がユーザー登録の時
            //    if (IsUserRegistAtOfferKubun(scmGoodsUnitData.RealGoodsUnitData))
            //    {
            //        // 提供データから価格情報を取得する
            //        List<GoodsPrice> mkrSuggestRtPricList = new List<GoodsPrice>(); // メーカー希望小売価格リスト
            //        GetOfferGoodsPrice(scmGoodsUnitData.RealGoodsUnitData, out mkrSuggestRtPricList);
            //        if (mkrSuggestRtPricList != null && mkrSuggestRtPricList.Count != 0)
            //        {
            //            GoodsPrice retGoodsPriceFromOffer = null;
            //            // 提供データの価格情報リストから該当価格情報を取得する
            //            CalculatorAgent.GetMkrSuggestRtPric(DateTime.Today, mkrSuggestRtPricList, out retGoodsPriceFromOffer); // メーカー希望小売価格取得
            //            // 取得した価格情報がオープン価格以外の時、提供データの定価をメーカー希望小売価格とする
            //            if (retGoodsPriceFromOffer != null && retGoodsPriceFromOffer.OpenPriceDiv != 1)
            //            {
            //                retGoodsPrice = retGoodsPriceFromOffer;
            //            }
            //        }
            //    }
            //    // UPD 2015/03/11 SCM高速化Redmine#356対応 -----------------------------<<<<<
            //    OdSetDtRecord.MkrSuggestRtPric = (long)retGoodsPrice.ListPrice; // メーカー希望小売価格
            //}
            //// ADD 2015/01/07 メーカー希望小売価格対応 ---------------------<<<<<
            #endregion

            // メーカー希望小売価格設定
            // 親の場合は回答データより設定
            if (partKindFlag)
            {
                OdSetDtRecord.MkrSuggestRtPric = userAnswerRecord.MkrSuggestRtPric; // メーカー希望小売価格
            }
            // 子の場合は価格情報リストから検索して設定
            else
            {
                GoodsPrice retGoodsPrice = null;
                // 提供データ価格情報取得
                List<GoodsPrice> mkrSuggestRtPricList;
                this.GetGoodsPriceListFromUsrGoodsPriceList(OdSetDtRecord.GoodsMakerCd, OdSetDtRecord.GoodsNo, this._setOfrPriceList, out mkrSuggestRtPricList);
                // 提供データの価格情報がなくユーザー登録品番の時、提供データから価格情報を再取得する
                if ((mkrSuggestRtPricList == null || mkrSuggestRtPricList.Count == 0) && IsUserRegistAtOfferKubun(scmGoodsUnitData.RealGoodsUnitData))
                {
                    GetOfferGoodsPrice(scmGoodsUnitData.RealGoodsUnitData, out mkrSuggestRtPricList);
                }
                if (mkrSuggestRtPricList != null && mkrSuggestRtPricList.Count != 0)
                {
                    // 提供データの価格情報リストから該当価格情報を取得する
                    CalculatorAgent.GetMkrSuggestRtPric(DateTime.Today, mkrSuggestRtPricList, out retGoodsPrice); // メーカー希望小売価格取得
                    if (retGoodsPrice != null)
                    {
                        if (retGoodsPrice.OpenPriceDiv == 1)  // オープン価格区分（0:通常、1:オープン価格区分)
                        {
                            // 提供データがオープン価格の時はユーザー登録分価格情報から取得する
                            List<GoodsPrice> userPliceList;
                            this.GetGoodsPriceListFromUsrGoodsPriceList(OdSetDtRecord.GoodsMakerCd, OdSetDtRecord.GoodsNo, this._setUserPriceList, out userPliceList);
                            if (userPliceList != null && userPliceList.Count != 0)
                            {
                                GoodsPrice retGoodsPriceU = null;
                                // 提供データの価格情報リストから該当価格情報を取得する
                                CalculatorAgent.GetMkrSuggestRtPric(DateTime.Today, userPliceList, out retGoodsPriceU); // メーカー希望小売価格取得
                                if (retGoodsPriceU != null)
                                {
                                    retGoodsPrice = retGoodsPriceU;
                                }
                            }
                        }
                    }
                }
                // ユーザー登録のみの時はユーザー登録分価格情報から取得する
                else
                {
                    List<GoodsPrice> userPliceList;
                    this.GetGoodsPriceListFromUsrGoodsPriceList(OdSetDtRecord.GoodsMakerCd, OdSetDtRecord.GoodsNo, this._setUserPriceList, out userPliceList);
                    if (userPliceList != null && userPliceList.Count != 0)
                    {
                        GoodsPrice retGoodsPriceU = null;
                        // 提供データの価格情報リストから該当価格情報を取得する
                        CalculatorAgent.GetMkrSuggestRtPric(DateTime.Today, userPliceList, out retGoodsPriceU); // メーカー希望小売価格取得
                        if (retGoodsPriceU != null)
                        {
                            retGoodsPrice = retGoodsPriceU;
                        }
                    }
               }
               if (retGoodsPrice != null)
               {
                   OdSetDtRecord.MkrSuggestRtPric = (long)retGoodsPrice.ListPrice; // メーカー希望小売価格
               }
            }
            // UPD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<

            // ADD 2015/02/27 SCM高速化 C向け種別対応 -------------------------------->>>>>
            OdSetDtRecord.PrmSetDtlNo2 = scmGoodsUnitData.RealGoodsUnitData.PrmSetDtlNo2;                   // 優良設定詳細コード２
            OdSetDtRecord.PrmSetDtlName2 = scmGoodsUnitData.RealGoodsUnitData.PrmSetDtlName2;               // 優良設定詳細名称２
            OdSetDtRecord.PrmSetDtlName2ForFac = scmGoodsUnitData.RealGoodsUnitData.PrmSetDtlName2ForFac;   // 優良設定詳細名称２（工場向け）
            OdSetDtRecord.PrmSetDtlName2ForCOw = scmGoodsUnitData.RealGoodsUnitData.PrmSetDtlName2ForCOw;   // 優良設定詳細名称２（カーオーナー向け）
            // 検索タイプがBLコード検索以外の時
            if (scmGoodsUnitData.SearchedType != SCMSearchedResult.GoodsSearchDivCd.BLCode)
            {
                // 前回見積データが存在しない時
                if (Referee.Searcher.OrgAnswerRecordList.Count == 0)
                {
                    OdSetDtRecord.PrmSetDtlNo2 = 0;                      // 優良設定詳細コード２
                    OdSetDtRecord.PrmSetDtlName2 = string.Empty;         // 優良設定詳細名称２
                    OdSetDtRecord.PrmSetDtlName2ForFac = string.Empty;   // 優良設定詳細名称２（工場向け）
                    OdSetDtRecord.PrmSetDtlName2ForCOw = string.Empty;   // 優良設定詳細名称２（カーオーナー向け）
                }
                // 再問合せの時
                else if (Referee.Searcher.OrgAnswerRecordList.Count != 0 && userAnswerRecord.InqOrdDivCd == (int)InqOrdAnsDivCd.Inquiry)
                {
                    // セット品は問合せ元データが存在しないので種別名称存在時は再取得値をセット
                    if (!string.IsNullOrEmpty(scmGoodsUnitData.SourceDetailRecord.PrmSetDtlName2))
                    {
                        OdSetDtRecord.PrmSetDtlNo2 = scmGoodsUnitData.RealGoodsUnitData.PrmSetDtlNo2;                   // 優良設定詳細コード２
                        OdSetDtRecord.PrmSetDtlName2 = scmGoodsUnitData.RealGoodsUnitData.PrmSetDtlName2;               // 優良設定詳細名称２
                        OdSetDtRecord.PrmSetDtlName2ForFac = scmGoodsUnitData.RealGoodsUnitData.PrmSetDtlName2ForFac;   // 優良設定詳細名称２（工場向け）
                        OdSetDtRecord.PrmSetDtlName2ForCOw = scmGoodsUnitData.RealGoodsUnitData.PrmSetDtlName2ForCOw;   // 優良設定詳細名称２（カーオーナー向け）
                    }
                }
            }
            // ADD 2015/02/27 SCM高速化 C向け種別対応 --------------------------------<<<<<
        }
         #endregion
        // --- ADD LDNS wangqx 2011/08/10 ----------<<<<<

        #region <売上明細データ>

        /// <summary>
        /// 売上明細データを生成します。
        /// </summary>
        /// <param name="scmGoodsUnitData">SCM用の情報付商品連結データ</param>
        /// <param name="answerRecord">SCM受注明細データ(回答)のレコード</param>
        /// <param name="headerRecord">SCM受注データのレコード</param>
        /// <param name="carRecord">SCM受注データ(車両情報)のレコード</param>
        /// <param name="enmDetailRecord">SCM受注明細データ(問合せ・発注)のレコード</param>
        /// <returns>売上明細データ</returns>
        /// <br>UpdateNote : 2011/07/15 譚洪 Redmine#22829 自動回答、手動回答の両方で売価率の算出方法が不正の対応</br>
        /// <br>UpdateNote : 2011/08/12 譚洪 Redmine#23554 キャンペーンの売価「売価率、値引率、売価額」が設定されている場合は、掛率マスタの売価の設定をクリアするように仕様変更の対応</br>
        /// <br>Update Note: 2011/08/15 譚洪 Redmine#23554 掛率マスタの売価率設定ありで且つ、キャンペーンの売価額設定ありの場合、売価率はクリアの対応</br>
        /// <br>Update Note: 2011/08/15 譚洪 Redmine#23637 SCM 部品価格問合せ／発注 明細部の表示と単価情報に関しての対応</br>
        /// <br>Update Note: 2013/02/18 zhubj 2013/03/13配信分　 システム障害 管理№108対応</br>
        protected virtual SalesDetail CreateSalesDetail(
            SCMGoodsUnitData scmGoodsUnitData, 
            ISCMOrderAnswerRecord answerRecord,
            ISCMOrderHeaderRecord headerRecord,
            ISCMOrderCarRecord carRecord
          , ISCMOrderDetailRecord enmDetailRecord // ADD 2014/01/16 T.Miyamoto
        )
        {
            const string METHOD_NAME = "CreateSalesDetail()";   // ログ用
            // DEL 2014/05/08 PM-SCM速度改良 フェーズ２№08.売上データ生成時のシステム日付取得対応 ---------------------------------->>>>>
            //// ----ADD 2013/02/18 wangqx 管理№267---- >>>>>
            //DateTime getServerNowTime;
            //SalesSlipInputAcs salesSlipInputAcs = SalesSlipInputAcs.GetInstance();
            //getServerNowTime = salesSlipInputAcs.GetServerNowTime;
            //// ----ADD 2013/02/18 wangqx 管理№267---- <<<<<
            // DEL 2014/05/08 PM-SCM速度改良 フェーズ２№08.売上データ生成時のシステム日付取得対応 ----------------------------------<<<<<
            #region <Log>

            string msg = string.Format(
                "売上明細データを生成中(問合せ番号={0}, 問合せ行番号={1}, 問合せ行番号枝番={2})...",
                answerRecord.InquiryNumber,
                answerRecord.InqRowNumber,
                answerRecord.InqRowNumDerivedNo
            );
            EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));

            #endregion // </Log>
            // --- ADD 2011/09/19 ---------->>>>>
            // 得意先情報
            CustomerInfo customerInfo = GetCustomerInfo(headerRecord);
            if (customerInfo == null)
            {
                #region <Log>

                msg = string.Format("得意先マスタに存在しません(={0})", headerRecord.CustomerCode);
                EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));

                #endregion // </Log>
            }

            //-----------------------------------------------------
            // 得意先掛率グループ情報
            //-----------------------------------------------------
            ArrayList custRateGroupList;
            // UPD 2014/05/08 PM-SCM速度改良 フェーズ２№09.得意先掛率グループマスタ取得改良対応（売上データ生成時） ---------------------------------->>>>>
            //this._custRateGroupList.Clear();
            //if (customerInfo.CustomerCode != 0)
            //{
            //    this._custRateGroupAcs.SearchForAuto(out custRateGroupList, answerRecord.InqOtherEpCd, customerInfo.CustomerCode, ConstantManagement.LogicalMode.GetData0);
            //    if ((custRateGroupList != null) && (custRateGroupList.Count != 0))
            //    {
            //        this._custRateGroupList = new List<CustRateGroup>((CustRateGroup[])custRateGroupList.ToArray(typeof(CustRateGroup)));
            //    }
            //}
            // 得意先コードが前回値と違っている時、得意先掛率グループ情報取得
            if (customerInfo.CustomerCode != 0 && customerInfo.CustomerCode != this._prevCustomerCode)
            {
                this._custRateGroupList.Clear();
                this._custRateGroupAcs.SearchForAuto(out custRateGroupList, answerRecord.InqOtherEpCd, customerInfo.CustomerCode, ConstantManagement.LogicalMode.GetData0);
                if ((custRateGroupList != null) && (custRateGroupList.Count != 0))
                {
                    this._custRateGroupList = new List<CustRateGroup>((CustRateGroup[])custRateGroupList.ToArray(typeof(CustRateGroup)));
                }
                this._prevCustomerCode = customerInfo.CustomerCode;
            }
            // UPD 2014/05/08 PM-SCM速度改良 フェーズ２№09.得意先掛率グループマスタ取得改良対応（売上データ生成時） ----------------------------------<<<<<
            // --- ADD 2011/09/19 ----------<<<<<

            // ADD 2012/11/08 2012/11/14配信 システムテスト障害対応：湯上 ------------------>>>>>
            // 変更前SCM情報付商品連結データ取得
            // UPD 2014/05/08 PM-SCM速度改良 フェーズ２№03.変更前単価計算呼出回数改良対応 ---------------------------------->>>>>
            //List<SCMGoodsUnitData> beforeScmGoodsUnitDataList = Referee.BeforeSCMGoodsUnitDataList;
            List<SCMGoodsUnitData> beforeScmGoodsUnitDataList = new List<SCMGoodsUnitData>();
            if (Referee.BeforeSCMGoodsUnitDataMap.ContainsKey(enmDetailRecord.ToKey()))
            {
                beforeScmGoodsUnitDataList = Referee.BeforeSCMGoodsUnitDataMap[enmDetailRecord.ToKey()];
            }
            // UPD 2014/05/08 PM-SCM速度改良 フェーズ２№03.変更前単価計算呼出回数改良対応 ----------------------------------<<<<<
            SCMGoodsUnitData beforeScmGoodsUnitData = null;
            if (beforeScmGoodsUnitDataList != null && beforeScmGoodsUnitDataList.Count != 0)
            {
                foreach (SCMGoodsUnitData Detail in beforeScmGoodsUnitDataList)
                {
                    if (Detail.RealGoodsUnitData.GoodsMakerCd == scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd &&
                        Detail.RealGoodsUnitData.GoodsNo == scmGoodsUnitData.RealGoodsUnitData.GoodsNo)
                    {
                        beforeScmGoodsUnitData = Detail;
                        break;
                    }
                }
            }
            // ADD 2012/11/08 2012/11/14配信 システムテスト障害対応：湯上 ------------------>>>>>

            SalesDetail salesDetail = new SalesDetail();
            {
                // 001.作成日時         …共通ヘッダ　リモート取得
                // 002.更新日時         …共通ヘッダ　リモート取得
                salesDetail.EnterpriseCode = answerRecord.InqOtherEpCd; // 003.企業コード…共通ヘッダ　リモート取得
                // 004.GUID             …共通ヘッダ　リモート取得
                // 005.更新従業員コード …共通ヘッダ　リモート取得
                // 006.更新アセンブリID1…共通ヘッダ　リモート取得
                // 007.更新アセンブリID2…共通ヘッダ　リモート取得
                // 008.論理削除区分     …共通ヘッダ　リモート取得

                // 009.受注番号…リモート取得
                salesDetail.AcptAnOdrStatus = answerRecord.AcptAnOdrStatus;                 // 010.受注ステータス   …30:売上, 20:受注, 10:見積
                salesDetail.SalesSlipNum = DEFAULT_SALES_SLIP_NUM;                          // 011.売上伝票番号     …リモート取得
                salesDetail.SalesRowNo = answerRecord.InqRowNumDerivedNo;                   // 012.売上行番号       …連番
                salesDetail.SalesRowDerivNo = 0;                                            // 013.売上行番号枝番   …0
                salesDetail.SectionCode = answerRecord.InqOtherSecCd;                       // 014.拠点コード       …ログイン拠点
                salesDetail.SubSectionCode = GetSubSectionCode(headerRecord);               // 015.部門コード       …SCM受注データの回答従業員の所属部門コード
                salesDetail.SalesDate = headerRecord.InquiryDate;                           // 016.売上日付         …SCM受注データの問合せ日
                // ----ADD 2013/02/18 wangqx 管理№267---- >>>>>
                // 受注場合、売上明細データ伝票の売上日付はサーバー日付で設定する
                if (headerRecord.InqOrdDivCd == (int)InqOrdDivCdValue.Ordering)
                {
                    // UPD 2014/05/08 PM-SCM速度改良 フェーズ２№08.売上データ生成時のシステム日付取得対応 ---------------------------------->>>>>
                    //salesDetail.SalesDate = getServerNowTime;                           // 016.売上日付         …システム日付
                    salesDetail.SalesDate = GetServerNowTime;                           // 016.売上日付         …システム日付
                    // UPD 2014/05/08 PM-SCM速度改良 フェーズ２№08.売上データ生成時のシステム日付取得対応 ----------------------------------<<<<<
                }
                // ----ADD 2013/02/18 wangqx 管理№267---- <<<<<
                // 017.共通通番     …リモート取得
                // 018.売上明細通番 …リモート取得
                // 019.受注ステータス(元)
                // 020.売上明細通番(元)
                // 021.仕入形式(同時)
                // 2010/07/07 Add >>>
                salesDetail.SupplierFormalSync = -1;
                // 2010/07/07 Add <<<
                // 022.仕入明細通番(元)
                salesDetail.SalesSlipCdDtl = 0; // 023.売上伝票区分(明細)…0:売上
                // 024.納品完了予定日

                salesDetail.GoodsKindCode = scmGoodsUnitData.RealGoodsUnitData.GoodsKindCode;               // 025.商品属性             …商品情報(GoodsUnitData)
                salesDetail.GoodsSearchDivCd = (int)scmGoodsUnitData.SearchedType;                          // 026.商品検索区分         …商品情報取得時の検索方法により設定
                salesDetail.GoodsMakerCd = scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd;                 // 027.商品メーカーコード   …商品情報(GoodsUnitData)
                salesDetail.MakerName = scmGoodsUnitData.RealGoodsUnitData.MakerName;                       // 028.メーカー名称         …商品情報(GoodsUnitData)
                salesDetail.MakerKanaName = scmGoodsUnitData.RealGoodsUnitData.MakerKanaName;               // 029.メーカーカナ名称     …商品情報(GoodsUnitData)
                salesDetail.GoodsNo = scmGoodsUnitData.RealGoodsUnitData.GoodsNo;                           // 030.商品番号             …商品情報(GoodsUnitData)
                salesDetail.GoodsName = scmGoodsUnitData.RealGoodsUnitData.GoodsName;                       // 031.商品名称             …商品情報(GoodsUnitData)
                salesDetail.GoodsNameKana = scmGoodsUnitData.RealGoodsUnitData.GoodsNameKana;               // 032.商品名称カナ         …商品情報(GoodsUnitData)
                salesDetail.GoodsLGroup = scmGoodsUnitData.RealGoodsUnitData.GoodsLGroup;                   // 033.商品大分類コード     …商品情報(GoodsUnitData)
                salesDetail.GoodsLGroupName = scmGoodsUnitData.RealGoodsUnitData.GoodsLGroupName;           // 034.商品大分類名称       …商品情報(GoodsUnitData)
                salesDetail.GoodsMGroup = scmGoodsUnitData.RealGoodsUnitData.GoodsMGroup;                   // 035.商品中分類コード     …商品情報(GoodsUnitData)
                salesDetail.GoodsMGroupName = scmGoodsUnitData.RealGoodsUnitData.GoodsMGroupName;           // 036.商品中分類名称       …商品情報(GoodsUnitData)
                salesDetail.BLGroupCode = scmGoodsUnitData.RealGoodsUnitData.BLGroupCode;                   // 037.BLグループコード     …商品情報(GoodsUnitData)
                salesDetail.BLGroupName = scmGoodsUnitData.RealGoodsUnitData.BLGroupName;                   // 038.BLグループコード名称 …商品情報(GoodsUnitData)
                salesDetail.BLGoodsCode = scmGoodsUnitData.RealGoodsUnitData.BLGoodsCode;                   // 039.BL商品コード         …商品情報(GoodsUnitData)
                salesDetail.BLGoodsFullName = scmGoodsUnitData.RealGoodsUnitData.BLGoodsFullName;           // 040.BL商品コード名称(全角)…商品情報(GoodsUnitData)
                salesDetail.EnterpriseGanreCode = scmGoodsUnitData.RealGoodsUnitData.EnterpriseGanreCode;   // 041.自社分類コード       …商品情報(GoodsUnitData)
                salesDetail.EnterpriseGanreName = scmGoodsUnitData.RealGoodsUnitData.EnterpriseGanreName;   // 042.自社分類名称         …商品情報(GoodsUnitData)

                // --- UPD m.suzuki 2011/05/23 ---------->>>>>
                //salesDetail.WarehouseCode = scmGoodsUnitData.GetWarehouseCode();// 043.倉庫コード   …商品情報(GoodsUnitData)
                //salesDetail.WarehouseName = scmGoodsUnitData.GetWarehouseName();// 044.倉庫名称     …商品情報(GoodsUnitData)
                //salesDetail.WarehouseShelfNo = scmGoodsUnitData.GetShelfNo();   // 045.倉庫棚番     …商品情報(GoodsUnitData)
                //
                //salesDetail.SalesOrderDivCd = scmGoodsUnitData.RealGoodsUnitData.StockList.Count > 0 ? 1 : 0;   // 046.売上在庫取寄せ区分…商品情報(GoodsUnitData)

                if ( !(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData) )
                {
                    // 見積計上でない場合 ⇒ 既存処理と同様
                    salesDetail.WarehouseCode = scmGoodsUnitData.GetWarehouseCode();// 043.倉庫コード   …商品情報(GoodsUnitData)
                    salesDetail.WarehouseName = scmGoodsUnitData.GetWarehouseName();// 044.倉庫名称     …商品情報(GoodsUnitData)
                    salesDetail.WarehouseShelfNo = scmGoodsUnitData.GetShelfNo();   // 045.倉庫棚番     …商品情報(GoodsUnitData)
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- >>>>>>
                    UserSCMOrderAnswerRecord tempUserAnswerRecord = answerRecord as UserSCMOrderAnswerRecord;
                    if (null != tempUserAnswerRecord)
                    {
                        if (!string.IsNullOrEmpty(tempUserAnswerRecord.PmMainMngWarehouseCd) && !string.IsNullOrEmpty(tempUserAnswerRecord.PmMainMngWarehouseCd.Trim()))
                        {
                            // PCCUOEの場合、委託倉庫の代わり、主管倉庫より出庫を行う
                            salesDetail.WarehouseCode = tempUserAnswerRecord.PmMainMngWarehouseCd;// 043.倉庫コード   …商品情報(GoodsUnitData)
                            salesDetail.WarehouseName = tempUserAnswerRecord.PmMainMngWarehouseName;// 044.倉庫名称     …商品情報(GoodsUnitData)
                            salesDetail.WarehouseShelfNo = tempUserAnswerRecord.PmMainMngShelfNo;   // 045.倉庫棚番     …商品情報(GoodsUnitData)
                        }
                    }
                    // ------------ ADD 2013/02/27 qijh #34752 ---------- <<<<<<
                    // ----- 2011/08/10 ----- >>>>>
                    if (scmGoodsUnitData.RealGoodsUnitData.StockList != null)
                    {
                        // ----- 2011/08/10 ----- <<<<<
                        salesDetail.SalesOrderDivCd = scmGoodsUnitData.RealGoodsUnitData.StockList.Count > 0 ? 1 : 0;   // 046.売上在庫取寄せ区分…商品情報(GoodsUnitData)
                        // ----- 2011/08/10 ----- >>>>>
                    }
                    else
                    {
                        salesDetail.SalesOrderDivCd = 0;   // 046.売上在庫取寄せ区分…商品情報(GoodsUnitData)
                    }
                    // ----- 2011/08/10 ----- <<<<<
                }
                else
                {
                    // 見積計上の場合 ⇒ 在庫情報を再取得していないので、セット方法を変える
                    salesDetail.WarehouseCode = answerRecord.PmWarehouseCd;     // 043.倉庫コード   …計上元の受注データ(回答)
                    salesDetail.WarehouseName = answerRecord.PmWarehouseName;   // 044.倉庫名称     …計上元の受注データ(回答)
                    salesDetail.WarehouseShelfNo = answerRecord.PmShelfNo;      // 045.倉庫棚番     …計上元の受注データ(回答)
                    salesDetail.SalesOrderDivCd = (!string.IsNullOrEmpty( answerRecord.PmWarehouseCd )) ? 1 : 0;   // 046.売上在庫取寄せ区分…計上元の受注データ(回答)
                }
                // --- UPD m.suzuki 2011/05/23 ----------<<<<<

                // FIXME:047.オープン価格区分…商品情報(GoodsUnitData)

                salesDetail.GoodsRateRank = scmGoodsUnitData.RealGoodsUnitData.GoodsRateRank;       // 048.商品掛率ランク           …商品情報(GoodsUnitData)
                // --- DELETE 2011/09/19 ---------->>>>>
                //salesDetail.CustRateGrpCode = GetCustRateGrpCode(headerRecord, scmGoodsUnitData);   // 049.得意先掛率グループコード …得意先掛率グループマスタ
                // --- DELETE 2011/09/19 ----------<<<<<
                // --- ADD 2011/09/19 ---------->>>>>
                salesDetail.CustRateGrpCode = GetCustRateGroupCode(scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd);   // 049.得意先掛率グループコード …得意先掛率グループマスタ
                // --- ADD 2011/09/19 ----------<<<<<
                UnitPriceCalcRet listPriceResult = CalculatorAgent.GetListPriceResult(scmGoodsUnitData.UnitPriceCalcRetList);
                if (listPriceResult != null)
                {
                    salesDetail.ListPriceRate = listPriceResult.RateVal;                // 050.定価率               …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.RateSectPriceUnPrc = listPriceResult.SectionCode;       // 051.掛率設定拠点(定価)   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.RateDivLPrice = listPriceResult.RateSettingDivide;      // 052.掛率設定区分(定価)   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.UnPrcCalcCdLPrice = listPriceResult.UnitPrcCalcDiv;     // 053.単価算出区分(定価)   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.PriceCdLPrice = listPriceResult.PriceDiv;               // 054.価格区分(定価)       …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.StdUnPrcLPrice = listPriceResult.StdUnitPrice;          // 055.基準単価(定価)       …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.FracProcUnitLPrice = listPriceResult.UnPrcFracProcUnit; // 056.端数処理単位(定価)   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.FracProcLPrice = listPriceResult.UnPrcFracProcDiv;      // 057.端数処理(定価)       …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.ListPriceTaxIncFl = listPriceResult.UnitPriceTaxIncFl;  // 058.定価(税込,浮動)      …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.ListPriceTaxExcFl = listPriceResult.UnitPriceTaxExcFl;  // 059.定価(税抜,浮動)      …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.ListPriceChngCd = 0;                                    // 060.定価変更区分         …0:変更なし
                }
                // --- DEL 2015/02/24 T.Miyamoto ------------------------------>>>>>
                //// ADD 2015/01/19 リコメンド対応 -------------------------------------->>>>>
                //// リコメンド時は定価(税抜,浮動)は問合せ時データを設定する
                //if (!(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData) && answerRecord.BgnGoodsDiv == (short)BgnGoodsDiv.BargainItem)
                //{
                //    salesDetail.ListPriceTaxExcFl = answerRecord.ListPrice;     // 059.定価(税抜,浮動)
                //}
                //// ADD 2015/01/19 リコメンド対応 --------------------------------------<<<<<
                // --- DEL 2015/02/24 T.Miyamoto ------------------------------<<<<<

                UnitPriceCalcRet sellingPriceResult = CalculatorAgent.GetSellingPriceResult(scmGoodsUnitData.UnitPriceCalcRetList);
                if (sellingPriceResult != null)
                {
                    salesDetail.SalesRate = sellingPriceResult.RateVal;                         // 061.売価率               …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.RateSectSalUnPrc = sellingPriceResult.SectionCode;              // 062.掛率設定拠点(売価)   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.RateDivSalUnPrc = sellingPriceResult.RateSettingDivide;         // 063.掛率設定区分(売価)   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.UnPrcCalcCdSalUnPrc = sellingPriceResult.UnitPrcCalcDiv;        // 064.単価算出区分(売価)   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.PriceCdSalUnPrc = sellingPriceResult.PriceDiv;                  // 065.価格区分(売価)       …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.StdUnPrcSalUnPrc = sellingPriceResult.StdUnitPrice;             // 066.基準単価(売価)       …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.FracProcUnitSalUnPrc = sellingPriceResult.UnPrcFracProcUnit;    // 067.端数処理単位(売価)   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.FracProcSalUnPrc = sellingPriceResult.UnPrcFracProcDiv;         // 068.端数処理(売価)       …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.SalesUnPrcTaxIncFl = sellingPriceResult.UnitPriceTaxIncFl;      // 069.売価(税込,浮動)      …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.SalesUnPrcTaxExcFl = sellingPriceResult.UnitPriceTaxExcFl;      // 070.売価(税抜,浮動)      …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.SalesUnPrcChngCd = 0;                                           // 071.売価変更区分         …0:変更なし
                }
                else
                {
                    // 売価未設定区分が「1:定価表示」の場合、定価を使用
                    if (SalesTtlStDB.UsesListPriceIfSalesPriceIsNone(answerRecord.InqOtherEpCd, answerRecord.InqOtherSecCd))
                    {
                        salesDetail.SalesUnPrcTaxIncFl = salesDetail.ListPriceTaxIncFl; // 069.売価(税込,浮動)
                        salesDetail.SalesUnPrcTaxExcFl = salesDetail.ListPriceTaxExcFl; // 070.売価(税抜,浮動)
                    }
                }

                // ADD 2015/01/19 リコメンド対応 -------------------------------------->>>>>
                // リコメンド時は売価(税抜,浮動) は問合せ時データを設定する
                if (!(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData) && answerRecord.BgnGoodsDiv == (short)BgnGoodsDiv.BargainItem)
                {
                    salesDetail.SalesUnPrcTaxExcFl = answerRecord.UnitPrice;     // 070.売価(税抜,浮動) 
                }
                // ADD 2015/01/19 リコメンド対応 --------------------------------------<<<<<

                // --- ADD 三戸 2012/06/18 №10289 ---------->>>>>
                if (scmGoodsUnitData.RealGoodsUnitData.SelectedListPrice > 0)
                {
                    // DEL 2012/11/08 2012/11/14配信 システムテスト障害対応：湯上 ------------------>>>>>
                    //if (scmGoodsUnitData.RealGoodsUnitData.TaxationDivCd == (int)CalculateTax.TaxationCode.TaxInc)
                    //{
                    //    salesDetail.ListPriceTaxIncFl = scmGoodsUnitData.RealGoodsUnitData.SelectedListPrice;
                    //    salesDetail.SalesUnPrcTaxIncFl = scmGoodsUnitData.RealGoodsUnitData.SelectedListPrice;
                    //}
                    //else
                    //{
                    //    salesDetail.ListPriceTaxExcFl = scmGoodsUnitData.RealGoodsUnitData.SelectedListPrice;
                    //    salesDetail.SalesUnPrcTaxExcFl = scmGoodsUnitData.RealGoodsUnitData.SelectedListPrice;
                    //}
                    // DEL 2012/11/08 2012/11/14配信 システムテスト障害対応：湯上 ------------------<<<<<
                    salesDetail.ListPriceChngCd = 1;
                    salesDetail.SalesUnPrcChngCd = 1;
                }
                // --- ADD 三戸 2012/06/18 №10289 ----------<<<<<

                UnitPriceCalcRet costPriceResult = CalculatorAgent.GetCostPriceResult(scmGoodsUnitData.UnitPriceCalcRetList);
                if (costPriceResult != null)
                {
                    salesDetail.CostRate = costPriceResult.RateVal;                     // 072.原価率                   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.RateSectCstUnPrc = costPriceResult.SectionCode;         // 073.掛率設定拠点(原価単価)   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.RateDivUnCst = costPriceResult.RateSettingDivide;       // 074.掛率設定区分(原価単価)   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.UnPrcCalcCdUnCst = costPriceResult.UnitPrcCalcDiv;      // 075.単価算出区分(原価単価)   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.PriceCdUnCst = costPriceResult.PriceDiv;                // 076.価格区分(原価単価)       …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.StdUnPrcUnCst = costPriceResult.StdUnitPrice;           // 077.基準単価(原価単価)       …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.FracProcUnitUnCst = costPriceResult.UnPrcFracProcUnit;  // 078.端数処理単位(原価単価)   …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.FracProcUnCst = costPriceResult.UnPrcFracProcDiv;       // 079.端数処理(原価単価)       …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.SalesUnitCost = costPriceResult.UnitPriceTaxExcFl;      // 080.原価単価                 …単価算出戻りパラメータ(UnitPriceCalcRet)
                    salesDetail.SalesUnitCostChngDiv = 0;                               // 081.原価単価変更区分         …0:変更なし
                }

                salesDetail.RateBLGoodsCode = scmGoodsUnitData.RealGoodsUnitData.BLGoodsCode;           // 082.BL商品コード(掛率)…商品情報(GoodsUnitData)
                // 2010/07/07 >>>
                //salesDetail.RateBLGoodsName = scmGoodsUnitData.RealGoodsUnitData.BLGoodsName;           // 083.BL商品コード名称(掛率)…商品情報(GoodsUnitData)
                salesDetail.RateBLGoodsName = scmGoodsUnitData.RealGoodsUnitData.BLGoodsFullName;           // 083.BL商品コード名称(掛率)…商品情報(GoodsUnitData)
                // 2010/07/07 <<<
                salesDetail.RateGoodsRateGrpCd = scmGoodsUnitData.RealGoodsUnitData.GoodsRateGrpCode;   // 084.商品掛率グループコード(掛率)…商品情報(GoodsUnitData)
                salesDetail.RateGoodsRateGrpNm = scmGoodsUnitData.RealGoodsUnitData.GoodsRateGrpName;   // 085.商品掛率グループ名称(掛率)…商品情報(GoodsUnitData)
                salesDetail.RateBLGroupCode = scmGoodsUnitData.RealGoodsUnitData.BLGroupCode;           // 086.BLグループコード(掛率)
                salesDetail.RateBLGroupName = scmGoodsUnitData.RealGoodsUnitData.BLGroupName;           // 087.BLグループ名称(掛率)
                
                //salesDetail.PrtBLGoodsCode = scmGoodsUnitData.RealGoodsUnitData.BLGoodsCode;            // 088.BL商品コード(印刷)
                //salesDetail.PrtBLGoodsCode = answerRecord.BLGoodsCode;                                  // 088.BL商品コード(印刷)//DEL 2013/02/18 zhubj 管理№108
                // ----ADD 2013/02/18 zhubj 管理№108---- >>>>>
                // 手動回答場合
                if (_runMode == 0)
                {
                    // 品番検索場合
                    if (salesDetail.GoodsSearchDivCd == 1)
                    {
                        salesDetail.PrtBLGoodsCode = scmGoodsUnitData.RealGoodsUnitData.BLGoodsCode;// 088.BL商品コード(印刷)
                    }
                    else
                    {
                        // 売上全体設定を取得する
                        SalesTtlSt salesTtlSt = SalesTtlStDB.Find(headerRecord.InqOtherEpCd, headerRecord.InqOtherSecCd);
                        if (salesTtlSt != null)
                        {
                            // 印刷用BL商品コード区分は「 0:部品」場合、と売上伝票入力画面表示のＢＬコード同じ設定
                            if (salesTtlSt.PrtBLGoodsCodeDiv == 0)
                            {
                                salesDetail.PrtBLGoodsCode = scmGoodsUnitData.RealGoodsUnitData.BLGoodsCode;// 088.BL商品コード(印刷)
                            }
                            // 印刷用BL商品コード区分は「1:検索」場合、SFから問合せのあった、検索に用いたBLコードを表示
                            else
                            {
                                salesDetail.PrtBLGoodsCode = answerRecord.BLGoodsCode;// 088.BL商品コード(印刷)
                            }
                        }
                    }
                }
                // 自動回答
                else
                {
                    salesDetail.PrtBLGoodsCode = answerRecord.BLGoodsCode;// 088.BL商品コード(印刷)
                }
                // ----ADD 2013/02/18 zhubj 管理№108---- <<<<<
                // 2010/07/07 >>>
                //salesDetail.PrtBLGoodsName = scmGoodsUnitData.RealGoodsUnitData.BLGoodsName;            // 089.BL商品コード名称(印刷)
                salesDetail.PrtBLGoodsName = scmGoodsUnitData.RealGoodsUnitData.BLGoodsFullName;            // 089.BL商品コード名称(印刷)
                // 2010/07/07 <<<

                salesDetail.SalesCode = scmGoodsUnitData.RealGoodsUnitData.SalesCode;                   // 090.販売区分コード
                salesDetail.SalesCdNm = scmGoodsUnitData.RealGoodsUnitData.SalesCodeName;               // 091.販売区分名称

                //2012/05/07 T.Nishi DEL >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                ////>>>2012/04/20
                //salesDetail.AutoAnswerDivSCM = 2;
                //if (salesDetail.SalesCode == 0)
                //{
                //    if ((this._scmTtlSt != null) && (this._scmTtlSt.SalesCdStAutoAns == 1))
                //    {
                //        if ((this._salesCodeDic != null) && (this._salesCodeDic.Count != 0))
                //        {
                //            // 販売区分設定
                //            salesDetail.SalesCode = this._scmTtlSt.SalesCode;                               // 090.販売区分コード
                //            salesDetail.SalesCdNm = this._salesCodeDic[this._scmTtlSt.SalesCode];           // 091.販売区分名称
                //        }
                //    }
                //}
                //
                //if ((salesDetail.SalesCode != 0) && (string.IsNullOrEmpty(salesDetail.SalesCdNm)))
                //{
                //    if ((this._salesCodeDic != null) && (this._salesCodeDic.Count != 0))
                //    {
                //        salesDetail.SalesCdNm = this._salesCodeDic[salesDetail.SalesCode];           // 091.販売区分名称
                //    }
                //}
                ////<<<2012/04/20
                //2012/05/07 T.Nishi DEL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                // 092.作業工数
                salesDetail.ShipmentCnt = scmGoodsUnitData.SourceDetailRecord.SalesOrderCount;          // 093.出荷数       …SCM受注明細データ(問合せ・発注)の発注数
                salesDetail.AcceptAnOrderCnt = scmGoodsUnitData.SourceDetailRecord.SalesOrderCount;     // 094.受注数量     …SCM受注明細データ(問合せ・発注)の発注数
                salesDetail.AcptAnOdrAdjustCnt = 0;                                                     // 095.受注調整数   …0
                salesDetail.AcptAnOdrRemainCnt = scmGoodsUnitData.SourceDetailRecord.SalesOrderCount;   // 096.受注残数     …SCM受注明細データ(問合せ・発注)の発注数

                // 097.残数更新日…リモート取得

                // --- ADD 2013/08/08 Y.Wakita ---------->>>>>
                // 課税区分設定
                int taxationDivCd = 0;
                if (customerInfo != null)
                {
                    if (customerInfo.ConsTaxLayMethod == (int)ConsTaxLayMethod.TaxExempt)
                    {
                        taxationDivCd = (int)CalculateTax.TaxationCode.TaxNone; // 非課税
                    }
                    else if (customerInfo.TotalAmountDispWayCd == (int)SalesSlipInputAcs.TotalAmountDispWayCd.NoTotalAmount)
                    {
                        taxationDivCd = (int)CalculateTax.TaxationCode.TaxExc; // 外税
                    }
                    else
                    {
                        taxationDivCd = (int)CalculateTax.TaxationCode.TaxInc; // 内税
                    }
                }

                // 得意先マスタが非課税ではない場合
                if (taxationDivCd != (int)CalculateTax.TaxationCode.TaxNone)
                    taxationDivCd = scmGoodsUnitData.RealGoodsUnitData.TaxationDivCd;
                // --- ADD 2013/08/08 Y.Wakita ----------<<<<<

                // --- DEL 2013/08/07 Y.Wakita ---------->>>>>
                //salesDetail.SalesMoneyTaxInc = (long)(salesDetail.SalesUnPrcTaxIncFl * salesDetail.ShipmentCnt);    // FIXME:098.売上金額(税込み)   …算出
                //salesDetail.SalesMoneyTaxExc = (long)(salesDetail.SalesUnPrcTaxExcFl * salesDetail.ShipmentCnt);    // FIXME:099.売上金額(税抜き)   …算出
                // --- DEL 2013/08/07 Y.Wakita ----------<<<<<
                // --- ADD 2013/08/07 Y.Wakita ---------->>>>>
                // UPD 2014/05/08 PM-SCM速度改良 フェーズ２№06.得意先マスタ取得改良対応（金額計算クラス） --------------------------------->>>>>
                //SCMPriceCalculator priceCalculator = new SCMPriceCalculator();
                //// UPD 2014/01/30 Redmine#41771-障害№13対応 ------------------------------------------------------>>>>>
                ////priceCalculator.SetCurrentSCMOrderData(headerRecord.CustomerCode, salesDetail);
                //priceCalculator.SetCurrentSCMOrderData(headerRecord.CustomerCode, salesDetail, headerRecord.CancelDiv, headerRecord.InquiryDate);
                //// UPD 2014/01/30 Redmine#41771-障害№13対応 ------------------------------------------------------<<<<<

                if (this._priceCalculatorCacheFlag)
                {
                    PriceCalculator.SetCurrentSCMOrderData(headerRecord.CustomerCode, salesDetail, headerRecord.CancelDiv, headerRecord.InquiryDate);
                    this._priceCalculatorCacheFlag = false;
                }
                // UPD 2014/05/08 PM-SCM速度改良 フェーズ２№06.得意先マスタ取得改良対応（金額計算クラス） ---------------------------------<<<<<
                double salesMoneyTaxInc = 0;
                double salesMoneyTaxExc = 0;

                // --- UPD 2013/08/08 Y.Wakita ---------->>>>>
                //priceCalculator.CalcPrice(salesDetail.TaxationDivCd,
                //                          (salesDetail.SalesUnPrcTaxExcFl * salesDetail.ShipmentCnt),
                //                          out salesMoneyTaxExc,
                //                          out salesMoneyTaxInc);
                // UPD 2014/05/08 PM-SCM速度改良 フェーズ２№07.得意先マスタ取得改良対応（金額計算クラス・キャンペーン対応） --------------------------------->>>>>
                //priceCalculator.CalcPrice(taxationDivCd,
                //                          (salesDetail.SalesUnPrcTaxExcFl * salesDetail.ShipmentCnt),
                //                          out salesMoneyTaxExc,
                //                          out salesMoneyTaxInc);
                this._priceCalculator.CalcPrice(taxationDivCd,
                                          (salesDetail.SalesUnPrcTaxExcFl * salesDetail.ShipmentCnt),
                                          out salesMoneyTaxExc,
                                          out salesMoneyTaxInc);
                // UPD 2014/05/08 PM-SCM速度改良 フェーズ２№07.得意先マスタ取得改良対応（金額計算クラス・キャンペーン対応） ---------------------------------<<<<<
                // --- UPD 2013/08/08 Y.Wakita ----------<<<<<

                salesDetail.SalesMoneyTaxInc = (long)salesMoneyTaxInc;    // FIXME:098.売上金額(税込み)   …算出
                salesDetail.SalesMoneyTaxExc = (long)salesMoneyTaxExc;    // FIXME:099.売上金額(税抜き)   …算出
                // --- ADD 2013/08/07 Y.Wakita ----------<<<<<
                salesDetail.Cost = (long)(salesDetail.SalesUnitCost * salesDetail.ShipmentCnt);                     // FIXME:100.原価               …算出

                // 101.粗利チェック区分

                salesDetail.SalesGoodsCd = 0;   // 102.売上商品区分…0:商品
                salesDetail.SalesPriceConsTax = salesDetail.SalesMoneyTaxInc - salesDetail.SalesMoneyTaxExc;    // 103.売上金額消費税額…算出

                salesDetail.TaxationDivCd = scmGoodsUnitData.RealGoodsUnitData.TaxationDivCd;   // 104.課税区分…商品情報(GoodsUnitData)
                // --- DEL 2013/08/08 Y.Wakita ---------->>>>>
                //// --- ADD 2013/08/07 Y.Wakita ---------->>>>>
                //if (customerInfo != null)
                //{
                //    if (customerInfo.ConsTaxLayMethod == (int)ConsTaxLayMethod.TaxExempt)
                //    {
                //        salesDetail.TaxationDivCd = (int)CalculateTax.TaxationCode.TaxNone; // 非課税
                //    }
                //    else if (customerInfo.TotalAmountDispWayCd == (int)SalesSlipInputAcs.TotalAmountDispWayCd.NoTotalAmount)
                //    {
                //        salesDetail.TaxationDivCd = (int)CalculateTax.TaxationCode.TaxExc; // 外税
                //    }
                //    else
                //    {
                //        salesDetail.TaxationDivCd = (int)CalculateTax.TaxationCode.TaxInc; // 内税
                //    }
                //}
                //// --- ADD 2013/08/07 Y.Wakita ----------<<<<<
                // --- DEL 2013/08/08 Y.Wakita ----------<<<<<
                // 105.相手先伝票番号(明細)
                // --- UPD m.suzuki 2011/05/23 ---------->>>>>
                //// 106.明細備考
                salesDetail.DtlNote = answerRecord.CommentDtl; // 106.明細備考 ← 備考(明細)
                // --- UPD m.suzuki 2011/05/23 ----------<<<<<
                salesDetail.SupplierCd = scmGoodsUnitData.RealGoodsUnitData.SupplierCd;         // 107.仕入先コード …商品情報(GoodsUnitData)
                salesDetail.SupplierSnm = scmGoodsUnitData.RealGoodsUnitData.SupplierSnm;       // 108.仕入先名称   …商品情報(GoodsUnitData)
                // 109.発注番号
                // 110.注文方法
                // 111.伝票メモ1
                // 112.伝票メモ2
                // 113.伝票メモ3
                // 114.社内メモ1
                // 115.社内メモ2
                // 116.社内メモ3

                // UPD 2015/01/19 リコメンド対応 ----------------------------------------------->>>>>
                #region 削除
                //// UPD 2012/11/08 2012/11/14配信 システムテスト障害対応：湯上 ------------------>>>>>
                ////if (listPriceResult != null)
                ////{
                ////    salesDetail.BfListPrice = listPriceResult.UnitPriceTaxExcFl;            // FIXME:117.変更前定価…単価算出戻りパラメータ(UnitPriceCalcRet)
                ////}
                ////if (sellingPriceResult != null)
                ////{
                ////    salesDetail.BfSalesUnitPrice = sellingPriceResult.UnitPriceTaxExcFl;    // FIXME:118.変更前売価…単価算出戻りパラメータ(UnitPriceCalcRet)
                ////}
                ////// ADD 2011/07/15 --- >>>
                ////else
                ////{
                ////    // --- UPD 三戸 2012/06/18 №10289 ---------->>>>>
                ////    //salesDetail.BfSalesUnitPrice = salesDetail.ListPriceTaxExcFl;
                ////    if (salesDetail.BfListPrice == salesDetail.ListPriceTaxExcFl)
                ////    {
                ////        salesDetail.BfSalesUnitPrice = salesDetail.BfListPrice;
                ////    }
                ////    else
                ////    {
                ////        salesDetail.BfSalesUnitPrice = 0;
                ////    }
                ////    // --- UPD 三戸 2012/06/18 №10289 ----------<<<<<
                ////}
                //// ADD 2011/07/15 --- <<<
                //if (beforeScmGoodsUnitData != null)
                //{
                //    GoodsPrice beforeListPrice = null;
                //    // 適用日付に該当する定価を取得
                //    CalculatorAgent.GetPrice(DateTime.Today, beforeScmGoodsUnitData, out beforeListPrice);
                //    if (beforeListPrice != null)
                //    {
                //        salesDetail.BfListPrice = beforeListPrice.ListPrice;      // FIXME:117.変更前定価…変更前SCM情報付商品連結データより設定
                //    }
                //    // 売価を取得
                //    UnitPriceCalcRet beforeUnitPrice = CalculatorAgent.GetSellingPriceResult(beforeScmGoodsUnitData.UnitPriceCalcRetList);
                //    if (beforeUnitPrice != null)
                //    {
                //        salesDetail.BfSalesUnitPrice = beforeUnitPrice.UnitPriceTaxExcFl;    // FIXME:118.変更前売価…変更前SCM情報付商品連結データより設定
                //    }
                //    // ADD 2011/07/15 --- >>>
                //    else
                //    {
                //        // --- UPD 三戸 2012/06/18 №10289 ---------->>>>>
                //        //salesDetail.BfSalesUnitPrice = salesDetail.ListPriceTaxExcFl;
                //        if (salesDetail.BfListPrice == salesDetail.ListPriceTaxExcFl)
                //        {
                //            salesDetail.BfSalesUnitPrice = salesDetail.BfListPrice;
                //        }
                //        else
                //        {
                //            salesDetail.BfSalesUnitPrice = 0;
                //        }
                //        // --- UPD 三戸 2012/06/18 №10289 ----------<<<<<
                //    }
                //    // ADD 2011/07/15 --- <<<
                //}
                //// UPD 2012/11/08 2012/11/14配信 システムテスト障害対応：湯上 ------------------>>>>>
                #endregion
                // リコメンド時は変更前定価、変更前売価は問合せ時データを設定する
                if (!(scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData) && answerRecord.BgnGoodsDiv == (short)BgnGoodsDiv.BargainItem)
                {
                    salesDetail.BfListPrice = answerRecord.ListPrice;       // FIXME:117.変更前定価…SCM受注明細データ（問合せ・発注）より設定
                    salesDetail.BfSalesUnitPrice = answerRecord.UnitPrice;  // FIXME:118.変更前売価…SCM受注明細データ（問合せ・発注）より設定
                }
                // それ以外は変更前SCM情報付商品連結データより設定
                else
                {
                    if (beforeScmGoodsUnitData != null)
                    {
                        GoodsPrice beforeListPrice = null;
                        // 適用日付に該当する定価を取得
                        CalculatorAgent.GetPrice(DateTime.Today, beforeScmGoodsUnitData, out beforeListPrice);
                        if (beforeListPrice != null)
                        {
                            salesDetail.BfListPrice = beforeListPrice.ListPrice;      // FIXME:117.変更前定価…変更前SCM情報付商品連結データより設定
                        }
                        // 売価を取得
                        UnitPriceCalcRet beforeUnitPrice = CalculatorAgent.GetSellingPriceResult(beforeScmGoodsUnitData.UnitPriceCalcRetList);
                        if (beforeUnitPrice != null)
                        {
                            salesDetail.BfSalesUnitPrice = beforeUnitPrice.UnitPriceTaxExcFl;    // FIXME:118.変更前売価…変更前SCM情報付商品連結データより設定
                        }
                        else
                        {
                            if (salesDetail.BfListPrice == salesDetail.ListPriceTaxExcFl)
                            {
                                salesDetail.BfSalesUnitPrice = salesDetail.BfListPrice;
                            }
                            else
                            {
                                salesDetail.BfSalesUnitPrice = 0;
                            }
                        }
                    }
                }
                // UPD 2015/01/19 リコメンド対応 -----------------------------------------------<<<<<

                if (costPriceResult != null)
                {
                    salesDetail.BfUnitCost = costPriceResult.UnitPriceTaxExcFl;             // FIXME:119.変更前原価…単価算出戻りパラメータ(UnitPriceCalcRet)
                }

                salesDetail.CmpltSalesRowNo = 0;    // 120.一式明細番号…0:一式なし
                // 121.メーカーコード(一式)
                // 122.メーカー名称(一式)
                // 123.メーカーカナ名称(一式)
                // 124.商品名称(一式)
                // 125.数量(一式)
                // 126.売上単価(一式)
                // 127.売上金額(一式)
                // 128.原価単価(一式)
                // 129.原価金額(一式)
                // 130.相手先伝票番号(一式)
                // 131.一式備考
                // --- ADD 2014/01/16 T.Miyamoto ------------------------------>>>>>
                // 優良品の場合
                if (!IsPureAtOfferKubun(scmGoodsUnitData.RealGoodsUnitData))
                {
                    string detailKey = enmDetailRecord.ToKey();
                    // 手動回答場合
                    if (_runMode == 0)
                    {
                        if ((Referee.Searcher.ResultMap[detailKey].PartsInfoDB != null) && (Referee.Searcher.ResultMap[detailKey].PartsInfoDB.UsrGoodsInfo != null))
                        {
                            PartsInfoDataSet.UsrGoodsInfoDataTable usrGoodsInfoDataTable = (PartsInfoDataSet.UsrGoodsInfoDataTable)Referee.Searcher.ResultMap[detailKey].PartsInfoDB.UsrGoodsInfo.Copy();

                            // 選択した優良品の結合元(純正)部品をGoodsInfoから検索
                            PartsInfoDataSet.UsrGoodsInfoRow retGoodsInfoRow = null;
                            retGoodsInfoRow = usrGoodsInfoDataTable.FindByGoodsMakerCdGoodsNo(scmGoodsUnitData.RealGoodsUnitData.JoinSourceMakerCode
                                                                                            , scmGoodsUnitData.RealGoodsUnitData.JoinSrcPartsNoWithH);
                            if (retGoodsInfoRow != null)
                            {
                                if (retGoodsInfoRow.NewGoodsNo.Trim() != string.Empty)
                                {
                                    // 結合元が代替されている場合は新品番でGoodsInfoを再検索
                                    retGoodsInfoRow = usrGoodsInfoDataTable.FindByGoodsMakerCdGoodsNo(retGoodsInfoRow.GoodsMakerCd, retGoodsInfoRow.NewGoodsNo);
                                }
                                if (retGoodsInfoRow != null)
                                {
                                    salesDetail.CmpltSalesRowNo = retGoodsInfoRow.BlGoodsCode;    // 純正-BL商品コード
                                    salesDetail.CmpltGoodsMakerCd = retGoodsInfoRow.GoodsMakerCd; // 純正-メーカー
                                    salesDetail.CmpltGoodsName = retGoodsInfoRow.GoodsNo;         // 純正-商品番号
                                    salesDetail.CmpltSalesUnPrcFl = retGoodsInfoRow.PriceTaxExc;  // 純正-定価
                                }
                            }
                        }
                    }
                    else
                    {
                        IList<SCMGoodsUnitData> scmGoodsUnitDataList = Referee.SCMGoodsUnitDataMap[detailKey];
                        if (scmGoodsUnitDataList != null && scmGoodsUnitDataList.Count != 0)
                        {
                            foreach (SCMGoodsUnitData PureGoodsUnitData in scmGoodsUnitDataList)
                            {
                                // --- UPD 2014/01/22 T.Miyamoto ------------------------------>>>>>
                                //if ((PureGoodsUnitData.RealGoodsUnitData.GoodsMakerCd == scmGoodsUnitData.PureGoodsMakerCd) &&
                                //    (PureGoodsUnitData.RealGoodsUnitData.GoodsNo == scmGoodsUnitData.AnsPureGoodsNo))
                                if ((PureGoodsUnitData.RealGoodsUnitData.GoodsMakerCd == scmGoodsUnitData.PureGoodsMakerCd) &&
                                    (PureGoodsUnitData.RealGoodsUnitData.GoodsNo == scmGoodsUnitData.AnsPureGoodsNo) &&
                                    (IsPureAtOfferKubun(PureGoodsUnitData.RealGoodsUnitData)))
                                // --- UPD 2014/01/22 T.Miyamoto ------------------------------<<<<<
                                {
                                    salesDetail.CmpltSalesRowNo = PureGoodsUnitData.RealGoodsUnitData.BLGoodsCode;    // 純正-BL商品コード
                                    salesDetail.CmpltGoodsMakerCd = PureGoodsUnitData.RealGoodsUnitData.GoodsMakerCd; // 純正-メーカー
                                    salesDetail.CmpltGoodsName = PureGoodsUnitData.RealGoodsUnitData.GoodsNo;         // 純正-商品番号
                                    salesDetail.CmpltSalesUnPrcFl = PureGoodsUnitData.GetListPrice();                 // 純正-定価
                                    break;
                                }
                            }
                        }
                    }
                }
                // --- ADD 2014/01/16 T.Miyamoto ------------------------------<<<<<

                // 2010/07/07 >>>
                //salesDetail.PrtGoodsNo = scmGoodsUnitData.RealGoodsUnitData.PrtGoodsNo;     // 132.印刷用品番           …商品情報(GoodsUnitData)
                //salesDetail.PrtMakerCode = scmGoodsUnitData.RealGoodsUnitData.PrtMakerCode; // 133.印刷用メーカーコード …商品情報(GoodsUnitData)
                //salesDetail.PrtMakerName = scmGoodsUnitData.RealGoodsUnitData.PrtMakerName; // 134.印刷用メーカー名称   …商品情報(GoodsUnitData)
                salesDetail.PrtGoodsNo = scmGoodsUnitData.RealGoodsUnitData.GoodsNo;     // 132.印刷用品番           …商品情報(GoodsUnitData)
                salesDetail.PrtMakerCode = scmGoodsUnitData.RealGoodsUnitData.GoodsMakerCd; // 133.印刷用メーカーコード …商品情報(GoodsUnitData)
                salesDetail.PrtMakerName = scmGoodsUnitData.RealGoodsUnitData.MakerName; // 134.印刷用メーカー名称   …商品情報(GoodsUnitData)
                // 2010/07/07 <<<

                // 2010/03/15 Add >>>
                //salesDetail.CampaignCode = answerRecord.CampaignCode;                       // 135.キャンペーンコード　 …SCM受注データ(回答)
                //salesDetail.CampaignName = answerRecord.CampaignName;                       // 136.キャンペーン名称　　 …SCM受注データ(回答)
                salesDetail.GoodsDivCd = answerRecord.GoodsDivCd;                           // 137.商品種別　　　　　　 …SCM受注データ(回答)
                salesDetail.AnswerDelivDate = answerRecord.AnswerDeliveryDate;              // 138.回答納期　　　　　　 …SCM受注データ(回答)
                //salesDetail.RecycleDiv = answerRecord.RecycleDiv;                           // 139.リサイクル区分　　　 …SCM受注データ(回答)
                //salesDetail.RecycleDivNm = answerRecord.RecycleDivNm;                       // 140.リサイクル区分名称　 …SCM受注データ(回答)
                salesDetail.WayToAcptOdr = 1;                                               // 141.受注方法             …1:オンライン(SCM)
                // 2010/03/15 Add <<<

                // 2012/01/16 Add >>>
                salesDetail.GoodsSpecialNote = answerRecord.GoodsSpecialNote;               // 特記事項
                // ADD 2015/02/04 豊沢 PM-SCM社内障害一覧No.72対応 ------------------------------------------>>>>>
                // 売上明細の特記事項は40桁なので40桁以上の場合はカットする
                if (salesDetail.GoodsSpecialNote.Length > 40) salesDetail.GoodsSpecialNote = salesDetail.GoodsSpecialNote.Substring(0, 40);
                // ADD 2015/02/04 豊沢 PM-SCM社内障害一覧No.72対応 ------------------------------------------>>>>>
                // 2012/01/16 Add <<<

                // 明細共通GUID
                salesDetail.DtlRelationGuid = answerRecord.SalesRelationId;
                // 車両共通GUID
                salesDetail.CarRelationGuid = carRecord.SalesRelationId;
                // ----- ADD 2011/08/10 ----- >>>>>
                // 売上明細データ．受発注種別＝受信で取得したSCM受発注明細データ（問合せ・発注）．受発注種別
                salesDetail.AcceptOrOrderKind = headerRecord.AcceptOrOrderKind;
                // 売上明細データ．問合せ番号＝受信で取得したSCM受発注明細データ（問合せ・発注）．問合せ番号
                salesDetail.InquiryNumber = answerRecord.InquiryNumber;
                // 売上明細データ．問合せ行番号＝受信で取得したSCM受発注明細データ（問合せ・発注）．問合せ行番号
                salesDetail.InqRowNumber = answerRecord.InqRowNumber;

                // DEL 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ---------------------------------->>>>>
                #region 削除(SCM改良の為)
                //// PCCUOEの場合
                //if (headerRecord.AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE)
                //{
                //    switch (headerRecord.AcptAnOdrStatus)
                //    {
                //        case (int)AcptAnOdrStatus.Sales:　// 売上
                //            {
                //                // 委託在庫の場合
                //                if (scmGoodsUnitData.GetStockDiv().Equals((int)StockDiv.Trust))
                //                {
                //                    // 自動回答区分(SCM) = 2:自動回答
                //                    salesDetail.AutoAnswerDivSCM = 2;
                //                }
                //                else
                //                {
                //                    // 自動回答区分(SCM) = 1:手動回答
                //                    salesDetail.AutoAnswerDivSCM = 1;
                //                }
                //                break;
                //            }
                //        case (int)AcptAnOdrStatus.Order:　// 受注
                //        case (int)AcptAnOdrStatus.Estimate:　// 見積
                //            {
                //                // 自動回答区分(SCM) = 2:自動回答
                //                salesDetail.AutoAnswerDivSCM = 2;
                //                break;
                //            }
                //        default:
                //            break;
                //    }
                //}
                //// ----- ADD 2011/11/17 ----- <<<<<
                //else if(headerRecord.AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.SCM)
                //{
                #endregion
                // DEL 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ----------------------------------<<<<<
                if (_runMode == 1)
                {
                    // 自動回答区分(SCM) = 2:自動回答
                    salesDetail.AutoAnswerDivSCM = 2;
                }else if(_runMode == 0)
                {
                    // 自動回答区分(SCM) = 1:手動回答
                    salesDetail.AutoAnswerDivSCM = 1;
                }
                // DEL 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ---------------------------------->>>>>
                //}
                // DEL 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ----------------------------------<<<<<
                // ----- ADD 2011/11/17 ----- <<<<<
                // ----- ADD 2011/08/10 ----- <<<<<
            }
            //2012/05/07 T.Nishi ADD >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            if (salesDetail.SalesCode == 0)
            {
                if (salesDetail.AutoAnswerDivSCM == 2)  //自動回答区分(SCM) = 2:自動回答
                {
                    if ((this._scmTtlSt != null) && (this._scmTtlSt.SalesCdStAutoAns == 1))
                    {
                        if ((this._salesCodeDic != null) && (this._salesCodeDic.Count != 0))
                        {
                            // 販売区分設定
                            salesDetail.SalesCode = this._scmTtlSt.SalesCode;                               // 090.販売区分コード
                            salesDetail.SalesCdNm = this._salesCodeDic[this._scmTtlSt.SalesCode];           // 091.販売区分名称
                        }
                    }
                }
            }

            if ((salesDetail.SalesCode != 0) && (string.IsNullOrEmpty(salesDetail.SalesCdNm)))
            {
                if ((this._salesCodeDic != null) && (this._salesCodeDic.Count != 0))
                {
                    salesDetail.SalesCdNm = this._salesCodeDic[salesDetail.SalesCode];           // 091.販売区分名称
                }
            }
            //2012/05/07 T.Nishi ADD <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // ADD 2010/04/05 以前に見積伝票データを作成している発注の場合、作成する回答データおよび売上伝票データは見積伝票データを元に作成する ---------->>>>>
            #region 見積計上用処理

            // FIXME:前回の見積伝票データより売上明細データを再構築
            if (scmGoodsUnitData.RealGoodsUnitData is AnsweredGoodsUnitData)
            {
                #region <Log>

                EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg("売上明細データを見積計上します。"));

                #endregion // </Log>

                ((AnsweredGoodsUnitData)scmGoodsUnitData.RealGoodsUnitData).AddUpSalesDetail(salesDetail);
            }

            #endregion // 見積計上用処理
            // ADD 2010/04/05 以前に見積伝票データを作成している発注の場合、作成する回答データおよび売上伝票データは見積伝票データを元に作成する ----------<<<<<

            // ADD 2011/08/12 --------- >>>>>>>>>> 
            //if (scmGoodsUnitData.CampaignInformation != null)   // DEL 2011/08/15
            if (scmGoodsUnitData.CampaignInformation != null && scmGoodsUnitData.CampaignInformation.CampaignCode != 0)  // ADD 2011/08/15
            {
                salesDetail.RateSectSalUnPrc = string.Empty;
                salesDetail.RateDivSalUnPrc = string.Empty;
                salesDetail.UnPrcCalcCdSalUnPrc = 0;
                salesDetail.PriceCdSalUnPrc = 0;
                salesDetail.FracProcUnitSalUnPrc = 0;
                salesDetail.FracProcSalUnPrc = 0;


                // ADD 2011/08/15 ---- >>>>
                if (scmGoodsUnitData.CampaignInformation.RateVal == 0)
                {
                    salesDetail.SalesRate = 0;
                }
                // ADD 2011/08/15 ---- <<<<
            }
            // ADD 2011/08/12 --------- <<<<<<<<<<
            return salesDetail;
        }
        #endregion // </売上明細データ>

        #region <売上データ>

        /// <summary>
        /// 伝票データの生成者を生成します。
        /// </summary>
        /// <param name="headerRecord">SCM受注データのレコード</param>
        /// <returns>伝票データの生成者</returns>
        protected virtual SCMSlipDataFactory CreateSlipDataFactory(ISCMOrderHeaderRecord headerRecord)
        {
            switch (headerRecord.AcptAnOdrStatus)
            {
                case (int)AcptAnOdrStatus.Sales:
                    return new SCMSalesSlipDataFactory(headerRecord, false);
                case (int)AcptAnOdrStatus.Order:
                    return new SCMOrderSlipDataFactory(headerRecord, false);
                case (int)AcptAnOdrStatus.Estimate:
                    return new SCMEstimateSlipDataFactory(headerRecord, false);
                default:
                    throw new ArgumentException("受注ステータスが不明です。[=" + headerRecord.AcptAnOdrStatus.ToString() + "]");
            }
        }

        /// <summary>
        /// 売上データを生成します。
        /// </summary>
        /// <param name="headerRecord">SCM受注データのレコード</param>
        /// <returns>売上データ</returns>
        protected virtual SalesSlip CreateSalesSlip(ISCMOrderHeaderRecord headerRecord)
        {
            const string METHOD_NAME = "CreateSalesSlip()"; // ログ用

            // ----ADD 2013/02/18 wangqx 管理№267---- >>>>>
            DateTime getServerNowTime;
            SalesSlipInputAcs salesSlipInputAcs = SalesSlipInputAcs.GetInstance();
            getServerNowTime = salesSlipInputAcs.GetServerNowTime;
            // ----ADD 2013/02/18 wangqx 管理№267---- <<<<<

            #region <Log>

            string message = string.Format("売上データを生成中(問合せ番号={0})...", headerRecord.InquiryNumber);
            EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(message));

            #endregion // </Log>

            // 得意先情報
            CustomerInfo customerInfo = GetCustomerInfo(headerRecord);
            if (customerInfo == null)
            {
                #region <Log>

                string msg = string.Format("得意先マスタに存在しません(={0})", headerRecord.CustomerCode);
                EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));

                #endregion // </Log>
            }
            // DEL 2014/02/05 SCM仕掛一覧№10627対応 ----------------------------------->>>>>
            #region 旧ソース
            //// ADD 2013/10/25 201311XX配信予定システムテスト障害№13,14対応 -------------------------------->>>>>
            //// 請求先情報
            //CustomerInfo claim = new CustomerInfo();
            //if (customerInfo != null)
            //{
            //    int status = CustomerDB.RealAccesser.ReadDBData(ConstantManagement.LogicalMode.GetData0, customerInfo.EnterpriseCode, customerInfo.ClaimCode, true, false, out claim);
            //}
            //// ADD 2013/10/25 201311XX配信予定システムテスト障害№13,14対応 --------------------------------<<<<<
            #endregion
            // DEL 2014/02/05 SCM仕掛一覧№10627対応 -----------------------------------<<<<<

            // ADD 2014/02/05 SCM仕掛一覧№10627対応 ----------------------------------->>>>>
            CustomerInfo claim = ClaimInfo(customerInfo.CustomerCode);
            // ADD 2014/02/05 SCM仕掛一覧№10627対応 -----------------------------------<<<<<


            // 売上金額処理区分
            SalesProcMoney salesProcMoney = GetSalesProcMoney(headerRecord);

            // 見積初期値設定
            EstimateDefSet estimateDefSet = GetEstimateDefSet(headerRecord);

            // 伝票データの生成者
            SCMSlipDataFactory dataFactory = CreateSlipDataFactory(headerRecord);

            SalesSlip salesSlip = new SalesSlip();
            {
                // 001.作成日時         …共通ヘッダ リモート取得
                // 002.更新日時         …共通ヘッダ リモート取得
                salesSlip.EnterpriseCode = headerRecord.InqOtherEpCd;   // 003.企業コード…共通ヘッダ リモート取得
                // 004.GUID             …共通ヘッダ リモート取得
                // 005.更新従業員コード …共通ヘッダ リモート取得
                // 006.更新アセンブリID1…共通ヘッダ リモート取得
                // 007.更新アセンブリID2…共通ヘッダ リモート取得
                // 008.論理削除区分     …共通ヘッダ リモート取得

                salesSlip.AcptAnOdrStatus = headerRecord.AcptAnOdrStatus;   // 009.受注ステータス   …30:売上, 20:受注, 10:見積
                salesSlip.SalesSlipNum = DEFAULT_SALES_SLIP_NUM;            // 010.売上伝票番号     …リモート取得
                salesSlip.SectionCode = headerRecord.InqOtherSecCd;         // 011.拠点コード       …ログイン拠点
                salesSlip.SubSectionCode = GetSubSectionCode(headerRecord); // 012.部門コード       …SCM受注データの回答従業員の所属部門
                salesSlip.DebitNoteDiv = 0; // 013.赤伝区分…0:黒伝
                // 014.赤黒連結売上伝票番号
                // 2011/02/18 >>>
                //salesSlip.SalesSlipCd = 0;  // 015.売上伝票区分 …0:売上
                salesSlip.SalesSlipCd = ( headerRecord.CancelDiv == 1 ) ? 1 : 0;  // 015.売上伝票区分 …キャンセル区分によって判断
                // 2011/02/18 <<<
                salesSlip.SalesGoodsCd = 0; // 016.売上商品区分 …0:商品
                salesSlip.AccRecDivCd = 1;  // 017.売掛区分     …1:売掛
                // 018.売上入力拠点コード

                if (customerInfo != null)
                {
                    salesSlip.DemandAddUpSecCd = customerInfo.ClaimSectionCode; // 019.請求計上拠点コード…得意先マスタの請求拠点コード
                }
                // -- DELETE 2011/09/19   ------ >>>>>>
                //salesSlip.ResultsAddUpSecCd = headerRecord.InqOtherSecCd;   // 020.実績計上拠点コード   …ログイン拠点
                // -- DELETE 2011/09/19   ------ <<<<<<
                // -- ADD 2011/09/19   ------ >>>>>>
                // 実績計上拠点コード
                // 売上全体設定を取得する
                SalesTtlSt salesTtlSt = SalesTtlStDB.Find(headerRecord.InqOtherEpCd, headerRecord.InqOtherSecCd);
                if (salesTtlSt != null)
                {
                    // 売上全体設定の拠点表示区分＝標準 or 表示無し場合
                    if (salesTtlSt.SectDspDivCd == 0 || salesTtlSt.SectDspDivCd == 2)
                    {
                        // 得意先マスタの管理拠点コード
                        salesSlip.ResultsAddUpSecCd = customerInfo.MngSectionCode;
                    }
                    // 売上全体設定の拠点表示区分＝自拠点場合
                    else if (salesTtlSt.SectDspDivCd == 1)
                    {
                        // ログイン拠点
                        salesSlip.ResultsAddUpSecCd = headerRecord.InqOtherSecCd;         // 売上入力拠点コード       …ログイン拠点
                    }
                }
                // -- ADD 2011/09/19   ------ <<<<<<
                salesSlip.UpdateSecCd       = headerRecord.InqOtherSecCd;   // 021.更新拠点コード       …ログイン拠点

                salesSlip.SalesSlipUpdateCd = 0;                    // 022.売上伝票更新区分 …0:未更新
                salesSlip.SearchSlipDate = DateTime.Now;            // 023.伝票検索日付     …システム日付
                salesSlip.ShipmentDay = headerRecord.InquiryDate;   // 024.出荷日付         …SCM受注データの問合せ日
                salesSlip.SalesDate = headerRecord.InquiryDate;     // 025.売上日付         …SCM受注データの問合せ日
                salesSlip.AddUpADate = headerRecord.InquiryDate;    // 026.売上日付         …SCM受注データの問合せ日
                // ----ADD 2013/02/18 wangqx 管理№267---- >>>>>
                // 受注場合、売上伝票の出荷日付、売上日付、計上日付はサーバー日付で設定する
                if (headerRecord.InqOrdDivCd == (int)InqOrdDivCdValue.Ordering)
                {
                    salesSlip.ShipmentDay = getServerNowTime;   // 024.出荷日付         …システム日付
                    salesSlip.SalesDate = getServerNowTime;     // 025.売上日付         …システム日付
                    salesSlip.AddUpADate = getServerNowTime;    // 026.計上日付         …システム日付
                }
                // ----ADD 2013/02/18 wangqx 管理№267---- <<<<<
                salesSlip.DelayPaymentDiv = 0;                      // 027.来勘区分         …0:当月(来勘なし)
                // 028.見積書番号
                // 029.見積区分…見積の場合、1:通常見積
                salesSlip.EstimateDivide = headerRecord.InqOrdDivCd.Equals((int)InqOrdDivCdValue.Inquiry) ? 1 : 0;

                if (customerInfo != null)
                {
                    #region <Log>

                    if (customerInfo.CustomerAgentCd == null)
                    {
                        string msg = string.Format("得意先マスタ(={0}).顧客担当従業員コードがnullです。", headerRecord.CustomerCode);
                        EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));
                    }
                    else
                    {
                        string msg = string.Format(
                            "得意先マスタ(={0}).顧客担当従業員コード(={1})",
                            headerRecord.CustomerCode,
                            customerInfo.CustomerAgentCd
                        );
                        EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));
                    }

                    #endregion // </Log>
                    // -- DELETE 2011/09/19   ------ >>>>>>
                    //// 030.入力担当者コード …得意先マスタ.顧客担当者コード
                    //salesSlip.InputAgenCd = customerInfo.CustomerAgentCd;
                    //// 031.入力担当者名称   …従業員マスタから取得
                    //salesSlip.InputAgenNm = GetEmployeeName(salesSlip.EnterpriseCode, salesSlip.InputAgenCd);
                    // -- DELETE 2011/09/19   ------ <<<<<<
                    // -- ADD 2011/09/19   ------ >>>>>>
                    // 得意先マスタの担当者コードが設定されている場合
                    if (!string.Empty.Equals(customerInfo.CustomerAgentCd))
                    {
                        // 入力担当者コード = 得意先マスタの担当者コート
                        salesSlip.InputAgenCd = customerInfo.CustomerAgentCd;
                        // 入力担当者名称 = 得意先マスタの得意先担当者
                        salesSlip.InputAgenNm = GetEmployeeName(salesSlip.EnterpriseCode, customerInfo.CustomerAgentCd);
                    }
                    else
                    {
                        // 入力担当者コードはログイン担当者を使用する。
                        salesSlip.InputAgenCd = LoginInfoAcquisition.Employee.EmployeeCode.Trim();
                        // 入力担当者名称はログイン担当者を使用する。
                        salesSlip.InputAgenNm = GetEmployeeName(salesSlip.EnterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                    }
                    // -- ADD 2011/09/19   ------ <<<<<<
                    // --- ADD 2013/06/13 Y.Wakita ---------->>>>>
                    if (salesSlip.InputAgenNm.Length > 16) salesSlip.InputAgenNm = salesSlip.InputAgenNm.Substring(0, 16);
                    // --- ADD 2013/06/13 Y.Wakita ----------<<<<<
                }

                // 032.売上入力者コード
                // 033.売上入力者名称
                // 034.受付従業員コード
                // 035.受付従業員名称
                salesSlip.SalesEmployeeCd = headerRecord.AnsEmployeeCd; // 036.販売従業員コード …SCM受注データの回答従業員コード
                salesSlip.SalesEmployeeNm = headerRecord.AnsEmployeeNm; // 037.販売従業員名称   …SCM受注データの回答従業員名称
                salesSlip.TotalAmountDispWayCd = 0;                     // 038.総額表示方法区分 …0:総額表示しない(税抜き)
                // 039.総額表示掛率適用区分

                // 伝票の構成(対応する売上明細データ等)が決定したときに算出
                // 040.売上伝票合計(税込み)         …算出
                // 041.売上伝票合計(税抜き)         …算出
                // 042.売上部品合計(税込み)         …算出
                // 043.売上部品合計(税抜き)         …算出
                // 044.売上作業合計(税込み)         …算出
                // 045.売上作業合計(税抜き)         …算出
                // 046.売上小計(税込み)             …算出
                // 047.売上小計(税抜き)             …算出
                // 048.売上部品小計(税込み)         …算出
                // 049.売上部品小計(税抜き)         …算出
                // 050.売上作業小計(税込み)         …算出
                // 051.売上作業小計(税抜き)         …算出
                // 052.売上正価金額                 …算出
                // 053.売上小計(税)                 …算出
                // 054.売上外税対象額               …算出
                // 055.売上内税対象額               …算出
                // 056.売上小計非課税対象額         …算出
                // 057.売上金額消費税額(外税)       …算出
                // 058.売上金額消費税額(内税)       …算出
                // 059.売上値引金額計(税抜き)       …算出
                // 060.売上値引外税対象額合計       …算出
                // 061.売上値引内税対象額合計       …算出
                // 062.部品値引対象額合計(税抜き)   …算出
                // 063.部品値引対象額合計(税込み)   …算出
                // 064.作業値引対象額合計(税抜き)   …算出
                // 065.作業値引対象額合計(税込み)   …算出
                // 066.売上値引非課税対象額合計     …算出
                // 067.売上値引消費税額(外税)       …算出
                // 068.売上値引消費税額(内税)       …算出
                // 069.部品値引率                   …算出
                // 070.工賃値引率                   …算出
                // 071.原価金額計                   …算出

                // DEL 2013/10/25 201311XX配信予定システムテスト障害№13,14対応 -------------------------------->>>>> 
                //if (customerInfo != null)
                //{
                //    salesSlip.ConsTaxLayMethod = customerInfo.ConsTaxLayMethod; // 072.消費税転嫁方式…得意先マスタ or 税率設定マスタ
                //}
                // DEL 2013/10/25 201311XX配信予定システムテスト障害№13,14対応 --------------------------------<<<<<

                TaxRateSetAgent taxRateSet = new TaxRateSetAgent(headerRecord.EnterpriseCode);
                {
                    // UPD 2014/01/30 Redmine#41771-障害№13対応 ------------------------------------------------------>>>>>
                    //salesSlip.ConsTaxRate = taxRateSet.TaxRateOfNow;    // 073.消費税税率…税率設定マスタ
                    taxRateSet.CancelDiv = headerRecord.CancelDiv;
                    taxRateSet.TaxRateDate = headerRecord.InquiryDate;
                    salesSlip.ConsTaxRate = (taxRateSet.CancelDiv == 1) ? taxRateSet.TaxRateOfSlesDate : taxRateSet.TaxRateOfNow;    // 073.消費税税率…税率設定マスタ
                    // UPD 2014/01/30 Redmine#41771-障害№13対応 ------------------------------------------------------<<<<<
                }

                // ADD 2013/10/25 201311XX配信予定システムテスト障害№13,14対応 -------------------------------->>>>> 
                if (claim != null)
                {
                    salesSlip.ConsTaxLayMethod = (claim.CustCTaXLayRefCd == 0) ? taxRateSet.ConsTaxLayMethod : claim.ConsTaxLayMethod;
                }
                // ADD 2013/10/25 201311XX配信予定システムテスト障害№13,14対応 --------------------------------<<<<<
                // ADD 2014/02/05 SCM仕掛一覧№10627対応 ----------------------------------->>>>>
                else
                {
                    // 請求先が取得できない場合は、マスタの税率設定をセット
                    salesSlip.ConsTaxLayMethod = taxRateSet.ConsTaxLayMethod;
                }
                // ADD 2014/02/05 SCM仕掛一覧№10627対応 -----------------------------------<<<<<
                
                if (salesProcMoney != null)
                {
                    salesSlip.FractionProcCd = salesProcMoney.FractionProcCd;   // 074.端数処理区分…売上金額処理区分マスタ
                }

                // 075.売掛消費税…算出 ※伝票の構成(対応する売上明細データ等)が決定したときに算出

                // 076.自動入金区分
                // 077.自動入金伝票番号
                salesSlip.DepositAllowanceTtl = 0;  // 078.入金引当合計額…0

                // 079.入金引当残高…売上伝票合計(税込) 消費税転嫁方式が「請求転嫁、非課税」の場合は税抜金額
                // ※伝票の構成(対応する売上明細データ等)が決定したときに算出

                if (customerInfo != null)
                {
                    salesSlip.ClaimCode = customerInfo.ClaimCode;   // 080.請求先コード …得意先マスタ
                    salesSlip.ClaimSnm = customerInfo.ClaimSnm;     // 081.請求先略称   …得意先マスタ
                }

                salesSlip.CustomerCode = headerRecord.CustomerCode; // 082.得意先コード…SCM受注データの得意先コード

                if (customerInfo != null)
                {
                    salesSlip.CustomerName = customerInfo.Name;             // 083.得意先名称   …得意先マスタ
                    salesSlip.CustomerName2 = customerInfo.Name2;           // 084.得意先名称2  …得意先マスタ
                    salesSlip.CustomerSnm = customerInfo.CustomerSnm;       // 085.得意先略称   …得意先マスタ
                    salesSlip.HonorificTitle = customerInfo.HonorificTitle; // 086.敬称         …得意先マスタ
                }

                // 087.諸口コード
                // 088.諸口名称
                // 089.得意先伝票番号…リモート取得
                salesSlip.SlipAddressDiv = 2;                           // 090.伝票住所区分…2:納入先
                salesSlip.AddresseeCode = headerRecord.CustomerCode;    // 091.納品先コード…SCM受注データの得意先コード

                if (customerInfo != null)
                {
                    salesSlip.AddresseeName = customerInfo.Name;        // 092.納品先名称               …得意先マスタ
                    salesSlip.AddresseeName2 = customerInfo.Name2;      // 093.納品先名称2              …得意先マスタ
                    salesSlip.AddresseePostNo = customerInfo.PostNo;    // 094.納品先郵便番号           …得意先マスタ
                    salesSlip.AddresseeAddr1 = customerInfo.Address1;   // 095.納品先住所1(都道府県市区郡・町村・字)…得意先マスタ
                    salesSlip.AddresseeAddr3 = customerInfo.Address3;   // 096.納品先住所3(番地)        …得意先マスタ
                    salesSlip.AddresseeAddr4 = customerInfo.Address4;   // 097.納品先住所4(アパート名称)…得意先マスタ
                    salesSlip.AddresseeTelNo = customerInfo.OfficeTelNo;// 098.納品先電話番号           …得意先マスタ
                    salesSlip.AddresseeFaxNo = customerInfo.OfficeFaxNo;// 099.納品先FAX番号            …得意先マスタ
                }

                // 100.相手先伝票番号
                // --- UPD m.suzuki 2011/05/23 ---------->>>>>
                //// 101.伝票備考
                salesSlip.SlipNote = headerRecord.InqOrdNote; // 101.伝票備考 ← 問合せ・発注備考
                // --- UPD m.suzuki 2011/05/23 ----------<<<<<
                // 102.伝票備考2
                // 103.伝票備考3
                // 104.返品理由コード
                // 105.返品理由
                // 106.レジ処理日
                // 107.レジ番号
                // 108.POSレシート番号

                // 109.明細行数…算出→明細数の上限が決まったときに設定

                // 110.EDI送信日
                // 111.EDI取込日
                // 112.UOEリマーク1
                // 113.UOEリマーク2

                salesSlip.SlipPrintDivCd = dataFactory.GetSlipPrintDivCd();         // 114.伝票発行区分     …売上全体設定, SCM全体設定, 見積初期値
                salesSlip.SlipPrintFinishCd = dataFactory.GetSlipPrintFinishCd();   // 115.伝票発行済区分   …売上全体設定, SCM全体設定, 見積初期値

                // 116.売上伝票発行日…伝票発行区分[1:する]の場合のみシステム日付
                if (salesSlip.SlipPrintDivCd.Equals((int)SlipPrintDivCd.Do))
                {
                    salesSlip.SalesSlipPrintDate = DateTime.Now;
                }

                if (customerInfo != null)
                {
                    salesSlip.BusinessTypeCode = customerInfo.BusinessTypeCode; // 117.業種コード   …得意先マスタ
                    salesSlip.BusinessTypeName = customerInfo.BusinessTypeName; // 118.業種名称     …得意先マスタ
                }

                // 119.発注番号
                // 120.納品区分
                // 121.納品区分名称

                if (customerInfo != null)
                {
                    salesSlip.SalesAreaCode = customerInfo.SalesAreaCode;   // 122.販売エリアコード …得意先マスタ
                    salesSlip.SalesAreaName = customerInfo.SalesAreaName;   // 123.販売エリア名称   …得意先マスタ
                }

                // 124.取消フラグ

                // FIXME:125.伝票印刷設定用帳票ID…伝票印刷設定マスタ
                // -- ADD 2011/09/21   ------ >>>>>>
                salesSlip.SlipPrtSetPaperId = GetSlipPrtSetPaperId(salesSlip.SectionCode, headerRecord.CustomerCode, salesSlip.EnterpriseCode, headerRecord.AcptAnOdrStatus);
                // -- ADD 2011/09/21   ------ <<<<<<
                salesSlip.CompleteCd = 0;   // 126.一式伝票区分…0:通常伝票

                if (salesProcMoney != null)
                {
                    // 2010/07/07 >>>
                    //salesSlip.SalesPriceFracProcCd = salesProcMoney.FractionProcCd; // 127.売上金額端数処理区分…売上金額処理区分マスタ
                    salesSlip.SalesPriceFracProcCd = 0; // 127.売上金額端数処理区分…売上金額処理区分マスタ
                    // 2010/07/07 <<<
                }

                // 伝票の構成(対応する売上明細データ等)が決定したときに算出
                // 128.在庫商品合計金額(税抜)…算出
                // 129.在庫商品合計金額(税込)…算出

                // 受注ステータスが見積の場合
                if (estimateDefSet != null && headerRecord.AcptAnOdrStatus.Equals((int)AcptAnOdrStatus.Estimate))
                {
                    salesSlip.ListPricePrintDiv = estimateDefSet.ListPricePrintDiv; // 130.定価印刷区分…見積初期値設定
                }
                
                // 131.元号表示区分1

                // 受注ステータスが見積の場合
                if (estimateDefSet != null && headerRecord.AcptAnOdrStatus.Equals((int)AcptAnOdrStatus.Estimate))
                {
                    salesSlip.EstimaTaxDivCd = estimateDefSet.ConsTaxPrintDiv;  // 132.見積消費税区分…見積初期値設定
                }

                // 133.見積書印刷区分
                // 134.見積件名
                // 135.脚注1
                // 136.脚注2

                // 受注ステータスが見積の場合
                if (estimateDefSet != null && headerRecord.AcptAnOdrStatus.Equals((int)AcptAnOdrStatus.Estimate))
                {
                    salesSlip.EstimateTitle1 = estimateDefSet.EstimateTitle1;   // 137.見積タイトル1…見積初期値設定
                }

                // 138.見積タイトル2
                // 139.見積タイトル3
                // 140.見積タイトル4
                // 141.見積タイトル5

                // 受注ステータスが見積の場合
                if (estimateDefSet != null && headerRecord.AcptAnOdrStatus.Equals((int)AcptAnOdrStatus.Estimate))
                {
                    salesSlip.EstimateNote1 = estimateDefSet.EstimateNote1; // 142.見積備考1…見積初期値設定
                    salesSlip.EstimateNote2 = estimateDefSet.EstimateNote2; // 143.見積備考2…見積初期値設定
                    salesSlip.EstimateNote3 = estimateDefSet.EstimateNote3; // 144.見積備考3…見積初期値設定
                }

                // 145.見積備考4
                // 146.見積備考5

                // 受注ステータスが見積の場合
                if (estimateDefSet != null && headerRecord.AcptAnOdrStatus.Equals((int)AcptAnOdrStatus.Estimate))
                {
                    // 147.見積有効期限…見積初期値設定
                    salesSlip.EstimateValidityDate = EstimateDefSetAgent.GetEstimateValidityDate(estimateDefSet);
                    // 148.品番印字区分…見積初期値設定
                    salesSlip.PartsNoPrtCd = estimateDefSet.PartsNoPrtCd;
                }

                // 149.オプション印字区分
                // 150.掛率使用区分

                // --- ADD m.suzuki 2011/05/23 ---------->>>>>
                // 相手先伝票番号…SF-PM連携指示書番号
                salesSlip.PartySaleSlipNum = headerRecord.SfPmCprtInstSlipNo;
                // --- ADD m.suzuki 2011/05/23 ----------<<<<<

                // -- DELETE 2011/09/19   ------ >>>>>>
                //// --- ADD LDNS wangqx 2011/08/10 ---------->>>>>
                //// 売上データ．受付従業員コード＝PCC全体設定マスタ．受付従業員コード
                //if (_pccHash.ContainsKey(salesSlip.EnterpriseCode + salesSlip.SectionCode))
                //{
                //    salesSlip.FrontEmployeeCd = ((PccTtlStWork)_pccHash[salesSlip.EnterpriseCode + salesSlip.SectionCode]).FrontEmployeeCd;
                //    // 売上データ．受付従業員名称＝PCC全体設定マスタ．受付従業員コードより名称を取得する
                //    salesSlip.FrontEmployeeNm = ((PccTtlStWork)_pccHash[salesSlip.EnterpriseCode + salesSlip.SectionCode]).FrontEmployeeNm;
                //}
                //// --- ADD LDNS wangqx 2011/08/10 ----------<<<<<
                // -- DELETE 2011/09/19   ------ <<<<<<
                
                // -- ADD 2011/09/19   ------ >>>>>>
                // 売上入力拠点コード
                salesSlip.SalesInpSecCd = headerRecord.InqOtherSecCd;         // 売上入力拠点コード       …ログイン拠点

                // UPD 2012/11/30 2012/12/12配信 システムテスト障害№88対応 ----------------------------------------->>>>>
                //// 受発注種別=1:PCC-UOEの場合、BLﾊﾟｰﾂｵｰﾀﾞｰ全体設定の受注者コードを使用する。
                //// 受発注種別=0:通常の場合、空白。(変更無し)
                //if (headerRecord.AcceptOrOrderKind == (int)EnumAcceptOrOrderKind.PCCUOE)

                // 自動回答の時SCM全体設定マスタより受注者コードを使用する
                if (headerRecord.AnswerCreateDiv == (int)AnswerCreateDivValue.Auto)
                // UPD 2012/11/30 2012/12/12配信 システムテスト障害№88対応 -----------------------------------------<<<<<
                {
                    // UPD 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ---------------------------------->>>>>
                    #region 削除(SCM改良の為)
                    //// 売上データ．受付従業員コード＝PCC全体設定マスタ．受付従業員コード
                    //if (_pccHash.ContainsKey(salesSlip.EnterpriseCode + salesSlip.SectionCode))
                    //{
                    //    // 受付従業員コード
                    //    salesSlip.FrontEmployeeCd = ((PccTtlStWork)_pccHash[salesSlip.EnterpriseCode + salesSlip.SectionCode]).FrontEmployeeCd;
                    //    // 受付従業員名称
                    //    salesSlip.FrontEmployeeNm = GetEmployeeName(salesSlip.EnterpriseCode, salesSlip.FrontEmployeeCd);
                    //    // 納品区分
                    //    salesSlip.DeliveredGoodsDiv = ((PccTtlStWork)_pccHash[salesSlip.EnterpriseCode + salesSlip.SectionCode]).DeliveredGoodsDiv;
                    //    // 納品区分名称 ﾕｰｻﾞｰｶﾞｲﾄﾞﾏｽﾀから取得
                    //    salesSlip.DeliveredGoodsDivNm = this._salesAreaDic[salesSlip.DeliveredGoodsDiv];
                    //}
                    #endregion
                    // 受付従業員コード
                    salesSlip.FrontEmployeeCd = _scmTtlSt.FrontEmployeeCd;
                    // 受付従業員名称
                    salesSlip.FrontEmployeeNm = GetEmployeeName(salesSlip.EnterpriseCode, salesSlip.FrontEmployeeCd);
                    // 納品区分
                    salesSlip.DeliveredGoodsDiv = _scmTtlSt.DeliveredGoodsDiv;
                    // 納品区分名称 ﾕｰｻﾞｰｶﾞｲﾄﾞﾏｽﾀから取得
                    salesSlip.DeliveredGoodsDivNm = this._salesAreaDic[salesSlip.DeliveredGoodsDiv];
                    // UPD 2012/11/09 2012/12/12配信予定 SCM改良№10337,10338,10341,10364,10431対応 ----------------------------------<<<<<
                    // --------------- ADD START 2013.04.11 wangl2 FOR RedMine#35269------>>>> 
                    // 売上入力者コード
                    salesSlip.SalesInputCode = _scmTtlSt.SalesInputCode;
                    string salesInputName = GetEmployeeName(salesSlip.EnterpriseCode, salesSlip.SalesInputCode);
                    if (salesInputName.Length > 16) salesInputName = salesInputName.Substring(0, 16);
                    // 売上入力者名称
                    salesSlip.SalesInputName = salesInputName;
                    // --------------- ADD END 2013.04.11 wangl2 FOR RedMine#35269------<<<<<
                }
                // -- ADD 2011/09/19   ------ <<<<<<
            }
            return salesSlip;
        }

        #endregion // </売上データ>

        #region <車両管理データ>

        /// <summary>
        /// 車両管理データを生成します。
        /// </summary>
        /// <param name="carRecord">SCM受注データ(車両情報)のレコード</param>
        /// <param name="headerRecord">SCM受注データのレコード</param>
        /// <param name="detailRecord">SCM受注明細データ(問合せ・発注)のレコード</param>
        /// <returns>車両管理データ</returns>
        protected CarManagementWork CreateCarManagementWork(
            ISCMOrderCarRecord carRecord,
            ISCMOrderHeaderRecord headerRecord,
            ISCMOrderDetailRecord detailRecord
        )
        {
            const string METHOD_NAME = "CreateCarManagementWork()"; // ログ用  

            #region <Log>

            string message = string.Format("車両管理データを生成中(問合せ番号={0})...", headerRecord.InquiryNumber);
            EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(message));

            #endregion // </Log>

            CarManagementWork carMng = new CarManagementWork();
            {
                UserSCMOrderCarRecord userCarRecord = carRecord as UserSCMOrderCarRecord;
                if (userCarRecord == null) return carMng;

                // 車両検索結果
                PMKEN01010E searchedCarInfo = null;
                if (ExistsSearchedCarInfo(detailRecord))
                {
                    searchedCarInfo = GetSearchedCarInfo(detailRecord);
                }

                // ADD 2013/04/19 SCM障害№10521 --------------------------------->>>>>
                // 受注マスタ（車両）を取得します
                SalesDetailWork[] foundSalesDetails = null;
                AcceptOdrCarWork[] foundAcceptOdrCars = null;
                if (detailRecord.InqOtherEpCd != string.Empty
                    && detailRecord.InqOtherSecCd != string.Empty
                    && detailRecord.AcptAnOdrStatus != 0
                    && detailRecord.SalesSlipNum != string.Empty
                    && detailRecord.SalesRowNo != 0)
                {
                    SalesDetailDB.FindSalesDetailInfo(
                        detailRecord.InqOtherEpCd,
                        detailRecord.InqOtherSecCd,
                        detailRecord.AcptAnOdrStatus,
                        detailRecord.SalesSlipNum,
                        detailRecord.SalesRowNo,
                        out foundSalesDetails,
                        out foundAcceptOdrCars
                    );
                }
                // ADD 2013/04/19 SCM障害№10521 ---------------------------------<<<<<

                // 001.作成日時         …共通ヘッダ リモート取得
                // 002.更新日時         …共通ヘッダ リモート取得
                carMng.EnterpriseCode = headerRecord.InqOtherEpCd;  // 003.企業コード…共通ヘッダ リモート取得
                // 004.GUID             …共通ヘッダ リモート取得
                // 005.更新従業員コード …共通ヘッダ リモート取得
                // 006.更新アセンブリID1…共通ヘッダ リモート取得
                // 007.更新アセンブリID2…共通ヘッダ リモート取得
                // 008.論理削除区分     …共通ヘッダ リモート取得

                carMng.CustomerCode = headerRecord.CustomerCode;    // 009.得意先コード…SCM受注データ(車両情報)？
                // 010.車両管理番号
                // 011.車輌管理コード
                carMng.NumberPlate1Code = userCarRecord.NumberPlate1Code;   // 012.陸運事務所番号…SCM受注データ(車両情報)
                carMng.NumberPlate1Name = userCarRecord.NumberPlate1Name;   // 013.陸運事務局名称…SCM受注データ(車両情報)
                carMng.NumberPlate2 = userCarRecord.NumberPlate2;           // 014.車両登録番号(種別)
                carMng.NumberPlate3 = userCarRecord.NumberPlate3;           // 015.車両登録番号(カナ)
                carMng.NumberPlate4 = userCarRecord.NumberPlate4;           // 016.車両登録番号(プレート番号)
                
                if (searchedCarInfo != null)
                {
                    // FIXME:017.登録年月日…車両検索結果
                    carMng.FirstEntryDate = SCMDataHelper.GetFirstEntryDate(searchedCarInfo);   // 018.初年度    …車両検索結果     2010/03/17 Add
                    // ADD 2013/10/24 201311XX配信予定システムテスト障害№11,12対応 ----------------------------------->>>>>
                    if (carMng.FirstEntryDate == 0)
                    {
                        // 車両検索で取得できなかった時、SCM受注データ(車両情報)より設定
                        carMng.FirstEntryDate = userCarRecord.ProduceTypeOfYearNum;             // 018.初年度    …SCM受注データ(車両情報)
                    }
                    // ADD 2013/10/24 201311XX配信予定システムテスト障害№11,12対応 -----------------------------------<<<<<
                }
                // ADD 2013/10/24 201311XX配信予定システムテスト障害№11,12対応 ----------------------------------->>>>>
                else
                {
                    // 車両検索できなかった場合、SCM受注データ(車両情報)より設定
                    carMng.FirstEntryDate = userCarRecord.ProduceTypeOfYearNum;             // 018.初年度    …SCM受注データ(車両情報)
                }
                // ADD 2013/10/24 201311XX配信予定システムテスト障害№11,12対応 -----------------------------------<<<<<

                carMng.MakerCode = userCarRecord.MakerCode; // 019.メーカーコード…SCM受注データ(車両情報) > 車両検索結果

                if (searchedCarInfo != null)
                {
                    carMng.MakerFullName = SCMDataHelper.GetMakerFullName(searchedCarInfo); // 020.メーカー全角名称…車両検索結果
                    carMng.MakerHalfName = SCMDataHelper.GetMakerHalfName(searchedCarInfo); // 021.メーカー半角名称…車両検索結果
                }

                // 022.車種コード…SCM受注データ(車両情報) > 車両検索結果
                carMng.ModelCode = userCarRecord.ModelCode;
                if (carMng.ModelCode <= 0 && searchedCarInfo != null)
                {
                    carMng.ModelCode = SCMDataHelper.GetModelCode(searchedCarInfo);
                }
                // 023.車種サブコード…SCM受注データ(車両情報) > 車両検索結果
                carMng.ModelSubCode = userCarRecord.ModelSubCode;
                if (carMng.ModelSubCode <= 0 && searchedCarInfo != null)
                {
                    carMng.ModelSubCode = SCMDataHelper.GetModelSubCode(searchedCarInfo);
                }
                // 024.車種全角名称…SCM受注データ(車両情報) > 車両検索結果
                carMng.ModelFullName = userCarRecord.ModelName;
                if (string.IsNullOrEmpty(carMng.ModelFullName) && searchedCarInfo != null)
                {
                    carMng.ModelFullName = SCMDataHelper.GetModelFullName(searchedCarInfo);
                }
                if (searchedCarInfo != null)
                {
                    carMng.ModelHalfName = SCMDataHelper.GetModelHalfName(searchedCarInfo);             // 025.車種半角名称     …車両検索結果
                    carMng.SystematicCode = SCMDataHelper.GetSystematicCode(searchedCarInfo);           // 026.系統コード       …車両検索結果
                    carMng.SystematicName = SCMDataHelper.GetSystematicName(searchedCarInfo);           // 027.系統名称         …車両検索結果
                    carMng.ProduceTypeOfYearCd = SCMDataHelper.GetProduceTypeOfYearCd(searchedCarInfo); // 028.生産年式コード   …車両検索結果
                    carMng.ProduceTypeOfYearNm = SCMDataHelper.GetProduceTypeOfYearNm(searchedCarInfo); // 029.生産年年式名称   …車両検索結果
                    carMng.StProduceTypeOfYear = SCMDataHelper.GetStProduceTypeOfYear(searchedCarInfo); // 030.開始生産年式     …車両検索結果
                    carMng.EdProduceTypeOfYear = SCMDataHelper.GetEdProduceTypeOfYear(searchedCarInfo); // 031.終了生産年式     …車両検索結果
                    carMng.DoorCount = SCMDataHelper.GetDoorCount(searchedCarInfo);                     // 032.ドア数           …車両検索結果
                    carMng.BodyNameCode = SCMDataHelper.GetBodyNameCode(searchedCarInfo);               // 033.ボディー名コード …車両検索結果
                    carMng.BodyName = SCMDataHelper.GetBodyName(searchedCarInfo);                       // 034.ボディー名称     …車両検索結果
                    carMng.ExhaustGasSign = SCMDataHelper.GetExhaustGasSign(searchedCarInfo);           // 035.排ガス記号       …車両検索結果
                    carMng.SeriesModel = SCMDataHelper.GetSeriesModel(searchedCarInfo);                 // 036.シリーズ型式     …車両検索結果
                    carMng.CategorySignModel = SCMDataHelper.GetCategorySignModel(searchedCarInfo);     // 037.型式(類別記号)   …車両検索結果
                }

                // DEL 譚洪 2014/09/01 FOR Redmine#43289 --- >>>
                // 038.型式(フル型)…SCM受注データ(車両情報) > 車両検索結果
                //carMng.FullModel = userCarRecord.FullModel;
                //if (string.IsNullOrEmpty(carMng.FullModel) && searchedCarInfo != null)
                //{
                //    carMng.FullModel = SCMDataHelper.GetFullModel(searchedCarInfo);
                //    // ADD 2013/10/02 SCM仕掛一覧№10577対応 ---------------------------------------->>>>>
                //    // 車両検索できなかった場合は車検証型式をセットする
                //    if (string.IsNullOrEmpty(carMng.FullModel))
                //    {
                //        carMng.FullModel = userCarRecord.CarInspectCertModel;
                //    }
                //    // ADD 2013/10/02 SCM仕掛一覧№10577対応 ----------------------------------------<<<<<
                //}
                //// ADD 2013/10/24 201311XX配信予定システムテスト障害№11,12対応 ----------------------------------->>>>>
                //else
                //{
                //    // 車両検索できなかった場合は車検証型式をセットする
                //    carMng.FullModel = userCarRecord.CarInspectCertModel;
                //}
                // ADD 2013/10/24 201311XX配信予定システムテスト障害№11,12対応 -----------------------------------<<<<<
                // DEL 譚洪 2014/09/01 FOR Redmine#43289 --- <<<

                // ADD 譚洪 2014/09/01 FOR Redmine#43289 --- >>>
                // 038.型式(フル型)…SCM受注データ(車両情報) > 車両検索結果
                carMng.FullModel = userCarRecord.FullModel;
                if (string.IsNullOrEmpty(carMng.FullModel))
                {
                    if (searchedCarInfo != null)
                    {
                        carMng.FullModel = SCMDataHelper.GetFullModel(searchedCarInfo);

                        // 車両検索できなかった場合は車検証型式をセットする
                        if (string.IsNullOrEmpty(carMng.FullModel))
                        {
                            carMng.FullModel = userCarRecord.CarInspectCertModel;
                        }
                    }
                    else
                    {
                        // 車両検索できなかった場合は車検証型式をセットする
                        carMng.FullModel = userCarRecord.CarInspectCertModel;
                    }
                }
                // ADD 譚洪 2014/09/01 FOR Redmine#43289 --- <<<

                // 039.型式指定番号…SCM受注データ(車両情報) > 車両検索結果
                carMng.ModelDesignationNo = userCarRecord.ModelDesignationNo;
                if (carMng.ModelDesignationNo <= 0 && searchedCarInfo != null)
                {
                    carMng.ModelDesignationNo = SCMDataHelper.GetModelDesignationNo(searchedCarInfo);
                }
                // 040.類別番号…SCM受注データ(車両情報) > 車両検索結果
                carMng.CategoryNo = userCarRecord.CategoryNo;
                if (carMng.CategoryNo <= 0 && searchedCarInfo != null)
                {
                    carMng.CategoryNo = SCMDataHelper.GetCategoryNo(searchedCarInfo);
                }
                // 041.車台型式…SCM受注データ(車両情報) > 車両検索結果
                carMng.FrameModel = userCarRecord.FrameModel;
                if (string.IsNullOrEmpty(carMng.FrameModel) && searchedCarInfo != null)
                {
                    carMng.FrameModel = SCMDataHelper.GetFrameModel(searchedCarInfo);
                }
                // 2011/03/08 >>>
                //// 042.車台番号…SCM受注データ(車両情報) > 車両検索結果
                //carMng.FrameNo = GetFrameNo(userCarRecord);
                //if (string.IsNullOrEmpty(carMng.FrameNo) && searchedCarInfo != null)
                //{
                //    carMng.FrameNo = SCMDataHelper.GetFrameNo(searchedCarInfo);
                //}
                //// 043.車台番号(検索用)…SCM受注データ(車両情報) > 車両検索結果
                //carMng.SearchFrameNo = SCMEntityUtil.ConvertNumber(userCarRecord.FrameNo);
                // 2011/03/08 <<<

                // UPD 2013/04/05 吉岡 2013/05/22配信 SCM障害№50 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                // carMng.FrameNo = GetFrameNo(userCarRecord); // 2011/10/14 ADD 
                // 042.車台番号
                // --- ADD 2013/05/02 三戸 2013/05/22配信分 SCM障害№50 デグレ対応--------->>>>>>>>>>>>>>>>>>>>>>>>
                if (searchedCarInfo != null)
                {
                // --- ADD 2013/05/02 三戸 2013/05/22配信分 SCM障害№50 デグレ対応---------<<<<<<<<<<<<<<<<<<<<<<<<
                    if (SCMDataHelper.GetDomesticForeignCode(searchedCarInfo).Equals(2))
                    {
                        // 外車の場合
                        carMng.FrameNo = userCarRecord.FrameNo;
                    }
                    else
                    {
                        // 国産の場合
                        carMng.FrameNo = GetFrameNo(userCarRecord);
                    }
                // --- ADD 2013/05/02 三戸 2013/05/22配信分 SCM障害№50 デグレ対応--------->>>>>>>>>>>>>>>>>>>>>>>>
                }
                // --- ADD 2013/05/02 三戸 2013/05/22配信分 SCM障害№50 デグレ対応---------<<<<<<<<<<<<<<<<<<<<<<<<
                // UPD 2013/04/05 吉岡 2013/05/22配信 SCM障害№50 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                if (searchedCarInfo != null)
                {
                    // 2011/03/08 Add >>>
                    //carMng.FrameNo = SCMDataHelper.GetFrameNo(searchedCarInfo);                       // 042.車台番号…車両検索結果 // 2011/10/14 DEL
                    // 2012/10/10 DEL TAKAGAWA SCM障害改良No163 ----------->>>>>>>>>>>>
                    //carMng.SearchFrameNo = SCMDataHelper.GetSearchFrameNo(searchedCarInfo);             // 043.車台番号(検索用)…車両検索結果
                    // 2012/10/10 DEL TAKAGAWA SCM障害改良No163 -----------<<<<<<<<<<<<
                    // 2012/10/10 ADD TAKAGAWA SCM障害改良No163 ----------->>>>>>>>>>>>
                    int intSearchFrameNo;
                    bool ret = Int32.TryParse(GetFrameNo(userCarRecord), out intSearchFrameNo);
                    carMng.SearchFrameNo = intSearchFrameNo;                                            // 043.車台番号(検索用)…車両検索結果
                    // 2012/10/10 ADD TAKAGAWA SCM障害改良No163 -----------<<<<<<<<<<<<
                    carMng.CategoryObjAry = SCMDataHelper.GetCategoryObjAry(searchedCarInfo);
                    // 2011/03/08 Add <<<
                    carMng.StProduceFrameNo = SCMDataHelper.GetStProduceFrameNo(searchedCarInfo);       // 044.生産車台番号開始         …車両検索結果
                    carMng.EdProduceFrameNo = SCMDataHelper.GetEdProduceFrameNo(searchedCarInfo);       // 045.生産車台番号終了         …車両検索結果
                    carMng.EngineModel = SCMDataHelper.GetEngineModel(searchedCarInfo);                 // 046.原動機型式(エンジン)     …車両検索結果
                    carMng.ModelGradeNm = SCMDataHelper.GetModelGradeNm(searchedCarInfo);               // 047.型式グレード名称         …車両検索結果
                    carMng.EngineModelNm = SCMDataHelper.GetEngineModelNm(searchedCarInfo);             // 048.エンジン型式名称         …車両検索結果
                    carMng.EngineDisplaceNm = SCMDataHelper.GetEngineDisplaceNm(searchedCarInfo);       // 049.排気量名称               …車両検索結果
                    carMng.EDivNm = SCMDataHelper.GetEDivNm(searchedCarInfo);                           // 050.E区分名称                …車両検索結果
                    carMng.TransmissionNm = SCMDataHelper.GetTransmissionNm(searchedCarInfo);           // 051.ミッション名称           …車両検索結果
                    carMng.ShiftNm = SCMDataHelper.GetShiftNm(searchedCarInfo);                         // 052.シフト名称               …車両検索結果
                    carMng.WheelDriveMethodNm = SCMDataHelper.GetWheelDriveMethodNm(searchedCarInfo);   // 053.駆動方式名称             …車両検索結果
                    carMng.AddiCarSpec1 = SCMDataHelper.GetAddiCarSpec1(searchedCarInfo);               // 054.追加緒元1                …車両検索結果
                    carMng.AddiCarSpec2 = SCMDataHelper.GetAddiCarSpec2(searchedCarInfo);               // 055.追加緒元2                …車両検索結果
                    carMng.AddiCarSpec3 = SCMDataHelper.GetAddiCarSpec3(searchedCarInfo);               // 056.追加緒元3                …車両検索結果
                    carMng.AddiCarSpec4 = SCMDataHelper.GetAddiCarSpec4(searchedCarInfo);               // 057.追加緒元4                …車両検索結果
                    carMng.AddiCarSpec5 = SCMDataHelper.GetAddiCarSpec5(searchedCarInfo);               // 058.追加緒元5                …車両検索結果
                    carMng.AddiCarSpec6 = SCMDataHelper.GetAddiCarSpec6(searchedCarInfo);               // 059.追加緒元6                …車両検索結果
                    carMng.AddiCarSpecTitle1 = SCMDataHelper.GetAddiCarSpecTitle1(searchedCarInfo);     // 060.追加緒元タイトル1        …車両検索結果
                    carMng.AddiCarSpecTitle2 = SCMDataHelper.GetAddiCarSpecTitle2(searchedCarInfo);     // 061.追加緒元タイトル2        …車両検索結果
                    carMng.AddiCarSpecTitle3 = SCMDataHelper.GetAddiCarSpecTitle3(searchedCarInfo);     // 062.追加緒元タイトル3        …車両検索結果
                    carMng.AddiCarSpecTitle4 = SCMDataHelper.GetAddiCarSpecTitle4(searchedCarInfo);     // 063.追加緒元タイトル4        …車両検索結果
                    carMng.AddiCarSpecTitle5 = SCMDataHelper.GetAddiCarSpecTitle5(searchedCarInfo);     // 064.追加緒元タイトル5        …車両検索結果
                    carMng.AddiCarSpecTitle6 = SCMDataHelper.GetAddiCarSpecTitle6(searchedCarInfo);     // 065.追加緒元タイトル6        …車両検索結果
                    carMng.RelevanceModel = SCMDataHelper.GetRelevanceModel(searchedCarInfo);           // 066.関連型式                 …車両検索結果
                    carMng.SubCarNmCd = SCMDataHelper.GetSubCarNmCd(searchedCarInfo);                   // 067.サブ車名コード           …車両検索結果
                    carMng.ModelGradeSname = SCMDataHelper.GetModelGradeSname(searchedCarInfo);         // 068.型式グレード略称         …車両検索結果
                    carMng.BlockIllustrationCd = SCMDataHelper.GetBlockIllustrationCd(searchedCarInfo); // 069.ブロックイラストコード   …車両検索結果
                    carMng.ThreeDIllustNo = SCMDataHelper.GetThreeDIllustNo(searchedCarInfo);           // 070.3DイラストNo             …車両検索結果
                    carMng.PartsDataOfferFlag = SCMDataHelper.GetPartsDataOfferFlag(searchedCarInfo);   // 071.部品データ提供フラグ     …車両検索結果
                }

                // 072.車検満期日
                // 073.前回車検満期日
                // 074.車検期間
                carMng.Mileage = userCarRecord.Mileage; // 075.車両走行距離…SCM受注データ(車両情報)
                // 076.号車
                carMng.ColorCode = userCarRecord.RpColorCode;   // 077.カラーコード…SCM受注データ(車両情報)
                carMng.ColorName1 = userCarRecord.ColorName1;   // 078.カラー名称1…SCM受注データ(車両情報)
                carMng.TrimCode = userCarRecord.TrimCode;       // 079.トリムコード…SCM受注データ(車両情報)
                carMng.TrimName = userCarRecord.TrimName;       // 080.トリム名称…SCM受注データ(車両情報)

                if (searchedCarInfo != null)
                {
                    // 2011/03/08 >>>
                    //carMng.FullModelFixedNoAry = SCMDataHelper.GetFullModelFixedNoAry(searchedCarInfo); // 081.フル型式固定番号配列…車両検索結果
                    //#region <Log>

                    //string msg = string.Format(
                    //    "フル型式固定番号配列.Lengh = {0}",
                    //    carMng.FullModelFixedNoAry == null ? "null" : carMng.FullModelFixedNoAry.Length.ToString()
                    //);
                    //EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));

                    //#endregion // </Log>

                    int[] tmp = new int[0];
                    string[] tmp2 = new string[0];
                    SCMDataHelper.GetFullModelFixedNoAry(searchedCarInfo, out tmp, out tmp2);

                    carMng.FullModelFixedNoAry = tmp;

                    System.Runtime.Serialization.Formatters.Binary.BinaryFormatter formatter = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
                    System.IO.MemoryStream ms = new System.IO.MemoryStream();
                    try
                    {
                        formatter.Serialize(ms, tmp2);
                        byte[] verbinary = ms.GetBuffer();
                        carMng.FreeSrchMdlFxdNoAry = verbinary; // 自由検索型式固定番号配列
                    }
                    finally
                    {
                        ms.Close();
                    }
                    // 2011/03/08 <<<
                }
                else
                {
                    #region <Log>

                    string msg = "フル型式固定番号配列を設定できませんでした。∵車両検索結果がnullです。";
                    EasyLogger.WriteDebugLog(MY_NAME, METHOD_NAME, LogHelper.GetDebugMsg(msg));

                    #endregion // </Log>
                }

                // --- UPD 2012/05/31 ---------->>>>>
                //carMng.CategoryObjAry = userCarRecord.EquipObj; // 082.装備オブジェクト配列…SCM受注データ(車両情報) > 車両検索結果
                carMng.CategoryObjAry = new Byte[0]; // 082.装備オブジェクト配列…初期値
                // --- UPD 2012/05/31 ----------<<<<<

                // 車両情報共通GUID
                carMng.CarRelationGuid = userCarRecord.SalesRelationId;

                // ADD 2013/04/05 吉岡 2013/05/22配信 SCM障害№50 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                // --- ADD 2013/05/02 三戸 2013/05/22配信分 SCM障害№50 デグレ対応--------->>>>>>>>>>>>>>>>>>>>>>>>
                if (searchedCarInfo != null)
                {
                // --- ADD 2013/05/02 三戸 2013/05/22配信分 SCM障害№50 デグレ対応---------<<<<<<<<<<<<<<<<<<<<<<<<
                    carMng.DomesticForeignCode = SCMDataHelper.GetDomesticForeignCode(searchedCarInfo); // 087.国産／外車区分 1:国産 2:外車
                // --- ADD 2013/05/02 三戸 2013/05/22配信分 SCM障害№50 デグレ対応--------->>>>>>>>>>>>>>>>>>>>>>>>
                }
                // --- ADD 2013/05/02 三戸 2013/05/22配信分 SCM障害№50 デグレ対応---------<<<<<<<<<<<<<<<<<<<<<<<<
                // ADD 2013/04/05 吉岡 2013/05/22配信 SCM障害№50 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------->>>>>
                if (foundAcceptOdrCars != null && foundAcceptOdrCars.Length != 0)
                {
                    carMng.CarMngNo = foundAcceptOdrCars[0].CarMngNo; // 010.車両管理番号
                }
                else
                {
                    carMng.CarMngNo = 0; // 010.車両管理番号
                }
                carMng.CarMngCode = userCarRecord.CarMngCode; // 011.車両管理コード
                // ADD 2013/04/19 SCM障害№10521対応 -----------------------------------<<<<<
            }
            return carMng;
        }

        /// <summary>
        /// 車両検索結果が存在するか判断します。
        /// </summary>
        /// <param name="detailRecord">SCM受注明細データ(問合せ・発注)のレコード</param>
        protected bool ExistsSearchedCarInfo(ISCMOrderDetailRecord detailRecord)
        {
            string detailKey = detailRecord.ToKey();

            if (!Referee.Searcher.ResultMap.ContainsKey(detailKey)) return false;

            return Referee.Searcher.ResultMap[detailKey].HasSearchCarInfo();
        }

        /// <summary>
        /// 車両検索結果を取得します。
        /// </summary>
        /// <param name="detailRecord">SCM受注明細データ(問合せ・発注)のレコード</param>
        /// <returns>車両検索結果</returns>
        protected PMKEN01010E GetSearchedCarInfo(ISCMOrderDetailRecord detailRecord)
        {
            return Referee.Searcher.ResultMap[detailRecord.ToKey()].SearchCarInfo;
        }

        /// <summary>
        /// 車台番号を取得します。
        /// </summary>
        /// <param name="userCarRecord">SCM受注データ(車両情報)のレコード</param>
        /// <returns>
        /// シャシーNoが数値の場合、シャシーNoを返します。<br/>
        /// シャシーNoが数値ではない場合、<c>string.Empty</c>を返します。
        /// </returns>
        private static string GetFrameNo(UserSCMOrderCarRecord userCarRecord)
        {
            // ----- DEL 2011/10/12 --------------------------->>>>>
            //int chassisNumber = 0;
            //if (int.TryParse(userCarRecord.ChassisNo, out chassisNumber))
            //{
            //    return userCarRecord.ChassisNo;
            //}
            //return string.Empty;
            // ----- DEL 2011/10/12 ---------------------------<<<<<
            // ----- ADD 2011/10/12 --------------------------->>>>>
            string frameModel = "";
            string chassisNo = "";
            int status = GenerateChassisNoFrameFromFrameNo(userCarRecord.FrameNo, out  frameModel, out  chassisNo);
            if (status == 0)
            {
                return chassisNo;
            }
            else
            {
                int chassisNumber = 0;
                if (int.TryParse(userCarRecord.ChassisNo, out chassisNumber))
                {
                    return userCarRecord.ChassisNo;
                }
                return string.Empty;
            }
            // ----- ADD 2011/10/12 ---------------------------<<<<<

        }

        #endregion // </車両管理データ>

        #region <リモート参照用明細リスト>

        /// <summary>
        /// リモート参照用明細パラメータを生成します。
        /// </summary>
        /// <param name="answerRecord">SCM受注明細データ(回答)</param>
        /// <param name="carRecord">SCM受注データ(車両情報)</param>
        /// <param name="salesSort">SCM受注明細データ(回答)連番</param>
        /// <returns>リモート参照用明細パラメータ</returns>
        private static SlipDetailAddInfoWork CreateSlipDetailAddInfoWork(
            ISCMOrderAnswerRecord answerRecord,
            ISCMOrderCarRecord carRecord,
            ref int salesSort
        )
        {
            SlipDetailAddInfoWork addInfo = new SlipDetailAddInfoWork();
            {
                addInfo.GoodsEntryDiv = 0;  // 商品登録区分(0:登録しない/1:登録する)
                addInfo.PriceUpdateDiv = 0; // 価格登録区分(0:登録しない/1:登録する)
                // 提供日付
                // 価格開始日
                // 提供日付(価格情報)
                addInfo.DtlRelationGuid = answerRecord.SalesRelationId;     // 明細共通GUID
                addInfo.CarRelationGuid = carRecord.SalesRelationId;        // 車両情報共通GUID
                //add start  by liusy 2011/09/29 #25597
                addInfo.SlipDtlRegOrder = salesSort;                        //売上データ順
                salesSort++;
                //add end  by liusy 2011/09/29 #25597

                //del start  by liusy 2011/09/29 #25597
                //addInfo.SlipDtlRegOrder = answerRecord.InqRowNumDerivedNo;  // 登録順明細連番
                //del end  by liusy 2011/09/29 #25597
                addInfo.AddUpRemDiv = 0;    // 受注データ計上残区分(0:伝票追加情報参照/1:残す/2:残さない)
            }
            return addInfo;
        }

        #endregion // </リモート参照用明細リスト>

        #region <リモート参照用パラメータ>

        /// <summary>
        /// リモート参照用パラメータを生成します。
        /// </summary>
        /// <param name="canEntryCarMng">車両管理マスタに登録するフラグ</param>
        /// <returns>リモート参照用パラメータ</returns>
        protected virtual IOWriteCtrlOptWork CreateIOWriteCtrlOptWork(bool canEntryCarMng)
        {
            IOWriteCtrlOptWork ioWriteCtrlOpt = new IOWriteCtrlOptWork();
            {
                // 企業コード…共通ヘッダ リモート取得

                ioWriteCtrlOpt.CtrlStartingPoint = 0;   // 制御起点(0:売上/1:仕入/2:仕入売上同時計上)
                
                ioWriteCtrlOpt.AcpOdrrAddUpRemDiv = 0;  // 受注データ計上残区分(0:残す/1:残さない)
                ioWriteCtrlOpt.ShipmAddUpRemDiv = 0;    // 出荷データ計上残区分(0:残す/1:残さない)
                ioWriteCtrlOpt.EstimateAddUpRemDiv = 0; // 見積データ計上残区分(0:残す/1:残さない)

                ioWriteCtrlOpt.RetGoodsStockEtyDiv = 1; // 返品時在庫登録区分(0:する/1:しない)
                ioWriteCtrlOpt.RemainCntMngDiv = 0;     // 残数管理区分(0:する ※固定)

                ioWriteCtrlOpt.SupplierSlipDelDiv = 0;                  // 仕入伝票削除区分(0:削除しない/1:削除する)
                ioWriteCtrlOpt.CarMngDivCd = canEntryCarMng ? 1 : 0;    // 車両管理マスタ登録区分(0:削除しない/1:削除する)
            }
            return ioWriteCtrlOpt;
        }

        #endregion // </リモート参照用パラメータ>

        /// <summary>
        /// 従業員名称を取得します。
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="employeeCode">従業員コード</param>
        /// <returns>従業員名称</returns>
        protected static string GetEmployeeName(
            string enterpriseCode,
            string employeeCode
        )
        {
            #region <Guard Phrase>

            if (string.IsNullOrEmpty(enterpriseCode.Trim()) || string.IsNullOrEmpty(employeeCode.Trim()))
            {
                return string.Empty;
            }

            #endregion // </Guard Phrase>

            return EmployeeServer.Singleton.Instance.Find(enterpriseCode, employeeCode).Key.Name;
        }

        /// <summary>
        /// 部門コードを取得します。
        /// </summary>
        /// <param name="headerRecord">SCM受注データ</param>
        /// <returns>部門コード</returns>
        protected static int GetSubSectionCode(ISCMOrderHeaderRecord headerRecord)
        {
            #region <Guard Phrase>

            if (
                string.IsNullOrEmpty(headerRecord.EnterpriseCode.Trim())
                    ||
                string.IsNullOrEmpty(headerRecord.AnsEmployeeCd.Trim())
            )
            {
                return 0;
            }

            #endregion // </Guard Phrase>

            return EmployeeServer.Singleton.Instance.Find(
                headerRecord.EnterpriseCode,
                headerRecord.AnsEmployeeCd
            ).Value.BelongSubSectionCode;
        }

        // -- ADD 2011/09/19   ------ >>>>>>
        /// <summary>
        /// ユーザーガイドマスタ読込処理
        /// </summary>
        /// <param name="userGuideDivCd">ガイド区分</param>
        /// <param name="targetDic">対象Dictionary</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note       : ユーザーガイドマスタを読み込み、バッファに保持します。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/10/08</br>
        /// </remarks>
        private int ReadUserGdBd(int userGuideDivCd, ref Dictionary<int, string> targetDic)
        {
            try
            {
                ArrayList retList;

                int status = this._userGuideAcs.SearchAllDivCodeBody(out retList, LoginInfoAcquisition.EnterpriseCode.Trim(),
                                                                     userGuideDivCd, UserGuideAcsData.UserBodyData);
                if (status == 0)
                {
                    foreach (UserGdBd userGdBd in retList)
                    {
                        if (userGdBd.LogicalDeleteCode == 0)
                        {
                            targetDic.Add(userGdBd.GuideCode, userGdBd.GuideName.Trim());
                        }
                    }
                }
            }
            catch
            {
                targetDic = new Dictionary<int, string>();
                return -1;
            }

            return 0;
        }
        // -- ADD 2011/09/19   ------ <<<<<<

        // -- ADD 2011/09/21   ------ >>>>>>
        /// <summary>
        /// 伝票印刷設定用帳票ＩＤ取得処理
        /// </summary>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="acptAnOdrStatus">受注ステータス</param>
        /// <returns> 伝票印刷設定用帳票ＩＤ</returns>
        private string GetSlipPrtSetPaperId(string sectionCode, int customerCode, string enterpriseCode, int acptAnOdrStatus)
        {
            string slipPrtSetPaperId = string.Empty;

            SlipPrtSet slipPrtSet = new SlipPrtSet();
            SlipTypeController.SlipKind kind;
            if (acptAnOdrStatus == (int)AcptAnOdrStatus.Estimate)
            {
                kind = SlipTypeController.SlipKind.EstimateSlip;
            }
            else
            {
                kind = SlipTypeController.SlipKind.SalesSlip;
            }
            slipPrtSet = this.GetPrtSlipSet(kind, sectionCode.Trim(), customerCode, enterpriseCode);
            if (slipPrtSet != null) slipPrtSetPaperId = slipPrtSet.SlipPrtSetPaperId;
            return slipPrtSetPaperId;
        }

        /// <summary>
        /// 伝票印刷設定情報取得処理
        /// </summary>
        /// <param name="slipKind"></param>
        /// <param name="sectionCode"></param>
        /// <param name="customerCode"></param>
        /// <param name="enterpriseCode">>企業コード</param>
        /// <returns></returns>
        private SlipPrtSet GetPrtSlipSet(SlipTypeController.SlipKind slipKind, string sectionCode, int customerCode, string enterpriseCode)
        {
            SlipTypeController stc = new SlipTypeController();
            stc.EnterpriseCode = enterpriseCode;
            stc.SlipPrtSetList = GetPrtSetInfo(enterpriseCode);
            stc.CustSlipMngList = GetCustSlipSet(enterpriseCode);

            SlipPrtSet slipPrtSet;
            int status = stc.GetSlipType(slipKind, out slipPrtSet, sectionCode, customerCode);

            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                slipPrtSet = null;
            }
            return slipPrtSet;
        }

        #region ●得意先マスタ（伝票管理）
        /// <summary>
        /// 得意先マスタ（伝票管理）情報取得処理
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <returns></returns>
        private List<CustSlipMng> GetCustSlipSet(string enterpriseCode)
        {
            // UPD 2014/05/08 PM-SCM速度改良 フェーズ２№05.得意先マスタ（伝票管理）取得改良対応 ------------------------------------->>>>>
            //List<CustSlipMng> custSlipMngList = new List<CustSlipMng>();
            //int count = 0;
            //CustSlipMngAcs custSlipMngAcs = new CustSlipMngAcs();
            //int status = custSlipMngAcs.SearchOnlyCustSlipMng(out count, enterpriseCode);
            //if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            //{
            //    custSlipMngList = new List<CustSlipMng>((CustSlipMng[])custSlipMngAcs.CustSlipMngList.ToArray(typeof(CustSlipMng)));
            //}
            
            //return custSlipMngList;

            if (this._custSlipMngList == null)
            {
                int count = 0;
                CustSlipMngAcs custSlipMngAcs = new CustSlipMngAcs();
                int status = custSlipMngAcs.SearchOnlyCustSlipMng(out count, enterpriseCode);
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    _custSlipMngList = new List<CustSlipMng>((CustSlipMng[])custSlipMngAcs.CustSlipMngList.ToArray(typeof(CustSlipMng)));
                }
            }

            return this._custSlipMngList;
            // UPD 2014/05/08 PM-SCM速度改良 フェーズ２№05.得意先マスタ（伝票管理）取得改良対応 -------------------------------------<<<<<
        }
        #endregion
        

        #region ●伝票印刷設定マスタ
        /// <summary>
        /// 伝票印刷設定マスタ情報取得処理
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <returns></returns>
        private List<SlipPrtSet> GetPrtSetInfo(string enterpriseCode)
        {
            // UPD 2014/02/05 SCM仕掛一覧№10627対応 ----------------------------------->>>>>
            //SlipPrtSetAcs slipPrtSetAcs = new SlipPrtSetAcs();
            //ArrayList retSlipPrtSet;
            //List<SlipPrtSet> slipPrtSetList = new List<SlipPrtSet>();
            //int status = slipPrtSetAcs.SearchSlipPrtSet(out retSlipPrtSet, enterpriseCode);
            //if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            //{
            //    slipPrtSetList = new List<SlipPrtSet>((SlipPrtSet[])retSlipPrtSet.ToArray(typeof(SlipPrtSet)));
            //}
            //return slipPrtSetList;

            ArrayList retSlipPrtSet;
            if (_slipPrtSetList == null)
            {
                SlipPrtSetAcs slipPrtSetAcs = new SlipPrtSetAcs();
                int status = slipPrtSetAcs.SearchSlipPrtSet(out retSlipPrtSet, enterpriseCode);
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    _slipPrtSetList = new List<SlipPrtSet>((SlipPrtSet[])retSlipPrtSet.ToArray(typeof(SlipPrtSet)));
                }
            }
            return _slipPrtSetList;

            // UPD 2014/02/05 SCM仕掛一覧№10627対応 -----------------------------------<<<<<
        }
        #endregion
        // -- ADD 2011/09/21   ------ <<<<<<

        // ----- ADD 2011/10/12 --------------------------->>>>>
        /// <summary>
        /// 車台番号→シャシー№生成処理
        /// </summary>
        /// <param name="frameNo">車台番号</param>
        /// <param name="frameModel">車台型式</param>
        /// <param name="chassisNo">シャシNo</param>
        /// <returns>STATUS [0:生成完了 0以外:生成失敗]</returns>
        /// <br>Update Note: K2011/12/22 鄧潘ハン</br>
        /// <br>管理番号   ：10707327-00 2012/01/25配信分NAC個別対応</br>
        /// <br>             Redmine#27446   PMSF連携／PCCforNS BLﾊﾟｰﾂｵｰﾀﾞｰ 障害対応の修正</br>
        /// <br>Update Note: 2014/09/22 鹿庭 一郎</br>
        /// <br>管理番号   ：11070184-00 SCM仕掛一覧No.10598対応</br>
        /// <br>             </br>
        public static int GenerateChassisNoFrameFromFrameNo(string frameNo, out string frameModel, out string chassisNo)
        {
            frameModel = "";
            chassisNo = "";

            if (frameNo == "")
            {
                frameModel = "";
                chassisNo = "";
                return 0;
            }

            // 全角文字列が含まれている場合は生成不能
            if (!IsOneByteChar(frameNo.Trim()))
            {
                frameModel = "";
                chassisNo = "";
                return 0;
            }

            int length = frameNo.Length;
            int chassisNoCache = 0;//ADD 2011/12/22 鄧潘ハン Redmine #27446
            string[] split = frameNo.Split(new Char[] { '-' });

            if (split.Length < 0)
            {
                // 分割した結果の配列数が1以下の場合は算定不能
                return 1;
            }
            #region "-----DEL 2014/09/22 鹿庭 ------>>>>>"
            // else if (split.Length == 1)
            // {
            //    frameModel = split[0];					// 車台型式
            //    //chassisNo = "";						// シャシーNo // DEL 2011/12/22 鄧潘ハン Redmine #27446
            //    //-----ADD 2011/12/22 鄧潘ハン Redmine #27446 ------>>>>>
            //    chassisNo = split[0];
            //    if (!int.TryParse(chassisNo, out chassisNoCache))
            //    {
            //        chassisNo = "";
            //    }
            //    //-----ADD 2011/12/22 鄧潘ハン Redmine #27446 ------<<<<<
            //}
            //else if (split.Length == 2)
            //{
            //    frameModel = split[0];					// 車台型式
            //    chassisNo = split[1];					// シャシーNo
            //    //-----ADD 2011/12/22 鄧潘ハン Redmine #27446 ------>>>>>
            //    if (!int.TryParse(chassisNo, out chassisNoCache))
            //    {
            //        chassisNo = "";
            //    }
            //    //-----ADD 2011/12/22 鄧潘ハン Redmine #27446 ------<<<<<
            //}
            //else
            //{
            //    //-----DEL 2011/12/22 鄧潘ハン Redmine #27446 ------>>>>>
            //    //chassisNo = split[1];

            //    //// 配列の２以降を合成する
            //    //for (int i = 3; i < split.Length; i++)
            //    //{
            //    //    chassisNo += "-" + split[i];
            //    //}
            //    //-----DEL 2011/12/22 鄧潘ハン Redmine #27446 ------<<<<<

            //    chassisNo = "";//ADD 2011/12/22 鄧潘ハン Redmine #27446

            //    frameModel = split[0];					// 車台型式
            //}
            #endregion "-----DEL 2014/09/22 鹿庭 ------<<<<<"

            // -----ADD 2014/09/22 鹿庭 ------>>>>>
            else if (split.Length == 1)
            {
                // 分割なし
                frameModel = split[0];					// 車台型式
                chassisNo = split[0];                   // シャシーNo
            }
            else if (split.Length == 2)
            {
                // ２分割
                frameModel = split[0];					// 車台型式
                chassisNo = split[1];                   // シャシーNo
            }
            else
            {
                // ３分割以上
                frameModel = split[0];					// 車台型式
                chassisNo = split[1];                   // シャシーNo
                for (int i = 2; i < split.Length; i++)
                {
                    // 2つ目以降のハイフンは文字列とする
                    chassisNo += "-" + split[i];
                }
            }

            // シャシーNo.が全て数値の場合はint範囲以内に制限（文字列含む場合はそのまま）
            if (System.Text.RegularExpressions.Regex.IsMatch(chassisNo, "^[0-9]+$"))
            {
                if (!int.TryParse(chassisNo, out chassisNoCache))
                {
                    chassisNo = "";
                }
            }
            // -----ADD 2014/09/22 鹿庭 ------<<<<<

            // 桁数チェック
            if (frameModel.Length > 16)
            {
                frameModel = frameModel.Remove(16, frameModel.Length - 16);
            }

            // -----DEL 2014/09/22 鹿庭 ------>>>>>
            // if (chassisNo.Length > 18)
            // {
            //  chassisNo = chassisNo.Remove(18, chassisNo.Length - 18);
            // }
            // -----DEL 2014/09/22 鹿庭 ------<<<<<

            return 0;
        }

        /// <summary>
        /// 1バイト文字で構成された文字列であるか判定 
        /// 1バイト文字のみで構成された文字列 : True 
        /// 2バイト文字が含まれている文字列 : False
        /// </summary>
        /// <param name="str"></param>
        /// <returns>status</returns>
        private static bool IsOneByteChar(string str)
        {
            byte[] byte_data = System.Text.Encoding.GetEncoding(932).GetBytes(str);
            if (byte_data.Length == str.Length)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        // ----- ADD 2011/10/12 ---------------------------<<<<<
        // --- ADD T.Nishi 2012/05/30 ---------->>>>>
        #region 自動見積部品コード取得処理
        /// <summary>
        /// 自動見積部品コード取得処理
        /// </summary>
        /// <returns>AutoEstimatePartsCd</returns>
        private string GetAutoEstimatePartsCd(int TbsPartsCode, int CompoMainFlag, int PartsPosMainFlag)
        {
            string AutoEstimatePartsCd = "";  //自動見積部品コード
            PartsSearchController _PartsSearchController = new PartsSearchController();
            int status = _PartsSearchController.GetAutoEstimatePartsCd(out AutoEstimatePartsCd, TbsPartsCode, CompoMainFlag, PartsPosMainFlag);

            if (status == 0) { AutoEstimatePartsCd.Trim(); }
            else { AutoEstimatePartsCd = ""; }

            return AutoEstimatePartsCd;
        }
        #endregion
        // --- ADD T.Nishi 2012/05/30 ---------->>>>>

        // ADD 2015/01/29 SCM高速化Redmine#87対応 --------------------------------------->>>>>
        /// <summary>
        ///  提供区分がユーザー登録の提供データか判定します
        /// </summary>
        /// <param name="goodsUnitData">商品情報</param>
        /// <returns>true:ユーザー登録の提供データ false:提供データ・ユーザー登録のみ</returns>
        private bool IsUserRegistAtOfferKubun(GoodsUnitData goodsUnitData)
        {
            if (goodsUnitData == null) return false;

            switch (goodsUnitData.OfferKubun)
            {
                case 0:                 // ユーザー登録
                    {
                        // 0:ユーザー登録
                        if (goodsUnitData.OfferDataDiv == 0)
                        {
                            return false;
                        }
                        // 1:提供データ
                        else if (goodsUnitData.OfferDataDiv == 1)
                        {
                            return true;
                        }
                        return false;
                    }
                case 1: return true;    // 1:提供純正編集
                case 2: return true;    // 2:提供優良編集
                case 3: return false;   // 3:提供純正
                case 4: return false;   // 4:提供優良
                case 5: return false;   // 5:TBO
                case 7: return false;   // 7:オリジナル部品
                default:
                    return false;
            }
        }

        /// <summary>
        ///  提供データの価格情報を取得します
        /// </summary>
        /// <param name="goodsUnitData"></param>
        /// <param name="mkrSuggestRtPricList"></param>
        private void GetOfferGoodsPrice(GoodsUnitData goodsUnitData, out List<GoodsPrice> mkrSuggestRtPricList)
        {
            mkrSuggestRtPricList = null;

            if (goodsUnitData == null) return;

            // メーカーコード、品番より提供データの価格情報を取得
            ArrayList goodsPriceUWorkList = new ArrayList();
            GoodsPriceUWork goodsPriceUWork = new GoodsPriceUWork();
            ArrayList lstCond = new ArrayList();
            ArrayList lstRst;
            ArrayList lstRstPrm;
            ArrayList lstPrmPrice;

            OfrPrtsSrchCndWork work = new OfrPrtsSrchCndWork();
            work.MakerCode = goodsUnitData.GoodsMakerCd;
            work.PrtsNo = goodsUnitData.GoodsNo;
            lstCond.Add(work);

            if (_iOfferPartsInfo == null) _iOfferPartsInfo = MediationOfferPartsInfo.GetOfferPartsInfo();
            int status = _iOfferPartsInfo.GetOfrPartsInf(lstCond, out lstRst, out lstRstPrm, out lstPrmPrice);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if ((lstPrmPrice != null) && (lstPrmPrice.Count != 0))
                {
                    // 優良価格
                    foreach (OfferJoinPriceRetWork retWork in lstPrmPrice)
                    {
                        goodsPriceUWork = new GoodsPriceUWork();
                        goodsPriceUWork.GoodsMakerCd = retWork.PartsMakerCd;
                        goodsPriceUWork.GoodsNo = retWork.PrimePartsNoWithH;
                        goodsPriceUWork.ListPrice = retWork.NewPrice;
                        goodsPriceUWork.OfferDate = retWork.OfferDate;
                        goodsPriceUWork.OpenPriceDiv = retWork.OpenPriceDiv;
                        goodsPriceUWork.PriceStartDate = retWork.PriceStartDate;

                        goodsPriceUWorkList.Add(goodsPriceUWork);
                    }
                }
                if ((lstRst != null) && (lstRst.Count != 0))
                {
                    // 純正価格
                    foreach (RetPartsInf retWork in lstRst)
                    {
                        goodsPriceUWork = new GoodsPriceUWork();
                        goodsPriceUWork.GoodsMakerCd = retWork.CatalogPartsMakerCd;
                        goodsPriceUWork.GoodsNo = retWork.ClgPrtsNoWithHyphen;
                        // UPD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
                        //goodsPriceUWork.ListPrice = retWork.PartsPrice;
                        double listPrice = retWork.PartsPrice;
                        this.ReflectIsolIsland(0, retWork.CatalogPartsMakerCd, 3, ref listPrice);
                        goodsPriceUWork.ListPrice = listPrice;
                        // UPD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<
                        goodsPriceUWork.OfferDate = retWork.OfferDate;
                        goodsPriceUWork.OpenPriceDiv = retWork.OpenPriceDiv;
                        goodsPriceUWork.PriceStartDate = retWork.PartsPriceStDate;

                        goodsPriceUWorkList.Add(goodsPriceUWork);
                    }
                }
            }

            if (goodsPriceUWorkList != null && goodsPriceUWorkList.Count != 0)
            {
                // 価格情報リスト(ArrayList)をGoodsPriceのリストに変換
                GetGoodsPriceListFromGoodsPriceUWorkList(goodsPriceUWorkList, out mkrSuggestRtPricList);
            }
        }

        /// <summary>
        /// 価格情報データオブジェクトリスト取得処理
        /// </summary>
        /// <param name="goodsPriceWorkList">価格情報データワークオブジェクトリスト</param>
        /// <param name="goodsPriceList">価格情報データオブジェクトリスト</param>
        private void GetGoodsPriceListFromGoodsPriceUWorkList(ArrayList goodsPriceWorkList, out List<GoodsPrice> goodsPriceList)
        {
            goodsPriceList = new List<GoodsPrice>();

            foreach (GoodsPriceUWork goodsPriceUWork in goodsPriceWorkList)
            {
                GoodsPrice goodsPrice = new GoodsPrice();

                goodsPrice.CreateDateTime = goodsPriceUWork.CreateDateTime; // 作成日時
                goodsPrice.UpdateDateTime = goodsPriceUWork.UpdateDateTime; // 更新日時
                goodsPrice.EnterpriseCode = goodsPriceUWork.EnterpriseCode; // 企業コード
                goodsPrice.FileHeaderGuid = goodsPriceUWork.FileHeaderGuid; // GUID
                goodsPrice.UpdEmployeeCode = goodsPriceUWork.UpdEmployeeCode; // 更新従業員コード
                goodsPrice.UpdAssemblyId1 = goodsPriceUWork.UpdAssemblyId1; // 更新アセンブリID1
                goodsPrice.UpdAssemblyId2 = goodsPriceUWork.UpdAssemblyId2; // 更新アセンブリID2
                goodsPrice.LogicalDeleteCode = goodsPriceUWork.LogicalDeleteCode; // 論理削除区分
                goodsPrice.GoodsMakerCd = goodsPriceUWork.GoodsMakerCd; // 商品メーカーコード
                goodsPrice.GoodsNo = goodsPriceUWork.GoodsNo; // 商品番号
                goodsPrice.PriceStartDate = goodsPriceUWork.PriceStartDate; // 価格開始日
                goodsPrice.ListPrice = goodsPriceUWork.ListPrice; // 定価（浮動）
                goodsPrice.SalesUnitCost = goodsPriceUWork.SalesUnitCost; // 原価単価
                goodsPrice.StockRate = goodsPriceUWork.StockRate; // 仕入率
                goodsPrice.OpenPriceDiv = goodsPriceUWork.OpenPriceDiv; // オープン価格区分
                goodsPrice.OfferDate = goodsPriceUWork.OfferDate; // 提供日付
                goodsPrice.UpdateDate = goodsPriceUWork.UpdateDate; // 更新年月日

                goodsPriceList.Add(goodsPrice);
            }
        }

        // ADD 2015/01/29 SCM高速化Redmine#87対応 ---------------------------------------<<<<<

        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
        /// <summary>
        /// 離島価格反映処理（商品検索アクセスクラスMAKHN04112Aを元にしています）
        /// </summary>
        /// <param name="taxationCode"></param>
        /// <param name="goodsMakerCd"></param>
        /// <param name="offerKubun"></param>
        /// <param name="unitPrice"></param>
        private void ReflectIsolIsland(int taxationCode, int goodsMakerCd, int offerKubun, ref double unitPrice)
        {
            if (offerKubun >= 3) // 提供分のみ
            {
                // 離島価格反映
                IsolIslandPrcWork isolIslandPrc = this.GetIsolIslandPrc(this._iSectionCode, goodsMakerCd, unitPrice);
                if (isolIslandPrc != null) unitPrice = this.GetIsolIslandPrice(taxationCode, isolIslandPrc, unitPrice);
            }
        }

        /// <summary>
        /// 離島価格情報取得処理
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <param name="goodsMakerCode"></param>
        /// <param name="unitPrice"></param>
        /// <returns></returns>
        private IsolIslandPrcWork GetIsolIslandPrc(string sectionCode, int goodsMakerCode, double unitPrice)
        {
            return Referee.Searcher.IsolIslandList.Find(
                delegate(IsolIslandPrcWork iso)
                {
                    if ((iso.UpperLimitPrice >= unitPrice) &&
                        (iso.MakerCode == goodsMakerCode) &&
                        (iso.SectionCode.Trim() == sectionCode.Trim()))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );
        }

        /// <summary>
        /// 離島価格取得処理
        /// </summary>
        /// <param name="taxationDivCd"></param>
        /// <param name="isolIslandPrc"></param>
        /// <param name="targetPrice"></param>
        /// <returns></returns>
        private double GetIsolIslandPrice(int taxationDivCd, IsolIslandPrcWork isolIslandPrc, double targetPrice)
        {
            double retPrice = targetPrice;
            
            this.PriceCalculator.CalclatePriceByRateForListPrice(taxationDivCd, isolIslandPrc.UpRate, ref retPrice);

            return retPrice;
        }
        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<

        // ADD 2015/06/18 豊沢 SCM高速化 Redmine3941対応 --------------------->>>>>
        /// <summary>
        /// 売上データ補正処理
        /// </summary>
        /// <param name="salesDataList">売上データ一覧</param>
        /// <returns></returns>
        public void AdjustSCMAnswerData(CustomSerializeArrayList salesDataList)
        {
            ArrayList dataObjectList = null;
            ArrayList answerList = null;
            ISCMOrderHeaderRecord headerRecord = null;
            SCMAcOdrDataWork odrDataWork = null;
            ArrayList tempList = null;
            string key = string.Empty;
            Dictionary<string, ISCMOrderDetailRecord> autoAnsMthdDetailMap = new Dictionary<string, ISCMOrderDetailRecord>();

            // SCM受注明細データ(問合せ・発注)単位で処理を行う
            foreach (ISCMOrderDetailRecord detailRecord in Referee.Searcher.DetailRecordList)
            {
                // 自動回答では品番変更は行われませんが売上伝票入力と同一処理を行うため対応します
                //key = string.Format("{0}/{1}/{2}", detailRecord.InquiryNumber, detailRecord.InqRowNumber, detailRecord.InqRowNumDerivedNo); // DEL 2015/06/30 湯上 Redmine#3941対応
                key = string.Format("{0}/{1}/{2}/{3}/{4}", detailRecord.InquiryNumber, detailRecord.InqRowNumber, detailRecord.InqRowNumDerivedNo, detailRecord.GoodsNo, detailRecord.GoodsMakerCd);//ADD 2015/06/30 湯上 Redmine#3941対応

                headerRecord = null;

                // SCM受注データ取得
                if (Referee.Searcher.RelationalHeaderMap.ContainsKey(detailRecord.ToRelationKey()))
                {
                    headerRecord = Referee.Searcher.RelationalHeaderMap[detailRecord.ToRelationKey()];
                }

                // SCM受注データが存在し自動回答方式が新方式の場合のみ、SCM受注明細データ(問合せ・発注)を保持する
                if (headerRecord != null && headerRecord.AutoAnsMthd.Equals(1) && !autoAnsMthdDetailMap.ContainsKey(key))
                {
                    autoAnsMthdDetailMap.Add(key, detailRecord);
                }
            }

            foreach (object salesDataObj in salesDataList)
            {
                // 売上データ一覧よりSCM受注明細データ(回答)のリストを検索
                dataObjectList = salesDataObj as ArrayList;
                if (dataObjectList == null)
                {
                    continue;
                }

                answerList = null;
                odrDataWork = null;
                foreach (object obj in dataObjectList)
                {
                    // SCM受注データを検索
                    if (odrDataWork == null)
                    {
                        odrDataWork = obj as SCMAcOdrDataWork;
                    }

                    if (answerList == null)
                    {
                        tempList = obj as ArrayList;
                        if (tempList != null && tempList.Count > 0 && tempList[0] is SCMAcOdrDtlAsWork)
                        {
                            answerList = tempList;
                        }
                    }
                }

                // 回答対象のSCM受注データが存在し自動回答方式が新方式の場合のみ処理継続
                if (odrDataWork == null || !odrDataWork.AutoAnsMthd.Equals(1))
                {
                    continue;
                }

                if (answerList != null)
                {
                    foreach (SCMAcOdrDtlAsWork answerWork in answerList)
                    {
                        // 自動回答では品番変更は行われませんが売上伝票入力と同一処理を行うため対応します
                        //key = string.Format("{0}/{1}/{2}", answerWork.InquiryNumber, answerWork.InqRowNumber, answerWork.InqRowNumDerivedNo); // DEL 2015/06/30 湯上 Redmine#3941対応
                        key = string.Format("{0}/{1}/{2}/{3}/{4}", answerWork.InquiryNumber, answerWork.InqRowNumber, answerWork.InqRowNumDerivedNo, answerWork.GoodsNo, answerWork.GoodsMakerCd); // ADD 2015/06/30 湯上 Redmine#3941対応

                        // 品番、メーカーコードが一致するSCM受注データが存在する場合のみ処理継続
                        if (!autoAnsMthdDetailMap.ContainsKey(key))
                        {
                            continue;
                        }

                        // 品番、メーカーコードが一致するSCM受注明細データ(回答)に
                        // SCM受注明細データ(問合せ・発注)のデータをコピー
                        answerWork.GoodsSpecialNote = autoAnsMthdDetailMap[key].GoodsSpecialNote;
                        answerWork.GoodsSpecialNtForFac = autoAnsMthdDetailMap[key].GoodsSpecialNtForFac;
                        answerWork.GoodsSpecialNtForCOw = autoAnsMthdDetailMap[key].GoodsSpecialNtForCOw;
                        answerWork.PrmSetDtlNo2 = autoAnsMthdDetailMap[key].PrmSetDtlNo2;
                        answerWork.PrmSetDtlName2 = autoAnsMthdDetailMap[key].PrmSetDtlName2;
                        answerWork.PrmSetDtlName2ForFac = autoAnsMthdDetailMap[key].PrmSetDtlName2ForFac;
                        answerWork.PrmSetDtlName2ForCOw = autoAnsMthdDetailMap[key].PrmSetDtlName2ForCOw;
                        answerWork.MkrSuggestRtPric = autoAnsMthdDetailMap[key].MkrSuggestRtPric;
                        answerWork.OpenPriceDiv = autoAnsMthdDetailMap[key].OpenPriceDiv;
                    }
                }
            }
            // ADD 2015/06/18 豊沢 SCM高速化 Redmine3941対応 ---------------------<<<<<
        }
    }
}