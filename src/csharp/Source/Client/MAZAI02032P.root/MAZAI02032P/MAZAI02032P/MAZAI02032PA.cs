using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;
using System.Text;
using System.Windows.Forms;

using Broadleaf.Application.Common;
using Broadleaf.Application.Controller;
using Broadleaf.Application.UIData;
using Broadleaf.Drawing.Printing;
using Broadleaf.Library.Globarization;
using Broadleaf.Library.Resources;
using Broadleaf.Library.Text;
using Broadleaf.Library.Windows.Forms;

namespace Broadleaf.Drawing.Printing
{
	/// <summary>
	/// 在庫･倉庫移動確認表印刷クラス
	/// </summary>
	/// <remarks>
    /// <br>Note       : 在庫･倉庫移動確認表の印刷を行う。</br>
	/// <br>Programmer : 22013 久保 将太</br>
	/// <br>Date       : 2007.03.08</br>
    /// <br>UpdateNote : 2009/03/16 照田 貴志　不具合対応[12331]</br>
	/// </remarks>
	class MAZAI02032PA: IPrintProc
	{

		#region ■ Constructor
		/// <summary>
		/// 在庫･倉庫移動確認表印刷クラスコンストラクタ
		/// </summary>
		/// <remarks>
		/// <br>Note       : 在庫･倉庫移動確認表印刷クラスのインスタンスの作成を行う。</br>
		/// <br>Programmer : 22013 久保 将太</br>
		/// <br>Date       : 2007.03.08</br>
		/// </remarks>
		public MAZAI02032PA()
		{
		}

		/// <summary>
		/// 在庫･倉庫移動確認表印刷クラスコンストラクタ
		/// </summary>
		/// <param name="printInfo">印刷情報オブジェクト</param>
		/// <remarks>
		/// <br>Note       : 在庫･倉庫移動確認表印刷クラスのインスタンスの作成を行う。</br>
		/// <br>Programmer : 22013 久保 将太</br>
		/// <br>Date       : 2007.03.08</br>
		/// </remarks>
		public MAZAI02032PA( object printInfo )
		{
			this._printInfo = printInfo as SFCMN06002C;
			this._stockMoveCndtn = this._printInfo.jyoken as StockMoveCndtn;
		}
		#endregion ■ Constructor

		#region ■ Pricate Const
		private const string ct_ReportForm_NameSpace = "Broadleaf.Drawing.Printing";
		private const string ct_Space			= "　";
        //--- DEL 2008/08/12 ---------->>>>>
        //private const string ct_Extr_Top		= "ＴＯＰ";
        //private const string ct_Extr_End		= "ＥＮＤ";
        //--- DEL 2008/08/12 ----------<<<<<
        //--- ADD 2008/08/12 ---------->>>>>
        private const string ct_Extr_Top		= "最初から";
        private const string ct_Extr_End		= "最後まで";
        //--- ADD 2008/08/12 ----------<<<<<
        private const string ct_RangeConst = "：{0} 〜 {1}";
		#endregion ■ Pricate Const

		#region ■ Private Member
		private SFCMN06002C _printInfo;					// 印刷情報クラス
		private StockMoveCndtn _stockMoveCndtn;		    // 抽出条件クラス
		#endregion ■ Private Member

		#region ■ Exception Class
		/// <summary> 例外クラス </summary>
        private class StockMoveException: ApplicationException
		{
			private int _status;
			#region ◆ Constructor
			/// <summary>
			/// 例外クラスコンストラクタ
			/// </summary>
			/// <param name="message">メッセージ</param>
			/// <param name="status">ステータス</param>
			public StockMoveException(string message, int status): base(message)
			{
				this._status = status; 
			}
			#endregion
    
			#region ◆ Public Property
			/// <summary> ステータスプロパティ </summary>
			public int Status
			{
				get{ return this._status; }
			}
			#endregion
		}
		#endregion ■ Exception Class

		#region ■ IPrintProc メンバ
		#region ◆ Public Property
		/// <summary>
		/// 印刷情報取得プロパティ
		/// </summary>
		public SFCMN06002C Printinfo
		{
			get { return this._printInfo; }
			set { this._printInfo = value;}
		}
		#endregion ◆ Public Property

		#region ◆ Public Method
		#region ◎ 印刷処理開始
		/// <summary>
		/// 印刷処理開始
		/// </summary>
		/// <returns></returns>
		/// <remarks>
		/// <br>Note       : 印刷を開始する。</br>
		/// <br>Programmer : 22013 久保 将太</br>
		/// <br>Date       : 2007.03.08</br>
		/// </remarks>
		public int StartPrint ()
		{
			return PrintMain();
		}
		#endregion
		#endregion ◆ Public Method
		#endregion ■ IPrintProc メンバ

		#region ■ Private Member
		#region ◆ 印刷処理
		/// <summary>
		/// 印刷処理
		/// </summary>
		/// <returns>Status</returns>
		/// <remarks>
		/// <br>Note       : 印刷処理を行う。</br>
		/// <br>Programmer : 22013 久保 将太</br>
		/// <br>Date       : 2007.03.08</br>
		/// </remarks>
		private int PrintMain ()
		{
			int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
			// 印刷フォームクラスインスタンス作成
			DataDynamics.ActiveReports.ActiveReport3 prtRpt = null;
			
			try
			{
				// レポートインスタンス作成
				this.CreateReport(out prtRpt, this._printInfo.prpid); 
				if (prtRpt == null) return status;

				// 各種プロパティ設定
				status = this.SettingProperty(ref prtRpt);
				if (status != 0) return status;
							
				// データソース設定
				prtRpt.DataSource = this._printInfo.rdData;
                prtRpt.DataMember = MAZAI02034EA.ct_Tbl_StockMove;
				
				// 印刷共通情報プロパティ設定
				Broadleaf.Windows.Forms.SFCMN00293UC commonInfo;
			    this.SetPrintCommonInfo(out commonInfo);

			    // プレビュー有無				
			    int mode = this._printInfo.prevkbn;
				
			    // 出力モードがＰＤＦの場合、無条件でプレビュー無
			    if (this._printInfo.printmode == 2)
			    {
			        mode = 0;
			    }
				
			    switch(mode)
			    {
			        case 0:		// プレビュ無
			        {
			            Broadleaf.Windows.Forms.SFCMN00293UB processForm = new Broadleaf.Windows.Forms.SFCMN00293UB();
						
			            // 共通条件設定
			            processForm.CommonInfo = commonInfo;

			            // プログレスバーUPイベント追加
			            if (prtRpt is IPrintActiveReportTypeCommon)
			            {
			                ((IPrintActiveReportTypeCommon)prtRpt).ProgressBarUpEvent +=
			                    new ProgressBarUpEventHandler(processForm.ProgressBarUpEvent);
			            }

			            // 印刷実行
			            status = processForm.Run(prtRpt);

			            // 戻り値設定
			            this._printInfo.status = status;

			            break;
			        }
			        case 1:		// プレビュ有
			        {
			            Broadleaf.Windows.Forms.SFCMN00293UA viewForm = new Broadleaf.Windows.Forms.SFCMN00293UA();

			            // 共通条件設定
			            viewForm.CommonInfo   = commonInfo;

			            // プレビュー実行
			            status = viewForm.Run(prtRpt); 

			            // 戻り値設定
			            this._printInfo.status = status;
						
			            break;
			        }
			    }

			    // ＰＤＦ出力の場合
			    if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
			    {
			        switch (this._printInfo.printmode)
			        {
			            case 1:  // プリンタ
			                break;
			            case 2:  // ＰＤＦ
			            case 3:  // 両方(プリンタ + ＰＤＦ)
			            {
			                // ＰＤＦ表示フラグON
			                this._printInfo.pdfopen = true;
   
			                // 両方印刷時のみ履歴保存
			                if (this._printInfo.printmode == 3)
			                {
			                    // 出力履歴管理に追加
			                    Broadleaf.Windows.Forms.SFANL06101UA pdfHistoryControl = new Broadleaf.Windows.Forms.SFANL06101UA();
			                    pdfHistoryControl.AddPrintInfo(this._printInfo.key, this._printInfo.prpnm, this._printInfo.prpnm,
			                        this._printInfo.pdftemppath);
			                }
			                break;
			            }
			        }
			    }

                // ---ADD 2009/03/16 不具合対応[12331] --------------------------------------------------------->>>>>
                // 更新(印刷が正常終了で、集計以外時)
                if ((status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL) &&
                    (this._stockMoveCndtn.PrintDiv != 13))
                {
                    string errMsg;
                    StockMoveAcs stockMoveAcs = new StockMoveAcs();
                    status = stockMoveAcs.UpdateStockMoveMain((DataView)this.Printinfo.rdData, out errMsg);
                    if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        this.MsgDispProc(emErrorLevel.ERR_LEVEL_STOPDISP, errMsg, -1, MessageBoxButtons.OK, MessageBoxDefaultButton.Button1);
                    }
                }
                // ---ADD 2009/03/16 不具合対応[12331] ---------------------------------------------------------<<<<<
			}
			catch(Exception ex)
			{
			    this.MsgDispProc(emErrorLevel.ERR_LEVEL_STOPDISP,
			        ex.Message, -1, MessageBoxButtons.OK, MessageBoxDefaultButton.Button1);
			}
			finally
			{
			    if ( prtRpt != null )
			    {
			        prtRpt.Dispose();
			    }
			}
			return status;
		}
		#endregion ◆ 印刷処理

		#region ◆ レポートフォーム設定関連
		#region ◎ 各種ActiveReport帳票インスタンス作成
		/// <summary>
		/// 各種ActiveReport帳票インスタンス作成
		/// </summary>
		/// <param name="rptObj">インスタンス化された帳票フォームクラス</param>
		/// <param name="prpid">帳票フォームID</param>
		/// <returns></returns>
		/// <remarks>
		/// <br>Note       : 指定されたアセンブリ及びクラス名より、クラスをインスタンス化します。</br>
		/// <br>Programmer : 22013 久保 将太</br>
		/// <br>Date       : 2007.03.08</br>
		/// </remarks>
		private void CreateReport(out DataDynamics.ActiveReports.ActiveReport3 rptObj,string prpid)
		{
			// 印刷フォームクラスインスタンス作成
			rptObj = (DataDynamics.ActiveReports.ActiveReport3)this.LoadAssemblyReport(
				prpid.Trim(), ct_ReportForm_NameSpace + "." + prpid.Trim(), 
				typeof(DataDynamics.ActiveReports.ActiveReport3));
		}
		#endregion

		#region ◎ レポートアセンブリインスタンス化
		/// <summary>
		/// レポートアセンブリインスタンス化
		/// </summary>
		/// <param name="asmname">アセンブリ名称</param>
		/// <param name="classname">クラス名称</param>
		/// <param name="type">実装するクラス型</param>
		/// <returns>インスタンス化されたクラス</returns>
		/// <remarks>
		/// <br>Note       : 指定されたアセンブリ及びクラス名より、クラスをインスタンス化します。</br>
		/// <br>Programmer : 22013 久保 将太</br>
		/// <br>Date       : 2007.03.08</br>
		/// </remarks>
		private	object LoadAssemblyReport(string asmname, string classname, Type type)
		{
			object	obj	= null;
			try
			{
				System.Reflection.Assembly	asm	= System.Reflection.Assembly.Load(asmname);
				Type	objType	= asm.GetType(classname);
				if (objType != null)
				{
					if ((objType == type) || (objType.IsSubclassOf(type) == true) || (objType.GetInterface(type.Name).Name == type.Name))
					{
						obj = Activator.CreateInstance(objType);
					}
				}
			}
			catch(System.IO.FileNotFoundException)
			{
				throw new StockMoveException(asmname + "が存在しません。",-1);
			}
			catch(System.Exception er)
			{
				throw new StockMoveException(er.Message, -1);
			}
			return obj;
		}
		#endregion

		#region ◎ 印刷画面共通情報設定

		/// <summary>
		/// 印刷画面共通情報設定
		/// </summary>
		/// <param name="commonInfo"></param>
		/// <returns>ステータス</returns>
		/// <remarks>
		/// <br>Note       : 印刷画面共通条件の設定を行います。</br>
		/// <br>Programmer : 22013 久保 将太</br>
		/// <br>Date       : 2007.03.08</br>
		/// </remarks>
		private void SetPrintCommonInfo(out Broadleaf.Windows.Forms.SFCMN00293UC commonInfo)
		{
			int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
			commonInfo = new Broadleaf.Windows.Forms.SFCMN00293UC();
			
			// 帳票チャート共通部品クラス
			SFCMN00331C cmnCommon = new SFCMN00331C(); 

			// PDFパス取得
			string pdfPath = "";
			string pdfName = "";
		
			// プリンタ名
			commonInfo.PrinterName = this._printInfo.prinm;
			// 帳票名
			commonInfo.PrintName   = this._printInfo.prpnm;				
			// 印刷モード
			commonInfo.PrintMode   = this.Printinfo.printmode;
			// 印刷件数
			commonInfo.PrintMax    = (this._printInfo.rdData as DataView).Count;
			
			status = cmnCommon.GetPdfSavePathName(this._printInfo.prpnm, ref pdfPath, ref pdfName);
			this._printInfo.pdftemppath = pdfPath + pdfName;
			commonInfo.PdfFullPath = this._printInfo.pdftemppath;

			// 上余白
			commonInfo.MarginsTop  = this._printInfo.py;
			// 左余白
			commonInfo.MarginsLeft = this._printInfo.px;
		}

		#endregion
		
		#region ◎ 各種プロパティ設定
		
		/// <summary>
		/// 各種プロパティ設定
		/// </summary>
		/// <param name="rpt">インスタンス化された帳票フォームクラス</param>
		/// <returns>ステータス</returns>
		/// <remarks>
		/// <br>Note       : 各種プロパティを設定します。</br>
		/// <br>Programmer : 22013 久保 将太</br>
		/// <br>Date       : 2007.03.08</br>
		/// </remarks>
		private int SettingProperty(ref DataDynamics.ActiveReports.ActiveReport3 rpt)
		{
			int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;

			// ActiveReportインターフェースにキャスト
			IPrintActiveReportTypeList instance = rpt as IPrintActiveReportTypeList;

			// 印刷条件取得
            StockMoveCndtn extraInfo = (StockMoveCndtn)this._printInfo.jyoken;

			// ソート順プロパティ設定
			//instance.PageHeaderSortOderTitle = "";                                                            //DEL 2008/10/02 出力順追加の為
            // --- ADD 2008/10/02 ------------------------------------------------------------------------------------------------------->>>>>
            // 出力順
            if (this._stockMoveCndtn.OutputOrder == StockMoveCndtn.OutputOrderDivState.ShipArrivalDate)       // 対象日順
            {
                instance.PageHeaderSortOderTitle = "対象日順";
            }
            else if (this._stockMoveCndtn.OutputOrder == StockMoveCndtn.OutputOrderDivState.CreateDate)       // 入力日順
            {
                instance.PageHeaderSortOderTitle = "入力日順";
            }
            else if (this._stockMoveCndtn.OutputOrder == StockMoveCndtn.OutputOrderDivState.Warehouse)        // 相手倉庫順
            {
                instance.PageHeaderSortOderTitle = "相手倉庫順";
            }
            // --- ADD 2008/10/02 -------------------------------------------------------------------------------------------------------<<<<<

			// 帳票出力設定情報取得 
			PrtOutSet prtOutSet;
			string message;
			int st = StockMoveAcs.ReadPrtOutSet(out prtOutSet, out message);
			if (st != 0) 
			{
                throw new StockMoveException(message, status);
            }
			
			// 抽出条件ヘッダ出力区分
			instance.ExtraCondHeadOutDiv = prtOutSet.ExtraCondHeadOutDiv;

			// 抽出条件編集処理
			StringCollection extraInfomations;
			this.MakeExtarCondition( out extraInfomations );

			instance.ExtraConditions = extraInfomations; 
			
			// フッタ出力区分
			instance.PageFooterOutCode   = prtOutSet.FooterPrintOutCode;

			// フッタ出力メッセージ
			StringCollection footers = new StringCollection();
			footers.Add(prtOutSet.PrintFooter1);
			footers.Add(prtOutSet.PrintFooter2);
			
			instance.PageFooters = footers;

			// 印刷情報オブジェクト
			instance.PrintInfo = this._printInfo;

			// ヘッダーサブタイトル
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki
            //object[] titleObj = new object[]{ 
            //    this._stockMoveCndtn.StockMoveFormalDivName,	// 帳票区分(在庫移動or倉庫移動)
            //    this._stockMoveCndtn.ShipmentArrivalDivName,	// 処理区分(未出荷,･･･)
            //    this._stockMoveCndtn.GrossPrintDivName };		// 集計単位(製番or商品)
            //instance.PageHeaderSubtitle = string.Format("{0}({1}・{2})", titleObj);
            //--- DEL 2008.08.12 ---------->>>>>
            //object[] titleObj = new object[]{ 
            //    this._stockMoveCndtn.StockMoveFormalDivName,	// 帳票区分(在庫移動or倉庫移動)     
            //    this._stockMoveCndtn.ShipmentArrivalDivName};	// 処理区分(未出荷,･･･)
            //instance.PageHeaderSubtitle = string.Format("{0}({1})", titleObj);
            //--- DEL 2008.08.12 ----------<<<<<
            //--- ADD 2008.08.12 ---------->>>>>
            instance.PageHeaderSubtitle = string.Format("{0}", this._printInfo.prpnm);
            //--- ADD 2008.08.12 ----------<<<<<
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki
            
			// その他データ
			// Todo:移動元とか渡す？抽出条件渡るからいいか？
			instance.OtherDataList = null;

			status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

			return status;
		}

		#endregion

		#region ◎ 抽出条件出力情報作成
		/// <summary>
		/// 抽出条件出力情報作成
		/// </summary>
		/// <param name="extraConditions">作成後抽出条件コレクション</param>
		/// <remarks>
		/// <br>Note       : 出力する抽出条件文字列を作成する。</br>
		/// <br>Programmer : 22013 久保 将太</br>
		/// <br>Date       : 2007.03.08</br>
		/// </remarks>
		private void MakeExtarCondition( out StringCollection extraConditions )
		{
            //--- DEL 2008/08/12 ---------->>>>>
            //const string ct_Section = "拠点コード";
            //const string ct_WareHouse = "倉庫コード";

            //string swName = string.Empty;		// 拠点･倉庫タイトル
            //extraConditions = new StringCollection();


            //// 主倉庫コード ----------------------------------------------------------------------------------------------------
            //swName = string.Format( "{0}{1}", this._stockMoveCndtn.MainExtractTitle, ct_WareHouse );
            //if ( ( this._stockMoveCndtn.St_MainBfAfEnterWarehCd != string.Empty ) || ( this._stockMoveCndtn.Ed_MainBfAfEnterWarehCd != string.Empty ) )
            //{
            //    this.EditCondition( ref extraConditions, 
            //        GetConditionRange( swName, this._stockMoveCndtn.St_MainBfAfEnterWarehCd, this._stockMoveCndtn.Ed_MainBfAfEnterWarehCd ) );
            //}
            //else
            //{
            //    // 開始･終了が空なら「全倉庫」と印字
            //    this.EditCondition( ref extraConditions, string.Format( "{0}： {1}", swName, "全倉庫") );
            //}

            //StringCollection addConditions = new StringCollection();
            //// 抽出日付 ----------------------------------------------------------------------------------------------------
            //string st_ShipArrivalDate = string.Empty;
            //string ed_ShipArrivalDate = string.Empty;
            //// 開始･終了のいずれかが入力されていれば印字
            //if ( ( this._stockMoveCndtn.St_ShipArrivalDate != DateTime.MinValue ) || ( this._stockMoveCndtn.Ed_ShipArrivalDate != DateTime.MinValue ) )
            //{
            //    // 開始
            //    if ( this._stockMoveCndtn.St_ShipArrivalDate != DateTime.MinValue )
            //        st_ShipArrivalDate = TDateTime.DateTimeToString( StockMoveCndtn.ct_DateFomat, this._stockMoveCndtn.St_ShipArrivalDate );
            //    else
            //        st_ShipArrivalDate = ct_Extr_Top;
            //    // 終了
            //    if ( this._stockMoveCndtn.Ed_ShipArrivalDate != DateTime.MinValue )
            //        ed_ShipArrivalDate = TDateTime.DateTimeToString( StockMoveCndtn.ct_DateFomat, this._stockMoveCndtn.Ed_ShipArrivalDate );
            //    else
            //        ed_ShipArrivalDate = ct_Extr_End;

            //    this.EditCondition(
            //        ref addConditions, 
            //        string.Format( 
            //            this._stockMoveCndtn.ExtractDateTitle.PadRight( 7, '　' ) + ct_RangeConst, 
            //            st_ShipArrivalDate, 
            //            ed_ShipArrivalDate ) );
            //}

            //// 絞込み拠点コード ----------------------------------------------------------------------------------------------------
            //// 在庫移動のときのみ
            //if (this._stockMoveCndtn.StockMoveFormalDiv == StockMoveCndtn.StockMoveFormalDivState.StockMove)
            //{
            //    if ((this._stockMoveCndtn.St_ShipArrivalSectionCd != string.Empty) || (this._stockMoveCndtn.Ed_ShipArrivalSectionCd != string.Empty))
            //    {
            //        swName = string.Format("{0}{1}", this._stockMoveCndtn.ExtractTitle, ct_Section);
            //        this.EditCondition(ref extraConditions,
            //            GetConditionRange(swName, this._stockMoveCndtn.St_ShipArrivalSectionCd, this._stockMoveCndtn.Ed_ShipArrivalSectionCd));
            //    }
            //}

            //// 絞込み倉庫コード ----------------------------------------------------------------------------------------------------
            //if ( ( this._stockMoveCndtn.St_ShipArrivalEnterWarehCd != string.Empty ) || ( this._stockMoveCndtn.Ed_ShipArrivalEnterWarehCd != string.Empty ) )
            //{
            //    swName = string.Format( "{0}{1}", this._stockMoveCndtn.ExtractTitle, ct_WareHouse );
            //    this.EditCondition( ref extraConditions, 
            //        GetConditionRange( swName, this._stockMoveCndtn.St_ShipArrivalEnterWarehCd, this._stockMoveCndtn.Ed_ShipArrivalEnterWarehCd ) );
            //}

            //// 移動伝票番号 ----------------------------------------------------------------------------------------------------
            //if ( ( this._stockMoveCndtn.St_StockMoveSlipNo != 0 ) || ( this._stockMoveCndtn.Ed_StockMoveSlipNo != 999999999 ) )
            //{
            //    this.EditCondition( ref addConditions, 
            //        string.Format( "移動伝票番号：{0} 〜 {1}", this._stockMoveCndtn.St_StockMoveSlipNo, this._stockMoveCndtn.Ed_StockMoveSlipNo )
            //    );
            //}

            //// メーカーコード ----------------------------------------------------------------------------------------------------
            //if ( ( this._stockMoveCndtn.St_GoodsMakerCd != 0 ) || ( this._stockMoveCndtn.Ed_GoodsMakerCd != 999 ) )
            //{
            //    this.EditCondition( ref addConditions, 
            //        string.Format( "メーカーコード：{0} 〜 {1}", this._stockMoveCndtn.St_GoodsMakerCd, this._stockMoveCndtn.Ed_GoodsMakerCd )
            //    );
            //}

            //// 商品コード ----------------------------------------------------------------------------------------------------
            //if ( ( this._stockMoveCndtn.St_GoodsNo != string.Empty ) || ( this._stockMoveCndtn.Ed_GoodsNo != string.Empty ) )
            //{
            //    this.EditCondition( ref addConditions, 
            //        GetConditionRange( "商品コード", this._stockMoveCndtn.St_GoodsNo, this._stockMoveCndtn.Ed_GoodsNo ) );
            //}

            //foreach ( string exCondStr in addConditions )
            //{
            //    extraConditions.Add( exCondStr );
            //}
            //--- DEL 2008/08/12 ----------<<<<<

            //--- ADD 2008/08/12 ---------->>>>>
            extraConditions = new StringCollection();

            StringCollection addConditions = new StringCollection();

            // --- ADD 2008/10/02 -------------------------------->>>>>
            // 対象日
            string st_ShipArrivalDate = string.Empty;
            string ed_ShipArrivalDate = string.Empty;
            if ((this._stockMoveCndtn.St_ShipArrivalDate != DateTime.MinValue) || (this._stockMoveCndtn.Ed_ShipArrivalDate != DateTime.MinValue))
            {
                // 開始
                if (this._stockMoveCndtn.St_ShipArrivalDate != DateTime.MinValue)
                    st_ShipArrivalDate = this._stockMoveCndtn.St_ShipArrivalDate.ToString("yyyy/MM/dd");
                else
                    st_ShipArrivalDate = ct_Extr_Top;
                // 終了
                if (this._stockMoveCndtn.Ed_ShipArrivalDate != DateTime.MinValue)
                    ed_ShipArrivalDate = this._stockMoveCndtn.Ed_ShipArrivalDate.ToString("yyyy/MM/dd");
                else
                    ed_ShipArrivalDate = ct_Extr_End;

                this.EditCondition(ref addConditions, string.Format("対象日" + ct_RangeConst, st_ShipArrivalDate, ed_ShipArrivalDate));
            }

            // 処理日
            string st_CreateDate = string.Empty;
            string ed_CreateDate = string.Empty;
            if ((this._stockMoveCndtn.St_CreateDate != DateTime.MinValue) || (this._stockMoveCndtn.Ed_CreateDate != DateTime.MinValue))
            {
                // 開始
                if (this._stockMoveCndtn.St_CreateDate != DateTime.MinValue)
                    st_CreateDate = this._stockMoveCndtn.St_CreateDate.ToString("yyyy/MM/dd");
                else
                    st_CreateDate = ct_Extr_Top;
                // 終了
                if (this._stockMoveCndtn.Ed_CreateDate != DateTime.MinValue)
                    ed_CreateDate = this._stockMoveCndtn.Ed_CreateDate.ToString("yyyy/MM/dd");
                else
                    ed_CreateDate = ct_Extr_End;

                this.EditCondition(ref addConditions, string.Format("処理日" + ct_RangeConst, st_CreateDate, ed_CreateDate));
            }
            
            // --- ADD 2008/10/02 -------------------------------->>>>>

            // 移動元倉庫
            if ((this._stockMoveCndtn.St_MainBfAfEnterWarehCd != string.Empty) || (this._stockMoveCndtn.Ed_MainBfAfEnterWarehCd != string.Empty))
            {
                this.EditCondition(ref addConditions,
                    GetConditionRange("移動元倉庫", this._stockMoveCndtn.St_MainBfAfEnterWarehCd, this._stockMoveCndtn.Ed_MainBfAfEnterWarehCd));
            }

            // 発行タイプ
            this.EditCondition(ref addConditions, String.Format("発行タイプ：{0}", this._stockMoveCndtn.PrintTypeTitle));

            // 移動先拠点
            if ((this._stockMoveCndtn.St_ShipArrivalSectionCd != string.Empty) || (this._stockMoveCndtn.Ed_ShipArrivalSectionCd != string.Empty))
            {
                this.EditCondition(ref addConditions,
                    GetConditionRange("移動先拠点", this._stockMoveCndtn.St_ShipArrivalSectionCd, this._stockMoveCndtn.Ed_ShipArrivalSectionCd));
            }

            // 移動先倉庫
            if ((this._stockMoveCndtn.St_ShipArrivalEnterWarehCd != string.Empty) || (this._stockMoveCndtn.Ed_ShipArrivalEnterWarehCd != string.Empty))
            {
                this.EditCondition(ref addConditions,
                    GetConditionRange("移動先倉庫", this._stockMoveCndtn.St_ShipArrivalEnterWarehCd, this._stockMoveCndtn.Ed_ShipArrivalEnterWarehCd));
            }

            // 出力指定
            this.EditCondition(ref addConditions, String.Format("出力指定：{0}", this._stockMoveCndtn.OutputDesignatTitle));

            // 金額指定
            this.EditCondition(ref addConditions, String.Format("金額指定：{0}", this._stockMoveCndtn.PriceDesignatTitle));

            // 入力担当者
            if ((this._stockMoveCndtn.St_StockMvEmpCode != string.Empty) || (this._stockMoveCndtn.Ed_StockMvEmpCode != string.Empty))
            {
                this.EditCondition(ref addConditions,
                    GetConditionRange("入力担当者", this._stockMoveCndtn.St_StockMvEmpCode, this._stockMoveCndtn.Ed_StockMvEmpCode));
            }

            foreach (string exCondStr in addConditions)
            {
                extraConditions.Add(exCondStr);
            }

            //--- ADD 2008/08/12 ----------<<<<<
		}
		#endregion

		#region ◎ 抽出範囲文字列作成
		/// <summary>
		/// 抽出範囲文字列作成
		/// </summary>
		/// <returns>作成文字列</returns>
		/// <remarks>
		/// <br>Note       : 抽出範囲文字列を作成します</br>
		/// <br>Programmer : 22013 久保 将太</br>
		/// <br>Date       : 2007.03.08</br>
		/// </remarks>
		private string GetConditionRange( string title, string startString, string endString )
		{
			string result = "";
			if ((startString != "") || (endString != ""))
			{
				string start = ct_Extr_Top;
				string end	 = ct_Extr_End;
				if (startString	!= "")	start	= startString;
				if (endString	!= "")	end		= endString;
				result = String.Format(title + ct_RangeConst, start, end);
			}
			return result;
		}
		#endregion

		#region ◎ 抽出条件文字列編集
		/// <summary>
		/// 抽出条件文字列編集
		/// </summary>
		/// <param name="editArea">格納エリア</param>
		/// <param name="target">対象文字列</param>
		/// <remarks>
		/// <br>Note       : 出力する抽出条件文字列を編集します。</br>
		/// <br>Programmer : 22013 久保 将太</br>
		/// <br>Date       : 2007.03.08</br>
		/// </remarks>
		private void EditCondition(ref StringCollection editArea, string target)
		{
			bool isEdit = false;
			
			// 編集対象文字バイト数算出
			int targetByte = TStrConv.SizeCountSJIS(target);
			
			for (int i = 0; i < editArea.Count; i++)
			{
				int areaByte = 0;
				
				// 格納エリアのバイト数算出
				if (editArea[i] != null)
				{
					areaByte = TStrConv.SizeCountSJIS(editArea[i]);
				}

				if ((areaByte + targetByte + 2) <= 190)
				{
					isEdit = true;

					// 全角スペースを挿入
					if (editArea[i] != null) editArea[i] += ct_Space;
					
					editArea[i]  += target;
					break;
				}
			}
			// 新規編集エリア作成
			if (!isEdit)
			{
				editArea.Add(target);
			}
		}
		#endregion
		#endregion ◆ レポートフォーム設定関連

		#region ◎ メッセージ表示

		/// <summary>
		/// メッセージ表示
		/// </summary>
		/// <param name="iLevel">エラーレベル</param>
		/// <param name="iMsg">エラーメッセージ</param>
		/// <param name="iSt">ステータス</param>
		/// <param name="iButton">表示ボタン</param>
		/// <param name="iDefButton">デフォルトフォーカスボタン</param>
		/// <returns>DialogResult</returns>
		/// <remarks>
		/// <br>Note       : 出力件数の設定を行います。</br>
		/// <br>Programmer : 22013 久保 将太</br>
		/// <br>Date       : 2007.03.08</br>
		/// </remarks>
		private DialogResult MsgDispProc(emErrorLevel iLevel, string iMsg, int iSt, MessageBoxButtons iButton, MessageBoxDefaultButton iDefButton)
		{
			return TMsgDisp.Show(iLevel, "MAZAI02032P", iMsg, iSt, iButton, iDefButton);
		}

		#endregion
		#endregion
	}
}
