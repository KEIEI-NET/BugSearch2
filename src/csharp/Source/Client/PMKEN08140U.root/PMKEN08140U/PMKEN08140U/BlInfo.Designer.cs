//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.5485
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Library.Windows.Forms {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("BlInfo")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    internal partial class BlInfo : global::System.Data.DataSet {
        
        private BLDataTable tableBL;
        
        private PartsPosDataTable tablePartsPos;
        
        private BL1DataTable tableBL1;
        
        private PosDataTable tablePos;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BlInfo() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BlInfo(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["BL"] != null)) {
                    base.Tables.Add(new BLDataTable(ds.Tables["BL"]));
                }
                if ((ds.Tables["PartsPos"] != null)) {
                    base.Tables.Add(new PartsPosDataTable(ds.Tables["PartsPos"]));
                }
                if ((ds.Tables["BL1"] != null)) {
                    base.Tables.Add(new BL1DataTable(ds.Tables["BL1"]));
                }
                if ((ds.Tables["Pos"] != null)) {
                    base.Tables.Add(new PosDataTable(ds.Tables["Pos"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BLDataTable BL {
            get {
                return this.tableBL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PartsPosDataTable PartsPos {
            get {
                return this.tablePartsPos;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BL1DataTable BL1 {
            get {
                return this.tableBL1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PosDataTable Pos {
            get {
                return this.tablePos;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            BlInfo cln = ((BlInfo)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BL"] != null)) {
                    base.Tables.Add(new BLDataTable(ds.Tables["BL"]));
                }
                if ((ds.Tables["PartsPos"] != null)) {
                    base.Tables.Add(new PartsPosDataTable(ds.Tables["PartsPos"]));
                }
                if ((ds.Tables["BL1"] != null)) {
                    base.Tables.Add(new BL1DataTable(ds.Tables["BL1"]));
                }
                if ((ds.Tables["Pos"] != null)) {
                    base.Tables.Add(new PosDataTable(ds.Tables["Pos"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBL = ((BLDataTable)(base.Tables["BL"]));
            if ((initTable == true)) {
                if ((this.tableBL != null)) {
                    this.tableBL.InitVars();
                }
            }
            this.tablePartsPos = ((PartsPosDataTable)(base.Tables["PartsPos"]));
            if ((initTable == true)) {
                if ((this.tablePartsPos != null)) {
                    this.tablePartsPos.InitVars();
                }
            }
            this.tableBL1 = ((BL1DataTable)(base.Tables["BL1"]));
            if ((initTable == true)) {
                if ((this.tableBL1 != null)) {
                    this.tableBL1.InitVars();
                }
            }
            this.tablePos = ((PosDataTable)(base.Tables["Pos"]));
            if ((initTable == true)) {
                if ((this.tablePos != null)) {
                    this.tablePos.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BlInfo";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BlInfo.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBL = new BLDataTable();
            base.Tables.Add(this.tableBL);
            this.tablePartsPos = new PartsPosDataTable();
            base.Tables.Add(this.tablePartsPos);
            this.tableBL1 = new BL1DataTable();
            base.Tables.Add(this.tableBL1);
            this.tablePos = new PosDataTable();
            base.Tables.Add(this.tablePos);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePartsPos() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBL1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePos() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            BlInfo ds = new BlInfo();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BLRowChangeEventHandler(object sender, BLRowChangeEvent e);
        
        public delegate void PartsPosRowChangeEventHandler(object sender, PartsPosRowChangeEvent e);
        
        public delegate void BL1RowChangeEventHandler(object sender, BL1RowChangeEvent e);
        
        public delegate void PosRowChangeEventHandler(object sender, PosRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BLDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBLCd;
            
            private global::System.Data.DataColumn columnBLName;
            
            private global::System.Data.DataColumn columnSearchMethod;
            
            private global::System.Data.DataColumn columnSelImage;
            
            private global::System.Data.DataColumn columnSelectionState;
            
            private global::System.Data.DataColumn columnPosDispOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLDataTable() {
                this.TableName = "BL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BLDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BLDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLCdColumn {
                get {
                    return this.columnBLCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLNameColumn {
                get {
                    return this.columnBLName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SearchMethodColumn {
                get {
                    return this.columnSearchMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelImageColumn {
                get {
                    return this.columnSelImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionStateColumn {
                get {
                    return this.columnSelectionState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PosDispOrderColumn {
                get {
                    return this.columnPosDispOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLRow this[int index] {
                get {
                    return ((BLRow)(this.Rows[index]));
                }
            }
            
            public event BLRowChangeEventHandler BLRowChanging;
            
            public event BLRowChangeEventHandler BLRowChanged;
            
            public event BLRowChangeEventHandler BLRowDeleting;
            
            public event BLRowChangeEventHandler BLRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBLRow(BLRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLRow AddBLRow(int BLCd, string BLName, string SearchMethod, System.Drawing.Image SelImage, bool SelectionState, int PosDispOrder) {
                BLRow rowBLRow = ((BLRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BLCd,
                        BLName,
                        SearchMethod,
                        SelImage,
                        SelectionState,
                        PosDispOrder};
                rowBLRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBLRow);
                return rowBLRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLRow FindByBLCd(int BLCd) {
                return ((BLRow)(this.Rows.Find(new object[] {
                            BLCd})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BLDataTable cln = ((BLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BLDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBLCd = base.Columns["BLCd"];
                this.columnBLName = base.Columns["BLName"];
                this.columnSearchMethod = base.Columns["SearchMethod"];
                this.columnSelImage = base.Columns["SelImage"];
                this.columnSelectionState = base.Columns["SelectionState"];
                this.columnPosDispOrder = base.Columns["PosDispOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBLCd = new global::System.Data.DataColumn("BLCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLCd);
                this.columnBLName = new global::System.Data.DataColumn("BLName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLName);
                this.columnSearchMethod = new global::System.Data.DataColumn("SearchMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSearchMethod);
                this.columnSelImage = new global::System.Data.DataColumn("SelImage", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelImage);
                this.columnSelectionState = new global::System.Data.DataColumn("SelectionState", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionState);
                this.columnPosDispOrder = new global::System.Data.DataColumn("PosDispOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosDispOrder);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBLCd}, true));
                this.columnBLCd.AllowDBNull = false;
                this.columnBLCd.Unique = true;
                this.columnBLCd.Caption = "";
                this.columnBLCd.DefaultValue = ((int)(0));
                this.columnBLName.Caption = "BLｺｰﾄﾞ名";
                this.columnBLName.DefaultValue = ((string)(""));
                this.columnSearchMethod.Caption = "検索方法";
                this.columnSearchMethod.DefaultValue = ((string)(""));
                this.columnSelImage.Caption = "";
                this.columnSelectionState.DefaultValue = ((bool)(false));
                this.columnPosDispOrder.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLRow NewBLRow() {
                return ((BLRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BLRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BLRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BLRowChanged != null)) {
                    this.BLRowChanged(this, new BLRowChangeEvent(((BLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BLRowChanging != null)) {
                    this.BLRowChanging(this, new BLRowChangeEvent(((BLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BLRowDeleted != null)) {
                    this.BLRowDeleted(this, new BLRowChangeEvent(((BLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BLRowDeleting != null)) {
                    this.BLRowDeleting(this, new BLRowChangeEvent(((BLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBLRow(BLRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BlInfo ds = new BlInfo();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PartsPosDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPosCd;
            
            private global::System.Data.DataColumn columnCustomerCode;
            
            private global::System.Data.DataColumn columnBLCd;
            
            private global::System.Data.DataColumn columnPosDispOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartsPosDataTable() {
                this.TableName = "PartsPos";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PartsPosDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PartsPosDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PosCdColumn {
                get {
                    return this.columnPosCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerCodeColumn {
                get {
                    return this.columnCustomerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLCdColumn {
                get {
                    return this.columnBLCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PosDispOrderColumn {
                get {
                    return this.columnPosDispOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartsPosRow this[int index] {
                get {
                    return ((PartsPosRow)(this.Rows[index]));
                }
            }
            
            public event PartsPosRowChangeEventHandler PartsPosRowChanging;
            
            public event PartsPosRowChangeEventHandler PartsPosRowChanged;
            
            public event PartsPosRowChangeEventHandler PartsPosRowDeleting;
            
            public event PartsPosRowChangeEventHandler PartsPosRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPartsPosRow(PartsPosRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartsPosRow AddPartsPosRow(int PosCd, int CustomerCode, int BLCd, int PosDispOrder) {
                PartsPosRow rowPartsPosRow = ((PartsPosRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PosCd,
                        CustomerCode,
                        BLCd,
                        PosDispOrder};
                rowPartsPosRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPartsPosRow);
                return rowPartsPosRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartsPosRow FindByBLCdCustomerCodePosCd(int BLCd, int CustomerCode, int PosCd) {
                return ((PartsPosRow)(this.Rows.Find(new object[] {
                            BLCd,
                            CustomerCode,
                            PosCd})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PartsPosDataTable cln = ((PartsPosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PartsPosDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPosCd = base.Columns["PosCd"];
                this.columnCustomerCode = base.Columns["CustomerCode"];
                this.columnBLCd = base.Columns["BLCd"];
                this.columnPosDispOrder = base.Columns["PosDispOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPosCd = new global::System.Data.DataColumn("PosCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosCd);
                this.columnCustomerCode = new global::System.Data.DataColumn("CustomerCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerCode);
                this.columnBLCd = new global::System.Data.DataColumn("BLCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLCd);
                this.columnPosDispOrder = new global::System.Data.DataColumn("PosDispOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosDispOrder);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBLCd,
                                this.columnCustomerCode,
                                this.columnPosCd}, true));
                this.columnPosCd.AllowDBNull = false;
                this.columnPosCd.Caption = "部位コード";
                this.columnPosCd.DefaultValue = ((int)(0));
                this.columnCustomerCode.AllowDBNull = false;
                this.columnCustomerCode.DefaultValue = ((int)(0));
                this.columnBLCd.AllowDBNull = false;
                this.columnBLCd.DefaultValue = ((int)(0));
                this.columnPosDispOrder.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartsPosRow NewPartsPosRow() {
                return ((PartsPosRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PartsPosRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PartsPosRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PartsPosRowChanged != null)) {
                    this.PartsPosRowChanged(this, new PartsPosRowChangeEvent(((PartsPosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PartsPosRowChanging != null)) {
                    this.PartsPosRowChanging(this, new PartsPosRowChangeEvent(((PartsPosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PartsPosRowDeleted != null)) {
                    this.PartsPosRowDeleted(this, new PartsPosRowChangeEvent(((PartsPosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PartsPosRowDeleting != null)) {
                    this.PartsPosRowDeleting(this, new PartsPosRowChangeEvent(((PartsPosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePartsPosRow(PartsPosRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BlInfo ds = new BlInfo();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PartsPosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BL1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBLCd;
            
            private global::System.Data.DataColumn columnBLName;
            
            private global::System.Data.DataColumn columnBLCd2;
            
            private global::System.Data.DataColumn columnBLName2;
            
            private global::System.Data.DataColumn columnBLCd3;
            
            private global::System.Data.DataColumn columnBLName3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BL1DataTable() {
                this.TableName = "BL1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BL1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BL1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLCdColumn {
                get {
                    return this.columnBLCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLNameColumn {
                get {
                    return this.columnBLName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLCd2Column {
                get {
                    return this.columnBLCd2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLName2Column {
                get {
                    return this.columnBLName2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLCd3Column {
                get {
                    return this.columnBLCd3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLName3Column {
                get {
                    return this.columnBLName3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BL1Row this[int index] {
                get {
                    return ((BL1Row)(this.Rows[index]));
                }
            }
            
            public event BL1RowChangeEventHandler BL1RowChanging;
            
            public event BL1RowChangeEventHandler BL1RowChanged;
            
            public event BL1RowChangeEventHandler BL1RowDeleting;
            
            public event BL1RowChangeEventHandler BL1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBL1Row(BL1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BL1Row AddBL1Row(string BLCd, string BLName, string BLCd2, string BLName2, string BLCd3, string BLName3) {
                BL1Row rowBL1Row = ((BL1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BLCd,
                        BLName,
                        BLCd2,
                        BLName2,
                        BLCd3,
                        BLName3};
                rowBL1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowBL1Row);
                return rowBL1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BL1DataTable cln = ((BL1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BL1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBLCd = base.Columns["BLCd"];
                this.columnBLName = base.Columns["BLName"];
                this.columnBLCd2 = base.Columns["BLCd2"];
                this.columnBLName2 = base.Columns["BLName2"];
                this.columnBLCd3 = base.Columns["BLCd3"];
                this.columnBLName3 = base.Columns["BLName3"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBLCd = new global::System.Data.DataColumn("BLCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLCd);
                this.columnBLName = new global::System.Data.DataColumn("BLName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLName);
                this.columnBLCd2 = new global::System.Data.DataColumn("BLCd2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLCd2);
                this.columnBLName2 = new global::System.Data.DataColumn("BLName2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLName2);
                this.columnBLCd3 = new global::System.Data.DataColumn("BLCd3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLCd3);
                this.columnBLName3 = new global::System.Data.DataColumn("BLName3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLName3);
                this.columnBLCd.AllowDBNull = false;
                this.columnBLCd.Caption = "";
                this.columnBLCd.DefaultValue = ((string)(""));
                this.columnBLName.Caption = "BLｺｰﾄﾞ名";
                this.columnBLName.DefaultValue = ((string)(""));
                this.columnBLCd2.Caption = "";
                this.columnBLCd2.DefaultValue = ((string)(""));
                this.columnBLName2.Caption = "BLｺｰﾄﾞ名";
                this.columnBLName2.DefaultValue = ((string)(""));
                this.columnBLCd3.Caption = "";
                this.columnBLCd3.DefaultValue = ((string)(""));
                this.columnBLName3.Caption = "BLｺｰﾄﾞ名";
                this.columnBLName3.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BL1Row NewBL1Row() {
                return ((BL1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BL1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BL1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BL1RowChanged != null)) {
                    this.BL1RowChanged(this, new BL1RowChangeEvent(((BL1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BL1RowChanging != null)) {
                    this.BL1RowChanging(this, new BL1RowChangeEvent(((BL1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BL1RowDeleted != null)) {
                    this.BL1RowDeleted(this, new BL1RowChangeEvent(((BL1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BL1RowDeleting != null)) {
                    this.BL1RowDeleting(this, new BL1RowChangeEvent(((BL1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBL1Row(BL1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BlInfo ds = new BlInfo();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BL1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PosDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPosCd;
            
            private global::System.Data.DataColumn columnPosName;
            
            private global::System.Data.DataColumn columnSelImage;
            
            private global::System.Data.DataColumn columnSelectionState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosDataTable() {
                this.TableName = "Pos";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PosDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PosDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PosCdColumn {
                get {
                    return this.columnPosCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PosNameColumn {
                get {
                    return this.columnPosName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelImageColumn {
                get {
                    return this.columnSelImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionStateColumn {
                get {
                    return this.columnSelectionState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosRow this[int index] {
                get {
                    return ((PosRow)(this.Rows[index]));
                }
            }
            
            public event PosRowChangeEventHandler PosRowChanging;
            
            public event PosRowChangeEventHandler PosRowChanged;
            
            public event PosRowChangeEventHandler PosRowDeleting;
            
            public event PosRowChangeEventHandler PosRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPosRow(PosRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosRow AddPosRow(string PosCd, string PosName, System.Drawing.Image SelImage, bool SelectionState) {
                PosRow rowPosRow = ((PosRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PosCd,
                        PosName,
                        SelImage,
                        SelectionState};
                rowPosRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPosRow);
                return rowPosRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosRow FindByPosCd(string PosCd) {
                return ((PosRow)(this.Rows.Find(new object[] {
                            PosCd})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PosDataTable cln = ((PosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PosDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPosCd = base.Columns["PosCd"];
                this.columnPosName = base.Columns["PosName"];
                this.columnSelImage = base.Columns["SelImage"];
                this.columnSelectionState = base.Columns["SelectionState"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPosCd = new global::System.Data.DataColumn("PosCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosCd);
                this.columnPosName = new global::System.Data.DataColumn("PosName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosName);
                this.columnSelImage = new global::System.Data.DataColumn("SelImage", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelImage);
                this.columnSelectionState = new global::System.Data.DataColumn("SelectionState", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionState);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPosCd}, true));
                this.columnPosCd.AllowDBNull = false;
                this.columnPosCd.Unique = true;
                this.columnPosCd.Caption = "";
                this.columnPosCd.DefaultValue = ((string)(""));
                this.columnPosName.Caption = "部位名";
                this.columnPosName.DefaultValue = ((string)(""));
                this.columnSelImage.Caption = "";
                this.columnSelectionState.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosRow NewPosRow() {
                return ((PosRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PosRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PosRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PosRowChanged != null)) {
                    this.PosRowChanged(this, new PosRowChangeEvent(((PosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PosRowChanging != null)) {
                    this.PosRowChanging(this, new PosRowChangeEvent(((PosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PosRowDeleted != null)) {
                    this.PosRowDeleted(this, new PosRowChangeEvent(((PosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PosRowDeleting != null)) {
                    this.PosRowDeleting(this, new PosRowChangeEvent(((PosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePosRow(PosRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BlInfo ds = new BlInfo();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BLRow : global::System.Data.DataRow {
            
            private BLDataTable tableBL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BLRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBL = ((BLDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BLCd {
                get {
                    return ((int)(this[this.tableBL.BLCdColumn]));
                }
                set {
                    this[this.tableBL.BLCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLName {
                get {
                    try {
                        return ((string)(this[this.tableBL.BLNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'BL\' にある列 \'BLName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableBL.BLNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SearchMethod {
                get {
                    try {
                        return ((string)(this[this.tableBL.SearchMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'BL\' にある列 \'SearchMethod\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableBL.SearchMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image SelImage {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableBL.SelImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'BL\' にある列 \'SelImage\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableBL.SelImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SelectionState {
                get {
                    try {
                        return ((bool)(this[this.tableBL.SelectionStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'BL\' にある列 \'SelectionState\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableBL.SelectionStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PosDispOrder {
                get {
                    try {
                        return ((int)(this[this.tableBL.PosDispOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'BL\' にある列 \'PosDispOrder\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableBL.PosDispOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLNameNull() {
                return this.IsNull(this.tableBL.BLNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLNameNull() {
                this[this.tableBL.BLNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSearchMethodNull() {
                return this.IsNull(this.tableBL.SearchMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSearchMethodNull() {
                this[this.tableBL.SearchMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelImageNull() {
                return this.IsNull(this.tableBL.SelImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelImageNull() {
                this[this.tableBL.SelImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionStateNull() {
                return this.IsNull(this.tableBL.SelectionStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionStateNull() {
                this[this.tableBL.SelectionStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPosDispOrderNull() {
                return this.IsNull(this.tableBL.PosDispOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPosDispOrderNull() {
                this[this.tableBL.PosDispOrderColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PartsPosRow : global::System.Data.DataRow {
            
            private PartsPosDataTable tablePartsPos;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PartsPosRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePartsPos = ((PartsPosDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PosCd {
                get {
                    return ((int)(this[this.tablePartsPos.PosCdColumn]));
                }
                set {
                    this[this.tablePartsPos.PosCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerCode {
                get {
                    return ((int)(this[this.tablePartsPos.CustomerCodeColumn]));
                }
                set {
                    this[this.tablePartsPos.CustomerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BLCd {
                get {
                    return ((int)(this[this.tablePartsPos.BLCdColumn]));
                }
                set {
                    this[this.tablePartsPos.BLCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PosDispOrder {
                get {
                    try {
                        return ((int)(this[this.tablePartsPos.PosDispOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'PartsPos\' にある列 \'PosDispOrder\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tablePartsPos.PosDispOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPosDispOrderNull() {
                return this.IsNull(this.tablePartsPos.PosDispOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPosDispOrderNull() {
                this[this.tablePartsPos.PosDispOrderColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BL1Row : global::System.Data.DataRow {
            
            private BL1DataTable tableBL1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BL1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBL1 = ((BL1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLCd {
                get {
                    return ((string)(this[this.tableBL1.BLCdColumn]));
                }
                set {
                    this[this.tableBL1.BLCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLName {
                get {
                    try {
                        return ((string)(this[this.tableBL1.BLNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'BL1\' にある列 \'BLName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableBL1.BLNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLCd2 {
                get {
                    try {
                        return ((string)(this[this.tableBL1.BLCd2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'BL1\' にある列 \'BLCd2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableBL1.BLCd2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLName2 {
                get {
                    try {
                        return ((string)(this[this.tableBL1.BLName2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'BL1\' にある列 \'BLName2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableBL1.BLName2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLCd3 {
                get {
                    try {
                        return ((string)(this[this.tableBL1.BLCd3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'BL1\' にある列 \'BLCd3\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableBL1.BLCd3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLName3 {
                get {
                    try {
                        return ((string)(this[this.tableBL1.BLName3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'BL1\' にある列 \'BLName3\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableBL1.BLName3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLNameNull() {
                return this.IsNull(this.tableBL1.BLNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLNameNull() {
                this[this.tableBL1.BLNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLCd2Null() {
                return this.IsNull(this.tableBL1.BLCd2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLCd2Null() {
                this[this.tableBL1.BLCd2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLName2Null() {
                return this.IsNull(this.tableBL1.BLName2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLName2Null() {
                this[this.tableBL1.BLName2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLCd3Null() {
                return this.IsNull(this.tableBL1.BLCd3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLCd3Null() {
                this[this.tableBL1.BLCd3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLName3Null() {
                return this.IsNull(this.tableBL1.BLName3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLName3Null() {
                this[this.tableBL1.BLName3Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PosRow : global::System.Data.DataRow {
            
            private PosDataTable tablePos;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PosRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePos = ((PosDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PosCd {
                get {
                    return ((string)(this[this.tablePos.PosCdColumn]));
                }
                set {
                    this[this.tablePos.PosCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PosName {
                get {
                    try {
                        return ((string)(this[this.tablePos.PosNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Pos\' にある列 \'PosName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tablePos.PosNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image SelImage {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tablePos.SelImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Pos\' にある列 \'SelImage\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tablePos.SelImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SelectionState {
                get {
                    try {
                        return ((bool)(this[this.tablePos.SelectionStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Pos\' にある列 \'SelectionState\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tablePos.SelectionStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPosNameNull() {
                return this.IsNull(this.tablePos.PosNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPosNameNull() {
                this[this.tablePos.PosNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelImageNull() {
                return this.IsNull(this.tablePos.SelImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelImageNull() {
                this[this.tablePos.SelImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionStateNull() {
                return this.IsNull(this.tablePos.SelectionStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionStateNull() {
                this[this.tablePos.SelectionStateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BLRowChangeEvent : global::System.EventArgs {
            
            private BLRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLRowChangeEvent(BLRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PartsPosRowChangeEvent : global::System.EventArgs {
            
            private PartsPosRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartsPosRowChangeEvent(PartsPosRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartsPosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BL1RowChangeEvent : global::System.EventArgs {
            
            private BL1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BL1RowChangeEvent(BL1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BL1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PosRowChangeEvent : global::System.EventArgs {
            
            private PosRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosRowChangeEvent(PosRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591