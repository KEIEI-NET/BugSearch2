//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.832
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("CustomerChangeDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CustomerChangeDataSet : System.Data.DataSet {
        
        private CustomerChangeDataTable tableCustomerChange;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CustomerChangeDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CustomerChangeDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CustomerChange"] != null)) {
                    base.Tables.Add(new CustomerChangeDataTable(ds.Tables["CustomerChange"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerChangeDataTable CustomerChange {
            get {
                return this.tableCustomerChange;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            CustomerChangeDataSet cln = ((CustomerChangeDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CustomerChange"] != null)) {
                    base.Tables.Add(new CustomerChangeDataTable(ds.Tables["CustomerChange"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCustomerChange = ((CustomerChangeDataTable)(base.Tables["CustomerChange"]));
            if ((initTable == true)) {
                if ((this.tableCustomerChange != null)) {
                    this.tableCustomerChange.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CustomerChangeDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CustomerChangeDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCustomerChange = new CustomerChangeDataTable();
            base.Tables.Add(this.tableCustomerChange);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomerChange() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            CustomerChangeDataSet ds = new CustomerChangeDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void CustomerChangeRowChangeEventHandler(object sender, CustomerChangeRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerChangeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCreateDateTime;
            
            private System.Data.DataColumn columnUpdateDateTime;
            
            private System.Data.DataColumn columnEnterpriseCode;
            
            private System.Data.DataColumn columnFileHeaderGuid;
            
            private System.Data.DataColumn columnUpdEmployeeCode;
            
            private System.Data.DataColumn columnUpdAssemblyId1;
            
            private System.Data.DataColumn columnUpdAssemblyId2;
            
            private System.Data.DataColumn columnLogicalDeleteCode;
            
            private System.Data.DataColumn columnCustomerCode;
            
            private System.Data.DataColumn columnCreditMoney;
            
            private System.Data.DataColumn columnWarningCreditMoney;
            
            private System.Data.DataColumn columnPrsntAccRecBalance;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerChangeDataTable() {
                this.TableName = "CustomerChange";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerChangeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerChangeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CreateDateTimeColumn {
                get {
                    return this.columnCreateDateTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UpdateDateTimeColumn {
                get {
                    return this.columnUpdateDateTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnterpriseCodeColumn {
                get {
                    return this.columnEnterpriseCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FileHeaderGuidColumn {
                get {
                    return this.columnFileHeaderGuid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UpdEmployeeCodeColumn {
                get {
                    return this.columnUpdEmployeeCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UpdAssemblyId1Column {
                get {
                    return this.columnUpdAssemblyId1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UpdAssemblyId2Column {
                get {
                    return this.columnUpdAssemblyId2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogicalDeleteCodeColumn {
                get {
                    return this.columnLogicalDeleteCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CustomerCodeColumn {
                get {
                    return this.columnCustomerCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CreditMoneyColumn {
                get {
                    return this.columnCreditMoney;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WarningCreditMoneyColumn {
                get {
                    return this.columnWarningCreditMoney;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrsntAccRecBalanceColumn {
                get {
                    return this.columnPrsntAccRecBalance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerChangeRow this[int index] {
                get {
                    return ((CustomerChangeRow)(this.Rows[index]));
                }
            }
            
            public event CustomerChangeRowChangeEventHandler CustomerChangeRowChanging;
            
            public event CustomerChangeRowChangeEventHandler CustomerChangeRowChanged;
            
            public event CustomerChangeRowChangeEventHandler CustomerChangeRowDeleting;
            
            public event CustomerChangeRowChangeEventHandler CustomerChangeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerChangeRow(CustomerChangeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerChangeRow AddCustomerChangeRow(System.DateTime CreateDateTime, System.DateTime UpdateDateTime, string EnterpriseCode, string FileHeaderGuid, string UpdEmployeeCode, string UpdAssemblyId1, string UpdAssemblyId2, int LogicalDeleteCode, int CustomerCode, long CreditMoney, long WarningCreditMoney, long PrsntAccRecBalance) {
                CustomerChangeRow rowCustomerChangeRow = ((CustomerChangeRow)(this.NewRow()));
                rowCustomerChangeRow.ItemArray = new object[] {
                        CreateDateTime,
                        UpdateDateTime,
                        EnterpriseCode,
                        FileHeaderGuid,
                        UpdEmployeeCode,
                        UpdAssemblyId1,
                        UpdAssemblyId2,
                        LogicalDeleteCode,
                        CustomerCode,
                        CreditMoney,
                        WarningCreditMoney,
                        PrsntAccRecBalance};
                this.Rows.Add(rowCustomerChangeRow);
                return rowCustomerChangeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CustomerChangeDataTable cln = ((CustomerChangeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CustomerChangeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCreateDateTime = base.Columns["CreateDateTime"];
                this.columnUpdateDateTime = base.Columns["UpdateDateTime"];
                this.columnEnterpriseCode = base.Columns["EnterpriseCode"];
                this.columnFileHeaderGuid = base.Columns["FileHeaderGuid"];
                this.columnUpdEmployeeCode = base.Columns["UpdEmployeeCode"];
                this.columnUpdAssemblyId1 = base.Columns["UpdAssemblyId1"];
                this.columnUpdAssemblyId2 = base.Columns["UpdAssemblyId2"];
                this.columnLogicalDeleteCode = base.Columns["LogicalDeleteCode"];
                this.columnCustomerCode = base.Columns["CustomerCode"];
                this.columnCreditMoney = base.Columns["CreditMoney"];
                this.columnWarningCreditMoney = base.Columns["WarningCreditMoney"];
                this.columnPrsntAccRecBalance = base.Columns["PrsntAccRecBalance"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCreateDateTime = new System.Data.DataColumn("CreateDateTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDateTime);
                this.columnUpdateDateTime = new System.Data.DataColumn("UpdateDateTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDateTime);
                this.columnEnterpriseCode = new System.Data.DataColumn("EnterpriseCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnterpriseCode);
                this.columnFileHeaderGuid = new System.Data.DataColumn("FileHeaderGuid", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileHeaderGuid);
                this.columnUpdEmployeeCode = new System.Data.DataColumn("UpdEmployeeCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdEmployeeCode);
                this.columnUpdAssemblyId1 = new System.Data.DataColumn("UpdAssemblyId1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdAssemblyId1);
                this.columnUpdAssemblyId2 = new System.Data.DataColumn("UpdAssemblyId2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdAssemblyId2);
                this.columnLogicalDeleteCode = new System.Data.DataColumn("LogicalDeleteCode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogicalDeleteCode);
                this.columnCustomerCode = new System.Data.DataColumn("CustomerCode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerCode);
                this.columnCreditMoney = new System.Data.DataColumn("CreditMoney", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditMoney);
                this.columnWarningCreditMoney = new System.Data.DataColumn("WarningCreditMoney", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarningCreditMoney);
                this.columnPrsntAccRecBalance = new System.Data.DataColumn("PrsntAccRecBalance", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrsntAccRecBalance);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerChangeRow NewCustomerChangeRow() {
                return ((CustomerChangeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CustomerChangeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CustomerChangeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerChangeRowChanged != null)) {
                    this.CustomerChangeRowChanged(this, new CustomerChangeRowChangeEvent(((CustomerChangeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerChangeRowChanging != null)) {
                    this.CustomerChangeRowChanging(this, new CustomerChangeRowChangeEvent(((CustomerChangeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerChangeRowDeleted != null)) {
                    this.CustomerChangeRowDeleted(this, new CustomerChangeRowChangeEvent(((CustomerChangeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerChangeRowDeleting != null)) {
                    this.CustomerChangeRowDeleting(this, new CustomerChangeRowChangeEvent(((CustomerChangeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerChangeRow(CustomerChangeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CustomerChangeDataSet ds = new CustomerChangeDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerChangeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerChangeRow : System.Data.DataRow {
            
            private CustomerChangeDataTable tableCustomerChange;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerChangeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomerChange = ((CustomerChangeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDateTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCustomerChange.CreateDateTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'CustomerChange\' にある列 \'CreateDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableCustomerChange.CreateDateTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDateTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCustomerChange.UpdateDateTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'CustomerChange\' にある列 \'UpdateDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableCustomerChange.UpdateDateTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnterpriseCode {
                get {
                    try {
                        return ((string)(this[this.tableCustomerChange.EnterpriseCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'CustomerChange\' にある列 \'EnterpriseCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableCustomerChange.EnterpriseCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileHeaderGuid {
                get {
                    try {
                        return ((string)(this[this.tableCustomerChange.FileHeaderGuidColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'CustomerChange\' にある列 \'FileHeaderGuid\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableCustomerChange.FileHeaderGuidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdEmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableCustomerChange.UpdEmployeeCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'CustomerChange\' にある列 \'UpdEmployeeCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableCustomerChange.UpdEmployeeCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdAssemblyId1 {
                get {
                    try {
                        return ((string)(this[this.tableCustomerChange.UpdAssemblyId1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'CustomerChange\' にある列 \'UpdAssemblyId1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableCustomerChange.UpdAssemblyId1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdAssemblyId2 {
                get {
                    try {
                        return ((string)(this[this.tableCustomerChange.UpdAssemblyId2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'CustomerChange\' にある列 \'UpdAssemblyId2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableCustomerChange.UpdAssemblyId2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LogicalDeleteCode {
                get {
                    try {
                        return ((int)(this[this.tableCustomerChange.LogicalDeleteCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'CustomerChange\' にある列 \'LogicalDeleteCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableCustomerChange.LogicalDeleteCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerCode {
                get {
                    try {
                        return ((int)(this[this.tableCustomerChange.CustomerCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'CustomerChange\' にある列 \'CustomerCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableCustomerChange.CustomerCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CreditMoney {
                get {
                    try {
                        return ((long)(this[this.tableCustomerChange.CreditMoneyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'CustomerChange\' にある列 \'CreditMoney\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableCustomerChange.CreditMoneyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long WarningCreditMoney {
                get {
                    try {
                        return ((long)(this[this.tableCustomerChange.WarningCreditMoneyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'CustomerChange\' にある列 \'WarningCreditMoney\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableCustomerChange.WarningCreditMoneyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PrsntAccRecBalance {
                get {
                    try {
                        return ((long)(this[this.tableCustomerChange.PrsntAccRecBalanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'CustomerChange\' にある列 \'PrsntAccRecBalance\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableCustomerChange.PrsntAccRecBalanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateDateTimeNull() {
                return this.IsNull(this.tableCustomerChange.CreateDateTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateDateTimeNull() {
                this[this.tableCustomerChange.CreateDateTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateDateTimeNull() {
                return this.IsNull(this.tableCustomerChange.UpdateDateTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateDateTimeNull() {
                this[this.tableCustomerChange.UpdateDateTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnterpriseCodeNull() {
                return this.IsNull(this.tableCustomerChange.EnterpriseCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnterpriseCodeNull() {
                this[this.tableCustomerChange.EnterpriseCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileHeaderGuidNull() {
                return this.IsNull(this.tableCustomerChange.FileHeaderGuidColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileHeaderGuidNull() {
                this[this.tableCustomerChange.FileHeaderGuidColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdEmployeeCodeNull() {
                return this.IsNull(this.tableCustomerChange.UpdEmployeeCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdEmployeeCodeNull() {
                this[this.tableCustomerChange.UpdEmployeeCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdAssemblyId1Null() {
                return this.IsNull(this.tableCustomerChange.UpdAssemblyId1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdAssemblyId1Null() {
                this[this.tableCustomerChange.UpdAssemblyId1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdAssemblyId2Null() {
                return this.IsNull(this.tableCustomerChange.UpdAssemblyId2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdAssemblyId2Null() {
                this[this.tableCustomerChange.UpdAssemblyId2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogicalDeleteCodeNull() {
                return this.IsNull(this.tableCustomerChange.LogicalDeleteCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogicalDeleteCodeNull() {
                this[this.tableCustomerChange.LogicalDeleteCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerCodeNull() {
                return this.IsNull(this.tableCustomerChange.CustomerCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerCodeNull() {
                this[this.tableCustomerChange.CustomerCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditMoneyNull() {
                return this.IsNull(this.tableCustomerChange.CreditMoneyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditMoneyNull() {
                this[this.tableCustomerChange.CreditMoneyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarningCreditMoneyNull() {
                return this.IsNull(this.tableCustomerChange.WarningCreditMoneyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarningCreditMoneyNull() {
                this[this.tableCustomerChange.WarningCreditMoneyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrsntAccRecBalanceNull() {
                return this.IsNull(this.tableCustomerChange.PrsntAccRecBalanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrsntAccRecBalanceNull() {
                this[this.tableCustomerChange.PrsntAccRecBalanceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerChangeRowChangeEvent : System.EventArgs {
            
            private CustomerChangeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerChangeRowChangeEvent(CustomerChangeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerChangeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591