//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.832
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("SalesReportDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SalesReportDataSet : System.Data.DataSet {
        
        private SalesReportResultDataTable tableSalesReportResult;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SalesReportDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SalesReportDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SalesReportResult"] != null)) {
                    base.Tables.Add(new SalesReportResultDataTable(ds.Tables["SalesReportResult"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SalesReportResultDataTable SalesReportResult {
            get {
                return this.tableSalesReportResult;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            SalesReportDataSet cln = ((SalesReportDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SalesReportResult"] != null)) {
                    base.Tables.Add(new SalesReportResultDataTable(ds.Tables["SalesReportResult"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSalesReportResult = ((SalesReportResultDataTable)(base.Tables["SalesReportResult"]));
            if ((initTable == true)) {
                if ((this.tableSalesReportResult != null)) {
                    this.tableSalesReportResult.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SalesReportDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SalesReportDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSalesReportResult = new SalesReportResultDataTable();
            base.Tables.Add(this.tableSalesReportResult);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSalesReportResult() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            SalesReportDataSet ds = new SalesReportDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void SalesReportResultRowChangeEventHandler(object sender, SalesReportResultRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SalesReportResultDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRowNo;
            
            private System.Data.DataColumn columnEnterpriseCode;
            
            private System.Data.DataColumn columnSectionCode;
            
            private System.Data.DataColumn columnSectionGuideSnm;
            
            private System.Data.DataColumn columnSalesTotalTaxExc;
            
            private System.Data.DataColumn columnSalesTargetMoney;
            
            private System.Data.DataColumn columnAchievementRateNet;
            
            private System.Data.DataColumn columnGrossMargin;
            
            private System.Data.DataColumn columnSalesTargetProfit;
            
            private System.Data.DataColumn columnAchievementRateGross;
            
            private System.Data.DataColumn columnOperationDay;
            
            private System.Data.DataColumn columnOperationDayString;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesReportResultDataTable() {
                this.TableName = "SalesReportResult";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesReportResultDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SalesReportResultDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowNoColumn {
                get {
                    return this.columnRowNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnterpriseCodeColumn {
                get {
                    return this.columnEnterpriseCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SectionCodeColumn {
                get {
                    return this.columnSectionCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SectionGuideSnmColumn {
                get {
                    return this.columnSectionGuideSnm;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesTotalTaxExcColumn {
                get {
                    return this.columnSalesTotalTaxExc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesTargetMoneyColumn {
                get {
                    return this.columnSalesTargetMoney;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AchievementRateNetColumn {
                get {
                    return this.columnAchievementRateNet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GrossMarginColumn {
                get {
                    return this.columnGrossMargin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesTargetProfitColumn {
                get {
                    return this.columnSalesTargetProfit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AchievementRateGrossColumn {
                get {
                    return this.columnAchievementRateGross;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OperationDayColumn {
                get {
                    return this.columnOperationDay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OperationDayStringColumn {
                get {
                    return this.columnOperationDayString;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesReportResultRow this[int index] {
                get {
                    return ((SalesReportResultRow)(this.Rows[index]));
                }
            }
            
            public event SalesReportResultRowChangeEventHandler SalesReportResultRowChanging;
            
            public event SalesReportResultRowChangeEventHandler SalesReportResultRowChanged;
            
            public event SalesReportResultRowChangeEventHandler SalesReportResultRowDeleting;
            
            public event SalesReportResultRowChangeEventHandler SalesReportResultRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSalesReportResultRow(SalesReportResultRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesReportResultRow AddSalesReportResultRow(int RowNo, string EnterpriseCode, string SectionCode, string SectionGuideSnm, long SalesTotalTaxExc, long SalesTargetMoney, double AchievementRateNet, long GrossMargin, long SalesTargetProfit, double AchievementRateGross, int OperationDay, string OperationDayString) {
                SalesReportResultRow rowSalesReportResultRow = ((SalesReportResultRow)(this.NewRow()));
                rowSalesReportResultRow.ItemArray = new object[] {
                        RowNo,
                        EnterpriseCode,
                        SectionCode,
                        SectionGuideSnm,
                        SalesTotalTaxExc,
                        SalesTargetMoney,
                        AchievementRateNet,
                        GrossMargin,
                        SalesTargetProfit,
                        AchievementRateGross,
                        OperationDay,
                        OperationDayString};
                this.Rows.Add(rowSalesReportResultRow);
                return rowSalesReportResultRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SalesReportResultDataTable cln = ((SalesReportResultDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SalesReportResultDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRowNo = base.Columns["RowNo"];
                this.columnEnterpriseCode = base.Columns["EnterpriseCode"];
                this.columnSectionCode = base.Columns["SectionCode"];
                this.columnSectionGuideSnm = base.Columns["SectionGuideSnm"];
                this.columnSalesTotalTaxExc = base.Columns["SalesTotalTaxExc"];
                this.columnSalesTargetMoney = base.Columns["SalesTargetMoney"];
                this.columnAchievementRateNet = base.Columns["AchievementRateNet"];
                this.columnGrossMargin = base.Columns["GrossMargin"];
                this.columnSalesTargetProfit = base.Columns["SalesTargetProfit"];
                this.columnAchievementRateGross = base.Columns["AchievementRateGross"];
                this.columnOperationDay = base.Columns["OperationDay"];
                this.columnOperationDayString = base.Columns["OperationDayString"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRowNo = new System.Data.DataColumn("RowNo", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNo);
                this.columnEnterpriseCode = new System.Data.DataColumn("EnterpriseCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnterpriseCode);
                this.columnSectionCode = new System.Data.DataColumn("SectionCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionCode);
                this.columnSectionGuideSnm = new System.Data.DataColumn("SectionGuideSnm", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionGuideSnm);
                this.columnSalesTotalTaxExc = new System.Data.DataColumn("SalesTotalTaxExc", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesTotalTaxExc);
                this.columnSalesTargetMoney = new System.Data.DataColumn("SalesTargetMoney", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesTargetMoney);
                this.columnAchievementRateNet = new System.Data.DataColumn("AchievementRateNet", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAchievementRateNet);
                this.columnGrossMargin = new System.Data.DataColumn("GrossMargin", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossMargin);
                this.columnSalesTargetProfit = new System.Data.DataColumn("SalesTargetProfit", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesTargetProfit);
                this.columnAchievementRateGross = new System.Data.DataColumn("AchievementRateGross", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAchievementRateGross);
                this.columnOperationDay = new System.Data.DataColumn("OperationDay", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperationDay);
                this.columnOperationDayString = new System.Data.DataColumn("OperationDayString", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperationDayString);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesReportResultRow NewSalesReportResultRow() {
                return ((SalesReportResultRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SalesReportResultRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SalesReportResultRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalesReportResultRowChanged != null)) {
                    this.SalesReportResultRowChanged(this, new SalesReportResultRowChangeEvent(((SalesReportResultRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalesReportResultRowChanging != null)) {
                    this.SalesReportResultRowChanging(this, new SalesReportResultRowChangeEvent(((SalesReportResultRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalesReportResultRowDeleted != null)) {
                    this.SalesReportResultRowDeleted(this, new SalesReportResultRowChangeEvent(((SalesReportResultRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalesReportResultRowDeleting != null)) {
                    this.SalesReportResultRowDeleting(this, new SalesReportResultRowChangeEvent(((SalesReportResultRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSalesReportResultRow(SalesReportResultRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SalesReportDataSet ds = new SalesReportDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SalesReportResultDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SalesReportResultRow : System.Data.DataRow {
            
            private SalesReportResultDataTable tableSalesReportResult;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesReportResultRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalesReportResult = ((SalesReportResultDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RowNo {
                get {
                    try {
                        return ((int)(this[this.tableSalesReportResult.RowNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SalesReportResult\' にある列 \'RowNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesReportResult.RowNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnterpriseCode {
                get {
                    try {
                        return ((string)(this[this.tableSalesReportResult.EnterpriseCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SalesReportResult\' にある列 \'EnterpriseCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesReportResult.EnterpriseCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionCode {
                get {
                    try {
                        return ((string)(this[this.tableSalesReportResult.SectionCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SalesReportResult\' にある列 \'SectionCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesReportResult.SectionCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionGuideSnm {
                get {
                    try {
                        return ((string)(this[this.tableSalesReportResult.SectionGuideSnmColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SalesReportResult\' にある列 \'SectionGuideSnm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesReportResult.SectionGuideSnmColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SalesTotalTaxExc {
                get {
                    try {
                        return ((long)(this[this.tableSalesReportResult.SalesTotalTaxExcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SalesReportResult\' にある列 \'SalesTotalTaxExc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesReportResult.SalesTotalTaxExcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SalesTargetMoney {
                get {
                    try {
                        return ((long)(this[this.tableSalesReportResult.SalesTargetMoneyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SalesReportResult\' にある列 \'SalesTargetMoney\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesReportResult.SalesTargetMoneyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AchievementRateNet {
                get {
                    try {
                        return ((double)(this[this.tableSalesReportResult.AchievementRateNetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SalesReportResult\' にある列 \'AchievementRateNet\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesReportResult.AchievementRateNetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long GrossMargin {
                get {
                    try {
                        return ((long)(this[this.tableSalesReportResult.GrossMarginColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SalesReportResult\' にある列 \'GrossMargin\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesReportResult.GrossMarginColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SalesTargetProfit {
                get {
                    try {
                        return ((long)(this[this.tableSalesReportResult.SalesTargetProfitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SalesReportResult\' にある列 \'SalesTargetProfit\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesReportResult.SalesTargetProfitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AchievementRateGross {
                get {
                    try {
                        return ((double)(this[this.tableSalesReportResult.AchievementRateGrossColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SalesReportResult\' にある列 \'AchievementRateGross\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesReportResult.AchievementRateGrossColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperationDay {
                get {
                    try {
                        return ((int)(this[this.tableSalesReportResult.OperationDayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SalesReportResult\' にある列 \'OperationDay\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesReportResult.OperationDayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OperationDayString {
                get {
                    try {
                        return ((string)(this[this.tableSalesReportResult.OperationDayStringColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("テーブル \'SalesReportResult\' にある列 \'OperationDayString\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSalesReportResult.OperationDayStringColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowNoNull() {
                return this.IsNull(this.tableSalesReportResult.RowNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowNoNull() {
                this[this.tableSalesReportResult.RowNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnterpriseCodeNull() {
                return this.IsNull(this.tableSalesReportResult.EnterpriseCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnterpriseCodeNull() {
                this[this.tableSalesReportResult.EnterpriseCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionCodeNull() {
                return this.IsNull(this.tableSalesReportResult.SectionCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionCodeNull() {
                this[this.tableSalesReportResult.SectionCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionGuideSnmNull() {
                return this.IsNull(this.tableSalesReportResult.SectionGuideSnmColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionGuideSnmNull() {
                this[this.tableSalesReportResult.SectionGuideSnmColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesTotalTaxExcNull() {
                return this.IsNull(this.tableSalesReportResult.SalesTotalTaxExcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesTotalTaxExcNull() {
                this[this.tableSalesReportResult.SalesTotalTaxExcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesTargetMoneyNull() {
                return this.IsNull(this.tableSalesReportResult.SalesTargetMoneyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesTargetMoneyNull() {
                this[this.tableSalesReportResult.SalesTargetMoneyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAchievementRateNetNull() {
                return this.IsNull(this.tableSalesReportResult.AchievementRateNetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAchievementRateNetNull() {
                this[this.tableSalesReportResult.AchievementRateNetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossMarginNull() {
                return this.IsNull(this.tableSalesReportResult.GrossMarginColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossMarginNull() {
                this[this.tableSalesReportResult.GrossMarginColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesTargetProfitNull() {
                return this.IsNull(this.tableSalesReportResult.SalesTargetProfitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesTargetProfitNull() {
                this[this.tableSalesReportResult.SalesTargetProfitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAchievementRateGrossNull() {
                return this.IsNull(this.tableSalesReportResult.AchievementRateGrossColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAchievementRateGrossNull() {
                this[this.tableSalesReportResult.AchievementRateGrossColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperationDayNull() {
                return this.IsNull(this.tableSalesReportResult.OperationDayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperationDayNull() {
                this[this.tableSalesReportResult.OperationDayColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperationDayStringNull() {
                return this.IsNull(this.tableSalesReportResult.OperationDayStringColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperationDayStringNull() {
                this[this.tableSalesReportResult.OperationDayStringColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SalesReportResultRowChangeEvent : System.EventArgs {
            
            private SalesReportResultRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesReportResultRowChangeEvent(SalesReportResultRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesReportResultRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591