//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.5456
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SupplierCheckDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SupplierCheckDataSet : global::System.Data.DataSet {
        
        private SlipListDataTable tableSlipList;
        
        private DetailListDataTable tableDetailList;
        
        private TotalListDataTable tableTotalList;
        
        private SumDataTable tableSum;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SupplierCheckDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SupplierCheckDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SlipList"] != null)) {
                    base.Tables.Add(new SlipListDataTable(ds.Tables["SlipList"]));
                }
                if ((ds.Tables["DetailList"] != null)) {
                    base.Tables.Add(new DetailListDataTable(ds.Tables["DetailList"]));
                }
                if ((ds.Tables["TotalList"] != null)) {
                    base.Tables.Add(new TotalListDataTable(ds.Tables["TotalList"]));
                }
                if ((ds.Tables["Sum"] != null)) {
                    base.Tables.Add(new SumDataTable(ds.Tables["Sum"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SlipListDataTable SlipList {
            get {
                return this.tableSlipList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DetailListDataTable DetailList {
            get {
                return this.tableDetailList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TotalListDataTable TotalList {
            get {
                return this.tableTotalList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SumDataTable Sum {
            get {
                return this.tableSum;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SupplierCheckDataSet cln = ((SupplierCheckDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SlipList"] != null)) {
                    base.Tables.Add(new SlipListDataTable(ds.Tables["SlipList"]));
                }
                if ((ds.Tables["DetailList"] != null)) {
                    base.Tables.Add(new DetailListDataTable(ds.Tables["DetailList"]));
                }
                if ((ds.Tables["TotalList"] != null)) {
                    base.Tables.Add(new TotalListDataTable(ds.Tables["TotalList"]));
                }
                if ((ds.Tables["Sum"] != null)) {
                    base.Tables.Add(new SumDataTable(ds.Tables["Sum"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSlipList = ((SlipListDataTable)(base.Tables["SlipList"]));
            if ((initTable == true)) {
                if ((this.tableSlipList != null)) {
                    this.tableSlipList.InitVars();
                }
            }
            this.tableDetailList = ((DetailListDataTable)(base.Tables["DetailList"]));
            if ((initTable == true)) {
                if ((this.tableDetailList != null)) {
                    this.tableDetailList.InitVars();
                }
            }
            this.tableTotalList = ((TotalListDataTable)(base.Tables["TotalList"]));
            if ((initTable == true)) {
                if ((this.tableTotalList != null)) {
                    this.tableTotalList.InitVars();
                }
            }
            this.tableSum = ((SumDataTable)(base.Tables["Sum"]));
            if ((initTable == true)) {
                if ((this.tableSum != null)) {
                    this.tableSum.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SupplierCheckDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SupplierCheckDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSlipList = new SlipListDataTable();
            base.Tables.Add(this.tableSlipList);
            this.tableDetailList = new DetailListDataTable();
            base.Tables.Add(this.tableDetailList);
            this.tableTotalList = new TotalListDataTable();
            base.Tables.Add(this.tableTotalList);
            this.tableSum = new SumDataTable();
            base.Tables.Add(this.tableSum);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSlipList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDetailList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTotalList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSum() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SupplierCheckDataSet ds = new SupplierCheckDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SlipListRowChangeEventHandler(object sender, SlipListRowChangeEvent e);
        
        public delegate void DetailListRowChangeEventHandler(object sender, DetailListRowChangeEvent e);
        
        public delegate void TotalListRowChangeEventHandler(object sender, TotalListRowChangeEvent e);
        
        public delegate void SumRowChangeEventHandler(object sender, SumRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SlipListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCheckBoxDaily;
            
            private global::System.Data.DataColumn columnCheckBoxCalc;
            
            private global::System.Data.DataColumn columnCheckBoxDailyStatus;
            
            private global::System.Data.DataColumn columnCheckBoxCalcStatus;
            
            private global::System.Data.DataColumn columnRowNo;
            
            private global::System.Data.DataColumn columnStockDate;
            
            private global::System.Data.DataColumn columnStockDateString;
            
            private global::System.Data.DataColumn columnInputDay;
            
            private global::System.Data.DataColumn columnInputDayString;
            
            private global::System.Data.DataColumn columnSupplierSlipNo;
            
            private global::System.Data.DataColumn columnPartySaleSlipNum;
            
            private global::System.Data.DataColumn columnStockPriceTaxInc;
            
            private global::System.Data.DataColumn columnStockPriceTaxExc;
            
            private global::System.Data.DataColumn columnStockPriceConsTax;
            
            private global::System.Data.DataColumn columnSalesDate;
            
            private global::System.Data.DataColumn columnSalesDateString;
            
            private global::System.Data.DataColumn columnSalesSlipNum;
            
            private global::System.Data.DataColumn columnCustomerCode;
            
            private global::System.Data.DataColumn columnCustomerSnm;
            
            private global::System.Data.DataColumn columnSalesMoneyTaxExc;
            
            private global::System.Data.DataColumn columnSalesEmployeeNm;
            
            private global::System.Data.DataColumn columnFrontEmployeeNm;
            
            private global::System.Data.DataColumn columnSalesInputName;
            
            private global::System.Data.DataColumn columnUoeRemark1;
            
            private global::System.Data.DataColumn columnUoeRemark2;
            
            private global::System.Data.DataColumn columnSupplierCd;
            
            private global::System.Data.DataColumn columnSupplierSnm;
            
            private global::System.Data.DataColumn columnCheckBoxDailyEx;
            
            private global::System.Data.DataColumn columnCheckBoxCalcEx;
            
            private global::System.Data.DataColumn columnCheckBoxDailyStatusEx;
            
            private global::System.Data.DataColumn columnCheckBoxCalcStatusEx;
            
            private global::System.Data.DataColumn columnSupplierSlipCd;
            
            private global::System.Data.DataColumn columnWayToOrder;
            
            private global::System.Data.DataColumn columnDebitNoteDiv;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlipListDataTable() {
                this.TableName = "SlipList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SlipListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SlipListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckBoxDailyColumn {
                get {
                    return this.columnCheckBoxDaily;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckBoxCalcColumn {
                get {
                    return this.columnCheckBoxCalc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckBoxDailyStatusColumn {
                get {
                    return this.columnCheckBoxDailyStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckBoxCalcStatusColumn {
                get {
                    return this.columnCheckBoxCalcStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowNoColumn {
                get {
                    return this.columnRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockDateColumn {
                get {
                    return this.columnStockDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockDateStringColumn {
                get {
                    return this.columnStockDateString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InputDayColumn {
                get {
                    return this.columnInputDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InputDayStringColumn {
                get {
                    return this.columnInputDayString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipNoColumn {
                get {
                    return this.columnSupplierSlipNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartySaleSlipNumColumn {
                get {
                    return this.columnPartySaleSlipNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockPriceTaxIncColumn {
                get {
                    return this.columnStockPriceTaxInc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockPriceTaxExcColumn {
                get {
                    return this.columnStockPriceTaxExc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockPriceConsTaxColumn {
                get {
                    return this.columnStockPriceConsTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesDateColumn {
                get {
                    return this.columnSalesDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesDateStringColumn {
                get {
                    return this.columnSalesDateString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesSlipNumColumn {
                get {
                    return this.columnSalesSlipNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerCodeColumn {
                get {
                    return this.columnCustomerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerSnmColumn {
                get {
                    return this.columnCustomerSnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesMoneyTaxExcColumn {
                get {
                    return this.columnSalesMoneyTaxExc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesEmployeeNmColumn {
                get {
                    return this.columnSalesEmployeeNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrontEmployeeNmColumn {
                get {
                    return this.columnFrontEmployeeNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesInputNameColumn {
                get {
                    return this.columnSalesInputName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UoeRemark1Column {
                get {
                    return this.columnUoeRemark1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UoeRemark2Column {
                get {
                    return this.columnUoeRemark2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierCdColumn {
                get {
                    return this.columnSupplierCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSnmColumn {
                get {
                    return this.columnSupplierSnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckBoxDailyExColumn {
                get {
                    return this.columnCheckBoxDailyEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckBoxCalcExColumn {
                get {
                    return this.columnCheckBoxCalcEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckBoxDailyStatusExColumn {
                get {
                    return this.columnCheckBoxDailyStatusEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckBoxCalcStatusExColumn {
                get {
                    return this.columnCheckBoxCalcStatusEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipCdColumn {
                get {
                    return this.columnSupplierSlipCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WayToOrderColumn {
                get {
                    return this.columnWayToOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebitNoteDivColumn {
                get {
                    return this.columnDebitNoteDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlipListRow this[int index] {
                get {
                    return ((SlipListRow)(this.Rows[index]));
                }
            }
            
            public event SlipListRowChangeEventHandler SlipListRowChanging;
            
            public event SlipListRowChangeEventHandler SlipListRowChanged;
            
            public event SlipListRowChangeEventHandler SlipListRowDeleting;
            
            public event SlipListRowChangeEventHandler SlipListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSlipListRow(SlipListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlipListRow AddSlipListRow(
                        bool CheckBoxDaily, 
                        bool CheckBoxCalc, 
                        int CheckBoxDailyStatus, 
                        int CheckBoxCalcStatus, 
                        int RowNo, 
                        System.DateTime StockDate, 
                        string StockDateString, 
                        System.DateTime InputDay, 
                        string InputDayString, 
                        int SupplierSlipNo, 
                        string PartySaleSlipNum, 
                        long StockPriceTaxInc, 
                        long StockPriceTaxExc, 
                        long StockPriceConsTax, 
                        System.DateTime SalesDate, 
                        string SalesDateString, 
                        string SalesSlipNum, 
                        string CustomerCode, 
                        string CustomerSnm, 
                        long SalesMoneyTaxExc, 
                        string SalesEmployeeNm, 
                        string FrontEmployeeNm, 
                        string SalesInputName, 
                        string UoeRemark1, 
                        string UoeRemark2, 
                        string SupplierCd, 
                        string SupplierSnm, 
                        int CheckBoxDailyEx, 
                        int CheckBoxCalcEx, 
                        int CheckBoxDailyStatusEx, 
                        int CheckBoxCalcStatusEx, 
                        int SupplierSlipCd, 
                        string WayToOrder, 
                        int DebitNoteDiv) {
                SlipListRow rowSlipListRow = ((SlipListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CheckBoxDaily,
                        CheckBoxCalc,
                        CheckBoxDailyStatus,
                        CheckBoxCalcStatus,
                        RowNo,
                        StockDate,
                        StockDateString,
                        InputDay,
                        InputDayString,
                        SupplierSlipNo,
                        PartySaleSlipNum,
                        StockPriceTaxInc,
                        StockPriceTaxExc,
                        StockPriceConsTax,
                        SalesDate,
                        SalesDateString,
                        SalesSlipNum,
                        CustomerCode,
                        CustomerSnm,
                        SalesMoneyTaxExc,
                        SalesEmployeeNm,
                        FrontEmployeeNm,
                        SalesInputName,
                        UoeRemark1,
                        UoeRemark2,
                        SupplierCd,
                        SupplierSnm,
                        CheckBoxDailyEx,
                        CheckBoxCalcEx,
                        CheckBoxDailyStatusEx,
                        CheckBoxCalcStatusEx,
                        SupplierSlipCd,
                        WayToOrder,
                        DebitNoteDiv};
                rowSlipListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSlipListRow);
                return rowSlipListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlipListRow FindByRowNo(int RowNo) {
                return ((SlipListRow)(this.Rows.Find(new object[] {
                            RowNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SlipListDataTable cln = ((SlipListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SlipListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCheckBoxDaily = base.Columns["CheckBoxDaily"];
                this.columnCheckBoxCalc = base.Columns["CheckBoxCalc"];
                this.columnCheckBoxDailyStatus = base.Columns["CheckBoxDailyStatus"];
                this.columnCheckBoxCalcStatus = base.Columns["CheckBoxCalcStatus"];
                this.columnRowNo = base.Columns["RowNo"];
                this.columnStockDate = base.Columns["StockDate"];
                this.columnStockDateString = base.Columns["StockDateString"];
                this.columnInputDay = base.Columns["InputDay"];
                this.columnInputDayString = base.Columns["InputDayString"];
                this.columnSupplierSlipNo = base.Columns["SupplierSlipNo"];
                this.columnPartySaleSlipNum = base.Columns["PartySaleSlipNum"];
                this.columnStockPriceTaxInc = base.Columns["StockPriceTaxInc"];
                this.columnStockPriceTaxExc = base.Columns["StockPriceTaxExc"];
                this.columnStockPriceConsTax = base.Columns["StockPriceConsTax"];
                this.columnSalesDate = base.Columns["SalesDate"];
                this.columnSalesDateString = base.Columns["SalesDateString"];
                this.columnSalesSlipNum = base.Columns["SalesSlipNum"];
                this.columnCustomerCode = base.Columns["CustomerCode"];
                this.columnCustomerSnm = base.Columns["CustomerSnm"];
                this.columnSalesMoneyTaxExc = base.Columns["SalesMoneyTaxExc"];
                this.columnSalesEmployeeNm = base.Columns["SalesEmployeeNm"];
                this.columnFrontEmployeeNm = base.Columns["FrontEmployeeNm"];
                this.columnSalesInputName = base.Columns["SalesInputName"];
                this.columnUoeRemark1 = base.Columns["UoeRemark1"];
                this.columnUoeRemark2 = base.Columns["UoeRemark2"];
                this.columnSupplierCd = base.Columns["SupplierCd"];
                this.columnSupplierSnm = base.Columns["SupplierSnm"];
                this.columnCheckBoxDailyEx = base.Columns["CheckBoxDailyEx"];
                this.columnCheckBoxCalcEx = base.Columns["CheckBoxCalcEx"];
                this.columnCheckBoxDailyStatusEx = base.Columns["CheckBoxDailyStatusEx"];
                this.columnCheckBoxCalcStatusEx = base.Columns["CheckBoxCalcStatusEx"];
                this.columnSupplierSlipCd = base.Columns["SupplierSlipCd"];
                this.columnWayToOrder = base.Columns["WayToOrder"];
                this.columnDebitNoteDiv = base.Columns["DebitNoteDiv"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCheckBoxDaily = new global::System.Data.DataColumn("CheckBoxDaily", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckBoxDaily);
                this.columnCheckBoxCalc = new global::System.Data.DataColumn("CheckBoxCalc", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckBoxCalc);
                this.columnCheckBoxDailyStatus = new global::System.Data.DataColumn("CheckBoxDailyStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckBoxDailyStatus);
                this.columnCheckBoxCalcStatus = new global::System.Data.DataColumn("CheckBoxCalcStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckBoxCalcStatus);
                this.columnRowNo = new global::System.Data.DataColumn("RowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNo);
                this.columnStockDate = new global::System.Data.DataColumn("StockDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockDate);
                this.columnStockDateString = new global::System.Data.DataColumn("StockDateString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockDateString);
                this.columnInputDay = new global::System.Data.DataColumn("InputDay", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputDay);
                this.columnInputDayString = new global::System.Data.DataColumn("InputDayString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputDayString);
                this.columnSupplierSlipNo = new global::System.Data.DataColumn("SupplierSlipNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipNo);
                this.columnPartySaleSlipNum = new global::System.Data.DataColumn("PartySaleSlipNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartySaleSlipNum);
                this.columnStockPriceTaxInc = new global::System.Data.DataColumn("StockPriceTaxInc", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockPriceTaxInc);
                this.columnStockPriceTaxExc = new global::System.Data.DataColumn("StockPriceTaxExc", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockPriceTaxExc);
                this.columnStockPriceConsTax = new global::System.Data.DataColumn("StockPriceConsTax", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockPriceConsTax);
                this.columnSalesDate = new global::System.Data.DataColumn("SalesDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesDate);
                this.columnSalesDateString = new global::System.Data.DataColumn("SalesDateString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesDateString);
                this.columnSalesSlipNum = new global::System.Data.DataColumn("SalesSlipNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesSlipNum);
                this.columnCustomerCode = new global::System.Data.DataColumn("CustomerCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerCode);
                this.columnCustomerSnm = new global::System.Data.DataColumn("CustomerSnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerSnm);
                this.columnSalesMoneyTaxExc = new global::System.Data.DataColumn("SalesMoneyTaxExc", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesMoneyTaxExc);
                this.columnSalesEmployeeNm = new global::System.Data.DataColumn("SalesEmployeeNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesEmployeeNm);
                this.columnFrontEmployeeNm = new global::System.Data.DataColumn("FrontEmployeeNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrontEmployeeNm);
                this.columnSalesInputName = new global::System.Data.DataColumn("SalesInputName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesInputName);
                this.columnUoeRemark1 = new global::System.Data.DataColumn("UoeRemark1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUoeRemark1);
                this.columnUoeRemark2 = new global::System.Data.DataColumn("UoeRemark2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUoeRemark2);
                this.columnSupplierCd = new global::System.Data.DataColumn("SupplierCd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierCd);
                this.columnSupplierSnm = new global::System.Data.DataColumn("SupplierSnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSnm);
                this.columnCheckBoxDailyEx = new global::System.Data.DataColumn("CheckBoxDailyEx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckBoxDailyEx);
                this.columnCheckBoxCalcEx = new global::System.Data.DataColumn("CheckBoxCalcEx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckBoxCalcEx);
                this.columnCheckBoxDailyStatusEx = new global::System.Data.DataColumn("CheckBoxDailyStatusEx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckBoxDailyStatusEx);
                this.columnCheckBoxCalcStatusEx = new global::System.Data.DataColumn("CheckBoxCalcStatusEx", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckBoxCalcStatusEx);
                this.columnSupplierSlipCd = new global::System.Data.DataColumn("SupplierSlipCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipCd);
                this.columnWayToOrder = new global::System.Data.DataColumn("WayToOrder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWayToOrder);
                this.columnDebitNoteDiv = new global::System.Data.DataColumn("DebitNoteDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebitNoteDiv);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRowNo}, true));
                this.columnCheckBoxDaily.Caption = "日次ﾁｪｯｸﾎﾞｯｸｽ";
                this.columnCheckBoxCalc.Caption = "締次ﾁｪｯｸﾎﾞｯｸｽ";
                this.columnRowNo.AllowDBNull = false;
                this.columnRowNo.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlipListRow NewSlipListRow() {
                return ((SlipListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SlipListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SlipListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SlipListRowChanged != null)) {
                    this.SlipListRowChanged(this, new SlipListRowChangeEvent(((SlipListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SlipListRowChanging != null)) {
                    this.SlipListRowChanging(this, new SlipListRowChangeEvent(((SlipListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SlipListRowDeleted != null)) {
                    this.SlipListRowDeleted(this, new SlipListRowChangeEvent(((SlipListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SlipListRowDeleting != null)) {
                    this.SlipListRowDeleting(this, new SlipListRowChangeEvent(((SlipListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSlipListRow(SlipListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SupplierCheckDataSet ds = new SupplierCheckDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SlipListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DetailListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCheckBoxDaily;
            
            private global::System.Data.DataColumn columnCheckBoxCalc;
            
            private global::System.Data.DataColumn columnRowNo;
            
            private global::System.Data.DataColumn columnStockDate;
            
            private global::System.Data.DataColumn columnStockDateString;
            
            private global::System.Data.DataColumn columnInputDay;
            
            private global::System.Data.DataColumn columnInputDayString;
            
            private global::System.Data.DataColumn columnSupplierSlipNo;
            
            private global::System.Data.DataColumn columnSupplierSlipNoKey;
            
            private global::System.Data.DataColumn columnPartySaleSlipNum;
            
            private global::System.Data.DataColumn columnStockPriceTaxInc;
            
            private global::System.Data.DataColumn columnStockPriceTaxExc;
            
            private global::System.Data.DataColumn columnStockPriceConsTax;
            
            private global::System.Data.DataColumn columnGoodsNo;
            
            private global::System.Data.DataColumn columnStockCount;
            
            private global::System.Data.DataColumn columnBLGoodsCode;
            
            private global::System.Data.DataColumn columnGoodsName;
            
            private global::System.Data.DataColumn columnStockUnitPriceFl;
            
            private global::System.Data.DataColumn columnListPriceTaxExcFl;
            
            private global::System.Data.DataColumn columnSalesUnPrcTaxExcFl;
            
            private global::System.Data.DataColumn columnSalesMoneyTaxExc;
            
            private global::System.Data.DataColumn columnProfitMark;
            
            private global::System.Data.DataColumn columnProfit;
            
            private global::System.Data.DataColumn columnProfitRate;
            
            private global::System.Data.DataColumn columnCheckBoxDailyEx;
            
            private global::System.Data.DataColumn columnCheckBoxCalcEx;
            
            private global::System.Data.DataColumn columnLogicalDeleteCode;
            
            private global::System.Data.DataColumn columnSupplierSlipCd;
            
            private global::System.Data.DataColumn columnStockSlipDtlNum;
            
            private global::System.Data.DataColumn columnSalesDate;
            
            private global::System.Data.DataColumn columnSalesDateString;
            
            private global::System.Data.DataColumn columnSupplierFormal;
            
            private global::System.Data.DataColumn columnFileHeaderGuid;
            
            private global::System.Data.DataColumn columnCreateDateTime;
            
            private global::System.Data.DataColumn columnUpdateDateTime;
            
            private global::System.Data.DataColumn columnEnterpriseCode;
            
            private global::System.Data.DataColumn columnWayToOrder;
            
            private global::System.Data.DataColumn columnDebitNoteDiv;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailListDataTable() {
                this.TableName = "DetailList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DetailListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckBoxDailyColumn {
                get {
                    return this.columnCheckBoxDaily;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckBoxCalcColumn {
                get {
                    return this.columnCheckBoxCalc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowNoColumn {
                get {
                    return this.columnRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockDateColumn {
                get {
                    return this.columnStockDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockDateStringColumn {
                get {
                    return this.columnStockDateString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InputDayColumn {
                get {
                    return this.columnInputDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InputDayStringColumn {
                get {
                    return this.columnInputDayString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipNoColumn {
                get {
                    return this.columnSupplierSlipNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipNoKeyColumn {
                get {
                    return this.columnSupplierSlipNoKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartySaleSlipNumColumn {
                get {
                    return this.columnPartySaleSlipNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockPriceTaxIncColumn {
                get {
                    return this.columnStockPriceTaxInc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockPriceTaxExcColumn {
                get {
                    return this.columnStockPriceTaxExc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockPriceConsTaxColumn {
                get {
                    return this.columnStockPriceConsTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNoColumn {
                get {
                    return this.columnGoodsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockCountColumn {
                get {
                    return this.columnStockCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLGoodsCodeColumn {
                get {
                    return this.columnBLGoodsCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNameColumn {
                get {
                    return this.columnGoodsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockUnitPriceFlColumn {
                get {
                    return this.columnStockUnitPriceFl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ListPriceTaxExcFlColumn {
                get {
                    return this.columnListPriceTaxExcFl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesUnPrcTaxExcFlColumn {
                get {
                    return this.columnSalesUnPrcTaxExcFl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesMoneyTaxExcColumn {
                get {
                    return this.columnSalesMoneyTaxExc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProfitMarkColumn {
                get {
                    return this.columnProfitMark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProfitColumn {
                get {
                    return this.columnProfit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProfitRateColumn {
                get {
                    return this.columnProfitRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckBoxDailyExColumn {
                get {
                    return this.columnCheckBoxDailyEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckBoxCalcExColumn {
                get {
                    return this.columnCheckBoxCalcEx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogicalDeleteCodeColumn {
                get {
                    return this.columnLogicalDeleteCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipCdColumn {
                get {
                    return this.columnSupplierSlipCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockSlipDtlNumColumn {
                get {
                    return this.columnStockSlipDtlNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesDateColumn {
                get {
                    return this.columnSalesDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesDateStringColumn {
                get {
                    return this.columnSalesDateString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierFormalColumn {
                get {
                    return this.columnSupplierFormal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileHeaderGuidColumn {
                get {
                    return this.columnFileHeaderGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateTimeColumn {
                get {
                    return this.columnCreateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateTimeColumn {
                get {
                    return this.columnUpdateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnterpriseCodeColumn {
                get {
                    return this.columnEnterpriseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WayToOrderColumn {
                get {
                    return this.columnWayToOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebitNoteDivColumn {
                get {
                    return this.columnDebitNoteDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailListRow this[int index] {
                get {
                    return ((DetailListRow)(this.Rows[index]));
                }
            }
            
            public event DetailListRowChangeEventHandler DetailListRowChanging;
            
            public event DetailListRowChangeEventHandler DetailListRowChanged;
            
            public event DetailListRowChangeEventHandler DetailListRowDeleting;
            
            public event DetailListRowChangeEventHandler DetailListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDetailListRow(DetailListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailListRow AddDetailListRow(
                        bool CheckBoxDaily, 
                        bool CheckBoxCalc, 
                        int RowNo, 
                        System.DateTime StockDate, 
                        string StockDateString, 
                        System.DateTime InputDay, 
                        string InputDayString, 
                        int SupplierSlipNo, 
                        int SupplierSlipNoKey, 
                        string PartySaleSlipNum, 
                        long StockPriceTaxInc, 
                        long StockPriceTaxExc, 
                        long StockPriceConsTax, 
                        string GoodsNo, 
                        double StockCount, 
                        int BLGoodsCode, 
                        string GoodsName, 
                        double StockUnitPriceFl, 
                        double ListPriceTaxExcFl, 
                        double SalesUnPrcTaxExcFl, 
                        double SalesMoneyTaxExc, 
                        string ProfitMark, 
                        double Profit, 
                        double ProfitRate, 
                        bool CheckBoxDailyEx, 
                        bool CheckBoxCalcEx, 
                        int LogicalDeleteCode, 
                        int SupplierSlipCd, 
                        long StockSlipDtlNum, 
                        System.DateTime SalesDate, 
                        string SalesDateString, 
                        int SupplierFormal, 
                        System.Guid FileHeaderGuid, 
                        System.DateTime CreateDateTime, 
                        System.DateTime UpdateDateTime, 
                        string EnterpriseCode, 
                        string WayToOrder, 
                        int DebitNoteDiv) {
                DetailListRow rowDetailListRow = ((DetailListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CheckBoxDaily,
                        CheckBoxCalc,
                        RowNo,
                        StockDate,
                        StockDateString,
                        InputDay,
                        InputDayString,
                        SupplierSlipNo,
                        SupplierSlipNoKey,
                        PartySaleSlipNum,
                        StockPriceTaxInc,
                        StockPriceTaxExc,
                        StockPriceConsTax,
                        GoodsNo,
                        StockCount,
                        BLGoodsCode,
                        GoodsName,
                        StockUnitPriceFl,
                        ListPriceTaxExcFl,
                        SalesUnPrcTaxExcFl,
                        SalesMoneyTaxExc,
                        ProfitMark,
                        Profit,
                        ProfitRate,
                        CheckBoxDailyEx,
                        CheckBoxCalcEx,
                        LogicalDeleteCode,
                        SupplierSlipCd,
                        StockSlipDtlNum,
                        SalesDate,
                        SalesDateString,
                        SupplierFormal,
                        FileHeaderGuid,
                        CreateDateTime,
                        UpdateDateTime,
                        EnterpriseCode,
                        WayToOrder,
                        DebitNoteDiv};
                rowDetailListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDetailListRow);
                return rowDetailListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailListRow FindByRowNo(int RowNo) {
                return ((DetailListRow)(this.Rows.Find(new object[] {
                            RowNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DetailListDataTable cln = ((DetailListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DetailListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCheckBoxDaily = base.Columns["CheckBoxDaily"];
                this.columnCheckBoxCalc = base.Columns["CheckBoxCalc"];
                this.columnRowNo = base.Columns["RowNo"];
                this.columnStockDate = base.Columns["StockDate"];
                this.columnStockDateString = base.Columns["StockDateString"];
                this.columnInputDay = base.Columns["InputDay"];
                this.columnInputDayString = base.Columns["InputDayString"];
                this.columnSupplierSlipNo = base.Columns["SupplierSlipNo"];
                this.columnSupplierSlipNoKey = base.Columns["SupplierSlipNoKey"];
                this.columnPartySaleSlipNum = base.Columns["PartySaleSlipNum"];
                this.columnStockPriceTaxInc = base.Columns["StockPriceTaxInc"];
                this.columnStockPriceTaxExc = base.Columns["StockPriceTaxExc"];
                this.columnStockPriceConsTax = base.Columns["StockPriceConsTax"];
                this.columnGoodsNo = base.Columns["GoodsNo"];
                this.columnStockCount = base.Columns["StockCount"];
                this.columnBLGoodsCode = base.Columns["BLGoodsCode"];
                this.columnGoodsName = base.Columns["GoodsName"];
                this.columnStockUnitPriceFl = base.Columns["StockUnitPriceFl"];
                this.columnListPriceTaxExcFl = base.Columns["ListPriceTaxExcFl"];
                this.columnSalesUnPrcTaxExcFl = base.Columns["SalesUnPrcTaxExcFl"];
                this.columnSalesMoneyTaxExc = base.Columns["SalesMoneyTaxExc"];
                this.columnProfitMark = base.Columns["ProfitMark"];
                this.columnProfit = base.Columns["Profit"];
                this.columnProfitRate = base.Columns["ProfitRate"];
                this.columnCheckBoxDailyEx = base.Columns["CheckBoxDailyEx"];
                this.columnCheckBoxCalcEx = base.Columns["CheckBoxCalcEx"];
                this.columnLogicalDeleteCode = base.Columns["LogicalDeleteCode"];
                this.columnSupplierSlipCd = base.Columns["SupplierSlipCd"];
                this.columnStockSlipDtlNum = base.Columns["StockSlipDtlNum"];
                this.columnSalesDate = base.Columns["SalesDate"];
                this.columnSalesDateString = base.Columns["SalesDateString"];
                this.columnSupplierFormal = base.Columns["SupplierFormal"];
                this.columnFileHeaderGuid = base.Columns["FileHeaderGuid"];
                this.columnCreateDateTime = base.Columns["CreateDateTime"];
                this.columnUpdateDateTime = base.Columns["UpdateDateTime"];
                this.columnEnterpriseCode = base.Columns["EnterpriseCode"];
                this.columnWayToOrder = base.Columns["WayToOrder"];
                this.columnDebitNoteDiv = base.Columns["DebitNoteDiv"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCheckBoxDaily = new global::System.Data.DataColumn("CheckBoxDaily", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckBoxDaily);
                this.columnCheckBoxCalc = new global::System.Data.DataColumn("CheckBoxCalc", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckBoxCalc);
                this.columnRowNo = new global::System.Data.DataColumn("RowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNo);
                this.columnStockDate = new global::System.Data.DataColumn("StockDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockDate);
                this.columnStockDateString = new global::System.Data.DataColumn("StockDateString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockDateString);
                this.columnInputDay = new global::System.Data.DataColumn("InputDay", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputDay);
                this.columnInputDayString = new global::System.Data.DataColumn("InputDayString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputDayString);
                this.columnSupplierSlipNo = new global::System.Data.DataColumn("SupplierSlipNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipNo);
                this.columnSupplierSlipNoKey = new global::System.Data.DataColumn("SupplierSlipNoKey", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipNoKey);
                this.columnPartySaleSlipNum = new global::System.Data.DataColumn("PartySaleSlipNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartySaleSlipNum);
                this.columnStockPriceTaxInc = new global::System.Data.DataColumn("StockPriceTaxInc", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockPriceTaxInc);
                this.columnStockPriceTaxExc = new global::System.Data.DataColumn("StockPriceTaxExc", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockPriceTaxExc);
                this.columnStockPriceConsTax = new global::System.Data.DataColumn("StockPriceConsTax", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockPriceConsTax);
                this.columnGoodsNo = new global::System.Data.DataColumn("GoodsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsNo);
                this.columnStockCount = new global::System.Data.DataColumn("StockCount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockCount);
                this.columnBLGoodsCode = new global::System.Data.DataColumn("BLGoodsCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLGoodsCode);
                this.columnGoodsName = new global::System.Data.DataColumn("GoodsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsName);
                this.columnStockUnitPriceFl = new global::System.Data.DataColumn("StockUnitPriceFl", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockUnitPriceFl);
                this.columnListPriceTaxExcFl = new global::System.Data.DataColumn("ListPriceTaxExcFl", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnListPriceTaxExcFl);
                this.columnSalesUnPrcTaxExcFl = new global::System.Data.DataColumn("SalesUnPrcTaxExcFl", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesUnPrcTaxExcFl);
                this.columnSalesMoneyTaxExc = new global::System.Data.DataColumn("SalesMoneyTaxExc", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesMoneyTaxExc);
                this.columnProfitMark = new global::System.Data.DataColumn("ProfitMark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProfitMark);
                this.columnProfit = new global::System.Data.DataColumn("Profit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProfit);
                this.columnProfitRate = new global::System.Data.DataColumn("ProfitRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProfitRate);
                this.columnCheckBoxDailyEx = new global::System.Data.DataColumn("CheckBoxDailyEx", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckBoxDailyEx);
                this.columnCheckBoxCalcEx = new global::System.Data.DataColumn("CheckBoxCalcEx", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckBoxCalcEx);
                this.columnLogicalDeleteCode = new global::System.Data.DataColumn("LogicalDeleteCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogicalDeleteCode);
                this.columnSupplierSlipCd = new global::System.Data.DataColumn("SupplierSlipCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipCd);
                this.columnStockSlipDtlNum = new global::System.Data.DataColumn("StockSlipDtlNum", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockSlipDtlNum);
                this.columnSalesDate = new global::System.Data.DataColumn("SalesDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesDate);
                this.columnSalesDateString = new global::System.Data.DataColumn("SalesDateString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesDateString);
                this.columnSupplierFormal = new global::System.Data.DataColumn("SupplierFormal", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierFormal);
                this.columnFileHeaderGuid = new global::System.Data.DataColumn("FileHeaderGuid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileHeaderGuid);
                this.columnCreateDateTime = new global::System.Data.DataColumn("CreateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDateTime);
                this.columnUpdateDateTime = new global::System.Data.DataColumn("UpdateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDateTime);
                this.columnEnterpriseCode = new global::System.Data.DataColumn("EnterpriseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnterpriseCode);
                this.columnWayToOrder = new global::System.Data.DataColumn("WayToOrder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWayToOrder);
                this.columnDebitNoteDiv = new global::System.Data.DataColumn("DebitNoteDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebitNoteDiv);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRowNo}, true));
                this.columnRowNo.AllowDBNull = false;
                this.columnRowNo.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailListRow NewDetailListRow() {
                return ((DetailListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DetailListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DetailListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DetailListRowChanged != null)) {
                    this.DetailListRowChanged(this, new DetailListRowChangeEvent(((DetailListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DetailListRowChanging != null)) {
                    this.DetailListRowChanging(this, new DetailListRowChangeEvent(((DetailListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DetailListRowDeleted != null)) {
                    this.DetailListRowDeleted(this, new DetailListRowChangeEvent(((DetailListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DetailListRowDeleting != null)) {
                    this.DetailListRowDeleting(this, new DetailListRowChangeEvent(((DetailListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDetailListRow(DetailListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SupplierCheckDataSet ds = new SupplierCheckDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DetailListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TotalListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnAmountConsumeTax;
            
            private global::System.Data.DataColumn columnAmountTaxInc;
            
            private global::System.Data.DataColumn columnAmountTaxIncAll;
            
            private global::System.Data.DataColumn columnReturn;
            
            private global::System.Data.DataColumn columnReturnConsumeTax;
            
            private global::System.Data.DataColumn columnReturnTaxInc;
            
            private global::System.Data.DataColumn columnSlipCount;
            
            private global::System.Data.DataColumn columnDetailCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalListDataTable() {
                this.TableName = "TotalList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TotalListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TotalListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountConsumeTaxColumn {
                get {
                    return this.columnAmountConsumeTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountTaxIncColumn {
                get {
                    return this.columnAmountTaxInc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountTaxIncAllColumn {
                get {
                    return this.columnAmountTaxIncAll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReturnColumn {
                get {
                    return this.columnReturn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReturnConsumeTaxColumn {
                get {
                    return this.columnReturnConsumeTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReturnTaxIncColumn {
                get {
                    return this.columnReturnTaxInc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SlipCountColumn {
                get {
                    return this.columnSlipCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailCountColumn {
                get {
                    return this.columnDetailCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalListRow this[int index] {
                get {
                    return ((TotalListRow)(this.Rows[index]));
                }
            }
            
            public event TotalListRowChangeEventHandler TotalListRowChanging;
            
            public event TotalListRowChangeEventHandler TotalListRowChanged;
            
            public event TotalListRowChangeEventHandler TotalListRowDeleting;
            
            public event TotalListRowChangeEventHandler TotalListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTotalListRow(TotalListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalListRow AddTotalListRow(long Amount, long AmountConsumeTax, long AmountTaxInc, long AmountTaxIncAll, long Return, long ReturnConsumeTax, long ReturnTaxInc, int SlipCount, int DetailCount) {
                TotalListRow rowTotalListRow = ((TotalListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Amount,
                        AmountConsumeTax,
                        AmountTaxInc,
                        AmountTaxIncAll,
                        Return,
                        ReturnConsumeTax,
                        ReturnTaxInc,
                        SlipCount,
                        DetailCount};
                rowTotalListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTotalListRow);
                return rowTotalListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TotalListDataTable cln = ((TotalListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TotalListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAmount = base.Columns["Amount"];
                this.columnAmountConsumeTax = base.Columns["AmountConsumeTax"];
                this.columnAmountTaxInc = base.Columns["AmountTaxInc"];
                this.columnAmountTaxIncAll = base.Columns["AmountTaxIncAll"];
                this.columnReturn = base.Columns["Return"];
                this.columnReturnConsumeTax = base.Columns["ReturnConsumeTax"];
                this.columnReturnTaxInc = base.Columns["ReturnTaxInc"];
                this.columnSlipCount = base.Columns["SlipCount"];
                this.columnDetailCount = base.Columns["DetailCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnAmountConsumeTax = new global::System.Data.DataColumn("AmountConsumeTax", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmountConsumeTax);
                this.columnAmountTaxInc = new global::System.Data.DataColumn("AmountTaxInc", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmountTaxInc);
                this.columnAmountTaxIncAll = new global::System.Data.DataColumn("AmountTaxIncAll", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmountTaxIncAll);
                this.columnReturn = new global::System.Data.DataColumn("Return", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReturn);
                this.columnReturnConsumeTax = new global::System.Data.DataColumn("ReturnConsumeTax", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReturnConsumeTax);
                this.columnReturnTaxInc = new global::System.Data.DataColumn("ReturnTaxInc", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReturnTaxInc);
                this.columnSlipCount = new global::System.Data.DataColumn("SlipCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlipCount);
                this.columnDetailCount = new global::System.Data.DataColumn("DetailCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailCount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalListRow NewTotalListRow() {
                return ((TotalListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TotalListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TotalListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TotalListRowChanged != null)) {
                    this.TotalListRowChanged(this, new TotalListRowChangeEvent(((TotalListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TotalListRowChanging != null)) {
                    this.TotalListRowChanging(this, new TotalListRowChangeEvent(((TotalListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TotalListRowDeleted != null)) {
                    this.TotalListRowDeleted(this, new TotalListRowChangeEvent(((TotalListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TotalListRowDeleting != null)) {
                    this.TotalListRowDeleting(this, new TotalListRowChangeEvent(((TotalListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTotalListRow(TotalListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SupplierCheckDataSet ds = new SupplierCheckDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TotalListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SumDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDisplaySum;
            
            private global::System.Data.DataColumn columnCheckSum;
            
            private global::System.Data.DataColumn columnLackSum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SumDataTable() {
                this.TableName = "Sum";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SumDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SumDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplaySumColumn {
                get {
                    return this.columnDisplaySum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckSumColumn {
                get {
                    return this.columnCheckSum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LackSumColumn {
                get {
                    return this.columnLackSum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SumRow this[int index] {
                get {
                    return ((SumRow)(this.Rows[index]));
                }
            }
            
            public event SumRowChangeEventHandler SumRowChanging;
            
            public event SumRowChangeEventHandler SumRowChanged;
            
            public event SumRowChangeEventHandler SumRowDeleting;
            
            public event SumRowChangeEventHandler SumRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSumRow(SumRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SumRow AddSumRow(long DisplaySum, long CheckSum, long LackSum) {
                SumRow rowSumRow = ((SumRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DisplaySum,
                        CheckSum,
                        LackSum};
                rowSumRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSumRow);
                return rowSumRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SumDataTable cln = ((SumDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SumDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDisplaySum = base.Columns["DisplaySum"];
                this.columnCheckSum = base.Columns["CheckSum"];
                this.columnLackSum = base.Columns["LackSum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDisplaySum = new global::System.Data.DataColumn("DisplaySum", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplaySum);
                this.columnCheckSum = new global::System.Data.DataColumn("CheckSum", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckSum);
                this.columnLackSum = new global::System.Data.DataColumn("LackSum", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLackSum);
                this.columnDisplaySum.DefaultValue = ((long)(0));
                this.columnCheckSum.DefaultValue = ((long)(0));
                this.columnLackSum.DefaultValue = ((long)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SumRow NewSumRow() {
                return ((SumRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SumRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SumRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SumRowChanged != null)) {
                    this.SumRowChanged(this, new SumRowChangeEvent(((SumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SumRowChanging != null)) {
                    this.SumRowChanging(this, new SumRowChangeEvent(((SumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SumRowDeleted != null)) {
                    this.SumRowDeleted(this, new SumRowChangeEvent(((SumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SumRowDeleting != null)) {
                    this.SumRowDeleting(this, new SumRowChangeEvent(((SumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSumRow(SumRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SupplierCheckDataSet ds = new SupplierCheckDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SumDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SlipListRow : global::System.Data.DataRow {
            
            private SlipListDataTable tableSlipList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SlipListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSlipList = ((SlipListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CheckBoxDaily {
                get {
                    try {
                        return ((bool)(this[this.tableSlipList.CheckBoxDailyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'CheckBoxDaily\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.CheckBoxDailyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CheckBoxCalc {
                get {
                    try {
                        return ((bool)(this[this.tableSlipList.CheckBoxCalcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'CheckBoxCalc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.CheckBoxCalcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CheckBoxDailyStatus {
                get {
                    try {
                        return ((int)(this[this.tableSlipList.CheckBoxDailyStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'CheckBoxDailyStatus\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.CheckBoxDailyStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CheckBoxCalcStatus {
                get {
                    try {
                        return ((int)(this[this.tableSlipList.CheckBoxCalcStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'CheckBoxCalcStatus\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.CheckBoxCalcStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RowNo {
                get {
                    return ((int)(this[this.tableSlipList.RowNoColumn]));
                }
                set {
                    this[this.tableSlipList.RowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StockDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSlipList.StockDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'StockDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.StockDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockDateString {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.StockDateStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'StockDateString\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.StockDateStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InputDay {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSlipList.InputDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'InputDay\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.InputDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InputDayString {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.InputDayStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'InputDayString\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.InputDayStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierSlipNo {
                get {
                    try {
                        return ((int)(this[this.tableSlipList.SupplierSlipNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'SupplierSlipNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.SupplierSlipNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartySaleSlipNum {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.PartySaleSlipNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'PartySaleSlipNum\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.PartySaleSlipNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockPriceTaxInc {
                get {
                    try {
                        return ((long)(this[this.tableSlipList.StockPriceTaxIncColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'StockPriceTaxInc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.StockPriceTaxIncColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockPriceTaxExc {
                get {
                    try {
                        return ((long)(this[this.tableSlipList.StockPriceTaxExcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'StockPriceTaxExc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.StockPriceTaxExcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockPriceConsTax {
                get {
                    try {
                        return ((long)(this[this.tableSlipList.StockPriceConsTaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'StockPriceConsTax\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.StockPriceConsTaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SalesDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSlipList.SalesDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'SalesDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.SalesDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesDateString {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.SalesDateStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'SalesDateString\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.SalesDateStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesSlipNum {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.SalesSlipNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'SalesSlipNum\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.SalesSlipNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerCode {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.CustomerCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'CustomerCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.CustomerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerSnm {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.CustomerSnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'CustomerSnm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.CustomerSnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SalesMoneyTaxExc {
                get {
                    try {
                        return ((long)(this[this.tableSlipList.SalesMoneyTaxExcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'SalesMoneyTaxExc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.SalesMoneyTaxExcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesEmployeeNm {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.SalesEmployeeNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'SalesEmployeeNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.SalesEmployeeNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FrontEmployeeNm {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.FrontEmployeeNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'FrontEmployeeNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.FrontEmployeeNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesInputName {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.SalesInputNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'SalesInputName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.SalesInputNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UoeRemark1 {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.UoeRemark1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'UoeRemark1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.UoeRemark1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UoeRemark2 {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.UoeRemark2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'UoeRemark2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.UoeRemark2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupplierCd {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.SupplierCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'SupplierCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.SupplierCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupplierSnm {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.SupplierSnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'SupplierSnm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.SupplierSnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CheckBoxDailyEx {
                get {
                    try {
                        return ((int)(this[this.tableSlipList.CheckBoxDailyExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'CheckBoxDailyEx\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.CheckBoxDailyExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CheckBoxCalcEx {
                get {
                    try {
                        return ((int)(this[this.tableSlipList.CheckBoxCalcExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'CheckBoxCalcEx\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.CheckBoxCalcExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CheckBoxDailyStatusEx {
                get {
                    try {
                        return ((int)(this[this.tableSlipList.CheckBoxDailyStatusExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'CheckBoxDailyStatusEx\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.CheckBoxDailyStatusExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CheckBoxCalcStatusEx {
                get {
                    try {
                        return ((int)(this[this.tableSlipList.CheckBoxCalcStatusExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'CheckBoxCalcStatusEx\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.CheckBoxCalcStatusExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierSlipCd {
                get {
                    try {
                        return ((int)(this[this.tableSlipList.SupplierSlipCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'SupplierSlipCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.SupplierSlipCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WayToOrder {
                get {
                    try {
                        return ((string)(this[this.tableSlipList.WayToOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'WayToOrder\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.WayToOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DebitNoteDiv {
                get {
                    try {
                        return ((int)(this[this.tableSlipList.DebitNoteDivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SlipList\' にある列 \'DebitNoteDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSlipList.DebitNoteDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckBoxDailyNull() {
                return this.IsNull(this.tableSlipList.CheckBoxDailyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckBoxDailyNull() {
                this[this.tableSlipList.CheckBoxDailyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckBoxCalcNull() {
                return this.IsNull(this.tableSlipList.CheckBoxCalcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckBoxCalcNull() {
                this[this.tableSlipList.CheckBoxCalcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckBoxDailyStatusNull() {
                return this.IsNull(this.tableSlipList.CheckBoxDailyStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckBoxDailyStatusNull() {
                this[this.tableSlipList.CheckBoxDailyStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckBoxCalcStatusNull() {
                return this.IsNull(this.tableSlipList.CheckBoxCalcStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckBoxCalcStatusNull() {
                this[this.tableSlipList.CheckBoxCalcStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockDateNull() {
                return this.IsNull(this.tableSlipList.StockDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockDateNull() {
                this[this.tableSlipList.StockDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockDateStringNull() {
                return this.IsNull(this.tableSlipList.StockDateStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockDateStringNull() {
                this[this.tableSlipList.StockDateStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInputDayNull() {
                return this.IsNull(this.tableSlipList.InputDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInputDayNull() {
                this[this.tableSlipList.InputDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInputDayStringNull() {
                return this.IsNull(this.tableSlipList.InputDayStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInputDayStringNull() {
                this[this.tableSlipList.InputDayStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipNoNull() {
                return this.IsNull(this.tableSlipList.SupplierSlipNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipNoNull() {
                this[this.tableSlipList.SupplierSlipNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartySaleSlipNumNull() {
                return this.IsNull(this.tableSlipList.PartySaleSlipNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPartySaleSlipNumNull() {
                this[this.tableSlipList.PartySaleSlipNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockPriceTaxIncNull() {
                return this.IsNull(this.tableSlipList.StockPriceTaxIncColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockPriceTaxIncNull() {
                this[this.tableSlipList.StockPriceTaxIncColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockPriceTaxExcNull() {
                return this.IsNull(this.tableSlipList.StockPriceTaxExcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockPriceTaxExcNull() {
                this[this.tableSlipList.StockPriceTaxExcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockPriceConsTaxNull() {
                return this.IsNull(this.tableSlipList.StockPriceConsTaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockPriceConsTaxNull() {
                this[this.tableSlipList.StockPriceConsTaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesDateNull() {
                return this.IsNull(this.tableSlipList.SalesDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesDateNull() {
                this[this.tableSlipList.SalesDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesDateStringNull() {
                return this.IsNull(this.tableSlipList.SalesDateStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesDateStringNull() {
                this[this.tableSlipList.SalesDateStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesSlipNumNull() {
                return this.IsNull(this.tableSlipList.SalesSlipNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesSlipNumNull() {
                this[this.tableSlipList.SalesSlipNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerCodeNull() {
                return this.IsNull(this.tableSlipList.CustomerCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerCodeNull() {
                this[this.tableSlipList.CustomerCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerSnmNull() {
                return this.IsNull(this.tableSlipList.CustomerSnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerSnmNull() {
                this[this.tableSlipList.CustomerSnmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesMoneyTaxExcNull() {
                return this.IsNull(this.tableSlipList.SalesMoneyTaxExcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesMoneyTaxExcNull() {
                this[this.tableSlipList.SalesMoneyTaxExcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesEmployeeNmNull() {
                return this.IsNull(this.tableSlipList.SalesEmployeeNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesEmployeeNmNull() {
                this[this.tableSlipList.SalesEmployeeNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrontEmployeeNmNull() {
                return this.IsNull(this.tableSlipList.FrontEmployeeNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrontEmployeeNmNull() {
                this[this.tableSlipList.FrontEmployeeNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesInputNameNull() {
                return this.IsNull(this.tableSlipList.SalesInputNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesInputNameNull() {
                this[this.tableSlipList.SalesInputNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUoeRemark1Null() {
                return this.IsNull(this.tableSlipList.UoeRemark1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUoeRemark1Null() {
                this[this.tableSlipList.UoeRemark1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUoeRemark2Null() {
                return this.IsNull(this.tableSlipList.UoeRemark2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUoeRemark2Null() {
                this[this.tableSlipList.UoeRemark2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierCdNull() {
                return this.IsNull(this.tableSlipList.SupplierCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierCdNull() {
                this[this.tableSlipList.SupplierCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSnmNull() {
                return this.IsNull(this.tableSlipList.SupplierSnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSnmNull() {
                this[this.tableSlipList.SupplierSnmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckBoxDailyExNull() {
                return this.IsNull(this.tableSlipList.CheckBoxDailyExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckBoxDailyExNull() {
                this[this.tableSlipList.CheckBoxDailyExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckBoxCalcExNull() {
                return this.IsNull(this.tableSlipList.CheckBoxCalcExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckBoxCalcExNull() {
                this[this.tableSlipList.CheckBoxCalcExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckBoxDailyStatusExNull() {
                return this.IsNull(this.tableSlipList.CheckBoxDailyStatusExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckBoxDailyStatusExNull() {
                this[this.tableSlipList.CheckBoxDailyStatusExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckBoxCalcStatusExNull() {
                return this.IsNull(this.tableSlipList.CheckBoxCalcStatusExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckBoxCalcStatusExNull() {
                this[this.tableSlipList.CheckBoxCalcStatusExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipCdNull() {
                return this.IsNull(this.tableSlipList.SupplierSlipCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipCdNull() {
                this[this.tableSlipList.SupplierSlipCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWayToOrderNull() {
                return this.IsNull(this.tableSlipList.WayToOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWayToOrderNull() {
                this[this.tableSlipList.WayToOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebitNoteDivNull() {
                return this.IsNull(this.tableSlipList.DebitNoteDivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebitNoteDivNull() {
                this[this.tableSlipList.DebitNoteDivColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DetailListRow : global::System.Data.DataRow {
            
            private DetailListDataTable tableDetailList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DetailListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDetailList = ((DetailListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CheckBoxDaily {
                get {
                    try {
                        return ((bool)(this[this.tableDetailList.CheckBoxDailyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'CheckBoxDaily\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.CheckBoxDailyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CheckBoxCalc {
                get {
                    try {
                        return ((bool)(this[this.tableDetailList.CheckBoxCalcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'CheckBoxCalc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.CheckBoxCalcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RowNo {
                get {
                    return ((int)(this[this.tableDetailList.RowNoColumn]));
                }
                set {
                    this[this.tableDetailList.RowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StockDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDetailList.StockDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'StockDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.StockDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockDateString {
                get {
                    try {
                        return ((string)(this[this.tableDetailList.StockDateStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'StockDateString\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.StockDateStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InputDay {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDetailList.InputDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'InputDay\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.InputDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InputDayString {
                get {
                    try {
                        return ((string)(this[this.tableDetailList.InputDayStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'InputDayString\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.InputDayStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierSlipNo {
                get {
                    try {
                        return ((int)(this[this.tableDetailList.SupplierSlipNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'SupplierSlipNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.SupplierSlipNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierSlipNoKey {
                get {
                    try {
                        return ((int)(this[this.tableDetailList.SupplierSlipNoKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'SupplierSlipNoKey\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.SupplierSlipNoKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartySaleSlipNum {
                get {
                    try {
                        return ((string)(this[this.tableDetailList.PartySaleSlipNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'PartySaleSlipNum\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.PartySaleSlipNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockPriceTaxInc {
                get {
                    try {
                        return ((long)(this[this.tableDetailList.StockPriceTaxIncColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'StockPriceTaxInc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.StockPriceTaxIncColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockPriceTaxExc {
                get {
                    try {
                        return ((long)(this[this.tableDetailList.StockPriceTaxExcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'StockPriceTaxExc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.StockPriceTaxExcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockPriceConsTax {
                get {
                    try {
                        return ((long)(this[this.tableDetailList.StockPriceConsTaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'StockPriceConsTax\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.StockPriceConsTaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsNo {
                get {
                    try {
                        return ((string)(this[this.tableDetailList.GoodsNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'GoodsNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.GoodsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockCount {
                get {
                    try {
                        return ((double)(this[this.tableDetailList.StockCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'StockCount\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.StockCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BLGoodsCode {
                get {
                    try {
                        return ((int)(this[this.tableDetailList.BLGoodsCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'BLGoodsCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.BLGoodsCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsName {
                get {
                    try {
                        return ((string)(this[this.tableDetailList.GoodsNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'GoodsName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.GoodsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockUnitPriceFl {
                get {
                    try {
                        return ((double)(this[this.tableDetailList.StockUnitPriceFlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'StockUnitPriceFl\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.StockUnitPriceFlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ListPriceTaxExcFl {
                get {
                    try {
                        return ((double)(this[this.tableDetailList.ListPriceTaxExcFlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'ListPriceTaxExcFl\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.ListPriceTaxExcFlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SalesUnPrcTaxExcFl {
                get {
                    try {
                        return ((double)(this[this.tableDetailList.SalesUnPrcTaxExcFlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'SalesUnPrcTaxExcFl\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.SalesUnPrcTaxExcFlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SalesMoneyTaxExc {
                get {
                    try {
                        return ((double)(this[this.tableDetailList.SalesMoneyTaxExcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'SalesMoneyTaxExc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.SalesMoneyTaxExcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProfitMark {
                get {
                    try {
                        return ((string)(this[this.tableDetailList.ProfitMarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'ProfitMark\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.ProfitMarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Profit {
                get {
                    try {
                        return ((double)(this[this.tableDetailList.ProfitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'Profit\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.ProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProfitRate {
                get {
                    try {
                        return ((double)(this[this.tableDetailList.ProfitRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'ProfitRate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.ProfitRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CheckBoxDailyEx {
                get {
                    try {
                        return ((bool)(this[this.tableDetailList.CheckBoxDailyExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'CheckBoxDailyEx\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.CheckBoxDailyExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CheckBoxCalcEx {
                get {
                    try {
                        return ((bool)(this[this.tableDetailList.CheckBoxCalcExColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'CheckBoxCalcEx\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.CheckBoxCalcExColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LogicalDeleteCode {
                get {
                    try {
                        return ((int)(this[this.tableDetailList.LogicalDeleteCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'LogicalDeleteCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.LogicalDeleteCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierSlipCd {
                get {
                    try {
                        return ((int)(this[this.tableDetailList.SupplierSlipCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'SupplierSlipCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.SupplierSlipCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockSlipDtlNum {
                get {
                    try {
                        return ((long)(this[this.tableDetailList.StockSlipDtlNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'StockSlipDtlNum\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.StockSlipDtlNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SalesDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDetailList.SalesDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'SalesDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.SalesDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesDateString {
                get {
                    try {
                        return ((string)(this[this.tableDetailList.SalesDateStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'SalesDateString\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.SalesDateStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierFormal {
                get {
                    try {
                        return ((int)(this[this.tableDetailList.SupplierFormalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'SupplierFormal\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.SupplierFormalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid FileHeaderGuid {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableDetailList.FileHeaderGuidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'FileHeaderGuid\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.FileHeaderGuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDetailList.CreateDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'CreateDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.CreateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDetailList.UpdateDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'UpdateDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.UpdateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnterpriseCode {
                get {
                    try {
                        return ((string)(this[this.tableDetailList.EnterpriseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'EnterpriseCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.EnterpriseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WayToOrder {
                get {
                    try {
                        return ((string)(this[this.tableDetailList.WayToOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'WayToOrder\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.WayToOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DebitNoteDiv {
                get {
                    try {
                        return ((int)(this[this.tableDetailList.DebitNoteDivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DetailList\' にある列 \'DebitNoteDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDetailList.DebitNoteDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckBoxDailyNull() {
                return this.IsNull(this.tableDetailList.CheckBoxDailyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckBoxDailyNull() {
                this[this.tableDetailList.CheckBoxDailyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckBoxCalcNull() {
                return this.IsNull(this.tableDetailList.CheckBoxCalcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckBoxCalcNull() {
                this[this.tableDetailList.CheckBoxCalcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockDateNull() {
                return this.IsNull(this.tableDetailList.StockDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockDateNull() {
                this[this.tableDetailList.StockDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockDateStringNull() {
                return this.IsNull(this.tableDetailList.StockDateStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockDateStringNull() {
                this[this.tableDetailList.StockDateStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInputDayNull() {
                return this.IsNull(this.tableDetailList.InputDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInputDayNull() {
                this[this.tableDetailList.InputDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInputDayStringNull() {
                return this.IsNull(this.tableDetailList.InputDayStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInputDayStringNull() {
                this[this.tableDetailList.InputDayStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipNoNull() {
                return this.IsNull(this.tableDetailList.SupplierSlipNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipNoNull() {
                this[this.tableDetailList.SupplierSlipNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipNoKeyNull() {
                return this.IsNull(this.tableDetailList.SupplierSlipNoKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipNoKeyNull() {
                this[this.tableDetailList.SupplierSlipNoKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartySaleSlipNumNull() {
                return this.IsNull(this.tableDetailList.PartySaleSlipNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPartySaleSlipNumNull() {
                this[this.tableDetailList.PartySaleSlipNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockPriceTaxIncNull() {
                return this.IsNull(this.tableDetailList.StockPriceTaxIncColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockPriceTaxIncNull() {
                this[this.tableDetailList.StockPriceTaxIncColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockPriceTaxExcNull() {
                return this.IsNull(this.tableDetailList.StockPriceTaxExcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockPriceTaxExcNull() {
                this[this.tableDetailList.StockPriceTaxExcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockPriceConsTaxNull() {
                return this.IsNull(this.tableDetailList.StockPriceConsTaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockPriceConsTaxNull() {
                this[this.tableDetailList.StockPriceConsTaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsNoNull() {
                return this.IsNull(this.tableDetailList.GoodsNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsNoNull() {
                this[this.tableDetailList.GoodsNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockCountNull() {
                return this.IsNull(this.tableDetailList.StockCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockCountNull() {
                this[this.tableDetailList.StockCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLGoodsCodeNull() {
                return this.IsNull(this.tableDetailList.BLGoodsCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLGoodsCodeNull() {
                this[this.tableDetailList.BLGoodsCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsNameNull() {
                return this.IsNull(this.tableDetailList.GoodsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsNameNull() {
                this[this.tableDetailList.GoodsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockUnitPriceFlNull() {
                return this.IsNull(this.tableDetailList.StockUnitPriceFlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockUnitPriceFlNull() {
                this[this.tableDetailList.StockUnitPriceFlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsListPriceTaxExcFlNull() {
                return this.IsNull(this.tableDetailList.ListPriceTaxExcFlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetListPriceTaxExcFlNull() {
                this[this.tableDetailList.ListPriceTaxExcFlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesUnPrcTaxExcFlNull() {
                return this.IsNull(this.tableDetailList.SalesUnPrcTaxExcFlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesUnPrcTaxExcFlNull() {
                this[this.tableDetailList.SalesUnPrcTaxExcFlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesMoneyTaxExcNull() {
                return this.IsNull(this.tableDetailList.SalesMoneyTaxExcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesMoneyTaxExcNull() {
                this[this.tableDetailList.SalesMoneyTaxExcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProfitMarkNull() {
                return this.IsNull(this.tableDetailList.ProfitMarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProfitMarkNull() {
                this[this.tableDetailList.ProfitMarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProfitNull() {
                return this.IsNull(this.tableDetailList.ProfitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProfitNull() {
                this[this.tableDetailList.ProfitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProfitRateNull() {
                return this.IsNull(this.tableDetailList.ProfitRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProfitRateNull() {
                this[this.tableDetailList.ProfitRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckBoxDailyExNull() {
                return this.IsNull(this.tableDetailList.CheckBoxDailyExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckBoxDailyExNull() {
                this[this.tableDetailList.CheckBoxDailyExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckBoxCalcExNull() {
                return this.IsNull(this.tableDetailList.CheckBoxCalcExColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckBoxCalcExNull() {
                this[this.tableDetailList.CheckBoxCalcExColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogicalDeleteCodeNull() {
                return this.IsNull(this.tableDetailList.LogicalDeleteCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogicalDeleteCodeNull() {
                this[this.tableDetailList.LogicalDeleteCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipCdNull() {
                return this.IsNull(this.tableDetailList.SupplierSlipCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipCdNull() {
                this[this.tableDetailList.SupplierSlipCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockSlipDtlNumNull() {
                return this.IsNull(this.tableDetailList.StockSlipDtlNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockSlipDtlNumNull() {
                this[this.tableDetailList.StockSlipDtlNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesDateNull() {
                return this.IsNull(this.tableDetailList.SalesDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesDateNull() {
                this[this.tableDetailList.SalesDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesDateStringNull() {
                return this.IsNull(this.tableDetailList.SalesDateStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesDateStringNull() {
                this[this.tableDetailList.SalesDateStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierFormalNull() {
                return this.IsNull(this.tableDetailList.SupplierFormalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierFormalNull() {
                this[this.tableDetailList.SupplierFormalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileHeaderGuidNull() {
                return this.IsNull(this.tableDetailList.FileHeaderGuidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileHeaderGuidNull() {
                this[this.tableDetailList.FileHeaderGuidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateDateTimeNull() {
                return this.IsNull(this.tableDetailList.CreateDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateDateTimeNull() {
                this[this.tableDetailList.CreateDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateDateTimeNull() {
                return this.IsNull(this.tableDetailList.UpdateDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateDateTimeNull() {
                this[this.tableDetailList.UpdateDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnterpriseCodeNull() {
                return this.IsNull(this.tableDetailList.EnterpriseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnterpriseCodeNull() {
                this[this.tableDetailList.EnterpriseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWayToOrderNull() {
                return this.IsNull(this.tableDetailList.WayToOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWayToOrderNull() {
                this[this.tableDetailList.WayToOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebitNoteDivNull() {
                return this.IsNull(this.tableDetailList.DebitNoteDivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebitNoteDivNull() {
                this[this.tableDetailList.DebitNoteDivColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TotalListRow : global::System.Data.DataRow {
            
            private TotalListDataTable tableTotalList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TotalListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTotalList = ((TotalListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Amount {
                get {
                    try {
                        return ((long)(this[this.tableTotalList.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TotalList\' にある列 \'Amount\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTotalList.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AmountConsumeTax {
                get {
                    try {
                        return ((long)(this[this.tableTotalList.AmountConsumeTaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TotalList\' にある列 \'AmountConsumeTax\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTotalList.AmountConsumeTaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AmountTaxInc {
                get {
                    try {
                        return ((long)(this[this.tableTotalList.AmountTaxIncColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TotalList\' にある列 \'AmountTaxInc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTotalList.AmountTaxIncColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AmountTaxIncAll {
                get {
                    try {
                        return ((long)(this[this.tableTotalList.AmountTaxIncAllColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TotalList\' にある列 \'AmountTaxIncAll\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTotalList.AmountTaxIncAllColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Return {
                get {
                    try {
                        return ((long)(this[this.tableTotalList.ReturnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TotalList\' にある列 \'Return\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTotalList.ReturnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ReturnConsumeTax {
                get {
                    try {
                        return ((long)(this[this.tableTotalList.ReturnConsumeTaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TotalList\' にある列 \'ReturnConsumeTax\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTotalList.ReturnConsumeTaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ReturnTaxInc {
                get {
                    try {
                        return ((long)(this[this.tableTotalList.ReturnTaxIncColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TotalList\' にある列 \'ReturnTaxInc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTotalList.ReturnTaxIncColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SlipCount {
                get {
                    try {
                        return ((int)(this[this.tableTotalList.SlipCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TotalList\' にある列 \'SlipCount\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTotalList.SlipCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DetailCount {
                get {
                    try {
                        return ((int)(this[this.tableTotalList.DetailCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'TotalList\' にある列 \'DetailCount\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableTotalList.DetailCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableTotalList.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableTotalList.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountConsumeTaxNull() {
                return this.IsNull(this.tableTotalList.AmountConsumeTaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountConsumeTaxNull() {
                this[this.tableTotalList.AmountConsumeTaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountTaxIncNull() {
                return this.IsNull(this.tableTotalList.AmountTaxIncColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountTaxIncNull() {
                this[this.tableTotalList.AmountTaxIncColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountTaxIncAllNull() {
                return this.IsNull(this.tableTotalList.AmountTaxIncAllColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountTaxIncAllNull() {
                this[this.tableTotalList.AmountTaxIncAllColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReturnNull() {
                return this.IsNull(this.tableTotalList.ReturnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReturnNull() {
                this[this.tableTotalList.ReturnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReturnConsumeTaxNull() {
                return this.IsNull(this.tableTotalList.ReturnConsumeTaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReturnConsumeTaxNull() {
                this[this.tableTotalList.ReturnConsumeTaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReturnTaxIncNull() {
                return this.IsNull(this.tableTotalList.ReturnTaxIncColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReturnTaxIncNull() {
                this[this.tableTotalList.ReturnTaxIncColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSlipCountNull() {
                return this.IsNull(this.tableTotalList.SlipCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSlipCountNull() {
                this[this.tableTotalList.SlipCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetailCountNull() {
                return this.IsNull(this.tableTotalList.DetailCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetailCountNull() {
                this[this.tableTotalList.DetailCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SumRow : global::System.Data.DataRow {
            
            private SumDataTable tableSum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SumRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSum = ((SumDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DisplaySum {
                get {
                    try {
                        return ((long)(this[this.tableSum.DisplaySumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Sum\' にある列 \'DisplaySum\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSum.DisplaySumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CheckSum {
                get {
                    try {
                        return ((long)(this[this.tableSum.CheckSumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Sum\' にある列 \'CheckSum\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSum.CheckSumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LackSum {
                get {
                    try {
                        return ((long)(this[this.tableSum.LackSumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Sum\' にある列 \'LackSum\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSum.LackSumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisplaySumNull() {
                return this.IsNull(this.tableSum.DisplaySumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisplaySumNull() {
                this[this.tableSum.DisplaySumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckSumNull() {
                return this.IsNull(this.tableSum.CheckSumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckSumNull() {
                this[this.tableSum.CheckSumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLackSumNull() {
                return this.IsNull(this.tableSum.LackSumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLackSumNull() {
                this[this.tableSum.LackSumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SlipListRowChangeEvent : global::System.EventArgs {
            
            private SlipListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlipListRowChangeEvent(SlipListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SlipListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DetailListRowChangeEvent : global::System.EventArgs {
            
            private DetailListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailListRowChangeEvent(DetailListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DetailListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TotalListRowChangeEvent : global::System.EventArgs {
            
            private TotalListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalListRowChangeEvent(TotalListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TotalListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SumRowChangeEvent : global::System.EventArgs {
            
            private SumRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SumRowChangeEvent(SumRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SumRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591