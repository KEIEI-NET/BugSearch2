using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;
using System.Text;
using System.Windows.Forms;

using Broadleaf.Application.Common;
using Broadleaf.Application.Controller;
using Broadleaf.Application.UIData;
using Broadleaf.Drawing.Printing;
using Broadleaf.Library.Globarization;
using Broadleaf.Library.Resources;
using Broadleaf.Library.Text;
using Broadleaf.Library.Windows.Forms;

namespace Broadleaf.Drawing.Printing
{
	/// <summary>
	/// 在庫月報年報印刷クラス
	/// </summary>
	/// <remarks>
    /// <br>Note       : 在庫月報年報の印刷を行う。</br>
	/// <br>Programmer : 30416 長沼 賢二</br>
	/// <br>Date       : 2008.08.06</br>
    /// <br>Update     : 2008/10/10 照田 貴志　バグ修正、仕様変更対応</br>
    /// <br>Update Note: 2009/03/17 30452 上野 俊治</br>
    /// <br>            ・障害対応12704</br>
    /// </remarks>
	class PMZAI02012PA: IPrintProc
	{

		#region ■ Constructor
		/// <summary>
        /// 在庫月報年報印刷クラスコンストラクタ
		/// </summary>
		/// <remarks>
        /// <br>Note       : 在庫月報年報印刷クラスのインスタンスの作成を行う。</br>
		/// <br>Programmer : 30416 長沼 賢二</br>
		/// <br>Date       : 2008.08.06</br>
		/// </remarks>
		public PMZAI02012PA()
		{
		}

		/// <summary>
        /// 在庫月報年報印刷クラスコンストラクタ
		/// </summary>
		/// <param name="printInfo">印刷情報オブジェクト</param>
		/// <remarks>
        /// <br>Note       : 在庫月報年報印刷クラスのインスタンスの作成を行う。</br>
		/// <br>Programmer : 30416 長沼 賢二</br>
		/// <br>Date       : 2008.08.06</br>
		/// </remarks>
        public PMZAI02012PA(object printInfo)
		{
			this._printInfo = printInfo as SFCMN06002C;
            this._stockMonthYearReportCndtn = this._printInfo.jyoken as StockMonthYearReportCndtn;
		}
		#endregion ■ Constructor

		#region ■ Pricate Const
		private const string ct_ReportForm_NameSpace = "Broadleaf.Drawing.Printing";
		private const string ct_Space			= "　";
        private const string ct_Extr_Top = "最初から";
        private const string ct_Extr_End = "最後まで";
        private const string ct_RangeConst = "：{0} 〜 {1}";
		#endregion ■ Pricate Const

		#region ■ Private Member
		private SFCMN06002C _printInfo;					                // 印刷情報クラス
        private StockMonthYearReportCndtn _stockMonthYearReportCndtn;	// 抽出条件クラス
		#endregion ■ Private Member

        

		#region ■ Exception Class
		/// <summary> 例外クラス </summary>
        private class StockMoveException: ApplicationException
		{
			private int _status;
			#region ◆ Constructor
			/// <summary>
			/// 例外クラスコンストラクタ
			/// </summary>
			/// <param name="message">メッセージ</param>
			/// <param name="status">ステータス</param>
			public StockMoveException(string message, int status): base(message)
			{
				this._status = status; 
			}
			#endregion
    
			#region ◆ Public Property
			/// <summary> ステータスプロパティ </summary>
			public int Status
			{
				get{ return this._status; }
			}
			#endregion
		}
		#endregion ■ Exception Class

		#region ■ IPrintProc メンバ
		#region ◆ Public Property
		/// <summary>
		/// 印刷情報取得プロパティ
		/// </summary>
		public SFCMN06002C Printinfo
		{
			get { return this._printInfo; }
			set { this._printInfo = value;}
		}
		#endregion ◆ Public Property

		#region ◆ Public Method
		#region ◎ 印刷処理開始
		/// <summary>
		/// 印刷処理開始
		/// </summary>
		/// <returns></returns>
		/// <remarks>
		/// <br>Note       : 印刷を開始する。</br>
		/// <br>Programmer : 30416 長沼 賢二</br>
		/// <br>Date       : 2008.08.06</br>
		/// </remarks>
		public int StartPrint ()
		{
			return PrintMain();
		}
		#endregion
		#endregion ◆ Public Method
		#endregion ■ IPrintProc メンバ

		#region ■ Private Member
		#region ◆ 印刷処理
		/// <summary>
		/// 印刷処理
		/// </summary>
		/// <returns>Status</returns>
		/// <remarks>
		/// <br>Note       : 印刷処理を行う。</br>
		/// <br>Programmer : 30416 長沼 賢二</br>
		/// <br>Date       : 2008.08.06</br>
		/// </remarks>
		private int PrintMain ()
		{
			int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
			// 印刷フォームクラスインスタンス作成
			DataDynamics.ActiveReports.ActiveReport3 prtRpt = null;
			
			try
			{
				// レポートインスタンス作成
				this.CreateReport(out prtRpt, this._printInfo.prpid); 
				if (prtRpt == null) return status;

				// 各種プロパティ設定
				status = this.SettingProperty(ref prtRpt);
				if (status != 0) return status;
							
				// データソース設定
				prtRpt.DataSource = this._printInfo.rdData;
                prtRpt.DataMember = PMZAI02014EA.ct_Tbl_StockNoShipment;
				
				// 印刷共通情報プロパティ設定
				Broadleaf.Windows.Forms.SFCMN00293UC commonInfo;
                //this.SetPrintCommonInfo(out commonInfo); // DEL 2009/03/17
                this.SetPrintCommonInfo(ref prtRpt, out commonInfo); // ADD 2009/03/17

			    // プレビュー有無				
			    int mode = this._printInfo.prevkbn;
				
			    // 出力モードがＰＤＦの場合、無条件でプレビュー無
			    if (this._printInfo.printmode == 2)
			    {
			        mode = 0;
			    }
				
			    switch(mode)
			    {
			        case 0:		// プレビュ無
			        {
			            Broadleaf.Windows.Forms.SFCMN00293UB processForm = new Broadleaf.Windows.Forms.SFCMN00293UB();
						
			            // 共通条件設定
			            processForm.CommonInfo = commonInfo;

			            // プログレスバーUPイベント追加
			            if (prtRpt is IPrintActiveReportTypeCommon)
			            {
			                ((IPrintActiveReportTypeCommon)prtRpt).ProgressBarUpEvent +=
			                    new ProgressBarUpEventHandler(processForm.ProgressBarUpEvent);
			            }

			            // 印刷実行
			            status = processForm.Run(prtRpt);

			            // 戻り値設定
			            this._printInfo.status = status;

			            break;
			        }
			        case 1:		// プレビュ有
			        {
			            Broadleaf.Windows.Forms.SFCMN00293UA viewForm = new Broadleaf.Windows.Forms.SFCMN00293UA();

			            // 共通条件設定
			            viewForm.CommonInfo   = commonInfo;

			            // プレビュー実行
			            status = viewForm.Run(prtRpt); 

			            // 戻り値設定
			            this._printInfo.status = status;
						
			            break;
			        }
			    }

			    // ＰＤＦ出力の場合
			    if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
			    {
			        switch (this._printInfo.printmode)
			        {
			            case 1:  // プリンタ
			                break;
			            case 2:  // ＰＤＦ
			            case 3:  // 両方(プリンタ + ＰＤＦ)
			            {
			                // ＰＤＦ表示フラグON
			                this._printInfo.pdfopen = true;
   
			                // 両方印刷時のみ履歴保存
			                if (this._printInfo.printmode == 3)
			                {
			                    // 出力履歴管理に追加
			                    Broadleaf.Windows.Forms.SFANL06101UA pdfHistoryControl = new Broadleaf.Windows.Forms.SFANL06101UA();
			                    pdfHistoryControl.AddPrintInfo(this._printInfo.key, this._printInfo.prpnm, this._printInfo.prpnm,
			                        this._printInfo.pdftemppath);
			                }
			                break;
			            }
			        }
			    }
			}
			catch(Exception ex)
			{
			    this.MsgDispProc(emErrorLevel.ERR_LEVEL_STOPDISP,
			        ex.Message, -1, MessageBoxButtons.OK, MessageBoxDefaultButton.Button1);
			}
			finally
			{
			    if ( prtRpt != null )
			    {
			        prtRpt.Dispose();
			    }
			}
			return status;
		}
		#endregion ◆ 印刷処理

		#region ◆ レポートフォーム設定関連
		#region ◎ 各種ActiveReport帳票インスタンス作成
		/// <summary>
		/// 各種ActiveReport帳票インスタンス作成
		/// </summary>
		/// <param name="rptObj">インスタンス化された帳票フォームクラス</param>
		/// <param name="prpid">帳票フォームID</param>
		/// <returns></returns>
		/// <remarks>
		/// <br>Note       : 指定されたアセンブリ及びクラス名より、クラスをインスタンス化します。</br>
		/// <br>Programmer : 30416 長沼 賢二</br>
		/// <br>Date       : 2008.08.06</br>
		/// </remarks>
		private void CreateReport(out DataDynamics.ActiveReports.ActiveReport3 rptObj,string prpid)
		{
			// 印刷フォームクラスインスタンス作成
			rptObj = (DataDynamics.ActiveReports.ActiveReport3)this.LoadAssemblyReport(
				prpid.Trim(), ct_ReportForm_NameSpace + "." + prpid.Trim(), 
				typeof(DataDynamics.ActiveReports.ActiveReport3));
		}
		#endregion

		#region ◎ レポートアセンブリインスタンス化
		/// <summary>
		/// レポートアセンブリインスタンス化
		/// </summary>
		/// <param name="asmname">アセンブリ名称</param>
		/// <param name="classname">クラス名称</param>
		/// <param name="type">実装するクラス型</param>
		/// <returns>インスタンス化されたクラス</returns>
		/// <remarks>
		/// <br>Note       : 指定されたアセンブリ及びクラス名より、クラスをインスタンス化します。</br>
		/// <br>Programmer : 30416 長沼 賢二</br>
		/// <br>Date       : 2008.08.06</br>
		/// </remarks>
		private	object LoadAssemblyReport(string asmname, string classname, Type type)
		{
			object	obj	= null;
			try
			{
				System.Reflection.Assembly	asm	= System.Reflection.Assembly.Load(asmname);
				Type	objType	= asm.GetType(classname);
				if (objType != null)
				{
					if ((objType == type) || (objType.IsSubclassOf(type) == true) || (objType.GetInterface(type.Name).Name == type.Name))
					{
						obj = Activator.CreateInstance(objType);
					}
				}
			}
			catch(System.IO.FileNotFoundException)
			{
				throw new StockMoveException(asmname + "が存在しません。",-1);
			}
			catch(System.Exception er)
			{
				throw new StockMoveException(er.Message, -1);
			}
			return obj;
		}
		#endregion

		#region ◎ 印刷画面共通情報設定

		/// <summary>
		/// 印刷画面共通情報設定
		/// </summary>
        /// <param name="rptObj"></param>
		/// <param name="commonInfo"></param>
		/// <returns>ステータス</returns>
		/// <remarks>
		/// <br>Note       : 印刷画面共通条件の設定を行います。</br>
		/// <br>Programmer : 30416 長沼 賢二</br>
		/// <br>Date       : 2008.08.06</br>
		/// </remarks>
        //private void SetPrintCommonInfo(out Broadleaf.Windows.Forms.SFCMN00293UC commonInfo) // DEL 2009/03/17
        private void SetPrintCommonInfo(ref DataDynamics.ActiveReports.ActiveReport3 rptObj, out Broadleaf.Windows.Forms.SFCMN00293UC commonInfo) // ADD 2009/03/17
		{
			int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
			commonInfo = new Broadleaf.Windows.Forms.SFCMN00293UC();
			
			// 帳票チャート共通部品クラス
			SFCMN00331C cmnCommon = new SFCMN00331C(); 

			// PDFパス取得
			string pdfPath = "";
			string pdfName = "";
		
			// プリンタ名
			commonInfo.PrinterName = this._printInfo.prinm;
			// 帳票名
			commonInfo.PrintName   = this._printInfo.prpnm;				
			// 印刷モード
			commonInfo.PrintMode   = this.Printinfo.printmode;
			// 印刷件数
			commonInfo.PrintMax    = (this._printInfo.rdData as DataView).Count;
			
			status = cmnCommon.GetPdfSavePathName(this._printInfo.prpnm, ref pdfPath, ref pdfName);
			this._printInfo.pdftemppath = pdfPath + pdfName;
			commonInfo.PdfFullPath = this._printInfo.pdftemppath;

			// 上余白
			commonInfo.MarginsTop  = this._printInfo.py;
			// 左余白
			commonInfo.MarginsLeft = this._printInfo.px;

            // --- ADD 2009/03/17 -------------------------------->>>>>
            rptObj.Document.CacheToDisk = true;
            rptObj.Document.CacheToDiskLocation = pdfPath;
            // --- ADD 2009/03/17 --------------------------------<<<<< 
		}

		#endregion
		
		#region ◎ 各種プロパティ設定
		
		/// <summary>
		/// 各種プロパティ設定
		/// </summary>
		/// <param name="rpt">インスタンス化された帳票フォームクラス</param>
		/// <returns>ステータス</returns>
		/// <remarks>
		/// <br>Note       : 各種プロパティを設定します。</br>
		/// <br>Programmer : 30416 長沼 賢二</br>
		/// <br>Date       : 2008.08.06</br>
		/// </remarks>
		private int SettingProperty(ref DataDynamics.ActiveReports.ActiveReport3 rpt)
		{
			int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;

			// ActiveReportインターフェースにキャスト
			IPrintActiveReportTypeList instance = rpt as IPrintActiveReportTypeList;

			// 印刷条件取得
            StockMonthYearReportCndtn extraInfo = (StockMonthYearReportCndtn)this._printInfo.jyoken;

			// ソート順プロパティ設定
            //instance.PageHeaderSortOderTitle = this._stockGetuNenCndtn.PrintSortDivStateTitle;
			
			// 帳票出力設定情報取得 
			PrtOutSet prtOutSet;
			string message;
			int st = StockMonthYearReportAcs.ReadPrtOutSet(out prtOutSet, out message);
			if (st != 0) 
			{
                throw new StockMoveException(message, status);
            }

           
			
			// 抽出条件ヘッダ出力区分
			instance.ExtraCondHeadOutDiv = prtOutSet.ExtraCondHeadOutDiv;

			// 抽出条件編集処理
			StringCollection extraInfomations;
			this.MakeExtarCondition( out extraInfomations );

			instance.ExtraConditions = extraInfomations; 
			
			// フッタ出力区分
			instance.PageFooterOutCode   = prtOutSet.FooterPrintOutCode;

			// フッタ出力メッセージ
			StringCollection footers = new StringCollection();
			footers.Add(prtOutSet.PrintFooter1);
			footers.Add(prtOutSet.PrintFooter2);
			
			instance.PageFooters = footers;

			// 印刷情報オブジェクト
			instance.PrintInfo = this._printInfo;

			// ヘッダーサブタイトル
            //object[] titleObj = new object[] { this._stockMonthYearReportCndtn.ReportSubTitle, "在庫月報年報" };
            //instance.PageHeaderSubtitle = string.Format("{0}{1}", titleObj);
            instance.PageHeaderSubtitle = string.Format("在庫月報年報");

			// その他データ
			instance.OtherDataList = null;

			status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

			return status;
		}

		#endregion

		#region ◎ 抽出条件出力情報作成
		/// <summary>
		/// 抽出条件出力情報作成
		/// </summary>
		/// <param name="extraConditions">作成後抽出条件コレクション</param>
		/// <remarks>
		/// <br>Note       : 出力する抽出条件文字列を作成する。</br>
        /// <br>Programmer : 30416 長沼 賢二</br>
        /// <br>Date       : 2008.08.06</br>
        /// <br>Update     : 2008/10/10 照田 貴志　印字順を画面の抽出項目に合わせる(コメントアウトせず、位置だけを変更)</br>
        /// <br>                                   発行タイプ、金額単位、対象年月→対象年月、金額単位、発行年月</br>
		/// </remarks>
		private void MakeExtarCondition( out StringCollection extraConditions )
		{
            extraConditions = new StringCollection();
            StringCollection addConditions = new StringCollection();

            // 対象年月 ----------------------------------------------------------------------------------------------------
            string st_ShipArrivalDate = string.Empty;
            string ed_ShipArrivalDate = string.Empty;

            // 開始･終了のいずれかが入力されていれば印字
            if ((this._stockMonthYearReportCndtn.St_AddUpYearMonth != DateTime.MinValue) || (this._stockMonthYearReportCndtn.Ed_AddUpYearMonth != DateTime.MinValue))
            {
                // 開始
                if (this._stockMonthYearReportCndtn.St_AddUpYearMonth != DateTime.MinValue)
                    //st_ShipArrivalDate = this._stockMonthYearReportCndtn.St_AddUpYearMonth.ToString("yyyy年MM月");        //DEL 2008/10/10 書式変更
                    st_ShipArrivalDate = this._stockMonthYearReportCndtn.St_AddUpYearMonth.ToString("yyyy/MM");             //ADD 2008/10/10
                else
                    st_ShipArrivalDate = ct_Extr_Top;
                // 終了
                if (this._stockMonthYearReportCndtn.Ed_AddUpYearMonth != DateTime.MinValue)
                    //ed_ShipArrivalDate = this._stockMonthYearReportCndtn.Ed_AddUpYearMonth.ToString("yyyy年MM月");        //DEL 2008/10/10 書式変更
                    ed_ShipArrivalDate = this._stockMonthYearReportCndtn.Ed_AddUpYearMonth.ToString("yyyy/MM");             //ADD 2008/10/10
                else
                    ed_ShipArrivalDate = ct_Extr_End;

                this.EditCondition(
                    ref addConditions,
                    string.Format(
                        //"対象年月：" + ct_RangeConst,         //DEL 2008/10/10 "："が2つ表示される為
                        "対象年月" + ct_RangeConst,             //ADD 2008/10/10
                        st_ShipArrivalDate,
                        ed_ShipArrivalDate));
            }
            // 金額単位
            if (this._stockMonthYearReportCndtn.MoneyUnit == StockMonthYearReportCndtn.MoneyUnitState.One)
            {
                this.EditCondition(
                   ref addConditions,
                   string.Format(
                       "金額単位：円"));
            }
            else
            {
                this.EditCondition(
                   ref addConditions,
                   string.Format(
                       "金額単位：千円"));
            }
            // 発行タイプ
            if (this._stockMonthYearReportCndtn.PrintType == StockMonthYearReportCndtn.PrintTypeState.ThisMonth)
            {
                this.EditCondition(
                   ref addConditions,
                   string.Format(
                       "発行タイプ：当月"));
            }
            else
            {
                this.EditCondition(
                   ref addConditions,
                   string.Format(
                       "発行タイプ：当期"));
            }

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki
            //// ソート順 ----------------------------------------------------------------------------------------------------
            //this.EditCondition(ref addConditions, String.Format("ソート順：{0}",
            //                                                        this._stockNoShipmentListCndtn.PrintSortDivStateTitle));
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki
            // 倉庫
            if (this._stockMonthYearReportCndtn.St_WarehouseCode != string.Empty || this._stockMonthYearReportCndtn.Ed_WarehouseCode != string.Empty)
            {
                string st_WarehouseCode = this._stockMonthYearReportCndtn.St_WarehouseCode;
                string ed_WarehouseCode = this._stockMonthYearReportCndtn.Ed_WarehouseCode;

                if ( st_WarehouseCode == string.Empty )
                    st_WarehouseCode = ct_Extr_Top;
                //if ( ed_WarehouseCode == string.Empty )                                       //DEL 2008/10/10 "9999"時も「最後まで」とする
                if (( ed_WarehouseCode == string.Empty ) || (ed_WarehouseCode == "9999"))       //ADD 2008/10/10
                    ed_WarehouseCode = ct_Extr_End;

                if ((st_WarehouseCode != ct_Extr_Top) || (ed_WarehouseCode != ct_Extr_End))     //ADD 2008/10/10
                {                                                                               //ADD 2008/10/10
                    this.EditCondition(
                        ref addConditions,
                        string.Format("倉庫" + ct_RangeConst, st_WarehouseCode, ed_WarehouseCode));
                }                                                                               //ADD 2008/10/10
            }
            // 仕入先
            //if (this._stockMonthYearReportCndtn.St_SupplierCd != 0 || this._stockMonthYearReportCndtn.Ed_SupplierCd != 999999999)     //DEL 2008/10/10 桁数変更
            if (this._stockMonthYearReportCndtn.St_SupplierCd != 0 || this._stockMonthYearReportCndtn.Ed_SupplierCd != 999999)          //ADD 2008/10/10
            {
                // --- ADD 2008/10/10 ---------------------------------------------------------------->>>>>
                string st_SupplierCd = this._stockMonthYearReportCndtn.St_SupplierCd.ToString("000000");
                string ed_SupplierCd = this._stockMonthYearReportCndtn.Ed_SupplierCd.ToString("000000");
                if (st_SupplierCd == "000000")
                    st_SupplierCd = ct_Extr_Top;
                if (ed_SupplierCd == "999999")
                    ed_SupplierCd = ct_Extr_End;
                // --- ADD 2008/10/10 ----------------------------------------------------------------<<<<<

                this.EditCondition(
                    ref addConditions,
                    string.Format( "仕入先" + ct_RangeConst,
                                    //this._stockMonthYearReportCndtn.St_SupplierCd,    //DEL 2008/10/10 ゼロ詰め、最初から、最後までを表示の為
                                    //this._stockMonthYearReportCndtn.Ed_SupplierCd));  //DEL 2008/10/10
                                    st_SupplierCd, ed_SupplierCd));                     //ADD 2008/10/10
            }
            // メーカー
            //if (this._stockMonthYearReportCndtn.St_GoodsMakerCd != 0 || this._stockMonthYearReportCndtn.Ed_GoodsMakerCd != 999999)        //DEL 2008/10/10 桁数変更
            if (this._stockMonthYearReportCndtn.St_GoodsMakerCd != 0 || this._stockMonthYearReportCndtn.Ed_GoodsMakerCd != 9999)            //ADD 2008/10/10
            {
                // --- ADD 2008/10/10 ---------------------------------------------------------------->>>>>
                string st_GoodsMakerCd = this._stockMonthYearReportCndtn.St_GoodsMakerCd.ToString("0000");
                string ed_GoodsMakerCd = this._stockMonthYearReportCndtn.Ed_GoodsMakerCd.ToString("0000");
                if (st_GoodsMakerCd == "0000")
                    st_GoodsMakerCd = ct_Extr_Top;
                if (ed_GoodsMakerCd == "9999")
                    ed_GoodsMakerCd = ct_Extr_End;
                // --- ADD 2008/10/10 ----------------------------------------------------------------<<<<<

                this.EditCondition(
                    ref addConditions,
                    string.Format( "メーカー" + ct_RangeConst,
                                    //this._stockMonthYearReportCndtn.St_GoodsMakerCd,      //DEL 2008/10/10 ゼロ詰め、最初から、最後までを表示の為
                                    //this._stockMonthYearReportCndtn.Ed_GoodsMakerCd));    //DEL 2008/10/10
                                    st_GoodsMakerCd, ed_GoodsMakerCd));                     //ADD 2008/10/10
            }
            // 商品大分類
            if (this._stockMonthYearReportCndtn.St_LargeGoodsGanreCode != string.Empty || this._stockMonthYearReportCndtn.Ed_LargeGoodsGanreCode != string.Empty)
            {
                string st_LargeGoodsGanreCode = this._stockMonthYearReportCndtn.St_LargeGoodsGanreCode;
                string ed_LargeGoodsGanreCode = this._stockMonthYearReportCndtn.Ed_LargeGoodsGanreCode;

                if (st_LargeGoodsGanreCode == string.Empty)
                    st_LargeGoodsGanreCode = ct_Extr_Top;
                //if (ed_LargeGoodsGanreCode == string.Empty)                                               //DEL 2008/10/10 "9999"時も「最後まで」とする
                if ((ed_LargeGoodsGanreCode == string.Empty) || (ed_LargeGoodsGanreCode == "9999"))         //ADD 2008/10/10
                    ed_LargeGoodsGanreCode = ct_Extr_End;

                if ((st_LargeGoodsGanreCode != ct_Extr_Top) || (ed_LargeGoodsGanreCode != ct_Extr_End))     //ADD 2008/10/10
                {                                                                                           //ADD 2008/10/10
                    this.EditCondition(
                        ref addConditions,
                        string.Format("商品大分類" + ct_RangeConst, st_LargeGoodsGanreCode, ed_LargeGoodsGanreCode));
                }                                                                                           //ADD 2008/10/10
            }
            // 商品中分類
            if (this._stockMonthYearReportCndtn.St_MediumGoodsGanreCode != string.Empty || this._stockMonthYearReportCndtn.Ed_MediumGoodsGanreCode != string.Empty)
            {
                string st_MediumGoodsGanreCode = this._stockMonthYearReportCndtn.St_MediumGoodsGanreCode;
                string ed_MediumGoodsGanreCode = this._stockMonthYearReportCndtn.Ed_MediumGoodsGanreCode;

                if (st_MediumGoodsGanreCode == string.Empty)
                    st_MediumGoodsGanreCode = ct_Extr_Top;
                //if (ed_MediumGoodsGanreCode == string.Empty)                                              //DEL 2008/10/10 "9999"時も「最後まで」とする
                if ((ed_MediumGoodsGanreCode == string.Empty) || (ed_MediumGoodsGanreCode == "9999"))       //ADD 2008/10/10
                    ed_MediumGoodsGanreCode = ct_Extr_End;

                if ((st_MediumGoodsGanreCode != ct_Extr_Top) || (ed_MediumGoodsGanreCode != ct_Extr_End))   //ADD 2008/10/10
                {                                                                                           //ADD 2008/10/10
                    this.EditCondition(
                        ref addConditions,
                        string.Format("商品中分類" + ct_RangeConst, st_MediumGoodsGanreCode, ed_MediumGoodsGanreCode));
                }                                                                                           //ADD 2008/10/10
            }
            // グループコード
            if (this._stockMonthYearReportCndtn.St_DetailGoodsGanreCode != string.Empty || this._stockMonthYearReportCndtn.Ed_DetailGoodsGanreCode != string.Empty)
            {
                string st_DetailGoodsGanreCode = this._stockMonthYearReportCndtn.St_DetailGoodsGanreCode;
                string ed_DetailGoodsGanreCode = this._stockMonthYearReportCndtn.Ed_DetailGoodsGanreCode;

                if (st_DetailGoodsGanreCode == string.Empty)
                    st_DetailGoodsGanreCode = ct_Extr_Top;
                //if (ed_DetailGoodsGanreCode == string.Empty)                                              //DEL 2008/10/10 "99999"時も「最後まで」とする
                if ((ed_DetailGoodsGanreCode == string.Empty) || (ed_DetailGoodsGanreCode == "99999"))      //ADD 2008/10/10
                    ed_DetailGoodsGanreCode = ct_Extr_End;

                if ((st_DetailGoodsGanreCode != ct_Extr_Top) || (ed_DetailGoodsGanreCode != ct_Extr_End))   //ADD 2008/10/10
                {                                                                                           //ADD 2008/10/10
                    this.EditCondition(
                        ref addConditions,
                        string.Format("グループコード" + ct_RangeConst, st_DetailGoodsGanreCode, ed_DetailGoodsGanreCode));
                }
            }
            // 商品番号
            if (this._stockMonthYearReportCndtn.St_GoodsNo != string.Empty || this._stockMonthYearReportCndtn.Ed_GoodsNo != string.Empty)
            {
                string st_GoodsNo = this._stockMonthYearReportCndtn.St_GoodsNo;
                string ed_GoodsNo = this._stockMonthYearReportCndtn.Ed_GoodsNo;

                if ( st_GoodsNo == string.Empty )
                    st_GoodsNo = ct_Extr_Top;
                if ( ed_GoodsNo == string.Empty )
                    ed_GoodsNo = ct_Extr_End;

                this.EditCondition(
                    ref addConditions,
                    string.Format( "品番" + ct_RangeConst, st_GoodsNo, ed_GoodsNo ) );
            }

            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki

            // 追加
            foreach ( string exCondStr in addConditions ) {
                extraConditions.Add(exCondStr);
            }
        }
		#endregion

		#region ◎ 抽出範囲文字列作成
		/// <summary>
		/// 抽出範囲文字列作成
		/// </summary>
		/// <returns>作成文字列</returns>
		/// <remarks>
		/// <br>Note       : 抽出範囲文字列を作成します</br>
        /// <br>Programmer : 30416 長沼 賢二</br>
        /// <br>Date       : 2008.08.06</br>
		/// </remarks>
		private string GetConditionRange( string title, string startString, string endString )
		{
			string result = "";
			if ((startString != "") || (endString != ""))
			{
				string start = ct_Extr_Top;
				string end	 = ct_Extr_End;
				if (startString	!= "")	start	= startString;
				if (endString	!= "")	end		= endString;
				result = String.Format(title + ct_RangeConst, start, end);
			}
			return result;
		}
		#endregion

		#region ◎ 抽出条件文字列編集
		/// <summary>
		/// 抽出条件文字列編集
		/// </summary>
		/// <param name="editArea">格納エリア</param>
		/// <param name="target">対象文字列</param>
		/// <remarks>
		/// <br>Note       : 出力する抽出条件文字列を編集します。</br>
        /// <br>Programmer : 30416 長沼 賢二</br>
        /// <br>Date       : 2008.08.06</br>
		/// </remarks>
		private void EditCondition(ref StringCollection editArea, string target)
		{
			bool isEdit = false;
			
			// 編集対象文字バイト数算出
			int targetByte = TStrConv.SizeCountSJIS(target);
			
			for (int i = 0; i < editArea.Count; i++)
			{
				int areaByte = 0;
				
				// 格納エリアのバイト数算出
				if (editArea[i] != null)
				{
					areaByte = TStrConv.SizeCountSJIS(editArea[i]);
				}

				if ((areaByte + targetByte + 2) <= 190)
				{
					isEdit = true;

					// 全角スペースを挿入
					if (editArea[i] != null) editArea[i] += ct_Space;
					
					editArea[i]  += target;
					break;
				}
			}
			// 新規編集エリア作成
			if (!isEdit)
			{
				editArea.Add(target);
			}
		}
		#endregion
		#endregion ◆ レポートフォーム設定関連

		#region ◎ メッセージ表示

		/// <summary>
		/// メッセージ表示
		/// </summary>
		/// <param name="iLevel">エラーレベル</param>
		/// <param name="iMsg">エラーメッセージ</param>
		/// <param name="iSt">ステータス</param>
		/// <param name="iButton">表示ボタン</param>
		/// <param name="iDefButton">デフォルトフォーカスボタン</param>
		/// <returns>DialogResult</returns>
		/// <remarks>
		/// <br>Note       : 出力件数の設定を行います。</br>
		/// <br>Programmer : 30416 長沼 賢二</br>
		/// <br>Date       : 2008.08.06</br>
		/// </remarks>
		private DialogResult MsgDispProc(emErrorLevel iLevel, string iMsg, int iSt, MessageBoxButtons iButton, MessageBoxDefaultButton iDefButton)
		{
			return TMsgDisp.Show(iLevel, "PMZAI02012P", iMsg, iSt, iButton, iDefButton);
		}

		#endregion
		#endregion
	}
}
