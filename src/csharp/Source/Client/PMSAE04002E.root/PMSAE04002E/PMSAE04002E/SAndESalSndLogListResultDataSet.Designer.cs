//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3053
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.UIData {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SAndESalSndLogListResultDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SAndESalSndLogListResultDataSet : global::System.Data.DataSet {
        
        private SAndESalSndLogListResultDataTable tableSAndESalSndLogListResult;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SAndESalSndLogListResultDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SAndESalSndLogListResultDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SAndESalSndLogListResult"] != null)) {
                    base.Tables.Add(new SAndESalSndLogListResultDataTable(ds.Tables["SAndESalSndLogListResult"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SAndESalSndLogListResultDataTable SAndESalSndLogListResult {
            get {
                return this.tableSAndESalSndLogListResult;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SAndESalSndLogListResultDataSet cln = ((SAndESalSndLogListResultDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SAndESalSndLogListResult"] != null)) {
                    base.Tables.Add(new SAndESalSndLogListResultDataTable(ds.Tables["SAndESalSndLogListResult"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSAndESalSndLogListResult = ((SAndESalSndLogListResultDataTable)(base.Tables["SAndESalSndLogListResult"]));
            if ((initTable == true)) {
                if ((this.tableSAndESalSndLogListResult != null)) {
                    this.tableSAndESalSndLogListResult.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SAndESalSndLogListResultDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SAndESalSndLogListResultDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSAndESalSndLogListResult = new SAndESalSndLogListResultDataTable();
            base.Tables.Add(this.tableSAndESalSndLogListResult);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSAndESalSndLogListResult() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SAndESalSndLogListResultDataSet ds = new SAndESalSndLogListResultDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SAndESalSndLogListResultRowChangeEventHandler(object sender, SAndESalSndLogListResultRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SAndESalSndLogListResultDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSectionCode;
            
            private global::System.Data.DataColumn columnSectionName;
            
            private global::System.Data.DataColumn columnSAndEAutoSendDiv;
            
            private global::System.Data.DataColumn columnSAndEAutoSendDivName;
            
            private global::System.Data.DataColumn columnSendDateTimeStart;
            
            private global::System.Data.DataColumn columnSendDateTimeEnd;
            
            private global::System.Data.DataColumn columnSendObjDateStart;
            
            private global::System.Data.DataColumn columnSendObjDateEnd;
            
            private global::System.Data.DataColumn columnSendObjCustStart;
            
            private global::System.Data.DataColumn columnSendObjCustEnd;
            
            private global::System.Data.DataColumn columnSendObjDiv;
            
            private global::System.Data.DataColumn columnSendObjDivName;
            
            private global::System.Data.DataColumn columnSendResults;
            
            private global::System.Data.DataColumn columnSendResultsName;
            
            private global::System.Data.DataColumn columnSendSlipCount;
            
            private global::System.Data.DataColumn columnSendSlipDtlCnt;
            
            private global::System.Data.DataColumn columnSendSlipTotalMny;
            
            private global::System.Data.DataColumn columnSendErrorContents;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SAndESalSndLogListResultDataTable() {
                this.TableName = "SAndESalSndLogListResult";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SAndESalSndLogListResultDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SAndESalSndLogListResultDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionCodeColumn {
                get {
                    return this.columnSectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionNameColumn {
                get {
                    return this.columnSectionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SAndEAutoSendDivColumn {
                get {
                    return this.columnSAndEAutoSendDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SAndEAutoSendDivNameColumn {
                get {
                    return this.columnSAndEAutoSendDivName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendDateTimeStartColumn {
                get {
                    return this.columnSendDateTimeStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendDateTimeEndColumn {
                get {
                    return this.columnSendDateTimeEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendObjDateStartColumn {
                get {
                    return this.columnSendObjDateStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendObjDateEndColumn {
                get {
                    return this.columnSendObjDateEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendObjCustStartColumn {
                get {
                    return this.columnSendObjCustStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendObjCustEndColumn {
                get {
                    return this.columnSendObjCustEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendObjDivColumn {
                get {
                    return this.columnSendObjDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendObjDivNameColumn {
                get {
                    return this.columnSendObjDivName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendResultsColumn {
                get {
                    return this.columnSendResults;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendResultsNameColumn {
                get {
                    return this.columnSendResultsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendSlipCountColumn {
                get {
                    return this.columnSendSlipCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendSlipDtlCntColumn {
                get {
                    return this.columnSendSlipDtlCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendSlipTotalMnyColumn {
                get {
                    return this.columnSendSlipTotalMny;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendErrorContentsColumn {
                get {
                    return this.columnSendErrorContents;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SAndESalSndLogListResultRow this[int index] {
                get {
                    return ((SAndESalSndLogListResultRow)(this.Rows[index]));
                }
            }
            
            public event SAndESalSndLogListResultRowChangeEventHandler SAndESalSndLogListResultRowChanging;
            
            public event SAndESalSndLogListResultRowChangeEventHandler SAndESalSndLogListResultRowChanged;
            
            public event SAndESalSndLogListResultRowChangeEventHandler SAndESalSndLogListResultRowDeleting;
            
            public event SAndESalSndLogListResultRowChangeEventHandler SAndESalSndLogListResultRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSAndESalSndLogListResultRow(SAndESalSndLogListResultRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SAndESalSndLogListResultRow AddSAndESalSndLogListResultRow(
                        string SectionCode, 
                        string SectionName, 
                        int SAndEAutoSendDiv, 
                        string SAndEAutoSendDivName, 
                        string SendDateTimeStart, 
                        string SendDateTimeEnd, 
                        string SendObjDateStart, 
                        string SendObjDateEnd, 
                        int SendObjCustStart, 
                        int SendObjCustEnd, 
                        int SendObjDiv, 
                        string SendObjDivName, 
                        int SendResults, 
                        string SendResultsName, 
                        int SendSlipCount, 
                        int SendSlipDtlCnt, 
                        long SendSlipTotalMny, 
                        string SendErrorContents) {
                SAndESalSndLogListResultRow rowSAndESalSndLogListResultRow = ((SAndESalSndLogListResultRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SectionCode,
                        SectionName,
                        SAndEAutoSendDiv,
                        SAndEAutoSendDivName,
                        SendDateTimeStart,
                        SendDateTimeEnd,
                        SendObjDateStart,
                        SendObjDateEnd,
                        SendObjCustStart,
                        SendObjCustEnd,
                        SendObjDiv,
                        SendObjDivName,
                        SendResults,
                        SendResultsName,
                        SendSlipCount,
                        SendSlipDtlCnt,
                        SendSlipTotalMny,
                        SendErrorContents};
                rowSAndESalSndLogListResultRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSAndESalSndLogListResultRow);
                return rowSAndESalSndLogListResultRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SAndESalSndLogListResultDataTable cln = ((SAndESalSndLogListResultDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SAndESalSndLogListResultDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSectionCode = base.Columns["SectionCode"];
                this.columnSectionName = base.Columns["SectionName"];
                this.columnSAndEAutoSendDiv = base.Columns["SAndEAutoSendDiv"];
                this.columnSAndEAutoSendDivName = base.Columns["SAndEAutoSendDivName"];
                this.columnSendDateTimeStart = base.Columns["SendDateTimeStart"];
                this.columnSendDateTimeEnd = base.Columns["SendDateTimeEnd"];
                this.columnSendObjDateStart = base.Columns["SendObjDateStart"];
                this.columnSendObjDateEnd = base.Columns["SendObjDateEnd"];
                this.columnSendObjCustStart = base.Columns["SendObjCustStart"];
                this.columnSendObjCustEnd = base.Columns["SendObjCustEnd"];
                this.columnSendObjDiv = base.Columns["SendObjDiv"];
                this.columnSendObjDivName = base.Columns["SendObjDivName"];
                this.columnSendResults = base.Columns["SendResults"];
                this.columnSendResultsName = base.Columns["SendResultsName"];
                this.columnSendSlipCount = base.Columns["SendSlipCount"];
                this.columnSendSlipDtlCnt = base.Columns["SendSlipDtlCnt"];
                this.columnSendSlipTotalMny = base.Columns["SendSlipTotalMny"];
                this.columnSendErrorContents = base.Columns["SendErrorContents"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSectionCode = new global::System.Data.DataColumn("SectionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionCode);
                this.columnSectionName = new global::System.Data.DataColumn("SectionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionName);
                this.columnSAndEAutoSendDiv = new global::System.Data.DataColumn("SAndEAutoSendDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAndEAutoSendDiv);
                this.columnSAndEAutoSendDivName = new global::System.Data.DataColumn("SAndEAutoSendDivName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAndEAutoSendDivName);
                this.columnSendDateTimeStart = new global::System.Data.DataColumn("SendDateTimeStart", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendDateTimeStart);
                this.columnSendDateTimeEnd = new global::System.Data.DataColumn("SendDateTimeEnd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendDateTimeEnd);
                this.columnSendObjDateStart = new global::System.Data.DataColumn("SendObjDateStart", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendObjDateStart);
                this.columnSendObjDateEnd = new global::System.Data.DataColumn("SendObjDateEnd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendObjDateEnd);
                this.columnSendObjCustStart = new global::System.Data.DataColumn("SendObjCustStart", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendObjCustStart);
                this.columnSendObjCustEnd = new global::System.Data.DataColumn("SendObjCustEnd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendObjCustEnd);
                this.columnSendObjDiv = new global::System.Data.DataColumn("SendObjDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendObjDiv);
                this.columnSendObjDivName = new global::System.Data.DataColumn("SendObjDivName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendObjDivName);
                this.columnSendResults = new global::System.Data.DataColumn("SendResults", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendResults);
                this.columnSendResultsName = new global::System.Data.DataColumn("SendResultsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendResultsName);
                this.columnSendSlipCount = new global::System.Data.DataColumn("SendSlipCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendSlipCount);
                this.columnSendSlipDtlCnt = new global::System.Data.DataColumn("SendSlipDtlCnt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendSlipDtlCnt);
                this.columnSendSlipTotalMny = new global::System.Data.DataColumn("SendSlipTotalMny", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendSlipTotalMny);
                this.columnSendErrorContents = new global::System.Data.DataColumn("SendErrorContents", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendErrorContents);
                this.columnSectionCode.Caption = "拠点コード";
                this.columnSectionName.Caption = "拠点";
                this.columnSAndEAutoSendDiv.Caption = "自動送信区分コード";
                this.columnSAndEAutoSendDivName.Caption = "自動送信区分";
                this.columnSendDateTimeStart.Caption = "送信開始日時";
                this.columnSendDateTimeEnd.Caption = "送信終了日時";
                this.columnSendObjDateStart.Caption = "対象開始日付";
                this.columnSendObjDateEnd.AllowDBNull = false;
                this.columnSendObjDateEnd.Caption = "対象終了日付";
                this.columnSendObjCustStart.Caption = "開始得意先";
                this.columnSendObjCustEnd.Caption = "終了得意先";
                this.columnSendObjDiv.Caption = "送信対象区分コード";
                this.columnSendObjDivName.Caption = "送信対象区分";
                this.columnSendResults.Caption = "送信結果コード";
                this.columnSendResultsName.Caption = "送信結果";
                this.columnSendSlipCount.Caption = "伝票枚数";
                this.columnSendSlipDtlCnt.Caption = "明細枚数";
                this.columnSendSlipTotalMny.Caption = "合計金額";
                this.columnSendErrorContents.Caption = "エラー内容";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SAndESalSndLogListResultRow NewSAndESalSndLogListResultRow() {
                return ((SAndESalSndLogListResultRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SAndESalSndLogListResultRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SAndESalSndLogListResultRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SAndESalSndLogListResultRowChanged != null)) {
                    this.SAndESalSndLogListResultRowChanged(this, new SAndESalSndLogListResultRowChangeEvent(((SAndESalSndLogListResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SAndESalSndLogListResultRowChanging != null)) {
                    this.SAndESalSndLogListResultRowChanging(this, new SAndESalSndLogListResultRowChangeEvent(((SAndESalSndLogListResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SAndESalSndLogListResultRowDeleted != null)) {
                    this.SAndESalSndLogListResultRowDeleted(this, new SAndESalSndLogListResultRowChangeEvent(((SAndESalSndLogListResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SAndESalSndLogListResultRowDeleting != null)) {
                    this.SAndESalSndLogListResultRowDeleting(this, new SAndESalSndLogListResultRowChangeEvent(((SAndESalSndLogListResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSAndESalSndLogListResultRow(SAndESalSndLogListResultRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SAndESalSndLogListResultDataSet ds = new SAndESalSndLogListResultDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SAndESalSndLogListResultDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SAndESalSndLogListResultRow : global::System.Data.DataRow {
            
            private SAndESalSndLogListResultDataTable tableSAndESalSndLogListResult;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SAndESalSndLogListResultRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSAndESalSndLogListResult = ((SAndESalSndLogListResultDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionCode {
                get {
                    if (this.IsSectionCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSAndESalSndLogListResult.SectionCodeColumn]));
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionName {
                get {
                    if (this.IsSectionNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSAndESalSndLogListResult.SectionNameColumn]));
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SectionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SAndEAutoSendDiv {
                get {
                    try {
                        return ((int)(this[this.tableSAndESalSndLogListResult.SAndEAutoSendDivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SAndESalSndLogListResult\' にある列 \'SAndEAutoSendDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SAndEAutoSendDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SAndEAutoSendDivName {
                get {
                    if (this.IsSAndEAutoSendDivNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSAndESalSndLogListResult.SAndEAutoSendDivNameColumn]));
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SAndEAutoSendDivNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SendDateTimeStart {
                get {
                    if (this.IsSendDateTimeStartNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSAndESalSndLogListResult.SendDateTimeStartColumn]));
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendDateTimeStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SendDateTimeEnd {
                get {
                    if (this.IsSendDateTimeEndNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSAndESalSndLogListResult.SendDateTimeEndColumn]));
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendDateTimeEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SendObjDateStart {
                get {
                    if (this.IsSendObjDateStartNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSAndESalSndLogListResult.SendObjDateStartColumn]));
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendObjDateStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SendObjDateEnd {
                get {
                    return ((string)(this[this.tableSAndESalSndLogListResult.SendObjDateEndColumn]));
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendObjDateEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SendObjCustStart {
                get {
                    try {
                        return ((int)(this[this.tableSAndESalSndLogListResult.SendObjCustStartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SAndESalSndLogListResult\' にある列 \'SendObjCustStart\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendObjCustStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SendObjCustEnd {
                get {
                    try {
                        return ((int)(this[this.tableSAndESalSndLogListResult.SendObjCustEndColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SAndESalSndLogListResult\' にある列 \'SendObjCustEnd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendObjCustEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SendObjDiv {
                get {
                    try {
                        return ((int)(this[this.tableSAndESalSndLogListResult.SendObjDivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SAndESalSndLogListResult\' にある列 \'SendObjDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendObjDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SendObjDivName {
                get {
                    if (this.IsSendObjDivNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSAndESalSndLogListResult.SendObjDivNameColumn]));
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendObjDivNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SendResults {
                get {
                    try {
                        return ((int)(this[this.tableSAndESalSndLogListResult.SendResultsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SAndESalSndLogListResult\' にある列 \'SendResults\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendResultsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SendResultsName {
                get {
                    if (this.IsSendResultsNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSAndESalSndLogListResult.SendResultsNameColumn]));
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendResultsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SendSlipCount {
                get {
                    try {
                        return ((int)(this[this.tableSAndESalSndLogListResult.SendSlipCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SAndESalSndLogListResult\' にある列 \'SendSlipCount\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendSlipCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SendSlipDtlCnt {
                get {
                    try {
                        return ((int)(this[this.tableSAndESalSndLogListResult.SendSlipDtlCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SAndESalSndLogListResult\' にある列 \'SendSlipDtlCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendSlipDtlCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SendSlipTotalMny {
                get {
                    try {
                        return ((long)(this[this.tableSAndESalSndLogListResult.SendSlipTotalMnyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SAndESalSndLogListResult\' にある列 \'SendSlipTotalMny\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendSlipTotalMnyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SendErrorContents {
                get {
                    if (this.IsSendErrorContentsNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSAndESalSndLogListResult.SendErrorContentsColumn]));
                    }
                }
                set {
                    this[this.tableSAndESalSndLogListResult.SendErrorContentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionCodeNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SectionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionCodeNull() {
                this[this.tableSAndESalSndLogListResult.SectionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionNameNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SectionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionNameNull() {
                this[this.tableSAndESalSndLogListResult.SectionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSAndEAutoSendDivNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SAndEAutoSendDivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSAndEAutoSendDivNull() {
                this[this.tableSAndESalSndLogListResult.SAndEAutoSendDivColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSAndEAutoSendDivNameNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SAndEAutoSendDivNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSAndEAutoSendDivNameNull() {
                this[this.tableSAndESalSndLogListResult.SAndEAutoSendDivNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendDateTimeStartNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendDateTimeStartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendDateTimeStartNull() {
                this[this.tableSAndESalSndLogListResult.SendDateTimeStartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendDateTimeEndNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendDateTimeEndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendDateTimeEndNull() {
                this[this.tableSAndESalSndLogListResult.SendDateTimeEndColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendObjDateStartNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendObjDateStartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendObjDateStartNull() {
                this[this.tableSAndESalSndLogListResult.SendObjDateStartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendObjCustStartNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendObjCustStartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendObjCustStartNull() {
                this[this.tableSAndESalSndLogListResult.SendObjCustStartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendObjCustEndNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendObjCustEndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendObjCustEndNull() {
                this[this.tableSAndESalSndLogListResult.SendObjCustEndColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendObjDivNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendObjDivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendObjDivNull() {
                this[this.tableSAndESalSndLogListResult.SendObjDivColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendObjDivNameNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendObjDivNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendObjDivNameNull() {
                this[this.tableSAndESalSndLogListResult.SendObjDivNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendResultsNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendResultsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendResultsNull() {
                this[this.tableSAndESalSndLogListResult.SendResultsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendResultsNameNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendResultsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendResultsNameNull() {
                this[this.tableSAndESalSndLogListResult.SendResultsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendSlipCountNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendSlipCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendSlipCountNull() {
                this[this.tableSAndESalSndLogListResult.SendSlipCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendSlipDtlCntNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendSlipDtlCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendSlipDtlCntNull() {
                this[this.tableSAndESalSndLogListResult.SendSlipDtlCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendSlipTotalMnyNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendSlipTotalMnyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendSlipTotalMnyNull() {
                this[this.tableSAndESalSndLogListResult.SendSlipTotalMnyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSendErrorContentsNull() {
                return this.IsNull(this.tableSAndESalSndLogListResult.SendErrorContentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSendErrorContentsNull() {
                this[this.tableSAndESalSndLogListResult.SendErrorContentsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SAndESalSndLogListResultRowChangeEvent : global::System.EventArgs {
            
            private SAndESalSndLogListResultRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SAndESalSndLogListResultRowChangeEvent(SAndESalSndLogListResultRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SAndESalSndLogListResultRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591