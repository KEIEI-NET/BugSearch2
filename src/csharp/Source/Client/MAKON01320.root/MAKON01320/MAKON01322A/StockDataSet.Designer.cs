//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3082
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("StockDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StockDataSet : global::System.Data.DataSet {
        
        private StockSlipDataTable tableStockSlip;
        
        private StockDetailDataTable tableStockDetail;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StockDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StockDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["StockSlip"] != null)) {
                    base.Tables.Add(new StockSlipDataTable(ds.Tables["StockSlip"]));
                }
                if ((ds.Tables["StockDetail"] != null)) {
                    base.Tables.Add(new StockDetailDataTable(ds.Tables["StockDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockSlipDataTable StockSlip {
            get {
                return this.tableStockSlip;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockDetailDataTable StockDetail {
            get {
                return this.tableStockDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            StockDataSet cln = ((StockDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["StockSlip"] != null)) {
                    base.Tables.Add(new StockSlipDataTable(ds.Tables["StockSlip"]));
                }
                if ((ds.Tables["StockDetail"] != null)) {
                    base.Tables.Add(new StockDetailDataTable(ds.Tables["StockDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStockSlip = ((StockSlipDataTable)(base.Tables["StockSlip"]));
            if ((initTable == true)) {
                if ((this.tableStockSlip != null)) {
                    this.tableStockSlip.InitVars();
                }
            }
            this.tableStockDetail = ((StockDetailDataTable)(base.Tables["StockDetail"]));
            if ((initTable == true)) {
                if ((this.tableStockDetail != null)) {
                    this.tableStockDetail.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StockDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/StockDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStockSlip = new StockSlipDataTable();
            base.Tables.Add(this.tableStockSlip);
            this.tableStockDetail = new StockDetailDataTable();
            base.Tables.Add(this.tableStockDetail);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStockSlip() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStockDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            StockDataSet ds = new StockDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void StockSlipRowChangeEventHandler(object sender, StockSlipRowChangeEvent e);
        
        public delegate void StockDetailRowChangeEventHandler(object sender, StockDetailRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockSlipDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStockRowNo;
            
            private global::System.Data.DataColumn columnEnterpriseCode;
            
            private global::System.Data.DataColumn columnSectionCode;
            
            private global::System.Data.DataColumn columnSectionName;
            
            private global::System.Data.DataColumn columnSupplierSlipNo;
            
            private global::System.Data.DataColumn columnStockAddUpADate;
            
            private global::System.Data.DataColumn columnStockAddUpADateString;
            
            private global::System.Data.DataColumn columnArrivalGoodsDay;
            
            private global::System.Data.DataColumn columnArrivalGoodsDayString;
            
            private global::System.Data.DataColumn columnStockAgentCode;
            
            private global::System.Data.DataColumn columnStockAgentName;
            
            private global::System.Data.DataColumn columnCustomerCode;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnSupplierFomal;
            
            private global::System.Data.DataColumn columnSupplierFomalName;
            
            private global::System.Data.DataColumn columnSupplierSlipCd;
            
            private global::System.Data.DataColumn columnSupplierSlipCdName;
            
            private global::System.Data.DataColumn columnDebitNoteDiv;
            
            private global::System.Data.DataColumn columnDebitNoteDivName;
            
            private global::System.Data.DataColumn columnStockGoodsCd;
            
            private global::System.Data.DataColumn columnStockGoodsCdName;
            
            private global::System.Data.DataColumn columnAccPayDivCd;
            
            private global::System.Data.DataColumn columnAccPayDivCdName;
            
            private global::System.Data.DataColumn columnInputDay;
            
            private global::System.Data.DataColumn columnInputDayString;
            
            private global::System.Data.DataColumn columnStockDate;
            
            private global::System.Data.DataColumn columnStockDateString;
            
            private global::System.Data.DataColumn columnStockTotalPrice;
            
            private global::System.Data.DataColumn columnStockSubttlPrice;
            
            private global::System.Data.DataColumn columnStockPriceConsTax;
            
            private global::System.Data.DataColumn columnPartySaleSlipNum;
            
            private global::System.Data.DataColumn columnSupplierSlipNote1;
            
            private global::System.Data.DataColumn columnSupplierSlipNote2;
            
            private global::System.Data.DataColumn columnSupplierSlipNoStart;
            
            private global::System.Data.DataColumn columnSupplierSlipNoEnd;
            
            private global::System.Data.DataColumn columnUoeRemark1;
            
            private global::System.Data.DataColumn columnPayeeCode;
            
            private global::System.Data.DataColumn columnPayeeSnm;
            
            private global::System.Data.DataColumn columnSuppCTaxLayCd;
            
            private global::System.Data.DataColumn columnSubSectionName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSlipDataTable() {
                this.TableName = "StockSlip";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockSlipDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockSlipDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockRowNoColumn {
                get {
                    return this.columnStockRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnterpriseCodeColumn {
                get {
                    return this.columnEnterpriseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionCodeColumn {
                get {
                    return this.columnSectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionNameColumn {
                get {
                    return this.columnSectionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipNoColumn {
                get {
                    return this.columnSupplierSlipNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockAddUpADateColumn {
                get {
                    return this.columnStockAddUpADate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockAddUpADateStringColumn {
                get {
                    return this.columnStockAddUpADateString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArrivalGoodsDayColumn {
                get {
                    return this.columnArrivalGoodsDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArrivalGoodsDayStringColumn {
                get {
                    return this.columnArrivalGoodsDayString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockAgentCodeColumn {
                get {
                    return this.columnStockAgentCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockAgentNameColumn {
                get {
                    return this.columnStockAgentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerCodeColumn {
                get {
                    return this.columnCustomerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierFomalColumn {
                get {
                    return this.columnSupplierFomal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierFomalNameColumn {
                get {
                    return this.columnSupplierFomalName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipCdColumn {
                get {
                    return this.columnSupplierSlipCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipCdNameColumn {
                get {
                    return this.columnSupplierSlipCdName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebitNoteDivColumn {
                get {
                    return this.columnDebitNoteDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebitNoteDivNameColumn {
                get {
                    return this.columnDebitNoteDivName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockGoodsCdColumn {
                get {
                    return this.columnStockGoodsCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockGoodsCdNameColumn {
                get {
                    return this.columnStockGoodsCdName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccPayDivCdColumn {
                get {
                    return this.columnAccPayDivCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccPayDivCdNameColumn {
                get {
                    return this.columnAccPayDivCdName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InputDayColumn {
                get {
                    return this.columnInputDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InputDayStringColumn {
                get {
                    return this.columnInputDayString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockDateColumn {
                get {
                    return this.columnStockDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockDateStringColumn {
                get {
                    return this.columnStockDateString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTotalPriceColumn {
                get {
                    return this.columnStockTotalPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockSubttlPriceColumn {
                get {
                    return this.columnStockSubttlPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockPriceConsTaxColumn {
                get {
                    return this.columnStockPriceConsTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartySaleSlipNumColumn {
                get {
                    return this.columnPartySaleSlipNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipNote1Column {
                get {
                    return this.columnSupplierSlipNote1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipNote2Column {
                get {
                    return this.columnSupplierSlipNote2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipNoStartColumn {
                get {
                    return this.columnSupplierSlipNoStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipNoEndColumn {
                get {
                    return this.columnSupplierSlipNoEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UoeRemark1Column {
                get {
                    return this.columnUoeRemark1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayeeCodeColumn {
                get {
                    return this.columnPayeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayeeSnmColumn {
                get {
                    return this.columnPayeeSnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SuppCTaxLayCdColumn {
                get {
                    return this.columnSuppCTaxLayCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubSectionNameColumn {
                get {
                    return this.columnSubSectionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSlipRow this[int index] {
                get {
                    return ((StockSlipRow)(this.Rows[index]));
                }
            }
            
            public event StockSlipRowChangeEventHandler StockSlipRowChanging;
            
            public event StockSlipRowChangeEventHandler StockSlipRowChanged;
            
            public event StockSlipRowChangeEventHandler StockSlipRowDeleting;
            
            public event StockSlipRowChangeEventHandler StockSlipRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockSlipRow(StockSlipRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSlipRow AddStockSlipRow(
                        int StockRowNo, 
                        string EnterpriseCode, 
                        string SectionCode, 
                        string SectionName, 
                        int SupplierSlipNo, 
                        System.DateTime StockAddUpADate, 
                        string StockAddUpADateString, 
                        System.DateTime ArrivalGoodsDay, 
                        string ArrivalGoodsDayString, 
                        string StockAgentCode, 
                        string StockAgentName, 
                        int CustomerCode, 
                        string CustomerName, 
                        int SupplierFomal, 
                        string SupplierFomalName, 
                        int SupplierSlipCd, 
                        string SupplierSlipCdName, 
                        int DebitNoteDiv, 
                        string DebitNoteDivName, 
                        int StockGoodsCd, 
                        string StockGoodsCdName, 
                        int AccPayDivCd, 
                        string AccPayDivCdName, 
                        System.DateTime InputDay, 
                        string InputDayString, 
                        System.DateTime StockDate, 
                        string StockDateString, 
                        long StockTotalPrice, 
                        long StockSubttlPrice, 
                        long StockPriceConsTax, 
                        string PartySaleSlipNum, 
                        string SupplierSlipNote1, 
                        string SupplierSlipNote2, 
                        int SupplierSlipNoStart, 
                        int SupplierSlipNoEnd, 
                        string UoeRemark1, 
                        int PayeeCode, 
                        string PayeeSnm, 
                        int SuppCTaxLayCd, 
                        string SubSectionName) {
                StockSlipRow rowStockSlipRow = ((StockSlipRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StockRowNo,
                        EnterpriseCode,
                        SectionCode,
                        SectionName,
                        SupplierSlipNo,
                        StockAddUpADate,
                        StockAddUpADateString,
                        ArrivalGoodsDay,
                        ArrivalGoodsDayString,
                        StockAgentCode,
                        StockAgentName,
                        CustomerCode,
                        CustomerName,
                        SupplierFomal,
                        SupplierFomalName,
                        SupplierSlipCd,
                        SupplierSlipCdName,
                        DebitNoteDiv,
                        DebitNoteDivName,
                        StockGoodsCd,
                        StockGoodsCdName,
                        AccPayDivCd,
                        AccPayDivCdName,
                        InputDay,
                        InputDayString,
                        StockDate,
                        StockDateString,
                        StockTotalPrice,
                        StockSubttlPrice,
                        StockPriceConsTax,
                        PartySaleSlipNum,
                        SupplierSlipNote1,
                        SupplierSlipNote2,
                        SupplierSlipNoStart,
                        SupplierSlipNoEnd,
                        UoeRemark1,
                        PayeeCode,
                        PayeeSnm,
                        SuppCTaxLayCd,
                        SubSectionName};
                rowStockSlipRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockSlipRow);
                return rowStockSlipRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSlipRow FindByStockRowNo(int StockRowNo) {
                return ((StockSlipRow)(this.Rows.Find(new object[] {
                            StockRowNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockSlipDataTable cln = ((StockSlipDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockSlipDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStockRowNo = base.Columns["StockRowNo"];
                this.columnEnterpriseCode = base.Columns["EnterpriseCode"];
                this.columnSectionCode = base.Columns["SectionCode"];
                this.columnSectionName = base.Columns["SectionName"];
                this.columnSupplierSlipNo = base.Columns["SupplierSlipNo"];
                this.columnStockAddUpADate = base.Columns["StockAddUpADate"];
                this.columnStockAddUpADateString = base.Columns["StockAddUpADateString"];
                this.columnArrivalGoodsDay = base.Columns["ArrivalGoodsDay"];
                this.columnArrivalGoodsDayString = base.Columns["ArrivalGoodsDayString"];
                this.columnStockAgentCode = base.Columns["StockAgentCode"];
                this.columnStockAgentName = base.Columns["StockAgentName"];
                this.columnCustomerCode = base.Columns["CustomerCode"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnSupplierFomal = base.Columns["SupplierFomal"];
                this.columnSupplierFomalName = base.Columns["SupplierFomalName"];
                this.columnSupplierSlipCd = base.Columns["SupplierSlipCd"];
                this.columnSupplierSlipCdName = base.Columns["SupplierSlipCdName"];
                this.columnDebitNoteDiv = base.Columns["DebitNoteDiv"];
                this.columnDebitNoteDivName = base.Columns["DebitNoteDivName"];
                this.columnStockGoodsCd = base.Columns["StockGoodsCd"];
                this.columnStockGoodsCdName = base.Columns["StockGoodsCdName"];
                this.columnAccPayDivCd = base.Columns["AccPayDivCd"];
                this.columnAccPayDivCdName = base.Columns["AccPayDivCdName"];
                this.columnInputDay = base.Columns["InputDay"];
                this.columnInputDayString = base.Columns["InputDayString"];
                this.columnStockDate = base.Columns["StockDate"];
                this.columnStockDateString = base.Columns["StockDateString"];
                this.columnStockTotalPrice = base.Columns["StockTotalPrice"];
                this.columnStockSubttlPrice = base.Columns["StockSubttlPrice"];
                this.columnStockPriceConsTax = base.Columns["StockPriceConsTax"];
                this.columnPartySaleSlipNum = base.Columns["PartySaleSlipNum"];
                this.columnSupplierSlipNote1 = base.Columns["SupplierSlipNote1"];
                this.columnSupplierSlipNote2 = base.Columns["SupplierSlipNote2"];
                this.columnSupplierSlipNoStart = base.Columns["SupplierSlipNoStart"];
                this.columnSupplierSlipNoEnd = base.Columns["SupplierSlipNoEnd"];
                this.columnUoeRemark1 = base.Columns["UoeRemark1"];
                this.columnPayeeCode = base.Columns["PayeeCode"];
                this.columnPayeeSnm = base.Columns["PayeeSnm"];
                this.columnSuppCTaxLayCd = base.Columns["SuppCTaxLayCd"];
                this.columnSubSectionName = base.Columns["SubSectionName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStockRowNo = new global::System.Data.DataColumn("StockRowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockRowNo);
                this.columnEnterpriseCode = new global::System.Data.DataColumn("EnterpriseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnterpriseCode);
                this.columnSectionCode = new global::System.Data.DataColumn("SectionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionCode);
                this.columnSectionName = new global::System.Data.DataColumn("SectionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionName);
                this.columnSupplierSlipNo = new global::System.Data.DataColumn("SupplierSlipNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipNo);
                this.columnStockAddUpADate = new global::System.Data.DataColumn("StockAddUpADate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockAddUpADate);
                this.columnStockAddUpADateString = new global::System.Data.DataColumn("StockAddUpADateString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockAddUpADateString);
                this.columnArrivalGoodsDay = new global::System.Data.DataColumn("ArrivalGoodsDay", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArrivalGoodsDay);
                this.columnArrivalGoodsDayString = new global::System.Data.DataColumn("ArrivalGoodsDayString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArrivalGoodsDayString);
                this.columnStockAgentCode = new global::System.Data.DataColumn("StockAgentCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockAgentCode);
                this.columnStockAgentName = new global::System.Data.DataColumn("StockAgentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockAgentName);
                this.columnCustomerCode = new global::System.Data.DataColumn("CustomerCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerCode);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnSupplierFomal = new global::System.Data.DataColumn("SupplierFomal", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierFomal);
                this.columnSupplierFomalName = new global::System.Data.DataColumn("SupplierFomalName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierFomalName);
                this.columnSupplierSlipCd = new global::System.Data.DataColumn("SupplierSlipCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipCd);
                this.columnSupplierSlipCdName = new global::System.Data.DataColumn("SupplierSlipCdName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipCdName);
                this.columnDebitNoteDiv = new global::System.Data.DataColumn("DebitNoteDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebitNoteDiv);
                this.columnDebitNoteDivName = new global::System.Data.DataColumn("DebitNoteDivName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebitNoteDivName);
                this.columnStockGoodsCd = new global::System.Data.DataColumn("StockGoodsCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockGoodsCd);
                this.columnStockGoodsCdName = new global::System.Data.DataColumn("StockGoodsCdName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockGoodsCdName);
                this.columnAccPayDivCd = new global::System.Data.DataColumn("AccPayDivCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccPayDivCd);
                this.columnAccPayDivCdName = new global::System.Data.DataColumn("AccPayDivCdName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccPayDivCdName);
                this.columnInputDay = new global::System.Data.DataColumn("InputDay", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputDay);
                this.columnInputDayString = new global::System.Data.DataColumn("InputDayString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputDayString);
                this.columnStockDate = new global::System.Data.DataColumn("StockDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockDate);
                this.columnStockDateString = new global::System.Data.DataColumn("StockDateString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockDateString);
                this.columnStockTotalPrice = new global::System.Data.DataColumn("StockTotalPrice", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTotalPrice);
                this.columnStockSubttlPrice = new global::System.Data.DataColumn("StockSubttlPrice", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockSubttlPrice);
                this.columnStockPriceConsTax = new global::System.Data.DataColumn("StockPriceConsTax", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockPriceConsTax);
                this.columnPartySaleSlipNum = new global::System.Data.DataColumn("PartySaleSlipNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartySaleSlipNum);
                this.columnSupplierSlipNote1 = new global::System.Data.DataColumn("SupplierSlipNote1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipNote1);
                this.columnSupplierSlipNote2 = new global::System.Data.DataColumn("SupplierSlipNote2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipNote2);
                this.columnSupplierSlipNoStart = new global::System.Data.DataColumn("SupplierSlipNoStart", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipNoStart);
                this.columnSupplierSlipNoEnd = new global::System.Data.DataColumn("SupplierSlipNoEnd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipNoEnd);
                this.columnUoeRemark1 = new global::System.Data.DataColumn("UoeRemark1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUoeRemark1);
                this.columnPayeeCode = new global::System.Data.DataColumn("PayeeCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayeeCode);
                this.columnPayeeSnm = new global::System.Data.DataColumn("PayeeSnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayeeSnm);
                this.columnSuppCTaxLayCd = new global::System.Data.DataColumn("SuppCTaxLayCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuppCTaxLayCd);
                this.columnSubSectionName = new global::System.Data.DataColumn("SubSectionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubSectionName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStockRowNo}, true));
                this.columnStockRowNo.AllowDBNull = false;
                this.columnStockRowNo.Unique = true;
                this.columnStockRowNo.Caption = "No.";
                this.columnEnterpriseCode.Caption = "企業コード";
                this.columnSectionCode.Caption = "拠点コード";
                this.columnSectionName.Caption = "拠点名";
                this.columnSupplierSlipNo.Caption = "仕入先SEQ番号";
                this.columnStockAddUpADate.Caption = "計上日";
                this.columnStockAddUpADateString.Caption = "計上日";
                this.columnStockAddUpADateString.DefaultValue = ((string)(""));
                this.columnArrivalGoodsDay.Caption = "入荷日";
                this.columnArrivalGoodsDayString.Caption = "入荷日";
                this.columnArrivalGoodsDayString.DefaultValue = ((string)(""));
                this.columnStockAgentCode.Caption = "担当者コード";
                this.columnStockAgentName.Caption = "担当者名";
                this.columnCustomerCode.Caption = "仕入先コード";
                this.columnCustomerCode.DefaultValue = ((int)(0));
                this.columnCustomerName.Caption = "仕入先名";
                this.columnSupplierFomal.Caption = "伝票種別";
                this.columnSupplierFomal.DefaultValue = ((int)(0));
                this.columnSupplierFomalName.Caption = "伝票種別";
                this.columnSupplierSlipCd.Caption = "伝票区分";
                this.columnSupplierSlipCd.DefaultValue = ((int)(0));
                this.columnSupplierSlipCdName.Caption = "伝票区分";
                this.columnDebitNoteDiv.Caption = "赤伝区分";
                this.columnDebitNoteDiv.DefaultValue = ((int)(0));
                this.columnDebitNoteDivName.Caption = "赤伝区分";
                this.columnStockGoodsCd.Caption = "商品区分";
                this.columnStockGoodsCd.DefaultValue = ((int)(0));
                this.columnStockGoodsCdName.Caption = "商品区分";
                this.columnAccPayDivCd.Caption = "買掛区分";
                this.columnAccPayDivCd.DefaultValue = ((int)(0));
                this.columnAccPayDivCdName.Caption = "買掛区分";
                this.columnInputDay.Caption = "入力日";
                this.columnInputDayString.Caption = "入力日";
                this.columnInputDayString.DefaultValue = ((string)(""));
                this.columnStockDate.Caption = "仕入日";
                this.columnStockDateString.Caption = "仕入日";
                this.columnStockDateString.DefaultValue = ((string)(""));
                this.columnStockTotalPrice.Caption = "仕入金額（税込）";
                this.columnStockSubttlPrice.Caption = "仕入金額（税抜）";
                this.columnStockPriceConsTax.Caption = "消費税";
                this.columnPartySaleSlipNum.Caption = "伝票番号";
                this.columnSupplierSlipNote1.Caption = "伝票備考1";
                this.columnSupplierSlipNote2.Caption = "伝票備考2";
                this.columnSupplierSlipNoStart.Caption = "仕入SEQ番号";
                this.columnSupplierSlipNoEnd.Caption = "仕入SEQ番号終了";
                this.columnUoeRemark1.Caption = "リマーク１";
                this.columnPayeeCode.Caption = "支払先コード";
                this.columnPayeeSnm.Caption = "支払先名";
                this.columnSubSectionName.Caption = "部門名";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSlipRow NewStockSlipRow() {
                return ((StockSlipRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockSlipRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockSlipRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockSlipRowChanged != null)) {
                    this.StockSlipRowChanged(this, new StockSlipRowChangeEvent(((StockSlipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockSlipRowChanging != null)) {
                    this.StockSlipRowChanging(this, new StockSlipRowChangeEvent(((StockSlipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockSlipRowDeleted != null)) {
                    this.StockSlipRowDeleted(this, new StockSlipRowChangeEvent(((StockSlipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockSlipRowDeleting != null)) {
                    this.StockSlipRowDeleting(this, new StockSlipRowChangeEvent(((StockSlipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockSlipRow(StockSlipRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockDataSet ds = new StockDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockSlipDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockDetailDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStockDetailRowNo;
            
            private global::System.Data.DataColumn columnSupplierFormal;
            
            private global::System.Data.DataColumn columnSupplierSlipNo;
            
            private global::System.Data.DataColumn columnStockRowNo;
            
            private global::System.Data.DataColumn columnGoodsCode;
            
            private global::System.Data.DataColumn columnGoodsName;
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            private global::System.Data.DataColumn columnWarehouseName;
            
            private global::System.Data.DataColumn columnStockUnitPriceDisplay;
            
            private global::System.Data.DataColumn columnStockUnitPrice;
            
            private global::System.Data.DataColumn columnStockCount;
            
            private global::System.Data.DataColumn columnStockPriceDisplay;
            
            private global::System.Data.DataColumn columnStockPrice;
            
            private global::System.Data.DataColumn columnStockPriceConsTax;
            
            private global::System.Data.DataColumn columnTaxationCode;
            
            private global::System.Data.DataColumn columnStockDtiSlipNote1;
            
            private global::System.Data.DataColumn columnGoodsMakerCd;
            
            private global::System.Data.DataColumn columnMakerName;
            
            private global::System.Data.DataColumn columnOrderCnt;
            
            private global::System.Data.DataColumn columnArrivalCnt;
            
            private global::System.Data.DataColumn columnArrivalRemainCnt;
            
            private global::System.Data.DataColumn columnSupplierCd;
            
            private global::System.Data.DataColumn columnSupplierName;
            
            private global::System.Data.DataColumn columnBLGoodsCode;
            
            private global::System.Data.DataColumn columnListPriceTaxExcFl;
            
            private global::System.Data.DataColumn columnSuppCTaxLayCd;
            
            private global::System.Data.DataColumn columnBLGoodsCodeString;
            
            private global::System.Data.DataColumn columnWarehouseShelfNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDetailDataTable() {
                this.TableName = "StockDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockDetailRowNoColumn {
                get {
                    return this.columnStockDetailRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierFormalColumn {
                get {
                    return this.columnSupplierFormal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierSlipNoColumn {
                get {
                    return this.columnSupplierSlipNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockRowNoColumn {
                get {
                    return this.columnStockRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsCodeColumn {
                get {
                    return this.columnGoodsCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNameColumn {
                get {
                    return this.columnGoodsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseNameColumn {
                get {
                    return this.columnWarehouseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockUnitPriceDisplayColumn {
                get {
                    return this.columnStockUnitPriceDisplay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockUnitPriceColumn {
                get {
                    return this.columnStockUnitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockCountColumn {
                get {
                    return this.columnStockCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockPriceDisplayColumn {
                get {
                    return this.columnStockPriceDisplay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockPriceColumn {
                get {
                    return this.columnStockPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockPriceConsTaxColumn {
                get {
                    return this.columnStockPriceConsTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxationCodeColumn {
                get {
                    return this.columnTaxationCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockDtiSlipNote1Column {
                get {
                    return this.columnStockDtiSlipNote1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsMakerCdColumn {
                get {
                    return this.columnGoodsMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakerNameColumn {
                get {
                    return this.columnMakerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderCntColumn {
                get {
                    return this.columnOrderCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArrivalCntColumn {
                get {
                    return this.columnArrivalCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArrivalRemainCntColumn {
                get {
                    return this.columnArrivalRemainCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierCdColumn {
                get {
                    return this.columnSupplierCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierNameColumn {
                get {
                    return this.columnSupplierName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLGoodsCodeColumn {
                get {
                    return this.columnBLGoodsCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ListPriceTaxExcFlColumn {
                get {
                    return this.columnListPriceTaxExcFl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SuppCTaxLayCdColumn {
                get {
                    return this.columnSuppCTaxLayCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLGoodsCodeStringColumn {
                get {
                    return this.columnBLGoodsCodeString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseShelfNoColumn {
                get {
                    return this.columnWarehouseShelfNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDetailRow this[int index] {
                get {
                    return ((StockDetailRow)(this.Rows[index]));
                }
            }
            
            public event StockDetailRowChangeEventHandler StockDetailRowChanging;
            
            public event StockDetailRowChangeEventHandler StockDetailRowChanged;
            
            public event StockDetailRowChangeEventHandler StockDetailRowDeleting;
            
            public event StockDetailRowChangeEventHandler StockDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockDetailRow(StockDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDetailRow AddStockDetailRow(
                        int StockDetailRowNo, 
                        int SupplierFormal, 
                        int SupplierSlipNo, 
                        int StockRowNo, 
                        string GoodsCode, 
                        string GoodsName, 
                        string WarehouseCode, 
                        string WarehouseName, 
                        double StockUnitPriceDisplay, 
                        double StockUnitPrice, 
                        double StockCount, 
                        long StockPriceDisplay, 
                        long StockPrice, 
                        long StockPriceConsTax, 
                        string TaxationCode, 
                        string StockDtiSlipNote1, 
                        int GoodsMakerCd, 
                        string MakerName, 
                        double OrderCnt, 
                        double ArrivalCnt, 
                        double ArrivalRemainCnt, 
                        int SupplierCd, 
                        string SupplierName, 
                        int BLGoodsCode, 
                        double ListPriceTaxExcFl, 
                        int SuppCTaxLayCd, 
                        string BLGoodsCodeString, 
                        string WarehouseShelfNo) {
                StockDetailRow rowStockDetailRow = ((StockDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StockDetailRowNo,
                        SupplierFormal,
                        SupplierSlipNo,
                        StockRowNo,
                        GoodsCode,
                        GoodsName,
                        WarehouseCode,
                        WarehouseName,
                        StockUnitPriceDisplay,
                        StockUnitPrice,
                        StockCount,
                        StockPriceDisplay,
                        StockPrice,
                        StockPriceConsTax,
                        TaxationCode,
                        StockDtiSlipNote1,
                        GoodsMakerCd,
                        MakerName,
                        OrderCnt,
                        ArrivalCnt,
                        ArrivalRemainCnt,
                        SupplierCd,
                        SupplierName,
                        BLGoodsCode,
                        ListPriceTaxExcFl,
                        SuppCTaxLayCd,
                        BLGoodsCodeString,
                        WarehouseShelfNo};
                rowStockDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockDetailRow);
                return rowStockDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDetailRow FindByStockDetailRowNo(int StockDetailRowNo) {
                return ((StockDetailRow)(this.Rows.Find(new object[] {
                            StockDetailRowNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockDetailDataTable cln = ((StockDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStockDetailRowNo = base.Columns["StockDetailRowNo"];
                this.columnSupplierFormal = base.Columns["SupplierFormal"];
                this.columnSupplierSlipNo = base.Columns["SupplierSlipNo"];
                this.columnStockRowNo = base.Columns["StockRowNo"];
                this.columnGoodsCode = base.Columns["GoodsCode"];
                this.columnGoodsName = base.Columns["GoodsName"];
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
                this.columnWarehouseName = base.Columns["WarehouseName"];
                this.columnStockUnitPriceDisplay = base.Columns["StockUnitPriceDisplay"];
                this.columnStockUnitPrice = base.Columns["StockUnitPrice"];
                this.columnStockCount = base.Columns["StockCount"];
                this.columnStockPriceDisplay = base.Columns["StockPriceDisplay"];
                this.columnStockPrice = base.Columns["StockPrice"];
                this.columnStockPriceConsTax = base.Columns["StockPriceConsTax"];
                this.columnTaxationCode = base.Columns["TaxationCode"];
                this.columnStockDtiSlipNote1 = base.Columns["StockDtiSlipNote1"];
                this.columnGoodsMakerCd = base.Columns["GoodsMakerCd"];
                this.columnMakerName = base.Columns["MakerName"];
                this.columnOrderCnt = base.Columns["OrderCnt"];
                this.columnArrivalCnt = base.Columns["ArrivalCnt"];
                this.columnArrivalRemainCnt = base.Columns["ArrivalRemainCnt"];
                this.columnSupplierCd = base.Columns["SupplierCd"];
                this.columnSupplierName = base.Columns["SupplierName"];
                this.columnBLGoodsCode = base.Columns["BLGoodsCode"];
                this.columnListPriceTaxExcFl = base.Columns["ListPriceTaxExcFl"];
                this.columnSuppCTaxLayCd = base.Columns["SuppCTaxLayCd"];
                this.columnBLGoodsCodeString = base.Columns["BLGoodsCodeString"];
                this.columnWarehouseShelfNo = base.Columns["WarehouseShelfNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStockDetailRowNo = new global::System.Data.DataColumn("StockDetailRowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockDetailRowNo);
                this.columnSupplierFormal = new global::System.Data.DataColumn("SupplierFormal", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierFormal);
                this.columnSupplierSlipNo = new global::System.Data.DataColumn("SupplierSlipNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierSlipNo);
                this.columnStockRowNo = new global::System.Data.DataColumn("StockRowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockRowNo);
                this.columnGoodsCode = new global::System.Data.DataColumn("GoodsCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsCode);
                this.columnGoodsName = new global::System.Data.DataColumn("GoodsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsName);
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.columnWarehouseName = new global::System.Data.DataColumn("WarehouseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseName);
                this.columnStockUnitPriceDisplay = new global::System.Data.DataColumn("StockUnitPriceDisplay", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockUnitPriceDisplay);
                this.columnStockUnitPrice = new global::System.Data.DataColumn("StockUnitPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockUnitPrice);
                this.columnStockCount = new global::System.Data.DataColumn("StockCount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockCount);
                this.columnStockPriceDisplay = new global::System.Data.DataColumn("StockPriceDisplay", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockPriceDisplay);
                this.columnStockPrice = new global::System.Data.DataColumn("StockPrice", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockPrice);
                this.columnStockPriceConsTax = new global::System.Data.DataColumn("StockPriceConsTax", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockPriceConsTax);
                this.columnTaxationCode = new global::System.Data.DataColumn("TaxationCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxationCode);
                this.columnStockDtiSlipNote1 = new global::System.Data.DataColumn("StockDtiSlipNote1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockDtiSlipNote1);
                this.columnGoodsMakerCd = new global::System.Data.DataColumn("GoodsMakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsMakerCd);
                this.columnMakerName = new global::System.Data.DataColumn("MakerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMakerName);
                this.columnOrderCnt = new global::System.Data.DataColumn("OrderCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderCnt);
                this.columnArrivalCnt = new global::System.Data.DataColumn("ArrivalCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArrivalCnt);
                this.columnArrivalRemainCnt = new global::System.Data.DataColumn("ArrivalRemainCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArrivalRemainCnt);
                this.columnSupplierCd = new global::System.Data.DataColumn("SupplierCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierCd);
                this.columnSupplierName = new global::System.Data.DataColumn("SupplierName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierName);
                this.columnBLGoodsCode = new global::System.Data.DataColumn("BLGoodsCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLGoodsCode);
                this.columnListPriceTaxExcFl = new global::System.Data.DataColumn("ListPriceTaxExcFl", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnListPriceTaxExcFl);
                this.columnSuppCTaxLayCd = new global::System.Data.DataColumn("SuppCTaxLayCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuppCTaxLayCd);
                this.columnBLGoodsCodeString = new global::System.Data.DataColumn("BLGoodsCodeString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLGoodsCodeString);
                this.columnWarehouseShelfNo = new global::System.Data.DataColumn("WarehouseShelfNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseShelfNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint11", new global::System.Data.DataColumn[] {
                                this.columnStockDetailRowNo}, true));
                this.columnStockDetailRowNo.AllowDBNull = false;
                this.columnStockDetailRowNo.Unique = true;
                this.columnStockDetailRowNo.Caption = "No.";
                this.columnSupplierFormal.Caption = "仕入形式";
                this.columnSupplierFormal.DefaultValue = ((int)(0));
                this.columnSupplierSlipNo.Caption = "伝票番号";
                this.columnSupplierSlipNo.DefaultValue = ((int)(0));
                this.columnStockRowNo.Caption = "行番号";
                this.columnStockRowNo.DefaultValue = ((int)(0));
                this.columnGoodsCode.Caption = "品番";
                this.columnGoodsName.Caption = "品名";
                this.columnWarehouseCode.Caption = "倉庫コード";
                this.columnWarehouseName.Caption = "倉庫名";
                this.columnStockUnitPriceDisplay.Caption = "原単価";
                this.columnStockUnitPrice.Caption = "単価";
                this.columnStockCount.Caption = "仕入数";
                this.columnStockPriceDisplay.Caption = "仕入金額";
                this.columnStockPrice.Caption = "仕入金額";
                this.columnStockPrice.DefaultValue = ((long)(0));
                this.columnStockPriceConsTax.Caption = "消費税";
                this.columnTaxationCode.Caption = "税区分";
                this.columnStockDtiSlipNote1.Caption = "明細備考";
                this.columnGoodsMakerCd.Caption = "商品メーカー";
                this.columnGoodsMakerCd.DefaultValue = ((int)(0));
                this.columnMakerName.Caption = "メーカー";
                this.columnOrderCnt.Caption = "数量";
                this.columnOrderCnt.DefaultValue = ((double)(0));
                this.columnArrivalCnt.Caption = "入荷数";
                this.columnArrivalCnt.DefaultValue = ((double)(0));
                this.columnArrivalRemainCnt.Caption = "入荷残数";
                this.columnArrivalRemainCnt.DefaultValue = ((double)(0));
                this.columnSupplierCd.Caption = "仕入先コード";
                this.columnSupplierName.Caption = "仕入先名";
                this.columnBLGoodsCode.Caption = "BLｺｰﾄﾞ";
                this.columnListPriceTaxExcFl.Caption = "標準価格";
                this.columnBLGoodsCodeString.Caption = "BLｺｰﾄﾞ";
                this.columnWarehouseShelfNo.Caption = "棚番";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDetailRow NewStockDetailRow() {
                return ((StockDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockDetailRowChanged != null)) {
                    this.StockDetailRowChanged(this, new StockDetailRowChangeEvent(((StockDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockDetailRowChanging != null)) {
                    this.StockDetailRowChanging(this, new StockDetailRowChangeEvent(((StockDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockDetailRowDeleted != null)) {
                    this.StockDetailRowDeleted(this, new StockDetailRowChangeEvent(((StockDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockDetailRowDeleting != null)) {
                    this.StockDetailRowDeleting(this, new StockDetailRowChangeEvent(((StockDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockDetailRow(StockDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockDataSet ds = new StockDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockSlipRow : global::System.Data.DataRow {
            
            private StockSlipDataTable tableStockSlip;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockSlipRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStockSlip = ((StockSlipDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StockRowNo {
                get {
                    return ((int)(this[this.tableStockSlip.StockRowNoColumn]));
                }
                set {
                    this[this.tableStockSlip.StockRowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnterpriseCode {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.EnterpriseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'EnterpriseCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.EnterpriseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionCode {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.SectionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SectionCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionName {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.SectionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SectionName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SectionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierSlipNo {
                get {
                    try {
                        return ((int)(this[this.tableStockSlip.SupplierSlipNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SupplierSlipNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SupplierSlipNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StockAddUpADate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStockSlip.StockAddUpADateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'StockAddUpADate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.StockAddUpADateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockAddUpADateString {
                get {
                    if (this.IsStockAddUpADateStringNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableStockSlip.StockAddUpADateStringColumn]));
                    }
                }
                set {
                    this[this.tableStockSlip.StockAddUpADateStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ArrivalGoodsDay {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStockSlip.ArrivalGoodsDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'ArrivalGoodsDay\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.ArrivalGoodsDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArrivalGoodsDayString {
                get {
                    if (this.IsArrivalGoodsDayStringNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableStockSlip.ArrivalGoodsDayStringColumn]));
                    }
                }
                set {
                    this[this.tableStockSlip.ArrivalGoodsDayStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockAgentCode {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.StockAgentCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'StockAgentCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.StockAgentCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockAgentName {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.StockAgentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'StockAgentName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.StockAgentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerCode {
                get {
                    try {
                        return ((int)(this[this.tableStockSlip.CustomerCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'CustomerCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.CustomerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'CustomerName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierFomal {
                get {
                    try {
                        return ((int)(this[this.tableStockSlip.SupplierFomalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SupplierFomal\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SupplierFomalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupplierFomalName {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.SupplierFomalNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SupplierFomalName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SupplierFomalNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierSlipCd {
                get {
                    try {
                        return ((int)(this[this.tableStockSlip.SupplierSlipCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SupplierSlipCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SupplierSlipCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupplierSlipCdName {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.SupplierSlipCdNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SupplierSlipCdName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SupplierSlipCdNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DebitNoteDiv {
                get {
                    try {
                        return ((int)(this[this.tableStockSlip.DebitNoteDivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'DebitNoteDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.DebitNoteDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DebitNoteDivName {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.DebitNoteDivNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'DebitNoteDivName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.DebitNoteDivNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StockGoodsCd {
                get {
                    try {
                        return ((int)(this[this.tableStockSlip.StockGoodsCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'StockGoodsCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.StockGoodsCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockGoodsCdName {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.StockGoodsCdNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'StockGoodsCdName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.StockGoodsCdNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AccPayDivCd {
                get {
                    try {
                        return ((int)(this[this.tableStockSlip.AccPayDivCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'AccPayDivCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.AccPayDivCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccPayDivCdName {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.AccPayDivCdNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'AccPayDivCdName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.AccPayDivCdNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InputDay {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStockSlip.InputDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'InputDay\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.InputDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InputDayString {
                get {
                    if (this.IsInputDayStringNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableStockSlip.InputDayStringColumn]));
                    }
                }
                set {
                    this[this.tableStockSlip.InputDayStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StockDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStockSlip.StockDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'StockDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.StockDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockDateString {
                get {
                    if (this.IsStockDateStringNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableStockSlip.StockDateStringColumn]));
                    }
                }
                set {
                    this[this.tableStockSlip.StockDateStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockTotalPrice {
                get {
                    try {
                        return ((long)(this[this.tableStockSlip.StockTotalPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'StockTotalPrice\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.StockTotalPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockSubttlPrice {
                get {
                    try {
                        return ((long)(this[this.tableStockSlip.StockSubttlPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'StockSubttlPrice\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.StockSubttlPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockPriceConsTax {
                get {
                    try {
                        return ((long)(this[this.tableStockSlip.StockPriceConsTaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'StockPriceConsTax\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.StockPriceConsTaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartySaleSlipNum {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.PartySaleSlipNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'PartySaleSlipNum\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.PartySaleSlipNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupplierSlipNote1 {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.SupplierSlipNote1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SupplierSlipNote1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SupplierSlipNote1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupplierSlipNote2 {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.SupplierSlipNote2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SupplierSlipNote2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SupplierSlipNote2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierSlipNoStart {
                get {
                    try {
                        return ((int)(this[this.tableStockSlip.SupplierSlipNoStartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SupplierSlipNoStart\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SupplierSlipNoStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierSlipNoEnd {
                get {
                    try {
                        return ((int)(this[this.tableStockSlip.SupplierSlipNoEndColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SupplierSlipNoEnd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SupplierSlipNoEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UoeRemark1 {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.UoeRemark1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'UoeRemark1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.UoeRemark1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PayeeCode {
                get {
                    try {
                        return ((int)(this[this.tableStockSlip.PayeeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'PayeeCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.PayeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayeeSnm {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.PayeeSnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'PayeeSnm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.PayeeSnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SuppCTaxLayCd {
                get {
                    try {
                        return ((int)(this[this.tableStockSlip.SuppCTaxLayCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SuppCTaxLayCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SuppCTaxLayCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubSectionName {
                get {
                    try {
                        return ((string)(this[this.tableStockSlip.SubSectionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockSlip\' にある列 \'SubSectionName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockSlip.SubSectionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnterpriseCodeNull() {
                return this.IsNull(this.tableStockSlip.EnterpriseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnterpriseCodeNull() {
                this[this.tableStockSlip.EnterpriseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionCodeNull() {
                return this.IsNull(this.tableStockSlip.SectionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionCodeNull() {
                this[this.tableStockSlip.SectionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionNameNull() {
                return this.IsNull(this.tableStockSlip.SectionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionNameNull() {
                this[this.tableStockSlip.SectionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipNoNull() {
                return this.IsNull(this.tableStockSlip.SupplierSlipNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipNoNull() {
                this[this.tableStockSlip.SupplierSlipNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockAddUpADateNull() {
                return this.IsNull(this.tableStockSlip.StockAddUpADateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockAddUpADateNull() {
                this[this.tableStockSlip.StockAddUpADateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockAddUpADateStringNull() {
                return this.IsNull(this.tableStockSlip.StockAddUpADateStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockAddUpADateStringNull() {
                this[this.tableStockSlip.StockAddUpADateStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArrivalGoodsDayNull() {
                return this.IsNull(this.tableStockSlip.ArrivalGoodsDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArrivalGoodsDayNull() {
                this[this.tableStockSlip.ArrivalGoodsDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArrivalGoodsDayStringNull() {
                return this.IsNull(this.tableStockSlip.ArrivalGoodsDayStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArrivalGoodsDayStringNull() {
                this[this.tableStockSlip.ArrivalGoodsDayStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockAgentCodeNull() {
                return this.IsNull(this.tableStockSlip.StockAgentCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockAgentCodeNull() {
                this[this.tableStockSlip.StockAgentCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockAgentNameNull() {
                return this.IsNull(this.tableStockSlip.StockAgentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockAgentNameNull() {
                this[this.tableStockSlip.StockAgentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerCodeNull() {
                return this.IsNull(this.tableStockSlip.CustomerCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerCodeNull() {
                this[this.tableStockSlip.CustomerCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableStockSlip.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableStockSlip.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierFomalNull() {
                return this.IsNull(this.tableStockSlip.SupplierFomalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierFomalNull() {
                this[this.tableStockSlip.SupplierFomalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierFomalNameNull() {
                return this.IsNull(this.tableStockSlip.SupplierFomalNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierFomalNameNull() {
                this[this.tableStockSlip.SupplierFomalNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipCdNull() {
                return this.IsNull(this.tableStockSlip.SupplierSlipCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipCdNull() {
                this[this.tableStockSlip.SupplierSlipCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipCdNameNull() {
                return this.IsNull(this.tableStockSlip.SupplierSlipCdNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipCdNameNull() {
                this[this.tableStockSlip.SupplierSlipCdNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebitNoteDivNull() {
                return this.IsNull(this.tableStockSlip.DebitNoteDivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebitNoteDivNull() {
                this[this.tableStockSlip.DebitNoteDivColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebitNoteDivNameNull() {
                return this.IsNull(this.tableStockSlip.DebitNoteDivNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebitNoteDivNameNull() {
                this[this.tableStockSlip.DebitNoteDivNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockGoodsCdNull() {
                return this.IsNull(this.tableStockSlip.StockGoodsCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockGoodsCdNull() {
                this[this.tableStockSlip.StockGoodsCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockGoodsCdNameNull() {
                return this.IsNull(this.tableStockSlip.StockGoodsCdNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockGoodsCdNameNull() {
                this[this.tableStockSlip.StockGoodsCdNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccPayDivCdNull() {
                return this.IsNull(this.tableStockSlip.AccPayDivCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccPayDivCdNull() {
                this[this.tableStockSlip.AccPayDivCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccPayDivCdNameNull() {
                return this.IsNull(this.tableStockSlip.AccPayDivCdNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccPayDivCdNameNull() {
                this[this.tableStockSlip.AccPayDivCdNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInputDayNull() {
                return this.IsNull(this.tableStockSlip.InputDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInputDayNull() {
                this[this.tableStockSlip.InputDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInputDayStringNull() {
                return this.IsNull(this.tableStockSlip.InputDayStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInputDayStringNull() {
                this[this.tableStockSlip.InputDayStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockDateNull() {
                return this.IsNull(this.tableStockSlip.StockDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockDateNull() {
                this[this.tableStockSlip.StockDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockDateStringNull() {
                return this.IsNull(this.tableStockSlip.StockDateStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockDateStringNull() {
                this[this.tableStockSlip.StockDateStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockTotalPriceNull() {
                return this.IsNull(this.tableStockSlip.StockTotalPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockTotalPriceNull() {
                this[this.tableStockSlip.StockTotalPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockSubttlPriceNull() {
                return this.IsNull(this.tableStockSlip.StockSubttlPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockSubttlPriceNull() {
                this[this.tableStockSlip.StockSubttlPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockPriceConsTaxNull() {
                return this.IsNull(this.tableStockSlip.StockPriceConsTaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockPriceConsTaxNull() {
                this[this.tableStockSlip.StockPriceConsTaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartySaleSlipNumNull() {
                return this.IsNull(this.tableStockSlip.PartySaleSlipNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPartySaleSlipNumNull() {
                this[this.tableStockSlip.PartySaleSlipNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipNote1Null() {
                return this.IsNull(this.tableStockSlip.SupplierSlipNote1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipNote1Null() {
                this[this.tableStockSlip.SupplierSlipNote1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipNote2Null() {
                return this.IsNull(this.tableStockSlip.SupplierSlipNote2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipNote2Null() {
                this[this.tableStockSlip.SupplierSlipNote2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipNoStartNull() {
                return this.IsNull(this.tableStockSlip.SupplierSlipNoStartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipNoStartNull() {
                this[this.tableStockSlip.SupplierSlipNoStartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipNoEndNull() {
                return this.IsNull(this.tableStockSlip.SupplierSlipNoEndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipNoEndNull() {
                this[this.tableStockSlip.SupplierSlipNoEndColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUoeRemark1Null() {
                return this.IsNull(this.tableStockSlip.UoeRemark1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUoeRemark1Null() {
                this[this.tableStockSlip.UoeRemark1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayeeCodeNull() {
                return this.IsNull(this.tableStockSlip.PayeeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayeeCodeNull() {
                this[this.tableStockSlip.PayeeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayeeSnmNull() {
                return this.IsNull(this.tableStockSlip.PayeeSnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayeeSnmNull() {
                this[this.tableStockSlip.PayeeSnmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSuppCTaxLayCdNull() {
                return this.IsNull(this.tableStockSlip.SuppCTaxLayCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSuppCTaxLayCdNull() {
                this[this.tableStockSlip.SuppCTaxLayCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubSectionNameNull() {
                return this.IsNull(this.tableStockSlip.SubSectionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubSectionNameNull() {
                this[this.tableStockSlip.SubSectionNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockDetailRow : global::System.Data.DataRow {
            
            private StockDetailDataTable tableStockDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStockDetail = ((StockDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StockDetailRowNo {
                get {
                    return ((int)(this[this.tableStockDetail.StockDetailRowNoColumn]));
                }
                set {
                    this[this.tableStockDetail.StockDetailRowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierFormal {
                get {
                    try {
                        return ((int)(this[this.tableStockDetail.SupplierFormalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'SupplierFormal\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.SupplierFormalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierSlipNo {
                get {
                    try {
                        return ((int)(this[this.tableStockDetail.SupplierSlipNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'SupplierSlipNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.SupplierSlipNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StockRowNo {
                get {
                    try {
                        return ((int)(this[this.tableStockDetail.StockRowNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'StockRowNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.StockRowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsCode {
                get {
                    try {
                        return ((string)(this[this.tableStockDetail.GoodsCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'GoodsCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.GoodsCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsName {
                get {
                    try {
                        return ((string)(this[this.tableStockDetail.GoodsNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'GoodsName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.GoodsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    try {
                        return ((string)(this[this.tableStockDetail.WarehouseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'WarehouseCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseName {
                get {
                    try {
                        return ((string)(this[this.tableStockDetail.WarehouseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'WarehouseName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.WarehouseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockUnitPriceDisplay {
                get {
                    try {
                        return ((double)(this[this.tableStockDetail.StockUnitPriceDisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'StockUnitPriceDisplay\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.StockUnitPriceDisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockUnitPrice {
                get {
                    try {
                        return ((double)(this[this.tableStockDetail.StockUnitPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'StockUnitPrice\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.StockUnitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockCount {
                get {
                    try {
                        return ((double)(this[this.tableStockDetail.StockCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'StockCount\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.StockCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockPriceDisplay {
                get {
                    try {
                        return ((long)(this[this.tableStockDetail.StockPriceDisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'StockPriceDisplay\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.StockPriceDisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockPrice {
                get {
                    try {
                        return ((long)(this[this.tableStockDetail.StockPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'StockPrice\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.StockPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StockPriceConsTax {
                get {
                    try {
                        return ((long)(this[this.tableStockDetail.StockPriceConsTaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'StockPriceConsTax\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.StockPriceConsTaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxationCode {
                get {
                    try {
                        return ((string)(this[this.tableStockDetail.TaxationCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'TaxationCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.TaxationCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockDtiSlipNote1 {
                get {
                    try {
                        return ((string)(this[this.tableStockDetail.StockDtiSlipNote1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'StockDtiSlipNote1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.StockDtiSlipNote1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GoodsMakerCd {
                get {
                    try {
                        return ((int)(this[this.tableStockDetail.GoodsMakerCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'GoodsMakerCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.GoodsMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MakerName {
                get {
                    try {
                        return ((string)(this[this.tableStockDetail.MakerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'MakerName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.MakerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OrderCnt {
                get {
                    try {
                        return ((double)(this[this.tableStockDetail.OrderCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'OrderCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.OrderCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ArrivalCnt {
                get {
                    try {
                        return ((double)(this[this.tableStockDetail.ArrivalCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'ArrivalCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.ArrivalCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ArrivalRemainCnt {
                get {
                    try {
                        return ((double)(this[this.tableStockDetail.ArrivalRemainCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'ArrivalRemainCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.ArrivalRemainCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierCd {
                get {
                    try {
                        return ((int)(this[this.tableStockDetail.SupplierCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'SupplierCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.SupplierCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupplierName {
                get {
                    try {
                        return ((string)(this[this.tableStockDetail.SupplierNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'SupplierName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.SupplierNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BLGoodsCode {
                get {
                    try {
                        return ((int)(this[this.tableStockDetail.BLGoodsCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'BLGoodsCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.BLGoodsCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ListPriceTaxExcFl {
                get {
                    try {
                        return ((double)(this[this.tableStockDetail.ListPriceTaxExcFlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'ListPriceTaxExcFl\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.ListPriceTaxExcFlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SuppCTaxLayCd {
                get {
                    try {
                        return ((int)(this[this.tableStockDetail.SuppCTaxLayCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'SuppCTaxLayCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.SuppCTaxLayCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLGoodsCodeString {
                get {
                    try {
                        return ((string)(this[this.tableStockDetail.BLGoodsCodeStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'BLGoodsCodeString\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.BLGoodsCodeStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseShelfNo {
                get {
                    try {
                        return ((string)(this[this.tableStockDetail.WarehouseShelfNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'StockDetail\' にある列 \'WarehouseShelfNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStockDetail.WarehouseShelfNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierFormalNull() {
                return this.IsNull(this.tableStockDetail.SupplierFormalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierFormalNull() {
                this[this.tableStockDetail.SupplierFormalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierSlipNoNull() {
                return this.IsNull(this.tableStockDetail.SupplierSlipNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierSlipNoNull() {
                this[this.tableStockDetail.SupplierSlipNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockRowNoNull() {
                return this.IsNull(this.tableStockDetail.StockRowNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockRowNoNull() {
                this[this.tableStockDetail.StockRowNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsCodeNull() {
                return this.IsNull(this.tableStockDetail.GoodsCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsCodeNull() {
                this[this.tableStockDetail.GoodsCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsNameNull() {
                return this.IsNull(this.tableStockDetail.GoodsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsNameNull() {
                this[this.tableStockDetail.GoodsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseCodeNull() {
                return this.IsNull(this.tableStockDetail.WarehouseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseCodeNull() {
                this[this.tableStockDetail.WarehouseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNameNull() {
                return this.IsNull(this.tableStockDetail.WarehouseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNameNull() {
                this[this.tableStockDetail.WarehouseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockUnitPriceDisplayNull() {
                return this.IsNull(this.tableStockDetail.StockUnitPriceDisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockUnitPriceDisplayNull() {
                this[this.tableStockDetail.StockUnitPriceDisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockUnitPriceNull() {
                return this.IsNull(this.tableStockDetail.StockUnitPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockUnitPriceNull() {
                this[this.tableStockDetail.StockUnitPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockCountNull() {
                return this.IsNull(this.tableStockDetail.StockCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockCountNull() {
                this[this.tableStockDetail.StockCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockPriceDisplayNull() {
                return this.IsNull(this.tableStockDetail.StockPriceDisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockPriceDisplayNull() {
                this[this.tableStockDetail.StockPriceDisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockPriceNull() {
                return this.IsNull(this.tableStockDetail.StockPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockPriceNull() {
                this[this.tableStockDetail.StockPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockPriceConsTaxNull() {
                return this.IsNull(this.tableStockDetail.StockPriceConsTaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockPriceConsTaxNull() {
                this[this.tableStockDetail.StockPriceConsTaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxationCodeNull() {
                return this.IsNull(this.tableStockDetail.TaxationCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxationCodeNull() {
                this[this.tableStockDetail.TaxationCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockDtiSlipNote1Null() {
                return this.IsNull(this.tableStockDetail.StockDtiSlipNote1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockDtiSlipNote1Null() {
                this[this.tableStockDetail.StockDtiSlipNote1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsMakerCdNull() {
                return this.IsNull(this.tableStockDetail.GoodsMakerCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsMakerCdNull() {
                this[this.tableStockDetail.GoodsMakerCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMakerNameNull() {
                return this.IsNull(this.tableStockDetail.MakerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMakerNameNull() {
                this[this.tableStockDetail.MakerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderCntNull() {
                return this.IsNull(this.tableStockDetail.OrderCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderCntNull() {
                this[this.tableStockDetail.OrderCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArrivalCntNull() {
                return this.IsNull(this.tableStockDetail.ArrivalCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArrivalCntNull() {
                this[this.tableStockDetail.ArrivalCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArrivalRemainCntNull() {
                return this.IsNull(this.tableStockDetail.ArrivalRemainCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArrivalRemainCntNull() {
                this[this.tableStockDetail.ArrivalRemainCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierCdNull() {
                return this.IsNull(this.tableStockDetail.SupplierCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierCdNull() {
                this[this.tableStockDetail.SupplierCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierNameNull() {
                return this.IsNull(this.tableStockDetail.SupplierNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierNameNull() {
                this[this.tableStockDetail.SupplierNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLGoodsCodeNull() {
                return this.IsNull(this.tableStockDetail.BLGoodsCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLGoodsCodeNull() {
                this[this.tableStockDetail.BLGoodsCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsListPriceTaxExcFlNull() {
                return this.IsNull(this.tableStockDetail.ListPriceTaxExcFlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetListPriceTaxExcFlNull() {
                this[this.tableStockDetail.ListPriceTaxExcFlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSuppCTaxLayCdNull() {
                return this.IsNull(this.tableStockDetail.SuppCTaxLayCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSuppCTaxLayCdNull() {
                this[this.tableStockDetail.SuppCTaxLayCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLGoodsCodeStringNull() {
                return this.IsNull(this.tableStockDetail.BLGoodsCodeStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLGoodsCodeStringNull() {
                this[this.tableStockDetail.BLGoodsCodeStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseShelfNoNull() {
                return this.IsNull(this.tableStockDetail.WarehouseShelfNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseShelfNoNull() {
                this[this.tableStockDetail.WarehouseShelfNoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockSlipRowChangeEvent : global::System.EventArgs {
            
            private StockSlipRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSlipRowChangeEvent(StockSlipRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockSlipRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockDetailRowChangeEvent : global::System.EventArgs {
            
            private StockDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDetailRowChangeEvent(StockDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591