//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3053
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Library.Windows.Forms {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SetParts")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    internal partial class SetParts : global::System.Data.DataSet {
        
        private GoodsSetDataTable tableGoodsSet;
        
        private SetMainDataTable tableSetMain;
        
        private StockDataTable tableStock;
        
        private global::System.Data.DataRelation relationSetMain_GoodsSet;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SetParts() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SetParts(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GoodsSet"] != null)) {
                    base.Tables.Add(new GoodsSetDataTable(ds.Tables["GoodsSet"]));
                }
                if ((ds.Tables["SetMain"] != null)) {
                    base.Tables.Add(new SetMainDataTable(ds.Tables["SetMain"]));
                }
                if ((ds.Tables["Stock"] != null)) {
                    base.Tables.Add(new StockDataTable(ds.Tables["Stock"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GoodsSetDataTable GoodsSet {
            get {
                return this.tableGoodsSet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SetMainDataTable SetMain {
            get {
                return this.tableSetMain;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockDataTable Stock {
            get {
                return this.tableStock;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SetParts cln = ((SetParts)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GoodsSet"] != null)) {
                    base.Tables.Add(new GoodsSetDataTable(ds.Tables["GoodsSet"]));
                }
                if ((ds.Tables["SetMain"] != null)) {
                    base.Tables.Add(new SetMainDataTable(ds.Tables["SetMain"]));
                }
                if ((ds.Tables["Stock"] != null)) {
                    base.Tables.Add(new StockDataTable(ds.Tables["Stock"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGoodsSet = ((GoodsSetDataTable)(base.Tables["GoodsSet"]));
            if ((initTable == true)) {
                if ((this.tableGoodsSet != null)) {
                    this.tableGoodsSet.InitVars();
                }
            }
            this.tableSetMain = ((SetMainDataTable)(base.Tables["SetMain"]));
            if ((initTable == true)) {
                if ((this.tableSetMain != null)) {
                    this.tableSetMain.InitVars();
                }
            }
            this.tableStock = ((StockDataTable)(base.Tables["Stock"]));
            if ((initTable == true)) {
                if ((this.tableStock != null)) {
                    this.tableStock.InitVars();
                }
            }
            this.relationSetMain_GoodsSet = this.Relations["SetMain_GoodsSet"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SetParts";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SetParts.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGoodsSet = new GoodsSetDataTable();
            base.Tables.Add(this.tableGoodsSet);
            this.tableSetMain = new SetMainDataTable();
            base.Tables.Add(this.tableSetMain);
            this.tableStock = new StockDataTable();
            base.Tables.Add(this.tableStock);
            this.relationSetMain_GoodsSet = new global::System.Data.DataRelation("SetMain_GoodsSet", new global::System.Data.DataColumn[] {
                        this.tableSetMain.MakerCdColumn,
                        this.tableSetMain.PartsNoColumn}, new global::System.Data.DataColumn[] {
                        this.tableGoodsSet.SetMainMakerCdColumn,
                        this.tableGoodsSet.SetMainPartsNoColumn}, false);
            this.Relations.Add(this.relationSetMain_GoodsSet);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGoodsSet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSetMain() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStock() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SetParts ds = new SetParts();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GoodsSetRowChangeEventHandler(object sender, GoodsSetRowChangeEvent e);
        
        public delegate void SetMainRowChangeEventHandler(object sender, SetMainRowChangeEvent e);
        
        public delegate void StockRowChangeEventHandler(object sender, StockRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GoodsSetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSelImage;
            
            private global::System.Data.DataColumn columnSetMainMakerCd;
            
            private global::System.Data.DataColumn columnSetMainPartsNo;
            
            private global::System.Data.DataColumn columnSetSubMakerCd;
            
            private global::System.Data.DataColumn columnSetSubPartsNo;
            
            private global::System.Data.DataColumn columnSetDisplayOrder;
            
            private global::System.Data.DataColumn columnSetQty;
            
            private global::System.Data.DataColumn columnSetName;
            
            private global::System.Data.DataColumn columnSetSpecialNote;
            
            private global::System.Data.DataColumn columnCatalogShapeNo;
            
            private global::System.Data.DataColumn columnSubGoodsName;
            
            private global::System.Data.DataColumn columnSetSubMakerName;
            
            private global::System.Data.DataColumn columnSelectionState;
            
            private global::System.Data.DataColumn columnSetPrice;
            
            private global::System.Data.DataColumn columnSubst;
            
            private global::System.Data.DataColumn columnGenTanka;
            
            private global::System.Data.DataColumn columnUriTanka;
            
            private global::System.Data.DataColumn columnArariritu;
            
            private global::System.Data.DataColumn columnArarigaku;
            
            private global::System.Data.DataColumn columnWarehouse;
            
            private global::System.Data.DataColumn columnShelf;
            
            private global::System.Data.DataColumn columnStockCnt;
            
            private global::System.Data.DataColumn columnOldPartsNo;
            
            private global::System.Data.DataColumn columnSetSubOrgPrtNo;
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsSetDataTable() {
                this.TableName = "GoodsSet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GoodsSetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GoodsSetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelImageColumn {
                get {
                    return this.columnSelImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetMainMakerCdColumn {
                get {
                    return this.columnSetMainMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetMainPartsNoColumn {
                get {
                    return this.columnSetMainPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetSubMakerCdColumn {
                get {
                    return this.columnSetSubMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetSubPartsNoColumn {
                get {
                    return this.columnSetSubPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetDisplayOrderColumn {
                get {
                    return this.columnSetDisplayOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetQtyColumn {
                get {
                    return this.columnSetQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetNameColumn {
                get {
                    return this.columnSetName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetSpecialNoteColumn {
                get {
                    return this.columnSetSpecialNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CatalogShapeNoColumn {
                get {
                    return this.columnCatalogShapeNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubGoodsNameColumn {
                get {
                    return this.columnSubGoodsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetSubMakerNameColumn {
                get {
                    return this.columnSetSubMakerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionStateColumn {
                get {
                    return this.columnSelectionState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetPriceColumn {
                get {
                    return this.columnSetPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubstColumn {
                get {
                    return this.columnSubst;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenTankaColumn {
                get {
                    return this.columnGenTanka;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UriTankaColumn {
                get {
                    return this.columnUriTanka;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArarirituColumn {
                get {
                    return this.columnArariritu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArarigakuColumn {
                get {
                    return this.columnArarigaku;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseColumn {
                get {
                    return this.columnWarehouse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShelfColumn {
                get {
                    return this.columnShelf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockCntColumn {
                get {
                    return this.columnStockCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OldPartsNoColumn {
                get {
                    return this.columnOldPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetSubOrgPrtNoColumn {
                get {
                    return this.columnSetSubOrgPrtNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsSetRow this[int index] {
                get {
                    return ((GoodsSetRow)(this.Rows[index]));
                }
            }
            
            public event GoodsSetRowChangeEventHandler GoodsSetRowChanging;
            
            public event GoodsSetRowChangeEventHandler GoodsSetRowChanged;
            
            public event GoodsSetRowChangeEventHandler GoodsSetRowDeleting;
            
            public event GoodsSetRowChangeEventHandler GoodsSetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGoodsSetRow(GoodsSetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsSetRow AddGoodsSetRow(
                        System.Drawing.Image SelImage, 
                        int SetMainMakerCd, 
                        string SetMainPartsNo, 
                        int SetSubMakerCd, 
                        string SetSubPartsNo, 
                        int SetDisplayOrder, 
                        double SetQty, 
                        string SetName, 
                        string SetSpecialNote, 
                        string CatalogShapeNo, 
                        string SubGoodsName, 
                        string SetSubMakerName, 
                        bool SelectionState, 
                        double SetPrice, 
                        System.Drawing.Image Subst, 
                        double GenTanka, 
                        double UriTanka, 
                        double Arariritu, 
                        double Ararigaku, 
                        string Warehouse, 
                        string Shelf, 
                        double StockCnt, 
                        string OldPartsNo, 
                        string SetSubOrgPrtNo, 
                        string WarehouseCode) {
                GoodsSetRow rowGoodsSetRow = ((GoodsSetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SelImage,
                        SetMainMakerCd,
                        SetMainPartsNo,
                        SetSubMakerCd,
                        SetSubPartsNo,
                        SetDisplayOrder,
                        SetQty,
                        SetName,
                        SetSpecialNote,
                        CatalogShapeNo,
                        SubGoodsName,
                        SetSubMakerName,
                        SelectionState,
                        SetPrice,
                        Subst,
                        GenTanka,
                        UriTanka,
                        Arariritu,
                        Ararigaku,
                        Warehouse,
                        Shelf,
                        StockCnt,
                        OldPartsNo,
                        SetSubOrgPrtNo,
                        WarehouseCode};
                rowGoodsSetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGoodsSetRow);
                return rowGoodsSetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsSetRow FindBySetSubMakerCdSetSubPartsNo(int SetSubMakerCd, string SetSubPartsNo) {
                return ((GoodsSetRow)(this.Rows.Find(new object[] {
                            SetSubMakerCd,
                            SetSubPartsNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GoodsSetDataTable cln = ((GoodsSetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GoodsSetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSelImage = base.Columns["SelImage"];
                this.columnSetMainMakerCd = base.Columns["SetMainMakerCd"];
                this.columnSetMainPartsNo = base.Columns["SetMainPartsNo"];
                this.columnSetSubMakerCd = base.Columns["SetSubMakerCd"];
                this.columnSetSubPartsNo = base.Columns["SetSubPartsNo"];
                this.columnSetDisplayOrder = base.Columns["SetDisplayOrder"];
                this.columnSetQty = base.Columns["SetQty"];
                this.columnSetName = base.Columns["SetName"];
                this.columnSetSpecialNote = base.Columns["SetSpecialNote"];
                this.columnCatalogShapeNo = base.Columns["CatalogShapeNo"];
                this.columnSubGoodsName = base.Columns["SubGoodsName"];
                this.columnSetSubMakerName = base.Columns["SetSubMakerName"];
                this.columnSelectionState = base.Columns["SelectionState"];
                this.columnSetPrice = base.Columns["SetPrice"];
                this.columnSubst = base.Columns["Subst"];
                this.columnGenTanka = base.Columns["GenTanka"];
                this.columnUriTanka = base.Columns["UriTanka"];
                this.columnArariritu = base.Columns["Arariritu"];
                this.columnArarigaku = base.Columns["Ararigaku"];
                this.columnWarehouse = base.Columns["Warehouse"];
                this.columnShelf = base.Columns["Shelf"];
                this.columnStockCnt = base.Columns["StockCnt"];
                this.columnOldPartsNo = base.Columns["OldPartsNo"];
                this.columnSetSubOrgPrtNo = base.Columns["SetSubOrgPrtNo"];
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSelImage = new global::System.Data.DataColumn("SelImage", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelImage);
                this.columnSetMainMakerCd = new global::System.Data.DataColumn("SetMainMakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetMainMakerCd);
                this.columnSetMainPartsNo = new global::System.Data.DataColumn("SetMainPartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetMainPartsNo);
                this.columnSetSubMakerCd = new global::System.Data.DataColumn("SetSubMakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetSubMakerCd);
                this.columnSetSubPartsNo = new global::System.Data.DataColumn("SetSubPartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetSubPartsNo);
                this.columnSetDisplayOrder = new global::System.Data.DataColumn("SetDisplayOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetDisplayOrder);
                this.columnSetQty = new global::System.Data.DataColumn("SetQty", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetQty);
                this.columnSetName = new global::System.Data.DataColumn("SetName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetName);
                this.columnSetSpecialNote = new global::System.Data.DataColumn("SetSpecialNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetSpecialNote);
                this.columnCatalogShapeNo = new global::System.Data.DataColumn("CatalogShapeNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCatalogShapeNo);
                this.columnSubGoodsName = new global::System.Data.DataColumn("SubGoodsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubGoodsName);
                this.columnSetSubMakerName = new global::System.Data.DataColumn("SetSubMakerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetSubMakerName);
                this.columnSelectionState = new global::System.Data.DataColumn("SelectionState", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionState);
                this.columnSetPrice = new global::System.Data.DataColumn("SetPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetPrice);
                this.columnSubst = new global::System.Data.DataColumn("Subst", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubst);
                this.columnGenTanka = new global::System.Data.DataColumn("GenTanka", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenTanka);
                this.columnUriTanka = new global::System.Data.DataColumn("UriTanka", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUriTanka);
                this.columnArariritu = new global::System.Data.DataColumn("Arariritu", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArariritu);
                this.columnArarigaku = new global::System.Data.DataColumn("Ararigaku", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArarigaku);
                this.columnWarehouse = new global::System.Data.DataColumn("Warehouse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouse);
                this.columnShelf = new global::System.Data.DataColumn("Shelf", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShelf);
                this.columnStockCnt = new global::System.Data.DataColumn("StockCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockCnt);
                this.columnOldPartsNo = new global::System.Data.DataColumn("OldPartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldPartsNo);
                this.columnSetSubOrgPrtNo = new global::System.Data.DataColumn("SetSubOrgPrtNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetSubOrgPrtNo);
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSetSubMakerCd,
                                this.columnSetSubPartsNo}, true));
                this.columnSelImage.Caption = "選択";
                this.columnSetMainMakerCd.AllowDBNull = false;
                this.columnSetMainMakerCd.Caption = "セット親メーカーコード";
                this.columnSetMainMakerCd.DefaultValue = ((int)(0));
                this.columnSetMainPartsNo.AllowDBNull = false;
                this.columnSetMainPartsNo.Caption = "セット親品番";
                this.columnSetMainPartsNo.DefaultValue = ((string)(""));
                this.columnSetMainPartsNo.MaxLength = 40;
                this.columnSetSubMakerCd.AllowDBNull = false;
                this.columnSetSubMakerCd.Caption = "";
                this.columnSetSubMakerCd.DefaultValue = ((int)(0));
                this.columnSetSubPartsNo.AllowDBNull = false;
                this.columnSetSubPartsNo.Caption = "品番";
                this.columnSetSubPartsNo.DefaultValue = ((string)(""));
                this.columnSetSubPartsNo.MaxLength = 40;
                this.columnSetDisplayOrder.Caption = "セット表示順位";
                this.columnSetDisplayOrder.DefaultValue = ((int)(0));
                this.columnSetQty.Caption = "QTY";
                this.columnSetQty.DefaultValue = ((double)(0));
                this.columnSetName.Caption = "セット名称";
                this.columnSetName.DefaultValue = ((string)(""));
                this.columnSetSpecialNote.Caption = "特記事項";
                this.columnSetSpecialNote.DefaultValue = ((string)(""));
                this.columnSetSpecialNote.MaxLength = 40;
                this.columnCatalogShapeNo.Caption = "カタログ図番";
                this.columnCatalogShapeNo.DefaultValue = ((string)(""));
                this.columnCatalogShapeNo.MaxLength = 10;
                this.columnSubGoodsName.Caption = "品名";
                this.columnSubGoodsName.DefaultValue = ((string)(""));
                this.columnSubGoodsName.MaxLength = 100;
                this.columnSetSubMakerName.Caption = "メーカー";
                this.columnSetSubMakerName.DefaultValue = ((string)(""));
                this.columnSelectionState.Caption = "選択状態";
                this.columnSelectionState.DefaultValue = ((bool)(false));
                this.columnSetPrice.Caption = "標準価格";
                this.columnSetPrice.DefaultValue = ((double)(0));
                this.columnSubst.Caption = "代替";
                this.columnGenTanka.Caption = "原単価";
                this.columnGenTanka.DefaultValue = ((double)(0));
                this.columnUriTanka.Caption = "売単価";
                this.columnUriTanka.DefaultValue = ((double)(0));
                this.columnArariritu.Caption = "粗利率";
                this.columnArariritu.DefaultValue = ((double)(0));
                this.columnArarigaku.Caption = "粗利額";
                this.columnArarigaku.DefaultValue = ((double)(0));
                this.columnWarehouse.Caption = "倉庫";
                this.columnWarehouse.DefaultValue = ((string)(""));
                this.columnShelf.Caption = "棚番";
                this.columnShelf.DefaultValue = ((string)(""));
                this.columnStockCnt.Caption = "現在庫数";
                this.columnStockCnt.DefaultValue = ((double)(0));
                this.columnOldPartsNo.Caption = "旧品番";
                this.columnOldPartsNo.DefaultValue = ((string)(""));
                this.columnSetSubOrgPrtNo.DefaultValue = ((string)(""));
                this.columnWarehouseCode.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsSetRow NewGoodsSetRow() {
                return ((GoodsSetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GoodsSetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GoodsSetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GoodsSetRowChanged != null)) {
                    this.GoodsSetRowChanged(this, new GoodsSetRowChangeEvent(((GoodsSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GoodsSetRowChanging != null)) {
                    this.GoodsSetRowChanging(this, new GoodsSetRowChangeEvent(((GoodsSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GoodsSetRowDeleted != null)) {
                    this.GoodsSetRowDeleted(this, new GoodsSetRowChangeEvent(((GoodsSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GoodsSetRowDeleting != null)) {
                    this.GoodsSetRowDeleting(this, new GoodsSetRowChangeEvent(((GoodsSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGoodsSetRow(GoodsSetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SetParts ds = new SetParts();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GoodsSetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SetMainDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMakerCd;
            
            private global::System.Data.DataColumn columnPartsNo;
            
            private global::System.Data.DataColumn columnSelectionState;
            
            private global::System.Data.DataColumn columnPrimePartsName;
            
            private global::System.Data.DataColumn columnPrice;
            
            private global::System.Data.DataColumn columnSelImage;
            
            private global::System.Data.DataColumn columnSubst;
            
            private global::System.Data.DataColumn columnMakerNm;
            
            private global::System.Data.DataColumn columnCatalogShapeNo;
            
            private global::System.Data.DataColumn columnQty;
            
            private global::System.Data.DataColumn columnGenTanka;
            
            private global::System.Data.DataColumn columnUriTanka;
            
            private global::System.Data.DataColumn columnArariritu;
            
            private global::System.Data.DataColumn columnArarigaku;
            
            private global::System.Data.DataColumn columnWarehouse;
            
            private global::System.Data.DataColumn columnShelf;
            
            private global::System.Data.DataColumn columnStockCnt;
            
            private global::System.Data.DataColumn columnSetSpecialNote;
            
            private global::System.Data.DataColumn columnOldPartsNo;
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetMainDataTable() {
                this.TableName = "SetMain";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetMainDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SetMainDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakerCdColumn {
                get {
                    return this.columnMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartsNoColumn {
                get {
                    return this.columnPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionStateColumn {
                get {
                    return this.columnSelectionState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimePartsNameColumn {
                get {
                    return this.columnPrimePartsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelImageColumn {
                get {
                    return this.columnSelImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubstColumn {
                get {
                    return this.columnSubst;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakerNmColumn {
                get {
                    return this.columnMakerNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CatalogShapeNoColumn {
                get {
                    return this.columnCatalogShapeNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenTankaColumn {
                get {
                    return this.columnGenTanka;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UriTankaColumn {
                get {
                    return this.columnUriTanka;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArarirituColumn {
                get {
                    return this.columnArariritu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArarigakuColumn {
                get {
                    return this.columnArarigaku;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseColumn {
                get {
                    return this.columnWarehouse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShelfColumn {
                get {
                    return this.columnShelf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockCntColumn {
                get {
                    return this.columnStockCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetSpecialNoteColumn {
                get {
                    return this.columnSetSpecialNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OldPartsNoColumn {
                get {
                    return this.columnOldPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetMainRow this[int index] {
                get {
                    return ((SetMainRow)(this.Rows[index]));
                }
            }
            
            public event SetMainRowChangeEventHandler SetMainRowChanging;
            
            public event SetMainRowChangeEventHandler SetMainRowChanged;
            
            public event SetMainRowChangeEventHandler SetMainRowDeleting;
            
            public event SetMainRowChangeEventHandler SetMainRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSetMainRow(SetMainRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetMainRow AddSetMainRow(
                        int MakerCd, 
                        string PartsNo, 
                        bool SelectionState, 
                        string PrimePartsName, 
                        double Price, 
                        System.Drawing.Image SelImage, 
                        System.Drawing.Image Subst, 
                        string MakerNm, 
                        string CatalogShapeNo, 
                        double Qty, 
                        double GenTanka, 
                        double UriTanka, 
                        double Arariritu, 
                        double Ararigaku, 
                        string Warehouse, 
                        string Shelf, 
                        double StockCnt, 
                        string SetSpecialNote, 
                        string OldPartsNo, 
                        string WarehouseCode) {
                SetMainRow rowSetMainRow = ((SetMainRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MakerCd,
                        PartsNo,
                        SelectionState,
                        PrimePartsName,
                        Price,
                        SelImage,
                        Subst,
                        MakerNm,
                        CatalogShapeNo,
                        Qty,
                        GenTanka,
                        UriTanka,
                        Arariritu,
                        Ararigaku,
                        Warehouse,
                        Shelf,
                        StockCnt,
                        SetSpecialNote,
                        OldPartsNo,
                        WarehouseCode};
                rowSetMainRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSetMainRow);
                return rowSetMainRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SetMainDataTable cln = ((SetMainDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SetMainDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMakerCd = base.Columns["MakerCd"];
                this.columnPartsNo = base.Columns["PartsNo"];
                this.columnSelectionState = base.Columns["SelectionState"];
                this.columnPrimePartsName = base.Columns["PrimePartsName"];
                this.columnPrice = base.Columns["Price"];
                this.columnSelImage = base.Columns["SelImage"];
                this.columnSubst = base.Columns["Subst"];
                this.columnMakerNm = base.Columns["MakerNm"];
                this.columnCatalogShapeNo = base.Columns["CatalogShapeNo"];
                this.columnQty = base.Columns["Qty"];
                this.columnGenTanka = base.Columns["GenTanka"];
                this.columnUriTanka = base.Columns["UriTanka"];
                this.columnArariritu = base.Columns["Arariritu"];
                this.columnArarigaku = base.Columns["Ararigaku"];
                this.columnWarehouse = base.Columns["Warehouse"];
                this.columnShelf = base.Columns["Shelf"];
                this.columnStockCnt = base.Columns["StockCnt"];
                this.columnSetSpecialNote = base.Columns["SetSpecialNote"];
                this.columnOldPartsNo = base.Columns["OldPartsNo"];
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMakerCd = new global::System.Data.DataColumn("MakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMakerCd);
                this.columnPartsNo = new global::System.Data.DataColumn("PartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartsNo);
                this.columnSelectionState = new global::System.Data.DataColumn("SelectionState", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionState);
                this.columnPrimePartsName = new global::System.Data.DataColumn("PrimePartsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimePartsName);
                this.columnPrice = new global::System.Data.DataColumn("Price", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnSelImage = new global::System.Data.DataColumn("SelImage", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelImage);
                this.columnSubst = new global::System.Data.DataColumn("Subst", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubst);
                this.columnMakerNm = new global::System.Data.DataColumn("MakerNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMakerNm);
                this.columnCatalogShapeNo = new global::System.Data.DataColumn("CatalogShapeNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCatalogShapeNo);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.columnGenTanka = new global::System.Data.DataColumn("GenTanka", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenTanka);
                this.columnUriTanka = new global::System.Data.DataColumn("UriTanka", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUriTanka);
                this.columnArariritu = new global::System.Data.DataColumn("Arariritu", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArariritu);
                this.columnArarigaku = new global::System.Data.DataColumn("Ararigaku", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArarigaku);
                this.columnWarehouse = new global::System.Data.DataColumn("Warehouse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouse);
                this.columnShelf = new global::System.Data.DataColumn("Shelf", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShelf);
                this.columnStockCnt = new global::System.Data.DataColumn("StockCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockCnt);
                this.columnSetSpecialNote = new global::System.Data.DataColumn("SetSpecialNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetSpecialNote);
                this.columnOldPartsNo = new global::System.Data.DataColumn("OldPartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldPartsNo);
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.columnMakerCd.AllowDBNull = false;
                this.columnMakerCd.Caption = "メーカーコード";
                this.columnMakerCd.DefaultValue = ((int)(0));
                this.columnPartsNo.AllowDBNull = false;
                this.columnPartsNo.Caption = "品番";
                this.columnPartsNo.DefaultValue = ((string)(""));
                this.columnPartsNo.MaxLength = 24;
                this.columnSelectionState.Caption = "選択状態";
                this.columnSelectionState.DefaultValue = ((bool)(false));
                this.columnPrimePartsName.Caption = "品名";
                this.columnPrimePartsName.DefaultValue = ((string)(""));
                this.columnPrice.Caption = "標準価格";
                this.columnPrice.DefaultValue = ((double)(0));
                this.columnSelImage.Caption = "選択";
                this.columnSubst.Caption = "代替";
                this.columnMakerNm.Caption = "メーカー名";
                this.columnMakerNm.DefaultValue = ((string)(""));
                this.columnCatalogShapeNo.Caption = "カタログ図番";
                this.columnCatalogShapeNo.DefaultValue = ((string)(""));
                this.columnQty.Caption = "QTY";
                this.columnQty.DefaultValue = ((double)(0));
                this.columnGenTanka.Caption = "原単価";
                this.columnGenTanka.DefaultValue = ((double)(0));
                this.columnUriTanka.Caption = "売単価";
                this.columnUriTanka.DefaultValue = ((double)(0));
                this.columnArariritu.Caption = "粗利率";
                this.columnArariritu.DefaultValue = ((double)(0));
                this.columnArarigaku.Caption = "粗利額";
                this.columnArarigaku.DefaultValue = ((double)(0));
                this.columnWarehouse.Caption = "倉庫";
                this.columnWarehouse.DefaultValue = ((string)(""));
                this.columnShelf.Caption = "棚番";
                this.columnShelf.DefaultValue = ((string)(""));
                this.columnStockCnt.Caption = "現在庫数";
                this.columnStockCnt.DefaultValue = ((double)(0));
                this.columnSetSpecialNote.Caption = "特記事項";
                this.columnSetSpecialNote.DefaultValue = ((string)(""));
                this.columnOldPartsNo.Caption = "旧品番";
                this.columnOldPartsNo.DefaultValue = ((string)(""));
                this.columnWarehouseCode.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetMainRow NewSetMainRow() {
                return ((SetMainRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SetMainRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SetMainRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SetMainRowChanged != null)) {
                    this.SetMainRowChanged(this, new SetMainRowChangeEvent(((SetMainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SetMainRowChanging != null)) {
                    this.SetMainRowChanging(this, new SetMainRowChangeEvent(((SetMainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SetMainRowDeleted != null)) {
                    this.SetMainRowDeleted(this, new SetMainRowChangeEvent(((SetMainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SetMainRowDeleting != null)) {
                    this.SetMainRowDeleting(this, new SetMainRowChangeEvent(((SetMainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSetMainRow(SetMainRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SetParts ds = new SetParts();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SetMainDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            private global::System.Data.DataColumn columnGoodsMakerCd;
            
            private global::System.Data.DataColumn columnGoodsNo;
            
            private global::System.Data.DataColumn columnShipmentPosCnt;
            
            private global::System.Data.DataColumn columnMinimumStockCnt;
            
            private global::System.Data.DataColumn columnMaximumStockCnt;
            
            private global::System.Data.DataColumn columnWarehouseShelfNo;
            
            private global::System.Data.DataColumn columnWarehouseName;
            
            private global::System.Data.DataColumn columnSelectionState;
            
            private global::System.Data.DataColumn columnSelImage;
            
            private global::System.Data.DataColumn columnSortDiv;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDataTable() {
                this.TableName = "Stock";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsMakerCdColumn {
                get {
                    return this.columnGoodsMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNoColumn {
                get {
                    return this.columnGoodsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipmentPosCntColumn {
                get {
                    return this.columnShipmentPosCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumStockCntColumn {
                get {
                    return this.columnMinimumStockCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumStockCntColumn {
                get {
                    return this.columnMaximumStockCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseShelfNoColumn {
                get {
                    return this.columnWarehouseShelfNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseNameColumn {
                get {
                    return this.columnWarehouseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionStateColumn {
                get {
                    return this.columnSelectionState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelImageColumn {
                get {
                    return this.columnSelImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortDivColumn {
                get {
                    return this.columnSortDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow this[int index] {
                get {
                    return ((StockRow)(this.Rows[index]));
                }
            }
            
            public event StockRowChangeEventHandler StockRowChanging;
            
            public event StockRowChangeEventHandler StockRowChanged;
            
            public event StockRowChangeEventHandler StockRowDeleting;
            
            public event StockRowChangeEventHandler StockRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockRow(StockRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow AddStockRow(string WarehouseCode, int GoodsMakerCd, string GoodsNo, double ShipmentPosCnt, double MinimumStockCnt, double MaximumStockCnt, string WarehouseShelfNo, string WarehouseName, bool SelectionState, System.Drawing.Image SelImage, int SortDiv) {
                StockRow rowStockRow = ((StockRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WarehouseCode,
                        GoodsMakerCd,
                        GoodsNo,
                        ShipmentPosCnt,
                        MinimumStockCnt,
                        MaximumStockCnt,
                        WarehouseShelfNo,
                        WarehouseName,
                        SelectionState,
                        SelImage,
                        SortDiv};
                rowStockRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockRow);
                return rowStockRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow FindByWarehouseCodeGoodsMakerCdGoodsNo(string WarehouseCode, int GoodsMakerCd, string GoodsNo) {
                return ((StockRow)(this.Rows.Find(new object[] {
                            WarehouseCode,
                            GoodsMakerCd,
                            GoodsNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockDataTable cln = ((StockDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
                this.columnGoodsMakerCd = base.Columns["GoodsMakerCd"];
                this.columnGoodsNo = base.Columns["GoodsNo"];
                this.columnShipmentPosCnt = base.Columns["ShipmentPosCnt"];
                this.columnMinimumStockCnt = base.Columns["MinimumStockCnt"];
                this.columnMaximumStockCnt = base.Columns["MaximumStockCnt"];
                this.columnWarehouseShelfNo = base.Columns["WarehouseShelfNo"];
                this.columnWarehouseName = base.Columns["WarehouseName"];
                this.columnSelectionState = base.Columns["SelectionState"];
                this.columnSelImage = base.Columns["SelImage"];
                this.columnSortDiv = base.Columns["SortDiv"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.columnGoodsMakerCd = new global::System.Data.DataColumn("GoodsMakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsMakerCd);
                this.columnGoodsNo = new global::System.Data.DataColumn("GoodsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsNo);
                this.columnShipmentPosCnt = new global::System.Data.DataColumn("ShipmentPosCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipmentPosCnt);
                this.columnMinimumStockCnt = new global::System.Data.DataColumn("MinimumStockCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumStockCnt);
                this.columnMaximumStockCnt = new global::System.Data.DataColumn("MaximumStockCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumStockCnt);
                this.columnWarehouseShelfNo = new global::System.Data.DataColumn("WarehouseShelfNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseShelfNo);
                this.columnWarehouseName = new global::System.Data.DataColumn("WarehouseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseName);
                this.columnSelectionState = new global::System.Data.DataColumn("SelectionState", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionState);
                this.columnSelImage = new global::System.Data.DataColumn("SelImage", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelImage);
                this.columnSortDiv = new global::System.Data.DataColumn("SortDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortDiv);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWarehouseCode,
                                this.columnGoodsMakerCd,
                                this.columnGoodsNo}, true));
                this.columnWarehouseCode.AllowDBNull = false;
                this.columnWarehouseCode.Caption = "倉庫コード";
                this.columnWarehouseCode.DefaultValue = ((string)(""));
                this.columnWarehouseCode.MaxLength = 6;
                this.columnGoodsMakerCd.AllowDBNull = false;
                this.columnGoodsMakerCd.Caption = "商品メーカー";
                this.columnGoodsMakerCd.DefaultValue = ((int)(0));
                this.columnGoodsNo.AllowDBNull = false;
                this.columnGoodsNo.Caption = "品番";
                this.columnGoodsNo.DefaultValue = ((string)(""));
                this.columnGoodsNo.MaxLength = 40;
                this.columnShipmentPosCnt.Caption = "現在庫数";
                this.columnShipmentPosCnt.DefaultValue = ((double)(0));
                this.columnMinimumStockCnt.Caption = "最低在庫数";
                this.columnMinimumStockCnt.DefaultValue = ((double)(0));
                this.columnMaximumStockCnt.Caption = "最高在庫数";
                this.columnMaximumStockCnt.DefaultValue = ((double)(0));
                this.columnWarehouseShelfNo.Caption = "棚番";
                this.columnWarehouseShelfNo.DefaultValue = ((string)(""));
                this.columnWarehouseShelfNo.MaxLength = 8;
                this.columnWarehouseName.Caption = "倉庫";
                this.columnWarehouseName.DefaultValue = ((string)(""));
                this.columnSelectionState.DefaultValue = ((bool)(false));
                this.columnSelImage.Caption = "選択";
                this.columnSortDiv.Caption = "ソート区分";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow NewStockRow() {
                return ((StockRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockRowChanged != null)) {
                    this.StockRowChanged(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockRowChanging != null)) {
                    this.StockRowChanging(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockRowDeleted != null)) {
                    this.StockRowDeleted(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockRowDeleting != null)) {
                    this.StockRowDeleting(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockRow(StockRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SetParts ds = new SetParts();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GoodsSetRow : global::System.Data.DataRow {
            
            private GoodsSetDataTable tableGoodsSet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GoodsSetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGoodsSet = ((GoodsSetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image SelImage {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableGoodsSet.SelImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'SelImage\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.SelImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetMainMakerCd {
                get {
                    return ((int)(this[this.tableGoodsSet.SetMainMakerCdColumn]));
                }
                set {
                    this[this.tableGoodsSet.SetMainMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetMainPartsNo {
                get {
                    return ((string)(this[this.tableGoodsSet.SetMainPartsNoColumn]));
                }
                set {
                    this[this.tableGoodsSet.SetMainPartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetSubMakerCd {
                get {
                    return ((int)(this[this.tableGoodsSet.SetSubMakerCdColumn]));
                }
                set {
                    this[this.tableGoodsSet.SetSubMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetSubPartsNo {
                get {
                    return ((string)(this[this.tableGoodsSet.SetSubPartsNoColumn]));
                }
                set {
                    this[this.tableGoodsSet.SetSubPartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetDisplayOrder {
                get {
                    try {
                        return ((int)(this[this.tableGoodsSet.SetDisplayOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'SetDisplayOrder\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.SetDisplayOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SetQty {
                get {
                    try {
                        return ((double)(this[this.tableGoodsSet.SetQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'SetQty\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.SetQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetName {
                get {
                    try {
                        return ((string)(this[this.tableGoodsSet.SetNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'SetName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.SetNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetSpecialNote {
                get {
                    try {
                        return ((string)(this[this.tableGoodsSet.SetSpecialNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'SetSpecialNote\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.SetSpecialNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CatalogShapeNo {
                get {
                    try {
                        return ((string)(this[this.tableGoodsSet.CatalogShapeNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'CatalogShapeNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.CatalogShapeNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubGoodsName {
                get {
                    try {
                        return ((string)(this[this.tableGoodsSet.SubGoodsNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'SubGoodsName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.SubGoodsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetSubMakerName {
                get {
                    try {
                        return ((string)(this[this.tableGoodsSet.SetSubMakerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'SetSubMakerName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.SetSubMakerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SelectionState {
                get {
                    try {
                        return ((bool)(this[this.tableGoodsSet.SelectionStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'SelectionState\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.SelectionStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SetPrice {
                get {
                    try {
                        return ((double)(this[this.tableGoodsSet.SetPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'SetPrice\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.SetPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image Subst {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableGoodsSet.SubstColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'Subst\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.SubstColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GenTanka {
                get {
                    try {
                        return ((double)(this[this.tableGoodsSet.GenTankaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'GenTanka\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.GenTankaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UriTanka {
                get {
                    try {
                        return ((double)(this[this.tableGoodsSet.UriTankaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'UriTanka\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.UriTankaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Arariritu {
                get {
                    try {
                        return ((double)(this[this.tableGoodsSet.ArarirituColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'Arariritu\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.ArarirituColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Ararigaku {
                get {
                    try {
                        return ((double)(this[this.tableGoodsSet.ArarigakuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'Ararigaku\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.ArarigakuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Warehouse {
                get {
                    try {
                        return ((string)(this[this.tableGoodsSet.WarehouseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'Warehouse\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.WarehouseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shelf {
                get {
                    try {
                        return ((string)(this[this.tableGoodsSet.ShelfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'Shelf\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.ShelfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockCnt {
                get {
                    try {
                        return ((double)(this[this.tableGoodsSet.StockCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'StockCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.StockCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OldPartsNo {
                get {
                    try {
                        return ((string)(this[this.tableGoodsSet.OldPartsNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'OldPartsNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.OldPartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetSubOrgPrtNo {
                get {
                    try {
                        return ((string)(this[this.tableGoodsSet.SetSubOrgPrtNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'SetSubOrgPrtNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.SetSubOrgPrtNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    try {
                        return ((string)(this[this.tableGoodsSet.WarehouseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsSet\' にある列 \'WarehouseCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsSet.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetMainRow SetMainRowParent {
                get {
                    return ((SetMainRow)(this.GetParentRow(this.Table.ParentRelations["SetMain_GoodsSet"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SetMain_GoodsSet"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelImageNull() {
                return this.IsNull(this.tableGoodsSet.SelImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelImageNull() {
                this[this.tableGoodsSet.SelImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetDisplayOrderNull() {
                return this.IsNull(this.tableGoodsSet.SetDisplayOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetDisplayOrderNull() {
                this[this.tableGoodsSet.SetDisplayOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetQtyNull() {
                return this.IsNull(this.tableGoodsSet.SetQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetQtyNull() {
                this[this.tableGoodsSet.SetQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetNameNull() {
                return this.IsNull(this.tableGoodsSet.SetNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetNameNull() {
                this[this.tableGoodsSet.SetNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetSpecialNoteNull() {
                return this.IsNull(this.tableGoodsSet.SetSpecialNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetSpecialNoteNull() {
                this[this.tableGoodsSet.SetSpecialNoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCatalogShapeNoNull() {
                return this.IsNull(this.tableGoodsSet.CatalogShapeNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCatalogShapeNoNull() {
                this[this.tableGoodsSet.CatalogShapeNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubGoodsNameNull() {
                return this.IsNull(this.tableGoodsSet.SubGoodsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubGoodsNameNull() {
                this[this.tableGoodsSet.SubGoodsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetSubMakerNameNull() {
                return this.IsNull(this.tableGoodsSet.SetSubMakerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetSubMakerNameNull() {
                this[this.tableGoodsSet.SetSubMakerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionStateNull() {
                return this.IsNull(this.tableGoodsSet.SelectionStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionStateNull() {
                this[this.tableGoodsSet.SelectionStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetPriceNull() {
                return this.IsNull(this.tableGoodsSet.SetPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetPriceNull() {
                this[this.tableGoodsSet.SetPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubstNull() {
                return this.IsNull(this.tableGoodsSet.SubstColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubstNull() {
                this[this.tableGoodsSet.SubstColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenTankaNull() {
                return this.IsNull(this.tableGoodsSet.GenTankaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenTankaNull() {
                this[this.tableGoodsSet.GenTankaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUriTankaNull() {
                return this.IsNull(this.tableGoodsSet.UriTankaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUriTankaNull() {
                this[this.tableGoodsSet.UriTankaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArarirituNull() {
                return this.IsNull(this.tableGoodsSet.ArarirituColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArarirituNull() {
                this[this.tableGoodsSet.ArarirituColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArarigakuNull() {
                return this.IsNull(this.tableGoodsSet.ArarigakuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArarigakuNull() {
                this[this.tableGoodsSet.ArarigakuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNull() {
                return this.IsNull(this.tableGoodsSet.WarehouseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNull() {
                this[this.tableGoodsSet.WarehouseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShelfNull() {
                return this.IsNull(this.tableGoodsSet.ShelfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShelfNull() {
                this[this.tableGoodsSet.ShelfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockCntNull() {
                return this.IsNull(this.tableGoodsSet.StockCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockCntNull() {
                this[this.tableGoodsSet.StockCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOldPartsNoNull() {
                return this.IsNull(this.tableGoodsSet.OldPartsNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOldPartsNoNull() {
                this[this.tableGoodsSet.OldPartsNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetSubOrgPrtNoNull() {
                return this.IsNull(this.tableGoodsSet.SetSubOrgPrtNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetSubOrgPrtNoNull() {
                this[this.tableGoodsSet.SetSubOrgPrtNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseCodeNull() {
                return this.IsNull(this.tableGoodsSet.WarehouseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseCodeNull() {
                this[this.tableGoodsSet.WarehouseCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SetMainRow : global::System.Data.DataRow {
            
            private SetMainDataTable tableSetMain;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetMainRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetMain = ((SetMainDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MakerCd {
                get {
                    return ((int)(this[this.tableSetMain.MakerCdColumn]));
                }
                set {
                    this[this.tableSetMain.MakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartsNo {
                get {
                    return ((string)(this[this.tableSetMain.PartsNoColumn]));
                }
                set {
                    this[this.tableSetMain.PartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SelectionState {
                get {
                    try {
                        return ((bool)(this[this.tableSetMain.SelectionStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'SelectionState\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.SelectionStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimePartsName {
                get {
                    try {
                        return ((string)(this[this.tableSetMain.PrimePartsNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'PrimePartsName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.PrimePartsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Price {
                get {
                    try {
                        return ((double)(this[this.tableSetMain.PriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'Price\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.PriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image SelImage {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableSetMain.SelImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'SelImage\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.SelImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image Subst {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableSetMain.SubstColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'Subst\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.SubstColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MakerNm {
                get {
                    try {
                        return ((string)(this[this.tableSetMain.MakerNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'MakerNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.MakerNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CatalogShapeNo {
                get {
                    try {
                        return ((string)(this[this.tableSetMain.CatalogShapeNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'CatalogShapeNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.CatalogShapeNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Qty {
                get {
                    try {
                        return ((double)(this[this.tableSetMain.QtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'Qty\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GenTanka {
                get {
                    try {
                        return ((double)(this[this.tableSetMain.GenTankaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'GenTanka\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.GenTankaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UriTanka {
                get {
                    try {
                        return ((double)(this[this.tableSetMain.UriTankaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'UriTanka\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.UriTankaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Arariritu {
                get {
                    try {
                        return ((double)(this[this.tableSetMain.ArarirituColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'Arariritu\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.ArarirituColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Ararigaku {
                get {
                    try {
                        return ((double)(this[this.tableSetMain.ArarigakuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'Ararigaku\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.ArarigakuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Warehouse {
                get {
                    try {
                        return ((string)(this[this.tableSetMain.WarehouseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'Warehouse\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.WarehouseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shelf {
                get {
                    try {
                        return ((string)(this[this.tableSetMain.ShelfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'Shelf\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.ShelfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockCnt {
                get {
                    try {
                        return ((double)(this[this.tableSetMain.StockCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'StockCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.StockCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetSpecialNote {
                get {
                    try {
                        return ((string)(this[this.tableSetMain.SetSpecialNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'SetSpecialNote\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.SetSpecialNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OldPartsNo {
                get {
                    try {
                        return ((string)(this[this.tableSetMain.OldPartsNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SetMain\' にある列 \'OldPartsNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSetMain.OldPartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    if (this.IsWarehouseCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSetMain.WarehouseCodeColumn]));
                    }
                }
                set {
                    this[this.tableSetMain.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionStateNull() {
                return this.IsNull(this.tableSetMain.SelectionStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionStateNull() {
                this[this.tableSetMain.SelectionStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimePartsNameNull() {
                return this.IsNull(this.tableSetMain.PrimePartsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimePartsNameNull() {
                this[this.tableSetMain.PrimePartsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tableSetMain.PriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tableSetMain.PriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelImageNull() {
                return this.IsNull(this.tableSetMain.SelImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelImageNull() {
                this[this.tableSetMain.SelImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubstNull() {
                return this.IsNull(this.tableSetMain.SubstColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubstNull() {
                this[this.tableSetMain.SubstColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMakerNmNull() {
                return this.IsNull(this.tableSetMain.MakerNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMakerNmNull() {
                this[this.tableSetMain.MakerNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCatalogShapeNoNull() {
                return this.IsNull(this.tableSetMain.CatalogShapeNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCatalogShapeNoNull() {
                this[this.tableSetMain.CatalogShapeNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQtyNull() {
                return this.IsNull(this.tableSetMain.QtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQtyNull() {
                this[this.tableSetMain.QtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenTankaNull() {
                return this.IsNull(this.tableSetMain.GenTankaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenTankaNull() {
                this[this.tableSetMain.GenTankaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUriTankaNull() {
                return this.IsNull(this.tableSetMain.UriTankaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUriTankaNull() {
                this[this.tableSetMain.UriTankaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArarirituNull() {
                return this.IsNull(this.tableSetMain.ArarirituColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArarirituNull() {
                this[this.tableSetMain.ArarirituColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArarigakuNull() {
                return this.IsNull(this.tableSetMain.ArarigakuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArarigakuNull() {
                this[this.tableSetMain.ArarigakuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNull() {
                return this.IsNull(this.tableSetMain.WarehouseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNull() {
                this[this.tableSetMain.WarehouseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShelfNull() {
                return this.IsNull(this.tableSetMain.ShelfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShelfNull() {
                this[this.tableSetMain.ShelfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockCntNull() {
                return this.IsNull(this.tableSetMain.StockCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockCntNull() {
                this[this.tableSetMain.StockCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetSpecialNoteNull() {
                return this.IsNull(this.tableSetMain.SetSpecialNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetSpecialNoteNull() {
                this[this.tableSetMain.SetSpecialNoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOldPartsNoNull() {
                return this.IsNull(this.tableSetMain.OldPartsNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOldPartsNoNull() {
                this[this.tableSetMain.OldPartsNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseCodeNull() {
                return this.IsNull(this.tableSetMain.WarehouseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseCodeNull() {
                this[this.tableSetMain.WarehouseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsSetRow[] GetGoodsSetRows() {
                if ((this.Table.ChildRelations["SetMain_GoodsSet"] == null)) {
                    return new GoodsSetRow[0];
                }
                else {
                    return ((GoodsSetRow[])(base.GetChildRows(this.Table.ChildRelations["SetMain_GoodsSet"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockRow : global::System.Data.DataRow {
            
            private StockDataTable tableStock;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStock = ((StockDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    return ((string)(this[this.tableStock.WarehouseCodeColumn]));
                }
                set {
                    this[this.tableStock.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GoodsMakerCd {
                get {
                    return ((int)(this[this.tableStock.GoodsMakerCdColumn]));
                }
                set {
                    this[this.tableStock.GoodsMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsNo {
                get {
                    return ((string)(this[this.tableStock.GoodsNoColumn]));
                }
                set {
                    this[this.tableStock.GoodsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ShipmentPosCnt {
                get {
                    try {
                        return ((double)(this[this.tableStock.ShipmentPosCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'ShipmentPosCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.ShipmentPosCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MinimumStockCnt {
                get {
                    try {
                        return ((double)(this[this.tableStock.MinimumStockCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'MinimumStockCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.MinimumStockCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MaximumStockCnt {
                get {
                    try {
                        return ((double)(this[this.tableStock.MaximumStockCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'MaximumStockCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.MaximumStockCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseShelfNo {
                get {
                    try {
                        return ((string)(this[this.tableStock.WarehouseShelfNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'WarehouseShelfNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.WarehouseShelfNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseName {
                get {
                    try {
                        return ((string)(this[this.tableStock.WarehouseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'WarehouseName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.WarehouseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SelectionState {
                get {
                    try {
                        return ((bool)(this[this.tableStock.SelectionStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'SelectionState\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.SelectionStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image SelImage {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableStock.SelImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'SelImage\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.SelImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortDiv {
                get {
                    try {
                        return ((int)(this[this.tableStock.SortDivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'SortDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.SortDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipmentPosCntNull() {
                return this.IsNull(this.tableStock.ShipmentPosCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipmentPosCntNull() {
                this[this.tableStock.ShipmentPosCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumStockCntNull() {
                return this.IsNull(this.tableStock.MinimumStockCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumStockCntNull() {
                this[this.tableStock.MinimumStockCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumStockCntNull() {
                return this.IsNull(this.tableStock.MaximumStockCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumStockCntNull() {
                this[this.tableStock.MaximumStockCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseShelfNoNull() {
                return this.IsNull(this.tableStock.WarehouseShelfNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseShelfNoNull() {
                this[this.tableStock.WarehouseShelfNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNameNull() {
                return this.IsNull(this.tableStock.WarehouseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNameNull() {
                this[this.tableStock.WarehouseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionStateNull() {
                return this.IsNull(this.tableStock.SelectionStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionStateNull() {
                this[this.tableStock.SelectionStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelImageNull() {
                return this.IsNull(this.tableStock.SelImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelImageNull() {
                this[this.tableStock.SelImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortDivNull() {
                return this.IsNull(this.tableStock.SortDivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortDivNull() {
                this[this.tableStock.SortDivColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GoodsSetRowChangeEvent : global::System.EventArgs {
            
            private GoodsSetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsSetRowChangeEvent(GoodsSetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsSetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SetMainRowChangeEvent : global::System.EventArgs {
            
            private SetMainRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetMainRowChangeEvent(SetMainRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetMainRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockRowChangeEvent : global::System.EventArgs {
            
            private StockRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRowChangeEvent(StockRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591