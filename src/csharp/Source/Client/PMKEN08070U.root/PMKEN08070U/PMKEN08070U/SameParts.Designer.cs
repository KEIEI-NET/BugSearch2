//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3615
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Library.Windows.Forms {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SameParts")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    internal partial class SameParts : global::System.Data.DataSet {
        
        private SamePartsDataTable tableSameParts;
        
        private StockDataTable tableStock;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SameParts() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SameParts(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SameParts"] != null)) {
                    base.Tables.Add(new SamePartsDataTable(ds.Tables["SameParts"]));
                }
                if ((ds.Tables["Stock"] != null)) {
                    base.Tables.Add(new StockDataTable(ds.Tables["Stock"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SamePartsDataTable _SameParts {
            get {
                return this.tableSameParts;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockDataTable Stock {
            get {
                return this.tableStock;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SameParts cln = ((SameParts)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SameParts"] != null)) {
                    base.Tables.Add(new SamePartsDataTable(ds.Tables["SameParts"]));
                }
                if ((ds.Tables["Stock"] != null)) {
                    base.Tables.Add(new StockDataTable(ds.Tables["Stock"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSameParts = ((SamePartsDataTable)(base.Tables["SameParts"]));
            if ((initTable == true)) {
                if ((this.tableSameParts != null)) {
                    this.tableSameParts.InitVars();
                }
            }
            this.tableStock = ((StockDataTable)(base.Tables["Stock"]));
            if ((initTable == true)) {
                if ((this.tableStock != null)) {
                    this.tableStock.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SameParts";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SameParts.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSameParts = new SamePartsDataTable();
            base.Tables.Add(this.tableSameParts);
            this.tableStock = new StockDataTable();
            base.Tables.Add(this.tableStock);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_SameParts() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStock() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SameParts ds = new SameParts();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SamePartsRowChangeEventHandler(object sender, SamePartsRowChangeEvent e);
        
        public delegate void StockRowChangeEventHandler(object sender, StockRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SamePartsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMakerCode;
            
            private global::System.Data.DataColumn columnMakerName;
            
            private global::System.Data.DataColumn columnPartsNo;
            
            private global::System.Data.DataColumn columnPartsName;
            
            private global::System.Data.DataColumn columnPrice;
            
            private global::System.Data.DataColumn columnSubst;
            
            private global::System.Data.DataColumn columnSet;
            
            private global::System.Data.DataColumn columnJoin;
            
            private global::System.Data.DataColumn columnAttr;
            
            private global::System.Data.DataColumn columnSelectionState;
            
            private global::System.Data.DataColumn columnOldPartsNo;
            
            private global::System.Data.DataColumn columnWarehouse;
            
            private global::System.Data.DataColumn columnShelf;
            
            private global::System.Data.DataColumn columnStockCnt;
            
            private global::System.Data.DataColumn columnPartsNoToShow;
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            private global::System.Data.DataColumn columnMakerCodeToShow;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SamePartsDataTable() {
                this.TableName = "SameParts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SamePartsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SamePartsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakerCodeColumn {
                get {
                    return this.columnMakerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakerNameColumn {
                get {
                    return this.columnMakerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartsNoColumn {
                get {
                    return this.columnPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartsNameColumn {
                get {
                    return this.columnPartsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubstColumn {
                get {
                    return this.columnSubst;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetColumn {
                get {
                    return this.columnSet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinColumn {
                get {
                    return this.columnJoin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttrColumn {
                get {
                    return this.columnAttr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionStateColumn {
                get {
                    return this.columnSelectionState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OldPartsNoColumn {
                get {
                    return this.columnOldPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseColumn {
                get {
                    return this.columnWarehouse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShelfColumn {
                get {
                    return this.columnShelf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockCntColumn {
                get {
                    return this.columnStockCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartsNoToShowColumn {
                get {
                    return this.columnPartsNoToShow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakerCodeToShowColumn {
                get {
                    return this.columnMakerCodeToShow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SamePartsRow this[int index] {
                get {
                    return ((SamePartsRow)(this.Rows[index]));
                }
            }
            
            public event SamePartsRowChangeEventHandler SamePartsRowChanging;
            
            public event SamePartsRowChangeEventHandler SamePartsRowChanged;
            
            public event SamePartsRowChangeEventHandler SamePartsRowDeleting;
            
            public event SamePartsRowChangeEventHandler SamePartsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSamePartsRow(SamePartsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SamePartsRow AddSamePartsRow(
                        int MakerCode, 
                        string MakerName, 
                        string PartsNo, 
                        string PartsName, 
                        double Price, 
                        System.Drawing.Image Subst, 
                        System.Drawing.Image Set, 
                        System.Drawing.Image Join, 
                        string Attr, 
                        bool SelectionState, 
                        string OldPartsNo, 
                        string Warehouse, 
                        string Shelf, 
                        double StockCnt, 
                        string PartsNoToShow, 
                        string WarehouseCode, 
                        int MakerCodeToShow) {
                SamePartsRow rowSamePartsRow = ((SamePartsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MakerCode,
                        MakerName,
                        PartsNo,
                        PartsName,
                        Price,
                        Subst,
                        Set,
                        Join,
                        Attr,
                        SelectionState,
                        OldPartsNo,
                        Warehouse,
                        Shelf,
                        StockCnt,
                        PartsNoToShow,
                        WarehouseCode,
                        MakerCodeToShow};
                rowSamePartsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSamePartsRow);
                return rowSamePartsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SamePartsRow FindByMakerCodePartsNo(int MakerCode, string PartsNo) {
                return ((SamePartsRow)(this.Rows.Find(new object[] {
                            MakerCode,
                            PartsNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SamePartsDataTable cln = ((SamePartsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SamePartsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMakerCode = base.Columns["MakerCode"];
                this.columnMakerName = base.Columns["MakerName"];
                this.columnPartsNo = base.Columns["PartsNo"];
                this.columnPartsName = base.Columns["PartsName"];
                this.columnPrice = base.Columns["Price"];
                this.columnSubst = base.Columns["Subst"];
                this.columnSet = base.Columns["Set"];
                this.columnJoin = base.Columns["Join"];
                this.columnAttr = base.Columns["Attr"];
                this.columnSelectionState = base.Columns["SelectionState"];
                this.columnOldPartsNo = base.Columns["OldPartsNo"];
                this.columnWarehouse = base.Columns["Warehouse"];
                this.columnShelf = base.Columns["Shelf"];
                this.columnStockCnt = base.Columns["StockCnt"];
                this.columnPartsNoToShow = base.Columns["PartsNoToShow"];
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
                this.columnMakerCodeToShow = base.Columns["MakerCodeToShow"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMakerCode = new global::System.Data.DataColumn("MakerCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMakerCode);
                this.columnMakerName = new global::System.Data.DataColumn("MakerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMakerName);
                this.columnPartsNo = new global::System.Data.DataColumn("PartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartsNo);
                this.columnPartsName = new global::System.Data.DataColumn("PartsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartsName);
                this.columnPrice = new global::System.Data.DataColumn("Price", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnSubst = new global::System.Data.DataColumn("Subst", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubst);
                this.columnSet = new global::System.Data.DataColumn("Set", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSet);
                this.columnJoin = new global::System.Data.DataColumn("Join", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoin);
                this.columnAttr = new global::System.Data.DataColumn("Attr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttr);
                this.columnSelectionState = new global::System.Data.DataColumn("SelectionState", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionState);
                this.columnOldPartsNo = new global::System.Data.DataColumn("OldPartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldPartsNo);
                this.columnWarehouse = new global::System.Data.DataColumn("Warehouse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouse);
                this.columnShelf = new global::System.Data.DataColumn("Shelf", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShelf);
                this.columnStockCnt = new global::System.Data.DataColumn("StockCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockCnt);
                this.columnPartsNoToShow = new global::System.Data.DataColumn("PartsNoToShow", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartsNoToShow);
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.columnMakerCodeToShow = new global::System.Data.DataColumn("MakerCodeToShow", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMakerCodeToShow);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMakerCode,
                                this.columnPartsNo}, true));
                this.columnMakerCode.AllowDBNull = false;
                this.columnMakerCode.Caption = "ﾒｰｶｰ";
                this.columnMakerCode.DefaultValue = ((int)(0));
                this.columnMakerName.Caption = "メーカー名";
                this.columnMakerName.DefaultValue = ((string)(""));
                this.columnPartsNo.AllowDBNull = false;
                this.columnPartsNo.Caption = "品番";
                this.columnPartsNo.DefaultValue = ((string)(""));
                this.columnPartsName.Caption = "品名";
                this.columnPartsName.DefaultValue = ((string)(""));
                this.columnPrice.Caption = "標準価格";
                this.columnPrice.DefaultValue = ((double)(0));
                this.columnSubst.Caption = "代替";
                this.columnSet.Caption = "ｾｯﾄ";
                this.columnJoin.Caption = "結合";
                this.columnAttr.Caption = "区分";
                this.columnAttr.DefaultValue = ((string)(""));
                this.columnSelectionState.DefaultValue = ((bool)(false));
                this.columnOldPartsNo.Caption = "旧品番";
                this.columnOldPartsNo.DefaultValue = ((string)(""));
                this.columnWarehouse.Caption = "倉庫";
                this.columnWarehouse.DefaultValue = ((string)(""));
                this.columnShelf.Caption = "棚番";
                this.columnShelf.DefaultValue = ((string)(""));
                this.columnStockCnt.Caption = "現在庫";
                this.columnStockCnt.DefaultValue = ((double)(0));
                this.columnPartsNoToShow.Caption = "品番";
                this.columnPartsNoToShow.DefaultValue = ((string)(""));
                this.columnWarehouseCode.DefaultValue = ((string)(""));
                this.columnMakerCodeToShow.Caption = "ﾒｰｶｰ";
                this.columnMakerCodeToShow.DefaultValue = ((int)(0));
                this.ExtendedProperties.Add("Generator_TablePropName", "_SameParts");
                this.ExtendedProperties.Add("Generator_UserTableName", "SameParts");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SamePartsRow NewSamePartsRow() {
                return ((SamePartsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SamePartsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SamePartsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SamePartsRowChanged != null)) {
                    this.SamePartsRowChanged(this, new SamePartsRowChangeEvent(((SamePartsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SamePartsRowChanging != null)) {
                    this.SamePartsRowChanging(this, new SamePartsRowChangeEvent(((SamePartsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SamePartsRowDeleted != null)) {
                    this.SamePartsRowDeleted(this, new SamePartsRowChangeEvent(((SamePartsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SamePartsRowDeleting != null)) {
                    this.SamePartsRowDeleting(this, new SamePartsRowChangeEvent(((SamePartsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSamePartsRow(SamePartsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SameParts ds = new SameParts();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SamePartsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            private global::System.Data.DataColumn columnGoodsMakerCd;
            
            private global::System.Data.DataColumn columnGoodsNo;
            
            private global::System.Data.DataColumn columnShipmentPosCnt;
            
            private global::System.Data.DataColumn columnMinimumStockCnt;
            
            private global::System.Data.DataColumn columnMaximumStockCnt;
            
            private global::System.Data.DataColumn columnWarehouseShelfNo;
            
            private global::System.Data.DataColumn columnWarehouseName;
            
            private global::System.Data.DataColumn columnSelectionState;
            
            private global::System.Data.DataColumn columnSelImage;
            
            private global::System.Data.DataColumn columnSortDiv;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDataTable() {
                this.TableName = "Stock";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsMakerCdColumn {
                get {
                    return this.columnGoodsMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNoColumn {
                get {
                    return this.columnGoodsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipmentPosCntColumn {
                get {
                    return this.columnShipmentPosCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumStockCntColumn {
                get {
                    return this.columnMinimumStockCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumStockCntColumn {
                get {
                    return this.columnMaximumStockCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseShelfNoColumn {
                get {
                    return this.columnWarehouseShelfNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseNameColumn {
                get {
                    return this.columnWarehouseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectionStateColumn {
                get {
                    return this.columnSelectionState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelImageColumn {
                get {
                    return this.columnSelImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortDivColumn {
                get {
                    return this.columnSortDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow this[int index] {
                get {
                    return ((StockRow)(this.Rows[index]));
                }
            }
            
            public event StockRowChangeEventHandler StockRowChanging;
            
            public event StockRowChangeEventHandler StockRowChanged;
            
            public event StockRowChangeEventHandler StockRowDeleting;
            
            public event StockRowChangeEventHandler StockRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockRow(StockRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow AddStockRow(string WarehouseCode, int GoodsMakerCd, string GoodsNo, double ShipmentPosCnt, double MinimumStockCnt, double MaximumStockCnt, string WarehouseShelfNo, string WarehouseName, bool SelectionState, System.Drawing.Image SelImage, int SortDiv) {
                StockRow rowStockRow = ((StockRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WarehouseCode,
                        GoodsMakerCd,
                        GoodsNo,
                        ShipmentPosCnt,
                        MinimumStockCnt,
                        MaximumStockCnt,
                        WarehouseShelfNo,
                        WarehouseName,
                        SelectionState,
                        SelImage,
                        SortDiv};
                rowStockRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStockRow);
                return rowStockRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow FindByWarehouseCodeGoodsMakerCdGoodsNo(string WarehouseCode, int GoodsMakerCd, string GoodsNo) {
                return ((StockRow)(this.Rows.Find(new object[] {
                            WarehouseCode,
                            GoodsMakerCd,
                            GoodsNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StockDataTable cln = ((StockDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StockDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
                this.columnGoodsMakerCd = base.Columns["GoodsMakerCd"];
                this.columnGoodsNo = base.Columns["GoodsNo"];
                this.columnShipmentPosCnt = base.Columns["ShipmentPosCnt"];
                this.columnMinimumStockCnt = base.Columns["MinimumStockCnt"];
                this.columnMaximumStockCnt = base.Columns["MaximumStockCnt"];
                this.columnWarehouseShelfNo = base.Columns["WarehouseShelfNo"];
                this.columnWarehouseName = base.Columns["WarehouseName"];
                this.columnSelectionState = base.Columns["SelectionState"];
                this.columnSelImage = base.Columns["SelImage"];
                this.columnSortDiv = base.Columns["SortDiv"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.columnGoodsMakerCd = new global::System.Data.DataColumn("GoodsMakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsMakerCd);
                this.columnGoodsNo = new global::System.Data.DataColumn("GoodsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsNo);
                this.columnShipmentPosCnt = new global::System.Data.DataColumn("ShipmentPosCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipmentPosCnt);
                this.columnMinimumStockCnt = new global::System.Data.DataColumn("MinimumStockCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumStockCnt);
                this.columnMaximumStockCnt = new global::System.Data.DataColumn("MaximumStockCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumStockCnt);
                this.columnWarehouseShelfNo = new global::System.Data.DataColumn("WarehouseShelfNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseShelfNo);
                this.columnWarehouseName = new global::System.Data.DataColumn("WarehouseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseName);
                this.columnSelectionState = new global::System.Data.DataColumn("SelectionState", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionState);
                this.columnSelImage = new global::System.Data.DataColumn("SelImage", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelImage);
                this.columnSortDiv = new global::System.Data.DataColumn("SortDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortDiv);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWarehouseCode,
                                this.columnGoodsMakerCd,
                                this.columnGoodsNo}, true));
                this.columnWarehouseCode.AllowDBNull = false;
                this.columnWarehouseCode.Caption = "倉庫コード";
                this.columnWarehouseCode.DefaultValue = ((string)(""));
                this.columnWarehouseCode.MaxLength = 6;
                this.columnGoodsMakerCd.AllowDBNull = false;
                this.columnGoodsMakerCd.Caption = "商品メーカー";
                this.columnGoodsMakerCd.DefaultValue = ((int)(0));
                this.columnGoodsNo.AllowDBNull = false;
                this.columnGoodsNo.Caption = "品番";
                this.columnGoodsNo.DefaultValue = ((string)(""));
                this.columnGoodsNo.MaxLength = 40;
                this.columnShipmentPosCnt.Caption = "現在庫数";
                this.columnShipmentPosCnt.DefaultValue = ((double)(0));
                this.columnMinimumStockCnt.Caption = "最低在庫数";
                this.columnMinimumStockCnt.DefaultValue = ((double)(0));
                this.columnMaximumStockCnt.Caption = "最高在庫数";
                this.columnMaximumStockCnt.DefaultValue = ((double)(0));
                this.columnWarehouseShelfNo.Caption = "棚番";
                this.columnWarehouseShelfNo.DefaultValue = ((string)(""));
                this.columnWarehouseShelfNo.MaxLength = 8;
                this.columnWarehouseName.Caption = "倉庫";
                this.columnWarehouseName.DefaultValue = ((string)(""));
                this.columnSelectionState.DefaultValue = ((bool)(false));
                this.columnSelImage.Caption = "選択";
                this.columnSortDiv.Caption = "ソート区分";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow NewStockRow() {
                return ((StockRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StockRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StockRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockRowChanged != null)) {
                    this.StockRowChanged(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockRowChanging != null)) {
                    this.StockRowChanging(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockRowDeleted != null)) {
                    this.StockRowDeleted(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockRowDeleting != null)) {
                    this.StockRowDeleting(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockRow(StockRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SameParts ds = new SameParts();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SamePartsRow : global::System.Data.DataRow {
            
            private SamePartsDataTable tableSameParts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SamePartsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSameParts = ((SamePartsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MakerCode {
                get {
                    return ((int)(this[this.tableSameParts.MakerCodeColumn]));
                }
                set {
                    this[this.tableSameParts.MakerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MakerName {
                get {
                    try {
                        return ((string)(this[this.tableSameParts.MakerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'MakerName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.MakerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartsNo {
                get {
                    return ((string)(this[this.tableSameParts.PartsNoColumn]));
                }
                set {
                    this[this.tableSameParts.PartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartsName {
                get {
                    try {
                        return ((string)(this[this.tableSameParts.PartsNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'PartsName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.PartsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Price {
                get {
                    try {
                        return ((double)(this[this.tableSameParts.PriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'Price\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.PriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image Subst {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableSameParts.SubstColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'Subst\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.SubstColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image Set {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableSameParts.SetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'Set\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.SetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image Join {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableSameParts.JoinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'Join\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.JoinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Attr {
                get {
                    try {
                        return ((string)(this[this.tableSameParts.AttrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'Attr\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.AttrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SelectionState {
                get {
                    try {
                        return ((bool)(this[this.tableSameParts.SelectionStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'SelectionState\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.SelectionStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OldPartsNo {
                get {
                    try {
                        return ((string)(this[this.tableSameParts.OldPartsNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'OldPartsNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.OldPartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Warehouse {
                get {
                    try {
                        return ((string)(this[this.tableSameParts.WarehouseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'Warehouse\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.WarehouseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shelf {
                get {
                    try {
                        return ((string)(this[this.tableSameParts.ShelfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'Shelf\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.ShelfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockCnt {
                get {
                    try {
                        return ((double)(this[this.tableSameParts.StockCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'StockCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.StockCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartsNoToShow {
                get {
                    try {
                        return ((string)(this[this.tableSameParts.PartsNoToShowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'PartsNoToShow\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.PartsNoToShowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    if (this.IsWarehouseCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSameParts.WarehouseCodeColumn]));
                    }
                }
                set {
                    this[this.tableSameParts.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MakerCodeToShow {
                get {
                    try {
                        return ((int)(this[this.tableSameParts.MakerCodeToShowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'SameParts\' にある列 \'MakerCodeToShow\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableSameParts.MakerCodeToShowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMakerNameNull() {
                return this.IsNull(this.tableSameParts.MakerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMakerNameNull() {
                this[this.tableSameParts.MakerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartsNameNull() {
                return this.IsNull(this.tableSameParts.PartsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPartsNameNull() {
                this[this.tableSameParts.PartsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tableSameParts.PriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tableSameParts.PriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubstNull() {
                return this.IsNull(this.tableSameParts.SubstColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubstNull() {
                this[this.tableSameParts.SubstColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetNull() {
                return this.IsNull(this.tableSameParts.SetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetNull() {
                this[this.tableSameParts.SetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoinNull() {
                return this.IsNull(this.tableSameParts.JoinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoinNull() {
                this[this.tableSameParts.JoinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttrNull() {
                return this.IsNull(this.tableSameParts.AttrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttrNull() {
                this[this.tableSameParts.AttrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionStateNull() {
                return this.IsNull(this.tableSameParts.SelectionStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionStateNull() {
                this[this.tableSameParts.SelectionStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOldPartsNoNull() {
                return this.IsNull(this.tableSameParts.OldPartsNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOldPartsNoNull() {
                this[this.tableSameParts.OldPartsNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNull() {
                return this.IsNull(this.tableSameParts.WarehouseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNull() {
                this[this.tableSameParts.WarehouseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShelfNull() {
                return this.IsNull(this.tableSameParts.ShelfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShelfNull() {
                this[this.tableSameParts.ShelfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockCntNull() {
                return this.IsNull(this.tableSameParts.StockCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockCntNull() {
                this[this.tableSameParts.StockCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartsNoToShowNull() {
                return this.IsNull(this.tableSameParts.PartsNoToShowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPartsNoToShowNull() {
                this[this.tableSameParts.PartsNoToShowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseCodeNull() {
                return this.IsNull(this.tableSameParts.WarehouseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseCodeNull() {
                this[this.tableSameParts.WarehouseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMakerCodeToShowNull() {
                return this.IsNull(this.tableSameParts.MakerCodeToShowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMakerCodeToShowNull() {
                this[this.tableSameParts.MakerCodeToShowColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockRow : global::System.Data.DataRow {
            
            private StockDataTable tableStock;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStock = ((StockDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    return ((string)(this[this.tableStock.WarehouseCodeColumn]));
                }
                set {
                    this[this.tableStock.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GoodsMakerCd {
                get {
                    return ((int)(this[this.tableStock.GoodsMakerCdColumn]));
                }
                set {
                    this[this.tableStock.GoodsMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsNo {
                get {
                    return ((string)(this[this.tableStock.GoodsNoColumn]));
                }
                set {
                    this[this.tableStock.GoodsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ShipmentPosCnt {
                get {
                    try {
                        return ((double)(this[this.tableStock.ShipmentPosCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'ShipmentPosCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.ShipmentPosCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MinimumStockCnt {
                get {
                    try {
                        return ((double)(this[this.tableStock.MinimumStockCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'MinimumStockCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.MinimumStockCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MaximumStockCnt {
                get {
                    try {
                        return ((double)(this[this.tableStock.MaximumStockCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'MaximumStockCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.MaximumStockCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseShelfNo {
                get {
                    try {
                        return ((string)(this[this.tableStock.WarehouseShelfNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'WarehouseShelfNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.WarehouseShelfNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseName {
                get {
                    try {
                        return ((string)(this[this.tableStock.WarehouseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'WarehouseName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.WarehouseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SelectionState {
                get {
                    try {
                        return ((bool)(this[this.tableStock.SelectionStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'SelectionState\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.SelectionStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image SelImage {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableStock.SelImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'SelImage\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.SelImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortDiv {
                get {
                    try {
                        return ((int)(this[this.tableStock.SortDivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Stock\' にある列 \'SortDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableStock.SortDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipmentPosCntNull() {
                return this.IsNull(this.tableStock.ShipmentPosCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipmentPosCntNull() {
                this[this.tableStock.ShipmentPosCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumStockCntNull() {
                return this.IsNull(this.tableStock.MinimumStockCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumStockCntNull() {
                this[this.tableStock.MinimumStockCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumStockCntNull() {
                return this.IsNull(this.tableStock.MaximumStockCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumStockCntNull() {
                this[this.tableStock.MaximumStockCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseShelfNoNull() {
                return this.IsNull(this.tableStock.WarehouseShelfNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseShelfNoNull() {
                this[this.tableStock.WarehouseShelfNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNameNull() {
                return this.IsNull(this.tableStock.WarehouseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNameNull() {
                this[this.tableStock.WarehouseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectionStateNull() {
                return this.IsNull(this.tableStock.SelectionStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectionStateNull() {
                this[this.tableStock.SelectionStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelImageNull() {
                return this.IsNull(this.tableStock.SelImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelImageNull() {
                this[this.tableStock.SelImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSortDivNull() {
                return this.IsNull(this.tableStock.SortDivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSortDivNull() {
                this[this.tableStock.SortDivColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SamePartsRowChangeEvent : global::System.EventArgs {
            
            private SamePartsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SamePartsRowChangeEvent(SamePartsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SamePartsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockRowChangeEvent : global::System.EventArgs {
            
            private StockRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRowChangeEvent(StockRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591