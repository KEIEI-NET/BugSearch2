//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3643
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GoodsInputDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GoodsInputDataSet : global::System.Data.DataSet {
        
        private GoodsPriceDataTable tableGoodsPrice;
        
        private ProcMoneyDataTable tableProcMoney;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GoodsInputDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected GoodsInputDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GoodsPrice"] != null)) {
                    base.Tables.Add(new GoodsPriceDataTable(ds.Tables["GoodsPrice"]));
                }
                if ((ds.Tables["ProcMoney"] != null)) {
                    base.Tables.Add(new ProcMoneyDataTable(ds.Tables["ProcMoney"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GoodsPriceDataTable GoodsPrice {
            get {
                return this.tableGoodsPrice;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProcMoneyDataTable ProcMoney {
            get {
                return this.tableProcMoney;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            GoodsInputDataSet cln = ((GoodsInputDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GoodsPrice"] != null)) {
                    base.Tables.Add(new GoodsPriceDataTable(ds.Tables["GoodsPrice"]));
                }
                if ((ds.Tables["ProcMoney"] != null)) {
                    base.Tables.Add(new ProcMoneyDataTable(ds.Tables["ProcMoney"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGoodsPrice = ((GoodsPriceDataTable)(base.Tables["GoodsPrice"]));
            if ((initTable == true)) {
                if ((this.tableGoodsPrice != null)) {
                    this.tableGoodsPrice.InitVars();
                }
            }
            this.tableProcMoney = ((ProcMoneyDataTable)(base.Tables["ProcMoney"]));
            if ((initTable == true)) {
                if ((this.tableProcMoney != null)) {
                    this.tableProcMoney.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GoodsInputDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGoodsPrice = new GoodsPriceDataTable();
            base.Tables.Add(this.tableGoodsPrice);
            this.tableProcMoney = new ProcMoneyDataTable();
            base.Tables.Add(this.tableProcMoney);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGoodsPrice() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProcMoney() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GoodsInputDataSet ds = new GoodsInputDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GoodsPriceRowChangeEventHandler(object sender, GoodsPriceRowChangeEvent e);
        
        public delegate void ProcMoneyRowChangeEventHandler(object sender, ProcMoneyRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GoodsPriceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCreateDateTime;
            
            private global::System.Data.DataColumn columnUpdateDateTime;
            
            private global::System.Data.DataColumn columnEnterpriseCode;
            
            private global::System.Data.DataColumn columnFileHeaderGuid;
            
            private global::System.Data.DataColumn columnUpdEmployeeCode;
            
            private global::System.Data.DataColumn columnUpdAssemblyId1;
            
            private global::System.Data.DataColumn columnUpdAssemblyId2;
            
            private global::System.Data.DataColumn columnLogicalDeleteCode;
            
            private global::System.Data.DataColumn columnRowNo;
            
            private global::System.Data.DataColumn columnGoodsMakerCd;
            
            private global::System.Data.DataColumn columnGoodsNo;
            
            private global::System.Data.DataColumn columnPriceStartDate;
            
            private global::System.Data.DataColumn columnPriceStartDateYear;
            
            private global::System.Data.DataColumn columnPriceStartDateMonth;
            
            private global::System.Data.DataColumn columnPriceStartDateDay;
            
            private global::System.Data.DataColumn columnListPrice;
            
            private global::System.Data.DataColumn columnSalesUnitCost;
            
            private global::System.Data.DataColumn columnStockRate;
            
            private global::System.Data.DataColumn columnOpenPriceDiv;
            
            private global::System.Data.DataColumn columnOfferDate;
            
            private global::System.Data.DataColumn columnUpdateDate;
            
            private global::System.Data.DataColumn columnCalcStockRate;
            
            private global::System.Data.DataColumn columnCalcSalesUnitCost;
            
            private global::System.Data.DataColumn columnCalcMaster;
            
            private global::System.Data.DataColumn columnPriorityOrder;
            
            private global::System.Data.DataColumn columnStockUnPrcFrcProcCd;
            
            private global::System.Data.DataColumn columnPriceStartDateDis;
            
            private static System.DateTime columnCreateDateTime_defaultValue = global::System.DateTime.Parse("01/01/0001 00:00:00");
            
            private static System.DateTime columnUpdateDateTime_defaultValue = global::System.DateTime.Parse("01/01/0001 00:00:00");
            
            private static System.DateTime columnPriceStartDate_defaultValue = global::System.DateTime.Parse("01/01/0001 00:00:00");
            
            private static System.DateTime columnOfferDate_defaultValue = global::System.DateTime.Parse("01/01/0001 00:00:00");
            
            private static System.DateTime columnUpdateDate_defaultValue = global::System.DateTime.Parse("01/01/0001 00:00:00");
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsPriceDataTable() {
                this.TableName = "GoodsPrice";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GoodsPriceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GoodsPriceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateTimeColumn {
                get {
                    return this.columnCreateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateTimeColumn {
                get {
                    return this.columnUpdateDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnterpriseCodeColumn {
                get {
                    return this.columnEnterpriseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileHeaderGuidColumn {
                get {
                    return this.columnFileHeaderGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdEmployeeCodeColumn {
                get {
                    return this.columnUpdEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdAssemblyId1Column {
                get {
                    return this.columnUpdAssemblyId1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdAssemblyId2Column {
                get {
                    return this.columnUpdAssemblyId2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogicalDeleteCodeColumn {
                get {
                    return this.columnLogicalDeleteCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowNoColumn {
                get {
                    return this.columnRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsMakerCdColumn {
                get {
                    return this.columnGoodsMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNoColumn {
                get {
                    return this.columnGoodsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceStartDateColumn {
                get {
                    return this.columnPriceStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceStartDateYearColumn {
                get {
                    return this.columnPriceStartDateYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceStartDateMonthColumn {
                get {
                    return this.columnPriceStartDateMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceStartDateDayColumn {
                get {
                    return this.columnPriceStartDateDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ListPriceColumn {
                get {
                    return this.columnListPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesUnitCostColumn {
                get {
                    return this.columnSalesUnitCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockRateColumn {
                get {
                    return this.columnStockRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpenPriceDivColumn {
                get {
                    return this.columnOpenPriceDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OfferDateColumn {
                get {
                    return this.columnOfferDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateColumn {
                get {
                    return this.columnUpdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalcStockRateColumn {
                get {
                    return this.columnCalcStockRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalcSalesUnitCostColumn {
                get {
                    return this.columnCalcSalesUnitCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalcMasterColumn {
                get {
                    return this.columnCalcMaster;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityOrderColumn {
                get {
                    return this.columnPriorityOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockUnPrcFrcProcCdColumn {
                get {
                    return this.columnStockUnPrcFrcProcCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceStartDateDisColumn {
                get {
                    return this.columnPriceStartDateDis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsPriceRow this[int index] {
                get {
                    return ((GoodsPriceRow)(this.Rows[index]));
                }
            }
            
            public event GoodsPriceRowChangeEventHandler GoodsPriceRowChanging;
            
            public event GoodsPriceRowChangeEventHandler GoodsPriceRowChanged;
            
            public event GoodsPriceRowChangeEventHandler GoodsPriceRowDeleting;
            
            public event GoodsPriceRowChangeEventHandler GoodsPriceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGoodsPriceRow(GoodsPriceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsPriceRow AddGoodsPriceRow(
                        System.DateTime CreateDateTime, 
                        System.DateTime UpdateDateTime, 
                        string EnterpriseCode, 
                        System.Guid FileHeaderGuid, 
                        string UpdEmployeeCode, 
                        string UpdAssemblyId1, 
                        string UpdAssemblyId2, 
                        int LogicalDeleteCode, 
                        int RowNo, 
                        int GoodsMakerCd, 
                        string GoodsNo, 
                        System.DateTime PriceStartDate, 
                        int PriceStartDateYear, 
                        int PriceStartDateMonth, 
                        int PriceStartDateDay, 
                        double ListPrice, 
                        double SalesUnitCost, 
                        double StockRate, 
                        int OpenPriceDiv, 
                        System.DateTime OfferDate, 
                        System.DateTime UpdateDate, 
                        double CalcStockRate, 
                        double CalcSalesUnitCost, 
                        string CalcMaster, 
                        int PriorityOrder, 
                        int StockUnPrcFrcProcCd, 
                        int PriceStartDateDis) {
                GoodsPriceRow rowGoodsPriceRow = ((GoodsPriceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CreateDateTime,
                        UpdateDateTime,
                        EnterpriseCode,
                        FileHeaderGuid,
                        UpdEmployeeCode,
                        UpdAssemblyId1,
                        UpdAssemblyId2,
                        LogicalDeleteCode,
                        RowNo,
                        GoodsMakerCd,
                        GoodsNo,
                        PriceStartDate,
                        PriceStartDateYear,
                        PriceStartDateMonth,
                        PriceStartDateDay,
                        ListPrice,
                        SalesUnitCost,
                        StockRate,
                        OpenPriceDiv,
                        OfferDate,
                        UpdateDate,
                        CalcStockRate,
                        CalcSalesUnitCost,
                        CalcMaster,
                        PriorityOrder,
                        StockUnPrcFrcProcCd,
                        PriceStartDateDis};
                rowGoodsPriceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGoodsPriceRow);
                return rowGoodsPriceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsPriceRow FindByRowNo(int RowNo) {
                return ((GoodsPriceRow)(this.Rows.Find(new object[] {
                            RowNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GoodsPriceDataTable cln = ((GoodsPriceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GoodsPriceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCreateDateTime = base.Columns["CreateDateTime"];
                this.columnUpdateDateTime = base.Columns["UpdateDateTime"];
                this.columnEnterpriseCode = base.Columns["EnterpriseCode"];
                this.columnFileHeaderGuid = base.Columns["FileHeaderGuid"];
                this.columnUpdEmployeeCode = base.Columns["UpdEmployeeCode"];
                this.columnUpdAssemblyId1 = base.Columns["UpdAssemblyId1"];
                this.columnUpdAssemblyId2 = base.Columns["UpdAssemblyId2"];
                this.columnLogicalDeleteCode = base.Columns["LogicalDeleteCode"];
                this.columnRowNo = base.Columns["RowNo"];
                this.columnGoodsMakerCd = base.Columns["GoodsMakerCd"];
                this.columnGoodsNo = base.Columns["GoodsNo"];
                this.columnPriceStartDate = base.Columns["PriceStartDate"];
                this.columnPriceStartDateYear = base.Columns["PriceStartDateYear"];
                this.columnPriceStartDateMonth = base.Columns["PriceStartDateMonth"];
                this.columnPriceStartDateDay = base.Columns["PriceStartDateDay"];
                this.columnListPrice = base.Columns["ListPrice"];
                this.columnSalesUnitCost = base.Columns["SalesUnitCost"];
                this.columnStockRate = base.Columns["StockRate"];
                this.columnOpenPriceDiv = base.Columns["OpenPriceDiv"];
                this.columnOfferDate = base.Columns["OfferDate"];
                this.columnUpdateDate = base.Columns["UpdateDate"];
                this.columnCalcStockRate = base.Columns["CalcStockRate"];
                this.columnCalcSalesUnitCost = base.Columns["CalcSalesUnitCost"];
                this.columnCalcMaster = base.Columns["CalcMaster"];
                this.columnPriorityOrder = base.Columns["PriorityOrder"];
                this.columnStockUnPrcFrcProcCd = base.Columns["StockUnPrcFrcProcCd"];
                this.columnPriceStartDateDis = base.Columns["PriceStartDateDis"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCreateDateTime = new global::System.Data.DataColumn("CreateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDateTime);
                this.columnUpdateDateTime = new global::System.Data.DataColumn("UpdateDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDateTime);
                this.columnEnterpriseCode = new global::System.Data.DataColumn("EnterpriseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnterpriseCode);
                this.columnFileHeaderGuid = new global::System.Data.DataColumn("FileHeaderGuid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileHeaderGuid);
                this.columnUpdEmployeeCode = new global::System.Data.DataColumn("UpdEmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdEmployeeCode);
                this.columnUpdAssemblyId1 = new global::System.Data.DataColumn("UpdAssemblyId1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdAssemblyId1);
                this.columnUpdAssemblyId2 = new global::System.Data.DataColumn("UpdAssemblyId2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdAssemblyId2);
                this.columnLogicalDeleteCode = new global::System.Data.DataColumn("LogicalDeleteCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogicalDeleteCode);
                this.columnRowNo = new global::System.Data.DataColumn("RowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNo);
                this.columnGoodsMakerCd = new global::System.Data.DataColumn("GoodsMakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsMakerCd);
                this.columnGoodsNo = new global::System.Data.DataColumn("GoodsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsNo);
                this.columnPriceStartDate = new global::System.Data.DataColumn("PriceStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceStartDate);
                this.columnPriceStartDateYear = new global::System.Data.DataColumn("PriceStartDateYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceStartDateYear);
                this.columnPriceStartDateMonth = new global::System.Data.DataColumn("PriceStartDateMonth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceStartDateMonth);
                this.columnPriceStartDateDay = new global::System.Data.DataColumn("PriceStartDateDay", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceStartDateDay);
                this.columnListPrice = new global::System.Data.DataColumn("ListPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnListPrice);
                this.columnSalesUnitCost = new global::System.Data.DataColumn("SalesUnitCost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesUnitCost);
                this.columnStockRate = new global::System.Data.DataColumn("StockRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockRate);
                this.columnOpenPriceDiv = new global::System.Data.DataColumn("OpenPriceDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpenPriceDiv);
                this.columnOfferDate = new global::System.Data.DataColumn("OfferDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOfferDate);
                this.columnUpdateDate = new global::System.Data.DataColumn("UpdateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDate);
                this.columnCalcStockRate = new global::System.Data.DataColumn("CalcStockRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalcStockRate);
                this.columnCalcSalesUnitCost = new global::System.Data.DataColumn("CalcSalesUnitCost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalcSalesUnitCost);
                this.columnCalcMaster = new global::System.Data.DataColumn("CalcMaster", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalcMaster);
                this.columnPriorityOrder = new global::System.Data.DataColumn("PriorityOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriorityOrder);
                this.columnStockUnPrcFrcProcCd = new global::System.Data.DataColumn("StockUnPrcFrcProcCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockUnPrcFrcProcCd);
                this.columnPriceStartDateDis = new global::System.Data.DataColumn("PriceStartDateDis", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceStartDateDis);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRowNo}, true));
                this.columnCreateDateTime.AllowDBNull = false;
                this.columnCreateDateTime.Caption = "CREATEDATETIMERF";
                this.columnCreateDateTime.DefaultValue = ((System.DateTime)(GoodsPriceDataTable.columnCreateDateTime_defaultValue));
                this.columnUpdateDateTime.AllowDBNull = false;
                this.columnUpdateDateTime.Caption = "UPDATEDATETIMERF";
                this.columnUpdateDateTime.DefaultValue = ((System.DateTime)(GoodsPriceDataTable.columnUpdateDateTime_defaultValue));
                this.columnEnterpriseCode.AllowDBNull = false;
                this.columnEnterpriseCode.Caption = "ENTERPRISECODERF";
                this.columnEnterpriseCode.DefaultValue = ((string)(""));
                this.columnEnterpriseCode.MaxLength = 16;
                this.columnFileHeaderGuid.AllowDBNull = false;
                this.columnFileHeaderGuid.Caption = "FILEHEADERGUIDRF";
                this.columnUpdEmployeeCode.AllowDBNull = false;
                this.columnUpdEmployeeCode.Caption = "UPDEMPLOYEECODERF";
                this.columnUpdEmployeeCode.DefaultValue = ((string)(""));
                this.columnUpdEmployeeCode.MaxLength = 9;
                this.columnUpdAssemblyId1.AllowDBNull = false;
                this.columnUpdAssemblyId1.Caption = "UPDASSEMBLYID1RF";
                this.columnUpdAssemblyId1.DefaultValue = ((string)(""));
                this.columnUpdAssemblyId1.MaxLength = 30;
                this.columnUpdAssemblyId2.AllowDBNull = false;
                this.columnUpdAssemblyId2.Caption = "UPDASSEMBLYID2RF";
                this.columnUpdAssemblyId2.DefaultValue = ((string)(""));
                this.columnUpdAssemblyId2.MaxLength = 30;
                this.columnLogicalDeleteCode.AllowDBNull = false;
                this.columnLogicalDeleteCode.Caption = "LOGICALDELETECODERF";
                this.columnLogicalDeleteCode.DefaultValue = ((int)(0));
                this.columnRowNo.AllowDBNull = false;
                this.columnRowNo.Unique = true;
                this.columnRowNo.Caption = "№";
                this.columnRowNo.DefaultValue = ((int)(0));
                this.columnGoodsMakerCd.AllowDBNull = false;
                this.columnGoodsMakerCd.Caption = "GOODSMAKERCDRF";
                this.columnGoodsMakerCd.DefaultValue = ((int)(0));
                this.columnGoodsNo.AllowDBNull = false;
                this.columnGoodsNo.Caption = "GOODSNORF";
                this.columnGoodsNo.DefaultValue = ((string)(""));
                this.columnGoodsNo.MaxLength = 40;
                this.columnPriceStartDate.AllowDBNull = false;
                this.columnPriceStartDate.Caption = "価格開始日";
                this.columnPriceStartDate.DefaultValue = ((System.DateTime)(GoodsPriceDataTable.columnPriceStartDate_defaultValue));
                this.columnPriceStartDateYear.Caption = "価格開始日 年";
                this.columnPriceStartDateMonth.Caption = "月";
                this.columnPriceStartDateDay.Caption = "日";
                this.columnListPrice.AllowDBNull = false;
                this.columnListPrice.Caption = "価格";
                this.columnListPrice.DefaultValue = ((double)(0));
                this.columnSalesUnitCost.AllowDBNull = false;
                this.columnSalesUnitCost.Caption = "原単価";
                this.columnSalesUnitCost.DefaultValue = ((double)(0));
                this.columnStockRate.AllowDBNull = false;
                this.columnStockRate.Caption = "仕入率";
                this.columnStockRate.DefaultValue = ((double)(0));
                this.columnOpenPriceDiv.AllowDBNull = false;
                this.columnOpenPriceDiv.Caption = "オープン価格区分";
                this.columnOpenPriceDiv.DefaultValue = ((int)(0));
                this.columnOfferDate.AllowDBNull = false;
                this.columnOfferDate.Caption = "提供日付";
                this.columnOfferDate.DefaultValue = ((System.DateTime)(GoodsPriceDataTable.columnOfferDate_defaultValue));
                this.columnUpdateDate.Caption = "更新年月日";
                this.columnUpdateDate.DefaultValue = ((System.DateTime)(GoodsPriceDataTable.columnUpdateDate_defaultValue));
                this.columnCalcStockRate.Caption = "計算原価率";
                this.columnCalcStockRate.DefaultValue = ((double)(0));
                this.columnCalcSalesUnitCost.Caption = "計算原価額";
                this.columnCalcSalesUnitCost.DefaultValue = ((double)(0));
                this.columnCalcMaster.Caption = "算出マスタ";
                this.columnCalcMaster.DefaultValue = ((string)(""));
                this.columnPriorityOrder.Caption = "優先順位";
                this.columnPriorityOrder.DefaultValue = ((int)(0));
                this.columnStockUnPrcFrcProcCd.Caption = "仕入単価端数処理コード";
                this.columnStockUnPrcFrcProcCd.DefaultValue = ((int)(0));
                this.columnPriceStartDateDis.Caption = "価格開始日";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsPriceRow NewGoodsPriceRow() {
                return ((GoodsPriceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GoodsPriceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GoodsPriceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GoodsPriceRowChanged != null)) {
                    this.GoodsPriceRowChanged(this, new GoodsPriceRowChangeEvent(((GoodsPriceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GoodsPriceRowChanging != null)) {
                    this.GoodsPriceRowChanging(this, new GoodsPriceRowChangeEvent(((GoodsPriceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GoodsPriceRowDeleted != null)) {
                    this.GoodsPriceRowDeleted(this, new GoodsPriceRowChangeEvent(((GoodsPriceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GoodsPriceRowDeleting != null)) {
                    this.GoodsPriceRowDeleting(this, new GoodsPriceRowChangeEvent(((GoodsPriceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGoodsPriceRow(GoodsPriceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GoodsInputDataSet ds = new GoodsInputDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GoodsPriceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProcMoneyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFracProcMoneyDiv;
            
            private global::System.Data.DataColumn columnFractionProcCode;
            
            private global::System.Data.DataColumn columnUpperLimitPrice;
            
            private global::System.Data.DataColumn columnFractionProcUnit;
            
            private global::System.Data.DataColumn columnFractionProcCd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcMoneyDataTable() {
                this.TableName = "ProcMoney";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcMoneyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProcMoneyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FracProcMoneyDivColumn {
                get {
                    return this.columnFracProcMoneyDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcCodeColumn {
                get {
                    return this.columnFractionProcCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpperLimitPriceColumn {
                get {
                    return this.columnUpperLimitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcUnitColumn {
                get {
                    return this.columnFractionProcUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FractionProcCdColumn {
                get {
                    return this.columnFractionProcCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcMoneyRow this[int index] {
                get {
                    return ((ProcMoneyRow)(this.Rows[index]));
                }
            }
            
            public event ProcMoneyRowChangeEventHandler ProcMoneyRowChanging;
            
            public event ProcMoneyRowChangeEventHandler ProcMoneyRowChanged;
            
            public event ProcMoneyRowChangeEventHandler ProcMoneyRowDeleting;
            
            public event ProcMoneyRowChangeEventHandler ProcMoneyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProcMoneyRow(ProcMoneyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcMoneyRow AddProcMoneyRow(int FracProcMoneyDiv, int FractionProcCode, double UpperLimitPrice, double FractionProcUnit, int FractionProcCd) {
                ProcMoneyRow rowProcMoneyRow = ((ProcMoneyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FracProcMoneyDiv,
                        FractionProcCode,
                        UpperLimitPrice,
                        FractionProcUnit,
                        FractionProcCd};
                rowProcMoneyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProcMoneyRow);
                return rowProcMoneyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProcMoneyDataTable cln = ((ProcMoneyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProcMoneyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFracProcMoneyDiv = base.Columns["FracProcMoneyDiv"];
                this.columnFractionProcCode = base.Columns["FractionProcCode"];
                this.columnUpperLimitPrice = base.Columns["UpperLimitPrice"];
                this.columnFractionProcUnit = base.Columns["FractionProcUnit"];
                this.columnFractionProcCd = base.Columns["FractionProcCd"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFracProcMoneyDiv = new global::System.Data.DataColumn("FracProcMoneyDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFracProcMoneyDiv);
                this.columnFractionProcCode = new global::System.Data.DataColumn("FractionProcCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcCode);
                this.columnUpperLimitPrice = new global::System.Data.DataColumn("UpperLimitPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpperLimitPrice);
                this.columnFractionProcUnit = new global::System.Data.DataColumn("FractionProcUnit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcUnit);
                this.columnFractionProcCd = new global::System.Data.DataColumn("FractionProcCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFractionProcCd);
                this.columnFracProcMoneyDiv.DefaultValue = ((int)(0));
                this.columnFractionProcCode.DefaultValue = ((int)(0));
                this.columnUpperLimitPrice.DefaultValue = ((double)(0));
                this.columnFractionProcUnit.DefaultValue = ((double)(0));
                this.columnFractionProcCd.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcMoneyRow NewProcMoneyRow() {
                return ((ProcMoneyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProcMoneyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProcMoneyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProcMoneyRowChanged != null)) {
                    this.ProcMoneyRowChanged(this, new ProcMoneyRowChangeEvent(((ProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProcMoneyRowChanging != null)) {
                    this.ProcMoneyRowChanging(this, new ProcMoneyRowChangeEvent(((ProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProcMoneyRowDeleted != null)) {
                    this.ProcMoneyRowDeleted(this, new ProcMoneyRowChangeEvent(((ProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProcMoneyRowDeleting != null)) {
                    this.ProcMoneyRowDeleting(this, new ProcMoneyRowChangeEvent(((ProcMoneyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProcMoneyRow(ProcMoneyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GoodsInputDataSet ds = new GoodsInputDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProcMoneyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GoodsPriceRow : global::System.Data.DataRow {
            
            private GoodsPriceDataTable tableGoodsPrice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GoodsPriceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGoodsPrice = ((GoodsPriceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableGoodsPrice.CreateDateTimeColumn]));
                }
                set {
                    this[this.tableGoodsPrice.CreateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableGoodsPrice.UpdateDateTimeColumn]));
                }
                set {
                    this[this.tableGoodsPrice.UpdateDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnterpriseCode {
                get {
                    return ((string)(this[this.tableGoodsPrice.EnterpriseCodeColumn]));
                }
                set {
                    this[this.tableGoodsPrice.EnterpriseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid FileHeaderGuid {
                get {
                    return ((global::System.Guid)(this[this.tableGoodsPrice.FileHeaderGuidColumn]));
                }
                set {
                    this[this.tableGoodsPrice.FileHeaderGuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdEmployeeCode {
                get {
                    return ((string)(this[this.tableGoodsPrice.UpdEmployeeCodeColumn]));
                }
                set {
                    this[this.tableGoodsPrice.UpdEmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdAssemblyId1 {
                get {
                    return ((string)(this[this.tableGoodsPrice.UpdAssemblyId1Column]));
                }
                set {
                    this[this.tableGoodsPrice.UpdAssemblyId1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UpdAssemblyId2 {
                get {
                    return ((string)(this[this.tableGoodsPrice.UpdAssemblyId2Column]));
                }
                set {
                    this[this.tableGoodsPrice.UpdAssemblyId2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LogicalDeleteCode {
                get {
                    return ((int)(this[this.tableGoodsPrice.LogicalDeleteCodeColumn]));
                }
                set {
                    this[this.tableGoodsPrice.LogicalDeleteCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RowNo {
                get {
                    return ((int)(this[this.tableGoodsPrice.RowNoColumn]));
                }
                set {
                    this[this.tableGoodsPrice.RowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GoodsMakerCd {
                get {
                    return ((int)(this[this.tableGoodsPrice.GoodsMakerCdColumn]));
                }
                set {
                    this[this.tableGoodsPrice.GoodsMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsNo {
                get {
                    return ((string)(this[this.tableGoodsPrice.GoodsNoColumn]));
                }
                set {
                    this[this.tableGoodsPrice.GoodsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PriceStartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGoodsPrice.PriceStartDateColumn]));
                }
                set {
                    this[this.tableGoodsPrice.PriceStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PriceStartDateYear {
                get {
                    try {
                        return ((int)(this[this.tableGoodsPrice.PriceStartDateYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsPrice\' にある列 \'PriceStartDateYear\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsPrice.PriceStartDateYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PriceStartDateMonth {
                get {
                    try {
                        return ((int)(this[this.tableGoodsPrice.PriceStartDateMonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsPrice\' にある列 \'PriceStartDateMonth\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsPrice.PriceStartDateMonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PriceStartDateDay {
                get {
                    try {
                        return ((int)(this[this.tableGoodsPrice.PriceStartDateDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsPrice\' にある列 \'PriceStartDateDay\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsPrice.PriceStartDateDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ListPrice {
                get {
                    return ((double)(this[this.tableGoodsPrice.ListPriceColumn]));
                }
                set {
                    this[this.tableGoodsPrice.ListPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SalesUnitCost {
                get {
                    return ((double)(this[this.tableGoodsPrice.SalesUnitCostColumn]));
                }
                set {
                    this[this.tableGoodsPrice.SalesUnitCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockRate {
                get {
                    return ((double)(this[this.tableGoodsPrice.StockRateColumn]));
                }
                set {
                    this[this.tableGoodsPrice.StockRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OpenPriceDiv {
                get {
                    return ((int)(this[this.tableGoodsPrice.OpenPriceDivColumn]));
                }
                set {
                    this[this.tableGoodsPrice.OpenPriceDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OfferDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGoodsPrice.OfferDateColumn]));
                }
                set {
                    this[this.tableGoodsPrice.OfferDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGoodsPrice.UpdateDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsPrice\' にある列 \'UpdateDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsPrice.UpdateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CalcStockRate {
                get {
                    try {
                        return ((double)(this[this.tableGoodsPrice.CalcStockRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsPrice\' にある列 \'CalcStockRate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsPrice.CalcStockRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CalcSalesUnitCost {
                get {
                    try {
                        return ((double)(this[this.tableGoodsPrice.CalcSalesUnitCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsPrice\' にある列 \'CalcSalesUnitCost\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsPrice.CalcSalesUnitCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CalcMaster {
                get {
                    try {
                        return ((string)(this[this.tableGoodsPrice.CalcMasterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsPrice\' にある列 \'CalcMaster\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsPrice.CalcMasterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PriorityOrder {
                get {
                    try {
                        return ((int)(this[this.tableGoodsPrice.PriorityOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsPrice\' にある列 \'PriorityOrder\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsPrice.PriorityOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StockUnPrcFrcProcCd {
                get {
                    try {
                        return ((int)(this[this.tableGoodsPrice.StockUnPrcFrcProcCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsPrice\' にある列 \'StockUnPrcFrcProcCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsPrice.StockUnPrcFrcProcCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PriceStartDateDis {
                get {
                    try {
                        return ((int)(this[this.tableGoodsPrice.PriceStartDateDisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'GoodsPrice\' にある列 \'PriceStartDateDis\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableGoodsPrice.PriceStartDateDisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceStartDateYearNull() {
                return this.IsNull(this.tableGoodsPrice.PriceStartDateYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceStartDateYearNull() {
                this[this.tableGoodsPrice.PriceStartDateYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceStartDateMonthNull() {
                return this.IsNull(this.tableGoodsPrice.PriceStartDateMonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceStartDateMonthNull() {
                this[this.tableGoodsPrice.PriceStartDateMonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceStartDateDayNull() {
                return this.IsNull(this.tableGoodsPrice.PriceStartDateDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceStartDateDayNull() {
                this[this.tableGoodsPrice.PriceStartDateDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateDateNull() {
                return this.IsNull(this.tableGoodsPrice.UpdateDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateDateNull() {
                this[this.tableGoodsPrice.UpdateDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalcStockRateNull() {
                return this.IsNull(this.tableGoodsPrice.CalcStockRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCalcStockRateNull() {
                this[this.tableGoodsPrice.CalcStockRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalcSalesUnitCostNull() {
                return this.IsNull(this.tableGoodsPrice.CalcSalesUnitCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCalcSalesUnitCostNull() {
                this[this.tableGoodsPrice.CalcSalesUnitCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalcMasterNull() {
                return this.IsNull(this.tableGoodsPrice.CalcMasterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCalcMasterNull() {
                this[this.tableGoodsPrice.CalcMasterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriorityOrderNull() {
                return this.IsNull(this.tableGoodsPrice.PriorityOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriorityOrderNull() {
                this[this.tableGoodsPrice.PriorityOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockUnPrcFrcProcCdNull() {
                return this.IsNull(this.tableGoodsPrice.StockUnPrcFrcProcCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockUnPrcFrcProcCdNull() {
                this[this.tableGoodsPrice.StockUnPrcFrcProcCdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceStartDateDisNull() {
                return this.IsNull(this.tableGoodsPrice.PriceStartDateDisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceStartDateDisNull() {
                this[this.tableGoodsPrice.PriceStartDateDisColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProcMoneyRow : global::System.Data.DataRow {
            
            private ProcMoneyDataTable tableProcMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProcMoneyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProcMoney = ((ProcMoneyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FracProcMoneyDiv {
                get {
                    try {
                        return ((int)(this[this.tableProcMoney.FracProcMoneyDivColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'ProcMoney\' にある列 \'FracProcMoneyDiv\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableProcMoney.FracProcMoneyDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FractionProcCode {
                get {
                    try {
                        return ((int)(this[this.tableProcMoney.FractionProcCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'ProcMoney\' にある列 \'FractionProcCode\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableProcMoney.FractionProcCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UpperLimitPrice {
                get {
                    try {
                        return ((double)(this[this.tableProcMoney.UpperLimitPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'ProcMoney\' にある列 \'UpperLimitPrice\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableProcMoney.UpperLimitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FractionProcUnit {
                get {
                    try {
                        return ((double)(this[this.tableProcMoney.FractionProcUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'ProcMoney\' にある列 \'FractionProcUnit\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableProcMoney.FractionProcUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FractionProcCd {
                get {
                    try {
                        return ((int)(this[this.tableProcMoney.FractionProcCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'ProcMoney\' にある列 \'FractionProcCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableProcMoney.FractionProcCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFracProcMoneyDivNull() {
                return this.IsNull(this.tableProcMoney.FracProcMoneyDivColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFracProcMoneyDivNull() {
                this[this.tableProcMoney.FracProcMoneyDivColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionProcCodeNull() {
                return this.IsNull(this.tableProcMoney.FractionProcCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionProcCodeNull() {
                this[this.tableProcMoney.FractionProcCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpperLimitPriceNull() {
                return this.IsNull(this.tableProcMoney.UpperLimitPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpperLimitPriceNull() {
                this[this.tableProcMoney.UpperLimitPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionProcUnitNull() {
                return this.IsNull(this.tableProcMoney.FractionProcUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionProcUnitNull() {
                this[this.tableProcMoney.FractionProcUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFractionProcCdNull() {
                return this.IsNull(this.tableProcMoney.FractionProcCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFractionProcCdNull() {
                this[this.tableProcMoney.FractionProcCdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GoodsPriceRowChangeEvent : global::System.EventArgs {
            
            private GoodsPriceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsPriceRowChangeEvent(GoodsPriceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsPriceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProcMoneyRowChangeEvent : global::System.EventArgs {
            
            private ProcMoneyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcMoneyRowChangeEvent(ProcMoneyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProcMoneyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591