//****************************************************************************//
// システム         : PM.NS
// プログラム名称   : 商品アクセスクラス
// プログラム概要   : 商品情報の検索/取得を行うアクセサクラス
//----------------------------------------------------------------------------//
//                (c)Copyright  2018 Broadleaf Co.,Ltd.
//============================================================================//
// 履歴
//----------------------------------------------------------------------------//
// 管理番号 :              作成担当 : Y.Sasaki
// 作 成 日 : 2007/01/15   修正内容 : 新規作成
//----------------------------------------------------------------------------//
// 管理番号 : 11470007-00  作成担当 : 30757 佐々木　貴英
// 作 成 日 : 2018/04/05   修正内容 : NS3Ai対応（BL統一部品コード対応）
//----------------------------------------------------------------------------//
// 管理番号  11601223-00   作成担当 : 呉元嘯
// 作 成 日  2021/06/21    修正内容 : PMKOBETSU-3268の対応
//----------------------------------------------------------------------------//
using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.Data;

using Broadleaf.Library.Collections;
using Broadleaf.Application.Remoting;
using Broadleaf.Application.Remoting.ParamData;
using Broadleaf.Application.Remoting.Adapter;
using Broadleaf.Application.UIData;
using Broadleaf.Library.Resources;
using Broadleaf.Application.Common;
using Broadleaf.Windows.Forms;
using Broadleaf.Library.Text;
using Broadleaf.Library.Globarization;
using Broadleaf.Library.Windows.Forms;
using Broadleaf.Application.LocalAccess;
using Broadleaf.Application.Controller;

using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Broadleaf.Application.Controller
{
    /// <summary>
    /// 商品アクセスクラス
    /// </summary>
    /// <remarks>
    /// <br>Note       : 商品のアクセス制御を行います。</br>
    /// <br>Programmer : 18012 Y.Sasaki</br>
    /// <br>Date       : 2007.01.15</br>
    /// <br>Update Note: xxxx.xx.xx</br>
    /// <br>Note       : ローカルDB対応</br>
    /// <br>             （提供分は全てローカルからの読込、ユーザー分はガイドのモード時のみローカル）</br>
    /// <br>Programmer : 980023 飯谷 耕平</br>
    /// <br>Date       : 2007.05.21</br>
    /// <br>-----------------------------------------------------------------------------------------</br>
    /// <br>Programmer : 20056 對馬 大輔</br>
    /// <br>Date       : 2007.08.30</br>
    /// <br>           :・DC.NS対応</br>
    /// <br>UpdateNote : 2008.02.19 96012　日色 馨</br>
    /// <br>           : ローカルＤＢ参照対応</br>
    /// <br>UpdateNote : 2008.02.27 30167　上野　弘貴</br>
    /// <br>           : ガイド表記修正（MAKERGUIDE2.XMLも修正）</br>
    /// <br>UpdateNote : 2008.02.28 30167　上野　弘貴</br>
    /// <br>           : ガイド修正（サーバー固定呼び出しをSearchModeでローカル・サーバーを判別するよう修正）</br>
    /// <br>UpdateNote : 2008.02.29 96012　日色 馨</br>
    /// <br>           : 提供分はローカルＤＢへのアクセスのみ</br>
    /// <br>UpdateNote : 2008.03.01 30167　上野　弘貴</br>
    /// <br>           : ガイド呼び出しメソッドの元インターフェースを復活させる</br>
    /// <br>-----------------------------------------------------------------------------------------</br>
    /// <br>UpdateNote : 2008.06.18 20056 對馬 大輔</br>
    /// <br>           : PM.NS対応(コメント無し)</br>
    /// <br>UpdateNote : 2008.09.02 30452 上野 俊治</br>
    /// <br>           : 商品の完全削除処理追加</br>
    /// <br>UpdateNote : 2008.09.04 22018 鈴木 正臣</br>
    /// <br>           : 商品在庫マスメン対応</br>
    /// <br>           : 　①提供データ読み込み機能削除（提供データ展開により、ユーザー用テーブルにコピーされる為不要になった）</br>
    /// <br>           :   ②在庫マスタ読込・更新機能を追加</br>
    /// <br>           :   ③掛率マスタ読込・更新機能を追加（単品売価）</br>
    /// <br>UpdateNote : 2008.10.01 20056 對馬 大輔</br>
    /// <br>           : 部品検索変更対応</br>
    /// <br>           : 　①各種区分の設定追加</br>
    /// <br>           : 　②検索条件セット方法変更(品番検索(結合検索有り))</br>
    /// <br>UpdateNote : 2008.10.02 20056 對馬 大輔</br>
    /// <br>           : 部品検索変更対応</br>
    /// <br>           : 　①品番検索へ単価算出処理追加(選択ウインドウへ定価表示する為)</br>
    /// <br>UpdateNote : 2008.10.08 20056 對馬 大輔</br>
    /// <br>           : 部品検索変更対応</br>
    /// <br>           : 　①各種区分の設定追加</br>
    /// <br>           : 　②同一品番選択ウインドウ表示方法変更</br>
    /// <br>UpdateNote : 2008.10.10 22018 鈴木 正臣</br>
    /// <br>           : 　①品名取得メソッド[GetGoodsName]を追加 (速度優先の為,static)</br>
    /// <br>           :   ②提供データ区分(OfferDataDiv)を追加</br>
    /// <br>UpdateNote : 2008.10.15 20056 對馬 大輔</br>
    /// <br>           : 部品検索変更対応</br>
    /// <br>           : 　①品番検索時の品番補正処理の追加</br>
    /// <br>UpdateNote : 2008.10.21 20056 對馬 大輔</br>
    /// <br>           : 部品検索変更対応</br>
    /// <br>           : 　①部品検索コントローラーのメーカーリスト設定(同一品番ウインドウのメーカーがユーザー分だと表示されない為)</br>
    /// <br>UpdateNote : 2008.10.23 20056 對馬 大輔</br>
    /// <br>           : 　①商品管理情報キャッシャ項目追加</br>
    /// <br>           : 　②商品管理情報取得処理の全社のチェック方法変更</br>
    /// <br>           : 　③ＢＬコードガイドコールパラメータ追加</br>
    /// <br>UpdateNote : 2008.10.28 20056 對馬 大輔</br>
    /// <br>           : 　①商品管理情報取得処理のチェック方法変更</br>
    /// <br>UpdateNote : 2008.10.29 20056 對馬 大輔</br>
    /// <br>           : 　①一括検索の検索結果データセットリストのセット方法変更</br>
    /// <br>UpdateNote : 2008.10.30 20056 對馬 大輔</br>
    /// <br>           : 　①部品検索、商品検索前の初期情報取得の拠点コードをログイン拠点から商品抽出条件の拠点へ変更</br>
    /// <br>           : 　②不足情報設定処理で使用する拠点をログイン拠点から商品抽出条件の拠点へ変更</br>
    /// <br>UpdateNote : 2008.11.04 20056 對馬 大輔</br>
    /// <br>           : 　①単価算出時の拠点コードを商品連結から、商品抽出条件からセットするように変更</br>
    /// <br>           : 　②ユーザー登録分商品検索時の在庫情報取得処理で倉庫名称をセットするように変更</br>
    /// <br>           : 　③商品検索後、単価算出前に商品連結データへ不足情報を設定するように変更(単価算出で仕入先を使用する為)</br>
    /// <br>UpdateNote : 2008.11.05 20056 對馬 大輔</br>
    /// <br>           : 　①同一品番選択ウインドウのプロパティに優先倉庫を設定するように変更(初期選択在庫情報を決定する為)</br>
    /// <br>           : 　②BLコードガイド起動パラメータに得意先コード追加</br>
    /// <br>UpdateNote : 2008.11.06 20056 對馬 大輔</br>
    /// <br>           : 　①TBO検索時に商品検索結果データセットに単価情報をセットするように変更</br>
    /// <br>UpdateNote : 2008.11.25 30290 安　重宣</br>
    /// <br>           : 　①TBOマスメン用検索メソッド追加</br>
    /// <br>           : 　②既存TBO検索の優良設定対応（検索アクセスクラス呼出し時の引数追加）</br>
    /// <br>           : 　③PrmSettingKey構造体定義削除（検索側の定義を使う）</br>
    /// <br>UpdateNote : 2008.11.26 20056 對馬 大輔</br>
    /// <br>           : 　①部品検索条件に総額表示方法区分追加（同一品番選択ウインドウの各種表示金額に反映する為）</br>
    /// <br>           : 　②部品検索条件に優良設定リスト追加（部品検索にて優良設定を参照する為）</br>
    /// <br>           : 　③BLコード検索時、部品検索優先順区分を参照し[SearchFlg]をセットする</br>
    /// <br>UpdateNote : 2008.11.28 30290 安　重宣</br>
    /// <br>           : 　①商品関連情報登録にTBOマスタ書込み追加</br>
    /// <br>           : 　②①関連コピーメソッド追加</br>
    /// <br>UpdateNote : 2008.11.28 30365 宮津　銀次郎</br>
    /// <br>           : 　①エラーが出たのでTBOマスタコピーの結合QTYをintキャストしました。</br>
    /// <br>           : 　②リレーションの論理削除をWriteに変更。</br>
    /// <br>UpdateNote : 2008.12.01 20056 對馬 大輔</br>
    /// <br>           : 　①優良設定マスタキャッシュ処理の拠点コードをトリムしてキャッシュするように変更</br>
    /// <br>UpdateNote : 2008.12.03 30290 安　重宣</br>
    /// <br>           : 　①検索アクセスクラスの使用するメソッドを変更</br>
    /// <br>UpdateNote : 2008.12.16 20056 對馬 大輔</br>
    /// <br>           : 　①売上全体設定のキャッシュ処理追加（品名表示区分取得の為）</br>
    /// <br>           : 　②同一品番選択ウインドウへ品名表示区分を有効化する</br>
    /// <br>UpdateNote : 2009.01.17 20056 對馬 大輔</br>
    /// <br>           : 　品番無し検索追加</br>
    /// <br>UpdateNote : 2009.01.19 20056 對馬 大輔</br>
    /// <br>           : 　①品番検索(結合検索無し完全一致)複数検索の使用メソッド変更</br>
    /// <br>           : 　　(速度アップの為、Ａクラスでループを行わずに条件リストをリモート引数とする)</br>
    /// <br>           : 　②不足情報設定処理で商品掛率グループコード名称をセットするように変更</br>
    /// <br>           : 　③単価算出する場合、定価のみ取得するメソッドへ変更</br>
    /// <br>UpdateNote : 2009.01.21 20056 對馬 大輔</br>
    /// <br>           : 　売上金額処理区分マスタの「売上原価単価、売上原価金額」に関する処理削除</br>
    /// <br>UpdateNote : 2009.01.23 20056 對馬 大輔</br>
    /// <br>           : 　SearchInitialの速度アップの為、商品管理情報のキャッシュリストのデータクラス変更</br>
    /// <br>UpdateNote : 2009.02.02 30452 上野 俊治</br>
    /// <br>           : 　更新、削除、完全削除、復活処理時の排他処理制御を追加</br>
    /// <br>UpdateNote : 2009.02.06 22008 長内 数馬</br>
    /// <br>           : 　品名(半角)取得メソッド[GetGoodsNameKana]を追加 (速度優先の為,static)</br>
    /// <br>UpdateNote : 2009.02.09 20056 對馬 大輔</br>
    /// <br>           : 　①商品管理情報取得処理を変更(不足情報設定処理の速度アップの為)</br>
    /// <br>           : 　②仕入先情報設定有無区分の追加(不足情報設定処理の速度アップの為)</br>
    /// <br>           : 　③速度計測の為、ログ出力処理追加。※Debugモードで出力</br>
    /// <br>UpdateNote : 2009.02.10 20056 對馬 大輔</br>
    /// <br>           : 　同一品番選択ウインドウの定価に掛率を適用しない対応</br>
    /// <br>UpdateNote : 2009.02.18 30452 上野 俊治</br>
    /// <br>           : 　排他エラー時の文言を修正</br>
    /// <br>UpdateNote : 2009.02.19 20056 對馬 大輔</br>
    /// <br>           : 　①Ownerプロパティを追加</br>
    /// <br>           : 　②商品(ユーザー登録分)検索取得MAX件数指定メソッドをオーバーロード</br>
    /// <br>UpdateNote : 2009.02.24 20056 對馬 大輔</br>
    /// <br>           : 　離島価格反映処理追加</br>
    /// <br>UpdateNote : 2009.03.05 20056 對馬 大輔</br>
    /// <br>           : 　離島価格反映処理追加(品番検索(結合検索無し完全一致)複数検索)</br>
    /// <br>UpdateNote : 2009/03/17 22018 鈴木 正臣</br>
    /// <br>           : 　部品検索条件設定処理で価格適用日をセットするように修正(部品情報の圧縮の為)</br>
    /// <br>UpdateNote : 2009.03.19 20056 對馬 大輔</br>
    /// <br>           : 　商品管理情報取得処理で取得優先順位追加</br>
    /// <br>UpdateNote : 2009.03.31 20056 對馬 大輔</br>
    /// <br>           : 　商品管理情報取得処理修正</br>
    /// <br>UpdateNote : 2009.04.02 22018 鈴木 正臣</br>
    /// <br>           : 　品番無し検索(提供のみ)SearchPartsOfNonGoodsNoで優良部品も対象になるよう修正</br>
    /// <br>UpdateNote : 2009.04.06 22018 鈴木 正臣</br>
    /// <br>           : 　優良設定の00:全社設定に対応</br>
    /// <br>UpdateNote : 2009.04.08 22018 鈴木 正臣</br>
    /// <br>           : 　優良設定の00:全社設定の判定で不正データを除外するよう変更</br>
    /// <br>           :   （優良設定マスメンで不要なデータが作成されるが、影響範囲が不明なので検索側で対処する為）</br>
    /// <br>UpdateNote : 2009.04.09 20056 對馬 大輔</br>
    /// <br>           : 　仕入先情報キャッシュおよび取得処理追加</br>
    /// <br>           : 　プロパティ指定によりキャッシュ有無を判定(デフォルトはキャッシュしない)</br>
    /// <br>UpdateNote : 2009.04.13       照田 貴志</br>
    /// <br>           : 　商品管理情報取得処理修正(速度アップ)</br>
    /// <br>UpdateNote : 2009.04.14 20056 對馬 大輔</br>
    /// <br>           : 　価格情報取得メソッド追加(商品検索を行わずに価格情報取得を可能にする)</br>
    /// <br>UpdateNote : 2009.06.10       照田 貴志</br>
    /// <br>           : 　商品管理情報取得処理修正(優先順位変更)</br>
    /// <br>UpdateNote : 2009.06.15 20056 對馬 大輔</br>
    /// <br>           : 　①BLコード枝番対応</br>
    /// <br>           : 　②キャンペーン価格反映処理追加</br>
    /// <br>           : 　③自動連携値引き価格反映処理追加</br>
    /// <br>           : 　④拠点設定マスタアクセスクラスインスタンスタイミング変更(サーバー配置対応)</br>
    /// <br>UpdateNote : 2009.06.24       照田 貴志</br>
    /// <br>           : 　商品在庫更新後の件数表示不正を修正(1.5次対応ﾁｹｯﾄNo.13582)</br>
    /// <br>UpdateNote : 2009.07.15 22018 鈴木 正臣</br>
    /// <br>           : 　エントリからのＢＬコードガイドで初期表示モードを指定可能に変更(3次対応ﾁｹｯﾄNo.13801,13802)</br>
    /// <br>UpdateNote : 2009/09/08 20056 對馬 大輔</br>
    /// <br>           : 　MANTIS[0014250] TBO検索時に検索条件をパラメータとしてセットする(検索見積でTBO検索するとエラーとなる対応)</br>
    /// <br>UpdateNote : 2009/11/04 20056 對馬 大輔</br>
    /// <br>           : 　表示区分対応：結合元検索時、提供価格を取得するメソッド追加</br>
    /// <br>UpdateNote : 2009/11/13 李占川</br>
    /// <br>           : 　TBO検索ボタンからTBO検索のメソッド追加</br>
    /// <br>UpdateNote : 2009/12/18 21024 佐々木 健</br>
    /// <br>           : 　論理削除モード対応(MATIS[0014661])</br>
    /// <br>UpdateNote : 2010/01/12 30434 工藤 恵優</br>
    /// <br>           : 　商品管理情報マスタの設定パターンを返す処理を追加(MATIS[0014862])</br>
    /// <br>UpdateNote : 2010/02/25 　21024 佐々木 健</br>
    /// <br>           : 　2009.06.15修正分の組み込み</br>
    /// <br>UpdateNote : 2010/04/15 22018 鈴木 正臣</br>
    /// <br>           : 　ＢＬコード名称(半角)をセットよう変更。(エントリ系の品名カナ対応の為)(MATIS[0015285])</br>
    /// <br>UpdateNote : 2010/04/28 22018 鈴木 正臣</br>
    /// <br>           : 　自由検索対応　ＢＬコード検索時、CarInfo設定時にＢＬコードを指定するように変更（高速化の為）</br>
    /// <br>UpdateNote : 2010/06/03 20056 對馬 大輔</br>
    /// <br>           : 　品名半角対応</br>
    /// <br>UpdateNote : 2010/06/04 22018 鈴木 正臣</br>
    /// <br>           : 　成果物統合</br>
    /// <br>           : 　　ＳＣＭ 2009.06.15 の組込</br>
    /// <br>           : 　　ＳＣＭ 2010/02/25 の組込</br>
    /// <br>           : 　　ＳＣＭ 2010/04/06 の組込 (DC配置分と同じ)</br>
    /// <br>           : 　　自由検索 2010/04/28 の組込</br>
    /// <br>           : 　　障害改良対応(7月分) 2010/06/03 の組込</br>
    /// <br>UpdateNote : 2010/06/08 楊明俊</br>
    /// <br>           : 　改良対応 BLコード入力時の品名取得処理変更</br>
    /// <br>UpdateNote : 2010/06/26 22018 鈴木 正臣</br>
    /// <br>           : 　成果物統合</br>
    /// <br>           : 　　障害改良対応(7月分) 2010/06/08 の組込</br>
    /// <br>UpdateNote : 2010/06/29 20056 對馬 大輔</br>
    /// <br>           : 　品番無し検索(提供)の検索結果も品名半角対応を有効とする(商品在庫一括登録修正で使用)</br>
    /// <br>UpdateNote : 2011/03/17 22008 長内 数馬</br>
    /// <br>           : 　①ユーザー商品検索時、在庫の取得を行わないメソッドを追加</br>
    /// <br>           : 　②仕入先マスタからの不足情報取得時に、仕入消費税端数処理区分の取得を追加</br>
    /// <br>UpdateNote : 2011/05/18 22018 鈴木 正臣</br>
    /// <br>           : 　SCM改良</br>
    /// <br>           : 　　ＢＬコード枝番対応</br>
    /// <br>Update Note: 2011/07/25 譚洪 連番No.16 掛率設定に関して、00全社共通 と 拠点の掛率の優先順位の同等化（WAN運用）の対応</br>
    /// <br>UpdateNote : 2011/07/28 Redmine #23266 朱 猛</br>
    /// <br>           : 　GoodsOnlySearchメソッドで論理削除分も取得できるメソッドを追加</br>
    /// <br>UpdateNote : 2011/07/29 李占川</br>
    /// <br>           : 　NSユーザー改良要望一覧連番984</br>
    /// <br>Update Note: 2011/12/13 陳建明</br>
    /// <br>               redmine#26816（元8072） 修正呼び出し時には同一品番選択ウィンドウは表示しない</br>
    /// <br>UpdateNote : 2012/03/02 20073 西 毅</br>
    /// <br>           : 　前方一致検索用の"*"以外は完全一致とするように修正（負荷軽減）</br>
    /// <br>             　※補足 前方一致検索以外の検索方法はこの修正時点で機能していない為</br>
    /// <br>UpdateNote : 2012.04.12 30182 立谷亮介 R.Tachiya</br>
	/// <br>           : 　仕入先テーブルアクセスクラスのインスタンス化処理を高速のものに変更。</br>
    /// <br>UpdateNote : 2012/11/09 30744 湯上 千加子</br>
    /// <br>           : 　SCM改良№10337,10338,10341対応</br>
    /// <br>           : 　優良情報設定時の抽出条件の修正</br>
    /// <br>Update Note: 2012/12/01 zhangy3</br>
    /// <br>           : 2013/01/16配信分 Redmine #33231</br>
    /// <br>           : 商品在庫マスタの仕様変更</br>
    /// <br>Update Note: 2013/02/13 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             結合検索時のSearchInitialメソッドを修正（速度改善）</br>
    /// <br>             ※結合検索時、通常のSearchInitialメソッドは遅いので使用しないように変更</br>
    /// <br>Update Note: 2013/02/08 田建委</br>
    /// <br>管理番号   : 10806793-00 2013/03/26配信分</br>
    /// <br>           : Redmine#34640 商品在庫マスタの仕様変更(#33231の残留分)</br>
    /// <br>Update Note: 2013/02/25 橋本 将樹</br>
    /// <br>             得意先電子元帳で必要ないデータもSearchInitialで取得しているため、</br>
    /// <br>             得意先電子元帳からは呼び出すSearchInitialを別にする。</br>
    /// <br>             一時的な対応で将来１つのメソッドにする必要がある。</br>
    /// <br>Update Note: 2013/02/27 zhujc</br>
    /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
    /// <br>           : Redmine#34858 在庫仕入入力提供純正部品検索不要の対応</br>
    /// <br>Update Note: 2013/03/01 22008 長内 数馬</br>
    /// <br>管理番号   : 10806791-00 2013/03/13配信分</br>
    /// <br>           : 商品在庫一括登録修正 品番指定時、品番指定無し時に検索結果が異なる件の修正</br>
    /// <br>Update Note: K2013/03/18 田建委</br>
    /// <br>管理番号   : 10806793-00 2013/04/10配信分</br>
    /// <br>           : Redmine#35071 商品在庫マスタ・山形部品様個別組み込み（#34640残留）</br>
    /// <br>Update Note: 2013/03/18 yangyi</br>
    /// <br>管理番号   : 10801804-00 20150515配信分の対応</br>
    /// <br>           : Redmine#34962 　「商品在庫一括修正」のサーバー負荷軽減対応</br>
    /// <br>Update Note: 2013/04/15  donggy</br>
    /// <br>管理番号   : 10801804-00 2013/05/15配信分</br>
    /// <br>           : Redmine#35275 　得意先電子元帳で伝票タイプＡ８００の伝票を再発行するとエラーが発生するの対応</br>
    /// <br>Update Note: 2013/05/09  yangyi</br>
    /// <br>管理番号   : 10801804-00 2013/05/15配信分</br>
    /// <br>           : Redmine#35275 　得意先電子元帳で伝票タイプＡ８００の伝票を再発行するとエラーが発生するの対応</br>
    /// <br>Update Note: 2013/05/24 donggy</br>
    /// <br>管理番号   : 10801804-00 2013/06/18配信分 </br>
    /// <br>             Redmine#35874 商品マスタ登録の速度改善について</br>
    /// <br>Update Note: 2013/07/31 湯上 千加子</br>
    /// <br>管理番号   : 10902622-01 タブレット対応</br>
    /// <br>             Redmine#39451   商品管理マスタ取得の速度改善</br>
    /// <br>Update Note: 2013/08/13 田建委</br>
    /// <br>管理番号   : 10902175-00</br>
    /// <br>             Redmine#39794 商品在庫マスタⅡの速度改善</br>
    /// <br>Update Note: 2014/01/15 huangt</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : Redmine#41998 貸出数の変更を可能にするように修正</br>
    /// <br>Update Note: 2014/02/06 湯上 千加子</br>
    /// <br>管理番号   : </br>
    /// <br>             SCM仕掛一覧№10632対応</br>
    /// <br>Update Note: 2014/02/10 高陽</br>
    /// <br>管理番号   : 10970685-00</br>
    /// <br>           : Redmine#41976 商品マスタⅡの追加</br>
    /// <br>Update Note: 2014/05/09 吉岡</br>
    /// <br>管理番号   : </br>
    /// <br>             速度改善フェーズ２№11,№12 絞込タイミング変更</br>
    /// <br>Update Note: 2014/08/11 duzg</br>
    /// <br>管理番号   : </br>
    /// <br>             検証／総合テスト障害No.5</br>
    /// <br>Update Note: 2015/03/03 湯上</br>
    /// <br>管理番号   : 11070266-00 </br>
    /// <br>             SCM高速化Redmine#310対応</br>
    /// <br>Update Note: 2015/03/04 湯上</br>
    /// <br>管理番号   : 11070266-00 </br>
    /// <br>             SCM高速化Redmine#317対応</br>
    /// <br>Update Note: 2015/03/18 湯上</br>
    /// <br>管理番号   : 11070266-00 </br>
    /// <br>             SCM高速化メーカー希望小売価格対応 品番検索処理の追加</br>
    /// <br>Update Note: 2015/04/06 30757 佐々木 貴英</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>             仕掛№2405 得意先変更時表示区分再取得対応</br>
    /// <br>Update Note: 2015/08/17 田建委</br>
    /// <br>管理番号   : 11170052-00</br>
    /// <br>           : Redmine#47036 商品在庫一括登録修正 管理拠点・倉庫の追加</br>
    /// <br>Update Note: 2018/04/05  30757 佐々木　貴英</br>
    /// <br>管理番号   : 11470007-00</br>
    /// <br>           : NS3Ai対応（BL統一部品コード対応）</br>
    /// <br>             検索条件へのBL統一部品コードの追加</br>
    /// <br>Update Note: 2021/06/21 呉元嘯</br>
    /// <br>管理番号   : 11601223-00</br>
    /// <br>           : PMKOBETSU-3268の対応</br> 
    /// </remarks>
    public partial class GoodsAcs : IGeneralGuideData
    {
        //================================================================================
        //  コンストラクタ
        //================================================================================
        #region コンストラクタ
        // 2009.06.15 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        /// <summary>
        /// 商品マスタアクセスクラスコンストラクタ
        /// </summary>
        /// <param name="sectionCode">拠点コード</param>
        public GoodsAcs( string sectionCode )
            : this()
        {
            this._inputSectionCode = sectionCode;
        }
        // 2009.06.15 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// 商品マスタアクセスクラスコンストラクタ
        /// </summary>
        public GoodsAcs()
        {
            //-----------------------------------------------------------------------------
            // ログイン情報取得
            //-----------------------------------------------------------------------------
            // 2009.06.15 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            //this._loginSectionCode = LoginInfoAcquisition.Employee.BelongSectionCode;
            if ( LoginInfoAcquisition.Employee != null )
            {
                this._loginSectionCode = LoginInfoAcquisition.Employee.BelongSectionCode;
            }
            else
            {
                this._loginSectionCode = string.Empty;
            }
            // 2009.06.15 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            this._enterpriseCode = LoginInfoAcquisition.EnterpriseCode;

            //-----------------------------------------------------------------------------
            // 初期情報取得
            //-----------------------------------------------------------------------------
            _dataSet = new GoodsInputDataSet();
            _goodsPriceDataTable = _dataSet.GoodsPrice;

            //-----------------------------------------------------------------------------
            // 各種アクセスクラス取得
            //-----------------------------------------------------------------------------
            this._userGuideAcs = new UserGuideAcs();
			this._supplierAcs = new SupplierAcs(false);// -- Update 2012.04.12 30182 R.Tachiya --
            this._salesProcMoneyAcs = new SalesProcMoneyAcs();
            this._stockProcMoneyAcs = new StockProcMoneyAcs();
            this._taxRateSetAcs = new TaxRateSetAcs();
            this._companyInfAcs = new CompanyInfAcs();  // 2011/07/25
            this._companyInf = new CompanyInf(); // 2011/07/25

            // 2009.06.15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //// --- ADD 2009/01/20 障害ID:10217対応------------------------------------------------------>>>>>
            //this._secInfoAcs = new SecInfoAcs();
            //// --- ADD 2009/01/20 障害ID:10217対応------------------------------------------------------<<<<<
            // 2009.06.15 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // --- ADD 2009/03/19 障害ID:12231対応------------------------------------------------------>>>>>
            this._stockMngTtlStAcs = new StockMngTtlStAcs();
            // --- ADD 2009/03/19 障害ID:12231対応------------------------------------------------------<<<<<

            //-----------------------------------------------------------------------------
            // 単価算出モジュール取得
            //-----------------------------------------------------------------------------
            //this._salesPriceCalclate = new SalesPriceCalclate();
            //this._stockPriceCalclate = new StockPriceCalculate();
            this._unitPriceCalculation = new UnitPriceCalculation();

            //-----------------------------------------------------------------------------
            // 部品検索コントローラー
            //-----------------------------------------------------------------------------
            this._PartsSearchController = new PartsSearchController();

            // 2009.06.15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //-----------------------------------------------------------------------------
            // 提供BLコードリスト取得
            //-----------------------------------------------------------------------------
            _ofrBLList = this._PartsSearchController.OfrBLList;
            // 2009.06.15 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            //-----------------------------------------------------------------------------
            // 商品マスタ抽出条件退避用
            //-----------------------------------------------------------------------------
            this._goodsCndtn = new GoodsCndtn(); // 2009.02.10

            // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            this._owner = null;
            // 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        }
        #endregion

        //================================================================================
        //  内部使用メンバ
        //================================================================================
        #region Private Members
        /// <summary>企業コード</summary>
        private string _enterpriseCode;
        /// <summary>ログイン拠点コード</summary>
        private string _loginSectionCode;
        // 2009.06.15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>外部指定拠点コード</summary>
        private string _inputSectionCode = string.Empty;
        // 2009.06.15 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        /// <summary>呼出ガイドモード</summary>
        private static int _callGuideMode;
        /// <summary>ローカルＤＢモード</summary>
        private static bool _isLocalDBRead = false;
        /// <summary>商品価格データテーブル</summary>
        private static GoodsInputDataSet.GoodsPriceDataTable _goodsPriceDataTable;
        /// <summary>データセット</summary>
        private static GoodsInputDataSet _dataSet;
        /// <summary>部品検索コントローラー</summary>
        private PartsSearchController _PartsSearchController;
        /// <summary>税率</summary>
        private double _taxRate;
        // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>Owner</summary>
        private IWin32Window _owner;
        // 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        // 2009.04.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>仕入情報取得有無区分</summary>
        private bool _isGetSupplier = false;
        // 2009.04.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // ADD 2013/07/31 yugami Redmine#39451対応 ----------------------------------->>>>>
        /// <summary>商品管理情報格納バッファ(VALUE:商品管理情報オブジェクト)タブレット用</summary>
        private GoodsMngWork _goodsMngWorkForTablet;
        // ADD 2013/07/31 yugami Redmine#39451対応 -----------------------------------<<<<<

        // --------------------------------------------------
        #region < リモートオブジェクト >
        /// <summary>商品構成リモートオブジェクト(ユーザー)格納バッファ</summary>
        private IUsrJoinPartsSearchDB _iGoodsURelationDataDB = null;
        /// <summary>商品構成リモートオブジェクト(ユーザー)ローカル格納バッファ</summary>
        private GoodsURelationDataLcDB _goodsURelationDataLcDB = null;
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
        ///// <summary>商品構成リモートオブジェクト(提    供)格納バッファ</summary>
        //private IGoodsRelationDataDB _iGoodsRelationDataDB = null;
        ///// <summary>商品構成リモートオブジェクト(提　　供)ローカル格納バッファ</summary>
        //private GoodsRelationDataLcDB _goodsRelationDataLcDB = null;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
        #endregion

        // --------------------------------------------------
        #region < 各種アクセスクラス >
        /// <summary>商品中分類マスタアクセスクラス</summary>
        private static GoodsGroupUAcs _goodsMGroupAcs;
        /// <summary>BLグループコードマスタアクセスクラス</summary>
        private static BLGroupUAcs _BLGroupAcs;
        /// <summary>ユーザーガイドマスタ アクセスクラス</summary>
        private UserGuideAcs _userGuideAcs;
        /// <summary>仕入先マスタ アクセスクラス</summary>
        private SupplierAcs _supplierAcs;
        /// <summary>売上金額処理区分マスタ アクセスクラス</summary>
        private SalesProcMoneyAcs _salesProcMoneyAcs;
        /// <summary>仕入金額処理区分マスタ アクセスクラス</summary>
        private StockProcMoneyAcs _stockProcMoneyAcs;
        /// <summary>税率設定マスタ アクセスクラス</summary>
        private TaxRateSetAcs _taxRateSetAcs;
        /// <summary>自社情報設定 アクセスクラス</summary>
        private CompanyInfAcs _companyInfAcs;   // 2011/07/25
        private CompanyInf _companyInf = null; // 自社情報  // 2011/07/25

        ///// <summary>売上金額計算クラス</summary>
        //private SalesPriceCalclate _salesPriceCalclate;
        ///// <summary>仕入金額計算クラス</summary>
        //private StockPriceCalculate _stockPriceCalclate;
        /// <summary>単価算出クラス</summary>
        private UnitPriceCalculation _unitPriceCalculation;

        // 2009.06.15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //// --- ADD 2009/01/20 障害ID:10217対応------------------------------------------------------>>>>>
        ///// <summary>拠点マスタ アクセスクラス</summary>
        //private SecInfoAcs _secInfoAcs;
        //// --- ADD 2009/01/20 障害ID:10217対応------------------------------------------------------<<<<<
        // 2009.06.15 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // --- ADD 2009/03/19 障害ID:12231対応------------------------------------------------------>>>>>
        private StockMngTtlStAcs _stockMngTtlStAcs;
        // --- ADD 2009/03/19 障害ID:12231対応------------------------------------------------------<<<<<

        private GoodsCndtn _goodsCndtn; // 2009.02.10

        // --- ADD 2011/07/29 ---------->>>>>
        private static SecInfoAcs _secInfoAcs;
        private List<string> _sectWarehouseCdList = new List<string>();
        // --- ADD 2011/07/29  ----------<<<<<
        #endregion
        #endregion

        //================================================================================
        //  内部 Staticメンバ
        //================================================================================
        #region Private Static Members
        ///// <summary>商品連結データ格納バッファ</summary> // 2009.02.10
        //private static Dictionary<string, GoodsUnitData> _drGoods; // 2009.02.10
        /// <summary>メーカーデータ格納バッファ(KEY:メーカーコード, VALUE:メーカーマスタオブジェクト)</summary>
        private static Dictionary<int, MakerUMnt> _drMaker;
        /// <summary>BLコードデータ格納バッファ(KEY:BLコード, VALUE:BLコードマスタオブジェクト)</summary>
        private static Dictionary<int, BLGoodsCdUMnt> _drBLGoodsCd;
        /// <summary>BLグループデータ格納バッファ(KEY:BLグループコード, VALUE:BLグループマスタオブジェクト)</summary>
        private static Dictionary<int, BLGroupU> _drBLGroup;
        /// <summary>商品中分類データ格納バッファ(KEY:商品中分類コード, VALUE:商品中分類マスタオブジェクト)</summary>
        private static Dictionary<int, GoodsGroupU> _drGoodsMGroup;
        /// <summary>商品大分類データ(ユーザーガイド)格納バッファ(KEY:商品大分類コード, VALUE:商品大分類名称)</summary>
        private static Dictionary<int, string> _drGoodsLGroup;
        /// <summary>自社分類情報(ユーザーガイド)格納バッファ(KEY:自社分類コード, VALUE:自社分類名称)</summary>
        private static Dictionary<int, string> _drEnterpriseGanreCode;
        /// <summary>販売区分情報(ユーザーガイド)格納バッファ(KEY:販売区分コード, VALUE:販売区分名称)</summary>
        private static Dictionary<int, string> _drSalesCode;
        // 2009.01.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>商品管理情報格納バッファ(VALUE:商品管理情報オブジェクト)</summary>
        //private static List<GoodsMng> _goodsMngList;
        /// <summary>商品管理情報格納バッファ(VALUE:商品管理情報オブジェクト)</summary>
        private static List<GoodsMngWork> _goodsMngList;
        // 2009.01.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009/04/13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //// 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>商品管理情報取得用格納バッファ(VALUE:商品管理情報オブジェクト)</summary>
        //private static List<GoodsMngWork> _goodsMngListExceptGoodsNo;   // 品番設定無しリスト
        //private static List<GoodsMngWork> _goodsMngListOnlyGoodsNo;     // 品番設定有りリスト
        //// 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        /// <summary>商品管理情報取得用格納バッファ(VALUE:商品管理情報オブジェクト)</summary>
        private static Dictionary<string, GoodsMngWork> _goodsMngDic1;      //拠点(全社共通含む)＋メーカー＋品番
        private static Dictionary<string, GoodsMngWork> _goodsMngDic2;      //拠点(全社共通含む)＋中分類＋メーカー＋ＢＬ
        private static Dictionary<string, GoodsMngWork> _goodsMngDic3;      //拠点(全社共通含む)＋中分類＋メーカー
        private static Dictionary<string, GoodsMngWork> _goodsMngDic4;      //拠点(全社共通含む)＋メーカー
        // 2009/04/13 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>優良設定情報格納バッファ(VALUE:優良設定情報オブジェクト)</summary>
        //private static Dictionary<PrmSettingKey, PrmSettingUWork> _drPrmSettingWork;
        /// <summary>優良設定情報格納バッファ(VALUE:優良設定情報オブジェクト)</summary>
        private static List<PrmSettingUWork> _drPrmSettingWork;
        // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>売上全体設定データクラス</summary>
        private static SalesTtlSt _salesTtlSt;
        // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        // 2009.02.24 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>離島価格データクラス</summary>
        private static List<IsolIslandPrcWork> _isolIslandList;
        // 2009.02.24 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        // 2009.04.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>仕入先マスタデータクラス</summary>
        private static List<SupplierWork> _supplierWorkList;
        // 2009.04.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        // 2009.06.15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>提供BLコードリスト</summary>
        private static List<TbsPartsCodeWork> _ofrBLList;
        // 2009.06.15 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
       
        /// <summary>商品データ変更イベント</summary>
        private static ChangedGoodsDataEventHandler mChangedGoodsDataEvent;
        /// <summary>初期値データ取得有無</summary>
        private static bool _isInitialSearch = false;
        /// <summary>ユーザーガイドマスタ</summary>
        private static ArrayList _userGdBdEnterpriseGanreCode = null;
        /// <summary>売上金額処理区分設定テーブル</summary>
        private static GoodsInputDataSet.ProcMoneyDataTable _salesProcMoneyDataTable;
        /// <summary>売上金額処理区分設定リスト</summary>
        private static List<SalesProcMoney> _salesProcMoneyList;
        /// <summary>売上金額処理区分設定テーブルビュー</summary>
        private static DataView _salesProcMoneyDataTableView;
        /// <summary>仕入金額処理区分設定テーブル</summary>
        private static GoodsInputDataSet.ProcMoneyDataTable _stockProcMoneyDataTable;
        /// <summary>仕入金額処理区分設定テーブルビュー</summary>
        private static DataView _stockProcMoneyDataTableView;
        /// <summary>仕入金額処理区分設定リスト</summary>
        private static List<StockProcMoney> _stockProcMoneyList;
        /// <summary>税率設定データオブジェクト</summary>
        private static TaxRateSet _taxRateSet;
        #endregion

        // ===================================================================================== //
        // 構造体
        // ===================================================================================== //
        #region Struct
        // comment out 2008.11.25 30290 検索アクセスクラスの定義を使う。
        ///// <summary>
        ///// 優良設定マスタキー構造体
        ///// </summary>
        //public struct PrmSettingKey
        //{
        //    string _sectionCode;
        //    int _goodsMGroup;
        //    int _tbsPartsCode;
        //    int _partsMakerCd;

        //    /// <summary>
        //    /// 優良設定マスタキー構造体
        //    /// </summary>
        //    /// <param name="sectionCode"></param>
        //    /// <param name="goodsMGroup"></param>
        //    /// <param name="tbsPartsCode"></param>
        //    /// <param name="partsMakerCd"></param>
        //    public PrmSettingKey(string sectionCode, int goodsMGroup, int tbsPartsCode, int partsMakerCd)
        //    {
        //        this._sectionCode = sectionCode;
        //        this._goodsMGroup = goodsMGroup;
        //        this._tbsPartsCode = tbsPartsCode;
        //        this._partsMakerCd = partsMakerCd;
        //    }
        //}
        # endregion

        //================================================================================
        //  外部提供列挙型
        //================================================================================
        #region Public Enum
        /// <summary>
        /// 商品提供区分
        /// </summary>
        public enum emGoodsOfferUser : int
        {
            /// <summary>ユーザー</summary>
            User = 0,
            /// <summary>提供</summary>
            Offer = 1,
        }
        /// <summary>
        /// ガイド呼出区分
        /// </summary>
        public enum emCallGuideMode : int
        {
            /// <summary>BL商品コードガイド</summary>
            BLGoodsCdGuide = 0,
            /// <summary>メーカーガイド</summary>
            MakerGuide = 1,
        }
        /// <summary>
        /// ユーザーガイドコード
        /// </summary>
        public enum emUserGuideCode : int
        {
            /// <summary>自社分類</summary>
            EnterpriseGanre = 41,
            /// <summary>商品大分類</summary>
            GoodsLGroup = 70,
            /// <summary>販売区分</summary>
            SalesCode = 71,
        }
        /// <summary>
        /// 部品検索タイプ
        /// </summary>
        public enum SearchPartsType : int
        {
            /// <summary>BLコード検索</summary>
            BLCode = 0,
            /// <summary>品番検索</summary>
            GoodsNo = 1,
            /// <summary>品番検索(結合検索有り完全一致)</summary>
            GoodsNoWholeWord = 2,
            /// <summary>品番検索(マスメン用)</summary>
            GoodsNoNonVariousSearch = 3,
            /// <summary>品番検索(結合検索無し完全一致)</summary>
            GoodsNoNonVariousSearchWholeWord = 4,
        }
        /// <summary>
        /// 単価種類列挙型
        /// </summary>
        public enum UnitPriceKind : int
        {
            /// <summary>売上単価</summary>
            SalesUnitPrice = 1,
            /// <summary>原価単価</summary>
            UnitCost = 2,
            /// <summary>定価</summary>
            ListPrice = 3,
        }
        /// <summary>
        /// 商品種別
        /// </summary>
        public enum GoodsKind : int
        {
            /// <summary>全て</summary>
            All = 0,
            /// <summary>親</summary>
            Parent = 1,
            /// <summary>結合子</summary>
            ChildJoin = 2,
            /// <summary>セット子</summary>
            ChildSet = 4,
            /// <summary>代替</summary>
            ChildSubst = 8,
            /// <summary>複数互換</summary>
            ChildSubstCompatible = 16,
        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.15 ADD
        /// <summary>
        /// ＢＬガイドモード（商品Ａクラスから外部への提供用）
        /// </summary>
        public enum BLGuideMode
        {
            /// <summary>ＢＬコード選択</summary>
            BLCode = 0,
            /// <summary>部位・ＢＬ選択</summary>
            PartsPos = 1,
            /// <summary>ＢＬガイド</summary>
            BLGuide = 2,
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.15 ADD

        // 2013.02.25 橋本 ADD START ==============================================
        /// <summary>
        /// SearchInitial時に取得対象とするテーブル指定用enum
        /// </summary>
        [Flags]
        public enum GetTables : int
        {
            /// <summary>メーカー情報</summary>
            MakerU = 0x1,
            /// <summary>BLコード情報</summary>
            BLGoodsCdU = 0x2,
            /// <summary>BLグループ情報</summary>
            BLGroupU = 0x4,
            /// <summary>商品中分類情報</summary>
            GoodsGroupU = 0x8,
            /// <summary>ユーザーガイド</summary>
            UserGdBdU = 0x10,
            /// <summary>優良設定情報</summary>
            PrmSettingU = 0x20,
            /// <summary>商品管理情報</summary>
            GoodsMng = 0x40,
            /// <summary>売上全体設定</summary>
            SalesTtlSt = 0x80,
            /// <summary>離島価格情報</summary>
            IsolIslandPrc = 0x100
        }
        // 2013.02.25 橋本 ADD END   ==============================================

        #endregion

        //================================================================================
        //  外部定数定義
        //================================================================================
        #region Public Constant
        /// <summary>メーカー未設定時コード</summary>
        public readonly int CT_NoMakerCode = 999;
        /// <summary>メーカー未設定時名称</summary>
        public readonly string CT_NoMakerName = "メーカー未設定";
        /// <summary>アスタリスク</summary>
        public readonly string ctAster = "*";
        /// <summary>ハイフン</summary>
        public readonly string ctHyphen = "-";

        /// <summary>端数処理対象金額区分（金額）</summary>
        public const int ctFracProcMoneyDiv_Price = 0;
        /// <summary>端数処理対象金額区分（消費税）</summary>
        public const int ctFracProcMoneyDiv_Tax = 1;
        /// <summary>端数処理対象金額区分（単価）</summary>
        public const int ctFracProcMoneyDiv_UnitPrice = 2;
        // 2009.01.21 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>端数処理対象金額区分（原価単価）</summary>
        //public const int ctFracProcMoneyDiv_CostUnitPrice = 3;
        ///// <summary>端数処理対象金額区分（原価）</summary>
        //public const int ctFracProcMoneyDiv_CostPrice = 4;
        // 2009.01.21 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        /// <summary>価格情報最大表示数</summary>
        public const int ctGoodsPriceMaxCount = 3;
        
        // 2008.10.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>全社指定拠点コード</summary>
        public const string ctAllDefSectionCode = "00";
        // 2008.10.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        #endregion

        //================================================================================
        //  内部定数定義
        //================================================================================
        #region Private Constant
        private const string CT_DIVISIONNAME_USR = "ユーザー";
        private const string MESSAGE_NONOWNSECTION = "自拠点情報が取得できませんでした。拠点設定を行ってから起動してください。"; // ADD 2011/07/29
        private const string MACHINENM_MEG = "ﾊﾝﾃﾞｨ登録分(ｼﾘｱﾙNo:{0})";// ADD 2021/06/21 呉元嘯 PMKOBETSU-3268の対応
        #endregion

        //================================================================================
        //  内部列挙型
        //================================================================================
        #region Private Enum
        #endregion

        //================================================================================
        //  プロパティ
        //================================================================================
        #region Public Property
        /// <summary>
        /// ローカルＤＢモード
        /// </summary>
        public bool IsLocalDBRead
        {
            get { return _isLocalDBRead; }
            set { _isLocalDBRead = value; }
        }
        /// <summary>
        ///  商品価格データテーブル
        /// </summary>
        public GoodsInputDataSet.GoodsPriceDataTable GoodsPriceDataTable
        {
            get { return _goodsPriceDataTable; }
            set { _goodsPriceDataTable = value; }
        }
        /// <summary>
        /// 自社分類情報リスト
        /// </summary>
        public static ArrayList UserGdBdEnterpriseGanreCode
        {
            get { return _userGdBdEnterpriseGanreCode; }
            set { _userGdBdEnterpriseGanreCode = value; }
        }
        /// <summary>
        /// メーカーリスト
        /// </summary>
        public static Dictionary<int, MakerUMnt> MakerUMntList
        {
            get { return _drMaker; }
            set { _drMaker = value; }
        }
        /// <summary>
        /// BLコードリスト
        /// </summary>
        public static Dictionary<int, BLGoodsCdUMnt> BLGoodsCdUMntList
        {
            get { return _drBLGoodsCd; }
            set { _drBLGoodsCd = value; }
        }
        /// <summary>
        /// BLグループコードリスト
        /// </summary>
        public static Dictionary<int, BLGroupU> BLGroupUList
        {
            get { return _drBLGroup; }
            set { _drBLGroup = value; }
        }
        /// <summary>
        /// 商品中分類リスト
        /// </summary>
        public static Dictionary<int, GoodsGroupU> GoodsMGroupList
        {
            get { return _drGoodsMGroup; }
            set { _drGoodsMGroup = value; }
        }
        /// <summary>
        /// 商品大分類名称リスト
        /// </summary>
        public static Dictionary<int, string> GoodsLGroupList
        {
            get { return _drGoodsLGroup; }
            set { _drGoodsLGroup = value; }
        }
        /// <summary>
        /// 自社分類名称リスト
        /// </summary>
        public static Dictionary<int, string> EnterpriseGanreCodeList
        {
            get { return _drEnterpriseGanreCode; }
            set { _drEnterpriseGanreCode = value; }
        }
        /// <summary>
        /// 販売区分名称リスト
        /// </summary>
        public static Dictionary<int, string> SalesCodeList
        {
            get { return _drSalesCode; }
            set { _drSalesCode = value; }
        }
        // 2009.01.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>
        ///// 商品管理情報リスト
        ///// </summary>
        //public static List<GoodsMng> GoodsMngList
        //{
        //    get { return _goodsMngList; }
        //    set { _goodsMngList = value; }
        //}
        /// <summary>
        /// 商品管理情報リスト
        /// </summary>
        public static List<GoodsMngWork> GoodsMngList
        {
            get { return _goodsMngList; }
            set { _goodsMngList = value; }
        }
        // 2009.01.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>
        ///// 優良設定情報リスト
        ///// </summary>
        //public static Dictionary<PrmSettingKey, PrmSettingUWork> PrmSettingWork
        //{
        //    get { return _drPrmSettingWork; }
        //    set { _drPrmSettingWork = value; }
        //}
        /// <summary>
        /// 優良設定情報リスト
        /// </summary>
        public static List<PrmSettingUWork> PrmSettingWork
        {
            get { return _drPrmSettingWork; }
            set { _drPrmSettingWork = value; }
        }
        // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        /// <summary>
        /// 売上金額処理区分リスト
        /// </summary>
        public List<SalesProcMoney> SalesProcMoneyList
        {
            get { return _salesProcMoneyList; }
            set { _salesProcMoneyList = value; }
        }
        /// <summary>
        /// 仕入金額処理区分リスト
        /// </summary>
        public List<StockProcMoney> StockProcMoneyList
        {
            get { return _stockProcMoneyList; }
            set { _stockProcMoneyList = value; }
        }
        /// <summary>
        /// 税率設定データオブジェクト
        /// </summary>
        public TaxRateSet TaxRateSet
        {
            get { return _taxRateSet; }
            set { _taxRateSet = value; }
        }
        /// <summary>
        /// 拠点コード
        /// </summary>
        public string LoginSectionCode
        {
            get { return this._loginSectionCode; }
        }
        // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 売上全体設定
        /// </summary>
        public SalesTtlSt SalesTtlSt
        {
            get { return _salesTtlSt; }
            set { _salesTtlSt = value; }
        }
        // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009.02.24 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 離島価格設定
        /// </summary>
        public List<IsolIslandPrcWork> IsolIslandPrcWorkList
        {
            get { return _isolIslandList; }
            set { _isolIslandList = value; }
        }
        // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 売上全体設定
        /// </summary>
        public IWin32Window Owner
        {
            get { return this._owner ; }
            set { this._owner = value; }
        }
        // 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009.04.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 仕入情報取得有無区分(デフォルト：false(取得しない))
        /// </summary>
        public bool IsGetSupplier
        {
            get { return this._isGetSupplier; }
            set { this._isGetSupplier = value; }
        }
        // 2009.04.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        // 2009.06.15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 提供BLコードリスト
        /// </summary>
        public List<TbsPartsCodeWork> OfrBLList
        {
            get { return _ofrBLList; }
            set { _ofrBLList = value; }
        }
        // 2009.06.15 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // ADD 2013/07/31 yugami Redmine#39451対応 ----------------------------------->>>>>
        /// <summary>
        /// 商品管理情報
        /// </summary>
        public GoodsMngWork GoodsMngWorkForTablet
        {
            get { return _goodsMngWorkForTablet; }
            set { _goodsMngWorkForTablet = value; }
        }
        // ADD 2013/07/31 yugami Redmine#39451対応 -----------------------------------<<<<<

        // ADD 2014/05/09 速度改善フェーズ２№11,№12 吉岡  -------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary> 自動回答品目設定リスト（自動回答専用） </summary>
        private List<AutoAnsItemSt> _foundAutoAnsItemStList = new List<AutoAnsItemSt>();
        /// <summary> 自動回答品目設定リスト（自動回答専用） </summary>
        public List<AutoAnsItemSt> FoundAutoAnsItemStList
        {
            get { return _foundAutoAnsItemStList; }
            set { _foundAutoAnsItemStList = value; }
        }

        /// <summary> 拠点コード（自動回答専用） </summary>
        private string _sectionCode = string.Empty;
        /// <summary> 拠点コード（自動回答専用） </summary>
        public string SectionCode
        {
            get { return _sectionCode; }
            set { _sectionCode = value; }

        }

        /// <summary> 得意先コード（自動回答専用） </summary>
        private int _customerCode = 0;
        /// <summary> 得意先コード（自動回答専用） </summary>
        public int CustomerCode
        {
            get { return _customerCode; }
            set { _customerCode = value; }

        }
        // ADD 2014/05/09 速度改善フェーズ２№11,№12 吉岡  --------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        #endregion

        //================================================================================
        //  外部提供関数
        //================================================================================
        #region Public Methods
        // --------------------------------------------------
        #region <　イベント系メソッド群　>
        /// <summary>
        /// 商品データ変更イベント登録
        /// </summary>
        /// <param name="handler"></param>
        public void AddChangedGoodsDataEvent(ChangedGoodsDataEventHandler handler)
        {
            mChangedGoodsDataEvent += handler;
        }

        /// <summary>
        /// 商品データ変更イベント削除
        /// </summary>
        /// <param name="handler"></param>
        public void RemoveChangedGoodsDataEvent(ChangedGoodsDataEventHandler handler)
        {
            mChangedGoodsDataEvent -= handler;
        }
        #endregion

        // --------------------------------------------------
        #region < 初期値データ取得用メソッド群 >
        #region ●初期値データ取得
        /// <summary>
        /// 初期値データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        public int SearchInitial(string enterpriseCode, string sectionCode, out string msg)
        {
            GoodsAcs.LogWrite("●GoodsAcs.SearchInitial", "", "初期値データ取得　開始");

            //---------------------------------------------------------------------
            // 各種データ保存オブジェクト生成
            //---------------------------------------------------------------------
            // メーカー情報
            if (_drMaker == null) _drMaker = new Dictionary<int, MakerUMnt>();

            // BLコード情報
            if (_drBLGoodsCd == null) _drBLGoodsCd = new Dictionary<int, BLGoodsCdUMnt>();

            // BLグループ情報
            if (_drBLGroup == null) _drBLGroup = new Dictionary<int, BLGroupU>();

            // 商品中分類情報
            if (_drGoodsMGroup == null) _drGoodsMGroup = new Dictionary<int, GoodsGroupU>();

            // 商品大分類情報(ユーザーガイド)
            if (_drGoodsLGroup == null) _drGoodsLGroup = new Dictionary<int, string>();

            // 自社分類情報(ユーザーガイド)
            if (_drEnterpriseGanreCode == null) _drEnterpriseGanreCode = new Dictionary<int, string>();

            // 販売区分情報(ユーザーガイド)
            if (_drSalesCode == null) _drSalesCode = new Dictionary<int, string>();

            // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // 優良設定情報
            if (_drPrmSettingWork == null) _drPrmSettingWork = new List<PrmSettingUWork>();
            // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // 2009.01.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //// 商品管理情報
            //if (_goodsMngList == null) _goodsMngList = new List<GoodsMng>();
            // 商品管理情報
            if (_goodsMngList == null) _goodsMngList = new List<GoodsMngWork>();
            // 2009.01.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // 2009.02.24 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // 離島価格情報
            if (_isolIslandList == null) _isolIslandList = new List<IsolIslandPrcWork>();
            // 2009.02.24 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // 2009.04.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // 仕入先情報
            if (_supplierWorkList == null) _supplierWorkList = new List<SupplierWork>();
            // 2009.04.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // Staticキャッシュクリア 
            ArrayList clearData = null;
            ClearStaticData(clearData);

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            try
            {
                // 取得したい検索結果データクラスを設定
                CustomSerializeArrayList workList = new CustomSerializeArrayList();

                // サーバーユーザーデータ
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();

                // ローカルユーザーデータ
                if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //// サーバー提供データ
                //if (this._iGoodsRelationDataDB == null) this._iGoodsRelationDataDB = MediationGoodsRelationDataDB.GetGoodsRelationDataDB();
                //// ローカル提供データ
                //if (this._goodsRelationDataLcDB == null) this._goodsRelationDataLcDB = new GoodsRelationDataLcDB();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                # region // 2008/09/04 DEL
                //#region < 提供分初期値取得データ取得　>
                ////---------------------------------------------------------------------
                //// 提供分初期値データ取得
                ////---------------------------------------------------------------------

                ////---------------------------------------------------------------------
                //// 初期処理
                ////---------------------------------------------------------------------
                //// 抽出条件設定
                //GoodsCndtnWork cmnCdtnWork = new GoodsCndtnWork();
                //cmnCdtnWork.EnterpriseCode = enterpriseCode; // 企業コード

                //// メーカー情報
                //PMakerNmWork makerWork = new PMakerNmWork();
                //workList.Add(makerWork);

                //// BLコード情報
                //TbsPartsCodeWork blGoodsCdWork = new TbsPartsCodeWork();
                //workList.Add(blGoodsCdWork);

                //// BLグループ情報
                //BLGroupWork blGroupWork = new BLGroupWork();
                //workList.Add(blGroupWork);

                //// 商品中分類情報
                //GoodsMGroupWork goodsMGroupWork = new GoodsMGroupWork();
                //workList.Add(goodsMGroupWork);

                //// 商品大分類情報(ユーザーガイド)
                //// 自社分類情報(ユーザーガイド)
                //// 販売区分情報(ユーザーガイド)
                //// ※UIからはユーザーガイドの１データクラスしかセットしませんが
                ////   リモートからは上記３データクラス分が戻りとなります。
                //UserGdBdWork userGdBdWork = new UserGdBdWork();
                //workList.Add(userGdBdWork);

                //// オブジェクトへセット
                //object retObj = workList;

                ////---------------------------------------------------------------------
                //// 検索
                ////---------------------------------------------------------------------
                //if (_isLocalDBRead)
                //{
                //    // ローカル
                //    status = this._goodsRelationDataLcDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                //}
                //else
                //{
                //    // リモート
                //    status = this._iGoodsRelationDataDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                //}

                //switch (status)
                //{
                //    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //        {
                //            workList = retObj as CustomSerializeArrayList;

                //            if (workList == null) break;

                //            #region メーカー情報
                //            //---------------------------------------------------------------------
                //            // メーカー情報取得
                //            //---------------------------------------------------------------------
                //            //---------------------------------------------------------------------
                //            // サーバーデータ取得
                //            //---------------------------------------------------------------------
                //            if (workList[0] is ArrayList)
                //            {
                //                foreach (ArrayList arList in workList)
                //                {
                //                    if (arList != null && arList.Count > 0)
                //                    {
                //                        if (arList[0] is PMakerNmWork)
                //                        {
                //                            foreach (PMakerNmWork work in arList)
                //                            {
                //                                MakerUMnt makerUMnt = new MakerUMnt();
                //                                makerUMnt.GoodsMakerCd = work.PartsMakerCode;
                //                                makerUMnt.MakerName = work.PartsMakerFullName;
                //                                makerUMnt.MakerKanaName = work.PartsMakerHalfName;
                //                                makerUMnt.DivisionName = CT_DIVISIONNAME_USR;

                //                                if (!_drMaker.ContainsKey(makerUMnt.GoodsMakerCd))
                //                                {
                //                                    _drMaker.Add(makerUMnt.GoodsMakerCd, makerUMnt);
                //                                }
                //                                else
                //                                {
                //                                    _drMaker[makerUMnt.GoodsMakerCd] = makerUMnt;
                //                                }
                //                            }

                //                            // 未設定メーカーデータが存在しなければ、デフォルトを追加する
                //                            if (!_drMaker.ContainsKey(CT_NoMakerCode))
                //                            {
                //                                MakerUMnt dumyMakerU = new MakerUMnt();
                //                                dumyMakerU.GoodsMakerCd = CT_NoMakerCode;
                //                                dumyMakerU.MakerName = CT_NoMakerName;

                //                                _drMaker.Add(CT_NoMakerCode, dumyMakerU);
                //                            }
                //                        }

                //                    }
                //                }
                //            }
                //            //---------------------------------------------------------------------
                //            // ローカルデータ取得
                //            //---------------------------------------------------------------------
                //            for (int i = 0; i < workList.Count; ++i)
                //            {
                //                if (workList[i] is List<PMakerNmWork>)
                //                {
                //                    List<PMakerNmWork> workList2 = new List<PMakerNmWork>();
                //                    workList2 = workList[i] as List<PMakerNmWork>;
                //                    foreach (PMakerNmWork work in workList2)
                //                    {
                //                        MakerUMnt makerUMnt = new MakerUMnt();
                //                        makerUMnt.GoodsMakerCd = work.PartsMakerCode;
                //                        makerUMnt.MakerName = work.PartsMakerFullName;
                //                        makerUMnt.MakerKanaName = work.PartsMakerHalfName;
                //                        makerUMnt.DivisionName = CT_DIVISIONNAME_USR;

                //                        if (!_drMaker.ContainsKey(makerUMnt.GoodsMakerCd))
                //                        {
                //                            _drMaker.Add(makerUMnt.GoodsMakerCd, makerUMnt);
                //                        }
                //                        else
                //                        {
                //                            _drMaker[makerUMnt.GoodsMakerCd] = makerUMnt;
                //                        }
                //                    }
                //                    // 未設定メーカーデータが存在しなければ、デフォルトを追加する
                //                    if (!_drMaker.ContainsKey(CT_NoMakerCode))
                //                    {
                //                        MakerUMnt dumyMakerUMnt = new MakerUMnt();
                //                        dumyMakerUMnt.GoodsMakerCd = CT_NoMakerCode;
                //                        dumyMakerUMnt.MakerName = CT_NoMakerName;

                //                        _drMaker.Add(CT_NoMakerCode, dumyMakerUMnt);
                //                    }
                //                }
                //            }
                //            #endregion

                //            #region BLコード情報
                //            //---------------------------------------------------------------------
                //            // BLコード情報取得
                //            //---------------------------------------------------------------------
                //            //---------------------------------------------------------------------
                //            // サーバーデータ取得
                //            //---------------------------------------------------------------------
                //            if (workList[0] is ArrayList)
                //            {
                //                foreach (ArrayList arList in workList)
                //                {
                //                    if (arList != null && arList.Count > 0)
                //                    {
                //                        if (arList[0] is TbsPartsCodeWork)
                //                        {
                //                            foreach (TbsPartsCodeWork work in arList)
                //                            {
                //                                BLGoodsCdUMnt bLGoodsCdUMnt = new BLGoodsCdUMnt();
                //                                bLGoodsCdUMnt.BLGoodsCode = work.TbsPartsCode;
                //                                bLGoodsCdUMnt.BLGoodsFullName = work.TbsPartsFullName;
                //                                bLGoodsCdUMnt.BLGloupCode = work.BLGroupCode;


                //                                if (!_drBLGoodsCd.ContainsKey(bLGoodsCdUMnt.BLGoodsCode))
                //                                {
                //                                    _drBLGoodsCd.Add(bLGoodsCdUMnt.BLGoodsCode, bLGoodsCdUMnt);
                //                                }
                //                                else
                //                                {
                //                                    _drBLGoodsCd[bLGoodsCdUMnt.BLGoodsCode] = bLGoodsCdUMnt;
                //                                }
                //                            }

                //                        }

                //                    }
                //                }
                //            }
                //            //---------------------------------------------------------------------
                //            // ローカルデータ取得
                //            //---------------------------------------------------------------------
                //            for (int i = 0; i < workList.Count; ++i)
                //            {
                //                if (workList[i] is List<TbsPartsCodeWork>)
                //                {
                //                    List<TbsPartsCodeWork> workList2 = new List<TbsPartsCodeWork>();
                //                    workList2 = workList[i] as List<TbsPartsCodeWork>;
                //                    foreach (TbsPartsCodeWork work in workList2)
                //                    {
                //                        BLGoodsCdUMnt blGoodsCdUMnt = new BLGoodsCdUMnt();
                //                        blGoodsCdUMnt.BLGoodsCode = work.TbsPartsCode;
                //                        blGoodsCdUMnt.BLGoodsFullName = work.TbsPartsFullName;
                //                        blGoodsCdUMnt.BLGloupCode = work.BLGroupCode;

                //                        if (!_drBLGoodsCd.ContainsKey(blGoodsCdUMnt.BLGoodsCode))
                //                        {
                //                            _drBLGoodsCd.Add(blGoodsCdUMnt.BLGoodsCode, blGoodsCdUMnt);
                //                        }
                //                        else
                //                        {
                //                            _drBLGoodsCd[blGoodsCdUMnt.BLGoodsCode] = blGoodsCdUMnt;
                //                        }
                //                    }
                //                }
                //            }
                //            #endregion

                //            #region BLグループ情報
                //            //---------------------------------------------------------------------
                //            // BLグループ情報取得
                //            //---------------------------------------------------------------------
                //            List<BLGroupU> bLGroupUList;
                //            status2 = GetBLGroupWorkToUIdata(workList, out bLGroupUList);
                //            switch (status2)
                //            {
                //                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //                    {
                //                        // 内部キャッシュに保存する
                //                        foreach (BLGroupU bLGroupU in bLGroupUList)
                //                        {
                //                            if (_drBLGroup.ContainsKey(bLGroupU.BLGroupCode))
                //                            {
                //                                _drBLGroup[bLGroupU.BLGroupCode] = bLGroupU;
                //                            }
                //                            else
                //                            {
                //                                _drBLGroup.Add(bLGroupU.BLGroupCode, bLGroupU);
                //                            }
                //                        }

                //                        break;
                //                    }
                //                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //                    break;
                //                default:
                //                    msg = "BLグループ情報の取得でエラーが発生しました";
                //                    return status2;
                //            }
                //            #endregion

                //            #region 商品中分類情報
                //            //---------------------------------------------------------------------
                //            // 商品中分類情報取得
                //            //---------------------------------------------------------------------
                //            List<GoodsGroupU> goodsGroupUList;
                //            status2 = this.GetGoodsMGroupWorkToUIdata(workList, out goodsGroupUList);
                //            switch (status2)
                //            {
                //                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //                    {
                //                        // 内部キャッシュに保存する
                //                        foreach (GoodsGroupU goodsGroupU in goodsGroupUList)
                //                        {
                //                            if (_drGoodsMGroup.ContainsKey(goodsGroupU.GoodsMGroup))
                //                            {
                //                                _drGoodsMGroup[goodsGroupU.GoodsMGroup] = goodsGroupU;
                //                            }
                //                            else
                //                            {
                //                                _drGoodsMGroup.Add(goodsGroupU.GoodsMGroup, goodsGroupU);
                //                            }
                //                        }

                //                        break;
                //                    }
                //                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //                    break;
                //                default:
                //                    msg = "商品中分類情報の取得でエラーが発生しました";
                //                    return status2;
                //            }
                //            #endregion

                //            #region 商品大分類情報
                //            //---------------------------------------------------------------------
                //            // 商品大分類情報取得
                //            //---------------------------------------------------------------------
                //            List<UserGdBdU> goodsLGroupList;
                //            status2 = this.GetGoodsLGroupWorkToUIdata(workList, out goodsLGroupList);
                //            switch (status2)
                //            {
                //                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //                    {
                //                        // 内部キャッシュに保存する
                //                        foreach (UserGdBdU goodsLGroup in goodsLGroupList)
                //                        {
                //                            if (_drGoodsLGroup.ContainsKey(goodsLGroup.GuideCode))
                //                            {
                //                                _drGoodsLGroup[goodsLGroup.GuideCode] = goodsLGroup.GuideName;
                //                            }
                //                            else
                //                            {
                //                                _drGoodsLGroup.Add(goodsLGroup.GuideCode, goodsLGroup.GuideName);
                //                            }
                //                        }

                //                        break;
                //                    }
                //                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //                    break;
                //                default:
                //                    msg = "商品大分類情報の取得でエラーが発生しました";
                //                    return status2;
                //            }
                //            #endregion

                //            #region 自社分類情報
                //            //---------------------------------------------------------------------
                //            // 自社分類情報取得
                //            //---------------------------------------------------------------------
                //            List<UserGdBdU> enterpriseGanreList;
                //            status2 = this.GetEnterpriseGanreWorkToUIdata(workList, out enterpriseGanreList);
                //            switch (status2)
                //            {
                //                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //                    {
                //                        // 内部キャッシュに保存する
                //                        foreach (UserGdBdU enterpriseGanre in enterpriseGanreList)
                //                        {
                //                            if (_drEnterpriseGanreCode.ContainsKey(enterpriseGanre.GuideCode))
                //                            {
                //                                _drEnterpriseGanreCode[enterpriseGanre.GuideCode] = enterpriseGanre.GuideName;
                //                            }
                //                            else
                //                            {
                //                                _drEnterpriseGanreCode.Add(enterpriseGanre.GuideCode, enterpriseGanre.GuideName);
                //                            }
                //                        }

                //                        break;
                //                    }
                //                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //                    break;
                //                default:
                //                    msg = "自社分類情報の取得でエラーが発生しました";
                //                    return status2;
                //            }
                //            #endregion

                //            #region 販売区分情報
                //            //---------------------------------------------------------------------
                //            // 販売区分情報取得
                //            //---------------------------------------------------------------------
                //            List<UserGdBdU> salesList;
                //            status2 = this.GetSalesCodeWorkToUIdata(workList, out salesList);
                //            switch (status2)
                //            {
                //                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //                    {
                //                        // 内部キャッシュに保存する
                //                        foreach (UserGdBdU sales in salesList)
                //                        {
                //                            if (_drSalesCode.ContainsKey(sales.GuideCode))
                //                            {
                //                                _drSalesCode[sales.GuideCode] = sales.GuideName;
                //                            }
                //                            else
                //                            {
                //                                _drSalesCode.Add(sales.GuideCode, sales.GuideName);
                //                            }
                //                        }

                //                        break;
                //                    }
                //                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //                    break;
                //                default:
                //                    msg = "販売区分情報の取得でエラーが発生しました";
                //                    return status2;
                //            }
                //            #endregion

                //            break;
                //        }
                //    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //        break;
                //    default:
                //        msg = "初期値データの取得に失敗しました";
                //        break;
                //}

                //#endregion
                # endregion
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                #region <　ユーザー分初期値データ取得　>
                //---------------------------------------------------------------------
                // ユーザー分初期値データ取得
                //---------------------------------------------------------------------

                //---------------------------------------------------------------------
                // 初期処理
                //---------------------------------------------------------------------
                // ユーザー登録分抽出条件
                GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();
                goodsUCndtnWork.EnterpriseCode = enterpriseCode;

                workList.Clear();

                // メーカー情報
                MakerUWork makerUWork = new MakerUWork();
                makerUWork.EnterpriseCode = enterpriseCode;
                workList.Add(makerUWork);

                // BLコード情報
                BLGoodsCdUWork blGoodsCdUWork = new BLGoodsCdUWork();
                blGoodsCdUWork.EnterpriseCode = enterpriseCode;
                workList.Add(blGoodsCdUWork);

                // BLグループ情報
                BLGroupUWork blGroupUWork = new BLGroupUWork();
                blGroupUWork.EnterpriseCode = enterpriseCode;
                workList.Add(blGroupUWork);

                // 商品中分類情報
                GoodsGroupUWork goodsMGroupUWork = new GoodsGroupUWork();
                goodsMGroupUWork.EnterpriseCode = enterpriseCode;
                workList.Add(goodsMGroupUWork);

                // 商品大分類情報(ユーザーガイド)
                // 自社分類情報(ユーザーガイド)
                // 販売区分情報(ユーザーガイド)
                // ※UIからはユーザーガイドの１データクラスしかセットしませんが
                //   リモートからは上記３データクラス分が戻りとなります。
                UserGdBdUWork userGdBdUWork = new UserGdBdUWork();
                userGdBdUWork.EnterpriseCode = enterpriseCode;
                workList.Add(userGdBdUWork);

                // 優良設定情報
                PrmSettingUWork prmSettingUWork = new PrmSettingUWork();
                prmSettingUWork.EnterpriseCode = enterpriseCode;
                workList.Add(prmSettingUWork);

                // 商品管理情報
                GoodsMngWork goodsMngWork = new GoodsMngWork();
                goodsMngWork.EnterpriseCode = enterpriseCode;
                workList.Add(goodsMngWork);

                // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                // 売上全体設定
                SalesTtlStWork salesTtlStWork = new SalesTtlStWork();
                salesTtlStWork.EnterpriseCode = enterpriseCode;
                workList.Add(salesTtlStWork);
                // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                // 離島価格情報
                IsolIslandPrcWork isolIslandPrcWork = new IsolIslandPrcWork();
                isolIslandPrcWork.EnterpriseCode = enterpriseCode;
                workList.Add(isolIslandPrcWork);
                // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                // 2009.04.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                // 仕入先情報
                if (this._isGetSupplier)
                {
                    SupplierWork supplierWork = new SupplierWork();
                    supplierWork.EnterpriseCode = enterpriseCode;
                    workList.Add(supplierWork);
                }
                // 2009.04.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                // オブジェクトへセット
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
                object retObj;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
                retObj = workList;

                //---------------------------------------------------------------------
                // 検索
                //---------------------------------------------------------------------
                GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Search", "各種マスタ検索　開始");
                if (_isLocalDBRead)
                {
                    // ローカル
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                else
                {
                    // リモート
                    status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Search", "各種マスタ検索　終了");

                //---------------------------------------------------------------------
                // 各種情報取得
                //---------------------------------------------------------------------
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            if (workList == null)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            this.SetUnitPriceCalculation(enterpriseCode);  // ADD 2011/07/25

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "メーカー情報キャッシュ　開始");
                            #region メーカー情報
                            //---------------------------------------------------------------------
                            // メーカー情報取得
                            //---------------------------------------------------------------------
                            //---------------------------------------------------------------------
                            // サーバーデータ取得
                            //---------------------------------------------------------------------
                            if (workList[0] is ArrayList)
                            {
                                foreach (ArrayList arList in workList)
                                {
                                    if (arList != null && arList.Count > 0)
                                    {
                                        if (arList[0] is MakerUWork)
                                        {
                                            foreach (MakerUWork work in arList)
                                            {
                                                MakerUMnt makerUMnt = new MakerUMnt();
                                                makerUMnt.GoodsMakerCd = work.GoodsMakerCd;
                                                makerUMnt.MakerName = work.MakerName;
                                                makerUMnt.MakerKanaName = work.MakerKanaName;
                                                makerUMnt.DivisionName = CT_DIVISIONNAME_USR;

                                                if (!_drMaker.ContainsKey(makerUMnt.GoodsMakerCd))
                                                {
                                                    _drMaker.Add(makerUMnt.GoodsMakerCd, makerUMnt);
                                                }
                                                else
                                                {
                                                    _drMaker[makerUMnt.GoodsMakerCd] = makerUMnt;
                                                }
                                            }

                                            // 未設定メーカーデータが存在しなければ、デフォルトを追加する
                                            if (!_drMaker.ContainsKey(CT_NoMakerCode))
                                            {
                                                MakerUMnt dumyMakerU = new MakerUMnt();
                                                dumyMakerU.GoodsMakerCd = CT_NoMakerCode;
                                                dumyMakerU.MakerName = CT_NoMakerName;

                                                _drMaker.Add(CT_NoMakerCode, dumyMakerU);
                                            }
                                        }

                                    }
                                }
                            }
                            //---------------------------------------------------------------------
                            // ローカルデータ取得
                            //---------------------------------------------------------------------
                            for (int i = 0; i < workList.Count; ++i)
                            {
                                if (workList[i] is List<MakerUWork>)
                                {
                                    List<MakerUWork> workList2 = new List<MakerUWork>();
                                    workList2 = workList[i] as List<MakerUWork>;
                                    foreach (MakerUWork work in workList2)
                                    {
                                        MakerUMnt makerUMnt = new MakerUMnt();
                                        makerUMnt.GoodsMakerCd = work.GoodsMakerCd;
                                        makerUMnt.MakerName = work.MakerName;
                                        makerUMnt.MakerKanaName = work.MakerKanaName;
                                        makerUMnt.DivisionName = CT_DIVISIONNAME_USR;

                                        if (!_drMaker.ContainsKey(makerUMnt.GoodsMakerCd))
                                        {
                                            _drMaker.Add(makerUMnt.GoodsMakerCd, makerUMnt);
                                        }
                                        else
                                        {
                                            _drMaker[makerUMnt.GoodsMakerCd] = makerUMnt;
                                        }
                                    }
                                    // 未設定メーカーデータが存在しなければ、デフォルトを追加する
                                    if (!_drMaker.ContainsKey(CT_NoMakerCode))
                                    {
                                        MakerUMnt dumyMakerUMnt = new MakerUMnt();
                                        dumyMakerUMnt.GoodsMakerCd = CT_NoMakerCode;
                                        dumyMakerUMnt.MakerName = CT_NoMakerName;

                                        _drMaker.Add(CT_NoMakerCode, dumyMakerUMnt);
                                    }
                                }
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "メーカー情報キャッシュ　終了", _drMaker.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "BLコード情報キャッシュ　開始");
                            #region BLコード情報
                            //---------------------------------------------------------------------
                            // BLコード情報取得
                            //---------------------------------------------------------------------
                            //---------------------------------------------------------------------
                            // サーバーデータ取得
                            //---------------------------------------------------------------------
                            if (workList[0] is ArrayList)
                            {
                                foreach (ArrayList arList in workList)
                                {
                                    if (arList != null && arList.Count > 0)
                                    {
                                        if (arList[0] is BLGoodsCdUWork)
                                        {
                                            foreach (BLGoodsCdUWork work in arList)
                                            {
                                                BLGoodsCdUMnt bLGoodsCdUMnt = new BLGoodsCdUMnt();
                                                bLGoodsCdUMnt.BLGoodsCode = work.BLGoodsCode;
                                                bLGoodsCdUMnt.BLGoodsFullName = work.BLGoodsFullName;
                                                // --- ADD m.suzuki 2010/04/15 ---------->>>>>
                                                bLGoodsCdUMnt.BLGoodsHalfName = work.BLGoodsHalfName;
                                                // --- ADD m.suzuki 2010/04/15 ----------<<<<<
                                                bLGoodsCdUMnt.BLGloupCode = work.BLGroupCode;
                                                bLGoodsCdUMnt.GoodsRateGrpCode = work.GoodsRateGrpCode;

                                                if (!_drBLGoodsCd.ContainsKey(bLGoodsCdUMnt.BLGoodsCode))
                                                {
                                                    _drBLGoodsCd.Add(bLGoodsCdUMnt.BLGoodsCode, bLGoodsCdUMnt);
                                                }
                                                else
                                                {
                                                    _drBLGoodsCd[bLGoodsCdUMnt.BLGoodsCode] = bLGoodsCdUMnt;
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                            //---------------------------------------------------------------------
                            // ローカルデータ取得
                            //---------------------------------------------------------------------
                            for (int i = 0; i < workList.Count; ++i)
                            {
                                if (workList[i] is List<BLGoodsCdUWork>)
                                {
                                    List<BLGoodsCdUWork> workList2 = new List<BLGoodsCdUWork>();
                                    workList2 = workList[i] as List<BLGoodsCdUWork>;
                                    foreach (BLGoodsCdUWork work in workList2)
                                    {
                                        BLGoodsCdUMnt blGoodsCdUMnt = new BLGoodsCdUMnt();
                                        blGoodsCdUMnt.BLGoodsCode = work.BLGoodsCode;
                                        blGoodsCdUMnt.BLGoodsFullName = work.BLGoodsFullName;
                                        // --- ADD m.suzuki 2010/04/15 ---------->>>>>
                                        blGoodsCdUMnt.BLGoodsHalfName = work.BLGoodsHalfName;
                                        // --- ADD m.suzuki 2010/04/15 ----------<<<<<
                                        blGoodsCdUMnt.BLGloupCode = work.BLGroupCode;
                                        blGoodsCdUMnt.GoodsRateGrpCode = work.GoodsRateGrpCode;

                                        if (!_drBLGoodsCd.ContainsKey(blGoodsCdUMnt.BLGoodsCode))
                                        {
                                            _drBLGoodsCd.Add(blGoodsCdUMnt.BLGoodsCode, blGoodsCdUMnt);
                                        }
                                        else
                                        {
                                            _drBLGoodsCd[blGoodsCdUMnt.BLGoodsCode] = blGoodsCdUMnt;
                                        }
                                    }
                                }
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "BLコード情報キャッシュ　終了", _drBLGoodsCd.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "BLグループ情報キャッシュ　開始");
                            #region BLグループ情報
                            //---------------------------------------------------------------------
                            // BLグループ情報取得
                            //---------------------------------------------------------------------
                            List<BLGroupU> bLGroupUList;
                            status2 = GetBLGroupUWorkToUIdata(workList, out bLGroupUList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (BLGroupU bLGroupU in bLGroupUList)
                                        {
                                            if (_drBLGroup.ContainsKey(bLGroupU.BLGroupCode))
                                            {
                                                _drBLGroup[bLGroupU.BLGroupCode] = bLGroupU;
                                            }
                                            else
                                            {
                                                _drBLGroup.Add(bLGroupU.BLGroupCode, bLGroupU);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "BLグループ情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "BLグループ情報キャッシュ　終了", _drBLGroup.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "商品中分類情報キャッシュ　開始");
                            #region 商品中分類情報
                            //---------------------------------------------------------------------
                            // 商品中分類情報取得
                            //---------------------------------------------------------------------
                            List<GoodsGroupU> goodsGroupUList;
                            status2 = this.GetGoodsMGroupUWorkToUIdata(workList, out goodsGroupUList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (GoodsGroupU goodsGroupU in goodsGroupUList)
                                        {
                                            if (_drGoodsMGroup.ContainsKey(goodsGroupU.GoodsMGroup))
                                            {
                                                _drGoodsMGroup[goodsGroupU.GoodsMGroup] = goodsGroupU;
                                            }
                                            else
                                            {
                                                _drGoodsMGroup.Add(goodsGroupU.GoodsMGroup, goodsGroupU);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "商品中分類情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "商品中分類情報キャッシュ　終了", _drGoodsMGroup.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "商品大分類情報キャッシュ　開始");
                            #region 商品大分類情報
                            //---------------------------------------------------------------------
                            // 商品大分類情報取得
                            //---------------------------------------------------------------------
                            List<UserGdBdU> goodsLGroupList;
                            status2 = this.GetGoodsLGroupUWorkToUIdata(workList, out goodsLGroupList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (UserGdBdU goodsLGroup in goodsLGroupList)
                                        {
                                            if (_drGoodsLGroup.ContainsKey(goodsLGroup.GuideCode))
                                            {
                                                _drGoodsLGroup[goodsLGroup.GuideCode] = goodsLGroup.GuideName;
                                            }
                                            else
                                            {
                                                _drGoodsLGroup.Add(goodsLGroup.GuideCode, goodsLGroup.GuideName);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "商品大分類情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "商品大分類情報キャッシュ　終了", _drGoodsLGroup.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "自社分類情報キャッシュ　開始");
                            #region 自社分類情報
                            //---------------------------------------------------------------------
                            // 自社分類情報取得
                            //---------------------------------------------------------------------
                            List<UserGdBdU> enterpriseGanreList;
                            status2 = this.GetEnterpriseGanreUWorkToUIdata(workList, out enterpriseGanreList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (UserGdBdU enterpriseGanre in enterpriseGanreList)
                                        {
                                            if (_drEnterpriseGanreCode.ContainsKey(enterpriseGanre.GuideCode))
                                            {
                                                _drEnterpriseGanreCode[enterpriseGanre.GuideCode] = enterpriseGanre.GuideName;
                                            }
                                            else
                                            {
                                                _drEnterpriseGanreCode.Add(enterpriseGanre.GuideCode, enterpriseGanre.GuideName);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "自社分類情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "自社分類情報キャッシュ　終了", _drEnterpriseGanreCode.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "販売区分情報キャッシュ　開始");
                            #region 販売区分情報
                            //---------------------------------------------------------------------
                            // 販売区分情報取得
                            //---------------------------------------------------------------------
                            List<UserGdBdU> salesList;
                            status2 = this.GetSalesCodeUWorkToUIdata(workList, out salesList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (UserGdBdU sales in salesList)
                                        {
                                            if (_drSalesCode.ContainsKey(sales.GuideCode))
                                            {
                                                _drSalesCode[sales.GuideCode] = sales.GuideName;
                                            }
                                            else
                                            {
                                                _drSalesCode.Add(sales.GuideCode, sales.GuideName);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "販売区分情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "販売区分情報キャッシュ　終了", _drSalesCode.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "商品管理情報キャッシュ　開始");
                            #region 商品管理情報
                            //---------------------------------------------------------------------
                            // 商品管理情報
                            //---------------------------------------------------------------------
                            if (workList[0] is ArrayList)
                            {
                                foreach (ArrayList arList in workList)
                                {
                                    if (arList != null && arList.Count > 0)
                                    {
                                        if (arList[0] is GoodsMngWork)
                                        {
                                            // 2009.01.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            //foreach (GoodsMngWork work in arList)
                                            //{
                                            //    GoodsMng goodsMng = new GoodsMng();
                                            //    goodsMng.GoodsMakerCd = work.GoodsMakerCd;
                                            //    goodsMng.GoodsNo = work.GoodsNo;
                                            //    goodsMng.SectionCode = work.SectionCode;
                                            //    goodsMng.SupplierCd1 = work.SupplierCd;
                                            //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/30 DEL
                                            //    //goodsMng.SupplierName1 = work.SupplierSnm;
                                            //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/30 DEL
                                            //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/30 ADD
                                            //    goodsMng.SupplierSnm = work.SupplierSnm;
                                            //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/30 ADD
                                            //    // 2008.10.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            //    goodsMng.BLGoodsCode = work.BLGoodsCode;
                                            //    // 2008.10.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                            //    if (!_goodsMngList.Contains(goodsMng))
                                            //    {
                                            //        _goodsMngList.Add(goodsMng);
                                            //    }
                                            //}

                                            _goodsMngList = new List<GoodsMngWork>((GoodsMngWork[])arList.ToArray(typeof(GoodsMngWork)));
                                            // 2009.01.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                            // 2009/04/13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            //// 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            //_goodsMngListExceptGoodsNo = _goodsMngList.FindAll(
                                            //    delegate(GoodsMngWork mngWork)
                                            //    {
                                            //        if (mngWork.GoodsNo.Trim() == string.Empty)
                                            //        {
                                            //            return true;
                                            //        }
                                            //        else
                                            //        {
                                            //            return false;
                                            //        }
                                            //    }
                                            //);
                                            //_goodsMngListOnlyGoodsNo = _goodsMngList.FindAll(
                                            //    delegate(GoodsMngWork mngWork)
                                            //    {
                                            //        if (mngWork.GoodsNo.Trim() != string.Empty)
                                            //        {
                                            //            return true;
                                            //        }
                                            //        else
                                            //        {
                                            //            return false;
                                            //        }
                                            //    }
                                            //);

                                            //// 2009.03.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                            ////// 降順にソートする(優先度高→低)
                                            ////_goodsMngListOnlyGoodsNo.Sort(new GoodsMngComparer());
                                            ////// 降順にソートする(優先度高→低)
                                            ////_goodsMngListExceptGoodsNo.Sort(new GoodsMngComparer());
                                            //// 降順にソートする(優先度高→低)
                                            //_goodsMngListOnlyGoodsNo.Sort(new GoodsMngComparerOnlyGoodsNo());
                                            //// 降順にソートする(優先度高→低)
                                            //_goodsMngListExceptGoodsNo.Sort(new GoodsMngComparer());
                                            //// 2009.03.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                            //// 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                            _goodsMngDic1 = new Dictionary<string, GoodsMngWork>();     //拠点＋メーカー＋品番
                                            _goodsMngDic2 = new Dictionary<string, GoodsMngWork>();     //拠点＋中分類＋メーカー＋ＢＬ
                                            _goodsMngDic3 = new Dictionary<string, GoodsMngWork>();     //拠点＋中分類＋メーカー
                                            _goodsMngDic4 = new Dictionary<string, GoodsMngWork>();     //拠点＋メーカー

                                            StringBuilder goodsMngDic1Key = null;
                                            StringBuilder goodsMngDic2Key = null;
                                            StringBuilder goodsMngDic3Key = null;
                                            StringBuilder goodsMngDic4Key = null;
                                            for (int i = 0; i <= _goodsMngList.Count - 1; i++)
                                            {
                                                goodsMngDic1Key = new StringBuilder();
                                                goodsMngDic2Key = new StringBuilder();
                                                goodsMngDic3Key = new StringBuilder();
                                                goodsMngDic4Key = new StringBuilder();

                                                goodsMngDic4Key.Append(_goodsMngList[i].SectionCode.Trim().PadLeft(2,'0'));     //拠点
                                                goodsMngDic4Key.Append(_goodsMngList[i].GoodsMakerCd.ToString("0000"));         //メーカー

                                                if (_goodsMngList[i].GoodsNo.Trim() != string.Empty)
                                                {
                                                    goodsMngDic1Key.Append(goodsMngDic4Key.ToString());                         //拠点＋メーカー
                                                    goodsMngDic1Key.Append(_goodsMngList[i].GoodsNo.Trim());                    //品番

                                                    //拠点＋メーカー＋品番
                                                    if (!_goodsMngDic1.ContainsKey(goodsMngDic1Key.ToString()))
                                                    {
                                                        _goodsMngDic1.Add(goodsMngDic1Key.ToString(), _goodsMngList[i]);
                                                    }
                                                }
                                                else
                                                {
                                                    goodsMngDic3Key.Append(goodsMngDic4Key.ToString());                         //拠点＋メーカー
                                                    goodsMngDic3Key.Append(_goodsMngList[i].GoodsMGroup.ToString("0000"));      //中分類

                                                    goodsMngDic2Key.Append(goodsMngDic3Key.ToString());                         //拠点＋メーカー＋中分類
                                                    goodsMngDic2Key.Append(_goodsMngList[i].BLGoodsCode.ToString("00000"));     //ＢＬ

                                                    if (_goodsMngList[i].BLGoodsCode != 0)
                                                    {
                                                        //拠点＋中分類＋メーカー＋ＢＬ
                                                        if (!_goodsMngDic2.ContainsKey(goodsMngDic2Key.ToString()))
                                                        {
                                                            _goodsMngDic2.Add(goodsMngDic2Key.ToString(), _goodsMngList[i]);
                                                        }
                                                    }
                                                    else if (_goodsMngList[i].GoodsMGroup != 0)
                                                    {
                                                        //拠点＋中分類＋メーカー
                                                        if (!_goodsMngDic3.ContainsKey(goodsMngDic3Key.ToString()))
                                                        {
                                                            _goodsMngDic3.Add(goodsMngDic3Key.ToString(), _goodsMngList[i]);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //拠点＋メーカー
                                                        if (!_goodsMngDic4.ContainsKey(goodsMngDic4Key.ToString()))
                                                        {
                                                            _goodsMngDic4.Add(goodsMngDic4Key.ToString(), _goodsMngList[i]);
                                                        }
                                                    }
                                                }
                                            }
                                            // 2009/04/13 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                        }
                                    }
                                }
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "商品管理情報キャッシュ　終了", _goodsMngList.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "優良設定情報キャッシュ　開始");
                            #region 優良設定情報
                            //---------------------------------------------------------------------
                            // 優良設定情報取得
                            //---------------------------------------------------------------------
                            List<PrmSettingUWork> prmSettingList;
                            status2 = this.GetPrmSettingUWorkToUIdata(workList, out prmSettingList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                        //// 内部キャッシュに保存する
                                        //foreach (PrmSettingUWork prmSetting in prmSettingList)
                                        //{
                                        //    // 2008.12.01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                        //    //PrmSettingKey prmKey = new PrmSettingKey(prmSetting.SectionCode, prmSetting.GoodsMGroup, prmSetting.TbsPartsCode, prmSetting.PartsMakerCd);
                                        //    PrmSettingKey prmKey = new PrmSettingKey(prmSetting.SectionCode.Trim(), prmSetting.GoodsMGroup, prmSetting.TbsPartsCode, prmSetting.PartsMakerCd);
                                        //    // 2008.12.01 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                        //    if (_drPrmSettingWork.ContainsKey(prmKey))
                                        //    {
                                        //        _drPrmSettingWork[prmKey] = prmSetting;
                                        //    }
                                        //    else
                                        //    {
                                        //        _drPrmSettingWork.Add(prmKey, prmSetting);
                                        //    }
                                        //}

                                        _drPrmSettingWork = prmSettingList;
                                        // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "優良設定情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "優良設定情報キャッシュ　終了", _drPrmSettingWork.Count.ToString());

                            // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "売上全体設定情報キャッシュ　開始");
                            #region 売上全体設定情報取得
                            //---------------------------------------------------------------------
                            // 売上全体設定情報取得
                            //---------------------------------------------------------------------
                            List<SalesTtlStWork> salesTtlStList;
                            SalesTtlSt allDefSalesTtlSt = null;
                            status2 = this.GetSalesTtlStWorkToUIdata(workList, out salesTtlStList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        foreach (SalesTtlStWork work in salesTtlStList)
                                        {
                                            //////////if ((_salesTtlSt != null) && (allDefSalesTtlSt != null)) break;
                                            if (work.SectionCode.Trim() == this._loginSectionCode.Trim())
                                            {
                                                _salesTtlSt = new SalesTtlSt();
                                                _salesTtlSt.SectionCode = work.SectionCode; // 拠点コード
                                                _salesTtlSt.PartsNameDspDivCd = work.PartsNameDspDivCd; // 品名表示区分
                                            }
                                            if (work.SectionCode.Trim() == ctAllDefSectionCode.Trim())
                                            {
                                                allDefSalesTtlSt = new SalesTtlSt();
                                                allDefSalesTtlSt.SectionCode = work.SectionCode; // 拠点コード
                                                allDefSalesTtlSt.PartsNameDspDivCd = work.PartsNameDspDivCd; // 品名表示区分
                                            }
                                        }
                                        if (_salesTtlSt == null) _salesTtlSt = allDefSalesTtlSt;
                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "売上全体設定情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "売上全体設定情報キャッシュ　終了");
                            // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                            // 2009.02.24 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "離島価格情報キャッシュ　開始");
                            #region 離島価格情報
                            //---------------------------------------------------------------------
                            // 離島価格情報
                            //---------------------------------------------------------------------
                            if (workList[0] is ArrayList)
                            {
                                foreach (ArrayList arList in workList)
                                {
                                    if (arList != null && arList.Count > 0)
                                    {
                                        if (arList[0] is IsolIslandPrcWork)
                                        {
                                            _isolIslandList = new List<IsolIslandPrcWork>((IsolIslandPrcWork[])arList.ToArray(typeof(IsolIslandPrcWork)));
                                        }
                                    }
                                }
                                _isolIslandList.Sort(new IsolIslandPrcWorkComparer());
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "離島価格情報キャッシュ　終了", _isolIslandList.Count.ToString());
                            // 2009.02.24 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                            // 2009.04.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "仕入先情報キャッシュ　開始");
                            #region 仕入先情報
                            //---------------------------------------------------------------------
                            // 仕入先情報
                            //---------------------------------------------------------------------
                            if (this._isGetSupplier)
                            {
                                if (workList[0] is ArrayList)
                                {
                                    foreach (ArrayList arList in workList)
                                    {
                                        if (arList != null && arList.Count > 0)
                                        {
                                            if (arList[0] is SupplierWork)
                                            {
                                                _supplierWorkList = new List<SupplierWork>((SupplierWork[])arList.ToArray(typeof(SupplierWork)));
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "仕入先情報キャッシュ　終了", _isolIslandList.Count.ToString());
                            // 2009.04.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        msg = "初期値データ(ユーザー分)の取得に失敗しました";
                        break;
                }
                #endregion

                // 初期値取得フラグON
                _isInitialSearch = true;

                // 部品検索コントローラー BLコードリスト設定
                if ((_drBLGoodsCd != null) && (_drBLGoodsCd.Count > 0)) this._PartsSearchController.BLGoodsCdUMntList = _drBLGoodsCd;

                // 2008.10.21 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                // 部品検索コントローラー メーカーコードリスト設定
                if ((_drMaker != null) && (_drMaker.Count > 0)) this._PartsSearchController.PartsMakerList = _drMaker;
                // 2008.10.21 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "初期値データの取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //this._iGoodsRelationDataDB = null;
                //this._goodsRelationDataLcDB = null;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
            }

            GoodsAcs.LogWrite("●GoodsAcs.SearchInitial", "", "初期値データ取得　終了");

            return 0;
        }

        // --- ADD 2013/02/13 Y.Wakita ---------->>>>>
        /// <summary>
        /// 初期値データ取得（必要な部分のみ）
        /// </summary>
        /// <returns></returns>
        public void SearchInitial()
        {
            // SearchInitialから必要なところだけ抜き出し。

            // 部品検索コントローラー BLコードリスト設定
            if ((_drBLGoodsCd != null) && (_drBLGoodsCd.Count > 0)) this._PartsSearchController.BLGoodsCdUMntList = _drBLGoodsCd;

            // 部品検索コントローラー メーカーコードリスト設定
            if ((_drMaker != null) && (_drMaker.Count > 0)) this._PartsSearchController.PartsMakerList = _drMaker;
        }
        // --- ADD 2013/02/13 Y.Wakita ----------<<<<<

        // ---  ADD 2011/07/25 ------- >>>>>
        /// <summary>
        /// 掛率優先区分に追加
        /// </summary>
        /// <remarks>
        /// <br>Note       : 掛率優先区分に追加する。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2011/07/26</br>
        /// </remarks>
        public void SetUnitPriceCalculation(string enterpriseCode)
        {

            this._companyInfAcs.Read(out this._companyInf, enterpriseCode);

            // 掛率優先区分
            if (this._companyInf != null)
            {
                this._unitPriceCalculation.RatePriorityDiv = this._companyInf.RatePriorityDiv;
            }
        }
        // ---  ADD 2011/07/25 ------- <<<<<
        #endregion

        //----- ADD 2013/08/13 田建委 Redmine#39794 --------------->>>>>
        /// <summary>
        /// 商品管理情報再検索
        /// </summary>
        /// <param name="goodsUnitData">商品連結データ</param>
        /// <param name="goodsMngData">商品管理情報</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Note       : 商品管理情報再検索を行う。</br>
        /// <br>Programmer : 田建委</br>
        /// <br>Date       : 2013/08/13</br>
        /// </remarks>
        private void SearchGoodsMngInit(GoodsUnitData goodsUnitData, GoodsMngWork goodsMngData)
        {
            //---------------------------------------------------------------------
            // 商品管理情報
            //---------------------------------------------------------------------
            StringBuilder goodsMngDic1Key = null;
            if (goodsMngData == null)
            {
                goodsMngDic1Key = new StringBuilder();
                goodsMngDic1Key.Append("00");                                            //拠点
                goodsMngDic1Key.Append(goodsUnitData.GoodsMakerCd.ToString("0000"));     //メーカー
                goodsMngDic1Key.Append(goodsUnitData.GoodsNo.Trim());                    //品番

                if (_goodsMngDic1.ContainsKey(goodsMngDic1Key.ToString()))
                {
                    _goodsMngDic1.Remove(goodsMngDic1Key.ToString());
                }
            }
            else
            {
                goodsMngDic1Key = new StringBuilder();

                goodsMngDic1Key.Append(goodsMngData.SectionCode.Trim().PadLeft(2, '0'));     //拠点
                goodsMngDic1Key.Append(goodsMngData.GoodsMakerCd.ToString("0000"));         //メーカー

                if (goodsMngData.GoodsNo.Trim() != string.Empty)
                {
                    goodsMngDic1Key.Append(goodsMngData.GoodsNo.Trim());                    //品番

                    //拠点＋メーカー＋品番
                    if (_goodsMngDic1.ContainsKey(goodsMngDic1Key.ToString()))
                    {
                        _goodsMngDic1.Remove(goodsMngDic1Key.ToString());
                    }
                    _goodsMngDic1.Add(goodsMngDic1Key.ToString(), goodsMngData);
                }
            }
        }
        //----- ADD 2013/08/13 田建委 Redmine#39794 ---------------<<<<<

        #region SearchInitial(得意先電子元帳からだけ)

        /// <summary>
        /// 初期値データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <param name="getTables">取得対象データ</param>
        /// <returns></returns>
        public int SearchInitial(string enterpriseCode, string sectionCode, out string msg, GetTables getTables)// 2013.02.25 橋本 UPD
        {
            GoodsAcs.LogWrite("●GoodsAcs.SearchInitial", "", "初期値データ取得　開始");

            //---------------------------------------------------------------------
            // 各種データ保存オブジェクト生成
            //---------------------------------------------------------------------
            // メーカー情報
            if (_drMaker == null) _drMaker = new Dictionary<int, MakerUMnt>();

            // BLコード情報
            if (_drBLGoodsCd == null) _drBLGoodsCd = new Dictionary<int, BLGoodsCdUMnt>();

            // BLグループ情報
            if (_drBLGroup == null) _drBLGroup = new Dictionary<int, BLGroupU>();

            // 商品中分類情報
            if (_drGoodsMGroup == null) _drGoodsMGroup = new Dictionary<int, GoodsGroupU>();

            // 商品大分類情報(ユーザーガイド)
            if (_drGoodsLGroup == null) _drGoodsLGroup = new Dictionary<int, string>();

            // 自社分類情報(ユーザーガイド)
            if (_drEnterpriseGanreCode == null) _drEnterpriseGanreCode = new Dictionary<int, string>();

            // 販売区分情報(ユーザーガイド)
            if (_drSalesCode == null) _drSalesCode = new Dictionary<int, string>();

            // 優良設定情報
            if (_drPrmSettingWork == null) _drPrmSettingWork = new List<PrmSettingUWork>();

            // 商品管理情報
            if (_goodsMngList == null) _goodsMngList = new List<GoodsMngWork>();

            // 離島価格情報
            if (_isolIslandList == null) _isolIslandList = new List<IsolIslandPrcWork>();

            // 仕入先情報
            if (_supplierWorkList == null) _supplierWorkList = new List<SupplierWork>();

            // Staticキャッシュクリア 
            ArrayList clearData = null;
            ClearStaticData(clearData);

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            try
            {
                // 取得したい検索結果データクラスを設定
                CustomSerializeArrayList workList = new CustomSerializeArrayList();

                // サーバーユーザーデータ
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();

                // ローカルユーザーデータ
                if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();

                #region <　ユーザー分初期値データ取得　>
                //---------------------------------------------------------------------
                // ユーザー分初期値データ取得
                //---------------------------------------------------------------------

                //---------------------------------------------------------------------
                // 初期処理
                //---------------------------------------------------------------------
                // ユーザー登録分抽出条件
                GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();
                goodsUCndtnWork.EnterpriseCode = enterpriseCode;

                workList.Clear();

                // 2013.02.25 橋本 UPD START ==============================================
                // 取得対象にメーカー情報が含まれている場合
                if ((getTables & GetTables.MakerU) == GetTables.MakerU)
                {
                    // メーカー情報
                    MakerUWork makerUWork = new MakerUWork();
                    makerUWork.EnterpriseCode = enterpriseCode;
                    workList.Add(makerUWork);
                }
                // 取得対象にBLコード情報が含まれている場合
                if ((getTables & GetTables.BLGoodsCdU) == GetTables.BLGoodsCdU)
                {
                    // BLコード情報
                    BLGoodsCdUWork blGoodsCdUWork = new BLGoodsCdUWork();
                    blGoodsCdUWork.EnterpriseCode = enterpriseCode;
                    workList.Add(blGoodsCdUWork);
                }
                // 取得対象にBLグループ情報が含まれている場合
                if ((getTables & GetTables.BLGroupU) == GetTables.BLGroupU)
                {
                    // BLグループ情報
                    BLGroupUWork blGroupUWork = new BLGroupUWork();
                    blGroupUWork.EnterpriseCode = enterpriseCode;
                    workList.Add(blGroupUWork);
                }
                // 取得対象に商品中分類情報が含まれている場合
                if ((getTables & GetTables.GoodsGroupU) == GetTables.GoodsGroupU)
                {
                    // 商品中分類情報
                    GoodsGroupUWork goodsMGroupUWork = new GoodsGroupUWork();
                    goodsMGroupUWork.EnterpriseCode = enterpriseCode;
                    workList.Add(goodsMGroupUWork);
                }
                // 取得対象にユーザーガイドが含まれている場合
                if ((getTables & GetTables.UserGdBdU) == GetTables.UserGdBdU)
                {
                    // 商品大分類情報(ユーザーガイド)
                    // 自社分類情報(ユーザーガイド)
                    // 販売区分情報(ユーザーガイド)
                    // ※UIからはユーザーガイドの１データクラスしかセットしませんが
                    //   リモートからは上記３データクラス分が戻りとなります。
                    UserGdBdUWork userGdBdUWork = new UserGdBdUWork();
                    userGdBdUWork.EnterpriseCode = enterpriseCode;
                    workList.Add(userGdBdUWork);
                }
                // 取得対象に優良設定情報が含まれている場合
                if ((getTables & GetTables.PrmSettingU) == GetTables.PrmSettingU)
                {
                    // 優良設定情報
                    PrmSettingUWork prmSettingUWork = new PrmSettingUWork();
                    prmSettingUWork.EnterpriseCode = enterpriseCode;
                    workList.Add(prmSettingUWork);
                }
                // 取得対象に商品管理情報が含まれている場合
                if ((getTables & GetTables.GoodsMng) == GetTables.GoodsMng)
                {
                    // 商品管理情報
                    GoodsMngWork goodsMngWork = new GoodsMngWork();
                    goodsMngWork.EnterpriseCode = enterpriseCode;
                    workList.Add(goodsMngWork);
                }
                // 取得対象に売上全体設定が含まれている場合
                if ((getTables & GetTables.SalesTtlSt) == GetTables.SalesTtlSt)
                {
                    // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    // 売上全体設定
                    SalesTtlStWork salesTtlStWork = new SalesTtlStWork();
                    salesTtlStWork.EnterpriseCode = enterpriseCode;
                    workList.Add(salesTtlStWork);
                    // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                }
                // 取得対象に離島価格情報が含まれている場合
                if ((getTables & GetTables.IsolIslandPrc) == GetTables.IsolIslandPrc)
                {
                    // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    // 離島価格情報
                    IsolIslandPrcWork isolIslandPrcWork = new IsolIslandPrcWork();
                    isolIslandPrcWork.EnterpriseCode = enterpriseCode;
                    workList.Add(isolIslandPrcWork);
                    // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                }
                // 2013.02.25 橋本 UPD END   ==============================================

                // 仕入先情報
                if (this._isGetSupplier)
                {
                    SupplierWork supplierWork = new SupplierWork();
                    supplierWork.EnterpriseCode = enterpriseCode;
                    workList.Add(supplierWork);
                }

                // オブジェクトへセット
                object retObj;
                retObj = workList;

                //---------------------------------------------------------------------
                // 検索
                //---------------------------------------------------------------------
                GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Search", "各種マスタ検索　開始");
                if (_isLocalDBRead)
                {
                    // ローカル
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                else
                {
                    // リモート
                    status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Search", "各種マスタ検索　終了");

                //---------------------------------------------------------------------
                // 各種情報取得
                //---------------------------------------------------------------------
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            if (workList == null)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            this.SetUnitPriceCalculation(enterpriseCode);  // ADD 2011/07/25

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "メーカー情報キャッシュ　開始");
                            #region メーカー情報
                            //---------------------------------------------------------------------
                            // メーカー情報取得
                            //---------------------------------------------------------------------
                            //---------------------------------------------------------------------
                            // サーバーデータ取得
                            //---------------------------------------------------------------------
                            if (workList[0] is ArrayList)
                            {
                                foreach (ArrayList arList in workList)
                                {
                                    if (arList != null && arList.Count > 0)
                                    {
                                        if (arList[0] is MakerUWork)
                                        {
                                            foreach (MakerUWork work in arList)
                                            {
                                                MakerUMnt makerUMnt = new MakerUMnt();
                                                makerUMnt.GoodsMakerCd = work.GoodsMakerCd;
                                                makerUMnt.MakerName = work.MakerName;
                                                makerUMnt.MakerKanaName = work.MakerKanaName;
                                                makerUMnt.DivisionName = CT_DIVISIONNAME_USR;

                                                if (!_drMaker.ContainsKey(makerUMnt.GoodsMakerCd))
                                                {
                                                    _drMaker.Add(makerUMnt.GoodsMakerCd, makerUMnt);
                                                }
                                                else
                                                {
                                                    _drMaker[makerUMnt.GoodsMakerCd] = makerUMnt;
                                                }
                                            }

                                            // 未設定メーカーデータが存在しなければ、デフォルトを追加する
                                            if (!_drMaker.ContainsKey(CT_NoMakerCode))
                                            {
                                                MakerUMnt dumyMakerU = new MakerUMnt();
                                                dumyMakerU.GoodsMakerCd = CT_NoMakerCode;
                                                dumyMakerU.MakerName = CT_NoMakerName;

                                                _drMaker.Add(CT_NoMakerCode, dumyMakerU);
                                            }
                                        }

                                    }
                                }
                            }
                            //---------------------------------------------------------------------
                            // ローカルデータ取得
                            //---------------------------------------------------------------------
                            for (int i = 0; i < workList.Count; ++i)
                            {
                                if (workList[i] is List<MakerUWork>)
                                {
                                    List<MakerUWork> workList2 = new List<MakerUWork>();
                                    workList2 = workList[i] as List<MakerUWork>;
                                    foreach (MakerUWork work in workList2)
                                    {
                                        MakerUMnt makerUMnt = new MakerUMnt();
                                        makerUMnt.GoodsMakerCd = work.GoodsMakerCd;
                                        makerUMnt.MakerName = work.MakerName;
                                        makerUMnt.MakerKanaName = work.MakerKanaName;
                                        makerUMnt.DivisionName = CT_DIVISIONNAME_USR;

                                        if (!_drMaker.ContainsKey(makerUMnt.GoodsMakerCd))
                                        {
                                            _drMaker.Add(makerUMnt.GoodsMakerCd, makerUMnt);
                                        }
                                        else
                                        {
                                            _drMaker[makerUMnt.GoodsMakerCd] = makerUMnt;
                                        }
                                    }
                                    // 未設定メーカーデータが存在しなければ、デフォルトを追加する
                                    if (!_drMaker.ContainsKey(CT_NoMakerCode))
                                    {
                                        MakerUMnt dumyMakerUMnt = new MakerUMnt();
                                        dumyMakerUMnt.GoodsMakerCd = CT_NoMakerCode;
                                        dumyMakerUMnt.MakerName = CT_NoMakerName;

                                        _drMaker.Add(CT_NoMakerCode, dumyMakerUMnt);
                                    }
                                }
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "メーカー情報キャッシュ　終了", _drMaker.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "BLコード情報キャッシュ　開始");
                            #region BLコード情報
                            //---------------------------------------------------------------------
                            // BLコード情報取得
                            //---------------------------------------------------------------------
                            //---------------------------------------------------------------------
                            // サーバーデータ取得
                            //---------------------------------------------------------------------
                            if (workList[0] is ArrayList)
                            {
                                foreach (ArrayList arList in workList)
                                {
                                    if (arList != null && arList.Count > 0)
                                    {
                                        if (arList[0] is BLGoodsCdUWork)
                                        {
                                            foreach (BLGoodsCdUWork work in arList)
                                            {
                                                BLGoodsCdUMnt bLGoodsCdUMnt = new BLGoodsCdUMnt();
                                                bLGoodsCdUMnt.BLGoodsCode = work.BLGoodsCode;
                                                bLGoodsCdUMnt.BLGoodsFullName = work.BLGoodsFullName;
                                                bLGoodsCdUMnt.BLGoodsHalfName = work.BLGoodsHalfName;
                                                bLGoodsCdUMnt.BLGloupCode = work.BLGroupCode;
                                                bLGoodsCdUMnt.GoodsRateGrpCode = work.GoodsRateGrpCode;

                                                if (!_drBLGoodsCd.ContainsKey(bLGoodsCdUMnt.BLGoodsCode))
                                                {
                                                    _drBLGoodsCd.Add(bLGoodsCdUMnt.BLGoodsCode, bLGoodsCdUMnt);
                                                }
                                                else
                                                {
                                                    _drBLGoodsCd[bLGoodsCdUMnt.BLGoodsCode] = bLGoodsCdUMnt;
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                            //---------------------------------------------------------------------
                            // ローカルデータ取得
                            //---------------------------------------------------------------------
                            for (int i = 0; i < workList.Count; ++i)
                            {
                                if (workList[i] is List<BLGoodsCdUWork>)
                                {
                                    List<BLGoodsCdUWork> workList2 = new List<BLGoodsCdUWork>();
                                    workList2 = workList[i] as List<BLGoodsCdUWork>;
                                    foreach (BLGoodsCdUWork work in workList2)
                                    {
                                        BLGoodsCdUMnt blGoodsCdUMnt = new BLGoodsCdUMnt();
                                        blGoodsCdUMnt.BLGoodsCode = work.BLGoodsCode;
                                        blGoodsCdUMnt.BLGoodsFullName = work.BLGoodsFullName;
                                        blGoodsCdUMnt.BLGoodsHalfName = work.BLGoodsHalfName;
                                        blGoodsCdUMnt.BLGloupCode = work.BLGroupCode;
                                        blGoodsCdUMnt.GoodsRateGrpCode = work.GoodsRateGrpCode;

                                        if (!_drBLGoodsCd.ContainsKey(blGoodsCdUMnt.BLGoodsCode))
                                        {
                                            _drBLGoodsCd.Add(blGoodsCdUMnt.BLGoodsCode, blGoodsCdUMnt);
                                        }
                                        else
                                        {
                                            _drBLGoodsCd[blGoodsCdUMnt.BLGoodsCode] = blGoodsCdUMnt;
                                        }
                                    }
                                }
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "BLコード情報キャッシュ　終了", _drBLGoodsCd.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "BLグループ情報キャッシュ　開始");
                            #region BLグループ情報
                            //---------------------------------------------------------------------
                            // BLグループ情報取得
                            //---------------------------------------------------------------------
                            List<BLGroupU> bLGroupUList;
                            status2 = GetBLGroupUWorkToUIdata(workList, out bLGroupUList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (BLGroupU bLGroupU in bLGroupUList)
                                        {
                                            if (_drBLGroup.ContainsKey(bLGroupU.BLGroupCode))
                                            {
                                                _drBLGroup[bLGroupU.BLGroupCode] = bLGroupU;
                                            }
                                            else
                                            {
                                                _drBLGroup.Add(bLGroupU.BLGroupCode, bLGroupU);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "BLグループ情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "BLグループ情報キャッシュ　終了", _drBLGroup.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "商品中分類情報キャッシュ　開始");
                            #region 商品中分類情報
                            //---------------------------------------------------------------------
                            // 商品中分類情報取得
                            //---------------------------------------------------------------------
                            List<GoodsGroupU> goodsGroupUList;
                            status2 = this.GetGoodsMGroupUWorkToUIdata(workList, out goodsGroupUList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (GoodsGroupU goodsGroupU in goodsGroupUList)
                                        {
                                            if (_drGoodsMGroup.ContainsKey(goodsGroupU.GoodsMGroup))
                                            {
                                                _drGoodsMGroup[goodsGroupU.GoodsMGroup] = goodsGroupU;
                                            }
                                            else
                                            {
                                                _drGoodsMGroup.Add(goodsGroupU.GoodsMGroup, goodsGroupU);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "商品中分類情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "商品中分類情報キャッシュ　終了", _drGoodsMGroup.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "商品大分類情報キャッシュ　開始");
                            #region 商品大分類情報
                            //---------------------------------------------------------------------
                            // 商品大分類情報取得
                            //---------------------------------------------------------------------
                            List<UserGdBdU> goodsLGroupList;
                            status2 = this.GetGoodsLGroupUWorkToUIdata(workList, out goodsLGroupList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (UserGdBdU goodsLGroup in goodsLGroupList)
                                        {
                                            if (_drGoodsLGroup.ContainsKey(goodsLGroup.GuideCode))
                                            {
                                                _drGoodsLGroup[goodsLGroup.GuideCode] = goodsLGroup.GuideName;
                                            }
                                            else
                                            {
                                                _drGoodsLGroup.Add(goodsLGroup.GuideCode, goodsLGroup.GuideName);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "商品大分類情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "商品大分類情報キャッシュ　終了", _drGoodsLGroup.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "自社分類情報キャッシュ　開始");
                            #region 自社分類情報
                            //---------------------------------------------------------------------
                            // 自社分類情報取得
                            //---------------------------------------------------------------------
                            List<UserGdBdU> enterpriseGanreList;
                            status2 = this.GetEnterpriseGanreUWorkToUIdata(workList, out enterpriseGanreList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (UserGdBdU enterpriseGanre in enterpriseGanreList)
                                        {
                                            if (_drEnterpriseGanreCode.ContainsKey(enterpriseGanre.GuideCode))
                                            {
                                                _drEnterpriseGanreCode[enterpriseGanre.GuideCode] = enterpriseGanre.GuideName;
                                            }
                                            else
                                            {
                                                _drEnterpriseGanreCode.Add(enterpriseGanre.GuideCode, enterpriseGanre.GuideName);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "自社分類情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "自社分類情報キャッシュ　終了", _drEnterpriseGanreCode.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "販売区分情報キャッシュ　開始");
                            #region 販売区分情報
                            //---------------------------------------------------------------------
                            // 販売区分情報取得
                            //---------------------------------------------------------------------
                            List<UserGdBdU> salesList;
                            status2 = this.GetSalesCodeUWorkToUIdata(workList, out salesList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (UserGdBdU sales in salesList)
                                        {
                                            if (_drSalesCode.ContainsKey(sales.GuideCode))
                                            {
                                                _drSalesCode[sales.GuideCode] = sales.GuideName;
                                            }
                                            else
                                            {
                                                _drSalesCode.Add(sales.GuideCode, sales.GuideName);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "販売区分情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "販売区分情報キャッシュ　終了", _drSalesCode.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "商品管理情報キャッシュ　開始");
                            #region 商品管理情報
                            //---------------------------------------------------------------------
                            // 商品管理情報
                            //---------------------------------------------------------------------
                            if (workList[0] is ArrayList)
                            {
                                foreach (ArrayList arList in workList)
                                {
                                    if (arList != null && arList.Count > 0)
                                    {
                                        if (arList[0] is GoodsMngWork)
                                        {
                                            _goodsMngList = new List<GoodsMngWork>((GoodsMngWork[])arList.ToArray(typeof(GoodsMngWork)));
                                            _goodsMngDic1 = new Dictionary<string, GoodsMngWork>();     //拠点＋メーカー＋品番
                                            _goodsMngDic2 = new Dictionary<string, GoodsMngWork>();     //拠点＋中分類＋メーカー＋ＢＬ
                                            _goodsMngDic3 = new Dictionary<string, GoodsMngWork>();     //拠点＋中分類＋メーカー
                                            _goodsMngDic4 = new Dictionary<string, GoodsMngWork>();     //拠点＋メーカー

                                            StringBuilder goodsMngDic1Key = null;
                                            StringBuilder goodsMngDic2Key = null;
                                            StringBuilder goodsMngDic3Key = null;
                                            StringBuilder goodsMngDic4Key = null;
                                            for (int i = 0; i <= _goodsMngList.Count - 1; i++)
                                            {
                                                goodsMngDic1Key = new StringBuilder();
                                                goodsMngDic2Key = new StringBuilder();
                                                goodsMngDic3Key = new StringBuilder();
                                                goodsMngDic4Key = new StringBuilder();

                                                goodsMngDic4Key.Append(_goodsMngList[i].SectionCode.Trim().PadLeft(2, '0'));     //拠点
                                                goodsMngDic4Key.Append(_goodsMngList[i].GoodsMakerCd.ToString("0000"));         //メーカー

                                                if (_goodsMngList[i].GoodsNo.Trim() != string.Empty)
                                                {
                                                    goodsMngDic1Key.Append(goodsMngDic4Key.ToString());                         //拠点＋メーカー
                                                    goodsMngDic1Key.Append(_goodsMngList[i].GoodsNo.Trim());                    //品番

                                                    //拠点＋メーカー＋品番
                                                    if (!_goodsMngDic1.ContainsKey(goodsMngDic1Key.ToString()))
                                                    {
                                                        _goodsMngDic1.Add(goodsMngDic1Key.ToString(), _goodsMngList[i]);
                                                    }
                                                }
                                                else
                                                {
                                                    goodsMngDic3Key.Append(goodsMngDic4Key.ToString());                         //拠点＋メーカー
                                                    goodsMngDic3Key.Append(_goodsMngList[i].GoodsMGroup.ToString("0000"));      //中分類

                                                    goodsMngDic2Key.Append(goodsMngDic3Key.ToString());                         //拠点＋メーカー＋中分類
                                                    goodsMngDic2Key.Append(_goodsMngList[i].BLGoodsCode.ToString("00000"));     //ＢＬ

                                                    if (_goodsMngList[i].BLGoodsCode != 0)
                                                    {
                                                        //拠点＋中分類＋メーカー＋ＢＬ
                                                        if (!_goodsMngDic2.ContainsKey(goodsMngDic2Key.ToString()))
                                                        {
                                                            _goodsMngDic2.Add(goodsMngDic2Key.ToString(), _goodsMngList[i]);
                                                        }
                                                    }
                                                    else if (_goodsMngList[i].GoodsMGroup != 0)
                                                    {
                                                        //拠点＋中分類＋メーカー
                                                        if (!_goodsMngDic3.ContainsKey(goodsMngDic3Key.ToString()))
                                                        {
                                                            _goodsMngDic3.Add(goodsMngDic3Key.ToString(), _goodsMngList[i]);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //拠点＋メーカー
                                                        if (!_goodsMngDic4.ContainsKey(goodsMngDic4Key.ToString()))
                                                        {
                                                            _goodsMngDic4.Add(goodsMngDic4Key.ToString(), _goodsMngList[i]);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "商品管理情報キャッシュ　終了", _goodsMngList.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "優良設定情報キャッシュ　開始");
                            #region 優良設定情報
                            //---------------------------------------------------------------------
                            // 優良設定情報取得
                            //---------------------------------------------------------------------
                            List<PrmSettingUWork> prmSettingList;
                            status2 = this.GetPrmSettingUWorkToUIdata(workList, out prmSettingList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        _drPrmSettingWork = prmSettingList;

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "優良設定情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "優良設定情報キャッシュ　終了", _drPrmSettingWork.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "売上全体設定情報キャッシュ　開始");
                            #region 売上全体設定情報取得
                            //---------------------------------------------------------------------
                            // 売上全体設定情報取得
                            //---------------------------------------------------------------------
                            List<SalesTtlStWork> salesTtlStList;
                            SalesTtlSt allDefSalesTtlSt = null;
                            status2 = this.GetSalesTtlStWorkToUIdata(workList, out salesTtlStList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        foreach (SalesTtlStWork work in salesTtlStList)
                                        {
                                            if (work.SectionCode.Trim() == this._loginSectionCode.Trim())
                                            {
                                                _salesTtlSt = new SalesTtlSt();
                                                _salesTtlSt.SectionCode = work.SectionCode; // 拠点コード
                                                _salesTtlSt.PartsNameDspDivCd = work.PartsNameDspDivCd; // 品名表示区分
                                            }
                                            if (work.SectionCode.Trim() == ctAllDefSectionCode.Trim())
                                            {
                                                allDefSalesTtlSt = new SalesTtlSt();
                                                allDefSalesTtlSt.SectionCode = work.SectionCode; // 拠点コード
                                                allDefSalesTtlSt.PartsNameDspDivCd = work.PartsNameDspDivCd; // 品名表示区分
                                            }
                                        }
                                        if (_salesTtlSt == null) _salesTtlSt = allDefSalesTtlSt;
                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "売上全体設定情報の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "売上全体設定情報キャッシュ　終了");

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "離島価格情報キャッシュ　開始");
                            #region 離島価格情報
                            //---------------------------------------------------------------------
                            // 離島価格情報
                            //---------------------------------------------------------------------
                            if (workList[0] is ArrayList)
                            {
                                foreach (ArrayList arList in workList)
                                {
                                    if (arList != null && arList.Count > 0)
                                    {
                                        if (arList[0] is IsolIslandPrcWork)
                                        {
                                            _isolIslandList = new List<IsolIslandPrcWork>((IsolIslandPrcWork[])arList.ToArray(typeof(IsolIslandPrcWork)));
                                        }
                                    }
                                }
                                _isolIslandList.Sort(new IsolIslandPrcWorkComparer());
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "離島価格情報キャッシュ　終了", _isolIslandList.Count.ToString());

                            GoodsAcs.LogWrite("▼GoodsAcs.SearchInitial", "Cache", "仕入先情報キャッシュ　開始");
                            #region 仕入先情報
                            //---------------------------------------------------------------------
                            // 仕入先情報
                            //---------------------------------------------------------------------
                            if (this._isGetSupplier)
                            {
                                if (workList[0] is ArrayList)
                                {
                                    foreach (ArrayList arList in workList)
                                    {
                                        if (arList != null && arList.Count > 0)
                                        {
                                            if (arList[0] is SupplierWork)
                                            {
                                                _supplierWorkList = new List<SupplierWork>((SupplierWork[])arList.ToArray(typeof(SupplierWork)));
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                            GoodsAcs.LogWrite("▲GoodsAcs.SearchInitial", "Cache", "仕入先情報キャッシュ　終了", _isolIslandList.Count.ToString());
                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        msg = "初期値データ(ユーザー分)の取得に失敗しました";
                        break;
                }
                #endregion

                // 初期値取得フラグON
                _isInitialSearch = true;

                // 部品検索コントローラー BLコードリスト設定
                if ((_drBLGoodsCd != null) && (_drBLGoodsCd.Count > 0)) this._PartsSearchController.BLGoodsCdUMntList = _drBLGoodsCd;

                // 部品検索コントローラー メーカーコードリスト設定
                if ((_drMaker != null) && (_drMaker.Count > 0)) this._PartsSearchController.PartsMakerList = _drMaker;

            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "初期値データの取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
            }

            GoodsAcs.LogWrite("●GoodsAcs.SearchInitial", "", "初期値データ取得　終了");

            return 0;
        }
        #endregion

        #region ●メーカーデータ取得
        /// <summary>
        /// メーカーデータ取得
        /// </summary>
        /// <returns></returns>
        public int SearchInitial_Maker()
        {
            string msg;
            return SearchInitial_MakerProc(out msg);
        }

        /// <summary>
        /// メーカーデータ取得
        /// </summary>
        /// <returns></returns>
        public int SearchInitial_Maker(out string msg)
        {
            return SearchInitial_MakerProc(out msg);
        }

        /// <summary>
        /// メーカーデータ取得
        /// </summary>
        /// <param name="msg"></param>
        /// <returns></returns>
        private int SearchInitial_MakerProc(out string msg)
        {
            if (_drMaker == null) _drMaker = new Dictionary<int, MakerUMnt>();

            // Staticキャッシュクリア 
            ArrayList clearData = new ArrayList();
            clearData.Add(typeof(MakerUMnt));
            ClearStaticData(clearData);

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            try
            {
                // 取得したい検索結果データクラスを設定
                CustomSerializeArrayList workList = new CustomSerializeArrayList();

                // サーバーユーザーデータ
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();

                // ローカルユーザーデータ
                if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //// サーバー提供データ
                //if ( this._iGoodsRelationDataDB == null ) this._iGoodsRelationDataDB = MediationGoodsRelationDataDB.GetGoodsRelationDataDB();
                //// ローカル提供データ
                //if (this._goodsRelationDataLcDB == null) this._goodsRelationDataLcDB = new GoodsRelationDataLcDB();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                # region //  2008/09/04 DEL
                //#region メーカーデータ(提供)
                //// 提供分抽出条件
                //GoodsCndtnWork cmnCdtnWork = new GoodsCndtnWork();

                //// 取得したい検索結果データクラスを設定
                //workList = new CustomSerializeArrayList();

                //// メーカーコード
                //PMakerNmWork makerWork = new PMakerNmWork();
                //workList.Add(makerWork);

                //// オブジェクト型に
                //object retObj = workList;

                ////---------------------------------------------------------------------
                //// 検索
                ////---------------------------------------------------------------------
                //if (_isLocalDBRead)
                //{
                //    // ローカル
                //    status = this._goodsRelationDataLcDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                //}
                //else
                //{
                //    // リモート
                //    status = this._iGoodsRelationDataDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                //}


                //switch (status)
                //{
                //    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //        {
                //            workList = retObj as CustomSerializeArrayList;

                //            // 取得データを変換
                //            if (workList == null)
                //            {
                //                break;
                //            }

                //            #region メーカー情報
                //            //---------------------------------------------------------------------
                //            // メーカー情報取得
                //            //---------------------------------------------------------------------
                //            //---------------------------------------------------------------------
                //            // サーバーデータ取得
                //            //---------------------------------------------------------------------
                //            if (workList[0] is ArrayList)
                //            {
                //                foreach (ArrayList arList in workList)
                //                {
                //                    if (arList != null && arList.Count > 0)
                //                    {
                //                        if (arList[0] is PMakerNmWork)
                //                        {
                //                            foreach (PMakerNmWork work in arList)
                //                            {
                //                                MakerUMnt makerUMnt = new MakerUMnt();
                //                                makerUMnt.GoodsMakerCd = work.PartsMakerCode;
                //                                makerUMnt.MakerName = work.PartsMakerFullName;
                //                                makerUMnt.MakerKanaName = work.PartsMakerHalfName;
                //                                makerUMnt.DivisionName = CT_DIVISIONNAME_USR;

                //                                if (!_drMaker.ContainsKey(makerUMnt.GoodsMakerCd))
                //                                {
                //                                    _drMaker.Add(makerUMnt.GoodsMakerCd, makerUMnt);
                //                                }
                //                                else
                //                                {
                //                                    _drMaker[makerUMnt.GoodsMakerCd] = makerUMnt;
                //                                }
                //                            }

                //                            // 未設定メーカーデータが存在しなければ、デフォルトを追加する
                //                            if (!_drMaker.ContainsKey(CT_NoMakerCode))
                //                            {
                //                                MakerUMnt dumyMakerU = new MakerUMnt();
                //                                dumyMakerU.GoodsMakerCd = CT_NoMakerCode;
                //                                dumyMakerU.MakerName = CT_NoMakerName;

                //                                _drMaker.Add(CT_NoMakerCode, dumyMakerU);
                //                            }
                //                        }

                //                    }
                //                }
                //            }
                //            //---------------------------------------------------------------------
                //            // ローカルデータ取得
                //            //---------------------------------------------------------------------
                //            for (int i = 0; i < workList.Count; ++i)
                //            {
                //                if (workList[i] is List<PMakerNmWork>)
                //                {
                //                    List<PMakerNmWork> workList2 = new List<PMakerNmWork>();
                //                    workList2 = workList[i] as List<PMakerNmWork>;
                //                    foreach (PMakerNmWork work in workList2)
                //                    {
                //                        MakerUMnt makerUMnt = new MakerUMnt();
                //                        makerUMnt.GoodsMakerCd = work.PartsMakerCode;
                //                        makerUMnt.MakerName = work.PartsMakerFullName;
                //                        makerUMnt.MakerKanaName = work.PartsMakerHalfName;
                //                        makerUMnt.DivisionName = CT_DIVISIONNAME_USR;

                //                        if (!_drMaker.ContainsKey(makerUMnt.GoodsMakerCd))
                //                        {
                //                            _drMaker.Add(makerUMnt.GoodsMakerCd, makerUMnt);
                //                        }
                //                        else
                //                        {
                //                            _drMaker[makerUMnt.GoodsMakerCd] = makerUMnt;
                //                        }
                //                    }
                //                    // 未設定メーカーデータが存在しなければ、デフォルトを追加する
                //                    if (!_drMaker.ContainsKey(CT_NoMakerCode))
                //                    {
                //                        MakerUMnt dumyMakerUMnt = new MakerUMnt();
                //                        dumyMakerUMnt.GoodsMakerCd = CT_NoMakerCode;
                //                        dumyMakerUMnt.MakerName = CT_NoMakerName;

                //                        _drMaker.Add(CT_NoMakerCode, dumyMakerUMnt);
                //                    }
                //                }
                //            }
                //            #endregion

                //            break;
                //        }
                //    default:
                //        msg = "メーカーデータ(提供)の取得に失敗しました";
                //        break;
                //}

                //#endregion
                # endregion
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                #region メーカーデータ(ユーザー)
                // ユーザー分抽出条件
                GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

                // メーカーコード
                MakerUWork makerUWork = new MakerUWork();
                makerUWork.EnterpriseCode = this._enterpriseCode;
                workList.Add(makerUWork);

                // オブジェクト型に
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
                object retObj;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
                retObj = workList;

                // 検索
                if (_isLocalDBRead)
                {
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                else
                {
                    status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if (workList == null) break;

                            #region メーカー情報
                            //---------------------------------------------------------------------
                            // メーカー情報取得
                            //---------------------------------------------------------------------
                            //---------------------------------------------------------------------
                            // サーバーデータ取得
                            //---------------------------------------------------------------------
                            if (workList[0] is ArrayList)
                            {
                                foreach (ArrayList arList in workList)
                                {
                                    if (arList != null && arList.Count > 0)
                                    {
                                        if (arList[0] is MakerUWork)
                                        {
                                            foreach (MakerUWork work in arList)
                                            {
                                                MakerUMnt makerUMnt = new MakerUMnt();
                                                makerUMnt.GoodsMakerCd = work.GoodsMakerCd;
                                                makerUMnt.MakerName = work.MakerName;
                                                makerUMnt.MakerKanaName = work.MakerKanaName;
                                                makerUMnt.DivisionName = CT_DIVISIONNAME_USR;

                                                if (!_drMaker.ContainsKey(makerUMnt.GoodsMakerCd))
                                                {
                                                    _drMaker.Add(makerUMnt.GoodsMakerCd, makerUMnt);
                                                }
                                                else
                                                {
                                                    _drMaker[makerUMnt.GoodsMakerCd] = makerUMnt;
                                                }
                                            }

                                            // 未設定メーカーデータが存在しなければ、デフォルトを追加する
                                            if (!_drMaker.ContainsKey(CT_NoMakerCode))
                                            {
                                                MakerUMnt dumyMakerU = new MakerUMnt();
                                                dumyMakerU.GoodsMakerCd = CT_NoMakerCode;
                                                dumyMakerU.MakerName = CT_NoMakerName;

                                                _drMaker.Add(CT_NoMakerCode, dumyMakerU);
                                            }
                                        }

                                    }
                                }
                            }
                            //---------------------------------------------------------------------
                            // ローカルデータ取得
                            //---------------------------------------------------------------------
                            for (int i = 0; i < workList.Count; ++i)
                            {
                                if (workList[i] is List<MakerUWork>)
                                {
                                    List<MakerUWork> workList2 = new List<MakerUWork>();
                                    workList2 = workList[i] as List<MakerUWork>;
                                    foreach (MakerUWork work in workList2)
                                    {
                                        MakerUMnt makerUMnt = new MakerUMnt();
                                        makerUMnt.GoodsMakerCd = work.GoodsMakerCd;
                                        makerUMnt.MakerName = work.MakerName;
                                        makerUMnt.MakerKanaName = work.MakerKanaName;
                                        makerUMnt.DivisionName = CT_DIVISIONNAME_USR;

                                        if (!_drMaker.ContainsKey(makerUMnt.GoodsMakerCd))
                                        {
                                            _drMaker.Add(makerUMnt.GoodsMakerCd, makerUMnt);
                                        }
                                        else
                                        {
                                            _drMaker[makerUMnt.GoodsMakerCd] = makerUMnt;
                                        }
                                    }
                                    // 未設定メーカーデータが存在しなければ、デフォルトを追加する
                                    if (!_drMaker.ContainsKey(CT_NoMakerCode))
                                    {
                                        MakerUMnt dumyMakerUMnt = new MakerUMnt();
                                        dumyMakerUMnt.GoodsMakerCd = CT_NoMakerCode;
                                        dumyMakerUMnt.MakerName = CT_NoMakerName;

                                        _drMaker.Add(CT_NoMakerCode, dumyMakerUMnt);
                                    }
                                }
                            }
                            #endregion

                            break;
                        }
                    default:
                        msg = "メーカーデータ(ユーザー)の取得に失敗しました";
                        break;
                }

                #endregion

                // 2008.10.21 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                // 部品検索コントローラー メーカーコードリスト設定
                if ((_drMaker != null) && (_drMaker.Count > 0)) this._PartsSearchController.PartsMakerList = _drMaker;
                // 2008.10.21 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "メーカーデータの取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //this._iGoodsRelationDataDB = null;
                //this._goodsRelationDataLcDB = null;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
            }

            return 0;
        }
        #endregion

        #region ●BLコードデータ取得
        /// <summary>
        /// BLコードデータ取得
        /// </summary>
        /// <returns></returns>
        public int SearchInitial_BLGoodsCd()
        {
            string msg;
            return SearchInitial_BLGoodsCdProc(out msg);
        }

        /// <summary>
        /// BLコードデータ取得
        /// </summary>
        /// <returns></returns>
        public int SearchInitial_BLGoodsCd(out string msg)
        {
            return SearchInitial_BLGoodsCdProc(out msg);
        }

        /// <summary>
        /// BLコードデータ取得
        /// </summary>
        /// <param name="msg"></param>
        /// <returns></returns>
        private int SearchInitial_BLGoodsCdProc(out string msg)
        {
            if (_drBLGoodsCd == null)
                _drBLGoodsCd = new Dictionary<int, BLGoodsCdUMnt>();

            // Staticキャッシュクリア 
            ArrayList clearData = new ArrayList();
            clearData.Add(typeof(BLGoodsCdUMnt));
            ClearStaticData(clearData);

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            try
            {
                // サーバーユーザーデータ
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();

                // ローカルユーザーデータ
                if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //// サーバー提供データ
                //if ( this._iGoodsRelationDataDB == null ) this._iGoodsRelationDataDB = MediationGoodsRelationDataDB.GetGoodsRelationDataDB();
                //// ローカル提供データ
                //if (this._goodsRelationDataLcDB == null) this._goodsRelationDataLcDB = new GoodsRelationDataLcDB();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                # region //  2008/09/04 DEL
                //#region BLコード情報(提供)
                //// 提供分抽出条件
                //GoodsCndtnWork cmnCdtnWork = new GoodsCndtnWork();
                //cmnCdtnWork.EnterpriseCode = this._enterpriseCode;

                //// 取得したい検索結果データクラスを設定
                //CustomSerializeArrayList workList = new CustomSerializeArrayList();

                //// BLコード
                //TbsPartsCodeWork bLGoodsCdWork = new TbsPartsCodeWork();
                //workList.Add(bLGoodsCdWork);

                //// オブジェクト型に
                //object retObj = workList;

                ////---------------------------------------------------------------------
                //// 検索
                ////---------------------------------------------------------------------
                //if (_isLocalDBRead)
                //{
                //    // ローカル
                //    status = this._goodsRelationDataLcDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                //}
                //else
                //{
                //    // リモート
                //    status = this._iGoodsRelationDataDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                //}

                //switch (status)
                //{
                //    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //        {
                //            workList = retObj as CustomSerializeArrayList;

                //            // 取得データを変換
                //            if (workList == null) break;

                //            #region BLコード情報
                //            //---------------------------------------------------------------------
                //            // BLコード情報取得
                //            //---------------------------------------------------------------------
                //            //---------------------------------------------------------------------
                //            // サーバーデータ取得
                //            //---------------------------------------------------------------------
                //            if (workList[0] is ArrayList)
                //            {
                //                foreach (ArrayList arList in workList)
                //                {
                //                    if (arList != null && arList.Count > 0)
                //                    {
                //                        if (arList[0] is TbsPartsCodeWork)
                //                        {
                //                            foreach (TbsPartsCodeWork work in arList)
                //                            {
                //                                BLGoodsCdUMnt bLGoodsCdUMnt = new BLGoodsCdUMnt();
                //                                bLGoodsCdUMnt.BLGoodsCode = work.TbsPartsCode;
                //                                bLGoodsCdUMnt.BLGoodsFullName = work.TbsPartsFullName;

                //                                if (!_drBLGoodsCd.ContainsKey(bLGoodsCdUMnt.BLGoodsCode))
                //                                {
                //                                    _drBLGoodsCd.Add(bLGoodsCdUMnt.BLGoodsCode, bLGoodsCdUMnt);
                //                                }
                //                                else
                //                                {
                //                                    _drBLGoodsCd[bLGoodsCdUMnt.BLGoodsCode] = bLGoodsCdUMnt;
                //                                }
                //                            }

                //                        }

                //                    }
                //                }
                //            }
                //            //---------------------------------------------------------------------
                //            // ローカルデータ取得
                //            //---------------------------------------------------------------------
                //            for (int i = 0; i < workList.Count; ++i)
                //            {
                //                if (workList[i] is List<TbsPartsCodeWork>)
                //                {
                //                    List<TbsPartsCodeWork> workList2 = new List<TbsPartsCodeWork>();
                //                    workList2 = workList[i] as List<TbsPartsCodeWork>;
                //                    foreach (TbsPartsCodeWork work in workList2)
                //                    {
                //                        BLGoodsCdUMnt blGoodsCdUMnt = new BLGoodsCdUMnt();
                //                        blGoodsCdUMnt.BLGoodsCode = work.TbsPartsCode;
                //                        blGoodsCdUMnt.BLGoodsFullName = work.TbsPartsFullName;

                //                        if (!_drBLGoodsCd.ContainsKey(blGoodsCdUMnt.BLGoodsCode))
                //                        {
                //                            _drBLGoodsCd.Add(blGoodsCdUMnt.BLGoodsCode, blGoodsCdUMnt);
                //                        }
                //                        else
                //                        {
                //                            _drBLGoodsCd[blGoodsCdUMnt.BLGoodsCode] = blGoodsCdUMnt;
                //                        }
                //                    }
                //                }
                //            }
                //            #endregion

                //            break;
                //        }
                //    default:
                //        msg = "BLコードデータ(提供)の取得に失敗しました";
                //        break;
                //}

                //#endregion
                # endregion
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                #region BLコード情報(ユーザー)
                // ユーザー分抽出条件
                GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

                // 取得したい検索結果データクラスを設定
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
                CustomSerializeArrayList workList;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
                workList = new CustomSerializeArrayList();

                // BLコード
                BLGoodsCdUWork bLGoodsCdUWork = new BLGoodsCdUWork();
                bLGoodsCdUWork.EnterpriseCode = this._enterpriseCode;
                workList.Add(bLGoodsCdUWork);

                // オブジェクト型に
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
                object retObj;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
                retObj = workList;

                // 検索
                if (_isLocalDBRead)
                {
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                else
                {
                    status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if (workList == null) break;

                            #region BLコード情報
                            //---------------------------------------------------------------------
                            // BLコード情報取得
                            //---------------------------------------------------------------------
                            //---------------------------------------------------------------------
                            // サーバーデータ取得
                            //---------------------------------------------------------------------
                            if (workList[0] is ArrayList)
                            {
                                foreach (ArrayList arList in workList)
                                {
                                    if (arList != null && arList.Count > 0)
                                    {
                                        if (arList[0] is BLGoodsCdUWork)
                                        {
                                            foreach (BLGoodsCdUWork work in arList)
                                            {
                                                BLGoodsCdUMnt bLGoodsCdUMnt = new BLGoodsCdUMnt();
                                                bLGoodsCdUMnt.BLGoodsCode = work.BLGoodsCode;
                                                bLGoodsCdUMnt.BLGoodsFullName = work.BLGoodsFullName;
                                                // --- ADD m.suzuki 2010/04/15 ---------->>>>>
                                                bLGoodsCdUMnt.BLGoodsHalfName = work.BLGoodsHalfName;
                                                // --- ADD m.suzuki 2010/04/15 ----------<<<<<

                                                if (!_drBLGoodsCd.ContainsKey(bLGoodsCdUMnt.BLGoodsCode))
                                                {
                                                    _drBLGoodsCd.Add(bLGoodsCdUMnt.BLGoodsCode, bLGoodsCdUMnt);
                                                }
                                                else
                                                {
                                                    _drBLGoodsCd[bLGoodsCdUMnt.BLGoodsCode] = bLGoodsCdUMnt;
                                                }
                                            }

                                        }

                                    }
                                }
                            }
                            //---------------------------------------------------------------------
                            // ローカルデータ取得
                            //---------------------------------------------------------------------
                            for (int i = 0; i < workList.Count; ++i)
                            {
                                if (workList[i] is List<BLGoodsCdUWork>)
                                {
                                    List<BLGoodsCdUWork> workList2 = new List<BLGoodsCdUWork>();
                                    workList2 = workList[i] as List<BLGoodsCdUWork>;
                                    foreach (BLGoodsCdUWork work in workList2)
                                    {
                                        BLGoodsCdUMnt blGoodsCdUMnt = new BLGoodsCdUMnt();
                                        blGoodsCdUMnt.BLGoodsCode = work.BLGoodsCode;
                                        blGoodsCdUMnt.BLGoodsFullName = work.BLGoodsFullName;
                                        // --- ADD m.suzuki 2010/04/15 ---------->>>>>
                                        blGoodsCdUMnt.BLGoodsHalfName = work.BLGoodsHalfName;
                                        // --- ADD m.suzuki 2010/04/15 ----------<<<<<

                                        if (!_drBLGoodsCd.ContainsKey(blGoodsCdUMnt.BLGoodsCode))
                                        {
                                            _drBLGoodsCd.Add(blGoodsCdUMnt.BLGoodsCode, blGoodsCdUMnt);
                                        }
                                        else
                                        {
                                            _drBLGoodsCd[blGoodsCdUMnt.BLGoodsCode] = blGoodsCdUMnt;
                                        }
                                    }
                                }
                            }
                            #endregion

                            break;
                        }
                    default:
                        msg = "BLコードデータ(ユーザー)の取得に失敗しました";
                        break;
                }
                #endregion

                // 部品検索コントローラー BLコードリスト設定
                if ((_drBLGoodsCd != null) && (_drBLGoodsCd.Count > 0)) this._PartsSearchController.BLGoodsCdUMntList = _drBLGoodsCd;
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "BLコードマスタの取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //this._iGoodsRelationDataDB = null;
                //this._goodsRelationDataLcDB = null;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
            }

            return 0;
        }
        #endregion

        #region ●BLグループ情報取得
        /// <summary>
        /// BLグループ情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <returns></returns>
        public int SearchInitial_BLGroup(string enterpriseCode)
        {
            string msg;
            return SearchInitial_BLGroupProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// BLグループ情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        public int SearchInitial_BLGroup(string enterpriseCode, out string msg)
        {
            return SearchInitial_BLGroupProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// BLグループ情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        private int SearchInitial_BLGroupProc(string enterpriseCode, out string msg)
        {
            if (_drBLGroup == null) _drBLGroup = new Dictionary<int, BLGroupU>();

            // Staticキャッシュクリア 
            ArrayList clearData = new ArrayList();
            clearData.Add(typeof(BLGroupU));
            ClearStaticData(clearData);

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            msg = "";

            try
            {
                // サーバーユーザーデータ
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();

                // ローカルユーザーデータ
                if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //// サーバー提供データ
                //if ( this._iGoodsRelationDataDB == null ) this._iGoodsRelationDataDB = MediationGoodsRelationDataDB.GetGoodsRelationDataDB();
                //// ローカル提供データ
                //if (this._goodsRelationDataLcDB == null) this._goodsRelationDataLcDB = new GoodsRelationDataLcDB();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                # region //  2008/09/04 DEL
                //#region BLグループ情報(提供)
                ////---------------------------------------------------------------------
                //// BLグループ情報(提供)
                ////---------------------------------------------------------------------
                //// 提供分抽出条件
                //GoodsCndtnWork cmnCdtnWork = new GoodsCndtnWork();
                //cmnCdtnWork.EnterpriseCode = enterpriseCode;

                //// 取得したい検索結果データクラスを設定
                //CustomSerializeArrayList workList = new CustomSerializeArrayList();

                //// BLグループ情報
                //BLGroupWork bLGroupWork = new BLGroupWork();
                //workList.Add(bLGroupWork);

                //// オブジェクト型に
                //object retObj = workList;

                ////---------------------------------------------------------------------
                //// 検索
                ////---------------------------------------------------------------------
                //if (_isLocalDBRead)
                //{
                //    // ローカル
                //    status = this._goodsRelationDataLcDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                //}
                //else
                //{
                //    // リモート
                //    status = this._iGoodsRelationDataDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                //}

                //switch (status)
                //{
                //    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //        {
                //            workList = retObj as CustomSerializeArrayList;

                //            // 取得データを変換
                //            if (workList == null)
                //            {
                //                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                //                return status;
                //            }

                //            #region BLグループ情報
                //            //---------------------------------------------------------------------
                //            // BLグループ情報取得
                //            //---------------------------------------------------------------------
                //            List<BLGroupU> bLGroupUList;
                //            status2 = GetBLGroupWorkToUIdata(workList, out bLGroupUList);
                //            switch (status2)
                //            {
                //                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //                    {
                //                        // 内部キャッシュに保存する
                //                        foreach (BLGroupU bLGroupU in bLGroupUList)
                //                        {
                //                            if (_drBLGroup.ContainsKey(bLGroupU.BLGroupCode))
                //                            {
                //                                _drBLGroup[bLGroupU.BLGroupCode] = bLGroupU;
                //                            }
                //                            else
                //                            {
                //                                _drBLGroup.Add(bLGroupU.BLGroupCode, bLGroupU);
                //                            }
                //                        }

                //                        break;
                //                    }
                //                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //                    break;
                //                default:
                //                    msg = "BLグループ情報(提供)の取得でエラーが発生しました";
                //                    return status2;
                //            }
                //            #endregion

                //            break;
                //        }
                //    default:
                //        msg = "BLグループ情報(提供)の取得に失敗しました";
                //        break;
                //}
                //#endregion
                # endregion
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                #region BLグループ情報(ユーザー)
                //---------------------------------------------------------------------
                // BLグループ情報(ユーザー)
                //---------------------------------------------------------------------
                // ユーザー登録分抽出条件
                GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

                // 取得したい検索結果データクラスを設定
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
                CustomSerializeArrayList workList;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
                workList = new CustomSerializeArrayList();

                // BLグループ情報
                BLGroupUWork bLGroupUWork = new BLGroupUWork();
                bLGroupUWork.EnterpriseCode = this._enterpriseCode;
                workList.Add(bLGroupUWork);

                // オブジェクト型に
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
                object retObj;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
                retObj = workList;

                // 検索
                if (_isLocalDBRead)
                {
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                else
                {
                    status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if (workList == null)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            #region BLグループ情報
                            //---------------------------------------------------------------------
                            // BLグループ情報取得
                            //---------------------------------------------------------------------
                            List<BLGroupU> bLGroupUList;
                            status2 = GetBLGroupUWorkToUIdata(workList, out bLGroupUList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (BLGroupU bLGroupU in bLGroupUList)
                                        {
                                            if (_drBLGroup.ContainsKey(bLGroupU.BLGroupCode))
                                            {
                                                _drBLGroup[bLGroupU.BLGroupCode] = bLGroupU;
                                            }
                                            else
                                            {
                                                _drBLGroup.Add(bLGroupU.BLGroupCode, bLGroupU);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "BLグループ情報(ユーザー)の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion

                            break;
                        }
                    default:
                        msg = "BLグループ情報の取得に失敗しました";
                        break;
                }
                #endregion
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "BLグループ情報の取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //this._iGoodsRelationDataDB = null;
                //this._goodsRelationDataLcDB = null;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
            }

            return 0;
        }
        #endregion

        #region ●商品中分類情報取得
        /// <summary>
        /// 商品中分類情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <returns></returns>
        public int SearchInitial_GoodsMGroup(string enterpriseCode)
        {
            string msg;
            return SearchInitial_GoodsMGroupProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// 商品中分類情報取得
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public int SearchInitial_GoodsMGroup(string enterpriseCode, out string msg)
        {
            return SearchInitial_GoodsMGroupProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// 商品中分類情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        private int SearchInitial_GoodsMGroupProc(string enterpriseCode, out string msg)
        {
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
            //// ユーザー登録分の有無
            //Boolean bCustomExists = false;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

            if (_drGoodsMGroup == null) _drGoodsMGroup = new Dictionary<int, GoodsGroupU>();

            // Staticキャッシュクリア 
            ArrayList clearData = new ArrayList();
            clearData.Add(typeof(GoodsGroupU));
            ClearStaticData(clearData);

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;

            msg = "";

            try
            {
                // サーバーユーザーデータ
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();

                // ローカルユーザーデータ
                if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //// サーバー提供データ
                //if ( this._iGoodsRelationDataDB == null ) this._iGoodsRelationDataDB = MediationGoodsRelationDataDB.GetGoodsRelationDataDB();
                //// ローカル提供データ
                //if (this._goodsRelationDataLcDB == null) this._goodsRelationDataLcDB = new GoodsRelationDataLcDB();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                # region //  2008/09/04 DEL
                //#region 商品中分類情報(提供)
                ////---------------------------------------------------------------------
                //// 商品中分類情報(提供)
                ////---------------------------------------------------------------------
                //// 提供分抽出条件
                //GoodsCndtnWork cmnCdtnWork = new GoodsCndtnWork();
                //cmnCdtnWork.EnterpriseCode = enterpriseCode;

                //// 取得したい検索結果データクラスを設定
                //CustomSerializeArrayList workList = new CustomSerializeArrayList();

                //GoodsMGroupWork goodsMGroupWork = new GoodsMGroupWork();
                //workList.Add(goodsMGroupWork);

                //// オブジェクト型に
                //object retObj = workList;

                ////---------------------------------------------------------------------
                //// 検索
                ////---------------------------------------------------------------------
                //if (_isLocalDBRead)
                //{
                //    // ローカル
                //    status = this._goodsRelationDataLcDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                //}
                //else
                //{
                //    // リモート
                //    status = this._iGoodsRelationDataDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                //}

                //switch (status)
                //{
                //    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //        {
                //            workList = retObj as CustomSerializeArrayList;

                //            // 取得データを変換
                //            if (workList == null)
                //            {
                //                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                //                return status;
                //            }

                //            #region 商品中分類情報
                //            //---------------------------------------------------------------------
                //            // 商品中分類情報取得
                //            //---------------------------------------------------------------------
                //            List<GoodsGroupU> goodsGroupUList;
                //            status2 = this.GetGoodsMGroupWorkToUIdata(workList, out goodsGroupUList);
                //            switch (status2)
                //            {
                //                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //                    {
                //                        // 内部キャッシュに保存する
                //                        foreach (GoodsGroupU goodsGroupU in goodsGroupUList)
                //                        {
                //                            if (_drGoodsMGroup.ContainsKey(goodsGroupU.GoodsMGroup))
                //                            {
                //                                _drGoodsMGroup[goodsGroupU.GoodsMGroup] = goodsGroupU;
                //                            }
                //                            else
                //                            {
                //                                _drGoodsMGroup.Add(goodsGroupU.GoodsMGroup, goodsGroupU);
                //                            }
                //                        }

                //                        break;
                //                    }
                //                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //                    break;
                //                default:
                //                    msg = "商品中分類情報(提供)の取得でエラーが発生しました";
                //                    return status2;
                //            }
                //            #endregion

                //            break;
                //        }
                //    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //        if (!bCustomExists) msg = "該当する商品はみつかりませんでした";
                //        break;
                //    default:
                //        msg = "商品中分類情報(提供)の取得に失敗しました";
                //        break;
                //}
                //#endregion
                # endregion
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                #region 商品中分類情報(ユーザー)
                //---------------------------------------------------------------------
                // 商品中分類情報(ユーザー)
                //---------------------------------------------------------------------
                // ユーザー登録分抽出条件
                GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

                // 取得したい検索結果データクラスを設定
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
                CustomSerializeArrayList workList;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
                workList = new CustomSerializeArrayList();

                // 商品中分類情報
                GoodsGroupUWork goodsMGroupUWork = new GoodsGroupUWork();
                goodsMGroupUWork.EnterpriseCode = this._enterpriseCode;
                workList.Add(goodsMGroupUWork);

                // オブジェクト型に
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
                object retObj;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
                retObj = workList;

                // 検索
                if (_isLocalDBRead)
                {
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                else
                {
                    status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if (workList == null)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            #region 商品中分類情報
                            //---------------------------------------------------------------------
                            // 商品中分類情報取得
                            //---------------------------------------------------------------------
                            List<GoodsGroupU> goodsGroupUList;
                            status2 = this.GetGoodsMGroupUWorkToUIdata(workList, out goodsGroupUList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (GoodsGroupU goodsGroupU in goodsGroupUList)
                                        {
                                            if (_drGoodsMGroup.ContainsKey(goodsGroupU.GoodsMGroup))
                                            {
                                                _drGoodsMGroup[goodsGroupU.GoodsMGroup] = goodsGroupU;
                                            }
                                            else
                                            {
                                                _drGoodsMGroup.Add(goodsGroupU.GoodsMGroup, goodsGroupU);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "商品中分類情報(ユーザー)の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion

                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                        //bCustomExists = true;
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
                        msg = "該当する商品はみつかりませんでした";
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
                        break;
                    default:
                        msg = "商品中分類情報(ユーザー)の取得に失敗しました";
                        break;
                }
                #endregion
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品中分類情報の取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //this._iGoodsRelationDataDB = null;
                //this._goodsRelationDataLcDB = null;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
            }

            return 0;
        }
        #endregion

        #region ●商品大分類情報取得
        /// <summary>
        /// 商品大分類情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <returns></returns>
        public int SearchInitial_GoodsLGroup(string enterpriseCode)
        {
            string msg;
            return SearchInitial_GoodsLGroupProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// 商品大分類情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        public int SearchInitial_GoodsLGroup(string enterpriseCode, out string msg)
        {
            return SearchInitial_GoodsLGroupProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// 商品大分類情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        private int SearchInitial_GoodsLGroupProc(string enterpriseCode, out string msg)
        {
            if (_drGoodsLGroup == null) _drGoodsLGroup = new Dictionary<int, string>();

            // Staticキャッシュクリア 
            ArrayList clearData = new ArrayList(1);
            clearData.Add(typeof(UserGdBdU));
            ClearStaticData(clearData);

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            try
            {
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //if (this._goodsRelationDataLcDB == null) this._goodsRelationDataLcDB = new GoodsRelationDataLcDB();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                # region // 2008/09/04 DEL
                //#region 商品大分類情報(提供)
                ////---------------------------------------------------------------------
                //// 商品大分類情報(提供)
                ////---------------------------------------------------------------------
                //// 提供分抽出条件
                //GoodsCndtnWork cmnCdtnWork = new GoodsCndtnWork();
                //cmnCdtnWork.EnterpriseCode = enterpriseCode;

                //// 取得したい検索結果データクラスを設定
                //CustomSerializeArrayList workList = new CustomSerializeArrayList();

                //// 商品大分類情報(提供)
                //UserGdBdWork goodsLGroupWork = new UserGdBdWork();
                //workList.Add(goodsLGroupWork);

                //// オブジェクト型に
                //object retObj = workList;

                //// 検索(提供は常にローカル)
                //status = this._goodsRelationDataLcDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);

                //switch (status)
                //{
                //    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //        {
                //            workList = retObj as CustomSerializeArrayList;

                //            // 取得データを変換
                //            if (workList == null)
                //            {
                //                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                //                return status;
                //            }

                //            #region 商品大分類情報
                //            //---------------------------------------------------------------------
                //            // 商品大分類情報取得
                //            //---------------------------------------------------------------------
                //            List<UserGdBdU> goodsLGroupList;
                //            status2 = this.GetGoodsLGroupWorkToUIdata(workList, out goodsLGroupList);
                //            switch (status2)
                //            {
                //                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //                    {
                //                        // 内部キャッシュに保存する
                //                        foreach (UserGdBdU goodsLGroup in goodsLGroupList)
                //                        {
                //                            if (_drGoodsLGroup.ContainsKey(goodsLGroup.GuideCode))
                //                            {
                //                                _drGoodsLGroup[goodsLGroup.GuideCode] = goodsLGroup.GuideName;
                //                            }
                //                            else
                //                            {
                //                                _drGoodsLGroup.Add(goodsLGroup.GuideCode, goodsLGroup.GuideName);
                //                            }
                //                        }

                //                        break;
                //                    }
                //                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //                    break;
                //                default:
                //                    msg = "商品大分類情報(提供)の取得でエラーが発生しました";
                //                    return status2;
                //            }
                //            #endregion

                //            break;
                //        }
                //    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //        break;
                //    default:
                //        msg = "商品大分類情報(提供)の取得に失敗しました";
                //        break;
                //}                
                //#endregion
                # endregion
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                #region 商品大分類情報(ユーザー)
                //---------------------------------------------------------------------
                // 商品大分類情報(ユーザー)
                //---------------------------------------------------------------------
                // ユーザー登録分抽出条件
                GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

                // 取得したい検索結果データクラスを設定
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
                CustomSerializeArrayList workList;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
                workList = new CustomSerializeArrayList();

                // 商品大分類情報(ユーザー)
                UserGdBdUWork goodsLGroupUWork = new UserGdBdUWork();
                goodsLGroupUWork.EnterpriseCode = this._enterpriseCode;

                workList.Add(goodsLGroupUWork);

                // オブジェクト型に
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
                object retObj;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
                retObj = workList;

                // 検索
                if (_isLocalDBRead)
                {
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                else
                {
                    status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }


                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if (workList == null)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            #region 商品大分類情報
                            //---------------------------------------------------------------------
                            // 商品大分類情報取得
                            //---------------------------------------------------------------------
                            List<UserGdBdU> goodsLGroupList;
                            status2 = this.GetGoodsLGroupUWorkToUIdata(workList, out goodsLGroupList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (UserGdBdU goodsLGroup in goodsLGroupList)
                                        {
                                            if (_drGoodsLGroup.ContainsKey(goodsLGroup.GuideCode))
                                            {
                                                _drGoodsLGroup[goodsLGroup.GuideCode] = goodsLGroup.GuideName;
                                            }
                                            else
                                            {
                                                _drGoodsLGroup.Add(goodsLGroup.GuideCode, goodsLGroup.GuideName);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "商品大分類情報(ユーザー)の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        msg = "商品大分類情報(ユーザー)の取得に失敗しました";
                        break;
                }
                #endregion
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品大分類情報の取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //this._goodsRelationDataLcDB = null;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
            }

            return 0;
        }

        #endregion

        #region ●自社分類情報取得
        /// <summary>
        /// 自社分類情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <returns></returns>
        public int SearchInitial_EnterpriseGanre(string enterpriseCode)
        {
            string msg;
            return SearchInitial_EnterpriseGanreProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// 自社分類情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        public int SearchInitial_EnterpriseGanre(string enterpriseCode, out string msg)
        {
            return SearchInitial_EnterpriseGanreProc(enterpriseCode, out msg);
        }

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 DEL
        # region // DEL
        ///// <summary>
        ///// 自社分類情報取得
        ///// </summary>
        ///// <param name="enterpriseCode">企業コード</param>
        ///// <param name="msg">エラーメッセージ</param>
        ///// <returns></returns>
        //private int SearchInitial_EnterpriseGanreProc(string enterpriseCode, out string msg)
        //{
        //    if (_drGoodsLGroup == null) _drGoodsLGroup = new Dictionary<int, string>();

        //    // Staticキャッシュクリア 
        //    ArrayList clearData = new ArrayList(1);
        //    clearData.Add(typeof(UserGdBdU));
        //    ClearStaticData(clearData);

        //    int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //    int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //    msg = "";

        //    try
        //    {
        //        if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
        //        if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
        //        //if (this._goodsRelationDataLcDB == null) this._goodsRelationDataLcDB = new GoodsRelationDataLcDB();
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
        //        # region //  2008/09/04 DEL
        //        //#region 自社分類情報(提供)
        //        ////---------------------------------------------------------------------
        //        //// 自社分類情報(提供)
        //        ////---------------------------------------------------------------------
        //        //// 提供分抽出条件
        //        //GoodsCndtnWork cmnCdtnWork = new GoodsCndtnWork();
        //        //cmnCdtnWork.EnterpriseCode = enterpriseCode;

        //        //// 取得したい検索結果データクラスを設定
        //        //CustomSerializeArrayList workList = new CustomSerializeArrayList();

        //        //// 自社分類情報(提供)
        //        //UserGdBdWork goodsLGroupWork = new UserGdBdWork();
        //        //workList.Add(goodsLGroupWork);

        //        //// オブジェクト型に
        //        //object retObj = workList;

        //        //// 検索(提供は常にローカル)
        //        //status = this._goodsRelationDataLcDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);

        //        //switch (status)
        //        //{
        //        //    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
        //        //        {
        //        //            workList = retObj as CustomSerializeArrayList;

        //        //            // 取得データを変換
        //        //            if (workList == null)
        //        //            {
        //        //                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //        //                return status;
        //        //            }

        //        //            #region 自社分類情報
        //        //            //---------------------------------------------------------------------
        //        //            // 自社分類情報取得
        //        //            //---------------------------------------------------------------------
        //        //            List<UserGdBdU> enterpriseGanreList;
        //        //            status2 = this.GetEnterpriseGanreUWorkToUIdata(workList, out enterpriseGanreList);
        //        //            switch (status2)
        //        //            {
        //        //                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
        //        //                    {
        //        //                        // 内部キャッシュに保存する
        //        //                        foreach (UserGdBdU enterpriseGanre in enterpriseGanreList)
        //        //                        {
        //        //                            if (_drEnterpriseGanreCode.ContainsKey(enterpriseGanre.GuideCode))
        //        //                            {
        //        //                                _drEnterpriseGanreCode[enterpriseGanre.GuideCode] = enterpriseGanre.GuideName;
        //        //                            }
        //        //                            else
        //        //                            {
        //        //                                _drEnterpriseGanreCode.Add(enterpriseGanre.GuideCode, enterpriseGanre.GuideName);
        //        //                            }
        //        //                        }

        //        //                        break;
        //        //                    }
        //        //                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
        //        //                case (int)ConstantManagement.DB_Status.ctDB_EOF:
        //        //                    break;
        //        //                default:
        //        //                    msg = "自社分類情報(提供)の取得でエラーが発生しました";
        //        //                    return status2;
        //        //            }
        //        //            #endregion

        //        //            break;
        //        //        }
        //        //    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
        //        //    case (int)ConstantManagement.DB_Status.ctDB_EOF:
        //        //        break;
        //        //    default:
        //        //        msg = "自社分類情報(提供)の取得に失敗しました";
        //        //        break;
        //        //}
        //        //#endregion
        //        # endregion
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

        //        #region 自社分類情報(ユーザー)
        //        //---------------------------------------------------------------------
        //        // 自社分類情報(ユーザー)
        //        //---------------------------------------------------------------------
        //        // ユーザー登録分抽出条件
        //        GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

        //        // 取得したい検索結果データクラスを設定
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
        //        CustomSerializeArrayList workList;
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
        //        workList = new CustomSerializeArrayList();

        //        // 自社分類情報(ユーザー)
        //        UserGdBdUWork goodsLGroupUWork = new UserGdBdUWork();
        //        goodsLGroupUWork.EnterpriseCode = this._enterpriseCode;

        //        workList.Add(goodsLGroupUWork);

        //        // オブジェクト型に
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
        //        object retObj;
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
        //        retObj = workList;

        //        // 検索
        //        if (_isLocalDBRead)
        //        {
        //            status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
        //        }
        //        else
        //        {
        //            status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
        //        }


        //        switch (status)
        //        {
        //            case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
        //                {
        //                    workList = retObj as CustomSerializeArrayList;

        //                    // 取得データを変換
        //                    if (workList == null)
        //                    {
        //                        status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //                        return status;
        //                    }

        //                    #region 自社分類情報
        //                    //---------------------------------------------------------------------
        //                    // 自社分類情報取得
        //                    //---------------------------------------------------------------------
        //                    List<UserGdBdU> enterpriseGanreList;
        //                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
        //                    //status2 = this.GetEnterpriseGanreWorkToUIdata(workList, out enterpriseGanreList);
        //                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
        //                    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
        //                    status2 = this.GetEnterpriseGanreUWorkToUIdata(workList, out enterpriseGanreList);
        //                    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
        //                    switch (status2)
        //                    {
        //                        case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
        //                            {
        //                                // 内部キャッシュに保存する
        //                                foreach (UserGdBdU enterpriseGanre in enterpriseGanreList)
        //                                {
        //                                    if (_drEnterpriseGanreCode.ContainsKey(enterpriseGanre.GuideCode))
        //                                    {
        //                                        _drEnterpriseGanreCode[enterpriseGanre.GuideCode] = enterpriseGanre.GuideName;
        //                                    }
        //                                    else
        //                                    {
        //                                        _drEnterpriseGanreCode.Add(enterpriseGanre.GuideCode, enterpriseGanre.GuideName);
        //                                    }
        //                                }

        //                                break;
        //                            }
        //                        case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
        //                        case (int)ConstantManagement.DB_Status.ctDB_EOF:
        //                            break;
        //                        default:
        //                            msg = "自社分類情報(ユーザー)の取得でエラーが発生しました";
        //                            return status2;
        //                    }
        //                    #endregion
        //                    break;
        //                }
        //            case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
        //            case (int)ConstantManagement.DB_Status.ctDB_EOF:
        //                break;
        //            default:
        //                msg = "自社分類情報(ユーザー)の取得に失敗しました";
        //                break;
        //        }
        //        #endregion
        //    }
        //    catch (Exception ex)
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //        msg = "自社分類情報(ユーザー)の取得で例外が発生しました[" + ex.Message + "]";
        //        msg = ex.Message;
        //        this._iGoodsURelationDataDB = null;
        //        this._goodsURelationDataLcDB = null;
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
        //        //this._goodsRelationDataLcDB = null;
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
        //    }

        //    return 0;
        //}
        # endregion
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 ADD
        /// <summary>
        /// 自社分類情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        private int SearchInitial_EnterpriseGanreProc(string enterpriseCode, out string msg)
        {
            if (_drEnterpriseGanreCode == null) _drEnterpriseGanreCode = new Dictionary<int, string>();

            // Staticキャッシュクリア 
            ArrayList clearData = new ArrayList(1);
            clearData.Add(typeof(UserGdBdU));
            ClearStaticData(clearData);

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            try
            {
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();

                #region 自社分類情報(ユーザー)
                //---------------------------------------------------------------------
                // 自社分類情報(ユーザー)
                //---------------------------------------------------------------------
                // ユーザー登録分抽出条件
                GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

                // 取得したい検索結果データクラスを設定
                CustomSerializeArrayList workList;
                workList = new CustomSerializeArrayList();

                // 自社分類情報(ユーザー)
                UserGdBdUWork userGdBdUWork = new UserGdBdUWork();
                userGdBdUWork.EnterpriseCode = this._enterpriseCode;

                workList.Add(userGdBdUWork);

                // オブジェクト型に
                object retObj;
                retObj = workList;

                // 検索
                if (_isLocalDBRead)
                {
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                else
                {
                    status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }


                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if (workList == null)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            #region 自社分類情報
                            //---------------------------------------------------------------------
                            // 自社分類情報取得
                            //---------------------------------------------------------------------
                            List<UserGdBdU> enterpriseGanreList;
                            status2 = this.GetEnterpriseGanreUWorkToUIdata(workList, out enterpriseGanreList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach (UserGdBdU enterpriseGanre in enterpriseGanreList)
                                        {
                                            if (_drEnterpriseGanreCode.ContainsKey(enterpriseGanre.GuideCode))
                                            {
                                                _drEnterpriseGanreCode[enterpriseGanre.GuideCode] = enterpriseGanre.GuideName;
                                            }
                                            else
                                            {
                                                _drEnterpriseGanreCode.Add(enterpriseGanre.GuideCode, enterpriseGanre.GuideName);
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "自社分類情報(ユーザー)の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        msg = "自社分類情報(ユーザー)の取得に失敗しました";
                        break;
                }
                #endregion
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "自社分類情報(ユーザー)の取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
            }

            return 0;
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 ADD
        #endregion

        #region ●販売区分情報取得
        /// <summary>
        /// 販売区分情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <returns></returns>
        public int SearchInitial_SalesCode(string enterpriseCode)
        {
            string msg;
            return SearchInitial_SalesCodeProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// 販売区分情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        public int SearchInitial_SalesCode(string enterpriseCode, out string msg)
        {
            return SearchInitial_SalesCodeProc(enterpriseCode, out msg);
        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 DEL
        # region // DEL
        ///// <summary>
        ///// 販売区分情報取得
        ///// </summary>
        ///// <param name="enterpriseCode">企業コード</param>
        ///// <param name="msg">エラーメッセージ</param>
        ///// <returns></returns>
        //private int SearchInitial_SalesCodeProc(string enterpriseCode, out string msg)
        //{
        //    if (_drGoodsLGroup == null) _drGoodsLGroup = new Dictionary<int, string>();

        //    // Staticキャッシュクリア 
        //    ArrayList clearData = new ArrayList(1);
        //    clearData.Add(typeof(UserGdBdU));
        //    ClearStaticData(clearData);

        //    int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //    int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //    msg = "";

        //    try
        //    {
        //        if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
        //        if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
        //        //if (this._goodsRelationDataLcDB == null) this._goodsRelationDataLcDB = new GoodsRelationDataLcDB();
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
        //        # region //  2008/09/04 DEL
        //        //#region 販売区分情報(提供)
        //        ////---------------------------------------------------------------------
        //        //// 販売区分情報(提供)
        //        ////---------------------------------------------------------------------
        //        //// 提供分抽出条件
        //        //GoodsCndtnWork cmnCdtnWork = new GoodsCndtnWork();
        //        //cmnCdtnWork.EnterpriseCode = enterpriseCode;

        //        //// 取得したい検索結果データクラスを設定
        //        //CustomSerializeArrayList workList = new CustomSerializeArrayList();

        //        //// 販売区分情報(提供)
        //        //UserGdBdWork goodsLGroupWork = new UserGdBdWork();
        //        //workList.Add(goodsLGroupWork);

        //        //// オブジェクト型に
        //        //object retObj = workList;

        //        //// 検索(提供は常にローカル)
        //        //status = this._goodsRelationDataLcDB.Search(ref retObj, cmnCdtnWork, 0, ConstantManagement.LogicalMode.GetData0);

        //        //switch (status)
        //        //{
        //        //    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
        //        //        {
        //        //            workList = retObj as CustomSerializeArrayList;

        //        //            // 取得データを変換
        //        //            if (workList == null)
        //        //            {
        //        //                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //        //                return status;
        //        //            }

        //        //            #region 販売区分情報
        //        //            //---------------------------------------------------------------------
        //        //            // 販売区分情報取得
        //        //            //---------------------------------------------------------------------
        //        //            List<UserGdBdU> salesList;
        //        //            status2 = this.GetSalesCodeWorkToUIdata(workList, out salesList);
        //        //            switch (status2)
        //        //            {
        //        //                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
        //        //                    {
        //        //                        // 内部キャッシュに保存する
        //        //                        foreach (UserGdBdU sales in salesList)
        //        //                        {
        //        //                            if (_drSalesCode.ContainsKey(sales.GuideCode))
        //        //                            {
        //        //                                _drSalesCode[sales.GuideCode] = sales.GuideName;
        //        //                            }
        //        //                            else
        //        //                            {
        //        //                                _drSalesCode.Add(sales.GuideCode, sales.GuideName);
        //        //                            }
        //        //                        }

        //        //                        break;
        //        //                    }
        //        //                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
        //        //                case (int)ConstantManagement.DB_Status.ctDB_EOF:
        //        //                    break;
        //        //                default:
        //        //                    msg = "販売区分情報(提供)の取得でエラーが発生しました";
        //        //                    return status2;
        //        //            }
        //        //            #endregion

        //        //            break;
        //        //        }
        //        //    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
        //        //    case (int)ConstantManagement.DB_Status.ctDB_EOF:
        //        //        break;
        //        //    default:
        //        //        msg = "販売区分情報(提供)の取得に失敗しました";
        //        //        break;
        //        //}
        //        //#endregion
        //        # endregion
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

        //        #region 販売区分情報(ユーザー)
        //        //---------------------------------------------------------------------
        //        // 販売区分情報(ユーザー)
        //        //---------------------------------------------------------------------
        //        // ユーザー登録分抽出条件
        //        GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

        //        // 取得したい検索結果データクラスを設定
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
        //        CustomSerializeArrayList workList;
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
        //        workList = new CustomSerializeArrayList();

        //        // 販売区分情報(ユーザー)
        //        UserGdBdUWork goodsLGroupUWork = new UserGdBdUWork();
        //        goodsLGroupUWork.EnterpriseCode = this._enterpriseCode;

        //        workList.Add(goodsLGroupUWork);

        //        // オブジェクト型に
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 ADD
        //        object retObj;
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 ADD
        //        retObj = workList;

        //        // 検索
        //        if (_isLocalDBRead)
        //        {
        //            status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
        //        }
        //        else
        //        {
        //            status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
        //        }


        //        switch (status)
        //        {
        //            case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
        //                {
        //                    workList = retObj as CustomSerializeArrayList;

        //                    // 取得データを変換
        //                    if (workList == null)
        //                    {
        //                        status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //                        return status;
        //                    }

        //                    #region 販売区分情報
        //                    //---------------------------------------------------------------------
        //                    // 販売区分情報取得
        //                    //---------------------------------------------------------------------
        //                    List<UserGdBdU> salesList;
        //                    status2 = this.GetSalesCodeUWorkToUIdata(workList, out salesList);
        //                    switch (status2)
        //                    {
        //                        case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
        //                            {
        //                                // 内部キャッシュに保存する
        //                                foreach (UserGdBdU sales in salesList)
        //                                {
        //                                    if (_drSalesCode.ContainsKey(sales.GuideCode))
        //                                    {
        //                                        _drSalesCode[sales.GuideCode] = sales.GuideName;
        //                                    }
        //                                    else
        //                                    {
        //                                        _drSalesCode.Add(sales.GuideCode, sales.GuideName);
        //                                    }
        //                                }

        //                                break;
        //                            }
        //                        case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
        //                        case (int)ConstantManagement.DB_Status.ctDB_EOF:
        //                            break;
        //                        default:
        //                            msg = "販売区分情報(ユーザー)の取得でエラーが発生しました";
        //                            return status2;
        //                    }
        //                    #endregion
        //                    break;
        //                }
        //            case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
        //            case (int)ConstantManagement.DB_Status.ctDB_EOF:
        //                break;
        //            default:
        //                msg = "販売区分情報(ユーザー)の取得に失敗しました";
        //                break;
        //        }
        //        #endregion
        //    }
        //    catch (Exception ex)
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //        msg = "販売区分情報(ユーザー)の取得で例外が発生しました[" + ex.Message + "]";
        //        msg = ex.Message;
        //        this._iGoodsURelationDataDB = null;
        //        this._goodsURelationDataLcDB = null;
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
        //        //this._goodsRelationDataLcDB = null;
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
        //    }

        //    return 0;
        //}
        # endregion
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 ADD
        /// <summary>
        /// 販売区分情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        private int SearchInitial_SalesCodeProc( string enterpriseCode, out string msg )
        {
            if ( _drSalesCode == null ) _drSalesCode = new Dictionary<int, string>();

            // Staticキャッシュクリア 
            ArrayList clearData = new ArrayList( 1 );
            clearData.Add( typeof( UserGdBdU ) );
            ClearStaticData( clearData );

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            try
            {
                if ( this._iGoodsURelationDataDB == null ) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                if ( this._goodsURelationDataLcDB == null ) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();

                #region 販売区分情報(ユーザー)
                //---------------------------------------------------------------------
                // 販売区分情報(ユーザー)
                //---------------------------------------------------------------------
                // ユーザー登録分抽出条件
                GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

                // 取得したい検索結果データクラスを設定
                CustomSerializeArrayList workList;
                workList = new CustomSerializeArrayList();

                // 販売区分情報(ユーザー)
                UserGdBdUWork userGdBdUWork = new UserGdBdUWork();
                userGdBdUWork.EnterpriseCode = this._enterpriseCode;

                workList.Add( userGdBdUWork );

                // オブジェクト型に
                object retObj;
                retObj = workList;

                // 検索
                if ( _isLocalDBRead )
                {
                    status = this._goodsURelationDataLcDB.Search( ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0 );
                }
                else
                {
                    status = this._iGoodsURelationDataDB.Search( ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0 );
                }


                switch ( status )
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if ( workList == null )
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            #region 販売区分情報
                            //---------------------------------------------------------------------
                            // 販売区分情報取得
                            //---------------------------------------------------------------------
                            List<UserGdBdU> salesList;
                            status2 = this.GetSalesCodeUWorkToUIdata( workList, out salesList );
                            switch ( status2 )
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 内部キャッシュに保存する
                                        foreach ( UserGdBdU sales in salesList )
                                        {
                                            if ( _drSalesCode.ContainsKey( sales.GuideCode ) )
                                            {
                                                _drSalesCode[sales.GuideCode] = sales.GuideName;
                                            }
                                            else
                                            {
                                                _drSalesCode.Add( sales.GuideCode, sales.GuideName );
                                            }
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "販売区分情報(ユーザー)の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        msg = "販売区分情報(ユーザー)の取得に失敗しました";
                        break;
                }
                #endregion
            }
            catch ( Exception ex )
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "販売区分情報(ユーザー)の取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
            }

            return 0;
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 ADD
        #endregion

        #region ●商品管理情報取得
        /// <summary>
        /// 商品管理情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <returns></returns>
        public int SearchInitial_GoodsMng(string enterpriseCode)
        {
            string msg;
            return SearchInitial_GoodsMngProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// 商品管理情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        public int SearchInitial_GoodsMng(string enterpriseCode, out string msg)
        {
            return SearchInitial_GoodsMngProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// 商品管理情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        private int SearchInitial_GoodsMngProc(string enterpriseCode, out string msg)
        {
            // 2009.01.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //if (_goodsMngList == null) _goodsMngList = new List<GoodsMng>();
            if (_goodsMngList == null) _goodsMngList = new List<GoodsMngWork>();
            // 2009.01.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // Staticキャッシュクリア 
            ArrayList clearData = new ArrayList(1);
            clearData.Add(typeof(UserGdBdU));
            ClearStaticData(clearData);

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            try
            {
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //if (this._goodsRelationDataLcDB == null) this._goodsRelationDataLcDB = new GoodsRelationDataLcDB();
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

                #region 商品管理情報(ユーザー)
                //---------------------------------------------------------------------
                // 商品管理情報(ユーザー)
                //---------------------------------------------------------------------
                // ユーザー登録分抽出条件
                GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

                // 取得したい検索結果データクラスを設定
                CustomSerializeArrayList workList = new CustomSerializeArrayList();

                // 商品管理情報(ユーザー)
                GoodsMngWork goodsMngWork = new GoodsMngWork();
                goodsMngWork.EnterpriseCode = enterpriseCode;

                workList.Add(goodsMngWork);

                // オブジェクト型に
                object retObj = workList;

                // 検索
                if (_isLocalDBRead)
                {
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                else
                {
                    status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }


                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if (workList == null)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            #region 商品管理情報
                            //---------------------------------------------------------------------
                            // 商品管理情報取得
                            //---------------------------------------------------------------------
                            // 2009.01.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                            //List<GoodsMng> goodsMngList;
                            List<GoodsMngWork> goodsMngList;
                            // 2009.01.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            status2 = this.GetGoodsMngWorkToUIdata(workList, out goodsMngList);
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        _goodsMngList = goodsMngList;
                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "商品管理情報(ユーザー)の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        msg = "商品管理情報(ユーザー)の取得に失敗しました";
                        break;
                }
                #endregion
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品管理情報(ユーザー)の取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                //this._goodsRelationDataLcDB = null;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
            }

            return 0;
        }
        #endregion

        #region ●優良設定情報取得
        /// <summary>
        /// 優良設定情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <returns></returns>
        public int SearchInitial_PrmSetting(string enterpriseCode)
        {
            string msg;
            return SearchInitial_PrmSettingProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// 優良設定情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        public int SearchInitial_PrmSetting(string enterpriseCode, out string msg)
        {
            return SearchInitial_PrmSettingProc(enterpriseCode, out msg);
        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 DEL
        # region // DEL
        ///// <summary>
        ///// 優良設定情報取得
        ///// </summary>
        ///// <param name="enterpriseCode">企業コード</param>
        ///// <param name="msg">エラーメッセージ</param>
        ///// <returns></returns>
        //private int SearchInitial_PrmSettingProc(string enterpriseCode, out string msg)
        //{
        //    if (_drGoodsLGroup == null) _drGoodsLGroup = new Dictionary<int, string>();

        //    // Staticキャッシュクリア 
        //    ArrayList clearData = new ArrayList(1);
        //    clearData.Add(typeof(UserGdBdU));
        //    ClearStaticData(clearData);

        //    int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //    int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //    msg = "";

        //    try
        //    {
        //        if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
        //        if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
        //        //if (this._goodsRelationDataLcDB == null) this._goodsRelationDataLcDB = new GoodsRelationDataLcDB();
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

        //        #region 優良設定情報(ユーザー)
        //        //---------------------------------------------------------------------
        //        // 優良設定情報(ユーザー)
        //        //---------------------------------------------------------------------
        //        // ユーザー登録分抽出条件
        //        GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

        //        // 取得したい検索結果データクラスを設定
        //        CustomSerializeArrayList workList = new CustomSerializeArrayList();

        //        // 優良設定情報(ユーザー)
        //        PrmSettingUWork prmSettingUWork = new PrmSettingUWork();
        //        prmSettingUWork.EnterpriseCode = this._enterpriseCode;

        //        workList.Add(prmSettingUWork);

        //        // オブジェクト型に
        //        object retObj = workList;

        //        // 検索
        //        if (_isLocalDBRead)
        //        {
        //            status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
        //        }
        //        else
        //        {
        //            status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
        //        }


        //        switch (status)
        //        {
        //            case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
        //                {
        //                    workList = retObj as CustomSerializeArrayList;

        //                    // 取得データを変換
        //                    if (workList == null)
        //                    {
        //                        status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //                        return status;
        //                    }

        //                    #region 優良設定情報
        //                    //---------------------------------------------------------------------
        //                    // 優良設定情報取得
        //                    //---------------------------------------------------------------------
        //                    List<PrmSettingUWork> prmSettingList;
        //                    status2 = this.GetPrmSettingUWorkToUIdata(workList, out prmSettingList);
        //                    switch (status2)
        //                    {
        //                        case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
        //                            {
        //                                // 内部キャッシュに保存する
        //                                foreach (PrmSettingUWork prmSetting in prmSettingList)
        //                                {
        //                                    PrmSettingKey prmSettingKey = new PrmSettingKey(prmSetting.SectionCode, prmSetting.GoodsMGroup, prmSetting.TbsPartsCode, prmSetting.PartsMakerCd);

        //                                    if (_drPrmSettingWork.ContainsKey(prmSettingKey))
        //                                    {
        //                                        _drPrmSettingWork[prmSettingKey] = prmSetting;
        //                                    }
        //                                    else
        //                                    {
        //                                        _drPrmSettingWork.Add(prmSettingKey, prmSetting);
        //                                    }
        //                                }

        //                                break;
        //                            }
        //                        case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
        //                        case (int)ConstantManagement.DB_Status.ctDB_EOF:
        //                            break;
        //                        default:
        //                            msg = "販売区分情報(ユーザー)の取得でエラーが発生しました";
        //                            return status2;
        //                    }
        //                    #endregion
        //                    break;
        //                }
        //            case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
        //            case (int)ConstantManagement.DB_Status.ctDB_EOF:
        //                break;
        //            default:
        //                msg = "販売区分情報(ユーザー)の取得に失敗しました";
        //                break;
        //        }
        //        #endregion
        //    }
        //    catch (Exception ex)
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //        msg = "販売区分情報(ユーザー)の取得で例外が発生しました[" + ex.Message + "]";
        //        msg = ex.Message;
        //        this._iGoodsURelationDataDB = null;
        //        this._goodsURelationDataLcDB = null;
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
        //        //this._goodsRelationDataLcDB = null;
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
        //    }

        //    return 0;
        //}
        # endregion
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 ADD
        /// <summary>
        /// 優良設定情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        private int SearchInitial_PrmSettingProc( string enterpriseCode, out string msg )
        {
            // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //if (_drPrmSettingWork == null) _drPrmSettingWork = new Dictionary<PrmSettingKey, PrmSettingUWork>();
            if (_drPrmSettingWork == null) _drPrmSettingWork = new List<PrmSettingUWork>();
            // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // Staticキャッシュクリア 
            ArrayList clearData = new ArrayList( 1 );
            clearData.Add( typeof( UserGdBdU ) );
            ClearStaticData( clearData );

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            try
            {
                if ( this._iGoodsURelationDataDB == null ) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                if ( this._goodsURelationDataLcDB == null ) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();

                #region 優良設定情報(ユーザー)
                //---------------------------------------------------------------------
                // 優良設定情報(ユーザー)
                //---------------------------------------------------------------------
                // ユーザー登録分抽出条件
                GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

                // 取得したい検索結果データクラスを設定
                CustomSerializeArrayList workList = new CustomSerializeArrayList();

                // 優良設定情報(ユーザー)
                PrmSettingUWork prmSettingUWork = new PrmSettingUWork();
                prmSettingUWork.EnterpriseCode = this._enterpriseCode;

                workList.Add( prmSettingUWork );

                // オブジェクト型に
                object retObj = workList;

                // 検索
                if ( _isLocalDBRead )
                {
                    status = this._goodsURelationDataLcDB.Search( ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0 );
                }
                else
                {
                    status = this._iGoodsURelationDataDB.Search( ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0 );
                }


                switch ( status )
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if ( workList == null )
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            #region 優良設定情報
                            //---------------------------------------------------------------------
                            // 優良設定情報取得
                            //---------------------------------------------------------------------
                            List<PrmSettingUWork> prmSettingList;
                            status2 = this.GetPrmSettingUWorkToUIdata( workList, out prmSettingList );
                            switch ( status2 )
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                        //// 内部キャッシュに保存する
                                        //foreach ( PrmSettingUWork prmSetting in prmSettingList )
                                        //{
                                        //    // 2008.12.01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                        //    //PrmSettingKey prmSettingKey = new PrmSettingKey(prmSetting.SectionCode, prmSetting.GoodsMGroup, prmSetting.TbsPartsCode, prmSetting.PartsMakerCd);
                                        //    PrmSettingKey prmSettingKey = new PrmSettingKey(prmSetting.SectionCode.Trim(), prmSetting.GoodsMGroup, prmSetting.TbsPartsCode, prmSetting.PartsMakerCd);
                                        //    // 2008.12.01 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                                        //    if ( _drPrmSettingWork.ContainsKey( prmSettingKey ) )
                                        //    {
                                        //        _drPrmSettingWork[prmSettingKey] = prmSetting;
                                        //    }
                                        //    else
                                        //    {
                                        //        _drPrmSettingWork.Add( prmSettingKey, prmSetting );
                                        //    }
                                        //}
                                        _drPrmSettingWork = prmSettingList;
                                        // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    break;
                                default:
                                    msg = "優良設定情報(ユーザー)の取得でエラーが発生しました";
                                    return status2;
                            }
                            #endregion
                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        msg = "優良設定情報(ユーザー)の取得に失敗しました";
                        break;
                }
                #endregion
            }
            catch ( Exception ex )
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "優良設定情報(ユーザー)の取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
            }

            return 0;
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 ADD
        #endregion

        // 2009.04.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        #region ●仕入先情報取得
        /// <summary>
        /// 仕入先情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <returns></returns>
        public int SearchInitial_Supplier(string enterpriseCode)
        {
            string msg;
            return SearchInitial_SupplierProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// 仕入先情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        public int SearchInitial_Supplier(string enterpriseCode, out string msg)
        {
            return SearchInitial_SupplierProc(enterpriseCode, out msg);
        }

        /// <summary>
        /// 仕入先情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        private int SearchInitial_SupplierProc(string enterpriseCode, out string msg)
        {
            if (_supplierWorkList == null) _supplierWorkList = new List<SupplierWork>();

            // Staticキャッシュクリア 
            ArrayList clearData = new ArrayList(1);
            clearData.Add(typeof(SupplierWork));
            ClearStaticData(clearData);

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            try
            {
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();

                #region 仕入先情報(ユーザー)
                //---------------------------------------------------------------------
                // 仕入先情報(ユーザー)
                //---------------------------------------------------------------------
                // ユーザー登録分抽出条件
                GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();

                // 取得したい検索結果データクラスを設定
                CustomSerializeArrayList workList = new CustomSerializeArrayList();

                // 仕入先情報(ユーザー)
                SupplierWork supplierWork = new SupplierWork();
                supplierWork.EnterpriseCode = this._enterpriseCode;

                workList.Add(supplierWork);

                // オブジェクト型に
                object retObj = workList;

                // 検索
                if (_isLocalDBRead)
                {
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                else
                {
                    status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }


                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if (workList == null)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            #region 仕入先情報
                            //---------------------------------------------------------------------
                            // 仕入先情報
                            //---------------------------------------------------------------------
                            if (this._isGetSupplier)
                            {
                                if (workList[0] is ArrayList)
                                {
                                    foreach (ArrayList arList in workList)
                                    {
                                        if (arList != null && arList.Count > 0)
                                        {
                                            if (arList[0] is SupplierWork)
                                            {
                                                _supplierWorkList = new List<SupplierWork>((SupplierWork[])arList.ToArray(typeof(SupplierWork)));
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion
                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        msg = "仕入先情報(ユーザー)の取得に失敗しました";
                        break;
                }
                #endregion
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "仕入先情報(ユーザー)の取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
            }

            return 0;
        }
        #endregion
        // 2009.04.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        #region ●初期値データ取得
        /// <summary>
        /// 初期値データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        public int SearchInitialForMst(string enterpriseCode, string sectionCode, out string msg)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            msg = string.Empty;
            try
            {
                // 売上金額処理区分マスタ
                if ((_salesProcMoneyList == null) || (_salesProcMoneyList.Count == 0))
                {
                    List<SalesProcMoney> salesProcMoneyList;
                    this.SearchInitial_SalesProcMoney(this._enterpriseCode, out salesProcMoneyList);
                    this.CacheSalesProcMoneyList(salesProcMoneyList);
                    //this._salesPriceCalclate.CacheSalesProcMoneyList(salesProcMoneyList);
                }
                // 仕入金額処理区分マスタ
                if ((_stockProcMoneyList == null) || (_stockProcMoneyList.Count == 0))
                {
                    List<StockProcMoney> stockProcMoneyList;
                    this.SearchInitial_StockProcMoney(this._enterpriseCode, out stockProcMoneyList);
                    this.CacheStockProcMoneyList(stockProcMoneyList);
                    //this._stockPriceCalclate.CacheStockProcMoneyList(stockProcMoneyList);
                }
                // 税率設定マスタ
                if (_taxRateSet == null)
                {
                    TaxRateSet taxRateSet;
                    this.SearchInitial_TaxRateSet(this._enterpriseCode, out taxRateSet);
                    this.CacheTaxRateSetAndTaxRate(taxRateSet);
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "初期値データの取得で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
            }
            return status;
        }
        #endregion

        #region ●売上金額処理区分マスタ取得
        /// <summary>
        /// 売上金額処理区分マスタ取得
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="salesProcMoneyList"></param>
        /// <returns></returns>
        public int SearchInitial_SalesProcMoney(string enterpriseCode, out List<SalesProcMoney> salesProcMoneyList)
        {
            //-----------------------------------------------------------
            // 売上金額処理区分設定マスタ
            //-----------------------------------------------------------
            ArrayList retSalesProcMoneyList = null;
            salesProcMoneyList = new List<SalesProcMoney>();
            int status = this._salesProcMoneyAcs.Search(out retSalesProcMoneyList, enterpriseCode);
            _salesProcMoneyList = new List<SalesProcMoney>();
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if (retSalesProcMoneyList != null)
                {
                    foreach (SalesProcMoney salesProcMoney in retSalesProcMoneyList)
                    {
                        salesProcMoneyList.Add(salesProcMoney.Clone());
                    }
                }
            }
            return status;
        }
        #endregion

        #region ●仕入金額処理区分マスタ取得
        /// <summary>
        /// 仕入金額処理区分マスタ取得
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="stockProcMoneyList"></param>
        /// <returns></returns>
        public int SearchInitial_StockProcMoney(string enterpriseCode, out List<StockProcMoney> stockProcMoneyList)
        {
            //-----------------------------------------------------------
            // 仕入金額処理区分設定マスタ
            //-----------------------------------------------------------
            ArrayList retStockProcMoneyList;
            stockProcMoneyList = new List<StockProcMoney>();
            int status = this._stockProcMoneyAcs.Search(out retStockProcMoneyList, enterpriseCode);
            _stockProcMoneyList = new List<StockProcMoney>();
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if (retStockProcMoneyList != null)
                {
                    foreach (StockProcMoney stockProcMoney in retStockProcMoneyList)
                    {
                        stockProcMoneyList.Add(stockProcMoney);
                    }
                }
            }
            return status;
        }
        #endregion

        #region ●税率取得
        /// <summary>
        /// 税率取得処理
        /// </summary>
        /// <param name="today"></param>
        /// <param name="taxRateSet"></param>
        /// <param name="taxRate"></param>
        /// <returns></returns>
        private int getTaxRate(DateTime today, TaxRateSet taxRateSet, out double taxRate)
        {
            int st = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            taxRate = 0;
            if ((today > taxRateSet.TaxRateStartDate) &&
                (today <= taxRateSet.TaxRateEndDate))
            {
                taxRate = taxRateSet.TaxRate;
            }
            else if ((today > taxRateSet.TaxRateStartDate2) &&
                     (today <= taxRateSet.TaxRateEndDate2))
            {
                taxRate = taxRateSet.TaxRate2;
            }
            else if ((today > taxRateSet.TaxRateStartDate3) &&
                     (today <= taxRateSet.TaxRateEndDate3))
            {
                taxRate = taxRateSet.TaxRate3;
            }
            else
            {
                st = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            }

            return st;
        }

        /// <summary>
        /// 税率設定マスタ＆税率キャッシュ処理
        /// </summary>
        /// <param name="taxRateSet"></param>
        private void CacheTaxRateSetAndTaxRate(TaxRateSet taxRateSet)
        {
            _taxRateSet = taxRateSet;
            this._taxRate = taxRateSet.TaxRate;
            double taxRate = taxRateSet.TaxRate;
            DateTime today = DateTime.Today;

            int st = this.getTaxRate(today, _taxRateSet, out taxRate);
            if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                _taxRateSet = taxRateSet;
                this._taxRate = taxRate;
            }
        }

        /// <summary>
        /// 税率設定マスタ取得処理
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="taxRateSet"></param>
        private void SearchInitial_TaxRateSet(string enterpriseCode, out TaxRateSet taxRateSet)
        {
            ArrayList al;
            taxRateSet = new TaxRateSet();
            int status;
            if (_isLocalDBRead)
            {
                status = this._taxRateSetAcs.Search(out al, enterpriseCode, TaxRateSetAcs.SearchMode.Local);
            }
            else
            {
                status = this._taxRateSetAcs.Search(out al, enterpriseCode, TaxRateSetAcs.SearchMode.Remote);
            }

            switch (status)
            {
                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                    taxRateSet = (TaxRateSet)al[0];
                    break;
                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                    break;
                default:
                    break;
            }
        }
        #endregion
        #endregion

        // --------------------------------------------------
        #region < 商品関連メソッド群 >
        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="dataList">商品連結データオブジェクトリスト</param>
        /// <returns></returns>
        /// <remarks>Read条件：品番</remarks>
        public int Read(string enterpriseCode, string goodsNo, out List<GoodsUnitData> dataList)
        {
            return ReadProc(enterpriseCode, "", goodsNo, out dataList);
        }

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="dataList">商品連結データオブジェクトリスト</param>
        /// <returns></returns>
        /// <remarks>Read条件：品番</remarks>
        public int Read(string enterpriseCode, string sectionCode, string goodsNo, out List<GoodsUnitData> dataList)
        {
            return ReadProc(enterpriseCode, sectionCode, goodsNo, out dataList);
        }

        // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>
        ///// 商品連結データ取得
        ///// </summary>
        ///// <param name="enterpriseCode">企業コード</param>
        ///// <param name="sectionCode">拠点コード</param>
        ///// <param name="goodsNo">品番</param>
        ///// <param name="dataList">商品連結データオブジェクトリスト</param>
        ///// <returns></returns>
        ///// <remarks>Read条件：品番</remarks>
        //private int ReadProc(string enterpriseCode, string sectionCode, string goodsNo, out List<GoodsUnitData> dataList)
        //{
        //    string msg;

        //    //----------------------------------------------------------------------------
        //    // 検索条件設定
        //    //----------------------------------------------------------------------------
        //    GoodsCndtn cndtn = new GoodsCndtn();
        //    // 企業コード
        //    cndtn.EnterpriseCode = enterpriseCode;
        //    // 品番
        //    cndtn.GoodsNo = goodsNo;
        //    // 商品検索タイプ(0:完全一致,1:前方一致検索,2:後方一致検索,3:曖昧検索,4:ハイフン無し完全一致)
        //    cndtn.GoodsNoSrchTyp = 0;
        //    // 商品属性
        //    cndtn.GoodsKindCode = 9;
        //    // 拠点コード(商品管理情報セット時に使用)
        //    cndtn.SectionCode = sectionCode;

        //    //----------------------------------------------------------------------------
        //    // 商品検索
        //    //----------------------------------------------------------------------------
        //    int st = Search(cndtn, ConstantManagement.LogicalMode.GetData0, out dataList, out msg);

        //    //----------------------------------------------------------------------------
        //    // 検索結果不足情報設定
        //    //----------------------------------------------------------------------------
        //    List<GoodsUnitData> retList = new List<GoodsUnitData>();
        //    foreach (GoodsUnitData goodsUnitData in dataList)
        //    {
        //        GoodsUnitData gUnitData = new GoodsUnitData();
        //        gUnitData = goodsUnitData;
        //        // 2008.10.30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //        gUnitData.SectionCode = sectionCode;
        //        // 2008.10.30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

        //        //----------------------------------------------------------------------------
        //        // 商品連結データ不足情報設定
        //        //----------------------------------------------------------------------------
        //        this.SettingGoodsUnitDataFromVariousMst(ref gUnitData);

        //        retList.Add(gUnitData);
        //    }
        //    dataList.Clear();
        //    dataList = retList;
        //    return st;
        //}

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        /// <param name="isSettingVariousMst">0:不足情報セットする 1:不足情報セットしない</param>
        /// <param name="dataList">商品連結データオブジェクトリスト</param>
        /// <returns></returns>
        public int Read(string enterpriseCode, string sectionCode, string goodsNo, int isSettingSupplier, int isSettingVariousMst, out List<GoodsUnitData> dataList)
        {
            return this.ReadProc(enterpriseCode, sectionCode, goodsNo, isSettingSupplier, isSettingVariousMst, out dataList);
        }

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="dataList">商品連結データオブジェクトリスト</param>
        /// <returns></returns>
        private int ReadProc(string enterpriseCode, string sectionCode, string goodsNo, out List<GoodsUnitData> dataList)
        {
            return this.ReadProc(enterpriseCode, sectionCode, goodsNo, 0, 0, out dataList);
        }

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        /// <param name="isSettingVariousMst">0:不足情報セットする 1:不足情報セットしない</param>
        /// <param name="dataList">商品連結データオブジェクトリスト</param>
        /// <returns></returns>
        private int ReadProc(string enterpriseCode, string sectionCode, string goodsNo, int isSettingSupplier, int isSettingVariousMst, out List<GoodsUnitData> dataList)
        {
            string msg;

            //----------------------------------------------------------------------------
            // 検索条件設定
            //----------------------------------------------------------------------------
            GoodsCndtn cndtn = new GoodsCndtn();
            // 企業コード
            cndtn.EnterpriseCode = enterpriseCode;
            // 品番
            cndtn.GoodsNo = goodsNo;
            // 商品検索タイプ(0:完全一致,1:前方一致検索,2:後方一致検索,3:曖昧検索,4:ハイフン無し完全一致)
            cndtn.GoodsNoSrchTyp = 0;
            // 商品属性
            cndtn.GoodsKindCode = 9;
            // 拠点コード(商品管理情報セット時に使用)
            cndtn.SectionCode = sectionCode;

            //----------------------------------------------------------------------------
            // 商品検索
            //----------------------------------------------------------------------------
            int st = Search(cndtn, ConstantManagement.LogicalMode.GetData0, out dataList, out msg);

            //----------------------------------------------------------------------------
            // 検索結果不足情報設定
            //----------------------------------------------------------------------------
            List<GoodsUnitData> retList = new List<GoodsUnitData>();
            foreach (GoodsUnitData goodsUnitData in dataList)
            {
                GoodsUnitData gUnitData = new GoodsUnitData();
                gUnitData = goodsUnitData;
                gUnitData.SectionCode = sectionCode;

                //----------------------------------------------------------------------------
                // 商品連結データ不足情報設定
                //----------------------------------------------------------------------------
                this.SettingGoodsUnitDataFromVariousMst(ref gUnitData, isSettingSupplier, isSettingVariousMst);

                retList.Add(gUnitData);
            }
            dataList.Clear();
            dataList = retList;
            return st;
        }
        // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <returns></returns>
        /// <remarks>Read条件：メーカー・品番</remarks>
        public int Read(string enterpriseCode, int makerCode, string goodsNo, out GoodsUnitData goodsUnitData)
        {
            return ReadProc(enterpriseCode, "", makerCode, goodsNo, ConstantManagement.LogicalMode.GetData0, out goodsUnitData);
        }

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <returns></returns>
        /// <remarks>Read条件：メーカー・品番</remarks>
        public int Read(string enterpriseCode, string sectionCode, int makerCode, string goodsNo, out GoodsUnitData goodsUnitData)
        {
            return ReadProc(enterpriseCode, sectionCode, makerCode, goodsNo, ConstantManagement.LogicalMode.GetData0, out goodsUnitData);
        }

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="logicalMode">ロジカルモード(ConstantManagement.LogicalMode)</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <returns></returns>
        /// <remarks>Read条件：メーカー・品番</remarks>
        public int Read(string enterpriseCode, int makerCode, string goodsNo, ConstantManagement.LogicalMode logicalMode, out GoodsUnitData goodsUnitData)
        {
            return ReadProc(enterpriseCode, "", makerCode, goodsNo, logicalMode, out goodsUnitData);
        }

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="logicalMode">ロジカルモード(ConstantManagement.LogicalMode)</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <returns></returns>
        /// <remarks>Read条件：メーカー・品番</remarks>
        public int Read(string enterpriseCode, string sectionCode, int makerCode, string goodsNo, ConstantManagement.LogicalMode logicalMode, out GoodsUnitData goodsUnitData)
        {
            return ReadProc(enterpriseCode, sectionCode, makerCode, goodsNo, logicalMode, out goodsUnitData);
        }

        // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>
        ///// 商品連結データ取得
        ///// </summary>
        ///// <param name="enterpriseCode">企業コード</param>
        ///// <param name="sectionCode">拠点コード</param>
        ///// <param name="makerCode">メーカーコード</param>
        ///// <param name="goodsNo">品番</param>
        ///// <param name="logicalMode">ロジカルモード(ConstantManagement.LogicalMode)</param>
        ///// <param name="goodsUnitData">商品連結データオブジェクト</param>
        ///// <returns></returns>
        ///// <remarks>Read条件：メーカー・品番</remarks>
        //private int ReadProc(string enterpriseCode, string sectionCode, int makerCode, string goodsNo, ConstantManagement.LogicalMode logicalMode, out GoodsUnitData goodsUnitData)
        //{
        //    string msg;

        //    goodsUnitData = new GoodsUnitData();

        //    //----------------------------------------------------------------------------
        //    // 検索条件設定
        //    //----------------------------------------------------------------------------
        //    GoodsCndtn cndtn = new GoodsCndtn();

        //    // 企業コード
        //    cndtn.EnterpriseCode = enterpriseCode;
        //    // メーカーコード
        //    cndtn.GoodsMakerCd = makerCode;
        //    // 品番
        //    cndtn.GoodsNo = goodsNo;
        //    // 商品検索タイプ(0:完全一致,1:前方一致検索,2:後方一致検索,3:曖昧検索,4:ハイフン無し完全一致)
        //    cndtn.GoodsNoSrchTyp = 0;
        //    // 商品属性
        //    cndtn.GoodsKindCode = 9;
        //    // 拠点コード(商品管理情報セット時に使用)
        //    cndtn.SectionCode = sectionCode;

        //    List<GoodsUnitData> dataList;
        //    int status = Search(cndtn, logicalMode, out dataList, out msg);
        //    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //    {
        //        goodsUnitData = dataList[0].Clone();
        //        // 2008.10.30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //        goodsUnitData.SectionCode = sectionCode;
        //        // 2008.10.30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        //        //----------------------------------------------------------------------------
        //        // 商品連結データ不足情報設定
        //        //----------------------------------------------------------------------------
        //        this.SettingGoodsUnitDataFromVariousMst(ref goodsUnitData);
        //    }

        //    return status;
        //}

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="logicalMode">ロジカルモード(ConstantManagement.LogicalMode)</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        /// <param name="isSettingVariousMst">0:不足情報セットする 1:不足情報セットしない</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <returns></returns>
        public int Read(string enterpriseCode, string sectionCode, int makerCode, string goodsNo, int isSettingSupplier, int isSettingVariousMst, ConstantManagement.LogicalMode logicalMode, out GoodsUnitData goodsUnitData)
        {
            return this.ReadProc(enterpriseCode, sectionCode, makerCode, goodsNo, isSettingSupplier, isSettingVariousMst, logicalMode, out goodsUnitData);
        }

        #region 得意先電子元帳からだけ
        // 2013.02.25 橋本 ADD START ==============================================
        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="logicalMode">ロジカルモード(ConstantManagement.LogicalMode)</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        /// <param name="isSettingVariousMst">0:不足情報セットする 1:不足情報セットしない</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <returns></returns>
        public int ReadFromCustPtrSales(string enterpriseCode, string sectionCode, int makerCode, string goodsNo, int isSettingSupplier, int isSettingVariousMst, ConstantManagement.LogicalMode logicalMode, out GoodsUnitData goodsUnitData)
        {
            return this.ReadFromCustPtrSalesProc(enterpriseCode, sectionCode, makerCode, goodsNo, isSettingSupplier, isSettingVariousMst, logicalMode, out goodsUnitData);
        }
        // 2013.02.25 橋本 ADD END   ==============================================
        #endregion

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="logicalMode">ロジカルモード(ConstantManagement.LogicalMode)</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <returns></returns>
        private int ReadProc(string enterpriseCode, string sectionCode, int makerCode, string goodsNo, ConstantManagement.LogicalMode logicalMode, out GoodsUnitData goodsUnitData)
        {
            return this.ReadProc(enterpriseCode, sectionCode, makerCode, goodsNo, 0, 0, logicalMode, out goodsUnitData);
        }

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        /// <param name="isSettingVariousMst">0:不足情報セットする 1:不足情報セットしない</param>
        /// <param name="logicalMode">ロジカルモード(ConstantManagement.LogicalMode)</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <returns></returns>
        private int ReadProc(string enterpriseCode, string sectionCode, int makerCode, string goodsNo, int isSettingSupplier, int isSettingVariousMst, ConstantManagement.LogicalMode logicalMode, out GoodsUnitData goodsUnitData)
        {
            string msg;

            goodsUnitData = new GoodsUnitData();

            //----------------------------------------------------------------------------
            // 検索条件設定
            //----------------------------------------------------------------------------
            GoodsCndtn cndtn = new GoodsCndtn();

            // 企業コード
            cndtn.EnterpriseCode = enterpriseCode;
            // メーカーコード
            cndtn.GoodsMakerCd = makerCode;
            // 品番
            cndtn.GoodsNo = goodsNo;
            // 商品検索タイプ(0:完全一致,1:前方一致検索,2:後方一致検索,3:曖昧検索,4:ハイフン無し完全一致)
            cndtn.GoodsNoSrchTyp = 0;
            // 商品属性
            cndtn.GoodsKindCode = 9;
            // 拠点コード(商品管理情報セット時に使用)
            cndtn.SectionCode = sectionCode;

            List<GoodsUnitData> dataList;
            int status = Search(cndtn, logicalMode, out dataList, out msg);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                goodsUnitData = dataList[0].Clone();
                goodsUnitData.SectionCode = sectionCode;

                //----------------------------------------------------------------------------
                // 商品連結データ不足情報設定
                //----------------------------------------------------------------------------
                this.SettingGoodsUnitDataFromVariousMst(ref goodsUnitData, isSettingSupplier, isSettingVariousMst);
            }

            return status;
        }
        // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        #region ReadFromCustPtrSalesProc

        // 2013.02.25 橋本 ADD START ==============================================
        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        /// <param name="isSettingVariousMst">0:不足情報セットする 1:不足情報セットしない</param>
        /// <param name="logicalMode">ロジカルモード(ConstantManagement.LogicalMode)</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <returns></returns>
        private int ReadFromCustPtrSalesProc(string enterpriseCode, string sectionCode, int makerCode, string goodsNo, int isSettingSupplier, int isSettingVariousMst, ConstantManagement.LogicalMode logicalMode, out GoodsUnitData goodsUnitData)
        {
            string msg;

            goodsUnitData = new GoodsUnitData();

            //----------------------------------------------------------------------------
            // 検索条件設定
            //----------------------------------------------------------------------------
            GoodsCndtn cndtn = new GoodsCndtn();

            // 企業コード
            cndtn.EnterpriseCode = enterpriseCode;
            // メーカーコード
            cndtn.GoodsMakerCd = makerCode;
            // 品番
            cndtn.GoodsNo = goodsNo;
            // 商品検索タイプ(0:完全一致,1:前方一致検索,2:後方一致検索,3:曖昧検索,4:ハイフン無し完全一致)
            cndtn.GoodsNoSrchTyp = 0;
            // 商品属性
            cndtn.GoodsKindCode = 9;
            // 拠点コード(商品管理情報セット時に使用)
            cndtn.SectionCode = sectionCode;

            List<GoodsUnitData> dataList;
            int status = 0;
            if (isSettingVariousMst == 2)
            {
                isSettingVariousMst = 1;
                status = Search(cndtn, logicalMode, out dataList, out msg, isSettingVariousMst); // 商品不足情報を取得しない
            }
            else
            {
                status = Search(cndtn, logicalMode, out dataList, out msg);
            }
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                goodsUnitData = dataList[0].Clone();
                goodsUnitData.SectionCode = sectionCode;

                //----------------------------------------------------------------------------
                // 商品連結データ不足情報設定
                //----------------------------------------------------------------------------
                this.SettingGoodsUnitDataFromVariousMst(ref goodsUnitData, isSettingSupplier, isSettingVariousMst);
            }

            return status;
        }
        // 2013.02.25 橋本 ADD START ==============================================
        #endregion

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="isRemoting"></param>
        /// <param name="enterpriseCode"></param>
        /// <param name="makerCode"></param>
        /// <param name="goodsCode"></param>
        /// <param name="goodsUnitData"></param>
        /// <returns></returns>
        public int Read(bool isRemoting, string enterpriseCode, int makerCode, string goodsCode, out GoodsUnitData goodsUnitData)
        {
            return Read(isRemoting, enterpriseCode, "", makerCode, goodsCode, out goodsUnitData);
        }

        /// <summary>
        /// 商品連結データ取得
        /// </summary>
        /// <param name="isRemoting"></param>
        /// <param name="enterpriseCode"></param>
        /// <param name="sectionCode"></param>
        /// <param name="makerCode"></param>
        /// <param name="goodsCode"></param>
        /// <param name="goodsUnitData"></param>
        /// <returns></returns>
        public int Read(bool isRemoting, string enterpriseCode, string sectionCode, int makerCode, string goodsCode, out GoodsUnitData goodsUnitData)
        {
            //int status = (int)ConstantManagement.DB_Status.ctDB_ERROR; // 2009.02.10

            goodsUnitData = new GoodsUnitData();

            // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //// キャッシュより優先して取得する場合
            //if (!isRemoting)
            //{
            //    status = this.ReadStatic(enterpriseCode, makerCode, goodsCode, out goodsUnitData);
            //    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            //    {
            //        return status;
            //    }
            //}
            // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            return Read(enterpriseCode, sectionCode, makerCode, goodsCode, ConstantManagement.LogicalMode.GetData0, out goodsUnitData);
        }

        // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>
        ///// Staticデータ取得
        ///// </summary>
        ///// <param name="goodsUnitDataList">商品連結結果データリスト</param>
        ///// <param name="msg">エラーメッセージ</param>
        ///// <returns>ConstantManagement.DB_Status</returns>
        //public int SearchStaic(out List<GoodsUnitData> goodsUnitDataList, out string msg)
        //{
        //    msg = "";
        //    goodsUnitDataList = null;

        //    int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

        //    if (_drGoods == null || _drGoods.Count == 0)
        //    {
        //        msg = "該当する商品はみつかりませんでした";
        //        return status;
        //    }

        //    // Staticデータ取得
        //    goodsUnitDataList = new List<GoodsUnitData>(_drGoods.Values);

        //    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

        //    return status;
        //}
        // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>
        /// 商品連結データ＋掛率(単品売価)取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="logicalMode">ロジカルモード(ConstantManagement.LogicalMode)</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <param name="unitRateList">掛率.単品売価設定リスト</param>
        /// <returns></returns>
        /// <remarks>Read条件：メーカー・品番</remarks>
        public int ReadGoodsWithRate(string enterpriseCode, int makerCode, string goodsNo, ConstantManagement.LogicalMode logicalMode, out GoodsUnitData goodsUnitData, out List<Rate> unitRateList)
        {
            unitRateList = new List<Rate>();

            // 商品連結データ取得
            int status = ReadProc(enterpriseCode, "", makerCode, goodsNo, logicalMode, out goodsUnitData);

            if ( status == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
            {
                // 商品に結びつく掛率.単品売価設定を取得する
                ReadUnitRate( goodsUnitData, logicalMode, out unitRateList );

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/26 DEL
                //return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/26 DEL
            }
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/26 DEL
            //else
            //{
            //    return (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/26 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/26 ADD
            return status;
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/26 ADD
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

        #region ■ JANコード検索(提供・ユーザー分)
        /// <summary>
        /// JANコード検索
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="jan"></param>
        /// <param name="goodsUnitData"></param>
        /// <returns></returns>
        public int ReadJan(string enterpriseCode, string jan, out GoodsUnitData goodsUnitData)
        {
            return ReadJan(enterpriseCode, "", jan, out goodsUnitData);
        }

        /// <summary>
        /// JANコード検索
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="sectionCode"></param>
        /// <param name="jan"></param>
        /// <param name="goodsUnitData"></param>
        /// <returns></returns>
        public int ReadJan(string enterpriseCode, string sectionCode, string jan, out GoodsUnitData goodsUnitData)
        {
            string msg;

            goodsUnitData = null;

            // 検索条件を作成する
            GoodsCndtn cndtn = new GoodsCndtn();

            // 企業コード
            cndtn.EnterpriseCode = enterpriseCode;
            // JANコード
            cndtn.Jan = jan;

            goodsUnitData = null;
            int status = this.ReadJanDB(cndtn, ConstantManagement.LogicalMode.GetData0, out goodsUnitData, out msg);

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if (goodsUnitData == null) return (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

                // 検索条件を作成する
                cndtn = new GoodsCndtn();

                // 企業コード
                cndtn.EnterpriseCode = enterpriseCode;
                // メーカーコード
                cndtn.GoodsMakerCd = goodsUnitData.GoodsMakerCd;
                // 商品コード
                cndtn.GoodsNo = goodsUnitData.GoodsNo;
                // 拠点コード(商品管理情報セット時使用)
                cndtn.SectionCode = sectionCode;

                List<GoodsUnitData> goodsUnitDataLst;
                status = Search(cndtn, ConstantManagement.LogicalMode.GetData0, out goodsUnitDataLst, out msg);
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (goodsUnitDataLst == null || goodsUnitDataLst.Count == 0)
                        return (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

                    goodsUnitData = goodsUnitDataLst[0].Clone();
                    // 2008.10.30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    goodsUnitData.SectionCode = sectionCode;
                    // 2008.10.30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                    //----------------------------------------------------------------------------
                    // 商品連結データ不足情報設定
                    //----------------------------------------------------------------------------
                    this.SettingGoodsUnitDataFromVariousMst(ref goodsUnitData);
                }
                else
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }

            return status;
        }

        /// <summary>
        /// JANコード検索(提供・ユーザー分)
        /// </summary>
        /// <param name="cndtn">商品検索条件</param>
        /// <param name="logicalMode">論理削除モード</param>
        /// <param name="goodsUnitData">商品連結結果データ</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>
        /// <br>UpdateNote : 2008.02.19 96012　日色 馨</br>
        /// <br>           : ローカルＤＢ参照対応</br>
        /// <br>UpdateNote : 2008.02.29 96012　日色 馨</br>
        /// <br>           : 提供分はローカルＤＢへのアクセスのみ</br>
        /// </remarks>
        public int ReadJanDB(GoodsCndtn cndtn, ConstantManagement.LogicalMode logicalMode, out GoodsUnitData goodsUnitData, out string msg)
        {
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
            //// 2008.02.19 96012 ローカルＤＢ参照対応 Begin
            //Boolean bCustomExists = false;
            //// 2008.02.19 96012 ローカルＤＢ参照対応 end
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            goodsUnitData = null;
            List<GoodsUnitData> goodsUnitDataList = null;

            try
            {
                if (this._iGoodsURelationDataDB == null)
                {
                    this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                }

                if (this._goodsURelationDataLcDB == null)
                {
                    // 2008.02.19 96012 ローカルＤＢ参照対応 Begin
                    //this._goodsURelationDataLcDB = new GoodsURelationDataDB();
                    this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();
                    // 2008.02.19 96012 ローカルＤＢ参照対応 end
                }

                GoodsCndtnWork cmnCdtnWork = CopyToGoodsCondtnWorkFromGoodsCondtn(cndtn);

                // 取得したい検索結果データクラスを設定
                CustomSerializeArrayList workList = new CustomSerializeArrayList();

                // 商品連結データクラス
                workList.Add(new GoodsUnitDataWork());

                // 初期値取得メソッドに移行
                // オブジェクト型に
                object retObj = workList;

                // 検索
                if (_isLocalDBRead)
                {
                    status = this._goodsURelationDataLcDB.Search(ref retObj, cmnCdtnWork, 0, logicalMode);
                }
                else
                {
                    status = this._iGoodsURelationDataDB.Search(ref retObj, cmnCdtnWork, 0, logicalMode);
                }

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        // 2008.02.19 96012 ローカルＤＢ参照対応 Begin
                        //case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                        //case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        // 2008.02.19 96012 ローカルＤＢ参照対応 end
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if (workList == null)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            //*******************************************************************************
                            // 商品連結データを取得する
                            //*******************************************************************************
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 DEL
                            //status = GetGoodsUnitDataWorkToUIdata(workList, out goodsUnitDataList);
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 DEL
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 ADD
                            List<Rate> rateList;    // 読み捨てる
                            status = GetGoodsUnitDataWorkToUIdata( workList, out goodsUnitDataList, out rateList );
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 ADD
                            switch (status)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        if (goodsUnitDataList == null || goodsUnitDataList.Count == 0)
                                            return (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

                                        goodsUnitData = goodsUnitDataList[0].Clone();

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    return status;
                                default:
                                    msg = "商品データ(ユーザー分)の取得でエラーが発生しました";
                                    return status;
                            }
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                            //// 2008.02.19 96012 ローカルＤＢ参照対応 Begin
                            //bCustomExists = true;
                            //// 2008.02.19 96012 ローカルＤＢ参照対応 end
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL
                            break;
                        }
                    // 2008.02.19 96012 ローカルＤＢ参照対応 Begin
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    // 2008.02.19 96012 ローカルＤＢ参照対応 end
                    default:
                        msg = "商品データ(ユーザー分)の取得に失敗しました";
                        break;
                }
                // 2008.02.19 96012 ローカルＤＢ参照対応 Begin
                if (this._iGoodsURelationDataDB == null)
                {
                    this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                }
                if (this._goodsURelationDataLcDB == null)
                {
                    // 2008.02.19 96012 ローカルＤＢ参照対応 Begin
                    //this._goodsURelationDataLcDB = new GoodsURelationDataDB();
                    this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();
                    // 2008.02.19 96012 ローカルＤＢ参照対応 end
                }

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
                # region //  2008/09/04 DEL
                //// 商品連結データクラス
                //workList.Add(new GoodsUnitDataWork());
                //// 初期値取得メソッドに移行
                //// オブジェクト型に
                //retObj = workList;
                //// 検索
                //// 2008.02.29 96012 提供分はローカルＤＢへのアクセスのみ Begin
                ////if (_isLocalDBRead)
                ////{
                ////    status = this._goodsRelationDataLcDB.Search(ref retObj, cmnCdtnWork, 0, logicalMode);
                ////}
                ////else
                ////{
                ////    status = this._iGoodsRelationDataDB.Search(ref retObj, cmnCdtnWork, 0, logicalMode);
                ////}
                //status = this._goodsRelationDataLcDB.Search(ref retObj, cmnCdtnWork, 0, logicalMode);
                //// 2008.02.29 96012 提供分はローカルＤＢへのアクセスのみ end
                //switch (status)
                //{
                //    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //        {
                //            workList = retObj as CustomSerializeArrayList;
                //            // 取得データを変換
                //            if (workList == null)
                //            {
                //                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                //                return status;
                //            }
                //            //*******************************************************************************
                //            // 商品連結データを取得する
                //            //*******************************************************************************
                //            status = GetGoodsUnitDataWorkToUIdata(workList, out goodsUnitDataList);
                //            switch (status)
                //            {
                //                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                //                    {
                //                        if (goodsUnitDataList == null || goodsUnitDataList.Count == 0)
                //                            return (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                //                        goodsUnitData = goodsUnitDataList[0].Clone();
                //                        break;
                //                    }
                //                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //                    return status;
                //                default:
                //                    msg = "商品データ(提供分)の取得でエラーが発生しました";
                //                    return status;
                //            }
                //            break;
                //        }
                //    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                //    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                //        if (bCustomExists)
                //        {
                //            msg = "該当する商品はみつかりませんでした";
                //        }
                //        break;
                //    default:
                //        msg = "商品データ(提供分)の取得に失敗しました";
                //        break;
                //}
                //// 2008.02.19 96012 ローカルＤＢ参照対応 end
                # endregion
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "JANコード検索で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
            }

            return status;
        }
        #endregion

        #region  ■ 部品検索(ユーザー + 提供)
        #region ○BLコード検索
        /// <summary>
        /// BLコード検索
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="partsInfoDataSetList">部品検索データセットリスト</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromBLCode(List<GoodsCndtn> cndtnList, out List<PartsInfoDataSet> partsInfoDataSetList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            // --- ADD m.suzuki 2011/05/18 ---------->>>>>
            foreach ( GoodsCndtn cndtn in cndtnList )
            {
                cndtn.BLGoodsDrCode = 0; // 枝番クリア
            }
            // --- ADD m.suzuki 2011/05/18 ----------<<<<<
            return this.SearchPartsFromBLCodeProc(cndtnList, out partsInfoDataSetList, out goodsUnitDataListList, out msg);
        }
        // --- ADD m.suzuki 2011/05/18 ---------->>>>>
        /// <summary>
        /// BLコード検索
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="partsInfoDataSetList">部品検索データセットリスト</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromBLCodeForAutoSearch( List<GoodsCndtn> cndtnList, out List<PartsInfoDataSet> partsInfoDataSetList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg )
        {
            // UPD 2014/02/06 SCM仕掛一覧№10632対応 ----------------------------------------------------->>>>>
            //return this.SearchPartsFromBLCodeProc( cndtnList, out partsInfoDataSetList, out goodsUnitDataListList, out msg );
            return this.SearchPartsFromBLCodeForAutoSearchProc(cndtnList, out partsInfoDataSetList, out goodsUnitDataListList, out msg);
            // UPD 2014/02/06 SCM仕掛一覧№10632対応 -----------------------------------------------------<<<<<
        }
        // --- ADD m.suzuki 2011/05/18 ----------<<<<<

        /// <summary>
        /// BLコード検索
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="partsInfoDataSetList">部品検索データセットリスト</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchPartsFromBLCodeProc(List<GoodsCndtn> cndtnList, out List<PartsInfoDataSet> partsInfoDataSetList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            PartsInfoDataSet partsInfoDataSet;
            List<GoodsUnitData> goodsUnitDataList;
            partsInfoDataSetList = new List<PartsInfoDataSet>();
            goodsUnitDataListList = new List<List<GoodsUnitData>>();
            msg = string.Empty;

            foreach (GoodsCndtn goodsCndtn in cndtnList)
            {
                status = this.SearchPartsFromBLCodeProc(goodsCndtn, out partsInfoDataSet, out goodsUnitDataList, out msg);
                switch ((ConstantManagement.MethodResult)status)
                {
                    case ConstantManagement.MethodResult.ctFNC_ERROR:
                        partsInfoDataSetList.Clear();
                        goodsUnitDataListList.Clear();
                        return status;
                    case ConstantManagement.MethodResult.ctFNC_NORMAL:
                        // 2008.10.29 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                        //partsInfoDataSetList.Add(partsInfoDataSet);
                        partsInfoDataSetList.Add((PartsInfoDataSet)partsInfoDataSet.Copy());
                        // 2008.10.29 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                        goodsUnitDataListList.Add(goodsUnitDataList);
                        break;
                    case ConstantManagement.MethodResult.ctFNC_NO_RETURN:
                        break;
                }
            }
            return status;
        }
        
        // ADD 2014/02/06 SCM仕掛一覧№10632対応 ----------------------------------------------------->>>>>
        /// <summary>
        /// BLコード検索
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="partsInfoDataSetList">部品検索データセットリスト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchPartsFromBLCodeForAutoSearchProc(List<GoodsCndtn> cndtnList, out List<PartsInfoDataSet> partsInfoDataSetList, out List<List<GoodsUnitData>> goodsUnitDataList, out string msg)
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            partsInfoDataSetList = new List<PartsInfoDataSet>();
            goodsUnitDataList = new List<List<GoodsUnitData>>();
            msg = string.Empty;

            //-------------------------------------------------------------------------
            // 抽出条件設定
            //-------------------------------------------------------------------------
            List<PartsSearchUIData> partsSearchUIDataList;
            this.SettingPartsSearchUIData(cndtnList, SearchPartsType.BLCode, out partsSearchUIDataList);

            //-----------------------------------------------------------------------------
            // 車両情報設定(車両情報(CarInfo)を設定すると自動でBLコード情報(BLInfo)が設定される)
            //-----------------------------------------------------------------------------
            // BLコード情報リスト生成
            List<int> blCodeList = new List<int>();
            foreach (GoodsCndtn cndtn in cndtnList)
            {
                blCodeList.Add(cndtn.BLGoodsCode);
            }
            this._PartsSearchController.SetCarInfo(cndtnList[0].SearchCarInfo, blCodeList);


            //-------------------------------------------------------------------------
            // 部品検索
            //-------------------------------------------------------------------------
            GoodsAcs.LogWrite("▼▼ＢＬコード検索　開始");
            status = this.SearchParts(cndtnList, partsSearchUIDataList, out partsInfoDataSetList, out msg);
            GoodsAcs.LogWrite("▲▲ＢＬコード検索　終了");

            //-------------------------------------------------------------------------
            // 商品連結データオブジェクトリスト変換
            //-------------------------------------------------------------------------
            GoodsAcs.LogWrite("▼▼商品連結データオブジェクトリスト変換　開始");
            foreach (PartsInfoDataSet partsInfoDataSet in partsInfoDataSetList)
            {
                List<GoodsUnitData> goodsUnitDataListTemp = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));
                goodsUnitDataList.Add(goodsUnitDataListTemp);
            }
            GoodsAcs.LogWrite("▲▲商品連結データオブジェクトリスト変換　終了");

#if false
            //-------------------------------------------------------------------------
            // 商品連結データ不足情報設定
            //-------------------------------------------------------------------------
            GoodsAcs.LogWrite("▼▼商品連結データ不足情報設定　開始");
            this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
            GoodsAcs.LogWrite("▲▲商品連結データ不足情報設定　終了");
#endif

            return status;
        }
        // ADD 2014/02/06 SCM仕掛一覧№10632対応 -----------------------------------------------------<<<<<

        /// <summary>
        /// BLコード検索
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromBLCode(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            // --- ADD m.suzuki 2011/05/18 ---------->>>>>
            cndtn.BLGoodsDrCode = 0; // 枝番クリア
            // --- ADD m.suzuki 2011/05/18 ----------<<<<<
            return this.SearchPartsFromBLCodeProc(cndtn, out partsInfoDataSet, out goodsUnitDataList, out msg);
        }
        // --- ADD m.suzuki 2011/05/18 ---------->>>>>
        /// <summary>
        /// BLコード検索
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromBLCodeForAutoSearch( GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg )
        {
            return this.SearchPartsFromBLCodeProc( cndtn, out partsInfoDataSet, out goodsUnitDataList, out msg );
        }
        // --- ADD m.suzuki 2011/05/18 ----------<<<<<
        /// <summary>
        /// BLコード検索
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchPartsFromBLCodeProc(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            partsInfoDataSet = null;
            msg = string.Empty;
            ConstantManagement.MethodResult retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;

            //-------------------------------------------------------------------------
            // 抽出条件設定
            //-------------------------------------------------------------------------
            PartsSearchUIData partsSearchUIData;
            this.SettingPartsSearchUIData(cndtn, SearchPartsType.BLCode, out partsSearchUIData);

            //-----------------------------------------------------------------------------
            // 車両情報設定(車両情報(CarInfo)を設定すると自動でBLコード情報(BLInfo)が設定される)
            //-----------------------------------------------------------------------------
            // --- UPD m.suzuki 2010/04/28 ---------->>>>>
            //this._PartsSearchController.CarInfo = cndtn.SearchCarInfo;
            this._PartsSearchController.SetCarInfo( cndtn.SearchCarInfo, cndtn.BLGoodsCode );
            // --- UPD m.suzuki 2010/04/28 ----------<<<<<


            //-------------------------------------------------------------------------
            // 部品検索
            //-------------------------------------------------------------------------
            GoodsAcs.LogWrite("▼▼ＢＬコード検索　開始");
            int ret = this.SearchParts(cndtn, partsSearchUIData, out partsInfoDataSet, out msg);
            GoodsAcs.LogWrite("▲▲ＢＬコード検索　終了");

            //-------------------------------------------------------------------------
            // 商品連結データオブジェクトリスト変換
            //-------------------------------------------------------------------------
            GoodsAcs.LogWrite("▼▼商品連結データオブジェクトリスト変換　開始");
            goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));
            GoodsAcs.LogWrite("▲▲商品連結データオブジェクトリスト変換　終了");

#if false
            //-------------------------------------------------------------------------
            // 商品連結データ不足情報設定
            //-------------------------------------------------------------------------
            GoodsAcs.LogWrite("▼▼商品連結データ不足情報設定　開始");
            this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
            GoodsAcs.LogWrite("▲▲商品連結データ不足情報設定　終了");
#endif

            //-------------------------------------------------------------------------
            // 戻り値設定
            //-------------------------------------------------------------------------
            switch (ret)
            {
                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NORMAL;
                    break;
                default:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
            }

            return (int)retMethod;
        }
        #endregion

        #region ○品番検索(結合検索有り)
        /// <summary>
        /// 品番検索(結合検索有り)
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="partsInfoDataSetList">部品検索データセット</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromGoodsNo(List<GoodsCndtn> cndtnList, out List<PartsInfoDataSet> partsInfoDataSetList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            return this.SearchPartsFromGoodsNoProc(cndtnList, out partsInfoDataSetList, out goodsUnitDataListList, out msg);
        }

        /// <summary>
        /// 品番検索(結合検索有り)
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="partsInfoDataSetList">部品検索データセット</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchPartsFromGoodsNoProc(List<GoodsCndtn> cndtnList, out List<PartsInfoDataSet> partsInfoDataSetList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            PartsInfoDataSet partsInfoDataSet;
            List<GoodsUnitData> goodsUnitDataList;
            partsInfoDataSetList = new List<PartsInfoDataSet>();
            goodsUnitDataListList = new List<List<GoodsUnitData>>();
            msg = string.Empty;

            foreach (GoodsCndtn goodsCndtn in cndtnList)
            {
                status = this.SearchPartsFromGoodsNoProc(goodsCndtn, out partsInfoDataSet, out goodsUnitDataList, out msg);
                switch ((ConstantManagement.MethodResult)status)
                {
                    case ConstantManagement.MethodResult.ctFNC_CANCEL:
                        break;
                    case ConstantManagement.MethodResult.ctFNC_ERROR:
                        partsInfoDataSetList.Clear();
                        goodsUnitDataListList.Clear();
                        return status;
                    case ConstantManagement.MethodResult.ctFNC_NORMAL:
                        // 2008.10.29 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                        //partsInfoDataSetList.Add(partsInfoDataSet);
                        partsInfoDataSetList.Add((PartsInfoDataSet)partsInfoDataSet.Copy());
                        // 2008.10.29 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                        goodsUnitDataListList.Add(goodsUnitDataList);
                        break;
                    case ConstantManagement.MethodResult.ctFNC_NO_RETURN:
                        break;
                }
            }
            return status;
        }

        /// <summary>
        /// 品番検索(結合検索有り)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromGoodsNo(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchPartsFromGoodsNoProc(cndtn, out partsInfoDataSet, out goodsUnitDataList, out msg);
        }

        /// <summary>
        /// 品番検索(結合検索有り)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchPartsFromGoodsNoProc(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            GoodsAcs.LogWrite("▼▼▼▼品番検索メイン　開始");

            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            partsInfoDataSet = null;
            msg = string.Empty;
            DialogResult retDialog = DialogResult.None;
            ConstantManagement.MethodResult retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;

            //-------------------------------------------------------------------------
            // 抽出条件設定
            //-------------------------------------------------------------------------
            PartsSearchUIData partsSearchUIData;
            this.SettingPartsSearchUIData(cndtn, SearchPartsType.GoodsNo, out partsSearchUIData);

            //-------------------------------------------------------------------------
            // 部品検索
            //-------------------------------------------------------------------------
            GoodsAcs.LogWrite("▼品番検索　開始");
            int ret = this.SearchParts(cndtn, partsSearchUIData, out partsInfoDataSet, out msg);
            GoodsAcs.LogWrite("▲品番検索　終了");

            //-------------------------------------------------------------------------
            // 戻り値補正
            //-------------------------------------------------------------------------
            if (partsInfoDataSet.UsrGoodsInfo.Count > 0) retDialog = DialogResult.OK;

            //-------------------------------------------------------------------------
            // 商品連結データオブジェクトリスト変換
            //-------------------------------------------------------------------------
            GoodsAcs.LogWrite("▼商品連結データオブジェクトリスト　開始");
            goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));
            GoodsAcs.LogWrite("▲商品連結データオブジェクトリスト　終了");

#if false
            //-------------------------------------------------------------------------
            // 商品連結データ不足情報設定
            //-------------------------------------------------------------------------
            GoodsAcs.LogWrite("▼商品連結データ不足情報設定　開始");
            this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
            GoodsAcs.LogWrite("▲商品連結データ不足情報設定　終了");
#endif

            //-------------------------------------------------------------------------
            // 戻り値設定
            //-------------------------------------------------------------------------
            switch (retDialog)
            {
                case DialogResult.Cancel:
                    retMethod = ConstantManagement.MethodResult.ctFNC_CANCEL;
                    break;
                case DialogResult.None:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                case DialogResult.OK:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NORMAL;
                    break;
                default:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
            }

            GoodsAcs.LogWrite("▲▲▲▲品番検索メイン　終了");

            return (int)retMethod;
        }
        #endregion

        #region ○品番検索(結合検索有り完全一致)
        /// <summary>
        /// 品番検索(結合検索有り完全一致)
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="partsInfoDataSetList">部品検索データセット</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromGoodsNoWholeWord(List<GoodsCndtn> cndtnList, out List<PartsInfoDataSet> partsInfoDataSetList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            return this.SearchPartsFromGoodsNoWholeWordProc(cndtnList, true, out partsInfoDataSetList, out goodsUnitDataListList, out msg);
        }

        // ADD 2014/02/06 SCM仕掛一覧№10632対応 ------------------------------------------------->>>>>
        /// <summary>
        /// 品番検索(結合検索有り完全一致)
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="samePartsNoWindowDiv">同一品番ウインドウ表示区分(true:表示あり,false:表示なし)</param>
        /// <param name="partsInfoDataSetList">部品検索データセット</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromGoodsNoWholeWord(List<GoodsCndtn> cndtnList, bool samePartsNoWindowDiv, out List<PartsInfoDataSet> partsInfoDataSetList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            return this.SearchPartsFromGoodsNoWholeWordForAutoSearchProc(cndtnList, samePartsNoWindowDiv, out partsInfoDataSetList, out goodsUnitDataListList, out msg);
        }
        // ADD 2014/02/06 SCM仕掛一覧№10632対応 -------------------------------------------------<<<<<

        /// <summary>
        /// 品番検索(結合検索有り完全一致)
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="samePartsNoWindowDiv">同一品番ウインドウ表示区分(true:表示あり,false:表示なし)</param>
        /// <param name="partsInfoDataSetList">部品検索データセット</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchPartsFromGoodsNoWholeWordProc(List<GoodsCndtn> cndtnList, bool samePartsNoWindowDiv, out List<PartsInfoDataSet> partsInfoDataSetList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            PartsInfoDataSet partsInfoDataSet;
            List<GoodsUnitData> goodsUnitDataList;
            partsInfoDataSetList = new List<PartsInfoDataSet>();
            goodsUnitDataListList = new List<List<GoodsUnitData>>();
            msg = string.Empty;

            foreach (GoodsCndtn goodsCndtn in cndtnList)
            {
                status = this.SearchPartsFromGoodsNoWholeWordProc(goodsCndtn, samePartsNoWindowDiv, out partsInfoDataSet, out goodsUnitDataList, out msg);
                switch ((ConstantManagement.MethodResult)status)
                {
                    case ConstantManagement.MethodResult.ctFNC_CANCEL:
                        break;
                    case ConstantManagement.MethodResult.ctFNC_ERROR:
                        partsInfoDataSetList.Clear();
                        goodsUnitDataListList.Clear();
                        return status;
                    case ConstantManagement.MethodResult.ctFNC_NORMAL:
                        // 2008.10.29 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                        //partsInfoDataSetList.Add(partsInfoDataSet);
                        partsInfoDataSetList.Add((PartsInfoDataSet)partsInfoDataSet.Copy());
                        // 2008.10.29 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                        goodsUnitDataListList.Add(goodsUnitDataList);
                        break;
                    case ConstantManagement.MethodResult.ctFNC_NO_RETURN:
                        break;
                }
            }
            return status;
        }

        // ADD 2014/02/06 SCM仕掛一覧№10632対応 ------------------------------------------------->>>>>
        /// <summary>
        /// 品番検索(結合検索有り完全一致)
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="samePartsNoWindowDiv">同一品番ウインドウ表示区分(true:表示あり,false:表示なし)</param>
        /// <param name="partsInfoDataSetList">部品検索データセット</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchPartsFromGoodsNoWholeWordForAutoSearchProc(List<GoodsCndtn> cndtnList, bool samePartsNoWindowDiv, out List<PartsInfoDataSet> partsInfoDataSetList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            partsInfoDataSetList = null;
            msg = string.Empty;
            DialogResult retDialog = DialogResult.None;
            ConstantManagement.MethodResult retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>();
            List<GoodsUnitData> goodsUnitDataList = new List<GoodsUnitData>();
            goodsUnitDataListList = new List<List<GoodsUnitData>>();

            //-------------------------------------------------------------------------
            // 抽出条件設定
            //-------------------------------------------------------------------------
            List<PartsSearchUIData> partsSearchUIDataList;
            this.SettingPartsSearchUIData(cndtnList, SearchPartsType.GoodsNoWholeWord, out partsSearchUIDataList);

            //-------------------------------------------------------------------------
            // 部品検索
            //-------------------------------------------------------------------------
            int ret = this.SearchParts(cndtnList, partsSearchUIDataList, out partsInfoDataSetList, out msg);

            if (ret == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                for (int i = 0; i < cndtnList.Count; i++)
                {
                    if (samePartsNoWindowDiv == true)
                    {
                        //-------------------------------------------------------------------------
                        // 優先倉庫設定
                        //-------------------------------------------------------------------------
                        partsInfoDataSetList[i].ListPriorWarehouse = cndtnList[i].ListPriorWarehouse;

                        //-------------------------------------------------------------------------
                        // 品名表示区分設定
                        //-------------------------------------------------------------------------
                        if (_salesTtlSt != null) partsInfoDataSetList[i].PartsNameDspDivCd = _salesTtlSt.PartsNameDspDivCd;

                        //-------------------------------------------------------------------------
                        // 価格計算(同一品番選択ウィンドウ用)用のデリゲート追加
                        //-------------------------------------------------------------------------
                        this._goodsCndtn = cndtnList[i];
                        if (partsInfoDataSetList[i].CalculatePrice == null)
                        {
                            partsInfoDataSetList[i].CalculatePrice += new PartsInfoDataSet.CalculatePriceCallback(this.CalcPrice);
                        }

                        //-------------------------------------------------------------------------
                        // 価格適用日
                        //-------------------------------------------------------------------------
                        partsInfoDataSetList[i].PriceApplyDate = cndtnList[i].PriceApplyDate;

                        //-------------------------------------------------------------------------
                        // 同一品番検索選択UI
                        //-------------------------------------------------------------------------
                        retDialog = SelectionSamePartsNo.ShowDialog(this._owner, partsInfoDataSetList[i], 0); // Mode 0:品番検索 1:品番結合検索

                        //-------------------------------------------------------------------------
                        // 商品連結データオブジェクトリスト変換
                        //-------------------------------------------------------------------------
                        goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSetList[i].GetGoodsList(true).ToArray(typeof(GoodsUnitData)));
                    }
                    else
                    {
                        //-------------------------------------------------------------------------
                        // 戻り値補正
                        //-------------------------------------------------------------------------
                        if (partsInfoDataSetList[i].UsrGoodsInfo.Count > 0) retDialog = DialogResult.OK;

                        //-------------------------------------------------------------------------
                        // 商品連結データオブジェクトリスト変換
                        //-------------------------------------------------------------------------
                        goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSetList[i].GetGoodsList(false).ToArray(typeof(GoodsUnitData)));
                    }

                    //-------------------------------------------------------------------------
                    // 商品連結データ不足情報設定
                    //-------------------------------------------------------------------------
                    this.SettingGoodsUnitDataListFromVariousMst(cndtnList[i], ref goodsUnitDataList);
                    goodsUnitDataListList.Add(goodsUnitDataList);
                }
            }

            //-------------------------------------------------------------------------
            // 戻り値設定
            //-------------------------------------------------------------------------
            switch (retDialog)
            {
                case DialogResult.Cancel:
                    retMethod = ConstantManagement.MethodResult.ctFNC_CANCEL;
                    break;
                case DialogResult.None:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                case DialogResult.OK:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NORMAL;
                    break;
                default:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
            }

            return (int)retMethod;
        }
        // ADD 2014/02/06 SCM仕掛一覧№10632対応 -------------------------------------------------<<<<<

        /// <summary>
        /// 品番検索(結合検索有り完全一致)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromGoodsNoWholeWord(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchPartsFromGoodsNoWholeWordProc(cndtn, true, out partsInfoDataSet, out goodsUnitDataList, out msg);
        }

        /// <summary>
        /// 品番検索(結合検索有り完全一致)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="samePartsNoWindowDiv">同一品番ウインドウ表示区分(true:表示あり,false:表示なし)</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromGoodsNoWholeWord(GoodsCndtn cndtn, bool samePartsNoWindowDiv, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchPartsFromGoodsNoWholeWordProc(cndtn, samePartsNoWindowDiv, out partsInfoDataSet, out goodsUnitDataList, out msg);
        }

        /// <summary>
        /// 品番検索(結合検索有り完全一致)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="samePartsNoWindowDiv">同一品番ウインドウ表示区分(true:表示あり,false:表示なし)</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchPartsFromGoodsNoWholeWordProc(GoodsCndtn cndtn, bool samePartsNoWindowDiv, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            partsInfoDataSet = null;
            msg = string.Empty;
            DialogResult retDialog = DialogResult.None;
            ConstantManagement.MethodResult retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>(); // 2008.10.02
            goodsUnitDataList = new List<GoodsUnitData>();

            //-------------------------------------------------------------------------
            // 抽出条件設定
            //-------------------------------------------------------------------------
            PartsSearchUIData partsSearchUIData;
            this.SettingPartsSearchUIData(cndtn, SearchPartsType.GoodsNoWholeWord, out partsSearchUIData);

            //-------------------------------------------------------------------------
            // 部品検索
            //-------------------------------------------------------------------------
            int ret = this.SearchParts(cndtn, partsSearchUIData, out partsInfoDataSet, out msg);

            if (ret == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if (samePartsNoWindowDiv == true)
                {
                    // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //// 2008.10.02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //if (partsInfoDataSet.UsrGoodsInfo.Count >= 1)
                    //{
                    //    //-------------------------------------------------------------------------
                    //    // 商品連結データオブジェクトリスト変換
                    //    //-------------------------------------------------------------------------
                    //    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));

                    //    // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //    //// 2008.11.04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //    ////-------------------------------------------------------------------------
                    //    //// 商品連結データ不足情報設定
                    //    ////-------------------------------------------------------------------------
                    //    //this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
                    //    //// 2008.11.04 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    //    //-------------------------------------------------------------------------
                    //    // 商品連結データ不足情報設定
                    //    //-------------------------------------------------------------------------
                    //    this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList, 1);
                    //    // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    //    //-----------------------------------------------------------------------------
                    //    // 単価情報取得
                    //    //-----------------------------------------------------------------------------
                    //    unitPriceCalcRetList = this.CalclationUnitPrice(cndtn, goodsUnitDataList);

                    //    //-----------------------------------------------------------------------------
                    //    // 単価情報を部品検索データセットへ反映
                    //    //-----------------------------------------------------------------------------
                    //    if ((unitPriceCalcRetList != null) && (unitPriceCalcRetList.Count != 0)) partsInfoDataSet.SetUnitPriceInfo(unitPriceCalcRetList);
                    //}
                    //// 2008.10.02 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2008.11.05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //-------------------------------------------------------------------------
                    // 優先倉庫設定
                    //-------------------------------------------------------------------------
                    partsInfoDataSet.ListPriorWarehouse = cndtn.ListPriorWarehouse;
                    // 2008.11.05 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //-------------------------------------------------------------------------
                    // 品名表示区分設定
                    //-------------------------------------------------------------------------
                    if (_salesTtlSt != null) partsInfoDataSet.PartsNameDspDivCd = _salesTtlSt.PartsNameDspDivCd;
                    // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //-------------------------------------------------------------------------
                    // 価格計算(同一品番選択ウィンドウ用)用のデリゲート追加
                    //-------------------------------------------------------------------------
                    this._goodsCndtn = cndtn;
                    if (partsInfoDataSet.CalculatePrice == null)
                    {
                        partsInfoDataSet.CalculatePrice += new PartsInfoDataSet.CalculatePriceCallback(this.CalcPrice);
                    }

                    //-------------------------------------------------------------------------
                    // 価格適用日
                    //-------------------------------------------------------------------------
                    partsInfoDataSet.PriceApplyDate = cndtn.PriceApplyDate;
                    // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2008.10.08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    ////-------------------------------------------------------------------------
                    //// 同一品番検索選択UI
                    ////-------------------------------------------------------------------------
                    //if (partsInfoDataSet.UsrGoodsInfo.Count > 1)
                    //{
                    //    retDialog = SelectionSamePartsNo.ShowDialog(partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                    //}
                    //else if (partsInfoDataSet.UsrGoodsInfo.Count == 1)
                    //{
                    //    partsInfoDataSet.UsrGoodsInfo[0].SelectionState = true;
                    //    retDialog = DialogResult.OK;
                    //}

                    // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    ////-------------------------------------------------------------------------
                    //// 同一品番検索選択UI
                    ////-------------------------------------------------------------------------
                    //retDialog = SelectionSamePartsNo.ShowDialog(partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                    //-------------------------------------------------------------------------
                    // 同一品番検索選択UI
                    //-------------------------------------------------------------------------
                    retDialog = SelectionSamePartsNo.ShowDialog(this._owner, partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                    // 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    // 2008.10.08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    //-------------------------------------------------------------------------
                    // 商品連結データオブジェクトリスト変換
                    //-------------------------------------------------------------------------
                    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(true).ToArray(typeof(GoodsUnitData)));
                }
                else
                {
                    //-------------------------------------------------------------------------
                    // 戻り値補正
                    //-------------------------------------------------------------------------
                    if (partsInfoDataSet.UsrGoodsInfo.Count > 0) retDialog = DialogResult.OK;

                    //-------------------------------------------------------------------------
                    // 商品連結データオブジェクトリスト変換
                    //-------------------------------------------------------------------------
                    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));
                }

                //-------------------------------------------------------------------------
                // 商品連結データ不足情報設定
                //-------------------------------------------------------------------------
                this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
            }

            //-------------------------------------------------------------------------
            // 戻り値設定
            //-------------------------------------------------------------------------
            switch (retDialog)
            {
                case DialogResult.Cancel:
                    retMethod = ConstantManagement.MethodResult.ctFNC_CANCEL;
                    break;
                case DialogResult.None:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                case DialogResult.OK:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NORMAL;
                    break;
                default:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
            }
            return (int)retMethod;
        }
        #endregion

        #region ○品番検索(結合検索無し)
        /// <summary>
        /// 品番検索(結合検索無し)
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromGoodsNoNonVariousSearch(List<GoodsCndtn> cndtnList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            return this.SearchPartsFromGoodsNoNonVariousSearchProc(cndtnList, out goodsUnitDataListList, out msg);
        }

        /// <summary>
        /// 品番検索(結合検索無し)
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        /// <remarks>
        /// <br>Update Note: 2013/02/27 zhujc</br>
        /// <br>管理番号   : 10806793-00　2013/03/13配信分</br>　
        /// <br>           : Redmine#34858 在庫品仕入入力</br>
        /// </remarks>
        private int SearchPartsFromGoodsNoNonVariousSearchProc(List<GoodsCndtn> cndtnList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<GoodsUnitData> goodsUnitDataList;
            goodsUnitDataListList = new List<List<GoodsUnitData>>();
            msg = string.Empty;

            foreach (GoodsCndtn goodsCndtn in cndtnList)
            {
                //status = this.SearchPartsFromGoodsNoNonVariousSearchProc(goodsCndtn, true, null, out goodsUnitDataList, out msg); //DEL zhujc on 2013/02/27 on for Redmine#34858
                status = this.SearchPartsFromGoodsNoNonVariousSearchProc(goodsCndtn, true, null, out goodsUnitDataList, out msg, false); //ADD zhujc on 2013/02/27 for Redmine#34858
                switch ((ConstantManagement.MethodResult)status)
                {
                    case ConstantManagement.MethodResult.ctFNC_CANCEL:
                        break;
                    case ConstantManagement.MethodResult.ctFNC_ERROR:
                        goodsUnitDataListList.Clear();
                        return status;
                    case ConstantManagement.MethodResult.ctFNC_NORMAL:
                        goodsUnitDataListList.Add(goodsUnitDataList);
                        break;
                    case ConstantManagement.MethodResult.ctFNC_NO_RETURN:
                        break;
                }
            }
            return status;
        }

        /// <summary>
        /// 品番検索(結合検索無し)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        /// <remarks>
        /// <br>Update Note: 2013/02/27 zhujc</br>
        /// <br>管理番号   : 10806793-00　2013/03/13配信分</br>　
        /// <br>           : Redmine#34858 在庫品仕入入力</br>
        /// </remarks>
        public int SearchPartsFromGoodsNoNonVariousSearch(GoodsCndtn cndtn, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            //return this.SearchPartsFromGoodsNoNonVariousSearchProc(cndtn, true, null, out goodsUnitDataList, out msg); //DEL zhujc on 2013/02/27 for Redmine#34858
            return this.SearchPartsFromGoodsNoNonVariousSearchProc(cndtn, true, null, out goodsUnitDataList, out msg, false); //ADD zhujc on 2013/02/27 for Redmine#34858
        }

        //ADD zhujc on 2013/02/27 for Redmine#34858------>>>>>>
        /// <summary>
        /// 品番検索(結合検索無し)_在庫仕入入力用
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <param name="delCz">提供純正削除区分</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromGoodsNoNonVariousSearch(GoodsCndtn cndtn, out List<GoodsUnitData> goodsUnitDataList, out string msg, bool delCz)
        {
            return this.SearchPartsFromGoodsNoNonVariousSearchProc(cndtn, true, null, out goodsUnitDataList, out msg, true);
        }
        //ADD zhujc on 2013/02/27 for Redmine#34858------<<<<<<

        /// <summary>
        /// 品番検索(結合検索無し)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="samePartsNoWindowDiv">同一品番ウインドウ表示区分(true:表示あり,false:表示なし)</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        /// <remarks>
        /// <br>Update Note: 2013/02/27 zhujc</br>
        /// <br>管理番号   : 10806793-00　2013/03/13配信分</br>　
        /// <br>           : Redmine#34858 在庫品仕入入力</br>
        /// </remarks>
        public int SearchPartsFromGoodsNoNonVariousSearch(GoodsCndtn cndtn, bool samePartsNoWindowDiv, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            //return this.SearchPartsFromGoodsNoNonVariousSearchProc(cndtn, samePartsNoWindowDiv, null, out goodsUnitDataList, out msg); //DEL zhujc on 2013/02/27 for Redmine#34858
            return this.SearchPartsFromGoodsNoNonVariousSearchProc(cndtn, samePartsNoWindowDiv, null, out goodsUnitDataList, out msg, false); //ADD zhujc on 2013/02/27 for Redmine#34858
        }

        /// <summary>
        /// 品番検索(結合検索無し)
        /// </summary>
        /// <param name="cndtn">商品検索情報オブジェクト</param>
        /// <param name="samePartsNoWindowDiv">同一品番ウインドウ表示区分(true:表示あり,false:表示なし)</param>
        /// <param name="makerCodeList">メーカーコードリスト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        /// <remarks>
        /// <br>Update Note: 2013/02/27 zhujc</br>
        /// <br>管理番号   : 10806793-00　2013/03/13配信分</br>　
        /// <br>           : Redmine#34858 在庫品仕入入力</br>
        /// </remarks>
        public int SearchPartsFromGoodsNoNonVariousSearch(GoodsCndtn cndtn, bool samePartsNoWindowDiv, List<int> makerCodeList, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            //return this.SearchPartsFromGoodsNoNonVariousSearchProc(cndtn, samePartsNoWindowDiv, makerCodeList, out goodsUnitDataList, out msg);　//DEL zhujc on 2013/02/27 for Redmine#34858
            return this.SearchPartsFromGoodsNoNonVariousSearchProc(cndtn, samePartsNoWindowDiv, makerCodeList, out goodsUnitDataList, out msg, false); //ADD zhujc on 2013/02/27 for Redmine#34858
        }

        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
        /// <summary>
        /// 品番検索(結合検索無し) 自動回答処理専用
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="samePartsNoWindowDiv">同一品番ウインドウ表示区分(true:表示あり,false:表示なし)</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="partsInfoDataSet">部品情報データセット</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        /// <remarks>
        /// </remarks>
        public int SearchPartsFromGoodsNoNonVariousSearch(GoodsCndtn cndtn, bool samePartsNoWindowDiv, out List<GoodsUnitData> goodsUnitDataList, out PartsInfoDataSet partsInfoDataSet, out string msg)
        {
            return this.SearchPartsFromGoodsNoNonVariousSearchProc(cndtn, samePartsNoWindowDiv, null, out goodsUnitDataList, out partsInfoDataSet, out msg, false); 
        }
        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<


        /// <summary>
        /// 品番検索(結合検索無し)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="samePartsNoWindowDiv">同一品番ウインドウ表示区分(true:表示あり,false:表示なし)</param>
        /// <param name="makerCodeList">メーカーコードリスト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <param name="delCz">純正品番削除区分</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        /// <remarks>
        /// <br>Update Note: 2013/02/27 zhujc</br>
        /// <br>管理番号   : 10806793-00　2013/03/13配信分</br>　
        /// <br>           : Redmine#34858 在庫品仕入入力</br>
        /// </remarks>
        //private int SearchPartsFromGoodsNoNonVariousSearchProc(GoodsCndtn cndtn, bool samePartsNoWindowDiv, List<int> makerCodeList, out List<GoodsUnitData> goodsUnitDataList, out string msg) //DEL zhujc on 2013/02/27 for Redminr#34858
        private int SearchPartsFromGoodsNoNonVariousSearchProc(GoodsCndtn cndtn, bool samePartsNoWindowDiv, List<int> makerCodeList, out List<GoodsUnitData> goodsUnitDataList, out string msg, bool delCz) //ADD zhujc on 2013/02/27 for Redminr#34858
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            goodsUnitDataList = null;
            msg = string.Empty;
            DialogResult retDialog = DialogResult.None;
            ConstantManagement.MethodResult retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>(); // 2008.10.02
            goodsUnitDataList = new List<GoodsUnitData>();

            //-------------------------------------------------------------------------
            // 抽出条件設定
            //-------------------------------------------------------------------------
            PartsSearchUIData partsSearchUIData;
            this.SettingPartsSearchUIData(cndtn, SearchPartsType.GoodsNoNonVariousSearch, out partsSearchUIData);

            //-------------------------------------------------------------------------
            // 部品検索
            //-------------------------------------------------------------------------
            PartsInfoDataSet partsInfoDataSet;
            int ret = this.SearchParts(cndtn, partsSearchUIData, out partsInfoDataSet, out msg);
            // ADD zhujc on 2013/02/27 for Redminr#34858------>>>>>>>
            if (delCz)
            {
                if (partsInfoDataSet.UsrGoodsInfo.Count > 0)
                {
                    PartsInfoDataSet.UsrGoodsInfoRow[] array = new PartsInfoDataSet.UsrGoodsInfoRow[partsInfoDataSet.UsrGoodsInfo.Rows.Count];
                    partsInfoDataSet.UsrGoodsInfo.Rows.CopyTo(array,0);
                    foreach (PartsInfoDataSet.UsrGoodsInfoRow row in array)
                    {
                        if (row.OfferKubun == 3)
                        {
                            partsInfoDataSet.UsrGoodsInfo.RemoveUsrGoodsInfoRow(row);
                        }
                    }
                }
            }
            // ADD zhujc on 2013/02/27 for Redminr#34858 ------<<<<<<

            if (ret == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if (samePartsNoWindowDiv == true)
                {
                    // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //// 2008.10.02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //if (partsInfoDataSet.UsrGoodsInfo.Count >= 1)
                    //{
                    //    //-------------------------------------------------------------------------
                    //    // 商品連結データオブジェクトリスト変換
                    //    //-------------------------------------------------------------------------
                    //    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));

                    //    // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //    //// 2008.11.04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //    ////-------------------------------------------------------------------------
                    //    //// 商品連結データ不足情報設定
                    //    ////-------------------------------------------------------------------------
                    //    //this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
                    //    //// 2008.11.04 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    //    //-------------------------------------------------------------------------
                    //    // 商品連結データ不足情報設定
                    //    //-------------------------------------------------------------------------
                    //    this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList, 1);
                    //    // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    //    //-----------------------------------------------------------------------------
                    //    // 単価情報取得
                    //    //-----------------------------------------------------------------------------
                    //    unitPriceCalcRetList = this.CalclationUnitPrice(cndtn, goodsUnitDataList);

                    //    //-----------------------------------------------------------------------------
                    //    // 単価情報を部品検索データセットへ反映
                    //    //-----------------------------------------------------------------------------
                    //    if ((unitPriceCalcRetList != null) && (unitPriceCalcRetList.Count != 0)) partsInfoDataSet.SetUnitPriceInfo(unitPriceCalcRetList);
                    //}
                    //// 2008.10.02 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2008.11.05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //-------------------------------------------------------------------------
                    // 優先倉庫設定
                    //-------------------------------------------------------------------------
                    // --- UPD 2011/07/29 ---------->>>>>
                    //partsInfoDataSet.ListPriorWarehouse = cndtn.ListPriorWarehouse;
                    if (cndtn.ListPriorWarehouse != null)
                    {
                    partsInfoDataSet.ListPriorWarehouse = cndtn.ListPriorWarehouse;
                    }
                    else
                    {
                        List<string> warehouseList = new List<string>();
                        warehouseList = this.GetSectWarehouseCd();
                        partsInfoDataSet.ListPriorWarehouse = warehouseList;
                    }
                    // --- UPD 2011/07/29  ----------<<<<<
                    // 2008.11.05 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //-------------------------------------------------------------------------
                    // 品名表示区分設定
                    //-------------------------------------------------------------------------
                    if (_salesTtlSt != null) partsInfoDataSet.PartsNameDspDivCd = _salesTtlSt.PartsNameDspDivCd;
                    // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //-------------------------------------------------------------------------
                    // 価格計算(同一品番選択ウィンドウ用)用のデリゲート追加
                    //-------------------------------------------------------------------------
                    this._goodsCndtn = cndtn;
                    if (partsInfoDataSet.CalculatePrice == null)
                    {
                        partsInfoDataSet.CalculatePrice += new PartsInfoDataSet.CalculatePriceCallback(this.CalcPrice);
                    }

                    //-------------------------------------------------------------------------
                    // 価格適用日
                    //-------------------------------------------------------------------------
                    // --- UPD 2011/07/29 ---------->>>>>
                    //partsInfoDataSet.PriceApplyDate = cndtn.PriceApplyDate;
                    if (cndtn.PriceApplyDate == DateTime.MinValue)
                    {
                        partsInfoDataSet.PriceApplyDate = DateTime.Today;
                    }
                    else
                    {
                    partsInfoDataSet.PriceApplyDate = cndtn.PriceApplyDate;
                    }
                    // --- UPD 2011/07/29  ----------<<<<<
                    // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2008.10.08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    ////-------------------------------------------------------------------------
                    //// 同一品番検索選択UI
                    ////-------------------------------------------------------------------------
                    //if (partsInfoDataSet.UsrGoodsInfo.Count > 1)
                    //{
                    //    if (makerCodeList != null)
                    //    {
                    //        retDialog = SelectionSamePartsNo.ShowDialog(partsInfoDataSet, 0, makerCodeList); // Mode 0:品番検索 1:品番結合検索
                    //    }
                    //    else
                    //    {
                    //        retDialog = SelectionSamePartsNo.ShowDialog(partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                    //    }
                    //}
                    //else if ( partsInfoDataSet.UsrGoodsInfo.Count == 1 )
                    //{
                    //    partsInfoDataSet.UsrGoodsInfo[0].SelectionState = true;
                    //    retDialog = DialogResult.OK;
                    //}

                    // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    ////-------------------------------------------------------------------------
                    //// 同一品番検索選択UI
                    ////-------------------------------------------------------------------------
                    //if (makerCodeList != null)
                    //{
                    //    retDialog = SelectionSamePartsNo.ShowDialog(partsInfoDataSet, 0, makerCodeList); // Mode 0:品番検索 1:品番結合検索
                    //}
                    //else
                    //{
                    //    retDialog = SelectionSamePartsNo.ShowDialog(partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                    //}
                    //-------------------------------------------------------------------------
                    // 同一品番検索選択UI
                    //-------------------------------------------------------------------------
                    if (makerCodeList != null)
                    {
                        retDialog = SelectionSamePartsNo.ShowDialog(this._owner, partsInfoDataSet, 0, makerCodeList); // Mode 0:品番検索 1:品番結合検索
                    }
                    else
                    {
                        retDialog = SelectionSamePartsNo.ShowDialog(this._owner, partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                    }
                    // 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    // 2008.10.08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    //-------------------------------------------------------------------------
                    // 商品連結データオブジェクトリスト変換
                    //-------------------------------------------------------------------------
                    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(true).ToArray(typeof(GoodsUnitData)));

                }
                else
                {
                    //-------------------------------------------------------------------------
                    // 戻り値補正
                    //-------------------------------------------------------------------------
                    if (partsInfoDataSet.UsrGoodsInfo.Count > 0) retDialog = DialogResult.OK;

                    //-------------------------------------------------------------------------
                    // 商品連結データオブジェクトリスト変換
                    //-------------------------------------------------------------------------
                    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));
                }

                //-------------------------------------------------------------------------
                // 商品連結データ不足情報設定
                //-------------------------------------------------------------------------
                this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
            }

            //-------------------------------------------------------------------------
            // 戻り値設定
            //-------------------------------------------------------------------------
            switch (retDialog)
            {
                case DialogResult.Cancel:
                    retMethod = ConstantManagement.MethodResult.ctFNC_CANCEL;
                    break;
                case DialogResult.None:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                case DialogResult.OK:
                    if (goodsUnitDataList.Count > 0)
                        retMethod = ConstantManagement.MethodResult.ctFNC_NORMAL;
                    else // UOEで複数メーカを指定した場合、結果OKで件数0の場合があるのでチェック処理を行う。
                        retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                default:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
            }
            return (int)retMethod;
        }

        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
        /// <summary>
        /// 品番検索(結合検索無し) 自動回答処理専用
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="samePartsNoWindowDiv">同一品番ウインドウ表示区分(true:表示あり,false:表示なし)</param>
        /// <param name="makerCodeList">メーカーコードリスト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="partsInfoDataSet">部品情報データセット</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <param name="delCz">純正品番削除区分</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        /// <remarks>
        /// </remarks>
        private int SearchPartsFromGoodsNoNonVariousSearchProc(GoodsCndtn cndtn, bool samePartsNoWindowDiv, List<int> makerCodeList, out List<GoodsUnitData> goodsUnitDataList, out PartsInfoDataSet partsInfoDataSet, out string msg, bool delCz) 
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            goodsUnitDataList = null;
            partsInfoDataSet = null;
            msg = string.Empty;
            DialogResult retDialog = DialogResult.None;
            ConstantManagement.MethodResult retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>(); 
            goodsUnitDataList = new List<GoodsUnitData>();

            //-------------------------------------------------------------------------
            // 抽出条件設定
            //-------------------------------------------------------------------------
            PartsSearchUIData partsSearchUIData;
            this.SettingPartsSearchUIData(cndtn, SearchPartsType.GoodsNoNonVariousSearch, out partsSearchUIData);

            //-------------------------------------------------------------------------
            // 部品検索
            //-------------------------------------------------------------------------
            int ret = this.SearchParts(cndtn, partsSearchUIData, out partsInfoDataSet, out msg);
            if (delCz)
            {
                if (partsInfoDataSet.UsrGoodsInfo.Count > 0)
                {
                    PartsInfoDataSet.UsrGoodsInfoRow[] array = new PartsInfoDataSet.UsrGoodsInfoRow[partsInfoDataSet.UsrGoodsInfo.Rows.Count];
                    partsInfoDataSet.UsrGoodsInfo.Rows.CopyTo(array, 0);
                    foreach (PartsInfoDataSet.UsrGoodsInfoRow row in array)
                    {
                        if (row.OfferKubun == 3)
                        {
                            partsInfoDataSet.UsrGoodsInfo.RemoveUsrGoodsInfoRow(row);
                        }
                    }
                }
            }

            if (ret == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if (samePartsNoWindowDiv == true)
                {
                    //-------------------------------------------------------------------------
                    // 優先倉庫設定
                    //-------------------------------------------------------------------------
                    if (cndtn.ListPriorWarehouse != null)
                    {
                        partsInfoDataSet.ListPriorWarehouse = cndtn.ListPriorWarehouse;
                    }
                    else
                    {
                        List<string> warehouseList = new List<string>();
                        warehouseList = this.GetSectWarehouseCd();
                        partsInfoDataSet.ListPriorWarehouse = warehouseList;
                    }

                    //-------------------------------------------------------------------------
                    // 品名表示区分設定
                    //-------------------------------------------------------------------------
                    if (_salesTtlSt != null) partsInfoDataSet.PartsNameDspDivCd = _salesTtlSt.PartsNameDspDivCd;

                    //-------------------------------------------------------------------------
                    // 価格計算(同一品番選択ウィンドウ用)用のデリゲート追加
                    //-------------------------------------------------------------------------
                    this._goodsCndtn = cndtn;
                    if (partsInfoDataSet.CalculatePrice == null)
                    {
                        partsInfoDataSet.CalculatePrice += new PartsInfoDataSet.CalculatePriceCallback(this.CalcPrice);
                    }

                    //-------------------------------------------------------------------------
                    // 価格適用日
                    //-------------------------------------------------------------------------
                    if (cndtn.PriceApplyDate == DateTime.MinValue)
                    {
                        partsInfoDataSet.PriceApplyDate = DateTime.Today;
                    }
                    else
                    {
                        partsInfoDataSet.PriceApplyDate = cndtn.PriceApplyDate;
                    }
                    //-------------------------------------------------------------------------
                    // 同一品番検索選択UI
                    //-------------------------------------------------------------------------
                    if (makerCodeList != null)
                    {
                        retDialog = SelectionSamePartsNo.ShowDialog(this._owner, partsInfoDataSet, 0, makerCodeList); // Mode 0:品番検索 1:品番結合検索
                    }
                    else
                    {
                        retDialog = SelectionSamePartsNo.ShowDialog(this._owner, partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                    }

                    //-------------------------------------------------------------------------
                    // 商品連結データオブジェクトリスト変換
                    //-------------------------------------------------------------------------
                    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(true).ToArray(typeof(GoodsUnitData)));

                }
                else
                {
                    //-------------------------------------------------------------------------
                    // 戻り値補正
                    //-------------------------------------------------------------------------
                    if (partsInfoDataSet.UsrGoodsInfo.Count > 0) retDialog = DialogResult.OK;

                    //-------------------------------------------------------------------------
                    // 商品連結データオブジェクトリスト変換
                    //-------------------------------------------------------------------------
                    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));
                }

                //-------------------------------------------------------------------------
                // 商品連結データ不足情報設定
                //-------------------------------------------------------------------------
                this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
            }

            //-------------------------------------------------------------------------
            // 戻り値設定
            //-------------------------------------------------------------------------
            switch (retDialog)
            {
                case DialogResult.Cancel:
                    retMethod = ConstantManagement.MethodResult.ctFNC_CANCEL;
                    break;
                case DialogResult.None:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                case DialogResult.OK:
                    if (goodsUnitDataList.Count > 0)
                        retMethod = ConstantManagement.MethodResult.ctFNC_NORMAL;
                    else // UOEで複数メーカを指定した場合、結果OKで件数0の場合があるのでチェック処理を行う。
                        retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                default:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
            }
            return (int)retMethod;
        }
        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<

        #endregion

        #region ○品番検索(結合検索無し完全一致)
        /// <summary>
        /// 品番検索(結合検索無し完全一致)
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromGoodsNoNonVariousSearchWholeWord(List<GoodsCndtn> cndtnList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            return this.SearchPartsFromGoodsNoNonVariousSearchWholeWordProc(cndtnList, out goodsUnitDataListList, out msg);
        }

        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
        /// <summary>
        /// 品番検索(結合検索無し完全一致) 売上伝票入力専用
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="partsInfoDataSet">部品情報データセット</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromGoodsNoNonVariousSearchWholeWord(List<GoodsCndtn> cndtnList, out List<List<GoodsUnitData>> goodsUnitDataListList, out PartsInfoDataSet partsInfoDataSet, out string msg)
        {
            return this.SearchPartsFromGoodsNoNonVariousSearchWholeWordProc(cndtnList, out goodsUnitDataListList, out partsInfoDataSet, out msg);
        }
        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<

        /// <summary>
        /// 品番検索(結合検索無し完全一致)
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchPartsFromGoodsNoNonVariousSearchWholeWordProc(List<GoodsCndtn> cndtnList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            // 2009.01.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            //List<GoodsUnitData> goodsUnitDataList;
            //goodsUnitDataListList = new List<List<GoodsUnitData>>();
            //msg = string.Empty;

            //foreach (GoodsCndtn goodsCndtn in cndtnList)
            //{
            //    status = this.SearchPartsFromGoodsNoNonVariousSearchWholeWordProc(goodsCndtn, true, out goodsUnitDataList, out msg);
            //    switch ((ConstantManagement.MethodResult)status)
            //    {
            //        case ConstantManagement.MethodResult.ctFNC_CANCEL:
            //            break;
            //        case ConstantManagement.MethodResult.ctFNC_ERROR:
            //            goodsUnitDataListList.Clear();
            //            return status;
            //        case ConstantManagement.MethodResult.ctFNC_NORMAL:
            //            goodsUnitDataListList.Add(goodsUnitDataList);
            //            break;
            //        case ConstantManagement.MethodResult.ctFNC_NO_RETURN:
            //            break;
            //    }
            //}
            //return status;

            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<GoodsUnitData> goodsUnitDataList;
            goodsUnitDataListList = new List<List<GoodsUnitData>>();
            PartsInfoDataSet partsInfoDataSet = new PartsInfoDataSet();
            msg = string.Empty;

            //-------------------------------------------------------------------------
            // 抽出条件設定
            //-------------------------------------------------------------------------
            PartsSearchUIData partsSearchUIData;
            GoodsCndtn cndtn = new GoodsCndtn();
            cndtn.EnterpriseCode = cndtnList[0].EnterpriseCode;
            cndtn.SectionCode = cndtnList[0].SectionCode;
            this.SettingPartsSearchUIData(cndtn, SearchPartsType.GoodsNoNonVariousSearchWholeWord, out partsSearchUIData);
            ArrayList srchCondList = new ArrayList();
            foreach (GoodsCndtn goodsCndtn in cndtnList)
            {
                SrchCond srchCond = new SrchCond();
                srchCond.makerCd = goodsCndtn.GoodsMakerCd;
                srchCond.partsNo = goodsCndtn.GoodsNo;
                srchCondList.Add(srchCond);
            }

            // 2009.03.05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //-------------------------------------------------------------------------
            // 離島価格反映処理追加
            //-------------------------------------------------------------------------
            this._goodsCndtn = cndtn;
            if (this._PartsSearchController.ReflectIsolIsland == null)
            {
                this._PartsSearchController.ReflectIsolIsland += new PartsSearchController.ReflectIsolIslandCallback(this.ReflectIsolIsland);
            }
            // 2009.03.05 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 ADD
            //status = this._PartsSearchController.PrtNoListSearch(partsSearchUIData, srchCondList, out partsInfoDataSet);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 ADD
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 ADD
            partsSearchUIData.SectionCode = this.GetSectionCdForPrmSetting( partsSearchUIData.SectionCode, partsSearchUIData.PrmSettingWork ); 
            status = this._PartsSearchController.PrtNoListSearch(partsSearchUIData, srchCondList, out partsInfoDataSet);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 ADD

            switch ((ConstantManagement.MethodResult)status)
            {
                case ConstantManagement.MethodResult.ctFNC_CANCEL:
                    break;
                case ConstantManagement.MethodResult.ctFNC_ERROR:
                    goodsUnitDataListList.Clear();
                    return status;
                case ConstantManagement.MethodResult.ctFNC_NORMAL:
                    //-------------------------------------------------------------------------
                    // 商品連結データオブジェクトリスト変換
                    //-------------------------------------------------------------------------
                    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));

                    //-------------------------------------------------------------------------
                    // 結果リスト作成
                    //-------------------------------------------------------------------------
                    foreach (GoodsUnitData tempGoodsUnitData in goodsUnitDataList)
                    {
                        List<GoodsUnitData> tempGoodsUnitDataList = new List<GoodsUnitData>();
                        tempGoodsUnitDataList.Add(tempGoodsUnitData);
                        
                        //-------------------------------------------------------------------------
                        // 商品連結データ不足情報設定
                        //-------------------------------------------------------------------------
                        this.SettingGoodsUnitDataListFromVariousMst(cndtnList[0], ref tempGoodsUnitDataList);

                        goodsUnitDataListList.Add(tempGoodsUnitDataList);
                    }
                    break;
                case ConstantManagement.MethodResult.ctFNC_NO_RETURN:
                    break;
            }

            return status;
            // 2009.01.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        }

        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
        /// <summary>
        /// 品番検索(結合検索無し完全一致)　売上伝票入力専用
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="partsInfoDataSet">部品情報データセット</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchPartsFromGoodsNoNonVariousSearchWholeWordProc(List<GoodsCndtn> cndtnList, out List<List<GoodsUnitData>> goodsUnitDataListList, out PartsInfoDataSet partsInfoDataSet, out string msg)
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<GoodsUnitData> goodsUnitDataList;
            goodsUnitDataListList = new List<List<GoodsUnitData>>();
            partsInfoDataSet = new PartsInfoDataSet();
            msg = string.Empty;

            //-------------------------------------------------------------------------
            // 抽出条件設定
            //-------------------------------------------------------------------------
            PartsSearchUIData partsSearchUIData;
            GoodsCndtn cndtn = new GoodsCndtn();
            cndtn.EnterpriseCode = cndtnList[0].EnterpriseCode;
            cndtn.SectionCode = cndtnList[0].SectionCode;
            this.SettingPartsSearchUIData(cndtn, SearchPartsType.GoodsNoNonVariousSearchWholeWord, out partsSearchUIData);
            ArrayList srchCondList = new ArrayList();
            foreach (GoodsCndtn goodsCndtn in cndtnList)
            {
                SrchCond srchCond = new SrchCond();
                srchCond.makerCd = goodsCndtn.GoodsMakerCd;
                srchCond.partsNo = goodsCndtn.GoodsNo;
                srchCondList.Add(srchCond);
            }

            //-------------------------------------------------------------------------
            // 離島価格反映処理追加
            //-------------------------------------------------------------------------
            this._goodsCndtn = cndtn;
            if (this._PartsSearchController.ReflectIsolIsland == null)
            {
                this._PartsSearchController.ReflectIsolIsland += new PartsSearchController.ReflectIsolIslandCallback(this.ReflectIsolIsland);
            }
            partsSearchUIData.SectionCode = this.GetSectionCdForPrmSetting(partsSearchUIData.SectionCode, partsSearchUIData.PrmSettingWork);
            status = this._PartsSearchController.PrtNoListSearch(partsSearchUIData, srchCondList, out partsInfoDataSet);

            switch ((ConstantManagement.MethodResult)status)
            {
                case ConstantManagement.MethodResult.ctFNC_CANCEL:
                    break;
                case ConstantManagement.MethodResult.ctFNC_ERROR:
                    goodsUnitDataListList.Clear();
                    return status;
                case ConstantManagement.MethodResult.ctFNC_NORMAL:
                    //-------------------------------------------------------------------------
                    // 商品連結データオブジェクトリスト変換
                    //-------------------------------------------------------------------------
                    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));

                    //-------------------------------------------------------------------------
                    // 結果リスト作成
                    //-------------------------------------------------------------------------
                    foreach (GoodsUnitData tempGoodsUnitData in goodsUnitDataList)
                    {
                        List<GoodsUnitData> tempGoodsUnitDataList = new List<GoodsUnitData>();
                        tempGoodsUnitDataList.Add(tempGoodsUnitData);

                        //-------------------------------------------------------------------------
                        // 商品連結データ不足情報設定
                        //-------------------------------------------------------------------------
                        this.SettingGoodsUnitDataListFromVariousMst(cndtnList[0], ref tempGoodsUnitDataList);

                        goodsUnitDataListList.Add(tempGoodsUnitDataList);
                    }
                    break;
                case ConstantManagement.MethodResult.ctFNC_NO_RETURN:
                    break;
            }

            return status;
        }
        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<

        /// <summary>
        /// 品番検索(結合検索無し完全一致)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromGoodsNoNonVariousSearchWholeWord(GoodsCndtn cndtn, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchPartsFromGoodsNoNonVariousSearchWholeWordProc(cndtn, true, out goodsUnitDataList, out msg);
        }

        /// <summary>
        /// 品番検索(結合検索無し完全一致)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="samePartsNoWindowDiv">同一品番ウインドウ表示区分(true:表示あり,false:表示なし)</param>
        /// <param name="goodsUnitDataList">商品連結データリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsFromGoodsNoNonVariousSearchWholeWord(GoodsCndtn cndtn, bool samePartsNoWindowDiv, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchPartsFromGoodsNoNonVariousSearchWholeWordProc(cndtn, samePartsNoWindowDiv, out goodsUnitDataList, out msg);
        }

        /// <summary>
        /// 品番検索(結合検索無し完全一致)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="samePartsNoWindowDiv">同一品番ウインドウ表示区分(true:表示あり,false:表示なし)</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchPartsFromGoodsNoNonVariousSearchWholeWordProc(GoodsCndtn cndtn, bool samePartsNoWindowDiv, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            goodsUnitDataList = null;
            msg = string.Empty;
            DialogResult retDialog = DialogResult.None;
            ConstantManagement.MethodResult retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>(); // 2008.10.02
            goodsUnitDataList = new List<GoodsUnitData>();

            //-------------------------------------------------------------------------
            // 抽出条件設定
            //-------------------------------------------------------------------------
            PartsSearchUIData partsSearchUIData;
            this.SettingPartsSearchUIData(cndtn, SearchPartsType.GoodsNoNonVariousSearchWholeWord, out partsSearchUIData);

            //-------------------------------------------------------------------------
            // 部品検索
            //-------------------------------------------------------------------------
            PartsInfoDataSet partsInfoDataSet;
            int ret = this.SearchParts(cndtn, partsSearchUIData, out partsInfoDataSet, out msg);

            if (ret == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if (samePartsNoWindowDiv == true)
                {
                    // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //// 2008.10.02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //if (partsInfoDataSet.UsrGoodsInfo.Count >= 1)
                    //{
                    //    //-------------------------------------------------------------------------
                    //    // 商品連結データオブジェクトリスト変換
                    //    //-------------------------------------------------------------------------
                    //    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));

                    //    // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //    //// 2008.11.04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //    ////-------------------------------------------------------------------------
                    //    //// 商品連結データ不足情報設定
                    //    ////-------------------------------------------------------------------------
                    //    //this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
                    //    //// 2008.11.04 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    //    //-------------------------------------------------------------------------
                    //    // 商品連結データ不足情報設定
                    //    //-------------------------------------------------------------------------
                    //    this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList, 1);
                    //    // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    //    //-----------------------------------------------------------------------------
                    //    // 単価情報取得
                    //    //-----------------------------------------------------------------------------
                    //    unitPriceCalcRetList = this.CalclationUnitPrice(cndtn, goodsUnitDataList);

                    //    //-----------------------------------------------------------------------------
                    //    // 単価情報を部品検索データセットへ反映
                    //    //-----------------------------------------------------------------------------
                    //    if ((unitPriceCalcRetList != null) && (unitPriceCalcRetList.Count != 0)) partsInfoDataSet.SetUnitPriceInfo(unitPriceCalcRetList);
                    //}
                    //// 2008.10.02 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2008.11.05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //-------------------------------------------------------------------------
                    // 優先倉庫設定
                    //-------------------------------------------------------------------------
                    partsInfoDataSet.ListPriorWarehouse = cndtn.ListPriorWarehouse;
                    // 2008.11.05 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //-------------------------------------------------------------------------
                    // 品名表示区分設定
                    //-------------------------------------------------------------------------
                    if (_salesTtlSt != null) partsInfoDataSet.PartsNameDspDivCd = _salesTtlSt.PartsNameDspDivCd;
                    // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //-------------------------------------------------------------------------
                    // 価格計算(同一品番選択ウィンドウ用)用のデリゲート追加
                    //-------------------------------------------------------------------------
                    this._goodsCndtn = cndtn;
                    if (partsInfoDataSet.CalculatePrice == null)
                    {
                        partsInfoDataSet.CalculatePrice += new PartsInfoDataSet.CalculatePriceCallback(this.CalcPrice);
                    }

                    //-------------------------------------------------------------------------
                    // 価格適用日
                    //-------------------------------------------------------------------------
                    partsInfoDataSet.PriceApplyDate = cndtn.PriceApplyDate;
                    // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2008.10.08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    ////-------------------------------------------------------------------------
                    //// 同一品番検索選択UI
                    ////-------------------------------------------------------------------------
                    //if (partsInfoDataSet.UsrGoodsInfo.Count > 1)
                    //{
                    //    retDialog = SelectionSamePartsNo.ShowDialog(partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                    //}
                    //else if (partsInfoDataSet.UsrGoodsInfo.Count == 1)
                    //{
                    //    partsInfoDataSet.UsrGoodsInfo[0].SelectionState = true;
                    //    retDialog = DialogResult.OK;
                    //}

                    // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    ////-------------------------------------------------------------------------
                    //// 同一品番検索選択UI
                    ////-------------------------------------------------------------------------
                    //retDialog = SelectionSamePartsNo.ShowDialog(partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                    //-------------------------------------------------------------------------
                    // 同一品番検索選択UI
                    //-------------------------------------------------------------------------
                    retDialog = SelectionSamePartsNo.ShowDialog(this._owner, partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                    // 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    // 2008.10.08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    //-------------------------------------------------------------------------
                    // 商品連結データオブジェクトリスト変換
                    //-------------------------------------------------------------------------
                    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(true).ToArray(typeof(GoodsUnitData)));
                }
                else
                {
                    //-------------------------------------------------------------------------
                    // 戻り値補正
                    //-------------------------------------------------------------------------
                    if (partsInfoDataSet.UsrGoodsInfo.Count > 0) retDialog = DialogResult.OK;

                    //-------------------------------------------------------------------------
                    // 商品連結データオブジェクトリスト変換
                    //-------------------------------------------------------------------------
                    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));
                }

                //-------------------------------------------------------------------------
                // 商品連結データ不足情報設定
                //-------------------------------------------------------------------------
                this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
            }

            //-------------------------------------------------------------------------
            // 戻り値設定
            //-------------------------------------------------------------------------
            switch (retDialog)
            {
                case DialogResult.Cancel:
                    retMethod = ConstantManagement.MethodResult.ctFNC_CANCEL;
                    break;
                case DialogResult.None:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                case DialogResult.OK:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NORMAL;
                    break;
                default:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
            }
            return (int)retMethod;
        }

        #endregion

        #region ○TBO検索
        /// <summary>
        /// TBO検索
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchTBO(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchTBOProc(cndtn, out partsInfoDataSet, out goodsUnitDataList, out msg);
        }

        /// <summary>
        /// TBO検索
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchTBOProc(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            partsInfoDataSet = null;
            goodsUnitDataList = new List<GoodsUnitData>();
            msg = string.Empty;
            DialogResult retDialog = DialogResult.None;
            ConstantManagement.MethodResult retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>(); // 2008.11.06

            if (cndtn.SearchCarInfo != null)
            {
                //-----------------------------------------------------------------------------
                // 車両情報設定(車両情報(CarInfo)を設定すると自動でBLコード情報(BLInfo)が設定される)
                //-----------------------------------------------------------------------------
                this._PartsSearchController.CarInfo = cndtn.SearchCarInfo;

                // 2009/09/08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ADD
                //-------------------------------------------------------------------------
                // 抽出条件設定
                //-------------------------------------------------------------------------
                PartsSearchUIData partsSearchUIData;
                this.SettingPartsSearchUIData(cndtn, SearchPartsType.BLCode, out partsSearchUIData);
                // 2009/09/08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ADD

                //-------------------------------------------------------------------------
                // TBO検索
                //-------------------------------------------------------------------------
                // 2008.11.25 30290 TBO検索優良設定対応
                //int ret = this._PartsSearchController.GetTBOInfo(out partsInfoDataSet, cndtn.EnterpriseCode);
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 DEL
                //int ret = this._PartsSearchController.GetTBOInfo(out partsInfoDataSet, cndtn.EnterpriseCode, cndtn.SectionCode, _drPrmSettingWork);
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 ADD
                string sectionCode = this.GetSectionCdForPrmSetting( cndtn.SectionCode, _drPrmSettingWork );
                // 2009/09/08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DEL
                //int ret = this._PartsSearchController.GetTBOInfo(out partsInfoDataSet, cndtn.EnterpriseCode, sectionCode, _drPrmSettingWork);
                // 2009/09/08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< DEL
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 ADD
                // 2009/09/08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ADD
                int ret = this._PartsSearchController.GetTBOInfo(out partsInfoDataSet, cndtn.EnterpriseCode, sectionCode, _drPrmSettingWork, partsSearchUIData);
                // 2009/09/08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ADD

                //>>>2010/06/03
                partsInfoDataSet.ReSettingGoodsName();
                //<<<2010/06/03

                // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //// 2008.11.06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //if (partsInfoDataSet.UsrGoodsInfo.Count >= 1)
                //{
                //    //-------------------------------------------------------------------------
                //    // 商品連結データオブジェクトリスト変換
                //    //-------------------------------------------------------------------------
                //    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));

                //    // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //    ////-------------------------------------------------------------------------
                //    //// 商品連結データ不足情報設定
                //    ////-------------------------------------------------------------------------
                //    //this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);

                //    //-------------------------------------------------------------------------
                //    // 商品連結データ不足情報設定
                //    //-------------------------------------------------------------------------
                //    this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList, 1);
                //    // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                //    //-----------------------------------------------------------------------------
                //    // 単価情報取得
                //    //-----------------------------------------------------------------------------
                //    unitPriceCalcRetList = this.CalclationUnitPrice(cndtn, goodsUnitDataList);

                //    //-----------------------------------------------------------------------------
                //    // 単価情報を部品検索データセットへ反映
                //    //-----------------------------------------------------------------------------
                //    if ((unitPriceCalcRetList != null) && (unitPriceCalcRetList.Count != 0)) partsInfoDataSet.SetUnitPriceInfo(unitPriceCalcRetList);
                //}
                //// 2008.11.06 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                // 2008.11.05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //-------------------------------------------------------------------------
                // 優先倉庫設定
                //-------------------------------------------------------------------------
                partsInfoDataSet.ListPriorWarehouse = cndtn.ListPriorWarehouse;
                // 2008.11.05 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //-------------------------------------------------------------------------
                // 品名表示区分設定
                //-------------------------------------------------------------------------
                if (_salesTtlSt != null) partsInfoDataSet.PartsNameDspDivCd = _salesTtlSt.PartsNameDspDivCd;
                // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //-------------------------------------------------------------------------
                // 単価算出モジュール呼出用のデリゲート追加
                //-------------------------------------------------------------------------
                this._goodsCndtn = cndtn;
                if (partsInfoDataSet.CalculateGoodsPrice == null)
                {
                    partsInfoDataSet.CalculateGoodsPrice += new PartsInfoDataSet.CalculateGoodsPriceCallback(this.CalculateRelevanceUnitPrice);
                }
                if (partsInfoDataSet.CalculatePrice == null)
                {
                    partsInfoDataSet.CalculatePrice += new PartsInfoDataSet.CalculatePriceCallback(this.CalcPrice);
                }
                partsInfoDataSet.PriceApplyDate = cndtn.PriceApplyDate;
                // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                //-------------------------------------------------------------------------
                // TBO検索画面表示
                //-------------------------------------------------------------------------
                if ((ret == 0) && (partsInfoDataSet.TBOInfo.Count > 0))
                {
                    // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //retDialog = SelectionCarInfoJoinParts.ShowDialog(cndtn.SearchCarInfo, partsInfoDataSet);
                    retDialog = SelectionCarInfoJoinParts.ShowDialog(this._owner, cndtn.SearchCarInfo, partsInfoDataSet);
                    // 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                }

                //-------------------------------------------------------------------------
                // 商品連結データオブジェクトリスト変換
                //-------------------------------------------------------------------------
                goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(true).ToArray(typeof(GoodsUnitData)));

#if false
                //-------------------------------------------------------------------------
                // 商品連結データ不足情報設定
                //-------------------------------------------------------------------------
                this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
#endif
            }
            else
            {
                msg = "車両情報が設定されていません。";
            }

            //-------------------------------------------------------------------------
            // 戻り値設定
            //-------------------------------------------------------------------------
            switch (retDialog)
            {
                case DialogResult.Cancel:
                    retMethod = ConstantManagement.MethodResult.ctFNC_CANCEL;
                    break;
                case DialogResult.None:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                case DialogResult.OK:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NORMAL;
                    break;
                default:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
            }
            return (int)retMethod;
        }

        #region [ TBOマスメン対応追加 2008.11.25 30290 ]
        /// <summary>
        /// 装備名称検索[装備名称の曖昧検索専用]
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト[企業コード・拠点コード設定だけでOK]</param>
        /// <param name="equipGenreCd">装備分類</param>
        /// <param name="equipNm">装備名称</param>
        /// <param name="lstEquipNm">装備名称リスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        public int SearchEquipName(GoodsCndtn cndtn, int equipGenreCd, string equipNm, out List<string> lstEquipNm, out string msg)
        {
            return this.SearchEquipNameProc(cndtn, equipGenreCd, equipNm, out lstEquipNm, out msg);
        }

        /// <summary>
        /// 装備名称検索
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="equipGenreCd">装備分類</param>
        /// <param name="equipNm">装備名称</param>
        /// <param name="lstEquipNm">装備名称リスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        private int SearchEquipNameProc(GoodsCndtn cndtn, int equipGenreCd, string equipNm, out List<string> lstEquipNm, out string msg)
        {
            msg = string.Empty;
            if (equipNm.StartsWith("*") == false && equipNm.EndsWith("*") == false)
            {
                lstEquipNm = null;
                msg = "曖昧検索時専用です。";
                return -1;
            }
            //-------------------------------------------------------------------------
            // TBO検索
            //-------------------------------------------------------------------------
            // 検索アクセスクラスの使用するメソッドを変更　2008.12.03　30290
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 DEL
            //int ret = this._PartsSearchController.SearchEquipName(out lstEquipNm, cndtn.EnterpriseCode, equipGenreCd, equipNm, cndtn.SectionCode, _drPrmSettingWork);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 ADD
            string sectionCode = this.GetSectionCdForPrmSetting( cndtn.SectionCode, _drPrmSettingWork );
            int ret = this._PartsSearchController.SearchEquipName( out lstEquipNm, cndtn.EnterpriseCode, equipGenreCd, equipNm, sectionCode, _drPrmSettingWork );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 ADD
            return ret;
        }

        /// <summary>
        /// TBO検索[TBOマスメン用:装備名称が完全一致検索の場合]
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト[企業コード・拠点コード・補充処理に必要な値]</param>
        /// <param name="equipGenreCd">装備分類</param>
        /// <param name="equipNm">装備名称</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchTBO(GoodsCndtn cndtn, int equipGenreCd, string equipNm, out PartsInfoDataSet partsInfoDataSet,
            out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchTBOProc(cndtn, equipGenreCd, equipNm, out partsInfoDataSet, out goodsUnitDataList, out msg);
        }

        /// <summary>
        /// TBO検索
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="equipGenreCd">装備分類</param>
        /// <param name="equipNm">装備名称</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchTBOProc(GoodsCndtn cndtn, int equipGenreCd, string equipNm, out PartsInfoDataSet partsInfoDataSet,
            out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            partsInfoDataSet = null;
            goodsUnitDataList = new List<GoodsUnitData>();
            msg = string.Empty;
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>(); // 2008.11.06

            //-------------------------------------------------------------------------
            // TBO検索
            //-------------------------------------------------------------------------
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 DEL
            //int ret = this._PartsSearchController.GetTBOInfo(out partsInfoDataSet, cndtn.EnterpriseCode, equipGenreCd, equipNm, cndtn.SectionCode, _drPrmSettingWork);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 ADD
            string sectionCode = this.GetSectionCdForPrmSetting( cndtn.SectionCode, _drPrmSettingWork );
            int ret = this._PartsSearchController.GetTBOInfo( out partsInfoDataSet, cndtn.EnterpriseCode, equipGenreCd, equipNm, sectionCode, _drPrmSettingWork );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 ADD

            // 2008.11.06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            if (partsInfoDataSet.UsrGoodsInfo.Count >= 1)
            {
                //-------------------------------------------------------------------------
                // 商品連結データオブジェクトリスト変換
                //-------------------------------------------------------------------------
                goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));

                // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                ////-------------------------------------------------------------------------
                //// 商品連結データ不足情報設定
                ////-------------------------------------------------------------------------
                //this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);

                //-------------------------------------------------------------------------
                // 商品連結データ不足情報設定
                //-------------------------------------------------------------------------
                this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList, 1);
                // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                ////-----------------------------------------------------------------------------
                //// 単価情報取得
                ////-----------------------------------------------------------------------------
                //unitPriceCalcRetList = this.CalclationListPrice(cndtn, goodsUnitDataList);

                //-----------------------------------------------------------------------------
                // 単価情報取得
                //-----------------------------------------------------------------------------
                unitPriceCalcRetList = this.CalclationRelevanceUnitPrice(cndtn, goodsUnitDataList);
                // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                //-----------------------------------------------------------------------------
                // 単価情報を部品検索データセットへ反映
                //-----------------------------------------------------------------------------
                if ((unitPriceCalcRetList != null) && (unitPriceCalcRetList.Count != 0)) partsInfoDataSet.SetUnitPriceInfo(unitPriceCalcRetList);
            }
            // 2008.11.06 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            //-------------------------------------------------------------------------
            // 商品連結データオブジェクトリスト変換
            //-------------------------------------------------------------------------
            goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));

            //-------------------------------------------------------------------------
            // 商品連結データ不足情報設定
            //-------------------------------------------------------------------------
            this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);

            return ret;
        }
        // TBOマスメン対応追加 2008.11.25 30290 ↑↑↑↑↑ 
        #endregion

        // --- ADD 2009/11/13 ---------->>>>> 
        /// <summary>
        /// TBO検索(TBO検索ボタンから)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        /// <remarks>
        /// <br>Note        : TBO検索ボタンからTBO検索を行った場合、TBO検索が発生します。</br>
        /// <br>Programmer  : 李占川</br>
        /// <br>Date        : 2009/11/13</br>
        /// </remarks>
        public int SearchTBOForButton(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchTBOForButtonProc(cndtn, out partsInfoDataSet, out goodsUnitDataList, out msg);
        }

        /// <summary>
        /// TBO検索(TBO検索ボタンから)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        /// <remarks>
        /// <br>Note        : TBO検索ボタンからTBO検索を行った場合、TBO検索が発生します。</br>
        /// <br>Programmer  : 李占川</br>
        /// <br>Date        : 2009/11/13</br>
        /// </remarks>
        private int SearchTBOForButtonProc(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            partsInfoDataSet = null;
            goodsUnitDataList = new List<GoodsUnitData>();
            msg = string.Empty;
            DialogResult retDialog = DialogResult.None;
            ConstantManagement.MethodResult retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>();

            if (cndtn.SearchCarInfo != null)
            {
                //-----------------------------------------------------------------------------
                // 車両情報設定(車両情報(CarInfo)を設定すると自動でBLコード情報(BLInfo)が設定される)
                //-----------------------------------------------------------------------------
                this._PartsSearchController.CarInfo = cndtn.SearchCarInfo;

                //-------------------------------------------------------------------------
                // 抽出条件設定
                //-------------------------------------------------------------------------
                PartsSearchUIData partsSearchUIData;
                this.SettingPartsSearchUIData(cndtn, SearchPartsType.BLCode, out partsSearchUIData);

                //-------------------------------------------------------------------------
                // TBO検索
                //-------------------------------------------------------------------------
                string sectionCode = this.GetSectionCdForPrmSetting(cndtn.SectionCode, _drPrmSettingWork);
                int ret = this._PartsSearchController.GetTBOInfo(out partsInfoDataSet, cndtn.EnterpriseCode, sectionCode, _drPrmSettingWork, partsSearchUIData);

                //>>>2010/06/03
                partsInfoDataSet.ReSettingGoodsName();
                //<<<2010/06/03

                //-------------------------------------------------------------------------
                // 優先倉庫設定
                //-------------------------------------------------------------------------
                partsInfoDataSet.ListPriorWarehouse = cndtn.ListPriorWarehouse;

                //-------------------------------------------------------------------------
                // 品名表示区分設定
                //-------------------------------------------------------------------------
                if (_salesTtlSt != null) partsInfoDataSet.PartsNameDspDivCd = _salesTtlSt.PartsNameDspDivCd;

                //-------------------------------------------------------------------------
                // 単価算出モジュール呼出用のデリゲート追加
                //-------------------------------------------------------------------------
                this._goodsCndtn = cndtn;
                if (partsInfoDataSet.CalculateGoodsPrice == null)
                {
                    partsInfoDataSet.CalculateGoodsPrice += new PartsInfoDataSet.CalculateGoodsPriceCallback(this.CalculateRelevanceUnitPrice);
                }
                if (partsInfoDataSet.CalculatePrice == null)
                {
                    partsInfoDataSet.CalculatePrice += new PartsInfoDataSet.CalculatePriceCallback(this.CalcPrice);
                }
                partsInfoDataSet.PriceApplyDate = cndtn.PriceApplyDate;

                //-------------------------------------------------------------------------
                // TBO検索画面表示
                //-------------------------------------------------------------------------
                if (ret == 0)
                {
                    // PartsInfoDataSet.TBOInitializeFlg へ「1」を設定する。
                    partsInfoDataSet.TBOInitializeFlg = 1;

                    retDialog = SelectionCarInfoJoinParts.ShowDialog(this._owner, cndtn.SearchCarInfo, partsInfoDataSet);
                }

                //-------------------------------------------------------------------------
                // 商品連結データオブジェクトリスト変換
                //-------------------------------------------------------------------------
                goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(true).ToArray(typeof(GoodsUnitData)));

#if false
                //-------------------------------------------------------------------------
                // 商品連結データ不足情報設定
                //-------------------------------------------------------------------------
                this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
#endif
            }
            else
            {
                msg = "車両情報が設定されていません。";
            }

            //-------------------------------------------------------------------------
            // 戻り値設定
            //-------------------------------------------------------------------------
            switch (retDialog)
            {
                case DialogResult.Cancel:
                    retMethod = ConstantManagement.MethodResult.ctFNC_CANCEL;
                    break;
                case DialogResult.None:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                case DialogResult.OK:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NORMAL;
                    break;
                default:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
            }
            return (int)retMethod;
        }
        // --- ADD 2009/11/13 ----------<<<<<
        #endregion

        #region ○品番検索(結合元検索)
        /// <summary>
        /// 品番検索(結合元検索)
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="partsInfoDataSetList">部品検索データセット</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsForSrcParts(List<GoodsCndtn> cndtnList, out List<PartsInfoDataSet> partsInfoDataSetList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            //return this.SearchPartsForSrcPartsProc(cndtnList, out partsInfoDataSetList, out goodsUnitDataListList, out msg); // 2009/11/04
            return this.SearchPartsForSrcPartsProc(cndtnList, out partsInfoDataSetList, out goodsUnitDataListList, out msg); // 2009/11/04
        }

        /// <summary>
        /// 品番検索(結合元検索)
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクトリスト</param>
        /// <param name="partsInfoDataSetList">部品検索データセット</param>
        /// <param name="goodsUnitDataListList">商品連結データオブジェクトリストリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchPartsForSrcPartsProc(List<GoodsCndtn> cndtnList, out List<PartsInfoDataSet> partsInfoDataSetList, out List<List<GoodsUnitData>> goodsUnitDataListList, out string msg)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            PartsInfoDataSet partsInfoDataSet;
            List<GoodsUnitData> goodsUnitDataList;
            partsInfoDataSetList = new List<PartsInfoDataSet>();
            goodsUnitDataListList = new List<List<GoodsUnitData>>();
            msg = string.Empty;

            foreach (GoodsCndtn goodsCndtn in cndtnList)
            {
                //status = this.SearchPartsForSrcPartsProc(goodsCndtn, out partsInfoDataSet, out goodsUnitDataList, out msg); // 2009/11/04
                status = this.SearchPartsForSrcPartsProc(0, goodsCndtn, out partsInfoDataSet, out goodsUnitDataList, out msg); // 2009/11/04
                switch ((ConstantManagement.MethodResult)status)
                {
                    case ConstantManagement.MethodResult.ctFNC_CANCEL:
                        break;
                    case ConstantManagement.MethodResult.ctFNC_ERROR:
                        partsInfoDataSetList.Clear();
                        goodsUnitDataListList.Clear();
                        return status;
                    case ConstantManagement.MethodResult.ctFNC_NORMAL:
                        partsInfoDataSetList.Add((PartsInfoDataSet)partsInfoDataSet.Copy());
                        goodsUnitDataListList.Add(goodsUnitDataList);
                        break;
                    case ConstantManagement.MethodResult.ctFNC_NO_RETURN:
                        break;
                }
            }
            return status;
        }

        // 2009/11/04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>
        ///// 品番検索(結合元検索)
        ///// </summary>
        ///// <param name="cndtn">商品検索条件オブジェクト</param>
        ///// <param name="partsInfoDataSet">部品検索データセット</param>
        ///// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        ///// <param name="msg">エラーメッセージ</param>
        ///// <returns>ConstantManagement.MethodResult</returns>
        //public int SearchPartsForSrcParts(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        //{
        //    return this.SearchPartsForSrcPartsProc(cndtn, out partsInfoDataSet, out goodsUnitDataList, out msg);
        //}

        /// <summary>
        /// 品番検索(結合元検索)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsForSrcParts(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchPartsForSrcParts(0, cndtn, out partsInfoDataSet, out goodsUnitDataList, out msg);
        }

        /// <summary>
        /// 品番検索(結合元検索)
        /// </summary>
        /// <param name="mode"></param>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchPartsForSrcParts(int mode, GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchPartsForSrcPartsProc(mode, cndtn, out partsInfoDataSet, out goodsUnitDataList, out msg);
        }
        // 2009/11/04 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009/11/04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>
        ///// 品番検索(結合元検索)
        ///// </summary>
        ///// <param name="cndtn">商品検索条件オブジェクト</param>
        ///// <param name="partsInfoDataSet">部品検索データセット</param>
        ///// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        ///// <param name="msg">エラーメッセージ</param>
        ///// <returns>ConstantManagement.MethodResult</returns>
        //private int SearchPartsForSrcPartsProc(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        /// <summary>
        /// 品番検索(結合元検索)
        /// </summary>
        /// <param name="mode">モード(0:提供価格取得無し 1:提供価格取得有り)</param>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        /// <remarks>
        /// <br>Note       : </br>
        /// <br>Programmer : </br>
        /// <br>Date       : </br>
        /// <br></br>
        /// <br>Update Note: 2015/04/06 30757 佐々木 貴英</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br>             仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br></br>
        /// </remarks>
        private int SearchPartsForSrcPartsProc(int mode, GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        // 2009/11/04 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            partsInfoDataSet = null;
            msg = string.Empty;
            DialogResult retDialog = DialogResult.None;
            ConstantManagement.MethodResult retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>();
            goodsUnitDataList = new List<GoodsUnitData>();

            //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ---------------->>>>>
            //-------------------------------------------------------------------------
            // 離島価格反映処理追加
            //-------------------------------------------------------------------------
            this._goodsCndtn = cndtn;
            if (this._PartsSearchController.ReflectIsolIsland == null)
            {
                this._PartsSearchController.ReflectIsolIsland += new PartsSearchController.ReflectIsolIslandCallback(this.ReflectIsolIsland);
            }
            //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ----------------<<<<<

            //-------------------------------------------------------------------------
            // 結合元検索
            //-------------------------------------------------------------------------
            //int ret = this._PartsSearchController.GetJoinSrcParts(cndtn.EnterpriseCode, cndtn.GoodsMakerCd, cndtn.GoodsNo, out partsInfoDataSet); // 2009/11/04
            int ret = this._PartsSearchController.GetJoinSrcParts(mode, cndtn.EnterpriseCode, cndtn.GoodsMakerCd, cndtn.GoodsNo, out partsInfoDataSet); // 2009/11/04

            if (ret == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                //>>>2010/06/03
                partsInfoDataSet.ReSettingGoodsName();
                //<<<2010/06/03

                //-------------------------------------------------------------------------
                // 戻り値補正
                //-------------------------------------------------------------------------
                if (partsInfoDataSet.UsrGoodsInfo.Count > 0) retDialog = DialogResult.OK;

                //-------------------------------------------------------------------------
                // 商品連結データオブジェクトリスト変換
                //-------------------------------------------------------------------------
                goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));

                //-------------------------------------------------------------------------
                // 商品連結データ不足情報設定
                //-------------------------------------------------------------------------
                this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
            }

            //-------------------------------------------------------------------------
            // 戻り値設定
            //-------------------------------------------------------------------------
            switch (retDialog)
            {
                case DialogResult.Cancel:
                    retMethod = ConstantManagement.MethodResult.ctFNC_CANCEL;
                    break;
                case DialogResult.None:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                case DialogResult.OK:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NORMAL;
                    break;
                default:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
            }
            return (int)retMethod;
        }
        #endregion

        // 2009.01.17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        #region ○品番無し検索
        /// <summary>
        /// 品番無し検索(提供のみ)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        /// <remarks>有効項目：メーカー、品番、ＢＬコード</remarks>
        /// <remarks>必須：メーカー　どちらか必須：品番orＢＬコード</remarks>
        public int SearchPartsOfNonGoodsNo(GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchPartsOfNonGoodsNoProc(cndtn, out partsInfoDataSet, out goodsUnitDataList, out msg);
        }

        /// <summary>
        /// 品番無し検索(提供のみ)
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        /// <remarks>有効項目：メーカー、品番、ＢＬコード</remarks>
        /// <remarks>必須：メーカー　どちらか必須：品番orＢＬコード</remarks>
        private int SearchPartsOfNonGoodsNoProc( GoodsCndtn cndtn, out PartsInfoDataSet partsInfoDataSet, out List<GoodsUnitData> goodsUnitDataList, out string msg )
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            partsInfoDataSet = null;
            msg = string.Empty;
            DialogResult retDialog = DialogResult.None;
            ConstantManagement.MethodResult retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>();
            goodsUnitDataList = new List<GoodsUnitData>();

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/02 ADD
            // 拠点コード未設定の場合はログイン拠点と見なす
            if ( string.IsNullOrEmpty( cndtn.SectionCode ) )
            {
                cndtn.SectionCode = LoginSectionCode.Trim();
            }

            List<PrmSettingUWork> prmSettingUWorkList = null;

            //-------------------------------------------------------------------------
            // 初期値データが取得されていなければ初期値データを取得する
            //-------------------------------------------------------------------------
            if ( !_isInitialSearch )
            {
                int status = this.SearchInitial( cndtn.EnterpriseCode, cndtn.SectionCode, out msg );
                switch ( status )
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        return status;
                }
            }
            // 初期検索で取得した優良設定リストを抽出条件UIクラスにセットする
            if ( _drPrmSettingWork != null )
            {
                prmSettingUWorkList = _drPrmSettingWork;
            }

            //-------------------------------------------------------------------------
            // 離島価格反映処理追加
            //-------------------------------------------------------------------------
            this._goodsCndtn = cndtn;
            if ( this._PartsSearchController.ReflectIsolIsland == null )
            {
                this._PartsSearchController.ReflectIsolIsland += new PartsSearchController.ReflectIsolIslandCallback( this.ReflectIsolIsland );
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/02 ADD

            //-------------------------------------------------------------------------
            // 商品一括登録検索(メーカー必須、品番orＢＬコードどちらか必須)
            //-------------------------------------------------------------------------
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/02 DEL
            //int ret = this._PartsSearchController.SearchOfrParts(cndtn.GoodsMakerCd, cndtn.GoodsNo, cndtn.BLGoodsCode, 1000, out partsInfoDataSet);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/02 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/02 ADD
            string sectionCode = this.GetSectionCdForPrmSetting( cndtn.SectionCode, prmSettingUWorkList );
            //int ret = this._PartsSearchController.SearchOfrParts(cndtn.GoodsMakerCd, cndtn.GoodsNo, cndtn.BLGoodsCode, 1000, sectionCode, prmSettingUWorkList, out partsInfoDataSet);  // DEL 2013/03/01
            int ret = this._PartsSearchController.SearchOfrParts(cndtn.GoodsMakerCd, cndtn.GoodsNo, cndtn.BLGoodsCode, 0, sectionCode, prmSettingUWorkList, out partsInfoDataSet);  // ADD 2013/03/01
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/02 ADD

            if ( ret == (int)ConstantManagement.DB_Status.ctDB_NORMAL )
            {
                //>>>2010/06/29
                partsInfoDataSet.ReSettingGoodsName();
                //<<<2010/06/29

                //-------------------------------------------------------------------------
                // 戻り値補正
                //-------------------------------------------------------------------------
                if ( partsInfoDataSet.UsrGoodsInfo.Count > 0 ) retDialog = DialogResult.OK;

                //-------------------------------------------------------------------------
                // 商品連結データオブジェクトリスト変換
                //-------------------------------------------------------------------------
                goodsUnitDataList = new List<GoodsUnitData>( (GoodsUnitData[])partsInfoDataSet.GetGoodsList( false ).ToArray( typeof( GoodsUnitData ) ) );

                //-------------------------------------------------------------------------
                // 商品連結データ不足情報設定
                //-------------------------------------------------------------------------
                this.SettingGoodsUnitDataListFromVariousMst( cndtn, ref goodsUnitDataList );
            }

            //-------------------------------------------------------------------------
            // 戻り値設定
            //-------------------------------------------------------------------------
            switch ( retDialog )
            {
                case DialogResult.Cancel:
                    retMethod = ConstantManagement.MethodResult.ctFNC_CANCEL;
                    break;
                case DialogResult.None:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                case DialogResult.OK:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NORMAL;
                    break;
                default:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
            }
            return (int)retMethod;
        }
        #endregion
        // 2009.01.17 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        #region ○検索共通部
        /// <summary>
        /// 部品検索
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsSearchUIData">部品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        private int SearchParts(GoodsCndtn cndtn, PartsSearchUIData partsSearchUIData, out PartsInfoDataSet partsInfoDataSet, out string msg)
        {
            partsInfoDataSet = null;
            int status = SearchPartsProc(cndtn, partsSearchUIData, out partsInfoDataSet, out msg);
            return status;
        }

        // ADD 2014/02/06 SCM仕掛一覧№10632対応 ------------------------------------------------->>>>>
        /// <summary>
        /// 部品検索
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクト</param>
        /// <param name="partsSearchUIDataList">部品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSetList">部品検索データセット</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        private int SearchParts(List<GoodsCndtn> cndtnList, List<PartsSearchUIData> partsSearchUIDataList, out List<PartsInfoDataSet> partsInfoDataSetList, out string msg)
        {
            partsInfoDataSetList = null;
            int status = SearchPartsProc(cndtnList, partsSearchUIDataList, out partsInfoDataSetList, out msg);
            return status;
        }
        // ADD 2014/02/06 SCM仕掛一覧№10632対応 -------------------------------------------------<<<<<

        /// <summary>
        /// 部品検索
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="partsSearchUIData">部品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        private int SearchPartsProc(GoodsCndtn cndtn, PartsSearchUIData partsSearchUIData, out PartsInfoDataSet partsInfoDataSet, out string msg)
       {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            partsInfoDataSet = new PartsInfoDataSet();
            msg = string.Empty;

            // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //if (_drGoods == null)
            //    _drGoods = new Dictionary<string, GoodsUnitData>();
            //else
            //    _drGoods.Clear();
            // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            //-------------------------------------------------------------------------
            // 初期値データが取得されていなければ初期値データを取得する
            //-------------------------------------------------------------------------
            if (!_isInitialSearch)
            {
                // 2008.10.30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //status = this.SearchInitial(cndtn.EnterpriseCode, this._loginSectionCode, out msg);
                status = this.SearchInitial(cndtn.EnterpriseCode, cndtn.SectionCode, out msg);
                // 2008.10.30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/24 ADD
                // 初期検索で取得した優良設定リストを抽出条件UIクラスにセットする
                if ( _drPrmSettingWork != null )
                {
                    partsSearchUIData.PrmSettingWork = _drPrmSettingWork;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/24 ADD
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        return status;
                }
            }

            // 2009.02.24 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //-------------------------------------------------------------------------
            // 離島価格反映処理追加
            //-------------------------------------------------------------------------
            this._goodsCndtn = cndtn;
            if (this._PartsSearchController.ReflectIsolIsland == null)
            {
                this._PartsSearchController.ReflectIsolIsland += new PartsSearchController.ReflectIsolIslandCallback(this.ReflectIsolIsland);
            }
            // 2009.02.24 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            //-------------------------------------------------------------------------
            // 商品検索(ユーザー＋提供)
            //-------------------------------------------------------------------------
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 DEL
            //int ret = this._PartsSearchController.GetPartsInfoMain(cndtn.SearchCarInfo, partsSearchUIData, out partsInfoDataSet);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 ADD
            partsSearchUIData.SectionCode = this.GetSectionCdForPrmSetting(partsSearchUIData.SectionCode, partsSearchUIData.PrmSettingWork);
            int ret = this._PartsSearchController.GetPartsInfoMain(cndtn.SearchCarInfo, partsSearchUIData, out partsInfoDataSet);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 ADD
            switch (ret)
            {
                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                    //>>>2010/06/03
                    partsInfoDataSet.ReSettingGoodsName();
                    //<<<2010/06/03
                    break;
                default:
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    break;
            }
            return status;
        }

        // ADD 2014/02/06 SCM仕掛一覧№10632対応 ------------------------------------------------->>>>>
        /// <summary>
        /// 部品検索
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクト</param>
        /// <param name="partsSearchUIDataList">部品検索条件オブジェクト</param>
        /// <param name="partsInfoDataSetList">部品検索データセット</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        private int SearchPartsProc(List<GoodsCndtn> cndtnList, List<PartsSearchUIData> partsSearchUIDataList, out List<PartsInfoDataSet> partsInfoDataSetList, out string msg)
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            partsInfoDataSetList = new List<PartsInfoDataSet>();
            msg = string.Empty;

            //-------------------------------------------------------------------------
            // 初期値データが取得されていなければ初期値データを取得する
            //-------------------------------------------------------------------------
            if (!_isInitialSearch)
            {
                status = this.SearchInitial(cndtnList[0].EnterpriseCode, cndtnList[0].SectionCode, out msg);
                // 初期検索で取得した優良設定リストを抽出条件UIクラスにセットする
                if (_drPrmSettingWork != null)
                {
                    foreach (PartsSearchUIData partsSearchUIData in partsSearchUIDataList)
                    {
                        partsSearchUIData.PrmSettingWork = _drPrmSettingWork;
                    }
                }
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        return status;
                }
            }

            //-------------------------------------------------------------------------
            // 離島価格反映処理追加
            //-------------------------------------------------------------------------
            this._goodsCndtn = cndtnList[0];
            if (this._PartsSearchController.ReflectIsolIsland == null)
            {
                this._PartsSearchController.ReflectIsolIsland += new PartsSearchController.ReflectIsolIslandCallback(this.ReflectIsolIsland);
            }

            //-------------------------------------------------------------------------
            // 商品検索(ユーザー＋提供)
            //-------------------------------------------------------------------------
            foreach (PartsSearchUIData partsSearchUIData in partsSearchUIDataList)
            {
                partsSearchUIData.SectionCode = this.GetSectionCdForPrmSetting(partsSearchUIData.SectionCode, partsSearchUIData.PrmSettingWork);
            }

            // ADD 2014/05/09 速度改善フェーズ２№11,№12 吉岡  -------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // 部品検索コントローラーに、自動回答品目設定マスタ、拠点コード、得意先コード
            _PartsSearchController.FoundAutoAnsItemStList = this._foundAutoAnsItemStList;
            _PartsSearchController.SectionCode = this._sectionCode;
            _PartsSearchController.CustomerCode = this._customerCode;
            // ADD 2014/05/09 速度改善フェーズ２№11,№12 吉岡  --------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            int ret = this._PartsSearchController.GetPartsInfoMain(cndtnList[0].SearchCarInfo, partsSearchUIDataList, out partsInfoDataSetList);

            // ADD 2014/05/09 速度改善フェーズ２№11,№12 吉岡  -------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // 部品検索コントローラー、設定内容クリア
            _PartsSearchController.FoundAutoAnsItemStList = null;
            _PartsSearchController.SectionCode = string.Empty;
            _PartsSearchController.CustomerCode = 0;
            // ADD 2014/05/09 速度改善フェーズ２№11,№12 吉岡  --------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            switch (ret)
            {
                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                    foreach (PartsInfoDataSet partsInfoDataSet in partsInfoDataSetList)
                    {
                        partsInfoDataSet.ReSettingGoodsName();
                    }
                    break;
                default:
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    break;
            }
            return status;
        }
        // ADD 2014/02/06 SCM仕掛一覧№10632対応 -------------------------------------------------<<<<<

        /// <summary>
        /// 部品検索条件設定処理
        /// </summary>
        /// <param name="cndtn">商品検索条件オブジェクト</param>
        /// <param name="searchPartsType">部品検索タイプ</param>
        /// <param name="partsSearchUIData">部品検索条件オブジェクト</param>
        private void SettingPartsSearchUIData(GoodsCndtn cndtn, SearchPartsType searchPartsType, out PartsSearchUIData partsSearchUIData)
        {
            partsSearchUIData = new PartsSearchUIData();
            partsSearchUIData.EnterpriseCode = cndtn.EnterpriseCode;                            // 企業コード
            partsSearchUIData.PartsMakerCode = cndtn.GoodsMakerCd;                              // メーカーコード
            // 2008.10.15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //partsSearchUIData.PartsNo = cndtn.GoodsNo.Replace("*", "");                         // 品番
            string goodsNo = cndtn.GoodsNo;
            if (goodsNo.EndsWith(ctAster)) goodsNo = goodsNo.Substring(0, goodsNo.Length - 1);
            if (goodsNo.EndsWith(cndtn.PartsJoinCntDivCd)) goodsNo = goodsNo.Substring(0, goodsNo.Length - cndtn.PartsJoinCntDivCd.Length);
            partsSearchUIData.PartsNo = goodsNo;                                                // 品番
            // 2008.10.15 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            partsSearchUIData.TbsPartsCode = cndtn.BLGoodsCode;                                 // BLコード
            // --- ADD m.suzuki 2011/05/18 ---------->>>>>
            partsSearchUIData.TbsPartsCdDerivedNo = cndtn.BLGoodsDrCode; // BLコード枝番
            // --- ADD m.suzuki 2011/05/18 ----------<<<<<
            // 2008.11.26 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // 部品検索条件 優良設定リスト設定
            if ((_drPrmSettingWork != null) && (_drPrmSettingWork.Count > 0)) partsSearchUIData.PrmSettingWork = _drPrmSettingWork;
            partsSearchUIData.SectionCode = cndtn.SectionCode;                                  // 拠点コード
            // 2008.11.26 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // 2008.10.01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            SearchCntSetWork searchCntSetWork = new SearchCntSetWork();
            searchCntSetWork.SubstCondDivCd = cndtn.SubstCondDivCd;           // 代替条件区分
            searchCntSetWork.PrmSubstCondDivCd = cndtn.PrmSubstCondDivCd;     // 優良代替条件区分
            searchCntSetWork.SubstApplyDivCd = cndtn.SubstApplyDivCd;         // 代替適用区分
            searchCntSetWork.SearchUICntDivCd = cndtn.SearchUICntDivCd;       // 検索画面制御区分
            searchCntSetWork.EnterProcDivCd = cndtn.EnterProcDivCd;           // エンターキー処理区分
            searchCntSetWork.EraNameDispCd1 = cndtn.EraNameDispCd1;           // 元号表示区分１
            // 2008.10.08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            searchCntSetWork.PartsSearchPriDivCd = cndtn.PartsSearchPriDivCd; // 部品検索優先順
            searchCntSetWork.JoinInitDispDiv = cndtn.JoinInitDispDiv;         // 結合初期表示区分
            // 2008.10.08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            // 2008.11.26 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            searchCntSetWork.TotalAmountDispWayCd = cndtn.TotalAmountDispWayCd;// 総額表示方法区分
            // 2008.11.26 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            partsSearchUIData.SearchCntSetWork = searchCntSetWork;
            // 2008.10.01 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/03/17 ADD
            partsSearchUIData.PriceDate = cndtn.PriceApplyDate; // 価格適用日
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/03/17 ADD

            // 2009/12/18 Add >>>
            partsSearchUIData.LogicalMode = (ConstantManagement.LogicalMode)cndtn.LogicalMode;  // 論理削除モード
            // 2009/12/18 Add <<<

            switch (searchPartsType)
            {
                //-------------------------------------------------------------------------
                // BLコード検索
                //-------------------------------------------------------------------------
                case SearchPartsType.BLCode:
                    // BLコード検索
                    // 2008.11.26 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //partsSearchUIData.SearchFlg = SearchFlag.NoPrimeBlSearchFlag;
                    partsSearchUIData.SearchFlg = (cndtn.PartsSearchPriDivCd == 0) ? SearchFlag.BlSearch : SearchFlag.PrimeBlSearch;
                    // 2008.11.26 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //if (cndtn.GoodsNo.EndsWith(ctAster))
                    //{
                    //    // 曖昧検索
                    //    partsSearchUIData.SearchType = SearchType.FreeSearch;
                    //}
                    //else
                    //{
                    //    // ハイフン無し完全一致
                    //    partsSearchUIData.SearchType = SearchType.WholeWordWithNoHyphen;
                    //}
                    partsSearchUIData.SearchType = SearchType.WholeWord;
                    // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    break;
                //-------------------------------------------------------------------------
                // 品番検索(結合検索有り)
                //-------------------------------------------------------------------------
                case SearchPartsType.GoodsNo:
                    // 2008.10.01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //if (cndtn.JoinSearchDiv == (int)GoodsCndtn.JoinSearchDivType.Search)
                    //{
                    //    // 品番結合検索
                    //    partsSearchUIData.SearchFlg = SearchFlag.PartsNoJoinSearch;
                    //}
                    //else
                    //{
                    //    // 部品情報およびセット情報
                    //    partsSearchUIData.SearchFlg = SearchFlag.GoodsAndSetInfo;
                    //}
                    if (cndtn.PartsNoSearchDivCd == 0)
                    {
                        if (cndtn.GoodsNo.EndsWith(cndtn.PartsJoinCntDivCd.Trim()))
                        {
                            // 結合・セット・代替あり
                            partsSearchUIData.SearchFlg = SearchFlag.PartsNoJoinSearch;
                        }
                        else
                        {
                            // セットのみ
                            partsSearchUIData.SearchFlg = SearchFlag.GoodsAndSetInfo;
                        }
                    }
                    else
                    {
                        // 結合・セット・代替あり
                        partsSearchUIData.SearchFlg = SearchFlag.PartsNoJoinSearch;
                    }
                    // 2008.10.01 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // --- UPD T.Nishi 2012/03/02 ---------->>>>>
                    //if (cndtn.GoodsNo.Contains(ctAster))
                    if (cndtn.GoodsNo.EndsWith(ctAster))
                    // --- UPD T.Nishi 2012/03/02 ----------<<<<<
                    {
                        // --- UPD T.Nishi 2012/03/02 ---------->>>>>
                        //if ((cndtn.GoodsNo.StartsWith(ctAster)) && (cndtn.GoodsNo.EndsWith(ctAster)))
                        //{
                        //    // 曖昧検索
                        //    partsSearchUIData.SearchType = SearchType.FreeSearch;
                        //}
                        //else if (cndtn.GoodsNo.StartsWith(ctAster))
                        //{
                        //    // 後方一致検索
                        //    partsSearchUIData.SearchType = SearchType.SuffixSearch;
                        //}
                        //else if (cndtn.GoodsNo.EndsWith(ctAster))
                        //{
                        //    // 前方一致検索
                        //    partsSearchUIData.SearchType = SearchType.PrefixSearch;
                        //}
                        //else
                        //{
                        //    // 曖昧検索
                        //    partsSearchUIData.SearchType = SearchType.FreeSearch;
                        //}
                        // 前方一致検索
                        partsSearchUIData.SearchType = SearchType.PrefixSearch;
                        // --- UPD T.Nishi 2012/03/02 ----------<<<<<
                    }
                    else
                    {
                        if (cndtn.GoodsNo.Contains(ctHyphen))
                        {
                            // 完全一致検索
                            partsSearchUIData.SearchType = SearchType.WholeWord;
                        }
                        else
                        {
                            // ハイフン無し完全一致
                            partsSearchUIData.SearchType = SearchType.WholeWordWithNoHyphen;
                        }
                    }
                    break;
                //-------------------------------------------------------------------------
                // 品番検索(結合検索有り完全一致)
                //-------------------------------------------------------------------------
                case SearchPartsType.GoodsNoWholeWord:
                    if (cndtn.JoinSearchDiv == (int)GoodsCndtn.JoinSearchDivType.Search)
                    {
                        // 品番結合検索
                        partsSearchUIData.SearchFlg = SearchFlag.PartsNoJoinSearch;
                    }
                    else
                    {
                        // 部品情報およびセット情報
                        partsSearchUIData.SearchFlg = SearchFlag.GoodsAndSetInfo;
                    }
                    // 完全一致検索
                    partsSearchUIData.SearchType = SearchType.WholeWord;
                    break;
                //-------------------------------------------------------------------------
                // 品番検索(結合検索無し)
                //-------------------------------------------------------------------------
                case SearchPartsType.GoodsNoNonVariousSearch:
                    // 部品情報のみ
                    partsSearchUIData.SearchFlg = SearchFlag.GoodsInfoOnly;
                    // --- UPD T.Nishi 2012/03/02 ---------->>>>>
                    //if (cndtn.GoodsNo.Contains(ctAster))
                    if (cndtn.GoodsNo.EndsWith(ctAster))
                    // --- UPD T.Nishi 2012/03/02 ----------<<<<<
                    {
                        // --- UPD T.Nishi 2012/03/02 ---------->>>>>
                        //if ((cndtn.GoodsNo.StartsWith(ctAster)) && (cndtn.GoodsNo.EndsWith(ctAster)))
                        //{
                        //    // 曖昧検索
                        //    partsSearchUIData.SearchType = SearchType.FreeSearch;
                        //}
                        //else if (cndtn.GoodsNo.StartsWith(ctAster))
                        //{
                        //    // 後方一致検索
                        //    partsSearchUIData.SearchType = SearchType.SuffixSearch;
                        //}
                        //else if (cndtn.GoodsNo.EndsWith(ctAster))
                        //{
                        //    // 前方一致検索
                        //    partsSearchUIData.SearchType = SearchType.PrefixSearch;
                        //}
                        //else
                        //{
                        //    // 曖昧検索
                        //    partsSearchUIData.SearchType = SearchType.FreeSearch;
                        //}
                        partsSearchUIData.SearchType = SearchType.PrefixSearch;
                        // --- UPD T.Nishi 2012/03/02 ----------<<<<<
                    }
                    else
                    {
                        if (cndtn.GoodsNo.Contains(ctHyphen))
                        {
                            // 完全一致
                            partsSearchUIData.SearchType = SearchType.WholeWord;
                        }
                        else
                        {
                            // ハイフン無し完全一致
                            partsSearchUIData.SearchType = SearchType.WholeWordWithNoHyphen;
                        }
                    }
                    break;
                //-------------------------------------------------------------------------
                // 品番検索(結合検索無し完全一致)
                //-------------------------------------------------------------------------
                case SearchPartsType.GoodsNoNonVariousSearchWholeWord:
                    // 部品情報のみ検索
                    partsSearchUIData.SearchFlg = SearchFlag.GoodsInfoOnly;
                    // 完全一致検索
                    partsSearchUIData.SearchType = SearchType.WholeWord;
                    break;
            }
        }

        // ADD 2014/02/06 SCM仕掛一覧№10632対応 ------------------------------------------------->>>>>
        /// <summary>
        /// 部品検索条件設定処理
        /// </summary>
        /// <param name="cndtnList">商品検索条件オブジェクト</param>
        /// <param name="searchPartsType">部品検索タイプ</param>
        /// <param name="partsSearchUIDataList">部品検索条件オブジェクト</param>
        /// <remarks>
        /// <br>Update Note : 2018/04/05  30757 佐々木　貴英</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : NS3Ai対応（BL統一部品コード対応）</br>
        /// <br>              検索条件へのBL統一部品コードの追加</br>
        /// </remarks>
        private void SettingPartsSearchUIData( List<GoodsCndtn> cndtnList, SearchPartsType searchPartsType, out List<PartsSearchUIData> partsSearchUIDataList )
        {

            partsSearchUIDataList = new List<PartsSearchUIData>();

            foreach (GoodsCndtn cndtn in cndtnList)
            {
                PartsSearchUIData partsSearchUIData = new PartsSearchUIData();

                partsSearchUIData.EnterpriseCode = cndtn.EnterpriseCode;                            // 企業コード
                partsSearchUIData.PartsMakerCode = cndtn.GoodsMakerCd;                              // メーカーコード
                string goodsNo = cndtn.GoodsNo;
                if (goodsNo.EndsWith(ctAster)) goodsNo = goodsNo.Substring(0, goodsNo.Length - 1);
                if (goodsNo.EndsWith(cndtn.PartsJoinCntDivCd)) goodsNo = goodsNo.Substring(0, goodsNo.Length - cndtn.PartsJoinCntDivCd.Length);
                partsSearchUIData.PartsNo = goodsNo;                                                // 品番
                partsSearchUIData.TbsPartsCode = cndtn.BLGoodsCode;                                 // BLコード
                partsSearchUIData.TbsPartsCdDerivedNo = cndtn.BLGoodsDrCode; // BLコード枝番
                // 部品検索条件 優良設定リスト設定
                if ((_drPrmSettingWork != null) && (_drPrmSettingWork.Count > 0)) partsSearchUIData.PrmSettingWork = _drPrmSettingWork;
                partsSearchUIData.SectionCode = cndtn.SectionCode;                                  // 拠点コード
                // ----ADD 2018/04/05 30757 佐々木　貴英 11470007-00 NS3Ai対応（BL統一部品コード対応） ------->>>>>
                partsSearchUIData.BlUtyPtThCd = cndtn.BlUtyPtThCd;                              // BL統一部品コード(スリーコード版)
                partsSearchUIData.BlUtyPtSbCd = cndtn.BlUtyPtSbCd;                              // BL統一部品サブコード
                // ----ADD 2018/04/05 30757 佐々木　貴英 11470007-00 NS3Ai対応（BL統一部品コード対応） -------<<<<<

                SearchCntSetWork searchCntSetWork = new SearchCntSetWork();
                searchCntSetWork.SubstCondDivCd = cndtn.SubstCondDivCd;           // 代替条件区分
                searchCntSetWork.PrmSubstCondDivCd = cndtn.PrmSubstCondDivCd;     // 優良代替条件区分
                searchCntSetWork.SubstApplyDivCd = cndtn.SubstApplyDivCd;         // 代替適用区分
                searchCntSetWork.SearchUICntDivCd = cndtn.SearchUICntDivCd;       // 検索画面制御区分
                searchCntSetWork.EnterProcDivCd = cndtn.EnterProcDivCd;           // エンターキー処理区分
                searchCntSetWork.EraNameDispCd1 = cndtn.EraNameDispCd1;           // 元号表示区分１
                searchCntSetWork.PartsSearchPriDivCd = cndtn.PartsSearchPriDivCd; // 部品検索優先順
                searchCntSetWork.JoinInitDispDiv = cndtn.JoinInitDispDiv;         // 結合初期表示区分
                searchCntSetWork.TotalAmountDispWayCd = cndtn.TotalAmountDispWayCd;// 総額表示方法区分
                partsSearchUIData.SearchCntSetWork = searchCntSetWork;

                partsSearchUIData.PriceDate = cndtn.PriceApplyDate; // 価格適用日

                partsSearchUIData.LogicalMode = (ConstantManagement.LogicalMode)cndtn.LogicalMode;  // 論理削除モード

                switch (searchPartsType)
                {
                    //-------------------------------------------------------------------------
                    // BLコード検索
                    //-------------------------------------------------------------------------
                    case SearchPartsType.BLCode:
                        // BLコード検索
                        partsSearchUIData.SearchFlg = (cndtn.PartsSearchPriDivCd == 0) ? SearchFlag.BlSearch : SearchFlag.PrimeBlSearch;
                        partsSearchUIData.SearchType = SearchType.WholeWord;

                        break;
                    //-------------------------------------------------------------------------
                    // 品番検索(結合検索有り)
                    //-------------------------------------------------------------------------
                    case SearchPartsType.GoodsNo:
                        if (cndtn.PartsNoSearchDivCd == 0)
                        {
                            if (cndtn.GoodsNo.EndsWith(cndtn.PartsJoinCntDivCd.Trim()))
                            {
                                // 結合・セット・代替あり
                                partsSearchUIData.SearchFlg = SearchFlag.PartsNoJoinSearch;
                            }
                            else
                            {
                                // セットのみ
                                partsSearchUIData.SearchFlg = SearchFlag.GoodsAndSetInfo;
                            }
                        }
                        else
                        {
                            // 結合・セット・代替あり
                            partsSearchUIData.SearchFlg = SearchFlag.PartsNoJoinSearch;
                        }
                        if (cndtn.GoodsNo.EndsWith(ctAster))
                        {
                        }
                        else
                        {
                            if (cndtn.GoodsNo.Contains(ctHyphen))
                            {
                                // 完全一致検索
                                partsSearchUIData.SearchType = SearchType.WholeWord;
                            }
                            else
                            {
                                // ハイフン無し完全一致
                                partsSearchUIData.SearchType = SearchType.WholeWordWithNoHyphen;
                            }
                        }
                        break;
                    //-------------------------------------------------------------------------
                    // 品番検索(結合検索有り完全一致)
                    //-------------------------------------------------------------------------
                    case SearchPartsType.GoodsNoWholeWord:
                        if (cndtn.JoinSearchDiv == (int)GoodsCndtn.JoinSearchDivType.Search)
                        {
                            // 品番結合検索
                            partsSearchUIData.SearchFlg = SearchFlag.PartsNoJoinSearch;
                        }
                        else
                        {
                            // 部品情報およびセット情報
                            partsSearchUIData.SearchFlg = SearchFlag.GoodsAndSetInfo;
                        }
                        // 完全一致検索
                        partsSearchUIData.SearchType = SearchType.WholeWord;
                        break;
                    //-------------------------------------------------------------------------
                    // 品番検索(結合検索無し)
                    //-------------------------------------------------------------------------
                    case SearchPartsType.GoodsNoNonVariousSearch:
                        // 部品情報のみ
                        partsSearchUIData.SearchFlg = SearchFlag.GoodsInfoOnly;
                        if (cndtn.GoodsNo.EndsWith(ctAster))
                        {
                            partsSearchUIData.SearchType = SearchType.PrefixSearch;
                        }
                        else
                        {
                            if (cndtn.GoodsNo.Contains(ctHyphen))
                            {
                                // 完全一致
                                partsSearchUIData.SearchType = SearchType.WholeWord;
                            }
                            else
                            {
                                // ハイフン無し完全一致
                                partsSearchUIData.SearchType = SearchType.WholeWordWithNoHyphen;
                            }
                        }
                        break;
                    //-------------------------------------------------------------------------
                    // 品番検索(結合検索無し完全一致)
                    //-------------------------------------------------------------------------
                    case SearchPartsType.GoodsNoNonVariousSearchWholeWord:
                        // 部品情報のみ検索
                        partsSearchUIData.SearchFlg = SearchFlag.GoodsInfoOnly;
                        // 完全一致検索
                        partsSearchUIData.SearchType = SearchType.WholeWord;
                        break;
                }

                partsSearchUIDataList.Add(partsSearchUIData);
            }
        }
        // ADD 2014/02/06 SCM仕掛一覧№10632対応 -------------------------------------------------<<<<<

        /// <summary>
        /// 商品連結データ不足情報設定
        /// </summary>
        /// <param name="goodsCndtn">商品検索条件データオブジェクト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        private void SettingGoodsUnitDataListFromVariousMst(GoodsCndtn goodsCndtn, ref List<GoodsUnitData> goodsUnitDataList)
        {
            List<GoodsUnitData> retGoodsUnitDataList = new List<GoodsUnitData>();

            if ((goodsUnitDataList != null) && (goodsUnitDataList.Count != 0))
            {
                foreach (GoodsUnitData goodsUnitData in goodsUnitDataList)
                {
                    //-------------------------------------------------------------------------
                    // 対象商品連結データクラス取得
                    //-------------------------------------------------------------------------
                    GoodsUnitData retGoodsUnitData = goodsUnitData.Clone();

                    //-------------------------------------------------------------------------
                    // 商品連結データ不足情報設定処理
                    //-------------------------------------------------------------------------
                    // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //this.SettingGoodsUnitDataFromVariousMstProc(goodsCndtn, ref retGoodsUnitData);
                    this.SettingGoodsUnitDataFromVariousMstProc(goodsCndtn, goodsCndtn.IsSettingSupplier, ref retGoodsUnitData);
                    // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    //-------------------------------------------------------------------------
                    // 戻り商品連結データリスト作成
                    //-------------------------------------------------------------------------
                    retGoodsUnitDataList.Add(retGoodsUnitData);
                }
            }
            goodsUnitDataList = retGoodsUnitDataList;
        }
        // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 商品連結データ不足情報設定
        /// </summary>
        /// <param name="goodsCndtn">商品検索条件データオブジェクト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        private void SettingGoodsUnitDataListFromVariousMst(GoodsCndtn goodsCndtn, ref List<GoodsUnitData> goodsUnitDataList, int isSettingSupplier)
        {
            List<GoodsUnitData> retGoodsUnitDataList = new List<GoodsUnitData>();

            if ((goodsUnitDataList != null) && (goodsUnitDataList.Count != 0))
            {
                foreach (GoodsUnitData goodsUnitData in goodsUnitDataList)
                {
                    //-------------------------------------------------------------------------
                    // 対象商品連結データクラス取得
                    //-------------------------------------------------------------------------
                    GoodsUnitData retGoodsUnitData = goodsUnitData.Clone();

                    //-------------------------------------------------------------------------
                    // 商品連結データ不足情報設定処理
                    //-------------------------------------------------------------------------
                    this.SettingGoodsUnitDataFromVariousMstProc(goodsCndtn, isSettingSupplier, ref retGoodsUnitData);

                    //-------------------------------------------------------------------------
                    // 戻り商品連結データリスト作成
                    //-------------------------------------------------------------------------
                    retGoodsUnitDataList.Add(retGoodsUnitData);
                }
            }
            goodsUnitDataList = retGoodsUnitDataList;
        }
        // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// 商品連結データ不足情報設定
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        public void SettingGoodsUnitDataFromVariousMst(ref GoodsUnitData goodsUnitData)
        {
            GoodsCndtn goodsCndtn = new GoodsCndtn();
            // 2008.10.30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //goodsCndtn.SectionCode = this._loginSectionCode;
            if ((goodsUnitData.SectionCode.Trim() == string.Empty) || (goodsUnitData.SectionCode.Trim() == ctAllDefSectionCode))
            {
                goodsCndtn.SectionCode = this._loginSectionCode;
            }
            else
            {
                goodsCndtn.SectionCode = goodsUnitData.SectionCode;
            }
            // 2008.10.30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //this.SettingGoodsUnitDataFromVariousMstProc(goodsCndtn, ref goodsUnitData);
            this.SettingGoodsUnitDataFromVariousMstProc(goodsCndtn, 0, ref goodsUnitData);
            // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        }

        // ADD 2014/02/06 SCM仕掛一覧№10632対応 ------------------------------------------------->>>>>
        /// <summary>
        /// 商品連結データ不足情報設定（商品中分類コード取得のみ）
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        public void SettingGoodsUnitDataFromVariousMstForAutoSearch(ref GoodsUnitData goodsUnitData)
        {
            GoodsCndtn goodsCndtn = new GoodsCndtn();
            if ((goodsUnitData.SectionCode.Trim() == string.Empty) || (goodsUnitData.SectionCode.Trim() == ctAllDefSectionCode))
            {
                goodsCndtn.SectionCode = this._loginSectionCode;
            }
            else
            {
                goodsCndtn.SectionCode = goodsUnitData.SectionCode;
            }
            this.SettingGoodsUnitDataFromVariousMstForAutoSearchProc(goodsCndtn, 0, ref goodsUnitData);
        }
        // ADD 2014/02/06 SCM仕掛一覧№10632対応 -------------------------------------------------<<<<<

        // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 商品連結データ不足情報設定
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        public void SettingGoodsUnitDataFromVariousMst(ref GoodsUnitData goodsUnitData, int isSettingSupplier)
        {
            GoodsCndtn goodsCndtn = new GoodsCndtn();
            if ((goodsUnitData.SectionCode.Trim() == string.Empty) || (goodsUnitData.SectionCode.Trim() == ctAllDefSectionCode))
            {
                goodsCndtn.SectionCode = this._loginSectionCode;
            }
            else
            {
                goodsCndtn.SectionCode = goodsUnitData.SectionCode;
            }
            this.SettingGoodsUnitDataFromVariousMstProc(goodsCndtn, isSettingSupplier, ref goodsUnitData);
        }


        // Add Start 2014/08/11 duzg For 検証／総合テスト障害No.5 ----------------------->>>>>>>>>>>>>
        /// <summary>
        /// 商品連結データ不足情報設定
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        public void SettingGoodsUnitDataFromVariousMst2(ref GoodsUnitData goodsUnitData, int isSettingSupplier)
        {
            GoodsCndtn goodsCndtn = new GoodsCndtn();
            if ((goodsUnitData.SectionCode.Trim() == string.Empty) || (goodsUnitData.SectionCode.Trim() == ctAllDefSectionCode))
            {
                goodsCndtn.SectionCode = this._loginSectionCode;
            }
            else
            {
                goodsCndtn.SectionCode = goodsUnitData.SectionCode;
            }
            this.SettingGoodsUnitDataFromVariousMstProc2(goodsCndtn, isSettingSupplier, ref goodsUnitData);
        }


        /// <summary>
        /// 商品連結データ不足情報設定
        /// </summary>
        /// <param name="goodsCndtn">商品検索条件データオブジェクト</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        private void SettingGoodsUnitDataFromVariousMstProc2(GoodsCndtn goodsCndtn, int isSettingSupplier, ref GoodsUnitData goodsUnitData)
        {
            //-------------------------------------------------------------------------
            // 不足情報設定処理実行有無
            //-------------------------------------------------------------------------
            if (goodsCndtn.IsSettingVariousMst != 0) return;

            //-------------------------------------------------------------------------
            // 対象商品連結データクラス取得
            //-------------------------------------------------------------------------
            GoodsUnitData retGoodsUnitData = goodsUnitData.Clone();

            //-------------------------------------------------------------------------
            // 拠点コードセット
            //-------------------------------------------------------------------------
            retGoodsUnitData.SectionCode = goodsCndtn.SectionCode;

            //-------------------------------------------------------------------------
            // メーカーマスタ
            //-------------------------------------------------------------------------
            MakerUMnt makerUMnt;
            this.GetMaker(this._enterpriseCode, goodsUnitData.GoodsMakerCd, out makerUMnt);
            this.SettingGoodsUnitDataFromMakerUMnt(makerUMnt, ref retGoodsUnitData);

            //-------------------------------------------------------------------------
            // BLコードマスタ
            //-------------------------------------------------------------------------
            BLGoodsCdUMnt bLGoodsCdUMnt;
            this.GetBLGoodsCd(goodsUnitData.BLGoodsCode, out bLGoodsCdUMnt);
            this.SettingGoodsUnitDataFromBLGoodsCdUMnt(bLGoodsCdUMnt, ref retGoodsUnitData);

            //-------------------------------------------------------------------------
            // 商品掛率グループ情報(BLコードマスタから取得した商品掛率グループコードを使用)
            //-------------------------------------------------------------------------
            GoodsGroupU goodsMGroupp = new GoodsGroupU();
            this.GetGoodsMGroup(retGoodsUnitData.GoodsRateGrpCode, out goodsMGroupp);
            this.SettingGoodsUnitDataFromGoodsRateGrpCode(goodsMGroupp, ref retGoodsUnitData);

            //-------------------------------------------------------------------------
            // BLグループマスタ(BLコードマスタのBLグループコードを使用)
            //-------------------------------------------------------------------------
            BLGroupU bLGroupU = null;
            if (bLGoodsCdUMnt != null)
            {
                this.GetBLGroup(bLGoodsCdUMnt.BLGloupCode, out bLGroupU);
                this.SettingGoodsUnitDataFromBLGroupU(bLGroupU, ref retGoodsUnitData);
            }

            //-------------------------------------------------------------------------
            // 商品中分類情報(BLグループマスタの商品中分類コードを使用)
            //-------------------------------------------------------------------------
            if (bLGroupU != null)
            {
                GoodsGroupU goodsMGroup = new GoodsGroupU();
                this.GetGoodsMGroup(bLGroupU.GoodsMGroup, out goodsMGroup);
                this.SettingGoodsUnitDataFromGoodsMGroup(goodsMGroup, ref retGoodsUnitData);
            }

            //-------------------------------------------------------------------------
            // 商品大分類情報(BLグループマスタの商品大分類コードを使用)
            //-------------------------------------------------------------------------
            if (bLGroupU != null)
            {
                UserGdBdU userGdBdU;
                this.GetGoodsLGroup(this._enterpriseCode, bLGroupU.GoodsLGroup, out userGdBdU);
                this.SettingGoodsUnitDataFromGoodsLGroup(userGdBdU, ref retGoodsUnitData);
            }

            //-------------------------------------------------------------------------
            // 商品管理情報
            //-------------------------------------------------------------------------
            this.GetGoodsMngInfo(ref retGoodsUnitData);

            //-------------------------------------------------------------------------
            // 仕入先マスタ(商品管理情報からセットした仕入先を使用)
            //-------------------------------------------------------------------------
            if (isSettingSupplier == 0)
            {
                if (this._isGetSupplier)
                {
                    SupplierWork supplierWork;
                    this.GetSupplier(this._enterpriseCode, retGoodsUnitData.SupplierCd, out supplierWork);
                    this.SettingGoodsUnitDataFromSupplierWork(supplierWork, ref retGoodsUnitData);
                }
                else
                {
                    Supplier supplier;
                    this._supplierAcs.Read(out supplier, this._enterpriseCode, retGoodsUnitData.SupplierCd);
                    this.SettingGoodsUnitDataFromSupplier(supplier, ref retGoodsUnitData);
                }
            }

            //-------------------------------------------------------------------------
            // 優良設定マスタ(BLグループマスタの商品中分類コードを使用)
            //-------------------------------------------------------------------------
            if (bLGroupU != null)
            {
                PrmSettingUWork prmSettingUWork;

                this.GetPrmSettingProc2(this._enterpriseCode, goodsCndtn.SectionCode, bLGroupU.GoodsMGroup, goodsUnitData, out prmSettingUWork);
                this.SettingGoodsUnitDataFromPrmSetting(prmSettingUWork, ref retGoodsUnitData);
            }

            //-------------------------------------------------------------------------
            // 商品区分(自社分類)
            //-------------------------------------------------------------------------
            UserGdBdU enterpriseGanre;
            this.GetEnterpriseGanre(this._enterpriseCode, goodsUnitData.EnterpriseGanreCode, out enterpriseGanre);
            this.SettingGoodsUnitDataFromEnterPriseGanre(enterpriseGanre, ref retGoodsUnitData);

            goodsUnitData = retGoodsUnitData;
        }

        /// <summary>
        /// 優良設定情報取得
        /// </summary>
        private int GetPrmSettingProc2(string enterpriseCode, string sectionCode, int goodsMGroup, GoodsUnitData goodsUnitData, out PrmSettingUWork prmSettingUWork)
        {
            prmSettingUWork = new PrmSettingUWork();

            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            prmSettingUWork = null;

            try
            {
                if (_drPrmSettingWork == null) this.SearchInitial_PrmSetting(this._enterpriseCode);
                if (_drPrmSettingWork == null || _drPrmSettingWork.Count == 0) return status;

                prmSettingUWork = _drPrmSettingWork.Find(
                    delegate(PrmSettingUWork prmSetting)
                    {
                        if ((prmSetting.SectionCode != null && prmSetting.SectionCode.Trim() == sectionCode.Trim()) &&
                            (prmSetting.GoodsMGroup == goodsMGroup) &&
                            (prmSetting.TbsPartsCode == goodsUnitData.BLGoodsCode) &&
                            (prmSetting.PartsMakerCd == goodsUnitData.GoodsMakerCd) &&
                            (prmSetting.PrmSetDtlNo1 == goodsUnitData.PrmSetDtlNo1) &&
                            (prmSetting.PrmSetDtlNo2 == goodsUnitData.PrmSetDtlNo2))
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                );
                // ADD 2015/03/04 SCM高速化Redmine#317対応 --------------------------------->>>>>
                // 拠点で取得できなかった時は全拠点で取得する
                if (prmSettingUWork == null)
                {
                    prmSettingUWork = _drPrmSettingWork.Find(
                        delegate(PrmSettingUWork prmSetting)
                        {
                            if ((prmSetting.SectionCode.Trim() == ctAllDefSectionCode) &&
                                (prmSetting.GoodsMGroup == goodsMGroup) &&
                                (prmSetting.TbsPartsCode == goodsUnitData.BLGoodsCode) &&
                                (prmSetting.PartsMakerCd == goodsUnitData.GoodsMakerCd) &&
                                (prmSetting.PrmSetDtlNo1 == goodsUnitData.PrmSetDtlNo1) &&
                                (prmSetting.PrmSetDtlNo2 == goodsUnitData.PrmSetDtlNo2))
                            {
                                return true;
                            }
                            else
                            {
                                return false;
                            }
                        }
                    );
                }
                // ADD 2015/03/04 SCM高速化Redmine#317対応 ---------------------------------<<<<<
                if (prmSettingUWork != null) status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                return status;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }
            return status;
        }
        // Add Start 2014/08/11 duzg For 検証／総合テスト障害No.5 -----------------------<<<<<<<<<<<<<


        // ADD 2013/07/31 yugami Redmine#39451対応 ----------------------------------->>>>>
        /// <summary>
        /// 商品連結データ不足情報設定（タブレット用）
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        public void SettingGoodsUnitDataFromVariousMstForTablet(ref GoodsUnitData goodsUnitData, int isSettingSupplier)
        {
            GoodsCndtn goodsCndtn = new GoodsCndtn();
            if ((goodsUnitData.SectionCode.Trim() == string.Empty) || (goodsUnitData.SectionCode.Trim() == ctAllDefSectionCode))
            {
                goodsCndtn.SectionCode = this._loginSectionCode;
            }
            else
            {
                goodsCndtn.SectionCode = goodsUnitData.SectionCode;
            }
            this.SettingGoodsUnitDataFromVariousMstForTabletProc(goodsCndtn, isSettingSupplier, ref goodsUnitData);
        }
        // ADD 2013/07/31 yugami Redmine#39451対応 -----------------------------------<<<<<

        /// <summary>
        /// 商品連結データ不足情報設定
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        /// <param name="isSettingVariousMst">0:不足情報セットする 1:不足情報セットしない</param>
        public void SettingGoodsUnitDataFromVariousMst(ref GoodsUnitData goodsUnitData, int isSettingSupplier, int isSettingVariousMst)
        {
            GoodsCndtn goodsCndtn = new GoodsCndtn();
            if ((goodsUnitData.SectionCode.Trim() == string.Empty) || (goodsUnitData.SectionCode.Trim() == ctAllDefSectionCode))
            {
                goodsCndtn.SectionCode = this._loginSectionCode;
            }
            else
            {
                goodsCndtn.SectionCode = goodsUnitData.SectionCode;
            }
            goodsCndtn.IsSettingVariousMst = isSettingVariousMst;
            this.SettingGoodsUnitDataFromVariousMstProc(goodsCndtn, isSettingSupplier, ref goodsUnitData);
        }
        // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 商品連結データ不足情報設定
        /// </summary>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <returns></returns>
        public void SettingGoodsUnitDataListFromVariousMst(ref List<GoodsUnitData> goodsUnitDataList)
        {
            List<GoodsUnitData> retGoodsUnitDataList = new List<GoodsUnitData>();
            foreach (GoodsUnitData goodsUnitData in goodsUnitDataList)
            {
                GoodsUnitData retGoodsUnitData = goodsUnitData.Clone();
                this.SettingGoodsUnitDataFromVariousMst(ref retGoodsUnitData);
                retGoodsUnitDataList.Add(retGoodsUnitData);
            }
            goodsUnitDataList = retGoodsUnitDataList;
        }
        // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        #region 削除
        ///// <summary>
        ///// 商品連結データ不足情報設定
        ///// </summary>
        ///// <param name="goodsCndtn">商品検索条件データオブジェクト</param>
        ///// <param name="goodsUnitData">商品連結データオブジェクト</param>
        //private void SettingGoodsUnitDataFromVariousMstProc(GoodsCndtn goodsCndtn, ref GoodsUnitData goodsUnitData)
        //{
        //    //-------------------------------------------------------------------------
        //    // 対象商品連結データクラス取得
        //    //-------------------------------------------------------------------------
        //    GoodsUnitData retGoodsUnitData = goodsUnitData.Clone();

        //    //-------------------------------------------------------------------------
        //    // 拠点コードセット
        //    //-------------------------------------------------------------------------
        //    retGoodsUnitData.SectionCode = goodsCndtn.SectionCode;

        //    //-------------------------------------------------------------------------
        //    // メーカーマスタ
        //    //-------------------------------------------------------------------------
        //    MakerUMnt makerUMnt;
        //    this.GetMaker(this._enterpriseCode, goodsUnitData.GoodsMakerCd, out makerUMnt);
        //    this.SettingGoodsUnitDataFromMakerUMnt(makerUMnt, ref retGoodsUnitData);

        //    //-------------------------------------------------------------------------
        //    // BLコードマスタ
        //    //-------------------------------------------------------------------------
        //    BLGoodsCdUMnt bLGoodsCdUMnt;
        //    this.GetBLGoodsCd(goodsUnitData.BLGoodsCode, out bLGoodsCdUMnt);
        //    this.SettingGoodsUnitDataFromBLGoodsCdUMnt(bLGoodsCdUMnt, ref retGoodsUnitData);

        //    // 2009.01.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //    //-------------------------------------------------------------------------
        //    // 商品掛率グループ情報(BLコードマスタから取得した商品掛率グループコードを使用)
        //    //-------------------------------------------------------------------------
        //    GoodsGroupU goodsMGroupp = new GoodsGroupU();
        //    this.GetGoodsMGroup(retGoodsUnitData.GoodsRateGrpCode, out goodsMGroupp);
        //    this.SettingGoodsUnitDataFromGoodsRateGrpCode(goodsMGroupp, ref retGoodsUnitData);
        //    // 2009.01.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        //    //-------------------------------------------------------------------------
        //    // BLグループマスタ(BLコードマスタのBLグループコードを使用)
        //    //-------------------------------------------------------------------------
        //    BLGroupU bLGroupU = null;
        //    if (bLGoodsCdUMnt != null)
        //    {
        //        this.GetBLGroup(bLGoodsCdUMnt.BLGloupCode, out bLGroupU);
        //        this.SettingGoodsUnitDataFromBLGroupU(bLGroupU, ref retGoodsUnitData);
        //    }

        //    //-------------------------------------------------------------------------
        //    // 商品中分類情報(BLグループマスタの商品中分類コードを使用)
        //    //-------------------------------------------------------------------------
        //    if (bLGroupU != null)
        //    {
        //        GoodsGroupU goodsMGroup = new GoodsGroupU();
        //        this.GetGoodsMGroup(bLGroupU.GoodsMGroup, out goodsMGroup);
        //        this.SettingGoodsUnitDataFromGoodsMGroup(goodsMGroup, ref retGoodsUnitData);
        //    }

        //    //-------------------------------------------------------------------------
        //    // 商品大分類情報(BLグループマスタの商品大分類コードを使用)
        //    //-------------------------------------------------------------------------
        //    if (bLGroupU != null)
        //    {
        //        UserGdBdU userGdBdU;
        //        this.GetGoodsLGroup(this._enterpriseCode, bLGroupU.GoodsLGroup, out userGdBdU);
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 DEL
        //        //this.SettingGoodsUnitDataFromUserGdBdU(userGdBdU, ref retGoodsUnitData);
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 DEL
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 ADD
        //        this.SettingGoodsUnitDataFromGoodsLGroup( userGdBdU, ref retGoodsUnitData );
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 ADD
        //    }

        //    //-------------------------------------------------------------------------
        //    // 商品管理情報
        //    //-------------------------------------------------------------------------
        //    this.GetGoodsMngInfo(ref retGoodsUnitData);

        //    //-------------------------------------------------------------------------
        //    // 仕入先マスタ(商品管理情報からセットした仕入先を使用)
        //    //-------------------------------------------------------------------------
        //    Supplier supplier;
        //    this._supplierAcs.Read(out supplier, this._enterpriseCode, retGoodsUnitData.SupplierCd);
        //    this.SettingGoodsUnitDataFromSupplier(supplier, ref retGoodsUnitData);

        //    //-------------------------------------------------------------------------
        //    // 優良設定マスタ(BLグループマスタの商品中分類コードを使用)
        //    //-------------------------------------------------------------------------
        //    if (bLGroupU != null)
        //    {
        //        PrmSettingUWork prmSettingUWork;
        //        this.GetPrmSetting(this._enterpriseCode, goodsCndtn.SectionCode, bLGroupU.GoodsMGroup, goodsUnitData.BLGoodsCode, goodsUnitData.GoodsMakerCd, out prmSettingUWork);
        //        this.SettingGoodsUnitDataFromPrmSetting(prmSettingUWork, ref retGoodsUnitData);
        //    }

        //    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 ADD
        //    //-------------------------------------------------------------------------
        //    // 商品区分(自社分類)
        //    //-------------------------------------------------------------------------
        //    UserGdBdU enterpriseGanre;
        //    this.GetEnterpriseGanre( this._enterpriseCode, goodsUnitData.EnterpriseGanreCode, out enterpriseGanre );
        //    this.SettingGoodsUnitDataFromEnterPriseGanre( enterpriseGanre, ref retGoodsUnitData );
        //    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 ADD

        //    goodsUnitData = retGoodsUnitData;
        //}
        #endregion

        /// <summary>
        /// 商品連結データ不足情報設定
        /// </summary>
        /// <param name="goodsCndtn">商品検索条件データオブジェクト</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        private void SettingGoodsUnitDataFromVariousMstProc(GoodsCndtn goodsCndtn, int isSettingSupplier, ref GoodsUnitData goodsUnitData)
        {
            //-------------------------------------------------------------------------
            // 不足情報設定処理実行有無
            //-------------------------------------------------------------------------
            if (goodsCndtn.IsSettingVariousMst != 0) return;

            //-------------------------------------------------------------------------
            // 対象商品連結データクラス取得
            //-------------------------------------------------------------------------
            GoodsUnitData retGoodsUnitData = goodsUnitData.Clone();

            //-------------------------------------------------------------------------
            // 拠点コードセット
            //-------------------------------------------------------------------------
            retGoodsUnitData.SectionCode = goodsCndtn.SectionCode;

            //-------------------------------------------------------------------------
            // メーカーマスタ
            //-------------------------------------------------------------------------
            //GoodsAcs.LogWrite("▼メーカー情報セット　開始");
            MakerUMnt makerUMnt;
            this.GetMaker(this._enterpriseCode, goodsUnitData.GoodsMakerCd, out makerUMnt);
            this.SettingGoodsUnitDataFromMakerUMnt(makerUMnt, ref retGoodsUnitData);
            //GoodsAcs.LogWrite("▲メーカー情報セット　終了");

            //GoodsAcs.LogWrite("▼ＢＬコード情報　開始");
            //-------------------------------------------------------------------------
            // BLコードマスタ
            //-------------------------------------------------------------------------
            BLGoodsCdUMnt bLGoodsCdUMnt;
            this.GetBLGoodsCd(goodsUnitData.BLGoodsCode, out bLGoodsCdUMnt);
            this.SettingGoodsUnitDataFromBLGoodsCdUMnt(bLGoodsCdUMnt, ref retGoodsUnitData);
            //GoodsAcs.LogWrite("▲ＢＬコード情報　終了");

            //-------------------------------------------------------------------------
            // 商品掛率グループ情報(BLコードマスタから取得した商品掛率グループコードを使用)
            //-------------------------------------------------------------------------
            //GoodsAcs.LogWrite("▼商品掛率グループ情報　開始");
            GoodsGroupU goodsMGroupp = new GoodsGroupU();
            this.GetGoodsMGroup(retGoodsUnitData.GoodsRateGrpCode, out goodsMGroupp);
            this.SettingGoodsUnitDataFromGoodsRateGrpCode(goodsMGroupp, ref retGoodsUnitData);
            //GoodsAcs.LogWrite("▲商品掛率グループ情報　終了");

            //-------------------------------------------------------------------------
            // BLグループマスタ(BLコードマスタのBLグループコードを使用)
            //-------------------------------------------------------------------------
            BLGroupU bLGroupU = null;
            if (bLGoodsCdUMnt != null)
            {
                //GoodsAcs.LogWrite("▼ＢＬグループ情報　開始");
                this.GetBLGroup(bLGoodsCdUMnt.BLGloupCode, out bLGroupU);
                this.SettingGoodsUnitDataFromBLGroupU(bLGroupU, ref retGoodsUnitData);
                //GoodsAcs.LogWrite("▲ＢＬグループ情報　終了");
            }

            //-------------------------------------------------------------------------
            // 商品中分類情報(BLグループマスタの商品中分類コードを使用)
            //-------------------------------------------------------------------------
            if (bLGroupU != null)
            {
                //GoodsAcs.LogWrite("▼中分類情報　開始");
                GoodsGroupU goodsMGroup = new GoodsGroupU();
                this.GetGoodsMGroup(bLGroupU.GoodsMGroup, out goodsMGroup);
                this.SettingGoodsUnitDataFromGoodsMGroup(goodsMGroup, ref retGoodsUnitData);
                //GoodsAcs.LogWrite("▲中分類情報　終了");
            }

            //-------------------------------------------------------------------------
            // 商品大分類情報(BLグループマスタの商品大分類コードを使用)
            //-------------------------------------------------------------------------
            if (bLGroupU != null)
            {
                //GoodsAcs.LogWrite("▼大分類情報　開始");
                UserGdBdU userGdBdU;
                this.GetGoodsLGroup(this._enterpriseCode, bLGroupU.GoodsLGroup, out userGdBdU);
                this.SettingGoodsUnitDataFromGoodsLGroup(userGdBdU, ref retGoodsUnitData);
                //GoodsAcs.LogWrite("▲大分類情報　終了");
            }

            //-------------------------------------------------------------------------
            // 商品管理情報
            //-------------------------------------------------------------------------
            //GoodsAcs.LogWrite("▼商品管理情報　開始");
            this.GetGoodsMngInfo(ref retGoodsUnitData);
            //GoodsAcs.LogWrite("▲商品管理情報　終了");

            //-------------------------------------------------------------------------
            // 仕入先マスタ(商品管理情報からセットした仕入先を使用)
            //-------------------------------------------------------------------------
            if (isSettingSupplier == 0)
            {
                // 2009.04.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                ////GoodsAcs.LogWrite("▼仕入先情報　開始");
                //Supplier supplier;
                //this._supplierAcs.Read(out supplier, this._enterpriseCode, retGoodsUnitData.SupplierCd);
                //this.SettingGoodsUnitDataFromSupplier(supplier, ref retGoodsUnitData);
                ////GoodsAcs.LogWrite("▲仕入先情報　終了");

                //GoodsAcs.LogWrite("▼仕入先情報　開始");
                if (this._isGetSupplier)
                {
                    SupplierWork supplierWork;
                    this.GetSupplier(this._enterpriseCode, retGoodsUnitData.SupplierCd, out supplierWork);
                    this.SettingGoodsUnitDataFromSupplierWork(supplierWork, ref retGoodsUnitData);
                }
                else
                {
                    Supplier supplier;
                    this._supplierAcs.Read(out supplier, this._enterpriseCode, retGoodsUnitData.SupplierCd);
                    this.SettingGoodsUnitDataFromSupplier(supplier, ref retGoodsUnitData);
                }
                //GoodsAcs.LogWrite("▲仕入先情報　終了");
                // 2009.04.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            }

            //-------------------------------------------------------------------------
            // 優良設定マスタ(BLグループマスタの商品中分類コードを使用)
            //-------------------------------------------------------------------------
            if (bLGroupU != null)
            {
                //GoodsAcs.LogWrite("▼優良設定情報　開始");
                PrmSettingUWork prmSettingUWork;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 DEL
                //this.GetPrmSetting(this._enterpriseCode, goodsCndtn.SectionCode, bLGroupU.GoodsMGroup, goodsUnitData.BLGoodsCode, goodsUnitData.GoodsMakerCd, out prmSettingUWork);
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 ADD
                //this.GetPrmSettingProc(this._enterpriseCode, goodsCndtn.SectionCode, bLGroupU.GoodsMGroup, goodsUnitData.BLGoodsCode, goodsUnitData.GoodsMakerCd, out prmSettingUWork);// Del 2014/08/11 duzg For 検証／総合テスト障害No.5
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 ADD
                this.GetPrmSettingProc2(this._enterpriseCode, goodsCndtn.SectionCode, bLGroupU.GoodsMGroup, goodsUnitData, out prmSettingUWork);// Add 2014/08/11 duzg For 検証／総合テスト障害No.5

                this.SettingGoodsUnitDataFromPrmSetting(prmSettingUWork, ref retGoodsUnitData);
                //GoodsAcs.LogWrite("▲優良設定情報　終了");
            }

            //-------------------------------------------------------------------------
            // 商品区分(自社分類)
            //-------------------------------------------------------------------------
            //GoodsAcs.LogWrite("▼商品区分(自社分類)　開始");
            UserGdBdU enterpriseGanre;
            this.GetEnterpriseGanre(this._enterpriseCode, goodsUnitData.EnterpriseGanreCode, out enterpriseGanre);
            this.SettingGoodsUnitDataFromEnterPriseGanre(enterpriseGanre, ref retGoodsUnitData);
            //GoodsAcs.LogWrite("▲商品区分(自社分類)　終了");

            goodsUnitData = retGoodsUnitData;
        }
        // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // ADD 2014/02/06 SCM仕掛一覧№10632対応 ------------------------------------------------->>>>>
        /// <summary>
        /// 商品連結データ不足情報設定（商品中分類コード取得のみ）
        /// </summary>
        /// <param name="goodsCndtn">商品検索条件データオブジェクト</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        private void SettingGoodsUnitDataFromVariousMstForAutoSearchProc(GoodsCndtn goodsCndtn, int isSettingSupplier, ref GoodsUnitData goodsUnitData)
        {
            //-------------------------------------------------------------------------
            // 対象商品連結データクラス取得
            //-------------------------------------------------------------------------
            GoodsUnitData retGoodsUnitData = goodsUnitData.Clone();

            //-------------------------------------------------------------------------
            // 拠点コードセット
            //-------------------------------------------------------------------------
            retGoodsUnitData.SectionCode = goodsCndtn.SectionCode;

            //GoodsAcs.LogWrite("▼ＢＬコード情報　開始");
            //-------------------------------------------------------------------------
            // BLコードマスタ
            //-------------------------------------------------------------------------
            BLGoodsCdUMnt bLGoodsCdUMnt;
            this.GetBLGoodsCd(goodsUnitData.BLGoodsCode, out bLGoodsCdUMnt);
            this.SettingGoodsUnitDataFromBLGoodsCdUMnt(bLGoodsCdUMnt, ref retGoodsUnitData);
            //GoodsAcs.LogWrite("▲ＢＬコード情報　終了");

            //-------------------------------------------------------------------------
            // BLグループマスタ(BLコードマスタのBLグループコードを使用)
            //-------------------------------------------------------------------------
            BLGroupU bLGroupU = null;
            if (bLGoodsCdUMnt != null)
            {
                //GoodsAcs.LogWrite("▼ＢＬグループ情報　開始");
                this.GetBLGroup(bLGoodsCdUMnt.BLGloupCode, out bLGroupU);
                this.SettingGoodsUnitDataFromBLGroupU(bLGroupU, ref retGoodsUnitData);
                //GoodsAcs.LogWrite("▲ＢＬグループ情報　終了");
            }

            //-------------------------------------------------------------------------
            // 商品中分類情報(BLグループマスタの商品中分類コードを使用)
            //-------------------------------------------------------------------------
            if (bLGroupU != null)
            {
                //GoodsAcs.LogWrite("▼中分類情報　開始");
                GoodsGroupU goodsMGroup = new GoodsGroupU();
                this.GetGoodsMGroup(bLGroupU.GoodsMGroup, out goodsMGroup);
                this.SettingGoodsUnitDataFromGoodsMGroup(goodsMGroup, ref retGoodsUnitData);
                //GoodsAcs.LogWrite("▲中分類情報　終了");
            }

            //-------------------------------------------------------------------------
            // 優良設定マスタ(BLグループマスタの商品中分類コードを使用)
            //-------------------------------------------------------------------------
            if (bLGroupU != null)
            {
                //GoodsAcs.LogWrite("▼優良設定情報　開始");
                PrmSettingUWork prmSettingUWork;
                //this.GetPrmSettingProc(this._enterpriseCode, goodsCndtn.SectionCode, bLGroupU.GoodsMGroup, goodsUnitData.BLGoodsCode, goodsUnitData.GoodsMakerCd, out prmSettingUWork);// DEL 2014/08/11 duzg For 検証／総合テスト障害No.5
                this.GetPrmSettingProc2(this._enterpriseCode, goodsCndtn.SectionCode, bLGroupU.GoodsMGroup, goodsUnitData, out prmSettingUWork);// Add 2014/08/11 duzg For 検証／総合テスト障害No.5
                this.SettingGoodsUnitDataFromPrmSetting(prmSettingUWork, ref retGoodsUnitData);
                //GoodsAcs.LogWrite("▲優良設定情報　終了");
            }

            goodsUnitData = retGoodsUnitData;
        }
        // ADD 2014/02/06 SCM仕掛一覧№10632対応 -------------------------------------------------<<<<<

        // ADD 2013/07/31 yugami Redmine#39451対応 ----------------------------------->>>>>
        /// <summary>
        /// 商品連結データ不足情報設定（タブレット用）
        /// </summary>
        /// <param name="goodsCndtn">商品検索条件データオブジェクト</param>
        /// <param name="isSettingSupplier">0:仕入先情報セットする 1:仕入先情報セットしない</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        private void SettingGoodsUnitDataFromVariousMstForTabletProc(GoodsCndtn goodsCndtn, int isSettingSupplier, ref GoodsUnitData goodsUnitData)
        {
            //-------------------------------------------------------------------------
            // 不足情報設定処理実行有無
            //-------------------------------------------------------------------------
            if (goodsCndtn.IsSettingVariousMst != 0) return;

            //-------------------------------------------------------------------------
            // 対象商品連結データクラス取得
            //-------------------------------------------------------------------------
            GoodsUnitData retGoodsUnitData = goodsUnitData.Clone();

            //-------------------------------------------------------------------------
            // 拠点コードセット
            //-------------------------------------------------------------------------
            retGoodsUnitData.SectionCode = goodsCndtn.SectionCode;

            //-------------------------------------------------------------------------
            // メーカーマスタ
            //-------------------------------------------------------------------------
            //GoodsAcs.LogWrite("▼メーカー情報セット　開始");
            MakerUMnt makerUMnt;
            this.GetMaker(this._enterpriseCode, goodsUnitData.GoodsMakerCd, out makerUMnt);
            this.SettingGoodsUnitDataFromMakerUMnt(makerUMnt, ref retGoodsUnitData);
            //GoodsAcs.LogWrite("▲メーカー情報セット　終了");

            //GoodsAcs.LogWrite("▼ＢＬコード情報　開始");
            //-------------------------------------------------------------------------
            // BLコードマスタ
            //-------------------------------------------------------------------------
            BLGoodsCdUMnt bLGoodsCdUMnt;
            this.GetBLGoodsCd(goodsUnitData.BLGoodsCode, out bLGoodsCdUMnt);
            this.SettingGoodsUnitDataFromBLGoodsCdUMnt(bLGoodsCdUMnt, ref retGoodsUnitData);
            //GoodsAcs.LogWrite("▲ＢＬコード情報　終了");

            //-------------------------------------------------------------------------
            // 商品掛率グループ情報(BLコードマスタから取得した商品掛率グループコードを使用)
            //-------------------------------------------------------------------------
            //GoodsAcs.LogWrite("▼商品掛率グループ情報　開始");
            GoodsGroupU goodsMGroupp = new GoodsGroupU();
            this.GetGoodsMGroup(retGoodsUnitData.GoodsRateGrpCode, out goodsMGroupp);
            this.SettingGoodsUnitDataFromGoodsRateGrpCode(goodsMGroupp, ref retGoodsUnitData);
            //GoodsAcs.LogWrite("▲商品掛率グループ情報　終了");

            //-------------------------------------------------------------------------
            // BLグループマスタ(BLコードマスタのBLグループコードを使用)
            //-------------------------------------------------------------------------
            BLGroupU bLGroupU = null;
            if (bLGoodsCdUMnt != null)
            {
                //GoodsAcs.LogWrite("▼ＢＬグループ情報　開始");
                this.GetBLGroup(bLGoodsCdUMnt.BLGloupCode, out bLGroupU);
                this.SettingGoodsUnitDataFromBLGroupU(bLGroupU, ref retGoodsUnitData);
                //GoodsAcs.LogWrite("▲ＢＬグループ情報　終了");
            }

            //-------------------------------------------------------------------------
            // 商品中分類情報(BLグループマスタの商品中分類コードを使用)
            //-------------------------------------------------------------------------
            if (bLGroupU != null)
            {
                //GoodsAcs.LogWrite("▼中分類情報　開始");
                GoodsGroupU goodsMGroup = new GoodsGroupU();
                this.GetGoodsMGroup(bLGroupU.GoodsMGroup, out goodsMGroup);
                this.SettingGoodsUnitDataFromGoodsMGroup(goodsMGroup, ref retGoodsUnitData);
                //GoodsAcs.LogWrite("▲中分類情報　終了");
            }

            //-------------------------------------------------------------------------
            // 商品大分類情報(BLグループマスタの商品大分類コードを使用)
            //-------------------------------------------------------------------------
            if (bLGroupU != null)
            {
                //GoodsAcs.LogWrite("▼大分類情報　開始");
                UserGdBdU userGdBdU;
                this.GetGoodsLGroup(this._enterpriseCode, bLGroupU.GoodsLGroup, out userGdBdU);
                this.SettingGoodsUnitDataFromGoodsLGroup(userGdBdU, ref retGoodsUnitData);
                //GoodsAcs.LogWrite("▲大分類情報　終了");
            }

            //-------------------------------------------------------------------------
            // 商品管理情報
            //-------------------------------------------------------------------------
            //GoodsAcs.LogWrite("▼商品管理情報　開始");
            this.GetGoodsMngInfoForTablet(ref retGoodsUnitData);
            //GoodsAcs.LogWrite("▲商品管理情報　終了");

            //-------------------------------------------------------------------------
            // 仕入先マスタ(商品管理情報からセットした仕入先を使用)
            //-------------------------------------------------------------------------
            if (isSettingSupplier == 0)
            {
                // 2009.04.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                ////GoodsAcs.LogWrite("▼仕入先情報　開始");
                //Supplier supplier;
                //this._supplierAcs.Read(out supplier, this._enterpriseCode, retGoodsUnitData.SupplierCd);
                //this.SettingGoodsUnitDataFromSupplier(supplier, ref retGoodsUnitData);
                ////GoodsAcs.LogWrite("▲仕入先情報　終了");

                //GoodsAcs.LogWrite("▼仕入先情報　開始");
                if (this._isGetSupplier)
                {
                    SupplierWork supplierWork;
                    this.GetSupplier(this._enterpriseCode, retGoodsUnitData.SupplierCd, out supplierWork);
                    this.SettingGoodsUnitDataFromSupplierWork(supplierWork, ref retGoodsUnitData);
                }
                else
                {
                    Supplier supplier;
                    this._supplierAcs.Read(out supplier, this._enterpriseCode, retGoodsUnitData.SupplierCd);
                    this.SettingGoodsUnitDataFromSupplier(supplier, ref retGoodsUnitData);
                }
                //GoodsAcs.LogWrite("▲仕入先情報　終了");
                // 2009.04.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            }

            //-------------------------------------------------------------------------
            // 優良設定マスタ(BLグループマスタの商品中分類コードを使用)
            //-------------------------------------------------------------------------
            if (bLGroupU != null)
            {
                //GoodsAcs.LogWrite("▼優良設定情報　開始");
                PrmSettingUWork prmSettingUWork;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 DEL
                //this.GetPrmSetting(this._enterpriseCode, goodsCndtn.SectionCode, bLGroupU.GoodsMGroup, goodsUnitData.BLGoodsCode, goodsUnitData.GoodsMakerCd, out prmSettingUWork);
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 ADD
                //this.GetPrmSettingProc(this._enterpriseCode, goodsCndtn.SectionCode, bLGroupU.GoodsMGroup, goodsUnitData.BLGoodsCode, goodsUnitData.GoodsMakerCd, out prmSettingUWork);// DEL 2014/08/11 duzg For 検証／総合テスト障害No.5
                this.GetPrmSettingProc2(this._enterpriseCode, goodsCndtn.SectionCode, bLGroupU.GoodsMGroup, goodsUnitData, out prmSettingUWork);// Add 2014/08/11 duzg For 検証／総合テスト障害No.5
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 ADD
                this.SettingGoodsUnitDataFromPrmSetting(prmSettingUWork, ref retGoodsUnitData);
                //GoodsAcs.LogWrite("▲優良設定情報　終了");
            }

            //-------------------------------------------------------------------------
            // 商品区分(自社分類)
            //-------------------------------------------------------------------------
            //GoodsAcs.LogWrite("▼商品区分(自社分類)　開始");
            UserGdBdU enterpriseGanre;
            this.GetEnterpriseGanre(this._enterpriseCode, goodsUnitData.EnterpriseGanreCode, out enterpriseGanre);
            this.SettingGoodsUnitDataFromEnterPriseGanre(enterpriseGanre, ref retGoodsUnitData);
            //GoodsAcs.LogWrite("▲商品区分(自社分類)　終了");

            goodsUnitData = retGoodsUnitData;
        }

        // ADD 2013/07/31 yugami Redmine#39451対応 -----------------------------------<<<<<


        /// <summary>
        /// ＢＬコード関連マスタ取得処理
        /// </summary>
        /// <param name="blGoodsCode">取得対象のBLコード</param>
        /// <param name="bLGoodsCdUMnt">BLコード</param>
        /// <param name="bLGroupU">グループコード</param>
        /// <param name="goodsGroupU">中分類</param>
        /// <param name="userGdBdU">大分類</param>
        /// <remarks>BLｺｰﾄﾞ関連マスタ（BLｺｰﾄﾞ→ｸﾞﾙｰﾌﾟｺｰﾄﾞ→中分類→大分類）を取得します。</remarks>
        public void GetBLGoodsRelation(int blGoodsCode, out BLGoodsCdUMnt bLGoodsCdUMnt, out BLGroupU bLGroupU, out GoodsGroupU goodsGroupU, out UserGdBdU userGdBdU)
        {
            // 初期化
            bLGoodsCdUMnt = null;
            bLGroupU = null;
            goodsGroupU = null;
            userGdBdU = null;

            // BLコードマスタ
            this.GetBLGoodsCd(blGoodsCode, out bLGoodsCdUMnt);

            if (bLGoodsCdUMnt != null)
            {
                // BLグループマスタ(BLコードマスタのBLグループコードを使用)
                this.GetBLGroup(bLGoodsCdUMnt.BLGloupCode, out bLGroupU);

                if (bLGroupU != null)
                {
                    // 商品中分類情報(BLグループマスタの商品中分類コードを使用)
                    this.GetGoodsMGroup(bLGroupU.GoodsMGroup, out goodsGroupU);

                    if (bLGroupU != null)
                    {
                        // 商品大分類情報(BLグループマスタの商品大分類コードを使用)
                        this.GetGoodsLGroup(this._enterpriseCode, bLGroupU.GoodsLGroup, out userGdBdU);
                    }
                }
            }

            // 未取得クラスインスタンスは初期化してから返す
            if (bLGoodsCdUMnt == null) bLGoodsCdUMnt = new BLGoodsCdUMnt();
            if (bLGroupU == null) bLGroupU = new BLGroupU();
            if (goodsGroupU == null) goodsGroupU = new GoodsGroupU();
            if (userGdBdU == null) userGdBdU = new UserGdBdU();
        }

        /// <summary>
        /// 商品連結データオブジェクトリスト取得処理
        /// </summary>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="goodsKind">商品種別(0:全て 1:親 2:結合子 4:セット子 8:代替子 16:複数互換子)</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        public void GetGoodsUnitDataListFromPartsInfoDataSet(PartsInfoDataSet partsInfoDataSet, GoodsKind goodsKind, out List<GoodsUnitData> goodsUnitDataList)
        {
            goodsUnitDataList = partsInfoDataSet.GetGoodsList((int)goodsKind);
        }

        /// <summary>
        /// 商品連結データオブジェクトリスト取得処理
        /// </summary>
        /// <param name="partsInfoDataSet">部品検索データセット</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="goodsKind">商品種別(0:全て 1:親 2:結合子 4:セット子 8:代替子 16:複数互換子)</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        public void GetGoodsUnitDataListFromPartsInfoDataSet(PartsInfoDataSet partsInfoDataSet, int makerCode, string goodsNo, GoodsKind goodsKind, out List<GoodsUnitData> goodsUnitDataList)
        {
            goodsUnitDataList = partsInfoDataSet.GetGoodsList((int)goodsKind, makerCode, goodsNo);
        }
        #endregion
        #endregion

        #region ■ 商品検索(ユーザー)
        // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>
        ///// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ)
        ///// </summary>
        ///// <param name="cndtn">商品検索条件データオブジェクト</param>
        ///// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        ///// <param name="msg">エラーメッセージ</param>
        ///// <returns>ConstantManagement.DB_Status</returns>
        ///// <remarks>検索対象はユーザー登録分のみ</remarks>
        //public int Search(GoodsCndtn cndtn, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        //{
        //    return this.SearchProc(cndtn, ConstantManagement.LogicalMode.GetData0, out goodsUnitDataList, out msg);
        //}
        ///// <summary>
        ///// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ)
        ///// </summary>
        ///// <param name="cndtn">商品検索条件データオブジェクト</param>
        ///// <param name="logicalMode">論理削除データ取得区分</param>
        ///// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        ///// <param name="msg">エラーメッセージ</param>
        ///// <returns>ConstantManagement.DB_Status</returns>
        ///// <remarks>検索対象はユーザー登録分のみ</remarks>
        //public int Search(GoodsCndtn cndtn, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        //{
        //    return this.SearchProc(cndtn, logicalMode, out goodsUnitDataList, out msg);
        //}
        /// <summary>
        /// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>検索対象はユーザー登録分のみ</remarks>
        public int Search(GoodsCndtn cndtn, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            // -- UPD 2011/03/17 --------------------------->>>
            //return this.SearchProc(cndtn, 0, ConstantManagement.LogicalMode.GetData0, out goodsUnitDataList, out msg);
            return this.SearchProc(cndtn, 0, ConstantManagement.LogicalMode.GetData0, 0, out goodsUnitDataList, out msg);
            // -- UPD 2011/03/17 ---------------------------<<<
        }

        // -- ADD 2011/03/17 ------------------------------------>>>
        /// <summary>
        /// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ在庫検索無し)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>検索対象はユーザー登録分のみ</remarks>
        public int GoodsOnlySearch(GoodsCndtn cndtn, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchProc(cndtn, 0, ConstantManagement.LogicalMode.GetData0, 1, out goodsUnitDataList, out msg);
        }
        // -- ADD 2011/03/17 ------------------------------------<<<

        // -- ADD 2011/07/28 ------------------------------------>>>
        /// <summary>
        /// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ在庫検索無し、論理削除分も取得対象)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="logicalMode">論理削除区分</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>検索対象はユーザー登録分のみ</remarks>
        public int GoodsOnlySearch(GoodsCndtn cndtn, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchProc(cndtn, 0, logicalMode, 1, out goodsUnitDataList, out msg);
        }
        // -- ADD 2011/07/28 ------------------------------------<<<

        /// <summary>
        /// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="maxCount">取得ＭＡＸ件数(ゼロの場合、無制限)</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>検索対象はユーザー登録分のみ</remarks>
        public int Search(GoodsCndtn cndtn, int maxCount, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            // -- UPD 2011/03/17 ---------------------------------->>>
            //return this.SearchProc(cndtn, maxCount, ConstantManagement.LogicalMode.GetData0, out goodsUnitDataList, out msg);
            return this.SearchProc(cndtn, maxCount, ConstantManagement.LogicalMode.GetData0, 0, out goodsUnitDataList, out msg);
            // -- UPD 2011/03/17 ----------------------------------<<<
        }

        // 2013.02.19 橋本 ADD START ==============================================
        #region Search(得意先電子元帳だけ)
        /// <summary>
        /// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="logicalMode">論理削除データ取得区分</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <param name="isSettingVariousMst"></param>
        /// <remarks>検索対象はユーザー登録分のみ</remarks>
        public int Search(GoodsCndtn cndtn, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg, int isSettingVariousMst)
        {
            return SearchProc(cndtn, 0, logicalMode, 0, out goodsUnitDataList, out msg, isSettingVariousMst);
        }
        #endregion
        // 2013.02.19 橋本 ADD END   ==============================================

        /// <summary>
        /// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="logicalMode">論理削除データ取得区分</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>検索対象はユーザー登録分のみ</remarks>
        public int Search(GoodsCndtn cndtn, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            // -- UPD 2011/03/17 -------------------------------->>>
            //return this.SearchProc(cndtn, 0, logicalMode, out goodsUnitDataList, out msg);
            return this.SearchProc(cndtn, 0, logicalMode, 0, out goodsUnitDataList, out msg);
            // -- UPD 2011/03/17 --------------------------------<<<
        }

        /// <summary>
        /// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="maxCount">取得ＭＡＸ件数(ゼロの場合、無制限)</param>
        /// <param name="logicalMode">論理削除データ取得区分</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>検索対象はユーザー登録分のみ</remarks>
        public int Search(GoodsCndtn cndtn, int maxCount, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            // -- UPD 2011/03/17 ----------------------->>>
            //return this.SearchProc(cndtn, maxCount, logicalMode, out goodsUnitDataList, out msg);
            return this.SearchProc(cndtn, maxCount, logicalMode, 0, out goodsUnitDataList, out msg);
            // -- UPD 2011/03/17 -----------------------<<<
        }
        // 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        #region 削除
        ///// <summary>
        ///// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ)
        ///// </summary>
        ///// <param name="cndtn">商品検索条件データオブジェクト</param>
        ///// <param name="logicalMode">論理削除データ取得区分</param>
        ///// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        ///// <param name="msg">エラーメッセージ</param>
        ///// <returns>ConstantManagement.DB_Status</returns>
        ///// <remarks>検索対象はユーザー登録分のみ</remarks>
        //private int SearchProc(GoodsCndtn cndtn, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        //{
        //    //----------------------------------------------------------------------------
        //    // 初期処理
        //    //----------------------------------------------------------------------------
        //    int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //    Dictionary<string, GoodsUnitData> wrkRet = new Dictionary<string, GoodsUnitData>();
        //    goodsUnitDataList = new List<GoodsUnitData>();

        //    if (_drGoods == null)
        //        _drGoods = new Dictionary<string, GoodsUnitData>();
        //    else
        //        _drGoods.Clear();

        //    //----------------------------------------------------------------------------
        //    // 初期値データが取得されていなければ初期値データを取得する
        //    //----------------------------------------------------------------------------
        //    if (!_isInitialSearch)
        //    {
        //        // 2008.10.30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //        //status = this.SearchInitial(cndtn.EnterpriseCode, this._loginSectionCode, out msg);
        //        status = this.SearchInitial(cndtn.EnterpriseCode, cndtn.SectionCode, out msg);
        //        // 2008.10.30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        //        switch (status)
        //        {
        //            case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
        //                break;
        //            case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
        //            case (int)ConstantManagement.DB_Status.ctDB_EOF:
        //                break;
        //            default:
        //                return status;
        //        }
        //    }

        //    //----------------------------------------------------------------------------
        //    // 商品連結データ取得(ユーザー登録分)
        //    //----------------------------------------------------------------------------
        //    List<GoodsUnitData> goodsUList;
        //    status = this.SearchUserDB(cndtn, logicalMode, out goodsUList, out msg);
        //    switch (status)
        //    {
        //        case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
        //            foreach (GoodsUnitData goodsUnitData in goodsUList)
        //            {
        //                GoodsUnitData gUnitData = goodsUnitData;
        //                // 2008.10.30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //                gUnitData.SectionCode = cndtn.SectionCode;
        //                // 2008.10.30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

        //                //----------------------------------------------------------------------------
        //                // 商品連結データ不足情報設定
        //                //----------------------------------------------------------------------------
        //                this.SettingGoodsUnitDataFromVariousMst(ref gUnitData);

        //                // Dictionaryリストに追加する
        //                this.AddGoodsDictionaryList(ref wrkRet, gUnitData);
        //                this.AddGoodsDictionaryList(ref _drGoods, gUnitData);
        //            }
        //            break;
        //        case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
        //        case (int)ConstantManagement.DB_Status.ctDB_EOF:
        //            break;
        //        default:
        //            return status;
        //    }

        //    //----------------------------------------------------------------------------
        //    // ステータス判定
        //    //----------------------------------------------------------------------------
        //    if (wrkRet == null || wrkRet.Count == 0)
        //    {
        //        msg = "該当する商品はみつかりませんでした";
        //        return (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //    }
        //    else
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
        //    }

        //    //----------------------------------------------------------------------------
        //    // 商品連結データオブジェクトリスト生成
        //    //----------------------------------------------------------------------------
        //    goodsUnitDataList = new List<GoodsUnitData>(wrkRet.Values);

        //    return status;
        //}
        #endregion

        // -- UPD 2011/03/17 ------------------------------------------->>>
        // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /////// <summary>
        /////// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ)
        /////// </summary>
        /////// <param name="cndtn">商品検索条件データオブジェクト</param>
        /////// <param name="logicalMode">論理削除データ取得区分</param>
        /////// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /////// <param name="msg">エラーメッセージ</param>
        /////// <returns>ConstantManagement.DB_Status</returns>
        /////// <remarks>検索対象はユーザー登録分のみ</remarks>
        ////private int SearchProc(GoodsCndtn cndtn, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        ///// <summary>
        ///// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ)
        ///// </summary>
        ///// <param name="cndtn">商品検索条件データオブジェクト</param>
        ///// <param name="maxCount">取得ＭＡＸ件数(ゼロの場合、無制限)</param>
        ///// <param name="logicalMode">論理削除データ取得区分</param>
        ///// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        ///// <param name="msg">エラーメッセージ</param>
        ///// <returns>ConstantManagement.DB_Status</returns>
        ///// <remarks>検索対象はユーザー登録分のみ</remarks>
        //private int SearchProc(GoodsCndtn cndtn, int maxCount, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        //// 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="maxCount">取得ＭＡＸ件数(ゼロの場合、無制限)</param>
        /// <param name="logicalMode">論理削除データ取得区分</param>
        /// <param name="stockSearchDiv">0：在庫の取得も行う 1:在庫の取得は行わない</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>検索対象はユーザー登録分のみ</remarks>
        private int SearchProc(GoodsCndtn cndtn, int maxCount, ConstantManagement.LogicalMode logicalMode, int stockSearchDiv, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        // -- UPD 2011/03/17 -------------------------------------------<<<
        {
            //----------------------------------------------------------------------------
            // 初期処理
            //----------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            Dictionary<string, GoodsUnitData> wrkRet = new Dictionary<string, GoodsUnitData>();
            goodsUnitDataList = new List<GoodsUnitData>();

            //----------------------------------------------------------------------------
            // 初期値データが取得されていなければ初期値データを取得する
            //----------------------------------------------------------------------------
            if (!_isInitialSearch)
            {
                status = this.SearchInitial(cndtn.EnterpriseCode, cndtn.SectionCode, out msg);
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        return status;
                }
            }

            //----------------------------------------------------------------------------
            // 商品連結データ取得(ユーザー登録分)
            //----------------------------------------------------------------------------
            List<GoodsUnitData> goodsUList;
            // -- UPD 2011/03/17 ------------------------------>>>
            //// 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            ////status = this.SearchUserDB(cndtn, logicalMode, out goodsUList, out msg);
            //status = this.SearchUserDB(cndtn, maxCount, logicalMode, out goodsUList, out msg);
            //// 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            status = this.SearchUserDB(cndtn, maxCount, logicalMode, stockSearchDiv, out goodsUList, out msg);
            // -- UPD 2011/03/17 ------------------------------<<<

            switch (status)
            {
                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:

                    //----------------------------------------------------------------------------
                    // 商品連結データ不足情報設定
                    //----------------------------------------------------------------------------
                    this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUList);

                    break;
                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                    break;
                default:
                    return status;
            }

            //----------------------------------------------------------------------------
            // ステータス判定
            //----------------------------------------------------------------------------
            if (goodsUList == null || goodsUList.Count == 0)
            {
                msg = "該当する商品はみつかりませんでした";
                return (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            }
            else
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }

            //----------------------------------------------------------------------------
            // 商品連結データオブジェクトリスト生成
            //----------------------------------------------------------------------------
            goodsUnitDataList = goodsUList;

            return status;
        }
        // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // --- ADD donggy for Redmine#35275 2013/04/15 ---->>>>>>>>
        /// <summary>
        /// 商品マスタデータ取得
        /// </summary>
        /// <param name="goodsNo">品番</param>
        /// <param name="enterPriseCode">企業コード</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Note       :  商品マスタデータ取得 </br>
        /// <br>Programer  :  donggy    </br>
        /// <br>Date       :  2013/04/15 </br>
        /// <br>Update Note: 2013/05/09  yangyi</br>
        /// <br>管理番号   : 10801804-00 2013/05/15配信分</br>
        /// <br>           : Redmine#35275 　得意先電子元帳で伝票タイプＡ８００の伝票を再発行するとエラーが発生するの対応</br>
        /// </remarks>
        public int SearchGoodsInfoOnly(string enterPriseCode, int makerCode, string goodsNo, out GoodsUnitData goodsUnitData)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            goodsUnitData = new GoodsUnitData();
            // サーバーユーザーデータ
            IGoodsUDB iGoodsUDB = MediationGoodsUDB.GetGoodsUDB(); 
            object goodsUObj = new object();
            GoodsUWork goodsUWork = new GoodsUWork();
            goodsUWork.EnterpriseCode = enterPriseCode;
            goodsUWork.GoodsNo = goodsNo;
            goodsUWork.GoodsMakerCd = makerCode;
            goodsUWork.LogicalDeleteCode = 0;

            object goodsUCondObj = (object)goodsUWork;
            // 商品マスタデータ取得 
            status = iGoodsUDB.Search(out goodsUObj, goodsUCondObj, 0, ConstantManagement.LogicalMode.GetData0);

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL) //ADD yangyi 2013/05/09 Redmine#35275
            {
                if (goodsUObj != null)
                {
                    ArrayList goodsUWorkList = goodsUObj as ArrayList;
                    if (goodsUWorkList.Count > 0)   //ADD yangyi 2013/05/09 Redmine#35275
                    {
                        goodsUWork = goodsUWorkList[0] as GoodsUWork;
                    }
                    
                }
                else
                {
                    goodsUWork = null;
                }
                // 商品マスタオブジェクトから商品連結データオブジェクトに渡します
                if (goodsUWork != null)
                {
                    goodsUnitData.EnterpriseCode = goodsUWork.EnterpriseCode;
                    goodsUnitData.GoodsMakerCd = goodsUWork.GoodsMakerCd;
                    goodsUnitData.GoodsNo = goodsUWork.GoodsNo;
                    goodsUnitData.GoodsNote2 = goodsUWork.GoodsNote2;
                }
            }
            

            return status;
        }
        // --- ADD donggy for Redmine#35275 2013/04/15 ----<<<<<<<<

        // 2013.02.25 橋本 ADD START ==============================================
        #region SearchProc(得意先電子元帳からだけ)
        /// <summary>
        /// 商品検索(同一品番選択ウインドウ無し、ユーザー登録分のみ)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="maxCount">取得ＭＡＸ件数(ゼロの場合、無制限)</param>
        /// <param name="logicalMode">論理削除データ取得区分</param>
        /// <param name="stockSearchDiv">0：在庫の取得も行う 1:在庫の取得は行わない</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <param name="isSettingVariousMst"></param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>検索対象はユーザー登録分のみ</remarks>
        private int SearchProc(GoodsCndtn cndtn, int maxCount, ConstantManagement.LogicalMode logicalMode, int stockSearchDiv, out List<GoodsUnitData> goodsUnitDataList, out string msg, int isSettingVariousMst)
        {
            //----------------------------------------------------------------------------
            // 初期処理
            //----------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            Dictionary<string, GoodsUnitData> wrkRet = new Dictionary<string, GoodsUnitData>();
            goodsUnitDataList = new List<GoodsUnitData>();

            //----------------------------------------------------------------------------
            // 初期値データが取得されていなければ初期値データを取得する
            //----------------------------------------------------------------------------
            if (!_isInitialSearch)
            {
                status = this.SearchInitial(cndtn.EnterpriseCode, cndtn.SectionCode, out msg);
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        return status;
                }
            }

            //----------------------------------------------------------------------------
            // 商品連結データ取得(ユーザー登録分)
            //----------------------------------------------------------------------------
            List<GoodsUnitData> goodsUList;
            status = this.SearchUserDB(cndtn, maxCount, logicalMode, stockSearchDiv, out goodsUList, out msg);

            switch (status)
            {
                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                    // 2013.02.19 橋本 ADD START ==============================================
                    if (isSettingVariousMst == 0)
                    {
                        //----------------------------------------------------------------------------
                        // 商品連結データ不足情報設定
                        //----------------------------------------------------------------------------
                        this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUList);
                    }
                    // 2013.02.19 橋本 ADD END   ==============================================
                    break;
                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                    break;
                default:
                    return status;
            }

            //----------------------------------------------------------------------------
            // ステータス判定
            //----------------------------------------------------------------------------
            if (goodsUList == null || goodsUList.Count == 0)
            {
                msg = "該当する商品はみつかりませんでした";
                return (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            }
            else
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }

            //----------------------------------------------------------------------------
            // 商品連結データオブジェクトリスト生成
            //----------------------------------------------------------------------------
            goodsUnitDataList = goodsUList;

            return status;
        }
        #endregion
        // 2013.02.25 橋本 ADD END   ==============================================

        /// <summary>
        /// 商品検索(同一品番選択ウインドウ有り、ユーザー登録分のみ)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchGoods(GoodsCndtn cndtn, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            return this.SearchGoodsProc(cndtn, 0, ConstantManagement.LogicalMode.GetData0, out goodsUnitDataList, out msg);
            // 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        }

        // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 商品検索(同一品番選択ウインドウ有り、ユーザー登録分のみ)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="maxCount">取得ＭＡＸ件数(ゼロの場合、無制限)</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <param name="flag">伝票番号で検索するかどうかを判断する用のフラグ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        public int SearchGoods(GoodsCndtn cndtn, int maxCount, out List<GoodsUnitData> goodsUnitDataList, out string msg, params bool[] flag)//add 2011/12/13 陳建明 Redmine #26816
        //public int SearchGoods(GoodsCndtn cndtn, int maxCount, out List<GoodsUnitData> goodsUnitDataList, out string msg)//del 2011/12/13 陳建明 Redmine #26816
        {
            return this.SearchGoodsProc(cndtn, maxCount, ConstantManagement.LogicalMode.GetData0, out goodsUnitDataList, out msg, flag);//add 2011/12/13 陳建明 Redmine #26816
            //return this.SearchGoodsProc(cndtn, maxCount, ConstantManagement.LogicalMode.GetData0, out goodsUnitDataList, out msg);//del 2011/12/13 陳建明 Redmine #26816
        }
        // 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>
        ///// 商品検索(同一品番選択ウインドウ有り、ユーザー登録分のみ)
        ///// </summary>
        ///// <param name="cndtn">商品検索条件データオブジェクト</param>
        ///// <param name="logicalMode">論理削除データ取得区分</param>
        ///// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        ///// <param name="msg">エラーメッセージ</param>
        ///// <returns>ConstantManagement.MethodResult</returns>
        //private int SearchGoodsProc(GoodsCndtn cndtn, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        /// <summary>
        /// 商品検索(同一品番選択ウインドウ有り、ユーザー登録分のみ)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="maxCount">取得ＭＡＸ件数(ゼロの場合、無制限)</param>
        /// <param name="logicalMode">論理削除データ取得区分</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <param name="flag">伝票番号で検索するかどうかを判断する用のフラグ</param>
        /// <returns>ConstantManagement.MethodResult</returns>
        private int SearchGoodsProc(GoodsCndtn cndtn, int maxCount, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg,params bool[] flag)//add 2011/12/13 陳建明 Redmine #26816
        //private int SearchGoodsProc(GoodsCndtn cndtn, int maxCount, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg)//del 2011/12/13 陳建明 Redmine #26816
        // 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        {
            //-------------------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------------------
            goodsUnitDataList = null;
            msg = string.Empty;
            DialogResult retDialog = DialogResult.None;
            ConstantManagement.MethodResult retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>(); // 2008.10.08

            //-------------------------------------------------------------------------
            // 商品検索
            //-------------------------------------------------------------------------
            // -- UPD 2011/03/17 ---------------------------------------->>>
            //// 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            ////int ret = this.SearchProc(cndtn, logicalMode, out goodsUnitDataList, out msg);
            //int ret = this.SearchProc(cndtn, maxCount, logicalMode, out goodsUnitDataList, out msg);
            //// 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            int ret = this.SearchProc(cndtn, maxCount, logicalMode, 0, out goodsUnitDataList, out msg);
            // -- UPD 2011/03/17 ----------------------------------------<<<

            if (ret == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                //-------------------------------------------------------------------------
                // 部品検索データセット変換
                //-------------------------------------------------------------------------
                PartsInfoDataSet partsInfoDataSet = new PartsInfoDataSet();
                ArrayList goodsUnitDataArrayList = new ArrayList(goodsUnitDataList);
                partsInfoDataSet.SetGoodsListToDataSet(goodsUnitDataArrayList);

                // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //// 2008.10.08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //if (partsInfoDataSet.UsrGoodsInfo.Count >= 1)
                //{
                //    //-------------------------------------------------------------------------
                //    // 商品連結データオブジェクトリスト変換
                //    //-------------------------------------------------------------------------
                //    goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(false).ToArray(typeof(GoodsUnitData)));

                //    // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //    //// 2008.11.04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //    ////-------------------------------------------------------------------------
                //    //// 商品連結データ不足情報設定
                //    ////-------------------------------------------------------------------------
                //    //this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList);
                //    //// 2008.11.04 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                //    //-------------------------------------------------------------------------
                //    // 商品連結データ不足情報設定
                //    //-------------------------------------------------------------------------
                //    this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUnitDataList, 1);
                //    // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                //    //-----------------------------------------------------------------------------
                //    // 単価情報取得
                //    //-----------------------------------------------------------------------------
                //    unitPriceCalcRetList = this.CalclationUnitPrice(cndtn, goodsUnitDataList);

                //    //-----------------------------------------------------------------------------
                //    // 単価情報を部品検索データセットへ反映
                //    //-----------------------------------------------------------------------------
                //    if ((unitPriceCalcRetList != null) && (unitPriceCalcRetList.Count != 0)) partsInfoDataSet.SetUnitPriceInfo(unitPriceCalcRetList);
                //}
                //// 2008.10.08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                // 2008.11.05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //-------------------------------------------------------------------------
                // 優先倉庫設定
                //-------------------------------------------------------------------------
                partsInfoDataSet.ListPriorWarehouse = cndtn.ListPriorWarehouse;
                // 2008.11.05 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //-------------------------------------------------------------------------
                // 品名表示区分設定
                //-------------------------------------------------------------------------
                if (_salesTtlSt != null) partsInfoDataSet.PartsNameDspDivCd = _salesTtlSt.PartsNameDspDivCd;
                // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //-------------------------------------------------------------------------
                // 価格計算(同一品番選択ウィンドウ用)用のデリゲート追加
                //-------------------------------------------------------------------------
                this._goodsCndtn = cndtn;
                if (partsInfoDataSet.CalculatePrice == null)
                {
                    partsInfoDataSet.CalculatePrice += new PartsInfoDataSet.CalculatePriceCallback(this.CalcPrice);
                }

                //-------------------------------------------------------------------------
                // 価格適用日
                //-------------------------------------------------------------------------
                partsInfoDataSet.PriceApplyDate = cndtn.PriceApplyDate;
                // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                // 2008.10.08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                ////-------------------------------------------------------------------------
                //// 同一品番検索選択UI
                ////-------------------------------------------------------------------------
                //if (partsInfoDataSet.UsrGoodsInfo.Count > 1)
                //{
                //    retDialog = SelectionSamePartsNo.ShowDialog(partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                //}
                //else if (partsInfoDataSet.UsrGoodsInfo.Count == 1)
                //{
                //    partsInfoDataSet.UsrGoodsInfo[0].SelectionState = true;
                //    retDialog = DialogResult.OK;
                //}

                // 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                ////-------------------------------------------------------------------------
                //// 同一品番検索選択UI
                ////-------------------------------------------------------------------------
                //retDialog = SelectionSamePartsNo.ShowDialog(partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                //-------------------------------------------------------------------------
                // 同一品番検索選択UI
                //-------------------------------------------------------------------------
                //add 2011/12/13 陳建明 Redmine #26816----->>>>>
                if(flag.Length>0)
                {
                    retDialog = DialogResult.OK;
                }
                else
                {
                //add 2011/12/13 陳建明 Redmine #26816-----<<<<<
                    retDialog = SelectionSamePartsNo.ShowDialog(this._owner, partsInfoDataSet, 0); // Mode 0:品番検索 1:品番結合検索
                }//add 2011/12/13 陳建明 Redmine #26816
                // 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                // 2008.10.08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                //-------------------------------------------------------------------------
                // 商品連結データオブジェクトリスト変換
                //-------------------------------------------------------------------------
                goodsUnitDataList = new List<GoodsUnitData>((GoodsUnitData[])partsInfoDataSet.GetGoodsList(true).ToArray(typeof(GoodsUnitData)));
            }

            //-------------------------------------------------------------------------
            // 戻り値設定
            //-------------------------------------------------------------------------
            switch (retDialog)
            {
                case DialogResult.Cancel:
                    retMethod = ConstantManagement.MethodResult.ctFNC_CANCEL;
                    break;
                case DialogResult.None:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
                case DialogResult.OK:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NORMAL;
                    break;
                default:
                    retMethod = ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                    break;
            }
            return (int)retMethod;
        }
        #endregion

        #region ■ 商品検索(ユーザー分)
        // -- UPD 2011/03/17 ---------------------------------------------->>>
        ///// <summary>
        ///// 商品検索(ユーザー登録分)
        ///// </summary>
        ///// <param name="cndtn">商品検索条件データオブジェクト</param>
        ///// <param name="maxCount">取得MAX件数</param>
        ///// <param name="logicalMode">論理削除モード</param>
        ///// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        ///// <param name="msg">エラーメッセージ</param>
        ///// <returns>ConstantManagement.DB_Status</returns>
        //// 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ////private int SearchUserDB(GoodsCndtn cndtn, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        //private int SearchUserDB(GoodsCndtn cndtn, int maxCount, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        //// 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        /// <summary>
        /// 商品検索(ユーザー登録分)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="maxCount">取得MAX件数</param>
        /// <param name="logicalMode">論理削除モード</param>
        /// <param name="stockSearchDiv">0：在庫の取得も行う 1:在庫の取得は行わない</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        private int SearchUserDB(GoodsCndtn cndtn, int maxCount, ConstantManagement.LogicalMode logicalMode, int stockSearchDiv, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        // -- UPD 2011/03/17 ----------------------------------------------<<<
        {
            //----------------------------------------------------------------------------
            // 初期処理
            //----------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";
            goodsUnitDataList = new List<GoodsUnitData>();

            try
            {
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();

                // 商品検索条件ワークオブジェクト取得
                GoodsUCndtnWork goodsUCndtnWork = CopyToGoodsUCondtnWorkFromGoodsCondtn(cndtn);

                // 取得したい検索結果データクラスを設定
                CustomSerializeArrayList workList = new CustomSerializeArrayList();

                // 商品連結データクラス
                workList.Add(new GoodsUnitDataWork());

                if (workList.Count == 0) return (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

                // オブジェクト型へセット
                object retObj = workList;

                //----------------------------------------------------------------------------
                // 商品検索
                //----------------------------------------------------------------------------
                if (_isLocalDBRead)
                {
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, logicalMode);
                }
                else
                {
                    // -- UPD 2011/03/17 ---------------------------->>>
                    //// 2009.02.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    ////status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, logicalMode);
                    //status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, maxCount, logicalMode);
                    //// 2009.02.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    if (stockSearchDiv == 0)
                    {
                        //在庫取得あり
                        status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, maxCount, logicalMode);
                    }
                    else
                    {
                        status = this._iGoodsURelationDataDB.UsrGoodsOnlySearch(ref retObj, goodsUCndtnWork, 0, maxCount, logicalMode);
                    }
                    // -- UPD 2011/03/17 ----------------------------<<<
                }

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if (workList == null)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            //----------------------------------------------------------------------------
                            // 商品連結データオブジェクトリスト取得
                            //----------------------------------------------------------------------------
                            List<GoodsUnitData> wkGoodsUnitDataList;
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 DEL
                            //status2 = GetGoodsUnitDataWorkToUIdata(workList, out wkGoodsUnitDataList);
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 DEL
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 ADD
                            List<Rate> rateList;    // 読み捨てる
                            status2 = GetGoodsUnitDataWorkToUIdata( workList, out wkGoodsUnitDataList, out rateList );
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 ADD
                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        foreach (GoodsUnitData gud in wkGoodsUnitDataList)
                                        {
                                            goodsUnitDataList.Add(gud.Clone());
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    return status2;
                                default:
                                    msg = "商品データ(ユーザー分)の取得でエラーが発生しました";
                                    return status2;
                            }
                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        msg = "商品データ(ユーザー分)の取得に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品検索で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
            }

            return status;
        }
        #endregion

        #region ■ 商品登録
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        /// <summary>
        /// 商品登録
        /// </summary>
        /// <param name="goodsUnitData">商品連結データ</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        public int Write( ref GoodsUnitData goodsUnitData, out string msg )
        {
            List<Stock> prevStockList = new List<Stock>();
            List<Rate> rateList = new List<Rate>();
            return Write( ref goodsUnitData, prevStockList, ref rateList, out msg );
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
        /// <summary>
        /// 商品登録
        /// </summary>
        /// <param name="goodsUnitData">商品連結データ</param>
        /// <param name="prevStockList">変更前在庫リスト</param>
        /// <param name="rateList">掛率リスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <br>Update Note: 2012/12/01 zhangy3　</br>
        /// <br>           : 2013/01/16配信分 Redmine#33231 商品在庫マスタ</br>
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 DEL
        //public int Write( ref GoodsUnitData goodsUnitData, out string msg )
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
        public int Write(ref GoodsUnitData goodsUnitData, List<Stock> prevStockList, ref List<Rate> rateList, out string msg)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            string primaryKey = string.Empty;

            try
            {
                GoodsUnitData bakGoodsUnitData = goodsUnitData.Clone();
                // ---ADD 2009/06/24 不具合対応[13582] StockListはCloneされない為、個別に行う ------>>>>>
                Stock stock = null;
                List<Stock> stockList = new List<Stock>();
                for (int i = 0; i < goodsUnitData.StockList.Count; i++)
                {
                    stock = goodsUnitData.StockList[i].Clone();
                    stockList.Add(stock);
                }
                bakGoodsUnitData.StockList = stockList;
                // ---ADD 2009/06/24 不具合対応[13582] StockListはCloneされない為、個別に行う ------<<<<<

                if (this._iGoodsURelationDataDB == null)
                {
                    this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                }

                //----------------------------------------------------------------------------
                // 商品連結データオブジェクトより商品連結データワークオブジェクトを取得
                //----------------------------------------------------------------------------
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                // 在庫リスト差異適用（ 変更後＆変更前 → 差分＆変更前 ）
                this.ReflectStockDifference( ref goodsUnitData, prevStockList );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD
                
                CustomSerializeArrayList csArrayList = new CustomSerializeArrayList();
                ArrayList workList = new ArrayList();
                this.CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref workList, goodsUnitData);
                csArrayList.Add( workList );

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/18 ADD
                // 在庫調整
                // 2009.02.23 30413 犬飼 在庫調整と明細を1対1に変更 >>>>>>START
                //ArrayList stockAdjustWorkList = new ArrayList();
                //ArrayList stockAdjustDtlWorkList = new ArrayList();
                //this.CreateStockAdjustWorkFromGoodsUnitData( ref stockAdjustWorkList, ref stockAdjustDtlWorkList, goodsUnitData, prevStockList );
                //if ( stockAdjustWorkList.Count > 0 )
                //{
                //    csArrayList.Add( stockAdjustWorkList );
                //    csArrayList.Add( stockAdjustDtlWorkList );
                //}
                CustomSerializeArrayList stockAdjustWorkCsList = new CustomSerializeArrayList();
                this.CreateStockAdjustWorkFromGoodsUnitData(ref stockAdjustWorkCsList, goodsUnitData, prevStockList);
                if (stockAdjustWorkCsList.Count > 0)
                {
                    csArrayList.Add(stockAdjustWorkCsList);
                }
                // 2009.02.23 30413 犬飼 在庫調整と明細を1対1に変更 <<<<<<END
                
                // 単品売価(掛率)
                if ( rateList != null && rateList.Count > 0 )
                {
                    ArrayList rateWorkList = new ArrayList();
                    this.CreateRateWorkListFromRateList( ref rateWorkList, rateList );
                    csArrayList.Add( rateWorkList );
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/18 ADD

                object lstObj = csArrayList;

                //----------------------------------------------------------------------------
                // ＤＢ更新
                //----------------------------------------------------------------------------
                status = this._iGoodsURelationDataDB.WriteRelation(ref lstObj);

                switch (status)

                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            csArrayList = lstObj as CustomSerializeArrayList;
                            List<GoodsUnitData> goodsUnitDataLst;

                            //----------------------------------------------------------------------------
                            // 更新戻り値から商品連結データオブジェクトリスト取得
                            //----------------------------------------------------------------------------
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 DEL
                            //this.GetGoodsUnitDataWorkToUIdata(csArrayList, out goodsUnitDataLst);
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 DEL
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 ADD
                            this.GetGoodsUnitDataWorkToUIdata(csArrayList, out goodsUnitDataLst, out rateList);
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 ADD

                            //----------------------------------------------------------------------------
                            // ヘッダ情報更新
                            //----------------------------------------------------------------------------
                            if (goodsUnitDataLst != null)
                            {
                                //----------------------------------------------------------------------------
                                // 商品情報
                                //----------------------------------------------------------------------------
                                // 作成日時
                                goodsUnitData.CreateDateTime = goodsUnitDataLst[0].CreateDateTime;

                                // 更新日時
                                goodsUnitData.UpdateDateTime = goodsUnitDataLst[0].UpdateDateTime;

                                // 企業コード
                                goodsUnitData.EnterpriseCode = goodsUnitDataLst[0].EnterpriseCode;

                                // GUID
                                goodsUnitData.FileHeaderGuid = goodsUnitDataLst[0].FileHeaderGuid;

                                // 更新従業員コード
                                goodsUnitData.UpdEmployeeCode = goodsUnitDataLst[0].UpdEmployeeCode;

                                // 更新アセンブリID1
                                goodsUnitData.UpdAssemblyId1 = goodsUnitDataLst[0].UpdAssemblyId1;

                                // 更新アセンブリID2
                                goodsUnitData.UpdAssemblyId2 = goodsUnitDataLst[0].UpdAssemblyId2;

                                // 論理削除区分
                                goodsUnitData.LogicalDeleteCode = goodsUnitDataLst[0].LogicalDeleteCode;

                                // -------- ADD START 2014/02/10 高陽 -------->>>>>
                                // 作成日時Ⅱ
                                goodsUnitData.CreateDateTimeA = goodsUnitDataLst[0].CreateDateTimeA;

                                // 更新日時Ⅱ
                                goodsUnitData.UpdateDateTimeA = goodsUnitDataLst[0].UpdateDateTimeA;

                                // GUIDⅡ
                                goodsUnitData.FileHeaderGuidA = goodsUnitDataLst[0].FileHeaderGuidA;
                                // -------- ADD END 2014/02/10 高陽 --------<<<<<

                                //----------------------------------------------------------------------------
                                // 価格情報
                                //----------------------------------------------------------------------------
                                goodsUnitData.GoodsPriceList.Clear();
                                goodsUnitData.GoodsPriceList.AddRange(goodsUnitDataLst[0].GoodsPriceList);

                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/10 ADD
                                //----------------------------------------------------------------------------
                                // 単品売価(掛率情報)
                                //----------------------------------------------------------------------------
                                // ※このメソッドの引数の ref rateList に既に結果が格納されているので処理は不要。

                                //----------------------------------------------------------------------------
                                // 在庫情報
                                //----------------------------------------------------------------------------
                                GoodsUnitData wkGoodsUnitData = goodsUnitDataLst[0];
                                // 2009.03.09 30413 犬飼 表示の在庫情報を更新 >>>>>>START
                                //ReflectStockDifferenceOnAfterUpdate( ref wkGoodsUnitData, prevStockList );
                                ReflectStockDifferenceOnAfterUpdate(ref wkGoodsUnitData, prevStockList, bakGoodsUnitData);
                                // 2009.03.09 30413 犬飼 表示の在庫情報を更新 <<<<<<END
                                goodsUnitData.StockList.Clear();
                                goodsUnitData.StockList.AddRange(wkGoodsUnitData.StockList);
                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/10 ADD
                            }

                            // 商品データ変更イベント発動
                            GoodsAcsEventArgs args = new GoodsAcsEventArgs(goodsUnitData.Clone());
                            FireChangedGoodsDataEventHandler(this, args, mChangedGoodsDataEvent);

                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        msg = "編集中の商品は、既に他の端末で更新されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        msg = "編集中の商品は、既に他の端末で削除されています。";
                        break;
                    // --- ADD 2009/02/02 -------------------------------->>>>>
                    case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(企業ロック)です。" + "\r\n"
                                + "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n"
                                + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(拠点ロック)です。" + "\r\n"
                            + "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(倉庫ロック)です。" + "\r\n"
                            + "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    // --- ADD 2009/02/02 --------------------------------<<<<<
                    default:
                        msg = "商品データの登録に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品データの登録で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
            }

            return status;
        }

        // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- >>>>>
        /// <summary>
        /// 商品登録
        /// </summary>
        /// <param name="goodsUnitData">商品連結データ</param>
        /// <param name="prevStockList">変更前在庫リスト</param>
        /// <param name="rateList">掛率リスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 商品登録</br>
        /// <br>Programmer : huangt</br>
        /// <br>Date       : 2014/01/15</br>
        /// </remarks>
        public int WriteForShipmentCnt(ref GoodsUnitData goodsUnitData, List<Stock> prevStockList, ref List<Rate> rateList, out string msg)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            string primaryKey = string.Empty;

            try
            {
                GoodsUnitData bakGoodsUnitData = goodsUnitData.Clone();
                Stock stock = null;
                List<Stock> stockList = new List<Stock>();
                for (int i = 0; i < goodsUnitData.StockList.Count; i++)
                {
                    stock = goodsUnitData.StockList[i].Clone();
                    stockList.Add(stock);
                }
                bakGoodsUnitData.StockList = stockList;

                if (this._iGoodsURelationDataDB == null)
                {
                    this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                }

                //----------------------------------------------------------------------------
                // 商品連結データオブジェクトより商品連結データワークオブジェクトを取得
                //----------------------------------------------------------------------------
                // 在庫リスト差異適用（ 変更後＆変更前 → 差分＆変更前 ）
                this.ReflectStockDifference(ref goodsUnitData, prevStockList);

                CustomSerializeArrayList csArrayList = new CustomSerializeArrayList();
                ArrayList workList = new ArrayList();
                this.CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref workList, goodsUnitData);
                csArrayList.Add(workList);

                CustomSerializeArrayList stockAdjustWorkCsList = new CustomSerializeArrayList();
                this.CreateStockAdjustWorkFromGoodsUnitData(ref stockAdjustWorkCsList, goodsUnitData, prevStockList);
                if (stockAdjustWorkCsList.Count > 0)
                {
                    csArrayList.Add(stockAdjustWorkCsList);
                }

                // 単品売価(掛率)
                if (rateList != null && rateList.Count > 0)
                {
                    ArrayList rateWorkList = new ArrayList();
                    this.CreateRateWorkListFromRateList(ref rateWorkList, rateList);
                    csArrayList.Add(rateWorkList);
                }

                object lstObj = csArrayList;

                //----------------------------------------------------------------------------
                // ＤＢ更新
                //----------------------------------------------------------------------------
                status = this._iGoodsURelationDataDB.WriteRelationForShipmentCnt(ref lstObj);

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            csArrayList = lstObj as CustomSerializeArrayList;
                            List<GoodsUnitData> goodsUnitDataLst;

                            //----------------------------------------------------------------------------
                            // 更新戻り値から商品連結データオブジェクトリスト取得
                            //----------------------------------------------------------------------------
                            this.GetGoodsUnitDataWorkToUIdata(csArrayList, out goodsUnitDataLst, out rateList);

                            //----------------------------------------------------------------------------
                            // ヘッダ情報更新
                            //----------------------------------------------------------------------------
                            if (goodsUnitDataLst != null)
                            {
                                //----------------------------------------------------------------------------
                                // 商品情報
                                //----------------------------------------------------------------------------
                                // 作成日時
                                goodsUnitData.CreateDateTime = goodsUnitDataLst[0].CreateDateTime;

                                // 更新日時
                                goodsUnitData.UpdateDateTime = goodsUnitDataLst[0].UpdateDateTime;

                                // 企業コード
                                goodsUnitData.EnterpriseCode = goodsUnitDataLst[0].EnterpriseCode;

                                // GUID
                                goodsUnitData.FileHeaderGuid = goodsUnitDataLst[0].FileHeaderGuid;

                                // 更新従業員コード
                                goodsUnitData.UpdEmployeeCode = goodsUnitDataLst[0].UpdEmployeeCode;

                                // 更新アセンブリID1
                                goodsUnitData.UpdAssemblyId1 = goodsUnitDataLst[0].UpdAssemblyId1;

                                // 更新アセンブリID2
                                goodsUnitData.UpdAssemblyId2 = goodsUnitDataLst[0].UpdAssemblyId2;

                                // 論理削除区分
                                goodsUnitData.LogicalDeleteCode = goodsUnitDataLst[0].LogicalDeleteCode;

                                //----------------------------------------------------------------------------
                                // 価格情報
                                //----------------------------------------------------------------------------
                                goodsUnitData.GoodsPriceList.Clear();
                                goodsUnitData.GoodsPriceList.AddRange(goodsUnitDataLst[0].GoodsPriceList);

                                //----------------------------------------------------------------------------
                                // 単品売価(掛率情報)
                                //----------------------------------------------------------------------------
                                // ※このメソッドの引数の ref rateList に既に結果が格納されているので処理は不要。

                                //----------------------------------------------------------------------------
                                // 在庫情報
                                //----------------------------------------------------------------------------
                                GoodsUnitData wkGoodsUnitData = goodsUnitDataLst[0];
                                ReflectStockDifferenceOnAfterUpdate(ref wkGoodsUnitData, prevStockList, bakGoodsUnitData);
                                goodsUnitData.StockList.Clear();
                                goodsUnitData.StockList.AddRange(wkGoodsUnitData.StockList);
                            }

                            // 商品データ変更イベント発動
                            GoodsAcsEventArgs args = new GoodsAcsEventArgs(goodsUnitData.Clone());
                            FireChangedGoodsDataEventHandler(this, args, mChangedGoodsDataEvent);

                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        msg = "編集中の商品は、既に他の端末で更新されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        msg = "編集中の商品は、既に他の端末で削除されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(企業ロック)です。" + "\r\n"
                                + "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n"
                                + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(拠点ロック)です。" + "\r\n"
                            + "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(倉庫ロック)です。" + "\r\n"
                            + "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    default:
                        msg = "商品データの登録に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品データの登録で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
            }

            return status;
        }
        // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- <<<<<
        #endregion

        #region ■ 商品登録(リスト)
        /// <summary>
        /// 商品登録(リスト)
        /// </summary>
        /// <param name="goodsUnitDataList">商品連結データリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        public int Write(ref List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            string primaryKey = string.Empty;

            try
            {
                if (goodsUnitDataList == null || goodsUnitDataList.Count == 0) return (int)ConstantManagement.DB_Status.ctDB_EOF;
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();

                //----------------------------------------------------------------------------
                // 商品連結データオブジェクトリストより商品連結データワークオブジェクトリストを取得
                //----------------------------------------------------------------------------
                CustomSerializeArrayList csArrayList = new CustomSerializeArrayList();
                ArrayList workList = new ArrayList();
                this.CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref workList, goodsUnitDataList);
                csArrayList.Add(workList);
                object lstObj = csArrayList;

                //----------------------------------------------------------------------------
                // ＤＢ更新
                //----------------------------------------------------------------------------
                status = this._iGoodsURelationDataDB.WriteRelation(ref lstObj);
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            csArrayList = lstObj as CustomSerializeArrayList;
                            List<GoodsUnitData> goodsUnitDataLst;

                            //----------------------------------------------------------------------------
                            // 更新戻り値から商品連結データオブジェクトリスト取得
                            //----------------------------------------------------------------------------
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 DEL
                            //this.GetGoodsUnitDataWorkToUIdata(csArrayList, out goodsUnitDataLst);
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 DEL
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 ADD
                            List<Rate> rateList;    // 読み捨てる
                            this.GetGoodsUnitDataWorkToUIdata( csArrayList, out goodsUnitDataLst, out rateList );
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 ADD

                            goodsUnitDataList = null;
                            goodsUnitDataList = goodsUnitDataLst;

                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        msg = "編集中の商品は、既に他の端末で更新されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        msg = "編集中の商品は、既に他の端末で削除されています。";
                        break;
                    default:
                        msg = "商品データの登録に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品データの登録で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
            }

            return status;
        }
        #endregion

        #region ■ 商品関連情報登録
        /// <summary>
        /// 商品関連情報登録
        /// </summary>
        /// <param name="obj">各種データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns></returns>
        public int WriteRelation(ref object obj, out string msg)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            try
            {
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();

                //----------------------------------------------------------------------------
                // 商品連結データオブジェクトより商品連結データワークオブジェクトを取得
                //----------------------------------------------------------------------------
                CustomSerializeArrayList csArrayList = new CustomSerializeArrayList();
                this.CopyToWorkListFromList(ref csArrayList, obj);

                object lstObj = csArrayList;

                //----------------------------------------------------------------------------
                // ＤＢ更新
                //----------------------------------------------------------------------------
                status = this._iGoodsURelationDataDB.WriteRelation(ref lstObj);

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        this.CopyToListFromWorkList(ref obj, lstObj); // 更新情報再設定
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        msg = "対象の品番は、既に他の端末で更新されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        msg = "対象の品番は、既に他の端末で削除されています。";
                        break;
                    default:
                        msg = "商品データの登録に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品データの登録で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
            }

            return status;

        }

        /// <summary>
        /// 商品関連オブジェクト→商品関連ワークオブジェクト
        /// </summary>
        /// <param name="csArrayList"></param>
        /// <param name="obj"></param>
        private void CopyToWorkListFromList(ref CustomSerializeArrayList csArrayList, object obj)
        {
            ArrayList goodsUnitDataWorkList = new ArrayList();          // 商品連結データワークオブジェクトリスト
            ArrayList joinPartsUWorkList = new ArrayList();             // 結合データワークオブジェクトリスト
            ArrayList goodsSetWorkList = new ArrayList();               // セットマスタワークオブジェクトリスト
            ArrayList tboSearchUWorkList = new ArrayList();             // TBO検索マスタワークオブジェクトリスト
            PartsSubstUWork partsSubstUWork = new PartsSubstUWork();    // 代替マスタワークオブジェクト

            if (obj is CustomSerializeArrayList)
            {
                CustomSerializeArrayList csList = (CustomSerializeArrayList)obj;
                foreach (object oobj in csList)
                {
                    if (oobj is ArrayList)
                    {
                        ArrayList aList = (ArrayList)oobj;
                        foreach (object ooobj in aList)
                        {
                            if (ooobj is GoodsUnitData) // 商品連結データオブジェクト
                            {
                                CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref goodsUnitDataWorkList, aList);
                                csArrayList.Add(goodsUnitDataWorkList);
                                break;
                            }
                            else if (ooobj is JoinPartsU) // 結合データオブジェクト
                            {
                                this.CopyToJoinPartsUWorkFromJoinPartsU(ref joinPartsUWorkList, aList);
                                csArrayList.Add(joinPartsUWorkList);
                                break;
                            }
                            else if (ooobj is GoodsSet) // セットマスタオブジェクト
                            {
                                this.CopyToGoodsSetWorkFromGoodsSet(ref goodsSetWorkList, aList);
                                csArrayList.Add(goodsSetWorkList);
                                break;
                            }
                            else if (ooobj is TBOSearchU) // TBO検索マスタオブジェクト >>> 20081128 30290 追加
                            {
                                this.CopyToTBOSearchUWorkFromTBOSearchU(ref tboSearchUWorkList, aList);
                                csArrayList.Add(tboSearchUWorkList);
                                break;
                            }
                        }
                    }
                    else if (oobj is PartsSubstU) // 代替マスタオブジェクト
                    {
                        this.CopyToPartsSubstUWorkFromPartsSubstU(ref partsSubstUWork, (PartsSubstU)oobj);
                        csArrayList.Add(partsSubstUWork);
                    }
                }
            }
        }

        /// <summary>
        /// 商品関連ワークオブジェクト→商品関連オブジェクト
        /// </summary>
        /// <param name="obj"></param>
        /// <param name="workObj"></param>
        private void CopyToListFromWorkList(ref object obj, object workObj)
        {
            ArrayList goodsUnitDataList = new ArrayList();          // 商品連結データオブジェクトリスト
            ArrayList joinPartsUList = new ArrayList();             // 結合データオブジェクトリスト
            ArrayList goodsSetList = new ArrayList();               // セットマスタオブジェクトリスト
            ArrayList tboSearchUList = new ArrayList();             // TBO検索マスタオブジェクトリスト
            PartsSubstU partsSubstU = new PartsSubstU();            // 代替マスタオブジェクト
            CustomSerializeArrayList csArrayList = new CustomSerializeArrayList();

            if (workObj is CustomSerializeArrayList)
            {
                CustomSerializeArrayList csList = (CustomSerializeArrayList)workObj;
                foreach (object oobj in csList)
                {
                    if (oobj is ArrayList)
                    {
                        ArrayList aList = (ArrayList)oobj;
                        foreach (object ooobj in aList)
                        {
                            if (ooobj is GoodsUnitDataWork) // 商品連結データワークオブジェクト
                            {
                                CopyToGoodsUnitDataFromGoodsUnitDataWork(out goodsUnitDataList, aList);
                                csArrayList.Add(goodsUnitDataList);
                                break;
                            }
                            else if (ooobj is JoinPartsUWork) // 結合データワークオブジェクト
                            {
                                this.CopyToJoinPartsUFromJoinPartsUWork(ref joinPartsUList, aList);
                                csArrayList.Add(joinPartsUList);
                                break;
                            }
                            else if (ooobj is GoodsSetWork) // セットマスタワークオブジェクト
                            {
                                this.CopyToGoodsSetFromGoodsSetWork(ref goodsSetList, aList);
                                csArrayList.Add(goodsSetList);
                                break;
                            }
                            else if (ooobj is TBOSearchUWork) // TBO検索マスタワークオブジェクト >>> 20081128 30290 追加
                            {
                                this.CopyToTBOSearchUFromTBOSearchUWork(ref tboSearchUList, aList);
                                csArrayList.Add(tboSearchUList);
                                break;
                            }
                        }
                    }
                    else if (oobj is PartsSubstUWork) // 代替マスタワークオブジェクト
                    {
                        this.CopyToPartsSubstUFromPartsSubstUWork(ref partsSubstU, (PartsSubstUWork)oobj);
                        csArrayList.Add(partsSubstU);
                    }
                }
            }
            obj = (object)csArrayList;
        }
        #endregion

        #region ■ 商品削除
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 ADD
        /// <summary>
        /// 商品削除
        /// </summary>
        /// <param name="goodsUnitData"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public int Delete( ref GoodsUnitData goodsUnitData, out string msg )
        {
            List<Rate> rateList = new List<Rate>();
            List<Stock> prevStockList = new List<Stock>();
            return this.Delete( ref goodsUnitData, prevStockList, ref rateList, out msg );
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 ADD
        /// <summary>
        /// 商品削除（論理削除）
        /// </summary>
        /// <param name="goodsUnitData">削除する商品連結データ</param>
        /// <param name="prevStockList"></param>
        /// <param name="msg">エラーメッセージ</param>
        /// <param name="rateList"></param>
        /// <returns>ConstantManagement.DB_Status</returns>
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 DEL
        //public int Delete(ref GoodsUnitData goodsUnitData, out string msg)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 ADD
        public int Delete(ref GoodsUnitData goodsUnitData, List<Stock> prevStockList, ref List<Rate> rateList, out string msg)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 ADD
        {
            //----------------------------------------------------------------------------
            // 初期処理
            //----------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";
            string primaryKey = string.Empty;

            try
            {
                GoodsUnitData bakGoodsUnitData = goodsUnitData.Clone();
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();

                //----------------------------------------------------------------------------
                // 商品連結データオブジェクトから商品連結データワークオブジェクトリスト取得
                //----------------------------------------------------------------------------

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/12/01 ADD
                goodsUnitData.LogicalDeleteCode = 1;
                foreach ( Stock stock in goodsUnitData.StockList )
                {
                    stock.LogicalDeleteCode = 1;
                }

                // 在庫リスト差異適用（ 変更後＆変更前 → 差分＆変更前 ）
                this.ReflectStockDifference( ref goodsUnitData, prevStockList );
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/12/01 ADD

                CustomSerializeArrayList csArrayList = new CustomSerializeArrayList();
                ArrayList workList = new ArrayList();
                //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
                //goodsUnitData.LogicalDeleteCode = 1;
                //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD
                this.CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref workList, goodsUnitData);
                csArrayList.Add(workList);

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/12/01 ADD
                // 在庫調整
                // 2009.02.23 30413 犬飼 在庫調整と明細を1対1に変更 >>>>>>START
                //ArrayList stockAdjustWorkList = new ArrayList();
                //ArrayList stockAdjustDtlWorkList = new ArrayList();
                //this.CreateStockAdjustWorkFromGoodsUnitData( ref stockAdjustWorkList, ref stockAdjustDtlWorkList, goodsUnitData, prevStockList );
                //if ( stockAdjustWorkList.Count > 0 )
                //{
                //    csArrayList.Add( stockAdjustWorkList );
                //    csArrayList.Add( stockAdjustDtlWorkList );
                //}
                CustomSerializeArrayList stockAdjustWorkCsList = new CustomSerializeArrayList();
                this.CreateStockAdjustWorkFromGoodsUnitData(ref stockAdjustWorkCsList, goodsUnitData, prevStockList);
                if (stockAdjustWorkCsList.Count > 0)
                {
                    csArrayList.Add(stockAdjustWorkCsList);
                }
                // 2009.02.23 30413 犬飼 在庫調整と明細を1対1に変更 <<<<<<END
                
                // 単品売価(掛率)
                if ( rateList != null && rateList.Count > 0 )
                {
                    // 掛率は論理削除未対応なので完全削除する
                    foreach ( Rate rate in rateList )
                    {
                        rate.LogicalDeleteCode = 3;
                    }
                    ArrayList rateWorkList = new ArrayList();
                    this.CreateRateWorkListFromRateList( ref rateWorkList, rateList );
                    csArrayList.Add( rateWorkList );
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/12/01 ADD


                object lstObj = csArrayList;

                //----------------------------------------------------------------------------
                // ＤＢ更新
                //----------------------------------------------------------------------------

                // ---> G.Miyatsu 2008/11/28 DEL
                //status = this._iGoodsURelationDataDB.LogicalDeleteRelation(ref lstObj);

                // ---> G.Miyatsu 2008/11/28 ADD
                status = this._iGoodsURelationDataDB.WriteRelation( ref lstObj );

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            csArrayList = lstObj as CustomSerializeArrayList;
                            List<GoodsUnitData> goodsUnitDataLst;

                            //----------------------------------------------------------------------------
                            // 更新戻り値から商品連結データオブジェクトリスト取得
                            //----------------------------------------------------------------------------
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 DEL
                            //this.GetGoodsUnitDataWorkToUIdata(csArrayList, out goodsUnitDataLst);
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 DEL
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 ADD
                            this.GetGoodsUnitDataWorkToUIdata( csArrayList, out goodsUnitDataLst, out rateList );
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 ADD
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/12/01 ADD
                            // 商品の論理削除時に掛率マスタは完全削除するので、
                            // このタイミングでは必ずrateListは空になる。
                            rateList = new List<Rate>();
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/12/01 ADD

                            //----------------------------------------------------------------------------
                            // ヘッダ情報を更新する
                            //----------------------------------------------------------------------------
                            if (goodsUnitDataLst != null)
                            {
                                //----------------------------------------------------------------------------
                                // 商品情報
                                //----------------------------------------------------------------------------
                                // 作成日時
                                goodsUnitData.CreateDateTime = goodsUnitDataLst[0].CreateDateTime;

                                // 更新日時
                                goodsUnitData.UpdateDateTime = goodsUnitDataLst[0].UpdateDateTime;

                                // 企業コード
                                goodsUnitData.EnterpriseCode = goodsUnitDataLst[0].EnterpriseCode;

                                // GUID
                                goodsUnitData.FileHeaderGuid = goodsUnitDataLst[0].FileHeaderGuid;

                                // 更新従業員コード
                                goodsUnitData.UpdEmployeeCode = goodsUnitDataLst[0].UpdEmployeeCode;

                                // 更新アセンブリID1
                                goodsUnitData.UpdAssemblyId1 = goodsUnitDataLst[0].UpdAssemblyId1;

                                // 更新アセンブリID2
                                goodsUnitData.UpdAssemblyId2 = goodsUnitDataLst[0].UpdAssemblyId2;

                                // 論理削除区分
                                goodsUnitData.LogicalDeleteCode = goodsUnitDataLst[0].LogicalDeleteCode;

                                // -------- ADD START 2014/02/10 高陽 -------->>>>>
                                // 作成日時Ⅱ
                                goodsUnitData.CreateDateTimeA = goodsUnitDataLst[0].CreateDateTimeA;

                                // 更新日時Ⅱ
                                goodsUnitData.UpdateDateTimeA = goodsUnitDataLst[0].UpdateDateTimeA;

                                // GUIDⅡ
                                goodsUnitData.FileHeaderGuidA = goodsUnitDataLst[0].FileHeaderGuidA;
                                // -------- ADD END 2014/02/10 高陽 --------<<<<<
                                //----------------------------------------------------------------------------
                                // 価格情報
                                //----------------------------------------------------------------------------
                                goodsUnitData.GoodsPriceList.Clear();
                                goodsUnitData.GoodsPriceList.AddRange(goodsUnitDataLst[0].GoodsPriceList);

                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/10 ADD
                                //----------------------------------------------------------------------------
                                // 単品売価(掛率情報)
                                //----------------------------------------------------------------------------
                                // ※このメソッドの引数の ref rateList に既に結果が格納されているので処理は不要。

                                //----------------------------------------------------------------------------
                                // 在庫情報
                                //----------------------------------------------------------------------------
                                GoodsUnitData wkGoodsUnitData = goodsUnitDataLst[0];
                                goodsUnitData.StockList.Clear();
                                goodsUnitData.StockList.AddRange( wkGoodsUnitData.StockList );
                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/10 ADD
                            }

                            // 商品データ変更イベント発動
                            GoodsAcsEventArgs args = new GoodsAcsEventArgs(goodsUnitData.Clone());
                            FireChangedGoodsDataEventHandler(this, args, mChangedGoodsDataEvent);

                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        msg = "編集中の商品は、既に他の端末で更新されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        msg = "編集中の商品は、既に他の端末で削除されています。";
                        break;
                    // --- ADD 2009/02/02 -------------------------------->>>>>
                    case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(企業ロック)です。" + "\r\n"
                                + "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n"
                                + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(拠点ロック)です。" + "\r\n"
                            + "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(倉庫ロック)です。" + "\r\n"
                            + "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                        // --- ADD 2009/02/02 --------------------------------<<<<<
                    default:
                        msg = "商品データの削除に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品データの削除で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
            }

            return status;
        }
        #endregion

        // --- ADD 2008/09/02 -------------------------------->>>>>
        #region ■ 商品完全削除
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
        /// <summary>
        /// 商品完全削除
        /// </summary>
        /// <param name="goodsUnitData"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public int CompleteDelete( GoodsUnitData goodsUnitData, out string msg )
        {
            List<Rate> rateList = new List<Rate>();
            return CompleteDelete( goodsUnitData, ref rateList, out msg );
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD
        /// <summary>
        /// 商品完全削除
        /// </summary>
        /// <param name="goodsUnitData">削除する商品連結データ</param>
        /// <param name="rateList">掛率リスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 DEL
        //public int CompleteDelete(GoodsUnitData goodsUnitData, out string msg)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/24 ADD
        public int CompleteDelete(GoodsUnitData goodsUnitData, ref List<Rate> rateList, out string msg)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/24 ADD
        {
            //----------------------------------------------------------------------------
            // 初期処理
            //----------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";
            string primaryKey = string.Empty;

            try
            {
                GoodsUnitData bakGoodsUnitData = goodsUnitData.Clone();
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();

                //----------------------------------------------------------------------------
                // 商品連結データオブジェクトから商品連結データワークオブジェクトリスト取得
                //----------------------------------------------------------------------------
                CustomSerializeArrayList csArrayList = new CustomSerializeArrayList();
                ArrayList workList = new ArrayList();
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/12/01 ADD
                goodsUnitData.LogicalDeleteCode = 3;
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/12/01 ADD
                this.CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref workList, goodsUnitData);
                csArrayList.Add(workList);
                object lstObj = csArrayList;

                //----------------------------------------------------------------------------
                // ＤＢ更新
                //----------------------------------------------------------------------------
                status = this._iGoodsURelationDataDB.DeleteRelation(lstObj);
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            // 論理削除フラグを完全削除に更新する
                            goodsUnitData.LogicalDeleteCode = 3;

                            // 商品データ変更イベント発動
                            GoodsAcsEventArgs args = new GoodsAcsEventArgs(goodsUnitData.Clone());
                            FireChangedGoodsDataEventHandler(this, args, mChangedGoodsDataEvent);

                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        msg = "編集中の商品は、既に他の端末で更新されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        msg = "編集中の商品は、既に他の端末で削除されています。";
                        break;
                    // --- ADD 2009/02/02 -------------------------------->>>>>
                    case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(企業ロック)です。" + "\r\n"
                                + "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n"
                                + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(拠点ロック)です。" + "\r\n"
                            + "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(倉庫ロック)です。" + "\r\n"
                            + "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    // --- ADD 2009/02/02 --------------------------------<<<<<
                    default:
                        msg = "商品データの削除に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品データの削除で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
            }

            return status;
        }
        #endregion
        // --- ADD 2008/09/02 --------------------------------<<<<<

        #region ■ 論理削除復活
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 ADD
        /// <summary>
        /// 論理削除復活
        /// </summary>
        /// <param name="goodsUnitData"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public int Revival( ref GoodsUnitData goodsUnitData, out string msg )
        {
            List<Rate> rateList = new List<Rate>();
            return Revival( ref goodsUnitData, ref rateList, out msg );
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 ADD
        /// <summary>
        /// 論理削除復活
        /// </summary>
        /// <param name="goodsUnitData">復活する商品連結データ</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <param name="rateList"></param>
        /// <returns>ConstantManagement.DB_Status</returns>
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 DEL
        //public int Revival(ref GoodsUnitData goodsUnitData, out string msg)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 ADD
        public int Revival(ref GoodsUnitData goodsUnitData, ref List<Rate> rateList, out string msg)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 ADD
        {

            //----------------------------------------------------------------------------
            // 初期処理
            //----------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";
            string primaryKey = string.Empty;

            try
            {
                GoodsUnitData bakGoodsUnitData = goodsUnitData.Clone();
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();

                //----------------------------------------------------------------------------
                // 商品連結データオブジェクトから商品連結データワークオブジェクトリスト取得
                //----------------------------------------------------------------------------
                CustomSerializeArrayList csArrayList = new CustomSerializeArrayList();
                ArrayList workList = new ArrayList();
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 ADD
                // 価格情報の復旧(※商品復旧時に同時に復旧させる)
                foreach ( GoodsPrice price in goodsUnitData.GoodsPriceList )
                {
                    price.LogicalDeleteCode = 0;
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 ADD
                this.CopyToGoodsUnitDataWorkListFromGoodsUnitData( ref workList, goodsUnitData );
                csArrayList.Add(workList);
                object lstObj = csArrayList;

                //----------------------------------------------------------------------------
                // ＤＢ更新
                //----------------------------------------------------------------------------
                status = this._iGoodsURelationDataDB.RevivalLogicalDeleteRelation(ref lstObj);

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            csArrayList = lstObj as CustomSerializeArrayList;
                            List<GoodsUnitData> goodsUnitDataLst;

                            //----------------------------------------------------------------------------
                            // 更新戻り値から商品連結データオブジェクトリスト取得
                            //----------------------------------------------------------------------------
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 DEL
                            //this.GetGoodsUnitDataWorkToUIdata(csArrayList, out goodsUnitDataLst);
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 DEL
                            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 ADD
                            this.GetGoodsUnitDataWorkToUIdata( csArrayList, out goodsUnitDataLst, out rateList );
                            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 ADD

                            //----------------------------------------------------------------------------
                            // ヘッダ情報を更新する
                            //----------------------------------------------------------------------------
                            if (goodsUnitDataLst != null)
                            {
                                //----------------------------------------------------------------------------
                                // 商品情報
                                //----------------------------------------------------------------------------
                                // 作成日時
                                goodsUnitData.CreateDateTime = goodsUnitDataLst[0].CreateDateTime;

                                // 更新日時
                                goodsUnitData.UpdateDateTime = goodsUnitDataLst[0].UpdateDateTime;

                                // 企業コード
                                goodsUnitData.EnterpriseCode = goodsUnitDataLst[0].EnterpriseCode;

                                // GUID
                                goodsUnitData.FileHeaderGuid = goodsUnitDataLst[0].FileHeaderGuid;

                                // 更新従業員コード
                                goodsUnitData.UpdEmployeeCode = goodsUnitDataLst[0].UpdEmployeeCode;

                                // 更新アセンブリID1
                                goodsUnitData.UpdAssemblyId1 = goodsUnitDataLst[0].UpdAssemblyId1;

                                // 更新アセンブリID2
                                goodsUnitData.UpdAssemblyId2 = goodsUnitDataLst[0].UpdAssemblyId2;

                                // 論理削除区分
                                goodsUnitData.LogicalDeleteCode = goodsUnitDataLst[0].LogicalDeleteCode;

                                // -------- ADD START 2014/02/10 高陽 -------->>>>>
                                // 作成日時Ⅱ
                                goodsUnitData.CreateDateTimeA = goodsUnitDataLst[0].CreateDateTimeA;

                                // 更新日時Ⅱ
                                goodsUnitData.UpdateDateTimeA = goodsUnitDataLst[0].UpdateDateTimeA;

                                // GUIDⅡ
                                goodsUnitData.FileHeaderGuidA = goodsUnitDataLst[0].FileHeaderGuidA;
                                // -------- ADD END 2014/02/10 高陽 --------<<<<<
                                //----------------------------------------------------------------------------
                                // 価格情報
                                //----------------------------------------------------------------------------
                                goodsUnitData.GoodsPriceList.Clear();
                                goodsUnitData.GoodsPriceList.AddRange(goodsUnitDataLst[0].GoodsPriceList);

                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/10 ADD
                                //----------------------------------------------------------------------------
                                // 単品売価(掛率情報)
                                //----------------------------------------------------------------------------
                                // ※このメソッドの引数の ref rateList に既に結果が格納されているので処理は不要。

                                //----------------------------------------------------------------------------
                                // 在庫情報
                                //----------------------------------------------------------------------------
                                GoodsUnitData wkGoodsUnitData = goodsUnitDataLst[0];
                                goodsUnitData.StockList.Clear();
                                goodsUnitData.StockList.AddRange( wkGoodsUnitData.StockList );
                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/10 ADD
                            }

                            // 商品データ変更イベント発動
                            GoodsAcsEventArgs args = new GoodsAcsEventArgs(goodsUnitData.Clone());
                            FireChangedGoodsDataEventHandler(this, args, mChangedGoodsDataEvent);

                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        msg = "編集中の商品は、既に他の端末で更新されています。";

                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        msg = "編集中の商品は、既に他の端末で削除されています。";
                        break;
                    // --- ADD 2009/02/02 -------------------------------->>>>>
                    case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(企業ロック)です。" + "\r\n"
                                + "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n"
                                + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(拠点ロック)です。" + "\r\n"
                            + "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(倉庫ロック)です。" + "\r\n"
                            + "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    // --- ADD 2009/02/02 --------------------------------<<<<<
                    default:
                        msg = "商品データの復活に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品データの復活で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
            }

            return status;
        }
        #endregion
        #endregion

        // --------------------------------------------------
        #region < 各種マスタ情報取得メソッド群 >
        #region ●商品管理情報取得
        /// <summary>
        /// 商品管理情報取得
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        public void GetGoodsMngInfo(ref GoodsUnitData goodsUnitData)
        {
            this.GetGoodsMngInfoProc(ref goodsUnitData);
        }

        // ADD 2013/07/31 yugami Redmine#39451対応 ----------------------------------->>>>>
        /// <summary>
        /// 商品管理情報取得（タブレット用）
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        public void GetGoodsMngInfoForTablet(ref GoodsUnitData goodsUnitData)
        {
            this.GetGoodsMngInfoForTabletProc(ref goodsUnitData);
        }
        // ADD 2013/07/31 yugami Redmine#39451対応 -----------------------------------<<<<<


        // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
        /// <summary>
        /// 商品管理情報マスタの設定パターン（優先順）列挙型
        /// </summary>
        public enum GoodsMngSettingPattern : int
        {
            /// <summary>なし</summary>
            None,
            /// <summary>拠点+メーカー+品番</summary>
            Section_Maker_GoodsNo,
            /// <summary>全社+メーカー+品番</summary>
            AllSection_Maker_GoodsNo,
            /// <summary>拠点+メーカー+中分類+BL</summary>
            Section_Maker_MGroup_BL,
            /// <summary>全社+メーカー+中分類+BL</summary>
            AllSection_Maker_MGroup_BL,
            /// <summary>拠点+メーカー+中分類</summary>
            Section_Maker_MGroup,
            /// <summary>全社+メーカー+中分類</summary>
            AllSection_Maker_MGroup,
            /// <summary>拠点+メーカー</summary>
            Section_Maker,
            /// <summary>全社＋メーカー</summary>
            AllSection_Maker
        }

        /// <summary>
        /// FIXME:商品管理情報を商品連結データに設定します。
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <returns>検索結果のパターン（優先順）</returns>
        /// <exception cref="ArgumentNullException"><c>goodsUnitData</c>が<c>null</c>です。</exception>
        public GoodsMngSettingPattern SetGoodsMngInfoTo(GoodsUnitData goodsUnitData)
        {
            if (goodsUnitData == null) throw new ArgumentNullException("goodsUnitData");

            return GetGoodsMngInfoProc(ref goodsUnitData);
        }
        // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
        // 2009.03.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        #region 削除
        // 2009.02.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        #region 削除
        ///// <summary>
        ///// 商品管理情報取得
        ///// </summary>
        ///// <param name="goodsUnitData">商品連結データオブジェクト</param>
        //private void GetGoodsMngInfoProc(ref GoodsUnitData goodsUnitData)
        //{
        //    // 2009.01.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //    //GoodsMng retGoodsMng = null;
        //    GoodsMngWork retGoodsMng = null;
        //    // 2009.01.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        //    if (_goodsMngList.Count != 0)
        //    {
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/10 DEL
        //        //_goodsMngList.Sort(new GoodsMngComparer());

        //        //foreach (GoodsMng goodsmng in _goodsMngList)
        //        //{
        //        //    bool agree = true;

        //        //    // 拠点コード
        //        //    if (!string.IsNullOrEmpty(goodsmng.SectionCode))
        //        //    {
        //        //        if (goodsmng.SectionCode != goodsUnitData.SectionCode) agree = false;
        //        //    }
        //        //    // メーカーコード
        //        //    if (agree == true)
        //        //    {
        //        //        if (goodsmng.GoodsMakerCd != 0)
        //        //        {
        //        //            if (goodsmng.GoodsMakerCd != goodsUnitData.GoodsMakerCd) agree = false;
        //        //        }
        //        //    }
        //        //    // 商品番号
        //        //    if (agree == true)
        //        //    {
        //        //        if (!string.IsNullOrEmpty(goodsmng.GoodsNo))
        //        //        {
        //        //            if (goodsmng.GoodsNo != goodsUnitData.GoodsNo) agree = false;
        //        //        }
        //        //    }
        //        //    if (agree == true)
        //        //    {
        //        //        retGoodsMng = goodsmng;
        //        //        break;
        //        //    }
        //        //}
        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/10 DEL
        //        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/10 ADD

        //        // 降順にソートする(優先度高→低)
        //        _goodsMngList.Sort(new GoodsMngComparer());

        //        // FindのPredicate内部で【ref】goodsUnitDataを使用できないので便宜上別定義する
        //        GoodsUnitData goods = goodsUnitData;

        //        // 指定Predicateに合致する最初のレコードを取得
        //        retGoodsMng = _goodsMngList.Find(
        //            // 2009.01.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //            //delegate(GoodsMng goodsMng)
        //            delegate(GoodsMngWork goodsMng)
        //            // 2009.01.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        //            {
        //                // 2008.10.28 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //                //// 2008.10.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //                ////// 全社以外かつ拠点違い→NG
        //                //////if (!string.IsNullOrEmpty(goodsMng.SectionCode) && (goodsMng.SectionCode != goods.SectionCode)) return false;
        //                //// 全社以外かつ拠点違い→NG
        //                //if ((goodsMng.SectionCode.Trim() != ctAllDefSectionCode) && (goodsMng.SectionCode != goods.SectionCode)) return false;
        //                //// 2008.10.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        //                if ((goodsMng.SectionCode.Trim() != ctAllDefSectionCode) && (goodsMng.SectionCode.Trim() != goods.SectionCode.Trim())) return false;
        //                // 2008.10.28 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        //                // メーカー違い→NG
        //                if (goodsMng.GoodsMakerCd != goods.GoodsMakerCd) return false;

        //                // ＢＬor品番or無?
        //                if (goodsMng.BLGoodsCode != 0)
        //                {
        //                    // ＢＬコード有かつＢＬコード違い→NG
        //                    if (goodsMng.BLGoodsCode != goods.BLGoodsCode) return false;
        //                }
        //                else if (!string.IsNullOrEmpty(goodsMng.GoodsNo))
        //                {
        //                    // ＢＬコード無かつ品番有かつ品番違い→NG
        //                    if (goodsMng.GoodsNo != goods.GoodsNo) return false;
        //                }

        //                // 上記チェックでNGでないならOK
        //                return true;
        //            }
        //        );

        //        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/10 ADD
        //        if (retGoodsMng != null)
        //        {
        //            // 商品連結クラスへ商品管理情報セット
        //            SettingGoodsUnitDataFromGoodsMng(ref goodsUnitData, retGoodsMng);
        //        }
        //    }
        //}
        #endregion

        ///// <summary>
        ///// 商品管理情報取得
        ///// </summary>
        ///// <param name="goodsUnitData">商品連結データオブジェクト</param>
        //private void GetGoodsMngInfoProc(ref GoodsUnitData goodsUnitData)
        //{
        //    GoodsMngWork retGoodsMng = null;
        //    GoodsMngWork svGoodsMng = null;

        //    try
        //    {
        //        if (_goodsMngListOnlyGoodsNo.Count != 0)
        //        {
        //            // FindのPredicate内部で【ref】goodsUnitDataを使用できないので便宜上別定義する
        //            GoodsUnitData goods = goodsUnitData;

        //            // 指定Predicateに合致する最初のレコードを取得
        //            retGoodsMng = _goodsMngListOnlyGoodsNo.Find(
        //                delegate(GoodsMngWork goodsMng)
        //                {
        //                    if ((goodsMng.GoodsNo == goods.GoodsNo) &&
        //                        (goodsMng.GoodsMakerCd == goods.GoodsMakerCd) &&
        //                        (goodsMng.SectionCode.Trim() == goods.SectionCode.Trim() || goodsMng.SectionCode.Trim() == ctAllDefSectionCode))
        //                    {
        //                        return true;
        //                    }
        //                    else
        //                    {
        //                        return false;
        //                    }
        //                }
        //            );
        //        }

        //        if ((retGoodsMng != null) &&
        //            (retGoodsMng.SectionCode != ctAllDefSectionCode))
        //        {
        //            return; // ●指定拠点＋指定メーカー＋指定品番
        //        }
        //        else
        //        {
        //            // 共通拠点と指定品番でヒット→品番以外の優先順位で検索
        //            svGoodsMng = retGoodsMng;
        //        }

        //        if (_goodsMngListExceptGoodsNo.Count != 0)
        //        {
        //            // FindのPredicate内部で【ref】goodsUnitDataを使用できないので便宜上別定義する
        //            GoodsUnitData goods = goodsUnitData;

        //            // 指定Predicateに合致する最初のレコードを取得
        //            retGoodsMng = _goodsMngListExceptGoodsNo.Find(
        //                delegate(GoodsMngWork goodsMng)
        //                {
        //                    // ＢＬor無?
        //                    if (goodsMng.BLGoodsCode != 0)
        //                    {
        //                        // ＢＬコード有かつＢＬコード違い→NG
        //                        if (goodsMng.BLGoodsCode != goods.BLGoodsCode) return false;
        //                    }
        //                    // メーカー違い→NG
        //                    if (goodsMng.GoodsMakerCd != goods.GoodsMakerCd) return false;


        //                    if ((goodsMng.SectionCode.Trim() != ctAllDefSectionCode) && (goodsMng.SectionCode.Trim() != goods.SectionCode.Trim())) return false;



        //                    // 上記チェックでNGでないならOK
        //                    return true;
        //                }
        //            );
        //        }

        //        if (retGoodsMng == null) return; // ●該当なし

        //        if (retGoodsMng.SectionCode != ctAllDefSectionCode)
        //        {
        //            return; // ●指定拠点
        //        }
        //        else
        //        {
        //            if (svGoodsMng != null)
        //            {
        //                retGoodsMng = svGoodsMng; // ●共通拠点＋指定メーカー＋指定品番
        //            }
        //            return; // ●共通拠点
        //        }
        //    }
        //    finally
        //    {
        //        if (retGoodsMng != null)
        //        {
        //            // 商品連結クラスへ商品管理情報セット
        //            SettingGoodsUnitDataFromGoodsMng(ref goodsUnitData, retGoodsMng);
        //        }
        //    }
        //}
        // 2009.02.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        #endregion

        /// <summary>
        /// 商品管理情報取得
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
        // private void GetGoodsMngInfoProc(ref GoodsUnitData goodsUnitData)
        // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
        // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
        private GoodsMngSettingPattern GetGoodsMngInfoProc(ref GoodsUnitData goodsUnitData)
        // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
        {
            GoodsMngWork retGoodsMng = null;
            //GoodsMngWork svGoodsMng = null;       // 2009/04/13 DEL

            try
            {
                #region 2009/06/10 DEL 優先順変更の為
                //// 2009/04/13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //#region 削除
                ////if (_goodsMngListOnlyGoodsNo.Count != 0)
                ////{
                ////    // FindのPredicate内部で【ref】goodsUnitDataを使用できないので便宜上別定義する
                ////    GoodsUnitData goods = goodsUnitData;

                ////    // 指定Predicateに合致する最初のレコードを取得
                ////    retGoodsMng = _goodsMngListOnlyGoodsNo.Find(
                ////        delegate(GoodsMngWork goodsMng)
                ////        {
                ////            if ((goodsMng.GoodsNo == goods.GoodsNo) &&
                ////                (goodsMng.GoodsMakerCd == goods.GoodsMakerCd) &&
                ////                (goodsMng.SectionCode.Trim() == goods.SectionCode.Trim() || goodsMng.SectionCode.Trim() == ctAllDefSectionCode))
                ////            {
                ////                return true;
                ////            }
                ////            else
                ////            {
                ////                return false;
                ////            }
                ////        }
                ////    );
                ////}

                ////if ((retGoodsMng != null) &&
                ////    (retGoodsMng.SectionCode.Trim() != ctAllDefSectionCode))
                ////{
                ////    return; // ●指定拠点＋指定メーカー＋指定品番
                ////}
                ////else
                ////{
                ////    // 共通拠点と指定品番でヒット→品番以外の優先順位で検索
                ////    svGoodsMng = retGoodsMng;
                ////}

                ////if (_goodsMngListExceptGoodsNo.Count != 0)
                ////{
                ////    // FindのPredicate内部で【ref】goodsUnitDataを使用できないので便宜上別定義する
                ////    GoodsUnitData goods = goodsUnitData;

                ////    // 指定Predicateに合致する最初のレコードを取得
                ////    retGoodsMng = _goodsMngListExceptGoodsNo.Find(
                ////        delegate(GoodsMngWork goodsMng)
                ////        {
                ////            // 中分類
                ////            if (goodsMng.GoodsMGroup != 0)
                ////            {
                ////                // 中分類有かつ中分類違い→NG
                ////                if (goodsMng.GoodsMGroup != goods.GoodsMGroup) return false;
                ////            }
                ////            // ＢＬor無?
                ////            if (goodsMng.BLGoodsCode != 0)
                ////            {
                ////                // ＢＬコード有かつＢＬコード違い→NG
                ////                if (goodsMng.BLGoodsCode != goods.BLGoodsCode) return false;
                ////            }
                ////            // メーカー違い→NG
                ////            if (goodsMng.GoodsMakerCd != goods.GoodsMakerCd) return false;

                ////            if ((goodsMng.SectionCode.Trim() != ctAllDefSectionCode) && (goodsMng.SectionCode.Trim() != goods.SectionCode.Trim())) return false;

                ////            // 上記チェックでNGでないならOK
                ////            return true;
                ////        }
                ////    );
                ////}

                ////// 2009.03.31 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //////if (retGoodsMng == null) return; // ●該当なし

                //////if (retGoodsMng.SectionCode.Trim() != ctAllDefSectionCode)
                //////{
                //////    return; // ●指定拠点
                //////}
                //////else
                //////{
                //////    if (svGoodsMng != null)
                //////    {
                //////        retGoodsMng = svGoodsMng; // ●共通拠点＋指定メーカー＋指定品番
                //////    }
                //////    return; // ●共通拠点
                //////}

                ////if ((retGoodsMng != null) &&
                ////    (retGoodsMng.SectionCode.Trim() != ctAllDefSectionCode))
                ////{
                ////    return; // ●指定拠点
                ////}
                ////else
                ////{
                ////    if (svGoodsMng != null)
                ////    {
                ////        retGoodsMng = svGoodsMng; // ●共通拠点＋指定メーカー＋指定品番
                ////    }
                ////    return; // ●共通拠点
                ////}
                ////// 2009.03.31 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                //#endregion

                //StringBuilder goodsMngDic1key = new StringBuilder();
                //StringBuilder goodsMngDic2key = new StringBuilder();
                //StringBuilder goodsMngDic3key = new StringBuilder();
                //StringBuilder goodsMngDic4key = new StringBuilder();
                //StringBuilder goodsMngDic5key = new StringBuilder();
                //StringBuilder goodsMngDic6key = new StringBuilder();
                //StringBuilder goodsMngDic7key = new StringBuilder();
                //StringBuilder goodsMngDic8key = new StringBuilder();

                //goodsMngDic4key.Append(goodsUnitData.SectionCode.Trim().PadLeft(2,'0'));    //拠点
                //goodsMngDic4key.Append(goodsUnitData.GoodsMakerCd.ToString("0000"));        //メーカー

                //goodsMngDic1key.Append(goodsMngDic4key.ToString());                         //拠点＋メーカー
                //goodsMngDic1key.Append(goodsUnitData.GoodsNo.Trim());                       //品番

                //goodsMngDic3key.Append(goodsMngDic4key.ToString());                         //拠点＋メーカー
                //goodsMngDic3key.Append(goodsUnitData.GoodsMGroup.ToString("0000"));         //中分類

                //goodsMngDic2key.Append(goodsMngDic3key.ToString());                         //拠点＋メーカー＋中分類
                //goodsMngDic2key.Append(goodsUnitData.BLGoodsCode.ToString("00000"));        //ＢＬ

                
                //if (_goodsMngDic1.ContainsKey(goodsMngDic1key.ToString()))
                //{
                //    //拠点＋メーカー＋品番
                //    retGoodsMng = _goodsMngDic1[goodsMngDic1key.ToString()];
                //}
                //else if (_goodsMngDic2.ContainsKey(goodsMngDic2key.ToString()))
                //{
                //    //拠点＋中分類＋メーカー＋ＢＬ
                //    retGoodsMng = _goodsMngDic2[goodsMngDic2key.ToString()];
                //}
                //else if (_goodsMngDic3.ContainsKey(goodsMngDic3key.ToString()))
                //{
                //    //拠点＋中分類＋メーカー
                //    retGoodsMng = _goodsMngDic3[goodsMngDic3key.ToString()];
                //}
                //else if (_goodsMngDic4.ContainsKey(goodsMngDic4key.ToString()))
                //{
                //    //拠点＋メーカー
                //    retGoodsMng = _goodsMngDic4[goodsMngDic4key.ToString()];
                //}
                //else
                //{
                //    goodsMngDic8key.Append(ctAllDefSectionCode);                            //全社
                //    goodsMngDic8key.Append(goodsUnitData.GoodsMakerCd.ToString("0000"));    //メーカー

                //    goodsMngDic5key.Append(goodsMngDic8key.ToString());                     //全社＋メーカー
                //    goodsMngDic5key.Append(goodsUnitData.GoodsNo.Trim());                   //品番

                //    goodsMngDic7key.Append(goodsMngDic8key.ToString());                     //全社＋メーカー
                //    goodsMngDic7key.Append(goodsUnitData.GoodsMGroup.ToString("0000"));     //中分類

                //    goodsMngDic6key.Append(goodsMngDic7key.ToString());                     //全社＋メーカー＋中分類
                //    goodsMngDic6key.Append(goodsUnitData.BLGoodsCode.ToString("00000"));    //ＢＬ

                //    if (_goodsMngDic1.ContainsKey(goodsMngDic5key.ToString()))
                //    {
                //        //全社＋メーカー＋品番
                //        retGoodsMng = _goodsMngDic1[goodsMngDic5key.ToString()];
                //    }
                //    else if (_goodsMngDic2.ContainsKey(goodsMngDic6key.ToString()))
                //    {
                //        //全社＋中分類＋メーカー＋ＢＬ
                //        retGoodsMng = _goodsMngDic2[goodsMngDic6key.ToString()];
                //    }
                //    else if (_goodsMngDic3.ContainsKey(goodsMngDic7key.ToString()))
                //    {
                //        //全社＋中分類＋メーカー
                //        retGoodsMng = _goodsMngDic3[goodsMngDic7key.ToString()];
                //    }
                //    else if (_goodsMngDic4.ContainsKey(goodsMngDic8key.ToString()))
                //    {
                //        //全社＋メーカー
                //        retGoodsMng = _goodsMngDic4[goodsMngDic8key.ToString()];
                //    }
                //}              
                //// 2009/04/13 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                #endregion 2009/06/10 DEL 優先順変更の為

                // ---ADD 2009/06/10 優先順変更の為 ------------------------------------->>>>>
                //拠点＋メーカー
                StringBuilder goodsMngDic4key = new StringBuilder();
                goodsMngDic4key.Append(goodsUnitData.SectionCode.Trim().PadLeft(2, '0'));
                goodsMngDic4key.Append(goodsUnitData.GoodsMakerCd.ToString("0000"));
                //【拠点＋メーカー】＋品番
                StringBuilder goodsMngDic1key = new StringBuilder();
                goodsMngDic1key.Append(goodsMngDic4key.ToString());
                goodsMngDic1key.Append(goodsUnitData.GoodsNo.Trim());

                //1.拠点＋メーカー＋品番
                if (_goodsMngDic1.ContainsKey(goodsMngDic1key.ToString()))
                {
                    retGoodsMng = _goodsMngDic1[goodsMngDic1key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.Section_Maker_GoodsNo;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //全社＋メーカー
                StringBuilder goodsMngDic8key = new StringBuilder();
                goodsMngDic8key.Append(ctAllDefSectionCode);
                goodsMngDic8key.Append(goodsUnitData.GoodsMakerCd.ToString("0000"));
                //【全社＋メーカー】＋品番
                StringBuilder goodsMngDic5key = new StringBuilder();
                goodsMngDic5key.Append(goodsMngDic8key.ToString());
                goodsMngDic5key.Append(goodsUnitData.GoodsNo.Trim());

                //2.全社＋メーカー＋品番
                if (_goodsMngDic1.ContainsKey(goodsMngDic5key.ToString()))
                {
                    retGoodsMng = _goodsMngDic1[goodsMngDic5key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.AllSection_Maker_GoodsNo;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //【拠点＋メーカー】＋中分類
                StringBuilder goodsMngDic3key = new StringBuilder();
                goodsMngDic3key.Append(goodsMngDic4key.ToString());
                goodsMngDic3key.Append(goodsUnitData.GoodsMGroup.ToString("0000"));
                //【拠点＋メーカー＋中分類】＋ＢＬ
                StringBuilder goodsMngDic2key = new StringBuilder();
                goodsMngDic2key.Append(goodsMngDic3key.ToString());
                goodsMngDic2key.Append(goodsUnitData.BLGoodsCode.ToString("00000"));

                //3.拠点＋中分類＋メーカー＋ＢＬ
                if (_goodsMngDic2.ContainsKey(goodsMngDic2key.ToString()))
                {
                    retGoodsMng = _goodsMngDic2[goodsMngDic2key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.Section_Maker_MGroup_BL;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //【全社＋メーカー】＋中分類
                StringBuilder goodsMngDic7key = new StringBuilder();
                goodsMngDic7key.Append(goodsMngDic8key.ToString());
                goodsMngDic7key.Append(goodsUnitData.GoodsMGroup.ToString("0000"));
                //【全社＋メーカー＋中分類】＋ＢＬ
                StringBuilder goodsMngDic6key = new StringBuilder();
                goodsMngDic6key.Append(goodsMngDic7key.ToString());
                goodsMngDic6key.Append(goodsUnitData.BLGoodsCode.ToString("00000"));

                //4.全社＋中分類＋メーカー＋ＢＬ
                if (_goodsMngDic2.ContainsKey(goodsMngDic6key.ToString()))
                {
                    retGoodsMng = _goodsMngDic2[goodsMngDic6key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.AllSection_Maker_MGroup_BL;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //5.拠点＋中分類＋メーカー
                if (_goodsMngDic3.ContainsKey(goodsMngDic3key.ToString()))
                {
                    retGoodsMng = _goodsMngDic3[goodsMngDic3key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.Section_Maker_MGroup;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //6.全社＋中分類＋メーカー
                if (_goodsMngDic3.ContainsKey(goodsMngDic7key.ToString()))
                {
                    retGoodsMng = _goodsMngDic3[goodsMngDic7key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.AllSection_Maker_MGroup;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //7.拠点＋メーカー
                if (_goodsMngDic4.ContainsKey(goodsMngDic4key.ToString()))
                {
                    retGoodsMng = _goodsMngDic4[goodsMngDic4key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.Section_Maker;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //8.全社＋メーカー
                if (_goodsMngDic4.ContainsKey(goodsMngDic8key.ToString()))
                {
                    retGoodsMng = _goodsMngDic4[goodsMngDic8key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.AllSection_Maker;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }
                // ---ADD 2009/06/10 優先順変更の為 -------------------------------------<<<<<
                // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                // 検索結果なし
                return GoodsMngSettingPattern.None;
                // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
            }
            finally
            {
                if (retGoodsMng != null)
                {
                    // 商品連結クラスへ商品管理情報セット
                    SettingGoodsUnitDataFromGoodsMng(ref goodsUnitData, retGoodsMng);
                }
            }
        }
        // 2009.03.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // ADD 2013/07/31 yugami Redmine#39451対応 ----------------------------------->>>>>
        /// <summary>
        /// 商品管理情報取得（タブレット用）
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        private GoodsMngSettingPattern GetGoodsMngInfoForTabletProc(ref GoodsUnitData goodsUnitData)
        {
            GoodsMngWork retGoodsMng = null;

            this._goodsMngWorkForTablet = null;

            try
            {
                // ---ADD 2009/06/10 優先順変更の為 ------------------------------------->>>>>
                //拠点＋メーカー
                StringBuilder goodsMngDic4key = new StringBuilder();
                goodsMngDic4key.Append(goodsUnitData.SectionCode.Trim().PadLeft(2, '0'));
                goodsMngDic4key.Append(goodsUnitData.GoodsMakerCd.ToString("0000"));
                //【拠点＋メーカー】＋品番
                StringBuilder goodsMngDic1key = new StringBuilder();
                goodsMngDic1key.Append(goodsMngDic4key.ToString());
                goodsMngDic1key.Append(goodsUnitData.GoodsNo.Trim());

                //1.拠点＋メーカー＋品番
                if (_goodsMngDic1.ContainsKey(goodsMngDic1key.ToString()))
                {
                    retGoodsMng = _goodsMngDic1[goodsMngDic1key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.Section_Maker_GoodsNo;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //全社＋メーカー
                StringBuilder goodsMngDic8key = new StringBuilder();
                goodsMngDic8key.Append(ctAllDefSectionCode);
                goodsMngDic8key.Append(goodsUnitData.GoodsMakerCd.ToString("0000"));
                //【全社＋メーカー】＋品番
                StringBuilder goodsMngDic5key = new StringBuilder();
                goodsMngDic5key.Append(goodsMngDic8key.ToString());
                goodsMngDic5key.Append(goodsUnitData.GoodsNo.Trim());

                //2.全社＋メーカー＋品番
                if (_goodsMngDic1.ContainsKey(goodsMngDic5key.ToString()))
                {
                    retGoodsMng = _goodsMngDic1[goodsMngDic5key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.AllSection_Maker_GoodsNo;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //【拠点＋メーカー】＋中分類
                StringBuilder goodsMngDic3key = new StringBuilder();
                goodsMngDic3key.Append(goodsMngDic4key.ToString());
                goodsMngDic3key.Append(goodsUnitData.GoodsMGroup.ToString("0000"));
                //【拠点＋メーカー＋中分類】＋ＢＬ
                StringBuilder goodsMngDic2key = new StringBuilder();
                goodsMngDic2key.Append(goodsMngDic3key.ToString());
                goodsMngDic2key.Append(goodsUnitData.BLGoodsCode.ToString("00000"));

                //3.拠点＋中分類＋メーカー＋ＢＬ
                if (_goodsMngDic2.ContainsKey(goodsMngDic2key.ToString()))
                {
                    retGoodsMng = _goodsMngDic2[goodsMngDic2key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.Section_Maker_MGroup_BL;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //【全社＋メーカー】＋中分類
                StringBuilder goodsMngDic7key = new StringBuilder();
                goodsMngDic7key.Append(goodsMngDic8key.ToString());
                goodsMngDic7key.Append(goodsUnitData.GoodsMGroup.ToString("0000"));
                //【全社＋メーカー＋中分類】＋ＢＬ
                StringBuilder goodsMngDic6key = new StringBuilder();
                goodsMngDic6key.Append(goodsMngDic7key.ToString());
                goodsMngDic6key.Append(goodsUnitData.BLGoodsCode.ToString("00000"));

                //4.全社＋中分類＋メーカー＋ＢＬ
                if (_goodsMngDic2.ContainsKey(goodsMngDic6key.ToString()))
                {
                    retGoodsMng = _goodsMngDic2[goodsMngDic6key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.AllSection_Maker_MGroup_BL;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //5.拠点＋中分類＋メーカー
                if (_goodsMngDic3.ContainsKey(goodsMngDic3key.ToString()))
                {
                    retGoodsMng = _goodsMngDic3[goodsMngDic3key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.Section_Maker_MGroup;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //6.全社＋中分類＋メーカー
                if (_goodsMngDic3.ContainsKey(goodsMngDic7key.ToString()))
                {
                    retGoodsMng = _goodsMngDic3[goodsMngDic7key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.AllSection_Maker_MGroup;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //7.拠点＋メーカー
                if (_goodsMngDic4.ContainsKey(goodsMngDic4key.ToString()))
                {
                    retGoodsMng = _goodsMngDic4[goodsMngDic4key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.Section_Maker;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }

                //8.全社＋メーカー
                if (_goodsMngDic4.ContainsKey(goodsMngDic8key.ToString()))
                {
                    retGoodsMng = _goodsMngDic4[goodsMngDic8key.ToString()];
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    // return;
                    // DEL 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                    return GoodsMngSettingPattern.AllSection_Maker;
                    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
                }
                // ---ADD 2009/06/10 優先順変更の為 -------------------------------------<<<<<
                // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ---------->>>>>
                // 検索結果なし
                return GoodsMngSettingPattern.None;
                // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加 ----------<<<<<
            }
            finally
            {
                if (retGoodsMng != null)
                {
                    // 商品連結クラスへ商品管理情報セット
                    SettingGoodsUnitDataFromGoodsMng(ref goodsUnitData, retGoodsMng);
                    this._goodsMngWorkForTablet = retGoodsMng;
                }
            }
        }
        // ADD 2013/07/31 yugami Redmine#39451対応 -----------------------------------<<<<<

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/10 DEL
        ///// <summary>
        ///// 商品管理情報比較クラス(拠点コード・メーカーコード・商品番号)
        ///// </summary>
        //private class GoodsMngComparer : Comparer<GoodsMng>
        //{
        //    public override int Compare( GoodsMng x, GoodsMng y )
        //    {
        //        int result = y.SectionCode.CompareTo( x.SectionCode );

        //        if ( result == 0 )
        //        {
        //            result = y.GoodsMakerCd.CompareTo( x.GoodsMakerCd );
        //        }
        //        if ( result == 0 )
        //        {
        //            result = y.GoodsNo.CompareTo( x.GoodsNo );
        //        }
        //        return result;
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/10 DEL
        // 2009.01.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/10 ADD
        ///// <summary>
        ///// 商品管理情報比較クラス(拠点コード(降順)・メーカーコード(降順)・商品番号(降順)・ＢＬコード(降順))
        ///// </summary>
        ///// <remarks>仕様変更＋若干改良</remarks>
        //private class GoodsMngComparer : Comparer<GoodsMng>
        //{
        //    public override int Compare(GoodsMng x, GoodsMng y)
        //    {
        //        int result = y.SectionCode.CompareTo(x.SectionCode);
        //        if (result != 0) return result;

        //        result = y.GoodsMakerCd.CompareTo(x.GoodsMakerCd);
        //        if (result != 0) return result;

        //        result = y.GoodsNo.CompareTo(x.GoodsNo);
        //        if (result != 0) return result;

        //        result = y.BLGoodsCode.CompareTo(x.BLGoodsCode);
        //        return result;
        //    }
        //}
        //// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/10 ADD

        // 2009.03.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>
        ///// 商品管理情報比較クラス(拠点コード(降順)・メーカーコード(降順)・商品番号(降順)・ＢＬコード(降順))
        ///// </summary>
        ///// <remarks>仕様変更＋若干改良</remarks>
        //private class GoodsMngComparer : Comparer<GoodsMngWork>
        //{
        //    public override int Compare(GoodsMngWork x, GoodsMngWork y)
        //    {
        //        int result = y.SectionCode.CompareTo(x.SectionCode);
        //        if (result != 0) return result;

        //        result = y.GoodsMakerCd.CompareTo(x.GoodsMakerCd);
        //        if (result != 0) return result;

        //        result = y.GoodsNo.CompareTo(x.GoodsNo);
        //        if (result != 0) return result;

        //        result = y.BLGoodsCode.CompareTo(x.BLGoodsCode);
        //        return result;
        //    }
        //}
        // 2009.03.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        // 2009.01.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009.03.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 商品管理情報比較クラス(拠点コード(降順)・中分類コード(降順)・メーカーコード(降順)・ＢＬコード(降順))
        /// </summary>
        private class GoodsMngComparer : Comparer<GoodsMngWork>
        {
            public override int Compare(GoodsMngWork x, GoodsMngWork y)
            {
                int result = y.SectionCode.CompareTo(x.SectionCode);
                if (result != 0) return result;

                result = y.GoodsMGroup.CompareTo(x.GoodsMGroup);
                if (result != 0) return result;

                result = y.GoodsMakerCd.CompareTo(x.GoodsMakerCd);
                if (result != 0) return result;

                result = y.BLGoodsCode.CompareTo(x.BLGoodsCode);
                return result;
            }
        }

        /// <summary>
        /// 商品管理情報比較クラス(拠点コード(降順)・メーカーコード(降順)・商品番号(降順))
        /// </summary>
        private class GoodsMngComparerOnlyGoodsNo : Comparer<GoodsMngWork>
        {
            public override int Compare(GoodsMngWork x, GoodsMngWork y)
            {
                int result = y.SectionCode.CompareTo(x.SectionCode);
                if (result != 0) return result;

                result = y.GoodsMakerCd.CompareTo(x.GoodsMakerCd);
                if (result != 0) return result;

                result = y.GoodsNo.CompareTo(x.GoodsNo);
                return result;
            }
        }
        // 2009.03.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        #endregion

        #region ●メーカー情報取得
        /// <summary>
        /// メーカー情報取得(全メーカー)
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="makerList">取得したメーカークラスリスト</param>
        /// <returns></returns>
        public int GetAllMaker(string enterpriseCode, out List<MakerUMnt> makerList)
        {

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            makerList = null;

            try
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

                // メーカー情報が取得できていない場合は、データ取得
                if (_drMaker == null) this.SearchInitial_Maker();

                if (_drMaker != null && _drMaker.Count > 0)
                {
                    makerList = new List<MakerUMnt>();

                    foreach (KeyValuePair<int, MakerUMnt> kv in _drMaker)
                    {
                        MakerUMnt makerUMnt = new MakerUMnt();
                        makerUMnt.GoodsMakerCd = kv.Value.GoodsMakerCd;
                        makerUMnt.MakerName = kv.Value.MakerName;
                        makerUMnt.MakerKanaName = kv.Value.MakerKanaName;
                        makerList.Add(makerUMnt);
                    }

                    if (makerList == null || makerList.Count == 0)
                        status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    else
                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (Exception)
            {
            }

            return status;

        }

        /// <summary>
        /// メーカー情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="makerUMnt">メーカーデータオブジェクト</param>
        /// <returns></returns>
        public int GetMaker(string enterpriseCode, int makerCode, out MakerUMnt makerUMnt)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            makerUMnt = null;

            try
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

                // メーカー情報が取得できていない場合は、データ取得
                if (_drMaker == null)
                    this.SearchInitial_Maker();

                if (_drMaker != null && _drMaker.Count > 0)
                {
                    if (_drMaker.ContainsKey(makerCode))
                    {
                        makerUMnt = new MakerUMnt();
                        makerUMnt.GoodsMakerCd = _drMaker[makerCode].GoodsMakerCd;
                        makerUMnt.MakerName = _drMaker[makerCode].MakerName;
                        makerUMnt.MakerKanaName = _drMaker[makerCode].MakerKanaName;

                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    }
                }
            }
            catch (Exception)
            {
            }

            return status;
        }

        /// <summary>
        /// メーカーガイドデータセット作成
        /// </summary>
        /// <param name="guideDataSet">設定するデータセット</param>
        /// <returns></returns>
        private int MakeMakerGuideData(ref DataSet guideDataSet)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;

            if (_drMaker == null || _drMaker.Count == 0)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            }
            else
            {
                DataTable table = new DataTable();

                try
                {
                    // Declare DataColumn and DataRow variables.
                    DataColumn column;
                    DataRow row;

                    // Create new DataColumn, set DataType, ColumnName and add to DataTable.    
                    column = new DataColumn();
                    column.DataType = System.Type.GetType("System.Int32");
                    column.ColumnName = "GoodsMakerCd";
                    table.Columns.Add(column);

                    // Create second column.
                    column = new DataColumn();
                    column.DataType = Type.GetType("System.String");
                    column.ColumnName = "MakerName";
                    table.Columns.Add(column);

                    //----- ueno add ---------- start 2008.02.27
                    column = new DataColumn();
                    column.DataType = Type.GetType("System.String");
                    column.ColumnName = "MakerKanaName";
                    table.Columns.Add(column);

                    column = new DataColumn();
                    column.DataType = Type.GetType("System.String");
                    column.ColumnName = "DivisionName";
                    table.Columns.Add(column);
                    //----- ueno add ---------- end 2008.02.27

                    table.BeginLoadData();

                    foreach (KeyValuePair<int, MakerUMnt> kv in _drMaker)
                    {
                        row = table.NewRow();

                        row["GoodsMakerCd"] = kv.Value.GoodsMakerCd;
                        row["MakerName"] = kv.Value.MakerName;

                        //----- ueno add ---------- start 2008.02.27
                        row["MakerKanaName"] = kv.Value.MakerKanaName;
                        row["DivisionName"] = kv.Value.DivisionName;
                        //----- ueno add ---------- end 2008.02.27

                        table.Rows.Add(row);
                    }

                    table.EndLoadData();


                    status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                }
                finally
                {
                    guideDataSet.Tables.Add(table);
                }
            }

            return status;
        }
        #endregion

        #region ●自社分類情報取得
        /// <summary>
        /// 自社分類情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="enterpriseGanreCode">自社分類コード</param>
        /// <param name="enterpriseGanre">ユーザーガイドマスタオブジェクト</param>
        /// <returns></returns>
        public int GetEnterpriseGanre(string enterpriseCode, int enterpriseGanreCode, out UserGdBdU enterpriseGanre)
        {
            enterpriseGanre = new UserGdBdU();
            string enterpriseGanreName;
            int status = GetEnterpriseGanreName(enterpriseGanreCode, out enterpriseGanreName);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                enterpriseGanre.GuideCode = enterpriseGanreCode;
                enterpriseGanre.GuideName = enterpriseGanreName;
            }
            return status;
        }

        /// <summary>
        /// 自社分類名称取得
        /// </summary>
        /// <param name="enterpriseGanreCode"></param>
        /// <param name="enterpriseGanreName"></param>
        /// <returns></returns>
        private int GetEnterpriseGanreName(int enterpriseGanreCode, out string enterpriseGanreName)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            enterpriseGanreName = string.Empty;

            try
            {
                if (_drEnterpriseGanreCode == null) this.SearchInitial_EnterpriseGanre(this._enterpriseCode);

                if (_drEnterpriseGanreCode == null || _drEnterpriseGanreCode.Count == 0) return status;

                if (_drEnterpriseGanreCode.ContainsKey(enterpriseGanreCode))
                {
                    enterpriseGanreName = _drEnterpriseGanreCode[enterpriseGanreCode];
                    status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                }
                return status;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }
            return status;
        }
        #endregion

        #region ●商品大分類情報取得
        /// <summary>
        /// 商品大分類情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="goodsLGroupCode">商品大分類コード</param>
        /// <param name="goodsLGroup">ユーザーガイドマスタオブジェクト</param>
        /// <returns></returns>
        public int GetGoodsLGroup(string enterpriseCode, int goodsLGroupCode, out UserGdBdU goodsLGroup)
        {
            goodsLGroup = new UserGdBdU();
            string goodsLGroupName;
            int status = GetGoodsLGroupName(goodsLGroupCode, out goodsLGroupName);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                goodsLGroup.GuideCode = goodsLGroupCode;
                goodsLGroup.GuideName = goodsLGroupName;
            }

            return status;
        }

        /// <summary>
        /// 商品大分類名称取得
        /// </summary>
        /// <param name="goodsLGroup">商品大分類コード</param>
        /// <param name="goodsLGroupName">商品大分類名称</param>
        /// <returns></returns>
        private int GetGoodsLGroupName(int goodsLGroup, out string goodsLGroupName)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            goodsLGroupName = string.Empty;

            try
            {
                if (_drGoodsLGroup == null) this.SearchInitial_GoodsLGroup(this._enterpriseCode);

                if (_drGoodsLGroup == null || _drGoodsLGroup.Count == 0) return status;

                if (_drGoodsLGroup.ContainsKey(goodsLGroup))
                {
                    goodsLGroupName = _drGoodsLGroup[goodsLGroup];
                    status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                }
                return status;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }
            return status;
        }
        #endregion

        #region ●商品中分類情報取得
        /// <summary>
        /// 商品中分類情報取得(全件)
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="goodsMGroupList">商品中分類マスタオブジェクトリストd</param>
        /// <returns></returns>
        public int GetAllGoodsMGroup(string enterpriseCode, out List<GoodsGroupU> goodsMGroupList)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            goodsMGroupList = null;

            try
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

                if (_drGoodsMGroup == null)
                    this.SearchInitial_GoodsMGroup(this._enterpriseCode);

                if (_drGoodsMGroup == null || _drGoodsMGroup.Count == 0) return status;

                goodsMGroupList = new List<GoodsGroupU>();

                foreach (KeyValuePair<int, GoodsGroupU> kv in _drGoodsMGroup)
                {
                    goodsMGroupList.Add(kv.Value.Clone());
                }

                if (goodsMGroupList == null || goodsMGroupList.Count == 0)
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                else
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }
            catch (Exception)
            {
            }

            return status;
        }

        /// <summary>
        /// 商品中分類情報取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="goodsMGroupCode">商品中分類コード</param>
        /// <param name="goodsMGroup">商品中分類マスタオブジェクト</param>
        /// <returns></returns>
        public int GetGoodsMGroup(string enterpriseCode, int goodsMGroupCode, out GoodsGroupU goodsMGroup)
        {
            goodsMGroup = new GoodsGroupU();

            string goodsMGroupName;
            int status = GetGoodsMGroupName(goodsMGroupCode, out goodsMGroupName);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                goodsMGroup.GoodsMGroup = goodsMGroupCode;
                goodsMGroup.GoodsMGroupName = goodsMGroupName;
            }
            return status;
        }

        /// <summary>
        /// 商品中分類名称取得
        /// </summary>
        /// <param name="goodsMGroup">商品中分類コード</param>
        /// <param name="goodsMGroupName">商品中分類名称</param>
        /// <returns></returns>
        private int GetGoodsMGroupName(int goodsMGroup, out string goodsMGroupName)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            goodsMGroupName = string.Empty;

            try
            {
                if (_drGoodsMGroup == null) this.SearchInitial_GoodsMGroup(this._enterpriseCode);

                if (_drGoodsMGroup == null || _drGoodsMGroup.Count == 0) return status;

                if (_drGoodsMGroup.ContainsKey(goodsMGroup))
                {
                    goodsMGroupName = _drGoodsMGroup[goodsMGroup].GoodsMGroupName;

                    status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                }

                return status;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }

            return status;
        }

        /// <summary>
        /// 商品中分類情報取得
        /// </summary>
        /// <param name="goodsMGroupCode"></param>
        /// <param name="goodsMGroup"></param>
        /// <returns></returns>
        private int GetGoodsMGroup(int goodsMGroupCode, out GoodsGroupU goodsMGroup)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            goodsMGroup = null;

            try
            {
                if (_drGoodsMGroup == null) this.SearchInitial_GoodsMGroup(this._enterpriseCode);

                if (_drGoodsMGroup == null || _drGoodsMGroup.Count == 0) return status;

                if (_drGoodsMGroup.ContainsKey(goodsMGroupCode))
                {
                    goodsMGroup = _drGoodsMGroup[goodsMGroupCode];

                    status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                }

                return status;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }

            return status;
        }
        #endregion

        #region ●優良設定情報取得
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 DEL
        ///// <summary>
        ///// 優良設定情報取得
        ///// </summary>
        ///// <param name="enterpriseCode"></param>
        ///// <param name="sectionCode"></param>
        ///// <param name="goodsMGroup"></param>
        ///// <param name="tbsPartsCode"></param>
        ///// <param name="partsMakerCd"></param>
        ///// <param name="prmSettingUWork"></param>
        ///// <returns></returns>
        //public int GetPrmSetting(string enterpriseCode, string sectionCode, int goodsMGroup, int tbsPartsCode, int partsMakerCd, out PrmSettingUWork prmSettingUWork)
        //{
        //    prmSettingUWork = new PrmSettingUWork();
        //    int status = GetPrmSettingProc(enterpriseCode, sectionCode, goodsMGroup, tbsPartsCode, partsMakerCd, out prmSettingUWork);
        //    return status;
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 DEL

        /// <summary>
        /// 優良設定情報取得
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="sectionCode"></param>
        /// <param name="goodsMGroup"></param>
        /// <param name="tbsPartsCode"></param>
        /// <param name="partsMakerCd"></param>
        /// <param name="prmSettingUWork"></param>
        /// <returns></returns>
        private int GetPrmSettingProc(string enterpriseCode, string sectionCode, int goodsMGroup, int tbsPartsCode, int partsMakerCd, out PrmSettingUWork prmSettingUWork)
        {
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 ADD
            prmSettingUWork = new PrmSettingUWork();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 ADD

            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            prmSettingUWork = null;

            try
            {
                if (_drPrmSettingWork == null) this.SearchInitial_PrmSetting(this._enterpriseCode);
                if (_drPrmSettingWork == null || _drPrmSettingWork.Count == 0) return status;

                // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //// 2008.12.01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                ////PrmSettingKey prmSettingKey = new PrmSettingKey(sectionCode, goodsMGroup, tbsPartsCode, partsMakerCd);
                //PrmSettingKey prmSettingKey = new PrmSettingKey(sectionCode.Trim(), goodsMGroup, tbsPartsCode, partsMakerCd);
                //// 2008.12.01 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                //if (_drPrmSettingWork.ContainsKey(prmSettingKey))
                //{
                //    prmSettingUWork = _drPrmSettingWork[prmSettingKey];
                //    status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                //}

                prmSettingUWork = _drPrmSettingWork.Find(
                    delegate(PrmSettingUWork prmSetting)
                    {
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 DEL
                        //if ((prmSetting.SectionCode == sectionCode) &&
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 DEL
                        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 ADD
                        // UPD 2012/11/09 SCM改良№10337,10338,10341対応 ---------------------------------->>>>>
                        //if ( (prmSetting.SectionCode != null && prmSetting.SectionCode.Trim() == sectionCode) &&
                        if ( (prmSetting.SectionCode != null && prmSetting.SectionCode.Trim() == sectionCode.Trim()) &&
                        // UPD 2012/11/09 SCM改良№10337,10338,10341対応 ----------------------------------<<<<<
                        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 ADD
                            (prmSetting.GoodsMGroup == goodsMGroup) &&
                            (prmSetting.TbsPartsCode == tbsPartsCode) &&
                            (prmSetting.PartsMakerCd == partsMakerCd) )
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                );

                if (prmSettingUWork != null) status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                return status;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }
            return status;
        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/06 ADD
        /// <summary>
        /// 優良設定用 拠点コード取得処理
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <param name="prmSettingList"></param>
        /// <returns></returns>
        /// <remarks>優良設定で有効とする拠点コード（指定拠点or00:全社）を返します</remarks>
        private string GetSectionCdForPrmSetting( string sectionCode, List<PrmSettingUWork> prmSettingList )
        {
            sectionCode = sectionCode.Trim();

            if ( prmSettingList == null ) return sectionCode;

            // 優良設定リスト内に、指定拠点コードのレコードが１件でも存在するかチェック
            PrmSettingUWork prmSettingUWork = prmSettingList.Find(
                                            delegate( PrmSettingUWork prmSetting )
                                            {
                                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/08 DEL
                                                //return (prmSetting.SectionCode != null &&
                                                //        prmSetting.SectionCode.Trim() == sectionCode);
                                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/08 DEL
                                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/04/08 ADD // 拠点のレコードがあってもBLｺｰﾄﾞ=0,ﾒｰｶｰｺｰﾄﾞ=0は除外
                                                return (prmSetting.SectionCode != null &&
                                                        prmSetting.SectionCode.Trim() == sectionCode &&
                                                        prmSetting.PartsMakerCd != 0 &&
                                                        prmSetting.TbsPartsCode != 0);
                                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/08 ADD
                                            }
                                            );
            if ( prmSettingUWork != null )
            {
                // ある→指定拠点コード
                return sectionCode;
            }
            else
            {
                // ない→00:全社
                return ctAllDefSectionCode;
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/04/06 ADD
        #endregion

        #region ●BLグループコード情報取得
        /// <summary>
        /// BLグループコードマスタ取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="bLGroupCode">BLグループコード</param>
        /// <param name="bLGroup">BLグループコードマスタオブジェクト</param>
        /// <returns></returns>
        public int GetBLGroup(string enterpriseCode, int bLGroupCode, out BLGroupU bLGroup)
        {
            int status = GetBLGroup(bLGroupCode, out bLGroup);
            return status;
        }

        /// <summary>
        /// BLグループコード名称取得
        /// </summary>
        /// <param name="bLGroupCode"></param>
        /// <param name="bLGroupName"></param>
        /// <returns></returns>
        private int GetBLGroupName(int bLGroupCode, out string bLGroupName)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            bLGroupName = string.Empty;

            try
            {
                if (_drBLGroup == null) this.SearchInitial_BLGroup(this._enterpriseCode);

                if (_drBLGroup == null || _drBLGroup.Count == 0) return status;

                if (_drBLGroup.ContainsKey(bLGroupCode))
                {
                    bLGroupName = _drBLGroup[bLGroupCode].BLGroupName;
                    status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                }

                return status;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }

            return status;
        }

        /// <summary>
        /// BLグループコードマスタ取得
        /// </summary>
        /// <param name="bLGroupCode"></param>
        /// <param name="bLGroup"></param>
        /// <returns></returns>
        private int GetBLGroup(int bLGroupCode, out BLGroupU bLGroup)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            bLGroup = null;

            try
            {
                if (_drBLGroup == null) this.SearchInitial_BLGroup(this._enterpriseCode);

                if (_drBLGroup == null || _drBLGroup.Count == 0) return status;

                if (_drBLGroup.ContainsKey(bLGroupCode))
                {
                    bLGroup = _drBLGroup[bLGroupCode];
                    status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                }

                return status;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }

            return status;

        }
        #endregion

        #region ●BLコード情報取得
        /// <summary>
        /// BLコード情報取得(全BL商品コード)
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="blGoodsList">取得したBLコードクラスリスト</param>
        /// <returns></returns>
        public int GetAllBLGoodsCd(string enterpriseCode, out List<BLGoodsCdUMnt> blGoodsList)
        {

            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            blGoodsList = null;

            try
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

                // BL商品コード情報が取得できていない場合は、データ取得
                if (_drBLGoodsCd == null)
                    this.SearchInitial_BLGoodsCd();

                if (_drBLGoodsCd != null && _drBLGoodsCd.Count > 0)
                {
                    blGoodsList = new List<BLGoodsCdUMnt>();

                    foreach (KeyValuePair<int, BLGoodsCdUMnt> kv in _drBLGoodsCd)
                    {
                        BLGoodsCdUMnt blGoodsCdUMnt = new BLGoodsCdUMnt();
                        blGoodsCdUMnt.BLGoodsCode = kv.Value.BLGoodsCode;
                        blGoodsCdUMnt.BLGoodsFullName = kv.Value.BLGoodsFullName;
                        // --- ADD m.suzuki 2010/04/15 ---------->>>>>
                        blGoodsCdUMnt.BLGoodsHalfName = kv.Value.BLGoodsHalfName;
                        // --- ADD m.suzuki 2010/04/15 ----------<<<<<
                        blGoodsList.Add(blGoodsCdUMnt);
                    }

                    if (blGoodsList == null || blGoodsList.Count == 0)
                        status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    else
                        status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
            }
            catch (Exception)
            {
            }

            return status;

        }

        /// <summary>
        /// BLコード情報取得
        /// </summary>
        /// <param name="bLGoodsCode">BLコード</param>
        /// <param name="bLGoodsCdUMnt">BLコードデータオブジェクト</param>
        /// <returns></returns>
        public int GetBLGoodsCd(int bLGoodsCode, out BLGoodsCdUMnt bLGoodsCdUMnt)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

            bLGoodsCdUMnt = null;

            if (_drBLGoodsCd == null)
                this.SearchInitial_BLGoodsCd();

            if (_drBLGoodsCd == null || _drBLGoodsCd.Count == 0)
                return status;

            if (_drBLGoodsCd.ContainsKey(bLGoodsCode))
            {
                bLGoodsCdUMnt = new BLGoodsCdUMnt();

                // BL商品コード
                bLGoodsCdUMnt.BLGoodsCode = _drBLGoodsCd[bLGoodsCode].BLGoodsCode;

                // BL商品コード名称
                bLGoodsCdUMnt.BLGoodsFullName = _drBLGoodsCd[bLGoodsCode].BLGoodsFullName;

                // --- ADD m.suzuki 2010/04/15 ---------->>>>>
                // BL商品コード名称カナ
                bLGoodsCdUMnt.BLGoodsHalfName = _drBLGoodsCd[bLGoodsCode].BLGoodsHalfName;
                // --- ADD m.suzuki 2010/04/15 ----------<<<<<

                // BLグループコード
                bLGoodsCdUMnt.BLGloupCode = _drBLGoodsCd[bLGoodsCode].BLGloupCode;

                // 商品掛率グループコード
                bLGoodsCdUMnt.GoodsRateGrpCode = _drBLGoodsCd[bLGoodsCode].GoodsRateGrpCode;


                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }

            return status;
        }

        /// <summary>
        /// BLコードガイドデータセット作成
        /// </summary>
        /// <param name="guideDataSet">設定するデータセット</param>
        /// <returns></returns>
        private int MakeBLCodeGuideData(ref DataSet guideDataSet)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;

            if (_drBLGoodsCd == null || _drBLGoodsCd.Count == 0)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            }
            else
            {
                DataTable table = new DataTable();

                try
                {
                    // Declare DataColumn and DataRow variables.
                    DataColumn column;
                    DataRow row;

                    // Create new DataColumn, set DataType, ColumnName and add to DataTable.    
                    column = new DataColumn();
                    column.DataType = System.Type.GetType("System.Int32");
                    column.ColumnName = "BLGoodsCode";
                    table.Columns.Add(column);

                    // Create second column.
                    column = new DataColumn();
                    column.DataType = Type.GetType("System.String");
                    column.ColumnName = "BLGoodsFullName";
                    table.Columns.Add(column);

                    table.BeginLoadData();

                    foreach (KeyValuePair<int, BLGoodsCdUMnt> kv in _drBLGoodsCd)
                    {
                        row = table.NewRow();

                        row["BLGoodsCode"] = kv.Value.BLGoodsCode;
                        row["BLGoodsFullName"] = kv.Value.BLGoodsFullName;

                        table.Rows.Add(row);
                    }

                    table.EndLoadData();

                    status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                }
                finally
                {
                    guideDataSet.Tables.Add(table);
                }
            }
            return status;
        }
        #endregion

        #region ●仕入先情報取得
        /// <summary>
        /// 仕入先情報取得(使用する場合、プロパティ設定が必要(IsGetSupplier))
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="supplierCode"></param>
        /// <param name="supplierWork"></param>
        /// <returns></returns>
        public int GetSupplier(string enterpriseCode, int supplierCode, out SupplierWork supplierWork)
        {
            return this.GetSupplierProc(enterpriseCode, supplierCode, out supplierWork);
        }

        /// <summary>
        /// 仕入先情報取得(使用する場合、プロパティ設定が必要(IsGetSupplier))
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="supplierCode"></param>
        /// <param name="supplierWork"></param>
        /// <returns></returns>
        private int GetSupplierProc(string enterpriseCode, int supplierCode, out SupplierWork supplierWork)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            supplierWork = null;

            // 仕入先情報取得プロパティが設定されていない場合、取得しない。
            if (!this._isGetSupplier) return status; 

            try
            {
                if (_supplierWorkList == null) this.SearchInitial_Supplier(this._enterpriseCode);
                if (_supplierWorkList == null || _supplierWorkList.Count == 0) return status;

                supplierWork = _supplierWorkList.Find(
                    delegate(SupplierWork supp)
                    {
                        if (supp.SupplierCd == supplierCode)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                );

                if (supplierWork != null) status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                return status;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }
            return status;
        }
        #endregion

        // 2009.04.14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        #region ●価格情報取得
        /// <summary>
        /// 価格情報取得処理
        /// </summary>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="goodsMGroup">中分類コード</param>
        /// <param name="blCode">BLコード</param>
        /// <param name="goodsPriceList">価格情報リスト</param>
        /// <returns>1:ユーザー 2:提供 9:該当なし 取得優先順位：ユーザー価格 優良価格 純正価格</returns>
        public int GetGoodsPrice(string sectionCode, int goodsMakerCd, string goodsNo, int goodsMGroup, int blCode, out List<GoodsPrice> goodsPriceList)
        {
            int st = 9;
            List<GoodsPrice> retGoodsPriceList = null;
            goodsPriceList = null;

            //-----------------------------------------------------------------------------
            // ユーザー価格
            //-----------------------------------------------------------------------------
            this.GetGoodsPriceU(goodsMakerCd, goodsNo, out retGoodsPriceList);

            if ((retGoodsPriceList == null) || (retGoodsPriceList.Count == 0))
            {
            }
            else
            {
                st = 1;
            }


            ////-----------------------------------------------------------------------------
            //// 提供価格
            ////-----------------------------------------------------------------------------
            //if ((retGoodsPriceList == null) || (retGoodsPriceList.Count == 0))
            //{
            //    ArrayList priceArrayList = null;
            //    this._PartsSearchController.GetGoodsPrice(sectionCode, goodsMakerCd, goodsNo, goodsMGroup, blCode, out priceArrayList);
            //    if ((priceArrayList != null) && (priceArrayList.Count != 0))
            //    {
            //        this.GetGoodsPriceListFromGoodsPriceUWorkList(priceArrayList, out retGoodsPriceList);
            //        st = 2;
            //    }
            //}
            //else
            //{
            //    st = 1;
            //}

            goodsPriceList = retGoodsPriceList;
            return st;
        }
        #endregion
        
        #region ●層別情報取得
        /// <summary>
        /// 層別情報取得処理
        /// </summary>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="goodsMGroup">中分類コード</param>
        /// <param name="blCode">BLコード</param>
        /// <param name="goodsRateRank">層別</param>
        /// <returns>取得優先順位：ユーザー情報 優良情報 純正情報</returns>
        public int GetGoodsRateRank(string sectionCode, int goodsMakerCd, string goodsNo, int goodsMGroup, int blCode, out string goodsRateRank)
        {
            int st = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            string retGoodsRateRank = string.Empty;
            goodsRateRank = string.Empty;

            //-----------------------------------------------------------------------------
            // ユーザー情報
            //-----------------------------------------------------------------------------
            GoodsUnitData retGoodsUnitData;
            st = Read(this._enterpriseCode, sectionCode, goodsMakerCd, goodsNo, 1, 1, ConstantManagement.LogicalMode.GetData0, out retGoodsUnitData);
            if ((st == (int)ConstantManagement.DB_Status.ctDB_NORMAL) && (retGoodsUnitData != null))
            {
                retGoodsRateRank = retGoodsUnitData.GoodsRateRank;
            }

            ////-----------------------------------------------------------------------------
            //// 提供情報
            ////-----------------------------------------------------------------------------
            //if (retGoodsRateRank == string.Empty)
            //{
            //    this._PartsSearchController.GetGoodsRateRank(sectionCode, goodsMakerCd, goodsNo, goodsMGroup, blCode, out retGoodsRateRank);
            //}

            goodsRateRank = retGoodsRateRank;
            return st;
        }
        #endregion
        // 2009.04.14 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        /* ----- DEL 2013/08/13 田建委 Redmine#39794 -------------------->>>>>
        //Add Start 2012/12/01 zhangy3 for Redmine#33231 ----->>>>>
        /// <summary>
        /// 商品管理情報の再検索
        /// </summary>
        /// <param name="goodsUnitData">商品情報</param>
        /// <param name="byGoodsNoFlag">品番フラグ</param>
        /// <param name="byMakerCdFlag">メーカーフラグ</param>
        /// <remarks>
        /// <br>Note       : 商品管理情報の再検索</br>
        /// <br>Programmer : zhangy3</br>
        /// <br>Date       : 2012/12/01</br>
        /// <br>Update Note: 2013/05/24 donggy</br>
        /// <br>管理番号   : 10801804-00 2013/06/18配信分 </br>
        /// <br>             Redmine#35874 商品マスタ登録の速度改善について</br>
        /// </remarks>
        //private void ReSearchMngGoodsInfo(string enterpriseCode)// DEL donggy 2013/05/24 for Redmine#35874
        private void ReSearchMngGoodsInfo(GoodsUnitData goodsUnitData, bool byGoodsNoFlag, bool byMakerCdFlag) // ADD donggy 2013/05/24 for Redmine#35874    
        {
            // 商品管理情報
            if (_goodsMngList == null) _goodsMngList = new List<GoodsMngWork>();
            // ユーザー登録分抽出条件
            GoodsUCndtnWork goodsUCndtnWork = new GoodsUCndtnWork();
            //goodsUCndtnWork.EnterpriseCode = enterpriseCode;// DEL donggy 2013/05/24 for Redmine#35874
            goodsUCndtnWork.EnterpriseCode = goodsUnitData.EnterpriseCode;// ADD donggy 2013/05/24 for Redmine#35874
            // 商品管理情報
            GoodsMngWork goodsMngWork = new GoodsMngWork();
            //goodsMngWork.EnterpriseCode = enterpriseCode;// DEL donggy 2013/05/24 for Redmine#35874
            // --- ADD donggy 2013/05/24 for Redmine#35874 --->>>>>>>
            goodsMngWork.EnterpriseCode = goodsUnitData.EnterpriseCode;
            if (byGoodsNoFlag)
            {
                goodsMngWork.GoodsNo = goodsUnitData.GoodsNo;
            }
            if (byMakerCdFlag)
            {
                goodsMngWork.GoodsMakerCd = goodsUnitData.GoodsMakerCd;
            }
            // --- ADD donggy 2013/05/24 for Redmine#35874 ---<<<<<<<
            CustomSerializeArrayList workList = new CustomSerializeArrayList();
            workList.Add(goodsMngWork);
            // オブジェクトへセット
            object retObj;
            retObj = workList;
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            try
            {
                //---------------------------------------------------------------------
                // 検索
                //---------------------------------------------------------------------
                if (_isLocalDBRead)
                {
                    // ローカル
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                else
                {
                    // リモート
                    status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, ConstantManagement.LogicalMode.GetData0);
                }
                if (_goodsMngList != null) _goodsMngList.Clear();
                #region 商品管理情報
                if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    return;
                //---------------------------------------------------------------------
                // 商品管理情報
                //---------------------------------------------------------------------

                workList = retObj as CustomSerializeArrayList;

                if (workList == null)
                {
                    return;
                }
                if (workList[0] is ArrayList)
                {
                    foreach (ArrayList arList in workList)
                    {
                        if (arList != null && arList.Count > 0)
                        {
                            if (arList[0] is GoodsMngWork)
                            {
                                _goodsMngList = new List<GoodsMngWork>((GoodsMngWork[])arList.ToArray(typeof(GoodsMngWork)));
                                _goodsMngDic1 = new Dictionary<string, GoodsMngWork>();     //拠点＋メーカー＋品番
                                _goodsMngDic2 = new Dictionary<string, GoodsMngWork>();     //拠点＋中分類＋メーカー＋ＢＬ
                                _goodsMngDic3 = new Dictionary<string, GoodsMngWork>();     //拠点＋中分類＋メーカー
                                _goodsMngDic4 = new Dictionary<string, GoodsMngWork>();     //拠点＋メーカー

                                StringBuilder goodsMngDic1Key = null;
                                StringBuilder goodsMngDic2Key = null;
                                StringBuilder goodsMngDic3Key = null;
                                StringBuilder goodsMngDic4Key = null;
                                for (int i = 0; i <= _goodsMngList.Count - 1; i++)
                                {
                                    goodsMngDic1Key = new StringBuilder();
                                    goodsMngDic2Key = new StringBuilder();
                                    goodsMngDic3Key = new StringBuilder();
                                    goodsMngDic4Key = new StringBuilder();

                                    goodsMngDic4Key.Append(_goodsMngList[i].SectionCode.Trim().PadLeft(2, '0'));     //拠点
                                    goodsMngDic4Key.Append(_goodsMngList[i].GoodsMakerCd.ToString("0000"));         //メーカー

                                    if (_goodsMngList[i].GoodsNo.Trim() != string.Empty)
                                    {
                                        goodsMngDic1Key.Append(goodsMngDic4Key.ToString());                         //拠点＋メーカー
                                        goodsMngDic1Key.Append(_goodsMngList[i].GoodsNo.Trim());                    //品番

                                        //拠点＋メーカー＋品番
                                        if (!_goodsMngDic1.ContainsKey(goodsMngDic1Key.ToString()))
                                        {
                                            _goodsMngDic1.Add(goodsMngDic1Key.ToString(), _goodsMngList[i]);
                                        }
                                    }
                                    else
                                    {
                                        goodsMngDic3Key.Append(goodsMngDic4Key.ToString());                         //拠点＋メーカー
                                        goodsMngDic3Key.Append(_goodsMngList[i].GoodsMGroup.ToString("0000"));      //中分類

                                        goodsMngDic2Key.Append(goodsMngDic3Key.ToString());                         //拠点＋メーカー＋中分類
                                        goodsMngDic2Key.Append(_goodsMngList[i].BLGoodsCode.ToString("00000"));     //ＢＬ

                                        if (_goodsMngList[i].BLGoodsCode != 0)
                                        {
                                            //拠点＋中分類＋メーカー＋ＢＬ
                                            if (!_goodsMngDic2.ContainsKey(goodsMngDic2Key.ToString()))
                                            {
                                                _goodsMngDic2.Add(goodsMngDic2Key.ToString(), _goodsMngList[i]);
                                            }
                                        }
                                        else if (_goodsMngList[i].GoodsMGroup != 0)
                                        {
                                            //拠点＋中分類＋メーカー
                                            if (!_goodsMngDic3.ContainsKey(goodsMngDic3Key.ToString()))
                                            {
                                                _goodsMngDic3.Add(goodsMngDic3Key.ToString(), _goodsMngList[i]);
                                            }
                                        }
                                        else
                                        {
                                            //拠点＋メーカー
                                            if (!_goodsMngDic4.ContainsKey(goodsMngDic4Key.ToString()))
                                            {
                                                _goodsMngDic4.Add(goodsMngDic4Key.ToString(), _goodsMngList[i]);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                #endregion
            }
            catch
            {

            }
        }
        //----- ADD 2013/02/08 田建委 Redmine#34640 ---------->>>>>
        ----- DEL 2013/08/13 田建委 Redmine#39794 --------------------<<<<<*/
        /// <summary>
        /// 倉庫情報の処理
        /// </summary>
        /// <param name="goodsUnitData">商品情報</param>
        /// <param name="prevStockList">変更前在庫リスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>
        /// <br>Update Note: 2013/02/08 田建委</br>
        /// <br>管理番号   : 10806793-00 2013/03/26配信分</br>
        /// <br>             Redmine#34640 商品在庫マスタの仕様変更(#33231の残留分)</br>
        /// </remarks>
        public int WriteStockAdjust(ref GoodsUnitData goodsUnitData, List<Stock> prevStockList, out string msg)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";
            try
            {
                GoodsUnitData bakGoodsUnitData = goodsUnitData.Clone();
                Stock stock = null;
                List<Stock> stockList = new List<Stock>();
                for (int i = 0; i < goodsUnitData.StockList.Count; i++)
                {
                    stock = goodsUnitData.StockList[i].Clone();
                    stockList.Add(stock);
                }
                bakGoodsUnitData.StockList = stockList;

                if (this._iGoodsURelationDataDB == null)
                {
                    this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                }

                //----------------------------------------------------------------------------
                // 商品連結データオブジェクトより商品連結データワークオブジェクトを取得
                //----------------------------------------------------------------------------
                // 在庫リスト差異適用（ 変更後＆変更前 → 差分＆変更前 ）
                this.ReflectStockDifference(ref goodsUnitData, prevStockList);

                CustomSerializeArrayList csArrayList = new CustomSerializeArrayList();

                // 在庫調整
                CustomSerializeArrayList stockAdjustWorkCsList = new CustomSerializeArrayList();
                this.CreateStockAdjustWorkFromGoodsUnitData(ref stockAdjustWorkCsList, goodsUnitData, prevStockList);
                if (stockAdjustWorkCsList.Count > 0)
                {
                    csArrayList.Add(stockAdjustWorkCsList);
                }
               
                object lstObj = csArrayList;

                //----------------------------------------------------------------------------
                // ＤＢ更新
                //----------------------------------------------------------------------------
                status = this._iGoodsURelationDataDB.WriteRelation(ref lstObj);
                this.SearchInitial(LoginInfoAcquisition.EnterpriseCode, LoginInfoAcquisition.Employee.BelongSectionCode, out msg);

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            csArrayList = lstObj as CustomSerializeArrayList;
                            ArrayList getStockList = null;
                            foreach (ArrayList arr in csArrayList)
                            {
                                if (arr[0] is StockWork)
                                {
                                    foreach (StockWork work in arr)
                                    {
                                        if (work.LogicalDeleteCode != 3)
                                        {
                                            if (getStockList == null)
                                            {
                                                getStockList = new ArrayList();
                                            }
                                            getStockList.Add(work);
                                        }
                                    }
                                }
                            }
                            List<GoodsUnitData> goodsUnitDataLst = null;
                          
                            if (getStockList != null)
                            {
                                GoodsUnitDataWork work = new GoodsUnitDataWork();
                                work.PriceList = new ArrayList();
                                work.StockList = getStockList;
                                ArrayList goodUintDataList = new ArrayList();
                                goodUintDataList.Add(work);
                                goodsUnitDataLst = CopyToGoodsUnitDataFromGoodsUnitDataWork(goodUintDataList);
                                
                            }
                            //----------------------------------------------------------------------------
                            // ヘッダ情報更新
                            //----------------------------------------------------------------------------
                            if (goodsUnitDataLst != null&&goodsUnitDataLst.Count>0)
                            {
                                foreach (Stock dbStock in goodsUnitDataLst[0].StockList)
                                {
                                    dbStock.GoodsNo = goodsUnitData.GoodsNo;
                                    dbStock.GoodsMakerCd = goodsUnitData.GoodsMakerCd;
                                }
                                //----------------------------------------------------------------------------
                                // 在庫情報
                                //----------------------------------------------------------------------------
                                GoodsUnitData wkGoodsUnitData = goodsUnitDataLst[0];
                                foreach (Stock orgstock in goodsUnitData.StockList)
                                {
                                   Stock tmpStock = wkGoodsUnitData.StockList.Find(delegate(Stock tmp){
                                       return orgstock.WarehouseCode.Equals(tmp.WarehouseCode);
                                    });
                                    if(tmpStock!=null)
                                    {
                                        tmpStock.WarehouseName = orgstock.WarehouseName;
                                    }
                                }
                                goodsUnitData.StockList = wkGoodsUnitData.StockList;
                            }

                            // 商品データ変更イベント発動
                            GoodsAcsEventArgs args = new GoodsAcsEventArgs(goodsUnitData.Clone());
                            FireChangedGoodsDataEventHandler(this, args, mChangedGoodsDataEvent);

                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        msg = "編集中の商品は、既に他の端末で更新されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        msg = "編集中の商品は、既に他の端末で削除されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(企業ロック)です。" + "\r\n"
                                + "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n"
                                + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(拠点ロック)です。" + "\r\n"
                            + "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(倉庫ロック)です。" + "\r\n"
                            + "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    default:
                        msg = "商品データの登録に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品データの登録で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
            }

            return status;
        }
        //----- ADD 2013/02/08 田建委 Redmine#34640 ----------<<<<<
        //-------- ADD 田建委 K2013/03/18 Redmine#35071 ------->>>>>
        /// <summary>
        /// 原単価修正可否・在庫数修正可否取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="employeeCode">従業員コード</param>
        /// <param name="unCstChngDivFlg">原単価修正区分</param>
        /// <param name="stckCntChngDivFlg">在庫数修正区分</param>
        /// <remarks>
        /// <br>Note       : 企業コードと従業員コードをキーとし、原単価修正可否・在庫数修正可否取得を返します。</br>
        /// <br>              ※利用側でログイン従業員の情報を渡すことを想定している為、</br>
        /// <br>                論理削除された従業員情報でも値を返します。</br>
        /// <br>                また、存在しない従業員情報が渡された場合はfalseを返します。</br>
        /// <br>Programmer : 田建委</br>
        /// <br>Date       : K2013/03/18</br>
        /// </remarks>
        public void GetYmgtMngChangeEnable(string enterpriseCode, string employeeCode, out bool unCstChngDivFlg, out bool stckCntChngDivFlg)
        {
            unCstChngDivFlg = false; // 原単価修正区分
            stckCntChngDivFlg = false; // 在庫数修正区分

            try
            {
                // サーバーユーザーデータ
                if (this._iGoodsURelationDataDB == null)
                {
                    this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                }

                int unCstChngDiv = 0; // 原単価修正区分
                int stckCntChngDiv = 0; // 在庫数修正区分

                // ReadMngメソッドで従業員管理情報をもらう
                int status = this._iGoodsURelationDataDB.ReadMng(enterpriseCode, employeeCode, out unCstChngDiv, out stckCntChngDiv);

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 原単価修正区分
                    if (unCstChngDiv == 0)
                    {
                        unCstChngDivFlg = true;
                    }
                    else
                    {
                        unCstChngDivFlg = false;
                    }

                    // 在庫数修正区分
                    if (stckCntChngDiv == 0)
                    {
                        stckCntChngDivFlg = true;
                    }
                    else
                    {
                        stckCntChngDivFlg = false;
                    }
                }
                else
                {
                    unCstChngDivFlg = false; // 原単価修正区分
                    stckCntChngDivFlg = false; // 在庫数修正区分
                }
            }
            catch
            {
                unCstChngDivFlg = false; // 原単価修正区分
                stckCntChngDivFlg = false; // 在庫数修正区分
            }
        }
        //-------- ADD 田建委 K2013/03/18 Redmine#35071 -------<<<<<
        /// <summary>
        /// 商品登録
        /// </summary>
        /// <param name="goodsUnitData">商品連結データ</param>
        /// <param name="prevStockList">変更前在庫リスト</param>
        /// <param name="rateList">掛率リスト</param>
        /// <param name="work">商品管理情報</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>
        /// <br>Note       : 商品登録</br>
        /// <br>Programmer : zhangy3</br>
        /// <br>Date       : 2012/12/01</br>
        /// <br>Update Note: 2013/08/13 田建委</br>
        /// <br>管理番号   : 10902175-00</br>
        /// <br>             Redmine#39794 商品在庫マスタⅡの速度改善</br>
        /// </remarks>
        public int Write(ref GoodsUnitData goodsUnitData, List<Stock> prevStockList, ref List<Rate> rateList, GoodsMngWork work, out string msg)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            string primaryKey = string.Empty;

            try
            {
                GoodsUnitData bakGoodsUnitData = goodsUnitData.Clone();
                Stock stock = null;
                List<Stock> stockList = new List<Stock>();
                for (int i = 0; i < goodsUnitData.StockList.Count; i++)
                {
                    stock = goodsUnitData.StockList[i].Clone();
                    stockList.Add(stock);
                }
                bakGoodsUnitData.StockList = stockList;

                if (this._iGoodsURelationDataDB == null)
                {
                    this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                }

                //----------------------------------------------------------------------------
                // 商品連結データオブジェクトより商品連結データワークオブジェクトを取得
                //----------------------------------------------------------------------------
                // 在庫リスト差異適用（ 変更後＆変更前 → 差分＆変更前 ）
                this.ReflectStockDifference(ref goodsUnitData, prevStockList);

                CustomSerializeArrayList csArrayList = new CustomSerializeArrayList();
                ArrayList workList = new ArrayList();
                this.CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref workList, goodsUnitData);
                csArrayList.Add(workList);

                // 在庫調整
                CustomSerializeArrayList stockAdjustWorkCsList = new CustomSerializeArrayList();
                this.CreateStockAdjustWorkFromGoodsUnitData(ref stockAdjustWorkCsList, goodsUnitData, prevStockList);
                if (stockAdjustWorkCsList.Count > 0)
                {
                    csArrayList.Add(stockAdjustWorkCsList);
                }

                // 単品売価(掛率)
                if (rateList != null && rateList.Count > 0)
                {
                    ArrayList rateWorkList = new ArrayList();
                    this.CreateRateWorkListFromRateList(ref rateWorkList, rateList);
                    csArrayList.Add(rateWorkList);
                }

                // 商品情報管理
                if (work != null)
                {
                    csArrayList.Add(work);
                }
                object lstObj = csArrayList;

                //----------------------------------------------------------------------------
                // ＤＢ更新
                //----------------------------------------------------------------------------
                status = this._iGoodsURelationDataDB.WriteRelation(ref lstObj);
                //this.SearchInitial(LoginInfoAcquisition.EnterpriseCode, LoginInfoAcquisition.Employee.BelongSectionCode, out msg);//Add 2012/12/01 zhangy3 for Redmine#33231 // DEL 2013/08/13 田建委 Redmine#39794

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            csArrayList = lstObj as CustomSerializeArrayList;

                            //----- ADD 2013/08/13 田建委 Redmdine#39794 ----->>>>>
                            if (work != null)
                            {
                                CustomSerializeArrayList csaList = lstObj as CustomSerializeArrayList;
                                GoodsMngWork goodsMngWork = null;
                                for (int i = 0; i < csaList.Count; i++)
                                {
                                    if (csaList[i] is GoodsMngWork)
                                    {
                                        goodsMngWork = csaList[i] as GoodsMngWork;
                                        csArrayList.Remove(goodsMngWork);
                                    }
                                }

                                this.SearchGoodsMngInit(goodsUnitData, goodsMngWork);
                            }
                            //----- ADD 2013/08/13 田建委 Redmdine#39794 -----<<<<<
                            List<GoodsUnitData> goodsUnitDataLst;

                            //----------------------------------------------------------------------------
                            // 更新戻り値から商品連結データオブジェクトリスト取得
                            //----------------------------------------------------------------------------
                            this.GetGoodsUnitDataWorkToUIdata(csArrayList, out goodsUnitDataLst, out rateList);

                            //----------------------------------------------------------------------------
                            // ヘッダ情報更新
                            //----------------------------------------------------------------------------
                            if (goodsUnitDataLst != null)
                            {
                                //----------------------------------------------------------------------------
                                // 商品情報
                                //----------------------------------------------------------------------------
                                // 作成日時
                                goodsUnitData.CreateDateTime = goodsUnitDataLst[0].CreateDateTime;

                                // 更新日時
                                goodsUnitData.UpdateDateTime = goodsUnitDataLst[0].UpdateDateTime;

                                // 企業コード
                                goodsUnitData.EnterpriseCode = goodsUnitDataLst[0].EnterpriseCode;

                                // GUID
                                goodsUnitData.FileHeaderGuid = goodsUnitDataLst[0].FileHeaderGuid;

                                // 更新従業員コード
                                goodsUnitData.UpdEmployeeCode = goodsUnitDataLst[0].UpdEmployeeCode;

                                // 更新アセンブリID1
                                goodsUnitData.UpdAssemblyId1 = goodsUnitDataLst[0].UpdAssemblyId1;

                                // 更新アセンブリID2
                                goodsUnitData.UpdAssemblyId2 = goodsUnitDataLst[0].UpdAssemblyId2;

                                // 論理削除区分
                                goodsUnitData.LogicalDeleteCode = goodsUnitDataLst[0].LogicalDeleteCode;
                                
                                 // -------- ADD START 2014/02/10 高陽 -------->>>>>
                                // 作成日時Ⅱ
                                goodsUnitData.CreateDateTimeA = goodsUnitDataLst[0].CreateDateTimeA;

                                // 更新日時Ⅱ
                                goodsUnitData.UpdateDateTimeA = goodsUnitDataLst[0].UpdateDateTimeA;

                                // GUIDⅡ
                                goodsUnitData.FileHeaderGuidA = goodsUnitDataLst[0].FileHeaderGuidA;
                                // -------- ADD END 2014/02/10 高陽 --------<<<<<
                                //----------------------------------------------------------------------------
                                // 価格情報
                                //----------------------------------------------------------------------------
                                goodsUnitData.GoodsPriceList.Clear();
                                goodsUnitData.GoodsPriceList.AddRange(goodsUnitDataLst[0].GoodsPriceList);

                                //----------------------------------------------------------------------------
                                // 単品売価(掛率情報)
                                //----------------------------------------------------------------------------
                                // ※このメソッドの引数の ref rateList に既に結果が格納されているので処理は不要。

                                //----------------------------------------------------------------------------
                                // 在庫情報
                                //----------------------------------------------------------------------------
                                GoodsUnitData wkGoodsUnitData = goodsUnitDataLst[0];
                                ReflectStockDifferenceOnAfterUpdate(ref wkGoodsUnitData, prevStockList, bakGoodsUnitData);
                                goodsUnitData.StockList.Clear();
                                goodsUnitData.StockList.AddRange(wkGoodsUnitData.StockList);
                            }

                            // 商品データ変更イベント発動
                            GoodsAcsEventArgs args = new GoodsAcsEventArgs(goodsUnitData.Clone());
                            FireChangedGoodsDataEventHandler(this, args, mChangedGoodsDataEvent);

                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        msg = "編集中の商品は、既に他の端末で更新されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        msg = "編集中の商品は、既に他の端末で削除されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(企業ロック)です。" + "\r\n"
                                + "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n"
                                + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(拠点ロック)です。" + "\r\n"
                            + "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(倉庫ロック)です。" + "\r\n"
                            + "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    default:
                        msg = "商品データの登録に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品データの登録で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
            }

            return status;
        }

        //-----ADD 2021/06/21 呉元嘯 PMKOBETSU-3268の対応----->>>>>
        /// <summary>
        /// 商品登録(ハンティ専用)
        /// </summary>
        /// <param name="goodsUnitData">商品連結データ</param>
        /// <param name="prevStockList">変更前在庫リスト</param>
        /// <param name="rateList">掛率リスト</param>
        /// <param name="work">商品管理情報</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <param name="machineName">ハンディコンピュータ名</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>
        /// <br>Note       : 商品登録</br>
        /// <br>Programmer : 呉元嘯</br>
        /// <br>Date       : 2021/06/21</br>
        /// </remarks>
        public int WriteHandy(ref GoodsUnitData goodsUnitData, List<Stock> prevStockList, ref List<Rate> rateList, GoodsMngWork work, out string msg, string machineName)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            string primaryKey = string.Empty;

            try
            {
                GoodsUnitData bakGoodsUnitData = goodsUnitData.Clone();
                Stock stock = null;
                List<Stock> stockList = new List<Stock>();
                for (int i = 0; i < goodsUnitData.StockList.Count; i++)
                {
                    stock = goodsUnitData.StockList[i].Clone();
                    stockList.Add(stock);
                }
                bakGoodsUnitData.StockList = stockList;

                if (this._iGoodsURelationDataDB == null)
                {
                    this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                }

                //----------------------------------------------------------------------------
                // 商品連結データオブジェクトより商品連結データワークオブジェクトを取得
                //----------------------------------------------------------------------------
                // 在庫リスト差異適用（ 変更後＆変更前 → 差分＆変更前 ）
                this.ReflectStockDifference(ref goodsUnitData, prevStockList);

                CustomSerializeArrayList csArrayList = new CustomSerializeArrayList();
                ArrayList workList = new ArrayList();
                this.CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref workList, goodsUnitData);
                csArrayList.Add(workList);

                // 在庫調整
                CustomSerializeArrayList stockAdjustWorkCsList = new CustomSerializeArrayList();
                this.CreateStockAdjustWorkFromGoodsUnitDataHandy(ref stockAdjustWorkCsList, goodsUnitData, prevStockList, machineName);
                if (stockAdjustWorkCsList.Count > 0)
                {
                    csArrayList.Add(stockAdjustWorkCsList);
                }

                // 単品売価(掛率)
                if (rateList != null && rateList.Count > 0)
                {
                    ArrayList rateWorkList = new ArrayList();
                    this.CreateRateWorkListFromRateList(ref rateWorkList, rateList);
                    csArrayList.Add(rateWorkList);
                }

                // 商品情報管理
                if (work != null)
                {
                    csArrayList.Add(work);
                }
                object lstObj = csArrayList;

                //----------------------------------------------------------------------------
                // ＤＢ更新
                //----------------------------------------------------------------------------
                status = this._iGoodsURelationDataDB.WriteRelation(ref lstObj);

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            csArrayList = lstObj as CustomSerializeArrayList;

                            if (work != null)
                            {
                                CustomSerializeArrayList csaList = lstObj as CustomSerializeArrayList;
                                GoodsMngWork goodsMngWork = null;
                                for (int i = 0; i < csaList.Count; i++)
                                {
                                    if (csaList[i] is GoodsMngWork)
                                    {
                                        goodsMngWork = csaList[i] as GoodsMngWork;
                                        csArrayList.Remove(goodsMngWork);
                                    }
                                }

                                this.SearchGoodsMngInit(goodsUnitData, goodsMngWork);
                            }
                            List<GoodsUnitData> goodsUnitDataLst;

                            //----------------------------------------------------------------------------
                            // 更新戻り値から商品連結データオブジェクトリスト取得
                            //----------------------------------------------------------------------------
                            this.GetGoodsUnitDataWorkToUIdata(csArrayList, out goodsUnitDataLst, out rateList);

                            //----------------------------------------------------------------------------
                            // ヘッダ情報更新
                            //----------------------------------------------------------------------------
                            if (goodsUnitDataLst != null)
                            {
                                //----------------------------------------------------------------------------
                                // 商品情報
                                //----------------------------------------------------------------------------
                                // 作成日時
                                goodsUnitData.CreateDateTime = goodsUnitDataLst[0].CreateDateTime;

                                // 更新日時
                                goodsUnitData.UpdateDateTime = goodsUnitDataLst[0].UpdateDateTime;

                                // 企業コード
                                goodsUnitData.EnterpriseCode = goodsUnitDataLst[0].EnterpriseCode;

                                // GUID
                                goodsUnitData.FileHeaderGuid = goodsUnitDataLst[0].FileHeaderGuid;

                                // 更新従業員コード
                                goodsUnitData.UpdEmployeeCode = goodsUnitDataLst[0].UpdEmployeeCode;

                                // 更新アセンブリID1
                                goodsUnitData.UpdAssemblyId1 = goodsUnitDataLst[0].UpdAssemblyId1;

                                // 更新アセンブリID2
                                goodsUnitData.UpdAssemblyId2 = goodsUnitDataLst[0].UpdAssemblyId2;

                                // 論理削除区分
                                goodsUnitData.LogicalDeleteCode = goodsUnitDataLst[0].LogicalDeleteCode;

                                // 作成日時Ⅱ
                                goodsUnitData.CreateDateTimeA = goodsUnitDataLst[0].CreateDateTimeA;

                                // 更新日時Ⅱ
                                goodsUnitData.UpdateDateTimeA = goodsUnitDataLst[0].UpdateDateTimeA;

                                // GUIDⅡ
                                goodsUnitData.FileHeaderGuidA = goodsUnitDataLst[0].FileHeaderGuidA;
                                //----------------------------------------------------------------------------
                                // 価格情報
                                //----------------------------------------------------------------------------
                                goodsUnitData.GoodsPriceList.Clear();
                                goodsUnitData.GoodsPriceList.AddRange(goodsUnitDataLst[0].GoodsPriceList);

                                //----------------------------------------------------------------------------
                                // 単品売価(掛率情報)
                                //----------------------------------------------------------------------------
                                // ※このメソッドの引数の ref rateList に既に結果が格納されているので処理は不要。

                                //----------------------------------------------------------------------------
                                // 在庫情報
                                //----------------------------------------------------------------------------
                                GoodsUnitData wkGoodsUnitData = goodsUnitDataLst[0];
                                ReflectStockDifferenceOnAfterUpdate(ref wkGoodsUnitData, prevStockList, bakGoodsUnitData);
                                goodsUnitData.StockList.Clear();
                                goodsUnitData.StockList.AddRange(wkGoodsUnitData.StockList);
                            }

                            // 商品データ変更イベント発動
                            GoodsAcsEventArgs args = new GoodsAcsEventArgs(goodsUnitData.Clone());
                            FireChangedGoodsDataEventHandler(this, args, mChangedGoodsDataEvent);

                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        msg = "編集中の商品は、既に他の端末で更新されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        msg = "編集中の商品は、既に他の端末で削除されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(企業ロック)です。" + "\r\n"
                                + "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n"
                                + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(拠点ロック)です。" + "\r\n"
                            + "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(倉庫ロック)です。" + "\r\n"
                            + "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    default:
                        msg = "商品データの登録に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品データの登録で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
            }

            return status;
        }

        /// <summary>
        /// 在庫調整データの生成（商品連結データより） ハンティ専用
        /// </summary>
        /// <param name="stockAdjustCsList">在庫調整データリスト</param>
        /// <param name="goodsUnitData">商品連結データ</param>
        /// <param name="prevStockList">変更前在庫リスト</param>
        /// <param name="machineName">ハンディコンピュータ名</param>
        /// <remarks>
        /// <br>Note       : 商品登録</br>
        /// <br>Programmer : 呉元嘯</br>
        /// <br>Date       : 2021/06/21</br>
        /// </remarks> 
        private void CreateStockAdjustWorkFromGoodsUnitDataHandy(ref CustomSerializeArrayList stockAdjustCsList, GoodsUnitData goodsUnitData, List<Stock> prevStockList, string machineName)
        {
            // 在庫情報が無い場合は迂回
            if (goodsUnitData.StockList == null || goodsUnitData.StockList.Count == 0) return;

            //---------------------------------------------------------------
            // 登録用各種設定値取得
            //---------------------------------------------------------------

            // 受払元伝票区分=42:マスタメンテ
            const int ct_AcPaySlipCd = 42;

            // 受払元取引区分=30:在庫数調整
            const int ct_AcPayTransCd = 30;

            // 作成日時(共通)
            DateTime createDateTime = DateTime.Now;

            // (ﾛｸﾞｲﾝ)従業員コード
            string stockInputCode = LoginInfoAcquisition.Employee.EmployeeCode;

            // (ﾛｸﾞｲﾝ)従業員名称
            string stockInputName = LoginInfoAcquisition.Employee.Name;
            if (stockInputName.Length > 16)
            {
                // 16桁で切り捨て
                stockInputName = stockInputName.Substring(0, 16);
            }
            SecInfoAcs secInfoAcs = new SecInfoAcs();

            Dictionary<string, SecInfoSet> secInfoSetDic = new Dictionary<string, SecInfoSet>();
            foreach (SecInfoSet secInfoSet in secInfoAcs.SecInfoSetList)
            {
                if (secInfoSet.LogicalDeleteCode == 0)
                {
                    secInfoSetDic.Add(secInfoSet.SectionCode.Trim(), secInfoSet);
                }
            }

            for (int index = 0; index < goodsUnitData.StockList.Count; index++)
            {
                //---------------------------------------------------------------
                // 在庫調整データ
                //---------------------------------------------------------------
                StockAdjustWork stockAdjustWork = new StockAdjustWork();

                # region [在庫調整]
                stockAdjustWork.CreateDateTime = createDateTime; // 作成日時
                stockAdjustWork.UpdateDateTime = DateTime.MinValue; // 更新日時
                stockAdjustWork.EnterpriseCode = _enterpriseCode; // 企業コード
                stockAdjustWork.FileHeaderGuid = Guid.Empty; // GUID
                stockAdjustWork.LogicalDeleteCode = 0; // 論理削除区分
                stockAdjustWork.SectionCode = _loginSectionCode; // 拠点コード
                stockAdjustWork.StockAdjustSlipNo = 0; // 在庫調整伝票番号
                stockAdjustWork.AcPaySlipCd = ct_AcPaySlipCd; // 受払元伝票区分
                stockAdjustWork.AcPayTransCd = ct_AcPayTransCd; // 受払元取引区分
                stockAdjustWork.AdjustDate = createDateTime; // 調整日付
                stockAdjustWork.InputDay = createDateTime; // 入力日付
                stockAdjustWork.StockInputCode = stockInputCode; // 仕入入力者コード
                stockAdjustWork.StockInputName = stockInputName; // 仕入入力者名称
                stockAdjustWork.StockAgentCode = stockInputCode; // 仕入担当者コード
                stockAdjustWork.StockAgentName = stockInputName; // 仕入担当者名称
                stockAdjustWork.StockSubttlPrice = 0; // 仕入金額小計（←※ここでは初期値として0をセットする）
                stockAdjustWork.SlipNote = string.Empty; // 伝票備考
                //---------------------------------
                // ※仕入金額小計は
                //   全明細分を合算する必要があるので
                //   後で書き換える。
                //---------------------------------
                if (secInfoSetDic.ContainsKey(_loginSectionCode.Trim()))
                {
                    stockAdjustWork.SectionGuideNm = secInfoSetDic[_loginSectionCode.Trim()].SectionGuideNm.Trim();
                }
                # endregion


                //---------------------------------------------------------------
                // 在庫調整明細データ
                //---------------------------------------------------------------
                StockAdjustDtlWork stockAdjustDtlWork = new StockAdjustDtlWork();

                //---------------------------------------------------------------
                // 在庫オブジェクト取得
                //---------------------------------------------------------------
                // 更新差分在庫(ReflectStockDifferenceで書き変えている為)
                Stock stock = goodsUnitData.StockList[index];
                // 数量関係(の差分)がゼロならば在庫調整明細データは不要なので迂回


                // 対応する更新前在庫
                Stock prevStock = GetStockFromStockList(stock.WarehouseCode, stock.GoodsMakerCd, stock.GoodsNo, prevStockList);

                // 仕入先拠点コード、名称取得
                stockAdjustWork.StockSectionCd = stock.SectionCode;
                if (secInfoSetDic.ContainsKey(stockAdjustWork.StockSectionCd.Trim()))
                {
                    stockAdjustWork.StockSectionGuideNm = secInfoSetDic[stockAdjustWork.StockSectionCd.Trim()].SectionGuideNm.Trim();
                }


                if (!CheckUpdateStockDiff(stock, prevStock))
                {
                    // 数量関係の差分がゼロの場合は、在庫情報のみ設定
                    CustomSerializeArrayList csListOnly = new CustomSerializeArrayList();
                    ArrayList stockWorkListOnly = new ArrayList();
                    StockWork stockWorkOnly;
                    GetStockWorkFromStock(stock, out stockWorkOnly);

                    stockWorkListOnly.Add(stockWorkOnly);
                    csListOnly.Add(stockWorkListOnly);
                    stockAdjustCsList.Add(csListOnly);
                    continue;
                }

                //---------------------------------------------------------------
                // セット値算出
                //---------------------------------------------------------------

                // 標準価格・オープン価格区分
                double listPriceFl;
                int openPriceDiv;
                this.GetListPrice(out listPriceFl, out openPriceDiv, goodsUnitData.GoodsPriceList, createDateTime);

                // 仕入金額算出
                Int64 stockPriceTaxExc;
                this.GetStockPriceTaxExc(out stockPriceTaxExc, stock);

                // 調整数
                // （※注意！在庫マスタ更新用に仕入在庫数は差分に書き換えた前提(this.ReflectStockDifference)）
                double adjustCount = stock.SupplierStock;


                // 変更前仕入単価（浮動）
                double bfStockUnitPriceFl = 0;
                if (prevStock != null)
                {
                    // 変更前オブジェクトがあれば「仕入単価（浮動）」をセットする
                    bfStockUnitPriceFl = prevStock.StockUnitPriceFl;
                }

                //---------------------------------------------------------------
                // 在庫調整明細生成
                //---------------------------------------------------------------

                # region [在庫調整明細]
                stockAdjustDtlWork.CreateDateTime = createDateTime; // 作成日時
                stockAdjustDtlWork.UpdateDateTime = DateTime.MinValue; // 更新日時
                stockAdjustDtlWork.EnterpriseCode = _enterpriseCode; // 企業コード
                stockAdjustDtlWork.FileHeaderGuid = Guid.Empty; // GUID
                stockAdjustDtlWork.LogicalDeleteCode = 0; // 論理削除区分
                stockAdjustDtlWork.SectionCode = stockAdjustWork.SectionCode; // 拠点コード
                stockAdjustDtlWork.StockAdjustSlipNo = stockAdjustWork.StockAdjustSlipNo; // 在庫調整伝票番号
                stockAdjustDtlWork.StockAdjustRowNo = (index + 1); // 在庫調整行番号
                stockAdjustDtlWork.SupplierFormalSrc = 0; // 仕入形式（元）
                stockAdjustDtlWork.StockSlipDtlNumSrc = 0; // 仕入明細通番（元）
                stockAdjustDtlWork.AcPaySlipCd = stockAdjustWork.AcPaySlipCd; // 受払元伝票区分
                stockAdjustDtlWork.AcPayTransCd = stockAdjustWork.AcPayTransCd; // 受払元取引区分
                stockAdjustDtlWork.AdjustDate = createDateTime; // 調整日付
                stockAdjustDtlWork.InputDay = createDateTime; // 入力日付
                stockAdjustDtlWork.GoodsMakerCd = stock.GoodsMakerCd; // 商品メーカーコード
                stockAdjustDtlWork.MakerName = stock.MakerName; // メーカー名称
                stockAdjustDtlWork.GoodsNo = stock.GoodsNo; // 商品番号
                stockAdjustDtlWork.GoodsName = stock.GoodsName; // 商品名称
                stockAdjustDtlWork.StockUnitPriceFl = stock.StockUnitPriceFl; // 仕入単価（税抜,浮動）
                stockAdjustDtlWork.BfStockUnitPriceFl = bfStockUnitPriceFl; // 変更前仕入単価（浮動）
                stockAdjustDtlWork.AdjustCount = adjustCount; // 調整数
                stockAdjustDtlWork.DtlNote = string.Format(MACHINENM_MEG, machineName);
                stockAdjustDtlWork.WarehouseCode = stock.WarehouseCode; // 倉庫コード
                stockAdjustDtlWork.WarehouseName = stock.WarehouseName; // 倉庫名称
                stockAdjustDtlWork.BLGoodsCode = goodsUnitData.BLGoodsCode; // BL商品コード
                stockAdjustDtlWork.BLGoodsFullName = goodsUnitData.BLGoodsFullName; // BL商品コード名称（全角）
                stockAdjustDtlWork.WarehouseShelfNo = stock.WarehouseShelfNo; // 倉庫棚番
                stockAdjustDtlWork.ListPriceFl = listPriceFl; // 定価（浮動）
                stockAdjustDtlWork.OpenPriceDiv = openPriceDiv; // オープン価格区分
                stockAdjustDtlWork.StockPriceTaxExc = stockPriceTaxExc; // 仕入金額（税抜き）
                stockAdjustDtlWork.GoodsName = goodsUnitData.GoodsName.Trim();  // 品名

                stockAdjustDtlWork.SectionGuideNm = stockAdjustWork.SectionGuideNm;
                MakerUMnt makerUMnt;
                int status = GetMaker(_enterpriseCode, stock.GoodsMakerCd, out makerUMnt);
                if (status == 0)
                {
                    stockAdjustDtlWork.MakerName = makerUMnt.MakerName.Trim();
                }
                # endregion

                //---------------------------------------------------------------
                // 金額計に合算
                //---------------------------------------------------------------
                stockAdjustWork.StockSubttlPrice += stockAdjustDtlWork.StockPriceTaxExc; // 仕入金額小計に合算

                // 伝票と明細を1対1で関連付ける
                CustomSerializeArrayList csList = new CustomSerializeArrayList();
                ArrayList stockAdjustWorkList = new ArrayList();
                ArrayList stockAdjustDtlWorkList = new ArrayList();
                ArrayList stockWorkList = new ArrayList();
                StockWork stockWork;
                GetStockWorkFromStock(stock, out stockWork);

                stockAdjustWorkList.Add(stockAdjustWork);
                stockAdjustDtlWorkList.Add(stockAdjustDtlWork);
                stockWorkList.Add(stockWork);

                csList.Add(stockAdjustWorkList);
                csList.Add(stockAdjustDtlWorkList);
                csList.Add(stockWorkList);

                stockAdjustCsList.Add(csList);
            }
        }
        //-----ADD 2021/06/21 呉元嘯 PMKOBETSU-3268の対応-----<<<<<

        // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- >>>>>
        /// <summary>
        /// 商品登録
        /// </summary>
        /// <param name="goodsUnitData">商品連結データ</param>
        /// <param name="prevStockList">変更前在庫リスト</param>
        /// <param name="rateList">掛率リスト</param>
        /// <param name="work">商品管理情報</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>
        /// <br>Note       : 商品登録</br>
        /// <br>Programmer : huangt</br>
        /// <br>Date       : 2014/01/15</br>
        /// </remarks>
        public int WriteForShipmentCnt(ref GoodsUnitData goodsUnitData, List<Stock> prevStockList, ref List<Rate> rateList, GoodsMngWork work, out string msg)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";

            string primaryKey = string.Empty;

            try
            {
                GoodsUnitData bakGoodsUnitData = goodsUnitData.Clone();
                Stock stock = null;
                List<Stock> stockList = new List<Stock>();
                for (int i = 0; i < goodsUnitData.StockList.Count; i++)
                {
                    stock = goodsUnitData.StockList[i].Clone();
                    stockList.Add(stock);
                }
                bakGoodsUnitData.StockList = stockList;

                if (this._iGoodsURelationDataDB == null)
                {
                    this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                }

                //----------------------------------------------------------------------------
                // 商品連結データオブジェクトより商品連結データワークオブジェクトを取得
                //----------------------------------------------------------------------------
                // 在庫リスト差異適用（ 変更後＆変更前 → 差分＆変更前 ）
                this.ReflectStockDifference(ref goodsUnitData, prevStockList);

                CustomSerializeArrayList csArrayList = new CustomSerializeArrayList();
                ArrayList workList = new ArrayList();
                this.CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref workList, goodsUnitData);
                csArrayList.Add(workList);

                // 在庫調整
                CustomSerializeArrayList stockAdjustWorkCsList = new CustomSerializeArrayList();
                this.CreateStockAdjustWorkFromGoodsUnitData(ref stockAdjustWorkCsList, goodsUnitData, prevStockList);
                if (stockAdjustWorkCsList.Count > 0)
                {
                    csArrayList.Add(stockAdjustWorkCsList);
                }

                // 単品売価(掛率)
                if (rateList != null && rateList.Count > 0)
                {
                    ArrayList rateWorkList = new ArrayList();
                    this.CreateRateWorkListFromRateList(ref rateWorkList, rateList);
                    csArrayList.Add(rateWorkList);
                }

                // 商品情報管理
                if (work != null)
                {
                    csArrayList.Add(work);
                }
                object lstObj = csArrayList;

                //----------------------------------------------------------------------------
                // ＤＢ更新
                //----------------------------------------------------------------------------
                status = this._iGoodsURelationDataDB.WriteRelationForShipmentCnt(ref lstObj);

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            csArrayList = lstObj as CustomSerializeArrayList;

                            if (work != null)
                            {
                                CustomSerializeArrayList csaList = lstObj as CustomSerializeArrayList;
                                GoodsMngWork goodsMngWork = null;
                                for (int i = 0; i < csaList.Count; i++)
                                {
                                    if (csaList[i] is GoodsMngWork)
                                    {
                                        goodsMngWork = csaList[i] as GoodsMngWork;
                                        csArrayList.Remove(goodsMngWork);
                                    }
                                }

                                this.SearchGoodsMngInit(goodsUnitData, goodsMngWork);
                            }
                            List<GoodsUnitData> goodsUnitDataLst;

                            //----------------------------------------------------------------------------
                            // 更新戻り値から商品連結データオブジェクトリスト取得
                            //----------------------------------------------------------------------------
                            this.GetGoodsUnitDataWorkToUIdata(csArrayList, out goodsUnitDataLst, out rateList);

                            //----------------------------------------------------------------------------
                            // ヘッダ情報更新
                            //----------------------------------------------------------------------------
                            if (goodsUnitDataLst != null)
                            {
                                //----------------------------------------------------------------------------
                                // 商品情報
                                //----------------------------------------------------------------------------
                                // 作成日時
                                goodsUnitData.CreateDateTime = goodsUnitDataLst[0].CreateDateTime;

                                // 更新日時
                                goodsUnitData.UpdateDateTime = goodsUnitDataLst[0].UpdateDateTime;

                                // 企業コード
                                goodsUnitData.EnterpriseCode = goodsUnitDataLst[0].EnterpriseCode;

                                // GUID
                                goodsUnitData.FileHeaderGuid = goodsUnitDataLst[0].FileHeaderGuid;

                                // 更新従業員コード
                                goodsUnitData.UpdEmployeeCode = goodsUnitDataLst[0].UpdEmployeeCode;

                                // 更新アセンブリID1
                                goodsUnitData.UpdAssemblyId1 = goodsUnitDataLst[0].UpdAssemblyId1;

                                // 更新アセンブリID2
                                goodsUnitData.UpdAssemblyId2 = goodsUnitDataLst[0].UpdAssemblyId2;

                                // 論理削除区分
                                goodsUnitData.LogicalDeleteCode = goodsUnitDataLst[0].LogicalDeleteCode;

                                //----------------------------------------------------------------------------
                                // 価格情報
                                //----------------------------------------------------------------------------
                                goodsUnitData.GoodsPriceList.Clear();
                                goodsUnitData.GoodsPriceList.AddRange(goodsUnitDataLst[0].GoodsPriceList);

                                //----------------------------------------------------------------------------
                                // 単品売価(掛率情報)
                                //----------------------------------------------------------------------------
                                // ※このメソッドの引数の ref rateList に既に結果が格納されているので処理は不要。

                                //----------------------------------------------------------------------------
                                // 在庫情報
                                //----------------------------------------------------------------------------
                                GoodsUnitData wkGoodsUnitData = goodsUnitDataLst[0];
                                ReflectStockDifferenceOnAfterUpdate(ref wkGoodsUnitData, prevStockList, bakGoodsUnitData);
                                goodsUnitData.StockList.Clear();
                                goodsUnitData.StockList.AddRange(wkGoodsUnitData.StockList);
                            }

                            // 商品データ変更イベント発動
                            GoodsAcsEventArgs args = new GoodsAcsEventArgs(goodsUnitData.Clone());
                            FireChangedGoodsDataEventHandler(this, args, mChangedGoodsDataEvent);

                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        msg = "編集中の商品は、既に他の端末で更新されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        msg = "編集中の商品は、既に他の端末で削除されています。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(企業ロック)です。" + "\r\n"
                                + "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n"
                                + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(拠点ロック)です。" + "\r\n"
                            + "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT:
                        msg = "シェアチェックエラー(倉庫ロック)です。" + "\r\n"
                            + "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました。" + "\r\n"
                            + "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n";
                        break;
                    default:
                        msg = "商品データの登録に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品データの登録で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
            }

            return status;
        }
        // ----- ADD huangt 2014/01/15 Redmine#40998 貸出数の変更を可能にするように修正 ----- <<<<<

        /// <summary>
        /// 商品情報と設定パターンによって商品管理情報を取得する
        /// </summary>
        /// <param name="goodsUnitData">商品情報</param>
        /// <param name="work">商品管理情報</param>
        /// <param name="partern">設定パターン</param>
        /// <remarks>
        /// <br>Note       : 商品情報と設定パターンによって商品管理情報を取得します。</br>
        /// <br>Programmer : zhangy3</br>
        /// <br>Date       : 2012/12/01</br>
        /// <br>Update Note: 2013/05/24 donggy</br>
        /// <br>管理番号   : 10801804-00 2013/06/18配信分 </br>
        /// <br>             Redmine#35874 商品マスタ登録の速度改善について</br>
        /// <br>Update Note: 2013/08/13 田建委</br>
        /// <br>管理番号   : 10902175-00</br>
        /// <br>             Redmine#39794 商品在庫マスタⅡの速度改善</br>
        /// </remarks>
        // --- DEL donggy 2013/05/24 for Redmine#35874 --->>>>>>
        //public void GetGoodsMngWorkFromGoodData(GoodsUnitData goodsUnitData, out GoodsMngWork work, GoodsAcs.GoodsMngSettingPattern partern)
        //{
        //    ReSearchMngGoodsInfo(goodsUnitData.EnterpriseCode);
        // --- DEL donggy 2013/05/24 for Redmine#35874 ---<<<<<<
        // --- ADD donggy 2013/05/24 for Redmine#35874 --->>>>>>
        //----- DEL 2013/08/13 田建委 Redmine#39794 ----->>>>>
        //public void GetGoodsMngWorkFromGoodData(GoodsUnitData goodsUnitData, out GoodsMngWork work, GoodsAcs.GoodsMngSettingPattern partern, bool byGoodsNoFlag)
        //{
        //    ReSearchMngGoodsInfo(goodsUnitData, byGoodsNoFlag, true);
        //----- DEL 2013/08/13 田建委 Redmine#39794 -----<<<<<
        // --- ADD donggy 2013/05/24 for Redmine#35874 ---<<<<<<
        public void GetGoodsMngWorkFromGoodData(GoodsUnitData goodsUnitData, out GoodsMngWork work, GoodsAcs.GoodsMngSettingPattern partern) // ADD 2013/08/13 田建委 Redmine#39794
        {
            work = null;
            try
            {
                //拠点＋メーカー
                StringBuilder goodsMngDic4key = new StringBuilder();
                goodsMngDic4key.Append(goodsUnitData.SectionCode.Trim().PadLeft(2, '0'));
                goodsMngDic4key.Append(goodsUnitData.GoodsMakerCd.ToString("0000"));

                //【拠点＋メーカー】＋品番
                StringBuilder goodsMngDic1key = new StringBuilder();
                goodsMngDic1key.Append(goodsMngDic4key.ToString());
                goodsMngDic1key.Append(goodsUnitData.GoodsNo.Trim());

                //全社＋メーカー
                StringBuilder goodsMngDic8key = new StringBuilder();
                goodsMngDic8key.Append(ctAllDefSectionCode);
                goodsMngDic8key.Append(goodsUnitData.GoodsMakerCd.ToString("0000"));

                //【全社＋メーカー】＋品番
                StringBuilder goodsMngDic5key = new StringBuilder();
                goodsMngDic5key.Append(goodsMngDic8key.ToString());
                goodsMngDic5key.Append(goodsUnitData.GoodsNo.Trim());

                //【拠点＋メーカー】＋中分類
                StringBuilder goodsMngDic3key = new StringBuilder();
                goodsMngDic3key.Append(goodsMngDic4key.ToString());
                goodsMngDic3key.Append(goodsUnitData.GoodsMGroup.ToString("0000"));

                //【拠点＋メーカー＋中分類】＋ＢＬ
                StringBuilder goodsMngDic2key = new StringBuilder();
                goodsMngDic2key.Append(goodsMngDic3key.ToString());
                goodsMngDic2key.Append(goodsUnitData.BLGoodsCode.ToString("00000"));

                //【全社＋メーカー】＋中分類
                StringBuilder goodsMngDic7key = new StringBuilder();
                goodsMngDic7key.Append(goodsMngDic8key.ToString());
                goodsMngDic7key.Append(goodsUnitData.GoodsMGroup.ToString("0000"));

                //【全社＋メーカー＋中分類】＋ＢＬ
                StringBuilder goodsMngDic6key = new StringBuilder();
                goodsMngDic6key.Append(goodsMngDic7key.ToString());
                goodsMngDic6key.Append(goodsUnitData.BLGoodsCode.ToString("00000"));

                //1.拠点＋メーカー＋品番
                if (partern == GoodsMngSettingPattern.Section_Maker_GoodsNo)
                {
                    if (_goodsMngDic1.ContainsKey(goodsMngDic1key.ToString()))
                    {
                        work = _goodsMngDic1[goodsMngDic1key.ToString()];
                    }
                }
                else if (partern == GoodsMngSettingPattern.AllSection_Maker_GoodsNo)
                {
                    //2.全社＋メーカー＋品番
                    if (_goodsMngDic1.ContainsKey(goodsMngDic5key.ToString()))
                    {
                        work = _goodsMngDic1[goodsMngDic5key.ToString()];

                    }
                }
                else if (partern == GoodsMngSettingPattern.Section_Maker_MGroup_BL)
                {

                    //3.拠点＋中分類＋メーカー＋ＢＬ
                    if (_goodsMngDic2.ContainsKey(goodsMngDic2key.ToString()))
                    {
                        work = _goodsMngDic2[goodsMngDic2key.ToString()];
                    }
                }
                else if (partern == GoodsMngSettingPattern.AllSection_Maker_MGroup_BL)
                {
                    //4.全社＋中分類＋メーカー＋ＢＬ
                    if (_goodsMngDic2.ContainsKey(goodsMngDic6key.ToString()))
                    {
                        work = _goodsMngDic2[goodsMngDic6key.ToString()];
                    }
                }

                else if (partern == GoodsMngSettingPattern.Section_Maker_MGroup)
                {
                    //5.拠点＋中分類＋メーカー
                    if (_goodsMngDic3.ContainsKey(goodsMngDic3key.ToString()))
                    {
                        work = _goodsMngDic3[goodsMngDic3key.ToString()];
                    }
                }
                else if (partern == GoodsMngSettingPattern.AllSection_Maker_MGroup)
                {

                    //6.全社＋中分類＋メーカー
                    if (_goodsMngDic3.ContainsKey(goodsMngDic7key.ToString()))
                    {
                        work = _goodsMngDic3[goodsMngDic7key.ToString()];
                    }
                }
                else if (partern == GoodsMngSettingPattern.Section_Maker)
                {
                    //7.拠点＋メーカー
                    if (_goodsMngDic4.ContainsKey(goodsMngDic4key.ToString()))
                    {
                        work = _goodsMngDic4[goodsMngDic4key.ToString()];
                    }
                }
                else if (partern == GoodsMngSettingPattern.AllSection_Maker)
                {

                    //8.全社＋メーカー
                    if (_goodsMngDic4.ContainsKey(goodsMngDic8key.ToString()))
                    {
                        work = _goodsMngDic4[goodsMngDic8key.ToString()];
                    }
                }
            }
            finally
            {

            }
        }

        /// <summary>
        /// 商品情報によって商品管理情報を集まる
        /// </summary>
        /// <param name="goodsUnitData">商品情報</param>
        /// <param name="hitMngWorkDic">商品管理情報集合</param>
        /// <remarks>
        /// <br>Note       : 商品情報によって商品管理情報を集まります。</br>
        /// <br>Programmer : zhangy3</br>
        /// <br>Date       : 2012/12/01</br>
        /// <br>Update Note: 2013/05/24 donggy</br>
        /// <br>管理番号   : 10801804-00 2013/06/18配信分 </br>
        /// <br>             Redmine#35874 商品マスタ登録の速度改善について</br>
        /// <br>Update Note: 2013/08/13 田建委</br>
        /// <br>管理番号   : 10902175-00</br>
        /// <br>             Redmine#39794 商品在庫マスタⅡの速度改善</br>
        /// </remarks>
        public void GetMngWorkByGoodData(GoodsUnitData goodsUnitData, out Dictionary<GoodsMngSettingPattern,GoodsMngWork> hitMngWorkDic)
        {
            //ReSearchMngGoodsInfo(goodsUnitData.EnterpriseCode);// DEL donggy 2013/05/24 for Redmine#35874
            //ReSearchMngGoodsInfo(goodsUnitData, false, true); // ADD donggy 2013/05/24 for Redmine#35874 // DEL 2013/08/13 田建委 Redmine#39794
            hitMngWorkDic = new Dictionary<GoodsMngSettingPattern, GoodsMngWork>();
            try
            {
                //全社＋メーカー
                StringBuilder goodsMngDic8key = new StringBuilder();
                goodsMngDic8key.Append(ctAllDefSectionCode);
                goodsMngDic8key.Append(goodsUnitData.GoodsMakerCd.ToString("0000"));
                //【全社＋メーカー】＋品番
                StringBuilder goodsMngDic5key = new StringBuilder();
                goodsMngDic5key.Append(goodsMngDic8key.ToString());
                goodsMngDic5key.Append(goodsUnitData.GoodsNo.Trim());
                //【全社＋メーカー】＋中分類
                StringBuilder goodsMngDic7key = new StringBuilder();
                goodsMngDic7key.Append(goodsMngDic8key.ToString());
                goodsMngDic7key.Append(goodsUnitData.GoodsMGroup.ToString("0000"));
                //【全社＋メーカー＋中分類】＋ＢＬ
                StringBuilder goodsMngDic6key = new StringBuilder();
                goodsMngDic6key.Append(goodsMngDic7key.ToString());
                goodsMngDic6key.Append(goodsUnitData.BLGoodsCode.ToString("00000"));//1.拠点＋メーカー＋品番
               
                //2.全社＋メーカー＋品番
                if (_goodsMngDic1.ContainsKey(goodsMngDic5key.ToString()))
                {
                    hitMngWorkDic.Add(GoodsMngSettingPattern.AllSection_Maker_GoodsNo, _goodsMngDic1[goodsMngDic5key.ToString()]);
                    return;
                }
                //4.全社＋中分類＋メーカー＋ＢＬ
                if (_goodsMngDic2.ContainsKey(goodsMngDic6key.ToString()))
                {
                    hitMngWorkDic.Add(GoodsMngSettingPattern.AllSection_Maker_MGroup_BL, _goodsMngDic2[goodsMngDic6key.ToString()]); 
                    return;
                }
                //6.全社＋中分類＋メーカー
                if (_goodsMngDic3.ContainsKey(goodsMngDic7key.ToString()))
                {
                    hitMngWorkDic.Add(GoodsMngSettingPattern.AllSection_Maker_MGroup, _goodsMngDic3[goodsMngDic7key.ToString()]);
                    return;
                }
                //8.全社＋メーカー
                if (_goodsMngDic4.ContainsKey(goodsMngDic8key.ToString()))
                {
                    hitMngWorkDic.Add(GoodsMngSettingPattern.AllSection_Maker, _goodsMngDic4[goodsMngDic8key.ToString()]);
                    return;
                }
            }
            finally
            {

            }
        }
        //Add End 2012/12/01 zhangy3 for Redmine#33231 -----<<<<<
        #endregion

        // --------------------------------------------------
        #region < ガイド起動 >
        /// <summary>
        /// メーカーガイド起動
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="makerUMnt">メーカーデータオブジェクト</param>
        /// <returns></returns>
        public int ExecuteMakerGuid(string enterpriseCode, out MakerUMnt makerUMnt)
        {

            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;

            makerUMnt = new MakerUMnt();

            // メーカー情報が取得できていない場合は、データ取得
            if (_drMaker == null)
                this.SearchInitial_Maker();

            TableGuideParent tableGuideParent = new TableGuideParent("MAKERGUIDEPARENT2.XML");
            Hashtable inObj = new Hashtable();
            Hashtable retObj = new Hashtable();

            _callGuideMode = (int)emCallGuideMode.MakerGuide;
            if (tableGuideParent.Execute(0, inObj, ref retObj))
            {
                string makerCode = retObj["GoodsMakerCd"].ToString();
                makerUMnt.GoodsMakerCd = int.Parse(makerCode);
                makerUMnt.MakerName = retObj["MakerName"].ToString();

                status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            }
            else
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
            }

            return status;
        }

        /// <summary>
        /// BLコードガイド起動
        /// </summary>
        /// <param name="bLGoodsCdUMnt">BLコードデータオブジェクト</param>
        /// <returns></returns>
        public int ExecuteBLGoodsCd(out BLGoodsCdUMnt bLGoodsCdUMnt)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            bLGoodsCdUMnt = new BLGoodsCdUMnt();

            if (_drBLGoodsCd == null)
                this.SearchInitial_BLGoodsCd();

            TableGuideParent tableGuideParent = new TableGuideParent("BLGOODSCDGUIDEPARENT2.XML");
            Hashtable inObj = new Hashtable();
            Hashtable retObj = new Hashtable();

            _callGuideMode = (int)emCallGuideMode.BLGoodsCdGuide;
            if (tableGuideParent.Execute(0, inObj, ref retObj))
            {
                bLGoodsCdUMnt.BLGoodsCode = (Int32)retObj["BLGoodsCode"];
                bLGoodsCdUMnt.BLGoodsFullName = retObj["BLGoodsFullName"].ToString();

                status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            }
            else
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
            }

            return status;
        }

        // 2008.11.05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //// 2008.10.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /////// <summary>
        /////// BLコードガイド起動
        /////// </summary>
        /////// <param name="bLGoodsCdUMntList">BLコードオブジェクトリスト</param>
        /////// <param name="searchCarInfo">車両検索データクラス</param>
        /////// <returns></returns>
        ////public int ExecuteBLGoodsCd(out List<BLGoodsCdUMnt> bLGoodsCdUMntList, PMKEN01010E searchCarInfo)
        ////{
        ////    int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
        ////    bLGoodsCdUMntList = new List<BLGoodsCdUMnt>();

        ////    //-----------------------------------------------------------------------------
        ////    // BLコード情報がキャッシュされていなければ取得
        ////    //-----------------------------------------------------------------------------
        ////    if (_drBLGoodsCd == null) this.SearchInitial_BLGoodsCd();

        ////    //-----------------------------------------------------------------------------
        ////    // 車両情報設定(車両情報(CarInfo)を設定すると自動でBLコード情報(BLInfo)が設定される)
        ////    //-----------------------------------------------------------------------------
        ////    if (searchCarInfo != null) this._PartsSearchController.CarInfo = searchCarInfo;

        ////    //-----------------------------------------------------------------------------
        ////    // BLコードガイド起動
        ////    //-----------------------------------------------------------------------------
        ////    List<int> blCdList;
        ////    DialogResult ret = SelectionOfrBL.ShowDialog(out blCdList, this._PartsSearchController.BLInfo, _drBLGoodsCd);

        ////    //-----------------------------------------------------------------------------
        ////    // BLコードガイド後処理
        ////    //-----------------------------------------------------------------------------
        ////    if (ret == DialogResult.OK)
        ////    {
        ////        foreach (int blCd in blCdList)
        ////        {
        ////            BLGoodsCdUMnt bLGoodsCd = new BLGoodsCdUMnt();
        ////            bLGoodsCd.BLGoodsCode = blCd;
        ////            bLGoodsCdUMntList.Add(bLGoodsCd);
        ////            status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
        ////        }
        ////    }
        ////    else
        ////    {
        ////        status = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
        ////    }

        ////    return status;
        ////}

        ///// <summary>
        ///// BLコードガイド起動
        ///// </summary>
        ///// <param name="bLGoodsCdUMntList">BLコードオブジェクトリスト</param>
        ///// <param name="searchCarInfo">車両検索データクラス</param>
        ///// <returns></returns>
        //public int ExecuteBLGoodsCd(out List<BLGoodsCdUMnt> bLGoodsCdUMntList, PMKEN01010E searchCarInfo)
        //{
        //    return this.ExecuteBLGoodsCd(out bLGoodsCdUMntList, searchCarInfo, this._loginSectionCode);
        //}

        ///// <summary>
        ///// BLコードガイド起動
        ///// </summary>
        ///// <param name="bLGoodsCdUMntList">BLコードオブジェクトリスト</param>
        ///// <param name="searchCarInfo">車両検索データクラス</param>
        ///// <param name="sectionCode">拠点コード</param>
        ///// <returns></returns>
        //public int ExecuteBLGoodsCd(out List<BLGoodsCdUMnt> bLGoodsCdUMntList, PMKEN01010E searchCarInfo, string sectionCode)
        //{
        //    int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
        //    bLGoodsCdUMntList = new List<BLGoodsCdUMnt>();

        //    //-----------------------------------------------------------------------------
        //    // BLコード情報がキャッシュされていなければ取得
        //    //-----------------------------------------------------------------------------
        //    if (_drBLGoodsCd == null) this.SearchInitial_BLGoodsCd();

        //    //-----------------------------------------------------------------------------
        //    // 車両情報設定(車両情報(CarInfo)を設定すると自動でBLコード情報(BLInfo)が設定される)
        //    //-----------------------------------------------------------------------------
        //    if (searchCarInfo != null) this._PartsSearchController.CarInfo = searchCarInfo;

        //    //-----------------------------------------------------------------------------
        //    // BLコードガイド起動
        //    //-----------------------------------------------------------------------------
        //    List<int> blCdList;
        //    DialogResult ret = SelectionOfrBL.ShowDialog(out blCdList, this._PartsSearchController.BLInfo, _drBLGoodsCd, sectionCode);

        //    //-----------------------------------------------------------------------------
        //    // BLコードガイド後処理
        //    //-----------------------------------------------------------------------------
        //    if (ret == DialogResult.OK)
        //    {
        //        foreach (int blCd in blCdList)
        //        {
        //            BLGoodsCdUMnt bLGoodsCd = new BLGoodsCdUMnt();
        //            bLGoodsCd.BLGoodsCode = blCd;
        //            bLGoodsCdUMntList.Add(bLGoodsCd);
        //            status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
        //        }
        //    }
        //    else
        //    {
        //        status = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
        //    }

        //    return status;
        //}
        //// 2008.10.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// BLコードガイド起動
        /// </summary>
        /// <param name="bLGoodsCdUMntList">BLコードオブジェクトリスト</param>
        /// <param name="searchCarInfo">車両検索データクラス</param>
        /// <returns></returns>
        public int ExecuteBLGoodsCd(out List<BLGoodsCdUMnt> bLGoodsCdUMntList, PMKEN01010E searchCarInfo)
        {
            return this.ExecuteBLGoodsCd(out bLGoodsCdUMntList, searchCarInfo, this._loginSectionCode, 0);
        }

        /// <summary>
        /// BLコードガイド起動
        /// </summary>
        /// <param name="bLGoodsCdUMntList">BLコードオブジェクトリスト</param>
        /// <param name="searchCarInfo">車両検索データクラス</param>
        /// <param name="customerCode">得意先コード</param>
        /// <returns></returns>
        public int ExecuteBLGoodsCd(out List<BLGoodsCdUMnt> bLGoodsCdUMntList, PMKEN01010E searchCarInfo, int customerCode)
        {
            return this.ExecuteBLGoodsCd(out bLGoodsCdUMntList, searchCarInfo, this._loginSectionCode, customerCode);
        }

        /// <summary>
        /// BLコードガイド起動
        /// </summary>
        /// <param name="bLGoodsCdUMntList">BLコードオブジェクトリスト</param>
        /// <param name="searchCarInfo">車両検索データクラス</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <returns></returns>
        public int ExecuteBLGoodsCd(out List<BLGoodsCdUMnt> bLGoodsCdUMntList, PMKEN01010E searchCarInfo, string sectionCode)
        {
            return this.ExecuteBLGoodsCd(out bLGoodsCdUMntList, searchCarInfo, sectionCode, 0);
        }

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.15 ADD
        /// <summary>
        /// BLコードガイド起動
        /// </summary>
        /// <param name="bLGoodsCdUMntList">BLコードオブジェクトリスト</param>
        /// <param name="searchCarInfo">車両検索データクラス</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="customerCode">得意先コード</param>
        /// <returns></returns>
        public int ExecuteBLGoodsCd( out List<BLGoodsCdUMnt> bLGoodsCdUMntList, PMKEN01010E searchCarInfo, string sectionCode, int customerCode )
        {
            // モード未指定時は"BLコード選択"モード(GuideMode.BLCode)をセットする
            return ExecuteBLGoodsCd( out bLGoodsCdUMntList, searchCarInfo, sectionCode, customerCode, BLGuideMode.BLCode );
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.15 ADD

        /// <summary>
        /// BLコードガイド起動
        /// </summary>
        /// <param name="bLGoodsCdUMntList">BLコードオブジェクトリスト</param>
        /// <param name="searchCarInfo">車両検索データクラス</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="blGuideMode">BLガイドモード</param>
        /// <returns></returns>
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.15 DEL
        //public int ExecuteBLGoodsCd(out List<BLGoodsCdUMnt> bLGoodsCdUMntList, PMKEN01010E searchCarInfo, string sectionCode, int customerCode)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.15 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.15 ADD
        public int ExecuteBLGoodsCd( out List<BLGoodsCdUMnt> bLGoodsCdUMntList, PMKEN01010E searchCarInfo, string sectionCode, int customerCode, BLGuideMode blGuideMode )
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.15 ADD
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            bLGoodsCdUMntList = new List<BLGoodsCdUMnt>();

            //-----------------------------------------------------------------------------
            // BLコード情報がキャッシュされていなければ取得
            //-----------------------------------------------------------------------------
            if (_drBLGoodsCd == null) this.SearchInitial_BLGoodsCd();

            //-----------------------------------------------------------------------------
            // 車両情報設定(車両情報(CarInfo)を設定すると自動でBLコード情報(BLInfo)が設定される)
            //-----------------------------------------------------------------------------
            if (searchCarInfo != null) this._PartsSearchController.CarInfo = searchCarInfo;

            //-----------------------------------------------------------------------------
            // BLコードガイド起動
            //-----------------------------------------------------------------------------
            List<int> blCdList;
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.15 DEL
            //DialogResult ret = SelectionOfrBL.ShowDialog(out blCdList, this._PartsSearchController.BLInfo, _drBLGoodsCd, sectionCode.Trim(), customerCode);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.15 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.15 ADD
            SelectionOfrBL.GuideMode mode;
            # region [blGuideMode]
            switch ( blGuideMode )
            {
                default:
                case BLGuideMode.BLCode:
                    mode = SelectionOfrBL.GuideMode.BLCode;
                    break;
                case BLGuideMode.PartsPos:
                    mode = SelectionOfrBL.GuideMode.PartsPos;
                    break;
                case BLGuideMode.BLGuide:
                    mode = SelectionOfrBL.GuideMode.BLGuide;
                    break;
            }
            # endregion
            DialogResult ret = SelectionOfrBL.ShowDialog( out blCdList, this._PartsSearchController.BLInfo, _drBLGoodsCd, sectionCode.Trim(), customerCode, mode );
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.15 ADD

            //-----------------------------------------------------------------------------
            // BLコードガイド後処理
            //-----------------------------------------------------------------------------
            if (ret == DialogResult.OK)
            {
                foreach (int blCd in blCdList)
                {
                    BLGoodsCdUMnt bLGoodsCd = new BLGoodsCdUMnt();
                    bLGoodsCd.BLGoodsCode = blCd;
                    bLGoodsCdUMntList.Add(bLGoodsCd);
                    status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                }
            }
            else
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
            }

            return status;
        }
        // 2008.11.05 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// BLグループコードガイド起動
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="dGoodsGanre"></param>
        /// <returns></returns>
        public int ExecuteBLGroupGuid(string enterpriseCode, out BLGroupU dGoodsGanre)
        {
            if (_BLGroupAcs == null) _BLGroupAcs = new BLGroupUAcs();

            return _BLGroupAcs.ExecuteGuid(enterpriseCode, out dGoodsGanre);
        }

        /// <summary>
        /// ユーザーガイド起動
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="userGdBd"></param>
        /// <param name="userGuideCode"></param>
        /// <returns></returns>
        public int ExecuteUserGuideGuid(string enterpriseCode, out UserGdBd userGdBd, int userGuideCode)
        {
            if (_userGuideAcs == null) _userGuideAcs = new UserGuideAcs();

            UserGdHd userGdHd = new UserGdHd();
            return _userGuideAcs.ExecuteGuid(enterpriseCode, out userGdHd, out userGdBd, userGuideCode);
        }

        /// <summary>
        /// 商品中分類ガイド起動
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="goodsMGroup"></param>
        /// <returns></returns>
        public int ExecuteGoodsMGroupGuid(string enterpriseCode, out GoodsGroupU goodsMGroup)
        {
            if (_goodsMGroupAcs == null) _goodsMGroupAcs = new GoodsGroupUAcs();

            return _goodsMGroupAcs.ExecuteGuid(enterpriseCode, out goodsMGroup);
        }
        #endregion
        #endregion

        # region Public Static Methods
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/10 ADD
        /// <summary>
        /// 品名取得処理
        /// </summary>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="goodsName">品名</param>
        /// <returns>STATUS</returns>
        public static int GetGoodsName( int goodsMakerCd, string goodsNo, out string goodsName )
        {
            //PMTKD06020B（検索アクセスクラス）呼び出し
            return PartsSearchController.GetPartsName( goodsMakerCd, goodsNo, out goodsName );
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/10 ADD
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  2009/02/06 ADD
        /// <summary>
        /// 品名取得処理
        /// </summary>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="goodsName">品名</param>
        /// <returns>STATUS</returns>
        public static int GetGoodsNameKana(int goodsMakerCd, string goodsNo, out string goodsName)
        {
            //PMTKD06020B（検索アクセスクラス）呼び出し
            return PartsSearchController.GetPartsNameKana(goodsMakerCd, goodsNo, out goodsName);
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  2009/02/06 ADD
        # endregion

        //================================================================================
        //  内部使用関数
        //================================================================================
        #region Private Methods
        #region ●　Staticデータ初期化処理
        /// <summary>
        /// Staticデータ初期化処理
        /// </summary>
        /// <param name="clearList">初期化するクラス</param>
        private void ClearStaticData(ArrayList clearList)
        {
            if (clearList == null || clearList.Count == 0)
            {
                // 全件削除
                // メーカーコード
                if (_drMaker != null) _drMaker.Clear();
                // BLコード
                if (_drBLGoodsCd != null) _drBLGoodsCd.Clear();
                // BLグループコード情報
                if (_drBLGroup != null) _drBLGroup.Clear();
                // 商品中分類情報
                if (_drGoodsMGroup != null) _drGoodsMGroup.Clear();
                // 商品大分類情報
                if (_drGoodsLGroup != null) _drGoodsLGroup.Clear();
                // 自社分類情報
                if (_drEnterpriseGanreCode != null) _drEnterpriseGanreCode.Clear();
                // 販売区分情報
                if (_drSalesCode != null) _drSalesCode.Clear();
                // 商品管理情報
                if (_goodsMngList != null) _goodsMngList.Clear();

                // 優良設定情報
            }
            else
            {
            }
        }

        #endregion
        
        // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //#region ●　商品Staticデータ取得
        ///// <summary>
        ///// 商品データ取得
        ///// </summary>
        ///// <param name="enterpriseCode">企業コード</param>
        ///// <param name="goodsCode">品番</param>
        ///// <param name="dataList">商品連結データオブジェクトリスト</param>
        ///// <returns></returns>
        //private int ReadStatic(string enterpriseCode, string goodsCode, out List<GoodsUnitData> dataList)
        //{
        //    int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //    dataList = null;

        //    try
        //    {
        //        if (_drGoods == null || _drGoods.Count == 0) return status;

        //        // キャッシュしているデータより検索する
        //        foreach (KeyValuePair<string, GoodsUnitData> kv in _drGoods)
        //        {
        //            if (kv.Value.EnterpriseCode.Equals(enterpriseCode) && kv.Value.GoodsNo.Equals(goodsCode))
        //            {
        //                if (dataList == null)
        //                    dataList = new List<GoodsUnitData>();

        //                dataList.Add(kv.Value.Clone());
        //            }
        //        }

        //        if (dataList != null && dataList.Count > 0)
        //        {
        //            return (int)ConstantManagement.DB_Status.ctDB_NORMAL;
        //        }

        //        return status;
        //    }
        //    catch (Exception)
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //    }

        //    return status;
        //}

        ///// <summary>
        ///// 商品データ取得
        ///// </summary>
        ///// <param name="enterpriseCode">企業コード</param>
        ///// <param name="makerCode">メーカーコード</param>
        ///// <param name="goodsCode">品番</param>
        ///// <param name="goodsUnitData">商品連結データオブジェクト</param>
        ///// <returns></returns>
        //private int ReadStatic(string enterpriseCode, int makerCode, string goodsCode, out GoodsUnitData goodsUnitData)
        //{
        //    int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //    goodsUnitData = new GoodsUnitData();

        //    try
        //    {
        //        if (_drGoods == null || _drGoods.Count == 0) return status;

        //        // キャッシュしているデータより検索する
        //        string primaryKey = this.GetPrimaryKeyGoodsList(makerCode, goodsCode);

        //        if (_drGoods.ContainsKey(primaryKey))
        //        {
        //            goodsUnitData = _drGoods[primaryKey].Clone();
        //        }

        //        // リモーティングして取得する
        //        return status;
        //    }
        //    catch (Exception)
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //    }

        //    return status;
        //}
        //#endregion
        // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        #region ●　クラスメンバーコピー関連
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 DEL
        ///// <summary>
        ///// CustomSerializeArrayList →　商品連結データクラス取得
        ///// </summary>
        ///// <param name="workList">WORK型データリスト</param>
        ///// <param name="uiList">商品連結データクラス</param>
        ///// <returns>ConstantManagement.DB_Status</returns>
        //private int GetGoodsUnitDataWorkToUIdata(CustomSerializeArrayList workList, out List<GoodsUnitData> uiList)
        //{
        //    int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //    uiList = null;

        //    try
        //    {
        //        foreach (ArrayList arList in workList)
        //        {
        //            if (arList != null && arList.Count > 0)
        //            {
        //                if (arList[0] is GoodsUnitDataWork)
        //                {
        //                    // クラスメンバーコピー処理
        //                    uiList = CopyToGoodsUnitDataFromGoodsUnitDataWork(arList);

        //                    status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //        // 例外を発生させる
        //        string message = "商品連結データ取得で例外が発生しました[" + ex.Message + "]";
        //        throw new GoodsAcsException(message, -1);
        //    }

        //    return status;
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/22 ADD
        /// <summary>
        /// CustomSerializeArrayList →　商品連結データクラス取得
        /// </summary>
        /// <param name="workList">WORK型データリスト</param>
        /// <param name="uiList">商品連結データクラス</param>
        /// <param name="rateList"></param>
        /// <returns>ConstantManagement.DB_Status</returns>
        private int GetGoodsUnitDataWorkToUIdata( CustomSerializeArrayList workList, out List<GoodsUnitData> uiList, out List<Rate> rateList )
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            uiList = null;
            rateList = new List<Rate>();

            try
            {
                foreach ( ArrayList arList in workList )
                {
                    if ( arList != null && arList.Count > 0 )
                    {
                        if ( arList[0] is GoodsUnitDataWork )
                        {
                            // クラスメンバーコピー処理
                            uiList = CopyToGoodsUnitDataFromGoodsUnitDataWork( arList );

                            status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                        }
                        if ( arList[0] is RateWork )
                        {
                            // 掛率リストコピー処理
                            rateList = CopyToRateFromRateWork( arList );
                        }
                    }
                }
            }
            catch ( Exception ex )
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                // 例外を発生させる
                string message = "商品連結データ取得で例外が発生しました[" + ex.Message + "]";
                throw new GoodsAcsException( message, -1 );
            }

            return status;
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/22 ADD

        /// <summary>
        /// CustomSerializeArrayList →　商品クラス取得
        /// </summary>
        /// <param name="workList">WORK型データリスト</param>
        /// <param name="uiList">商品クラス</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        private int GetGoodsUWorkToUIdata(CustomSerializeArrayList workList, out List<Goods> uiList)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            uiList = null;

            try
            {
                foreach (ArrayList arList in workList)
                {
                    if (arList != null && arList.Count > 0)
                    {
                        if (arList[0] is GoodsUWork)
                        {
                            // クラスメンバーコピー処理
                            uiList = CopyToGoodsFromGoodsUWork(arList);

                            status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                // 例外を発生させる
                string message = "商品データ取得で例外が発生しました[" + ex.Message + "]";
                throw new GoodsAcsException(message, -1);
            }

            return status;
        }

        /// <summary>
        /// CustomSerializeArrayList →　BLグループコードマスタ(ユーザー)リスト取得
        /// </summary>
        /// <param name="workList">WORK型データリスト</param>
        /// <param name="uiList">商品区分詳細(ユーザー登録)クラス</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        private int GetBLGroupUWorkToUIdata(CustomSerializeArrayList workList, out List<BLGroupU> uiList)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            uiList = null;

            try
            {
                //---------------------------------------------------------------------
                // サーバーデータ取得
                //---------------------------------------------------------------------
                if (workList[0] is ArrayList)
                {
                    foreach (ArrayList arList in workList)
                    {
                        if (arList != null && arList.Count > 0)
                        {
                            if (arList[0] is BLGroupUWork)
                            {
                                // クラスメンバーコピー処理
                                uiList = this.CopyToBLGroupUFromBLGroupUWork(arList);

                                status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                            }
                        }
                    }
                }
                //---------------------------------------------------------------------
                // ローカルデータ取得
                //---------------------------------------------------------------------
                for (int i = 0; i < workList.Count; ++i)
                {
                    if (workList[i] is List<BLGroupUWork>)
                    {
                        if (uiList == null)
                        {
                            uiList = new List<BLGroupU>();
                        }
                        List<BLGroupUWork> workList2 = new List<BLGroupUWork>();
                        workList2 = workList[i] as List<BLGroupUWork>;
                        foreach (BLGroupUWork work in workList2)
                        {
                            BLGroupU bLGroup = this.CopyToBLGroupUFromBLGroupUWork(work);
                            // クラスメンバーコピー処理
                            uiList.Add(bLGroup);
                        }
                        status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    }
                }
                // 2008.02.19 96012 ローカルＤＢ参照対応 end
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                // 例外を発生させる
                string message = "BLグループコードマスタ(ユーザー)取得で例外が発生しました[" + ex.Message + "]";
                throw new GoodsAcsException(message, -1);
            }

            return status;
        }

        /// <summary>
        /// CustomSerializeArrayList → 商品中分類(ユーザー)リスト取得
        /// </summary>
        /// <param name="workList">取得元リスト</param>
        /// <param name="uiList">商品中分類マスタ(ユーザー)オブジェクトリスト</param>
        /// <returns></returns>
        private int GetGoodsMGroupUWorkToUIdata(CustomSerializeArrayList workList, out List<GoodsGroupU> uiList)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            uiList = null;

            try
            {
                //---------------------------------------------------------------------
                // サーバーデータ取得
                //---------------------------------------------------------------------
                if (workList[0] is ArrayList)
                {
                    foreach (ArrayList arList in workList)
                    {
                        if (arList != null && arList.Count > 0)
                        {
                            if (arList[0] is GoodsGroupUWork)
                            {
                                // クラスメンバーコピー処理
                                uiList = this.CopyToGoodsMGroupUFromGoodsMGroupUWork(arList);
                                status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                            }
                        }
                    }
                }
                //---------------------------------------------------------------------
                // ローカルデータ取得
                //---------------------------------------------------------------------
                for (int i = 0; i < workList.Count; ++i)
                {
                    if (workList[i] is List<GoodsGroupUWork>)
                    {
                        if (uiList == null)
                        {
                            uiList = new List<GoodsGroupU>();
                        }
                        List<GoodsGroupUWork> workList2 = new List<GoodsGroupUWork>();
                        workList2 = workList[i] as List<GoodsGroupUWork>;
                        foreach (GoodsGroupUWork work in workList2)
                        {
                            GoodsGroupU goodsMGroup = this.CopyToGoodsMGroupUFromGoodsMGroupUWork(work);
                            // クラスメンバーコピー処理
                            uiList.Add(goodsMGroup);
                        }
                        status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    }
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                // 例外を発生させる
                string message = "商品中分類マスタ(ユーザー)取得で例外が発生しました[" + ex.Message + "]";
                throw new GoodsAcsException(message, -1);
            }

            return status;
        }

        /// <summary>
        /// CustomSerializeArrayList → 商品大分類(ユーザー)リスト取得
        /// </summary>
        /// <param name="workList">取得元リスト</param>
        /// <param name="uiList">ユーザーガイド(ユーザー)オブジェクトリスト</param>
        /// <returns></returns>
        private int GetGoodsLGroupUWorkToUIdata(CustomSerializeArrayList workList, out List<UserGdBdU> uiList)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            uiList = null;

            try
            {
                //---------------------------------------------------------------------
                // サーバーデータ取得
                //---------------------------------------------------------------------
                if (workList[0] is ArrayList)
                {
                    foreach (ArrayList arList in workList)
                    {
                        if (arList != null && arList.Count > 0)
                        {
                            if (arList[0] is UserGdBdUWork)
                            {
                                UserGdBdUWork userGdBdUWork = (UserGdBdUWork)arList[0];

                                // ガイドコード判定
                                if (userGdBdUWork.UserGuideDivCd == (int)GoodsAcs.emUserGuideCode.GoodsLGroup)
                                {
                                    // クラスメンバーコピー処理
                                    uiList = this.CopyToUserGdBdUFromUserGdBdUWork(arList);
                                }
                                status = ((uiList != null) && (uiList.Count != 0)) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                            }
                        }
                    }
                }
                //---------------------------------------------------------------------
                // ローカルデータ取得
                //---------------------------------------------------------------------
                for (int i = 0; i < workList.Count; ++i)
                {
                    if (workList[i] is List<UserGdBdUWork>)
                    {
                        if (uiList == null)
                        {
                            uiList = new List<UserGdBdU>();
                        }
                        List<UserGdBdUWork> workList2 = new List<UserGdBdUWork>();
                        workList2 = workList[i] as List<UserGdBdUWork>;
                        foreach (UserGdBdUWork work in workList2)
                        {
                            // ガイドコード判定
                            if (work.UserGuideDivCd == (int)GoodsAcs.emUserGuideCode.GoodsLGroup)
                            {
                                UserGdBdU userGdBdU = this.CopyToUserGdBdUFromUserGdBdUWork(work);
                                // クラスメンバーコピー処理
                                uiList.Add(userGdBdU);
                            }
                        }
                        status = ((uiList != null) && (uiList.Count != 0)) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    }
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                // 例外を発生させる
                string message = "商品大分類(ユーザー)取得で例外が発生しました[" + ex.Message + "]";
                throw new GoodsAcsException(message, -1);
            }

            return status;
        }

        /// <summary>
        /// CustomSerializeArrayList → 自社分類(ユーザー)リスト取得
        /// </summary>
        /// <param name="workList">取得元リスト</param>
        /// <param name="uiList">ユーザーガイド(ユーザー)オブジェクトリスト</param>
        /// <returns></returns>
        private int GetEnterpriseGanreUWorkToUIdata(CustomSerializeArrayList workList, out List<UserGdBdU> uiList)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            uiList = null;

            try
            {
                //---------------------------------------------------------------------
                // サーバーデータ取得
                //---------------------------------------------------------------------
                if (workList[0] is ArrayList)
                {
                    foreach (ArrayList arList in workList)
                    {
                        if (arList != null && arList.Count > 0)
                        {
                            if (arList[0] is UserGdBdUWork)
                            {
                                UserGdBdUWork userGdBdUWork = (UserGdBdUWork)arList[0];

                                // ガイドコード判定
                                if (userGdBdUWork.UserGuideDivCd == (int)GoodsAcs.emUserGuideCode.EnterpriseGanre)
                                {
                                    // クラスメンバーコピー処理
                                    uiList = this.CopyToUserGdBdUFromUserGdBdUWork(arList);
                                }
                                status = ((uiList != null) && (uiList.Count != 0)) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                            }
                        }
                    }
                }
                //---------------------------------------------------------------------
                // ローカルデータ取得
                //---------------------------------------------------------------------
                for (int i = 0; i < workList.Count; ++i)
                {
                    if (workList[i] is List<UserGdBdUWork>)
                    {
                        if (uiList == null)
                        {
                            uiList = new List<UserGdBdU>();
                        }
                        List<UserGdBdUWork> workList2 = new List<UserGdBdUWork>();
                        workList2 = workList[i] as List<UserGdBdUWork>;
                        foreach (UserGdBdUWork work in workList2)
                        {
                            // ガイドコード判定
                            if (work.UserGuideDivCd == (int)GoodsAcs.emUserGuideCode.EnterpriseGanre)
                            {
                                UserGdBdU userGdBdU = this.CopyToUserGdBdUFromUserGdBdUWork(work);
                                // クラスメンバーコピー処理
                                uiList.Add(userGdBdU);
                            }
                        }
                        status = ((uiList != null) && (uiList.Count != 0)) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    }
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                // 例外を発生させる
                string message = "自社分類(ユーザー)取得で例外が発生しました[" + ex.Message + "]";
                throw new GoodsAcsException(message, -1);
            }

            return status;
        }

        /// <summary>
        /// CustomSerializeArrayList → 販売区分(ユーザー)リスト取得
        /// </summary>
        /// <param name="workList">取得元リスト</param>
        /// <param name="uiList">ユーザーガイド(ユーザー)オブジェクトリスト</param>
        /// <returns></returns>
        private int GetSalesCodeUWorkToUIdata(CustomSerializeArrayList workList, out List<UserGdBdU> uiList)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            uiList = null;

            try
            {
                //---------------------------------------------------------------------
                // サーバーデータ取得
                //---------------------------------------------------------------------
                if (workList[0] is ArrayList)
                {
                    foreach (ArrayList arList in workList)
                    {
                        if (arList != null && arList.Count > 0)
                        {
                            if (arList[0] is UserGdBdUWork)
                            {
                                UserGdBdUWork userGdBdUWork = (UserGdBdUWork)arList[0];

                                // ガイドコード判定
                                if (userGdBdUWork.UserGuideDivCd == (int)GoodsAcs.emUserGuideCode.SalesCode)
                                {
                                    // クラスメンバーコピー処理
                                    uiList = this.CopyToUserGdBdUFromUserGdBdUWork(arList);
                                }
                                status = ((uiList != null) && (uiList.Count != 0)) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                            }
                        }
                    }
                }
                //---------------------------------------------------------------------
                // ローカルデータ取得
                //---------------------------------------------------------------------
                for (int i = 0; i < workList.Count; ++i)
                {
                    if (workList[i] is List<UserGdBdUWork>)
                    {
                        if (uiList == null)
                        {
                            uiList = new List<UserGdBdU>();
                        }
                        List<UserGdBdUWork> workList2 = new List<UserGdBdUWork>();
                        workList2 = workList[i] as List<UserGdBdUWork>;
                        foreach (UserGdBdUWork work in workList2)
                        {
                            // ガイドコード判定
                            if (work.UserGuideDivCd == (int)GoodsAcs.emUserGuideCode.SalesCode)
                            {
                                UserGdBdU userGdBdU = this.CopyToUserGdBdUFromUserGdBdUWork(work);
                                // クラスメンバーコピー処理
                                uiList.Add(userGdBdU);
                            }
                        }
                        status = ((uiList != null) && (uiList.Count != 0)) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    }
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                // 例外を発生させる
                string message = "販売区分(ユーザー)取得で例外が発生しました[" + ex.Message + "]";
                throw new GoodsAcsException(message, -1);
            }

            return status;
        }

        /// <summary>
        /// CustomSerializeArrayList → 商品管理情報(ユーザー)リスト取得
        /// </summary>
        /// <param name="workList">取得元リスト</param>
        /// <param name="uiList">商品管理情報(ユーザー)オブジェクトリスト</param>
        /// <returns></returns>
        // 2009.01.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //private int GetGoodsMngWorkToUIdata(CustomSerializeArrayList workList, out List<GoodsMng> uiList)
        private int GetGoodsMngWorkToUIdata(CustomSerializeArrayList workList, out List<GoodsMngWork> uiList)
        // 2009.01.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            uiList = null;

            try
            {
                //---------------------------------------------------------------------
                // サーバーデータ取得
                //---------------------------------------------------------------------
                if (workList[0] is ArrayList)
                {
                    foreach (ArrayList arList in workList)
                    {
                        if (arList != null && arList.Count > 0)
                        {
                            if (arList[0] is GoodsMngWork)
                            {
                                // 2009.01.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                //GoodsMngWork goodsMngWork = (GoodsMngWork)arList[0];
                                //// クラスメンバーコピー処理
                                //uiList = this.CopyToGoodsMngFromGoodsMngWork(arList);

                                uiList = new List<GoodsMngWork>((GoodsMngWork[])arList.ToArray(typeof(GoodsMngWork)));
                                // 2009.01.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                // 例外を発生させる
                string message = "商品管理情報(ユーザー)取得で例外が発生しました[" + ex.Message + "]";
                throw new GoodsAcsException(message, -1);
            }

            return status;
        }

        /// <summary>
        /// CustomSerializeArrayList → 優良設定情報(ユーザー)リスト取得
        /// </summary>
        /// <param name="workList">取得元リスト</param>
        /// <param name="uiList">優良設定情報(ユーザー)オブジェクトリスト</param>
        /// <returns></returns>
        private int GetPrmSettingUWorkToUIdata(CustomSerializeArrayList workList, out List<PrmSettingUWork> uiList)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            uiList = null;

            try
            {
                //---------------------------------------------------------------------
                // サーバーデータ取得
                //---------------------------------------------------------------------
                if (workList[0] is ArrayList)
                {
                    foreach (ArrayList arList in workList)
                    {
                        if (arList != null && arList.Count > 0)
                        {
                            if (arList[0] is PrmSettingUWork)
                            {
                                uiList = new List<PrmSettingUWork>((PrmSettingUWork[])arList.ToArray(typeof(PrmSettingUWork)));
                                status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                // 例外を発生させる
                string message = "優良設定情報(ユーザー)取得で例外が発生しました[" + ex.Message + "]";
                throw new GoodsAcsException(message, -1);
            }

            return status;
        }

        // 2008.12.16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// CustomSerializeArrayList → 売上全体設定情報(ユーザー)リスト取得
        /// </summary>
        /// <param name="workList">取得元リスト</param>
        /// <param name="uiList">売上全体設定情報(ユーザー)オブジェクトリスト</param>
        /// <returns></returns>
        private int GetSalesTtlStWorkToUIdata(CustomSerializeArrayList workList, out List<SalesTtlStWork> uiList)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            uiList = null;

            try
            {
                //---------------------------------------------------------------------
                // サーバーデータ取得
                //---------------------------------------------------------------------
                if (workList[0] is ArrayList)
                {
                    foreach (ArrayList arList in workList)
                    {
                        if (arList != null && arList.Count > 0)
                        {
                            if (arList[0] is SalesTtlStWork)
                            {
                                uiList = new List<SalesTtlStWork>((SalesTtlStWork[])arList.ToArray(typeof(SalesTtlStWork)));
                                status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                // 例外を発生させる
                string message = "売上全体設定情報取得で例外が発生しました[" + ex.Message + "]";
                throw new GoodsAcsException(message, -1);
            }

            return status;
        }
        // 2008.12.16 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        //-------- ADD 田建委 2013/02/08 Redmine#34640 ------->>>>>
        /// <summary>
        /// 税率Listを取得する
        /// </summary>
        /// <param name="goodsUnitData">商品</param>
        /// <param name="rateList">税率List</param>
        /// <param name="msg">MESSAGE</param>
        /// <returns>STATUS</returns>
        /// <remarks>
        /// <br>Note       : 税率Listを取得する</br>
        /// <br>Programmer : 田建委</br>
        /// <br>Date       : 2013/02/08</br>
        /// </remarks>
        public int GetAllRates(GoodsUnitData goodsUnitData,out List<Rate> rateList,out string msg)
        {
            rateList = new List<Rate>();
            msg = string.Empty;
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            try
            {
                // サーバーユーザーデータ
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                rateList = new List<Rate>();
                GoodsUnitDataWork work = new GoodsUnitDataWork();
                work.EnterpriseCode = goodsUnitData.EnterpriseCode;
                work.GoodsMakerCd = goodsUnitData.GoodsMakerCd;
                work.GoodsNo = goodsUnitData.GoodsNo;
                ArrayList retList = new ArrayList();
                status = this._iGoodsURelationDataDB.GetRateWorkByGood(work, out retList);
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (retList.Count > 0)
                    {
                        rateList = CopyToRateFromRateWork(retList);
                    }
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                // 例外を発生させる
                msg = "全体税率情報取得で例外が発生しました[" + ex.Message + "]";
            }
            return status;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="goodsUnitData">検索条件</param>
        /// <param name="readMode">検索モード（０：前頁；１：次頁）</param>
        /// <param name="uiList">検索結果</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Note       : 前品番・次品番の検索を行う。</br>
        /// <br>Programmer : 田建委</br>
        /// <br>Date       : 2013/02/08</br>
        /// </remarks>
        public int GetPrevNextGoods(GoodsUnitData goodsUnitData, int readMode, out List<Goods> uiList)
        {
            uiList = new List<Goods>();
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

            try
            {
                // サーバーユーザーデータ
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();

                GoodsUnitDataWork parmWork = new GoodsUnitDataWork();
                parmWork.EnterpriseCode = goodsUnitData.EnterpriseCode;
                parmWork.GoodsMakerCd = goodsUnitData.GoodsMakerCd;
                parmWork.GoodsNo = goodsUnitData.GoodsNo;
                ArrayList goodsList = new ArrayList();
                status = this._iGoodsURelationDataDB.GetPrevNextGoods(parmWork, readMode, out goodsList);
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (goodsList.Count > 0)
                    {
                        // クラスメンバーコピー処理
                        uiList = CopyToGoodsFromGoodsUWork(goodsList);
                    }
                }
            }
            catch
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }
            return status;
        }
        //-------- ADD 田建委 2013/02/08 Redmine#34640 -------<<<<<
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
        # region //  2008/09/04 DEL
        ///// <summary>
        ///// CustomSerializeArrayList →　BLグループコードマスタ(提供)リスト取得
        ///// </summary>
        ///// <param name="workList">取得元リスト</param>
        ///// <param name="uiList">BLグループコードマスタ(提供)オブジェクトリスト</param>
        ///// <returns></returns>
        //private int GetBLGroupWorkToUIdata(CustomSerializeArrayList workList, out List<BLGroupU> uiList)
        //{
        //    int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //    uiList = null;

        //    try
        //    {
        //        //---------------------------------------------------------------------
        //        // ローカルデータ取得(提供分は常にローカル参照)
        //        //---------------------------------------------------------------------
        //        for (int i = 0; i < workList.Count; ++i)
        //        {
        //            if (workList[i] is List<BLGroupWork>)
        //            {
        //                if (uiList == null)
        //                {
        //                    uiList = new List<BLGroupU>();
        //                }
        //                List<BLGroupWork> workList2 = new List<BLGroupWork>();
        //                workList2 = workList[i] as List<BLGroupWork>;
        //                foreach (BLGroupWork work in workList2)
        //                {
        //                    BLGroupU bLGroup = this.CopyToBLGroupFromBLGroupWork(work);
        //                    // クラスメンバーコピー処理
        //                    uiList.Add(bLGroup);
        //                }
        //                status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //        // 例外を発生させる
        //        string message = "BLグループコードマスタ(提供)取得で例外が発生しました[" + ex.Message + "]";
        //        throw new GoodsAcsException(message, -1);
        //    }

        //    return status;
        //}

        ///// <summary>
        ///// CustomSerializeArrayList → 商品中分類(提供)リスト取得
        ///// </summary>
        ///// <param name="workList">取得元リスト</param>
        ///// <param name="uiList">商品中分類マスタ(提供)オブジェクトリスト</param>
        ///// <returns></returns>
        //private int GetGoodsMGroupWorkToUIdata(CustomSerializeArrayList workList, out List<GoodsGroupU> uiList)
        //{
        //    int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //    uiList = null;

        //    try
        //    {
        //        //---------------------------------------------------------------------
        //        // ローカルデータ取得
        //        //---------------------------------------------------------------------
        //        for (int i = 0; i < workList.Count; ++i)
        //        {
        //            if (workList[i] is List<GoodsMGroupWork>)
        //            {
        //                if (uiList == null)
        //                {
        //                    uiList = new List<GoodsGroupU>();
        //                }
        //                List<GoodsMGroupWork> workList2 = new List<GoodsMGroupWork>();
        //                workList2 = workList[i] as List<GoodsMGroupWork>;
        //                foreach (GoodsMGroupWork work in workList2)
        //                {
        //                    GoodsGroupU goodsMGroup = this.CopyToGoodsMGroupFromGoodsMGroupWork(work);
        //                    // クラスメンバーコピー処理
        //                    uiList.Add(goodsMGroup);
        //                }
        //                status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //        // 例外を発生させる
        //        string message = "商品中分類マスタ(提供)取得で例外が発生しました[" + ex.Message + "]";
        //        throw new GoodsAcsException(message, -1);
        //    }

        //    return status;
        //}

        ///// <summary>
        ///// CustomSerializeArrayList → 商品大分類(提供)リスト取得
        ///// </summary>
        ///// <param name="workList">取得元リスト</param>
        ///// <param name="uiList">ユーザーガイド(提供)オブジェクトリスト</param>
        ///// <returns></returns>
        //private int GetGoodsLGroupWorkToUIdata(CustomSerializeArrayList workList, out List<UserGdBdU> uiList)
        //{
        //    int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //    uiList = null;

        //    try
        //    {
        //        //---------------------------------------------------------------------
        //        // ローカルデータ取得(提供分は常にローカル参照)
        //        //---------------------------------------------------------------------
        //        for (int i = 0; i < workList.Count; ++i)
        //        {
        //            if (workList[i] is List<UserGdBdWork>)
        //            {
        //                if (uiList == null)
        //                {
        //                    uiList = new List<UserGdBdU>();
        //                }
        //                List<UserGdBdWork> workList2 = new List<UserGdBdWork>();
        //                workList2 = workList[i] as List<UserGdBdWork>;
        //                foreach (UserGdBdWork work in workList2)
        //                {
        //                    // ガイドコード判定
        //                    if (work.GuideCode == (int)GoodsAcs.emUserGuideCode.GoodsLGroup)
        //                    {
        //                        UserGdBdU userGdBdU = this.CopyToUserGdBdFromUserGdBdWork(work);
        //                        // クラスメンバーコピー処理
        //                        uiList.Add(userGdBdU);
        //                    }
        //                }
        //                status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //        // 例外を発生させる
        //        string message = "商品大分類(提供)取得で例外が発生しました[" + ex.Message + "]";
        //        throw new GoodsAcsException(message, -1);
        //    }

        //    return status;
        //}

        ///// <summary>
        ///// CustomSerializeArrayList → 自社分類(提供)リスト取得
        ///// </summary>
        ///// <param name="workList">取得元リスト</param>
        ///// <param name="uiList">ユーザーガイド(提供)オブジェクトリスト</param>
        ///// <returns></returns>
        //private int GetEnterpriseGanreWorkToUIdata(CustomSerializeArrayList workList, out List<UserGdBdU> uiList)
        //{
        //    int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //    uiList = null;

        //    try
        //    {
        //        //---------------------------------------------------------------------
        //        // ローカルデータ取得(提供分は常にローカル参照)
        //        //---------------------------------------------------------------------
        //        for (int i = 0; i < workList.Count; ++i)
        //        {
        //            if (workList[i] is List<UserGdBdWork>)
        //            {
        //                if (uiList == null)
        //                {
        //                    uiList = new List<UserGdBdU>();
        //                }
        //                List<UserGdBdWork> workList2 = new List<UserGdBdWork>();
        //                workList2 = workList[i] as List<UserGdBdWork>;
        //                foreach (UserGdBdWork work in workList2)
        //                {
        //                    // ガイドコード判定
        //                    if (work.GuideCode == (int)GoodsAcs.emUserGuideCode.EnterpriseGanre)
        //                    {
        //                        UserGdBdU userGdBdU = this.CopyToUserGdBdFromUserGdBdWork(work);
        //                        // クラスメンバーコピー処理
        //                        uiList.Add(userGdBdU);
        //                    }
        //                }
        //                status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //        // 例外を発生させる
        //        string message = "自社分類(提供)取得で例外が発生しました[" + ex.Message + "]";
        //        throw new GoodsAcsException(message, -1);
        //    }

        //    return status;
        //}

        ///// <summary>
        ///// CustomSerializeArrayList → 販売区分(提供)リスト取得
        ///// </summary>
        ///// <param name="workList">取得元リスト</param>
        ///// <param name="uiList">ユーザーガイド(提供)オブジェクトリスト</param>
        ///// <returns></returns>
        //private int GetSalesCodeWorkToUIdata(CustomSerializeArrayList workList, out List<UserGdBdU> uiList)
        //{
        //    int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //    uiList = null;

        //    try
        //    {
        //        //---------------------------------------------------------------------
        //        // ローカルデータ取得(提供分は常にローカル参照)
        //        //---------------------------------------------------------------------
        //        for (int i = 0; i < workList.Count; ++i)
        //        {
        //            if (workList[i] is List<UserGdBdWork>)
        //            {
        //                if (uiList == null)
        //                {
        //                    uiList = new List<UserGdBdU>();
        //                }
        //                List<UserGdBdWork> workList2 = new List<UserGdBdWork>();
        //                workList2 = workList[i] as List<UserGdBdWork>;
        //                foreach (UserGdBdWork work in workList2)
        //                {
        //                    // ガイドコード判定
        //                    if (work.GuideCode == (int)GoodsAcs.emUserGuideCode.SalesCode)
        //                    {
        //                        UserGdBdU userGdBdU = this.CopyToUserGdBdFromUserGdBdWork(work);
        //                        // クラスメンバーコピー処理
        //                        uiList.Add(userGdBdU);
        //                    }
        //                }
        //                status = (uiList.Count != 0) ? (int)ConstantManagement.DB_Status.ctDB_NORMAL : (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //        // 例外を発生させる
        //        string message = "販売区分(提供)取得で例外が発生しました[" + ex.Message + "]";
        //        throw new GoodsAcsException(message, -1);
        //    }

        //    return status;
        //}

        ///// <summary>
        ///// 商品リスト　→　CustomSerializeArrayList
        ///// </summary>
        ///// <param name="csArrayList"></param>
        ///// <param name="uiList"></param>
        ///// <returns></returns>
        //private int SetGoodsUWorkFromUIdata(ref CustomSerializeArrayList csArrayList, ArrayList uiList)
        //{
        //    int status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;

        //    try
        //    {
        //        if (uiList == null || uiList.Count == 0) return status;

        //        foreach (ArrayList arList in uiList)
        //        {
        //            if (arList != null && arList.Count > 0)
        //            {
        //                if (arList[0] is Goods)
        //                {
        //                    ArrayList workList = null;

        //                    // クラスメンバーコピー処理
        //                    workList = this.CopyToGoodsUWorkFromGoods(arList);

        //                    if (workList != null)
        //                    {
        //                        status = (workList.Count != 0) ? (int)ConstantManagement.MethodResult.ctFNC_NORMAL : (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
        //                    }
        //                    else
        //                    {
        //                        status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN; 
        //                    }

        //                    // カスタムシリアライズArrayLisに追加
        //                    if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
        //                        csArrayList.Add(workList);
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
        //        // 例外を発生させる
        //        string message = "商品ワーククラスの設定で例外が発生しました[" + ex.Message + "]";
        //        throw new GoodsAcsException(message, -1);
        //    }

        //    return status;
        //}
        # endregion
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

        #region < 商品連結データ >
        /// <summary>
        /// 商品連結データコピー処理
        /// </summary>
        /// <param name="source">コピー元</param>
        /// <param name="target">設定対象</param>
        private void CopyGoodUnitData(GoodsUnitData source, ref GoodsUnitData target)
        {
            #region セット項目
            target.CreateDateTime = source.CreateDateTime; // 作成日時
            target.UpdateDateTime = source.UpdateDateTime; // 更新日時
            target.EnterpriseCode = source.EnterpriseCode; // 企業コード
            target.FileHeaderGuid = source.FileHeaderGuid; // GUID
            target.UpdEmployeeCode = source.UpdEmployeeCode; // 更新従業員コード
            target.UpdAssemblyId1 = source.UpdAssemblyId1; // 更新アセンブリID1
            target.UpdAssemblyId2 = source.UpdAssemblyId2; // 更新アセンブリID2
            target.LogicalDeleteCode = source.LogicalDeleteCode; // 論理削除区分
            target.GoodsMakerCd = source.GoodsMakerCd; // 商品メーカーコード
            target.MakerName = source.MakerName; // メーカー名称
            target.MakerShortName = source.MakerShortName; // メーカー略称
            target.MakerKanaName = source.MakerKanaName; // メーカーカナ名称
            target.GoodsNo = source.GoodsNo; // 商品番号
            target.GoodsName = source.GoodsName; // 商品名称
            target.GoodsNameKana = source.GoodsNameKana; // 商品名称カナ
            target.Jan = source.Jan; // JANコード
            target.BLGoodsCode = source.BLGoodsCode; // BL商品コード
            target.BLGoodsFullName = source.BLGoodsFullName; // BL商品コード名称（全角）
            target.DisplayOrder = source.DisplayOrder; // 表示順位
            target.GoodsLGroup = source.GoodsLGroup; // 商品大分類コード
            target.GoodsLGroupName = source.GoodsLGroupName; // 商品大分類名称
            target.GoodsMGroup = source.GoodsMGroup; // 商品中分類コード
            target.GoodsMGroupName = source.GoodsMGroupName; // 商品中分類名称
            target.BLGroupCode = source.BLGroupCode; // BLグループコード
            target.BLGroupName = source.BLGroupName; // BLグループコード名称
            target.GoodsRateRank = source.GoodsRateRank; // 商品掛率ランク
            target.TaxationDivCd = source.TaxationDivCd; // 課税区分
            target.GoodsNoNoneHyphen = source.GoodsNoNoneHyphen; // ハイフン無商品番号
            target.OfferDate = source.OfferDate; // 提供日付
            target.GoodsKindCode = source.GoodsKindCode; // 商品属性
            target.GoodsNote1 = source.GoodsNote1; // 商品備考１
            target.GoodsNote2 = source.GoodsNote2; // 商品備考２
            target.GoodsSpecialNote = source.GoodsSpecialNote; // 商品規格・特記事項
            target.EnterpriseGanreCode = source.EnterpriseGanreCode; // 自社分類コード
            target.EnterpriseGanreName = source.EnterpriseGanreName; // 自社分類名称
            target.UpdateDate = source.UpdateDate; // 更新年月日
            target.GoodsRateGrpCode = source.GoodsRateGrpCode; // 商品掛率グループコード
            target.SalesCode = source.SalesCode; // 販売区分コード
            target.SupplierCd = source.SupplierCd; // 仕入先コード
            target.SupplierNm1 = source.SupplierNm1; // 仕入先名1
            target.SupplierNm2 = source.SupplierNm2; // 仕入先名2
            target.SuppHonorificTitle = source.SuppHonorificTitle; // 仕入先敬称
            target.SupplierKana = source.SupplierKana; // 仕入先カナ
            target.SupplierSnm = source.SupplierSnm; // 仕入先略称
            target.SupplierLot = source.SupplierLot; // 発注ロット
            target.SecretCode = source.SecretCode; // シークレット区分
            target.PrimePartsDisplayOrder = source.PrimePartsDisplayOrder; // 表示順位
            target.PrmSetDtlNo1 = source.PrmSetDtlNo1; // 優良設定詳細コード１
            target.PrmSetDtlName1 = source.PrmSetDtlName1; // 優良設定詳細名称１
            target.PrmSetDtlNo2 = source.PrmSetDtlNo2; // 優良設定詳細コード２
            target.PrmSetDtlName2 = source.PrmSetDtlName2; // 優良設定詳細名称２
            target.SectionCode = source.SectionCode; // 拠点コード
            target.OfferKubun = source.OfferKubun; // 提供区分
            target.GoodsKind = source.GoodsKind; // 商品種別
            target.JoinDispOrder = source.JoinDispOrder; // 結合表示順位
            target.JoinQty = source.JoinQty; // 結合QTY
            target.JoinSpecialNote = source.JoinSpecialNote; // 結合規格・特記事項
            target.SetDispOrder = source.SetDispOrder; // セット表示順位
            target.SetQty = source.SetQty; // セットQTY
            target.SetSpecialNote = source.SetSpecialNote; // セット規格・特記事項
            target.PartsQty = source.PartsQty; // 部品QTY
            target.GoodsPriceList = source.GoodsPriceList; // 価格情報
            target.StockList = source.StockList; // 在庫情報
            // -------- ADD START 2014/02/10 高陽 -------->>>>>
            target.OptKonmanGoodsMstCtl = source.OptKonmanGoodsMstCtl; // 商品マスタ表示用オプション
            target.Standard = source.Standard; // 規格
            target.Packing = source.Packing; // 荷姿
            target.PosNo = source.PosNo; // ＰＯＳNo.
            target.MakerGoodsNo = source.MakerGoodsNo; // メーカー品番
            target.CreateDateTimeA = source.CreateDateTimeA; // 作成日時Ⅱ
            target.UpdateDateTimeA = source.UpdateDateTimeA; // 更新日時Ⅱ
            target.FileHeaderGuidA = source.FileHeaderGuidA; // GUIDⅡ
            // -------- ADD END 2014/02/10 高陽 --------<<<<<
            #endregion
        }

        /// <summary>
        /// クラスメンバーコピー処理（商品連結データワークリスト⇒商品連結データクラスリスト(ArrayList)）
        /// </summary>
        /// <param name="goodsUnitDataWorkList">商品連結データワークリスト</param>
        /// <returns>商品連結データクラスリスト</returns>
        private List<GoodsUnitData> CopyToGoodsUnitDataFromGoodsUnitDataWork(ArrayList goodsUnitDataWorkList)
        {
            // 商品連結データクラスリスト
            List<GoodsUnitData> goodsUnitDataList = null;

            if (goodsUnitDataWorkList != null)
            {
                goodsUnitDataList = new List<GoodsUnitData>();

                foreach (GoodsUnitDataWork wrk in goodsUnitDataWorkList)
                {
                    GoodsUnitData goodsUnitData = new GoodsUnitData();

                    // 商品連結データ取得
                    goodsUnitData = this.CopyToGoodsUnitDataFromGoodsUnitDataWork(wrk);
                    goodsUnitDataList.Add(goodsUnitData);
                }
            }
            return goodsUnitDataList;
        }

        /// <summary>
        /// クラスメンバーコピー処理（商品連結データワークリスト⇒商品連結データクラスリスト(ArrayList)）
        /// </summary>
        /// <param name="goodsUnitDataList">商品連結データリスト</param>
        /// <param name="goodsUnitDataWorkList">商品連結データワークリスト</param>
        private void CopyToGoodsUnitDataFromGoodsUnitDataWork(out ArrayList goodsUnitDataList, ArrayList goodsUnitDataWorkList)
        {
            // 商品連結データクラスリスト
            goodsUnitDataList = null;

            if (goodsUnitDataWorkList != null)
            {
                goodsUnitDataList = new ArrayList();

                foreach (GoodsUnitDataWork wrk in goodsUnitDataWorkList)
                {
                    GoodsUnitData goodsUnitData = new GoodsUnitData();

                    // 商品連結データ取得
                    goodsUnitData = this.CopyToGoodsUnitDataFromGoodsUnitDataWork(wrk);
                    goodsUnitDataList.Add(goodsUnitData);
                }
            }
        }

        /// <summary>
        /// クラスメンバーコピー処理（商品連結データワーククラス⇒商品連結データクラス）
        /// </summary>
        /// <param name="goodsUnitDataWork">商品連結データワーククラス</param>
        /// <returns>商品連結データクラス</returns>
        private GoodsUnitData CopyToGoodsUnitDataFromGoodsUnitDataWork(GoodsUnitDataWork goodsUnitDataWork)
        {
            GoodsUnitData goodsUnitData = null;

            if (goodsUnitDataWork != null)
            {
                goodsUnitData = new GoodsUnitData();

                //----------------------------------------------------------------------------
                // 商品情報
                //----------------------------------------------------------------------------
                goodsUnitData.CreateDateTime = goodsUnitDataWork.CreateDateTime; // 作成日時
                goodsUnitData.UpdateDateTime = goodsUnitDataWork.UpdateDateTime; // 更新日時
                goodsUnitData.EnterpriseCode = goodsUnitDataWork.EnterpriseCode; // 企業コード
                goodsUnitData.FileHeaderGuid = goodsUnitDataWork.FileHeaderGuid; // GUID
                goodsUnitData.UpdEmployeeCode = goodsUnitDataWork.UpdEmployeeCode; // 更新従業員コード
                goodsUnitData.UpdAssemblyId1 = goodsUnitDataWork.UpdAssemblyId1; // 更新アセンブリID1
                goodsUnitData.UpdAssemblyId2 = goodsUnitDataWork.UpdAssemblyId2; // 更新アセンブリID2
                goodsUnitData.LogicalDeleteCode = goodsUnitDataWork.LogicalDeleteCode; // 論理削除区分
                goodsUnitData.GoodsMakerCd = goodsUnitDataWork.GoodsMakerCd; // 商品メーカーコード
                goodsUnitData.GoodsNo = goodsUnitDataWork.GoodsNo; // 商品番号
                goodsUnitData.GoodsName = goodsUnitDataWork.GoodsName; // 商品名称
                goodsUnitData.GoodsNameKana = goodsUnitDataWork.GoodsNameKana; // 商品名称カナ
                goodsUnitData.Jan = goodsUnitDataWork.Jan; // JANコード
                goodsUnitData.BLGoodsCode = goodsUnitDataWork.BLGoodsCode; // BL商品コード
                goodsUnitData.DisplayOrder = goodsUnitDataWork.DisplayOrder; // 表示順位
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/03 DEL
                //goodsUnitData.GoodsRateRank = goodsUnitDataWork.GoodsRateRank; // 商品掛率ランク
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/03 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/03 ADD
                goodsUnitData.GoodsRateRank = goodsUnitDataWork.GoodsRateRank.TrimEnd(); // 商品掛率ランク
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/03 ADD
                goodsUnitData.TaxationDivCd = goodsUnitDataWork.TaxationDivCd; // 課税区分
                goodsUnitData.GoodsNoNoneHyphen = goodsUnitDataWork.GoodsNoNoneHyphen; // ハイフン無商品番号
                goodsUnitData.GoodsKindCode = goodsUnitDataWork.GoodsKindCode; // 商品属性
                goodsUnitData.GoodsNote1 = goodsUnitDataWork.GoodsNote1; // 商品備考１
                goodsUnitData.GoodsNote2 = goodsUnitDataWork.GoodsNote2; // 商品備考２
                goodsUnitData.GoodsSpecialNote = goodsUnitDataWork.GoodsSpecialNote; // 商品規格・特記事項
                goodsUnitData.EnterpriseGanreCode = goodsUnitDataWork.EnterpriseGanreCode; // 自社分類コード
                goodsUnitData.UpdateDate = goodsUnitDataWork.UpdateDate; // 更新年月日
                goodsUnitData.OfferKubun = 0; // 提供区分(0:ユーザー登録,1:提供純正編集,2:提供優良編集,3:提供純正,4:提供優良)
                goodsUnitData.GoodsKind = 0; // 商品種別(0:親 1:結合子 2:セット子 3:代替 4:代替互換)
                goodsUnitData.DisplayOrder = 0; // 表示順位
                goodsUnitData.JoinDispOrder = 0;
                goodsUnitData.JoinQty = 0;
                goodsUnitData.JoinSpecialNote = string.Empty;
                goodsUnitData.SetDispOrder = 0;
                goodsUnitData.SetQty = 0;
                goodsUnitData.SetSpecialNote = string.Empty;
                goodsUnitData.PartsQty = 0;
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/10 ADD
                goodsUnitData.OfferDataDiv = goodsUnitDataWork.OfferDataDiv; // 提供データ区分(0:ユーザー,1:提供)
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/10 ADD
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/11/04 ADD
                goodsUnitData.OfferDate = goodsUnitDataWork.OfferDate; // 提供日
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/11/04 ADD
                // -------- ADD START 2014/02/10 高陽 -------->>>>>
                goodsUnitData.OptKonmanGoodsMstCtl = goodsUnitDataWork.OptKonmanGoodsMstCtl; // 商品マスタ表示用オプション
                goodsUnitData.Standard = goodsUnitDataWork.Standard; // 規格
                goodsUnitData.Packing = goodsUnitDataWork.Packing; // 荷姿
                goodsUnitData.PosNo = goodsUnitDataWork.PosNo; // ＰＯＳNo.
                goodsUnitData.MakerGoodsNo = goodsUnitDataWork.MakerGoodsNo; // メーカー品番
                goodsUnitData.CreateDateTimeA = goodsUnitDataWork.CreateDateTimeA; // 作成日時Ⅱ
                goodsUnitData.UpdateDateTimeA = goodsUnitDataWork.UpdateDateTimeA; // 更新日時Ⅱ
                goodsUnitData.FileHeaderGuidA = goodsUnitDataWork.FileHeaderGuidA; // GUIDⅡ
                // -------- ADD END 2014/02/10 高陽 --------<<<<<

                //----------------------------------------------------------------------------
                // 価格情報
                //----------------------------------------------------------------------------
                List<GoodsPrice> goodsPriceList;
                this.GetGoodsPriceListFromGoodsPriceUWorkList(goodsUnitDataWork.PriceList, out goodsPriceList);
                goodsUnitData.GoodsPriceList = goodsPriceList;

                //----------------------------------------------------------------------------
                // 在庫情報
                //----------------------------------------------------------------------------
                List<Stock> stockList;
                this.GetStockListFromStockWorkList(goodsUnitDataWork.StockList, out stockList);
                goodsUnitData.StockList = stockList;
            }

            return goodsUnitData;
        }

        /// <summary>
        /// クラスメンバーコピー処理（商品連結データクラスリスト⇒商品連結データワーククラスリスト）
        /// </summary>
        /// <param name="workList">商品連結データワーククラスリスト</param>
        /// <param name="goodsUnitDataList">商品連結データクラスリスト</param>
        private void CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref ArrayList workList, List<GoodsUnitData> goodsUnitDataList)
        {
            foreach (GoodsUnitData goodsunitdata in goodsUnitDataList)
            {
                this.CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref workList, goodsunitdata);
            }
        }

        /// <summary>
        /// クラスメンバーコピー処理（商品連結データクラスリスト⇒商品連結データワーククラスリスト）
        /// </summary>
        /// <param name="workList">商品連結データワーククラスリスト</param>
        /// <param name="goodsUnitDataList">商品連結データクラスリスト</param>
        private void CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref ArrayList workList, ArrayList goodsUnitDataList)
        {
            foreach (object obj in goodsUnitDataList)
            {
                if (obj is GoodsUnitData)
                {
                    GoodsUnitData goodsUnitData = (GoodsUnitData)obj;
                    this.CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref workList, goodsUnitData);
                }
            }
        }

        /// <summary>
        /// クラスメンバーコピー処理（商品連結データクラス⇒商品連結データワーククラスリスト）
        /// </summary>
        /// <param name="workList">商品連結データワークオブジェクトリスト</param>
        /// <param name="goodsUnitData">商品連結データオブジェクトリスト</param>
        private void CopyToGoodsUnitDataWorkListFromGoodsUnitData(ref ArrayList workList, GoodsUnitData goodsUnitData)
        {
            ArrayList goodsUnitDataWorkList = new ArrayList();

            if (goodsUnitData != null)
            {
                GoodsUnitDataWork goodsUnitDataWork = new GoodsUnitDataWork();

                #region 商品情報
                //----------------------------------------------------------------------------
                // 商品情報
                //----------------------------------------------------------------------------
                goodsUnitDataWork.CreateDateTime = goodsUnitData.CreateDateTime; // 作成日時
                goodsUnitDataWork.UpdateDateTime = goodsUnitData.UpdateDateTime; // 更新日時
                goodsUnitDataWork.EnterpriseCode = goodsUnitData.EnterpriseCode; // 企業コード
                goodsUnitDataWork.FileHeaderGuid = goodsUnitData.FileHeaderGuid; // GUID
                goodsUnitDataWork.UpdEmployeeCode = goodsUnitData.UpdEmployeeCode; // 更新従業員コード
                goodsUnitDataWork.UpdAssemblyId1 = goodsUnitData.UpdAssemblyId1; // 更新アセンブリID1
                goodsUnitDataWork.UpdAssemblyId2 = goodsUnitData.UpdAssemblyId2; // 更新アセンブリID2
                goodsUnitDataWork.LogicalDeleteCode = goodsUnitData.LogicalDeleteCode; // 論理削除区分
                goodsUnitDataWork.GoodsMakerCd = goodsUnitData.GoodsMakerCd; // 商品メーカーコード
                //goodsUnitDataWork.MakerName = goodsUnitData.MakerName; // メーカー名称
                //goodsUnitDataWork.MakerShortName = goodsUnitData.MakerShortName; // メーカー略称
                //goodsUnitDataWork.MakerKanaName = goodsUnitData.MakerKanaName; // メーカーカナ名称
                goodsUnitDataWork.GoodsNo = goodsUnitData.GoodsNo; // 商品番号
                goodsUnitDataWork.GoodsName = goodsUnitData.GoodsName; // 商品名称
                goodsUnitDataWork.GoodsNameKana = goodsUnitData.GoodsNameKana; // 商品名称カナ
                goodsUnitDataWork.Jan = goodsUnitData.Jan; // JANコード
                goodsUnitDataWork.BLGoodsCode = goodsUnitData.BLGoodsCode; // BL商品コード
                //goodsUnitDataWork.BLGoodsFullName = goodsUnitData.BLGoodsFullName; // BL商品コード名称（全角）
                goodsUnitDataWork.DisplayOrder = goodsUnitData.DisplayOrder; // 表示順位
                //goodsUnitDataWork.GoodsLGroup = goodsUnitData.GoodsLGroup; // 商品大分類コード
                //goodsUnitDataWork.GoodsLGroupName = goodsUnitData.GoodsLGroupName; // 商品大分類名称
                //goodsUnitDataWork.GoodsMGroup = goodsUnitData.GoodsMGroup; // 商品中分類コード
                //goodsUnitDataWork.GoodsMGroupName = goodsUnitData.GoodsMGroupName; // 商品中分類名称
                //goodsUnitDataWork.BLGroupCode = goodsUnitData.BLGroupCode; // BLグループコード
                //goodsUnitDataWork.BLGroupName = goodsUnitData.BLGroupName; // BLグループコード名称
                goodsUnitDataWork.GoodsRateRank = goodsUnitData.GoodsRateRank; // 商品掛率ランク
                goodsUnitDataWork.TaxationDivCd = goodsUnitData.TaxationDivCd; // 課税区分
                goodsUnitDataWork.GoodsNoNoneHyphen = goodsUnitData.GoodsNoNoneHyphen; // ハイフン無商品番号
                goodsUnitDataWork.OfferDate = goodsUnitData.OfferDate; // 提供日付
                goodsUnitDataWork.GoodsKindCode = goodsUnitData.GoodsKindCode; // 商品属性
                goodsUnitDataWork.GoodsNote1 = goodsUnitData.GoodsNote1; // 商品備考１
                goodsUnitDataWork.GoodsNote2 = goodsUnitData.GoodsNote2; // 商品備考２
                goodsUnitDataWork.GoodsSpecialNote = goodsUnitData.GoodsSpecialNote; // 商品規格・特記事項
                goodsUnitDataWork.EnterpriseGanreCode = goodsUnitData.EnterpriseGanreCode; // 自社分類コード
                //goodsUnitDataWork.EnterpriseGanreName = goodsUnitData.EnterpriseGanreName; // 自社分類名称
                goodsUnitDataWork.UpdateDate = goodsUnitData.UpdateDate; // 更新年月日
                //goodsUnitDataWork.GoodsRateGrpCode = goodsUnitData.GoodsRateGrpCode; // 商品掛率グループコード
                //goodsUnitDataWork.SalesCode = goodsUnitData.SalesCode; // 販売区分コード
                //goodsUnitDataWork.SupplierCd = goodsUnitData.SupplierCd; // 仕入先コード
                //goodsUnitDataWork.SupplierNm1 = goodsUnitData.SupplierNm1; // 仕入先名1
                //goodsUnitDataWork.SupplierNm2 = goodsUnitData.SupplierNm2; // 仕入先名2
                //goodsUnitDataWork.SuppHonorificTitle = goodsUnitData.SuppHonorificTitle; // 仕入先敬称
                //goodsUnitDataWork.SupplierKana = goodsUnitData.SupplierKana; // 仕入先カナ
                //goodsUnitDataWork.SupplierSnm = goodsUnitData.SupplierSnm; // 仕入先略称
                //goodsUnitDataWork.SupplierLot = goodsUnitData.SupplierLot; // 発注ロット
                //goodsUnitDataWork.SecretCode = goodsUnitData.SecretCode; // シークレット区分
                //goodsUnitDataWork.PrimePartsDisplayOrder = goodsUnitData.PrimePartsDisplayOrder; // 表示順位
                //goodsUnitDataWork.PrmSetDtlNo1 = goodsUnitData.PrmSetDtlNo1; // 優良設定詳細コード１
                //goodsUnitDataWork.PrmSetDtlName1 = goodsUnitData.PrmSetDtlName1; // 優良設定詳細名称１
                //goodsUnitDataWork.PrmSetDtlNo2 = goodsUnitData.PrmSetDtlNo2; // 優良設定詳細コード２
                //goodsUnitDataWork.PrmSetDtlName2 = goodsUnitData.PrmSetDtlName2; // 優良設定詳細名称２
                //goodsUnitDataWork.SectionCode = goodsUnitData.SectionCode; // 拠点コード
                //goodsUnitDataWork.GoodsPriceList = goodsUnitData.GoodsPriceList; // 価格情報
                //goodsUnitDataWork.StockList = goodsUnitData.StockList; // 在庫情報
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/10/10 ADD
                goodsUnitDataWork.OfferDataDiv = goodsUnitData.OfferDataDiv; // 提供データ区分
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/10/10 ADD
                // -------- ADD START 2014/02/10 高陽 -------->>>>>
                goodsUnitDataWork.OptKonmanGoodsMstCtl = goodsUnitData.OptKonmanGoodsMstCtl; // 商品マスタ表示用オプション
                goodsUnitDataWork.Standard = goodsUnitData.Standard; // 規格
                goodsUnitDataWork.Packing = goodsUnitData.Packing; // 荷姿
                goodsUnitDataWork.PosNo = goodsUnitData.PosNo; // ＰＯＳNo.
                goodsUnitDataWork.MakerGoodsNo = goodsUnitData.MakerGoodsNo; // メーカー品番
                goodsUnitDataWork.CreateDateTimeA = goodsUnitData.CreateDateTimeA; // 作成日時Ⅱ
                goodsUnitDataWork.UpdateDateTimeA = goodsUnitData.UpdateDateTimeA; // 更新日時Ⅱ
                goodsUnitDataWork.FileHeaderGuidA = goodsUnitData.FileHeaderGuidA; // GUIDⅡ
                // -------- ADD END 2014/02/10 高陽 --------<<<<<
                # endregion

                #region 価格情報
                //----------------------------------------------------------------------------
                // 価格情報
                //----------------------------------------------------------------------------
                this.SettingKeyValue(goodsUnitData.GoodsPriceList, goodsUnitData.GoodsMakerCd, goodsUnitData.GoodsNo);
                ArrayList goodsPriceWorkList;
                this.GetGoodsPriceUWorkListFromGoodsPriceList(goodsUnitData.GoodsPriceList, out goodsPriceWorkList);
                goodsUnitDataWork.PriceList = goodsPriceWorkList;
                #endregion

                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/10 ADD
                # region 在庫情報
                //----------------------------------------------------------------------------
                // 在庫情報
                //----------------------------------------------------------------------------
                this.SettingKeyValue(goodsUnitData.StockList, goodsUnitData.GoodsMakerCd, goodsUnitData.GoodsNo);
                ArrayList stockWorkList;
                this.GetStockWorkListFromStockList(goodsUnitData.StockList, out stockWorkList);
                goodsUnitDataWork.StockList = stockWorkList;
                # endregion

                // 商品削除対応
                if ( goodsUnitData.LogicalDeleteCode == 1 )
                {
                    // 価格
                    foreach ( GoodsPriceUWork priceWork in goodsUnitDataWork.PriceList )
                    {
                        priceWork.LogicalDeleteCode = 1;
                    }
                    // 在庫
                    foreach ( StockWork stockWork in goodsUnitDataWork.StockList )
                    {
                        stockWork.LogicalDeleteCode = 1;
                    }
                }
                else if ( goodsUnitData.LogicalDeleteCode == 3 )
                {
                    // 在庫
                    foreach ( StockWork stockWork in goodsUnitDataWork.StockList )
                    {
                        stockWork.LogicalDeleteCode = 3;
                    }
                }
                else if ( goodsUnitData.LogicalDeleteCode == 0 )
                {
                    // 価格は商品復旧時に同時に復旧させる
                    foreach ( GoodsPriceUWork priceWork in goodsUnitDataWork.PriceList )
                    {
                        priceWork.LogicalDeleteCode = 0;
                    }
                    // 在庫は商品復旧しても復旧しない
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/10 ADD
                workList.Add(goodsUnitDataWork);
            }
        }
        #endregion

        #region < 結合データ >
        /// <summary>
        /// クラスメンバーコピー処理（結合マスタオブジェクトリスト⇒結合マスタワークオブジェクトリスト）
        /// </summary>
        /// <param name="joinPartsUWorkList">結合マスタワークオブジェクトリスト</param>
        /// <param name="joinPartsUList">結合マスタオブジェクトリスト</param>
        private void CopyToJoinPartsUWorkFromJoinPartsU(ref ArrayList joinPartsUWorkList, ArrayList joinPartsUList)
        {
            if ((joinPartsUList != null) && (joinPartsUList.Count != 0))
            {
                foreach (JoinPartsU joinPartsU in joinPartsUList)
                {
                    JoinPartsUWork joinPartsUWork = new JoinPartsUWork();

                    joinPartsUWork.CreateDateTime = joinPartsU.CreateDateTime; // 作成日時
                    joinPartsUWork.UpdateDateTime = joinPartsU.UpdateDateTime; // 更新日時
                    joinPartsUWork.EnterpriseCode = joinPartsU.EnterpriseCode; // 企業コード
                    joinPartsUWork.FileHeaderGuid = joinPartsU.FileHeaderGuid; // GUID
                    joinPartsUWork.UpdEmployeeCode = joinPartsU.UpdEmployeeCode; // 更新従業員コード
                    joinPartsUWork.UpdAssemblyId1 = joinPartsU.UpdAssemblyId1; // 更新アセンブリID1
                    joinPartsUWork.UpdAssemblyId2 = joinPartsU.UpdAssemblyId2; // 更新アセンブリID2
                    joinPartsUWork.LogicalDeleteCode = joinPartsU.LogicalDeleteCode; // 論理削除区分
                    joinPartsUWork.JoinDispOrder = joinPartsU.JoinDispOrder; // 結合表示順位
                    joinPartsUWork.JoinSourceMakerCode = joinPartsU.JoinSourceMakerCode; // 結合元メーカーコード
                    joinPartsUWork.JoinSourPartsNoWithH = joinPartsU.JoinSourPartsNoWithH; // 結合元品番(－付き品番)
                    joinPartsUWork.JoinSourPartsNoNoneH = joinPartsU.JoinSourPartsNoNoneH; // 結合元品番(－無し品番)
                    joinPartsUWork.JoinDestMakerCd = joinPartsU.JoinDestMakerCd; // 結合先メーカーコード
                    joinPartsUWork.JoinDestPartsNo = joinPartsU.JoinDestPartsNo; // 結合先品番(－付き品番)
                    joinPartsUWork.JoinQty = joinPartsU.JoinQty; // 結合QTY
                    joinPartsUWork.JoinSpecialNote = joinPartsU.JoinSpecialNote; // 結合規格・特記事項

                    joinPartsUWorkList.Add(joinPartsUWork);
                }
            }
        }

        /// <summary>
        /// クラスメンバーコピー処理（結合マスタワークオブジェクトリスト⇒結合マスタオブジェクトリスト）
        /// </summary>
        /// <param name="joinPartsUList">結合マスタオブジェクトリスト</param>
        /// <param name="joinPartsUWorkList">結合マスタワークオブジェクトリスト</param>
        private void CopyToJoinPartsUFromJoinPartsUWork(ref ArrayList joinPartsUList, ArrayList joinPartsUWorkList)
        {
            if ((joinPartsUWorkList != null) && (joinPartsUWorkList.Count != 0))
            {
                foreach (JoinPartsUWork joinPartsUWork in joinPartsUWorkList)
                {
                    JoinPartsU joinPartsU = new JoinPartsU();

                    joinPartsU.CreateDateTime = joinPartsUWork.CreateDateTime; // 作成日時
                    joinPartsU.UpdateDateTime = joinPartsUWork.UpdateDateTime; // 更新日時
                    joinPartsU.EnterpriseCode = joinPartsUWork.EnterpriseCode; // 企業コード
                    joinPartsU.FileHeaderGuid = joinPartsUWork.FileHeaderGuid; // GUID
                    joinPartsU.UpdEmployeeCode = joinPartsUWork.UpdEmployeeCode; // 更新従業員コード
                    joinPartsU.UpdAssemblyId1 = joinPartsUWork.UpdAssemblyId1; // 更新アセンブリID1
                    joinPartsU.UpdAssemblyId2 = joinPartsUWork.UpdAssemblyId2; // 更新アセンブリID2
                    joinPartsU.LogicalDeleteCode = joinPartsUWork.LogicalDeleteCode; // 論理削除区分
                    joinPartsU.JoinDispOrder = joinPartsUWork.JoinDispOrder; // 結合表示順位
                    joinPartsU.JoinSourceMakerCode = joinPartsUWork.JoinSourceMakerCode; // 結合元メーカーコード
                    joinPartsU.JoinSourPartsNoWithH = joinPartsUWork.JoinSourPartsNoWithH; // 結合元品番(－付き品番)
                    joinPartsU.JoinSourPartsNoNoneH = joinPartsUWork.JoinSourPartsNoNoneH; // 結合元品番(－無し品番)
                    joinPartsU.JoinDestMakerCd = joinPartsUWork.JoinDestMakerCd; // 結合先メーカーコード
                    joinPartsU.JoinDestPartsNo = joinPartsUWork.JoinDestPartsNo; // 結合先品番(－付き品番)
                    joinPartsU.JoinQty = joinPartsUWork.JoinQty; // 結合QTY
                    joinPartsU.JoinSpecialNote = joinPartsUWork.JoinSpecialNote; // 結合規格・特記事項

                    joinPartsUList.Add(joinPartsU);
                }
            }
        }
        #endregion

        #region < セットマスタ >
        /// <summary>
        /// クラスメンバーコピー処理（セットマスタオブジェクトリスト⇒セットマスタワークオブジェクトリスト）
        /// </summary>
        /// <param name="goodsSetWorkList"></param>
        /// <param name="goodsSetList"></param>
        private void CopyToGoodsSetWorkFromGoodsSet(ref ArrayList goodsSetWorkList, ArrayList goodsSetList)
        {
            if ((goodsSetList != null) && (goodsSetList.Count != 0))
            {
                foreach (GoodsSet goodsSet in goodsSetList)
                {
                    GoodsSetWork goodsSetWork = new GoodsSetWork();

                    goodsSetWork.CreateDateTime = goodsSet.CreateDateTime; // 作成日時
                    goodsSetWork.UpdateDateTime = goodsSet.UpdateDateTime; // 更新日時
                    goodsSetWork.EnterpriseCode = goodsSet.EnterpriseCode; // 企業コード
                    goodsSetWork.FileHeaderGuid = goodsSet.FileHeaderGuid; // GUID
                    goodsSetWork.UpdEmployeeCode = goodsSet.UpdEmployeeCode; // 更新従業員コード
                    goodsSetWork.UpdAssemblyId1 = goodsSet.UpdAssemblyId1; // 更新アセンブリID1
                    goodsSetWork.UpdAssemblyId2 = goodsSet.UpdAssemblyId2; // 更新アセンブリID2
                    goodsSetWork.LogicalDeleteCode = goodsSet.LogicalDeleteCode; // 論理削除区分
                    goodsSetWork.ParentGoodsMakerCd = goodsSet.ParentGoodsMakerCd; // 親メーカーコード
                    goodsSetWork.ParentGoodsNo = goodsSet.ParentGoodsNo; // 親商品番号
                    goodsSetWork.SubGoodsMakerCd = goodsSet.SubGoodsMakerCd; // 子商品メーカーコード
                    goodsSetWork.SubGoodsNo = goodsSet.SubGoodsNo; // 子商品番号
                    goodsSetWork.CntFl = goodsSet.CntFl; // 数量（浮動）
                    goodsSetWork.DisplayOrder = goodsSet.DisplayOrder; // 表示順位
                    goodsSetWork.SetSpecialNote = goodsSet.SetSpecialNote; // セット規格・特記事項
                    goodsSetWork.CatalogShapeNo = goodsSet.CatalogShapeNo; // カタログ図番

                    goodsSetWorkList.Add(goodsSetWork);
                }
            }
        }

        /// <summary>
        /// クラスメンバーコピー処理（セットマスタオワークブジェクトリスト⇒セットマスタオブジェクトリスト）
        /// </summary>
        /// <param name="goodsSetList">セットマスタオブジェクトリスト</param>
        /// <param name="goodsSetWorkList">セットマスタワークオブジェクトリスト</param>
        private void CopyToGoodsSetFromGoodsSetWork(ref ArrayList goodsSetList, ArrayList goodsSetWorkList)
        {

            if ((goodsSetWorkList != null) && (goodsSetWorkList.Count != 0))
            {
                foreach (GoodsSetWork goodsSetWork in goodsSetWorkList)
                {
                    GoodsSet goodsSet = new GoodsSet();

                    goodsSet.CreateDateTime = goodsSetWork.CreateDateTime; // 作成日時
                    goodsSet.UpdateDateTime = goodsSetWork.UpdateDateTime; // 更新日時
                    goodsSet.EnterpriseCode = goodsSetWork.EnterpriseCode; // 企業コード
                    goodsSet.FileHeaderGuid = goodsSetWork.FileHeaderGuid; // GUID
                    goodsSet.UpdEmployeeCode = goodsSetWork.UpdEmployeeCode; // 更新従業員コード
                    goodsSet.UpdAssemblyId1 = goodsSetWork.UpdAssemblyId1; // 更新アセンブリID1
                    goodsSet.UpdAssemblyId2 = goodsSetWork.UpdAssemblyId2; // 更新アセンブリID2
                    goodsSet.LogicalDeleteCode = goodsSetWork.LogicalDeleteCode; // 論理削除区分
                    goodsSet.ParentGoodsMakerCd = goodsSetWork.ParentGoodsMakerCd; // 親メーカーコード
                    goodsSet.ParentGoodsNo = goodsSetWork.ParentGoodsNo; // 親商品番号
                    goodsSet.SubGoodsMakerCd = goodsSetWork.SubGoodsMakerCd; // 子商品メーカーコード
                    goodsSet.SubGoodsNo = goodsSetWork.SubGoodsNo; // 子商品番号
                    goodsSet.CntFl = goodsSetWork.CntFl; // 数量（浮動）
                    goodsSet.DisplayOrder = goodsSetWork.DisplayOrder; // 表示順位
                    goodsSet.SetSpecialNote = goodsSetWork.SetSpecialNote; // セット規格・特記事項
                    goodsSet.CatalogShapeNo = goodsSetWork.CatalogShapeNo; // カタログ図番

                    goodsSetList.Add(goodsSet);
                }
            }
        }
        #endregion

        #region < 代替マスタ >
        /// <summary>
        /// クラスメンバーコピー処理（代替マスタオブジェクト⇒代替マスタワークオブジェクト）
        /// </summary>
        /// <param name="partsSubstUWork">代替マスタワークオブジェクト</param>
        /// <param name="partsSubstU">代替マスタオブジェクト</param>
        private void CopyToPartsSubstUWorkFromPartsSubstU(ref PartsSubstUWork partsSubstUWork, PartsSubstU partsSubstU)
        {
            if (partsSubstU != null)
            {
                partsSubstUWork.CreateDateTime = partsSubstU.CreateDateTime; // 作成日時
                partsSubstUWork.UpdateDateTime = partsSubstU.UpdateDateTime; // 更新日時
                partsSubstUWork.EnterpriseCode = partsSubstU.EnterpriseCode; // 企業コード
                partsSubstUWork.FileHeaderGuid = partsSubstU.FileHeaderGuid; // GUID
                partsSubstUWork.UpdEmployeeCode = partsSubstU.UpdEmployeeCode; // 更新従業員コード
                partsSubstUWork.UpdAssemblyId1 = partsSubstU.UpdAssemblyId1; // 更新アセンブリID1
                partsSubstUWork.UpdAssemblyId2 = partsSubstU.UpdAssemblyId2; // 更新アセンブリID2
                partsSubstUWork.LogicalDeleteCode = partsSubstU.LogicalDeleteCode; // 論理削除区分
                partsSubstUWork.ChgSrcMakerCd = partsSubstU.ChgSrcMakerCd; // 変換元メーカーコード
                partsSubstUWork.ChgSrcGoodsNo = partsSubstU.ChgSrcGoodsNo; // 変換元商品番号
                partsSubstUWork.ChgSrcGoodsNoNoneHp = partsSubstU.ChgSrcGoodsNoNoneHp; // ハイフン無変換元商品番号
                partsSubstUWork.ChgDestMakerCd = partsSubstU.ChgDestMakerCd; // 変換先メーカーコード
                partsSubstUWork.ChgDestGoodsNo = partsSubstU.ChgDestGoodsNo; // 変換先商品番号
                partsSubstUWork.ChgDestGoodsNoNoneHp = partsSubstU.ChgDestGoodsNoNoneHp; // ハイフン無変換先商品番号
                partsSubstUWork.ApplyStaDate = partsSubstU.ApplyStaDate; // 適用開始日
                partsSubstUWork.ApplyEndDate = partsSubstU.ApplyEndDate; // 適用終了日
            }
        }

        /// <summary>
        /// クラスメンバーコピー処理（代替マスタワークオブジェクト⇒代替マスタオブジェクト）
        /// </summary>
        /// <param name="partsSubstU">代替マスタオブジェクト</param>
        /// <param name="partsSubstUWork">代替マスタワークオブジェクト</param>
        private void CopyToPartsSubstUFromPartsSubstUWork(ref PartsSubstU partsSubstU, PartsSubstUWork partsSubstUWork)
        {
            if (partsSubstUWork != null)
            {
                partsSubstU.CreateDateTime = partsSubstUWork.CreateDateTime; // 作成日時
                partsSubstU.UpdateDateTime = partsSubstUWork.UpdateDateTime; // 更新日時
                partsSubstU.EnterpriseCode = partsSubstUWork.EnterpriseCode; // 企業コード
                partsSubstU.FileHeaderGuid = partsSubstUWork.FileHeaderGuid; // GUID
                partsSubstU.UpdEmployeeCode = partsSubstUWork.UpdEmployeeCode; // 更新従業員コード
                partsSubstU.UpdAssemblyId1 = partsSubstUWork.UpdAssemblyId1; // 更新アセンブリID1
                partsSubstU.UpdAssemblyId2 = partsSubstUWork.UpdAssemblyId2; // 更新アセンブリID2
                partsSubstU.LogicalDeleteCode = partsSubstUWork.LogicalDeleteCode; // 論理削除区分
                partsSubstU.ChgSrcMakerCd = partsSubstUWork.ChgSrcMakerCd; // 変換元メーカーコード
                partsSubstU.ChgSrcGoodsNo = partsSubstUWork.ChgSrcGoodsNo; // 変換元商品番号
                partsSubstU.ChgSrcGoodsNoNoneHp = partsSubstUWork.ChgSrcGoodsNoNoneHp; // ハイフン無変換元商品番号
                partsSubstU.ChgDestMakerCd = partsSubstUWork.ChgDestMakerCd; // 変換先メーカーコード
                partsSubstU.ChgDestGoodsNo = partsSubstUWork.ChgDestGoodsNo; // 変換先商品番号
                partsSubstU.ChgDestGoodsNoNoneHp = partsSubstUWork.ChgDestGoodsNoNoneHp; // ハイフン無変換先商品番号
                partsSubstU.ApplyStaDate = partsSubstUWork.ApplyStaDate; // 適用開始日
                partsSubstU.ApplyEndDate = partsSubstUWork.ApplyEndDate; // 適用終了日
            }
        }
        #endregion

        #region < TBO検索データ >
        // >>>>>>> 20081128 30290追加
        /// <summary>
        /// クラスメンバーコピー処理（TBO検索マスタオブジェクトリスト⇒TBO検索マスタワークオブジェクトリスト）
        /// </summary>
        /// <param name="tboSearchUWorkList">TBO検索マスタワークオブジェクトリスト</param>
        /// <param name="tboSearchUList">TBO検索マスタオブジェクトリスト</param>
        private void CopyToTBOSearchUWorkFromTBOSearchU(ref ArrayList tboSearchUWorkList, ArrayList tboSearchUList)
        {
            if ((tboSearchUList != null) && (tboSearchUList.Count != 0))
            {
                foreach (TBOSearchU tboSearchU in tboSearchUList)
                {
                    TBOSearchUWork tboSearchUWork = new TBOSearchUWork();

                    tboSearchUWork.CreateDateTime = tboSearchU.CreateDateTime; // 作成日時
                    tboSearchUWork.UpdateDateTime = tboSearchU.UpdateDateTime; // 更新日時
                    tboSearchUWork.EnterpriseCode = tboSearchU.EnterpriseCode; // 企業コード
                    tboSearchUWork.FileHeaderGuid = tboSearchU.FileHeaderGuid; // GUID
                    tboSearchUWork.UpdEmployeeCode = tboSearchU.UpdEmployeeCode; // 更新従業員コード
                    tboSearchUWork.UpdAssemblyId1 = tboSearchU.UpdAssemblyId1; // 更新アセンブリID1
                    tboSearchUWork.UpdAssemblyId2 = tboSearchU.UpdAssemblyId2; // 更新アセンブリID2
                    tboSearchUWork.LogicalDeleteCode = tboSearchU.LogicalDeleteCode; // 論理削除区分
                    tboSearchUWork.BLGoodsCode = tboSearchU.BLGoodsCode; // BL商品コード
                    tboSearchUWork.EquipGenreCode = tboSearchU.EquipGenreCode; // 装備分類
                    tboSearchUWork.EquipName = tboSearchU.EquipName; // 装備名称
                    tboSearchUWork.CarInfoJoinDispOrder = tboSearchU.CarInfoJoinDispOrder; // 車両結合表示順位
                    tboSearchUWork.JoinDestMakerCd = tboSearchU.JoinDestMakerCd; // 結合先メーカーコード
                    tboSearchUWork.JoinDestPartsNo = tboSearchU.JoinDestPartsNo; // 結合先品番(－付き品番)
                    tboSearchUWork.JoinQty = tboSearchU.JoinQty; // 結合QTY
                    tboSearchUWork.EquipSpecialNote = tboSearchU.EquipSpecialNote; // 装備規格・特記事項

                    tboSearchUWorkList.Add(tboSearchUWork);
                }
            }
        }

        /// <summary>
        /// クラスメンバーコピー処理（TBO検索マスタワークオブジェクトリスト⇒TBO検索マスタオブジェクトリスト）
        /// </summary>
        /// <param name="tboSearchUList">TBO検索マスタオブジェクトリスト</param>
        /// <param name="tboSearchUWorkList">TBO検索マスタワークオブジェクトリスト</param>
        private void CopyToTBOSearchUFromTBOSearchUWork(ref ArrayList tboSearchUList, ArrayList tboSearchUWorkList)
        {
            if ((tboSearchUWorkList != null) && (tboSearchUWorkList.Count != 0))
            {
                foreach (TBOSearchUWork tboSearchUWork in tboSearchUWorkList)
                {
                    TBOSearchU tboSearchU = new TBOSearchU();

                    tboSearchU.CreateDateTime = tboSearchUWork.CreateDateTime; // 作成日時
                    tboSearchU.UpdateDateTime = tboSearchUWork.UpdateDateTime; // 更新日時
                    tboSearchU.EnterpriseCode = tboSearchUWork.EnterpriseCode; // 企業コード
                    tboSearchU.FileHeaderGuid = tboSearchUWork.FileHeaderGuid; // GUID
                    tboSearchU.UpdEmployeeCode = tboSearchUWork.UpdEmployeeCode; // 更新従業員コード
                    tboSearchU.UpdAssemblyId1 = tboSearchUWork.UpdAssemblyId1; // 更新アセンブリID1
                    tboSearchU.UpdAssemblyId2 = tboSearchUWork.UpdAssemblyId2; // 更新アセンブリID2
                    tboSearchU.LogicalDeleteCode = tboSearchUWork.LogicalDeleteCode; // 論理削除区分
                    tboSearchU.BLGoodsCode = tboSearchUWork.BLGoodsCode; // BL商品コード
                    tboSearchU.EquipGenreCode = tboSearchUWork.EquipGenreCode; // 装備分類
                    tboSearchU.EquipName = tboSearchUWork.EquipName; // 装備名称
                    tboSearchU.CarInfoJoinDispOrder = tboSearchUWork.CarInfoJoinDispOrder; // 車両結合表示順位
                    tboSearchU.JoinDestMakerCd = tboSearchUWork.JoinDestMakerCd; // 結合先メーカーコード
                    tboSearchU.JoinDestPartsNo = tboSearchUWork.JoinDestPartsNo; // 結合先品番(－付き品番)
                    tboSearchU.JoinQty = tboSearchUWork.JoinQty; // 結合QTY
                    tboSearchU.EquipSpecialNote = tboSearchUWork.EquipSpecialNote; // 装備規格・特記事項

                    tboSearchUList.Add(tboSearchU);
                }
            }
        }
        // 20081128 30290追加 <<<<<<<
        #endregion

        #region < 商品データ（ユーザー） >
        /// <summary>
        /// クラスメンバーコピー処理（商品データワーククラス(ユーザー)リスト ⇒ 商品データクラスリスト(ユーザー)）
        /// </summary>
        /// <param name="workList">商品ワーククラスリスト</param>
        /// <returns>商品クラスリスト</returns>
        private List<Goods> CopyToGoodsFromGoodsUWork(ArrayList workList)
        {
            List<Goods> goodsList = null;

            if (workList != null && workList.Count > 0)
            {
                goodsList = new List<Goods>();

                foreach (GoodsUWork work in workList)
                {
                    goodsList.Add(this.CopyToGoodsFromGoodsUWork(work));
                }
            }

            return goodsList;
        }

        /// <summary>
        /// クラスメンバーコピー処理（商品データワーククラス⇒商品データクラス）
        /// </summary>
        /// <param name="goodsUWork">商品データワークオブジェクト</param>
        /// <returns></returns>
        private Goods CopyToGoodsFromGoodsUWork(GoodsUWork goodsUWork)
        {
            Goods goods = null;

            if (goodsUWork != null)
            {
                goods = new Goods();
                goods.CreateDateTime = goodsUWork.CreateDateTime; // 作成日時
                goods.UpdateDateTime = goodsUWork.UpdateDateTime; // 更新日時
                goods.EnterpriseCode = goodsUWork.EnterpriseCode; // 企業コード
                goods.FileHeaderGuid = goodsUWork.FileHeaderGuid; // GUID
                goods.UpdEmployeeCode = goodsUWork.UpdEmployeeCode; // 更新従業員コード
                goods.UpdAssemblyId1 = goodsUWork.UpdAssemblyId1; // 更新アセンブリID1
                goods.UpdAssemblyId2 = goodsUWork.UpdAssemblyId2; // 更新アセンブリID2
                goods.LogicalDeleteCode = goodsUWork.LogicalDeleteCode; // 論理削除区分
                goods.GoodsMakerCd = goodsUWork.GoodsMakerCd; // 商品メーカーコード
                goods.GoodsNo = goodsUWork.GoodsNo; // 商品番号
                goods.GoodsName = goodsUWork.GoodsName; // 商品名称
                goods.GoodsNameKana = goodsUWork.GoodsNameKana; // 商品名称カナ
                goods.Jan = goodsUWork.Jan; // JANコード
                goods.BLGoodsCode = goodsUWork.BLGoodsCode; // BL商品コード
                goods.DisplayOrder = goodsUWork.DisplayOrder; // 表示順位
                goods.GoodsRateRank = goodsUWork.GoodsRateRank; // 商品掛率ランク
                goods.TaxationDivCd = goodsUWork.TaxationDivCd; // 課税区分
                goods.GoodsNoNoneHyphen = goodsUWork.GoodsNoNoneHyphen; // ハイフン無商品番号
                goods.OfferDate = goodsUWork.OfferDate; // 提供日付
                goods.GoodsKindCode = goodsUWork.GoodsKindCode; // 商品属性
                goods.GoodsNote1 = goodsUWork.GoodsNote1; // 商品備考１
                goods.GoodsNote2 = goodsUWork.GoodsNote2; // 商品備考２
                goods.GoodsSpecialNote = goodsUWork.GoodsSpecialNote; // 商品規格・特記事項
                goods.EnterpriseGanreCode = goodsUWork.EnterpriseGanreCode; // 自社分類コード
                goods.UpdateDate = goodsUWork.UpdateDate; // 更新年月日
            }
            return goods;
        }

        /// <summary>
        /// クラスメンバーコピー処理（商品データクラス(ユーザー) ⇒ 商品データワーククラス(ユーザー)）
        /// </summary>
        /// <param name="goodsList">商品データオブジェクトリスト</param>
        /// <returns>商品データワークオブジェクトリスト</returns>
        private ArrayList CopyToGoodsUWorkFromGoods(ArrayList goodsList)
        {
            ArrayList goodsUWorkList = null;

            if (goodsList != null && goodsList.Count > 0)
            {
                goodsUWorkList = new ArrayList();

                foreach (Goods goods in goodsList)
                {
                    goodsUWorkList.Add(this.CopyToGoodsUWorkFromGoods(goods));
                }
            }
            return goodsUWorkList;
        }

        /// <summary>
        /// クラスメンバーコピー処理（商品データクラス(ユーザー) ⇒ 商品データワーククラス(ユーザー)）
        /// </summary>
        /// <param name="goods">商品データオブジェクト</param>
        /// <returns>商品データワークオブジェクト</returns>
        private GoodsUWork CopyToGoodsUWorkFromGoods(Goods goods)
        {
            GoodsUWork goodsUWork = null;

            if (goods != null)
            {
                goodsUWork = new GoodsUWork();

                #region セット項目
                goodsUWork.CreateDateTime = goods.CreateDateTime; // 作成日時
                goodsUWork.UpdateDateTime = goods.UpdateDateTime; // 更新日時
                goodsUWork.EnterpriseCode = goods.EnterpriseCode; // 企業コード
                goodsUWork.FileHeaderGuid = goods.FileHeaderGuid; // GUID
                goodsUWork.UpdEmployeeCode = goods.UpdEmployeeCode; // 更新従業員コード
                goodsUWork.UpdAssemblyId1 = goods.UpdAssemblyId1; // 更新アセンブリID1
                goodsUWork.UpdAssemblyId2 = goods.UpdAssemblyId2; // 更新アセンブリID2
                goodsUWork.LogicalDeleteCode = goods.LogicalDeleteCode; // 論理削除区分
                goodsUWork.GoodsMakerCd = goods.GoodsMakerCd; // 商品メーカーコード
                goodsUWork.GoodsNo = goods.GoodsNo; // 商品番号
                goodsUWork.GoodsName = goods.GoodsName; // 商品名称
                goodsUWork.GoodsNameKana = goods.GoodsNameKana; // 商品名称カナ
                goodsUWork.Jan = goods.Jan; // JANコード
                goodsUWork.BLGoodsCode = goods.BLGoodsCode; // BL商品コード
                goodsUWork.DisplayOrder = goods.DisplayOrder; // 表示順位
                goodsUWork.GoodsRateRank = goods.GoodsRateRank; // 商品掛率ランク
                goodsUWork.TaxationDivCd = goods.TaxationDivCd; // 課税区分
                goodsUWork.GoodsNoNoneHyphen = goods.GoodsNoNoneHyphen; // ハイフン無商品番号
                goodsUWork.OfferDate = goods.OfferDate; // 提供日付
                goodsUWork.GoodsKindCode = goods.GoodsKindCode; // 商品属性
                goodsUWork.GoodsNote1 = goods.GoodsNote1; // 商品備考１
                goodsUWork.GoodsNote2 = goods.GoodsNote2; // 商品備考２
                goodsUWork.GoodsSpecialNote = goods.GoodsSpecialNote; // 商品規格・特記事項
                goodsUWork.EnterpriseGanreCode = goods.EnterpriseGanreCode; // 自社分類コード
                goodsUWork.UpdateDate = goods.UpdateDate; // 更新年月日
                #endregion
            }
            return goodsUWork;
        }
        #endregion

        #region < BLグループコードマスタ(ユーザー) >
        /// <summary>
        /// クラスメンバーコピー処理
        /// </summary>
        /// <param name="bLGroupUWorkList">BLグループコードマスタ(ユーザー)ワークオブジェクトリスト</param>
        /// <returns>BLグループコードマスタ(ユーザー)オブジェクトリスト</returns>
        private List<BLGroupU> CopyToBLGroupUFromBLGroupUWork(ArrayList bLGroupUWorkList)
        {
            List<BLGroupU> bLGroupUList = null;

            if (bLGroupUWorkList != null)
            {
                bLGroupUList = new List<BLGroupU>();

                foreach (BLGroupUWork wrk in bLGroupUWorkList)
                {
                    bLGroupUList.Add(CopyToBLGroupUFromBLGroupUWork(wrk));
                }
            }
            return bLGroupUList;
        }

        /// <summary>
        /// クラスメンバーコピー処理
        /// </summary>
        /// <param name="bLGroupUWork">BLグループコードマスタ(ユーザー)ワークオブジェクト</param>
        /// <returns>BLグループコードマスタ(ユーザー)オブジェクト</returns>
        private BLGroupU CopyToBLGroupUFromBLGroupUWork(BLGroupUWork bLGroupUWork)
        {
            BLGroupU bLGroupU = null;

            if (bLGroupUWork != null)
            {
                bLGroupU = new BLGroupU();

                bLGroupU.CreateDateTime = bLGroupUWork.CreateDateTime; // 作成日時
                bLGroupU.UpdateDateTime = bLGroupUWork.UpdateDateTime; // 更新日時
                bLGroupU.EnterpriseCode = bLGroupUWork.EnterpriseCode; // 企業コード
                bLGroupU.FileHeaderGuid = bLGroupUWork.FileHeaderGuid; // GUID
                bLGroupU.UpdEmployeeCode = bLGroupUWork.UpdEmployeeCode; // 更新従業員コード
                bLGroupU.UpdAssemblyId1 = bLGroupUWork.UpdAssemblyId1; // 更新アセンブリID1
                bLGroupU.UpdAssemblyId2 = bLGroupUWork.UpdAssemblyId2; // 更新アセンブリID2
                bLGroupU.LogicalDeleteCode = bLGroupUWork.LogicalDeleteCode; // 論理削除区分
                bLGroupU.GoodsLGroup = bLGroupUWork.GoodsLGroup; // 商品大分類コード
                bLGroupU.GoodsMGroup = bLGroupUWork.GoodsMGroup; // 商品中分類コード
                bLGroupU.BLGroupCode = bLGroupUWork.BLGroupCode; // BLグループコード
                bLGroupU.BLGroupName = bLGroupUWork.BLGroupName; // BLグループコード名称
                bLGroupU.SalesCode = bLGroupUWork.SalesCode; // 販売区分コード
            }

            return bLGroupU;
        }
        #endregion

        #region < 商品中分類マスタ(ユーザー) >
        /// <summary>
        /// クラスメンバーコピー処理
        /// </summary>
        /// <param name="goodsMGroupUWorkList">商品中分類マスタ（ユーザー）ワークオブジェクトリスト</param>
        /// <returns>商品中分類マスタ（ユーザー）オブジェクトリスト</returns>
        private List<GoodsGroupU> CopyToGoodsMGroupUFromGoodsMGroupUWork(ArrayList goodsMGroupUWorkList)
        {
            List<GoodsGroupU> goodsGroupUList = null;

            if (goodsMGroupUWorkList != null)
            {
                goodsGroupUList = new List<GoodsGroupU>();

                foreach (GoodsGroupUWork wrk in goodsMGroupUWorkList)
                {
                    goodsGroupUList.Add(CopyToGoodsMGroupUFromGoodsMGroupUWork(wrk));
                }
            }

            return goodsGroupUList;
        }

        /// <summary>
        /// クラスメンバーコピー処理
        /// </summary>
        /// <param name="goodsMGroupUWork">商品中分類マスタ（ユーザー）ワークオブジェクト</param>
        /// <returns>商品中分類マスタ（ユーザー）オブジェクト</returns>
        private GoodsGroupU CopyToGoodsMGroupUFromGoodsMGroupUWork(GoodsGroupUWork goodsMGroupUWork)
        {
            GoodsGroupU goodsMGroupU = null;

            if (goodsMGroupUWork != null)
            {
                goodsMGroupU = new GoodsGroupU();

                goodsMGroupU.CreateDateTime = goodsMGroupUWork.CreateDateTime; // 作成日時
                goodsMGroupU.UpdateDateTime = goodsMGroupUWork.UpdateDateTime; // 更新日時
                goodsMGroupU.EnterpriseCode = goodsMGroupUWork.EnterpriseCode; // 企業コード
                goodsMGroupU.FileHeaderGuid = goodsMGroupUWork.FileHeaderGuid; // GUID
                goodsMGroupU.UpdEmployeeCode = goodsMGroupUWork.UpdEmployeeCode; // 更新従業員コード
                goodsMGroupU.UpdAssemblyId1 = goodsMGroupUWork.UpdAssemblyId1; // 更新アセンブリID1
                goodsMGroupU.UpdAssemblyId2 = goodsMGroupUWork.UpdAssemblyId2; // 更新アセンブリID2
                goodsMGroupU.LogicalDeleteCode = goodsMGroupUWork.LogicalDeleteCode; // 論理削除区分
                goodsMGroupU.GoodsMGroup = goodsMGroupUWork.GoodsMGroup; // 商品中分類コード
                goodsMGroupU.GoodsMGroupName = goodsMGroupUWork.GoodsMGroupName; // 商品中分類名称
            }

            return goodsMGroupU;
        }
        #endregion

        #region < ユーザーガイド(ユーザー) >
        /// <summary>
        /// クラスメンバーコピー処理
        /// </summary>
        /// <param name="userGdBdUWorkList">ユーザーガイド(ユーザー)ワークオブジェクトリスト</param>
        /// <returns>ユーザーガイド(ユーザー)オブジェクトリスト</returns>
        private List<UserGdBdU> CopyToUserGdBdUFromUserGdBdUWork(ArrayList userGdBdUWorkList)
        {
            List<UserGdBdU> userGdBdUList = null;

            if (userGdBdUWorkList != null)
            {
                userGdBdUList = new List<UserGdBdU>();

                foreach (UserGdBdUWork wrk in userGdBdUWorkList)
                {
                    userGdBdUList.Add(CopyToUserGdBdUFromUserGdBdUWork(wrk));
                }
            }

            return userGdBdUList;
        }

        /// <summary>
        /// クラスメンバーコピー処理
        /// </summary>
        /// <param name="userGdBdUWork">ユーザーガイド(ユーザー)ワークオブジェクト</param>
        /// <returns>ユーザーガイド(ユーザー)オブジェクト</returns>
        private UserGdBdU CopyToUserGdBdUFromUserGdBdUWork(UserGdBdUWork userGdBdUWork)
        {
            UserGdBdU userGdBdU = null;

            if (userGdBdUWork != null)
            {
                userGdBdU = new UserGdBdU();

                userGdBdU.CreateDateTime = userGdBdUWork.CreateDateTime; // 作成日時
                userGdBdU.UpdateDateTime = userGdBdUWork.UpdateDateTime; // 更新日時
                userGdBdU.EnterpriseCode = userGdBdUWork.EnterpriseCode; // 企業コード
                userGdBdU.FileHeaderGuid = userGdBdUWork.FileHeaderGuid; // GUID
                userGdBdU.UpdEmployeeCode = userGdBdUWork.UpdEmployeeCode; // 更新従業員コード
                userGdBdU.UpdAssemblyId1 = userGdBdUWork.UpdAssemblyId1; // 更新アセンブリID1
                userGdBdU.UpdAssemblyId2 = userGdBdUWork.UpdAssemblyId2; // 更新アセンブリID2
                userGdBdU.LogicalDeleteCode = userGdBdUWork.LogicalDeleteCode; // 論理削除区分
                userGdBdU.UserGuideDivCd = userGdBdUWork.UserGuideDivCd; // ユーザーガイド区分
                userGdBdU.GuideCode = userGdBdUWork.GuideCode; // ガイドコード
                userGdBdU.GuideName = userGdBdUWork.GuideName; // ガイド名称
                userGdBdU.GuideType = userGdBdUWork.GuideType; // ガイドタイプGanreCode;
            }
            return userGdBdU;
        }
        #endregion

        #region < 商品管理情報マスタ(ユーザー) >
        /// <summary>
        /// クラスメンバーコピー処理
        /// </summary>
        /// <param name="goodsMngWorkList">商品管理情報(ユーザー)ワークオブジェクトリスト</param>
        /// <returns>商品管理情報(ユーザー)オブジェクトリスト</returns>
        private List<GoodsMng> CopyToGoodsMngFromGoodsMngWork(ArrayList goodsMngWorkList)
        {
            List<GoodsMng> goodsMngList = null;

            if (goodsMngWorkList != null)
            {
                goodsMngList = new List<GoodsMng>();

                foreach (GoodsMngWork wrk in goodsMngWorkList)
                {
                    goodsMngList.Add(CopyToGoodsMngFromGoodsMngWork(wrk));
                }
            }

            return goodsMngList;
        }

        /// <summary>
        /// クラスメンバーコピー処理
        /// </summary>
        /// <param name="goodsMngWork">商品管理情報(ユーザー)ワークオブジェクト</param>
        /// <returns>商品管理情報(ユーザー)オブジェクト</returns>
        private GoodsMng CopyToGoodsMngFromGoodsMngWork(GoodsMngWork goodsMngWork)
        {
            GoodsMng goodsMng = null;

            if (goodsMngWork != null)
            {
                goodsMng = new GoodsMng();

                goodsMng.CreateDateTime = goodsMngWork.CreateDateTime; // 作成日時
                goodsMng.UpdateDateTime = goodsMngWork.UpdateDateTime; // 更新日時
                goodsMng.EnterpriseCode = goodsMngWork.EnterpriseCode; // 企業コード
                goodsMng.FileHeaderGuid = goodsMngWork.FileHeaderGuid; // GUID
                goodsMng.UpdEmployeeCode = goodsMngWork.UpdEmployeeCode; // 更新従業員コード
                goodsMng.UpdAssemblyId1 = goodsMngWork.UpdAssemblyId1; // 更新アセンブリID1
                goodsMng.UpdAssemblyId2 = goodsMngWork.UpdAssemblyId2; // 更新アセンブリID2
                goodsMng.LogicalDeleteCode = goodsMngWork.LogicalDeleteCode; // 論理削除区分
                goodsMng.SectionCode = goodsMngWork.SectionCode; // 拠点コード
                goodsMng.GoodsMakerCd = goodsMngWork.GoodsMakerCd; // 商品メーカーコード
                //goodsMng.BLGoodsCode = goodsMngWork.BLGoodsCode; // BL商品コード
                goodsMng.GoodsNo = goodsMngWork.GoodsNo; // 商品番号
                goodsMng.SupplierCd1 = goodsMngWork.SupplierCd; // 仕入先コード
                goodsMng.SupplierLot1 = goodsMngWork.SupplierLot; // 発注ロット
            }
            return goodsMng;
        }

        // 2009.01.23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        ///// <summary>
        ///// 商品連結クラスへ商品管理情報をセット
        ///// </summary>
        ///// <param name="goodsUnitData"></param>
        ///// <param name="retGoodsMng"></param>
        //private void SettingGoodsUnitDataFromGoodsMng(ref GoodsUnitData goodsUnitData, GoodsMng retGoodsMng)
        //{
        //    goodsUnitData.SectionCode = retGoodsMng.SectionCode;
        //    goodsUnitData.SupplierCd = retGoodsMng.SupplierCd1;
        //    goodsUnitData.SupplierLot = retGoodsMng.SupplierLot1;
        //}
        /// <summary>
        /// 商品連結クラスへ商品管理情報をセット
        /// </summary>
        /// <param name="goodsUnitData"></param>
        /// <param name="retGoodsMng"></param>
        private void SettingGoodsUnitDataFromGoodsMng(ref GoodsUnitData goodsUnitData, GoodsMngWork retGoodsMng)
        {
            goodsUnitData.SectionCode = retGoodsMng.SectionCode;
            goodsUnitData.SupplierCd = retGoodsMng.SupplierCd;
            goodsUnitData.SupplierSnm = retGoodsMng.SupplierSnm;    // ADD 2010/01/12 MANTIS対応[14862]：商品管理情報マスタの設定パターンを返す処理を追加
            goodsUnitData.SupplierLot = retGoodsMng.SupplierLot;
        }
        // 2009.01.23 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        #endregion

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/04 DEL
        # region //  2008/09/04 DEL
        //#region < ユーザーガイド(提供) >
        ///// <summary>
        ///// クラスメンバーコピー処理
        ///// </summary>
        ///// <param name="userGdBdWorkList">ユーザーガイド(提供)ワークオブジェクトリスト</param>
        ///// <returns>ユーザーガイド(ユーザー)オブジェクトリスト</returns>
        //private List<UserGdBdU> CopyToUserGdBdFromUserGdBdWork(ArrayList userGdBdWorkList)
        //{
        //    List<UserGdBdU> userGdBdUList = null;

        //    if (userGdBdWorkList != null)
        //    {
        //        userGdBdUList = new List<UserGdBdU>();

        //        foreach (UserGdBdWork wrk in userGdBdWorkList)
        //        {
        //            userGdBdUList.Add(CopyToUserGdBdFromUserGdBdWork(wrk));
        //        }
        //    }

        //    return userGdBdUList;
        //}

        ///// <summary>
        ///// クラスメンバーコピー処理
        ///// </summary>
        ///// <param name="userGdBdWork">ユーザーガイド(提供)ワークオブジェクト</param>
        ///// <returns>ユーザーガイド(ユーザー)オブジェクト</returns>
        //private UserGdBdU CopyToUserGdBdFromUserGdBdWork(UserGdBdWork userGdBdWork)
        //{
        //    UserGdBdU userGdBdU = null;

        //    if (userGdBdWork != null)
        //    {
        //        userGdBdU = new UserGdBdU();

        //        userGdBdU.CreateDateTime = userGdBdWork.CreateDateTime; // 作成日時
        //        userGdBdU.UpdateDateTime = userGdBdWork.UpdateDateTime; // 更新日時
        //        //userGdBdU.EnterpriseCode = userGdBdWork.EnterpriseCode; // 企業コード
        //        //userGdBdU.FileHeaderGuid = userGdBdWork.FileHeaderGuid; // GUID
        //        //userGdBdU.UpdEmployeeCode = userGdBdWork.UpdEmployeeCode; // 更新従業員コード
        //        //userGdBdU.UpdAssemblyId1 = userGdBdWork.UpdAssemblyId1; // 更新アセンブリID1
        //        //userGdBdU.UpdAssemblyId2 = userGdBdWork.UpdAssemblyId2; // 更新アセンブリID2
        //        userGdBdU.LogicalDeleteCode = userGdBdWork.LogicalDeleteCode; // 論理削除区分
        //        userGdBdU.UserGuideDivCd = userGdBdWork.UserGuideDivCd; // ユーザーガイド区分
        //        userGdBdU.GuideCode = userGdBdWork.GuideCode; // ガイドコード
        //        userGdBdU.GuideName = userGdBdWork.GuideName; // ガイド名称
        //        userGdBdU.GuideType = userGdBdWork.GuideType; // ガイドタイプGanreCode;
        //    }
        //    return userGdBdU;
        //}
        //#endregion

        //#region < 商品中分類マスタ(提供) >
        ///// <summary>
        ///// クラスメンバーコピー処理
        ///// </summary>
        ///// <param name="goodsMGroupWorkList">商品中分類マスタ（提供）ワークオブジェクトリスト</param>
        ///// <returns>商品中分類マスタ（ユーザー）オブジェクトリスト</returns>
        //private List<GoodsGroupU> CopyToGoodsMGroupFromGoodsMGroupWork(ArrayList goodsMGroupWorkList)
        //{
        //    List<GoodsGroupU> goodsGroupUList = null;

        //    if (goodsMGroupWorkList != null)
        //    {
        //        goodsGroupUList = new List<GoodsGroupU>();

        //        foreach (GoodsMGroupWork wrk in goodsMGroupWorkList)
        //        {
        //            goodsGroupUList.Add(CopyToGoodsMGroupFromGoodsMGroupWork(wrk));
        //        }
        //    }

        //    return goodsGroupUList;
        //}

        ///// <summary>
        ///// クラスメンバーコピー処理
        ///// </summary>
        ///// <param name="goodsMGroupWork">商品中分類マスタ（提供）ワークオブジェクト</param>
        ///// <returns>商品中分類マスタ（ユーザー）オブジェクト</returns>
        //private GoodsGroupU CopyToGoodsMGroupFromGoodsMGroupWork(GoodsMGroupWork goodsMGroupWork)
        //{
        //    GoodsGroupU goodsMGroupU = null;

        //    if (goodsMGroupWork != null)
        //    {
        //        goodsMGroupU = new GoodsGroupU();

        //        //goodsMGroupU.CreateDateTime = goodsMGroupWork.CreateDateTime; // 作成日時
        //        //goodsMGroupU.UpdateDateTime = goodsMGroupWork.UpdateDateTime; // 更新日時
        //        //goodsMGroupU.EnterpriseCode = goodsMGroupWork.EnterpriseCode; // 企業コード
        //        //goodsMGroupU.FileHeaderGuid = goodsMGroupWork.FileHeaderGuid; // GUID
        //        //goodsMGroupU.UpdEmployeeCode = goodsMGroupWork.UpdEmployeeCode; // 更新従業員コード
        //        //goodsMGroupU.UpdAssemblyId1 = goodsMGroupWork.UpdAssemblyId1; // 更新アセンブリID1
        //        //goodsMGroupU.UpdAssemblyId2 = goodsMGroupWork.UpdAssemblyId2; // 更新アセンブリID2
        //        //goodsMGroupU.LogicalDeleteCode = goodsMGroupWork.LogicalDeleteCode; // 論理削除区分
        //        goodsMGroupU.GoodsMGroup = goodsMGroupWork.GoodsMGroup; // 商品中分類コード
        //        goodsMGroupU.GoodsMGroupName = goodsMGroupWork.GoodsMGroupName; // 商品中分類名称
        //    }

        //    return goodsMGroupU;
        //}
        //#endregion

        //#region < BLグループコードマスタ(提供) >
        ///// <summary>
        ///// クラスメンバーコピー処理
        ///// </summary>
        ///// <param name="bLGroupWorkList">BLグループコードマスタ(提供)ワークオブジェクトリスト</param>
        ///// <returns>BLグループコードマスタ(ユーザー)オブジェクトリスト</returns>
        //private List<BLGroupU> CopyToBLGroupFromBLGroupWork(ArrayList bLGroupWorkList)
        //{
        //    List<BLGroupU> bLGroupUList = null;

        //    if (bLGroupWorkList != null)
        //    {
        //        bLGroupUList = new List<BLGroupU>();

        //        foreach (BLGroupWork wrk in bLGroupWorkList)
        //        {
        //            bLGroupUList.Add(CopyToBLGroupFromBLGroupWork(wrk));
        //        }
        //    }
        //    return bLGroupUList;
        //}

        ///// <summary>
        ///// クラスメンバーコピー処理
        ///// </summary>
        ///// <param name="bLGroupWork">BLグループコードマスタ(提供)ワークオブジェクト</param>
        ///// <returns>BLグループコードマスタ(ユーザー)オブジェクト</returns>
        //private BLGroupU CopyToBLGroupFromBLGroupWork(BLGroupWork bLGroupWork)
        //{
        //    BLGroupU bLGroupU = null;

        //    if (bLGroupWork != null)
        //    {
        //        bLGroupU = new BLGroupU();

        //        //bLGroupU.CreateDateTime = bLGroupWork.CreateDateTime; // 作成日時
        //        //bLGroupU.UpdateDateTime = bLGroupWork.UpdateDateTime; // 更新日時
        //        //bLGroupU.EnterpriseCode = bLGroupWork.EnterpriseCode; // 企業コード
        //        //bLGroupU.FileHeaderGuid = bLGroupWork.FileHeaderGuid; // GUID
        //        //bLGroupU.UpdEmployeeCode = bLGroupWork.UpdEmployeeCode; // 更新従業員コード
        //        //bLGroupU.UpdAssemblyId1 = bLGroupWork.UpdAssemblyId1; // 更新アセンブリID1
        //        //bLGroupU.UpdAssemblyId2 = bLGroupWork.UpdAssemblyId2; // 更新アセンブリID2
        //        //bLGroupU.LogicalDeleteCode = bLGroupWork.LogicalDeleteCode; // 論理削除区分
        //        //bLGroupU.GoodsLGroup = bLGroupWork.GoodsLGroup; // 商品大分類コード
        //        bLGroupU.GoodsMGroup = bLGroupWork.GoodsMGroup; // 商品中分類コード
        //        bLGroupU.BLGroupCode = bLGroupWork.BLGloupCode; // BLグループコード
        //        bLGroupU.BLGroupName = bLGroupWork.BLGloupName; // BLグループコード名称
        //        //bLGroupU.SalesCode = bLGroupWork.SalesCode; // 販売区分コード
        //    }

        //    return bLGroupU;
        //}
        //#endregion
        # endregion
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/04 DEL

        #region < 抽出条件クラス >
        /// <summary>
        /// クラスメンバーコピー処理
        /// </summary>
        /// <param name="cndtn">商品抽出条件クラス</param>
        /// <returns>商品構成取得共通条件クラスワーク</returns>
        private GoodsCndtnWork CopyToGoodsCondtnWorkFromGoodsCondtn(GoodsCndtn cndtn)
        {
            GoodsCndtnWork cmnCdtnWork = null;

            if (cndtn != null)
            {
                cmnCdtnWork = new GoodsCndtnWork();

                cmnCdtnWork.EnterpriseCode = cndtn.EnterpriseCode; // 企業コード
                cmnCdtnWork.GoodsMakerCd = cndtn.GoodsMakerCd; // 商品メーカーコード
                //cmnCdtnWork.MakerName = cndtn.MakerName; // メーカー名称
                cmnCdtnWork.GoodsNo = cndtn.GoodsNo; // 商品番号
                cmnCdtnWork.GoodsNoSrchTyp = cndtn.GoodsNoSrchTyp; // 商品番号検索区分
                cmnCdtnWork.GoodsName = cndtn.GoodsName; // 商品名称
                cmnCdtnWork.GoodsNameSrchTyp = cndtn.GoodsNameSrchTyp; // 商品名称検索区分
                cmnCdtnWork.GoodsNameKana = cndtn.GoodsNameKana; // 商品名称カナ
                cmnCdtnWork.GoodsNameKanaSrchTyp = cndtn.GoodsNameKanaSrchTyp; // 商品カナ名称検索区分
                cmnCdtnWork.Jan = cndtn.Jan; // JANコード
                cmnCdtnWork.BLGoodsCode = cndtn.BLGoodsCode; // BL商品コード
                cmnCdtnWork.GoodsLGroup = cndtn.GoodsLGroup; // 商品大分類コード
                //cmnCdtnWork.GoodsLGroupName = cndtn.GoodsLGroupName; // 商品大分類名称
                cmnCdtnWork.GoodsMGroup = cndtn.GoodsMGroup; // 商品中分類コード
                //cmnCdtnWork.GoodsMGroupName = cndtn.GoodsMGroupName; // 商品中分類名称
                cmnCdtnWork.BLGroupCode = cndtn.BLGroupCode; // BLグループコード
                //cmnCdtnWork.BLGroupName = cndtn.BLGroupName; // BLグループコード名称
                cmnCdtnWork.GoodsKindCode = cndtn.GoodsKindCode; // 商品属性
                //cmnCdtnWork.SectionCode = cndtn.SectionCode; // 拠点コード
            }
            return cmnCdtnWork;
        }

        /// <summary>
        /// クラスメンバーコピー処理
        /// </summary>
        /// <param name="cndtn">商品抽出条件クラス</param>
        /// <returns>商品構成取得共通条件クラスワーク</returns>
        /// <remarks>
        /// <br>Update Note: 2015/08/17 田建委</br>
        /// <br>管理番号   : 11170052-00</br>
        /// <br>           : Redmine#47036 商品在庫一括登録修正 管理拠点・倉庫の追加</br>
        /// </remarks>
        private GoodsUCndtnWork CopyToGoodsUCondtnWorkFromGoodsCondtn(GoodsCndtn cndtn)
        {
            GoodsUCndtnWork cmnCdtnWork = null;

            if (cndtn != null)
            {
                cmnCdtnWork = new GoodsUCndtnWork();

                cmnCdtnWork.EnterpriseCode = cndtn.EnterpriseCode; // 企業コード
                cmnCdtnWork.GoodsMakerCd = cndtn.GoodsMakerCd; // 商品メーカーコード
                //cmnCdtnWork.MakerName = cndtn.MakerName; // メーカー名称
                cmnCdtnWork.GoodsNo = cndtn.GoodsNo; // 商品番号
                cmnCdtnWork.GoodsNoSrchTyp = cndtn.GoodsNoSrchTyp; // 商品番号検索区分
                cmnCdtnWork.GoodsName = cndtn.GoodsName; // 商品名称
                cmnCdtnWork.GoodsNameSrchTyp = cndtn.GoodsNameSrchTyp; // 商品名称検索区分
                cmnCdtnWork.GoodsNameKana = cndtn.GoodsNameKana; // 商品名称カナ
                cmnCdtnWork.GoodsNameKanaSrchTyp = cndtn.GoodsNameKanaSrchTyp; // 商品カナ名称検索区分
                cmnCdtnWork.Jan = cndtn.Jan; // JANコード
                cmnCdtnWork.BLGoodsCode = cndtn.BLGoodsCode; // BL商品コード
                cmnCdtnWork.GoodsLGroup = cndtn.GoodsLGroup; // 商品大分類コード
                //cmnCdtnWork.GoodsLGroupName = cndtn.GoodsLGroupName; // 商品大分類名称
                cmnCdtnWork.GoodsMGroup = cndtn.GoodsMGroup; // 商品中分類コード
                //cmnCdtnWork.GoodsMGroupName = cndtn.GoodsMGroupName; // 商品中分類名称
                cmnCdtnWork.BLGroupCode = cndtn.BLGroupCode; // BLグループコード
                //cmnCdtnWork.BLGroupName = cndtn.BLGroupName; // BLグループコード名称
                cmnCdtnWork.GoodsKindCode = cndtn.GoodsKindCode; // 商品属性
                //cmnCdtnWork.SectionCode = cndtn.SectionCode; // 拠点コード

                //----- ADD 2015/08/17 田建委 Redmine#47036 ---------->>>>>
                cmnCdtnWork.AddUpSectionCode = cndtn.AddUpSectionCode; // 管理拠点コード
                cmnCdtnWork.WarehouseCode = cndtn.WarehouseCode; // 倉庫コード
                //----- ADD 2015/08/17 田建委 Redmine#47036 ----------<<<<<
            }
            return cmnCdtnWork;
        }
        #endregion

        #region < 各種マスタ情報設定処理 >
        /// <summary>
        /// 仕入先マスタ情報設定
        /// </summary>
        /// <param name="supplier"></param>
        /// <param name="retGoodsUnitData"></param>
        private void SettingGoodsUnitDataFromSupplier(Supplier supplier, ref GoodsUnitData retGoodsUnitData)
        {
            if (supplier != null)
            {
                retGoodsUnitData.SupplierNm1 = supplier.SupplierNm1;
                retGoodsUnitData.SupplierNm2 = supplier.SupplierNm2;
                retGoodsUnitData.SupplierSnm = supplier.SupplierSnm;
                retGoodsUnitData.SuppHonorificTitle = supplier.SuppHonorificTitle;
                retGoodsUnitData.SupplierKana = supplier.SupplierKana;
                retGoodsUnitData.SupplierSnm = supplier.SupplierSnm;
                retGoodsUnitData.StockUnPrcFrcProcCd = supplier.StockUnPrcFrcProcCd;
                retGoodsUnitData.StockCnsTaxFrcProcCd = supplier.StockCnsTaxFrcProcCd; // ADD 2011/03/17
            }
        }

        // 2009.04.09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 仕入先マスタ情報設定(Work)
        /// </summary>
        /// <param name="supplier"></param>
        /// <param name="retGoodsUnitData"></param>
        private void SettingGoodsUnitDataFromSupplierWork(SupplierWork supplier, ref GoodsUnitData retGoodsUnitData)
        {
            if (supplier != null)
            {
                retGoodsUnitData.SupplierNm1 = supplier.SupplierNm1;
                retGoodsUnitData.SupplierNm2 = supplier.SupplierNm2;
                retGoodsUnitData.SupplierSnm = supplier.SupplierSnm;
                retGoodsUnitData.SuppHonorificTitle = supplier.SuppHonorificTitle;
                retGoodsUnitData.SupplierKana = supplier.SupplierKana;
                retGoodsUnitData.SupplierSnm = supplier.SupplierSnm;
                retGoodsUnitData.StockUnPrcFrcProcCd = supplier.StockUnPrcFrcProcCd;
                retGoodsUnitData.StockCnsTaxFrcProcCd = supplier.StockCnsTaxFrcProcCd; // ADD 2011/03/17
            }
        }
        // 2009.04.09 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 DEL
        ///// <summary>
        ///// ユーザーガイド情報設定処理
        ///// </summary>
        ///// <param name="userGdBdU"></param>
        ///// <param name="retGoodsUnitData"></param>
        //private void SettingGoodsUnitDataFromUserGdBdU(UserGdBdU userGdBdU, ref GoodsUnitData retGoodsUnitData)
        //{
        //    if (userGdBdU != null)
        //    {
        //        retGoodsUnitData.GoodsLGroupName = userGdBdU.GuideName;
        //    }
        //}
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2008/09/19 ADD
        /// <summary>
        /// 商品大分類情報（ユーザーガイド）設定処理
        /// </summary>
        /// <param name="goodsLGroup"></param>
        /// <param name="retGoodsUnitData"></param>
        private void SettingGoodsUnitDataFromGoodsLGroup( UserGdBdU goodsLGroup, ref GoodsUnitData retGoodsUnitData )
        {
            if ( goodsLGroup != null )
            {
                retGoodsUnitData.GoodsLGroupName = goodsLGroup.GuideName;
            }
        }
        /// <summary>
        /// 自社分類情報（ユーザーガイド）設定処理
        /// </summary>
        /// <param name="enterpriseGanre"></param>
        /// <param name="retGoodsUnitData"></param>
        private void SettingGoodsUnitDataFromEnterPriseGanre( UserGdBdU enterpriseGanre, ref GoodsUnitData retGoodsUnitData )
        {
            if ( enterpriseGanre != null )
            {
                retGoodsUnitData.EnterpriseGanreName = enterpriseGanre.GuideName;
            }
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2008/09/19 ADD

        /// <summary>
        /// 商品中分類情報設定処理
        /// </summary>
        /// <param name="goodsGroupU"></param>
        /// <param name="retGoodsUnitData"></param>
        private void SettingGoodsUnitDataFromGoodsMGroup(GoodsGroupU goodsGroupU, ref GoodsUnitData retGoodsUnitData)
        {
            if (goodsGroupU != null)
            {
                retGoodsUnitData.GoodsMGroupName = goodsGroupU.GoodsMGroupName;
            }
        }

        // 2009.01.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 商品掛率グループコード情報設定処理
        /// </summary>
        /// <param name="goodsGroupU"></param>
        /// <param name="retGoodsUnitData"></param>
        private void SettingGoodsUnitDataFromGoodsRateGrpCode(GoodsGroupU goodsGroupU, ref GoodsUnitData retGoodsUnitData)
        {
            if (goodsGroupU != null)
            {
                retGoodsUnitData.GoodsRateGrpName = goodsGroupU.GoodsMGroupName;
            }
        }
        // 2009.01.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// BLグループコードマスタ情報設定処理
        /// </summary>
        /// <param name="bLGroupU"></param>
        /// <param name="retGoodsUnitData"></param>
        private void SettingGoodsUnitDataFromBLGroupU(BLGroupU bLGroupU, ref GoodsUnitData retGoodsUnitData)
        {
            if (bLGroupU != null)
            {
                retGoodsUnitData.BLGroupName = bLGroupU.BLGroupName;
                retGoodsUnitData.GoodsLGroup = bLGroupU.GoodsLGroup;
                retGoodsUnitData.GoodsMGroup = bLGroupU.GoodsMGroup;
                retGoodsUnitData.SalesCode = bLGroupU.SalesCode;
            }
        }

        /// <summary>
        /// BLコードマスタ情報設定処理
        /// </summary>
        /// <param name="bLGoodsCdUMnt"></param>
        /// <param name="retGoodsUnitData"></param>
        /// <br>Update Note: 2010/06/08 楊明俊</br>
        /// <br>             改良対応</br>
        /// <br>             BLコード入力時の品名取得処理変更</br>
        private void SettingGoodsUnitDataFromBLGoodsCdUMnt( BLGoodsCdUMnt bLGoodsCdUMnt, ref GoodsUnitData retGoodsUnitData )
        {
            if (bLGoodsCdUMnt != null)
            {
                retGoodsUnitData.BLGroupCode = bLGoodsCdUMnt.BLGloupCode;
                // --- UPD 2010/06/08 ---------->>>>> 
                //retGoodsUnitData.BLGoodsFullName = bLGoodsCdUMnt.BLGoodsFullName;
                retGoodsUnitData.BLGoodsFullName = bLGoodsCdUMnt.BLGoodsHalfName;
                // --- UPD 2010/06/08 ----------<<<<< 
                retGoodsUnitData.GoodsRateGrpCode = bLGoodsCdUMnt.GoodsRateGrpCode;
            }
        }

        /// <summary>
        /// メーカーマスタ情報設定処理
        /// </summary>
        /// <param name="makerUMnt"></param>
        /// <param name="retGoodsUnitData"></param>
        private void SettingGoodsUnitDataFromMakerUMnt(MakerUMnt makerUMnt, ref GoodsUnitData retGoodsUnitData)
        {
            if (makerUMnt != null)
            {
                retGoodsUnitData.MakerName = makerUMnt.MakerName;
                retGoodsUnitData.MakerShortName = makerUMnt.MakerShortName;
                retGoodsUnitData.MakerKanaName = makerUMnt.MakerKanaName;
            }
        }

        /// <summary>
        /// 優良設定情報設定処理
        /// </summary>
        /// <param name="prmSettingUWork"></param>
        /// <param name="retGoodsUnitData"></param>
        private void SettingGoodsUnitDataFromPrmSetting(PrmSettingUWork prmSettingUWork, ref GoodsUnitData retGoodsUnitData)
        {
            if (prmSettingUWork != null)
            {
                //retGoodsUnitData.SecretCode = prmSettingUWork.SecretCode;
                retGoodsUnitData.PrimePartsDisplayOrder = prmSettingUWork.PrimeDispOrder;
                retGoodsUnitData.PrmSetDtlNo1 = prmSettingUWork.PrmSetDtlNo1;
                retGoodsUnitData.PrmSetDtlName1 = prmSettingUWork.PrmSetDtlName1;
                retGoodsUnitData.PrmSetDtlNo2 = prmSettingUWork.PrmSetDtlNo2;
                retGoodsUnitData.PrmSetDtlName2 = prmSettingUWork.PrmSetDtlName2;
                // 2015/03/03 SCM高速化Redmine#310対応 --------------------------->>>>>
                retGoodsUnitData.PrmSetDtlName2ForFac = prmSettingUWork.PrmSetDtlName2ForFac;
                retGoodsUnitData.PrmSetDtlName2ForCOw = prmSettingUWork.PrmSetDtlName2ForCOw;
                // 2015/03/03 SCM高速化Redmine#310対応 ---------------------------<<<<<
            }
        }
        #endregion

        #endregion

        #region ●　商品関連プライマリーキー情報取得

        /// <summary>
        /// 商品関連プライマリーキー情報取得
        /// </summary>
        /// <param name="data">対象となるデータ</param>
        /// <returns>プライマリキー情報</returns>
        private string GetPrimaryKeyGoodsList(object data)
        {
            string primaryKey = String.Empty;

            if (data == null) return primaryKey;

            // メーカーコード + 商品コードで辞書キーを作成する
            if (data is GoodsUnitData)
            {
                GoodsUnitData goodsUnitData = data as GoodsUnitData;
                primaryKey = this.GetPrimaryKeyGoodsList(goodsUnitData.GoodsMakerCd, goodsUnitData.GoodsNo);

            }
            else if (data is Goods)
            {
                Goods goods = data as Goods;
                primaryKey = this.GetPrimaryKeyGoodsList(goods.GoodsMakerCd, goods.GoodsNo);
            }

            return primaryKey;
        }

        /// <summary>
        /// 商品関連プライマリーキー情報取得
        /// </summary>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="goodsCode">商品コード</param>
        /// <returns>プライマリキー情報</returns>
        private string GetPrimaryKeyGoodsList(int makerCode, string goodsCode)
        {
            string primaryKey = String.Empty;

            // メーカーコード + 商品コードで辞書キーを作成する
            primaryKey = makerCode.ToString("000") + goodsCode;


            return primaryKey.Trim();
        }

        #endregion

        #region ●　商品データ追加処理
        /// <summary>
        /// 商品データ追加処理
        /// </summary>
        /// <param name="target">対象となるDictionary</param>
        /// <param name="data">追加するデータ</param>
        private void AddGoodsDictionaryList(ref Dictionary<string, GoodsUnitData> target, GoodsUnitData data)
        {
            if (target == null) return;

            // プライマリキーを作成する
            string primaryKey = this.GetPrimaryKeyGoodsList(data);

            if (!target.ContainsKey(primaryKey))
            {
                target.Add(primaryKey, data.Clone());
            }
            else
            {
                GoodsUnitData userData = target[primaryKey].Clone();
                CopyGoodUnitData(data, ref userData);

                target[primaryKey] = userData.Clone();
            }
        }
        #endregion

        #region ●　商品データ変更イベント発動
        /// <summary>
        /// ChangedGoodsDataEventHandler型のイベント発動
        /// </summary>
        /// <param name="sender">イベント発生オブジェクト</param>
        /// <param name="e">イベント引数</param>
        /// <param name="handler">イベントハンドラ(デリゲート)</param>
        /// <remarks>
        /// <br>Note       : InfoDecisionTrustContractEventHandler型デリゲートに登録されているメソッドをコールします。</br>
        /// <br>Programer  : 18012 Y.Sasaki</br>
        /// <br>Date       : 2006.06.15</br>
        /// </remarks>
        private void FireChangedGoodsDataEventHandler(object sender, GoodsAcsEventArgs e, ChangedGoodsDataEventHandler handler)
        {
            // デリゲートに登録メソッド有り？
            if (handler != null)
            {
                // 登録メソッド分、コールする。
                foreach (System.Delegate method in handler.GetInvocationList())
                {
                    if (method != null)
                    {
                        try
                        {
                            ((ChangedGoodsDataEventHandler)method)(sender, e);
                        }
                        catch
                        {
                            // メソッドコールが失敗した場合は、削除する。
                            handler -= (ChangedGoodsDataEventHandler)method;
                        }
                    }
                }
            }
        }


        #endregion

        #region ●　単価算出処理
        // 2008.10.02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 単価算出モジュールにより、単価を産出します。
        /// </summary>
        /// <param name="goodsCndtn">商品連結データ抽出条件オブジェクトリスト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <returns></returns>
        private List<UnitPriceCalcRet> CalclationListPrice(GoodsCndtn goodsCndtn, List<GoodsUnitData> goodsUnitDataList)
        {
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>();
            List<UnitPriceCalcParam> unitPriceCalcParamList = new List<UnitPriceCalcParam>();

            // 2008.11.06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // 仕入単価端数処理コードディクショナリ
            Dictionary<int, int> stockUnPrcFrcProcCdDic = new Dictionary<int, int>();
            // 仕入消費税端数処理コードディクショナリ
            Dictionary<int, int> stockCnsTaxFrcProcCdDic = new Dictionary<int, int>();
            // 仕入単価端数処理コード
            int stockUnPrcFrcProcCd = 0;
            // 仕入消費税端数処理コード
            int stockCnsTaxFrcProcCd = 0;
            // 2008.11.06 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            foreach (GoodsUnitData goodsUnitData in goodsUnitDataList)
            {
                if ((goodsUnitData.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(goodsUnitData.GoodsNo)))
                {
                    UnitPriceCalcParam unitPriceCalcParam = new UnitPriceCalcParam();


                    unitPriceCalcParam.BLGoodsCode = goodsUnitData.BLGoodsCode;                     // BLコード
                    unitPriceCalcParam.BLGoodsName = goodsUnitData.BLGoodsFullName;                 // BLコード名称
                    unitPriceCalcParam.BLGroupCode = goodsUnitData.BLGroupCode;                     // BLグループコード
                    unitPriceCalcParam.CountFl = 0;                                                 // 数量
                    unitPriceCalcParam.CustomerCode = goodsCndtn.CustomerCode;                      // 得意先コード
                    unitPriceCalcParam.CustRateGrpCode = goodsCndtn.CustRateGrpCode;                // 得意先掛率グループコード
                    unitPriceCalcParam.GoodsMakerCd = goodsUnitData.GoodsMakerCd;                   // メーカーコード
                    unitPriceCalcParam.GoodsNo = goodsUnitData.GoodsNo;                             // 商品番号
                    unitPriceCalcParam.GoodsRateGrpCode = goodsUnitData.GoodsRateGrpCode;           // 商品掛率グループコード
                    unitPriceCalcParam.GoodsRateRank = goodsUnitData.GoodsRateRank;                 // 商品掛率ランク
                    unitPriceCalcParam.PriceApplyDate = goodsCndtn.PriceApplyDate; 　　　　　       // 適用日
                    unitPriceCalcParam.SalesCnsTaxFrcProcCd = goodsCndtn.SalesCnsTaxFrcProcCd;      // 売上消費税端数処理コード
                    unitPriceCalcParam.SalesUnPrcFrcProcCd = goodsCndtn.SalesUnPrcFrcProcCd;        // 売上単価端数処理コード
                    // 2008.11.04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //unitPriceCalcParam.SectionCode = goodsUnitData.SectionCode;                     // 拠点コード
                    unitPriceCalcParam.SectionCode = goodsCndtn.SectionCode;                        // 拠点コード
                    // 2008.11.04 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    // 2008.11.06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    if (stockCnsTaxFrcProcCdDic.ContainsKey(goodsUnitData.SupplierCd))
                    {
                        stockCnsTaxFrcProcCd = stockCnsTaxFrcProcCdDic[goodsUnitData.SupplierCd];   // 仕入消費税端数処理コード(ディクショナリか仕入先マスタから取得)
                    }
                    else
                    {
                        stockCnsTaxFrcProcCd = this._supplierAcs.GetStockFractionProcCd(this._enterpriseCode, goodsUnitData.SupplierCd, SupplierAcs.StockFracProcMoneyDiv.CnsTaxFrcProcCd);
                        stockCnsTaxFrcProcCdDic.Add(goodsUnitData.SupplierCd, stockCnsTaxFrcProcCd);
                    }
                    unitPriceCalcParam.StockCnsTaxFrcProcCd = stockCnsTaxFrcProcCd;

                    if (stockUnPrcFrcProcCdDic.ContainsKey(goodsUnitData.SupplierCd))
                    {
                        stockUnPrcFrcProcCd = stockUnPrcFrcProcCdDic[goodsUnitData.SupplierCd];     // 仕入単価端数処理コード(ディクショナリか仕入先マスタから取得)
                    }
                    else
                    {
                        stockUnPrcFrcProcCd = this._supplierAcs.GetStockFractionProcCd(this._enterpriseCode, goodsUnitData.SupplierCd, SupplierAcs.StockFracProcMoneyDiv.UnPrcFrcProcCd);
                        stockUnPrcFrcProcCdDic.Add(goodsUnitData.SupplierCd, stockUnPrcFrcProcCd);
                    }
                    // 2008.11.06 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    unitPriceCalcParam.StockUnPrcFrcProcCd = stockUnPrcFrcProcCd;                   // 仕入単価端数処理コード
                    unitPriceCalcParam.SupplierCd = goodsUnitData.SupplierCd;                       // 仕入先コード
                    unitPriceCalcParam.TaxationDivCd = goodsUnitData.TaxationDivCd;                 // 課税区分
                    unitPriceCalcParam.TaxRate = goodsCndtn.TaxRate;                                // 税率
                    unitPriceCalcParam.TotalAmountDispWayCd = goodsCndtn.TotalAmountDispWayCd;      // 総額表示方法区分
                    unitPriceCalcParam.TtlAmntDspRateDivCd = goodsCndtn.TtlAmntDspRateDivCd;	    // 総額表示掛率適用区分
                    unitPriceCalcParam.ConsTaxLayMethod = goodsCndtn.ConsTaxLayMethod;              // 消費税転嫁方式

                    unitPriceCalcParamList.Add(unitPriceCalcParam);
                }
            }

            // 2009.01.19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //this._unitPriceCalculation.CalculateSalesRelevanceUnitPrice(unitPriceCalcParamList, goodsUnitDataList, out unitPriceCalcRetList);
            this._unitPriceCalculation.CalculateListPrice(unitPriceCalcParamList, goodsUnitDataList, out unitPriceCalcRetList);
            // 2009.01.19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            return unitPriceCalcRetList;
        }
        // 2008.10.02 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 単価算出モジュールにより、単価を産出します。
        /// </summary>
        /// <param name="goodsCndtn">商品連結データ抽出条件オブジェクトリスト</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <returns></returns>
        private List<UnitPriceCalcRet> CalclationRelevanceUnitPrice(GoodsCndtn goodsCndtn, List<GoodsUnitData> goodsUnitDataList)
        {
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>();
            List<UnitPriceCalcParam> unitPriceCalcParamList = new List<UnitPriceCalcParam>();

            // 2008.11.06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // 仕入単価端数処理コードディクショナリ
            Dictionary<int, int> stockUnPrcFrcProcCdDic = new Dictionary<int, int>();
            // 仕入消費税端数処理コードディクショナリ
            Dictionary<int, int> stockCnsTaxFrcProcCdDic = new Dictionary<int, int>();
            // 仕入単価端数処理コード
            int stockUnPrcFrcProcCd = 0;
            // 仕入消費税端数処理コード
            int stockCnsTaxFrcProcCd = 0;
            // 2008.11.06 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            foreach (GoodsUnitData goodsUnitData in goodsUnitDataList)
            {
                if ((goodsUnitData.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(goodsUnitData.GoodsNo)))
                {
                    UnitPriceCalcParam unitPriceCalcParam = new UnitPriceCalcParam();


                    unitPriceCalcParam.BLGoodsCode = goodsUnitData.BLGoodsCode;                     // BLコード
                    unitPriceCalcParam.BLGoodsName = goodsUnitData.BLGoodsFullName;                 // BLコード名称
                    unitPriceCalcParam.BLGroupCode = goodsUnitData.BLGroupCode;                     // BLグループコード
                    unitPriceCalcParam.CountFl = 0;                                                 // 数量
                    unitPriceCalcParam.CustomerCode = goodsCndtn.CustomerCode;                      // 得意先コード
                    unitPriceCalcParam.CustRateGrpCode = goodsCndtn.CustRateGrpCode;                // 得意先掛率グループコード
                    unitPriceCalcParam.GoodsMakerCd = goodsUnitData.GoodsMakerCd;                   // メーカーコード
                    unitPriceCalcParam.GoodsNo = goodsUnitData.GoodsNo;                             // 商品番号
                    unitPriceCalcParam.GoodsRateGrpCode = goodsUnitData.GoodsRateGrpCode;           // 商品掛率グループコード
                    unitPriceCalcParam.GoodsRateRank = goodsUnitData.GoodsRateRank;                 // 商品掛率ランク
                    unitPriceCalcParam.PriceApplyDate = goodsCndtn.PriceApplyDate; 　　　　　       // 適用日
                    unitPriceCalcParam.SalesCnsTaxFrcProcCd = goodsCndtn.SalesCnsTaxFrcProcCd;      // 売上消費税端数処理コード
                    unitPriceCalcParam.SalesUnPrcFrcProcCd = goodsCndtn.SalesUnPrcFrcProcCd;        // 売上単価端数処理コード
                    // 2008.11.04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //unitPriceCalcParam.SectionCode = goodsUnitData.SectionCode;                     // 拠点コード
                    unitPriceCalcParam.SectionCode = goodsCndtn.SectionCode;                        // 拠点コード
                    // 2008.11.04 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    // 2008.11.06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    if (stockCnsTaxFrcProcCdDic.ContainsKey(goodsUnitData.SupplierCd))
                    {
                        stockCnsTaxFrcProcCd = stockCnsTaxFrcProcCdDic[goodsUnitData.SupplierCd];   // 仕入消費税端数処理コード(ディクショナリか仕入先マスタから取得)
                    }
                    else
                    {
                        stockCnsTaxFrcProcCd = this._supplierAcs.GetStockFractionProcCd(this._enterpriseCode, goodsUnitData.SupplierCd, SupplierAcs.StockFracProcMoneyDiv.CnsTaxFrcProcCd);
                        stockCnsTaxFrcProcCdDic.Add(goodsUnitData.SupplierCd, stockCnsTaxFrcProcCd);
                    }
                    unitPriceCalcParam.StockCnsTaxFrcProcCd = stockCnsTaxFrcProcCd;

                    if (stockUnPrcFrcProcCdDic.ContainsKey(goodsUnitData.SupplierCd))
                    {
                        stockUnPrcFrcProcCd = stockUnPrcFrcProcCdDic[goodsUnitData.SupplierCd];     // 仕入単価端数処理コード(ディクショナリか仕入先マスタから取得)
                    }
                    else
                    {
                        stockUnPrcFrcProcCd = this._supplierAcs.GetStockFractionProcCd(this._enterpriseCode, goodsUnitData.SupplierCd, SupplierAcs.StockFracProcMoneyDiv.UnPrcFrcProcCd);
                        stockUnPrcFrcProcCdDic.Add(goodsUnitData.SupplierCd, stockUnPrcFrcProcCd);
                    }
                    // 2008.11.06 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    unitPriceCalcParam.StockUnPrcFrcProcCd = stockUnPrcFrcProcCd;                   // 仕入単価端数処理コード
                    unitPriceCalcParam.SupplierCd = goodsUnitData.SupplierCd;                       // 仕入先コード
                    unitPriceCalcParam.TaxationDivCd = goodsUnitData.TaxationDivCd;                 // 課税区分
                    unitPriceCalcParam.TaxRate = goodsCndtn.TaxRate;                                // 税率
                    unitPriceCalcParam.TotalAmountDispWayCd = goodsCndtn.TotalAmountDispWayCd;      // 総額表示方法区分
                    unitPriceCalcParam.TtlAmntDspRateDivCd = goodsCndtn.TtlAmntDspRateDivCd;	    // 総額表示掛率適用区分
                    unitPriceCalcParam.ConsTaxLayMethod = goodsCndtn.ConsTaxLayMethod;              // 消費税転嫁方式

                    unitPriceCalcParamList.Add(unitPriceCalcParam);
                }
            }

            this._unitPriceCalculation.CalculateSalesRelevanceUnitPrice(unitPriceCalcParamList, goodsUnitDataList, out unitPriceCalcRetList);

            return unitPriceCalcRetList;
        }
        // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009.02.10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 対象価格から、税抜金額、税込金額、表示金額を計算します
        /// </summary>
        /// <param name="taxationCode"></param>
        /// <param name="unitPrice"></param>
        /// <param name="priceTaxExc"></param>
        /// <param name="priceTaxInc"></param>
        private void CalcPrice(int taxationCode, double unitPrice, out double priceTaxExc, out double priceTaxInc)
        {
            this.CalclatePrice(unitPrice, taxationCode, this._goodsCndtn.TotalAmountDispWayCd, this._goodsCndtn.ConsTaxLayMethod, this._taxRate, this._goodsCndtn.SalesCnsTaxFrcProcCd, out priceTaxExc, out priceTaxInc);
        }

        /// <summary>
        /// 対象価格から、税抜金額、税込金額、表示金額を計算します
        /// </summary>
        /// <param name="targetPrice">対象価格</param>
        /// <param name="taxationCode">課税区分</param>
        /// <param name="totalAmountDispWayCd">総額表示区分</param>
        /// <param name="consTaxLayMethod">消費税転嫁方式</param>
        /// <param name="taxRate">税率</param>
        /// <param name="salesCnsTaxFrcProcCd">売上消費税端数処理コード</param>
        /// <param name="priceTaxExc">税抜金額</param>
        /// <param name="priceTaxInc">税込金額</param>
        private void CalclatePrice(double targetPrice, int taxationCode, int totalAmountDispWayCd, int consTaxLayMethod, double taxRate, int salesCnsTaxFrcProcCd, out  double priceTaxExc, out  double priceTaxInc)
        {
            GoodsCndtn cndtn = new GoodsCndtn();

            priceTaxExc = 0;
            priceTaxInc = 0;

            if (targetPrice == 0) return;

            int taxFracProcCd = 0;
            double taxFracProcUnit = 0;
            this.GetSalesFractionProcInfo(ctFracProcMoneyDiv_Tax, salesCnsTaxFrcProcCd, targetPrice, out taxFracProcUnit, out taxFracProcCd);
            // 総額表示しない
            if (totalAmountDispWayCd == 0)
            {
                // 課税区分「非課税」、転嫁方式：非課税
                if ((taxationCode == (int)CalculateTax.TaxationCode.TaxNone) || (consTaxLayMethod == (int)ConsTaxLayMethod.TaxExempt))
                {
                    priceTaxExc = targetPrice;
                    priceTaxInc = targetPrice;
                }
                // 課税区分が「課税（内税）」の場合
                else if (taxationCode == (int)CalculateTax.TaxationCode.TaxInc)
                {
                    priceTaxExc = targetPrice - CalculateTax.GetTaxFromPriceInc(taxRate, taxFracProcUnit, taxFracProcCd, targetPrice);
                    priceTaxInc = targetPrice;
                }
                // 課税区分が「課税」の場合
                else if (taxationCode == (int)CalculateTax.TaxationCode.TaxExc)
                {
                    priceTaxExc = targetPrice;
                    priceTaxInc = targetPrice + CalculateTax.GetTaxFromPriceExc(taxRate, taxFracProcUnit, taxFracProcCd, targetPrice);
                }
            }
            // 総額表示する
            else
            {
                // 課税区分「非課税」、転嫁方式：非課税
                if ((taxationCode == (int)CalculateTax.TaxationCode.TaxNone) || (consTaxLayMethod == (int)ConsTaxLayMethod.TaxExempt))
                {
                    priceTaxExc = targetPrice;
                    priceTaxInc = targetPrice;
                }
                // 課税区分が「課税（内税）」の場合
                else if (taxationCode == (int)CalculateTax.TaxationCode.TaxInc)
                {
                    priceTaxExc = targetPrice - CalculateTax.GetTaxFromPriceInc(taxRate, taxFracProcUnit, taxFracProcCd, targetPrice);
                    priceTaxInc = targetPrice;
                }
                // 課税区分が「課税」の場合
                else if (taxationCode == (int)CalculateTax.TaxationCode.TaxExc)
                {
                    priceTaxExc = targetPrice - CalculateTax.GetTaxFromPriceInc(taxRate, taxFracProcUnit, taxFracProcCd, targetPrice);
                    priceTaxInc = targetPrice;
                }
            }
        }

        /// <summary>
        /// 単価算出処理（デリゲートに使用)
        /// </summary>
        /// <param name="goodsUnitDataList"></param>
        /// <param name="unitPriceCalcRetList"></param>
        private void CalculateUnitPrice(List<GoodsUnitData> goodsUnitDataList, out List<UnitPriceCalcRet> unitPriceCalcRetList)
        {
            unitPriceCalcRetList = null;
            if ((goodsUnitDataList == null) || (goodsUnitDataList.Count == 0)) return;
            this.SettingGoodsUnitDataListFromVariousMst(ref goodsUnitDataList);

            //-----------------------------------------------------------------------------
            // 単価情報取得
            //-----------------------------------------------------------------------------
            unitPriceCalcRetList = this.CalclationListPrice(this._goodsCndtn, goodsUnitDataList);
        }

        /// <summary>
        /// 単価算出処理（デリゲートに使用)
        /// </summary>
        /// <param name="goodsUnitDataList"></param>
        /// <param name="unitPriceCalcRetList"></param>
        private void CalculateRelevanceUnitPrice(List<GoodsUnitData> goodsUnitDataList, out List<UnitPriceCalcRet> unitPriceCalcRetList)
        {
            unitPriceCalcRetList = null;
            if ((goodsUnitDataList == null) || (goodsUnitDataList.Count == 0)) return;
            this.SettingGoodsUnitDataListFromVariousMst(ref goodsUnitDataList);

            //-----------------------------------------------------------------------------
            // 単価情報取得
            //-----------------------------------------------------------------------------
            unitPriceCalcRetList = this.CalclationRelevanceUnitPrice(this._goodsCndtn, goodsUnitDataList);
        }

        /// <summary>
        /// 消費税転嫁方式
        /// </summary>
        public enum ConsTaxLayMethod : int
        {
            /// <summary>伝票転嫁</summary>
            SlipLay = 0,
            /// <summary>明細転嫁</summary>
            DetailLay = 1,
            /// <summary>請求親</summary>
            DemandParentLay = 2,
            /// <summary>請求子</summary>
            DemandChildLay = 3,
            /// <summary>非課税</summary>
            TaxExempt = 9,
        }

        /// <summary>
        /// 総額表示方法区分
        /// </summary>
        public enum TotalAmountDispWayCd : int
        {
            /// <summary>総額表示しない</summary>
            NoTotalAmount = 0,
            /// <summary>総額表示する</summary>
            TotalAmount = 1,
        }
        // 2009.02.10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009.02.24 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 離島価格反映処理（デリゲートに使用）
        /// </summary>
        /// <param name="taxationCode"></param>
        /// <param name="goodsMakerCd"></param>
        /// <param name="offerKubun"></param>
        /// <param name="unitPrice"></param>
        private void ReflectIsolIsland(int taxationCode, int goodsMakerCd, int offerKubun, ref double unitPrice)
        {
            if (offerKubun >= 3) // 提供分のみ
            {
                // 離島価格反映
                IsolIslandPrcWork isolIslandPrc = this.GetIsolIslandPrc(this._goodsCndtn.SectionCode, goodsMakerCd, unitPrice);
                if (isolIslandPrc != null) unitPrice = this.GetIsolIslandPrice(this._goodsCndtn.SectionCode, taxationCode, isolIslandPrc, unitPrice);
            }
        }

        /// <summary>
        /// 離島価格情報取得処理
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <param name="goodsMakerCode"></param>
        /// <param name="unitPrice"></param>
        /// <returns></returns>
        public IsolIslandPrcWork GetIsolIslandPrc(string sectionCode, int goodsMakerCode, double unitPrice)
        {
            return _isolIslandList.Find(
                delegate(IsolIslandPrcWork iso)
                {
                    if ((iso.UpperLimitPrice >= unitPrice) &&
                        (iso.MakerCode == goodsMakerCode) &&
                        (iso.SectionCode.Trim() == sectionCode.Trim()))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );
        }

        /// <summary>
        /// 離島価格取得処理
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <param name="taxationDivCd"></param>
        /// <param name="isolIslandPrc"></param>
        /// <param name="targetPrice"></param>
        /// <returns></returns>
        private double GetIsolIslandPrice(string sectionCode, int taxationDivCd, IsolIslandPrcWork isolIslandPrc, double targetPrice)
        {
            double retPrice = targetPrice;
            double unitPriceTaxExc = 0; // 税抜金額
            double unitPriceTaxInc = 0; // 税込金額

            // 消費税端数処理コード(得意先マスタより取得)
            int cnsTaxFrcProcCd = this._goodsCndtn.SalesCnsTaxFrcProcCd;
            int taxFracProcDiv = 0; // 消費税端数処理区分
            double taxFracProcUnit = 0; // 消費税端数処理単位
            this.GetSalesFractionProcInfo(ctFracProcMoneyDiv_Tax, cnsTaxFrcProcCd, targetPrice, out taxFracProcUnit, out taxFracProcDiv);

            int fracProcDiv = isolIslandPrc.FractionProcCd; // 金額端数処理区分
            double fracProcUnit = isolIslandPrc.FractionProcUnit; // 金額端数処理単位

            this._unitPriceCalculation.CalculateUnitPriceByRate(UnitPriceCalculation.UnitPriceKind.ListPrice,
                                        UnitPriceCalculation.UnitPrcCalcDiv.RateVal,
                                        (int)TotalAmountDispWayCd.NoTotalAmount,
                                        this._goodsCndtn.TtlAmntDspRateDivCd,
                                        0,
                                        taxationDivCd,
                                        targetPrice,
                                        this._taxRate,
                                        taxFracProcUnit,
                                        taxFracProcDiv,
                                        isolIslandPrc.UpRate,
                                        ref fracProcUnit,
                                        ref fracProcDiv,
                                        out unitPriceTaxExc,
                                        out unitPriceTaxInc);

            switch ((CalculateTax.TaxationCode)taxationDivCd)
            {
                case CalculateTax.TaxationCode.TaxExc:
                    retPrice = unitPriceTaxExc;
                    break;
                case CalculateTax.TaxationCode.TaxInc:
                    retPrice = unitPriceTaxInc;
                    break;
                case CalculateTax.TaxationCode.TaxNone:
                    retPrice = unitPriceTaxExc;
                    break;
            }

            return retPrice;
        }

        /// <summary>
        /// 離島価格情報比較クラス(拠点コード(昇順)・メーカーコード(昇順)・上限金額(昇順))
        /// </summary>
        private class IsolIslandPrcWorkComparer : Comparer<IsolIslandPrcWork>
        {
            public override int Compare(IsolIslandPrcWork x, IsolIslandPrcWork y)
            {
                int result = x.SectionCode.CompareTo(y.SectionCode);
                if (result != 0) return result;

                result = x.MakerCode.CompareTo(y.MakerCode);
                if (result != 0) return result;

                result = x.UpperLimitPrice.CompareTo(y.UpperLimitPrice);
                return result;
            }
        }
        // 2009.02.24 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        #endregion
        #endregion

        // ===============================================================================
        // 例外クラス
        // ===============================================================================
        #region GoodsAcsException例外
        /// <summary>
        /// 商品マスタアクセスクラス例外クラス
        /// </summary>
        public class GoodsAcsException : ApplicationException
        {
            private int _status;

            #region constructor
            /// <summary>
            /// 商品マスタアクセスクラス例外クラス　コンストラクタ
            /// </summary>
            /// <param name="message"></param>
            /// <param name="status"></param>
            public GoodsAcsException(string message, int status)
                : base(message)
            {
                this._status = status;
            }
            #endregion

            #region public property
            /// <summary>
            /// ステータスプロパティ
            /// </summary>
            public int Status
            {
                get { return this._status; }
            }
            #endregion
        }
        #endregion

        // ===============================================================================
        // IGeneralGuideDataメンバ
        // ===============================================================================
        #region IGeneralGuideData メンバ
        /// <summary>
        /// 汎用ガイドデータ取得(IGeneralGuidDataインターフェース実装)
        /// </summary>
        /// <param name="mode"></param>
        /// <param name="inParm"></param>
        /// <param name="guideList"></param>
        /// <returns>STATUS[0:取得成功,1:キャンセル,4:レコード無し]</returns>
        /// <remarks>
        /// <br>Note		: 汎用ガイド設定用データを取得します。</br>
        /// <br>Programmer	: 18012 Y.Sasaki</br>
        /// <br>Date		: 2007.01.20</br>
        /// </remarks>
        public int GetGuideData(int mode, Hashtable inParm, ref System.Data.DataSet guideList)
        {
            int status = -1;

            switch (_callGuideMode)
            {
                // BL商品コードガイド
                case (int)emCallGuideMode.BLGoodsCdGuide:
                    {
                        // BL商品コード用ガイドデータ作成
                        status = MakeBLCodeGuideData(ref guideList);
                        break;
                    }
                // メーカーガイド
                case (int)emCallGuideMode.MakerGuide:
                    {
                        // メーカーガイドデータ作成
                        status = MakeMakerGuideData(ref guideList);
                        break;
                    }
                default:
                    break;
            }

            switch (status)
            {
                case (int)ConstantManagement.MethodResult.ctFNC_NORMAL:
                    {
                        break;
                    }
                case (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN:
                    {
                        status = 4;
                        break;
                    }
                default:
                    status = -1;
                    break;
            }

            return status;
        }
        #endregion

        #region ■DEBUGログ出力
        /// <summary>
        /// ログ出力(DEBUG)処理
        /// </summary>
        /// <param name="pMsg"></param>
        public static void LogWrite(string pMsg)
        {
#if DEBUG
            System.IO.FileStream _fs;										// ファイルストリーム
            System.IO.StreamWriter _sw;										// ストリームwriter
            _fs = new FileStream("MAKHN04112A.Log", FileMode.Append, FileAccess.Write, FileShare.Write);
            _sw = new System.IO.StreamWriter(_fs, System.Text.Encoding.GetEncoding("shift_jis"));
            DateTime edt = DateTime.Now;
            //yyyy/MM/dd hh:mm:ss
            _sw.WriteLine(string.Format("{0,-19} {1,-5} ==> {2}", edt, edt.Millisecond, pMsg));
            if (_sw != null)
                _sw.Close();
            if (_fs != null)
                _fs.Close();
#endif
        }

        /// <summary>
        /// ログ出力(DEBUG)処理
        /// </summary>
        /// <param name="className"></param>
        /// <param name="methodName"></param>
        /// <param name="pMsg"></param>
        public static void LogWrite(string className, string methodName, string pMsg)
        {
#if DEBUG
            System.IO.FileStream _fs;										// ファイルストリーム
            System.IO.StreamWriter _sw;										// ストリームwriter
            _fs = new FileStream("MAKHN04112A.Log", FileMode.Append, FileAccess.Write, FileShare.Write);
            _sw = new System.IO.StreamWriter(_fs, System.Text.Encoding.GetEncoding("shift_jis"));
            DateTime edt = DateTime.Now;
            //yyyy/MM/dd hh:mm:ss
            _sw.WriteLine(string.Format("{0,-19} {1,-5} ==> {2,-70} {3}", edt, edt.Millisecond, className + "." + methodName, pMsg));
            if (_sw != null)
                _sw.Close();
            if (_fs != null)
                _fs.Close();
#endif
        }

        /// <summary>
        /// ログ出力(DEBUG)処理
        /// </summary>
        /// <param name="className"></param>
        /// <param name="methodName"></param>
        /// <param name="pMsg"></param>
        /// <param name="count"></param>
        public static void LogWrite(string className, string methodName, string pMsg, string count)
        {
#if DEBUG
            System.IO.FileStream _fs;										// ファイルストリーム
            System.IO.StreamWriter _sw;										// ストリームwriter
            _fs = new FileStream("MAKHN04112A.Log", FileMode.Append, FileAccess.Write, FileShare.Write);
            _sw = new System.IO.StreamWriter(_fs, System.Text.Encoding.GetEncoding("shift_jis"));
            DateTime edt = DateTime.Now;
            //yyyy/MM/dd hh:mm:ss
            _sw.WriteLine(string.Format("{0,-19} {1,-5} ==> {2,-70} {3} {4}", edt, edt.Millisecond, className + "." + methodName, pMsg, count));
            if (_sw != null)
                _sw.Close();
            if (_fs != null)
                _fs.Close();
#endif
        }

        /// <summary>
        /// ログ出力(DEBUG)処理
        /// </summary>
        /// <param name="className"></param>
        /// <param name="methodName"></param>
        /// <param name="pMsg"></param>
        /// <param name="count1"></param>
        /// <param name="count2"></param>
        public static void LogWrite(string className, string methodName, string pMsg, string count1, string count2)
        {
#if DEBUG
            System.IO.FileStream _fs;										// ファイルストリーム
            System.IO.StreamWriter _sw;										// ストリームwriter
            _fs = new FileStream("MAKHN04112A.Log", FileMode.Append, FileAccess.Write, FileShare.Write);
            _sw = new System.IO.StreamWriter(_fs, System.Text.Encoding.GetEncoding("shift_jis"));
            DateTime edt = DateTime.Now;
            //yyyy/MM/dd hh:mm:ss
            _sw.WriteLine(string.Format("{0,-19} {1,-5} ==> {2,-70} {3} {4} {5}", edt, edt.Millisecond, className + "." + methodName, pMsg, count1, count2));
            if (_sw != null)
                _sw.Close();
            if (_fs != null)
                _fs.Close();
#endif
        }

        /// <summary>
        /// ログ出力(DEBUG)処理
        /// </summary>
        /// <param name="className"></param>
        /// <param name="methodName"></param>
        /// <param name="pMsg"></param>
        /// <param name="count1"></param>
        /// <param name="count2"></param>
        /// <param name="count3"></param>
        public static void LogWrite(string className, string methodName, string pMsg, string count1, string count2, string count3)
        {
#if DEBUG
            System.IO.FileStream _fs;										// ファイルストリーム
            System.IO.StreamWriter _sw;										// ストリームwriter
            _fs = new FileStream("MAKHN04112A.Log", FileMode.Append, FileAccess.Write, FileShare.Write);
            _sw = new System.IO.StreamWriter(_fs, System.Text.Encoding.GetEncoding("shift_jis"));
            DateTime edt = DateTime.Now;
            //yyyy/MM/dd hh:mm:ss
            _sw.WriteLine(string.Format("{0,-19} {1,-5} ==> {2,-70} {3} {4} {5} {6}", edt, edt.Millisecond, className + "." + methodName, pMsg, count1, count2, count3));
            if (_sw != null)
                _sw.Close();
            if (_fs != null)
                _fs.Close();
#endif
        }
        #endregion

        // --- ADD 2011/07/29 ---------->>>>>
        # region 優先倉庫設定
        /// <summary>
        /// 拠点制御アクセスクラスインスタンス化処理
        /// </summary>
        public void CreateSecInfoAcs()
        {
            if (_secInfoAcs == null)
            {
                _secInfoAcs = new SecInfoAcs();
            }

            // ログイン担当拠点情報の取得
            if (_secInfoAcs.SecInfoSet == null)
            {
                throw new ApplicationException(MESSAGE_NONOWNSECTION);
            }
        }

        /// <summary>
        /// 自拠点優先倉庫コード取得処理
        /// </summary>
        /// <returns>自拠点優先倉庫コード</returns>
        private List<string> GetSectWarehouseCd()
        {
            // 拠点制御アクセスクラスインスタンス化処理
            this.CreateSecInfoAcs();

            SecInfoSet secInfoSet;
            _secInfoAcs.GetSecInfo(this._loginSectionCode, out secInfoSet);
            if (secInfoSet != null)
            {
                _sectWarehouseCdList.Add(secInfoSet.SectWarehouseCd1.Trim());
                _sectWarehouseCdList.Add(secInfoSet.SectWarehouseCd2.Trim());
                _sectWarehouseCdList.Add(secInfoSet.SectWarehouseCd3.Trim());
            }
            return this._sectWarehouseCdList;
        }
        # endregion
        // --- ADD 2011/07/29  ----------<<<<<

        // --- ADD yangyi 2013/03/18 for Redmine#34962 ------->>>>>>>>>>>
        /// <summary>
        /// 商品検索(商品在庫一括登録修正用)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="logicalMode">論理削除区分</param>
        /// <param name="maxCount">取得ＭＡＸ件数(ゼロの場合、無制限)</param>
        /// <param name="targetDiv">対象区分</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>検索対象はユーザー登録分のみ</remarks>
        public int Search(GoodsCndtn cndtn, int maxCount, int targetDiv, ConstantManagement.LogicalMode logicalMode, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            return this.SearchProc(cndtn, maxCount, targetDiv, logicalMode, 0, out goodsUnitDataList, out msg);
        }

        /// <summary>
        /// 商品検索(商品在庫一括登録修正用)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="maxCount">取得ＭＡＸ件数(ゼロの場合、無制限)</param>
        /// <param name="targetDiv">対象区分</param>
        /// <param name="logicalMode">論理削除データ取得区分</param>
        /// <param name="stockSearchDiv">0：在庫の取得も行う 1:在庫の取得は行わない</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>検索対象はユーザー登録分のみ</remarks>
        private int SearchProc(GoodsCndtn cndtn, int maxCount, int targetDiv, ConstantManagement.LogicalMode logicalMode, int stockSearchDiv, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        {
            //----------------------------------------------------------------------------
            // 初期処理
            //----------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            Dictionary<string, GoodsUnitData> wrkRet = new Dictionary<string, GoodsUnitData>();
            goodsUnitDataList = new List<GoodsUnitData>();

            //----------------------------------------------------------------------------
            // 初期値データが取得されていなければ初期値データを取得する
            //----------------------------------------------------------------------------
            if (!_isInitialSearch)
            {
                status = this.SearchInitial(cndtn.EnterpriseCode, cndtn.SectionCode, out msg);
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        return status;
                }
            }

            //----------------------------------------------------------------------------
            // 商品連結データ取得(ユーザー登録分)
            //----------------------------------------------------------------------------
            List<GoodsUnitData> goodsUList;

            status = this.SearchUserDB(cndtn, maxCount,targetDiv,logicalMode, stockSearchDiv, out goodsUList, out msg);

            switch (status)
            {
                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:

                    //----------------------------------------------------------------------------
                    // 商品連結データ不足情報設定
                    //----------------------------------------------------------------------------
                    this.SettingGoodsUnitDataListFromVariousMst(cndtn, ref goodsUList);

                    break;
                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                    break;
                default:
                    return status;
            }

            //----------------------------------------------------------------------------
            // ステータス判定
            //----------------------------------------------------------------------------
            if (goodsUList == null || goodsUList.Count == 0)
            {
                msg = "該当する商品はみつかりませんでした";
                return (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            }
            else
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }

            //----------------------------------------------------------------------------
            // 商品連結データオブジェクトリスト生成
            //----------------------------------------------------------------------------
            goodsUnitDataList = goodsUList;

            return status;
        }

        /// <summary>
        /// 商品検索(ユーザー登録分) (商品在庫一括登録修正用)
        /// </summary>
        /// <param name="cndtn">商品検索条件データオブジェクト</param>
        /// <param name="maxCount">取得MAX件数</param>
        /// <param name="targetDiv">対象区分</param>
        /// <param name="logicalMode">論理削除モード</param>
        /// <param name="stockSearchDiv">0：在庫の取得も行う 1:在庫の取得は行わない</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="msg">エラーメッセージ</param>
        /// <returns>ConstantManagement.DB_Status</returns>
        /// <remarks>
        /// <br>Update Note: 2015/08/17 田建委</br>
        /// <br>管理番号   : 11170052-00</br>
        /// <br>           : Redmine#47036 商品在庫一括登録修正 管理拠点・倉庫の追加</br>
        /// </remarks>
        private int SearchUserDB(GoodsCndtn cndtn, int maxCount, int targetDiv, ConstantManagement.LogicalMode logicalMode, int stockSearchDiv, out List<GoodsUnitData> goodsUnitDataList, out string msg)
        // -- UPD 2011/03/17 ----------------------------------------------<<<
        {
            //----------------------------------------------------------------------------
            // 初期処理
            //----------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            int status2 = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            msg = "";
            goodsUnitDataList = new List<GoodsUnitData>();

            try
            {
                if (this._iGoodsURelationDataDB == null) this._iGoodsURelationDataDB = MediationUsrJoinPartsSearchDB.GetRemoteObject();
                if (this._goodsURelationDataLcDB == null) this._goodsURelationDataLcDB = new GoodsURelationDataLcDB();

                // 商品検索条件ワークオブジェクト取得
                GoodsUCndtnWork goodsUCndtnWork = CopyToGoodsUCondtnWorkFromGoodsCondtn(cndtn);

                // 取得したい検索結果データクラスを設定
                CustomSerializeArrayList workList = new CustomSerializeArrayList();

                // 商品連結データクラス
                workList.Add(new GoodsUnitDataWork());

                if (workList.Count == 0) return (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

                // オブジェクト型へセット
                object retObj = workList;

                //----------------------------------------------------------------------------
                // 商品検索
                //----------------------------------------------------------------------------
                if (_isLocalDBRead)
                {
                    status = this._goodsURelationDataLcDB.Search(ref retObj, goodsUCndtnWork, 0, logicalMode);
                }
                else
                {
                    if (stockSearchDiv == 0)
                    {
                        //在庫取得あり
                        status = this._iGoodsURelationDataDB.Search(ref retObj, goodsUCndtnWork, 0, maxCount, targetDiv, logicalMode);
                    }
                    else
                    {
                        status = this._iGoodsURelationDataDB.UsrGoodsOnlySearch(ref retObj, goodsUCndtnWork, 0, maxCount, logicalMode);
                    }
                }

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            workList = retObj as CustomSerializeArrayList;

                            // 取得データを変換
                            if (workList == null)
                            {
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                return status;
                            }

                            //----------------------------------------------------------------------------
                            // 商品連結データオブジェクトリスト取得
                            //----------------------------------------------------------------------------
                            List<GoodsUnitData> wkGoodsUnitDataList;

                            List<Rate> rateList;    // 読み捨てる
                            status2 = GetGoodsUnitDataWorkToUIdata(workList, out wkGoodsUnitDataList, out rateList);

                            switch (status2)
                            {
                                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                    {
                                        foreach (GoodsUnitData gud in wkGoodsUnitDataList)
                                        {
                                            goodsUnitDataList.Add(gud.Clone());
                                        }

                                        break;
                                    }
                                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                                case (int)ConstantManagement.DB_Status.ctDB_EOF:
                                    return status2;
                                default:
                                    msg = "商品データ(ユーザー分)の取得でエラーが発生しました";
                                    return status2;
                            }
                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        break;
                    default:
                        msg = "商品データ(ユーザー分)の取得に失敗しました";
                        break;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                msg = "商品検索で例外が発生しました[" + ex.Message + "]";
                msg = ex.Message;
                this._iGoodsURelationDataDB = null;
                this._goodsURelationDataLcDB = null;
            }

            return status;
        }
        // --- ADD yangyi 2013/03/18 for Redmine#34962 -------<<<<<<<<<<<
    }
}

