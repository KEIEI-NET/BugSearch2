//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.1433
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.Controller {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InventoryUpdateDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InventoryUpdateDataSet : global::System.Data.DataSet {
        
        private InventoryDataTable tableInventory;
        
        private ErrorDataDataTable tableErrorData;
        
        private InventoryNumberInfoDataTable tableInventoryNumberInfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InventoryUpdateDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InventoryUpdateDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Inventory"] != null)) {
                    base.Tables.Add(new InventoryDataTable(ds.Tables["Inventory"]));
                }
                if ((ds.Tables["ErrorData"] != null)) {
                    base.Tables.Add(new ErrorDataDataTable(ds.Tables["ErrorData"]));
                }
                if ((ds.Tables["InventoryNumberInfo"] != null)) {
                    base.Tables.Add(new InventoryNumberInfoDataTable(ds.Tables["InventoryNumberInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InventoryDataTable Inventory {
            get {
                return this.tableInventory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ErrorDataDataTable ErrorData {
            get {
                return this.tableErrorData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InventoryNumberInfoDataTable InventoryNumberInfo {
            get {
                return this.tableInventoryNumberInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            InventoryUpdateDataSet cln = ((InventoryUpdateDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Inventory"] != null)) {
                    base.Tables.Add(new InventoryDataTable(ds.Tables["Inventory"]));
                }
                if ((ds.Tables["ErrorData"] != null)) {
                    base.Tables.Add(new ErrorDataDataTable(ds.Tables["ErrorData"]));
                }
                if ((ds.Tables["InventoryNumberInfo"] != null)) {
                    base.Tables.Add(new InventoryNumberInfoDataTable(ds.Tables["InventoryNumberInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableInventory = ((InventoryDataTable)(base.Tables["Inventory"]));
            if ((initTable == true)) {
                if ((this.tableInventory != null)) {
                    this.tableInventory.InitVars();
                }
            }
            this.tableErrorData = ((ErrorDataDataTable)(base.Tables["ErrorData"]));
            if ((initTable == true)) {
                if ((this.tableErrorData != null)) {
                    this.tableErrorData.InitVars();
                }
            }
            this.tableInventoryNumberInfo = ((InventoryNumberInfoDataTable)(base.Tables["InventoryNumberInfo"]));
            if ((initTable == true)) {
                if ((this.tableInventoryNumberInfo != null)) {
                    this.tableInventoryNumberInfo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "InventoryUpdateDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SalesBulkUpdateDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableInventory = new InventoryDataTable();
            base.Tables.Add(this.tableInventory);
            this.tableErrorData = new ErrorDataDataTable();
            base.Tables.Add(this.tableErrorData);
            this.tableInventoryNumberInfo = new InventoryNumberInfoDataTable();
            base.Tables.Add(this.tableInventoryNumberInfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInventory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeErrorData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInventoryNumberInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InventoryUpdateDataSet ds = new InventoryUpdateDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void InventoryRowChangeEventHandler(object sender, InventoryRowChangeEvent e);
        
        public delegate void ErrorDataRowChangeEventHandler(object sender, ErrorDataRowChangeEvent e);
        
        public delegate void InventoryNumberInfoRowChangeEventHandler(object sender, InventoryNumberInfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InventoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRowNo;
            
            private global::System.Data.DataColumn columnRowNoDisplay;
            
            private global::System.Data.DataColumn columnEnterpriseCode;
            
            private global::System.Data.DataColumn columnGoodsMakerCd;
            
            private global::System.Data.DataColumn columnGoodsNo;
            
            private global::System.Data.DataColumn columnGoodsName;
            
            private global::System.Data.DataColumn columnInventorySeqNo;
            
            private global::System.Data.DataColumn columnStockUnitPrice;
            
            private global::System.Data.DataColumn columnStockTotal;
            
            private global::System.Data.DataColumn columnInventoryStockTotal;
            
            private global::System.Data.DataColumn columnInventoryStockCnt;
            
            private global::System.Data.DataColumn columnInventoryTolerancCnt;
            
            private global::System.Data.DataColumn columnSectionCode;
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            private global::System.Data.DataColumn columnWarehouseShelfNo;
            
            private global::System.Data.DataColumn columnCustomerCode;
            
            private global::System.Data.DataColumn columnShipCustomerCode;
            
            private global::System.Data.DataColumn columnStockDiv;
            
            private global::System.Data.DataColumn columnStockDivName;
            
            private global::System.Data.DataColumn columnStockState;
            
            private global::System.Data.DataColumn columnInventoryNewDiv;
            
            private global::System.Data.DataColumn columnWarehouseName;
            
            private global::System.Data.DataColumn columnInventoryDataUpdateWork;
            
            private global::System.Data.DataColumn columnProcResultState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryDataTable() {
                this.TableName = "Inventory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InventoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InventoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowNoColumn {
                get {
                    return this.columnRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowNoDisplayColumn {
                get {
                    return this.columnRowNoDisplay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnterpriseCodeColumn {
                get {
                    return this.columnEnterpriseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsMakerCdColumn {
                get {
                    return this.columnGoodsMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNoColumn {
                get {
                    return this.columnGoodsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNameColumn {
                get {
                    return this.columnGoodsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventorySeqNoColumn {
                get {
                    return this.columnInventorySeqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockUnitPriceColumn {
                get {
                    return this.columnStockUnitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockTotalColumn {
                get {
                    return this.columnStockTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryStockTotalColumn {
                get {
                    return this.columnInventoryStockTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryStockCntColumn {
                get {
                    return this.columnInventoryStockCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryTolerancCntColumn {
                get {
                    return this.columnInventoryTolerancCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionCodeColumn {
                get {
                    return this.columnSectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseShelfNoColumn {
                get {
                    return this.columnWarehouseShelfNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerCodeColumn {
                get {
                    return this.columnCustomerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipCustomerCodeColumn {
                get {
                    return this.columnShipCustomerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockDivColumn {
                get {
                    return this.columnStockDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockDivNameColumn {
                get {
                    return this.columnStockDivName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockStateColumn {
                get {
                    return this.columnStockState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryNewDivColumn {
                get {
                    return this.columnInventoryNewDiv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseNameColumn {
                get {
                    return this.columnWarehouseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryDataUpdateWorkColumn {
                get {
                    return this.columnInventoryDataUpdateWork;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcResultStateColumn {
                get {
                    return this.columnProcResultState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryRow this[int index] {
                get {
                    return ((InventoryRow)(this.Rows[index]));
                }
            }
            
            public event InventoryRowChangeEventHandler InventoryRowChanging;
            
            public event InventoryRowChangeEventHandler InventoryRowChanged;
            
            public event InventoryRowChangeEventHandler InventoryRowDeleting;
            
            public event InventoryRowChangeEventHandler InventoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInventoryRow(InventoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryRow AddInventoryRow(
                        int RowNoDisplay, 
                        string EnterpriseCode, 
                        int GoodsMakerCd, 
                        string GoodsNo, 
                        string GoodsName, 
                        int InventorySeqNo, 
                        double StockUnitPrice, 
                        double StockTotal, 
                        double InventoryStockTotal, 
                        double InventoryStockCnt, 
                        double InventoryTolerancCnt, 
                        string SectionCode, 
                        string WarehouseCode, 
                        string WarehouseShelfNo, 
                        int CustomerCode, 
                        int ShipCustomerCode, 
                        int StockDiv, 
                        string StockDivName, 
                        int StockState, 
                        int InventoryNewDiv, 
                        string WarehouseName, 
                        object InventoryDataUpdateWork, 
                        int ProcResultState) {
                InventoryRow rowInventoryRow = ((InventoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RowNoDisplay,
                        EnterpriseCode,
                        GoodsMakerCd,
                        GoodsNo,
                        GoodsName,
                        InventorySeqNo,
                        StockUnitPrice,
                        StockTotal,
                        InventoryStockTotal,
                        InventoryStockCnt,
                        InventoryTolerancCnt,
                        SectionCode,
                        WarehouseCode,
                        WarehouseShelfNo,
                        CustomerCode,
                        ShipCustomerCode,
                        StockDiv,
                        StockDivName,
                        StockState,
                        InventoryNewDiv,
                        WarehouseName,
                        InventoryDataUpdateWork,
                        ProcResultState};
                rowInventoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInventoryRow);
                return rowInventoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryRow FindByEnterpriseCodeGoodsMakerCdGoodsNoInventorySeqNoStockUnitPriceSectionCodeWarehouseCodeCustomerCodeShipCustomerCodeStockDivStockStateInventoryNewDiv(string EnterpriseCode, int GoodsMakerCd, string GoodsNo, int InventorySeqNo, double StockUnitPrice, string SectionCode, string WarehouseCode, int CustomerCode, int ShipCustomerCode, int StockDiv, int StockState, int InventoryNewDiv) {
                return ((InventoryRow)(this.Rows.Find(new object[] {
                            EnterpriseCode,
                            GoodsMakerCd,
                            GoodsNo,
                            InventorySeqNo,
                            StockUnitPrice,
                            SectionCode,
                            WarehouseCode,
                            CustomerCode,
                            ShipCustomerCode,
                            StockDiv,
                            StockState,
                            InventoryNewDiv})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InventoryDataTable cln = ((InventoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InventoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRowNo = base.Columns["RowNo"];
                this.columnRowNoDisplay = base.Columns["RowNoDisplay"];
                this.columnEnterpriseCode = base.Columns["EnterpriseCode"];
                this.columnGoodsMakerCd = base.Columns["GoodsMakerCd"];
                this.columnGoodsNo = base.Columns["GoodsNo"];
                this.columnGoodsName = base.Columns["GoodsName"];
                this.columnInventorySeqNo = base.Columns["InventorySeqNo"];
                this.columnStockUnitPrice = base.Columns["StockUnitPrice"];
                this.columnStockTotal = base.Columns["StockTotal"];
                this.columnInventoryStockTotal = base.Columns["InventoryStockTotal"];
                this.columnInventoryStockCnt = base.Columns["InventoryStockCnt"];
                this.columnInventoryTolerancCnt = base.Columns["InventoryTolerancCnt"];
                this.columnSectionCode = base.Columns["SectionCode"];
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
                this.columnWarehouseShelfNo = base.Columns["WarehouseShelfNo"];
                this.columnCustomerCode = base.Columns["CustomerCode"];
                this.columnShipCustomerCode = base.Columns["ShipCustomerCode"];
                this.columnStockDiv = base.Columns["StockDiv"];
                this.columnStockDivName = base.Columns["StockDivName"];
                this.columnStockState = base.Columns["StockState"];
                this.columnInventoryNewDiv = base.Columns["InventoryNewDiv"];
                this.columnWarehouseName = base.Columns["WarehouseName"];
                this.columnInventoryDataUpdateWork = base.Columns["InventoryDataUpdateWork"];
                this.columnProcResultState = base.Columns["ProcResultState"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRowNo = new global::System.Data.DataColumn("RowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNo);
                this.columnRowNoDisplay = new global::System.Data.DataColumn("RowNoDisplay", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNoDisplay);
                this.columnEnterpriseCode = new global::System.Data.DataColumn("EnterpriseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnterpriseCode);
                this.columnGoodsMakerCd = new global::System.Data.DataColumn("GoodsMakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsMakerCd);
                this.columnGoodsNo = new global::System.Data.DataColumn("GoodsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsNo);
                this.columnGoodsName = new global::System.Data.DataColumn("GoodsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsName);
                this.columnInventorySeqNo = new global::System.Data.DataColumn("InventorySeqNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventorySeqNo);
                this.columnStockUnitPrice = new global::System.Data.DataColumn("StockUnitPrice", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockUnitPrice);
                this.columnStockTotal = new global::System.Data.DataColumn("StockTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockTotal);
                this.columnInventoryStockTotal = new global::System.Data.DataColumn("InventoryStockTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryStockTotal);
                this.columnInventoryStockCnt = new global::System.Data.DataColumn("InventoryStockCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryStockCnt);
                this.columnInventoryTolerancCnt = new global::System.Data.DataColumn("InventoryTolerancCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryTolerancCnt);
                this.columnSectionCode = new global::System.Data.DataColumn("SectionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionCode);
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.columnWarehouseShelfNo = new global::System.Data.DataColumn("WarehouseShelfNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseShelfNo);
                this.columnCustomerCode = new global::System.Data.DataColumn("CustomerCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerCode);
                this.columnShipCustomerCode = new global::System.Data.DataColumn("ShipCustomerCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipCustomerCode);
                this.columnStockDiv = new global::System.Data.DataColumn("StockDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockDiv);
                this.columnStockDivName = new global::System.Data.DataColumn("StockDivName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockDivName);
                this.columnStockState = new global::System.Data.DataColumn("StockState", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockState);
                this.columnInventoryNewDiv = new global::System.Data.DataColumn("InventoryNewDiv", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryNewDiv);
                this.columnWarehouseName = new global::System.Data.DataColumn("WarehouseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseName);
                this.columnInventoryDataUpdateWork = new global::System.Data.DataColumn("InventoryDataUpdateWork", typeof(object), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryDataUpdateWork);
                this.columnProcResultState = new global::System.Data.DataColumn("ProcResultState", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcResultState);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEnterpriseCode,
                                this.columnGoodsMakerCd,
                                this.columnGoodsNo,
                                this.columnInventorySeqNo,
                                this.columnStockUnitPrice,
                                this.columnSectionCode,
                                this.columnWarehouseCode,
                                this.columnCustomerCode,
                                this.columnShipCustomerCode,
                                this.columnStockDiv,
                                this.columnStockState,
                                this.columnInventoryNewDiv}, true));
                this.columnRowNo.AutoIncrement = true;
                this.columnRowNo.AutoIncrementSeed = 1;
                this.columnRowNo.AllowDBNull = false;
                this.columnRowNoDisplay.Caption = "№";
                this.columnRowNoDisplay.DefaultValue = ((int)(0));
                this.columnEnterpriseCode.AllowDBNull = false;
                this.columnEnterpriseCode.DefaultValue = ((string)(""));
                this.columnGoodsMakerCd.AllowDBNull = false;
                this.columnGoodsMakerCd.DefaultValue = ((int)(0));
                this.columnGoodsNo.AllowDBNull = false;
                this.columnGoodsNo.Caption = "品番";
                this.columnGoodsNo.DefaultValue = ((string)(""));
                this.columnGoodsName.Caption = "品名";
                this.columnGoodsName.DefaultValue = ((string)(""));
                this.columnInventorySeqNo.AllowDBNull = false;
                this.columnInventorySeqNo.Caption = "棚卸通番";
                this.columnInventorySeqNo.DefaultValue = ((int)(0));
                this.columnStockUnitPrice.AllowDBNull = false;
                this.columnStockUnitPrice.Caption = "原単価";
                this.columnStockUnitPrice.DefaultValue = ((double)(0));
                this.columnStockTotal.Caption = "帳簿数";
                this.columnStockTotal.DefaultValue = ((double)(0));
                this.columnInventoryStockTotal.Caption = "実施日帳簿数";
                this.columnInventoryStockTotal.DefaultValue = ((double)(0));
                this.columnInventoryStockCnt.Caption = "棚卸数";
                this.columnInventoryStockCnt.DefaultValue = ((double)(0));
                this.columnInventoryTolerancCnt.Caption = "過不足数";
                this.columnInventoryTolerancCnt.DefaultValue = ((double)(0));
                this.columnSectionCode.AllowDBNull = false;
                this.columnSectionCode.DefaultValue = ((string)(""));
                this.columnWarehouseCode.AllowDBNull = false;
                this.columnWarehouseCode.DefaultValue = ((string)(""));
                this.columnWarehouseShelfNo.AllowDBNull = false;
                this.columnWarehouseShelfNo.Caption = "棚番";
                this.columnWarehouseShelfNo.DefaultValue = ((string)(""));
                this.columnCustomerCode.AllowDBNull = false;
                this.columnCustomerCode.DefaultValue = ((int)(0));
                this.columnShipCustomerCode.AllowDBNull = false;
                this.columnShipCustomerCode.DefaultValue = ((int)(0));
                this.columnStockDiv.AllowDBNull = false;
                this.columnStockDiv.DefaultValue = ((int)(0));
                this.columnStockDivName.Caption = "在庫区分";
                this.columnStockDivName.DefaultValue = ((string)(""));
                this.columnStockState.AllowDBNull = false;
                this.columnStockState.DefaultValue = ((int)(0));
                this.columnInventoryNewDiv.AllowDBNull = false;
                this.columnInventoryNewDiv.DefaultValue = ((int)(0));
                this.columnWarehouseName.Caption = "倉庫";
                this.columnWarehouseName.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryRow NewInventoryRow() {
                return ((InventoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InventoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InventoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InventoryRowChanged != null)) {
                    this.InventoryRowChanged(this, new InventoryRowChangeEvent(((InventoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InventoryRowChanging != null)) {
                    this.InventoryRowChanging(this, new InventoryRowChangeEvent(((InventoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InventoryRowDeleted != null)) {
                    this.InventoryRowDeleted(this, new InventoryRowChangeEvent(((InventoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InventoryRowDeleting != null)) {
                    this.InventoryRowDeleting(this, new InventoryRowChangeEvent(((InventoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInventoryRow(InventoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventoryUpdateDataSet ds = new InventoryUpdateDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InventoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ErrorDataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGoodsMakerCd;
            
            private global::System.Data.DataColumn columnGoodsNo;
            
            private global::System.Data.DataColumn columnGoodsName;
            
            private global::System.Data.DataColumn columnInventorySeqNo;
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            private global::System.Data.DataColumn columnWarehouseName;
            
            private global::System.Data.DataColumn columnWarehouseShelfNo;
            
            private global::System.Data.DataColumn columnError;
            
            private global::System.Data.DataColumn columnProcResultState;
            
            private global::System.Data.DataColumn columnSectionCode;
            
            private global::System.Data.DataColumn columnSectionName;
            
            private global::System.Data.DataColumn columnInventoryDayString;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorDataDataTable() {
                this.TableName = "ErrorData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ErrorDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ErrorDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsMakerCdColumn {
                get {
                    return this.columnGoodsMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNoColumn {
                get {
                    return this.columnGoodsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNameColumn {
                get {
                    return this.columnGoodsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventorySeqNoColumn {
                get {
                    return this.columnInventorySeqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseNameColumn {
                get {
                    return this.columnWarehouseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseShelfNoColumn {
                get {
                    return this.columnWarehouseShelfNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorColumn {
                get {
                    return this.columnError;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcResultStateColumn {
                get {
                    return this.columnProcResultState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionCodeColumn {
                get {
                    return this.columnSectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionNameColumn {
                get {
                    return this.columnSectionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryDayStringColumn {
                get {
                    return this.columnInventoryDayString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorDataRow this[int index] {
                get {
                    return ((ErrorDataRow)(this.Rows[index]));
                }
            }
            
            public event ErrorDataRowChangeEventHandler ErrorDataRowChanging;
            
            public event ErrorDataRowChangeEventHandler ErrorDataRowChanged;
            
            public event ErrorDataRowChangeEventHandler ErrorDataRowDeleting;
            
            public event ErrorDataRowChangeEventHandler ErrorDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddErrorDataRow(ErrorDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorDataRow AddErrorDataRow(int GoodsMakerCd, string GoodsNo, string GoodsName, int InventorySeqNo, string WarehouseCode, string WarehouseName, string WarehouseShelfNo, string Error, int ProcResultState, string SectionCode, string SectionName, string InventoryDayString) {
                ErrorDataRow rowErrorDataRow = ((ErrorDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GoodsMakerCd,
                        GoodsNo,
                        GoodsName,
                        InventorySeqNo,
                        WarehouseCode,
                        WarehouseName,
                        WarehouseShelfNo,
                        Error,
                        ProcResultState,
                        SectionCode,
                        SectionName,
                        InventoryDayString};
                rowErrorDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowErrorDataRow);
                return rowErrorDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorDataRow FindByGoodsMakerCdGoodsNoInventorySeqNoWarehouseCodeProcResultState(int GoodsMakerCd, string GoodsNo, int InventorySeqNo, string WarehouseCode, int ProcResultState) {
                return ((ErrorDataRow)(this.Rows.Find(new object[] {
                            GoodsMakerCd,
                            GoodsNo,
                            InventorySeqNo,
                            WarehouseCode,
                            ProcResultState})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ErrorDataDataTable cln = ((ErrorDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ErrorDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGoodsMakerCd = base.Columns["GoodsMakerCd"];
                this.columnGoodsNo = base.Columns["GoodsNo"];
                this.columnGoodsName = base.Columns["GoodsName"];
                this.columnInventorySeqNo = base.Columns["InventorySeqNo"];
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
                this.columnWarehouseName = base.Columns["WarehouseName"];
                this.columnWarehouseShelfNo = base.Columns["WarehouseShelfNo"];
                this.columnError = base.Columns["Error"];
                this.columnProcResultState = base.Columns["ProcResultState"];
                this.columnSectionCode = base.Columns["SectionCode"];
                this.columnSectionName = base.Columns["SectionName"];
                this.columnInventoryDayString = base.Columns["InventoryDayString"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGoodsMakerCd = new global::System.Data.DataColumn("GoodsMakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsMakerCd);
                this.columnGoodsNo = new global::System.Data.DataColumn("GoodsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsNo);
                this.columnGoodsName = new global::System.Data.DataColumn("GoodsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsName);
                this.columnInventorySeqNo = new global::System.Data.DataColumn("InventorySeqNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventorySeqNo);
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.columnWarehouseName = new global::System.Data.DataColumn("WarehouseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseName);
                this.columnWarehouseShelfNo = new global::System.Data.DataColumn("WarehouseShelfNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseShelfNo);
                this.columnError = new global::System.Data.DataColumn("Error", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnError);
                this.columnProcResultState = new global::System.Data.DataColumn("ProcResultState", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcResultState);
                this.columnSectionCode = new global::System.Data.DataColumn("SectionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionCode);
                this.columnSectionName = new global::System.Data.DataColumn("SectionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionName);
                this.columnInventoryDayString = new global::System.Data.DataColumn("InventoryDayString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryDayString);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnGoodsMakerCd,
                                this.columnGoodsNo,
                                this.columnInventorySeqNo,
                                this.columnWarehouseCode,
                                this.columnProcResultState}, true));
                this.columnGoodsMakerCd.AllowDBNull = false;
                this.columnGoodsMakerCd.DefaultValue = ((int)(0));
                this.columnGoodsNo.AllowDBNull = false;
                this.columnGoodsNo.Caption = "品番";
                this.columnGoodsNo.DefaultValue = ((string)("0"));
                this.columnGoodsName.Caption = "品名";
                this.columnGoodsName.DefaultValue = ((string)(""));
                this.columnInventorySeqNo.AllowDBNull = false;
                this.columnInventorySeqNo.Caption = "棚卸通番";
                this.columnInventorySeqNo.DefaultValue = ((int)(0));
                this.columnWarehouseCode.AllowDBNull = false;
                this.columnWarehouseCode.DefaultValue = ((string)(""));
                this.columnWarehouseName.Caption = "倉庫";
                this.columnWarehouseName.DefaultValue = ((string)(""));
                this.columnWarehouseShelfNo.AllowDBNull = false;
                this.columnWarehouseShelfNo.Caption = "棚番";
                this.columnWarehouseShelfNo.DefaultValue = ((string)(""));
                this.columnError.Caption = "エラー内容";
                this.columnError.DefaultValue = ((string)("0"));
                this.columnProcResultState.AllowDBNull = false;
                this.columnProcResultState.DefaultValue = ((int)(0));
                this.columnSectionCode.DefaultValue = ((string)(""));
                this.columnSectionName.DefaultValue = ((string)(""));
                this.columnInventoryDayString.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorDataRow NewErrorDataRow() {
                return ((ErrorDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ErrorDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ErrorDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ErrorDataRowChanged != null)) {
                    this.ErrorDataRowChanged(this, new ErrorDataRowChangeEvent(((ErrorDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ErrorDataRowChanging != null)) {
                    this.ErrorDataRowChanging(this, new ErrorDataRowChangeEvent(((ErrorDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ErrorDataRowDeleted != null)) {
                    this.ErrorDataRowDeleted(this, new ErrorDataRowChangeEvent(((ErrorDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ErrorDataRowDeleting != null)) {
                    this.ErrorDataRowDeleting(this, new ErrorDataRowChangeEvent(((ErrorDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveErrorDataRow(ErrorDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventoryUpdateDataSet ds = new InventoryUpdateDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ErrorDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InventoryNumberInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGoodsMakerCd;
            
            private global::System.Data.DataColumn columnGoodsNo;
            
            private global::System.Data.DataColumn columnGoodsName;
            
            private global::System.Data.DataColumn columnInventorySeqNo;
            
            private global::System.Data.DataColumn columnWarehouseCode;
            
            private global::System.Data.DataColumn columnWarehouseName;
            
            private global::System.Data.DataColumn columnWarehouseShelfNo;
            
            private global::System.Data.DataColumn columnProcResultState;
            
            private global::System.Data.DataColumn columnSectionCode;
            
            private global::System.Data.DataColumn columnSectionName;
            
            private global::System.Data.DataColumn columnInventoryDayString;
            
            private global::System.Data.DataColumn columnIsOverlap;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryNumberInfoDataTable() {
                this.TableName = "InventoryNumberInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InventoryNumberInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InventoryNumberInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsMakerCdColumn {
                get {
                    return this.columnGoodsMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNoColumn {
                get {
                    return this.columnGoodsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GoodsNameColumn {
                get {
                    return this.columnGoodsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventorySeqNoColumn {
                get {
                    return this.columnInventorySeqNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseCodeColumn {
                get {
                    return this.columnWarehouseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseNameColumn {
                get {
                    return this.columnWarehouseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseShelfNoColumn {
                get {
                    return this.columnWarehouseShelfNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcResultStateColumn {
                get {
                    return this.columnProcResultState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionCodeColumn {
                get {
                    return this.columnSectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionNameColumn {
                get {
                    return this.columnSectionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InventoryDayStringColumn {
                get {
                    return this.columnInventoryDayString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverlapColumn {
                get {
                    return this.columnIsOverlap;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryNumberInfoRow this[int index] {
                get {
                    return ((InventoryNumberInfoRow)(this.Rows[index]));
                }
            }
            
            public event InventoryNumberInfoRowChangeEventHandler InventoryNumberInfoRowChanging;
            
            public event InventoryNumberInfoRowChangeEventHandler InventoryNumberInfoRowChanged;
            
            public event InventoryNumberInfoRowChangeEventHandler InventoryNumberInfoRowDeleting;
            
            public event InventoryNumberInfoRowChangeEventHandler InventoryNumberInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInventoryNumberInfoRow(InventoryNumberInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryNumberInfoRow AddInventoryNumberInfoRow(int GoodsMakerCd, string GoodsNo, string GoodsName, int InventorySeqNo, string WarehouseCode, string WarehouseName, string WarehouseShelfNo, int ProcResultState, string SectionCode, string SectionName, string InventoryDayString, bool IsOverlap) {
                InventoryNumberInfoRow rowInventoryNumberInfoRow = ((InventoryNumberInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GoodsMakerCd,
                        GoodsNo,
                        GoodsName,
                        InventorySeqNo,
                        WarehouseCode,
                        WarehouseName,
                        WarehouseShelfNo,
                        ProcResultState,
                        SectionCode,
                        SectionName,
                        InventoryDayString,
                        IsOverlap};
                rowInventoryNumberInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInventoryNumberInfoRow);
                return rowInventoryNumberInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryNumberInfoRow FindByGoodsMakerCdGoodsNoInventorySeqNo(int GoodsMakerCd, string GoodsNo, int InventorySeqNo) {
                return ((InventoryNumberInfoRow)(this.Rows.Find(new object[] {
                            GoodsMakerCd,
                            GoodsNo,
                            InventorySeqNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InventoryNumberInfoDataTable cln = ((InventoryNumberInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InventoryNumberInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGoodsMakerCd = base.Columns["GoodsMakerCd"];
                this.columnGoodsNo = base.Columns["GoodsNo"];
                this.columnGoodsName = base.Columns["GoodsName"];
                this.columnInventorySeqNo = base.Columns["InventorySeqNo"];
                this.columnWarehouseCode = base.Columns["WarehouseCode"];
                this.columnWarehouseName = base.Columns["WarehouseName"];
                this.columnWarehouseShelfNo = base.Columns["WarehouseShelfNo"];
                this.columnProcResultState = base.Columns["ProcResultState"];
                this.columnSectionCode = base.Columns["SectionCode"];
                this.columnSectionName = base.Columns["SectionName"];
                this.columnInventoryDayString = base.Columns["InventoryDayString"];
                this.columnIsOverlap = base.Columns["IsOverlap"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGoodsMakerCd = new global::System.Data.DataColumn("GoodsMakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsMakerCd);
                this.columnGoodsNo = new global::System.Data.DataColumn("GoodsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsNo);
                this.columnGoodsName = new global::System.Data.DataColumn("GoodsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGoodsName);
                this.columnInventorySeqNo = new global::System.Data.DataColumn("InventorySeqNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventorySeqNo);
                this.columnWarehouseCode = new global::System.Data.DataColumn("WarehouseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseCode);
                this.columnWarehouseName = new global::System.Data.DataColumn("WarehouseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseName);
                this.columnWarehouseShelfNo = new global::System.Data.DataColumn("WarehouseShelfNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouseShelfNo);
                this.columnProcResultState = new global::System.Data.DataColumn("ProcResultState", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcResultState);
                this.columnSectionCode = new global::System.Data.DataColumn("SectionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionCode);
                this.columnSectionName = new global::System.Data.DataColumn("SectionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionName);
                this.columnInventoryDayString = new global::System.Data.DataColumn("InventoryDayString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInventoryDayString);
                this.columnIsOverlap = new global::System.Data.DataColumn("IsOverlap", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverlap);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnGoodsMakerCd,
                                this.columnGoodsNo,
                                this.columnInventorySeqNo}, true));
                this.columnGoodsMakerCd.AllowDBNull = false;
                this.columnGoodsMakerCd.DefaultValue = ((int)(0));
                this.columnGoodsNo.AllowDBNull = false;
                this.columnGoodsNo.DefaultValue = ((string)(""));
                this.columnGoodsName.DefaultValue = ((string)(""));
                this.columnInventorySeqNo.AllowDBNull = false;
                this.columnInventorySeqNo.DefaultValue = ((int)(0));
                this.columnWarehouseCode.DefaultValue = ((string)(""));
                this.columnWarehouseName.DefaultValue = ((string)(""));
                this.columnWarehouseShelfNo.DefaultValue = ((string)(""));
                this.columnProcResultState.DefaultValue = ((int)(0));
                this.columnSectionCode.DefaultValue = ((string)(""));
                this.columnSectionName.DefaultValue = ((string)(""));
                this.columnInventoryDayString.DefaultValue = ((string)(""));
                this.columnIsOverlap.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryNumberInfoRow NewInventoryNumberInfoRow() {
                return ((InventoryNumberInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InventoryNumberInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InventoryNumberInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InventoryNumberInfoRowChanged != null)) {
                    this.InventoryNumberInfoRowChanged(this, new InventoryNumberInfoRowChangeEvent(((InventoryNumberInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InventoryNumberInfoRowChanging != null)) {
                    this.InventoryNumberInfoRowChanging(this, new InventoryNumberInfoRowChangeEvent(((InventoryNumberInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InventoryNumberInfoRowDeleted != null)) {
                    this.InventoryNumberInfoRowDeleted(this, new InventoryNumberInfoRowChangeEvent(((InventoryNumberInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InventoryNumberInfoRowDeleting != null)) {
                    this.InventoryNumberInfoRowDeleting(this, new InventoryNumberInfoRowChangeEvent(((InventoryNumberInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInventoryNumberInfoRow(InventoryNumberInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InventoryUpdateDataSet ds = new InventoryUpdateDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InventoryNumberInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InventoryRow : global::System.Data.DataRow {
            
            private InventoryDataTable tableInventory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InventoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInventory = ((InventoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RowNo {
                get {
                    return ((int)(this[this.tableInventory.RowNoColumn]));
                }
                set {
                    this[this.tableInventory.RowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RowNoDisplay {
                get {
                    try {
                        return ((int)(this[this.tableInventory.RowNoDisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Inventory\' にある列 \'RowNoDisplay\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventory.RowNoDisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnterpriseCode {
                get {
                    return ((string)(this[this.tableInventory.EnterpriseCodeColumn]));
                }
                set {
                    this[this.tableInventory.EnterpriseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GoodsMakerCd {
                get {
                    return ((int)(this[this.tableInventory.GoodsMakerCdColumn]));
                }
                set {
                    this[this.tableInventory.GoodsMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsNo {
                get {
                    return ((string)(this[this.tableInventory.GoodsNoColumn]));
                }
                set {
                    this[this.tableInventory.GoodsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsName {
                get {
                    if (this.IsGoodsNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInventory.GoodsNameColumn]));
                    }
                }
                set {
                    this[this.tableInventory.GoodsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InventorySeqNo {
                get {
                    return ((int)(this[this.tableInventory.InventorySeqNoColumn]));
                }
                set {
                    this[this.tableInventory.InventorySeqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockUnitPrice {
                get {
                    return ((double)(this[this.tableInventory.StockUnitPriceColumn]));
                }
                set {
                    this[this.tableInventory.StockUnitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockTotal {
                get {
                    try {
                        return ((double)(this[this.tableInventory.StockTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Inventory\' にある列 \'StockTotal\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventory.StockTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InventoryStockTotal {
                get {
                    try {
                        return ((double)(this[this.tableInventory.InventoryStockTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Inventory\' にある列 \'InventoryStockTotal\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventory.InventoryStockTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InventoryStockCnt {
                get {
                    try {
                        return ((double)(this[this.tableInventory.InventoryStockCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Inventory\' にある列 \'InventoryStockCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventory.InventoryStockCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InventoryTolerancCnt {
                get {
                    try {
                        return ((double)(this[this.tableInventory.InventoryTolerancCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Inventory\' にある列 \'InventoryTolerancCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventory.InventoryTolerancCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionCode {
                get {
                    return ((string)(this[this.tableInventory.SectionCodeColumn]));
                }
                set {
                    this[this.tableInventory.SectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    return ((string)(this[this.tableInventory.WarehouseCodeColumn]));
                }
                set {
                    this[this.tableInventory.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseShelfNo {
                get {
                    return ((string)(this[this.tableInventory.WarehouseShelfNoColumn]));
                }
                set {
                    this[this.tableInventory.WarehouseShelfNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerCode {
                get {
                    return ((int)(this[this.tableInventory.CustomerCodeColumn]));
                }
                set {
                    this[this.tableInventory.CustomerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ShipCustomerCode {
                get {
                    return ((int)(this[this.tableInventory.ShipCustomerCodeColumn]));
                }
                set {
                    this[this.tableInventory.ShipCustomerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StockDiv {
                get {
                    return ((int)(this[this.tableInventory.StockDivColumn]));
                }
                set {
                    this[this.tableInventory.StockDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockDivName {
                get {
                    if (this.IsStockDivNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInventory.StockDivNameColumn]));
                    }
                }
                set {
                    this[this.tableInventory.StockDivNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StockState {
                get {
                    return ((int)(this[this.tableInventory.StockStateColumn]));
                }
                set {
                    this[this.tableInventory.StockStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InventoryNewDiv {
                get {
                    return ((int)(this[this.tableInventory.InventoryNewDivColumn]));
                }
                set {
                    this[this.tableInventory.InventoryNewDivColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseName {
                get {
                    if (this.IsWarehouseNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInventory.WarehouseNameColumn]));
                    }
                }
                set {
                    this[this.tableInventory.WarehouseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public object InventoryDataUpdateWork {
                get {
                    try {
                        return ((object)(this[this.tableInventory.InventoryDataUpdateWorkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Inventory\' にある列 \'InventoryDataUpdateWork\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventory.InventoryDataUpdateWorkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProcResultState {
                get {
                    try {
                        return ((int)(this[this.tableInventory.ProcResultStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Inventory\' にある列 \'ProcResultState\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventory.ProcResultStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowNoDisplayNull() {
                return this.IsNull(this.tableInventory.RowNoDisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowNoDisplayNull() {
                this[this.tableInventory.RowNoDisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsNameNull() {
                return this.IsNull(this.tableInventory.GoodsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsNameNull() {
                this[this.tableInventory.GoodsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockTotalNull() {
                return this.IsNull(this.tableInventory.StockTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockTotalNull() {
                this[this.tableInventory.StockTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryStockTotalNull() {
                return this.IsNull(this.tableInventory.InventoryStockTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryStockTotalNull() {
                this[this.tableInventory.InventoryStockTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryStockCntNull() {
                return this.IsNull(this.tableInventory.InventoryStockCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryStockCntNull() {
                this[this.tableInventory.InventoryStockCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryTolerancCntNull() {
                return this.IsNull(this.tableInventory.InventoryTolerancCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryTolerancCntNull() {
                this[this.tableInventory.InventoryTolerancCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockDivNameNull() {
                return this.IsNull(this.tableInventory.StockDivNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockDivNameNull() {
                this[this.tableInventory.StockDivNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNameNull() {
                return this.IsNull(this.tableInventory.WarehouseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNameNull() {
                this[this.tableInventory.WarehouseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryDataUpdateWorkNull() {
                return this.IsNull(this.tableInventory.InventoryDataUpdateWorkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryDataUpdateWorkNull() {
                this[this.tableInventory.InventoryDataUpdateWorkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcResultStateNull() {
                return this.IsNull(this.tableInventory.ProcResultStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcResultStateNull() {
                this[this.tableInventory.ProcResultStateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ErrorDataRow : global::System.Data.DataRow {
            
            private ErrorDataDataTable tableErrorData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ErrorDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableErrorData = ((ErrorDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GoodsMakerCd {
                get {
                    return ((int)(this[this.tableErrorData.GoodsMakerCdColumn]));
                }
                set {
                    this[this.tableErrorData.GoodsMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsNo {
                get {
                    return ((string)(this[this.tableErrorData.GoodsNoColumn]));
                }
                set {
                    this[this.tableErrorData.GoodsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsName {
                get {
                    if (this.IsGoodsNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableErrorData.GoodsNameColumn]));
                    }
                }
                set {
                    this[this.tableErrorData.GoodsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InventorySeqNo {
                get {
                    return ((int)(this[this.tableErrorData.InventorySeqNoColumn]));
                }
                set {
                    this[this.tableErrorData.InventorySeqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    return ((string)(this[this.tableErrorData.WarehouseCodeColumn]));
                }
                set {
                    this[this.tableErrorData.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseName {
                get {
                    if (this.IsWarehouseNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableErrorData.WarehouseNameColumn]));
                    }
                }
                set {
                    this[this.tableErrorData.WarehouseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseShelfNo {
                get {
                    return ((string)(this[this.tableErrorData.WarehouseShelfNoColumn]));
                }
                set {
                    this[this.tableErrorData.WarehouseShelfNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Error {
                get {
                    if (this.IsErrorNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableErrorData.ErrorColumn]));
                    }
                }
                set {
                    this[this.tableErrorData.ErrorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProcResultState {
                get {
                    return ((int)(this[this.tableErrorData.ProcResultStateColumn]));
                }
                set {
                    this[this.tableErrorData.ProcResultStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionCode {
                get {
                    if (this.IsSectionCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableErrorData.SectionCodeColumn]));
                    }
                }
                set {
                    this[this.tableErrorData.SectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionName {
                get {
                    if (this.IsSectionNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableErrorData.SectionNameColumn]));
                    }
                }
                set {
                    this[this.tableErrorData.SectionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InventoryDayString {
                get {
                    if (this.IsInventoryDayStringNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableErrorData.InventoryDayStringColumn]));
                    }
                }
                set {
                    this[this.tableErrorData.InventoryDayStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsNameNull() {
                return this.IsNull(this.tableErrorData.GoodsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsNameNull() {
                this[this.tableErrorData.GoodsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNameNull() {
                return this.IsNull(this.tableErrorData.WarehouseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNameNull() {
                this[this.tableErrorData.WarehouseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorNull() {
                return this.IsNull(this.tableErrorData.ErrorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorNull() {
                this[this.tableErrorData.ErrorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionCodeNull() {
                return this.IsNull(this.tableErrorData.SectionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionCodeNull() {
                this[this.tableErrorData.SectionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionNameNull() {
                return this.IsNull(this.tableErrorData.SectionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionNameNull() {
                this[this.tableErrorData.SectionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryDayStringNull() {
                return this.IsNull(this.tableErrorData.InventoryDayStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryDayStringNull() {
                this[this.tableErrorData.InventoryDayStringColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InventoryNumberInfoRow : global::System.Data.DataRow {
            
            private InventoryNumberInfoDataTable tableInventoryNumberInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InventoryNumberInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInventoryNumberInfo = ((InventoryNumberInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GoodsMakerCd {
                get {
                    return ((int)(this[this.tableInventoryNumberInfo.GoodsMakerCdColumn]));
                }
                set {
                    this[this.tableInventoryNumberInfo.GoodsMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsNo {
                get {
                    return ((string)(this[this.tableInventoryNumberInfo.GoodsNoColumn]));
                }
                set {
                    this[this.tableInventoryNumberInfo.GoodsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GoodsName {
                get {
                    if (this.IsGoodsNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInventoryNumberInfo.GoodsNameColumn]));
                    }
                }
                set {
                    this[this.tableInventoryNumberInfo.GoodsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InventorySeqNo {
                get {
                    return ((int)(this[this.tableInventoryNumberInfo.InventorySeqNoColumn]));
                }
                set {
                    this[this.tableInventoryNumberInfo.InventorySeqNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseCode {
                get {
                    if (this.IsWarehouseCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInventoryNumberInfo.WarehouseCodeColumn]));
                    }
                }
                set {
                    this[this.tableInventoryNumberInfo.WarehouseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseName {
                get {
                    if (this.IsWarehouseNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInventoryNumberInfo.WarehouseNameColumn]));
                    }
                }
                set {
                    this[this.tableInventoryNumberInfo.WarehouseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarehouseShelfNo {
                get {
                    if (this.IsWarehouseShelfNoNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInventoryNumberInfo.WarehouseShelfNoColumn]));
                    }
                }
                set {
                    this[this.tableInventoryNumberInfo.WarehouseShelfNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProcResultState {
                get {
                    try {
                        return ((int)(this[this.tableInventoryNumberInfo.ProcResultStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventoryNumberInfo\' にある列 \'ProcResultState\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventoryNumberInfo.ProcResultStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionCode {
                get {
                    if (this.IsSectionCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInventoryNumberInfo.SectionCodeColumn]));
                    }
                }
                set {
                    this[this.tableInventoryNumberInfo.SectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionName {
                get {
                    if (this.IsSectionNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInventoryNumberInfo.SectionNameColumn]));
                    }
                }
                set {
                    this[this.tableInventoryNumberInfo.SectionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InventoryDayString {
                get {
                    if (this.IsInventoryDayStringNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInventoryNumberInfo.InventoryDayStringColumn]));
                    }
                }
                set {
                    this[this.tableInventoryNumberInfo.InventoryDayStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverlap {
                get {
                    try {
                        return ((bool)(this[this.tableInventoryNumberInfo.IsOverlapColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'InventoryNumberInfo\' にある列 \'IsOverlap\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableInventoryNumberInfo.IsOverlapColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGoodsNameNull() {
                return this.IsNull(this.tableInventoryNumberInfo.GoodsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGoodsNameNull() {
                this[this.tableInventoryNumberInfo.GoodsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseCodeNull() {
                return this.IsNull(this.tableInventoryNumberInfo.WarehouseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseCodeNull() {
                this[this.tableInventoryNumberInfo.WarehouseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNameNull() {
                return this.IsNull(this.tableInventoryNumberInfo.WarehouseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNameNull() {
                this[this.tableInventoryNumberInfo.WarehouseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseShelfNoNull() {
                return this.IsNull(this.tableInventoryNumberInfo.WarehouseShelfNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseShelfNoNull() {
                this[this.tableInventoryNumberInfo.WarehouseShelfNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcResultStateNull() {
                return this.IsNull(this.tableInventoryNumberInfo.ProcResultStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcResultStateNull() {
                this[this.tableInventoryNumberInfo.ProcResultStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionCodeNull() {
                return this.IsNull(this.tableInventoryNumberInfo.SectionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionCodeNull() {
                this[this.tableInventoryNumberInfo.SectionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionNameNull() {
                return this.IsNull(this.tableInventoryNumberInfo.SectionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionNameNull() {
                this[this.tableInventoryNumberInfo.SectionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInventoryDayStringNull() {
                return this.IsNull(this.tableInventoryNumberInfo.InventoryDayStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInventoryDayStringNull() {
                this[this.tableInventoryNumberInfo.InventoryDayStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverlapNull() {
                return this.IsNull(this.tableInventoryNumberInfo.IsOverlapColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverlapNull() {
                this[this.tableInventoryNumberInfo.IsOverlapColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InventoryRowChangeEvent : global::System.EventArgs {
            
            private InventoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryRowChangeEvent(InventoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ErrorDataRowChangeEvent : global::System.EventArgs {
            
            private ErrorDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorDataRowChangeEvent(ErrorDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InventoryNumberInfoRowChangeEvent : global::System.EventArgs {
            
            private InventoryNumberInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryNumberInfoRowChangeEvent(InventoryNumberInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InventoryNumberInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591