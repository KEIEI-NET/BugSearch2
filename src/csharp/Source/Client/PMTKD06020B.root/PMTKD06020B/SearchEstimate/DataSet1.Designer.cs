//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3031
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SearchEstimate {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private DataTable1DataTable tableDataTable1;
        
        private JoinPartsDataTable tableJoinParts;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["JoinParts"] != null)) {
                    base.Tables.Add(new JoinPartsDataTable(ds.Tables["JoinParts"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable1DataTable DataTable1 {
            get {
                return this.tableDataTable1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JoinPartsDataTable JoinParts {
            get {
                return this.tableJoinParts;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["JoinParts"] != null)) {
                    base.Tables.Add(new JoinPartsDataTable(ds.Tables["JoinParts"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDataTable1 = ((DataTable1DataTable)(base.Tables["DataTable1"]));
            if ((initTable == true)) {
                if ((this.tableDataTable1 != null)) {
                    this.tableDataTable1.InitVars();
                }
            }
            this.tableJoinParts = ((JoinPartsDataTable)(base.Tables["JoinParts"]));
            if ((initTable == true)) {
                if ((this.tableJoinParts != null)) {
                    this.tableJoinParts.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataTable1 = new DataTable1DataTable();
            base.Tables.Add(this.tableDataTable1);
            this.tableJoinParts = new JoinPartsDataTable();
            base.Tables.Add(this.tableJoinParts);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJoinParts() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DataTable1RowChangeEventHandler(object sender, DataTable1RowChangeEvent e);
        
        public delegate void JoinPartsRowChangeEventHandler(object sender, JoinPartsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBL;
            
            private global::System.Data.DataColumn columnPartsNm;
            
            private global::System.Data.DataColumn columnPartsNo;
            
            private global::System.Data.DataColumn columnMaker;
            
            private global::System.Data.DataColumn columnPrice;
            
            private global::System.Data.DataColumn columnCtlgPartsNo;
            
            private global::System.Data.DataColumn columnNewPartsNo;
            
            private global::System.Data.DataColumn columnJoinSrcPartsNo;
            
            private global::System.Data.DataColumn columnCnt;
            
            private global::System.Data.DataColumn columnWareHouse;
            
            private global::System.Data.DataColumn columnShelfNo;
            
            private global::System.Data.DataColumn columnMakerCd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1DataTable() {
                this.TableName = "DataTable1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLColumn {
                get {
                    return this.columnBL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartsNmColumn {
                get {
                    return this.columnPartsNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartsNoColumn {
                get {
                    return this.columnPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakerColumn {
                get {
                    return this.columnMaker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CtlgPartsNoColumn {
                get {
                    return this.columnCtlgPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewPartsNoColumn {
                get {
                    return this.columnNewPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinSrcPartsNoColumn {
                get {
                    return this.columnJoinSrcPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CntColumn {
                get {
                    return this.columnCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WareHouseColumn {
                get {
                    return this.columnWareHouse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShelfNoColumn {
                get {
                    return this.columnShelfNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MakerCdColumn {
                get {
                    return this.columnMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row this[int index] {
                get {
                    return ((DataTable1Row)(this.Rows[index]));
                }
            }
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanging;
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanged;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleting;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable1Row(DataTable1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row AddDataTable1Row(int BL, string PartsNm, string PartsNo, string Maker, double Price, string CtlgPartsNo, string NewPartsNo, string JoinSrcPartsNo, double Cnt, string WareHouse, string ShelfNo, int MakerCd) {
                DataTable1Row rowDataTable1Row = ((DataTable1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BL,
                        PartsNm,
                        PartsNo,
                        Maker,
                        Price,
                        CtlgPartsNo,
                        NewPartsNo,
                        JoinSrcPartsNo,
                        Cnt,
                        WareHouse,
                        ShelfNo,
                        MakerCd};
                rowDataTable1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable1Row);
                return rowDataTable1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable1DataTable cln = ((DataTable1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBL = base.Columns["BL"];
                this.columnPartsNm = base.Columns["PartsNm"];
                this.columnPartsNo = base.Columns["PartsNo"];
                this.columnMaker = base.Columns["Maker"];
                this.columnPrice = base.Columns["Price"];
                this.columnCtlgPartsNo = base.Columns["CtlgPartsNo"];
                this.columnNewPartsNo = base.Columns["NewPartsNo"];
                this.columnJoinSrcPartsNo = base.Columns["JoinSrcPartsNo"];
                this.columnCnt = base.Columns["Cnt"];
                this.columnWareHouse = base.Columns["WareHouse"];
                this.columnShelfNo = base.Columns["ShelfNo"];
                this.columnMakerCd = base.Columns["MakerCd"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBL = new global::System.Data.DataColumn("BL", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBL);
                this.columnPartsNm = new global::System.Data.DataColumn("PartsNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartsNm);
                this.columnPartsNo = new global::System.Data.DataColumn("PartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartsNo);
                this.columnMaker = new global::System.Data.DataColumn("Maker", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaker);
                this.columnPrice = new global::System.Data.DataColumn("Price", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnCtlgPartsNo = new global::System.Data.DataColumn("CtlgPartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCtlgPartsNo);
                this.columnNewPartsNo = new global::System.Data.DataColumn("NewPartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewPartsNo);
                this.columnJoinSrcPartsNo = new global::System.Data.DataColumn("JoinSrcPartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinSrcPartsNo);
                this.columnCnt = new global::System.Data.DataColumn("Cnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCnt);
                this.columnWareHouse = new global::System.Data.DataColumn("WareHouse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWareHouse);
                this.columnShelfNo = new global::System.Data.DataColumn("ShelfNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShelfNo);
                this.columnMakerCd = new global::System.Data.DataColumn("MakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMakerCd);
                this.columnBL.Caption = "BLｺｰﾄﾞ";
                this.columnBL.DefaultValue = ((int)(0));
                this.columnPartsNm.Caption = "品名";
                this.columnPartsNm.DefaultValue = ((string)(""));
                this.columnPartsNo.Caption = "品番";
                this.columnPartsNo.DefaultValue = ((string)(""));
                this.columnMaker.Caption = "メーカー";
                this.columnMaker.DefaultValue = ((string)(""));
                this.columnPrice.Caption = "定価";
                this.columnPrice.DefaultValue = ((double)(0));
                this.columnCtlgPartsNo.Caption = "カタログ品番";
                this.columnCtlgPartsNo.DefaultValue = ((string)(""));
                this.columnNewPartsNo.Caption = "最新品番";
                this.columnNewPartsNo.DefaultValue = ((string)(""));
                this.columnJoinSrcPartsNo.Caption = "結合元品番";
                this.columnJoinSrcPartsNo.DefaultValue = ((string)(""));
                this.columnCnt.Caption = "在庫数";
                this.columnCnt.DefaultValue = ((double)(0));
                this.columnWareHouse.Caption = "倉庫";
                this.columnWareHouse.DefaultValue = ((string)(""));
                this.columnShelfNo.Caption = "棚番";
                this.columnShelfNo.DefaultValue = ((string)(""));
                this.columnMakerCd.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row NewDataTable1Row() {
                return ((DataTable1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable1RowChanged != null)) {
                    this.DataTable1RowChanged(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable1RowChanging != null)) {
                    this.DataTable1RowChanging(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable1RowDeleted != null)) {
                    this.DataTable1RowDeleted(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable1RowDeleting != null)) {
                    this.DataTable1RowDeleting(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable1Row(DataTable1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JoinPartsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPrmSetDtlNo2;
            
            private global::System.Data.DataColumn columnJoinDispOrder;
            
            private global::System.Data.DataColumn columnJoinSourPartsNo;
            
            private global::System.Data.DataColumn columnJoinDestPartsNo;
            
            private global::System.Data.DataColumn columnJoinQty;
            
            private global::System.Data.DataColumn columnJoinSpecialNote;
            
            private global::System.Data.DataColumn columnPrimePartsName;
            
            private global::System.Data.DataColumn columnJoinDestMakerNm;
            
            private global::System.Data.DataColumn columnPrice;
            
            private global::System.Data.DataColumn columnShelf;
            
            private global::System.Data.DataColumn columnSet;
            
            private global::System.Data.DataColumn columnSubst;
            
            private global::System.Data.DataColumn columnWarehouse;
            
            private global::System.Data.DataColumn columnStockCnt;
            
            private global::System.Data.DataColumn columnJoinSourMaker;
            
            private global::System.Data.DataColumn columnGenTanka;
            
            private global::System.Data.DataColumn columnUriTanka;
            
            private global::System.Data.DataColumn columnArariritu;
            
            private global::System.Data.DataColumn columnArarigaku;
            
            private global::System.Data.DataColumn columnJoinDestMakerCd;
            
            private global::System.Data.DataColumn columnSetPartsFlg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JoinPartsDataTable() {
                this.TableName = "JoinParts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JoinPartsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JoinPartsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrmSetDtlNo2Column {
                get {
                    return this.columnPrmSetDtlNo2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinDispOrderColumn {
                get {
                    return this.columnJoinDispOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinSourPartsNoColumn {
                get {
                    return this.columnJoinSourPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinDestPartsNoColumn {
                get {
                    return this.columnJoinDestPartsNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinQtyColumn {
                get {
                    return this.columnJoinQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinSpecialNoteColumn {
                get {
                    return this.columnJoinSpecialNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimePartsNameColumn {
                get {
                    return this.columnPrimePartsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinDestMakerNmColumn {
                get {
                    return this.columnJoinDestMakerNm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShelfColumn {
                get {
                    return this.columnShelf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetColumn {
                get {
                    return this.columnSet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubstColumn {
                get {
                    return this.columnSubst;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarehouseColumn {
                get {
                    return this.columnWarehouse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StockCntColumn {
                get {
                    return this.columnStockCnt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinSourMakerColumn {
                get {
                    return this.columnJoinSourMaker;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenTankaColumn {
                get {
                    return this.columnGenTanka;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UriTankaColumn {
                get {
                    return this.columnUriTanka;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArarirituColumn {
                get {
                    return this.columnArariritu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArarigakuColumn {
                get {
                    return this.columnArarigaku;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinDestMakerCdColumn {
                get {
                    return this.columnJoinDestMakerCd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetPartsFlgColumn {
                get {
                    return this.columnSetPartsFlg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JoinPartsRow this[int index] {
                get {
                    return ((JoinPartsRow)(this.Rows[index]));
                }
            }
            
            public event JoinPartsRowChangeEventHandler JoinPartsRowChanging;
            
            public event JoinPartsRowChangeEventHandler JoinPartsRowChanged;
            
            public event JoinPartsRowChangeEventHandler JoinPartsRowDeleting;
            
            public event JoinPartsRowChangeEventHandler JoinPartsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJoinPartsRow(JoinPartsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JoinPartsRow AddJoinPartsRow(
                        int PrmSetDtlNo2, 
                        int JoinDispOrder, 
                        string JoinSourPartsNo, 
                        string JoinDestPartsNo, 
                        double JoinQty, 
                        string JoinSpecialNote, 
                        string PrimePartsName, 
                        string JoinDestMakerNm, 
                        double Price, 
                        string Shelf, 
                        System.Drawing.Image Set, 
                        System.Drawing.Image Subst, 
                        string Warehouse, 
                        double StockCnt, 
                        int JoinSourMaker, 
                        double GenTanka, 
                        double UriTanka, 
                        double Arariritu, 
                        double Ararigaku, 
                        int JoinDestMakerCd, 
                        int SetPartsFlg) {
                JoinPartsRow rowJoinPartsRow = ((JoinPartsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PrmSetDtlNo2,
                        JoinDispOrder,
                        JoinSourPartsNo,
                        JoinDestPartsNo,
                        JoinQty,
                        JoinSpecialNote,
                        PrimePartsName,
                        JoinDestMakerNm,
                        Price,
                        Shelf,
                        Set,
                        Subst,
                        Warehouse,
                        StockCnt,
                        JoinSourMaker,
                        GenTanka,
                        UriTanka,
                        Arariritu,
                        Ararigaku,
                        JoinDestMakerCd,
                        SetPartsFlg};
                rowJoinPartsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJoinPartsRow);
                return rowJoinPartsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JoinPartsRow FindByJoinSourPartsNoJoinDestPartsNoJoinDestMakerCd(string JoinSourPartsNo, string JoinDestPartsNo, int JoinDestMakerCd) {
                return ((JoinPartsRow)(this.Rows.Find(new object[] {
                            JoinSourPartsNo,
                            JoinDestPartsNo,
                            JoinDestMakerCd})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JoinPartsDataTable cln = ((JoinPartsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JoinPartsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPrmSetDtlNo2 = base.Columns["PrmSetDtlNo2"];
                this.columnJoinDispOrder = base.Columns["JoinDispOrder"];
                this.columnJoinSourPartsNo = base.Columns["JoinSourPartsNo"];
                this.columnJoinDestPartsNo = base.Columns["JoinDestPartsNo"];
                this.columnJoinQty = base.Columns["JoinQty"];
                this.columnJoinSpecialNote = base.Columns["JoinSpecialNote"];
                this.columnPrimePartsName = base.Columns["PrimePartsName"];
                this.columnJoinDestMakerNm = base.Columns["JoinDestMakerNm"];
                this.columnPrice = base.Columns["Price"];
                this.columnShelf = base.Columns["Shelf"];
                this.columnSet = base.Columns["Set"];
                this.columnSubst = base.Columns["Subst"];
                this.columnWarehouse = base.Columns["Warehouse"];
                this.columnStockCnt = base.Columns["StockCnt"];
                this.columnJoinSourMaker = base.Columns["JoinSourMaker"];
                this.columnGenTanka = base.Columns["GenTanka"];
                this.columnUriTanka = base.Columns["UriTanka"];
                this.columnArariritu = base.Columns["Arariritu"];
                this.columnArarigaku = base.Columns["Ararigaku"];
                this.columnJoinDestMakerCd = base.Columns["JoinDestMakerCd"];
                this.columnSetPartsFlg = base.Columns["SetPartsFlg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPrmSetDtlNo2 = new global::System.Data.DataColumn("PrmSetDtlNo2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrmSetDtlNo2);
                this.columnJoinDispOrder = new global::System.Data.DataColumn("JoinDispOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinDispOrder);
                this.columnJoinSourPartsNo = new global::System.Data.DataColumn("JoinSourPartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinSourPartsNo);
                this.columnJoinDestPartsNo = new global::System.Data.DataColumn("JoinDestPartsNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinDestPartsNo);
                this.columnJoinQty = new global::System.Data.DataColumn("JoinQty", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinQty);
                this.columnJoinSpecialNote = new global::System.Data.DataColumn("JoinSpecialNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinSpecialNote);
                this.columnPrimePartsName = new global::System.Data.DataColumn("PrimePartsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimePartsName);
                this.columnJoinDestMakerNm = new global::System.Data.DataColumn("JoinDestMakerNm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinDestMakerNm);
                this.columnPrice = new global::System.Data.DataColumn("Price", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnShelf = new global::System.Data.DataColumn("Shelf", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShelf);
                this.columnSet = new global::System.Data.DataColumn("Set", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSet);
                this.columnSubst = new global::System.Data.DataColumn("Subst", typeof(global::System.Drawing.Image), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubst);
                this.columnWarehouse = new global::System.Data.DataColumn("Warehouse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarehouse);
                this.columnStockCnt = new global::System.Data.DataColumn("StockCnt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockCnt);
                this.columnJoinSourMaker = new global::System.Data.DataColumn("JoinSourMaker", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinSourMaker);
                this.columnGenTanka = new global::System.Data.DataColumn("GenTanka", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenTanka);
                this.columnUriTanka = new global::System.Data.DataColumn("UriTanka", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUriTanka);
                this.columnArariritu = new global::System.Data.DataColumn("Arariritu", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArariritu);
                this.columnArarigaku = new global::System.Data.DataColumn("Ararigaku", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArarigaku);
                this.columnJoinDestMakerCd = new global::System.Data.DataColumn("JoinDestMakerCd", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinDestMakerCd);
                this.columnSetPartsFlg = new global::System.Data.DataColumn("SetPartsFlg", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetPartsFlg);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnJoinSourPartsNo,
                                this.columnJoinDestPartsNo,
                                this.columnJoinDestMakerCd}, true));
                this.columnPrmSetDtlNo2.Caption = "種別";
                this.columnPrmSetDtlNo2.DefaultValue = ((int)(0));
                this.columnJoinDispOrder.AllowDBNull = false;
                this.columnJoinDispOrder.Caption = "結合表示順位";
                this.columnJoinDispOrder.DefaultValue = ((int)(0));
                this.columnJoinSourPartsNo.AllowDBNull = false;
                this.columnJoinSourPartsNo.Caption = "純正品番";
                this.columnJoinSourPartsNo.DefaultValue = ((string)(""));
                this.columnJoinSourPartsNo.MaxLength = 24;
                this.columnJoinDestPartsNo.AllowDBNull = false;
                this.columnJoinDestPartsNo.Caption = "優良品番";
                this.columnJoinDestPartsNo.DefaultValue = ((string)(""));
                this.columnJoinDestPartsNo.MaxLength = 24;
                this.columnJoinQty.AllowDBNull = false;
                this.columnJoinQty.Caption = "QTY";
                this.columnJoinQty.DefaultValue = ((double)(0));
                this.columnJoinSpecialNote.Caption = "特記事項";
                this.columnJoinSpecialNote.DefaultValue = ((string)(""));
                this.columnJoinSpecialNote.MaxLength = 40;
                this.columnPrimePartsName.Caption = "品名";
                this.columnPrimePartsName.DefaultValue = ((string)(""));
                this.columnJoinDestMakerNm.Caption = "メーカー名";
                this.columnJoinDestMakerNm.DefaultValue = ((string)(""));
                this.columnPrice.Caption = "標準価格";
                this.columnPrice.DefaultValue = ((double)(0));
                this.columnShelf.Caption = "棚番";
                this.columnShelf.DefaultValue = ((string)(""));
                this.columnSet.Caption = "ｾｯﾄ";
                this.columnSubst.Caption = "代替";
                this.columnWarehouse.Caption = "倉庫";
                this.columnWarehouse.DefaultValue = ((string)(""));
                this.columnStockCnt.Caption = "現在庫数";
                this.columnStockCnt.DefaultValue = ((double)(0));
                this.columnJoinSourMaker.DefaultValue = ((int)(0));
                this.columnGenTanka.Caption = "原単価";
                this.columnGenTanka.DefaultValue = ((double)(0));
                this.columnUriTanka.Caption = "売単価";
                this.columnUriTanka.DefaultValue = ((double)(0));
                this.columnArariritu.Caption = "粗利率";
                this.columnArariritu.DefaultValue = ((double)(0));
                this.columnArarigaku.Caption = "粗利額";
                this.columnArarigaku.DefaultValue = ((double)(0));
                this.columnJoinDestMakerCd.AllowDBNull = false;
                this.columnJoinDestMakerCd.DefaultValue = ((int)(0));
                this.columnSetPartsFlg.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JoinPartsRow NewJoinPartsRow() {
                return ((JoinPartsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JoinPartsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JoinPartsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JoinPartsRowChanged != null)) {
                    this.JoinPartsRowChanged(this, new JoinPartsRowChangeEvent(((JoinPartsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JoinPartsRowChanging != null)) {
                    this.JoinPartsRowChanging(this, new JoinPartsRowChangeEvent(((JoinPartsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JoinPartsRowDeleted != null)) {
                    this.JoinPartsRowDeleted(this, new JoinPartsRowChangeEvent(((JoinPartsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JoinPartsRowDeleting != null)) {
                    this.JoinPartsRowDeleting(this, new JoinPartsRowChangeEvent(((JoinPartsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJoinPartsRow(JoinPartsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JoinPartsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable1Row : global::System.Data.DataRow {
            
            private DataTable1DataTable tableDataTable1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable1 = ((DataTable1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BL {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.BLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataTable1\' にある列 \'BL\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.BLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartsNm {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.PartsNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataTable1\' にある列 \'PartsNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.PartsNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartsNo {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.PartsNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataTable1\' にある列 \'PartsNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.PartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Maker {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.MakerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataTable1\' にある列 \'Maker\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.MakerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Price {
                get {
                    try {
                        return ((double)(this[this.tableDataTable1.PriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataTable1\' にある列 \'Price\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.PriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CtlgPartsNo {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.CtlgPartsNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataTable1\' にある列 \'CtlgPartsNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CtlgPartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewPartsNo {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.NewPartsNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataTable1\' にある列 \'NewPartsNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.NewPartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JoinSrcPartsNo {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.JoinSrcPartsNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataTable1\' にある列 \'JoinSrcPartsNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.JoinSrcPartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Cnt {
                get {
                    try {
                        return ((double)(this[this.tableDataTable1.CntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataTable1\' にある列 \'Cnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WareHouse {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.WareHouseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataTable1\' にある列 \'WareHouse\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.WareHouseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShelfNo {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.ShelfNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataTable1\' にある列 \'ShelfNo\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ShelfNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MakerCd {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.MakerCdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'DataTable1\' にある列 \'MakerCd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.MakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLNull() {
                return this.IsNull(this.tableDataTable1.BLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLNull() {
                this[this.tableDataTable1.BLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartsNmNull() {
                return this.IsNull(this.tableDataTable1.PartsNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPartsNmNull() {
                this[this.tableDataTable1.PartsNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartsNoNull() {
                return this.IsNull(this.tableDataTable1.PartsNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPartsNoNull() {
                this[this.tableDataTable1.PartsNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMakerNull() {
                return this.IsNull(this.tableDataTable1.MakerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMakerNull() {
                this[this.tableDataTable1.MakerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tableDataTable1.PriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tableDataTable1.PriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCtlgPartsNoNull() {
                return this.IsNull(this.tableDataTable1.CtlgPartsNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCtlgPartsNoNull() {
                this[this.tableDataTable1.CtlgPartsNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewPartsNoNull() {
                return this.IsNull(this.tableDataTable1.NewPartsNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewPartsNoNull() {
                this[this.tableDataTable1.NewPartsNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoinSrcPartsNoNull() {
                return this.IsNull(this.tableDataTable1.JoinSrcPartsNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoinSrcPartsNoNull() {
                this[this.tableDataTable1.JoinSrcPartsNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCntNull() {
                return this.IsNull(this.tableDataTable1.CntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCntNull() {
                this[this.tableDataTable1.CntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWareHouseNull() {
                return this.IsNull(this.tableDataTable1.WareHouseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWareHouseNull() {
                this[this.tableDataTable1.WareHouseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShelfNoNull() {
                return this.IsNull(this.tableDataTable1.ShelfNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShelfNoNull() {
                this[this.tableDataTable1.ShelfNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMakerCdNull() {
                return this.IsNull(this.tableDataTable1.MakerCdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMakerCdNull() {
                this[this.tableDataTable1.MakerCdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JoinPartsRow : global::System.Data.DataRow {
            
            private JoinPartsDataTable tableJoinParts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JoinPartsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJoinParts = ((JoinPartsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrmSetDtlNo2 {
                get {
                    try {
                        return ((int)(this[this.tableJoinParts.PrmSetDtlNo2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'PrmSetDtlNo2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.PrmSetDtlNo2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JoinDispOrder {
                get {
                    return ((int)(this[this.tableJoinParts.JoinDispOrderColumn]));
                }
                set {
                    this[this.tableJoinParts.JoinDispOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JoinSourPartsNo {
                get {
                    return ((string)(this[this.tableJoinParts.JoinSourPartsNoColumn]));
                }
                set {
                    this[this.tableJoinParts.JoinSourPartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JoinDestPartsNo {
                get {
                    return ((string)(this[this.tableJoinParts.JoinDestPartsNoColumn]));
                }
                set {
                    this[this.tableJoinParts.JoinDestPartsNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double JoinQty {
                get {
                    return ((double)(this[this.tableJoinParts.JoinQtyColumn]));
                }
                set {
                    this[this.tableJoinParts.JoinQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JoinSpecialNote {
                get {
                    try {
                        return ((string)(this[this.tableJoinParts.JoinSpecialNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'JoinSpecialNote\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.JoinSpecialNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimePartsName {
                get {
                    try {
                        return ((string)(this[this.tableJoinParts.PrimePartsNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'PrimePartsName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.PrimePartsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JoinDestMakerNm {
                get {
                    try {
                        return ((string)(this[this.tableJoinParts.JoinDestMakerNmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'JoinDestMakerNm\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.JoinDestMakerNmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Price {
                get {
                    try {
                        return ((double)(this[this.tableJoinParts.PriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'Price\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.PriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shelf {
                get {
                    try {
                        return ((string)(this[this.tableJoinParts.ShelfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'Shelf\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.ShelfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image Set {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableJoinParts.SetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'Set\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.SetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Drawing.Image Subst {
                get {
                    try {
                        return ((global::System.Drawing.Image)(this[this.tableJoinParts.SubstColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'Subst\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.SubstColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Warehouse {
                get {
                    try {
                        return ((string)(this[this.tableJoinParts.WarehouseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'Warehouse\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.WarehouseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double StockCnt {
                get {
                    try {
                        return ((double)(this[this.tableJoinParts.StockCntColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'StockCnt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.StockCntColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JoinSourMaker {
                get {
                    try {
                        return ((int)(this[this.tableJoinParts.JoinSourMakerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'JoinSourMaker\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.JoinSourMakerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GenTanka {
                get {
                    try {
                        return ((double)(this[this.tableJoinParts.GenTankaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'GenTanka\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.GenTankaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double UriTanka {
                get {
                    try {
                        return ((double)(this[this.tableJoinParts.UriTankaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'UriTanka\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.UriTankaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Arariritu {
                get {
                    try {
                        return ((double)(this[this.tableJoinParts.ArarirituColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'Arariritu\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.ArarirituColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Ararigaku {
                get {
                    try {
                        return ((double)(this[this.tableJoinParts.ArarigakuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'Ararigaku\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.ArarigakuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JoinDestMakerCd {
                get {
                    return ((int)(this[this.tableJoinParts.JoinDestMakerCdColumn]));
                }
                set {
                    this[this.tableJoinParts.JoinDestMakerCdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetPartsFlg {
                get {
                    try {
                        return ((int)(this[this.tableJoinParts.SetPartsFlgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'JoinParts\' にある列 \'SetPartsFlg\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableJoinParts.SetPartsFlgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrmSetDtlNo2Null() {
                return this.IsNull(this.tableJoinParts.PrmSetDtlNo2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrmSetDtlNo2Null() {
                this[this.tableJoinParts.PrmSetDtlNo2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoinSpecialNoteNull() {
                return this.IsNull(this.tableJoinParts.JoinSpecialNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoinSpecialNoteNull() {
                this[this.tableJoinParts.JoinSpecialNoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimePartsNameNull() {
                return this.IsNull(this.tableJoinParts.PrimePartsNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimePartsNameNull() {
                this[this.tableJoinParts.PrimePartsNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoinDestMakerNmNull() {
                return this.IsNull(this.tableJoinParts.JoinDestMakerNmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoinDestMakerNmNull() {
                this[this.tableJoinParts.JoinDestMakerNmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tableJoinParts.PriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tableJoinParts.PriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShelfNull() {
                return this.IsNull(this.tableJoinParts.ShelfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShelfNull() {
                this[this.tableJoinParts.ShelfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetNull() {
                return this.IsNull(this.tableJoinParts.SetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetNull() {
                this[this.tableJoinParts.SetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubstNull() {
                return this.IsNull(this.tableJoinParts.SubstColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubstNull() {
                this[this.tableJoinParts.SubstColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarehouseNull() {
                return this.IsNull(this.tableJoinParts.WarehouseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarehouseNull() {
                this[this.tableJoinParts.WarehouseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStockCntNull() {
                return this.IsNull(this.tableJoinParts.StockCntColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStockCntNull() {
                this[this.tableJoinParts.StockCntColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoinSourMakerNull() {
                return this.IsNull(this.tableJoinParts.JoinSourMakerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoinSourMakerNull() {
                this[this.tableJoinParts.JoinSourMakerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenTankaNull() {
                return this.IsNull(this.tableJoinParts.GenTankaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenTankaNull() {
                this[this.tableJoinParts.GenTankaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUriTankaNull() {
                return this.IsNull(this.tableJoinParts.UriTankaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUriTankaNull() {
                this[this.tableJoinParts.UriTankaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArarirituNull() {
                return this.IsNull(this.tableJoinParts.ArarirituColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArarirituNull() {
                this[this.tableJoinParts.ArarirituColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArarigakuNull() {
                return this.IsNull(this.tableJoinParts.ArarigakuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArarigakuNull() {
                this[this.tableJoinParts.ArarigakuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetPartsFlgNull() {
                return this.IsNull(this.tableJoinParts.SetPartsFlgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetPartsFlgNull() {
                this[this.tableJoinParts.SetPartsFlgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable1RowChangeEvent : global::System.EventArgs {
            
            private DataTable1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1RowChangeEvent(DataTable1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JoinPartsRowChangeEvent : global::System.EventArgs {
            
            private JoinPartsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JoinPartsRowChangeEvent(JoinPartsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JoinPartsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591