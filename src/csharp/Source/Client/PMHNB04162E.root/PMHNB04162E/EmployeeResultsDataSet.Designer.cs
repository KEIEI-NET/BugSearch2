//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.3615
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Broadleaf.Application.UIData {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EmployeeResultsDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EmployeeResultsDataSet : global::System.Data.DataSet {
        
        private EmployeeResultsDataTable tableEmployeeResults;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmployeeResultsDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EmployeeResultsDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["EmployeeResults"] != null)) {
                    base.Tables.Add(new EmployeeResultsDataTable(ds.Tables["EmployeeResults"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeResultsDataTable EmployeeResults {
            get {
                return this.tableEmployeeResults;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            EmployeeResultsDataSet cln = ((EmployeeResultsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EmployeeResults"] != null)) {
                    base.Tables.Add(new EmployeeResultsDataTable(ds.Tables["EmployeeResults"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEmployeeResults = ((EmployeeResultsDataTable)(base.Tables["EmployeeResults"]));
            if ((initTable == true)) {
                if ((this.tableEmployeeResults != null)) {
                    this.tableEmployeeResults.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EmployeeResultsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EmployeeResultsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEmployeeResults = new EmployeeResultsDataTable();
            base.Tables.Add(this.tableEmployeeResults);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployeeResults() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EmployeeResultsDataSet ds = new EmployeeResultsDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EmployeeResultsRowChangeEventHandler(object sender, EmployeeResultsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeResultsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSectionCode;
            
            private global::System.Data.DataColumn columnSectionName;
            
            private global::System.Data.DataColumn columnEmployeeCode;
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnDuringSt;
            
            private global::System.Data.DataColumn columnDuringEd;
            
            private global::System.Data.DataColumn columnBackSalesTotalTaxExc;
            
            private global::System.Data.DataColumn columnRetGoodSalesTotalTaxExc;
            
            private global::System.Data.DataColumn columnBackSalesDisTtlTaxExc;
            
            private global::System.Data.DataColumn columnPureSales;
            
            private global::System.Data.DataColumn columnSlipNumCount;
            
            private global::System.Data.DataColumn columnSalesTargetMoney;
            
            private global::System.Data.DataColumn columnSalesStructure;
            
            private global::System.Data.DataColumn columnTotalCost;
            
            private global::System.Data.DataColumn columnRetGoodsPct;
            
            private global::System.Data.DataColumn columnDisTtlPct;
            
            private global::System.Data.DataColumn columnGrossProfit;
            
            private global::System.Data.DataColumn columnGrossProfitPct;
            
            private global::System.Data.DataColumn columnTargetPct;
            
            private global::System.Data.DataColumn columnRetGoodsStructure;
            
            private global::System.Data.DataColumn columnHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeResultsDataTable() {
                this.TableName = "EmployeeResults";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeResultsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeResultsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionCodeColumn {
                get {
                    return this.columnSectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionNameColumn {
                get {
                    return this.columnSectionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DuringStColumn {
                get {
                    return this.columnDuringSt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DuringEdColumn {
                get {
                    return this.columnDuringEd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackSalesTotalTaxExcColumn {
                get {
                    return this.columnBackSalesTotalTaxExc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RetGoodSalesTotalTaxExcColumn {
                get {
                    return this.columnRetGoodSalesTotalTaxExc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackSalesDisTtlTaxExcColumn {
                get {
                    return this.columnBackSalesDisTtlTaxExc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PureSalesColumn {
                get {
                    return this.columnPureSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SlipNumCountColumn {
                get {
                    return this.columnSlipNumCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesTargetMoneyColumn {
                get {
                    return this.columnSalesTargetMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesStructureColumn {
                get {
                    return this.columnSalesStructure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostColumn {
                get {
                    return this.columnTotalCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RetGoodsPctColumn {
                get {
                    return this.columnRetGoodsPct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisTtlPctColumn {
                get {
                    return this.columnDisTtlPct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossProfitColumn {
                get {
                    return this.columnGrossProfit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossProfitPctColumn {
                get {
                    return this.columnGrossProfitPct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TargetPctColumn {
                get {
                    return this.columnTargetPct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RetGoodsStructureColumn {
                get {
                    return this.columnRetGoodsStructure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeaderColumn {
                get {
                    return this.columnHeader;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeResultsRow this[int index] {
                get {
                    return ((EmployeeResultsRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeResultsRowChangeEventHandler EmployeeResultsRowChanging;
            
            public event EmployeeResultsRowChangeEventHandler EmployeeResultsRowChanged;
            
            public event EmployeeResultsRowChangeEventHandler EmployeeResultsRowDeleting;
            
            public event EmployeeResultsRowChangeEventHandler EmployeeResultsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeResultsRow(EmployeeResultsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeResultsRow AddEmployeeResultsRow(
                        string SectionCode, 
                        string SectionName, 
                        string EmployeeCode, 
                        string EmployeeName, 
                        string DuringSt, 
                        string DuringEd, 
                        long BackSalesTotalTaxExc, 
                        long RetGoodSalesTotalTaxExc, 
                        long BackSalesDisTtlTaxExc, 
                        long PureSales, 
                        int SlipNumCount, 
                        long SalesTargetMoney, 
                        decimal SalesStructure, 
                        long TotalCost, 
                        decimal RetGoodsPct, 
                        decimal DisTtlPct, 
                        long GrossProfit, 
                        decimal GrossProfitPct, 
                        decimal TargetPct, 
                        decimal RetGoodsStructure, 
                        int Header) {
                EmployeeResultsRow rowEmployeeResultsRow = ((EmployeeResultsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SectionCode,
                        SectionName,
                        EmployeeCode,
                        EmployeeName,
                        DuringSt,
                        DuringEd,
                        BackSalesTotalTaxExc,
                        RetGoodSalesTotalTaxExc,
                        BackSalesDisTtlTaxExc,
                        PureSales,
                        SlipNumCount,
                        SalesTargetMoney,
                        SalesStructure,
                        TotalCost,
                        RetGoodsPct,
                        DisTtlPct,
                        GrossProfit,
                        GrossProfitPct,
                        TargetPct,
                        RetGoodsStructure,
                        Header};
                rowEmployeeResultsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployeeResultsRow);
                return rowEmployeeResultsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmployeeResultsDataTable cln = ((EmployeeResultsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmployeeResultsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSectionCode = base.Columns["SectionCode"];
                this.columnSectionName = base.Columns["SectionName"];
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnDuringSt = base.Columns["DuringSt"];
                this.columnDuringEd = base.Columns["DuringEd"];
                this.columnBackSalesTotalTaxExc = base.Columns["BackSalesTotalTaxExc"];
                this.columnRetGoodSalesTotalTaxExc = base.Columns["RetGoodSalesTotalTaxExc"];
                this.columnBackSalesDisTtlTaxExc = base.Columns["BackSalesDisTtlTaxExc"];
                this.columnPureSales = base.Columns["PureSales"];
                this.columnSlipNumCount = base.Columns["SlipNumCount"];
                this.columnSalesTargetMoney = base.Columns["SalesTargetMoney"];
                this.columnSalesStructure = base.Columns["SalesStructure"];
                this.columnTotalCost = base.Columns["TotalCost"];
                this.columnRetGoodsPct = base.Columns["RetGoodsPct"];
                this.columnDisTtlPct = base.Columns["DisTtlPct"];
                this.columnGrossProfit = base.Columns["GrossProfit"];
                this.columnGrossProfitPct = base.Columns["GrossProfitPct"];
                this.columnTargetPct = base.Columns["TargetPct"];
                this.columnRetGoodsStructure = base.Columns["RetGoodsStructure"];
                this.columnHeader = base.Columns["Header"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSectionCode = new global::System.Data.DataColumn("SectionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionCode);
                this.columnSectionName = new global::System.Data.DataColumn("SectionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionName);
                this.columnEmployeeCode = new global::System.Data.DataColumn("EmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnDuringSt = new global::System.Data.DataColumn("DuringSt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuringSt);
                this.columnDuringEd = new global::System.Data.DataColumn("DuringEd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuringEd);
                this.columnBackSalesTotalTaxExc = new global::System.Data.DataColumn("BackSalesTotalTaxExc", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackSalesTotalTaxExc);
                this.columnRetGoodSalesTotalTaxExc = new global::System.Data.DataColumn("RetGoodSalesTotalTaxExc", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetGoodSalesTotalTaxExc);
                this.columnBackSalesDisTtlTaxExc = new global::System.Data.DataColumn("BackSalesDisTtlTaxExc", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackSalesDisTtlTaxExc);
                this.columnPureSales = new global::System.Data.DataColumn("PureSales", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPureSales);
                this.columnSlipNumCount = new global::System.Data.DataColumn("SlipNumCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlipNumCount);
                this.columnSalesTargetMoney = new global::System.Data.DataColumn("SalesTargetMoney", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesTargetMoney);
                this.columnSalesStructure = new global::System.Data.DataColumn("SalesStructure", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesStructure);
                this.columnTotalCost = new global::System.Data.DataColumn("TotalCost", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCost);
                this.columnRetGoodsPct = new global::System.Data.DataColumn("RetGoodsPct", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetGoodsPct);
                this.columnDisTtlPct = new global::System.Data.DataColumn("DisTtlPct", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisTtlPct);
                this.columnGrossProfit = new global::System.Data.DataColumn("GrossProfit", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossProfit);
                this.columnGrossProfitPct = new global::System.Data.DataColumn("GrossProfitPct", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossProfitPct);
                this.columnTargetPct = new global::System.Data.DataColumn("TargetPct", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTargetPct);
                this.columnRetGoodsStructure = new global::System.Data.DataColumn("RetGoodsStructure", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetGoodsStructure);
                this.columnHeader = new global::System.Data.DataColumn("Header", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader);
                this.columnSectionCode.AllowDBNull = false;
                this.columnSectionCode.Caption = "拠点";
                this.columnSectionName.Caption = "拠点";
                this.columnEmployeeCode.AllowDBNull = false;
                this.columnEmployeeCode.Caption = "従業員コード";
                this.columnEmployeeName.Caption = "従業員名称";
                this.columnDuringSt.Caption = "開始年月日";
                this.columnDuringEd.Caption = "終了年月日";
                this.columnBackSalesTotalTaxExc.Caption = "黒伝の売上伝票合計（税抜き）";
                this.columnRetGoodSalesTotalTaxExc.Caption = "返品伝票の売上伝票合計（税抜き）";
                this.columnBackSalesDisTtlTaxExc.Caption = "黒伝の売上値引金額計（税抜き）";
                this.columnPureSales.Caption = "純売上";
                this.columnSlipNumCount.Caption = "伝票枚数";
                this.columnSlipNumCount.DefaultValue = ((int)(0));
                this.columnSalesTargetMoney.Caption = "売上目標額";
                this.columnSalesStructure.Caption = "売上構成";
                this.columnTotalCost.Caption = "原価金額計の合計";
                this.columnRetGoodsPct.Caption = "返品率";
                this.columnDisTtlPct.Caption = "値引率";
                this.columnGrossProfit.Caption = "粗利額";
                this.columnGrossProfitPct.Caption = "粗利率";
                this.columnTargetPct.Caption = "目標達成率";
                this.columnRetGoodsStructure.Caption = "返品構成";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeResultsRow NewEmployeeResultsRow() {
                return ((EmployeeResultsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmployeeResultsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmployeeResultsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeResultsRowChanged != null)) {
                    this.EmployeeResultsRowChanged(this, new EmployeeResultsRowChangeEvent(((EmployeeResultsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeResultsRowChanging != null)) {
                    this.EmployeeResultsRowChanging(this, new EmployeeResultsRowChangeEvent(((EmployeeResultsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeResultsRowDeleted != null)) {
                    this.EmployeeResultsRowDeleted(this, new EmployeeResultsRowChangeEvent(((EmployeeResultsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeResultsRowDeleting != null)) {
                    this.EmployeeResultsRowDeleting(this, new EmployeeResultsRowChangeEvent(((EmployeeResultsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeResultsRow(EmployeeResultsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeResultsDataSet ds = new EmployeeResultsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeResultsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeResultsRow : global::System.Data.DataRow {
            
            private EmployeeResultsDataTable tableEmployeeResults;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeResultsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeeResults = ((EmployeeResultsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionCode {
                get {
                    return ((string)(this[this.tableEmployeeResults.SectionCodeColumn]));
                }
                set {
                    this[this.tableEmployeeResults.SectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeResults.SectionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'SectionName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.SectionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    return ((string)(this[this.tableEmployeeResults.EmployeeCodeColumn]));
                }
                set {
                    this[this.tableEmployeeResults.EmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeResults.EmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'EmployeeName\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DuringSt {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeResults.DuringStColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'DuringSt\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.DuringStColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DuringEd {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeResults.DuringEdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'DuringEd\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.DuringEdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long BackSalesTotalTaxExc {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeResults.BackSalesTotalTaxExcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'BackSalesTotalTaxExc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.BackSalesTotalTaxExcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RetGoodSalesTotalTaxExc {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeResults.RetGoodSalesTotalTaxExcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'RetGoodSalesTotalTaxExc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.RetGoodSalesTotalTaxExcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long BackSalesDisTtlTaxExc {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeResults.BackSalesDisTtlTaxExcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'BackSalesDisTtlTaxExc\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.BackSalesDisTtlTaxExcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PureSales {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeResults.PureSalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'PureSales\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.PureSalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SlipNumCount {
                get {
                    try {
                        return ((int)(this[this.tableEmployeeResults.SlipNumCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'SlipNumCount\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.SlipNumCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SalesTargetMoney {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeResults.SalesTargetMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'SalesTargetMoney\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.SalesTargetMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SalesStructure {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeResults.SalesStructureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'SalesStructure\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.SalesStructureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long TotalCost {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeResults.TotalCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'TotalCost\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.TotalCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RetGoodsPct {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeResults.RetGoodsPctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'RetGoodsPct\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.RetGoodsPctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DisTtlPct {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeResults.DisTtlPctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'DisTtlPct\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.DisTtlPctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long GrossProfit {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeResults.GrossProfitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'GrossProfit\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.GrossProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrossProfitPct {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeResults.GrossProfitPctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'GrossProfitPct\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.GrossProfitPctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TargetPct {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeResults.TargetPctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'TargetPct\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.TargetPctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RetGoodsStructure {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeResults.RetGoodsStructureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'RetGoodsStructure\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.RetGoodsStructureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Header {
                get {
                    try {
                        return ((int)(this[this.tableEmployeeResults.HeaderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'EmployeeResults\' にある列 \'Header\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEmployeeResults.HeaderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionNameNull() {
                return this.IsNull(this.tableEmployeeResults.SectionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionNameNull() {
                this[this.tableEmployeeResults.SectionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tableEmployeeResults.EmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeNameNull() {
                this[this.tableEmployeeResults.EmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDuringStNull() {
                return this.IsNull(this.tableEmployeeResults.DuringStColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDuringStNull() {
                this[this.tableEmployeeResults.DuringStColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDuringEdNull() {
                return this.IsNull(this.tableEmployeeResults.DuringEdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDuringEdNull() {
                this[this.tableEmployeeResults.DuringEdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackSalesTotalTaxExcNull() {
                return this.IsNull(this.tableEmployeeResults.BackSalesTotalTaxExcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackSalesTotalTaxExcNull() {
                this[this.tableEmployeeResults.BackSalesTotalTaxExcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetGoodSalesTotalTaxExcNull() {
                return this.IsNull(this.tableEmployeeResults.RetGoodSalesTotalTaxExcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetGoodSalesTotalTaxExcNull() {
                this[this.tableEmployeeResults.RetGoodSalesTotalTaxExcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackSalesDisTtlTaxExcNull() {
                return this.IsNull(this.tableEmployeeResults.BackSalesDisTtlTaxExcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackSalesDisTtlTaxExcNull() {
                this[this.tableEmployeeResults.BackSalesDisTtlTaxExcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPureSalesNull() {
                return this.IsNull(this.tableEmployeeResults.PureSalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPureSalesNull() {
                this[this.tableEmployeeResults.PureSalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSlipNumCountNull() {
                return this.IsNull(this.tableEmployeeResults.SlipNumCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSlipNumCountNull() {
                this[this.tableEmployeeResults.SlipNumCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesTargetMoneyNull() {
                return this.IsNull(this.tableEmployeeResults.SalesTargetMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesTargetMoneyNull() {
                this[this.tableEmployeeResults.SalesTargetMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesStructureNull() {
                return this.IsNull(this.tableEmployeeResults.SalesStructureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesStructureNull() {
                this[this.tableEmployeeResults.SalesStructureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalCostNull() {
                return this.IsNull(this.tableEmployeeResults.TotalCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalCostNull() {
                this[this.tableEmployeeResults.TotalCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetGoodsPctNull() {
                return this.IsNull(this.tableEmployeeResults.RetGoodsPctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetGoodsPctNull() {
                this[this.tableEmployeeResults.RetGoodsPctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisTtlPctNull() {
                return this.IsNull(this.tableEmployeeResults.DisTtlPctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisTtlPctNull() {
                this[this.tableEmployeeResults.DisTtlPctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossProfitNull() {
                return this.IsNull(this.tableEmployeeResults.GrossProfitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossProfitNull() {
                this[this.tableEmployeeResults.GrossProfitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossProfitPctNull() {
                return this.IsNull(this.tableEmployeeResults.GrossProfitPctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossProfitPctNull() {
                this[this.tableEmployeeResults.GrossProfitPctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTargetPctNull() {
                return this.IsNull(this.tableEmployeeResults.TargetPctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTargetPctNull() {
                this[this.tableEmployeeResults.TargetPctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetGoodsStructureNull() {
                return this.IsNull(this.tableEmployeeResults.RetGoodsStructureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetGoodsStructureNull() {
                this[this.tableEmployeeResults.RetGoodsStructureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeaderNull() {
                return this.IsNull(this.tableEmployeeResults.HeaderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeaderNull() {
                this[this.tableEmployeeResults.HeaderColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeResultsRowChangeEvent : global::System.EventArgs {
            
            private EmployeeResultsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeResultsRowChangeEvent(EmployeeResultsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeResultsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591