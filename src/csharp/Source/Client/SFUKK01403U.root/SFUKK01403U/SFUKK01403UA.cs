//****************************************************************************//
// システム         : .NSシリーズ
// プログラム名称   : 入金伝票入力（入金型）
// プログラム概要   : 入金伝票入力の登録・変更・削除を行う
//----------------------------------------------------------------------------//
//                (c)Copyright  2007 Broadleaf Co.,Ltd.
//============================================================================//
// 履歴
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : amami
// 作 成 日  2005/08/20  修正内容 : 新規作成
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 
// 修 正 日  2007/01/31  修正内容 : MA.NS用に変更
// ・売上番号の追加
// ・画面スキン変更対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : T.Kimura
// 修 正 日  2007/04/18  修正内容 : 得意先請求金額マスタの変更に伴い請求の鏡情報を修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : T.Kimura
// 修 正 日  2007/04/18  修正内容 : 次の点を修正
// 1. 得意先の検索を行ったときに入金伝票入力欄が更新状態で表示されるのを修正
// 2. 検索(再検索)ボタンを押下すると新規モードと更新モードが切り替わるのを修正
// 3. 入力されたクレジット会社コードに該当するクレジット会社がなかったらメッセージを表示するように修正
// ※ クレジット入力時のクレジット会社コードなどの必須入力はさしあたり対応しません。
// 　対応するときは、入金設定マスタ（？）に必須入力かそうじゃないかを選択できるフラグを用意して制御した方がいいだろうとのこと
// 4. 支払入力と同じように保存時の入金日をクリアしないで表示するように変更
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : T.Kimura
// 修 正 日  2007/07/26  修正内容 : 得意先ガイドを追加
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : T.Kimura
// 修 正 日  2007/07/30  修正内容 : 保存時にクレジット会社のチェックを追加
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 疋田 勇人
// 修 正 日  2007/10/10  修正内容 : DC.NS用に変更
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 忍 幸史
// 修 正 日  2008/06/26  修正内容 : Partsman用に変更
//----------------------------------------------------------------------------//
// 管理番号  12908,13098 作成担当 : 工藤 恵優
// 修 正 日  2008/06/26  修正内容 : スペースキーでの項目選択機能を実装
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30413 犬飼
// 修 正 日  2009/05/15  修正内容 : MANTIS【13286、13287】請求全体設定の最新情報取得
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30413 犬飼
// 修 正 日  2009/06/24  修正内容 : MANTIS【13579、13581】対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30413 犬飼
// 修 正 日  2009/06/26  修正内容 : MANTIS【13344】対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 22008 長内
// 修 正 日  2009/07/21  修正内容 : MANTIS【13286、13287】フィードバック対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30517 夏野
// 修 正 日  2009/10/23  修正内容 : 障害：伝票日付制御・入力日付のままでもシステム日付に戻る障害を修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 李占川
// 修 正 日  2009/12/16  修正内容 : ＰＭ．ＮＳ保守依頼④,操作性/入力速度向上のために以下の改良を行う
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2010/03/25  修正内容 : MANTIS【15195】0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2010/03/25  修正内容 : MANTIS【15196】入金一覧画面に｢入力担当者｣を表示へ変更
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2010/04/30  修正内容 : MANTIS【15195】
// ①小切手、手形の日付がDateTime.MinValueの場合、表示しない
// ②入金内訳に0円も表示する
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
// 修 正 日  2010/05/14  修正内容 : MANTIS【15195】
// ①入金引当からの0円データの保存処理で金種が選択できない
// ②0円データでは、有効期間を持つ金種の日付チェックは不要
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30434 工藤
    // 修 正 日  2010/05/17  修正内容 : MANTIS【15195】
// ①売上引当にて、売上の赤伝データの引当額が不正
//----------------------------------------------------------------------------//
// 管理番号  10602352-00 作成担当 : 李占川
// 修 正 日  2010/06/08  修正内容 : 障害改良対応（７月リリース分）の対応
//----------------------------------------------------------------------------//
// 管理番号  10602352-00 作成担当 : 李占川
// 修 正 日  2010/06/17  修正内容 : Redmine#9948の修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 22018 鈴木正臣
// 修 正 日  2010/07/01  修正内容 : ①未入金一覧表の印刷機能を追加。(ボタン"btnNoDepSalList"追加)
//                                 ②入金一覧タブの"～"リテラル(ultraLabel2)の位置・サイズを修正。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 22018 鈴木正臣
// 修 正 日  2010/07/07  修正内容 : 成果物統合２
//                               :   ６次改良 2010/07/01 組込
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 22018 鈴木正臣
// 修 正 日  2010/07/12  修正内容 : 成果物統合２
//                               :   ①明細部のアローキー制御修正。
//                               :   ②明細部でマイナス金額入力可能に修正。
//                               :   ③コピーペーストで不正入力した場合の制御を追加。
//                               :   ④デザイナ上の変更
//                               :   　　grdDepositKindにAfterCellActivateイベント処理を追加。
//                               :   　　edtFeeDeposit.ActiveAppearance.TextHAlign = Right に変更。
//                               :   　　edtDiscountDeposit.ActiveAppearance.TextHAlign = Right に変更。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 22018 鈴木正臣
// 修 正 日  2010/08/18  修正内容 : 締次ロック対応。（メッセージ変更）///
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 李占川
// 修 正 日  2010/12/20  修正内容 : PM.NS障害改良対応(12月分)
//                                : ①鑑部の集計期間の終了日をMAXに変更する。
//                                : ②手形データあり入金の金額ゼロ変更時のメッセージ追加
//                                : ③伝票削除・赤伝発行を実行した後、鑑部の今回入金額を更新する。
//                                : ④引当情報表示の改良
//                                : ⑤手形金額の数値変換処理の修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : yangmj
// 修 正 日  2011/01/21  修正内容 : Redmine#18653の修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 李占川
// 修 正 日  2011/02/11  修正内容 : Redmine#18904の修正
//                                : 売上引当タブの引当額の初期値を修正する。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 李占川
// 修 正 日  2011/02/14  修正内容 : Redmine#18904の修正
//                                : 売上引当タブの入金未引当額の表示内容を変更する。
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 30517 夏野 駿希
// 修 正 日  2011/05/16  修正内容 : Mantis.17304 得意先コードと名称の整合性がとれないデータが登録される不具合修正
//                                : 売上引当タブの入金未引当額の表示内容を変更する。
//----------------------------------------------------------------------------//
// 管理番号  10704766-00 作成担当 : wangf
// 修 正 日  2011/07/21  修正内容 : 障害改良対応連番921
//----------------------------------------------------------------------------//
// 管理番号  10704766-00 作成担当 : 施炳中
// 修 正 日  2011/07/22  修正内容 : 表示不具合の為改善願います,対応連番850
//----------------------------------------------------------------------------//
// 管理番号  10704766-00 作成担当 : 李占川
// 修 正 日  2011/08/08  修正内容 : 案件一覧連番921、redmine#23408の対応
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 斉建華
// 修 正 日  2011/08/13  修正内容 : SCM対応 - 拠点管理(10704767-00)
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : qijh
// 修 正 日  2011/08/24  修正内容 : Redmine#23928の修正
//                                : 送信済のチェックのメッセージをインフォで出すように改修
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 陳建明
// 修 正 日  2011/11/18  修正内容 : Redmine#7955の修正
//                                : 入金伝票入力 振込金額を入力した後のフォーカス制御の修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 陳建明
// 修 正 日  2011/11/28  修正内容 : Redmine#7955の修正
//                                : 入金伝票入力 振込金額を入力した後のフォーカス制御の修正
//----------------------------------------------------------------------------//
// 管理番号  10802197-00 作成担当 : FSI今野
// 修 正 日  K2012/07/13 修正内容 : 山形部品個別依頼
//                                : 振込金額入力時は独自の銀行コードの入力を可能に修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 脇田 靖之
// 修 正 日  2012/07/24  修正内容 : 既にある手形データと入金データが紐付いてしまう件の修正
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 田建委
// 修 正 日  2012/09/21  修正内容 : 2012/10/17配信分 Redmine#32415
//                                  発行者の追加対応
//----------------------------------------------------------------------------//
// 管理番号  10806793-00 作成担当 : 王君
// 修 正 日  2012/12/24  修正内容 : 2013/03/13配信分 Redmine#33741
//----------------------------------------------------------------------------//
// 管理番号  10806793-00 作成担当 : zhuhh
// 修 正 日  2013/01/10  修正内容 : 2013/03/13配信分 Redmine #34123
//                                  手形データ重複した伝票番号の登録を出来る様にする
//----------------------------------------------------------------------------//
// 管理番号  10806793-00 作成担当 : 王君
// 修 正 日  2013/02/06  修正内容 : 2013/03/13配信分 Redmine#33741
//----------------------------------------------------------------------------//
// 管理番号  10806793-00 作成担当 : 王君
// 修 正 日  2013/02/07  修正内容 : 2013/03/13配信分 Redmine#33741
//----------------------------------------------------------------------------//
// 管理番号  10806793-00 作成担当 : 董桂鈺
// 修 正 日  2013/02/17  修正内容 : 2013/03/13配信分 Redmine#33921
//                                  入金の摘要欄に半角カタカナを入力できるように修正
//----------------------------------------------------------------------------//
// 管理番号  10806793-00 作成担当 : 王君
// 修 正 日  2013/02/25  修正内容 : 2013/03/13配信分 Redmine#33741
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 高峰
// 修 正 日  2013/06/20  修正内容 : 配信なし分 Redmine#35133
//----------------------------------------------------------------------------//
// 管理番号              作成担当 : 呉軍
// 修 正 日  2013/07/18  修正内容 : 配信なし分 Redmine#35133　既存障害№1の対応
//                                  手数料プラス・マイナスのチェック処理を削除
//----------------------------------------------------------------------------//
// 管理番号  10801804-00 作成担当 : LIUSY
// 修 正 日  2013/07/19  修正内容 : Redmine#38705 入金伝票入力の鑑部分の位置調整
//----------------------------------------------------------------------------//
// 管理番号  11001635-00 作成担当 : zhujw
// 修 正 日  2014/07/09  修正内容  : RedMine#42902の⑬
//                                  既存障害の対応
//                                  「-」のみで他の項目に移動しようとすると以下のエラーが発生する。
//----------------------------------------------------------------------------//
// 管理番号  11100068-00 作成担当 : 脇田 靖之
// 修 正 日  2015/07/16  修正内容 : 東海自動車工業課題対応一覧№1
//                                  　一括引当ボタン押下時、入金未引当額・引当額・売上未引当額に不正な値が表示される
//                                  既存障害①
//                                  　一括引当ボタン押下時の明細チェック有無での動作不一致
//                                  既存障害②
//                                  　赤伝発行にアプリケーションエラーが発生する
//                                  既存障害③
//                                  　一部引当を行った入金伝票を呼び出し引当金額を修正し保存を行うと、伝票の未引当額が間違った額で表示される
//                                  既存障害④
//                                  　一部引当を行った入金伝票に対して伝票合計より多い金額を引当額に入力すると過剰引当される
//----------------------------------------------------------------------------//
// 管理番号  11170129-00 作成担当 : 時シン
// 修 正 日  2015/08/17  修正内容 : Redmine#47015 今回入金額の累計後残高は誤る対応
//----------------------------------------------------------------------------//
// 管理番号  11170129-00 作成担当 : 時シン
// 修 正 日  2015/09/04  修正内容 : Redmine#47015の#20 今回入金額計算の追加対応
//----------------------------------------------------------------------------//

using System;
using System.Data;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Threading;

using Broadleaf.Library.Resources;
using Broadleaf.Application.Controller;
using Broadleaf.Application.Controller.Util;    // ADD 2008/03/31 不具合対応[12908],[13098]：スペースキーでの項目選択機能を実装
using Broadleaf.Application.Common;
using Broadleaf.Application.UIData;
using Broadleaf.Application.Resources;
using Broadleaf.Library.Globarization;
using Broadleaf.Windows.Forms;
using Broadleaf.Library.Windows.Forms;
using Infragistics.Win.UltraWinGrid;
using Infragistics.Win;
using Infragistics.Win.UltraWinToolTip;
using Infragistics.Win.UltraWinTabControl;
using System.Collections.Specialized;
using Infragistics.Win.UltraWinEditors;
using Broadleaf.Application.Controller.Facade;
using System.Collections.Generic;

namespace Broadleaf.Windows.Forms
{
	/// <summary>
	/// 入金伝票入力（入金型）ＵＩクラス
	/// </summary>
	/// <remarks>
	/// <br>Note       : 入金伝票入力（入金型）ＵＩの機能を実装します。</br>
	/// <br>Programmer : 97036 amami</br>
	/// <br>Date       : 2005.08.20</br>
    /// <br></br>
    /// <br>Update Note: 2007.01.31 MA.NS用に変更</br>
    /// <br>                          ・売上番号の追加</br>
    /// <br>                          ・画面スキン変更対応</br>
    /// <br>             2007.04.18 T.Kimura 得意先請求金額マスタの変更に伴い請求の鏡情報を修正</br>
    /// <br>             2007.05.30 18322 T.Kimura 次の点を修正</br>
    /// <br>                   1. 得意先の検索を行ったときに入金伝票入力欄が更新状態で表示されるのを修正</br>
    /// <br>                   2. 検索(再検索)ボタンを押下すると新規モードと更新モードが切り替わるのを修正</br>
    /// <br>                   3. 入力されたクレジット会社コードに該当するクレジット会社がなかったらメッセージを表示するように修正</br>
    /// <br>                       ※ クレジット入力時のクレジット会社コードなどの必須入力はさしあたり対応しません。</br>
    /// <br>                          対応するときは、入金設定マスタ（？）に必須入力かそうじゃないかを選択できるフラグを用意して制御した方がいいだろうとのこと</br>
    /// <br>                   4. 支払入力と同じように保存時の入金日をクリアしないで表示するように変更</br>
    /// <br>             2007.07.26 18322 T.Kimura 得意先ガイドを追加</br>
    /// <br>             2007.07.30 18322 T.Kimura 保存時にクレジット会社のチェックを追加</br>
    /// <br>             2007.10.10 20081 疋田 勇人 DC.NS用に変更</br>
    /// <br>             2008/06/26 30414 忍 幸史 Partsman用に変更</br>
    /// <br>UpdateNote : 2009/12/16 李占川 ＰＭ．ＮＳ保守依頼④</br>
    /// <br>Update Note : 2010/05/11 gejun</br>
    /// <br>              M1007A-支払手形データ更新追加</br>
    /// <br>UpdateNote : 2010/06/08 李占川　障害改良対応（７月リリース分）の対応</br>
    /// <br>UpdateNote : 2010/06/17 李占川　Redmine#9948の修正</br>
    /// <br>UpdateNote  : 2010/07/02 葛軍 各種仕様変更／障害対応</br>
    /// <br>              RedMine# 10657</br>
    /// <br>UpdateNote : 2010/07/01 22018 鈴木 正臣</br>
    /// <br>                   1. 未入金一覧表の印刷機能を追加。(ボタン"btnNoDepSalList"追加)</br>
    /// <br>                   2. 入金一覧タブの"～"リテラル(ultraLabel2)の位置・サイズを修正。</br>
    /// <br>UpdateNote : 2010/07/07 22018 鈴木 正臣</br>
    /// <br>                   成果物統合２</br>
    /// <br>                   　・６次改良 2010/07/01 組込</br>
    /// <br>UpdateNote : 2010/07/12 22018 鈴木 正臣</br>
    /// <br>                   成果物統合２</br>
    /// <br>                     1.明細部のアローキー制御修正。</br>
    /// <br>                     2.明細部でマイナス金額入力可能に修正。</br>
    /// <br>                     3.コピーペーストで不正入力した場合の制御を追加。</br>
    /// <br>                     4.デザイナ上の変更</br>
    /// <br>                     　　grdDepositKindにAfterCellActivateイベント処理を追加。</br>
    /// <br>                     　　edtFeeDeposit.ActiveAppearance.TextHAlign = Right に変更。</br>
    /// <br>                     　　edtDiscountDeposit.ActiveAppearance.TextHAlign = Right に変更。</br>
    /// <br>Update Note : 2010/12/20 李占川 PM.NS障害改良対応(12月分)</br>
    /// <br>              ①鑑部の集計期間の終了日をMAXに変更する。</br>
    /// <br>              ②手形データあり入金の金額ゼロ変更時のメッセージ追加</br>
    /// <br>              ③伝票削除・赤伝発行を実行した後、鑑部の今回入金額を更新する。</br>
    /// <br>              ④引当情報表示の改良</br>
    /// <br>              ⑤手形金額の数値変換処理の修正</br>
    /// <br>Update Note : 2011/01/21 yangmj Redmine#18653の修正
    /// <br>Update Note : 2011/02/11 李占川 Redmine#18904の修正
    /// <br>              入金伝票入力（入金型）の売上引当タブの引当額の初期値を修正する。</br>
    /// <br>Update Note : 2011/02/14 李占川 Redmine#18904の修正
    /// <br>              入金伝票入力（入金型）の売上引当タブの入金未引当額の表示内容を変更する。</br>
    /// <br>Update Note : 2011/08/08 李占川 案件一覧連番921、redmine#23408の対応
    /// <br>              得意先コードに「納入先」のコードを入力すると、エラー表示されます。</br>
    /// <br>Update Note : 2012/09/21 田建委</br>
    /// <br>管理番号    : 2012/10/17配信分</br>
    /// <br>              Redmine#32415 発行者の追加対応</br>
    /// <br>Update Note : 2012/12/24 王君</br>
    /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
    /// <br>              Redmine#33741の対応</br>
    /// <br>UpdateNote  : 2013/01/10 zhuhh</br>
    /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
    /// <br>            : redmine #34123 手形データ重複した伝票番号の登録を出来る様にする</br>
    /// <br>Update Note : 2013/02/06 王君</br>
    /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
    /// <br>              Redmine#33741の対応</br>
    /// <br>Update Note : 2013/02/07 王君</br>
    /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
    /// <br>              Redmine#33741の対応</br>
    /// <br>Update Note : 2013/02/17 董桂鈺</br>
    /// <br>管理番号    : 10806793-00  2013/03/13配信分</br>
    /// <br>              Redmine#33921  入金の摘要欄に半角カタカナを入力できるように修正</br>
    /// <br>Update Note : 2013/02/25 王君</br>
    /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
    /// <br>              Redmine#33741の対応</br>
    /// <br>Update Note : 2013/06/20 高峰</br>
    /// <br>管理番号    : 配信なし分</br>
    /// <br>              Redmine#35133の対応</br>
    /// <br>Update Note : 2013/07/18 呉軍</br>
    /// <br>管理番号    : 配信なし分</br>
    /// <br>              Redmine#35133 既存障害№1の対応</br>
    /// <br>Update Note : 2013/07/19 LIUSY</br>
    /// <br>              Redmine#38705 入金伝票入力の鑑部分の位置調整</br>
    /// <br>Update Note : 2014/07/09 zhujw</br>
    /// <br>              Redmine#42902の⑬ 「-」のみで他の項目に移動しようとすると以下のエラーが発生する</br>
    /// <br>Update Note : 2015/08/17 時シン</br>
    /// <br>管理番号    : 11170129-00</br>
    /// <br>              Redmine#47015 今回入金額の累計後残高は誤る対応</br>
    /// </remarks>
	public class SFUKK01403UA : System.Windows.Forms.Form, IDepositInputMDIChild
	{
        #region Enum
        // 2007.10.10 hikita add start -------------------------------->>
        /// <summary>
        /// 金額種別区分
        /// </summary>
        private enum MnyKindDiv
        {
            // 現金　
            Cash = 101,
            // 振込
            Remittance = 102,
            // 手形
            Bill = 105,
            // 相殺
            Offset = 106,
            // 小切手
            Check = 107,
            // 先付小切手
            ACheck = 108,
            // その他
            Others = 119,
            // 手数料
            Fee = 110,
            // 値引
            Discount = 111,
        }
        // 2007.10.10 hikita add end -----------------------------------<<

        // --- ADD K2013/03/22 張曼 Redmine#35063 ---------->>>>>
        /// <summary>
        /// オプション有効有無
        /// </summary>
        public enum Option : int
        {
            /// <summary>無効</summary>
            OFF = 0,
            /// <summary>有効</summary>
            ON = 1,
        }
        // --- ADD K2013/03/22 張曼 Redmine#35063 ----------<<<<<
        #endregion

		# region Private Members (Component)
		private System.Windows.Forms.Panel panel_TokSeikyu;
		private Infragistics.Win.UltraWinTabControl.UltraTabPageControl ultraTabPageControl2;
        private System.Windows.Forms.Panel panel_Nyukin;
		private Infragistics.Win.Misc.UltraLabel ultraLabel57;
        private Infragistics.Win.Misc.UltraLabel ultraLabel58;
        private Infragistics.Win.UltraWinExplorerBar.UltraExplorerBarContainerControl ultraExplorerBarContainerControl1;
		private Broadleaf.Library.Windows.Forms.TArrowKeyControl tArrowKeyControl1;
        private Broadleaf.Library.Windows.Forms.TRetKeyControl tRetKeyControl1;
		private Broadleaf.Library.Windows.Forms.TDateEdit edtDepositDate;
        private Broadleaf.Library.Windows.Forms.TNedit edtDepositSlipNo;
        private Broadleaf.Library.Windows.Forms.TShape tShape9;
        private System.Windows.Forms.Panel panel_SFUKK01403UA;
		private System.Windows.Forms.Panel panel_Left;
		private System.Windows.Forms.Panel panel_Right;
		private System.Windows.Forms.Panel panel_Partition;
		private System.Windows.Forms.Panel panel2;
		private Infragistics.Win.UltraWinTabControl.UltraTabControl tabList;
		private Infragistics.Win.UltraWinTabControl.UltraTabSharedControlsPage ultraTabSharedControlsPage1;
        private Infragistics.Win.UltraWinTabControl.UltraTabPageControl ultraTabPageControl1;
		private System.Windows.Forms.Panel panel_DepositGoukei;
		private Infragistics.Win.Misc.UltraLabel labDepositList;
		private Infragistics.Win.UltraWinStatusBar.UltraStatusBar stbDepositList;
		private Infragistics.Win.UltraWinEditors.UltraCheckEditor ckdDepositAutoColumnSize;
		private Infragistics.Win.UltraWinEditors.UltraCheckEditor ckdDetailDepositList;
		private Infragistics.Win.UltraWinEditors.UltraCheckEditor ckdAllowanceDepositList;
		private System.Windows.Forms.Panel panel_DepositSearch;
		private Infragistics.Win.Misc.UltraLabel ultraLabel2;
		private Broadleaf.Library.Windows.Forms.TDateEdit detDepositDateEnd;
        private Broadleaf.Library.Windows.Forms.TDateEdit detDepositDateStart;
		private Infragistics.Win.Misc.UltraLabel ultraLabel1;
		private Infragistics.Win.Misc.UltraButton btnSearchDeposit;
        private Infragistics.Win.Misc.UltraLabel ultraLabel3;
		private Infragistics.Win.UltraWinTabControl.UltraTabPageControl ultraTabPageControl3;
		private Infragistics.Win.UltraWinGrid.UltraGrid grdDmdSalesList;
		private System.Windows.Forms.Panel panel_DenSearch;
		private Infragistics.Win.Misc.UltraLabel ultraLabel10;
        private Infragistics.Win.Misc.UltraLabel ultraLabel16;
        private Infragistics.Win.Misc.UltraLabel ultraLabel15;
        private Infragistics.Win.Misc.UltraLabel ultraLabel14;
		private Infragistics.Win.Misc.UltraButton btnSearchDmdSales;
		private System.Windows.Forms.Panel panel_Hikiate;
		private Broadleaf.Library.Windows.Forms.TLine tLine11;
		private Broadleaf.Library.Windows.Forms.TLine tLine10;
		private Infragistics.Win.Misc.UltraLabel labDepositAlwcBlnce;
		private Infragistics.Win.Misc.UltraLabel labDepositTotal;
		private Infragistics.Win.Misc.UltraLabel ultraLabel8;
		private Infragistics.Win.Misc.UltraLabel ultraLabel7;
		private System.Windows.Forms.Panel panel_UriGoukei;
		private Infragistics.Win.Misc.UltraLabel labDmdSalesList;
		private Broadleaf.Library.Windows.Forms.TLine tLine12;
		private Infragistics.Win.Misc.UltraLabel labSalesAllowanceTotal;
		private Infragistics.Win.Misc.UltraButton btnAllAwl;
		private Infragistics.Win.Misc.UltraLabel ultraLabel40;
		private Infragistics.Win.UltraWinStatusBar.UltraStatusBar stbDmdSalesList;
		private Infragistics.Win.UltraWinEditors.UltraCheckEditor ckdSalesAutoColumnSize;
		private Infragistics.Win.UltraWinEditors.UltraCheckEditor ckdDetailDmdSalesList;
        private Infragistics.Win.Misc.UltraLabel labDebitNoteLinkDepoNo;
		private Infragistics.Win.Misc.UltraLabel ultraLabel17;
		private System.Windows.Forms.Panel panel4;
        private Infragistics.Win.Misc.UltraLabel labInputModeTitle;
        private Infragistics.Win.Misc.UltraLabel labDmdSpan;
        private Infragistics.Win.UltraWinEditors.UltraCheckEditor ckdSeparateCost;
        private System.Windows.Forms.Splitter splitter1;
		private Broadleaf.Library.Windows.Forms.TEdit tEdit_SalesSlipNum;
		private Broadleaf.Library.Windows.Forms.TDateEdit detSearchSlipDateEnd;
		private Broadleaf.Library.Windows.Forms.TDateEdit detSearchSlipDateStart;
		private Infragistics.Win.UltraWinToolTip.UltraToolTipManager ultraToolTip;
		private Infragistics.Win.UltraWinToolTip.UltraToolTipManager ultraToolTipGrid;
		private TComboEditor cmbDepositFontSize;
        private TComboEditor cmbSalesFontSize;
        private Panel panel_kagami;
        private Infragistics.Win.Misc.UltraLabel lbl_AfCalDemandPrice;
        private Infragistics.Win.Misc.UltraLabel ultraLabel24;
        private Infragistics.Win.Misc.UltraLabel lbl_ThisTimeSales;
        private Infragistics.Win.Misc.UltraLabel ultraLabel22;
        private Infragistics.Win.Misc.UltraLabel lbl_Balance;
        private Infragistics.Win.Misc.UltraLabel ultraLabel20;
        private TLine tLine_kagami3;
        private TLine tLine_kagami2;
        private Infragistics.Win.Misc.UltraLabel lbl_ThisTimeDmdTtl;
        private Infragistics.Win.Misc.UltraLabel lbl_BlnceTtl;
        private Infragistics.Win.Misc.UltraLabel lbl_LastTimeDemand;
        private Infragistics.Win.Misc.UltraLabel lbl_AcpOdrTtl2TmBfBlDmd;
        private Infragistics.Win.Misc.UltraLabel lbl_AcpOdrTtl3TmBfBlDmd;
        public Infragistics.Win.Misc.UltraLabel ultraLabel32;
        private Infragistics.Win.Misc.UltraLabel ultraLabel30;
        private Infragistics.Win.Misc.UltraLabel ultraLabel31;
        private Infragistics.Win.Misc.UltraLabel ultraLabel29;
        private Infragistics.Win.Misc.UltraLabel ultraLabel28;
        private TLine tLine_kagami6;
        private TLine tLine_kagami5;
        private TLine tLine_kagami4;
        private TShape tShape1;
        private TNedit edtSearchDepositSlipNo;
        private Infragistics.Win.Misc.UltraLabel ultraLabel5;
        private UiSetControl uiSetControl1;
        private Infragistics.Win.UltraWinEditors.UltraOptionSet opsAlwcDepositCall;
        private Infragistics.Win.UltraWinEditors.UltraOptionSet opsAlwcDmdSalesCall;
        private TLine tLine_kagami1;
        private UltraGrid grdDepositKind;
        private Panel panel1;
        private TComboEditor DepoSlipDateClrDiv_tComboEditor;
        private Infragistics.Win.Misc.UltraButton btnCustomerGuid;
        private Infragistics.Win.Misc.UltraLabel ultraLabel42;
        private TNedit tNedit_CustomerCode;
        private TEdit edtTotalDay;
        private TEdit edtCustomerName;
        private Infragistics.Win.Misc.UltraLabel ultraLabel54;
        private Infragistics.Win.Misc.UltraLabel Customer_uLabel;
        private Infragistics.Win.Misc.UltraLabel DepoSlipDateClrDiv_uLabel;
        private Panel panel3;
        private TShape tShape2;
        private UltraGrid grdDepositList;
        private Panel panel5;
        private TNedit edtDepositTotal;
        private TNedit edtDiscountDeposit;
        private TNedit edtFeeDeposit;
        private TEdit edtOutline;
        private Infragistics.Win.Misc.UltraLabel ultraLabel65;
        private Infragistics.Win.Misc.UltraLabel ultraLabel61;
        private Infragistics.Win.Misc.UltraLabel ultraLabel62;
        private Infragistics.Win.Misc.UltraLabel ultraLabel60;
        private TEdit tEdit_SalesInputName;
        private Infragistics.Win.Misc.UltraButton uButton_SalesInputCode;
        private TEdit tEdit_EmployeeCode;
        private Infragistics.Win.Misc.UltraLabel uLabel_SalesInputCodeTitle;
		private System.ComponentModel.IContainer components;
		# endregion
        private Infragistics.Win.Misc.UltraButton btnNoDepSalList;

        // ADD 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更 ---------->>>>>
        /// <summary>0円の入金伝票を作成するメッセージ</summary>
        private const string SAVING_ZERO_DEPOSIT_MSG = "入金金額を入力して下さい。";
        // ADD 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更 ----------<<<<<

        // ADD 2011/08/24 qijh SCM対応 - 拠点管理(10704767-00) --------->>>>>>>
        /// <summary>
        /// 送信済チェック失敗のステータス
        /// </summary>
        private const int STATUS_CHK_SEND_ERR = -1001;

        /// <summary>
        /// 送信済チェック失敗のエラーメッセージ
        /// </summary>
        private const string CHK_SEND_ERR_MSG = "送信済みのデータの為、更新できません。";
        // ADD 2011/08/24 qijh SCM対応 - 拠点管理(10704767-00) ---------<<<<<<<

        // 2011/05/16 Add >>>
        // 得意先変更フラグ
        private bool _customerChangeFlg = false;
        // 2011/05/16 Add <<<

        //----- ADD 2012/09/21 田建委 redmine#3241 ---------->>>>>
        /// <summary>発行者コード</summary>
        private string _swSalesInputCode = string.Empty;
        /// <summary>発行者名</summary>
        private string _swSalesInputName = string.Empty;
        /// <summary>SFTOK09382A)従業員</summary>
        private EmployeeAcs _employeeAcs;
        //----- ADD 2012/09/21 田建委 redmine#3241 ----------<<<<<
        // ----- ADD 王君 2012/12/24 Redmine33741----->>>>>
        private int _saveStatus; 

        private bool _focusSave;

        //private bool _focusFlag; // DEL 王君 2013/02/06 Redmine#33741
        // ----- ADD 王君 2012/12/24 Redmine33741-----<<<<<
        private bool _focusFlag; // ADD 王君 2013/02/07 Redmine#33741
		# region Constructor
		/// <summary>
		/// 入金伝票入力（入金型）ＵＩクラスコンストラクタ
		/// </summary>
		/// <remarks>
		/// <br>Note       : 使用するメンバの初期化を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.08.20</br>
        /// <br>Update Note: 2010/06/17 李占川 Redmine#9948の修正
        /// <br>Update Note: 2012/09/21 田建委</br>
        /// <br>管理番号   : 2012/10/17配信分</br>
        /// <br>             Redmine#32415 発行者の追加対応</br>
        /// <br>Update Note: 2012/12/24 王君</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
        /// <br>Update Note: K2013/03/22 張曼</br>
        /// <br>管理番号   : 10806793-00 2013/04/10配信分</br>
        /// <br>             Redmine#35063 山形部品様個別対応</br>
        /// <br>Update Note: 2013/07/19 LIUSY</br>
        /// <br>             Redmine#38705 入金伝票入力の鑑部分の位置調整</br>
        /// </remarks>
		public SFUKK01403UA()
		{
			//
			// Windows フォーム デザイナ サポートに必要です。
			//
			InitializeComponent();

			// 入金伝票入力設定データ系アクセスクラス
			this.depositRelDataAcs = new DepositRelDataAcs();

			// 入金伝票入力画面(入金型)アクセスクラス
			this.inputDepositNormalTypeAcs = new InputDepositNormalTypeAcs();

            // 拠点アクセスクラス
            this._secInfoAcs = new SecInfoAcs();      // 2007.10.10 add                      

			// クレジット会社テーブルアクセスクラス
			//this.creditCmpAcs = null;               // 2007.10.10 del

            // ユーザーガイドアクセスクラス
            this._userGuideAcs = new UserGuideAcs();  // 2007.10.10 add
            
			// 入金引当表示クラス
			this.sfukk01415UA = null;

            // 得意先情報アクセスクラス    
		    this._customerInfoAcs = new CustomerInfoAcs();

            this._employeeAcs = new EmployeeAcs(); // ADD 2012/09/21 田建委 redmine#32415

            // ↓ 20070519 18322 d 今のところ使用しないので削除
			//// 領収書発行クラス
			//this.sfukk01502UA = null;
            // ↑ 20070519 18322 d

			// 入金グリッド選択行(入金情報更新前内容新規用)
			this.beforeSelectedDepositRow = null;

			// 入金グリッド選択行(引当情報更新前内容新規用)
			this.beforeSelectedAllowanceRows = new ArrayList();

			// 入金グリッド選択行(入金情報更新内容)
			this.selectedDepositCopyRow = null;

			// 入金グリッド選択行(引当情報更新内容)
			this.selectedAllowanceCopyRows = new ArrayList();

			// 受注引当グリッド選択行
			this.selectedDmdSalesRow = null;

			// 前回引当データ展開入金番号
			this.expandAllowanceDepositSlipNo = 0;

			// 選択拠点
			this._selectSectionCode = "";

            // ログイン拠点
            this._loginSectionCode = LoginInfoAcquisition.Employee.BelongSectionCode.Trim();

            /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
			// 入金伝票入力欄表示中フラグ
			this.setDisplayDepositFlg = false;
			   --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
            
            // 企業コード
			this.enterpriseCode = LoginInfoAcquisition.EnterpriseCode;

			// ログイン担当者
			this.employee = LoginInfoAcquisition.Employee;

            this._claimCode = 0;

			// 起動中フラグ
			this.formShowFlg = false;

			// 画面状態保持クラス
			this._displayStatus = null;

			// 新規ボタン プロパティ用
			this._buttonNew = false;

			// 保存ボタン プロパティ用
			this._buttonSave = false;

            this._btnRenewal = true;
		
			// 削除ボタン プロパティ用
			this._buttonDelete = false;
		
			// 赤伝ボタン プロパティ用
			this._buttonAka = false;
			
			// 領収書発行ボタン プロパティ用
			this._buttonReceiptPrint = false;
            // ----- ADD 王君 2012/12/24 Redmine#33741----->>>>>
            //伝票呼出ボタン プロパティ用
            this._buttonReadSlip = true;
            // ----- ADD 王君 2012/12/24 Redmine#33741-----<<<<<

            // --- ADD m.suzuki 2010/07/01 ---------->>>>>
            // 未入金一覧表ボタン
            this.btnNoDepSalList.Visible = false; // 初期状態はfalseにしておく
            // --- ADD m.suzuki 2010/07/01 ----------<<<<<

            this._FirstStartFlag = true; // ADD 2010/06/17
            // ----- ADD 王君 2012/12/24 Redmine33741----->>>>>
            this._saveStatus = 0;

            this._focusSave = true;

            //this._focusFlag = true; // DEL 王君 2013/02/06 Redmine#33741
            // ----- ADD 王君 2012/12/24 Redmine33741-----<<<<<
            this._focusFlag = true; // ADD 王君 2013/02/07 Redmine#33741
            //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
            // オプション情報キャッシュ
            CacheOptionInfo();
            //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<


            //ADD BY LIUSY #38705 山形部品の場合、panelなどのレベルサエズを増大する、以外の場合そのまま(1024*768解像度対応)---->>>>
            if (_opt_YamagataCtrl == (int)Option.ON)
            {
                this.panel_SFUKK01403UA.Size = new System.Drawing.Size(1032, 626);
                this.tabList.Location = new System.Drawing.Point(407, 122);
                this.splitter1.Location = new System.Drawing.Point(402, 122);
                this.panel_Nyukin.Size = new System.Drawing.Size(397, 500);

                this.panel5.Size = new System.Drawing.Size(385, 140);
                this.grdDepositKind.Size = new System.Drawing.Size(386, 145);
                this.panel4.Size = new System.Drawing.Size(397, 24);

                this.ultraLabel17.Size = new System.Drawing.Size(397, 24);
                this.tShape9.Size = new System.Drawing.Size(397, 500);
                this.panel_Partition.Size = new System.Drawing.Size(1022, 4);
                this.panel_TokSeikyu.Size = new System.Drawing.Size(1022, 118);
                this.panel3.Size = new System.Drawing.Size(1022, 113);

                this.panel_kagami.Location = new System.Drawing.Point(574, 19);
                this.tShape2.Size = new System.Drawing.Size(1022, 113);
                this.panel1.Size = new System.Drawing.Size(1022, 5);
                this.panel_Right.Location = new System.Drawing.Point(1027, 0);
                this.panel2.Size = new System.Drawing.Size(1032, 4);
                this.ClientSize = new System.Drawing.Size(1032, 626);
            }
            //ADD BY LIUSY #38705 ----<<<<
        }
		# endregion

		# region Dispose
		/// <summary>
		/// 使用されているリソースに後処理を実行します。
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}
		# endregion

		#region Windows フォーム デザイナで生成されたコード 
		/// <summary>
		/// デザイナ サポートに必要なメソッドです。このメソッドの内容を
		/// コード エディタで変更しないでください。
		/// </summary>
		/// <br>Update Note: 2013/02/17 董桂鈺 </br>
		/// <br>管理番号   : 10806793-00  2013/03/13配信分</br>
		/// <br>             Redmine#33921  入金の摘要欄に半角カタカナを入力できるように修正</br>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            Infragistics.Win.Appearance appearance1 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance2 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance3 = new Infragistics.Win.Appearance();
            Infragistics.Win.ValueListItem valueListItem1 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem2 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem3 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem4 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem5 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem6 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem7 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.Appearance appearance4 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance5 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance6 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance7 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance8 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance9 = new Infragistics.Win.Appearance();
            Infragistics.Win.ValueListItem valueListItem8 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem9 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem10 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem11 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem12 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem13 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem14 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.Appearance appearance10 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance11 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance12 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance86 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance61 = new Infragistics.Win.Appearance();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel1 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.Appearance appearance62 = new Infragistics.Win.Appearance();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel2 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel3 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel4 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel5 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel6 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel7 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel8 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.Appearance appearance73 = new Infragistics.Win.Appearance();
            Infragistics.Win.ValueListItem valueListItem15 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem16 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.Appearance appearance88 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance89 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance90 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance96 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance101 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance102 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance22 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance103 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance104 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance107 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance27 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance28 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance80 = new Infragistics.Win.Appearance();
            Infragistics.Win.ValueListItem valueListItem17 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem18 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.Appearance appearance29 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance30 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance31 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance32 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance33 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance34 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance35 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance36 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance37 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance38 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance13 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance14 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance42 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance43 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance44 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance45 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance46 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance47 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance48 = new Infragistics.Win.Appearance();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel9 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.Appearance appearance49 = new Infragistics.Win.Appearance();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel10 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel11 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel12 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel13 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel14 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel15 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.UltraWinStatusBar.UltraStatusPanel ultraStatusPanel16 = new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel();
            Infragistics.Win.Appearance appearance50 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance51 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance52 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance53 = new Infragistics.Win.Appearance();
            Infragistics.Win.UltraWinTabControl.UltraTab ultraTab1 = new Infragistics.Win.UltraWinTabControl.UltraTab();
            Infragistics.Win.Appearance appearance54 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance55 = new Infragistics.Win.Appearance();
            Infragistics.Win.UltraWinTabControl.UltraTab ultraTab2 = new Infragistics.Win.UltraWinTabControl.UltraTab();
            Infragistics.Win.Appearance appearance56 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance57 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance74 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance75 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance76 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance77 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance78 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance79 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance87 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance142 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance95 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance98 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance99 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance100 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance143 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance144 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance145 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance146 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance147 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance148 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance149 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance150 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance151 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance152 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance153 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance154 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance84 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance26 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance39 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance72 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance15 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance16 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance108 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance109 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance110 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance111 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance133 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance134 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance139 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance126 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance115 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance116 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance117 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance118 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance119 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance120 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance121 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance122 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance123 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance124 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance125 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance127 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance128 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance129 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance130 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance140 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance136 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance66 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance67 = new Infragistics.Win.Appearance();
            Infragistics.Win.ValueListItem valueListItem19 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.ValueListItem valueListItem20 = new Infragistics.Win.ValueListItem();
            Infragistics.Win.Appearance appearance135 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance112 = new Infragistics.Win.Appearance();
            Infragistics.Win.UltraWinToolTip.UltraToolTipInfo ultraToolTipInfo1 = new Infragistics.Win.UltraWinToolTip.UltraToolTipInfo("得意先ガイド", Infragistics.Win.ToolTipImage.Default, null, Infragistics.Win.DefaultableBoolean.Default);
            Infragistics.Win.UltraWinToolTip.UltraToolTipInfo ultraToolTipInfo2 = new Infragistics.Win.UltraWinToolTip.UltraToolTipInfo("発行者ガイド", Infragistics.Win.ToolTipImage.Default, null, Infragistics.Win.DefaultableBoolean.Default);
            Infragistics.Win.Appearance appearance131 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance132 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance141 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance113 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance114 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance40 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance41 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance187 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance105 = new Infragistics.Win.Appearance();
            Infragistics.Win.Appearance appearance106 = new Infragistics.Win.Appearance();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SFUKK01403UA));
            this.cmbDepositFontSize = new Broadleaf.Library.Windows.Forms.TComboEditor();
            this.ckdDepositAutoColumnSize = new Infragistics.Win.UltraWinEditors.UltraCheckEditor();
            this.ckdDetailDepositList = new Infragistics.Win.UltraWinEditors.UltraCheckEditor();
            this.ckdAllowanceDepositList = new Infragistics.Win.UltraWinEditors.UltraCheckEditor();
            this.cmbSalesFontSize = new Broadleaf.Library.Windows.Forms.TComboEditor();
            this.ckdSalesAutoColumnSize = new Infragistics.Win.UltraWinEditors.UltraCheckEditor();
            this.ckdDetailDmdSalesList = new Infragistics.Win.UltraWinEditors.UltraCheckEditor();
            this.ckdSeparateCost = new Infragistics.Win.UltraWinEditors.UltraCheckEditor();
            this.ultraTabPageControl1 = new Infragistics.Win.UltraWinTabControl.UltraTabPageControl();
            this.grdDepositList = new Infragistics.Win.UltraWinGrid.UltraGrid();
            this.panel_DepositGoukei = new System.Windows.Forms.Panel();
            this.labDepositList = new Infragistics.Win.Misc.UltraLabel();
            this.stbDepositList = new Infragistics.Win.UltraWinStatusBar.UltraStatusBar();
            this.panel_DepositSearch = new System.Windows.Forms.Panel();
            this.opsAlwcDepositCall = new Infragistics.Win.UltraWinEditors.UltraOptionSet();
            this.edtSearchDepositSlipNo = new Broadleaf.Library.Windows.Forms.TNedit();
            this.ultraLabel5 = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel2 = new Infragistics.Win.Misc.UltraLabel();
            this.detDepositDateEnd = new Broadleaf.Library.Windows.Forms.TDateEdit();
            this.detDepositDateStart = new Broadleaf.Library.Windows.Forms.TDateEdit();
            this.ultraLabel1 = new Infragistics.Win.Misc.UltraLabel();
            this.btnSearchDeposit = new Infragistics.Win.Misc.UltraButton();
            this.ultraLabel3 = new Infragistics.Win.Misc.UltraLabel();
            this.ultraTabPageControl3 = new Infragistics.Win.UltraWinTabControl.UltraTabPageControl();
            this.grdDmdSalesList = new Infragistics.Win.UltraWinGrid.UltraGrid();
            this.panel_DenSearch = new System.Windows.Forms.Panel();
            this.btnNoDepSalList = new Infragistics.Win.Misc.UltraButton();
            this.opsAlwcDmdSalesCall = new Infragistics.Win.UltraWinEditors.UltraOptionSet();
            this.tEdit_SalesSlipNum = new Broadleaf.Library.Windows.Forms.TEdit();
            this.ultraLabel10 = new Infragistics.Win.Misc.UltraLabel();
            this.detSearchSlipDateEnd = new Broadleaf.Library.Windows.Forms.TDateEdit();
            this.detSearchSlipDateStart = new Broadleaf.Library.Windows.Forms.TDateEdit();
            this.ultraLabel16 = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel15 = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel14 = new Infragistics.Win.Misc.UltraLabel();
            this.btnSearchDmdSales = new Infragistics.Win.Misc.UltraButton();
            this.panel_Hikiate = new System.Windows.Forms.Panel();
            this.tLine11 = new Broadleaf.Library.Windows.Forms.TLine();
            this.tLine10 = new Broadleaf.Library.Windows.Forms.TLine();
            this.labDepositAlwcBlnce = new Infragistics.Win.Misc.UltraLabel();
            this.labDepositTotal = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel8 = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel7 = new Infragistics.Win.Misc.UltraLabel();
            this.panel_UriGoukei = new System.Windows.Forms.Panel();
            this.tLine12 = new Broadleaf.Library.Windows.Forms.TLine();
            this.ultraLabel40 = new Infragistics.Win.Misc.UltraLabel();
            this.labDmdSalesList = new Infragistics.Win.Misc.UltraLabel();
            this.labSalesAllowanceTotal = new Infragistics.Win.Misc.UltraLabel();
            this.btnAllAwl = new Infragistics.Win.Misc.UltraButton();
            this.stbDmdSalesList = new Infragistics.Win.UltraWinStatusBar.UltraStatusBar();
            this.ultraExplorerBarContainerControl1 = new Infragistics.Win.UltraWinExplorerBar.UltraExplorerBarContainerControl();
            this.ultraTabPageControl2 = new Infragistics.Win.UltraWinTabControl.UltraTabPageControl();
            this.panel_SFUKK01403UA = new System.Windows.Forms.Panel();
            this.tabList = new Infragistics.Win.UltraWinTabControl.UltraTabControl();
            this.ultraTabSharedControlsPage1 = new Infragistics.Win.UltraWinTabControl.UltraTabSharedControlsPage();
            this.splitter1 = new System.Windows.Forms.Splitter();
            this.panel_Nyukin = new System.Windows.Forms.Panel();
            this.panel5 = new System.Windows.Forms.Panel();
            this.edtDepositTotal = new Broadleaf.Library.Windows.Forms.TNedit();
            this.edtDiscountDeposit = new Broadleaf.Library.Windows.Forms.TNedit();
            this.edtFeeDeposit = new Broadleaf.Library.Windows.Forms.TNedit();
            this.edtOutline = new Broadleaf.Library.Windows.Forms.TEdit();
            this.ultraLabel65 = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel61 = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel62 = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel60 = new Infragistics.Win.Misc.UltraLabel();
            this.grdDepositKind = new Infragistics.Win.UltraWinGrid.UltraGrid();
            this.labDebitNoteLinkDepoNo = new Infragistics.Win.Misc.UltraLabel();
            this.edtDepositDate = new Broadleaf.Library.Windows.Forms.TDateEdit();
            this.edtDepositSlipNo = new Broadleaf.Library.Windows.Forms.TNedit();
            this.ultraLabel57 = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel58 = new Infragistics.Win.Misc.UltraLabel();
            this.panel4 = new System.Windows.Forms.Panel();
            this.labInputModeTitle = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel17 = new Infragistics.Win.Misc.UltraLabel();
            this.tShape9 = new Broadleaf.Library.Windows.Forms.TShape();
            this.panel_Partition = new System.Windows.Forms.Panel();
            this.panel_TokSeikyu = new System.Windows.Forms.Panel();
            this.panel3 = new System.Windows.Forms.Panel();
            this.edtCustomerName = new Broadleaf.Library.Windows.Forms.TEdit();
            this.DepoSlipDateClrDiv_uLabel = new Infragistics.Win.Misc.UltraLabel();
            this.panel_kagami = new System.Windows.Forms.Panel();
            this.ultraLabel32 = new Infragistics.Win.Misc.UltraLabel();
            this.lbl_AfCalDemandPrice = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel24 = new Infragistics.Win.Misc.UltraLabel();
            this.lbl_ThisTimeSales = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel22 = new Infragistics.Win.Misc.UltraLabel();
            this.lbl_Balance = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel20 = new Infragistics.Win.Misc.UltraLabel();
            this.tLine_kagami3 = new Broadleaf.Library.Windows.Forms.TLine();
            this.tLine_kagami2 = new Broadleaf.Library.Windows.Forms.TLine();
            this.lbl_ThisTimeDmdTtl = new Infragistics.Win.Misc.UltraLabel();
            this.lbl_BlnceTtl = new Infragistics.Win.Misc.UltraLabel();
            this.lbl_LastTimeDemand = new Infragistics.Win.Misc.UltraLabel();
            this.lbl_AcpOdrTtl2TmBfBlDmd = new Infragistics.Win.Misc.UltraLabel();
            this.lbl_AcpOdrTtl3TmBfBlDmd = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel30 = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel31 = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel29 = new Infragistics.Win.Misc.UltraLabel();
            this.ultraLabel28 = new Infragistics.Win.Misc.UltraLabel();
            this.tLine_kagami6 = new Broadleaf.Library.Windows.Forms.TLine();
            this.tLine_kagami5 = new Broadleaf.Library.Windows.Forms.TLine();
            this.tLine_kagami4 = new Broadleaf.Library.Windows.Forms.TLine();
            this.tLine_kagami1 = new Broadleaf.Library.Windows.Forms.TLine();
            this.tShape1 = new Broadleaf.Library.Windows.Forms.TShape();
            this.labDmdSpan = new Infragistics.Win.Misc.UltraLabel();
            this.Customer_uLabel = new Infragistics.Win.Misc.UltraLabel();
            this.DepoSlipDateClrDiv_tComboEditor = new Broadleaf.Library.Windows.Forms.TComboEditor();
            this.ultraLabel54 = new Infragistics.Win.Misc.UltraLabel();
            this.btnCustomerGuid = new Infragistics.Win.Misc.UltraButton();
            this.edtTotalDay = new Broadleaf.Library.Windows.Forms.TEdit();
            this.ultraLabel42 = new Infragistics.Win.Misc.UltraLabel();
            this.tNedit_CustomerCode = new Broadleaf.Library.Windows.Forms.TNedit();
            this.tShape2 = new Broadleaf.Library.Windows.Forms.TShape();
            this.panel1 = new System.Windows.Forms.Panel();
            this.panel_Right = new System.Windows.Forms.Panel();
            this.panel_Left = new System.Windows.Forms.Panel();
            this.panel2 = new System.Windows.Forms.Panel();
            this.tArrowKeyControl1 = new Broadleaf.Library.Windows.Forms.TArrowKeyControl(this.components);
            this.tRetKeyControl1 = new Broadleaf.Library.Windows.Forms.TRetKeyControl(this.components);
            this.ultraToolTipGrid = new Infragistics.Win.UltraWinToolTip.UltraToolTipManager(this.components);
            this.ultraToolTip = new Infragistics.Win.UltraWinToolTip.UltraToolTipManager(this.components);
            this.uiSetControl1 = new Broadleaf.Library.Windows.Forms.UiSetControl(this.components);
            this.tEdit_SalesInputName = new Broadleaf.Library.Windows.Forms.TEdit();
            this.uButton_SalesInputCode = new Infragistics.Win.Misc.UltraButton();
            this.tEdit_EmployeeCode = new Broadleaf.Library.Windows.Forms.TEdit();
            this.uLabel_SalesInputCodeTitle = new Infragistics.Win.Misc.UltraLabel();
            ((System.ComponentModel.ISupportInitialize)(this.cmbDepositFontSize)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.cmbSalesFontSize)).BeginInit();
            this.ultraTabPageControl1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grdDepositList)).BeginInit();
            this.panel_DepositGoukei.SuspendLayout();
            this.stbDepositList.SuspendLayout();
            this.panel_DepositSearch.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.opsAlwcDepositCall)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSearchDepositSlipNo)).BeginInit();
            this.ultraTabPageControl3.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grdDmdSalesList)).BeginInit();
            this.panel_DenSearch.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.opsAlwcDmdSalesCall)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.tEdit_SalesSlipNum)).BeginInit();
            this.panel_Hikiate.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.tLine11)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.tLine10)).BeginInit();
            this.panel_UriGoukei.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.tLine12)).BeginInit();
            this.stbDmdSalesList.SuspendLayout();
            this.panel_SFUKK01403UA.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.tabList)).BeginInit();
            this.tabList.SuspendLayout();
            this.panel_Nyukin.SuspendLayout();
            this.panel5.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.edtDepositTotal)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtDiscountDeposit)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtFeeDeposit)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtOutline)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdDepositKind)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtDepositSlipNo)).BeginInit();
            this.panel4.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.tShape9)).BeginInit();
            this.panel_TokSeikyu.SuspendLayout();
            this.panel3.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.edtCustomerName)).BeginInit();
            this.panel_kagami.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.tLine_kagami3)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.tLine_kagami2)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.tLine_kagami6)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.tLine_kagami5)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.tLine_kagami4)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.tLine_kagami1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.tShape1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.DepoSlipDateClrDiv_tComboEditor)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtTotalDay)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.tNedit_CustomerCode)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.tShape2)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.tEdit_SalesInputName)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.tEdit_EmployeeCode)).BeginInit();
            this.SuspendLayout();
            // 
            // cmbDepositFontSize
            // 
            appearance1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.cmbDepositFontSize.ActiveAppearance = appearance1;
            appearance2.TextHAlignAsString = "Right";
            this.cmbDepositFontSize.Appearance = appearance2;
            this.cmbDepositFontSize.AutoSize = false;
            this.cmbDepositFontSize.DropDownStyle = Infragistics.Win.DropDownStyle.DropDownList;
            this.cmbDepositFontSize.Font = new System.Drawing.Font("ＭＳ ゴシック", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.cmbDepositFontSize.ImeMode = System.Windows.Forms.ImeMode.Disable;
            appearance3.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            appearance3.TextHAlignAsString = "Right";
            this.cmbDepositFontSize.ItemAppearance = appearance3;
            valueListItem1.DataValue = 6;
            valueListItem1.DisplayText = "6";
            valueListItem2.DataValue = 8;
            valueListItem2.DisplayText = "8";
            valueListItem3.DataValue = 9;
            valueListItem3.DisplayText = "9";
            valueListItem4.DataValue = 10;
            valueListItem4.DisplayText = "10";
            valueListItem5.DataValue = 11;
            valueListItem5.DisplayText = "11";
            valueListItem6.DataValue = 12;
            valueListItem6.DisplayText = "12";
            valueListItem7.DataValue = 14;
            valueListItem7.DisplayText = "14";
            this.cmbDepositFontSize.Items.AddRange(new Infragistics.Win.ValueListItem[] {
            valueListItem1,
            valueListItem2,
            valueListItem3,
            valueListItem4,
            valueListItem5,
            valueListItem6,
            valueListItem7});
            this.cmbDepositFontSize.Location = new System.Drawing.Point(76, 3);
            this.cmbDepositFontSize.Name = "cmbDepositFontSize";
            this.cmbDepositFontSize.Size = new System.Drawing.Size(40, 23);
            this.cmbDepositFontSize.TabIndex = 25;
            this.cmbDepositFontSize.ValueChanged += new System.EventHandler(this.cmbDepositFontSize_ValueChanged);
            // 
            // ckdDepositAutoColumnSize
            // 
            appearance4.FontData.SizeInPoints = 10F;
            this.ckdDepositAutoColumnSize.Appearance = appearance4;
            this.ckdDepositAutoColumnSize.BackColor = System.Drawing.Color.Transparent;
            this.ckdDepositAutoColumnSize.BackColorInternal = System.Drawing.Color.Transparent;
            this.ckdDepositAutoColumnSize.Location = new System.Drawing.Point(126, 3);
            this.ckdDepositAutoColumnSize.Name = "ckdDepositAutoColumnSize";
            this.ckdDepositAutoColumnSize.Size = new System.Drawing.Size(160, 23);
            this.ckdDepositAutoColumnSize.TabIndex = 26;
            this.ckdDepositAutoColumnSize.Text = "列サイズの自動調整";
            this.ckdDepositAutoColumnSize.CheckedChanged += new System.EventHandler(this.ckdAutoColumnSize_CheckedChanged);
            // 
            // ckdDetailDepositList
            // 
            appearance5.FontData.SizeInPoints = 10F;
            this.ckdDetailDepositList.Appearance = appearance5;
            this.ckdDetailDepositList.BackColor = System.Drawing.Color.Transparent;
            this.ckdDetailDepositList.BackColorInternal = System.Drawing.Color.Transparent;
            this.ckdDetailDepositList.Location = new System.Drawing.Point(301, 3);
            this.ckdDetailDepositList.Name = "ckdDetailDepositList";
            this.ckdDetailDepositList.Size = new System.Drawing.Size(90, 23);
            this.ckdDetailDepositList.TabIndex = 27;
            this.ckdDetailDepositList.Text = "詳細表示";
            this.ckdDetailDepositList.CheckedChanged += new System.EventHandler(this.ckdDetail_CheckedChanged);
            // 
            // ckdAllowanceDepositList
            // 
            appearance6.FontData.SizeInPoints = 10F;
            this.ckdAllowanceDepositList.Appearance = appearance6;
            this.ckdAllowanceDepositList.BackColor = System.Drawing.Color.Transparent;
            this.ckdAllowanceDepositList.BackColorInternal = System.Drawing.Color.Transparent;
            this.ckdAllowanceDepositList.Location = new System.Drawing.Point(406, 3);
            this.ckdAllowanceDepositList.Name = "ckdAllowanceDepositList";
            this.ckdAllowanceDepositList.Size = new System.Drawing.Size(170, 23);
            this.ckdAllowanceDepositList.TabIndex = 28;
            this.ckdAllowanceDepositList.Text = "引当内訳(入金→売上)";
            this.ckdAllowanceDepositList.CheckedChanged += new System.EventHandler(this.ckdAllowanceDepositList_CheckedChanged);
            // 
            // cmbSalesFontSize
            // 
            appearance7.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.cmbSalesFontSize.ActiveAppearance = appearance7;
            appearance8.TextHAlignAsString = "Right";
            this.cmbSalesFontSize.Appearance = appearance8;
            this.cmbSalesFontSize.AutoSize = false;
            this.cmbSalesFontSize.DropDownStyle = Infragistics.Win.DropDownStyle.DropDownList;
            this.cmbSalesFontSize.Font = new System.Drawing.Font("ＭＳ ゴシック", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.cmbSalesFontSize.ImeMode = System.Windows.Forms.ImeMode.Disable;
            appearance9.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            appearance9.TextHAlignAsString = "Right";
            this.cmbSalesFontSize.ItemAppearance = appearance9;
            valueListItem8.DataValue = 6;
            valueListItem8.DisplayText = "6";
            valueListItem9.DataValue = 8;
            valueListItem9.DisplayText = "8";
            valueListItem10.DataValue = 9;
            valueListItem10.DisplayText = "9";
            valueListItem11.DataValue = 10;
            valueListItem11.DisplayText = "10";
            valueListItem12.DataValue = 11;
            valueListItem12.DisplayText = "11";
            valueListItem13.DataValue = 12;
            valueListItem13.DisplayText = "12";
            valueListItem14.DataValue = 14;
            valueListItem14.DisplayText = "14";
            this.cmbSalesFontSize.Items.AddRange(new Infragistics.Win.ValueListItem[] {
            valueListItem8,
            valueListItem9,
            valueListItem10,
            valueListItem11,
            valueListItem12,
            valueListItem13,
            valueListItem14});
            this.cmbSalesFontSize.Location = new System.Drawing.Point(76, 3);
            this.cmbSalesFontSize.Name = "cmbSalesFontSize";
            this.cmbSalesFontSize.Size = new System.Drawing.Size(40, 23);
            this.cmbSalesFontSize.TabIndex = 176;
            this.cmbSalesFontSize.TabStop = false;
            this.cmbSalesFontSize.ValueChanged += new System.EventHandler(this.cmbSalesFontSize_ValueChanged);
            // 
            // ckdSalesAutoColumnSize
            // 
            appearance10.FontData.SizeInPoints = 10F;
            this.ckdSalesAutoColumnSize.Appearance = appearance10;
            this.ckdSalesAutoColumnSize.BackColor = System.Drawing.Color.Transparent;
            this.ckdSalesAutoColumnSize.BackColorInternal = System.Drawing.Color.Transparent;
            this.ckdSalesAutoColumnSize.Location = new System.Drawing.Point(126, 3);
            this.ckdSalesAutoColumnSize.Name = "ckdSalesAutoColumnSize";
            this.ckdSalesAutoColumnSize.Size = new System.Drawing.Size(160, 23);
            this.ckdSalesAutoColumnSize.TabIndex = 0;
            this.ckdSalesAutoColumnSize.Text = "列サイズの自動調整";
            this.ckdSalesAutoColumnSize.CheckedChanged += new System.EventHandler(this.ckdAutoColumnSize_CheckedChanged);
            // 
            // ckdDetailDmdSalesList
            // 
            appearance11.FontData.SizeInPoints = 10F;
            this.ckdDetailDmdSalesList.Appearance = appearance11;
            this.ckdDetailDmdSalesList.BackColor = System.Drawing.Color.Transparent;
            this.ckdDetailDmdSalesList.BackColorInternal = System.Drawing.Color.Transparent;
            this.ckdDetailDmdSalesList.Location = new System.Drawing.Point(301, 3);
            this.ckdDetailDmdSalesList.Name = "ckdDetailDmdSalesList";
            this.ckdDetailDmdSalesList.Size = new System.Drawing.Size(90, 23);
            this.ckdDetailDmdSalesList.TabIndex = 1;
            this.ckdDetailDmdSalesList.Text = "詳細表示";
            this.ckdDetailDmdSalesList.CheckedChanged += new System.EventHandler(this.ckdDetail_CheckedChanged);
            // 
            // ckdSeparateCost
            // 
            appearance12.FontData.SizeInPoints = 10F;
            this.ckdSeparateCost.Appearance = appearance12;
            this.ckdSeparateCost.BackColor = System.Drawing.Color.Transparent;
            this.ckdSeparateCost.BackColorInternal = System.Drawing.Color.Transparent;
            this.ckdSeparateCost.Location = new System.Drawing.Point(406, 3);
            this.ckdSeparateCost.Name = "ckdSeparateCost";
            this.ckdSeparateCost.Size = new System.Drawing.Size(115, 23);
            this.ckdSeparateCost.TabIndex = 188;
            this.ckdSeparateCost.Text = "諸費用別引当";
            this.ckdSeparateCost.CheckedChanged += new System.EventHandler(this.ckdSeparateCost_CheckedChanged);
            // 
            // ultraTabPageControl1
            // 
            this.ultraTabPageControl1.Controls.Add(this.grdDepositList);
            this.ultraTabPageControl1.Controls.Add(this.panel_DepositGoukei);
            this.ultraTabPageControl1.Controls.Add(this.stbDepositList);
            this.ultraTabPageControl1.Controls.Add(this.panel_DepositSearch);
            this.ultraTabPageControl1.Location = new System.Drawing.Point(2, 27);
            this.ultraTabPageControl1.Name = "ultraTabPageControl1";
            this.ultraTabPageControl1.Size = new System.Drawing.Size(616, 471);
            // 
            // grdDepositList
            // 
            this.grdDepositList.Cursor = System.Windows.Forms.Cursors.Hand;
            appearance86.BackColor = System.Drawing.Color.White;
            appearance86.BackColor2 = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            appearance86.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            this.grdDepositList.DisplayLayout.Appearance = appearance86;
            this.grdDepositList.DisplayLayout.GroupByBox.Hidden = true;
            this.grdDepositList.DisplayLayout.MaxColScrollRegions = 1;
            this.grdDepositList.DisplayLayout.MaxRowScrollRegions = 1;
            this.grdDepositList.DisplayLayout.Override.TipStyleScroll = Infragistics.Win.UltraWinGrid.TipStyle.Hide;
            this.grdDepositList.DisplayLayout.RowConnectorColor = System.Drawing.Color.FromArgb(((int)(((byte)(168)))), ((int)(((byte)(167)))), ((int)(((byte)(191)))));
            this.grdDepositList.DisplayLayout.RowConnectorStyle = Infragistics.Win.UltraWinGrid.RowConnectorStyle.Solid;
            this.grdDepositList.Dock = System.Windows.Forms.DockStyle.Fill;
            this.grdDepositList.Location = new System.Drawing.Point(0, 84);
            this.grdDepositList.Name = "grdDepositList";
            this.grdDepositList.Size = new System.Drawing.Size(616, 327);
            this.grdDepositList.TabIndex = 24;
            this.grdDepositList.Click += new System.EventHandler(this.grdDepositList_Click);
            this.grdDepositList.InitializeLayout += new Infragistics.Win.UltraWinGrid.InitializeLayoutEventHandler(this.Grid_InitializeLayout);
            this.grdDepositList.MouseLeaveElement += new Infragistics.Win.UIElementEventHandler(this.Grid_MouseLeaveElement);
            this.grdDepositList.AfterRowActivate += new System.EventHandler(this.Grid_AfterRowActivate);
            this.grdDepositList.InitializeRow += new Infragistics.Win.UltraWinGrid.InitializeRowEventHandler(this.Grid_InitializeRow);
            this.grdDepositList.Leave += new System.EventHandler(this.grdDepositList_Leave);
            this.grdDepositList.KeyDown += new System.Windows.Forms.KeyEventHandler(this.grdDepositList_KeyDown);
            this.grdDepositList.BeforeRowDeactivate += new System.ComponentModel.CancelEventHandler(this.Grid_BeforeRowDeactivate);
            this.grdDepositList.DoubleClickRow += new Infragistics.Win.UltraWinGrid.DoubleClickRowEventHandler(this.grdDepositList_DoubleClickRow);
            // 
            // panel_DepositGoukei
            // 
            this.panel_DepositGoukei.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(230)))), ((int)(((byte)(230)))));
            this.panel_DepositGoukei.Controls.Add(this.labDepositList);
            this.panel_DepositGoukei.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.panel_DepositGoukei.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.panel_DepositGoukei.Location = new System.Drawing.Point(0, 411);
            this.panel_DepositGoukei.Name = "panel_DepositGoukei";
            this.panel_DepositGoukei.Size = new System.Drawing.Size(616, 32);
            this.panel_DepositGoukei.TabIndex = 4;
            // 
            // labDepositList
            // 
            appearance61.ForeColor = System.Drawing.Color.Blue;
            appearance61.TextHAlignAsString = "Left";
            appearance61.TextVAlignAsString = "Middle";
            this.labDepositList.Appearance = appearance61;
            this.labDepositList.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.labDepositList.Location = new System.Drawing.Point(8, 0);
            this.labDepositList.Name = "labDepositList";
            this.labDepositList.Size = new System.Drawing.Size(616, 32);
            this.labDepositList.TabIndex = 187;
            // 
            // stbDepositList
            // 
            this.stbDepositList.Controls.Add(this.cmbDepositFontSize);
            this.stbDepositList.Controls.Add(this.ckdDepositAutoColumnSize);
            this.stbDepositList.Controls.Add(this.ckdDetailDepositList);
            this.stbDepositList.Controls.Add(this.ckdAllowanceDepositList);
            this.stbDepositList.Location = new System.Drawing.Point(0, 443);
            this.stbDepositList.Name = "stbDepositList";
            appearance62.FontData.SizeInPoints = 9F;
            ultraStatusPanel1.Appearance = appearance62;
            ultraStatusPanel1.Text = "文字サイズ";
            ultraStatusPanel1.Width = 72;
            ultraStatusPanel2.BorderStyle = Infragistics.Win.UIElementBorderStyle.None;
            ultraStatusPanel2.Control = this.cmbDepositFontSize;
            ultraStatusPanel2.Style = Infragistics.Win.UltraWinStatusBar.PanelStyle.ControlContainer;
            ultraStatusPanel2.Width = 40;
            ultraStatusPanel3.Key = "line1";
            ultraStatusPanel3.Width = 1;
            ultraStatusPanel4.Control = this.ckdDepositAutoColumnSize;
            ultraStatusPanel4.Key = "AutoCol";
            ultraStatusPanel4.Padding = new System.Drawing.Size(5, 0);
            ultraStatusPanel4.Style = Infragistics.Win.UltraWinStatusBar.PanelStyle.ControlContainer;
            ultraStatusPanel4.Width = 170;
            ultraStatusPanel5.Key = "line2";
            ultraStatusPanel5.Width = 1;
            ultraStatusPanel6.Control = this.ckdDetailDepositList;
            ultraStatusPanel6.Key = "detail";
            ultraStatusPanel6.Padding = new System.Drawing.Size(5, 0);
            ultraStatusPanel6.Style = Infragistics.Win.UltraWinStatusBar.PanelStyle.ControlContainer;
            ultraStatusPanel7.Key = "line3";
            ultraStatusPanel7.Width = 1;
            ultraStatusPanel8.Control = this.ckdAllowanceDepositList;
            ultraStatusPanel8.Key = "allowance";
            ultraStatusPanel8.Padding = new System.Drawing.Size(5, 0);
            ultraStatusPanel8.Style = Infragistics.Win.UltraWinStatusBar.PanelStyle.ControlContainer;
            ultraStatusPanel8.Width = 180;
            this.stbDepositList.Panels.AddRange(new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel[] {
            ultraStatusPanel1,
            ultraStatusPanel2,
            ultraStatusPanel3,
            ultraStatusPanel4,
            ultraStatusPanel5,
            ultraStatusPanel6,
            ultraStatusPanel7,
            ultraStatusPanel8});
            this.stbDepositList.Size = new System.Drawing.Size(616, 28);
            this.stbDepositList.TabIndex = 2;
            this.stbDepositList.ViewStyle = Infragistics.Win.UltraWinStatusBar.ViewStyle.Office2003;
            // 
            // panel_DepositSearch
            // 
            this.panel_DepositSearch.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(230)))), ((int)(((byte)(230)))));
            this.panel_DepositSearch.Controls.Add(this.opsAlwcDepositCall);
            this.panel_DepositSearch.Controls.Add(this.edtSearchDepositSlipNo);
            this.panel_DepositSearch.Controls.Add(this.ultraLabel5);
            this.panel_DepositSearch.Controls.Add(this.ultraLabel2);
            this.panel_DepositSearch.Controls.Add(this.detDepositDateEnd);
            this.panel_DepositSearch.Controls.Add(this.detDepositDateStart);
            this.panel_DepositSearch.Controls.Add(this.ultraLabel1);
            this.panel_DepositSearch.Controls.Add(this.btnSearchDeposit);
            this.panel_DepositSearch.Controls.Add(this.ultraLabel3);
            this.panel_DepositSearch.Dock = System.Windows.Forms.DockStyle.Top;
            this.panel_DepositSearch.Location = new System.Drawing.Point(0, 0);
            this.panel_DepositSearch.Name = "panel_DepositSearch";
            this.panel_DepositSearch.Size = new System.Drawing.Size(616, 84);
            this.panel_DepositSearch.TabIndex = 0;
            // 
            // opsAlwcDepositCall
            // 
            appearance73.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(150)))), ((int)(((byte)(150)))), ((int)(((byte)(255)))));
            this.opsAlwcDepositCall.Appearance = appearance73;
            this.opsAlwcDepositCall.BackColor = System.Drawing.SystemColors.Window;
            this.opsAlwcDepositCall.BackColorInternal = System.Drawing.SystemColors.Window;
            this.opsAlwcDepositCall.BorderStyle = Infragistics.Win.UIElementBorderStyle.Solid;
            this.opsAlwcDepositCall.ItemOrigin = new System.Drawing.Point(5, 2);
            valueListItem15.DataValue = 0;
            valueListItem15.DisplayText = "表示する";
            valueListItem16.DataValue = 1;
            valueListItem16.DisplayText = "表示しない";
            this.opsAlwcDepositCall.Items.AddRange(new Infragistics.Win.ValueListItem[] {
            valueListItem15,
            valueListItem16});
            this.opsAlwcDepositCall.ItemSpacingVertical = 2;
            this.opsAlwcDepositCall.Location = new System.Drawing.Point(116, 30);
            this.opsAlwcDepositCall.Name = "opsAlwcDepositCall";
            this.opsAlwcDepositCall.Size = new System.Drawing.Size(231, 24);
            this.opsAlwcDepositCall.TabIndex = 21;
            this.opsAlwcDepositCall.TextIndentation = 5;
            // 
            // edtSearchDepositSlipNo
            // 
            appearance88.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.edtSearchDepositSlipNo.ActiveAppearance = appearance88;
            appearance89.BackColor = System.Drawing.Color.White;
            appearance89.TextHAlignAsString = "Right";
            this.edtSearchDepositSlipNo.Appearance = appearance89;
            this.edtSearchDepositSlipNo.AutoSelect = true;
            this.edtSearchDepositSlipNo.BackColor = System.Drawing.Color.White;
            this.edtSearchDepositSlipNo.CalcSize = new System.Drawing.Size(172, 200);
            this.edtSearchDepositSlipNo.DataText = "";
            this.edtSearchDepositSlipNo.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.edtSearchDepositSlipNo.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 9, new Broadleaf.Library.Windows.Forms.TEnableChars(false, false, false, false, false, false, true));
            this.edtSearchDepositSlipNo.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.edtSearchDepositSlipNo.ImeMode = System.Windows.Forms.ImeMode.Off;
            this.edtSearchDepositSlipNo.Location = new System.Drawing.Point(116, 57);
            this.edtSearchDepositSlipNo.MaxLength = 9;
            this.edtSearchDepositSlipNo.Name = "edtSearchDepositSlipNo";
            this.edtSearchDepositSlipNo.NumEdit = new Broadleaf.Library.Windows.Forms.TNumEdit(false, 0, false, true, false, Broadleaf.Library.Windows.Forms.emZeroSupp.zsFILL);
            this.edtSearchDepositSlipNo.Size = new System.Drawing.Size(82, 24);
            this.edtSearchDepositSlipNo.TabIndex = 22;
            // 
            // ultraLabel5
            // 
            appearance90.TextHAlignAsString = "Left";
            appearance90.TextVAlignAsString = "Middle";
            this.ultraLabel5.Appearance = appearance90;
            this.ultraLabel5.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel5.Location = new System.Drawing.Point(6, 57);
            this.ultraLabel5.Name = "ultraLabel5";
            this.ultraLabel5.Size = new System.Drawing.Size(99, 24);
            this.ultraLabel5.TabIndex = 900;
            this.ultraLabel5.Text = "入金伝票番号";
            // 
            // ultraLabel2
            // 
            appearance96.TextVAlignAsString = "Middle";
            this.ultraLabel2.Appearance = appearance96;
            this.ultraLabel2.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel2.Location = new System.Drawing.Point(291, 3);
            this.ultraLabel2.Name = "ultraLabel2";
            this.ultraLabel2.Size = new System.Drawing.Size(23, 24);
            this.ultraLabel2.TabIndex = 900;
            this.ultraLabel2.Text = "～";
            // 
            // detDepositDateEnd
            // 
            appearance101.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.detDepositDateEnd.ActiveEditAppearance = appearance101;
            this.detDepositDateEnd.BackColor = System.Drawing.Color.Transparent;
            this.detDepositDateEnd.CalendarDisp = true;
            appearance102.TextHAlignAsString = "Left";
            appearance102.TextVAlignAsString = "Middle";
            this.detDepositDateEnd.EditAppearance = appearance102;
            this.detDepositDateEnd.EnableEditors = new Broadleaf.Library.Windows.Forms.TEnableEditors(true, true, true, true);
            this.detDepositDateEnd.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.detDepositDateEnd.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            appearance22.TextHAlignAsString = "Left";
            appearance22.TextVAlignAsString = "Middle";
            this.detDepositDateEnd.LabelAppearance = appearance22;
            this.detDepositDateEnd.Location = new System.Drawing.Point(316, 3);
            this.detDepositDateEnd.Name = "detDepositDateEnd";
            this.detDepositDateEnd.NecessaryEditors = new Broadleaf.Library.Windows.Forms.TNecessaryEditors(false, false, false, false);
            this.detDepositDateEnd.Options = new Broadleaf.Library.Windows.Forms.TDateEditOptions(false, false, false, true, false, true);
            this.detDepositDateEnd.Size = new System.Drawing.Size(172, 24);
            this.detDepositDateEnd.TabIndex = 20;
            this.detDepositDateEnd.TabStop = true;
            // 
            // detDepositDateStart
            // 
            appearance103.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.detDepositDateStart.ActiveEditAppearance = appearance103;
            this.detDepositDateStart.BackColor = System.Drawing.Color.Transparent;
            this.detDepositDateStart.CalendarDisp = true;
            appearance104.TextHAlignAsString = "Left";
            appearance104.TextVAlignAsString = "Middle";
            this.detDepositDateStart.EditAppearance = appearance104;
            this.detDepositDateStart.EnableEditors = new Broadleaf.Library.Windows.Forms.TEnableEditors(true, true, true, true);
            this.detDepositDateStart.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.detDepositDateStart.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            appearance107.TextHAlignAsString = "Left";
            appearance107.TextVAlignAsString = "Middle";
            this.detDepositDateStart.LabelAppearance = appearance107;
            this.detDepositDateStart.Location = new System.Drawing.Point(116, 3);
            this.detDepositDateStart.Name = "detDepositDateStart";
            this.detDepositDateStart.NecessaryEditors = new Broadleaf.Library.Windows.Forms.TNecessaryEditors(false, false, false, false);
            this.detDepositDateStart.Options = new Broadleaf.Library.Windows.Forms.TDateEditOptions(false, false, false, true, false, true);
            this.detDepositDateStart.Size = new System.Drawing.Size(172, 24);
            this.detDepositDateStart.TabIndex = 19;
            this.detDepositDateStart.TabStop = true;
            // 
            // ultraLabel1
            // 
            appearance27.TextVAlignAsString = "Middle";
            this.ultraLabel1.Appearance = appearance27;
            this.ultraLabel1.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel1.Location = new System.Drawing.Point(6, 30);
            this.ultraLabel1.Name = "ultraLabel1";
            this.ultraLabel1.Size = new System.Drawing.Size(88, 24);
            this.ultraLabel1.TabIndex = 900;
            this.ultraLabel1.Text = "引当済表示";
            // 
            // btnSearchDeposit
            // 
            this.btnSearchDeposit.Location = new System.Drawing.Point(374, 56);
            this.btnSearchDeposit.Name = "btnSearchDeposit";
            this.btnSearchDeposit.Size = new System.Drawing.Size(96, 25);
            this.btnSearchDeposit.TabIndex = 23;
            this.btnSearchDeposit.Text = "検索";
            this.btnSearchDeposit.UseHotTracking = Infragistics.Win.DefaultableBoolean.True;
            this.btnSearchDeposit.Click += new System.EventHandler(this.btnSearchDeposit_Click);
            // 
            // ultraLabel3
            // 
            appearance28.TextVAlignAsString = "Middle";
            this.ultraLabel3.Appearance = appearance28;
            this.ultraLabel3.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel3.Location = new System.Drawing.Point(6, 3);
            this.ultraLabel3.Name = "ultraLabel3";
            this.ultraLabel3.Size = new System.Drawing.Size(88, 24);
            this.ultraLabel3.TabIndex = 900;
            this.ultraLabel3.Text = "入金日";
            // 
            // ultraTabPageControl3
            // 
            this.ultraTabPageControl3.Controls.Add(this.grdDmdSalesList);
            this.ultraTabPageControl3.Controls.Add(this.panel_DenSearch);
            this.ultraTabPageControl3.Controls.Add(this.panel_Hikiate);
            this.ultraTabPageControl3.Controls.Add(this.panel_UriGoukei);
            this.ultraTabPageControl3.Controls.Add(this.stbDmdSalesList);
            this.ultraTabPageControl3.Location = new System.Drawing.Point(-10000, -10000);
            this.ultraTabPageControl3.Name = "ultraTabPageControl3";
            this.ultraTabPageControl3.Size = new System.Drawing.Size(616, 471);
            // 
            // grdDmdSalesList
            // 
            this.grdDmdSalesList.DisplayLayout.MaxColScrollRegions = 1;
            this.grdDmdSalesList.DisplayLayout.MaxRowScrollRegions = 1;
            this.grdDmdSalesList.DisplayLayout.Override.CellClickAction = Infragistics.Win.UltraWinGrid.CellClickAction.RowSelect;
            this.grdDmdSalesList.DisplayLayout.Override.SelectTypeCell = Infragistics.Win.UltraWinGrid.SelectType.Single;
            this.grdDmdSalesList.DisplayLayout.Override.SelectTypeCol = Infragistics.Win.UltraWinGrid.SelectType.None;
            this.grdDmdSalesList.DisplayLayout.Override.SelectTypeRow = Infragistics.Win.UltraWinGrid.SelectType.Single;
            this.grdDmdSalesList.Dock = System.Windows.Forms.DockStyle.Fill;
            this.grdDmdSalesList.Font = new System.Drawing.Font("ＭＳ ゴシック", 10F);
            this.grdDmdSalesList.Location = new System.Drawing.Point(0, 91);
            this.grdDmdSalesList.Name = "grdDmdSalesList";
            this.grdDmdSalesList.Size = new System.Drawing.Size(616, 320);
            this.grdDmdSalesList.TabIndex = 2;
            this.grdDmdSalesList.ClickCellButton += new Infragistics.Win.UltraWinGrid.CellEventHandler(this.grdDmdSalesList_ClickCellButton);
            this.grdDmdSalesList.BeforeEnterEditMode += new System.ComponentModel.CancelEventHandler(this.grdDmdSalesList_BeforeEnterEditMode);
            this.grdDmdSalesList.AfterExitEditMode += new System.EventHandler(this.grdDmdSalesList_AfterExitEditMode);
            this.grdDmdSalesList.Click += new System.EventHandler(this.grdDmdSalesList_Click);
            this.grdDmdSalesList.InitializeLayout += new Infragistics.Win.UltraWinGrid.InitializeLayoutEventHandler(this.Grid_InitializeLayout);
            this.grdDmdSalesList.MouseLeaveElement += new Infragistics.Win.UIElementEventHandler(this.Grid_MouseLeaveElement);
            this.grdDmdSalesList.BeforeExitEditMode += new Infragistics.Win.UltraWinGrid.BeforeExitEditModeEventHandler(this.grdDmdSalesList_BeforeExitEditMode);
            this.grdDmdSalesList.AfterRowFilterChanged += new Infragistics.Win.UltraWinGrid.AfterRowFilterChangedEventHandler(this.grdDmdSalesList_AfterRowFilterChanged);
            this.grdDmdSalesList.BeforeCellDeactivate += new System.ComponentModel.CancelEventHandler(this.grdDmdSalesList_BeforeCellDeactivate);
            this.grdDmdSalesList.AfterRowActivate += new System.EventHandler(this.Grid_AfterRowActivate);
            this.grdDmdSalesList.InitializeRow += new Infragistics.Win.UltraWinGrid.InitializeRowEventHandler(this.Grid_InitializeRow);
            this.grdDmdSalesList.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.grdDmdSalesList_KeyPress);
            this.grdDmdSalesList.CellChange += new Infragistics.Win.UltraWinGrid.CellEventHandler(this.grdDmdSalesList_CellChange);
            this.grdDmdSalesList.Leave += new System.EventHandler(this.grdDmdSalesList_Leave);
            this.grdDmdSalesList.KeyDown += new System.Windows.Forms.KeyEventHandler(this.grdDmdSalesList_KeyDown);
            this.grdDmdSalesList.BeforeRowDeactivate += new System.ComponentModel.CancelEventHandler(this.Grid_BeforeRowDeactivate);
            this.grdDmdSalesList.AfterCellActivate += new System.EventHandler(this.grdDmdSalesList_AfterCellActivate);
            // 
            // panel_DenSearch
            // 
            this.panel_DenSearch.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(230)))), ((int)(((byte)(230)))));
            this.panel_DenSearch.Controls.Add(this.btnNoDepSalList);
            this.panel_DenSearch.Controls.Add(this.opsAlwcDmdSalesCall);
            this.panel_DenSearch.Controls.Add(this.tEdit_SalesSlipNum);
            this.panel_DenSearch.Controls.Add(this.ultraLabel10);
            this.panel_DenSearch.Controls.Add(this.detSearchSlipDateEnd);
            this.panel_DenSearch.Controls.Add(this.detSearchSlipDateStart);
            this.panel_DenSearch.Controls.Add(this.ultraLabel16);
            this.panel_DenSearch.Controls.Add(this.ultraLabel15);
            this.panel_DenSearch.Controls.Add(this.ultraLabel14);
            this.panel_DenSearch.Controls.Add(this.btnSearchDmdSales);
            this.panel_DenSearch.Dock = System.Windows.Forms.DockStyle.Top;
            this.panel_DenSearch.Location = new System.Drawing.Point(0, 30);
            this.panel_DenSearch.Name = "panel_DenSearch";
            this.panel_DenSearch.Size = new System.Drawing.Size(616, 61);
            this.panel_DenSearch.TabIndex = 1;
            // 
            // btnNoDepSalList
            // 
            this.btnNoDepSalList.Font = new System.Drawing.Font("ＭＳ ゴシック", 9F);
            this.btnNoDepSalList.Location = new System.Drawing.Point(523, 4);
            this.btnNoDepSalList.Name = "btnNoDepSalList";
            this.btnNoDepSalList.Size = new System.Drawing.Size(96, 25);
            this.btnNoDepSalList.TabIndex = 902;
            this.btnNoDepSalList.Text = "未入金一覧";
            this.btnNoDepSalList.UseHotTracking = Infragistics.Win.DefaultableBoolean.True;
            this.btnNoDepSalList.Click += new System.EventHandler(this.btnNoDepSalList_Click);
            // 
            // opsAlwcDmdSalesCall
            // 
            appearance80.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(150)))), ((int)(((byte)(150)))), ((int)(((byte)(255)))));
            this.opsAlwcDmdSalesCall.Appearance = appearance80;
            this.opsAlwcDmdSalesCall.BackColor = System.Drawing.SystemColors.Window;
            this.opsAlwcDmdSalesCall.BackColorInternal = System.Drawing.SystemColors.Window;
            this.opsAlwcDmdSalesCall.BorderStyle = Infragistics.Win.UIElementBorderStyle.Solid;
            this.opsAlwcDmdSalesCall.ItemOrigin = new System.Drawing.Point(5, 2);
            valueListItem17.DataValue = 0;
            valueListItem17.DisplayText = "表示する";
            valueListItem18.DataValue = 1;
            valueListItem18.DisplayText = "表示しない";
            this.opsAlwcDmdSalesCall.Items.AddRange(new Infragistics.Win.ValueListItem[] {
            valueListItem17,
            valueListItem18});
            this.opsAlwcDmdSalesCall.ItemSpacingVertical = 2;
            this.opsAlwcDmdSalesCall.Location = new System.Drawing.Point(94, 32);
            this.opsAlwcDmdSalesCall.Name = "opsAlwcDmdSalesCall";
            this.opsAlwcDmdSalesCall.Size = new System.Drawing.Size(231, 24);
            this.opsAlwcDmdSalesCall.TabIndex = 21;
            this.opsAlwcDmdSalesCall.TextIndentation = 5;
            // 
            // tEdit_SalesSlipNum
            // 
            appearance29.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.tEdit_SalesSlipNum.ActiveAppearance = appearance29;
            appearance30.BackColor = System.Drawing.Color.White;
            this.tEdit_SalesSlipNum.Appearance = appearance30;
            this.tEdit_SalesSlipNum.AutoSelect = true;
            this.tEdit_SalesSlipNum.BackColor = System.Drawing.Color.White;
            this.tEdit_SalesSlipNum.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper;
            this.tEdit_SalesSlipNum.DataText = "";
            this.tEdit_SalesSlipNum.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.tEdit_SalesSlipNum.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 9, new Broadleaf.Library.Windows.Forms.TEnableChars(false, false, true, false, true, true, true));
            this.tEdit_SalesSlipNum.ImeMode = System.Windows.Forms.ImeMode.Off;
            this.tEdit_SalesSlipNum.Location = new System.Drawing.Point(437, 32);
            this.tEdit_SalesSlipNum.MaxLength = 9;
            this.tEdit_SalesSlipNum.Name = "tEdit_SalesSlipNum";
            this.tEdit_SalesSlipNum.Size = new System.Drawing.Size(82, 24);
            this.tEdit_SalesSlipNum.TabIndex = 22;
            this.tEdit_SalesSlipNum.Leave += new System.EventHandler(this.tEdit_SalesSlipNum_Leave);
            // 
            // ultraLabel10
            // 
            appearance31.TextVAlignAsString = "Middle";
            this.ultraLabel10.Appearance = appearance31;
            this.ultraLabel10.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel10.Location = new System.Drawing.Point(269, 13);
            this.ultraLabel10.Name = "ultraLabel10";
            this.ultraLabel10.Size = new System.Drawing.Size(23, 8);
            this.ultraLabel10.TabIndex = 900;
            this.ultraLabel10.Text = "～";
            // 
            // detSearchSlipDateEnd
            // 
            appearance32.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.detSearchSlipDateEnd.ActiveEditAppearance = appearance32;
            this.detSearchSlipDateEnd.BackColor = System.Drawing.Color.Transparent;
            this.detSearchSlipDateEnd.CalendarDisp = true;
            appearance33.TextHAlignAsString = "Left";
            appearance33.TextVAlignAsString = "Middle";
            this.detSearchSlipDateEnd.EditAppearance = appearance33;
            this.detSearchSlipDateEnd.EnableEditors = new Broadleaf.Library.Windows.Forms.TEnableEditors(true, true, true, true);
            this.detSearchSlipDateEnd.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.detSearchSlipDateEnd.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            appearance34.TextHAlignAsString = "Left";
            appearance34.TextVAlignAsString = "Middle";
            this.detSearchSlipDateEnd.LabelAppearance = appearance34;
            this.detSearchSlipDateEnd.Location = new System.Drawing.Point(293, 5);
            this.detSearchSlipDateEnd.Name = "detSearchSlipDateEnd";
            this.detSearchSlipDateEnd.NecessaryEditors = new Broadleaf.Library.Windows.Forms.TNecessaryEditors(false, false, false, false);
            this.detSearchSlipDateEnd.Options = new Broadleaf.Library.Windows.Forms.TDateEditOptions(false, false, false, true, false, true);
            this.detSearchSlipDateEnd.Size = new System.Drawing.Size(172, 24);
            this.detSearchSlipDateEnd.TabIndex = 20;
            this.detSearchSlipDateEnd.TabStop = true;
            // 
            // detSearchSlipDateStart
            // 
            appearance35.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.detSearchSlipDateStart.ActiveEditAppearance = appearance35;
            this.detSearchSlipDateStart.BackColor = System.Drawing.Color.Transparent;
            this.detSearchSlipDateStart.CalendarDisp = true;
            appearance36.TextHAlignAsString = "Left";
            appearance36.TextVAlignAsString = "Middle";
            this.detSearchSlipDateStart.EditAppearance = appearance36;
            this.detSearchSlipDateStart.EnableEditors = new Broadleaf.Library.Windows.Forms.TEnableEditors(true, true, true, true);
            this.detSearchSlipDateStart.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.detSearchSlipDateStart.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            appearance37.TextHAlignAsString = "Left";
            appearance37.TextVAlignAsString = "Middle";
            this.detSearchSlipDateStart.LabelAppearance = appearance37;
            this.detSearchSlipDateStart.Location = new System.Drawing.Point(94, 5);
            this.detSearchSlipDateStart.Name = "detSearchSlipDateStart";
            this.detSearchSlipDateStart.NecessaryEditors = new Broadleaf.Library.Windows.Forms.TNecessaryEditors(false, false, false, false);
            this.detSearchSlipDateStart.Options = new Broadleaf.Library.Windows.Forms.TDateEditOptions(false, false, false, true, false, true);
            this.detSearchSlipDateStart.Size = new System.Drawing.Size(172, 24);
            this.detSearchSlipDateStart.TabIndex = 19;
            this.detSearchSlipDateStart.TabStop = true;
            // 
            // ultraLabel16
            // 
            appearance38.TextHAlignAsString = "Center";
            appearance38.TextVAlignAsString = "Middle";
            this.ultraLabel16.Appearance = appearance38;
            this.ultraLabel16.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel16.Location = new System.Drawing.Point(334, 32);
            this.ultraLabel16.Name = "ultraLabel16";
            this.ultraLabel16.Size = new System.Drawing.Size(98, 24);
            this.ultraLabel16.TabIndex = 900;
            this.ultraLabel16.Text = "売上伝票番号";
            // 
            // ultraLabel15
            // 
            appearance13.TextVAlignAsString = "Middle";
            this.ultraLabel15.Appearance = appearance13;
            this.ultraLabel15.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel15.Location = new System.Drawing.Point(6, 32);
            this.ultraLabel15.Name = "ultraLabel15";
            this.ultraLabel15.Size = new System.Drawing.Size(88, 24);
            this.ultraLabel15.TabIndex = 900;
            this.ultraLabel15.Text = "引当済表示";
            // 
            // ultraLabel14
            // 
            appearance14.TextVAlignAsString = "Middle";
            this.ultraLabel14.Appearance = appearance14;
            this.ultraLabel14.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel14.Location = new System.Drawing.Point(6, 5);
            this.ultraLabel14.Name = "ultraLabel14";
            this.ultraLabel14.Size = new System.Drawing.Size(88, 24);
            this.ultraLabel14.TabIndex = 900;
            this.ultraLabel14.Text = "売上日付";
            // 
            // btnSearchDmdSales
            // 
            this.btnSearchDmdSales.Location = new System.Drawing.Point(523, 31);
            this.btnSearchDmdSales.Name = "btnSearchDmdSales";
            this.btnSearchDmdSales.Size = new System.Drawing.Size(96, 25);
            this.btnSearchDmdSales.TabIndex = 23;
            this.btnSearchDmdSales.Text = "検索";
            this.btnSearchDmdSales.UseHotTracking = Infragistics.Win.DefaultableBoolean.True;
            this.btnSearchDmdSales.Click += new System.EventHandler(this.btnSearchDmdSales_Click);
            // 
            // panel_Hikiate
            // 
            this.panel_Hikiate.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(230)))), ((int)(((byte)(230)))));
            this.panel_Hikiate.Controls.Add(this.tLine11);
            this.panel_Hikiate.Controls.Add(this.tLine10);
            this.panel_Hikiate.Controls.Add(this.labDepositAlwcBlnce);
            this.panel_Hikiate.Controls.Add(this.labDepositTotal);
            this.panel_Hikiate.Controls.Add(this.ultraLabel8);
            this.panel_Hikiate.Controls.Add(this.ultraLabel7);
            this.panel_Hikiate.Dock = System.Windows.Forms.DockStyle.Top;
            this.panel_Hikiate.Location = new System.Drawing.Point(0, 0);
            this.panel_Hikiate.Name = "panel_Hikiate";
            this.panel_Hikiate.Size = new System.Drawing.Size(616, 30);
            this.panel_Hikiate.TabIndex = 0;
            // 
            // tLine11
            // 
            this.tLine11.BackColor = System.Drawing.Color.Transparent;
            this.tLine11.Location = new System.Drawing.Point(312, 25);
            this.tLine11.Name = "tLine11";
            this.tLine11.Size = new System.Drawing.Size(200, 8);
            this.tLine11.TabIndex = 187;
            this.tLine11.Text = "tLine11";
            // 
            // tLine10
            // 
            this.tLine10.BackColor = System.Drawing.Color.Transparent;
            this.tLine10.Location = new System.Drawing.Point(88, 25);
            this.tLine10.Name = "tLine10";
            this.tLine10.Size = new System.Drawing.Size(192, 8);
            this.tLine10.TabIndex = 186;
            this.tLine10.Text = "tLine10";
            // 
            // labDepositAlwcBlnce
            // 
            appearance42.TextHAlignAsString = "Right";
            appearance42.TextVAlignAsString = "Middle";
            this.labDepositAlwcBlnce.Appearance = appearance42;
            this.labDepositAlwcBlnce.Font = new System.Drawing.Font("ＭＳ ゴシック", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.labDepositAlwcBlnce.Location = new System.Drawing.Point(416, 4);
            this.labDepositAlwcBlnce.Name = "labDepositAlwcBlnce";
            this.labDepositAlwcBlnce.Size = new System.Drawing.Size(96, 24);
            this.labDepositAlwcBlnce.TabIndex = 1;
            // 
            // labDepositTotal
            // 
            appearance43.TextHAlignAsString = "Right";
            appearance43.TextVAlignAsString = "Middle";
            this.labDepositTotal.Appearance = appearance43;
            this.labDepositTotal.Font = new System.Drawing.Font("ＭＳ ゴシック", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.labDepositTotal.Location = new System.Drawing.Point(184, 4);
            this.labDepositTotal.Name = "labDepositTotal";
            this.labDepositTotal.Size = new System.Drawing.Size(96, 24);
            this.labDepositTotal.TabIndex = 0;
            // 
            // ultraLabel8
            // 
            appearance44.TextHAlignAsString = "Center";
            appearance44.TextVAlignAsString = "Middle";
            this.ultraLabel8.Appearance = appearance44;
            this.ultraLabel8.Font = new System.Drawing.Font("ＭＳ ゴシック", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel8.Location = new System.Drawing.Point(312, 4);
            this.ultraLabel8.Name = "ultraLabel8";
            this.ultraLabel8.Size = new System.Drawing.Size(104, 24);
            this.ultraLabel8.TabIndex = 900;
            this.ultraLabel8.Text = "入金未引当額";
            // 
            // ultraLabel7
            // 
            appearance45.TextHAlignAsString = "Center";
            appearance45.TextVAlignAsString = "Middle";
            this.ultraLabel7.Appearance = appearance45;
            this.ultraLabel7.Font = new System.Drawing.Font("ＭＳ ゴシック", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel7.Location = new System.Drawing.Point(96, 4);
            this.ultraLabel7.Name = "ultraLabel7";
            this.ultraLabel7.Size = new System.Drawing.Size(72, 24);
            this.ultraLabel7.TabIndex = 900;
            this.ultraLabel7.Text = "入金合計";
            // 
            // panel_UriGoukei
            // 
            this.panel_UriGoukei.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(230)))), ((int)(((byte)(230)))));
            this.panel_UriGoukei.Controls.Add(this.tLine12);
            this.panel_UriGoukei.Controls.Add(this.ultraLabel40);
            this.panel_UriGoukei.Controls.Add(this.labDmdSalesList);
            this.panel_UriGoukei.Controls.Add(this.labSalesAllowanceTotal);
            this.panel_UriGoukei.Controls.Add(this.btnAllAwl);
            this.panel_UriGoukei.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.panel_UriGoukei.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.panel_UriGoukei.Location = new System.Drawing.Point(0, 411);
            this.panel_UriGoukei.Name = "panel_UriGoukei";
            this.panel_UriGoukei.Size = new System.Drawing.Size(616, 32);
            this.panel_UriGoukei.TabIndex = 3;
            // 
            // tLine12
            // 
            this.tLine12.BackColor = System.Drawing.Color.Transparent;
            this.tLine12.Location = new System.Drawing.Point(302, 27);
            this.tLine12.Name = "tLine12";
            this.tLine12.Size = new System.Drawing.Size(216, 8);
            this.tLine12.TabIndex = 186;
            this.tLine12.Text = "tLine12";
            // 
            // ultraLabel40
            // 
            appearance46.TextHAlignAsString = "Center";
            appearance46.TextVAlignAsString = "Middle";
            this.ultraLabel40.Appearance = appearance46;
            this.ultraLabel40.Font = new System.Drawing.Font("ＭＳ ゴシック", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel40.Location = new System.Drawing.Point(304, 6);
            this.ultraLabel40.Name = "ultraLabel40";
            this.ultraLabel40.Size = new System.Drawing.Size(114, 24);
            this.ultraLabel40.TabIndex = 900;
            this.ultraLabel40.Text = "売上未引当合計";
            // 
            // labDmdSalesList
            // 
            appearance47.ForeColor = System.Drawing.Color.Blue;
            appearance47.TextHAlignAsString = "Left";
            appearance47.TextVAlignAsString = "Middle";
            this.labDmdSalesList.Appearance = appearance47;
            this.labDmdSalesList.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.labDmdSalesList.Location = new System.Drawing.Point(8, 0);
            this.labDmdSalesList.Name = "labDmdSalesList";
            this.labDmdSalesList.Size = new System.Drawing.Size(296, 32);
            this.labDmdSalesList.TabIndex = 187;
            // 
            // labSalesAllowanceTotal
            // 
            appearance48.TextHAlignAsString = "Right";
            appearance48.TextVAlignAsString = "Middle";
            this.labSalesAllowanceTotal.Appearance = appearance48;
            this.labSalesAllowanceTotal.Font = new System.Drawing.Font("ＭＳ ゴシック", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.labSalesAllowanceTotal.Location = new System.Drawing.Point(416, 6);
            this.labSalesAllowanceTotal.Name = "labSalesAllowanceTotal";
            this.labSalesAllowanceTotal.Size = new System.Drawing.Size(98, 24);
            this.labSalesAllowanceTotal.TabIndex = 89;
            // 
            // btnAllAwl
            // 
            this.btnAllAwl.Location = new System.Drawing.Point(523, 4);
            this.btnAllAwl.Name = "btnAllAwl";
            this.btnAllAwl.Size = new System.Drawing.Size(96, 25);
            this.btnAllAwl.TabIndex = 24;
            this.btnAllAwl.Text = "一括引当";
            this.btnAllAwl.UseHotTracking = Infragistics.Win.DefaultableBoolean.True;
            this.btnAllAwl.Click += new System.EventHandler(this.btnAllAwl_Click);
            // 
            // stbDmdSalesList
            // 
            this.stbDmdSalesList.Controls.Add(this.cmbSalesFontSize);
            this.stbDmdSalesList.Controls.Add(this.ckdSalesAutoColumnSize);
            this.stbDmdSalesList.Controls.Add(this.ckdDetailDmdSalesList);
            this.stbDmdSalesList.Controls.Add(this.ckdSeparateCost);
            this.stbDmdSalesList.Location = new System.Drawing.Point(0, 443);
            this.stbDmdSalesList.Name = "stbDmdSalesList";
            appearance49.FontData.SizeInPoints = 9F;
            ultraStatusPanel9.Appearance = appearance49;
            ultraStatusPanel9.Text = "文字サイズ";
            ultraStatusPanel9.Width = 72;
            ultraStatusPanel10.BorderStyle = Infragistics.Win.UIElementBorderStyle.None;
            ultraStatusPanel10.Control = this.cmbSalesFontSize;
            ultraStatusPanel10.Style = Infragistics.Win.UltraWinStatusBar.PanelStyle.ControlContainer;
            ultraStatusPanel10.Width = 40;
            ultraStatusPanel11.Key = "line1";
            ultraStatusPanel11.Width = 1;
            ultraStatusPanel12.Control = this.ckdSalesAutoColumnSize;
            ultraStatusPanel12.Key = "AutoCol";
            ultraStatusPanel12.Padding = new System.Drawing.Size(5, 0);
            ultraStatusPanel12.Style = Infragistics.Win.UltraWinStatusBar.PanelStyle.ControlContainer;
            ultraStatusPanel12.Width = 170;
            ultraStatusPanel13.Key = "line2";
            ultraStatusPanel13.Width = 1;
            ultraStatusPanel14.Control = this.ckdDetailDmdSalesList;
            ultraStatusPanel14.Key = "Detail";
            ultraStatusPanel14.Padding = new System.Drawing.Size(5, 0);
            ultraStatusPanel14.Style = Infragistics.Win.UltraWinStatusBar.PanelStyle.ControlContainer;
            ultraStatusPanel15.Key = "line3";
            ultraStatusPanel15.Width = 1;
            ultraStatusPanel16.Control = this.ckdSeparateCost;
            ultraStatusPanel16.Key = "SeparateCost";
            ultraStatusPanel16.Padding = new System.Drawing.Size(5, 0);
            ultraStatusPanel16.Style = Infragistics.Win.UltraWinStatusBar.PanelStyle.ControlContainer;
            ultraStatusPanel16.Width = 125;
            this.stbDmdSalesList.Panels.AddRange(new Infragistics.Win.UltraWinStatusBar.UltraStatusPanel[] {
            ultraStatusPanel9,
            ultraStatusPanel10,
            ultraStatusPanel11,
            ultraStatusPanel12,
            ultraStatusPanel13,
            ultraStatusPanel14,
            ultraStatusPanel15,
            ultraStatusPanel16});
            this.stbDmdSalesList.Size = new System.Drawing.Size(616, 28);
            this.stbDmdSalesList.TabIndex = 4;
            this.stbDmdSalesList.ViewStyle = Infragistics.Win.UltraWinStatusBar.ViewStyle.Office2003;
            // 
            // ultraExplorerBarContainerControl1
            // 
            this.ultraExplorerBarContainerControl1.Location = new System.Drawing.Point(18, 32);
            this.ultraExplorerBarContainerControl1.Name = "ultraExplorerBarContainerControl1";
            this.ultraExplorerBarContainerControl1.Size = new System.Drawing.Size(595, 0);
            this.ultraExplorerBarContainerControl1.TabIndex = 0;
            this.ultraExplorerBarContainerControl1.Visible = false;
            // 
            // ultraTabPageControl2
            // 
            this.ultraTabPageControl2.Location = new System.Drawing.Point(2, 25);
            this.ultraTabPageControl2.Name = "ultraTabPageControl2";
            this.ultraTabPageControl2.Size = new System.Drawing.Size(532, 333);
            // 
            // panel_SFUKK01403UA
            // 
            this.panel_SFUKK01403UA.Controls.Add(this.tabList);
            this.panel_SFUKK01403UA.Controls.Add(this.splitter1);
            this.panel_SFUKK01403UA.Controls.Add(this.panel_Nyukin);
            this.panel_SFUKK01403UA.Controls.Add(this.panel_Partition);
            this.panel_SFUKK01403UA.Controls.Add(this.panel_TokSeikyu);
            this.panel_SFUKK01403UA.Controls.Add(this.panel_Right);
            this.panel_SFUKK01403UA.Controls.Add(this.panel_Left);
            this.panel_SFUKK01403UA.Controls.Add(this.panel2);
            this.panel_SFUKK01403UA.Cursor = System.Windows.Forms.Cursors.Default;
            this.panel_SFUKK01403UA.Dock = System.Windows.Forms.DockStyle.Fill;
            this.panel_SFUKK01403UA.Location = new System.Drawing.Point(0, 0);
            this.panel_SFUKK01403UA.Name = "panel_SFUKK01403UA";
            this.panel_SFUKK01403UA.Size = new System.Drawing.Size(992, 626);
            this.panel_SFUKK01403UA.TabIndex = 0;
            // 
            // tabList
            // 
            appearance50.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            appearance50.BackColor2 = System.Drawing.Color.CornflowerBlue;
            appearance50.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            this.tabList.ActiveTabAppearance = appearance50;
            appearance51.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            appearance51.BackColor2 = System.Drawing.Color.LightSteelBlue;
            appearance51.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance51.ForeColor = System.Drawing.Color.Black;
            this.tabList.Appearance = appearance51;
            appearance52.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            appearance52.BackColor2 = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            this.tabList.ClientAreaAppearance = appearance52;
            this.tabList.Controls.Add(this.ultraTabSharedControlsPage1);
            this.tabList.Controls.Add(this.ultraTabPageControl1);
            this.tabList.Controls.Add(this.ultraTabPageControl3);
            this.tabList.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tabList.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.tabList.Location = new System.Drawing.Point(367, 122);
            this.tabList.Name = "tabList";
            appearance53.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            appearance53.BackColor2 = System.Drawing.Color.CornflowerBlue;
            this.tabList.SelectedTabAppearance = appearance53;
            this.tabList.SharedControlsPage = this.ultraTabSharedControlsPage1;
            this.tabList.Size = new System.Drawing.Size(620, 500);
            this.tabList.Style = Infragistics.Win.UltraWinTabControl.UltraTabControlStyle.PropertyPageFlat;
            this.tabList.TabIndex = 18;
            this.tabList.TabPadding = new System.Drawing.Size(1, 2);
            appearance54.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(192)))));
            ultraTab1.ClientAreaAppearance = appearance54;
            ultraTab1.FixedWidth = 200;
            ultraTab1.Key = "DepositTab";
            appearance55.FontData.BoldAsString = "True";
            ultraTab1.SelectedAppearance = appearance55;
            ultraTab1.TabPage = this.ultraTabPageControl1;
            ultraTab1.Text = "入金一覧";
            appearance56.BorderColor = System.Drawing.Color.Blue;
            ultraTab2.ClientAreaAppearance = appearance56;
            ultraTab2.FixedWidth = 200;
            ultraTab2.Key = "DmdSalesTab";
            appearance57.FontData.BoldAsString = "True";
            ultraTab2.SelectedAppearance = appearance57;
            ultraTab2.TabPage = this.ultraTabPageControl3;
            ultraTab2.Text = "売上引当";
            this.tabList.Tabs.AddRange(new Infragistics.Win.UltraWinTabControl.UltraTab[] {
            ultraTab1,
            ultraTab2});
            this.tabList.TabStop = false;
            this.tabList.UseHotTracking = Infragistics.Win.DefaultableBoolean.True;
            this.tabList.ViewStyle = Infragistics.Win.UltraWinTabControl.ViewStyle.Office2003;
            this.tabList.SelectedTabChanging += new Infragistics.Win.UltraWinTabControl.SelectedTabChangingEventHandler(this.tabList_SelectedTabChanging);
            this.tabList.SelectedTabChanged += new Infragistics.Win.UltraWinTabControl.SelectedTabChangedEventHandler(this.tabList_SelectedTabChanged);
            // 
            // ultraTabSharedControlsPage1
            // 
            this.ultraTabSharedControlsPage1.Location = new System.Drawing.Point(-10000, -10000);
            this.ultraTabSharedControlsPage1.Name = "ultraTabSharedControlsPage1";
            this.ultraTabSharedControlsPage1.Size = new System.Drawing.Size(616, 471);
            // 
            // splitter1
            // 
            this.splitter1.Location = new System.Drawing.Point(362, 122);
            this.splitter1.Name = "splitter1";
            this.splitter1.Size = new System.Drawing.Size(5, 500);
            this.splitter1.TabIndex = 30;
            this.splitter1.TabStop = false;
            this.splitter1.MouseLeave += new System.EventHandler(this.splitter1_MouseLeave);
            this.splitter1.MouseEnter += new System.EventHandler(this.splitter1_MouseEnter);
            // 
            // panel_Nyukin
            // 
            this.panel_Nyukin.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            this.panel_Nyukin.Controls.Add(this.panel5);
            this.panel_Nyukin.Controls.Add(this.grdDepositKind);
            this.panel_Nyukin.Controls.Add(this.labDebitNoteLinkDepoNo);
            this.panel_Nyukin.Controls.Add(this.edtDepositDate);
            this.panel_Nyukin.Controls.Add(this.edtDepositSlipNo);
            this.panel_Nyukin.Controls.Add(this.ultraLabel57);
            this.panel_Nyukin.Controls.Add(this.ultraLabel58);
            this.panel_Nyukin.Controls.Add(this.panel4);
            this.panel_Nyukin.Controls.Add(this.tShape9);
            this.panel_Nyukin.Dock = System.Windows.Forms.DockStyle.Left;
            this.panel_Nyukin.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.panel_Nyukin.ForeColor = System.Drawing.SystemColors.ControlText;
            this.panel_Nyukin.Location = new System.Drawing.Point(5, 122);
            this.panel_Nyukin.Name = "panel_Nyukin";
            this.panel_Nyukin.Size = new System.Drawing.Size(357, 500);
            this.panel_Nyukin.TabIndex = 2;
            // 
            // panel5
            // 
            this.panel5.Controls.Add(this.tEdit_SalesInputName);
            this.panel5.Controls.Add(this.uButton_SalesInputCode);
            this.panel5.Controls.Add(this.tEdit_EmployeeCode);
            this.panel5.Controls.Add(this.uLabel_SalesInputCodeTitle);
            this.panel5.Controls.Add(this.edtDepositTotal);
            this.panel5.Controls.Add(this.edtDiscountDeposit);
            this.panel5.Controls.Add(this.edtFeeDeposit);
            this.panel5.Controls.Add(this.edtOutline);
            this.panel5.Controls.Add(this.ultraLabel65);
            this.panel5.Controls.Add(this.ultraLabel61);
            this.panel5.Controls.Add(this.ultraLabel62);
            this.panel5.Controls.Add(this.ultraLabel60);
            this.panel5.Location = new System.Drawing.Point(5, 234);
            this.panel5.Name = "panel5";
            this.panel5.Size = new System.Drawing.Size(345, 139);
            this.panel5.TabIndex = 1134;
            // 
            // edtDepositTotal
            // 
            this.edtDepositTotal.ActiveAppearance = appearance74;
            appearance75.TextHAlignAsString = "Right";
            this.edtDepositTotal.Appearance = appearance75;
            this.edtDepositTotal.AutoSelect = true;
            this.edtDepositTotal.CalcSize = new System.Drawing.Size(172, 200);
            this.edtDepositTotal.DataText = "";
            this.edtDepositTotal.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.edtDepositTotal.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 15, new Broadleaf.Library.Windows.Forms.TEnableChars(false, false, false, false, false, true, true));
            this.edtDepositTotal.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.edtDepositTotal.ImeMode = System.Windows.Forms.ImeMode.Off;
            this.edtDepositTotal.Location = new System.Drawing.Point(83, 56);
            this.edtDepositTotal.MaxLength = 15;
            this.edtDepositTotal.Name = "edtDepositTotal";
            this.edtDepositTotal.NumEdit = new Broadleaf.Library.Windows.Forms.TNumEdit(false, 0, true, false, true, Broadleaf.Library.Windows.Forms.emZeroSupp.zsON);
            this.edtDepositTotal.ReadOnly = true;
            this.edtDepositTotal.Size = new System.Drawing.Size(129, 24);
            this.edtDepositTotal.TabIndex = 9;
            this.edtDepositTotal.ValueChanged += new System.EventHandler(this.edtDepositTotal_ValueChanged);
            // 
            // edtDiscountDeposit
            // 
            appearance76.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            appearance76.TextHAlignAsString = "Right";
            this.edtDiscountDeposit.ActiveAppearance = appearance76;
            appearance77.TextHAlignAsString = "Right";
            this.edtDiscountDeposit.Appearance = appearance77;
            this.edtDiscountDeposit.AutoSelect = true;
            this.edtDiscountDeposit.CalcSize = new System.Drawing.Size(172, 200);
            this.edtDiscountDeposit.DataText = "";
            this.edtDiscountDeposit.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.edtDiscountDeposit.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 13, new Broadleaf.Library.Windows.Forms.TEnableChars(false, false, false, false, false, true, true));
            this.edtDiscountDeposit.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.edtDiscountDeposit.ImeMode = System.Windows.Forms.ImeMode.Off;
            this.edtDiscountDeposit.Location = new System.Drawing.Point(83, 29);
            this.edtDiscountDeposit.MaxLength = 13;
            this.edtDiscountDeposit.Name = "edtDiscountDeposit";
            this.edtDiscountDeposit.NumEdit = new Broadleaf.Library.Windows.Forms.TNumEdit(false, 0, true, false, false, Broadleaf.Library.Windows.Forms.emZeroSupp.zsON);
            this.edtDiscountDeposit.Size = new System.Drawing.Size(129, 24);
            this.edtDiscountDeposit.TabIndex = 8;
            this.edtDiscountDeposit.Leave += new System.EventHandler(this.edtDeposit_Leave);
            // 
            // edtFeeDeposit
            // 
            appearance78.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            appearance78.TextHAlignAsString = "Right";
            this.edtFeeDeposit.ActiveAppearance = appearance78;
            appearance79.TextHAlignAsString = "Right";
            this.edtFeeDeposit.Appearance = appearance79;
            this.edtFeeDeposit.AutoSelect = true;
            this.edtFeeDeposit.CalcSize = new System.Drawing.Size(172, 200);
            this.edtFeeDeposit.DataText = "";
            this.edtFeeDeposit.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.edtFeeDeposit.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 13, new Broadleaf.Library.Windows.Forms.TEnableChars(false, false, false, false, false, true, true));
            this.edtFeeDeposit.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.edtFeeDeposit.ImeMode = System.Windows.Forms.ImeMode.Off;
            this.edtFeeDeposit.Location = new System.Drawing.Point(83, 2);
            this.edtFeeDeposit.MaxLength = 13;
            this.edtFeeDeposit.Name = "edtFeeDeposit";
            this.edtFeeDeposit.NumEdit = new Broadleaf.Library.Windows.Forms.TNumEdit(false, 0, true, false, false, Broadleaf.Library.Windows.Forms.emZeroSupp.zsON);
            this.edtFeeDeposit.Size = new System.Drawing.Size(129, 24);
            this.edtFeeDeposit.TabIndex = 7;
            this.edtFeeDeposit.Leave += new System.EventHandler(this.edtDeposit_Leave);
            // 
            // edtOutline
            // 
            appearance87.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.edtOutline.ActiveAppearance = appearance87;
            appearance142.ForeColorDisabled = System.Drawing.Color.Black;
            this.edtOutline.Appearance = appearance142;
            this.edtOutline.AutoSelect = true;
            this.edtOutline.DataText = "";
            this.edtOutline.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            //this.edtOutline.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 40, new Broadleaf.Library.Windows.Forms.TEnableChars(true, true, true, false, true, true, true));// DEL 董桂鈺 2013/02/17 for Redmine#33921
            // --- ADD 董桂鈺 2013/02/17 for Redmine#33921 --->>>>>>
            //入金の摘要欄に半角カタカナを入力できるように修正
            this.edtOutline.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 40, new Broadleaf.Library.Windows.Forms.TEnableChars(true, true, true, true, true, true, true));
            // --- ADD 董桂鈺 2013/02/17 for Redmine#33921 ---<<<<<<
            this.edtOutline.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.edtOutline.ImeMode = System.Windows.Forms.ImeMode.Hiragana;
            this.edtOutline.Location = new System.Drawing.Point(83, 83);
            this.edtOutline.MaxLength = 40;
            this.edtOutline.Name = "edtOutline";
            this.edtOutline.Size = new System.Drawing.Size(253, 24);
            this.edtOutline.TabIndex = 10;
            this.edtOutline.Leave += new System.EventHandler(this.edtDeposit_Leave);
            // 
            // ultraLabel65
            // 
            appearance95.TextVAlignAsString = "Middle";
            this.ultraLabel65.Appearance = appearance95;
            this.ultraLabel65.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel65.Location = new System.Drawing.Point(0, 83);
            this.ultraLabel65.Name = "ultraLabel65";
            this.ultraLabel65.Size = new System.Drawing.Size(80, 24);
            this.ultraLabel65.TabIndex = 907;
            this.ultraLabel65.Text = "摘要";
            // 
            // ultraLabel61
            // 
            appearance98.TextVAlignAsString = "Middle";
            this.ultraLabel61.Appearance = appearance98;
            this.ultraLabel61.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel61.Location = new System.Drawing.Point(0, 56);
            this.ultraLabel61.Name = "ultraLabel61";
            this.ultraLabel61.Size = new System.Drawing.Size(80, 24);
            this.ultraLabel61.TabIndex = 908;
            this.ultraLabel61.Text = "入金合計";
            // 
            // ultraLabel62
            // 
            appearance99.TextVAlignAsString = "Middle";
            this.ultraLabel62.Appearance = appearance99;
            this.ultraLabel62.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel62.Location = new System.Drawing.Point(0, 29);
            this.ultraLabel62.Name = "ultraLabel62";
            this.ultraLabel62.Size = new System.Drawing.Size(80, 24);
            this.ultraLabel62.TabIndex = 905;
            this.ultraLabel62.Text = "値引";
            // 
            // ultraLabel60
            // 
            appearance100.TextVAlignAsString = "Middle";
            this.ultraLabel60.Appearance = appearance100;
            this.ultraLabel60.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel60.Location = new System.Drawing.Point(0, 2);
            this.ultraLabel60.Name = "ultraLabel60";
            this.ultraLabel60.Size = new System.Drawing.Size(80, 24);
            this.ultraLabel60.TabIndex = 906;
            this.ultraLabel60.Text = "手数料";
            // 
            // grdDepositKind
            // 
            this.grdDepositKind.Cursor = System.Windows.Forms.Cursors.Default;
            appearance143.BackColor = System.Drawing.Color.White;
            appearance143.BackColor2 = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            appearance143.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance143.BorderColor = System.Drawing.Color.Blue;
            this.grdDepositKind.DisplayLayout.Appearance = appearance143;
            appearance144.BackColor = System.Drawing.SystemColors.ActiveBorder;
            appearance144.BackColor2 = System.Drawing.SystemColors.ControlDark;
            appearance144.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance144.BorderColor = System.Drawing.SystemColors.Window;
            this.grdDepositKind.DisplayLayout.GroupByBox.Appearance = appearance144;
            appearance145.ForeColor = System.Drawing.SystemColors.GrayText;
            this.grdDepositKind.DisplayLayout.GroupByBox.BandLabelAppearance = appearance145;
            this.grdDepositKind.DisplayLayout.GroupByBox.BorderStyle = Infragistics.Win.UIElementBorderStyle.Solid;
            this.grdDepositKind.DisplayLayout.GroupByBox.Hidden = true;
            appearance146.BackColor = System.Drawing.SystemColors.ControlLightLight;
            appearance146.BackColor2 = System.Drawing.SystemColors.Control;
            appearance146.BackGradientStyle = Infragistics.Win.GradientStyle.Horizontal;
            appearance146.ForeColor = System.Drawing.SystemColors.GrayText;
            this.grdDepositKind.DisplayLayout.GroupByBox.PromptAppearance = appearance146;
            this.grdDepositKind.DisplayLayout.MaxColScrollRegions = 1;
            this.grdDepositKind.DisplayLayout.MaxRowScrollRegions = 1;
            appearance147.BackColor = System.Drawing.SystemColors.Window;
            appearance147.ForeColor = System.Drawing.SystemColors.ControlText;
            this.grdDepositKind.DisplayLayout.Override.ActiveCellAppearance = appearance147;
            this.grdDepositKind.DisplayLayout.Override.AllowAddNew = Infragistics.Win.UltraWinGrid.AllowAddNew.No;
            this.grdDepositKind.DisplayLayout.Override.AllowColMoving = Infragistics.Win.UltraWinGrid.AllowColMoving.NotAllowed;
            this.grdDepositKind.DisplayLayout.Override.AllowColSwapping = Infragistics.Win.UltraWinGrid.AllowColSwapping.NotAllowed;
            this.grdDepositKind.DisplayLayout.Override.AllowDelete = Infragistics.Win.DefaultableBoolean.False;
            this.grdDepositKind.DisplayLayout.Override.AllowRowLayoutCellSizing = Infragistics.Win.UltraWinGrid.RowLayoutSizing.None;
            appearance148.BackColor = System.Drawing.SystemColors.Window;
            this.grdDepositKind.DisplayLayout.Override.CardAreaAppearance = appearance148;
            appearance149.BorderColor = System.Drawing.Color.Silver;
            appearance149.TextTrimming = Infragistics.Win.TextTrimming.EllipsisCharacter;
            this.grdDepositKind.DisplayLayout.Override.CellAppearance = appearance149;
            this.grdDepositKind.DisplayLayout.Override.CellClickAction = Infragistics.Win.UltraWinGrid.CellClickAction.EditAndSelectText;
            this.grdDepositKind.DisplayLayout.Override.CellPadding = 0;
            appearance150.BackColor = System.Drawing.SystemColors.Control;
            appearance150.BackColor2 = System.Drawing.SystemColors.ControlDark;
            appearance150.BackGradientAlignment = Infragistics.Win.GradientAlignment.Element;
            appearance150.BackGradientStyle = Infragistics.Win.GradientStyle.Horizontal;
            appearance150.BorderColor = System.Drawing.SystemColors.Window;
            this.grdDepositKind.DisplayLayout.Override.GroupByRowAppearance = appearance150;
            appearance151.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(89)))), ((int)(((byte)(135)))), ((int)(((byte)(214)))));
            appearance151.BackColor2 = System.Drawing.Color.FromArgb(((int)(((byte)(7)))), ((int)(((byte)(59)))), ((int)(((byte)(150)))));
            appearance151.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance151.ForeColor = System.Drawing.Color.White;
            appearance151.TextHAlignAsString = "Left";
            appearance151.ThemedElementAlpha = Infragistics.Win.Alpha.Transparent;
            this.grdDepositKind.DisplayLayout.Override.HeaderAppearance = appearance151;
            appearance152.BackColor = System.Drawing.SystemColors.Window;
            appearance152.BorderColor = System.Drawing.Color.Silver;
            this.grdDepositKind.DisplayLayout.Override.RowAppearance = appearance152;
            this.grdDepositKind.DisplayLayout.Override.RowSelectors = Infragistics.Win.DefaultableBoolean.False;
            appearance153.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(251)))), ((int)(((byte)(230)))), ((int)(((byte)(148)))));
            appearance153.BackColor2 = System.Drawing.Color.FromArgb(((int)(((byte)(238)))), ((int)(((byte)(149)))), ((int)(((byte)(21)))));
            appearance153.ForeColor = System.Drawing.Color.Black;
            this.grdDepositKind.DisplayLayout.Override.SelectedRowAppearance = appearance153;
            this.grdDepositKind.DisplayLayout.Override.SelectTypeCell = Infragistics.Win.UltraWinGrid.SelectType.None;
            this.grdDepositKind.DisplayLayout.Override.SelectTypeCol = Infragistics.Win.UltraWinGrid.SelectType.None;
            this.grdDepositKind.DisplayLayout.Override.SelectTypeRow = Infragistics.Win.UltraWinGrid.SelectType.None;
            appearance154.BackColor = System.Drawing.SystemColors.ControlLight;
            this.grdDepositKind.DisplayLayout.Override.TemplateAddRowAppearance = appearance154;
            this.grdDepositKind.DisplayLayout.RowConnectorColor = System.Drawing.Color.Black;
            this.grdDepositKind.DisplayLayout.RowConnectorStyle = Infragistics.Win.UltraWinGrid.RowConnectorStyle.Solid;
            this.grdDepositKind.DisplayLayout.ScrollBounds = Infragistics.Win.UltraWinGrid.ScrollBounds.ScrollToFill;
            this.grdDepositKind.DisplayLayout.ScrollStyle = Infragistics.Win.UltraWinGrid.ScrollStyle.Immediate;
            this.grdDepositKind.Font = new System.Drawing.Font("ＭＳ ゴシック", 10F);
            this.grdDepositKind.ImeMode = System.Windows.Forms.ImeMode.Disable;
            this.grdDepositKind.Location = new System.Drawing.Point(5, 85);
            this.grdDepositKind.Name = "grdDepositKind";
            this.grdDepositKind.Size = new System.Drawing.Size(331, 145);
            this.grdDepositKind.TabIndex = 6;
            this.grdDepositKind.AfterExitEditMode += new System.EventHandler(this.grdDepositKind_AfterExitEditMode);
            this.grdDepositKind.AfterEnterEditMode += new System.EventHandler(this.grdDepositKind_AfterEnterEditMode);
            this.grdDepositKind.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.grdDepositKind_KeyPress);
            this.grdDepositKind.CellChange += new Infragistics.Win.UltraWinGrid.CellEventHandler(this.grdDepositKind_CellChange);
            this.grdDepositKind.Leave += new System.EventHandler(this.grdDepositKind_Leave);
            this.grdDepositKind.KeyDown += new System.Windows.Forms.KeyEventHandler(this.grdDepositKind_KeyDown);
            this.grdDepositKind.AfterCellActivate += new System.EventHandler(this.grdDepositKind_AfterCellActivate);
            // 
            // labDebitNoteLinkDepoNo
            // 
            appearance84.ForeColor = System.Drawing.Color.BlueViolet;
            appearance84.TextVAlignAsString = "Middle";
            this.labDebitNoteLinkDepoNo.Appearance = appearance84;
            this.labDebitNoteLinkDepoNo.Font = new System.Drawing.Font("ＭＳ ゴシック", 10F);
            this.labDebitNoteLinkDepoNo.Location = new System.Drawing.Point(184, 27);
            this.labDebitNoteLinkDepoNo.Name = "labDebitNoteLinkDepoNo";
            this.labDebitNoteLinkDepoNo.Size = new System.Drawing.Size(152, 24);
            this.labDebitNoteLinkDepoNo.TabIndex = 1132;
            this.labDebitNoteLinkDepoNo.Visible = false;
            // 
            // edtDepositDate
            // 
            appearance26.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.edtDepositDate.ActiveEditAppearance = appearance26;
            this.edtDepositDate.BackColor = System.Drawing.Color.Transparent;
            this.edtDepositDate.CalendarDisp = true;
            this.edtDepositDate.EditAppearance = appearance39;
            this.edtDepositDate.EnableEditors = new Broadleaf.Library.Windows.Forms.TEnableEditors(true, true, true, true);
            this.edtDepositDate.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.edtDepositDate.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            appearance72.TextHAlignAsString = "Left";
            appearance72.TextVAlignAsString = "Middle";
            this.edtDepositDate.LabelAppearance = appearance72;
            this.edtDepositDate.Location = new System.Drawing.Point(88, 56);
            this.edtDepositDate.Name = "edtDepositDate";
            this.edtDepositDate.NecessaryEditors = new Broadleaf.Library.Windows.Forms.TNecessaryEditors(false, false, false, false);
            this.edtDepositDate.Options = new Broadleaf.Library.Windows.Forms.TDateEditOptions(false, false, false, true, false, true);
            this.edtDepositDate.Size = new System.Drawing.Size(172, 24);
            this.edtDepositDate.TabIndex = 5;
            this.edtDepositDate.TabStop = true;
            this.edtDepositDate.Leave += new System.EventHandler(this.edtDeposit_Leave);
            // 
            // edtDepositSlipNo
            // 
            this.edtDepositSlipNo.ActiveAppearance = appearance15;
            appearance16.TextHAlignAsString = "Right";
            this.edtDepositSlipNo.Appearance = appearance16;
            this.edtDepositSlipNo.AutoSelect = true;
            this.edtDepositSlipNo.CalcSize = new System.Drawing.Size(172, 200);
            this.edtDepositSlipNo.DataText = "";
            this.edtDepositSlipNo.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.edtDepositSlipNo.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 9, new Broadleaf.Library.Windows.Forms.TEnableChars(false, false, false, false, false, true, true));
            this.edtDepositSlipNo.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.edtDepositSlipNo.ImeMode = System.Windows.Forms.ImeMode.Off;
            this.edtDepositSlipNo.Location = new System.Drawing.Point(88, 29);
            this.edtDepositSlipNo.MaxLength = 9;
            this.edtDepositSlipNo.Name = "edtDepositSlipNo";
            this.edtDepositSlipNo.NumEdit = new Broadleaf.Library.Windows.Forms.TNumEdit(false, 0, false, false, false, Broadleaf.Library.Windows.Forms.emZeroSupp.zsFILL);
            this.edtDepositSlipNo.ReadOnly = true;
            this.edtDepositSlipNo.Size = new System.Drawing.Size(82, 24);
            this.edtDepositSlipNo.TabIndex = 4;
            // 
            // ultraLabel57
            // 
            appearance108.TextVAlignAsString = "Middle";
            this.ultraLabel57.Appearance = appearance108;
            this.ultraLabel57.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel57.Location = new System.Drawing.Point(5, 56);
            this.ultraLabel57.Name = "ultraLabel57";
            this.ultraLabel57.Size = new System.Drawing.Size(80, 24);
            this.ultraLabel57.TabIndex = 900;
            this.ultraLabel57.Text = "入金日";
            // 
            // ultraLabel58
            // 
            appearance109.TextVAlignAsString = "Middle";
            this.ultraLabel58.Appearance = appearance109;
            this.ultraLabel58.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel58.Location = new System.Drawing.Point(5, 29);
            this.ultraLabel58.Name = "ultraLabel58";
            this.ultraLabel58.Size = new System.Drawing.Size(80, 24);
            this.ultraLabel58.TabIndex = 900;
            this.ultraLabel58.Text = "入金番号";
            // 
            // panel4
            // 
            this.panel4.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            this.panel4.Controls.Add(this.labInputModeTitle);
            this.panel4.Controls.Add(this.ultraLabel17);
            this.panel4.Dock = System.Windows.Forms.DockStyle.Top;
            this.panel4.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.panel4.Location = new System.Drawing.Point(0, 0);
            this.panel4.Name = "panel4";
            this.panel4.Size = new System.Drawing.Size(357, 24);
            this.panel4.TabIndex = 1133;
            // 
            // labInputModeTitle
            // 
            appearance110.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            appearance110.BackColor2 = System.Drawing.Color.CornflowerBlue;
            appearance110.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance110.FontData.SizeInPoints = 10F;
            appearance110.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(192)))));
            appearance110.TextHAlignAsString = "Center";
            appearance110.TextVAlignAsString = "Middle";
            this.labInputModeTitle.Appearance = appearance110;
            this.labInputModeTitle.BorderStyleOuter = Infragistics.Win.UIElementBorderStyle.None;
            this.labInputModeTitle.Location = new System.Drawing.Point(277, 2);
            this.labInputModeTitle.Name = "labInputModeTitle";
            this.labInputModeTitle.Size = new System.Drawing.Size(64, 21);
            this.labInputModeTitle.TabIndex = 1132;
            // 
            // ultraLabel17
            // 
            appearance111.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            appearance111.BackColor2 = System.Drawing.Color.CornflowerBlue;
            appearance111.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance111.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(192)))));
            appearance111.FontData.BoldAsString = "True";
            appearance111.ForeColor = System.Drawing.Color.Black;
            appearance111.TextHAlignAsString = "Left";
            appearance111.TextVAlignAsString = "Middle";
            this.ultraLabel17.Appearance = appearance111;
            this.ultraLabel17.BorderStyleInner = Infragistics.Win.UIElementBorderStyle.Solid;
            this.ultraLabel17.Dock = System.Windows.Forms.DockStyle.Fill;
            this.ultraLabel17.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.ultraLabel17.Location = new System.Drawing.Point(0, 0);
            this.ultraLabel17.Name = "ultraLabel17";
            this.ultraLabel17.Size = new System.Drawing.Size(357, 24);
            this.ultraLabel17.TabIndex = 163;
            this.ultraLabel17.Text = "                  入金伝票入力";
            // 
            // tShape9
            // 
            this.tShape9.BackColor = System.Drawing.Color.Transparent;
            this.tShape9.Cursor = System.Windows.Forms.Cursors.Arrow;
            this.tShape9.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tShape9.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(192)))));
            this.tShape9.HatchBackColor = System.Drawing.Color.Empty;
            this.tShape9.HatchForeColor = System.Drawing.Color.Empty;
            this.tShape9.Location = new System.Drawing.Point(0, 0);
            this.tShape9.Name = "tShape9";
            this.tShape9.ShapeStyle = Broadleaf.Library.Windows.Forms.emShapeStyle.ssRectangle;
            this.tShape9.Size = new System.Drawing.Size(357, 500);
            this.tShape9.TabIndex = 160;
            this.tShape9.Text = "tShape5";
            // 
            // panel_Partition
            // 
            this.panel_Partition.Dock = System.Windows.Forms.DockStyle.Top;
            this.panel_Partition.Location = new System.Drawing.Point(5, 118);
            this.panel_Partition.Name = "panel_Partition";
            this.panel_Partition.Size = new System.Drawing.Size(982, 4);
            this.panel_Partition.TabIndex = 26;
            // 
            // panel_TokSeikyu
            // 
            this.panel_TokSeikyu.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            this.panel_TokSeikyu.Controls.Add(this.panel3);
            this.panel_TokSeikyu.Controls.Add(this.panel1);
            this.panel_TokSeikyu.Dock = System.Windows.Forms.DockStyle.Top;
            this.panel_TokSeikyu.Font = new System.Drawing.Font("ＭＳ ゴシック", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.panel_TokSeikyu.Location = new System.Drawing.Point(5, 0);
            this.panel_TokSeikyu.Name = "panel_TokSeikyu";
            this.panel_TokSeikyu.Size = new System.Drawing.Size(982, 118);
            this.panel_TokSeikyu.TabIndex = 1;
            // 
            // panel3
            // 
            this.panel3.Controls.Add(this.edtCustomerName);
            this.panel3.Controls.Add(this.DepoSlipDateClrDiv_uLabel);
            this.panel3.Controls.Add(this.panel_kagami);
            this.panel3.Controls.Add(this.labDmdSpan);
            this.panel3.Controls.Add(this.Customer_uLabel);
            this.panel3.Controls.Add(this.DepoSlipDateClrDiv_tComboEditor);
            this.panel3.Controls.Add(this.ultraLabel54);
            this.panel3.Controls.Add(this.btnCustomerGuid);
            this.panel3.Controls.Add(this.edtTotalDay);
            this.panel3.Controls.Add(this.ultraLabel42);
            this.panel3.Controls.Add(this.tNedit_CustomerCode);
            this.panel3.Controls.Add(this.tShape2);
            this.panel3.Dock = System.Windows.Forms.DockStyle.Fill;
            this.panel3.Location = new System.Drawing.Point(0, 5);
            this.panel3.Name = "panel3";
            this.panel3.Size = new System.Drawing.Size(982, 113);
            this.panel3.TabIndex = 902;
            // 
            // edtCustomerName
            // 
            this.edtCustomerName.ActiveAppearance = appearance133;
            appearance134.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224)))), ((int)(((byte)(224)))), ((int)(((byte)(224)))));
            this.edtCustomerName.Appearance = appearance134;
            this.edtCustomerName.AutoSelect = true;
            this.edtCustomerName.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224)))), ((int)(((byte)(224)))), ((int)(((byte)(224)))));
            this.edtCustomerName.CheckEmpty = true;
            this.edtCustomerName.DataText = "";
            this.edtCustomerName.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.edtCustomerName.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 20, new Broadleaf.Library.Windows.Forms.TEnableChars(true, true, true, false, true, true, true));
            this.edtCustomerName.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.edtCustomerName.Location = new System.Drawing.Point(212, 56);
            this.edtCustomerName.MaxLength = 20;
            this.edtCustomerName.Name = "edtCustomerName";
            this.edtCustomerName.ReadOnly = true;
            this.edtCustomerName.Size = new System.Drawing.Size(315, 24);
            this.edtCustomerName.TabIndex = 2;
            this.edtCustomerName.TabStop = false;
            // 
            // DepoSlipDateClrDiv_uLabel
            // 
            appearance139.TextHAlignAsString = "Left";
            appearance139.TextVAlignAsString = "Middle";
            this.DepoSlipDateClrDiv_uLabel.Appearance = appearance139;
            this.DepoSlipDateClrDiv_uLabel.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.DepoSlipDateClrDiv_uLabel.Location = new System.Drawing.Point(5, 29);
            this.DepoSlipDateClrDiv_uLabel.Name = "DepoSlipDateClrDiv_uLabel";
            this.DepoSlipDateClrDiv_uLabel.Size = new System.Drawing.Size(101, 24);
            this.DepoSlipDateClrDiv_uLabel.TabIndex = 900;
            this.DepoSlipDateClrDiv_uLabel.Text = "伝票日付制御";
            // 
            // panel_kagami
            // 
            this.panel_kagami.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.panel_kagami.Controls.Add(this.ultraLabel32);
            this.panel_kagami.Controls.Add(this.lbl_AfCalDemandPrice);
            this.panel_kagami.Controls.Add(this.ultraLabel24);
            this.panel_kagami.Controls.Add(this.lbl_ThisTimeSales);
            this.panel_kagami.Controls.Add(this.ultraLabel22);
            this.panel_kagami.Controls.Add(this.lbl_Balance);
            this.panel_kagami.Controls.Add(this.ultraLabel20);
            this.panel_kagami.Controls.Add(this.tLine_kagami3);
            this.panel_kagami.Controls.Add(this.tLine_kagami2);
            this.panel_kagami.Controls.Add(this.lbl_ThisTimeDmdTtl);
            this.panel_kagami.Controls.Add(this.lbl_BlnceTtl);
            this.panel_kagami.Controls.Add(this.lbl_LastTimeDemand);
            this.panel_kagami.Controls.Add(this.lbl_AcpOdrTtl2TmBfBlDmd);
            this.panel_kagami.Controls.Add(this.lbl_AcpOdrTtl3TmBfBlDmd);
            this.panel_kagami.Controls.Add(this.ultraLabel30);
            this.panel_kagami.Controls.Add(this.ultraLabel31);
            this.panel_kagami.Controls.Add(this.ultraLabel29);
            this.panel_kagami.Controls.Add(this.ultraLabel28);
            this.panel_kagami.Controls.Add(this.tLine_kagami6);
            this.panel_kagami.Controls.Add(this.tLine_kagami5);
            this.panel_kagami.Controls.Add(this.tLine_kagami4);
            this.panel_kagami.Controls.Add(this.tLine_kagami1);
            this.panel_kagami.Controls.Add(this.tShape1);
            this.panel_kagami.Location = new System.Drawing.Point(534, 19);
            this.panel_kagami.Name = "panel_kagami";
            this.panel_kagami.Size = new System.Drawing.Size(445, 88);
            this.panel_kagami.TabIndex = 176;
            // 
            // ultraLabel32
            // 
            appearance126.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            appearance126.BackColor2 = System.Drawing.Color.LightSteelBlue;
            appearance126.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance126.TextHAlignAsString = "Center";
            appearance126.TextVAlignAsString = "Middle";
            this.ultraLabel32.Appearance = appearance126;
            this.ultraLabel32.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            this.ultraLabel32.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel32.Location = new System.Drawing.Point(0, 44);
            this.ultraLabel32.Name = "ultraLabel32";
            this.ultraLabel32.Size = new System.Drawing.Size(110, 20);
            this.ultraLabel32.TabIndex = 900;
            this.ultraLabel32.Text = "今回入金額";
            // 
            // lbl_AfCalDemandPrice
            // 
            appearance115.TextHAlignAsString = "Right";
            appearance115.TextVAlignAsString = "Middle";
            this.lbl_AfCalDemandPrice.Appearance = appearance115;
            this.lbl_AfCalDemandPrice.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(250)))), ((int)(((byte)(240)))), ((int)(((byte)(210)))));
            this.lbl_AfCalDemandPrice.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.lbl_AfCalDemandPrice.Location = new System.Drawing.Point(333, 65);
            this.lbl_AfCalDemandPrice.Name = "lbl_AfCalDemandPrice";
            this.lbl_AfCalDemandPrice.Size = new System.Drawing.Size(110, 21);
            this.lbl_AfCalDemandPrice.TabIndex = 900;
            // 
            // ultraLabel24
            // 
            appearance116.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            appearance116.BackColor2 = System.Drawing.Color.LightSteelBlue;
            appearance116.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance116.TextHAlignAsString = "Center";
            appearance116.TextVAlignAsString = "Middle";
            this.ultraLabel24.Appearance = appearance116;
            this.ultraLabel24.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            this.ultraLabel24.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel24.Location = new System.Drawing.Point(333, 44);
            this.ultraLabel24.Name = "ultraLabel24";
            this.ultraLabel24.Size = new System.Drawing.Size(110, 20);
            this.ultraLabel24.TabIndex = 900;
            this.ultraLabel24.Text = "更新後残高";
            // 
            // lbl_ThisTimeSales
            // 
            appearance117.TextHAlignAsString = "Right";
            appearance117.TextVAlignAsString = "Middle";
            this.lbl_ThisTimeSales.Appearance = appearance117;
            this.lbl_ThisTimeSales.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(250)))), ((int)(((byte)(240)))), ((int)(((byte)(210)))));
            this.lbl_ThisTimeSales.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.lbl_ThisTimeSales.Location = new System.Drawing.Point(222, 65);
            this.lbl_ThisTimeSales.Name = "lbl_ThisTimeSales";
            this.lbl_ThisTimeSales.Size = new System.Drawing.Size(110, 21);
            this.lbl_ThisTimeSales.TabIndex = 900;
            // 
            // ultraLabel22
            // 
            appearance118.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            appearance118.BackColor2 = System.Drawing.Color.LightSteelBlue;
            appearance118.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance118.TextHAlignAsString = "Center";
            appearance118.TextVAlignAsString = "Middle";
            this.ultraLabel22.Appearance = appearance118;
            this.ultraLabel22.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel22.Location = new System.Drawing.Point(222, 44);
            this.ultraLabel22.Name = "ultraLabel22";
            this.ultraLabel22.Size = new System.Drawing.Size(110, 20);
            this.ultraLabel22.TabIndex = 900;
            this.ultraLabel22.Text = "今回売上(税込)";
            // 
            // lbl_Balance
            // 
            appearance119.TextHAlignAsString = "Right";
            appearance119.TextVAlignAsString = "Middle";
            this.lbl_Balance.Appearance = appearance119;
            this.lbl_Balance.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(250)))), ((int)(((byte)(240)))), ((int)(((byte)(210)))));
            this.lbl_Balance.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.lbl_Balance.Location = new System.Drawing.Point(111, 65);
            this.lbl_Balance.Name = "lbl_Balance";
            this.lbl_Balance.Size = new System.Drawing.Size(110, 21);
            this.lbl_Balance.TabIndex = 900;
            // 
            // ultraLabel20
            // 
            appearance120.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            appearance120.BackColor2 = System.Drawing.Color.LightSteelBlue;
            appearance120.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance120.TextHAlignAsString = "Center";
            appearance120.TextVAlignAsString = "Middle";
            this.ultraLabel20.Appearance = appearance120;
            this.ultraLabel20.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            this.ultraLabel20.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel20.Location = new System.Drawing.Point(111, 44);
            this.ultraLabel20.Name = "ultraLabel20";
            this.ultraLabel20.Size = new System.Drawing.Size(110, 20);
            this.ultraLabel20.TabIndex = 900;
            this.ultraLabel20.Text = "差引残高";
            // 
            // tLine_kagami3
            // 
            this.tLine_kagami3.BackColor = System.Drawing.Color.Transparent;
            this.tLine_kagami3.Location = new System.Drawing.Point(0, 64);
            this.tLine_kagami3.Name = "tLine_kagami3";
            this.tLine_kagami3.Size = new System.Drawing.Size(444, 4);
            this.tLine_kagami3.TabIndex = 194;
            this.tLine_kagami3.Text = "tLine4";
            // 
            // tLine_kagami2
            // 
            this.tLine_kagami2.BackColor = System.Drawing.Color.Transparent;
            this.tLine_kagami2.Location = new System.Drawing.Point(0, 42);
            this.tLine_kagami2.Name = "tLine_kagami2";
            this.tLine_kagami2.Size = new System.Drawing.Size(444, 4);
            this.tLine_kagami2.TabIndex = 193;
            this.tLine_kagami2.Text = "tLine4";
            // 
            // lbl_ThisTimeDmdTtl
            // 
            appearance121.TextHAlignAsString = "Right";
            appearance121.TextVAlignAsString = "Middle";
            this.lbl_ThisTimeDmdTtl.Appearance = appearance121;
            this.lbl_ThisTimeDmdTtl.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(250)))), ((int)(((byte)(240)))), ((int)(((byte)(210)))));
            this.lbl_ThisTimeDmdTtl.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.lbl_ThisTimeDmdTtl.Location = new System.Drawing.Point(0, 65);
            this.lbl_ThisTimeDmdTtl.Name = "lbl_ThisTimeDmdTtl";
            this.lbl_ThisTimeDmdTtl.Size = new System.Drawing.Size(110, 21);
            this.lbl_ThisTimeDmdTtl.TabIndex = 900;
            // 
            // lbl_BlnceTtl
            // 
            appearance122.TextHAlignAsString = "Right";
            appearance122.TextVAlignAsString = "Middle";
            this.lbl_BlnceTtl.Appearance = appearance122;
            this.lbl_BlnceTtl.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(250)))), ((int)(((byte)(240)))), ((int)(((byte)(210)))));
            this.lbl_BlnceTtl.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.lbl_BlnceTtl.Location = new System.Drawing.Point(333, 21);
            this.lbl_BlnceTtl.Name = "lbl_BlnceTtl";
            this.lbl_BlnceTtl.Size = new System.Drawing.Size(110, 21);
            this.lbl_BlnceTtl.TabIndex = 900;
            // 
            // lbl_LastTimeDemand
            // 
            appearance123.TextHAlignAsString = "Right";
            appearance123.TextVAlignAsString = "Middle";
            this.lbl_LastTimeDemand.Appearance = appearance123;
            this.lbl_LastTimeDemand.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(250)))), ((int)(((byte)(240)))), ((int)(((byte)(210)))));
            this.lbl_LastTimeDemand.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.lbl_LastTimeDemand.Location = new System.Drawing.Point(222, 21);
            this.lbl_LastTimeDemand.Name = "lbl_LastTimeDemand";
            this.lbl_LastTimeDemand.Size = new System.Drawing.Size(110, 21);
            this.lbl_LastTimeDemand.TabIndex = 900;
            // 
            // lbl_AcpOdrTtl2TmBfBlDmd
            // 
            appearance124.TextHAlignAsString = "Right";
            appearance124.TextVAlignAsString = "Middle";
            this.lbl_AcpOdrTtl2TmBfBlDmd.Appearance = appearance124;
            this.lbl_AcpOdrTtl2TmBfBlDmd.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(250)))), ((int)(((byte)(240)))), ((int)(((byte)(210)))));
            this.lbl_AcpOdrTtl2TmBfBlDmd.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.lbl_AcpOdrTtl2TmBfBlDmd.Location = new System.Drawing.Point(111, 21);
            this.lbl_AcpOdrTtl2TmBfBlDmd.Name = "lbl_AcpOdrTtl2TmBfBlDmd";
            this.lbl_AcpOdrTtl2TmBfBlDmd.Size = new System.Drawing.Size(110, 21);
            this.lbl_AcpOdrTtl2TmBfBlDmd.TabIndex = 900;
            // 
            // lbl_AcpOdrTtl3TmBfBlDmd
            // 
            appearance125.TextHAlignAsString = "Right";
            appearance125.TextVAlignAsString = "Middle";
            this.lbl_AcpOdrTtl3TmBfBlDmd.Appearance = appearance125;
            this.lbl_AcpOdrTtl3TmBfBlDmd.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(250)))), ((int)(((byte)(240)))), ((int)(((byte)(210)))));
            this.lbl_AcpOdrTtl3TmBfBlDmd.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.lbl_AcpOdrTtl3TmBfBlDmd.Location = new System.Drawing.Point(0, 21);
            this.lbl_AcpOdrTtl3TmBfBlDmd.Name = "lbl_AcpOdrTtl3TmBfBlDmd";
            this.lbl_AcpOdrTtl3TmBfBlDmd.Size = new System.Drawing.Size(110, 21);
            this.lbl_AcpOdrTtl3TmBfBlDmd.TabIndex = 900;
            // 
            // ultraLabel30
            // 
            appearance127.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            appearance127.BackColor2 = System.Drawing.Color.LightSteelBlue;
            appearance127.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance127.TextHAlignAsString = "Center";
            appearance127.TextVAlignAsString = "Middle";
            this.ultraLabel30.Appearance = appearance127;
            this.ultraLabel30.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            this.ultraLabel30.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel30.Location = new System.Drawing.Point(333, 0);
            this.ultraLabel30.Name = "ultraLabel30";
            this.ultraLabel30.Size = new System.Drawing.Size(110, 20);
            this.ultraLabel30.TabIndex = 900;
            this.ultraLabel30.Text = "残高合計";
            // 
            // ultraLabel31
            // 
            appearance128.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            appearance128.BackColor2 = System.Drawing.Color.LightSteelBlue;
            appearance128.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance128.TextHAlignAsString = "Center";
            appearance128.TextVAlignAsString = "Middle";
            this.ultraLabel31.Appearance = appearance128;
            this.ultraLabel31.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel31.Location = new System.Drawing.Point(222, 0);
            this.ultraLabel31.Name = "ultraLabel31";
            this.ultraLabel31.Size = new System.Drawing.Size(110, 20);
            this.ultraLabel31.TabIndex = 900;
            this.ultraLabel31.Text = "前回残高";
            // 
            // ultraLabel29
            // 
            appearance129.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            appearance129.BackColor2 = System.Drawing.Color.LightSteelBlue;
            appearance129.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance129.TextHAlignAsString = "Center";
            appearance129.TextVAlignAsString = "Middle";
            this.ultraLabel29.Appearance = appearance129;
            this.ultraLabel29.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            this.ultraLabel29.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel29.Location = new System.Drawing.Point(111, 0);
            this.ultraLabel29.Name = "ultraLabel29";
            this.ultraLabel29.Size = new System.Drawing.Size(110, 20);
            this.ultraLabel29.TabIndex = 900;
            this.ultraLabel29.Text = "前々回残高";
            // 
            // ultraLabel28
            // 
            appearance130.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            appearance130.BackColor2 = System.Drawing.Color.LightSteelBlue;
            appearance130.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance130.TextHAlignAsString = "Center";
            appearance130.TextVAlignAsString = "Middle";
            this.ultraLabel28.Appearance = appearance130;
            this.ultraLabel28.BackColorInternal = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            this.ultraLabel28.Font = new System.Drawing.Font("ＭＳ ゴシック", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.ultraLabel28.Location = new System.Drawing.Point(0, 0);
            this.ultraLabel28.Name = "ultraLabel28";
            this.ultraLabel28.Size = new System.Drawing.Size(110, 20);
            this.ultraLabel28.TabIndex = 900;
            this.ultraLabel28.Text = "前々々回残高";
            // 
            // tLine_kagami6
            // 
            this.tLine_kagami6.BackColor = System.Drawing.Color.Transparent;
            this.tLine_kagami6.ForeColor = System.Drawing.Color.Black;
            this.tLine_kagami6.LineType = Broadleaf.Library.Windows.Forms.emLineType.ltVertical;
            this.tLine_kagami6.Location = new System.Drawing.Point(332, 0);
            this.tLine_kagami6.Name = "tLine_kagami6";
            this.tLine_kagami6.Size = new System.Drawing.Size(8, 86);
            this.tLine_kagami6.TabIndex = 178;
            this.tLine_kagami6.Text = "tLine15";
            // 
            // tLine_kagami5
            // 
            this.tLine_kagami5.BackColor = System.Drawing.Color.Transparent;
            this.tLine_kagami5.ForeColor = System.Drawing.Color.Black;
            this.tLine_kagami5.LineType = Broadleaf.Library.Windows.Forms.emLineType.ltVertical;
            this.tLine_kagami5.Location = new System.Drawing.Point(221, 0);
            this.tLine_kagami5.Name = "tLine_kagami5";
            this.tLine_kagami5.Size = new System.Drawing.Size(8, 86);
            this.tLine_kagami5.TabIndex = 177;
            this.tLine_kagami5.Text = "tLine15";
            // 
            // tLine_kagami4
            // 
            this.tLine_kagami4.BackColor = System.Drawing.Color.Transparent;
            this.tLine_kagami4.ForeColor = System.Drawing.Color.Black;
            this.tLine_kagami4.LineType = Broadleaf.Library.Windows.Forms.emLineType.ltVertical;
            this.tLine_kagami4.Location = new System.Drawing.Point(110, 0);
            this.tLine_kagami4.Name = "tLine_kagami4";
            this.tLine_kagami4.Size = new System.Drawing.Size(8, 86);
            this.tLine_kagami4.TabIndex = 176;
            this.tLine_kagami4.Text = "tLine15";
            // 
            // tLine_kagami1
            // 
            this.tLine_kagami1.BackColor = System.Drawing.Color.Transparent;
            this.tLine_kagami1.Location = new System.Drawing.Point(0, 20);
            this.tLine_kagami1.Name = "tLine_kagami1";
            this.tLine_kagami1.Size = new System.Drawing.Size(444, 4);
            this.tLine_kagami1.TabIndex = 175;
            this.tLine_kagami1.Text = "tLine4";
            // 
            // tShape1
            // 
            this.tShape1.BackColor = System.Drawing.Color.Transparent;
            this.tShape1.Cursor = System.Windows.Forms.Cursors.Arrow;
            this.tShape1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tShape1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(192)))));
            this.tShape1.HatchBackColor = System.Drawing.Color.Empty;
            this.tShape1.HatchForeColor = System.Drawing.Color.Empty;
            this.tShape1.Location = new System.Drawing.Point(0, 0);
            this.tShape1.Name = "tShape1";
            this.tShape1.ShapeStyle = Broadleaf.Library.Windows.Forms.emShapeStyle.ssRectangle;
            this.tShape1.Size = new System.Drawing.Size(443, 86);
            this.tShape1.TabIndex = 190;
            this.tShape1.Text = "tShape1";
            // 
            // labDmdSpan
            // 
            appearance140.TextHAlignAsString = "Right";
            this.labDmdSpan.Appearance = appearance140;
            this.labDmdSpan.Location = new System.Drawing.Point(405, 5);
            this.labDmdSpan.Name = "labDmdSpan";
            this.labDmdSpan.Size = new System.Drawing.Size(568, 21);
            this.labDmdSpan.TabIndex = 900;
            // 
            // Customer_uLabel
            // 
            this.Customer_uLabel.AccessibleRole = System.Windows.Forms.AccessibleRole.None;
            appearance136.TextHAlignAsString = "Left";
            appearance136.TextVAlignAsString = "Middle";
            this.Customer_uLabel.Appearance = appearance136;
            this.Customer_uLabel.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.Customer_uLabel.Location = new System.Drawing.Point(5, 56);
            this.Customer_uLabel.Name = "Customer_uLabel";
            this.Customer_uLabel.Size = new System.Drawing.Size(72, 24);
            this.Customer_uLabel.TabIndex = 900;
            this.Customer_uLabel.Text = "得意先";
            // 
            // DepoSlipDateClrDiv_tComboEditor
            // 
            appearance66.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.DepoSlipDateClrDiv_tComboEditor.ActiveAppearance = appearance66;
            this.DepoSlipDateClrDiv_tComboEditor.DropDownStyle = Infragistics.Win.DropDownStyle.DropDownList;
            this.DepoSlipDateClrDiv_tComboEditor.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            appearance67.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.DepoSlipDateClrDiv_tComboEditor.ItemAppearance = appearance67;
            valueListItem19.DataValue = 0;
            valueListItem19.DisplayText = "システム日付に戻す";
            valueListItem20.DataValue = 1;
            valueListItem20.DisplayText = "入力日付のまま";
            this.DepoSlipDateClrDiv_tComboEditor.Items.AddRange(new Infragistics.Win.ValueListItem[] {
            valueListItem19,
            valueListItem20});
            this.DepoSlipDateClrDiv_tComboEditor.Location = new System.Drawing.Point(108, 29);
            this.DepoSlipDateClrDiv_tComboEditor.Name = "DepoSlipDateClrDiv_tComboEditor";
            this.DepoSlipDateClrDiv_tComboEditor.Size = new System.Drawing.Size(195, 24);
            this.DepoSlipDateClrDiv_tComboEditor.TabIndex = 0;
            // 
            // ultraLabel54
            // 
            appearance135.TextHAlignAsString = "Left";
            appearance135.TextVAlignAsString = "Middle";
            this.ultraLabel54.Appearance = appearance135;
            this.ultraLabel54.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.ultraLabel54.Location = new System.Drawing.Point(5, 83);
            this.ultraLabel54.Name = "ultraLabel54";
            this.ultraLabel54.Size = new System.Drawing.Size(72, 24);
            this.ultraLabel54.TabIndex = 900;
            this.ultraLabel54.Text = "締/集金";
            // 
            // btnCustomerGuid
            // 
            appearance112.ImageHAlign = Infragistics.Win.HAlign.Center;
            appearance112.ImageVAlign = Infragistics.Win.VAlign.Middle;
            this.btnCustomerGuid.Appearance = appearance112;
            this.btnCustomerGuid.Location = new System.Drawing.Point(185, 56);
            this.btnCustomerGuid.Name = "btnCustomerGuid";
            this.btnCustomerGuid.Size = new System.Drawing.Size(24, 24);
            this.btnCustomerGuid.TabIndex = 1;
            ultraToolTipInfo1.ToolTipText = "得意先ガイド";
            this.ultraToolTip.SetUltraToolTip(this.btnCustomerGuid, ultraToolTipInfo1);
            this.btnCustomerGuid.UseHotTracking = Infragistics.Win.DefaultableBoolean.True;
            this.btnCustomerGuid.Click += new System.EventHandler(this.btnCustomerGuid_Click);
            // 
            // edtTotalDay
            // 
            this.edtTotalDay.ActiveAppearance = appearance131;
            appearance132.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224)))), ((int)(((byte)(224)))), ((int)(((byte)(224)))));
            this.edtTotalDay.Appearance = appearance132;
            this.edtTotalDay.AutoSelect = true;
            this.edtTotalDay.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224)))), ((int)(((byte)(224)))), ((int)(((byte)(224)))));
            this.edtTotalDay.DataText = "";
            this.edtTotalDay.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.edtTotalDay.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 12, new Broadleaf.Library.Windows.Forms.TEnableChars(true, true, true, false, true, true, true));
            this.edtTotalDay.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.edtTotalDay.Location = new System.Drawing.Point(108, 83);
            this.edtTotalDay.MaxLength = 12;
            this.edtTotalDay.Name = "edtTotalDay";
            this.edtTotalDay.ReadOnly = true;
            this.edtTotalDay.Size = new System.Drawing.Size(268, 24);
            this.edtTotalDay.TabIndex = 3;
            this.edtTotalDay.TabStop = false;
            // 
            // ultraLabel42
            // 
            appearance141.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(198)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            appearance141.BackColor2 = System.Drawing.Color.CornflowerBlue;
            appearance141.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            appearance141.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(192)))));
            appearance141.FontData.BoldAsString = "True";
            appearance141.ForeColor = System.Drawing.Color.Black;
            appearance141.TextHAlignAsString = "Center";
            appearance141.TextVAlignAsString = "Middle";
            this.ultraLabel42.Appearance = appearance141;
            this.ultraLabel42.BorderStyleInner = Infragistics.Win.UIElementBorderStyle.Solid;
            this.ultraLabel42.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.ultraLabel42.Location = new System.Drawing.Point(0, 0);
            this.ultraLabel42.Name = "ultraLabel42";
            this.ultraLabel42.Size = new System.Drawing.Size(345, 24);
            this.ultraLabel42.TabIndex = 900;
            this.ultraLabel42.Text = "入金先情報";
            // 
            // tNedit_CustomerCode
            // 
            appearance113.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.tNedit_CustomerCode.ActiveAppearance = appearance113;
            appearance114.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(179)))), ((int)(((byte)(219)))), ((int)(((byte)(231)))));
            appearance114.ForeColor = System.Drawing.Color.Black;
            appearance114.TextHAlignAsString = "Right";
            this.tNedit_CustomerCode.Appearance = appearance114;
            this.tNedit_CustomerCode.AutoSelect = true;
            this.tNedit_CustomerCode.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(179)))), ((int)(((byte)(219)))), ((int)(((byte)(231)))));
            this.tNedit_CustomerCode.CalcSize = new System.Drawing.Size(172, 200);
            this.tNedit_CustomerCode.DataText = "";
            this.tNedit_CustomerCode.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.tNedit_CustomerCode.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 9, new Broadleaf.Library.Windows.Forms.TEnableChars(false, false, false, false, false, false, true));
            this.tNedit_CustomerCode.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.tNedit_CustomerCode.ImeMode = System.Windows.Forms.ImeMode.Off;
            this.tNedit_CustomerCode.Location = new System.Drawing.Point(108, 56);
            this.tNedit_CustomerCode.MaxLength = 9;
            this.tNedit_CustomerCode.Name = "tNedit_CustomerCode";
            this.tNedit_CustomerCode.NumEdit = new Broadleaf.Library.Windows.Forms.TNumEdit(false, 0, false, true, false, Broadleaf.Library.Windows.Forms.emZeroSupp.zsOFF);
            this.tNedit_CustomerCode.Size = new System.Drawing.Size(74, 24);
            this.tNedit_CustomerCode.TabIndex = 0;
            // 
            // tShape2
            // 
            this.tShape2.BackColor = System.Drawing.Color.Transparent;
            this.tShape2.Cursor = System.Windows.Forms.Cursors.Arrow;
            this.tShape2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tShape2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(192)))));
            this.tShape2.HatchBackColor = System.Drawing.Color.Empty;
            this.tShape2.HatchForeColor = System.Drawing.Color.Empty;
            this.tShape2.Location = new System.Drawing.Point(0, 0);
            this.tShape2.Name = "tShape2";
            this.tShape2.ShapeStyle = Broadleaf.Library.Windows.Forms.emShapeStyle.ssRectangle;
            this.tShape2.Size = new System.Drawing.Size(982, 113);
            this.tShape2.TabIndex = 901;
            this.tShape2.Text = "tShape5";
            // 
            // panel1
            // 
            this.panel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.panel1.Location = new System.Drawing.Point(0, 0);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(982, 5);
            this.panel1.TabIndex = 901;
            // 
            // panel_Right
            // 
            this.panel_Right.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(222)))), ((int)(((byte)(239)))), ((int)(((byte)(255)))));
            this.panel_Right.Dock = System.Windows.Forms.DockStyle.Right;
            this.panel_Right.Location = new System.Drawing.Point(987, 0);
            this.panel_Right.Name = "panel_Right";
            this.panel_Right.Size = new System.Drawing.Size(5, 622);
            this.panel_Right.TabIndex = 25;
            // 
            // panel_Left
            // 
            this.panel_Left.Dock = System.Windows.Forms.DockStyle.Left;
            this.panel_Left.Location = new System.Drawing.Point(0, 0);
            this.panel_Left.Name = "panel_Left";
            this.panel_Left.Size = new System.Drawing.Size(5, 622);
            this.panel_Left.TabIndex = 24;
            // 
            // panel2
            // 
            this.panel2.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.panel2.Location = new System.Drawing.Point(0, 622);
            this.panel2.Name = "panel2";
            this.panel2.Size = new System.Drawing.Size(992, 4);
            this.panel2.TabIndex = 28;
            // 
            // tArrowKeyControl1
            // 
            this.tArrowKeyControl1.OwnerForm = this;
            this.tArrowKeyControl1.ChangeFocus += new Broadleaf.Library.Windows.Forms.ChangeFocusEventHandler(this.tRetKeyControl1_ChangeFocus);
            // 
            // tRetKeyControl1
            // 
            this.tRetKeyControl1.OwnerForm = this;
            this.tRetKeyControl1.Style = Broadleaf.Library.Windows.Forms.emFocusStyle.ByTab;
            this.tRetKeyControl1.ChangeFocus += new Broadleaf.Library.Windows.Forms.ChangeFocusEventHandler(this.tRetKeyControl1_ChangeFocus);
            // 
            // ultraToolTipGrid
            // 
            this.ultraToolTipGrid.ContainingControl = this;
            // 
            // ultraToolTip
            // 
            this.ultraToolTip.ContainingControl = this;
            this.ultraToolTip.DisplayStyle = Infragistics.Win.ToolTipDisplayStyle.Standard;
            // 
            // uiSetControl1
            // 
            this.uiSetControl1.EditWidthSettingWay = Broadleaf.Library.Windows.Forms.UiSetControl.EditWidthSettingWayState.None;
            this.uiSetControl1.OwnerForm = this;
            this.uiSetControl1.ChangeFocus += new Broadleaf.Library.Windows.Forms.ChangeFocusEventHandler(this.tRetKeyControl1_ChangeFocus);
            // 
            // tEdit_SalesInputName
            // 
            this.tEdit_SalesInputName.ActiveAppearance = appearance40;
            appearance41.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224)))), ((int)(((byte)(224)))), ((int)(((byte)(224)))));
            this.tEdit_SalesInputName.Appearance = appearance41;
            this.tEdit_SalesInputName.AutoSelect = true;
            this.tEdit_SalesInputName.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224)))), ((int)(((byte)(224)))), ((int)(((byte)(224)))));
            this.tEdit_SalesInputName.DataText = "";
            this.tEdit_SalesInputName.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.tEdit_SalesInputName.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 12, new Broadleaf.Library.Windows.Forms.TEnableChars(true, true, true, false, true, true, true));
            this.tEdit_SalesInputName.Font = new System.Drawing.Font("ＭＳ ゴシック", 11F);
            this.tEdit_SalesInputName.Location = new System.Drawing.Point(137, 110);
            this.tEdit_SalesInputName.MaxLength = 12;
            this.tEdit_SalesInputName.Name = "tEdit_SalesInputName";
            this.tEdit_SalesInputName.ReadOnly = true;
            this.tEdit_SalesInputName.Size = new System.Drawing.Size(175, 24);
            this.tEdit_SalesInputName.TabIndex = 1348;
            this.tEdit_SalesInputName.TabStop = false;
            // 
            // uButton_SalesInputCode
            // 
            appearance187.ImageHAlign = Infragistics.Win.HAlign.Center;
            appearance187.ImageVAlign = Infragistics.Win.VAlign.Middle;
            this.uButton_SalesInputCode.Appearance = appearance187;
            this.uButton_SalesInputCode.Location = new System.Drawing.Point(314, 110);
            this.uButton_SalesInputCode.Name = "uButton_SalesInputCode";
            this.uButton_SalesInputCode.Size = new System.Drawing.Size(24, 24);
            this.uButton_SalesInputCode.TabIndex = 1349;
            ultraToolTipInfo2.ToolTipText = "発行者ガイド";
            this.ultraToolTip.SetUltraToolTip(this.uButton_SalesInputCode, ultraToolTipInfo2);
            this.uButton_SalesInputCode.UseHotTracking = Infragistics.Win.DefaultableBoolean.True;
            this.uButton_SalesInputCode.Click += new System.EventHandler(this.uButton_SalesInputCode_Click);
            // 
            // tEdit_EmployeeCode
            // 
            appearance105.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(247)))), ((int)(((byte)(227)))), ((int)(((byte)(156)))));
            this.tEdit_EmployeeCode.ActiveAppearance = appearance105;
            this.tEdit_EmployeeCode.AutoSelect = true;
            this.tEdit_EmployeeCode.DataText = "";
            this.tEdit_EmployeeCode.ExtCase = new Broadleaf.Library.Windows.Forms.TExtCase(true, true, true, true, true, true, true, true, false);
            this.tEdit_EmployeeCode.ExtEdit = new Broadleaf.Library.Windows.Forms.TExtEdit(Broadleaf.Library.Windows.Forms.emCursorPosition.Prev, false, false, 4, new Broadleaf.Library.Windows.Forms.TEnableChars(false, false, false, false, false, false, true));
            this.tEdit_EmployeeCode.Location = new System.Drawing.Point(83, 110);
            this.tEdit_EmployeeCode.MaxLength = 4;
            this.tEdit_EmployeeCode.Name = "tEdit_EmployeeCode";
            this.tEdit_EmployeeCode.Size = new System.Drawing.Size(51, 24);
            this.tEdit_EmployeeCode.TabIndex = 1347;
            this.tEdit_EmployeeCode.Leave += new System.EventHandler(this.edtDeposit_Leave);
            // 
            // uLabel_SalesInputCodeTitle
            // 
            appearance106.ForeColorDisabled = System.Drawing.Color.Black;
            appearance106.TextVAlignAsString = "Middle";
            this.uLabel_SalesInputCodeTitle.Appearance = appearance106;
            this.uLabel_SalesInputCodeTitle.Location = new System.Drawing.Point(0, 110);
            this.uLabel_SalesInputCodeTitle.Name = "uLabel_SalesInputCodeTitle";
            this.uLabel_SalesInputCodeTitle.Size = new System.Drawing.Size(52, 24);
            this.uLabel_SalesInputCodeTitle.TabIndex = 1350;
            this.uLabel_SalesInputCodeTitle.Text = "発行者";
            // 
            // SFUKK01403UA
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(6, 12);
            this.ClientSize = new System.Drawing.Size(992, 626);
            this.Controls.Add(this.panel_SFUKK01403UA);
            this.Font = new System.Drawing.Font("ＭＳ ゴシック", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(128)));
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "SFUKK01403UA";
            this.Text = "入金伝票入力(入金型)";
            this.Load += new System.EventHandler(this.SFUKK01403UA_Load);
            ((System.ComponentModel.ISupportInitialize)(this.cmbDepositFontSize)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.cmbSalesFontSize)).EndInit();
            this.ultraTabPageControl1.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grdDepositList)).EndInit();
            this.panel_DepositGoukei.ResumeLayout(false);
            this.stbDepositList.ResumeLayout(false);
            this.panel_DepositSearch.ResumeLayout(false);
            this.panel_DepositSearch.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.opsAlwcDepositCall)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtSearchDepositSlipNo)).EndInit();
            this.ultraTabPageControl3.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grdDmdSalesList)).EndInit();
            this.panel_DenSearch.ResumeLayout(false);
            this.panel_DenSearch.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.opsAlwcDmdSalesCall)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.tEdit_SalesSlipNum)).EndInit();
            this.panel_Hikiate.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.tLine11)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.tLine10)).EndInit();
            this.panel_UriGoukei.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.tLine12)).EndInit();
            this.stbDmdSalesList.ResumeLayout(false);
            this.panel_SFUKK01403UA.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.tabList)).EndInit();
            this.tabList.ResumeLayout(false);
            this.panel_Nyukin.ResumeLayout(false);
            this.panel_Nyukin.PerformLayout();
            this.panel5.ResumeLayout(false);
            this.panel5.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.edtDepositTotal)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtDiscountDeposit)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtFeeDeposit)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtOutline)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdDepositKind)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtDepositSlipNo)).EndInit();
            this.panel4.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.tShape9)).EndInit();
            this.panel_TokSeikyu.ResumeLayout(false);
            this.panel3.ResumeLayout(false);
            this.panel3.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.edtCustomerName)).EndInit();
            this.panel_kagami.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.tLine_kagami3)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.tLine_kagami2)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.tLine_kagami6)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.tLine_kagami5)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.tLine_kagami4)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.tLine_kagami1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.tShape1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.DepoSlipDateClrDiv_tComboEditor)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.edtTotalDay)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.tNedit_CustomerCode)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.tShape2)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.tEdit_SalesInputName)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.tEdit_EmployeeCode)).EndInit();
            this.ResumeLayout(false);

        }
		#endregion

        public bool RenewalButton
        {
            get { return _btnRenewal; }
        }

        public void RenewalProc()
        {

            // ----- ADD 王君 2012/12/24 Redmine#33741 ----->>>>>
            int rowindexKind = -1;
            int rowindexList = -1;
            GetGuidRowNo(out rowindexList, out rowindexKind);
            Control control = new Control();
            bool flag = false;
            if (rowindexKind >= 0 || rowindexList >= 0 || this.edtFeeDeposit.Focused || this.edtDiscountDeposit.Focused)
            {
                if (this.edtFeeDeposit.Focused)
                {
                    control = this.edtFeeDeposit;
                    flag = true;
                }
                if (this.edtDiscountDeposit.Focused)
                {
                    control = this.edtDiscountDeposit;
                    flag = true;
                }
                this.tNedit_CustomerCode.Focus();
            }
            this._saveStatus = 0;
            // 入金内容の変更状況チェック処理
            if (CheckUpdateData(true, true) != 0)
            {
                if (rowindexKind >= 0)
                {
                    this.grdDepositKind.Rows[rowindexKind].Cells[DepositRelDataAcs.ctDeposit].Activate();
                }
                else if (rowindexList >= 0)
                {
                    this.grdDepositList.Rows[rowindexList].Activate();
                }
                else if (flag)
                {
                    control.Focus();
                }
                return;
            }
            // ----- ADD 王君　2012/12/24 Redmine#33741 ----- <<<<<
            // 売上全体設定取得
            this.depositRelDataAcs.GetSalesTtlSt(this.enterpriseCode, this._loginSectionCode);

            // 伝票日付制御初期値設定
            this.DepoSlipDateClrDiv_tComboEditor.Value = depositRelDataAcs.DepoSlipDateClrDiv;

            // ADD 2009/05/15 ------>>>
            int bfDepositSlipMnt = this.depositRelDataAcs.DepositSlipMnt;

            // 請求全体設定取得
            this.depositRelDataAcs.GetBillAllSt(this.enterpriseCode, this._loginSectionCode);

            if ((bfDepositSlipMnt == 0) && (this.depositRelDataAcs.DepositSlipMnt == 0))
            {
                ;
            }
            else
            {
                // 選択入金伝票再展開処理 ※編集中の時に変更前状態へ戻す
                grdDepositList.Focus();
                for (int i = 0; i < grdDepositList.Rows.Count; i++)
                {
                    if ((int)grdDepositList.Rows[i].Cells[InputDepositNormalTypeAcs.ctDepositSlipNo].Value == edtDepositSlipNo.GetInt())
                    {
                        grdDepositList.Rows[i].Activate();
                        ReExpandSelectDeposit();
                        break;
                    }
                }
            }
            // ADD 2009/05/15 ------<<<

            // 2009/07/21 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // 画面情報初期化
            ClearScreen();
            SearchAfterDisplySetting(-1);
            this._preEdtDepositDate = DateTime.MinValue; // ADD 2009/12/25

            // フォーカス設定
            this.tNedit_CustomerCode.Focus();

            // 画面初期設定処理
            this.ScreenInitialSetting();

            // 入金グリッド表示列変更処理
            this.DetailViewSettingColumun(this.ckdDetailDepositList.Checked, this.ckdAllowanceDepositList.Checked);

            depositRelDataAcs.SlDispType.Clear();
            depositRelDataAcs.SlDispType.Add(1, "入金伝票入力(入金型)");

            if (depositRelDataAcs.AllowanceProc != 2) 
            {
                depositRelDataAcs.SlDispType.Add(2, "入金伝票入力(売上指定型)");
            }
            // 2009/07/21 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            
            TMsgDisp.Show(this,
                          emErrorLevel.ERR_LEVEL_INFO,
                          this.Name,
                          "最新情報を取得しました。",
                          0,
                          MessageBoxButtons.OK);
        }
        // -------  ADD 王君 2012/12/24 Redmine#33741 ----------->>>>>

        /// <summary>
        /// 入金伝票入力（入金型)伝票呼出
        /// </summary>
        /// <remarks>
        /// <br>Note       : 入金伝票入力（入金型)伝票呼出を行います。</br>
        /// <br>Programmer : 王君</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>Date       : 2012/12/24</br>
        /// <br>Update Note: 2013/02/06 王君</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
        /// <br>Update Note: 2013/02/07 王君</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
        /// </remarks>
        public void ReadSlipProc()
        {
            //this._focusFlag = false; // DEL 王君 2013/02/06 Redmine#33741
            this._focusFlag = false; // ADD 王君 2013/02/07 Redmine#33741
            tRetKeyControl1_ChangeFocus(null, new ChangeFocusEventArgs(false, false, false, Keys.Enter, this.tNedit_CustomerCode, null));
            //this._focusFlag = true;  // DEL 王君 2013/02/06 Redmine#33741
            this._focusFlag = true;  // ADD 王君 2013/02/07 Redmine#33741
            int rowindexKind = -1;
            int rowindexList = -1;
            GetGuidRowNo(out rowindexList, out rowindexKind);
            Control control = new Control();
            bool flag = false;
            #region [フォーカスsava]
            if (rowindexKind >= 0 || rowindexList >= 0 || this.edtFeeDeposit.Focused || this.edtDiscountDeposit.Focused)
            {
                if (this.edtFeeDeposit.Focused)
                {
                    control = this.edtFeeDeposit;
                    flag = true;
                }
                if (this.edtDiscountDeposit.Focused)
                {
                    control = this.edtDiscountDeposit;
                    flag = true;
                }
                this.btnSearchDeposit.Focus();
            }
            #endregion

            this._saveStatus = 0;
            if (CheckUpdateData(true, true) != 0)
            {
                if (rowindexKind >= 0)
                {
                    this.grdDepositKind.Rows[rowindexKind].Cells[DepositRelDataAcs.ctDeposit].Activate();
                }
                else if (rowindexList >= 0)
                {
                    this.grdDepositList.Rows[rowindexList].Activate();
                }
                else if(flag)
                {
                    control.Focus();
                }
                return;
            }

            if (this._saveStatus == 2)
            {
                edtDepositDate.SetDateTime(this._edtDepositDateSave);
            }
            InputDepositNormalTypeAcs.SearchDepositParameter searchDepositParameter = SetDepositParameterUD(SearchMode.DepositSearch,tNedit_CustomerCode.GetInt(), edtSearchDepositSlipNo.GetInt());

            SFUKK01403UD sFUKK01403UD = new SFUKK01403UD(searchDepositParameter,inputDepositNormalTypeAcs);
            sFUKK01403UD.Employee = this.employee;
            // 伝票番号入力画面を表示
            sFUKK01403UD.ShowDialog();

            int status = (int)ConstantManagement.DB_Status.ctDB_EOF;
            if (sFUKK01403UD.DialogResult == DialogResult.OK)
            {
                this.detDepositDateStart.Clear();
                this.detDepositDateEnd.Clear();
                this.edtSearchDepositSlipNo.Clear();
                status = sFUKK01403UD.status;  
                //得意先コード
                if (this.grdDepositList.Rows.Count > 0)
                {
                    //得意先コード
                    int customerCode = Convert.ToInt32(this.grdDepositList.Rows[0].Cells[InputDepositNormalTypeAcs.ctCustomerCode].Value);
                    this.tNedit_CustomerCode.Text = customerCode.ToString();
                    int depositNo = Convert.ToInt32(this.grdDepositList.Rows[0].Cells[InputDepositNormalTypeAcs.ctDepositSlipNo].Value.ToString().Trim());
                    searchDepositParameter.DepositSlipNo = depositNo;
                    string AlwcDepositCall = this.grdDepositList.Rows[0].Cells[InputDepositNormalTypeAcs.ctAllowDiv].Value.ToString();
                    if (!string.IsNullOrEmpty(AlwcDepositCall))
                    {
                        //引当済表示区分
                        this.opsAlwcDepositCall.CheckedIndex = 0;
                    }
                   
                    //得意先をチェック
                    CustomerInfoSet(customerCode);
                    string message;
                    status = inputDepositNormalTypeAcs.SearchDepositOnlyMode(searchDepositParameter, out message);
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        this._grdDepositSearchFlag = true;
                }
                //データ検索後の画面設定処理
                SearchAfterDisplySetting(status);
                
                // イベントの無効化
                GridEventManager eventManager = this.grdDepositList.EventManager;
                eventManager.SetEnabled(GridEventIds.AfterRowActivate, false);

                try
                {
                    if (this.grdDepositList.ActiveRow != null)
                    {
                        this.grdDepositList.ActiveRow.Selected = false;
                    }
                    else
                    {
                        if (this.grdDepositList.Rows.Count > 0)
                        {
                            this.grdDepositList.Rows[0].Selected = false;
                        }
                    }
                    
                    // 新規入金伝票入力準備処理
                    NewDepositStandby();

                    // 請求売上情報データセット再登録処理
                    inputDepositNormalTypeAcs.ResetDsDmdSalesInfo();

                    for (int index = 0; index < this.grdDmdSalesList.Rows.Count; index++)
                    {
                        CellsCollection cells = this.grdDmdSalesList.Rows[index].Cells;
                        // 引当残＝0の明細場合,チェックボックスはチェック不可とする
                        if ((Int64)cells[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Value == 0
                            && (!string.IsNullOrEmpty((string)cells[InputDepositNormalTypeAcs.ctDepSaleSlipNum].Value)))
                        {
                            cells[InputDepositNormalTypeAcs.ctAlwCheck].Activation = Activation.Disabled;
                        }
                        this.grdDmdSalesList.Rows[index].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.Disabled;
                    }

                    for (int index = 0; index < grdDepositList.Rows.Count; index++)
                    {
                        grdDepositList.DisplayLayout.Rows[index].ExpansionIndicator = ShowExpansionIndicator.CheckOnDisplay;
                    }
                    SetSalesAllowanceTotal();

                    // 入金伝票変更前画面初期化処理
                    DisplyClearToDepositChange();

                    // 新規の時は変更状態チェックを行う
                    if (edtDepositSlipNo.GetInt() == 0)
                    {
                        // 請求売上情報データセット再登録処理
                        inputDepositNormalTypeAcs.ResetDsDmdSalesInfo();
                    }

                    // 選択入金データ展開処理
                    ExpandSelectDeposit(true);
                    if (this.grdDepositList.Rows.Count > 0)
                    {
                        this.grdDepositList.Rows[0].Activated = false;
                    }
                }
                finally
                {
                    eventManager.SetEnabled(GridEventIds.AfterRowActivate, true);
                }
            }			
            else
            {
                status = sFUKK01403UD.status;
                if (sFUKK01403UD.flag)
                {
                    switch (status)
                    {
                        case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                            this._grdDepositSearchFlag = true;
                            break;
                        case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                        case (int)ConstantManagement.DB_Status.ctDB_EOF:
                            {
                                // データ検索後の画面設定処理
                                SearchAfterDisplySetting((int)ConstantManagement.DB_Status.ctDB_NORMAL);

                                // 新規入金伝票入力準備処理
                                NewDepositStandby();
                                if (!this._focusSave)
                                {
                                    // 新規入金伝票入力処理
                                    this.NewDeposit();
                                    this._focusSave = true;
                                }
                                else
                                {
                                    this.edtDepositDate.Focus();
                                }
                                return;
                            }
                        default:
                            {
                                // データ検索後の画面設定処理
                                SearchAfterDisplySetting(status);
                                return;
                            }
                    }
                }
                else
                {
                    if (this._saveStatus == 2 || this._saveStatus == 1)
                    {
                        NewDepositStandby();
                        // システム日付に戻す
                        this.edtDepositDate.SetDateTime(DateTime.Today);
                    }
                    else
                    {
                        if (rowindexKind >= 0)
                        {
                            this.grdDepositKind.Rows[rowindexKind].Cells[DepositRelDataAcs.ctDeposit].Activate();
                        }
                        else if (rowindexList >= 0)
                        {
                            this.grdDepositList.Rows[rowindexList].Activate();
                        }
                        else if(flag)
                        {
                            control.Focus();
                        }
                    }
                }
            }
        }
        // -------  ADD 王君 2012/12/24 Redmine#33741 -----------<<<<<

		# region Public Delegate Event
		/// <summary>
		/// ツールバーボタン制御イベント
		/// </summary>
		/// <remarks>
		/// <br>Note       : フレームのボタン有効無効制御をしたい場合に発生させます。
		///        　　　    (IDepositInputMDIChildインターフェースの実装)</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		public event ParentToolbarDepositSettingEventHandler ParentToolbarSettingEvent;

		/// <summary>
		/// 選択拠点取得イベント
		/// </summary>
		/// <remarks>
		/// <br>Note       : フレームにて選択されている拠点コードを取得します。</br>
		/// <br>Programer  : 97036 amami</br>
		/// <br>Date       : 2005.07.30</br>
		/// </remarks>
		public event GetDepositSelectSectionCodeEventHandler GetSelectSectionCodeEvent;

        /// <summary>                     
        /// 計上拠点取得イベント
        /// </summary>
        /// <remarks>
        /// <br>Note       : メインにて取得した計上拠点名称をフレームに渡す</br>
        /// <br>Programer  : 20081 疋田 勇人</br>
        /// <br>Date       : 2007.10.10</br>
        /// </remarks>
        public event HandOverDepositAddUpSecNameEventHandler HandOverAddUpSecNameEvent;
		# endregion

		# region private Delegate
		/// <summary>
		/// 起動時フォーカス設定処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 起動時のフォーカスの設定を行います。</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private delegate void StartUpFocus();
		# endregion

		# region Private const Menbers
		/// <summary>画面状態保持ＸＭＬファイル</summary>
		private const string ctDisplayInfoFileNm = "\\SFUKK01403UA_State.dat";

		/// <summary>グリッド設定ファイル</summary>
		private const string ctGridInfoFileNm = "SFUKK01403UA.dat";

        // ↓ 20070129 18322 a MA.NS用に変更
        /// <summary>番号管理No（受注番号）</summary>
        private const Int32 ctNoCodeAcceptAnOrderNo = 5;
        /// <summary>番号管理No（売上伝票番号）</summary>
        private const Int32 ctNoCodeSalesSlipNum    = 1200;
        // ↑ 20070129 18322 a
		# endregion

		# region Private Menbers
		/// <summary>入金伝票入力設定データ系アクセスクラス</summary>
		private DepositRelDataAcs depositRelDataAcs;

		/// <summary>入金伝票入力画面(入金型)アクセスクラス</summary>
		private InputDepositNormalTypeAcs inputDepositNormalTypeAcs;

        /// <summary>拠点アクセスクラス</summary>
        private SecInfoAcs _secInfoAcs;        // 2007.10.10 add

		///// <summary>クレジット会社テーブルアクセスクラス</summary>
		//private CreditCmpAcs creditCmpAcs;   // 2007.10.10 del(SFMIT09182A.DLL)

        private UserGuideAcs _userGuideAcs;    // 2007.10.10 add
        
		/// <summary>入金引当表示クラス</summary>
		private SFUKK01415UA sfukk01415UA;

        // ↓ 20070519 18322 d 今のところ使用しないので削除
		///// <summary>領収書発行クラス</summary>
		//private SFUKK01502UA sfukk01502UA;
        // ↑ 20070519 18322 d

		/// <summary>得意先情報クラス</summary>
   		private CustomerInfoAcs _customerInfoAcs;

		/// <summary>入金グリッド選択行(入金情報更新前内容新規用)</summary>
		private DataRow beforeSelectedDepositRow;

		/// <summary>入金グリッド選択行(引当情報更新前内容新規用)</summary>
		private ArrayList beforeSelectedAllowanceRows;

		/// <summary>入金グリッド選択行(入金情報更新内容)</summary>
		private DataRow selectedDepositCopyRow;

		/// <summary>入金グリッド選択行(引当情報更新内容)</summary>
		private ArrayList selectedAllowanceCopyRows;

		/// <summary>受注引当グリッド選択行</summary>
		private DataRow selectedDmdSalesRow;

		/// <summary>前回引当データ展開入金番号</summary>
		private int expandAllowanceDepositSlipNo;

		/// <summary>請求情報取得スレッド</summary>
		private Thread custDmdPrcThread;

		///// <summary>クレジット会社名称取得スレッド</summary>
		//private Thread creditCompanyNamePrcThread;   // 2007.10.10 del 

        ///// <summary>銀行名称取得スレッド</summary>
        //private Thread bankNamePrcThread;              // 2007.10.10 add

		/// <summary>グリッド設定制御クラス</summary>
		private GridStateController _gridStateController;

		/// <summary>選択拠点</summary>
		private string _selectSectionCode;

        /// <summary>ログイン拠点</summary>
        private string _loginSectionCode;

        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>入金伝票入力欄表示中フラグ</summary>
		private bool setDisplayDepositFlg;
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        
        /// <summary>企業コード</summary>
		private string enterpriseCode;

		/// <summary>ログイン担当者</summary>
		private Employee employee;

        /// <summary>請求コード</summary>
        private int _claimCode;

		/// <summary>起動中フラグ</summary>
		private bool formShowFlg;

		/// <summary>画面状態保持クラス</summary>
		private SFUKK01403UA_DisplayInfo _displayStatus;

		/// <summary>新規ボタン プロパティ用</summary>
		private bool _buttonNew;

		/// <summary>保存ボタン プロパティ用</summary>
		private bool _buttonSave;
		
		/// <summary>削除ボタン プロパティ用</summary>
		private bool _buttonDelete;
		
		/// <summary>赤伝ボタン プロパティ用</summary>
		private bool _buttonAka;

		/// <summary>領収書発行ボタン プロパティ用</summary>
		private bool _buttonReceiptPrint;

        private bool _btnRenewal;
        // ----- ADD 王君 2012/12/24 Redmine#33741 ----->>>>>
        /// <summary>入金伝票呼出ボタン プロパティ用</summary>
        private bool _buttonReadSlip;
        // ----- ADD 王君 2012/12/24 Redmine#33741 -----<<<<<
        // ↓ 20070131 18322 a MA.NS用に変更
        /// <summary>画面デザイン変更クラス</summary>
        private ControlScreenSkin _controlScreenSkin = new ControlScreenSkin();
        // ↑ 20070131 18322 a

        // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>得意先コード(前回値)</summary>
        private int _prevCustomerCode = 0;

        ///// <summary>銀行コード(前回値)</summary>
        //private int _prevBankCode = 0;

        /// <summary>得意先ガイド選択フラグ</summary>
        private bool _cusotmerGuideSelected;

        /// <summary>検索フラグ</summary>
        private bool _searchFlg;

        /// <summary>請求金額情報</summary>
        private DepositCustDmdPrc _depositCustDmdPrc;

        private int _prevDoubleClickRowIndex;

        private int _customerCode;

        // 消費税転嫁方式(0:伝票単位 1:明細単位 2:請求親 3:請求子 9:非課税)
        private int _consTaxLayMethod;

        private IOperationAuthority _operationAuthority;    // 操作権限の制御オブジェクト
        // --- ADD m.suzuki 2010/07/01 ---------->>>>>
        private IOperationAuthority _operationAuthorityForNoDepSalList;    // 操作権限の制御オブジェクト
        // --- ADD m.suzuki 2010/07/01 ----------<<<<<

        private List<int> _selectedSalesSlipNumAlwList = new List<int>();
        // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

        private DateTime _prevDepositDate;

        private DateTime _edtDepositDateSave; // 入金　//　ADD 王君　2012/12/24 Redmine#33741

        private DateTime _preEdtDepositDate = DateTime.MinValue; // ADD 2009/12/25
        //ADD START 2010/05/06 gejun for M1007A-手形データ追加
        private RcvDraftDataAcs _rcvDraftDataAcs;
        private RcvDraftData _rcvDraftData = null;
        private RcvDraftData _rcvDraftDataDel = null;
        // マウス移動フラグ
        private bool _notMouseMoveFlg;
        // 重複チェック避けフラグ
        private bool _doubleCheckFlg;
        // 手形管理オプション成立フラグ
        private bool _draftOptSet;
        //ADD END 2010/05/06 gejun for M1007A-手形データ追加
        // --- ADD 2009/12/16 ---------->>>>>
        // 検索ボタン[入金一覧]
        private bool _grdDepositSearchFlag = false;
        // 検索ボタン[売上引当]
        private bool _grdDmdSalesSearchFlag = false;
        // --- ADD 2009/12/16 ----------<<<<<

        // ADD 2009/03/31 不具合対応[12908],[13098]：スペースキーでの項目選択機能を実装 ---------->>>>>
        /// <summary>入金一覧：引当済表示ラジオボタンのKeyPressイベントのヘルパ</summary>
        private readonly OptionSetKeyPressEventHelper _alwcDepositCallRadioKeyPressHelper = new OptionSetKeyPressEventHelper();
        /// <summary>
        /// 入金一覧：引当済表示ラジオボタンのKeyPressイベントのヘルパを取得します。
        /// </summary>
        /// <value>入金一覧：引当済表示ラジオボタンのKeyPressイベントのヘルパ</value>
        public OptionSetKeyPressEventHelper AlwcDepositCallRadioKeyPressHelper
        {
            get { return _alwcDepositCallRadioKeyPressHelper; }
        }

        /// <summary>売上引当：引当済表示ラジオボタンのKeyPressイベントのヘルパ</summary>
        private readonly OptionSetKeyPressEventHelper _alwcDmdSalesCallRadioKeyPressHelper = new OptionSetKeyPressEventHelper();
        /// <summary>
        /// 売上引当：引当済表示ラジオボタンのKeyPressイベントのヘルパを取得します。
        /// </summary>
        /// <value>売上引当：引当済表示ラジオボタンのKeyPressイベントのヘルパ</value>
        public OptionSetKeyPressEventHelper AlwcDmdSalesCallRadioKeyPressHelper
        {
            get { return _alwcDmdSalesCallRadioKeyPressHelper; }
        }
        // ADD 2009/03/31 不具合対応[12908],[13098]：スペースキーでの項目選択機能を実装 ----------<<<<<

        // --- ADD 2010/06/17 ---------->>>>>
        // 初回登録
        private bool _FirstStartFlag = true;
        // --- ADD 2010/06/17 ----------<<<<<

        // --- ADD K2013/03/22 張曼 Redmine#35063 ---------->>>>>
        /// <summary> 山形部品オプションフラグ</summary>
        private int _opt_YamagataCtrl;
        // --- ADD K2013/03/22 張曼 Redmine#35063 ----------<<<<<
        # endregion

		# region Public Property
		/// <summary>新規ボタン プロパティ</summary>
		public bool NewButton
		{
			get{return _buttonNew;}
		}

		/// <summary>保存ボタン プロパティ</summary>
		public bool SaveButton
		{
			get{return _buttonSave;}
		}
		
		/// <summary>削除ボタン プロパティ</summary>
		public bool DeleteButton
		{
			get{return _buttonDelete;}
		}
		
		/// <summary>赤伝ボタン プロパティ</summary>
		public bool AkaButton
		{
			get{return _buttonAka;}
		}

		/// <summary>領収書発行ボタン プロパティ</summary>
		public bool ReceiptPrintButton
		{
			get { return _buttonReceiptPrint; }

		}

        // ----- ADD 王君 2012/12/24 Redmine#33741 ------------->>>>>
        /// <summary>入金伝票呼出ボタン プロパティ</summary>
        public bool ReadSlipButton
        {
            get { return _buttonReadSlip; }

        }
        // ----- ADD 王君 2012/12/24 Redmine#33741 -------------<<<<<
		# endregion

        /// <summary>
        /// オペレーションコード
        /// </summary>
        internal enum OperationCode : int
        {
            /// <summary>修正</summary>
            Revision = 10,
            /// <summary>削除</summary>
            Delete = 11,
            /// <summary>赤伝</summary>
            RedSlip = 12,
        }

        // 操作権限の制御オブジェクトの保有
        /// <summary>
        /// 操作権限の制御オブジェクトを取得します。
        /// </summary>
        /// <value>操作権限の制御オブジェクト</value>
        private IOperationAuthority MyOpeCtrl
        {
            get
            {
                if (_operationAuthority == null)
                {
                    _operationAuthority = OpeAuthCtrlFacade.CreateEntryOperationAuthority("SFUKK01400U", this);
                }
                return _operationAuthority;
            }
        }
        // --- ADD m.suzuki 2010/07/01 ---------->>>>>
        /// <summary>
        /// 操作権限の制御オブジェクト（未入金一覧表）
        /// </summary>
        private IOperationAuthority MyOpeCtrlForNoDepSalList
        {
            get
            {
                if ( _operationAuthorityForNoDepSalList == null )
                {
                    _operationAuthorityForNoDepSalList = new OperationAuthorityImpl( Broadleaf.Application.Controller.Util.EntityUtil.CategoryCode.Report, "PMKAU02000U", this );
                }
                return _operationAuthorityForNoDepSalList;
            }
        }
        // --- ADD m.suzuki 2010/07/01 ----------<<<<<

		# region public Methods
		/// <summary>
		/// 起動前処理
		/// </summary>
		/// <param name="parameter">起動モードパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : ＭＤＩ子画面が起動する時に親から呼ばれます。</br>
		/// <br>    　　　    (IDepositInputMDIChildインターフェースの実装)</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		public void Show(object parameter)
		{
			// 起動中フラグ
			this.formShowFlg = false;

			this.Show();

			// 起動時フォーカス設定処理
			StartUpFocus dlg = new StartUpFocus(StartUpFocusProc);
			this.Invoke(dlg);
		}

		/// <summary>
		/// 表示通知処理
		/// </summary>
		/// <param name="mode">起動モード 0:得意先コード指定, 1:受注番号指定</param>
		/// <param name="parameter">パラメータオブジェクト</param>
		/// <returns>ConstantManagement.DB_Status</returns>
		/// <remarks>
		/// <br>Note        : ＭＤＩ親画面から表示指示を行った場合に発生するイベント</br>
		/// <br>    　　　    (IDepositInputMDIChildインターフェースの実装)</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
        /// <br>Update Note : 2012/12/24 王君</br>
        /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
        /// <br>              Redmine#33741の対応</br>
		/// </remarks>
		public int ShowData(int mode, object[] parameter)
		{
			int st = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

			// 対応モード以外は処理を抜ける
			if ((mode != 0) && (mode != 1))
			{
				return st;
			}

			// 入金内容の変更状況チェック処理
            // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
            //if (this.CheckUpdateData(true) != 0)
            //{
            //    return st;
            //}
            if (this.CheckUpdateData(true, true) != 0)
            {
                return st;
            }
            // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<

			// 入金一覧タブを表示する
			tabList.Tabs["DepositTab"].Selected = true;

			int paraCustomerCode;								// 得意先コード
			int paraAcceptAnOrderNo;							// 受注番号

            // ↓ 20070125 18322 a
            // 売上伝票番号
            string paraSalesSlipNum = "";
            // ↑ 20070125 18322 a
			string message = "";

            // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
            paraCustomerCode = (int)parameter[0];				// 得意先コード

            //--------------------------------------------------------------------
            // 得意先コードから得意先マスタを取得し、請求先コードと比較
            // 得意先コードと請求先コードに差異がある場合は請求先コードで再検索
            //--------------------------------------------------------------------
            CustomerInfo customerInfo;
            int status = GetCustomerInfo(out customerInfo, paraCustomerCode);
            if (status == 0)
            {
                // ----- ADD 王君2012/12/24 Redmine#33741 ------->>>>>
                if (customerInfo.IsCustomer != true)
                {
                    TMsgDisp.Show(
                        this,
                        emErrorLevel.ERR_LEVEL_INFO,
                        this.Name,
                        "納入先は入力できません。",
                        -1,
                        MessageBoxButtons.OK);
                    this.tNedit_CustomerCode.Clear();
                    this.edtCustomerName.Text = "";
                    this.tNedit_CustomerCode.Focus();
                    return st;
                }
                // ADD 王君　2012/12/24 Redmine#33741 --------<<<<<
                // 得意先コード設定
                this.tNedit_CustomerCode.SetInt(customerInfo.CustomerCode);

                // 得意先略称取得
                this.edtCustomerName.DataText = customerInfo.CustomerSnm.Trim();

                // 請求先コードチェック
                bool bStatus = CheckClaimCode(customerInfo);
                if (!bStatus)
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                      this.Name,
                                      "請求先に変更しました。",
                                      0,
                                      MessageBoxButtons.OK);

                    // 得意先コード
                    this._customerCode = customerInfo.CustomerCode;

                    status = ChangeCustomerCode(customerInfo.ClaimCode);
                    // ----- ADD 王君 2012/12/24 Redmine#33741 ----->>>>>
                    if (status == -1)
                    {
                        //-----------------------------------------------------------------------------
                        // 納入先入力
                        //-----------------------------------------------------------------------------
                        TMsgDisp.Show(
                            this,
                            emErrorLevel.ERR_LEVEL_INFO,
                            this.Name,
                            "納入先は入力できません。",
                            -1,
                            MessageBoxButtons.OK);
                        this.tNedit_CustomerCode.Clear();
                        this.edtCustomerName.Text = "";
                        this.tNedit_CustomerCode.Focus();
                        return st;
                    }
                    // ----- ADD 王君 2012/12/24 Redmine#33741 -----<<<<<
                }
                else
                {
                    // 計上拠点取得
                    this._selectSectionCode = customerInfo.ClaimSectionCode.Trim();

                    // 消費税転嫁方式
                    this._consTaxLayMethod = customerInfo.ConsTaxLayMethod;

                    // 得意先コード
                    this._customerCode = customerInfo.CustomerCode;

                    // 請求先コード
                    this._claimCode = customerInfo.ClaimCode;

                    // 入金消込区分で判断
                    if (customerInfo.DepoDelCode == 0)
                    {
                        // 売上引当不可
                        this.tabList.Tabs[1].Enabled = false;
                    }
                    else
                    {
                        // 売上引当可
                        this.tabList.Tabs[1].Enabled = true;
                    }
                }

                this._prevCustomerCode = this._claimCode;
            }
            // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

			try
			{
				this.Cursor = Cursors.WaitCursor;

				// データ検索前の画面設定処理
				this.SearchBeforeDisplySetting(SearchMode.LuncherSearch);

				switch (mode)
				{
					case 0 :		// --- 得意先コード指定 --- //
						
						// パラメータ取得
                        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
						paraCustomerCode = (int)parameter[0];				// 得意先コード
                           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/

                        tNedit_CustomerCode.Text = "";
						edtSearchDepositSlipNo.Text = "";

						// 検索処理(得意先コード指定)
                        // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
                        //st = this.SearchCustomerMode(SearchMode.LuncherSearch, paraCustomerCode, 0, out message);
                        st = this.SearchCustomerMode(SearchMode.LuncherSearch, this._claimCode, 0, out message);
                        // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<
					
						break;

					case 1 :		// --- 伝票番号指定 --- //
						
						// パラメータ取得
                        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
						paraCustomerCode	= (int)parameter[0];			// 得意先コード
                           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
                        
                        paraAcceptAnOrderNo	= (int)parameter[1];			// 受注番号
                        
                        // ↓ 20070125 18322 c MA.NS用に変更
						//// 検索処理(受注番号指定)
						//st = this.SearchAcceptAnOrderNoMode(SearchMode.LuncherSearch, paraCustomerCode, paraAcceptAnOrderNo, out message);

                        if (parameter.Length > 2) 
                        {
  			                // 売上伝票番号
                            paraSalesSlipNum = parameter[2].ToString();
                        }

						// 検索処理(受注・売上番号指定)
						st = this.SearchAcceptAnOrderNoMode( SearchMode.LuncherSearch
                            // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
                                                           //, paraCustomerCode
                                                           , this._claimCode
                            // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<
                                                           , paraAcceptAnOrderNo
                                                           , paraSalesSlipNum
                                                           , out message
                                                           );
                        // ↑ 20070125 18322 c

						// メッセージを流さないと、"NewDepositStandby"でのセットフォーカスが効かない
						System.Windows.Forms.Application.DoEvents();

						break;
				}

				// データ検索後の画面設定処理
                // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
                //this.SearchAfterDisplySetting(SearchMode.LuncherSearch, st);
                this.SearchAfterDisplySetting(st);
                // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<

				if (st == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
				{
					// 対象データ無し
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, message, 0, MessageBoxButtons.OK);
				}
				else if (st != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
				{
					// エラー発生
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "入金伝票の読込処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
				}
				else
				{
					// 新規入金伝票入力準備処理
                    this.NewDepositStandby();

                    for (int index = 0; index < this.grdDmdSalesList.Rows.Count; index++)
                    {
                        CellsCollection cells = this.grdDmdSalesList.Rows[index].Cells;

                        cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.Disabled;

                        // 赤伝の場合
                        if ((cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Value != DBNull.Value) &&
                            (Convert.ToInt32(cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Value) == 1))
                        {
                            this.grdDmdSalesList.Rows[index].Appearance.ForeColor = Color.Red;
                            this.grdDmdSalesList.Rows[index].Appearance.ForeColorDisabled = Color.Red;
                            continue;
                        }

                        // 返品の場合
                        if ((cells[InputDepositNormalTypeAcs.ctSalesKind].Value != DBNull.Value) &&
                            (Convert.ToString(cells[InputDepositNormalTypeAcs.ctSalesKind].Value) == "返品"))
                        {
                            this.grdDmdSalesList.Rows[index].Appearance.ForeColor = Color.Red;
                            this.grdDmdSalesList.Rows[index].Appearance.ForeColorDisabled = Color.Red;
                            continue;
                        }
                    }
				}

                for (int index = 0; index < grdDepositList.Rows.Count; index++)
                {
                    grdDepositList.DisplayLayout.Rows[index].ExpansionIndicator = ShowExpansionIndicator.CheckOnDisplay;
                }
			}
			finally
			{
				this.Cursor = Cursors.Default;
			}

			return st;
		}

		/// <summary>
		/// タブ変更前通知処理
		/// </summary>
		/// <param name="parameter">パラメータオブジェクト</param>
		/// <returns>結果 0:OK, 1:NG</returns>
		/// <remarks>
		/// <br>Note       : タブ変更が行われる前に、変更を許可するかの判断を行います。
		///                  (IDepositInputMDIChildインターフェースの実装)</br>
		/// <br>Programer  : 97036 amami</br>
		/// <br>Date       : 2005.07.30</br>
		/// </remarks>
		public int BeforeTabChange(object parameter)
		{
			// 入金内容の変更状況チェック処理
            // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
            //if (this.CheckUpdateData(true) != 0)
            //{
            //    return 1;
            //}
            if (this.CheckUpdateData(true, true) != 0)
            {
                return 1;
            }
            // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<

            // ＸＭＬデータの保存処理
            this.SaveStateXmlData();
            
            return 0;
		}
		
		/// <summary>
		/// 拠点変更前通知処理
		/// </summary>
		/// <param return="int">0＝OK</param>
		/// <param return="int">0≠NG 拠点変更不可</param>
		/// <remarks>
		/// <br>Note       : 拠点変更時、変更を許可するかの判断を行います。
		///                  (IDepositInputMDIChildインターフェースの実装)</br>
		/// <br>Programer  : 97036 amami</br>
		/// <br>Date       : 2005.07.30</br>
		/// </remarks>
		public int BeforeSectionChange()
		{
			// 得意先が展開されていなければ検索は行わない
			if (tNedit_CustomerCode.GetInt() == 0) return 0;

			// 入金内容の変更状況チェック処理
            // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
            //if (this.CheckUpdateData(true) != 0)
            //{
            //    return -1;
            //}
            if (this.CheckUpdateData(true, true) != 0)
            {
                return -1;
            }
            // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<

			// オール検索前データチェック処理
            // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
            //Control control;
            //if (this.CheackDataBeforeAllSearch(out control) == false)
            //{
            //    if (control != null)
            //    {
            //        control.Focus();
            //    }
            //    return -1;
            //}
            if (this.CheackDataBeforeAllSearch() == false)
            {
                return -1;
            }
            // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<

			return 0;
		}

		/// <summary>
		/// 拠点変更後通知処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 拠点変更後の処理を行います。
		///                  (IDepositInputMDIChildインターフェースの実装)</br>
		/// <br>Programer  : 97036 amami</br>
		/// <br>Date       : 2005.07.30</br>
		/// </remarks>
		public void AfterSectionChange()
		{
			// 選択拠点を取得
			if (GetSelectSectionCodeEvent != null) _selectSectionCode = GetSelectSectionCodeEvent(this);

			// 得意先が展開されていなければ検索は行わない
			if (tNedit_CustomerCode.GetInt() == 0) return;

			// 入金一覧タブを表示する
			tabList.Tabs["DepositTab"].Selected = true;

			try
			{
				this.Cursor = Cursors.WaitCursor;

				// データ検索前の画面設定処理
				this.SearchBeforeDisplySetting(SearchMode.AllSearch);

				// 検索処理(得意先コード指定)
				string message;
				int st = this.SearchCustomerMode(SearchMode.AllSearch, tNedit_CustomerCode.GetInt(), 0, out message);

				// データ検索後の画面設定処理
                // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
                //this.SearchAfterDisplySetting(SearchMode.AllSearch, st);
                this.SearchAfterDisplySetting(st);
                // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<

				if (st == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
				{
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, message, 0, MessageBoxButtons.OK);
					tNedit_CustomerCode.Focus();
				}
				else if (st != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
				{
					// エラー発生
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "入金伝票の読込処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
				}
				else
				{
					// 新規入金伝票入力準備処理
					this.NewDepositStandby();

                    for (int index = 0; index < this.grdDmdSalesList.Rows.Count; index++)
                    {
                        this.grdDmdSalesList.Rows[index].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.Disabled;
                    }
				}
			}			
			finally
			{
				this.Cursor = Cursors.Default;
			}
		}
		
		/// <summary>
		/// 終了前通知処理
		/// </summary>
		/// <param name="parameter">パラメータオブジェクト</param>
		/// <returns>結果 0:OK, 1:NG</returns>
		/// <remarks>
		/// <br>Note       : 終了する前に、変更を許可するかの判断を行います。
		///                  (IDepositInputMDIChildインターフェースの実装)</br>
		/// <br>Programer  : 97036 amami</br>
		/// <br>Date       : 2005.07.30</br>
        /// <br>Update Note: 2012/12/24 王君</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
		/// </remarks>
		public int BeforeClose(object parameter)
		{
			// 入金内容の変更状況チェック処理
            // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
            //if (this.CheckUpdateData(true) != 0)
            //{
            //    return 1;
            //}
            // ----- ADD 王君 2012/12/24 Redmine#33741 ----->>>>>
            int rowindexKind = -1;
            int rowindexList = -1;
            GetGuidRowNo(out rowindexList, out rowindexKind);
            Control control = new Control();
            bool flag = false;
            if (rowindexKind >= 0 || rowindexList >= 0 || this.edtFeeDeposit.Focused || this.edtDiscountDeposit.Focused)
            {
                if (this.edtFeeDeposit.Focused)
                {
                    control = this.edtFeeDeposit;
                    flag = true;
                }
                if (this.edtDiscountDeposit.Focused)
                {
                    control = this.edtDiscountDeposit;
                    flag = true;
                }
                this.tNedit_CustomerCode.Focus();
            }
            this._saveStatus = 0;
            // ----- ADD 王君 2012/12/24 Redmine#33741 -----<<<<<
            if (this.CheckUpdateData(true, true) != 0)
            {
                // ----- ADD 王君 2012/12/24 Redmine#33741 ----->>>>>
                if (rowindexKind >= 0)
                {
                    this.grdDepositKind.Rows[rowindexKind].Cells[DepositRelDataAcs.ctDeposit].Activate();
                }
                else if (rowindexList >= 0)
                {
                    this.grdDepositList.Rows[rowindexList].Activate();
                }
                else if (flag)
                {
                    control.Focus();
                }
                // ----- ADD 王君 2012/12/24 Redmine#33741 -----<<<<<
                return 1;
            }
            // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<

            // ＸＭＬデータの保存処理
            this.SaveStateXmlData();
            
            return 0;
		}

		/// <summary>
		/// 新規処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 新規入力処理を行います。
		///                  (IDepositInputMDIChildインターフェースの実装)</br>
		/// <br>Programer  : 97036 amami</br>
		/// <br>Date       : 2005.07.30</br>
		/// </remarks>
		public void NewDepositProc()
		{
			// 新規入金伝票入力処理
			this.NewDeposit();
		}

		/// <summary>
		/// 保存処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 保存処理を行います。
		///                  (IDepositInputMDIChildインターフェースの実装)</br>
		/// <br>Programer  : 97036 amami</br>
		/// <br>Date       : 2005.07.30</br>
		/// </remarks>
		public void SaveDepositProc()
		{
			// 入金伝票保存処理
			this.SaveDeposit(true);
		}

		/// <summary>
		/// 削除処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 削除処理を行います。
		///                  (IDepositInputMDIChildインターフェースの実装)</br>
		/// <br>Programer  : 97036 amami</br>
		/// <br>Date       : 2005.07.30</br>
		/// </remarks>
		public void DeleteDepositProc()
		{
			// 入金伝票削除処理
			this.DeleteDeposit();
		}

		/// <summary>
		/// 赤伝処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 赤伝入力処理を行います。
		///                  (IDepositInputMDIChildインターフェースの実装)</br>
		/// <br>Programer  : 97036 amami</br>
		/// <br>Date       : 2005.07.30</br>
		/// </remarks>
		public void AkaDepositProc()
		{
			// 入金伝票赤伝処理
			this.AkaDeposit();
		}

		/// <summary>
		/// 領収書発行処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 領収書発行処理を行います。
		///                  (IDepositInputMDIChildインターフェースの実装)</br>
		/// <br>Programer  : 97036 amami</br>
		/// <br>Date       : 2005.07.30</br>
		/// </remarks>
		public void ReceiptPrintProc()
		{
			// 領収書発行処理
			this.ReceiptPrint();
		}
		# endregion

		# region Private Methods

        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
        /// <summary>
        /// オプション情報キャッシュ
        /// </summary>
        /// <remarks>
        /// <br>Note       : オプション情報制御処理。</br>
        /// <br>Programmer : 張曼</br>
        /// <br>Date       : K2013/03/22</br>
        /// </remarks>
        private void CacheOptionInfo()
        {
            Broadleaf.Application.Remoting.ParamData.PurchaseStatus ps;

            #region ●山形部品オプション
            ps = LoginInfoAcquisition.SoftwarePurchasedCheckForUSB(ConstantManagement_SF_PRO.SoftwareCode_OPT_CMN_YamagataCustomControl);
            if (ps == Broadleaf.Application.Remoting.ParamData.PurchaseStatus.Contract)
            {
                this._opt_YamagataCtrl = (int)Option.ON;
            }
            else
            {
                this._opt_YamagataCtrl = (int)Option.OFF;
            }
            #endregion
        }
        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

		/// <summary>
		/// 起動時フォーカス設定処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 起動時にフォーカス設定を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void StartUpFocusProc()
		{
			// 得意先コードにフォーカスセット
			tNedit_CustomerCode.Focus();
		}

        /// <summary>
        /// 画面初期設定処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 画面の初期設定を行います。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// <br>Update Note: 2012/09/21 田建委</br>
        /// <br>管理番号   : 2012/10/17配信分</br>
        /// <br>             Redmine#32415 発行者の追加対応</br>
        /// </remarks>
        private void ScreenInitialSetting()
        {
            ImageList imageList24 = IconResourceManagement.ImageList24;
            ImageList imageList16 = IconResourceManagement.ImageList16;

            // 得意先ガイドボタン
            btnCustomerGuid.ImageList = imageList16;
            btnCustomerGuid.Appearance.Image = Size16_Index.STAR1;
            // 入金伝票検索ボタン
            btnSearchDeposit.ImageList = imageList16;
            btnSearchDeposit.Appearance.Image = Size16_Index.SEARCH;
            // 受注伝票検索ボタン
            btnSearchDmdSales.ImageList = imageList16;
            btnSearchDmdSales.Appearance.Image = Size16_Index.SEARCH;
            //// 銀行ガイド
            //btnBankGuid.ImageList = imageList16;
            //btnBankGuid.Appearance.Image = Size16_Index.STAR1;
            // 一括引当ボタン
            btnAllAwl.ImageList = imageList16;
            btnAllAwl.Appearance.Image = Size16_Index.PACKAGEINPUT;
            // --- ADD m.suzuki 2010/07/01 ---------->>>>>
            // 未入金一覧表ボタン
            if ( CheckNoDepSalListEnabled() )
            {
                btnNoDepSalList.Visible = true;
                btnNoDepSalList.ImageList = imageList16;
                btnNoDepSalList.Appearance.Image = Size16_Index.PRINT;
            }
            else
            {
                btnNoDepSalList.Visible = false;
            }
            // --- ADD m.suzuki 2010/07/01 ----------<<<<<

            stbDmdSalesList.Panels["SeparateCost"].Visible = false;		// 受注一覧 諸費用別引当 非表示
            stbDmdSalesList.Panels["line3"].Visible = false;			// 受注一覧 諸費用別引当 非表示
            edtFeeDeposit.ReadOnly = false;								// 入金伝票入力欄 共通 手数料 入力可
            edtDiscountDeposit.ReadOnly = false;						// 入金伝票入力欄 共通 値引 入力可

            // 引当無しモードの時
            if (depositRelDataAcs.AllowanceProc == 2)
            {
                // 引当済み表示有無を非表示にする
                ultraLabel1.Visible = false;
                opsAlwcDepositCall.Visible = false;

                // 受注引当一覧タブを非表示にする
                tabList.Tabs["DmdSalesTab"].Visible = false;
                stbDepositList.Panels["allowance"].Visible = false;
                stbDepositList.Panels["line3"].Visible = false;

                // 入金日の表示位置をずらす
                // 2009/07/21 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //ultraLabel3.Location = new Point(ultraLabel3.Location.X, ultraLabel3.Location.Y + 10);
                //detDepositDateStart.Location = new Point(detDepositDateStart.Location.X, detDepositDateStart.Location.Y + 10);
                //ultraLabel2.Location = new Point(ultraLabel2.Location.X, ultraLabel2.Location.Y + 10);
                //detDepositDateEnd.Location = new Point(detDepositDateEnd.Location.X, detDepositDateEnd.Location.Y + 10);

                //加算すると最新情報取得にて位置がズレるため、固定値に変更
                ultraLabel3.Location = new Point(ultraLabel3.Location.X, 13);
                detDepositDateStart.Location = new Point(detDepositDateStart.Location.X, 13);
                ultraLabel2.Location = new Point(ultraLabel2.Location.X, 13);
                detDepositDateEnd.Location = new Point(detDepositDateEnd.Location.X, 13);
                // 2009/07/21 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            }
            // 2009/07/21 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            else
            {
                // 引当済み表示有無を非表示にする
                ultraLabel1.Visible = true;
                opsAlwcDepositCall.Visible = true;

                // 受注引当一覧タブを非表示にする
                tabList.Tabs["DmdSalesTab"].Visible = true;
                stbDepositList.Panels["allowance"].Visible = true;
                stbDepositList.Panels["line3"].Visible = true;

                // 入金日の表示位置をずらす
                ultraLabel3.Location = new Point(ultraLabel3.Location.X, 3);
                detDepositDateStart.Location = new Point(detDepositDateStart.Location.X, 3);
                ultraLabel2.Location = new Point(ultraLabel2.Location.X, 3);
                detDepositDateEnd.Location = new Point(detDepositDateEnd.Location.X, 3);

            }
            // 2009/07/21 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // 伝票日付制御
            this.DepoSlipDateClrDiv_tComboEditor.Items.Clear();
            this.DepoSlipDateClrDiv_tComboEditor.Items.Add(0, "システム日付に戻す");
            this.DepoSlipDateClrDiv_tComboEditor.Items.Add(1, "入力日付のまま");

            // 伝票日付制御初期値設定
            this.DepoSlipDateClrDiv_tComboEditor.Value = depositRelDataAcs.DepoSlipDateClrDiv;

            // 入金検索条件設定処理
            this.DepositSearchSetting();

            // 受注引当検索条件設定処理
            this.DmdSalesSearchSetting();

            //----- ADD 2012/09/21 田建委 redmine#32415 ---------->>>>>
            uButton_SalesInputCode.ImageList = imageList16;
            uButton_SalesInputCode.Appearance.Image = Size16_Index.STAR1;

            // 発行者初期化
            this.tEdit_EmployeeCode.Text = this.employee.EmployeeCode.Trim();
            this.tEdit_SalesInputName.Text = this.employee.Name.Trim();
            //----- ADD 2012/09/21 田建委 redmine#32415 ----------<<<<<
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 画面初期設定処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 画面の初期設定を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void ScreenInitialSetting()
		{
			ImageList imageList24 = IconResourceManagement.ImageList24;
			ImageList imageList16 = IconResourceManagement.ImageList16;

			// メイン検索ボタン
			// btnSearch.ImageList = imageList16;                   // 2007.10.10 del
            // btnSearch.Appearance.Image = Size16_Index.SEARCH;    // 2007.10.10 del

			// 得意先ガイドボタン
			btnCustomerGuid.ImageList = imageList16;
			btnCustomerGuid.Appearance.Image = Size16_Index.STAR1;

			// 入金伝票検索ボタン
			btnSearchDeposit.ImageList = imageList16;
			btnSearchDeposit.Appearance.Image = Size16_Index.SEARCH;

			// 受注伝票検索ボタン
			btnSearchDmdSales.ImageList = imageList16;
			btnSearchDmdSales.Appearance.Image = Size16_Index.SEARCH;

            // 2007.10.10 del start --------------------------------->>
            //// クレジット会社ガイドボタン
            //btnCreditCompanyGuid.ImageList = imageList16;
            //btnCreditCompanyGuid.Appearance.Image = Size16_Index.STAR1;
            // 2007.10.10 del end -----------------------------------<<

            // 2007.10.10 add start --------------------------------->>
            // 銀行ガイド
            btnBankGuid.ImageList = imageList16;
            btnBankGuid.Appearance.Image = Size16_Index.STAR1;
            // 2007.10.10 add end -----------------------------------<<

			// 一括引当ボタン
			btnAllAwl.ImageList = imageList16;
			btnAllAwl.Appearance.Image = Size16_Index.PACKAGEINPUT;

            // ↓ 20070126 18322 c MA.NS用に変更
            #region SF 諸費用別入金判定（全てコメントアウト）
            //// 諸費用別入金判定
			//if (depositRelDataAcs.OptSeparateCost == true)
			//{
			//	// 諸費用別入金 有り
			//	pnlSeparateCost.Visible = true;										// 諸費用別入金パネル 表示
			//	labInputViewChange.Visible = true;									// 表示切替画像 表示
			//	labInputViewChange.ImageList = imageList16;							// 表示切替画像 表示
			//	labInputViewChange.Appearance.Image = Size16_Index.INDICATIONCHANGE;// 表示切替画像 表示
			//	treMoneyKind.Size = new Size(treMoneyKind.Size.Width, 74);			// 金種リスト 縦短い
			//	stbDmdSalesList.Panels["SeparateCost"].Visible = true;				// 受注一覧 諸費用別引当 表示
			//	stbDmdSalesList.Panels["line3"].Visible = true;						// 受注一覧 諸費用別引当 表示
			//	labDeposit.Visible = true;											// 入金伝票入力欄 共通 合算タイトル 表示
			//	edtDeposit.ReadOnly = true;											// 入金伝票入力欄 共通 入金額 入力不可
			//	edtFeeDeposit.ReadOnly = true;										// 入金伝票入力欄 共通 手数料 入力不可
			//	edtDiscountDeposit.ReadOnly = true;									// 入金伝票入力欄 共通 値引 入力不可
			//}
			//else
			//{
			//	// 諸費用別入金 無し
			//	pnlSeparateCost.Visible = false;									// 諸費用別入金パネル 非表示
			//	labInputViewChange.Visible = false;									// 表示切替画像 非表示
			//	treMoneyKind.Size = new Size(treMoneyKind.Size.Width, 94);			// 金種リスト 縦長い
			//	stbDmdSalesList.Panels["SeparateCost"].Visible = false;				// 受注一覧 諸費用別引当 非表示
			//	stbDmdSalesList.Panels["line3"].Visible = false;					// 受注一覧 諸費用別引当 非表示
			//	labDeposit.Visible = false;											// 入金伝票入力欄 共通 合算タイトル 非表示
			//	edtDeposit.ReadOnly = false;										// 入金伝票入力欄 共通 入金額 入力可
			//	edtFeeDeposit.ReadOnly = false;										// 入金伝票入力欄 共通 手数料 入力可
			//	edtDiscountDeposit.ReadOnly = false;								// 入金伝票入力欄 共通 値引 入力可
            //}
            #endregion

			labInputViewChange.Visible = false;							// 表示切替画像 非表示
			treMoneyKind.Size = new Size(treMoneyKind.Size.Width, 80);	// 金種リスト 縦長い
            stbDmdSalesList.Panels["SeparateCost"].Visible = false;		// 受注一覧 諸費用別引当 非表示
			stbDmdSalesList.Panels["line3"].Visible = false;			// 受注一覧 諸費用別引当 非表示
			labDeposit.Visible = false;									// 入金伝票入力欄 共通 合算タイトル 非表示
			edtDeposit.ReadOnly = false;								// 入金伝票入力欄 共通 入金額 入力可
            edtFeeDeposit.ReadOnly = false;								// 入金伝票入力欄 共通 手数料 入力可
    		edtDiscountDeposit.ReadOnly = false;						// 入金伝票入力欄 共通 値引 入力可
    		// edtRebateDeposit.ReadOnly = false;						// 入金伝票入力欄 共通 インセンティブ 入力可  // 2007.10.10 hikita del
            // ↑ 20070126 18322 c
			
			// 引当無しモードの時
			if (depositRelDataAcs.AllowanceProc == 2)
			{
				// 引当済み表示有無を非表示にする
				ultraLabel1.Visible = false;
				tShape8.Visible = false;
                opsAlwcDepositCall.Visible = false;

				// 受注引当一覧タブを非表示にする
				tabList.Tabs["DmdSalesTab"].Visible = false;
				stbDepositList.Panels["allowance"].Visible = false;
				stbDepositList.Panels["line3"].Visible = false;

				// 入金日の表示位置をずらす
				ultraLabel3.Location			= new Point(ultraLabel3.Location.X, ultraLabel3.Location.Y + 10);
				detDepositDateStart.Location	= new Point(detDepositDateStart.Location.X, detDepositDateStart.Location.Y + 10);
				ultraLabel2.Location			= new Point(ultraLabel2.Location.X, ultraLabel2.Location.Y + 10);
				detDepositDateEnd.Location		= new Point(detDepositDateEnd.Location.X, detDepositDateEnd.Location.Y + 10);
			}

            // 2007.10.10 del start --------------------------------------->>
            //// クレジット会社欄リードオンリー
            //edtCreditCompanyCode.ReadOnly = true;
            //btnCreditCompanyGuid.Enabled = false;
            // 2007.10.10 del end -----------------------------------------<<

			// 金種リスト設定処理
			this.MoneyKindSetting();

            // 入金検索条件設定処理
			this.DepositSearchSetting();

			// 受注引当検索条件設定処理
			this.DmdSalesSearchSetting();
		}

		/// <summary>
		/// 金種リスト設定処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 金種リストの設定を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void MoneyKindSetting()
		{
			// 金種リストを設定
			for (int ix = 0; ix < depositRelDataAcs.SlMoneyKindCode.Count; ix++)
			{
				int key		= (int)depositRelDataAcs.SlMoneyKindCode.GetKey(ix);
				string val	= (string)depositRelDataAcs.SlMoneyKindCode.GetByIndex(ix);
				Infragistics.Win.UltraWinTree.UltraTreeNode nd = treMoneyKind.Nodes.Add(key.ToString(), val);
				nd.Tag		= (int)depositRelDataAcs.HtMoneyKindDiv[key];
                
            }
		}
		   --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// 入金検索条件設定処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 入金検索条件の設定を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void DepositSearchSetting()
		{
			// 入金日
			if (depositRelDataAcs.DepositCallMonths == 0)
			{
				detDepositDateStart.SetLongDate(0);
			}
			else
			{
                // システム日付から入金伝票呼出月数をマイナスした日を初期表示する。
				detDepositDateStart.SetLongDate(TDateTime.DateTimeToLongDate(TDateTime.GetSFDateNow().AddMonths(depositRelDataAcs.DepositCallMonths * -1)));
			}

			// 引当済入金伝票呼出区分
			opsAlwcDepositCall.Value = depositRelDataAcs.AlwcDepositCall;
		}
		
		/// <summary>
		/// 受注引当検索条件設定処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 受注引当検索条件の設定を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void DmdSalesSearchSetting()
		{
			// 伝票日付
			if (depositRelDataAcs.DepositCallMonths == 0)
			{
				detSearchSlipDateStart.SetLongDate(0);
			}
			else
			{
				detSearchSlipDateStart.SetLongDate(TDateTime.DateTimeToLongDate(TDateTime.GetSFDateNow().AddMonths(depositRelDataAcs.DepositCallMonths * -1)));
			}

			// 引当済入金伝票呼出区分
			opsAlwcDmdSalesCall.Value = depositRelDataAcs.AlwcDepositCall;

            // 2007.10.10 hikita del start -------------------------------->>
            //// 受注ステータス
            //cbxAcptAnOdrStartus1.Checked = true;
            //cbxAcptAnOdrStartus2.Checked = true;
            //cbxAcptAnOdrStartus3.Checked = true;
            // 2007.10.10 hikita del end ----------------------------------<<

            // ↓ 20070129 18322 d MA.NS用に変更
            #region SF システム導入チェック（SF・BK・CSとテーブルに互換性が無い為、全てコメントアウト）
			//// システムチェックボックスの表示位置
			//SortedList itemLocationList = new SortedList();
			//itemLocationList.Add(0, new Point(322, 58));
			//itemLocationList.Add(1, new Point(386, 58));
			//itemLocationList.Add(2, new Point(450, 58));
			//
            //// SFシステム導入チェック
			//cbxDataInputSystem1.Checked		= false;
			//cbxDataInputSystem1.Visible		= false;
			//if (depositRelDataAcs.IntroducedSystemSF == true)
			//{
			//	if (itemLocationList.GetByIndex(0) is Point)
			//	{
			//		cbxDataInputSystem1.Location	= (Point)itemLocationList.GetByIndex(0);
			//		cbxDataInputSystem1.Checked		= true;
			//		cbxDataInputSystem1.Visible		= true;
			//		itemLocationList.RemoveAt(0);
			//	}
			//}
			//
			//// BKシステム導入チェック
			//cbxDataInputSystem2.Checked		= false;
			//cbxDataInputSystem2.Visible		= false;
			//if (depositRelDataAcs.IntroducedSystemBK == true)
			//{
			//	if (itemLocationList.GetByIndex(0) is Point)
			//	{
			//		cbxDataInputSystem2.Location	= (Point)itemLocationList.GetByIndex(0);
			//		cbxDataInputSystem2.Checked		= true;
			//		cbxDataInputSystem2.Visible		= true;
			//		itemLocationList.RemoveAt(0);
			//	}
			//}
			//
			//// CSシステム導入チェック
			//cbxDataInputSystem3.Checked		= false;
			//cbxDataInputSystem3.Visible		= false;
			//if (depositRelDataAcs.IntroducedSystemCS == true)
			//{
			//	if (itemLocationList.GetByIndex(0) is Point)
			//	{
			//		cbxDataInputSystem3.Location	= (Point)itemLocationList.GetByIndex(0);
			//		cbxDataInputSystem3.Checked		= true;
			//		cbxDataInputSystem3.Visible		= true;
			//		itemLocationList.RemoveAt(0);
			//	}
			//}
			//
			//// 導入システム数により表示切替
			//switch (depositRelDataAcs.IntroducedSystemCount)
			//{
			//	case 0 :
			//	case 1 :
			//		cbxDataInputSystem1.Visible		= false;
			//		cbxDataInputSystem2.Visible		= false;
			//		cbxDataInputSystem3.Visible		= false;
            //        linSystem.Width = 0;
			//		break;
			//	case 2:
			//		linSystem.Width					= 126;
			//		break;
			//	case 3:
			//		linSystem.Width					= 196;
			//		break;
			//}
            #endregion
            // ↑ 20070129 18322 d 
		}

		/// <summary>
		/// ＸＭＬデータの読込処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 画面状態保持用のＸＭＬの読込処理を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void LoadStateXmlData()
		{
			try
			{
				// グリッド設定ロード
				if (this._gridStateController == null) this._gridStateController = new GridStateController();
				this._gridStateController.LoadGridState(ctGridInfoFileNm);

				// 画面状態保持クラスデシリアライズ
				this._displayStatus = null;
				if (UserSettingController.ExistUserSetting(ConstantManagement_ClientDirectory.UISettings_GridInfo + ctDisplayInfoFileNm))
				{
					this._displayStatus = UserSettingController.ByteDeserializeUserSetting<SFUKK01403UA_DisplayInfo>(ConstantManagement_ClientDirectory.UISettings_GridInfo + ctDisplayInfoFileNm);
				}
			}
			catch
			{
			}
		}
		
		/// <summary>
		/// ＸＭＬデータの保存処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 画面状態保持用のＸＭＬの保存処理を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void SaveStateXmlData()
		{
			try
			{
				// 入金グリッド表示列変更処理 引当を非表示にして表示されている列幅をデフォルトに戻す
				this.DetailViewSettingColumun(this.ckdDetailDepositList.Checked, false);
				tabList.Tabs["DepositTab"].Selected = true;
				System.Windows.Forms.Application.DoEvents();

				// グリッド設定制御クラスにグリッド情報を展開
				this._gridStateController.GetGridStateFromGrid(ref grdDepositList);
				this._gridStateController.GetGridStateFromGrid(ref grdDmdSalesList);

				// グリッド設定をファイルに保存
				this._gridStateController.SaveGridState(ctGridInfoFileNm);

				// 画面状態保持クラスへ画面状態セット処理
				this.SetDisplayStatus(ref this._displayStatus);

				// 画面状態保持クラスシリアライズ
				UserSettingController.ByteSerializeUserSetting(this._displayStatus, ConstantManagement_ClientDirectory.UISettings_GridInfo + ctDisplayInfoFileNm);
			}
			catch
			{
			}
		}

		/// <summary>
		/// 画面状態保持クラス画面展開処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 画面状態保持クラスの内容を展開します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void GetDisplayStatus(ref SFUKK01403UA_DisplayInfo displayStatus)
		{
			// 未インスタンス化の時（エラー時）新規扱いにする。
			if (displayStatus == null)
			{
				displayStatus = new SFUKK01403UA_DisplayInfo();

				// 入金一覧 詳細表示
				displayStatus.DetailDepositList = 0;

				// 入金一覧 引当内訳
				displayStatus.AllowanceDepositList = 0;

				// 受注一覧 詳細表示
				displayStatus.DetailDmdSalesList = 0;

                /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
				// 諸費用別入金オプション判定
				if (depositRelDataAcs.OptSeparateCost == true)
				{
					// 受注一覧 諸費用別引当
					displayStatus.SeparateCost = 1;
				}
				else
				{
					// 受注一覧 諸費用別引当
					displayStatus.SeparateCost = 0;
				}
                   --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
            }

			// 入金一覧 詳細表示
			ckdDetailDepositList.Tag = false;
			if (displayStatus.DetailDepositList == 0)
			{
				ckdDetailDepositList.Checked = false;
			}
			else
			{
				ckdDetailDepositList.Checked = true;
			}
			ckdDetailDepositList.Tag = true;

			// 入金一覧 引当内訳
			ckdAllowanceDepositList.Tag = false;
			if (displayStatus.AllowanceDepositList == 0)
			{
				ckdAllowanceDepositList.Checked = false;
			}
			else
			{
				ckdAllowanceDepositList.Checked = true;
			}
			ckdAllowanceDepositList.Tag = true;

			// 受注一覧 詳細表示
			ckdDetailDmdSalesList.Tag = false;
			if (displayStatus.DetailDmdSalesList == 0)
			{
				ckdDetailDmdSalesList.Checked = false;
			}
			else
			{
				ckdDetailDmdSalesList.Checked = true;
			}
			ckdDetailDmdSalesList.Tag = true;

			// 受注一覧 諸費用別引当
			ckdSeparateCost.Tag = false;
			if (displayStatus.SeparateCost == 0)
			{
				ckdSeparateCost.Checked = false;
			}
			else
			{
				ckdSeparateCost.Checked = true;
			}
			ckdSeparateCost.Tag = true;
		}

		/// <summary>
		/// 画面状態保持クラスへ画面状態セット処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 画面状態保持クラスへ画面状態をセットします。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void SetDisplayStatus(ref SFUKK01403UA_DisplayInfo displayStatus)
		{
			// 入金一覧 詳細表示
			if (ckdDetailDepositList.Checked == false)
			{
				displayStatus.DetailDepositList = 0;
			}
			else
			{
				displayStatus.DetailDepositList = 1;
			}

			// 入金一覧 引当内訳
			if (ckdAllowanceDepositList.Checked == false)
			{
				displayStatus.AllowanceDepositList = 0;
			}
			else
			{
				displayStatus.AllowanceDepositList = 1;
			}

			// 受注一覧 詳細表示
			if (ckdDetailDmdSalesList.Checked == false)
			{
				displayStatus.DetailDmdSalesList = 0;
			}
			else
			{
				displayStatus.DetailDmdSalesList = 1;
			}

			// 受注一覧 諸費用別引当
			if (ckdSeparateCost.Checked == false)
			{
				displayStatus.SeparateCost = 0;
			}
			else
			{
				displayStatus.SeparateCost = 1;
			}
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 入金グリッド初期設定処理処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 入金グリッドの初期設定を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void InitializeDepositList()
		{
			// 列幅をオートに設定
			//grdDepositList.DisplayLayout.AutoFitColumns = true;

			// 行選択設定 行選択無しモード(アクティブのみ)
			grdDepositList.DisplayLayout.Override.SelectTypeRow = SelectType.None;
			grdDepositList.DisplayLayout.Override.SelectTypeCell = SelectType.None;
			grdDepositList.DisplayLayout.Override.SelectTypeCol = SelectType.None;

            // ↓ 20070131 18322 d MA.NS用に変更
			//// グリッド全体の外観設定
			//grdDepositList.DisplayLayout.Appearance.BackColor = Color.White;
			//grdDepositList.DisplayLayout.Appearance.BackColor2 = Color.FromArgb(198, 219, 255);
			//grdDepositList.DisplayLayout.Appearance.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            // ↑ 20070131 18322 d

			// 行選択モードの設定
			grdDepositList.DisplayLayout.Override.CellClickAction =CellClickAction.RowSelect;

			// 行の外観設定
			grdDepositList.DisplayLayout.Override.RowAppearance.BackColor = Color.White;

			// 1行おきの外観設定
			grdDepositList.DisplayLayout.Override.RowAlternateAppearance.BackColor = Color.Lavender;

			// 選択行の外観設定
			grdDepositList.DisplayLayout.Override.SelectedRowAppearance.BackColor = Color.FromArgb(251, 230, 148);
			grdDepositList.DisplayLayout.Override.SelectedRowAppearance.BackColor2 = Color.FromArgb(238, 149, 21);
			grdDepositList.DisplayLayout.Override.SelectedRowAppearance.BackGradientStyle = GradientStyle.Vertical;

			// アクティブ行の外観設定
			grdDepositList.DisplayLayout.Override.ActiveRowAppearance.BackColor = Color.FromArgb(251, 230, 148);
			grdDepositList.DisplayLayout.Override.ActiveRowAppearance.BackColor2 = Color.FromArgb(238, 149, 21);
			grdDepositList.DisplayLayout.Override.ActiveRowAppearance.BackGradientStyle = GradientStyle.Vertical;

			// ヘッダーの外観設定
			grdDepositList.DisplayLayout.Override.HeaderAppearance.BackColor = Color.FromArgb(89, 135, 214);
			grdDepositList.DisplayLayout.Override.HeaderAppearance.BackColor2 = Color.FromArgb(7, 59, 150);
			grdDepositList.DisplayLayout.Override.HeaderAppearance.BackGradientStyle = GradientStyle.Vertical;
			grdDepositList.DisplayLayout.Override.HeaderAppearance.ForeColor = Color.White;
			grdDepositList.DisplayLayout.Override.HeaderAppearance.TextHAlign = HAlign.Left;
			grdDepositList.DisplayLayout.Override.HeaderAppearance.ThemedElementAlpha = Alpha.Transparent;
			grdDepositList.DisplayLayout.Override.HeaderAppearance.TextHAlign = HAlign.Center;
			grdDepositList.DisplayLayout.Override.HeaderAppearance.TextVAlign = VAlign.Middle;

			// 行セレクターの外観設定
			grdDepositList.DisplayLayout.Override.RowSelectorAppearance.BackColor = Color.FromArgb(89, 135, 214);
			grdDepositList.DisplayLayout.Override.RowSelectorAppearance.BackColor2 = Color.FromArgb(7, 59, 150);
			grdDepositList.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle = GradientStyle.Vertical;

			// 行フィルターの設定
//			grdDepositList.DisplayLayout.Override.AllowRowFiltering = Infragistics.Win.DefaultableBoolean.True;
			grdDepositList.DisplayLayout.Override.RowFilterAction = RowFilterAction.HideFilteredOutRows;
//			grdDepositList.DisplayLayout.Override.RowFilterMode = Infragistics.Win.UltraWinGrid.RowFilterMode.AllRowsInBand;

			// 垂直方向のスクロールスタイル
			grdDepositList.DisplayLayout.ScrollStyle = ScrollStyle.Immediate;

			// 階層マーク表示設定
			//			grdDepositList.DisplayLayout.ViewStyle = Infragistics.Win.UltraWinGrid.ViewStyle.SingleBand;

			// 複数画面表示(スプリッター)の表示設定
			grdDepositList.DisplayLayout.MaxRowScrollRegions = 1;

			// スクロールバー最終行制御
			grdDepositList.DisplayLayout.ScrollBounds = ScrollBounds.ScrollToFill;

			// ヘッダークリックアクション設定
			grdDepositList.DisplayLayout.Override.HeaderClickAction = HeaderClickAction.SortMulti;

			// 行セレクターを非表示
			//			grdDepositList.DisplayLayout.Override.RowSelectors = Infragistics.Win.DefaultableBoolean.False;

			// 「固定列」プッシュピンアイコンを消す
			grdDepositList.DisplayLayout.Override.FixedHeaderIndicator = FixedHeaderIndicator.None;
		}

		/// <summary>
		/// 受注引当グリッド初期設定処理処理
		/// </summary>
		/// <param></param>
		/// <returns></returns>
		/// <remarks>
		/// <br>Note       : 受注引当グリッドの初期設定を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void InitializeDmdSalesList()
		{
			// 列幅をオートに設定
			//grdDmdSalesList.DisplayLayout.AutoFitColumns = true;

			// 行選択設定 行選択無しモード(アクティブのみ)
			grdDmdSalesList.DisplayLayout.Override.SelectTypeRow = SelectType.None;
			grdDmdSalesList.DisplayLayout.Override.SelectTypeCell = SelectType.None;
			grdDmdSalesList.DisplayLayout.Override.SelectTypeCol = SelectType.None;

			// グリッド全体の外観設定
            // ↓ 20070131 18322 d MA.NS用に変更
			//grdDmdSalesList.DisplayLayout.Appearance.BackColor = Color.White;
			//grdDmdSalesList.DisplayLayout.Appearance.BackColor2 = Color.FromArgb(198, 219, 255);
			//grdDmdSalesList.DisplayLayout.Appearance.BackGradientStyle = Infragistics.Win.GradientStyle.Vertical;
            // ↑ 20070131 18322 d

			// 行選択モードの設定
			//			grdDmdSalesList.DisplayLayout.Override.CellClickAction = Infragistics.Win.UltraWinGrid.CellClickAction.CellSelect;

			// 行の外観設定
			grdDmdSalesList.DisplayLayout.Override.RowAppearance.BackColor = Color.White;

			// 1行おきの外観設定
			grdDmdSalesList.DisplayLayout.Override.RowAlternateAppearance.BackColor = Color.Lavender;

			// 選択行の外観設定
			grdDmdSalesList.DisplayLayout.Override.SelectedRowAppearance.BackColor = Color.FromArgb(251, 230, 148);
			grdDmdSalesList.DisplayLayout.Override.SelectedRowAppearance.BackColor2 = Color.FromArgb(238, 149, 21);
			grdDmdSalesList.DisplayLayout.Override.SelectedRowAppearance.BackGradientStyle = GradientStyle.Vertical;

			// アクティブ行の外観設定
			grdDmdSalesList.DisplayLayout.Override.ActiveRowAppearance.BackColor = Color.FromArgb(251, 230, 148);
			grdDmdSalesList.DisplayLayout.Override.ActiveRowAppearance.BackColor2 = Color.FromArgb(238, 149, 21);
			grdDmdSalesList.DisplayLayout.Override.ActiveRowAppearance.BackGradientStyle = GradientStyle.Vertical;

			// アクティブセルの外観設定
			grdDmdSalesList.DisplayLayout.Override.ActiveCellAppearance.BackColor = Color.FromArgb(251, 230, 148);

			// ヘッダーの外観設定
			grdDmdSalesList.DisplayLayout.Override.HeaderAppearance.BackColor = Color.FromArgb(89, 135, 214);
			grdDmdSalesList.DisplayLayout.Override.HeaderAppearance.BackColor2 = Color.FromArgb(7, 59, 150);
			grdDmdSalesList.DisplayLayout.Override.HeaderAppearance.BackGradientStyle = GradientStyle.Vertical;
			grdDmdSalesList.DisplayLayout.Override.HeaderAppearance.ForeColor = Color.White;
			grdDmdSalesList.DisplayLayout.Override.HeaderAppearance.TextHAlign = HAlign.Left;
			grdDmdSalesList.DisplayLayout.Override.HeaderAppearance.ThemedElementAlpha = Alpha.Transparent;
			grdDmdSalesList.DisplayLayout.Override.HeaderAppearance.TextHAlign = HAlign.Center;
			grdDmdSalesList.DisplayLayout.Override.HeaderAppearance.TextVAlign = VAlign.Middle;

			// 行セレクターの外観設定
			grdDmdSalesList.DisplayLayout.Override.RowSelectorAppearance.BackColor = Color.FromArgb(89, 135, 214);
			grdDmdSalesList.DisplayLayout.Override.RowSelectorAppearance.BackColor2 = Color.FromArgb(7, 59, 150);
			grdDmdSalesList.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle = GradientStyle.Vertical;

			// 行フィルターの設定
//			grdDmdSalesList.DisplayLayout.Override.AllowRowFiltering = Infragistics.Win.DefaultableBoolean.True;
			grdDmdSalesList.DisplayLayout.Override.RowFilterAction = RowFilterAction.HideFilteredOutRows;
//			grdDmdSalesList.DisplayLayout.Override.RowFilterMode = Infragistics.Win.UltraWinGrid.RowFilterMode.AllRowsInBand;

			// 垂直方向のスクロールスタイル
			grdDmdSalesList.DisplayLayout.ScrollStyle = ScrollStyle.Immediate;

			// 階層マーク表示設定
			grdDmdSalesList.DisplayLayout.ViewStyle = Infragistics.Win.UltraWinGrid.ViewStyle.SingleBand;

			// 複数画面表示(スプリッター)の表示設定
			grdDmdSalesList.DisplayLayout.MaxRowScrollRegions = 1;

			// スクロールバー最終行制御
			grdDmdSalesList.DisplayLayout.ScrollBounds = ScrollBounds.ScrollToFill;

			// ヘッダークリックアクション設定
			grdDmdSalesList.DisplayLayout.Override.HeaderClickAction = HeaderClickAction.SortMulti;

			// 行セレクターを非表示
			//			grdDmdSalesList.DisplayLayout.Override.RowSelectors = Infragistics.Win.DefaultableBoolean.False;

			// 「固定列」プッシュピンアイコンを消す
			grdDmdSalesList.DisplayLayout.Override.FixedHeaderIndicator = FixedHeaderIndicator.None;
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
        /// グリッド初期設定処理処理
        /// </summary>
        /// <param name="uGrid">入金グリッド、受注引当グリッド</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Note       : グリッドの初期設定を行います。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// </remarks>
        private void InitializeGrid(UltraGrid uGrid)
        {
            // 入金グリッド
            if (uGrid.Name == "grdDepositList")
            {
                // 行選択モードの設定
                uGrid.DisplayLayout.Override.CellClickAction = CellClickAction.RowSelect;
            }
            // 受注引当グリッド
            else
            {
                // 階層マーク表示設定
                uGrid.DisplayLayout.ViewStyle = Infragistics.Win.UltraWinGrid.ViewStyle.SingleBand;
            }

            // 行選択設定 行選択無しモード(アクティブのみ)
            uGrid.DisplayLayout.Override.SelectTypeRow = SelectType.None;
            uGrid.DisplayLayout.Override.SelectTypeCell = SelectType.None;
            uGrid.DisplayLayout.Override.SelectTypeCol = SelectType.None;

            // 行の外観設定
            uGrid.DisplayLayout.Override.RowAppearance.BackColor = Color.White;

            // 1行おきの外観設定
            uGrid.DisplayLayout.Override.RowAlternateAppearance.BackColor = Color.Lavender;

            // 選択行の外観設定
            uGrid.DisplayLayout.Override.SelectedRowAppearance.BackColor = Color.FromArgb(251, 230, 148);
            uGrid.DisplayLayout.Override.SelectedRowAppearance.BackColor2 = Color.FromArgb(238, 149, 21);
            uGrid.DisplayLayout.Override.SelectedRowAppearance.BackGradientStyle = GradientStyle.Vertical;

            // アクティブ行の外観設定
            uGrid.DisplayLayout.Override.ActiveRowAppearance.BackColor = Color.FromArgb(251, 230, 148);
            uGrid.DisplayLayout.Override.ActiveRowAppearance.BackColor2 = Color.FromArgb(238, 149, 21);
            uGrid.DisplayLayout.Override.ActiveRowAppearance.BackGradientStyle = GradientStyle.Vertical;

            // ヘッダーの外観設定
            uGrid.DisplayLayout.Override.HeaderAppearance.BackColor = Color.FromArgb(89, 135, 214);
            uGrid.DisplayLayout.Override.HeaderAppearance.BackColor2 = Color.FromArgb(7, 59, 150);
            uGrid.DisplayLayout.Override.HeaderAppearance.BackGradientStyle = GradientStyle.Vertical;
            uGrid.DisplayLayout.Override.HeaderAppearance.ForeColor = Color.White;
            uGrid.DisplayLayout.Override.HeaderAppearance.TextHAlign = HAlign.Left;
            uGrid.DisplayLayout.Override.HeaderAppearance.ThemedElementAlpha = Alpha.Transparent;
            uGrid.DisplayLayout.Override.HeaderAppearance.TextHAlign = HAlign.Center;
            uGrid.DisplayLayout.Override.HeaderAppearance.TextVAlign = VAlign.Middle;

            // 行セレクターの外観設定
            uGrid.DisplayLayout.Override.RowSelectorAppearance.BackColor = Color.FromArgb(89, 135, 214);
            uGrid.DisplayLayout.Override.RowSelectorAppearance.BackColor2 = Color.FromArgb(7, 59, 150);
            uGrid.DisplayLayout.Override.RowSelectorAppearance.BackGradientStyle = GradientStyle.Vertical;

            // 行フィルターの設定
            uGrid.DisplayLayout.Override.RowFilterAction = RowFilterAction.HideFilteredOutRows;

            // 垂直方向のスクロールスタイル
            uGrid.DisplayLayout.ScrollStyle = ScrollStyle.Immediate;

            // 複数画面表示(スプリッター)の表示設定
            uGrid.DisplayLayout.MaxRowScrollRegions = 1;

            // スクロールバー最終行制御
            uGrid.DisplayLayout.ScrollBounds = ScrollBounds.ScrollToFill;

            // ヘッダークリックアクション設定
            uGrid.DisplayLayout.Override.HeaderClickAction = HeaderClickAction.SortMulti;

            // 「固定列」プッシュピンアイコンを消す
            uGrid.DisplayLayout.Override.FixedHeaderIndicator = FixedHeaderIndicator.None;
        }

        /// <summary>
		/// 入金内訳グリッド表示設定処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 入金内訳グリッドの表示設定を行います。</br>
		/// <br>Programmer : 30414 忍　幸史</br>
		/// <br>Date       : 2008/06/26</br>
        /// <br>UpdateNote : 2009/12/16 李占川 ＰＭ．ＮＳ保守依頼④</br>
        /// <br>             入金内訳のスクロールを無くし、入力可能な金種は全て一度に確認できるように修正</br>
        /// <br>UpdateNote : K2012/07/13 FSI今野 山形部品個別依頼</br>
        /// <br>             振込金額入力時は独自の銀行コードの入力を可能に修正</br>
		/// </remarks>
        private void SettingDepositKindGrid()
        {
            // データテーブルの列定義
            DataTable dataTable = new DataTable();

            // Addを行う順番が、列の表示順位となります。
            dataTable.Columns.Add(DepositRelDataAcs.ctDepositKindDiv, typeof(Int32));    // 金種区分
            dataTable.Columns.Add(DepositRelDataAcs.ctDepositKindCode, typeof(Int32));   // 金種コード
            dataTable.Columns.Add(DepositRelDataAcs.ctDepositKindName, typeof(string));  // 入金内訳
            dataTable.Columns.Add(DepositRelDataAcs.ctDeposit, typeof(string));          // 入金金額
            dataTable.Columns.Add(DepositRelDataAcs.ctYear, typeof(string));            // 年
            dataTable.Columns.Add(DepositRelDataAcs.ctMonth, typeof(string));           // 月
            dataTable.Columns.Add(DepositRelDataAcs.ctDay, typeof(string));             // 日
           //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
            if (this._opt_YamagataCtrl == (int)Option.ON)
            {
                // --- ADD K2012/07/13 ---------->>>>>
                dataTable.Columns.Add(DepositRelDataAcs.ctBank, typeof(string));        // 銀行
                // --- ADD K2012/07/13 ----------<<<<<
            }
            //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

            DataRow dataRow;

            foreach (int key in depositRelDataAcs.DicMoneyKindCode.Keys)
            {
                dataRow = dataTable.NewRow();

                dataRow[DepositRelDataAcs.ctDepositKindDiv] = (int)depositRelDataAcs.HtMoneyKindDiv[key];
                dataRow[DepositRelDataAcs.ctDepositKindCode] = key;
                dataRow[DepositRelDataAcs.ctDepositKindName] = (string)depositRelDataAcs.DicMoneyKindCode[key];
                dataRow[DepositRelDataAcs.ctDeposit] = "";
                dataRow[DepositRelDataAcs.ctYear] = DBNull.Value;
                dataRow[DepositRelDataAcs.ctMonth] = DBNull.Value;
                dataRow[DepositRelDataAcs.ctDay] = DBNull.Value;

                //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                if (this._opt_YamagataCtrl == (int)Option.ON)
                {
                    // --- ADD K2012/07/13 ---------->>>>>
                    if ((int)depositRelDataAcs.HtMoneyKindDiv[key] == 102)
                    {
                        dataRow[DepositRelDataAcs.ctBank] = "00";
                    }
                    else
                    {
                        dataRow[DepositRelDataAcs.ctBank] = DBNull.Value;
                    }
                    // --- ADD K2012/07/13 ----------<<<<<
                }
                //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                dataTable.Rows.Add(dataRow);
            }

            this.grdDepositKind.DataSource = dataTable;

            // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
            // HACK:string moneyFormat = "#,##0;-#,##0;''";
            // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
            // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
            string moneyFormat = "#,##0;-#,##0";
            // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<

            // --- 入金内訳バンド --- //
            ColumnsCollection pareColumns = this.grdDepositKind.DisplayLayout.Bands[0].Columns;

            // --- ADD 2009/12/16 ---------->>>>>
            this.grdDepositKind.DisplayLayout.AutoFitStyle = AutoFitStyle.ResizeAllColumns;
            int rowCount = this.grdDepositKind.Rows.Count;
            if (rowCount < 6)
            {
                int height = (this.grdDepositKind.Rows[0].Height + 1) * (6 - rowCount);
                this.grdDepositKind.Height = this.grdDepositKind.Height - height;
                this.panel5.Location = new System.Drawing.Point(5, this.panel5.Location.Y - height);
            }
            else if (rowCount > 6)
            {
                int height = this.grdDepositKind.Rows[0].Height * (rowCount - 6) + 2;
                this.grdDepositKind.Height = this.grdDepositKind.Height + height;
                this.panel5.Location = new System.Drawing.Point(5, this.panel5.Location.Y + height);
            }
            // --- ADD 2009/12/16 ----------<<<<<

            // 金種区分
            pareColumns[DepositRelDataAcs.ctDepositKindDiv].Header.Caption = "金種区分";
            pareColumns[DepositRelDataAcs.ctDepositKindDiv].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[DepositRelDataAcs.ctDepositKindDiv].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[DepositRelDataAcs.ctDepositKindDiv].Hidden = true;

            // 金種コード
            pareColumns[DepositRelDataAcs.ctDepositKindCode].Header.Caption = "金種コード";
            pareColumns[DepositRelDataAcs.ctDepositKindCode].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[DepositRelDataAcs.ctDepositKindCode].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[DepositRelDataAcs.ctDepositKindCode].Hidden = true;

            // 金種名称
            pareColumns[DepositRelDataAcs.ctDepositKindName].Header.Caption = "入金内訳";
            pareColumns[DepositRelDataAcs.ctDepositKindName].Header.Appearance.FontData.SizeInPoints = 10;
            pareColumns[DepositRelDataAcs.ctDepositKindName].CellActivation = Activation.Disabled;
            pareColumns[DepositRelDataAcs.ctDepositKindName].CellAppearance.ForeColorDisabled = Color.Black;
            pareColumns[DepositRelDataAcs.ctDepositKindName].CellAppearance.TextHAlign = HAlign.Left;
            pareColumns[DepositRelDataAcs.ctDepositKindName].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[DepositRelDataAcs.ctDepositKindName].CellAppearance.FontData.SizeInPoints = 10;
            //pareColumns[DepositRelDataAcs.ctDepositKindName].Width = 105; // DEL 2009/12/18
            pareColumns[DepositRelDataAcs.ctDepositKindName].Width = 107; // ADD 2009/12/18
            
            // 入金額
            pareColumns[DepositRelDataAcs.ctDeposit].Header.Caption = "入金金額";
            pareColumns[DepositRelDataAcs.ctDeposit].Header.Appearance.FontData.SizeInPoints = 10;
            pareColumns[DepositRelDataAcs.ctDeposit].CellAppearance.ForeColorDisabled = Color.Black;
            pareColumns[DepositRelDataAcs.ctDeposit].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[DepositRelDataAcs.ctDeposit].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[DepositRelDataAcs.ctDeposit].CellAppearance.FontData.SizeInPoints = 10;
            //pareColumns[DepositRelDataAcs.ctDeposit].Width = 97; // DEL 2009/12/18
            pareColumns[DepositRelDataAcs.ctDeposit].Width = 100; // ADD 2009/12/18
            pareColumns[DepositRelDataAcs.ctDeposit].Format = moneyFormat;

            // 年
            pareColumns[DepositRelDataAcs.ctYear].Header.Caption = "年";
            pareColumns[DepositRelDataAcs.ctYear].Header.Appearance.FontData.SizeInPoints = 10;
            pareColumns[DepositRelDataAcs.ctYear].CellAppearance.ForeColorDisabled = Color.Black;
            pareColumns[DepositRelDataAcs.ctYear].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[DepositRelDataAcs.ctYear].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[DepositRelDataAcs.ctYear].CellAppearance.FontData.SizeInPoints = 10;
            pareColumns[DepositRelDataAcs.ctYear].Width = 49;
            // 月
            pareColumns[DepositRelDataAcs.ctMonth].Header.Caption = "月";
            pareColumns[DepositRelDataAcs.ctMonth].Header.Appearance.FontData.SizeInPoints = 10;
            pareColumns[DepositRelDataAcs.ctMonth].CellAppearance.ForeColorDisabled = Color.Black;
            pareColumns[DepositRelDataAcs.ctMonth].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[DepositRelDataAcs.ctMonth].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[DepositRelDataAcs.ctMonth].CellAppearance.FontData.SizeInPoints = 10;
            pareColumns[DepositRelDataAcs.ctMonth].Width = 35;
            // 日
            pareColumns[DepositRelDataAcs.ctDay].Header.Caption = "日";
            pareColumns[DepositRelDataAcs.ctDay].Header.Appearance.FontData.SizeInPoints = 10;
            pareColumns[DepositRelDataAcs.ctDay].CellAppearance.ForeColorDisabled = Color.Black;
            pareColumns[DepositRelDataAcs.ctDay].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[DepositRelDataAcs.ctDay].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[DepositRelDataAcs.ctDay].CellAppearance.FontData.SizeInPoints = 10;
            pareColumns[DepositRelDataAcs.ctDay].Width = 35;
            //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
            if (this._opt_YamagataCtrl == (int)Option.ON)
            {
                // --- ADD K2012/07/13 ---------->>>>>
                // 銀行
                pareColumns[DepositRelDataAcs.ctBank].Header.Caption = "銀行";
                pareColumns[DepositRelDataAcs.ctBank].Header.Appearance.FontData.SizeInPoints = 10;
                pareColumns[DepositRelDataAcs.ctBank].CellAppearance.ForeColorDisabled = Color.Black;
                pareColumns[DepositRelDataAcs.ctBank].CellAppearance.TextHAlign = HAlign.Right;
                pareColumns[DepositRelDataAcs.ctBank].CellAppearance.TextVAlign = VAlign.Middle;
                pareColumns[DepositRelDataAcs.ctBank].CellAppearance.FontData.SizeInPoints = 10;
                pareColumns[DepositRelDataAcs.ctBank].Width = 45;
                // --- ADD K2012/07/13 ----------<<<<<
            }
            //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

            for (int index = 0; index < this.grdDepositKind.Rows.Count; index++)
            {
                this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctYear].Activation = Activation.Disabled;
                this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.Disabled;
                this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctDay].Activation = Activation.Disabled;
                //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                if (this._opt_YamagataCtrl == (int)Option.ON)
                {
                    // --- ADD K2012/07/13 ---------->>>>>
                    this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                    // --- ADD K2012/07/13 ----------<<<<<
                }
                //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctDeposit].Tag = 0;
            }
        }
        // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

        /// <summary>
        /// 入金グリッドデータビューバインド処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 入金グリッドにデータビューをバインドします。</br>
        /// <br>Programmer : 97036 amami</br>
        /// <br>Date       : 2006.07.21</br>
        /// </remarks>
        private void BindingDsDepositView()
		{
			// 入金グリッドにViewをバインドする
			grdDepositList.DataSource = inputDepositNormalTypeAcs.GetDsDepositInfo().Tables[InputDepositNormalTypeAcs.ctDepositDataTable].DefaultView;
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 入金グリッド表示設定処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 入金グリッドの表示設定を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void SettingDepositGrid()
		{
			string moneyFormat = "#,##0;-#,##0;''";
			string zeroFormat = "000000000;''";

			// --- 入金一覧バンド --- //
			ColumnsCollection pareColumns = grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDepositDataTable].Columns;

			// 赤伝区分
			pareColumns[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].Header.Caption = "赤黒種類";
			pareColumns[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].CellAppearance.TextHAlign = HAlign.Left;
			pareColumns[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].Width = 100;

			// 入金番号
			pareColumns[InputDepositNormalTypeAcs.ctDepositSlipNo].Header.Caption = "入金番号";
			pareColumns[InputDepositNormalTypeAcs.ctDepositSlipNo].CellAppearance.TextHAlign = HAlign.Right;
			pareColumns[InputDepositNormalTypeAcs.ctDepositSlipNo].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDepositSlipNo].Width = 80;
			pareColumns[InputDepositNormalTypeAcs.ctDepositSlipNo].Format = zeroFormat;

            // 2007.10.10 add start ---------------------------------------------------->>
            // 売上番号
            pareColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].Header.Caption = "売上番号";
            pareColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].Width = 80;
            // 2007.10.10 add end ------------------------------------------------------<<

            // 2007.10.10 upd start ------------------------------------------------------------>>
            // 入金日
            //pareColumns[InputDepositNormalTypeAcs.ctDepositDateDisp].Header.Caption = "入金日";
            //pareColumns[InputDepositNormalTypeAcs.ctDepositDateDisp].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
            //pareColumns[InputDepositNormalTypeAcs.ctDepositDateDisp].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //pareColumns[InputDepositNormalTypeAcs.ctDepositDateDisp].Width = 80;
            // 入金計上日(計上日付を表示する)
            pareColumns[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].Header.Caption = "入金日";
            pareColumns[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].CellAppearance.TextHAlign = HAlign.Left;
            pareColumns[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].Width = 80;
            // 2007.10.10 upd end --------------------------------------------------------------<<

            // 入金区分コード
			pareColumns[InputDepositNormalTypeAcs.ctDepositCd].Header.Caption = "区分コード";
			pareColumns[InputDepositNormalTypeAcs.ctDepositCd].CellAppearance.TextHAlign = HAlign.Left;
			pareColumns[InputDepositNormalTypeAcs.ctDepositCd].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDepositCd].Width = 70;
            
            // 入金区分名称
			pareColumns[InputDepositNormalTypeAcs.ctDepositNm].Header.Caption = "区分";
			pareColumns[InputDepositNormalTypeAcs.ctDepositNm].CellAppearance.TextHAlign = HAlign.Left;
			pareColumns[InputDepositNormalTypeAcs.ctDepositNm].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDepositNm].Width = 100;

			// 入金金種区分
			pareColumns[InputDepositNormalTypeAcs.ctDepositKindDivCd].Header.Caption = "金種区分";
			pareColumns[InputDepositNormalTypeAcs.ctDepositKindDivCd].CellAppearance.TextHAlign = HAlign.Right;
			pareColumns[InputDepositNormalTypeAcs.ctDepositKindDivCd].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDepositKindDivCd].Width = 100;

			// 入金金種コード
			pareColumns[InputDepositNormalTypeAcs.ctDepositKindCode].Header.Caption = "金種コード";
			pareColumns[InputDepositNormalTypeAcs.ctDepositKindCode].CellAppearance.TextHAlign = HAlign.Right;
			pareColumns[InputDepositNormalTypeAcs.ctDepositKindCode].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDepositKindCode].Width = 100;
            
            // 入金金種名称
			pareColumns[InputDepositNormalTypeAcs.ctDepositKindName].Header.Caption = "金種";
			pareColumns[InputDepositNormalTypeAcs.ctDepositKindName].CellAppearance.TextHAlign = HAlign.Left;
			pareColumns[InputDepositNormalTypeAcs.ctDepositKindName].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDepositKindName].Width = 100;

			// 共通 入金額
			pareColumns[InputDepositNormalTypeAcs.ctDeposit].Header.Caption = "入金額";
			pareColumns[InputDepositNormalTypeAcs.ctDeposit].CellAppearance.TextHAlign = HAlign.Right;
			pareColumns[InputDepositNormalTypeAcs.ctDeposit].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDeposit].Width = 100;
			pareColumns[InputDepositNormalTypeAcs.ctDeposit].Format = moneyFormat;

			// 共通 手数料
			pareColumns[InputDepositNormalTypeAcs.ctFeeDeposit].Header.Caption = "手数料";
			pareColumns[InputDepositNormalTypeAcs.ctFeeDeposit].CellAppearance.TextHAlign = HAlign.Right;
			pareColumns[InputDepositNormalTypeAcs.ctFeeDeposit].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctFeeDeposit].Width = 100;
			pareColumns[InputDepositNormalTypeAcs.ctFeeDeposit].Format = moneyFormat;

			// 共通 値引
			pareColumns[InputDepositNormalTypeAcs.ctDiscountDeposit].Header.Caption = "値引";
			pareColumns[InputDepositNormalTypeAcs.ctDiscountDeposit].CellAppearance.TextHAlign = HAlign.Right;
			pareColumns[InputDepositNormalTypeAcs.ctDiscountDeposit].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDiscountDeposit].Width = 100;
			pareColumns[InputDepositNormalTypeAcs.ctDiscountDeposit].Format = moneyFormat;

            // 2007.10.10 del start ----------------------------------------------------->>
            //// ↓ 20070129 18322 a MA.NS用に変更
            //pareColumns[InputDepositNormalTypeAcs.ctRebateDeposit].Header.Caption = "ｲﾝｾﾝﾃｨﾌﾞ";
            //pareColumns[InputDepositNormalTypeAcs.ctRebateDeposit].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //pareColumns[InputDepositNormalTypeAcs.ctRebateDeposit].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //pareColumns[InputDepositNormalTypeAcs.ctRebateDeposit].Width = 100;
            //pareColumns[InputDepositNormalTypeAcs.ctRebateDeposit].Format = moneyFormat;
            //// ↑ 20070129 18322 a
            // 2007.10.10 del end -------------------------------------------------------<<

			// 共通 合計
			pareColumns[InputDepositNormalTypeAcs.ctDepositTotal].Header.Caption = "入金合計";
			pareColumns[InputDepositNormalTypeAcs.ctDepositTotal].CellAppearance.TextHAlign = HAlign.Right;
			pareColumns[InputDepositNormalTypeAcs.ctDepositTotal].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDepositTotal].Width = 100;
			pareColumns[InputDepositNormalTypeAcs.ctDepositTotal].Format = moneyFormat;

            // ↓ 20070125 18322 d MA.NS用に変更
            #region SF 受注・諸費用は使用しないので削除
            //// 受注 入金額
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDeposit].Header.Caption = "入金額(受)";
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDeposit].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDeposit].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDeposit].Width = 100;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDeposit].Format = moneyFormat;
			//
			//// 受注 手数料
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrChargeDeposit].Header.Caption = "手数料(受)";
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrChargeDeposit].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrChargeDeposit].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrChargeDeposit].Width = 100;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrChargeDeposit].Format = moneyFormat;
			//
			//// 受注 値引
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDisDeposit].Header.Caption = "値引(受)";
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDisDeposit].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDisDeposit].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDisDeposit].Width = 100;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDisDeposit].Format = moneyFormat;
			//
			//// 受注 合計
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositTotal].Header.Caption = "入金計(受)";
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositTotal].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositTotal].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositTotal].Width = 100;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositTotal].Format = moneyFormat;
			//
			//// 諸費用 入金額
			//pareColumns[InputDepositNormalTypeAcs.ctVariousCostDeposit].Header.Caption = "入金額(諸)";
			//pareColumns[InputDepositNormalTypeAcs.ctVariousCostDeposit].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//pareColumns[InputDepositNormalTypeAcs.ctVariousCostDeposit].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			//pareColumns[InputDepositNormalTypeAcs.ctVariousCostDeposit].Width = 100;
			//pareColumns[InputDepositNormalTypeAcs.ctVariousCostDeposit].Format = moneyFormat;
			//
			//// 諸費用 手数料
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostChargeDeposit].Header.Caption = "手数料(諸)";
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostChargeDeposit].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostChargeDeposit].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostChargeDeposit].Width = 100;
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostChargeDeposit].Format = moneyFormat;
			//
			//// 諸費用 値引
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDisDeposit].Header.Caption = "値引(諸)";
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDisDeposit].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDisDeposit].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDisDeposit].Width = 100;
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDisDeposit].Format = moneyFormat;
			//
			//// 諸費用 合計
			//pareColumns[InputDepositNormalTypeAcs.ctVariousCostDepositTotal].Header.Caption = "入金計(諸)";
			//pareColumns[InputDepositNormalTypeAcs.ctVariousCostDepositTotal].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//pareColumns[InputDepositNormalTypeAcs.ctVariousCostDepositTotal].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			//pareColumns[InputDepositNormalTypeAcs.ctVariousCostDepositTotal].Width = 100;
			//pareColumns[InputDepositNormalTypeAcs.ctVariousCostDepositTotal].Format = moneyFormat;
			//
			//// 引当額 受注
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Deposit].Header.Caption = "引当額(受)";
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Deposit].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Deposit].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Deposit].Width = 100;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Deposit].Format = moneyFormat;
			//
			//// 引当額 諸費用
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Deposit].Header.Caption = "引当額(諸)";
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Deposit].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Deposit].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Deposit].Width = 100;
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Deposit].Format = moneyFormat;
            #endregion
            // ↑ 20070125 18322 d

			// 引当額 合計
			pareColumns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].Header.Caption = "引当額";
			pareColumns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].CellAppearance.TextHAlign = HAlign.Right;
			pareColumns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].Width = 100;
			pareColumns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].Format = moneyFormat;

            // ↓ 20070125 18322 c MA.NS用に変更
            #region SF 受注・諸費用は使用しないので削除
            //// 未引当額 受注
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Deposit].Header.Caption = "未引当額(受)";
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Deposit].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Deposit].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Deposit].Width = 100;
			//pareColumns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Deposit].Format = moneyFormat;
            //
			//// 未引当額 諸費用
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Deposit].Header.Caption = "未引当額(諸)";
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Deposit].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Deposit].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			//pareColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Deposit].Width = 100;
            //pareColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Deposit].Format = moneyFormat;
            #endregion
            // ↑ 20070125 18322 c

			// 未引当額 共通
			pareColumns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Header.Caption = "未引当額";
			pareColumns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].CellAppearance.TextHAlign = HAlign.Right;
			pareColumns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Width = 100;
			pareColumns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Format = moneyFormat;

			// 摘要
			pareColumns[InputDepositNormalTypeAcs.ctOutline].Header.Caption = "摘要";
			pareColumns[InputDepositNormalTypeAcs.ctOutline].CellAppearance.TextHAlign = HAlign.Right;
			pareColumns[InputDepositNormalTypeAcs.ctOutline].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctOutline].Width = 100;

			// 締
			pareColumns[InputDepositNormalTypeAcs.ctDepositClosedFlg].Header.Caption = "締";
			pareColumns[InputDepositNormalTypeAcs.ctDepositClosedFlg].CellAppearance.TextHAlign = HAlign.Center;
			pareColumns[InputDepositNormalTypeAcs.ctDepositClosedFlg].CellAppearance.TextVAlign = VAlign.Middle;
			pareColumns[InputDepositNormalTypeAcs.ctDepositClosedFlg].Width = 20;

			// 入金グリッドを展開する (１行もデータが無くてもタイトルを表示する為)
			grdDepositList.Rows.ExpandAll(true);


			// --- 入金引当バンド --- //
			ColumnsCollection chilColumns = grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctRelation_DepositAllowance].Columns;

			// 入金番号
			chilColumns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].Header.Caption = "入金番号";
			chilColumns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].CellAppearance.TextHAlign = HAlign.Right;
			chilColumns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].CellAppearance.TextVAlign = VAlign.Middle;
			//chilColumns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].Width = pareColumns[chilColumns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].Index].Width;
			chilColumns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].Format = zeroFormat;

			// 受注番号
            // 2007.10.10 del start --------------------------------------------------------->>
            //chilColumns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo_Alw].Header.Caption = "受注番号";
            //chilColumns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo_Alw].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //chilColumns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo_Alw].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            // 2007.10.10 del end -----------------------------------------------------------<<
			//chilColumns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo_Alw].Width = pareColumns[chilColumns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo_Alw].Index].Width;

            // ↓ 20070131 18322 a MA.NS用に変更
			chilColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].Header.Caption = "売上番号";
			chilColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellAppearance.TextHAlign = HAlign.Right;
			chilColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellAppearance.TextVAlign = VAlign.Middle;
            // ↑ 20070131 18322 a

			// 入金引当額 共通
			chilColumns[InputDepositNormalTypeAcs.ctDepositAllowance].Header.Caption = "引当額";
			chilColumns[InputDepositNormalTypeAcs.ctDepositAllowance].CellAppearance.TextHAlign = HAlign.Right;
			chilColumns[InputDepositNormalTypeAcs.ctDepositAllowance].CellAppearance.TextVAlign = VAlign.Middle;
			//chilColumns[InputDepositNormalTypeAcs.ctDepositAllowance].Width = pareColumns[chilColumns[InputDepositNormalTypeAcs.ctDepositAllowance].Index].Width;
			chilColumns[InputDepositNormalTypeAcs.ctDepositAllowance].Format = moneyFormat;

            // ↓ 20070125 18322 c MA.NS用に変更
            #region SF 受注・諸費用は使用しないので削除
            //// 入金引当額 受注
			//chilColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc].Header.Caption = "引当額(受)";
			//chilColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//chilColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			////chilColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc].Width = pareColumns[chilColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc].Index].Width;
			//chilColumns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc].Format = moneyFormat;
            //
			//// 入金引当額 諸費用
			//chilColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc].Header.Caption = "引当額(諸)";
			//chilColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
			//chilColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
			////chilColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc].Width = pareColumns[chilColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc].Index].Width;
            //chilColumns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc].Format = moneyFormat;
            #endregion
            // ↑ 20070125 18322 c

			// 引当日
			chilColumns[InputDepositNormalTypeAcs.ctReconcileDateDisp].Header.Caption = "引当日";
			chilColumns[InputDepositNormalTypeAcs.ctReconcileDateDisp].CellAppearance.TextHAlign = HAlign.Left;
			chilColumns[InputDepositNormalTypeAcs.ctReconcileDateDisp].CellAppearance.TextVAlign = VAlign.Middle;
			//chilColumns[InputDepositNormalTypeAcs.ctReconcileDateDisp].Width = pareColumns[chilColumns[InputDepositNormalTypeAcs.ctReconcileDateDisp].h Index].Width;


			// ヘッダーの外観設定
			Infragistics.Win.UltraWinGrid.UltraGridBand bd = grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctRelation_DepositAllowance];
			bd.Override.HeaderAppearance.BackColor = Color.FromArgb(131, 165, 225);
			bd.Override.HeaderAppearance.BackColor2 = Color.FromArgb(56, 110, 206);
			bd.Override.HeaderAppearance.BackGradientStyle = GradientStyle.Vertical;
			bd.Override.HeaderAppearance.ForeColor = Color.White;
			bd.Override.HeaderAppearance.TextHAlign = HAlign.Left;
			bd.Override.HeaderAppearance.ThemedElementAlpha = Alpha.Transparent;
			bd.Override.HeaderAppearance.TextHAlign = HAlign.Center;
			bd.Override.HeaderAppearance.TextVAlign = VAlign.Middle;

			// 行セレクターの外観設定
			bd.Override.RowSelectorAppearance.BackColor = Color.FromArgb(131, 165, 225);
			bd.Override.RowSelectorAppearance.BackColor2 = Color.FromArgb(56, 110, 206);
			bd.Override.RowSelectorAppearance.BackGradientStyle = GradientStyle.Vertical;

			// グリッド設定情報取得
			GridStateController.GridStateInfo gridStateInfo = this._gridStateController.GetGridStateInfo(ref grdDepositList);

			if (gridStateInfo != null)
			{
				// グリッドに設定セット
				this._gridStateController.SetGridStateToGrid(ref grdDepositList);
				// フォントサイズ ValueChangedイベント内の列サイズ変更を不可にする
				cmbDepositFontSize.Tag = false;
				cmbDepositFontSize.Value = (int)gridStateInfo.FontSize;
				cmbDepositFontSize.Tag = true;
				// 列の自動調整 ValueChangedイベント内の列サイズ変更を不可にする
				ckdDepositAutoColumnSize.Tag = false;
				ckdDepositAutoColumnSize.Checked = gridStateInfo.AutoFit;
				ckdDepositAutoColumnSize.Tag = true;
			}
			else
			{
				// フォントサイズ ValueChangedイベント内の列サイズ変更を不可にする
				cmbDepositFontSize.Tag = false;
				cmbDepositFontSize.Value = 11;
				cmbDepositFontSize.Tag = true;
				// 列の自動調整 ValueChangedイベント内の列サイズ変更を不可にする
				ckdDepositAutoColumnSize.Tag = false;
				ckdDepositAutoColumnSize.Checked = false;
				ckdDepositAutoColumnSize.Tag = true;
			}
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
        /// 入金グリッド表示設定処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 入金グリッドの表示設定を行います。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// <br>Update Note: 2012/09/21 田建委</br>
        /// <br>管理番号   : 2012/10/17配信分</br>
        /// <br>             Redmine#32415 発行者の追加対応</br>
        /// <br>Update Note: 2012/12/24 王君</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
        /// </remarks>
        private void SettingDepositGrid()
        {
            string moneyFormat = "#,##0;-#,##0;''";
            string zeroFormat = "000000000;''";
            // ADD 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更 ---------->>>>>
            string moneyFormatWith0yen = "#,##0;-#,##0";
            // ADD 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更 ----------<<<<<

            // --- 入金一覧バンド --- //
            ColumnsCollection pareColumns = grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDepositDataTable].Columns;

            // 赤伝区分
            pareColumns[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].Header.Caption = "赤黒種類";
            pareColumns[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].CellAppearance.TextHAlign = HAlign.Left;
            pareColumns[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].Width = 100;

            // 入金番号
            pareColumns[InputDepositNormalTypeAcs.ctDepositSlipNo].Header.Caption = "入金伝票番号";
            pareColumns[InputDepositNormalTypeAcs.ctDepositSlipNo].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[InputDepositNormalTypeAcs.ctDepositSlipNo].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositSlipNo].Width = 80;
            pareColumns[InputDepositNormalTypeAcs.ctDepositSlipNo].Format = zeroFormat;

            // 売上番号
            pareColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].Header.Caption = "売上伝票番号";
            pareColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].Hidden = true;
            pareColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].Width = 80;

            //// 入金日
            //pareColumns[InputDepositNormalTypeAcs.ctDepositDateDisp].Header.Caption = "入金日";
            //pareColumns[InputDepositNormalTypeAcs.ctDepositDateDisp].CellAppearance.TextHAlign = HAlign.Left;
            //pareColumns[InputDepositNormalTypeAcs.ctDepositDateDisp].CellAppearance.TextVAlign = VAlign.Middle;
            //pareColumns[InputDepositNormalTypeAcs.ctDepositDateDisp].Width = 80;

            // 入金計上日(計上日付を表示する)
            pareColumns[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].Header.Caption = "入金日";
            pareColumns[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].CellAppearance.TextHAlign = HAlign.Left;
            pareColumns[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].Width = 80;

            // 入金区分名称
            pareColumns[InputDepositNormalTypeAcs.ctDepositNm].Header.Caption = "区分";
            pareColumns[InputDepositNormalTypeAcs.ctDepositNm].CellAppearance.TextHAlign = HAlign.Left;
            pareColumns[InputDepositNormalTypeAcs.ctDepositNm].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositNm].Width = 100;

            // 入金金種名称
            pareColumns[InputDepositNormalTypeAcs.ctDepositKindName].Header.Caption = "金種";
            pareColumns[InputDepositNormalTypeAcs.ctDepositKindName].CellAppearance.TextHAlign = HAlign.Left;
            pareColumns[InputDepositNormalTypeAcs.ctDepositKindName].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositKindName].Width = 100;

            // 共通 入金額
            pareColumns[InputDepositNormalTypeAcs.ctDeposit].Header.Caption = "入金金額";
            pareColumns[InputDepositNormalTypeAcs.ctDeposit].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[InputDepositNormalTypeAcs.ctDeposit].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDeposit].Width = 100;
            pareColumns[InputDepositNormalTypeAcs.ctDeposit].Format = moneyFormat;
            pareColumns[InputDepositNormalTypeAcs.ctDeposit].Format = moneyFormatWith0yen;  // ADD 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更

            // 共通 手数料
            pareColumns[InputDepositNormalTypeAcs.ctFeeDeposit].Header.Caption = "手数料";
            pareColumns[InputDepositNormalTypeAcs.ctFeeDeposit].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[InputDepositNormalTypeAcs.ctFeeDeposit].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctFeeDeposit].Width = 100;
            pareColumns[InputDepositNormalTypeAcs.ctFeeDeposit].Format = moneyFormat;

            // 共通 値引
            pareColumns[InputDepositNormalTypeAcs.ctDiscountDeposit].Header.Caption = "値引";
            pareColumns[InputDepositNormalTypeAcs.ctDiscountDeposit].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[InputDepositNormalTypeAcs.ctDiscountDeposit].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDiscountDeposit].Width = 100;
            pareColumns[InputDepositNormalTypeAcs.ctDiscountDeposit].Format = moneyFormat;

            // 共通 合計
            pareColumns[InputDepositNormalTypeAcs.ctDepositTotal].Header.Caption = "入金合計";
            pareColumns[InputDepositNormalTypeAcs.ctDepositTotal].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[InputDepositNormalTypeAcs.ctDepositTotal].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositTotal].Width = 100;
            pareColumns[InputDepositNormalTypeAcs.ctDepositTotal].Format = moneyFormat;
            pareColumns[InputDepositNormalTypeAcs.ctDepositTotal].Format = moneyFormatWith0yen; // ADD 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更

            // --- ADD 2010/12/20 ---------->>>>>
            // 引当
            pareColumns[InputDepositNormalTypeAcs.ctAllowDiv].Header.Caption = "引当";
            pareColumns[InputDepositNormalTypeAcs.ctAllowDiv].CellAppearance.TextHAlign = HAlign.Center;
            pareColumns[InputDepositNormalTypeAcs.ctAllowDiv].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctAllowDiv].Width = 50;
            // --- ADD 2010/12/20  ----------<<<<<

            // 引当額 合計
            pareColumns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].Header.Caption = "引当額";
            pareColumns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].Width = 100;
            pareColumns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].Format = moneyFormat;
            pareColumns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].Format = moneyFormatWith0yen; // ADD 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更

            // 未引当額 共通
            pareColumns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Header.Caption = "未引当額";
            pareColumns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Width = 100;
            pareColumns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Format = moneyFormat;
            pareColumns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Format = moneyFormatWith0yen; // ADD 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更;

            // 摘要
            pareColumns[InputDepositNormalTypeAcs.ctOutline].Header.Caption = "摘要";
            pareColumns[InputDepositNormalTypeAcs.ctOutline].CellAppearance.TextHAlign = HAlign.Left;
            pareColumns[InputDepositNormalTypeAcs.ctOutline].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctOutline].Width = 100;

            // 締
            pareColumns[InputDepositNormalTypeAcs.ctDepositClosedFlg].Header.Caption = "締";
            pareColumns[InputDepositNormalTypeAcs.ctDepositClosedFlg].CellAppearance.TextHAlign = HAlign.Center;
            pareColumns[InputDepositNormalTypeAcs.ctDepositClosedFlg].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositClosedFlg].Width = 20;

            // ADD 2010/03/25 MANTIS[15196]：入金一覧画面に｢入力担当者｣を表示へ変更 ---------->>>>>
            // 入力担当者
            pareColumns[InputDepositNormalTypeAcs.ctDepositInputAgentNm].Header.Caption = "入力担当者";
            pareColumns[InputDepositNormalTypeAcs.ctDepositInputAgentNm].CellAppearance.TextHAlign = HAlign.Left;
            pareColumns[InputDepositNormalTypeAcs.ctDepositInputAgentNm].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositInputAgentNm].Width = 100;
            // ADD 2010/03/25 MANTIS[15196]：入金一覧画面に｢入力担当者｣を表示へ変更 ----------<<<<<

            //----- ADD 2012/09/21 田建委 redmine#32415 ---------->>>>>
            // 発行者コード
            pareColumns[InputDepositNormalTypeAcs.ctDepositInputEmpCd].Header.Caption = "発行者コード";
            pareColumns[InputDepositNormalTypeAcs.ctDepositInputEmpCd].CellAppearance.TextHAlign = HAlign.Right;
            pareColumns[InputDepositNormalTypeAcs.ctDepositInputEmpCd].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositInputEmpCd].Width = 100;

            // 発行者名称
            pareColumns[InputDepositNormalTypeAcs.ctDepositInputEmpNm].Header.Caption = "発行者名称";
            pareColumns[InputDepositNormalTypeAcs.ctDepositInputEmpNm].CellAppearance.TextHAlign = HAlign.Left;
            pareColumns[InputDepositNormalTypeAcs.ctDepositInputEmpNm].CellAppearance.TextVAlign = VAlign.Middle;
            pareColumns[InputDepositNormalTypeAcs.ctDepositInputEmpNm].Width = 100;
            //----- ADD 2012/09/21 田建委 redmine#32415 ----------<<<<<

            // 入金グリッドを展開する (１行もデータが無くてもタイトルを表示する為)
            grdDepositList.Rows.ExpandAll(true);


            // --- 入金引当バンド --- //
            ColumnsCollection chilColumns = grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctRelation_DepositAllowance].Columns;

            // 入金番号
            chilColumns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].Header.Caption = "入金伝票番号";
            chilColumns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].CellAppearance.TextHAlign = HAlign.Right;
            chilColumns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].CellAppearance.TextVAlign = VAlign.Middle;
            chilColumns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].Format = zeroFormat;

            // 売上番号
            chilColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].Header.Caption = "売上伝票番号";
            chilColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellAppearance.TextHAlign = HAlign.Right;
            chilColumns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellAppearance.TextVAlign = VAlign.Middle;

            // 入金引当額 共通
            chilColumns[InputDepositNormalTypeAcs.ctDepositAllowance].Header.Caption = "引当額";
            chilColumns[InputDepositNormalTypeAcs.ctDepositAllowance].CellAppearance.TextHAlign = HAlign.Right;
            chilColumns[InputDepositNormalTypeAcs.ctDepositAllowance].CellAppearance.TextVAlign = VAlign.Middle;
            chilColumns[InputDepositNormalTypeAcs.ctDepositAllowance].Format = moneyFormat;

            // 引当日
            chilColumns[InputDepositNormalTypeAcs.ctReconcileDateDisp].Header.Caption = "引当日";
            chilColumns[InputDepositNormalTypeAcs.ctReconcileDateDisp].CellAppearance.TextHAlign = HAlign.Left;
            chilColumns[InputDepositNormalTypeAcs.ctReconcileDateDisp].CellAppearance.TextVAlign = VAlign.Middle;

            // ヘッダーの外観設定
            Infragistics.Win.UltraWinGrid.UltraGridBand bd = grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctRelation_DepositAllowance];
            bd.Override.HeaderAppearance.BackColor = Color.FromArgb(131, 165, 225);
            bd.Override.HeaderAppearance.BackColor2 = Color.FromArgb(56, 110, 206);
            bd.Override.HeaderAppearance.BackGradientStyle = GradientStyle.Vertical;
            bd.Override.HeaderAppearance.ForeColor = Color.White;
            bd.Override.HeaderAppearance.TextHAlign = HAlign.Left;
            bd.Override.HeaderAppearance.ThemedElementAlpha = Alpha.Transparent;
            bd.Override.HeaderAppearance.TextHAlign = HAlign.Center;
            bd.Override.HeaderAppearance.TextVAlign = VAlign.Middle;

            // 行セレクターの外観設定
            bd.Override.RowSelectorAppearance.BackColor = Color.FromArgb(131, 165, 225);
            bd.Override.RowSelectorAppearance.BackColor2 = Color.FromArgb(56, 110, 206);
            bd.Override.RowSelectorAppearance.BackGradientStyle = GradientStyle.Vertical;

            // ----- ADD 王君 2012/12/24 Redmine#33741 ----->>>>>
            // 行フィルターの設定
            grdDepositList.DisplayLayout.Override.AllowRowFiltering = Infragistics.Win.DefaultableBoolean.True;
            grdDepositList.DisplayLayout.Override.RowFilterAction = RowFilterAction.HideFilteredOutRows;
            grdDepositList.DisplayLayout.Override.RowFilterMode = Infragistics.Win.UltraWinGrid.RowFilterMode.AllRowsInBand;
            // ----- ADD 王君 2012/12/24 Redmine#33741 -----<<<<<

            // グリッド設定情報取得
            GridStateController.GridStateInfo gridStateInfo = this._gridStateController.GetGridStateInfo(ref grdDepositList);

            if (gridStateInfo != null)
            {
                // グリッドに設定セット
                this._gridStateController.SetGridStateToGrid(ref grdDepositList);
                // フォントサイズ ValueChangedイベント内の列サイズ変更を不可にする
                cmbDepositFontSize.Tag = false;
                cmbDepositFontSize.Value = (int)gridStateInfo.FontSize;
                cmbDepositFontSize.Tag = true;
                // 列の自動調整 ValueChangedイベント内の列サイズ変更を不可にする
                ckdDepositAutoColumnSize.Tag = false;
                ckdDepositAutoColumnSize.Checked = gridStateInfo.AutoFit;
                ckdDepositAutoColumnSize.Tag = true;
            }
            else
            {
                // フォントサイズ ValueChangedイベント内の列サイズ変更を不可にする
                cmbDepositFontSize.Tag = false;
                cmbDepositFontSize.Value = 11;
                cmbDepositFontSize.Tag = true;
                // 列の自動調整 ValueChangedイベント内の列サイズ変更を不可にする
                ckdDepositAutoColumnSize.Tag = false;
                ckdDepositAutoColumnSize.Checked = false;
                ckdDepositAutoColumnSize.Tag = true;
            }
        }

		/// <summary>
		/// 受注引当グリッドデータビューバインド処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 受注引当グリッドにデータビューをバインドします。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2006.07.21</br>
		/// </remarks>
		private void BindingDsDmdSalesView()
		{
            // ↓ 20070125 18322 c MA.NS用に変更
			//// ソート設定
			//inputDepositNormalTypeAcs.GetDsDmdSalesInfo().Tables[InputDepositNormalTypeAcs.ctDmdSalesDataTable].DefaultView.Sort = InputDepositNormalTypeAcs.ctSlipNo + " ASC";

			// ソート設定
			inputDepositNormalTypeAcs.GetDsDmdSalesInfo().Tables
                      [InputDepositNormalTypeAcs.ctDmdSalesDataTable].DefaultView.Sort
                                         = InputDepositNormalTypeAcs.ctSalesSlipNum + " ASC";
            // ↑ 20070125 18322 c

			// 受注引当グリッドにViewをバインドする
			grdDmdSalesList.DataSource = inputDepositNormalTypeAcs.GetDsDmdSalesInfo().Tables[InputDepositNormalTypeAcs.ctDmdSalesDataTable].DefaultView;
		}

        // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 受注引当グリッド表示設定処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 受注引当グリッドの表示設定を行います。</br>
		/// <br>Programmer : 30414 忍 幸史</br>
		/// <br>Date       : 2008/06/26</br>
		/// </remarks>
		private void SettingDmdSalesGrid()
		{
			string moneyFormat = "#,##0;-#,##0;''";
            string moneyFormatZero = "#,##0;-#,##0"; // ADD 2010/12/20

			// --- 売上引当グリッド --- //
			ColumnsCollection columns = grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable].Columns;

			// チェックセル
			columns[InputDepositNormalTypeAcs.ctAlwCheck].Header.Caption = "";
			columns[InputDepositNormalTypeAcs.ctAlwCheck].CellAppearance.TextHAlign = HAlign.Right;
			columns[InputDepositNormalTypeAcs.ctAlwCheck].CellAppearance.TextVAlign = VAlign.Middle;
			columns[InputDepositNormalTypeAcs.ctAlwCheck].Width = 20;

			// 引当額 共通 (入金引当マスタ)
			columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Header.Caption = "引当額";
			columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Header.Appearance.FontData.Bold = DefaultableBoolean.True;
			columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].CellAppearance.TextHAlign = HAlign.Right;
			columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].CellAppearance.TextVAlign = VAlign.Middle;
			columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Width = 100;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Format = moneyFormat;
			columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].MaxLength = 12;

			// 引当残 共通 (請求売上マスタ)
			columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Header.Caption = "引当残";
			columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].CellAppearance.TextHAlign = HAlign.Right;
            columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].CellActivation = Activation.Disabled;
			columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Width = 100;
            // --- UPD 2010/12/20 ---------->>>>>
			//columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Format = moneyFormat;
            columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Format = moneyFormatZero;
            // --- UPD 2010/12/20  ----------<<<<<

			// 引当済 共通 (請求売上マスタ)
			columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Header.Caption = "引当済";
			columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].CellAppearance.TextHAlign = HAlign.Right;
			columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Width = 100;
			columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Format = moneyFormat;

			// 赤伝区分
			columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].Header.Caption = "赤黒種類";
			columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].CellAppearance.TextHAlign = HAlign.Left;
			columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].Width = 100;

            // --- ADD 2010/12/20 ---------->>>>>
            // 引当
            columns[InputDepositNormalTypeAcs.ctAllowDiv].Header.Caption = "引当";
            columns[InputDepositNormalTypeAcs.ctAllowDiv].CellAppearance.TextHAlign = HAlign.Center;
            columns[InputDepositNormalTypeAcs.ctAllowDiv].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctAllowDiv].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctAllowDiv].Width = 50;

            // 売上伝票番号
            columns[InputDepositNormalTypeAcs.ctDepSaleSlipNum].Header.Caption = "売上伝票番号";
            columns[InputDepositNormalTypeAcs.ctDepSaleSlipNum].CellAppearance.TextHAlign = HAlign.Center;
            columns[InputDepositNormalTypeAcs.ctDepSaleSlipNum].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctDepSaleSlipNum].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctDepSaleSlipNum].Width = 50;
            // --- ADD 2010/12/20  ----------<<<<<

			// 売上番号
			columns[InputDepositNormalTypeAcs.ctSalesSlipNum].Header.Caption = "売上伝票番号";
			columns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellAppearance.TextHAlign = HAlign.Right;
			columns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctSalesSlipNum].Width = 80;

			// 伝票日付
			columns[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].Header.Caption = "売上日付";
			columns[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].CellAppearance.TextHAlign = HAlign.Left;
			columns[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].Width = 120;

			// ステータス
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus_Alw].Header.Caption = "ステータス";
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus_Alw].CellAppearance.TextHAlign = HAlign.Left;
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus_Alw].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus_Alw].Width = 100;

			// ステータス名
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatusNm].Header.Caption = "ステータス";
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatusNm].CellAppearance.TextHAlign = HAlign.Left;
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatusNm].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatusNm].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatusNm].Width = 150;

            //// 種別
            columns[InputDepositNormalTypeAcs.ctSalesKind].Header.Caption = "種別";
            columns[InputDepositNormalTypeAcs.ctSalesKind].CellAppearance.TextHAlign = HAlign.Left;
            columns[InputDepositNormalTypeAcs.ctSalesKind].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctSalesKind].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctSalesKind].Width = 50;

            // ---ADD 2011/07/22 ------->>>>
            // 得意先名称
            columns[InputDepositNormalTypeAcs.ctCustomerName].Header.Caption = "得意先名";
            columns[InputDepositNormalTypeAcs.ctCustomerName].CellAppearance.TextHAlign = HAlign.Left;
            columns[InputDepositNormalTypeAcs.ctCustomerName].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctCustomerName].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctCustomerName].Width = 150;

            // 伝票備考
            columns[InputDepositNormalTypeAcs.ctSlipNote].Header.Caption = "伝票備考";
            columns[InputDepositNormalTypeAcs.ctSlipNote].CellAppearance.TextHAlign = HAlign.Left;
            columns[InputDepositNormalTypeAcs.ctSlipNote].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctSlipNote].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctSlipNote].Width = 150;

            // 前回月次締め日
            columns[InputDepositNormalTypeAcs.ctLastMonthlyDateDisp].Header.Caption = "最終月次締次更新日";
            columns[InputDepositNormalTypeAcs.ctLastMonthlyDateDisp].CellAppearance.TextHAlign = HAlign.Right;
            columns[InputDepositNormalTypeAcs.ctLastMonthlyDateDisp].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctLastMonthlyDateDisp].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctLastMonthlyDateDisp].Width = 100;
            // ---ADD 2011/07/22 -------<<<<<

            // 売上名称
			columns[InputDepositNormalTypeAcs.ctSalesName].Header.Caption = "売上名称";
			columns[InputDepositNormalTypeAcs.ctSalesName].CellAppearance.TextHAlign = HAlign.Left;
			columns[InputDepositNormalTypeAcs.ctSalesName].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctSalesName].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctSalesName].Width = 150;

			// 伝票合計(税込)
            columns[InputDepositNormalTypeAcs.ctTotalSales].Header.Caption = "伝票合計";
            columns[InputDepositNormalTypeAcs.ctTotalSales].CellAppearance.TextHAlign = HAlign.Right;
            columns[InputDepositNormalTypeAcs.ctTotalSales].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctTotalSales].Width = 100;
            columns[InputDepositNormalTypeAcs.ctTotalSales].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctTotalSales].Format = moneyFormat;

			// 締状態
			columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].Header.Caption = "締";
			columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].CellAppearance.TextHAlign = HAlign.Center;
			columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].CellActivation = Activation.Disabled;
            columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].Width = 20;

			// 入金内訳ボタン
			columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].Header.Caption = "入金内訳";
			columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].ButtonDisplayStyle = Infragistics.Win.UltraWinGrid.ButtonDisplayStyle.Always;
			columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].Style = Infragistics.Win.UltraWinGrid.ColumnStyle.Button;
			columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].CellButtonAppearance.Image = IconResourceManagement.ImageList16.Images[(int)Size16_Index.STAR1];
			columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].CellButtonAppearance.ImageHAlign = HAlign.Center;
			columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].Width = 80;

			// 受注引当グリッドを展開する (１行もデータが無くてもタイトルを表示する為)
			grdDmdSalesList.Rows.ExpandAll(true);

			// グリッド設定情報取得
			GridStateController.GridStateInfo gridStateInfo = this._gridStateController.GetGridStateInfo(ref grdDmdSalesList);

			if (gridStateInfo != null)
			{
				// グリッドに設定セット
				this._gridStateController.SetGridStateToGrid(ref grdDmdSalesList);
				// フォントサイズ ValueChangedイベント内の列サイズ変更を不可にする
				cmbSalesFontSize.Tag = false;
				cmbSalesFontSize.Value = (int)gridStateInfo.FontSize;
				cmbSalesFontSize.Tag = true;
				// 列の自動調整 ValueChangedイベント内の列サイズ変更を不可にする
				ckdSalesAutoColumnSize.Tag = false;
				ckdSalesAutoColumnSize.Checked = gridStateInfo.AutoFit;
				ckdSalesAutoColumnSize.Tag = true;
			}
			else
			{
				// フォントサイズ ValueChangedイベント内の列サイズ変更を不可にする
				cmbSalesFontSize.Tag = false;
				cmbSalesFontSize.Value = 11;
				cmbSalesFontSize.Tag = true;
				// 列の自動調整 ValueChangedイベント内の列サイズ変更を不可にする
				ckdSalesAutoColumnSize.Tag = false;
				ckdSalesAutoColumnSize.Checked = false;
				ckdSalesAutoColumnSize.Tag = true;
			}
        }
        // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

        #region DEL 2008/06/26 Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
        /// 受注引当グリッド表示設定処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 受注引当グリッドの表示設定を行います。</br>
        /// <br>Programmer : 97036 amami</br>
        /// <br>Date       : 2005.07.21</br>
        /// </remarks>
        private void SettingDmdSalesGrid()
        {
            string moneyFormat = "#,##0;-#,##0;''";

            // --- 売上引当グリッド --- //
            ColumnsCollection columns = grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable].Columns;

            // チェックセル
            columns[InputDepositNormalTypeAcs.ctAlwCheck].Header.Caption = "";
            columns[InputDepositNormalTypeAcs.ctAlwCheck].CellAppearance.TextHAlign = HAlign.Right;
            columns[InputDepositNormalTypeAcs.ctAlwCheck].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctAlwCheck].CellActivation = Activation.AllowEdit;
            columns[InputDepositNormalTypeAcs.ctAlwCheck].Width = 20;

            // ↓ 20070125 18322 d MA.NS用に変更
            #region SF 受注・諸費用は使用しないので削除
            //// 引当額 受注 (入金引当マスタ)
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].Header.Caption = "引当額(受)";
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].Header.Appearance.FontData.Bold = Infragistics.Win.DefaultableBoolean.True;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].Width = 100;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].Format = moneyFormat;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].MaxLength = 12;
            //
            //// 引当残 受注 (請求売上マスタ)
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Sales].Header.Caption = "引当残(受)";
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Sales].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Sales].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Sales].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Sales].Width = 100;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Sales].Format = moneyFormat;
            //
            //// 引当済 受注 (請求売上マスタ)
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Sales].Header.Caption = "引当済(受)";
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Sales].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Sales].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Sales].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Sales].Width = 100;
            //columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Sales].Format = moneyFormat;
            //
            //// 引当額 諸費用 (入金引当マスタ)
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].Header.Caption = "引当額(諸)";
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].Header.Appearance.FontData.Bold = Infragistics.Win.DefaultableBoolean.True;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].Width = 100;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].Format = moneyFormat;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].MaxLength = 12;
            //
            //// 引当残 諸費用 (請求売上マスタ)
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Sales].Header.Caption = "引当残(諸)";
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Sales].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Sales].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Sales].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Sales].Width = 100;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Sales].Format = moneyFormat;
            //
            //// 引当済 諸費用 (請求売上マスタ)
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Sales].Header.Caption = "引当済(諸)";
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Sales].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Sales].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Sales].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Sales].Width = 100;
            //columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Sales].Format = moneyFormat;
            #endregion
            // ↑ 20070125 18322 d

            // 引当額 共通 (入金引当マスタ)
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Header.Caption = "引当額";
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Header.Appearance.FontData.Bold = DefaultableBoolean.True;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].CellAppearance.TextHAlign = HAlign.Right;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].CellActivation = Activation.NoEdit;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Width = 100;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Format = moneyFormat;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].MaxLength = 12;

            // 引当残 共通 (請求売上マスタ)
            columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Header.Caption = "引当残";
            columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].CellAppearance.TextHAlign = HAlign.Right;
            columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].CellActivation = Activation.NoEdit;
            columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Width = 100;
            columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Format = moneyFormat;

            // 引当済 共通 (請求売上マスタ)
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Header.Caption = "引当済";
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].CellAppearance.TextHAlign = HAlign.Right;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].CellActivation = Activation.NoEdit;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Width = 100;
            columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Format = moneyFormat;

            // 赤伝区分
            columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].Header.Caption = "赤黒種類";
            columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].CellAppearance.TextHAlign = HAlign.Left;
            columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].CellActivation = Activation.NoEdit;
            columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].Width = 100;

            // 受注番号
            // 2007.10.10 hikita del start ---------------------------------------------->>
            //columns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].Header.Caption = "受注番号";
            //columns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //columns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].Width = 80;
            // 2007.10.10 hikita del end ------------------------------------------------<<

            // ↓ 20070125 18322 c MA.NS用に変更
            //// 伝票番号
            //columns[InputDepositNormalTypeAcs.ctSlipNo].Header.Caption = "伝票番号";
            //columns[InputDepositNormalTypeAcs.ctSlipNo].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //columns[InputDepositNormalTypeAcs.ctSlipNo].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctSlipNo].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctSlipNo].Width = 80;

            // 売上番号
            columns[InputDepositNormalTypeAcs.ctSalesSlipNum].Header.Caption = "売上番号";
            columns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellAppearance.TextHAlign = HAlign.Right;
            columns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctSalesSlipNum].CellActivation = Activation.NoEdit;
            columns[InputDepositNormalTypeAcs.ctSalesSlipNum].Width = 80;
            // ↑ 20070125 18322 c

            // 伝票日付
            columns[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].Header.Caption = "伝票日付";
            columns[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].CellAppearance.TextHAlign = HAlign.Left;
            columns[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].CellActivation = Activation.NoEdit;
            columns[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].Width = 80;

            // 2007.10.10 del start ----------------------------------------->>
            //// ↓ 20070525 18322 a
            //// POSレシート番号
            //columns[InputDepositNormalTypeAcs.ctPosReceiptNo].Header.Caption = "ＰＯＳレシート番号";
            //columns[InputDepositNormalTypeAcs.ctPosReceiptNo].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //columns[InputDepositNormalTypeAcs.ctPosReceiptNo].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctPosReceiptNo].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctPosReceiptNo].Format = "#########";
            //columns[InputDepositNormalTypeAcs.ctPosReceiptNo].Width = 80;
            //// 処理日
            //columns[InputDepositNormalTypeAcs.ctRegiProcDate].Header.Caption = "ＰＯＳ処理日";
            //columns[InputDepositNormalTypeAcs.ctRegiProcDate].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //columns[InputDepositNormalTypeAcs.ctRegiProcDate].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctRegiProcDate].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctRegiProcDate].Width = 80;
            //// ↑ 20070525 18322 a
            // 2007.10.10 del end -------------------------------------------<<

            // ステータス
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus_Alw].Header.Caption = "ステータス";
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus_Alw].CellAppearance.TextHAlign = HAlign.Left;
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus_Alw].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus_Alw].CellActivation = Activation.NoEdit;
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus_Alw].Width = 100;

            // ステータス名
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatusNm].Header.Caption = "ステータス";
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatusNm].CellAppearance.TextHAlign = HAlign.Left;
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatusNm].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatusNm].CellActivation = Activation.NoEdit;
            columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatusNm].Width = 150;

            //// 種別
            columns[InputDepositNormalTypeAcs.ctSalesKind].Header.Caption = "種別";
            columns[InputDepositNormalTypeAcs.ctSalesKind].CellAppearance.TextHAlign = HAlign.Left;
            columns[InputDepositNormalTypeAcs.ctSalesKind].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctSalesKind].CellActivation = Activation.NoEdit;
            columns[InputDepositNormalTypeAcs.ctSalesKind].Width = 50;

            // 売上名称
            columns[InputDepositNormalTypeAcs.ctSalesName].Header.Caption = "売上名称";
            columns[InputDepositNormalTypeAcs.ctSalesName].CellAppearance.TextHAlign = HAlign.Left;
            columns[InputDepositNormalTypeAcs.ctSalesName].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctSalesName].CellActivation = Activation.NoEdit;
            columns[InputDepositNormalTypeAcs.ctSalesName].Width = 150;

            // ↓ 20070125 18322 c MA.NS用に変更
            #region SF 登録番号・受注売上額・諸費用額は使用しないので削除
            //// 登録番号
            //columns[InputDepositNormalTypeAcs.ctNumberPlate].Header.Caption = "登録番号";
            //columns[InputDepositNormalTypeAcs.ctNumberPlate].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Left;
            //columns[InputDepositNormalTypeAcs.ctNumberPlate].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctNumberPlate].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctNumberPlate].Width = 150;
            //
            //// 受注売上額
            //columns[InputDepositNormalTypeAcs.ctAcceptAnOrderSales].Header.Caption = "売上計";
            //columns[InputDepositNormalTypeAcs.ctAcceptAnOrderSales].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //columns[InputDepositNormalTypeAcs.ctAcceptAnOrderSales].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctAcceptAnOrderSales].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctAcceptAnOrderSales].Width = 100;
            //columns[InputDepositNormalTypeAcs.ctAcceptAnOrderSales].Format = moneyFormat;
            //
            //// 諸費用額
            //columns[InputDepositNormalTypeAcs.ctTotalVariousCost].Header.Caption = "諸費用計";
            //columns[InputDepositNormalTypeAcs.ctTotalVariousCost].CellAppearance.TextHAlign = Infragistics.Win.HAlign.Right;
            //columns[InputDepositNormalTypeAcs.ctTotalVariousCost].CellAppearance.TextVAlign = Infragistics.Win.VAlign.Middle;
            //columns[InputDepositNormalTypeAcs.ctTotalVariousCost].CellActivation = Infragistics.Win.UltraWinGrid.Activation.NoEdit;
            //columns[InputDepositNormalTypeAcs.ctTotalVariousCost].Width = 100;
            //columns[InputDepositNormalTypeAcs.ctTotalVariousCost].Format = moneyFormat;
            #endregion
            // ↑ 20070125 18322 d

            // 伝票合計(税込)
            columns[InputDepositNormalTypeAcs.ctTotalSales].Header.Caption = "伝票合計";
            columns[InputDepositNormalTypeAcs.ctTotalSales].CellAppearance.TextHAlign = HAlign.Right;
            columns[InputDepositNormalTypeAcs.ctTotalSales].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctTotalSales].CellActivation = Activation.NoEdit;
            columns[InputDepositNormalTypeAcs.ctTotalSales].Width = 100;
            columns[InputDepositNormalTypeAcs.ctTotalSales].Format = moneyFormat;

            // 締状態
            columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].Header.Caption = "締";
            columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].CellAppearance.TextHAlign = HAlign.Center;
            columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].CellAppearance.TextVAlign = VAlign.Middle;
            columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].CellActivation = Activation.NoEdit;			// 締
            columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].Width = 20;

            // 入金内訳ボタン
            columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].Header.Caption = "入金内訳";
            columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].ButtonDisplayStyle = Infragistics.Win.UltraWinGrid.ButtonDisplayStyle.Always;
            columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].Style = Infragistics.Win.UltraWinGrid.ColumnStyle.Button;
            columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].CellButtonAppearance.Image = IconResourceManagement.ImageList16.Images[(int)Size16_Index.STAR1];
            columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].CellButtonAppearance.ImageHAlign = HAlign.Center;
            columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].CellActivation = Activation.NoEdit;			// 入金内訳
            columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].Width = 80;


            // 受注引当グリッドを展開する (１行もデータが無くてもタイトルを表示する為)
            grdDmdSalesList.Rows.ExpandAll(true);


            // グリッド設定情報取得
            GridStateController.GridStateInfo gridStateInfo = this._gridStateController.GetGridStateInfo(ref grdDmdSalesList);

            if (gridStateInfo != null)
            {
                // グリッドに設定セット
                this._gridStateController.SetGridStateToGrid(ref grdDmdSalesList);
                // フォントサイズ ValueChangedイベント内の列サイズ変更を不可にする
                cmbSalesFontSize.Tag = false;
                cmbSalesFontSize.Value = (int)gridStateInfo.FontSize;
                cmbSalesFontSize.Tag = true;
                // 列の自動調整 ValueChangedイベント内の列サイズ変更を不可にする
                ckdSalesAutoColumnSize.Tag = false;
                ckdSalesAutoColumnSize.Checked = gridStateInfo.AutoFit;
                ckdSalesAutoColumnSize.Tag = true;
            }
            else
            {
                // フォントサイズ ValueChangedイベント内の列サイズ変更を不可にする
                cmbSalesFontSize.Tag = false;
                cmbSalesFontSize.Value = 11;
                cmbSalesFontSize.Tag = true;
                // 列の自動調整 ValueChangedイベント内の列サイズ変更を不可にする
                ckdSalesAutoColumnSize.Tag = false;
                ckdSalesAutoColumnSize.Checked = false;
                ckdSalesAutoColumnSize.Tag = true;
            }
        }
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion DEL 2008/06/26 Partsman用に変更

        /// <summary>
		/// 入金グリッド表示列サイズ変更処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 入金グリッドの表示列サイズを変更します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void DepositGridColumnSizeChange(object parameter)
		{
			if (!(parameter is bool)) return;

			bool check = (bool)parameter;

			// グリッド列幅のオート設定
			if (check == true)
			{
				this.grdDepositList.DisplayLayout.AutoFitStyle = AutoFitStyle.ResizeAllColumns;
				return;
			}
			else
			{
				this.grdDepositList.DisplayLayout.AutoFitStyle = AutoFitStyle.None;
			}

			// 列幅の調整
			try
			{
				this.Cursor = Cursors.WaitCursor;
				this.grdDepositList.BeginUpdate();

				foreach (UltraGridColumn resizeColumn in grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDepositDataTable].Columns)
				{
					if (!resizeColumn.Hidden)
					{
						bool flag = false;

						// 列幅変更しようとしている列の中に値が何かあるのなら、列幅は自動で設定する
						for (int ix = 0; ix < grdDepositList.Rows.Count; ix++)
						{
							if (grdDepositList.Rows[ix].Cells[resizeColumn].Text.Trim() != "")
							{
								flag = true;
								break;
							}
						}

						if (flag == true) resizeColumn.PerformAutoResize(PerformAutoSizeType.VisibleRows);
					}
				}
			}
			finally
			{
				this.grdDepositList.EndUpdate();
				this.Cursor = Cursors.Default;
			}
		}

        // ↓ 20070125 18322 c MA.NS用に変更
        #region SF 入金グリッド表示列変更処理（全てコメントアウト）
		///// <summary>
		///// 入金グリッド表示列変更処理
		///// </summary>
		///// <param name="checkDetail">詳細表示 有無</param>
		///// <param name="checkAllowance">引当表示 有無</param>
		///// <remarks>
		///// <br>Note       : 入金グリッドの表示列を変更します。</br>
		///// <br>Programmer : 97036 amami</br>
		///// <br>Date       : 2005.07.21</br>
		///// </remarks>
		//private void DetailViewSettingColumun(bool checkDetail, bool checkAllowance)
		//{
		//	// >>>>>>>>>>>>>>>>>>>> //
		//	// --- 入金テーブル --- //
		//	// >>>>>>>>>>>>>>>>>>>> //
		//	Infragistics.Win.UltraWinGrid.UltraGridBand bdDeposit = grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDepositDataTable];
		//
		//	// >>> 入金テーブル 入金内訳関連の表示制御 >>> //
		//	// --- 詳細表示 有無 --- //
		//	if (checkDetail == true)
		//	{
		//		// 諸費用別入金 有無
		//		if (depositRelDataAcs.OptSeparateCost == true)
		//		{
		//			// 表示
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDeposit].Hidden			= false;		// 受注 入金額
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrChargeDeposit].Hidden	= false;		// 受注 手数料
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDisDeposit].Hidden		= false;		// 受注 値引
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctVariousCostDeposit].Hidden	= false;		// 諸費用 入金額
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctVarCostChargeDeposit].Hidden	= false;		// 諸費用 手数料
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctVarCostDisDeposit].Hidden		= false;		// 諸費用 値引
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctOutline].Hidden				= false;		// 摘要
		//			// 非表示
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit].Hidden				= true;			// 共通 入金額
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctFeeDeposit].Hidden			= true;			// 共通 手数料
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDiscountDeposit].Hidden		= true;			// 共通 値引
		//		} 
		//		else
		//		{
		//			// 表示
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit].Hidden				= false;		// 共通 入金額
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctFeeDeposit].Hidden			= false;		// 共通 手数料
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDiscountDeposit].Hidden		= false;		// 共通 値引
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctOutline].Hidden				= false;		// 摘要
		//			// 非表示
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDeposit].Hidden			= true;			// 受注 入金額
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrChargeDeposit].Hidden	= true;			// 受注 手数料
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDisDeposit].Hidden		= true;			// 受注 値引
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctVariousCostDeposit].Hidden	= true;			// 諸費用 入金額
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctVarCostChargeDeposit].Hidden	= true;			// 諸費用 手数料
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctVarCostDisDeposit].Hidden		= true;			// 諸費用 値引
		//		}
		//	}
		//	else
		//	{
		//		// 非表示
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit].Hidden					= true;			// 共通 入金額
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctFeeDeposit].Hidden				= true;			// 共通 手数料
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctDiscountDeposit].Hidden			= true;			// 共通 値引
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDeposit].Hidden				= true;			// 受注 入金額
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrChargeDeposit].Hidden		= true;			// 受注 手数料
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDisDeposit].Hidden			= true;			// 受注 値引
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctVariousCostDeposit].Hidden		= true;			// 諸費用 入金額
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctVarCostChargeDeposit].Hidden		= true;			// 諸費用 手数料
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctVarCostDisDeposit].Hidden			= true;			// 諸費用 値引
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctOutline].Hidden					= true;			// 摘要
		//	}
		//
		//	// >>> 入金テーブル 入金合計関連の表示制御 >>> //
		//	// --- 諸費用別入金 有無 --- //
		//	if (depositRelDataAcs.OptSeparateCost == true)
		//	{
		//		// 表示
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepositTotal].Hidden		= false;		// 受注 入金計
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctVariousCostDepositTotal].Hidden	= false;		// 諸費用 入金計
		//		// 非表示
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositTotal].Hidden				= true;			// 共通 入金計
		//	}
		//	else
		//	{
		//		// 表示
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositTotal].Hidden				= false;		// 共通 入金計
		//		// 非表示
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepositTotal].Hidden		= true;			// 受注 入金計
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctVariousCostDepositTotal].Hidden	= true;			// 諸費用 入金計
		//	}
		//
		//	// >>> 入金テーブル 入金引当残関連の表示制御 >>> //
		//	// --- 引当区分 (不可の時) --- //
		//	if (depositRelDataAcs.AllowanceProc == 2)
		//	{
		//		// 非表示
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Deposit].Hidden	= true;		// 受注 入金引当残
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Deposit].Hidden	= true;		// 諸費用 入金引当残
		//		bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Hidden		= true;		// 共通 入金引当残
		//	}
		//	else
		//	{
		//		// 引当表示 有無
		//		if (checkAllowance == true)
		//		{
		//			// 諸費用別入金 有無
		//			if (depositRelDataAcs.OptSeparateCost == true)
		//			{
		//				// 表示
		//				bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Deposit].Hidden	= false;	// 受注 入金引当残
		//				bdDeposit.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Deposit].Hidden	= false;	// 諸費用 入金引当残
		//				// 非表示
		//				bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Hidden		= true;		// 共通 入金引当残
		//			}
		//			else
		//			{
		//				// 表示
		//				bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Hidden		= false;	// 共通 入金引当残
		//				// 非表示
		//				bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Deposit].Hidden	= true;		// 受注 入金引当残
		//				bdDeposit.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Deposit].Hidden	= true;		// 諸費用 入金引当残
		//			}
		//		}
		//		else
		//		{
		//			// 非表示
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Deposit].Hidden	= true;	// 受注 入金引当残
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Deposit].Hidden	= true;	// 諸費用 入金引当残
		//			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Hidden		= true;	// 共通 入金引当残
		//		}
		//	}
		//
		//	// >>> 入金テーブル 常に非表示制御 >>> //
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDebitNoteCd].Hidden			= true;			// 入金赤伝区分
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].Hidden			= true;			// 入金赤伝名称
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctDebitNoteLinkDepoNo].Hidden			= true;			// 赤黒入金連結番号
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDate].Hidden					= true;			// 入金日
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAddUpADate].Hidden				= true;			// 計上日付
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctAutoDepositCd].Hidden					= true;			// 自動入金区分
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositCd].Hidden						= true;			// 預り金区分コード
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositKindDivCd].Hidden				= true;			// 入金金種区分
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositKindCode].Hidden				= true;			// 入金金種コード
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Deposit].Hidden		= true;			// 入金引当額 受注
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Deposit].Hidden		= true;			// 入金引当額 諸費用
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].Hidden		= true;			// 入金引当額 共通
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctCreditOrLoanCd].Hidden				= true;			// クレジット/ローン区分
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctCreditCompanyCode].Hidden				= true;			// クレジット会社コード
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftDrawingDate].Hidden				= true;			// 手形振出日
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftPayTimeLimit].Hidden				= true;			// 手形支払期日
		//	bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDataRow].Hidden				= true;			// 自身のDataRow
		//
		//
		//	// >>>>>>>>>>>>>>>>>>>> //
		//	// --- 引当テーブル --- //
		//	// >>>>>>>>>>>>>>>>>>>> //
		//	Infragistics.Win.UltraWinGrid.UltraGridBand bdAllowance = grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctRelation_DepositAllowance];
		//
		//	// --- 諸費用別入金 有無 --- //
		//	if (depositRelDataAcs.OptSeparateCost == true)
		//	{
		//		// 表示
		//		bdAllowance.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc].Hidden		= false;		// 入金引当額 受注
		//		bdAllowance.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc].Hidden			= false;		// 入金引当額 諸費用
		//		// 非表示
		//		bdAllowance.Columns[InputDepositNormalTypeAcs.ctDepositAllowance].Hidden		= true;			// 入金引当額 共通
		//	}
		//	else
		//	{
		//		// 非表示
		//		bdAllowance.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc].Hidden		= true;			// 入金引当額 受注
		//		bdAllowance.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc].Hidden			= true;			// 入金引当額 諸費用
		//		// 表示
		//		bdAllowance.Columns[InputDepositNormalTypeAcs.ctDepositAllowance].Hidden		= false;		// 入金引当額 共通
		//	}
		//	
		//	// 常に非表示
		//	bdAllowance.Columns[InputDepositNormalTypeAcs.ctReconcileDate].Hidden				= true;			// 引当日
		//	bdAllowance.Columns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].Hidden			= true;			// 入金番号
		//	bdAllowance.Columns[InputDepositNormalTypeAcs.ctReconcileAddUpDate].Hidden			= true;			// 計上日付
		//
		//
		//	// >>>>>>>>>>>>>>>>>> //
		//	// --- 階層マーク --- //
		//	// >>>>>>>>>>>>>>>>>> //
		//	// 引当表示 有無
		//	if (checkAllowance == true)
		//	{
		//		// 表示
		//		grdDepositList.DisplayLayout.ViewStyle = Infragistics.Win.UltraWinGrid.ViewStyle.MultiBand;		// 階層マーク
		//	}
		//	else
		//	{
		//		// 非表示
		//		grdDepositList.DisplayLayout.ViewStyle = Infragistics.Win.UltraWinGrid.ViewStyle.SingleBand;	// 階層マーク
		//	}
		//}
        #endregion

        #region 2008/06/26 Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
		/// 入金グリッド表示列変更処理
		/// </summary>
		/// <param name="checkDetail">詳細表示 有無</param>
		/// <param name="checkAllowance">引当表示 有無</param>
		/// <remarks>
		/// <br>Note       : 入金グリッドの表示列を変更します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void DetailViewSettingColumun(bool checkDetail, bool checkAllowance)
		{
			// >>>>>>>>>>>>>>>>>>>> //
			// --- 入金テーブル --- //
			// >>>>>>>>>>>>>>>>>>>> //
			UltraGridBand bdDeposit = grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDepositDataTable];

			// >>> 入金テーブル 入金内訳関連の表示制御 >>> //
			// --- 詳細表示 有無 --- //
			if (checkDetail == true)
			{
				// 表示
		        // 共通 入金額
				bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit].Hidden			= false;
		        // 共通 手数料
				bdDeposit.Columns[InputDepositNormalTypeAcs.ctFeeDeposit].Hidden		= false;
		        // 共通 値引
				bdDeposit.Columns[InputDepositNormalTypeAcs.ctDiscountDeposit].Hidden	= false;
		        // 共通 インセンティブ（リベート入金額）
				//bdDeposit.Columns[InputDepositNormalTypeAcs.ctRebateDeposit].Hidden     = false;   // 2007.10.10 del
		        // 摘要
				bdDeposit.Columns[InputDepositNormalTypeAcs.ctOutline].Hidden			= false;
			}
			else
			{
				// 非表示
    			// 共通 入金額
				bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit].Hidden			= true;
			    // 共通 手数料
				bdDeposit.Columns[InputDepositNormalTypeAcs.ctFeeDeposit].Hidden		= true;
			    // 共通 値引
				bdDeposit.Columns[InputDepositNormalTypeAcs.ctDiscountDeposit].Hidden	= true;
			    // 共通 インセンティブ
                //bdDeposit.Columns[InputDepositNormalTypeAcs.ctRebateDeposit].Hidden	    = true;  // 2007.10.10 del
			    // 摘要
				bdDeposit.Columns[InputDepositNormalTypeAcs.ctOutline].Hidden			= true;
			}

			// >>> 入金テーブル 入金合計関連の表示制御 >>> //
			// 表示
		    // 共通 入金計
			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositTotal].Hidden			= false;

			// >>> 入金テーブル 入金引当残関連の表示制御 >>> //
			// --- 引当区分 (不可の時) --- //
			if (depositRelDataAcs.AllowanceProc == 2)
			{
				// 非表示
        		// 共通 入金引当残
				bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Hidden		= true;
			}
			else
			{
				// 引当表示 有無
				if (checkAllowance == true)
				{
					// 表示
					bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Hidden		= false;	// 共通 入金引当残
				}
				else
				{
					// 非表示
					bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Hidden		= true;	// 共通 入金引当残
				}
			}

			// >>> 入金テーブル 常に非表示制御 >>> //
			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDebitNoteCd].Hidden			= true;			// 入金赤伝区分
			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].Hidden			= true;			// 入金赤伝名称
			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDebitNoteLinkDepoNo].Hidden			= true;			// 赤黒入金連結番号
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDateDisp].Hidden               = true;			// 入金日(表示用)           // 2007.10.10 add
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDate].Hidden					= true;			// 入金日
			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAddUpADate].Hidden				= true;			// 計上日付
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAcptAnOdrStatus].Hidden 　　　 = true;			// 受注ステータス           // 2007.10.10 add
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctAutoDepositCd].Hidden					= true;			// 自動入金区分
			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositCd].Hidden						= true;			// 預り金区分コード
			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositKindDivCd].Hidden				= true;			// 入金金種区分
			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositKindCode].Hidden				= true;			// 入金金種コード
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].Hidden		= true;			// 入金引当額 共通
			//bdDeposit.Columns[InputDepositNormalTypeAcs.ctCreditOrLoanCd].Hidden				= true;			// クレジット/ローン区分    // 2007.10.10 del
            //bdDeposit.Columns[InputDepositNormalTypeAcs.ctCreditCompanyCode].Hidden				= true;			// クレジット会社コード // 2007.10.10 del
			// 2007.10.10 hikita add start ------------------------------------------------------------>>
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctBankCode].Hidden                      = true;	        // 銀行コード
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctBankName].Hidden                      = true;         // 銀行名称
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftNo].Hidden                       = true;         // 手形番号
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftDivide].Hidden                   = true;         // 手形区分
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftDivideName].Hidden               = true;         // 手形区分名称
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftKind].Hidden                     = true;         // 手形種類
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftKindName].Hidden                 = true;         // 手形種類名称
            // 2007.10.10 hikita add end --------------------------------------------------------------<<
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftDrawingDate].Hidden				= true;			// 手形振出日
			bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftPayTimeLimit].Hidden				= true;			// 手形支払期日
            // bdDeposit.Columns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].Hidden               = true;         // 受注番号    // 2007.10.10 del
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftDrawingDate].Hidden = true;			// 手形振出日
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDataRow].Hidden = true;			// 自身のDataRow

			// >>>>>>>>>>>>>>>>>>>> //
			// --- 引当テーブル --- //
			// >>>>>>>>>>>>>>>>>>>> //
			UltraGridBand bdAllowance = grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctRelation_DepositAllowance];

			// 表示
    		bdAllowance.Columns[InputDepositNormalTypeAcs.ctDepositAllowance].Hidden = false;		// 入金引当額 共通
    		bdAllowance.Columns[InputDepositNormalTypeAcs.ctSalesSlipNum].Hidden     = false;		// 売上伝票番号

			// 常に非表示
    		//bdAllowance.Columns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo_Alw].Hidden = true;	// 受注番号        // 2007.10.10 del
			bdAllowance.Columns[InputDepositNormalTypeAcs.ctReconcileDate].Hidden	    = true;		// 引当日
			bdAllowance.Columns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].Hidden   = true;		// 入金番号
			bdAllowance.Columns[InputDepositNormalTypeAcs.ctReconcileAddUpDate].Hidden  = true;		// 計上日付
            bdAllowance.Columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus_Alw].Hidden = true;		// 受注ステータス  // 2007.10.10 add

			// >>>>>>>>>>>>>>>>>> //
			// --- 階層マーク --- //
			// >>>>>>>>>>>>>>>>>> //
			// 引当表示 有無
			if (checkAllowance == true)
			{
				// 表示
				grdDepositList.DisplayLayout.ViewStyle = Infragistics.Win.UltraWinGrid.ViewStyle.MultiBand;		// 階層マーク
			}
			else
			{
				// 非表示
				grdDepositList.DisplayLayout.ViewStyle = Infragistics.Win.UltraWinGrid.ViewStyle.SingleBand;	// 階層マーク
			}
		}
        // ↑ 20070125 18322 c
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 Partsman用に変更

        /// <summary>
        /// 入金グリッド表示列変更処理
        /// </summary>
        /// <param name="checkDetail">詳細表示 有無</param>
        /// <param name="checkAllowance">引当表示 有無</param>
        /// <remarks>
        /// <br>Note       : 入金グリッドの表示列を変更します。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// <br>Update Note: 2012/09/21 田建委</br>
        /// <br>管理番号   : 2012/10/17配信分</br>
        /// <br>             Redmine#32415 発行者の追加対応</br>
        /// <br>Update Note: 2012/12/24 王君</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
        /// </remarks>
        private void DetailViewSettingColumun(bool checkDetail, bool checkAllowance)
        {
            // >>>>>>>>>>>>>>>>>>>> //
            // --- 入金テーブル --- //
            // >>>>>>>>>>>>>>>>>>>> //
            UltraGridBand bdDeposit = grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDepositDataTable];

            // >>> 入金テーブル 入金内訳関連の表示制御 >>> //
            // --- 詳細表示 有無 --- //
            if (checkDetail == true)
            {
                // 表示
                // 共通 入金額
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit].Hidden = false;
                // 共通 手数料
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctFeeDeposit].Hidden = false;
                // 共通 値引
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctDiscountDeposit].Hidden = false;
                // 摘要
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctOutline].Hidden = false;

                // ADD 2010/03/25 MANTIS[15196]：入金一覧画面に｢入力担当者｣を表示へ変更 ---------->>>>>
                // 入金担当者
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositInputAgentNm].Hidden = false;
                // ADD 2010/03/25 MANTIS[15196]：入金一覧画面に｢入力担当者｣を表示へ変更 ----------<<<<<

                //----- ADD 2012/09/21 田建委 redmine#32415 ---------->>>>>
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositInputEmpCd].Hidden = false;  // 発行者コード
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositInputEmpNm].Hidden = false;  // 発行者名
                //----- ADD 2012/09/21 田建委 redmine#32415 ----------<<<<<
                //----   ADD 王君 2012/12/24 Redmine#33741 ----------->>>>>
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctCustomerCode].Hidden = true;
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctCustomerName].Hidden = true;
                //----   ADD 王君 2012/12/24 Redmine#33741 -----------<<<<<
            }
            else
            {
                // 非表示
                // 共通 入金額
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit].Hidden = true;
                // 共通 手数料
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctFeeDeposit].Hidden = true;
                // 共通 値引
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctDiscountDeposit].Hidden = true;
                // 摘要
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctOutline].Hidden = true;

                // ADD 2010/03/25 MANTIS[15196]：入金一覧画面に｢入力担当者｣を表示へ変更 ---------->>>>>
                // 入金担当者
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositInputAgentNm].Hidden = true;
                // ADD 2010/03/25 MANTIS[15196]：入金一覧画面に｢入力担当者｣を表示へ変更 ----------<<<<<

                //----- ADD 2012/09/21 田建委 redmine#32415 ---------->>>>>
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositInputEmpCd].Hidden = true;  // 発行者コード
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositInputEmpNm].Hidden = true;  // 発行者名
                //----- ADD 2012/09/21 田建委 redmine#32415 ----------<<<<<
                //----- ADD 王君 2012/12/24 Redmine#33741 ------------>>>>>
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctCustomerCode].Hidden = true;
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctCustomerName].Hidden = true;
                //----- ADD 王君 2012/12/24 Redmine#33741 ------------<<<<<
            }

            // >>> 入金テーブル 入金合計関連の表示制御 >>> //
            // 表示
            // 共通 入金計
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositTotal].Hidden = false;

            // >>> 入金テーブル 入金引当残関連の表示制御 >>> //
            // --- 引当区分 (不可の時) --- //
            if (depositRelDataAcs.AllowanceProc == 2)
            {
                // 非表示
                // 共通 入金引当残
                bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Hidden = true;
            }
            else
            {
                // 引当表示 有無
                if (checkAllowance == true)
                {
                    // 表示
                    bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Hidden = false;	// 共通 入金引当残
                }
                else
                {
                    // 非表示
                    bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Hidden = true;	// 共通 入金引当残
                }
            }

            // >>> 入金テーブル 常に非表示制御 >>> //
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDebitNoteCd].Hidden = true;			    // 入金赤伝区分
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].Hidden = true;			    // 入金赤伝名称
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDebitNoteLinkDepoNo].Hidden = true;			    // 赤黒入金連結番号
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDateDisp].Hidden = true;			        // 入金日(表示用)
            //bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].Hidden = true;			        // 入金日(表示用)
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDate].Hidden = true;			            // 入金日
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAddUpADate].Hidden = true;			        // 計上日付
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAcptAnOdrStatus].Hidden = true;			// 受注ステータス
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctAutoDepositCd].Hidden = true;			            // 自動入金区分
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit].Hidden = true;			// 入金引当額 共通
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctBankCode].Hidden = true;	                        // 銀行コード
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctBankName].Hidden = true;                          // 銀行名称
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftNo].Hidden = true;                           // 手形番号
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftDivide].Hidden = true;                       // 手形区分
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftDivideName].Hidden = true;                   // 手形区分名称
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftKind].Hidden = true;                         // 手形種類
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftKindName].Hidden = true;                     // 手形種類名称
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftDrawingDate].Hidden = true;			        // 手形振出日
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDraftDrawingDate].Hidden = true;			        // 手形振出日
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositDataRow].Hidden = true;			        // 自身のDataRow
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositRowNo1].Hidden = true;			            // 入金行番号1
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindCode1].Hidden = true;			        // 金種コード1
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindName1].Hidden = true;			        // 金種名称1
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindDiv1].Hidden = true;			            // 金種区分1
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit1].Hidden = true;			                // 入金金額1
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctValidityTerm1].Hidden = true;			            // 有効期限1
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositRowNo2].Hidden = true;			            // 入金行番号2
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindCode2].Hidden = true;			        // 金種コード2
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindName2].Hidden = true;			        // 金種名称2
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindDiv2].Hidden = true;			            // 金種区分2
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit2].Hidden = true;			                // 入金金額2
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctValidityTerm2].Hidden = true;			            // 有効期限2
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositRowNo3].Hidden = true;			            // 入金行番号3
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindCode3].Hidden = true;			        // 金種コード3
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindName3].Hidden = true;			        // 金種名称3
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindDiv3].Hidden = true;			            // 金種区分3
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit3].Hidden = true;			                // 入金金額3
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctValidityTerm3].Hidden = true;			            // 有効期限3
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositRowNo4].Hidden = true;			            // 入金行番号3
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindCode4].Hidden = true;			        // 金種コード4
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindName4].Hidden = true;			        // 金種名称4
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindDiv4].Hidden = true;			            // 金種区分4
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit4].Hidden = true;			                // 入金金額4
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctValidityTerm4].Hidden = true;			            // 有効期限4
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositRowNo5].Hidden = true;			            // 入金行番号5
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindCode5].Hidden = true;			        // 金種コード5
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindName5].Hidden = true;			        // 金種名称5
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindDiv5].Hidden = true;			            // 金種区分5
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit5].Hidden = true;			                // 入金金額5
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctValidityTerm5].Hidden = true;			            // 有効期限5
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositRowNo6].Hidden = true;			            // 入金行番号6
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindCode6].Hidden = true;			        // 金種コード6
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindName6].Hidden = true;			        // 金種名称6
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindDiv6].Hidden = true;			            // 金種区分6
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit6].Hidden = true;			                // 入金金額6
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctValidityTerm6].Hidden = true;			            // 有効期限6
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositRowNo7].Hidden = true;			            // 入金行番号7
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindCode7].Hidden = true;			        // 金種コード7
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindName7].Hidden = true;			        // 金種名称7
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindDiv7].Hidden = true;			            // 金種区分7
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit7].Hidden = true;			                // 入金金額7
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctValidityTerm7].Hidden = true;			            // 有効期限7
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositRowNo8].Hidden = true;			            // 入金行番号8
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindCode8].Hidden = true;			        // 金種コード8
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindName8].Hidden = true;			        // 金種名称8
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindDiv8].Hidden = true;			            // 金種区分8
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit8].Hidden = true;			                // 入金金額8
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctValidityTerm8].Hidden = true;			            // 有効期限8
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositRowNo9].Hidden = true;			            // 入金行番号9
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindCode9].Hidden = true;			        // 金種コード9
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindName9].Hidden = true;			        // 金種名称9
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindDiv9].Hidden = true;			            // 金種区分9
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit9].Hidden = true;			                // 入金金額9
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctValidityTerm9].Hidden = true;			            // 有効期限9
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDepositRowNo10].Hidden = true;			            // 入金行番号10
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindCode10].Hidden = true;			        // 金種コード10
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindName10].Hidden = true;			        // 金種名称10
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctMoneyKindDiv10].Hidden = true;			            // 金種区分10
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctDeposit10].Hidden = true;			                // 入金金額10
            bdDeposit.Columns[InputDepositNormalTypeAcs.ctValidityTerm10].Hidden = true;			            // 有効期限10

            // >>>>>>>>>>>>>>>>>>>> //
            // --- 引当テーブル --- //
            // >>>>>>>>>>>>>>>>>>>> //
            UltraGridBand bdAllowance = grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctRelation_DepositAllowance];

            // 表示
            bdAllowance.Columns[InputDepositNormalTypeAcs.ctDepositAllowance].Hidden = false;		        // 入金引当額 共通
            bdAllowance.Columns[InputDepositNormalTypeAcs.ctSalesSlipNum].Hidden = false;		            // 売上伝票番号

            // 常に非表示
            bdAllowance.Columns[InputDepositNormalTypeAcs.ctReconcileDate].Hidden = true;		            // 引当日
            bdAllowance.Columns[InputDepositNormalTypeAcs.ctDepositSlipNo_Alw].Hidden = true;		        // 入金番号
            bdAllowance.Columns[InputDepositNormalTypeAcs.ctReconcileAddUpDate].Hidden = true;		        // 計上日付
            bdAllowance.Columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus_Alw].Hidden = true;		        // 受注ステータス  // 2007.10.10 add

            // >>>>>>>>>>>>>>>>>> //
            // --- 階層マーク --- //
            // >>>>>>>>>>>>>>>>>> //
            // 引当表示 有無
            if (checkAllowance == true)
            {
                // 表示
                grdDepositList.DisplayLayout.ViewStyle = Infragistics.Win.UltraWinGrid.ViewStyle.MultiBand;	// 階層マーク
            }
            else
            {
                // 非表示
                grdDepositList.DisplayLayout.ViewStyle = Infragistics.Win.UltraWinGrid.ViewStyle.SingleBand;// 階層マーク
            }
        }

        /// <summary>
        /// データ検索前の画面設定処理
        /// </summary>
        /// <param name="searchMode">検索モード</param>
        /// <remarks>
        /// <br>Note       : データ検索前に画面の初期化を行います。</br>
        /// <br>Programmer : 97036 amami</br>
        /// <br>Date       : 2005.07.21</br>
        /// </remarks>
        private void SearchBeforeDisplySetting(SearchMode searchMode)
		{
			if (searchMode != SearchMode.DmdSalesSearch)
			{
				// 入金伝票変更前画面初期化処理
				this.DisplyClearToDepositChange();
			}

			if (searchMode != SearchMode.DepositSearch)
			{
				// 受注引当一覧の行を非アクティブとする
				grdDmdSalesList.ActiveRow = null;
			}
		}
		
		/// <summary>
		/// データ検索後の画面設定処理
		/// </summary>
		/// <param name="searchDataStatus">データ検索ステータス</param>
		/// <remarks>
		/// <br>Note       : データ検索の結果に合わせた画面内容の表示を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
        /// <br>UpdateNote : 2009/12/16 李占川 ＰＭ．ＮＳ保守依頼④</br>
        /// <br>             メニューボタンの無効設定の変更</br>
        /// <br>UpdateNote : 2012/12/24 王君</br>
        /// <br>           : 10806793-00 2013/0313配信分</br>
        /// <br>             Redmine#33741の対応</br>
		/// </remarks>
        // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
        //private void SearchAfterDisplySetting(SearchMode searchMode, int searchDataStatus)
		private void SearchAfterDisplySetting(int searchDataStatus)
        // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<
		{
            if (searchDataStatus == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
			{
				this._buttonNew				= true;
				this._buttonSave			= true;
                this._btnRenewal = true;
				this._buttonDelete			= true;
				this._buttonAka				= true;
				this._buttonReceiptPrint	= true;
                //----- ADD 王君 2012/12/24 Redmine#33741 ----->>>>>
                if ("DmdSalesTab".Equals(this.tabList.SelectedTab.Key.ToString()))
                {
                    this._buttonReadSlip = false;
                }
                else
                {
                    this._buttonReadSlip = true;
                }
                //----- ADD 王君 2012/12/24 Redmine#33741 -----<<<<<
                // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
                this._searchFlg = true;
                // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

                // --- ADD 2009/12/16 ---------->>>>>
                if (!this._grdDepositSearchFlag)
                {
                    this._buttonDelete = false;
                    this._buttonAka = false;
                }
                // --- ADD 2009/12/16 ----------<<<<<
            }
			else
			{
				this._buttonNew				= false;
				this._buttonSave			= false;
                this._btnRenewal = true;
				this._buttonDelete			= false;
				this._buttonAka				= false;
				this._buttonReceiptPrint	= false;
                //----- ADD 王君 2012/12/24 Redmine#33741 ----->>>>>
                if ("DmdSalesTab".Equals(this.tabList.SelectedTab.Key.ToString()))
                {
                    this._buttonReadSlip = false;
                }
                else
                {
                    this._buttonReadSlip = true;
                }
                //----- ADD 王君 2012/12/24 Redmine#33741 -----<<<<<
                // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
                this._searchFlg = false;
                // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<
            }

			// 親にツールバー状態通知
			if (ParentToolbarSettingEvent != null) ParentToolbarSettingEvent(this);
		}
		
		/// <summary>
		/// 入金伝票変更前画面初期化処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 入金伝票が変更される時の画面初期化。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void DisplyClearToDepositChange()
		{
			// 入金伝票入力欄初期化処理
			this.ClearDeposit();

			// 受注一覧の入金合計、入金引当残をクリア
			labDepositTotal.Text = "0";
			labDepositAlwcBlnce.Text = "0";

			// 入金グリッド選択行消去処理
			labDepositList.Text = "";
			expandAllowanceDepositSlipNo = 0;
			selectedDepositCopyRow = null;
			selectedAllowanceCopyRows.Clear();
			beforeSelectedDepositRow = null;
			beforeSelectedAllowanceRows.Clear();

            DisplayCustDmdPrc(this._depositCustDmdPrc);
		}
		
		/// <summary>
		/// 受注伝票変更前画面初期化処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 受注伝票が変更される時の画面初期化。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void DisplyClearToDmdSalesChange()
		{
			// 受注引当グリッド選択行消去処理
			labDmdSalesList.Text = "";
			selectedDmdSalesRow = null;
		}

		/// <summary>
		/// 受注引当グリッド表示列サイズ変更処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 受注引当グリッドの表示列サイズを変更します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void SalesGridColumnSizeChange(object parameter)
		{
			if (!(parameter is bool)) return;

			bool check = (bool)parameter;

			// グリッド列幅のオート設定
			if (check == true)
			{
				this.grdDmdSalesList.DisplayLayout.AutoFitStyle = AutoFitStyle.ResizeAllColumns;
				return;
			}
			else
			{
				this.grdDmdSalesList.DisplayLayout.AutoFitStyle = AutoFitStyle.None;
			}

			// 列幅の調整
			try
			{
				this.Cursor = Cursors.WaitCursor;
				this.grdDmdSalesList.BeginUpdate();

				foreach (UltraGridColumn resizeColumn in grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable].Columns)
				{
					if (!resizeColumn.Hidden)
					{
						bool flag = false;

						// 列幅変更しようとしている列の中に値が何かあるのなら、列幅は自動で設定する
						for (int ix = 0; ix < grdDmdSalesList.Rows.Count; ix++)
						{
							if (grdDmdSalesList.Rows[ix].Cells[resizeColumn].Text.Trim() != "")
							{
								flag = true;
								break;
							}
						}

						if (flag == true) resizeColumn.PerformAutoResize(PerformAutoSizeType.VisibleRows);
					}
				}
			}
			finally
			{
				this.grdDmdSalesList.EndUpdate();
				this.Cursor = Cursors.Default;
			}
		}

        // ↓ 20070125 18322 c MA.NS用に変更
		#region SF 受注引当グリッド表示列変更処理（全てコメントアウト）
		///// <summary>
		///// 受注引当グリッド表示列変更処理
		///// </summary>
		///// <param name="checkDetail">詳細表示 有無</param>
		///// <param name="checkSeparateCost">諸費用別入金 有無</param>
		///// <remarks>
		///// <br>Note       : 受注引当グリッドの表示列を変更します。</br>
		///// <br>Programmer : 97036 amami</br>
		///// <br>Date       : 2005.07.21</br>
		///// </remarks>
		//private void SalesViewSettingColumn(bool checkDetail, bool checkSeparateCost)
		//{
		//	Infragistics.Win.UltraWinGrid.UltraGridBand bdDmdSales = grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable];
		//
		//	// 諸費用別入金による表示制御
		//	if (checkSeparateCost == true)
		//	{
		//		// 諸費用別入金 有無
		//		if (depositRelDataAcs.OptSeparateCost == true)
		//		{
		//			// 表示
		//			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].Hidden		= false;	// 引当額 受注 (入金引当額)
		//			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Sales].Hidden	= false;	// 引当残 受注 (請求売上マスタ)
		//			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].Hidden			= false;	// 引当額 諸費用 (入金引当額)
		//			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Sales].Hidden	= false;	// 引当残 諸費用 (請求売上マスタ)
		//			// 非表示
		//			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Hidden			= true;		// 引当額 共通 (入金引当額)
		//			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Hidden		= true;		// 引当残 共通 (請求売上マスタ)
		//		}
		//		else
		//		{
		//			// 非表示
		//			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].Hidden		= true;		// 引当額 受注 (入金引当額)
		//			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Sales].Hidden	= true;		// 引当残 受注 (請求売上マスタ)
		//			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].Hidden			= true;		// 引当額 諸費用 (入金引当額)
		//			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Sales].Hidden	= true;		// 引当残 諸費用 (請求売上マスタ)
		//			// 表示
		//			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Hidden			= false;	// 引当額 共通 (入金引当額)
		//			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Hidden		= false;	// 引当残 共通 (請求売上マスタ)
		//		}
		//	}
		//	else
		//	{
		//		// 非表示
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].Hidden		= true;		// 引当額 受注 (入金引当額)
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepoAlwcBlnce_Sales].Hidden	= true;		// 引当残 受注 (請求売上マスタ)
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].Hidden			= true;		// 引当額 諸費用 (入金引当額)
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwcBlnce_Sales].Hidden	= true;		// 引当残 諸費用 (請求売上マスタ)
		//		// 表示
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Hidden			= false;	// 引当額 共通 (入金引当額)
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Hidden		= false;	// 引当残 共通 (請求売上マスタ)
		//	}
		//	
		//	// 詳細表示による表示制御
		//	if (checkDetail == true)
		//	{
		//		// 表示
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].Hidden			= false;		// 受注番号
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Hidden	= false;		// 引当済 共通 (請求売上マスタ)
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcceptAnOrderSales].Hidden		= false;		// 受注売上額
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctTotalVariousCost].Hidden			= false;		// 諸費用額
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctTotalSales].Hidden				= false;		// 受注合計額
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].Hidden			= false;		// 入金内訳
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].Hidden			= false;		// 締めフラグ
		//	}
		//	else
		//	{
		//		// 非表示
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].Hidden			= true;			// 受注番号
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Hidden	= true;			// 引当済 共通 (請求売上マスタ)
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcceptAnOrderSales].Hidden		= true;			// 受注売上額
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctTotalVariousCost].Hidden			= true;			// 諸費用額
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctTotalSales].Hidden				= true;			// 受注合計額
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].Hidden			= true;			// 入金内訳
		//		bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].Hidden			= true;			// 締めフラグ
		//	}
		//
		//	// 常に非表示
		//	bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Hidden			= true;			// 請求売上赤伝区分
		//	bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].Hidden			= true;			// 請求売上赤伝名称
		//	bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Sales].Hidden		= true;			// 引当済 受注 (請求売上マスタ)
		//	bdDmdSales.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Sales].Hidden		= true;			// 引当済 諸費用 (請求売上マスタ)
		//	bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus].Hidden				= true;			// ステータス
		//	bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSearchSlipDate].Hidden				= true;			// 伝票日付
		//	bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAddUpADate].Hidden					= true;			// 売上日
		//	bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSalesDataRow].Hidden					= true;			// 自身のDataRow
		//}
		#endregion
		
		/// <summary>
		/// 受注引当グリッド表示列変更処理
		/// </summary>
		/// <param name="checkDetail">詳細表示 有無</param>
		/// <param name="checkSeparateCost">諸費用別入金 有無</param>
		/// <remarks>
		/// <br>Note       : 受注引当グリッドの表示列を変更します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void SalesViewSettingColumn(bool checkDetail, bool checkSeparateCost)
		{
			UltraGridBand bdDmdSales = grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable];

            // 常に表示
            // 引当額 共通 (入金引当額)
			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Hidden			= false;
            // 引当残 共通 (請求売上マスタ)
			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Hidden		= false;
            // 伝票合計(税込)
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctTotalSales].Hidden = false;

			// 詳細表示による表示制御
			if (checkDetail == true)
			{
				// 表示
		        // 売上伝票番号
				bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSalesSlipNum].Hidden			    = false;
                
                // 2007.10.10 del start --------------------------------------------------------->>
                // ↓ 20070525 18322 a
                //// POSレシート番号
                //bdDmdSales.Columns[InputDepositNormalTypeAcs.ctPosReceiptNo].Hidden		        = false;
                //// レジ処理日
                //bdDmdSales.Columns[InputDepositNormalTypeAcs.ctRegiProcDate].Hidden		        = false;
                // ↑ 20070525 18322 a
                // 2007.10.10 del end -----------------------------------------------------------<<
                // 引当済 共通 (請求売上マスタ)
				bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Hidden	= false;
                // 入金内訳
				bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].Hidden			= false;
                // 締めフラグ
				bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].Hidden			= false;
			}
			else
			{
				// 非表示
			    // 売上伝票番号
                // --UPD 2011/07/22 ---->>>>>>
				//  bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSalesSlipNum].Hidden	    		= true;
                bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSalesSlipNum].Hidden = false;
                // --UPD 2011/07/22 ----<<<<<

                // 2007.10.10 del start --------------------------------------------------------->>
                // ↓ 20070525 18322 a
                //// POSレシート番号
                //bdDmdSales.Columns[InputDepositNormalTypeAcs.ctPosReceiptNo].Hidden		        = true;
                //// レジ処理日
                //bdDmdSales.Columns[InputDepositNormalTypeAcs.ctRegiProcDate].Hidden		        = true;
                // ↑ 20070525 18322 a
                // 2007.10.10 del end -----------------------------------------------------------<<

                // 引当済 共通 (請求売上マスタ)
				bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Hidden	= true;
                // 入金内訳
				bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepositAlwBtn].Hidden			= true;
			    // 締めフラグ
				bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].Hidden			= true;
			}

			// 常に非表示
            // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
            // 変更前引当残(請求売上マスタ)
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctBfDepositAlwcBlnce_Sales].Hidden = true;
            // 変更前引当済(請求売上マスタ)
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctBfDepositAllowance_Sales].Hidden = true;
            // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<
            // 請求売上赤伝区分
			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Hidden	= true;
			// 請求売上赤伝名称
			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].Hidden	= true;
			// 受注番号
            // bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].Hidden      = true;  // 2007.10.10 del
            // 受注ステータス
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatus_Alw].Hidden = true;
            // 受注ステータス名
			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAcptAnOdrStatusNm].Hidden	= true;
            // ---UPD 2011/07/22 ------>>>>>>>
            // 伝票種類
			//bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSalesKind].Hidden        	= true;
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSalesKind].Hidden            = false;
            // 前回月次締め日
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctLastMonthlyDate].Hidden      = true;
            // ---UPD 2011/07/22 ------<<<<<<<
            // 売上形式
			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSalesName].Hidden    		= true;
            // 伝票日付
			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSearchSlipDate].Hidden		= true;
            // 売上日
			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAddUpADate].Hidden			= true;
            // 請求先コード
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctClaimCode].Hidden = true;
            // 請求先名称
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctClaimName].Hidden = true;
            // 請求先名称2
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctClaimName2].Hidden = true;
            // 請求先略称
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctClaimSnm].Hidden = true;
            // 得意先コード
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctCustomerCode].Hidden			= true;
            // 得意先名称
            // ---UPD 2011/07/22 ----->>>>>
            //bdDmdSales.Columns[InputDepositNormalTypeAcs.ctCustomerName].Hidden			= true;
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctCustomerName].Hidden = false;
            // ---UPD 2011/07/22 -----<<<<<
            // 得意先名称2
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctCustomerName2].Hidden		= true;
            // 得意先略称
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctCustomerSnm].Hidden = true;

            // ↓ 20070525 18322 a
            // 売掛区分(0:売掛なし,1:売掛)
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctAccRecDivCd].Hidden	        = true;
            // レジ番号
            //bdDmdSales.Columns[InputDepositNormalTypeAcs.ctCashRegisterNo].Hidden		= true;   // 2007.10.10 del
            // ↑ 20070525 18322 a
            
            // 自身のDataRow
			bdDmdSales.Columns[InputDepositNormalTypeAcs.ctSalesDataRow].Hidden			= true;

            //-----ADD 2010/12/20----->>>>>
            bdDmdSales.Columns[InputDepositNormalTypeAcs.ctDepSaleSlipNum].Hidden = true;
            //-----ADD 2010/12/20-----<<<<<
		}
        // ↑ 20070125 18322 c

		/// <summary>
		/// 選択入金データ展開処理
		/// </summary>
        /// <param name="sltmode">選択モード</param>
		/// <remarks>
		/// <br>Note       : 選択された入金データの展開を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
        /// <br>UpdateNote : 2009/12/16 李占川 ＰＭ．ＮＳ保守依頼④</br>
        /// <br>             金額入力時のｶｰｿﾙ遷移が遅いのを修正</br>
        /// <br>UpdateNote : 2012/12/24 王君 </br>
        /// <br>           : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
		/// </remarks>
        //private void ExpandSelectDeposit() // DEL 王君 2012/12/24 Redmine#33741
        private void ExpandSelectDeposit(bool sltmode) // ADD 王君 2012/12/24 Redmine#33741
		{
			// 選択行が無い時は処理を抜ける
            //if (grdDepositList.ActiveRow == null) return; // DEL 王君 2012/12/24 Redmine#33741
            // ----- ADD 王君 2012/12/24 Redmine#33741------->>>>>
            if (sltmode)
            {
                if (grdDepositList.ActiveRow == null)
                {
                    this.grdDepositList.Rows[0].Activate();
                }
            }
            else
            {
                if (grdDepositList.ActiveRow == null)
                {
                    return;
                }
            }
            // ----- ADD 王君 2012/12/24 Redmine#33741-------<<<<<
			UltraGridRow row;

			if (grdDepositList.ActiveRow.Band.Key == InputDepositNormalTypeAcs.ctRelation_DepositAllowance)
			{
				row = grdDepositList.ActiveRow.ParentRow;
			}
			else
			{
				row = grdDepositList.ActiveRow;
			}

			// 入金情報DataRow取得処理
			selectedDepositCopyRow = inputDepositNormalTypeAcs.GetSelectDepositCopyRow(row.Cells[InputDepositNormalTypeAcs.ctDepositDataRow].Value as DataRow);
			// 引当情報DataRow取得処理
			selectedAllowanceCopyRows = inputDepositNormalTypeAcs.GetSelectAllowanceCopyRow(row.Cells[InputDepositNormalTypeAcs.ctDepositDataRow].Value as DataRow);

            this._selectedSalesSlipNumAlwList = new List<int>();
            foreach (DataRow dr in selectedAllowanceCopyRows)
            {
                this._selectedSalesSlipNumAlwList.Add(int.Parse((string)dr[InputDepositNormalTypeAcs.ctSalesSlipNum_Alw]));
            }

			// DataRowコピー処理
			inputDepositNormalTypeAcs.CopyDepositDataRow(ref selectedDepositCopyRow, ref beforeSelectedDepositRow);
			inputDepositNormalTypeAcs.CopyAllowanceDataRow(ref selectedAllowanceCopyRows, ref beforeSelectedAllowanceRows);

			// 入金伝票入力欄表示処理
            //this.SetDisplayDeposit(selectedDepositCopyRow); // DEL 王君 2012/12/24 Redmine33741
            // ----- ADD 王君 2012/12/24 Redmine33741 ------->>>>>
            if (sltmode)
            {
                this.SetDisplayDeposit(selectedDepositCopyRow, 1);

            }
            else
            {
                this.SetDisplayDeposit(selectedDepositCopyRow, 0);
            }
            // ----- ADD 王君 2012/12/24 Redmine33741 -------<<<<<
			// 受注一覧の入金合計、入金引当残に反映
            //labDepositTotal.Text = edtDepositTotal.GetValue().ToString("###,###,##0"); // DEL 2009/12/16
            labDepositTotal.Text = string.Format("###,###,##0", edtDepositTotal.DataText); // ADD 2009/12/16
            
            // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
            //labDepositAlwcBlnce.Text = Convert.ToInt64(selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit]).ToString("###,###,##0");

            // 売上引当合計計算処理
            this.SetSalesAllowanceTotal();
            
            SetDepositAlwcBlance();
            // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<

			// 入金伝票状態内容表示
			uint retVal = this.IsLockDepositData(selectedDepositCopyRow);
			if ((retVal & 0x0000f000) == 0x0000f000)		// --- 赤伝入金(赤) --- //
			{
				labDepositList.Text = "赤入金伝票の為、更新 は出来ません。";
				return;
			}
			if ((retVal & 0x000f0000) == 0x000f0000)		// --- 赤伝入金(黒) --- //
			{
				labDepositList.Text = "入金伝票(相殺済み黒)の為、更新 / 削除 は出来ません。";
				return;
			}
			if ((retVal & 0x0000000f) == 0x0000000f)		// --- 締済入金 --- //
			{
				// 引当無しモードの時
				if (depositRelDataAcs.AllowanceProc == 2)
				{
					labDepositList.Text = "締済入金伝票の為、 更新 / 削除 は出来ません。";
				}
				else
				{
					labDepositList.Text = "締済入金伝票の為、 更新 / 削除 は出来ません。 (引当更新は可能です)";
				}
				return;
			}
            // 2007.10.10 del start -------------------------------------------------->>
            //// ↓ 20070525 18322 a
            //if ((retVal & 0x00f00000) == 0x00f00000)		// --- レジ入力 --- //
            //{
            //    if ((retVal & 0x0f000000) != 0x0f000000)	// --- 売掛以外 --- //
            //    {
            //        labDepositList.Text = "POS売上入力で作成された入金の為、更新／削除はできません。";
            //        return;
            //    }
            //}
            //// ↑ 20070525 18322 a
            // 2007.10.10 del end ----------------------------------------------------<<

			if ((retVal & 0x000000f0) == 0x000000f0)		// --- 自動入金 --- //
			{
				labDepositList.Text = "自動入金伝票の為、更新 / 削除  は出来ません。";
				return;
			}
			if ((retVal & 0x00000f00) == 0x00000f00)		// --- 修正不可モード --- //
			{
				// 引当無しモードの時
				if (depositRelDataAcs.AllowanceProc == 2)
				{
					labDepositList.Text = "修正不可モードの為、更新 は出来ません。";
				}
				else
				{
					labDepositList.Text = "修正不可モードの為、更新 は出来ません。 (引当更新は可能です)";
				}
				return;
			}
		}

		/// <summary>
		/// 選択入金引当データ展開処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 選択された入金引当データの展開を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void ExpandSelectDepositAllowance()
		{
			// 入金未選択の時
			if (selectedDepositCopyRow == null)
			{
				return;
			}

			// 今回選択されている入金番号の取得
			int depositSlipNo = Convert.ToInt32(selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositSlipNo]);

			// 前回展開データと違う時は展開しなおし
			if (expandAllowanceDepositSlipNo != depositSlipNo)
			{
				// 受注引当一覧の行を非アクティブとする
				grdDmdSalesList.ActiveRow = null;

				// 受注伝票変更前画面初期化処理
				// grdDmdSalesList.DeActivateRow"が効かない時があるので
				this.DisplyClearToDmdSalesChange();

				// 引当情報の請求売上情報展開処理
				inputDepositNormalTypeAcs.ExpandAllowanceRelationData(selectedAllowanceCopyRows);

				// 展開した入金番号を保持
				expandAllowanceDepositSlipNo = depositSlipNo;

				// 売上引当合計計算処理
				this.SetSalesAllowanceTotal();
			}

            /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
			// 預り金の時
			if (opsDepositDiv.CheckedIndex == 1)
			{
				// 一括引当ボタン
				btnAllAwl.Enabled = false;
			}
			else
			{
				// 修正不可入金データ判断処理 赤伝の時
				uint retVal = this.IsLockDepositData(selectedDepositCopyRow);

				if (((retVal & 0x0000f000) == 0x0000f000) || ((retVal & 0x000f0000) == 0x000f0000))
				{
					// 一括引当ボタン
					btnAllAwl.Enabled = false;
				}
				else
				{
					// 一括引当ボタン
					btnAllAwl.Enabled = true;
				}
			}
               --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 得意先情報欄初期化処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 得意先情報欄の初期化を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void ClearCustomer()
		{
			// 得意先情報欄
			tNedit_CustomerCode.Clear();
			edtCustomerName.Clear();
			edtTotalDay.Clear();
			// 請求対象期間
			labDmdSpan.Text				= "";

            // ↓ 20070118 18322 c MA.NS用に変更
            #region SF 得意先情報クリア(コメントアウト)
            //labAcpOdrTtlLMBlDmd.Text      = "";
            //labTtlLMVarCstDmdBlnce.Text	= "";
			//labTotalBeforeBalance.Text	= "";
			//labTtlThisTimeDmdNrml.Text	= "";
			//labAfCalTtlVCstDepoDmd.Text	= "";
			//labTotalDeposit.Text		= "";
			//labTtlThisNetSales.Text	= "";
			//labDmdVarCst.Text			= "";
			//labTotalSales.Text			= "";
			//labTtlThisTimeDmdDepo.Text	= "";
			//labAfCalTtlVCstBfRMDmd.Text	= "";
			//labTotalBeforeDeposit.Text	= "";
			//labAfCalDemandPrice.Text	= "";
			//labAfCalTtlVCstBlDmd.Text	= "";
			//labTotalBalance.Text		= "";
            #endregion

            #region MA.NS 得意先情報クリア
            // 2007.10.10 hikita del start ----------------->>
            //LastTimeDemand.Text	= "";
            //labTtlThisTimeDmdNrml.Text = "";
            //ThisTimeSales.Text = "";
            //ThisSalesTax.Text ="";
            //TtlIncDtbtTaxExc.Text = "";
            //TtlIncDtbtTax.Text = "";
            //OfsThisTimeSales.Text = "";
            //OfsThisSalesTax.Text = "";
            //AfCalDemandPrice.Text = "";
            // 2007.10.10 hikita del end -------------------<<
            #endregion
            // ↑ 20070118 18322 c

            // 2007.10.10 hikita add start ----------------->>
            lbl_AcpOdrTtl3TmBfBlDmd.Text = "";
            lbl_AcpOdrTtl2TmBfBlDmd.Text = "";
            lbl_LastTimeDemand.Text = "";
            lbl_BlnceTtl.Text = "";
            lbl_ThisTimeDmdTtl.Text = "";
            lbl_Balance.Text = "";
            lbl_ThisTimeSales.Text = "";
            lbl_AfCalDemandPrice.Text = "";
            // 2007.10.10 hikita add end -------------------<<
		}

		/// <summary>
		/// 入金伝票入力欄初期化処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 入金伝票入力欄の初期化を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void ClearDeposit()
		{
			// 入金伝票入力欄表示中フラグ
			setDisplayDepositFlg = true;
            
            // 入金伝票入力欄
			edtDepositSlipNo.Clear();
			labDebitNoteLinkDepoNo.Text = "";
			edtDepositDate.Clear();

			opsDepositDiv.Visible = true;
            // 2007.10.10 del start ------------------------------------>>
            //cmbCreditOrLoanCd.Value = 0;
            //edtCreditCompanyCode.Clear();
            //edtCreditCompanyName.Clear();
            // 2007.10.10 del end --------------------------------------<<
			opsDepositDiv.CheckedIndex = -1;

			foreach (Infragistics.Win.UltraWinTree.UltraTreeNode nd in treMoneyKind.Nodes)
			{
				nd.CheckedState = CheckState.Unchecked;
			}

            // ↓ 20070118 18322 c MA.NS用に変更
            #region SF 受注・諸費用クリア(コメントアウト)
			//edtAcpOdrDeposit.Clear();
			//edtAcpOdrChargeDeposit.Clear();
			//edtAcpOdrDisDeposit.Clear();
			//edtAcpOdrDepositTotal.Clear();
            //
            //edtVariousCostDeposit.Clear();
			//edtVarCostChargeDeposit.Clear();
			//edtVarCostDisDeposit.Clear();
			//edtVariousCostDepositTotal.Clear();
            #endregion
            // ↑ 20070118 18322 c

			edtDeposit.Clear();
            edtFeeDeposit.Clear();
			edtDiscountDeposit.Clear();
            // ↓ 20070126 18322 a
            //edtRebateDeposit.Clear();   // 2007.10.10 del
            // ↑ 20070126 18322 a
			edtDepositTotal.Clear();
			edtDraftDrawingDate.Clear();
			edtDraftPayTimeLimit.Clear();

            // 2007.10.10 add start ---------------------->>
            tNedit_BankCode.Clear();
            teditBankName.Clear();
            tEdit_DraftNo.Clear();
            cmbDraftKind.Clear();
            cmbDraftDivide.Clear();
            // 2007.10.10 add end ------------------------<<

			// 入金伝票入力欄表示中フラグ
			setDisplayDepositFlg = false;
        }
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
        /// 画面情報初期化処理
        /// </summary>
        private void ClearScreen()
        {
            ClearCustomer();
            ClearDeposit();
            ClearDepositList();
            ClearSalesList();

            this.tabList.Tabs[1].Enabled = true;

            this.selectedDepositCopyRow = null;
            selectedAllowanceCopyRows = new ArrayList();

            this._FirstStartFlag = true; // ADD 2010/06/17
        }

        /// <summary>
        /// 得意先情報欄初期化処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 得意先情報欄の初期化を行います。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// </remarks>
        private void ClearCustomer()
        {
            // 伝票日付制御初期値設定
            this.DepoSlipDateClrDiv_tComboEditor.Value = depositRelDataAcs.DepoSlipDateClrDiv;

            this.tNedit_CustomerCode.Clear();       // 得意先コード
            this.edtCustomerName.Clear();           // 得意先名称
            this.edtTotalDay.Clear();               // 締/集金
            this.labDmdSpan.Text = "";              // 請求対象期間
            this.lbl_AcpOdrTtl3TmBfBlDmd.Text = ""; // 前前々回残高
            this.lbl_AcpOdrTtl2TmBfBlDmd.Text = ""; // 前々回残高
            this.lbl_LastTimeDemand.Text = "";      // 前回残高
            this.lbl_BlnceTtl.Text = "";            // 残高合計
            this.lbl_ThisTimeDmdTtl.Text = "";      // 今回入金額
            this.lbl_Balance.Text = "";             // 差引残高
            this.lbl_ThisTimeSales.Text = "";       // 今回売上
            this.lbl_AfCalDemandPrice.Text = "";    // 更新後残高

            this._prevCustomerCode = 0;
            this._depositCustDmdPrc = new DepositCustDmdPrc();
        }

        /// <summary>
        /// 入金伝票入力欄初期化処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 入金伝票入力欄の初期化を行います。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// <br>UpdateNote : K2012/07/13 FSI今野 山形部品個別依頼</br>
        /// <br>             振込金額入力時は独自の銀行コードの入力を可能に修正</br>
        /// <br>Update Note: 2012/09/21 田建委</br>
        /// <br>管理番号   : 2012/10/17配信分</br>
        /// <br>             Redmine#32415 発行者の追加対応</br>
        /// </remarks>
        private void ClearDeposit()
        {
            // 2011/05/16 Add >>>
            // 得意先変更時は初期化しない
            if (_customerChangeFlg) return;
            // 2011/05/16 Add <<<
            this.edtDepositSlipNo.Clear();          // 入金番号
            this.labDebitNoteLinkDepoNo.Text = "";
            this.edtDepositDate.Clear();            // 入金日 
            this.edtFeeDeposit.Clear();             // 手数料
            this.edtDiscountDeposit.Clear();        // 値引
            this.edtDepositTotal.Clear();           // 入金合計
            //this.edtDraftDrawingDate.Clear();       // 振出日
            this.edtOutline.Clear();                // 摘要
            //this.tNedit_BankCode.Clear();           // 銀行コード
            //this.teditBankName.Clear();             // 銀行名称
            //this.tEdit_DraftNo.Clear();             // 手形番号
            //this.cmbDraftKind.Clear();              // 手形種類
            //this.cmbDraftDivide.Clear();            // 手形区分

            //----- ADD 2012/09/21 田建委 redmine#32415 ---------->>>>>
            this.tEdit_EmployeeCode.Text = this.employee.EmployeeCode.Trim();
            this.tEdit_SalesInputName.Text = this.employee.Name.Trim();
            //----- ADD 2012/09/21 田建委 redmine#32415 ----------<<<<<

            // 入金内訳グリッド
            for (int rowIndex = 0; rowIndex < this.grdDepositKind.Rows.Count; rowIndex++)
            {
                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = "";
                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag = 0;
                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Value = DBNull.Value;
                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Value = DBNull.Value;
                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Value = DBNull.Value;
                //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                if (this._opt_YamagataCtrl == (int)Option.ON)
                {
                    // --- ADD K2012/07/13 ---------->>>>>
                    if ((int)this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value == 102)
                    {
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = "00";
                    }
                    else
                    {
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = DBNull.Value;
                    }
                    // --- ADD K2012/07/13 ----------<<<<<
                }
                //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.Disabled;
                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.Disabled;
                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.Disabled;
                //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                if (this._opt_YamagataCtrl == (int)Option.ON)
                {
                    // --- ADD K2012/07/13 ---------->>>>>
                    this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                    // --- ADD K2012/07/13 ----------<<<<<
                }
                //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
            }

            //this._prevBankCode = 0;
        }

        /// <summary>
        /// 入金一覧初期化処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 入金一覧の初期化を行います。</br>
        /// <br>Programmer : 97036 amami</br>
        /// <br>Date       : 2005.07.21</br>
        /// </remarks>
        private void ClearDepositList()
		{
			// 入金情報DataSet初期化処理
			inputDepositNormalTypeAcs.ClearDsDepositInfo();

            this.detDepositDateStart.SetDateTime(new DateTime());
            this.detDepositDateEnd.SetDateTime(new DateTime());
            this.opsAlwcDepositCall.CheckedIndex = 0;
            this.edtSearchDepositSlipNo.Clear();
            this.labDepositList.Text = "";
		}

		/// <summary>
		/// 受注引当一覧初期化処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 受注引当一覧の初期化を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void ClearSalesList()
		{
			// 受注情報DataSet初期化処理
			inputDepositNormalTypeAcs.ClearDmdSalesInfo();

            this.labDepositTotal.Text = "";
            this.labDepositAlwcBlnce.Text = "";
            this.labSalesAllowanceTotal.Text = "";
            this.labDmdSalesList.Text = "";
            this.detSearchSlipDateStart.SetDateTime(new DateTime());
            this.detSearchSlipDateEnd.SetDateTime(new DateTime());
            this.opsAlwcDmdSalesCall.CheckedIndex = 0;
            this.tEdit_SalesSlipNum.Clear();
		}

		/// <summary>
		/// 得意先情報欄表示処理
		/// </summary>
		/// <param name="depositCustomer">入金得意先情報クラス</param>
		/// <remarks>
		/// <br>Note       : 得意先の情報を表示します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void DisplayCustomer(DepositCustomer depositCustomer)
		{
			if (depositCustomer == null) return;

            this._claimCode = depositCustomer.ClaimCode;

			// 得意先コード
			tNedit_CustomerCode.SetInt(depositCustomer.CustomerCode);

			// 得意先略称
            edtCustomerName.DataText = depositCustomer.SNm.Trim();

			// 締日
			edtTotalDay.DataText = depositCustomer.TotalDay.ToString() + "日締  " + 
				depositCustomer.CollectMoneyName.Trim() + depositCustomer.CollectMoneyDay.ToString() + "日 集金";

		}

        /// <summary>
        /// 請求金額情報欄表示処理
        /// </summary>
        /// <param name="depositCustDmdPrc">入金得意先請求金額情報クラス</param>
        /// <remarks>
        /// <br>Note       : 請求金額の情報を表示します。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// <br>Update Note: 2010/12/20 李占川 PM.NS障害改良対応(12月分)
        /// <br>             ①鑑部の集計期間の終了日をMAXに変更する。</br>
        /// </remarks>
        private void DisplayCustDmdPrc(DepositCustDmdPrc depositCustDmdPrc)
        {
            if (depositCustDmdPrc == null) return;

            this._depositCustDmdPrc = depositCustDmdPrc.Clone();

            string fromText = "";
            if (depositCustDmdPrc.StartDateSpan <= 19800101)
            {
                // 初期値
                fromText = "              ";
            }
            else
            {
                fromText = TDateTime.DateTimeToString("yyyy年mm月dd日", TDateTime.LongDateToDateTime(depositCustDmdPrc.StartDateSpan));
            }

            // --- UPD 2010/12/20 ---------->>>>>
            // 請求対象期間
            //labDmdSpan.Text = "( 請求対象期間 ： " + fromText + " ～ " +
            //    TDateTime.DateTimeToString("yyyy年mm月dd日", TDateTime.LongDateToDateTime(depositCustDmdPrc.EndDateSpan)) + " )";
            labDmdSpan.Text = "( 請求対象期間 ： " + fromText + " ～  )";
            // --- UPD 2010/12/20  ----------<<<<<

            // 前前々回残高
            lbl_AcpOdrTtl3TmBfBlDmd.Text = depositCustDmdPrc.AcpOdrTtl3TmBfBlDmd.ToString("##,###,###,##0");
            
            // 前々回残高
            lbl_AcpOdrTtl2TmBfBlDmd.Text = depositCustDmdPrc.AcpOdrTtl2TmBfBlDmd.ToString("##,###,###,##0");
            
            // 前回残高
            lbl_LastTimeDemand.Text = depositCustDmdPrc.LastTimeDemand.ToString("##,###,###,##0");
            
            // 残高合計
            Int64 iBlnceTtl = depositCustDmdPrc.AcpOdrTtl3TmBfBlDmd + depositCustDmdPrc.AcpOdrTtl2TmBfBlDmd + depositCustDmdPrc.LastTimeDemand;
            lbl_BlnceTtl.Text = iBlnceTtl.ToString("##,###,###,##0");
            
            // 今回入金
            lbl_ThisTimeDmdTtl.Text = depositCustDmdPrc.ThisTimeDmdNrml.ToString("##,###,###,##0");
            
            // 差引残高
            Int64 iBalance = iBlnceTtl - depositCustDmdPrc.ThisTimeDmdNrml;
            lbl_Balance.Text = iBalance.ToString("##,###,###,##0");
            
            // 今回売上額
            Int64 iThisTimeSales = depositCustDmdPrc.OfsThisTimeSales + depositCustDmdPrc.OfsThisSalesTax;
            lbl_ThisTimeSales.Text = iThisTimeSales.ToString("##,###,###,##0");
            
            // 更新後残高  
            Int64 iAfCalDemandPrice = iBalance + iThisTimeSales;
            lbl_AfCalDemandPrice.Text = iAfCalDemandPrice.ToString("##,###,###,##0");
        }

        /// <summary>
        /// 手形期日グリッド展開処理
        /// </summary>
        /// <param name="targetDate">手形期日</param>
        /// <param name="rowIndex">対象行インデックス</param>
        private void SetPayTimeLimit(DateTime targetDate, int rowIndex)
        {
            // ADD 2010/04/30 MANTIS対応[15195]：小切手、手形の日付がDateTime.MinValueの場合、表示しない ---------->>>>>
            if (targetDate == DateTime.MinValue)
            {
                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Value = DBNull.Value;
                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Value = DBNull.Value;
                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Value = DBNull.Value;
            }
            else
            // ADD 2010/04/30 MANTIS対応[15195]：小切手、手形の日付がDateTime.MinValueの場合、表示しない ----------<<<<<
            {
                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Value = targetDate.Year.ToString() + "年";
                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Value = targetDate.Month.ToString() + "月";
                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Value = targetDate.Day.ToString() + "日";
            }
        }

        /// <summary>
        /// グリッド行Enabled変更処理
        /// </summary>
        /// <param name="rowActivation">Activation</param>
        private void ChangeGridEnabled(Activation rowActivation)
        {
            for (int rowIndex = 0; rowIndex < this.grdDepositKind.Rows.Count; rowIndex++)
            {
                this.grdDepositKind.Rows[rowIndex].Activation = rowActivation;
            }
        }

        /// <summary>
        /// 入金伝票入力欄表示処理
        /// </summary>
        /// <param name="dr">入金データセットSelectDataRow</param>
        /// <param name="mode">検索モード(0:得意先モード、1:入金伝票番号モード、2:前回日付)</param>
        /// <remarks>
        /// <br>Note       : 入金情報を表示します。</br>
        /// <br>Programmer : 97036 amami</br>
        /// <br>Date       : 2005.07.21</br>
        /// <br>UpdateNote : 2009/12/16 李占川 ＰＭ．ＮＳ保守依頼④</br>
        /// <br>             金額入力時のｶｰｿﾙ遷移が遅いのを修正</br>
        /// <br>UpdateNote : K2012/07/13 FSI今野 山形部品個別依頼</br>
        /// <br>             振込金額入力時の銀行コード処理を追加</br>
        /// <br>Update Note: 2012/09/21 田建委</br>
        /// <br>管理番号   : 2012/10/17配信分</br>
        /// <br>             Redmine#32415 発行者の追加対応</br>
        /// <br>Update Note: 2012/12/24 王君</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の追加対応</br>
        /// </remarks>
        //private void SetDisplayDeposit(DataRow dr) // DEL 王君 2012/12/24 Redmine#33741
        private void SetDisplayDeposit(DataRow dr, int mode)// ADD 王君 2012/12/24 Redmine#33741
        {
            // 入金番号
            edtDepositSlipNo.SetInt(Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDepositSlipNo]));

            // 入金赤黒区分
            switch (Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDepositDebitNoteCd]))
            {
                // 赤伝
                case 1:
                    edtDepositSlipNo.Appearance.ForeColor = Color.Red;
                    labDebitNoteLinkDepoNo.Appearance.ForeColor = Color.DarkOrchid;
                    labDebitNoteLinkDepoNo.Text = "[連結(黒)：" + (Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDebitNoteLinkDepoNo])).ToString("000000000") + "]";
                    break;
                // 相殺黒伝
                case 2:
                    edtDepositSlipNo.Appearance.ForeColor = Color.DarkOrchid;
                    labDebitNoteLinkDepoNo.Appearance.ForeColor = Color.Red;
                    labDebitNoteLinkDepoNo.Text = "[連結(赤)：" + (Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDebitNoteLinkDepoNo])).ToString("000000000") + "]";
                    break;
                // 通常黒伝
                default:
                    edtDepositSlipNo.Appearance.ForeColor = Color.Black;
                    labDebitNoteLinkDepoNo.Appearance.ForeColor = Color.Black;
                    labDebitNoteLinkDepoNo.Text = "";
                    break;
            }
            // ---- ADD 王君 2012/12/24 Redmine#33741 -------->>>>>
            // 入金計上日
            if (mode == 0)   // 得意先コード検索モード　
            {
                edtDepositDate.SetDateTime(TDateTime.LongDateToDateTime(Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDepositAddUpADate])));
            }
            else if (mode == 1)
            {
                // ---- ADD 王君 2012/12/24 Redmine#33741 --------<<<<<
                if (this.grdDepositList.Rows.Count > 0)
                {
                    //入金日
                    edtDepositDate.SetDateTime(TDateTime.LongDateToDateTime(Convert.ToInt32(this.grdDepositList.Rows[0].Cells[InputDepositNormalTypeAcs.ctDepositAddUpADate].Value)));
                // ---- ADD 王君 2012/12/24 Redmine#33741 -------->>>>>
                }
            }
            else if (mode == 2)
            {
                edtDepositDate.SetDateTime(this._edtDepositDateSave); 
            }
            else
            {
                edtDepositDate.Clear();
            }
            // ---- ADD 王君 2012/12/24 Redmine#33741 --------<<<<<
            this._prevDepositDate = edtDepositDate.GetDateTime();
            // 2011/05/16 Add >>>
            // 得意先変更時はセットしない
            if (!_customerChangeFlg)
            {
            // 2011/05/16 Add <<<
                // 共通 手数料
                edtFeeDeposit.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctFeeDeposit]));
                // 共通 値引
                edtDiscountDeposit.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctDiscountDeposit]));

                //----- ADD 2012/09/21 田建委 redmine#32415 ---------->>>>>
                // 発行者コード
                this.tEdit_EmployeeCode.DataText = dr[InputDepositNormalTypeAcs.ctDepositInputEmpCd].ToString().Trim();
                // 発行者名
                this.tEdit_SalesInputName.DataText = dr[InputDepositNormalTypeAcs.ctDepositInputEmpNm].ToString().Trim();
                //----- ADD 2012/09/21 田建委 redmine#32415 ----------<<<<<
            }   // 2011/05/16 Add
            // FIXME:共通 入金合計
            //edtDepositTotal.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctDepositTotal])); // DEL 2009/12/16
            edtDepositTotal.DataText = dr[InputDepositNormalTypeAcs.ctDepositTotal].ToString(); // ADD 2009/12/16

            // 摘要
            edtOutline.DataText = dr[InputDepositNormalTypeAcs.ctOutline].ToString();            

            // HACK:入金内訳データの存在フラグ
            bool existsDeposit = false;

            // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
            // 入金内訳グリッド
            for (int rowIndex = 0; rowIndex < this.grdDepositKind.Rows.Count; rowIndex++)
            {
                // 金種区分
                int moneyKindDiv = (Int32)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value;
                // 金種コード
                int moneyKindCode = (Int32)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value;

                if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv1]) &&
                    (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode1]))
                {
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv1];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode1];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindName].Value = (String)dr[InputDepositNormalTypeAcs.ctMoneyKindName1];

                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    // HACK:this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = ((Int64)dr[InputDepositNormalTypeAcs.ctDeposit1]).ToString("###,###");
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    existsDeposit = true;
                    long deposit = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit1];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = deposit.Equals(0) ? deposit.ToString() : deposit.ToString("###,###");
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<

                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit1];
                    if ((moneyKindDiv == 105) || (moneyKindDiv == 107))
                    {
                        SetPayTimeLimit((DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm1], rowIndex);

                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.AllowEdit;
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                    if (this._opt_YamagataCtrl == (int)Option.ON)
                    {
                        // --- ADD K2012/07/13 ---------->>>>>
                        if (moneyKindDiv == 102)
                        {
                            Int32 bankCode = dr[InputDepositNormalTypeAcs.ctBankCode] != null ? (Int32)dr[InputDepositNormalTypeAcs.ctBankCode] : -1;
                            if (bankCode != -1)
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = string.Format("{0:d2}", bankCode);
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.AllowEdit;
                            }
                            else
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = "00";
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                            }
                        }
                        // --- ADD K2012/07/13 ----------<<<<<
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                    continue;
                }

                if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv2]) &&
                    (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode2]))
                {
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv2];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode2];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindName].Value = (String)dr[InputDepositNormalTypeAcs.ctMoneyKindName2];

                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    //this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = ((Int64)dr[InputDepositNormalTypeAcs.ctDeposit2]).ToString("###,###");
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    existsDeposit = true;
                    long deposit = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit2];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = deposit.Equals(0) ? deposit.ToString() : deposit.ToString("###,###");
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<

                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit2];
                    if ((moneyKindDiv == 105) || (moneyKindDiv == 107))
                    {
                        SetPayTimeLimit((DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm2], rowIndex);

                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.AllowEdit;
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                    if (this._opt_YamagataCtrl == (int)Option.ON)
                    {
                        // --- ADD K2012/07/13 ---------->>>>>
                        if (moneyKindDiv == 102)
                        {
                            Int32 bankCode = dr[InputDepositNormalTypeAcs.ctBankCode] != null ? (Int32)dr[InputDepositNormalTypeAcs.ctBankCode] : -1;
                            if (bankCode != -1)
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = string.Format("{0:d2}", bankCode);
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.AllowEdit;
                            }
                            else
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = "00";
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                            }
                        }
                        // --- ADD K2012/07/13 ----------<<<<<
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                    continue;
                }

                if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv3]) &&
                    (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode3]))
                {
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv3];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode3];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindName].Value = (String)dr[InputDepositNormalTypeAcs.ctMoneyKindName3];

                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    //this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = ((Int64)dr[InputDepositNormalTypeAcs.ctDeposit3]).ToString("###,###");
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    existsDeposit = true;
                    long deposit = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit3];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = deposit.Equals(0) ? deposit.ToString() : deposit.ToString("###,###");
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<

                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit3];
                    if ((moneyKindDiv == 105) || (moneyKindDiv == 107))
                    {
                        SetPayTimeLimit((DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm3], rowIndex);

                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.AllowEdit;
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                    if (this._opt_YamagataCtrl == (int)Option.ON)
                    {
                        // --- ADD K2012/07/13 ---------->>>>>
                        if (moneyKindDiv == 102)
                        {
                            Int32 bankCode = dr[InputDepositNormalTypeAcs.ctBankCode] != null ? (Int32)dr[InputDepositNormalTypeAcs.ctBankCode] : -1;
                            if (bankCode != -1)
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = string.Format("{0:d2}", bankCode);
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.AllowEdit;
                            }
                            else
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = "00";
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                            }
                        }
                        // --- ADD K2012/07/13 ----------<<<<<
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                    continue;
                }

                if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv4]) &&
                    (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode4]))
                {
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv4];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode4];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindName].Value = (String)dr[InputDepositNormalTypeAcs.ctMoneyKindName4];

                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    //this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = ((Int64)dr[InputDepositNormalTypeAcs.ctDeposit4]).ToString("###,###");
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    existsDeposit = true;
                    long deposit = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit4];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = deposit.Equals(0) ? deposit.ToString() : deposit.ToString("###,###");
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<

                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit4];
                    if ((moneyKindDiv == 105) || (moneyKindDiv == 107))
                    {
                        SetPayTimeLimit((DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm4], rowIndex);

                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.AllowEdit;
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                    if (this._opt_YamagataCtrl == (int)Option.ON)
                    {
                        // --- ADD K2012/07/13 ---------->>>>>
                        if (moneyKindDiv == 102)
                        {
                            Int32 bankCode = dr[InputDepositNormalTypeAcs.ctBankCode] != null ? (Int32)dr[InputDepositNormalTypeAcs.ctBankCode] : -1;
                            if (bankCode != -1)
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = string.Format("{0:d2}", bankCode);
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.AllowEdit;
                            }
                            else
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = "00";
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                            }
                        }
                        // --- ADD K2012/07/13 ----------<<<<<
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                    continue;
                }

                if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv5]) &&
                    (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode5]))
                {
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv5];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode5];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindName].Value = (String)dr[InputDepositNormalTypeAcs.ctMoneyKindName5];
                    
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    //this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = ((Int64)dr[InputDepositNormalTypeAcs.ctDeposit5]).ToString("###,###");
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    existsDeposit = true;
                    long deposit = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit5];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = deposit.Equals(0) ? deposit.ToString() : deposit.ToString("###,###");
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<

                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit5];
                    if ((moneyKindDiv == 105) || (moneyKindDiv == 107))
                    {
                        SetPayTimeLimit((DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm5], rowIndex);

                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.AllowEdit;
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                    if (this._opt_YamagataCtrl == (int)Option.ON)
                    {
                        // --- ADD K2012/07/13 ---------->>>>>
                        if (moneyKindDiv == 102)
                        {
                            Int32 bankCode = dr[InputDepositNormalTypeAcs.ctBankCode] != null ? (Int32)dr[InputDepositNormalTypeAcs.ctBankCode] : -1;
                            if (bankCode != -1)
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = string.Format("{0:d2}", bankCode);
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.AllowEdit;
                            }
                            else
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = "00";
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                            }
                        }
                        // --- ADD K2012/07/13 ----------<<<<<
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                    continue;
                }

                if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv6]) &&
                    (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode6]))
                {
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv6];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode6];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindName].Value = (String)dr[InputDepositNormalTypeAcs.ctMoneyKindName6];

                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    //this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = ((Int64)dr[InputDepositNormalTypeAcs.ctDeposit6]).ToString("###,###");
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    existsDeposit = true;
                    long deposit = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit6];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = deposit.Equals(0) ? deposit.ToString() : deposit.ToString("###,###");
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<

                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit6];
                    if ((moneyKindDiv == 105) || (moneyKindDiv == 107))
                    {
                        SetPayTimeLimit((DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm6], rowIndex);

                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.AllowEdit;
                    }
                     //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                    if (this._opt_YamagataCtrl == (int)Option.ON)
                    {
                        // --- ADD K2012/07/13 ---------->>>>>
                        if (moneyKindDiv == 102)
                        {
                            Int32 bankCode = dr[InputDepositNormalTypeAcs.ctBankCode] != null ? (Int32)dr[InputDepositNormalTypeAcs.ctBankCode] : -1;
                            if (bankCode != -1)
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = string.Format("{0:d2}", bankCode);
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.AllowEdit;
                            }
                            else
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = "00";
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                            }
                        }
                        // --- ADD K2012/07/13 ----------<<<<<
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                    continue;
                }

                if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv7]) &&
                    (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode7]))
                {
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv7];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode7];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindName].Value = (String)dr[InputDepositNormalTypeAcs.ctMoneyKindName7];

                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    //this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = ((Int64)dr[InputDepositNormalTypeAcs.ctDeposit7]).ToString("###,###");
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    existsDeposit = true;
                    long deposit = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit7];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = deposit.Equals(0) ? deposit.ToString() : deposit.ToString("###,###");
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<

                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag= (Int64)dr[InputDepositNormalTypeAcs.ctDeposit7];
                    if ((moneyKindDiv == 105) || (moneyKindDiv == 107))
                    {
                        SetPayTimeLimit((DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm7], rowIndex);

                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.AllowEdit;
                    }
                     //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                    if (this._opt_YamagataCtrl == (int)Option.ON)
                    {
                        // --- ADD K2012/07/13 ---------->>>>>
                        if (moneyKindDiv == 102)
                        {
                            Int32 bankCode = dr[InputDepositNormalTypeAcs.ctBankCode] != null ? (Int32)dr[InputDepositNormalTypeAcs.ctBankCode] : -1;
                            if (bankCode != -1)
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = string.Format("{0:d2}", bankCode);
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.AllowEdit;
                            }
                            else
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = "00";
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                            }
                        }
                        // --- ADD K2012/07/13 ----------<<<<<
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                    continue;
                }

                if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv8]) &&
                    (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode8]))
                {
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv8];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode8];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindName].Value = (String)dr[InputDepositNormalTypeAcs.ctMoneyKindName8];

                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    //this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = ((Int64)dr[InputDepositNormalTypeAcs.ctDeposit8]).ToString("###,###");
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    existsDeposit = true;
                    long deposit = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit8];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = deposit.Equals(0) ? deposit.ToString() : deposit.ToString("###,###");
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<

                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit8];
                    if ((moneyKindDiv == 105) || (moneyKindDiv == 107))
                    {
                        SetPayTimeLimit((DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm8], rowIndex);

                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.AllowEdit;
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                    if (this._opt_YamagataCtrl == (int)Option.ON)
                    {
                        // --- ADD K2012/07/13 ---------->>>>>
                        if (moneyKindDiv == 102)
                        {
                            Int32 bankCode = dr[InputDepositNormalTypeAcs.ctBankCode] != null ? (Int32)dr[InputDepositNormalTypeAcs.ctBankCode] : -1;
                            if (bankCode != -1)
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = string.Format("{0:d2}", bankCode);
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.AllowEdit;
                            }
                            else
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = "00";
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                            }
                        }
                        // --- ADD K2012/07/13 ----------<<<<<
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                    continue;
                }

                if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv9]) &&
                    (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode9]))
                {
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv9];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode9];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindName].Value = (String)dr[InputDepositNormalTypeAcs.ctMoneyKindName9];

                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    //this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = ((Int64)dr[InputDepositNormalTypeAcs.ctDeposit9]).ToString("###,###");
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    existsDeposit = true;
                    long deposit = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit9];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = deposit.Equals(0) ? deposit.ToString() : deposit.ToString("###,###");
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<

                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit9];
                    if ((moneyKindDiv == 105) || (moneyKindDiv == 107))
                    {
                        SetPayTimeLimit((DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm9], rowIndex);

                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.AllowEdit;
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                    if (this._opt_YamagataCtrl == (int)Option.ON)
                    {
                        // --- ADD K2012/07/13 ---------->>>>>
                        if (moneyKindDiv == 102)
                        {
                            Int32 bankCode = dr[InputDepositNormalTypeAcs.ctBankCode] != null ? (Int32)dr[InputDepositNormalTypeAcs.ctBankCode] : -1;
                            if (bankCode != -1)
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = string.Format("{0:d2}", bankCode);
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.AllowEdit;
                            }
                            else
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = "00";
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                            }
                        }
                        // --- ADD K2012/07/13 ----------<<<<<
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                    continue;
                }

                if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv10]) &&
                    (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode10]))
                {
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv10];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value = (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode10];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindName].Value = (String)dr[InputDepositNormalTypeAcs.ctMoneyKindName10];

                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    //this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = ((Int64)dr[InputDepositNormalTypeAcs.ctDeposit10]).ToString("###,###");
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    existsDeposit = true;
                    long deposit = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit10];
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value = deposit.Equals(0) ? deposit.ToString() : deposit.ToString("###,###");
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<

                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag = (Int64)dr[InputDepositNormalTypeAcs.ctDeposit10];
                    if ((moneyKindDiv == 105) || (moneyKindDiv == 107))
                    {
                        SetPayTimeLimit((DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm10], rowIndex);

                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.AllowEdit;
                        this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.AllowEdit;
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                    if (this._opt_YamagataCtrl == (int)Option.ON)
                    {
                        // --- ADD K2012/07/13 ---------->>>>>
                        if (moneyKindDiv == 102)
                        {
                            Int32 bankCode = dr[InputDepositNormalTypeAcs.ctBankCode] != null ? (Int32)dr[InputDepositNormalTypeAcs.ctBankCode] : -1;
                            if (bankCode != -1)
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = string.Format("{0:d2}", bankCode);
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.AllowEdit;
                            }
                            else
                            {
                                this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = "00";
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                            }
                        }
                        // --- ADD K2012/07/13 ----------<<<<<
                    }
                    //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                    continue;
                }
            }
            // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

            // HACK:0円伝票用に合計金額を再表示
            if (string.IsNullOrEmpty(this.edtDepositTotal.DataText) && existsDeposit)
            {
                this.edtDepositTotal.DataText = "0";
            }

            bool posCash = false;
            uint retVal = this.IsLockDepositData(dr);
            if ((retVal & 0x00f00000) == 0x00f00000)		// --- レジ入力 --- //
            {
                if ((retVal & 0x0f000000) != 0x0f000000)	// --- 売掛以外 --- //
                {
                    posCash = true;
                }

                // レジ入力のチェックを除く
                retVal = retVal & 0xf00fffff;
            }

            // 新規伝票では無い時で、修正不可入金データ判断処理
            if (((edtDepositSlipNo.GetInt() != 0) && (retVal != 0)) || posCash)
            {
                // 編集できないデータかPOSの現金売のデータのとき
                labInputModeTitle.Text = "[ 参照 ]";
                // 入力不可
                edtDepositDate.ReadOnly = true;
                edtFeeDeposit.ReadOnly = true;
                edtDiscountDeposit.ReadOnly = true;
                //edtDraftDrawingDate.ReadOnly = true;

                edtOutline.ReadOnly = true;

                //----- ADD 2012/09/21 田建委 redmine#32415 ---------->>>>>
                this.tEdit_EmployeeCode.ReadOnly = true;
                this.uButton_SalesInputCode.Enabled = false;
                //----- ADD 2012/09/21 田建委 redmine#32415 ----------<<<<<

                // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
                //this.grdDepositKind.Enabled = false;
                ChangeGridEnabled(Activation.Disabled);
                // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<
            }
            else
            {
                if (edtDepositSlipNo.GetInt() != 0)
                {
                    labInputModeTitle.Text = "[ 更新 ]";
                }
                else
                {
                    labInputModeTitle.Text = "[ 新規 ]";
                }
                // 入力可
                edtDepositDate.ReadOnly = false;
                edtFeeDeposit.ReadOnly = false;
                edtDiscountDeposit.ReadOnly = false;
                //edtDraftDrawingDate.ReadOnly = false;
                edtOutline.ReadOnly = false;

                //----- ADD 2012/09/21 田建委 redmine#32415 ---------->>>>>
                this.tEdit_EmployeeCode.ReadOnly = false;
                this.uButton_SalesInputCode.Enabled = true;
                //----- ADD 2012/09/21 田建委 redmine#32415 ----------<<<<<

                // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
                //this.grdDepositKind.Enabled = true;
                ChangeGridEnabled(Activation.AllowEdit);
                // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<
            }
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 請求金額情報欄表示処理
		/// </summary>
		/// <param name="depositCustDmdPrc">入金得意先請求金額情報クラス</param>
		/// <remarks>
		/// <br>Note       : 請求金額の情報を表示します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void DisplayCustDmdPrc(DepositCustDmdPrc depositCustDmdPrc)
		{
			if (depositCustDmdPrc == null) return;

            // ↓ 20070418 18322 c MA.NS用に変更
			//// 請求対象期間
			//labDmdSpan.Text = "( 請求対象期間 ： " + 
			//	TDateTime.DateTimeToString("ggyy年mm月dd日", TDateTime.LongDateToDateTime(depositCustDmdPrc.StartDateSpan)) + " ～ " +
			//	TDateTime.DateTimeToString("ggyy年mm月dd日", TDateTime.LongDateToDateTime(depositCustDmdPrc.EndDateSpan)) + " )";

            string fromText = "";
            if (depositCustDmdPrc.StartDateSpan <= 19800101)
            {
                // 初期値
                fromText = "              ";
            }
            else
            {
                fromText = TDateTime.DateTimeToString("yyyy年mm月dd日", TDateTime.LongDateToDateTime(depositCustDmdPrc.StartDateSpan));
            }

			// 請求対象期間
			labDmdSpan.Text = "( 請求対象期間 ： " + fromText + " ～ " +
				TDateTime.DateTimeToString("yyyy年mm月dd日", TDateTime.LongDateToDateTime(depositCustDmdPrc.EndDateSpan)) + " )";
            // ↑ 20070418 18322 c

            // ↓ 20070118 18322 c MA.NS用に変更
            #region SF 合計額(コメントアウト)
            //// 前回残高 受注
			//labAcpOdrTtlLMBlDmd.Text = depositCustDmdPrc.AcpOdrTtlLMBlDmd.ToString("###,###,##0");
            //
			//// 前回残高 諸費用
			//labTtlLMVarCstDmdBlnce.Text = depositCustDmdPrc.TtlLMVarCstDmdBlnce.ToString("###,###,##0");
            //
			//// 前月残高 合計
			//total = depositCustDmdPrc.AcpOdrTtlLMBlDmd + depositCustDmdPrc.TtlLMVarCstDmdBlnce;
			//labTotalBeforeBalance.Text = total.ToString("###,###,##0");
            //
			//// 今回入金 受注＋受注値引
			//total = depositCustDmdPrc.AfCalTtlAOdrDepoDmd + depositCustDmdPrc.AfCalTtlAOdrDpDsDmd;
			//labTtlThisTimeDmdNrml.Text = total.ToString("###,###,##0");
            //
			//// 今回入金 諸費用＋諸費用値引
			//total = depositCustDmdPrc.AfCalTtlVCstDepoDmd + depositCustDmdPrc.AfCalTtlVCstDpDsDmd;
			//labAfCalTtlVCstDepoDmd.Text = total.ToString("###,###,##0");
            //
			//// 今回入金 合計 受注＋受注値引＋諸費用＋諸費用値引
			//total = depositCustDmdPrc.AfCalTtlAOdrDepoDmd + depositCustDmdPrc.AfCalTtlAOdrDpDsDmd + depositCustDmdPrc.AfCalTtlVCstDepoDmd + depositCustDmdPrc.AfCalTtlVCstDpDsDmd;
			//labTotalDeposit.Text = total.ToString("###,###,##0");
            //
			//// 今回売上 受注＋受注消費税
			//total = depositCustDmdPrc.AcpOdrTtlSalesDmd + depositCustDmdPrc.AcpOdrTtlConsTaxDmd;
			//labTtlThisNetSales.Text = total.ToString("###,###,##0");
            //
			//// 今回売上 諸費用＋諸費用消費税
			//total = depositCustDmdPrc.DmdVarCst + depositCustDmdPrc.TtlDmdVarCstConsTax;
			//labDmdVarCst.Text = total.ToString("###,###,##0");
            //
			//// 今回売上 受注＋受注消費税＋諸費用＋諸費用消費税
			//total = depositCustDmdPrc.AcpOdrTtlSalesDmd + depositCustDmdPrc.AcpOdrTtlConsTaxDmd + depositCustDmdPrc.DmdVarCst + depositCustDmdPrc.TtlDmdVarCstConsTax;
			//labTotalSales.Text = total.ToString("###,###,##0");
            //
			//// 今回前受金 受注＋受注値引
			//total = depositCustDmdPrc.AfCalTtlAOdrRMDmd + depositCustDmdPrc.AfCalTtlAOdrRMDsDmd;
			//labTtlThisTimeDmdDepo.Text = total.ToString("###,###,##0");
            //
			//// 今回前受金 諸費用＋諸費用値引
			//total = depositCustDmdPrc.AfCalTtlVCstBfRMDmd + depositCustDmdPrc.AfCalTtlVCstRMDsDmd;
			//labAfCalTtlVCstBfRMDmd.Text = total.ToString("###,###,##0");
            //
			//// 今回前受金 合計 受注＋受注値引＋諸費用＋諸費用値引
			//total = depositCustDmdPrc.AfCalTtlAOdrRMDmd + depositCustDmdPrc.AfCalTtlAOdrRMDsDmd + depositCustDmdPrc.AfCalTtlVCstBfRMDmd + depositCustDmdPrc.AfCalTtlVCstRMDsDmd;
			//labTotalBeforeDeposit.Text = total.ToString("###,###,##0");
            //
			//// 今回残高 受注
			//labAfCalDemandPrice.Text = depositCustDmdPrc.AfCalTtlAOdrBlDmd.ToString("###,###,##0");
            //
			//// 今回残高 諸費用
			//labAfCalTtlVCstBlDmd.Text = depositCustDmdPrc.AfCalTtlVCstBlDmd.ToString("###,###,##0");
            //
			//// 今回残高 合計
			//total = depositCustDmdPrc.AfCalTtlAOdrBlDmd + depositCustDmdPrc.AfCalTtlVCstBlDmd;
			//labTotalBalance.Text = total.ToString("###,###,##0");
            #endregion

            // 2007.10.10 del start ------------------------------------------------------->>
            //// 前回残高（前回請求金額）
            //LastTimeDemand.Text = depositCustDmdPrc.LastTimeDemand.ToString("##,###,###,##0");

            //// 今回入金
            //labTtlThisTimeDmdNrml.Text = depositCustDmdPrc.ThisTimeDmdTtl.ToString("##,###,###,##0");

            //// 今回売上 ＝ 今回売上金額
            //ThisTimeSales.Text = depositCustDmdPrc.ThisTimeSales.ToString("##,###,###,##0");

            //// 今回消費税
            //ThisSalesTax.Text = depositCustDmdPrc.ThisSalesTax.ToString("##,###,###,##0");

            //// 支払インセンティブ額合計(税抜)
            //TtlIncDtbtTaxExc.Text = depositCustDmdPrc.TtlIncDtbtTaxExc.ToString("##,###,###,##0");

            //// 支払インセンティブ額合計(消費税)
            //TtlIncDtbtTax.Text = depositCustDmdPrc.TtlIncDtbtTax.ToString("##,###,###,##0");

            //// 相殺後今回売上金額
            //OfsThisTimeSales.Text = depositCustDmdPrc.OfsThisTimeSales.ToString("##,###,###,##0");

            //// 相殺後今回売上消費税
            //OfsThisSalesTax.Text = depositCustDmdPrc.OfsThisSalesTax.ToString("##,###,###,##0");

            //// 残高
            //AfCalDemandPrice.Text = depositCustDmdPrc.AfCalDemandPrice.ToString("##,###,###,##0");
            // 2007.10.10 del end ---------------------------------------------------------<<

            // 2007.10.10 add start ------------------------------------------------------->>
            // 前前々回残高
            lbl_AcpOdrTtl3TmBfBlDmd.Text = depositCustDmdPrc.AcpOdrTtl3TmBfBlDmd.ToString("##,###,###,##0");
            // 前々回残高
            lbl_AcpOdrTtl2TmBfBlDmd.Text = depositCustDmdPrc.AcpOdrTtl2TmBfBlDmd.ToString("##,###,###,##0");
            // 前回残高
            lbl_LastTimeDemand.Text = depositCustDmdPrc.LastTimeDemand.ToString("##,###,###,##0");
            // 残高合計
            Int64 iBlnceTtl = 0;
            iBlnceTtl = depositCustDmdPrc.AcpOdrTtl3TmBfBlDmd - depositCustDmdPrc.AcpOdrTtl2TmBfBlDmd - depositCustDmdPrc.LastTimeDemand;
            lbl_BlnceTtl.Text = iBlnceTtl.ToString("##,###,###,##0");
            // 今回入金
            lbl_ThisTimeDmdTtl.Text = depositCustDmdPrc.ThisTimeDmdTtl.ToString("##,###,###,##0");
            // 差引残高
            Int64 iBalance = 0;
            iBalance = iBlnceTtl - depositCustDmdPrc.ThisTimeDmdTtl;
            lbl_Balance.Text = iBalance.ToString("##,###,###,##0");
            // 今回売上額
            lbl_ThisTimeSales.Text = depositCustDmdPrc.ThisTimeSales.ToString("##,###,###,##0");
            // 更新後残高  
            lbl_AfCalDemandPrice.Text = depositCustDmdPrc.AfCalDemandPrice.ToString("##,###,###,##0"); 
            // 2007.10.10 add end ---------------------------------------------------------<<
		}

        /// <summary>
		/// 入金伝票入力欄表示処理
		/// </summary>
		/// <param name="dr">入金データセットSelectDataRow</param>
		/// <remarks>
		/// <br>Note       : 入金情報を表示します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void SetDisplayDeposit(DataRow dr)
		{
			// 入金伝票入力欄表示中フラグ
			setDisplayDepositFlg = true;
            
            // 入金番号
			edtDepositSlipNo.SetInt(Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDepositSlipNo]));

			// 入金赤黒区分
			switch (Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDepositDebitNoteCd]))
			{
					// 赤伝
				case 1 :
					edtDepositSlipNo.Appearance.ForeColor = Color.Red;
					labDebitNoteLinkDepoNo.Appearance.ForeColor = Color.DarkOrchid;
					labDebitNoteLinkDepoNo.Text = "[連結(黒)：" + (Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDebitNoteLinkDepoNo])).ToString("000000000") + "]";
					break;
					// 相殺黒伝
				case 2:
					edtDepositSlipNo.Appearance.ForeColor = Color.DarkOrchid;
					labDebitNoteLinkDepoNo.Appearance.ForeColor = Color.Red;
					labDebitNoteLinkDepoNo.Text = "[連結(赤)：" + (Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDebitNoteLinkDepoNo])).ToString("000000000") + "]";
					break;
					// 通常黒伝
				default :
					edtDepositSlipNo.Appearance.ForeColor = Color.Black;
					labDebitNoteLinkDepoNo.Appearance.ForeColor = Color.Black;
					labDebitNoteLinkDepoNo.Text = "";
					break;
			}

            // 2007.10.10 upd start ------------------------------------------>>
			// 入金日
			//edtDepositDate.SetDateTime(TDateTime.LongDateToDateTime(Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDepositDate])));
            // 入金計上日
            edtDepositDate.SetDateTime(TDateTime.LongDateToDateTime(Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDepositAddUpADate])));
            // 2007.10.10 upd end --------------------------------------------<<

			// 預り金区分
			switch (Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDepositCd]))
			{
					// 通常入金
				case 0 :
					opsDepositDiv.CheckedIndex = 0;
					break;
					// 預り金(前受金)
				case 1 :
					opsDepositDiv.CheckedIndex = 1;
					break;
			}
            
            // 入金金種
			this.SelectMoneyKind(Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDepositKindCode]));

            // ↓ 20070118 18322 d MA.NS用に変更
			//// 受注 入金額
			//edtAcpOdrDeposit.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctAcpOdrDeposit]));
            //
			//// 受注 手数料
			//edtAcpOdrChargeDeposit.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctAcpOdrChargeDeposit]));
            //
			//// 受注 値引
			//edtAcpOdrDisDeposit.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctAcpOdrDisDeposit]));
            //
			//// 受注 入金合計
			//edtAcpOdrDepositTotal.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctAcpOdrDepositTotal]));
            //
			//// 諸費用 入金額
			//edtVariousCostDeposit.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctVariousCostDeposit]));
            //
			//// 諸費用 手数料
			//edtVarCostChargeDeposit.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctVarCostChargeDeposit]));
            //
			//// 諸費用 値引
			//edtVarCostDisDeposit.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctVarCostDisDeposit]));
            //
			//// 諸費用 入金合計
			//edtVariousCostDepositTotal.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctVariousCostDepositTotal]));
            // ↑ 20070118 18322 d MA.NS用に変更

			// 共通 入金額
			edtDeposit.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctDeposit]));
            
            // 共通 手数料
			edtFeeDeposit.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctFeeDeposit]));

			// 共通 値引
			edtDiscountDeposit.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctDiscountDeposit]));

            // ↓ 20070118 18322 a
			// 共通 インセンティブ
			// edtRebateDeposit.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctRebateDeposit]));  // 2007.10.10 hikita del
            // ↑ 20070118 18322 a

			// 共通 入金合計
			edtDepositTotal.SetValue(Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctDepositTotal]));

            // 2007.10.10 del start ---------------------------------------------------------------------------->>
            //// クレジット/ローン区分
            //cmbCreditOrLoanCd.Value = Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctCreditOrLoanCd]);

            //// クレジット会社コード
            //edtCreditCompanyCode.DataText = dr[InputDepositNormalTypeAcs.ctCreditCompanyCode].ToString();

            //// クレジット会社名称
            //// 未入力ではない時
            //if (!edtCreditCompanyCode.DataText.Equals(""))
            //{
            //    // クレジット会社名称取得スレッド開始処理
            //    CreditCompanyNamePrcThreadStart();
            //}
            // 2007.10.10 del end ------------------------------------------------------------------------------<<

            // 2007.10.10 add start ---------------------------------------------------------------------------->>
            // 銀行コード
            int iBankcd = Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctBankCode]);
            if (iBankcd != 0)
            {
                tNedit_BankCode.Value = Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctBankCode]);
            }
            // 銀行名称
            teditBankName.DataText = dr[InputDepositNormalTypeAcs.ctBankName].ToString();
            // 未入力ではない時
            //if (tNedit_BankCode.GetInt() != 0)
            //{
            //    // 銀行名称取得スレッド開始処理
            //    BankNamePrcThreadStart();
            //}
            // 手形番号
            tEdit_DraftNo.DataText = dr[InputDepositNormalTypeAcs.ctDraftNo].ToString();
            // 手形種類
            cmbDraftKind.Value = Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDraftKind]);
            // 手形区分
            cmbDraftDivide.Value = Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDraftDivide]);
            // 2007.10.10 add end ------------------------------------------------------------------------------<<

			// 手形振出日
			edtDraftDrawingDate.SetDateTime(TDateTime.LongDateToDateTime(Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDraftDrawingDate])));

			// 手形振出期間
			edtDraftPayTimeLimit.SetDateTime(TDateTime.LongDateToDateTime(Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDraftPayTimeLimit])));
            
            // 摘要
			edtOutline.DataText = dr[InputDepositNormalTypeAcs.ctOutline].ToString();

            bool posCash = false;
            uint retVal = this.IsLockDepositData(dr);
			if ((retVal & 0x00f00000) == 0x00f00000)		// --- レジ入力 --- //
			{
    			if ((retVal & 0x0f000000) != 0x0f000000)	// --- 売掛以外 --- //
                {
                    posCash = true;
                }

                // レジ入力のチェックを除く
                retVal = retVal & 0xf00fffff;
            }

			// 新規伝票では無い時で、修正不可入金データ判断処理
			//if ((edtDepositSlipNo.GetInt() != 0) && (this.IsLockDepositData(dr) != 0))
            if (((edtDepositSlipNo.GetInt() != 0) && (retVal != 0)) || posCash)
			{
                // 編集できないデータかPOSの現金売のデータのとき
				labInputModeTitle.Text = "[ 参照 ]";
				// 入力不可
				edtDepositDate.ReadOnly = true;

				opsDepositDiv.Enabled = false;
				tShape7.BackColor = System.Drawing.SystemColors.Control;
				treMoneyKind.Appearance.BackColor = System.Drawing.SystemColors.Control;
				treMoneyKind.Enabled = false;

                // ↓ 20070125 18322 d MA.NS用に変更
                #region SF 受注・諸費用 ReadOnlyセット（全てコメントアウト）
                //edtAcpOdrDeposit.ReadOnly = true;
				//edtAcpOdrChargeDeposit.ReadOnly = true;
				//edtAcpOdrDisDeposit.ReadOnly = true;
				//edtVariousCostDeposit.ReadOnly = true;
				//edtVarCostChargeDeposit.ReadOnly = true;
                //edtVarCostDisDeposit.ReadOnly = true;
                #endregion
                // ↑ 20070125 18322 d

				edtDeposit.ReadOnly = true;
                
                edtFeeDeposit.ReadOnly = true;
				edtDiscountDeposit.ReadOnly = true;
                // 2007.10.10 del start -------------------------------------------------------------->>
                //// ↓ 20070126 18322 a
                //edtRebateDeposit.ReadOnly = true;                                   
                //// ↑ 20070126 18322 a
                //cmbCreditOrLoanCd.ReadOnly = true;                                  
                //cmbCreditOrLoanCd.BackColor = System.Drawing.SystemColors.Control;
                //edtCreditCompanyCode.ReadOnly = true;
                //btnCreditCompanyGuid.Enabled = false;
                // 2007.10.10 del end ----------------------------------------------------------------<<
				edtDraftDrawingDate.ReadOnly = true;

				edtDraftPayTimeLimit.ReadOnly = true;
                
                edtOutline.ReadOnly = true;
			}
			else
			{
				if (edtDepositSlipNo.GetInt() != 0)
				{
					labInputModeTitle.Text = "[ 更新 ]";
				}
				else
				{
					labInputModeTitle.Text = "[ 新規 ]";
				}
				// 入力可
				edtDepositDate.ReadOnly = false;

				opsDepositDiv.Enabled = true;
				tShape7.BackColor = Color.White;
				treMoneyKind.Appearance.BackColor = Color.Empty;
				treMoneyKind.Enabled = true;

                // ↓ 20070125 18322 c MA.NS用に変更
                #region SF 受注・諸費用 ReadOnlyセット（全てコメントアウト）
                //edtAcpOdrDeposit.ReadOnly = false;
				//edtAcpOdrChargeDeposit.ReadOnly = false;
				//edtAcpOdrDisDeposit.ReadOnly = false;
				//edtVariousCostDeposit.ReadOnly = false;
				//edtVarCostChargeDeposit.ReadOnly = false;
				//edtVarCostDisDeposit.ReadOnly = false;
				//// 諸費用別入金判定
				//if (depositRelDataAcs.OptSeparateCost == true)
				//{
				//	// 入力不可
				//	edtDeposit.ReadOnly = true;
				//	edtFeeDeposit.ReadOnly = true;
				//	edtDiscountDeposit.ReadOnly = true;
				//}
				//else
				//{
				//	// 入力可
				//	edtDeposit.ReadOnly = false;
				//	edtFeeDeposit.ReadOnly = false;
				//	edtDiscountDeposit.ReadOnly = false;
                //}
                #endregion

            	// 入力可

				edtDeposit.ReadOnly = false;
                
                edtFeeDeposit.ReadOnly = false;
				edtDiscountDeposit.ReadOnly = false;
                // edtRebateDeposit.ReadOnly = false;             // 2007.10.10 hikita del
                // ↑ 20070125 18322 c
                // cmbCreditOrLoanCd.ReadOnly = false;            // 2007.10.10 hikita del
                // cmbCreditOrLoanCd.BackColor = Color.Empty;     // 2007.10.10 hikita del
				edtDraftDrawingDate.ReadOnly = false;

				edtDraftPayTimeLimit.ReadOnly = false;
                
                edtOutline.ReadOnly = false;
			}

			// 入金伝票入力欄表示中フラグ
			setDisplayDepositFlg = false;
        }
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// 修正不可入金データ判断処理
		/// </summary>
		/// <param name="dr">入金データセットSelectDataRow</param>
		/// <returns>0x00000000:修正可能, 0x0000000f:締済入金, 0x000000f0:自動入金, 0x00000f00:修正不可モード, 0x0000f000:赤伝入金(赤), 0x000f0000:赤伝入金(黒), 0x00f00000:POS入力, 0x0f000000:売掛</returns>
		/// <remarks>
		/// <br>Note       : 修正不可の入金データかどうかのチェックを行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private uint IsLockDepositData(DataRow dr)
		{
			uint retVal = 0x00000000;
			
			// 締済み入金の時
			if (dr[InputDepositNormalTypeAcs.ctDepositClosedFlg].ToString() != "")
			{
				retVal = retVal | 0x0000000f;
			}

			// 自動入金の時
			if (Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctAutoDepositCd]) == 1)
			{
				retVal = retVal | 0x000000f0;
			}

			// 修正不可モードの時
			if (depositRelDataAcs.DepositSlipMnt != 0)
			{
				retVal = retVal | 0x00000f00;
			}

			// 赤伝入金(赤)の時
			if (Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDepositDebitNoteCd]) == 1)
			{
				retVal = retVal | 0x0000f000;
			}

			// 赤伝入金(黒)の時
			if (Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDepositDebitNoteCd]) == 2)
			{
				retVal = retVal | 0x000f0000;
			}

            // 2007.10.10 hikita del start ------------------------------------------------------>>
            // ↓ 20070525 18322 a 条件を追加
            //if (Convert.IsDBNull(dr[InputDepositNormalTypeAcs.ctAcceptAnOrderNo]) == false)
            //{
            //    bool posInput;
            //    bool creditSales;
            //    this.inputDepositNormalTypeAcs.GetDmdSalesStatus( Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctAcceptAnOrderNo])
            //                                                    ,out posInput
            //                                                    ,out creditSales);

            //    // POS入力の時
            //    if (posInput)
            //    {
            //        retVal = retVal | 0x00f00000;
            //    }

            //    // 売掛の時
            //    if (creditSales)
            //    {
            //        retVal = retVal | 0x0f000000;
            //    }
            //}
            // ↑ 20070525 18322 a
            // 2007.10.10 hikita del end --------------------------------------------------------<<

			return retVal;
		}

		/// <summary>
		/// 修正不可請求売上データ判断処理
		/// </summary>
		/// <param name="dr">請求売上データセットSelectDataRow</param>
		/// <returns>0x00000000:修正可能, 0x0000000f:締済, 0x000000f0:請求売上(赤), 0x00000f00:請求売上(相殺済み黒), 0x0000f000:POS売上(売掛以外)</returns>
		/// <remarks>
		/// <br>Note       : 修正不可の請求売上データかどうかのチェックを行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private uint IsLockDmdSalesData(DataRow dr)
		{
			uint retVal = 0x00000000;

			// 締済み入金の時
			if (dr[InputDepositNormalTypeAcs.ctSalesClosedFlg].ToString() != "")
			{
				retVal = retVal | 0x0000000f;
			}

			// 請求売上(赤)の時
			if (Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd]) == 1)
			{
				retVal = retVal | 0x000000f0;
			}

			// 請求売上(黒)の時
			if (Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd]) == 2)
			{
				retVal = retVal | 0x00000f00;
			}

            // 2007.10.10 hikita del start -------------------------------------->>
            // ↓ 20070525 18322 a
            //bool posInput;
            //bool creditSales;
            //this.inputDepositNormalTypeAcs.GetDmdSalesStatus(    Convert.ToInt32(dr[InputDepositNormalTypeAcs.ctAcceptAnOrderNo])
            //                                                ,out posInput
            //                                                ,out creditSales);
            //// POS入力の時
            //if ((posInput) && (creditSales == false))
            //{
            //    // POS入力の売掛以外のとき
            //    retVal = retVal | 0x0000f000;
            //}
            // ↑ 20070525 18322 a
            // 2007.10.10 hikita del end ----------------------------------------<<

			return retVal;
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 入金金種選択処理
		/// </summary>
		/// <param name="kind">入金金種コード</param>
		/// <remarks>
		/// <br>Note       : 指定された入金金種をリストにて選択します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void SelectMoneyKind(int kind)
		{
			// 金種選択
			foreach (Infragistics.Win.UltraWinTree.UltraTreeNode nd in treMoneyKind.Nodes)
			{
				if (kind == StrToIntDef(nd.Key, 0))
				{
					nd.CheckedState = CheckState.Checked;
					return;
				}
			}

			// ヒットしなかった時は未選択にする
			foreach (Infragistics.Win.UltraWinTree.UltraTreeNode nd in treMoneyKind.Nodes)
			{
				nd.CheckedState = CheckState.Unchecked;
			}
        }

        /// <summary>
		/// 入金伝票入力欄変更時処理
		/// </summary>
		/// <param name="obj">対象オブジェクト</param>
		/// <param name="dr">入金データセットselectedDepositCopyRow</param>
		/// <param name="drAlwList">入金引当データセットselectedAllowanceCopyRows</param>
		/// <remarks>
		/// <br>Note       : 入金情報が変更された時に、入金更新DataRowを変更します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void GetDisplayDeposit(object obj, DataRow dr, ArrayList drAlwList)
		{
            // ↓ 20070702 18322 c
			//// 修正不可入金データ判断処理
			//if ((edtDepositSlipNo.GetInt() != 0) && (this.IsLockDepositData(dr) != 0))
			//	return;

            bool posCash = false;

            uint retVal = this.IsLockDepositData(dr);
			if ((retVal & 0x00f00000) == 0x00f00000)		// --- レジ入力 --- //
			{
    			if ((retVal & 0x0f000000) != 0x0f000000)	// --- 売掛以外 --- //
                {
                    posCash = true;
                }

                // レジ入力のチェックを除く
                retVal = retVal & 0xf00fffff;
            }

            // 修正不可入金データ判断処理
            if (((edtDepositSlipNo.GetInt() != 0) && (retVal != 0)) || posCash)
            {
                // 編集不可か、POS現金売データのとき
                return;
            }
            // ↑ 20070702 18322 c

			// 入金日
			if ((obj == edtDepositDate) || (obj == null))
			{
                // 2007.10.10 upd start -------------------------------------------------->>
				//dr[InputDepositNormalTypeAcs.ctDepositDate]		= TDateTime.DateTimeToLongDate(edtDepositDate.GetDateTime());
                // ↓ 20070418 18322 c 和暦を西暦に変更
				//dr[InputDepositNormalTypeAcs.ctDepositDateDisp]	= TDateTime.DateTimeToString("ggyy.mm.dd", edtDepositDate.GetDateTime());
				//dr[InputDepositNormalTypeAcs.ctDepositDateDisp]	= edtDepositDate.GetDateTime().ToString("yyyy/MM/dd");
                // 入金日
                dr[InputDepositNormalTypeAcs.ctDepositDate] = TDateTime.DateTimeToLongDate(DateTime.Today);
                dr[InputDepositNormalTypeAcs.ctDepositDateDisp] = TDateTime.GetSFDateNow().ToString("yyyy/MM/dd");
                // 計上日付
                dr[InputDepositNormalTypeAcs.ctDepositAddUpADate] = TDateTime.DateTimeToLongDate(edtDepositDate.GetDateTime());
                dr[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp] = edtDepositDate.GetDateTime().ToString("yyyy/MM/dd");
                // 2007.10.10 upd end ----------------------------------------------------<<

                // ↑ 20070418 18322 c
				// 引当計上日は入金計上日にあわせる
				foreach (DataRow drAlw in drAlwList)
				{
                    // 2007.10.10 upd start -------------------------------------------------->>
					//drAlw[InputDepositNormalTypeAcs.ctReconcileAddUpDate] = dr[InputDepositNormalTypeAcs.ctDepositDate];
                    drAlw[InputDepositNormalTypeAcs.ctReconcileAddUpDate] = dr[InputDepositNormalTypeAcs.ctDepositAddUpADate];
                    // 2007.10.10 upd end ----------------------------------------------------<<
				}
			}

			// 預り金区分
			if ((obj == opsDepositDiv) || (obj == null))
			{
				switch (opsDepositDiv.CheckedIndex)
				{
					case 0 :
						dr[InputDepositNormalTypeAcs.ctDepositCd] = 0;
						dr[InputDepositNormalTypeAcs.ctDepositNm] = "通常入金";
						break;
					case 1 :
						dr[InputDepositNormalTypeAcs.ctDepositCd] = 1;
						dr[InputDepositNormalTypeAcs.ctDepositNm] = "預り金";
						break;
				}
			}
            
            // 入金金種
			if ((obj == treMoneyKind) || (obj == null))
			{
				foreach (Infragistics.Win.UltraWinTree.UltraTreeNode nd in treMoneyKind.Nodes)
				{
					if (nd.CheckedState == CheckState.Checked)
					{
						Int64 kindDivCode = ObjToIntDef(nd.Tag, 0);
						dr[InputDepositNormalTypeAcs.ctDepositKindDivCd] = kindDivCode;
						dr[InputDepositNormalTypeAcs.ctDepositKindCode] = StrToIntDef(nd.Key, 0);
						dr[InputDepositNormalTypeAcs.ctDepositKindName] = nd.Text;

                        // 2007.10.10 hikita del start --------------------------------->>
                        //// クレジット/ローンの時
                        //if ((kindDivCode == 103) || (kindDivCode == 104))
                        //{
                        //    cmbCreditOrLoanCd.Enabled = true;
                        //}
                        //else
                        //{
                        //    cmbCreditOrLoanCd.Value = 0;
                        //    this.GetDisplayDeposit(cmbCreditOrLoanCd, dr, drAlwList);
                        //    cmbCreditOrLoanCd.Enabled = false;
                        //}
                        //// 手形の時
                        //if (kindDivCode == 105)
                        //{
                        //    edtDraftDrawingDate.Enabled = true;
                        //    edtDraftPayTimeLimit.Enabled = true;
                        //}
                        //else
                        //{
                        //    edtDraftDrawingDate.Clear();
                        //    this.GetDisplayDeposit(edtDraftDrawingDate, dr, drAlwList);
                        //    edtDraftPayTimeLimit.Clear();
                        //    this.GetDisplayDeposit(edtDraftPayTimeLimit, dr, drAlwList);
                        //    edtDraftDrawingDate.Enabled = false;
                        //    edtDraftPayTimeLimit.Enabled = false;
                        //}
                        // 2007.10.10 hikita del end -----------------------------------<<
                         
                        // 2007.10.10 hikita add start --------------------------------->>
                        switch (kindDivCode)
                        {
                            case (int)MnyKindDiv.Check:         // 小切手           
                                this.tNedit_BankCode.Enabled = true;
                                this.btnBankGuid.Enabled = true;
                                this.edtDraftDrawingDate.ReadOnly = false;
                                this.edtDraftDrawingDate.Enabled = true;
                                break;
                            case (int)MnyKindDiv.Remittance:    // 振込
                                this.tNedit_BankCode.Enabled = true;
                                this.btnBankGuid.Enabled = true;
                                break;
                            case (int)MnyKindDiv.Bill:          // 手形
                            case (int)MnyKindDiv.ACheck:        // 先付小切手　　　
                                this.tNedit_BankCode.Enabled = true;
                                this.btnBankGuid.Enabled = true;
                                this.edtDraftDrawingDate.ReadOnly = false;
                                this.edtDraftDrawingDate.Enabled = true;
                                this.edtDraftNo.Enabled = true;                 // 手形番号
                                this.cmbDraftKind.ReadOnly = false;             // 手形種類
                                this.cmbDraftKind.Enabled = true;
                                this.cmbDraftDivide.ReadOnly = false;           // 手形区分
                                this.cmbDraftDivide.Enabled = true;
                                this.edtDraftPayTimeLimit.ReadOnly = false;     // 支払期日
                                this.edtDraftPayTimeLimit.Enabled = true;
                                break;
                            default:
                                this.tNedit_BankCode.Clear();
                                this.edtDraftDrawingDate.Clear();
                                this.edtDraftNo.Clear();                        // 手形番号
                                this.cmbDraftKind.Clear();            　　　　　// 手形種類
                                this.cmbDraftDivide.Clear();          　　　　　// 手形区分
                                this.edtDraftPayTimeLimit.Clear();              // 支払期日
                                this.tNedit_BankCode.Enabled = false;
                                this.btnBankGuid.Enabled  = false;
                                this.edtDraftDrawingDate.Enabled = false;
                                this.edtDraftNo.Enabled = false;
                                this.edtDraftPayTimeLimit.Enabled = false;
                                this.cmbDraftKind.Enabled = false;
                                this.cmbDraftDivide.Enabled = false;
                                break;
                        }
                        // 2007.10.10 hikita add end -----------------------------------<<
						break;
					}				
				}
			}

            //  20070125 18322 d MA.NS用に変更
            #region SF 受注・諸費用は使用しないので削除
            //// 受注 入金額、受注 手数料、受注 値引
			//if ((depositRelDataAcs.OptSeparateCost == true) && 
			//	((obj == edtAcpOdrDeposit) || (obj == edtAcpOdrChargeDeposit) || (obj == edtAcpOdrDisDeposit) || (obj == null)))
			//{
			//	// 共通 の各金額を 受注 ＋ 諸費用 にて再計算
			//	edtDeposit.SetValue(edtAcpOdrDeposit.GetValue() + edtVariousCostDeposit.GetValue());
			//	edtFeeDeposit.SetValue(edtAcpOdrChargeDeposit.GetValue() + edtVarCostChargeDeposit.GetValue());
			//	edtDiscountDeposit.SetValue(edtAcpOdrDisDeposit.GetValue() + edtVarCostDisDeposit.GetValue());
			//
			//	Int64 total;
			//
			//	// 入金金額 受注 変更処理
			//	total = inputDepositNormalTypeAcs.ChangeAcpOdrDepositSection((Int64)edtAcpOdrDeposit.GetValue(), (Int64)edtAcpOdrChargeDeposit.GetValue(), (Int64)edtAcpOdrDisDeposit.GetValue(), ref dr);
			//	edtAcpOdrDepositTotal.SetValue(total);
			//
			//	// 入金金額 共通 変更処理
			//	total = inputDepositNormalTypeAcs.ChangeDepositSection((Int64)edtDeposit.GetValue(), (Int64)edtFeeDeposit.GetValue(), (Int64)edtDiscountDeposit.GetValue(), ref dr);
			//	edtDepositTotal.SetValue(total);
			//
			//	// 受注一覧の入金合計、入金引当残に反映
			//	labDepositTotal.Text = total.ToString("###,###,##0");
			//	labDepositAlwcBlnce.Text = Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit]).ToString("###,###,##0");
			//}
			//
			//// 諸費用 入金額、諸費用 手数料、諸費用 値引
			//if ((depositRelDataAcs.OptSeparateCost == true) && 
			//	((obj == edtVariousCostDeposit) || (obj == edtVarCostChargeDeposit) || (obj == edtVarCostDisDeposit) || (obj == null)))
			//{
			//	// 共通 の各金額を 受注 ＋ 諸費用 にて再計算
			//	edtDeposit.SetValue(edtAcpOdrDeposit.GetValue() + edtVariousCostDeposit.GetValue());
			//	edtFeeDeposit.SetValue(edtAcpOdrChargeDeposit.GetValue() + edtVarCostChargeDeposit.GetValue());
			//	edtDiscountDeposit.SetValue(edtAcpOdrDisDeposit.GetValue() + edtVarCostDisDeposit.GetValue());
			//
			//	Int64 total;
			//
			//	// 入金金額 諸費用 変更処理
			//	total = inputDepositNormalTypeAcs.ChangeCostDepositSection((Int64)edtVariousCostDeposit.GetValue(), (Int64)edtVarCostChargeDeposit.GetValue(), (Int64)edtVarCostDisDeposit.GetValue(), ref dr);
			//	edtVariousCostDepositTotal.SetValue(total);
			//
			//	// 入金金額 共通 変更処理
			//	total = inputDepositNormalTypeAcs.ChangeDepositSection((Int64)edtDeposit.GetValue(), (Int64)edtFeeDeposit.GetValue(), (Int64)edtDiscountDeposit.GetValue(), ref dr);
			//	edtDepositTotal.SetValue(total);
			//
			//	// 受注一覧の入金合計、入金引当残に反映
			//	labDepositTotal.Text = total.ToString("###,###,##0");
			//	labDepositAlwcBlnce.Text = Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit]).ToString("###,###,##0");
            //}
            #endregion
            // ↑ 20070125 18322 d

            // ↓ 20070129 18322 c MA.NS用に変更
            #region SF 共通 入金額、共通 諸費用、共通 値引（全てコメントアウト）
            //// 共通 入金額、共通 諸費用、共通 値引
			//if ((depositRelDataAcs.OptSeparateCost == false) && 
			//	((obj == edtDeposit) || (obj == edtFeeDeposit) || (obj == edtDiscountDeposit) || (obj == null)))
			//{
            //    // 受注 の各金額を 共通 にて再計算
			//	edtAcpOdrDeposit.SetValue(edtDeposit.GetValue());
			//	edtAcpOdrChargeDeposit.SetValue(edtFeeDeposit.GetValue());
			//	edtAcpOdrDisDeposit.SetValue(edtDiscountDeposit.GetValue());
            //    
			//	// 入金金額 受注 変更処理
			//	total = inputDepositNormalTypeAcs.ChangeAcpOdrDepositSection((Int64)edtAcpOdrDeposit.GetValue(), (Int64)edtAcpOdrChargeDeposit.GetValue(), (Int64)edtAcpOdrDisDeposit.GetValue(), ref dr);
			//	edtVariousCostDepositTotal.SetValue(total);
            //   
			//	// 入金金額 共通 変更処理
			//	total = inputDepositNormalTypeAcs.ChangeDepositSection((Int64)edtDeposit.GetValue(), (Int64)edtFeeDeposit.GetValue(), (Int64)edtDiscountDeposit.GetValue(), ref dr);
            //    edtDepositTotal.SetValue(total);
            //
			//	// 受注一覧の入金合計、入金引当残に反映
			//	labDepositTotal.Text = total.ToString("###,###,##0");
			//	labDepositAlwcBlnce.Text = Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit]).ToString("###,###,##0");
			//}
            #endregion

            if ((depositRelDataAcs.OptSeparateCost == false) &&
                ((obj == edtDeposit) ||
                 (obj == edtFeeDeposit) ||
                 (obj == edtDiscountDeposit) ||
                //     (obj == edtRebateDeposit)   ||                 // 2007.10.10 del
                 (obj == null)))
            {
                // 入金金額 共通 変更処理
                Int64 total;
                total = inputDepositNormalTypeAcs.ChangeDepositSection((Int64)edtDeposit.GetValue()
                                                                     , (Int64)edtFeeDeposit.GetValue()
                                                                     , (Int64)edtDiscountDeposit.GetValue()
                    //                                                     , (Int64)edtRebateDeposit.GetValue()  // 2007.10.10 del
                                                                     , ref dr);
                edtDepositTotal.SetValue(total);
            }

            // ↑ 20070129 18322 c

            // 2007.10.10 hikita del start ----------------------------------------------------->>
            //// クレジット/ローン区分
            //if ((obj == cmbCreditOrLoanCd) || (obj == null))
            //{
            //    dr[InputDepositNormalTypeAcs.ctCreditOrLoanCd] = Convert.ToInt32(cmbCreditOrLoanCd.Value);
            //}

            //// クレジット会社コード
            //if ((obj == edtCreditCompanyCode) || (obj == null))
            //{
            //    dr[InputDepositNormalTypeAcs.ctCreditCompanyCode] = edtCreditCompanyCode.Text;
            //}
            // 2007.10.10 hikita del end -------------------------------------------------------<<

			// 手形振出日
			if ((obj == edtDraftDrawingDate) || (obj == null))
			{
				dr[InputDepositNormalTypeAcs.ctDraftDrawingDate] = TDateTime.DateTimeToLongDate(edtDraftDrawingDate.GetDateTime());
			}

			// 手形振出期間
			if ((obj == edtDraftPayTimeLimit) || (obj == null))
			{
				dr[InputDepositNormalTypeAcs.ctDraftPayTimeLimit] = TDateTime.DateTimeToLongDate(edtDraftPayTimeLimit.GetDateTime());
			}
            
            // 摘要
			if ((obj == edtOutline) || (obj == null))
			{
				dr[InputDepositNormalTypeAcs.ctOutline] = edtOutline.DataText;
			}

            // 2007.10.10 hikita add start ---------------------------------------------------->>
            // 銀行コード
            if ((obj == tNedit_BankCode) || (obj == null))
            {
                dr[InputDepositNormalTypeAcs.ctBankCode] = Convert.ToInt32(tNedit_BankCode.Value);
                dr[InputDepositNormalTypeAcs.ctBankName] = teditBankName.Text;
            }
            // 手形番号
            if ((obj == tEdit_DraftNo) || (obj == null))
            {
                dr[InputDepositNormalTypeAcs.ctDraftNo] = tEdit_DraftNo.Text;
            }
            // 手形区分
            if ((obj == cmbDraftDivide) || (obj == null))
            {
                dr[InputDepositNormalTypeAcs.ctDraftDivide] = Convert.ToInt32(cmbDraftDivide.Value);
                dr[InputDepositNormalTypeAcs.ctDraftDivideName] = cmbDraftDivide.Text;
            }
            // 手形種類
            if ((obj == cmbDraftKind) || (obj == null))
            {
                dr[InputDepositNormalTypeAcs.ctDraftKind] = Convert.ToInt32(cmbDraftKind.Value);
                dr[InputDepositNormalTypeAcs.ctDraftKindName] = cmbDraftKind.Text;
            }
            // 2007.10.10 hikita add end ------------------------------------------------------<<
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
        /// 入金伝票入力欄変更時処理
        /// </summary>
        /// <param name="obj">対象オブジェクト</param>
        /// <param name="dr">入金データセットselectedDepositCopyRow</param>
        /// <param name="drAlwList">入金引当データセットselectedAllowanceCopyRows</param>
        /// <br>UpdateNote : 2009/12/16 李占川 ＰＭ．ＮＳ保守依頼④</br>
        /// <br>             金額入力時のｶｰｿﾙ遷移が遅いのを修正</br>
        /// <br>UpdateNote : 2009/12/25 李占川 ＰＭ．ＮＳ保守依頼④</br>
        /// <br>             Redmine#2128の対応</br>
        /// <br>UpdateNote : K2012/07/13 FSI今野 山形部品個別依頼</br>
        /// <br>             振込金額入力時は独自の銀行コードの入力を可能に修正</br> 
        /// <br>Update Note: 2012/09/21 田建委</br>
        /// <br>管理番号   : 2012/10/17配信分</br>
        /// <br>             Redmine#32415 発行者の追加対応</br>
        /// <br>Update Note: 2015/08/17 時シン</br>
        /// <br>管理番号   : 11170129-00</br>
        /// <br>             Redmine#47015 今回入金額の累計後残高は誤る対応</br>
        private void GetDisplayDeposit(object obj, DataRow dr, ArrayList drAlwList)
        {
            bool posCash = false;

            uint retVal = this.IsLockDepositData(dr);
            if ((retVal & 0x00f00000) == 0x00f00000)		// --- レジ入力 --- //
            {
                if ((retVal & 0x0f000000) != 0x0f000000)	// --- 売掛以外 --- //
                {
                    posCash = true;
                }

                // レジ入力のチェックを除く
                retVal = retVal & 0xf00fffff;
            }

            // 修正不可入金データ判断処理
            if (((edtDepositSlipNo.GetInt() != 0) && (retVal != 0)) || posCash)
            {
                // 編集不可か、POS現金売データのとき
                return;
            }

            // 入金日
            if ((obj == edtDepositDate) || (obj == null))
            {
                _preEdtDepositDate = this.edtDepositDate.GetDateTime(); // ADD 2009/12/25
                if ((int)dr[InputDepositNormalTypeAcs.ctDepositSlipNo] == 0)
                {
                    // 入金日
                    dr[InputDepositNormalTypeAcs.ctDepositDate] = TDateTime.DateTimeToLongDate(DateTime.Today);
                    dr[InputDepositNormalTypeAcs.ctDepositDateDisp] = TDateTime.GetSFDateNow().ToString("yyyy/MM/dd");
                }
                // 計上日付
                //if (edtDepositDate.GetDateTime() == DateTime.MinValue)
                //{
                //    dr[InputDepositNormalTypeAcs.ctDepositAddUpADate] = 0;
                //}
                //else
                //{
                //    dr[InputDepositNormalTypeAcs.ctDepositAddUpADate] = TDateTime.DateTimeToLongDate(edtDepositDate.GetDateTime());
                //}
                dr[InputDepositNormalTypeAcs.ctDepositAddUpADate] = TDateTime.DateTimeToLongDate(edtDepositDate.GetDateTime());
                dr[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp] = edtDepositDate.GetDateTime().ToString("yyyy/MM/dd");

                // 引当計上日は入金計上日にあわせる
                foreach (DataRow drAlw in drAlwList)
                {
                    drAlw[InputDepositNormalTypeAcs.ctReconcileAddUpDate] = dr[InputDepositNormalTypeAcs.ctDepositAddUpADate];
                }
            }

            if ((obj == edtFeeDeposit) || (obj == edtDiscountDeposit) || (obj == null))
            {
                dr[InputDepositNormalTypeAcs.ctDeposit1] = 0;
                dr[InputDepositNormalTypeAcs.ctValidityTerm1] = DateTime.MinValue;
                dr[InputDepositNormalTypeAcs.ctDepositRowNo1] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindCode1] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindDiv1] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindName1] = "";
                dr[InputDepositNormalTypeAcs.ctDeposit2] = 0;
                dr[InputDepositNormalTypeAcs.ctValidityTerm2] = DateTime.MinValue;
                dr[InputDepositNormalTypeAcs.ctDepositRowNo2] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindCode2] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindDiv2] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindName2] = "";
                dr[InputDepositNormalTypeAcs.ctDeposit3] = 0;
                dr[InputDepositNormalTypeAcs.ctValidityTerm3] = DateTime.MinValue;
                dr[InputDepositNormalTypeAcs.ctDepositRowNo3] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindCode3] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindDiv3] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindName3] = "";
                dr[InputDepositNormalTypeAcs.ctDeposit4] = 0;
                dr[InputDepositNormalTypeAcs.ctValidityTerm4] = DateTime.MinValue;
                dr[InputDepositNormalTypeAcs.ctDepositRowNo4] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindCode4] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindDiv4] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindName4] = "";
                dr[InputDepositNormalTypeAcs.ctDeposit5] = 0;
                dr[InputDepositNormalTypeAcs.ctValidityTerm5] = DateTime.MinValue;
                dr[InputDepositNormalTypeAcs.ctDepositRowNo5] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindCode5] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindDiv5] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindName5] = "";
                dr[InputDepositNormalTypeAcs.ctDeposit6] = 0;
                dr[InputDepositNormalTypeAcs.ctValidityTerm6] = DateTime.MinValue;
                dr[InputDepositNormalTypeAcs.ctDepositRowNo6] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindCode6] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindDiv6] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindName6] = "";
                dr[InputDepositNormalTypeAcs.ctDeposit7] = 0;
                dr[InputDepositNormalTypeAcs.ctValidityTerm7] = DateTime.MinValue;
                dr[InputDepositNormalTypeAcs.ctDepositRowNo7] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindCode7] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindDiv7] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindName7] = "";
                dr[InputDepositNormalTypeAcs.ctDeposit8] = 0;
                dr[InputDepositNormalTypeAcs.ctValidityTerm8] = DateTime.MinValue;
                dr[InputDepositNormalTypeAcs.ctDepositRowNo8] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindCode8] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindDiv8] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindName8] = "";
                dr[InputDepositNormalTypeAcs.ctDeposit9] = 0;
                dr[InputDepositNormalTypeAcs.ctValidityTerm9] = DateTime.MinValue;
                dr[InputDepositNormalTypeAcs.ctDepositRowNo9] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindCode9] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindDiv9] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindName9] = "";
                dr[InputDepositNormalTypeAcs.ctDeposit10] = 0;
                dr[InputDepositNormalTypeAcs.ctValidityTerm10] = DateTime.MinValue;
                dr[InputDepositNormalTypeAcs.ctDepositRowNo10] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindCode10] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindDiv10] = 0;
                dr[InputDepositNormalTypeAcs.ctMoneyKindName10] = "";

                // 入金金額 共通 変更処理
                double detailTotal = 0;
                double pureTotal = 0;
                for (int rowIndex = 0; rowIndex < this.grdDepositKind.Rows.Count; rowIndex++)
                {
                    // 金種区分
                    Int32 moneyKindDiv = (Int32)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value;
                    // 金種コード
                    Int32 moneyKindCode = (Int32)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value;
                    // 入金金額
                    double deposit;
                    if ((this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == DBNull.Value) ||
                        ((string)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == ""))
                    {
                        pureTotal += 0 - double.Parse(this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag.ToString());
                        continue;
                    }
                    else
                    {
                        deposit = double.Parse((string)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value);
                        pureTotal += deposit - double.Parse(this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag.ToString());
                    }

                    detailTotal += deposit;
                    // 有効期限
                    DateTime validityTerm;
                    bool bStatus = GetPayTimeLimit(rowIndex, out validityTerm);

                    if ((depositRelDataAcs.HtMoneyKindDiv.ContainsKey(depositRelDataAcs.DepositMaster.DepositStKindCd1) == true) &&
                        (moneyKindDiv == (Int32)depositRelDataAcs.HtMoneyKindDiv[depositRelDataAcs.DepositMaster.DepositStKindCd1]) &&
                        (moneyKindCode == depositRelDataAcs.DepositMaster.DepositStKindCd1))
                    {
                        dr[InputDepositNormalTypeAcs.ctDeposit1] = deposit;             // 入金金額
                        dr[InputDepositNormalTypeAcs.ctValidityTerm1] = validityTerm;   // 有効期限
                        dr[InputDepositNormalTypeAcs.ctDepositRowNo1] = 1;              // 入金行番号
                        dr[InputDepositNormalTypeAcs.ctMoneyKindCode1] = moneyKindCode; // 金種コード
                        dr[InputDepositNormalTypeAcs.ctMoneyKindDiv1] = moneyKindDiv;   // 金種区分
                        dr[InputDepositNormalTypeAcs.ctMoneyKindName1] = depositRelDataAcs.DepositMaster.DepositStKindCdNm1;    // 金種名称

                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            // --- ADD K2012/07/13 ---------->>>>>
                            // 金種区分が「102：振込」の場合
                            if (moneyKindDiv == 102)
                            {
                                // 銀行コード
                                string bankCode = this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value.ToString();
                                if (String.IsNullOrEmpty(bankCode))
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = 0;
                                }
                                else
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = Int32.Parse(bankCode);
                                }
                            }
                            // --- ADD K2012/07/13 ----------<<<<<
                        }
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                        continue;
                    }

                    if ((depositRelDataAcs.HtMoneyKindDiv.ContainsKey(depositRelDataAcs.DepositMaster.DepositStKindCd2) == true) &&
                        (moneyKindDiv == (Int32)depositRelDataAcs.HtMoneyKindDiv[depositRelDataAcs.DepositMaster.DepositStKindCd2]) &&
                        (moneyKindCode == depositRelDataAcs.DepositMaster.DepositStKindCd2))
                    {
                        dr[InputDepositNormalTypeAcs.ctDeposit2] = deposit;
                        dr[InputDepositNormalTypeAcs.ctValidityTerm2] = validityTerm;
                        dr[InputDepositNormalTypeAcs.ctDepositRowNo2] = 2;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindCode2] = moneyKindCode;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindDiv2] = moneyKindDiv;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindName2] = depositRelDataAcs.DepositMaster.DepositStKindCdNm2;

                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            // --- ADD K2012/07/13 ---------->>>>>
                            // 金種区分が「102：振込」の場合
                            if (moneyKindDiv == 102)
                            {
                                // 銀行コード
                                string bankCode = this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value.ToString();
                                if (String.IsNullOrEmpty(bankCode))
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = 0;
                                }
                                else
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = Int32.Parse(bankCode);
                                }
                            }
                            // --- ADD K2012/07/13 ----------<<<<<
                        }
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                        continue;
                    }

                    if ((depositRelDataAcs.HtMoneyKindDiv.ContainsKey(depositRelDataAcs.DepositMaster.DepositStKindCd3) == true) &&
                        (moneyKindDiv == (Int32)depositRelDataAcs.HtMoneyKindDiv[depositRelDataAcs.DepositMaster.DepositStKindCd3]) &&
                        (moneyKindCode == depositRelDataAcs.DepositMaster.DepositStKindCd3))
                    {
                        dr[InputDepositNormalTypeAcs.ctDeposit3] = deposit;
                        dr[InputDepositNormalTypeAcs.ctValidityTerm3] = validityTerm;
                        dr[InputDepositNormalTypeAcs.ctDepositRowNo3] = 3;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindCode3] = moneyKindCode;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindDiv3] = moneyKindDiv;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindName3] = depositRelDataAcs.DepositMaster.DepositStKindCdNm3;

                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            // --- ADD K2012/07/13 ---------->>>>>
                            // 金種区分が「102：振込」の場合
                            if (moneyKindDiv == 102)
                            {
                                // 銀行コード
                                string bankCode = this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value.ToString();
                                if (String.IsNullOrEmpty(bankCode))
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = 0;
                                }
                                else
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = Int32.Parse(bankCode);
                                }
                            }
                            // --- ADD K2012/07/13 ----------<<<<<
                        }
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                        continue;
                    }

                    if ((depositRelDataAcs.HtMoneyKindDiv.ContainsKey(depositRelDataAcs.DepositMaster.DepositStKindCd4) == true) &&
                        (moneyKindDiv == (Int32)depositRelDataAcs.HtMoneyKindDiv[depositRelDataAcs.DepositMaster.DepositStKindCd4]) &&
                        (moneyKindCode == depositRelDataAcs.DepositMaster.DepositStKindCd4))
                    {
                        dr[InputDepositNormalTypeAcs.ctDeposit4] = deposit;
                        dr[InputDepositNormalTypeAcs.ctValidityTerm4] = validityTerm;
                        dr[InputDepositNormalTypeAcs.ctDepositRowNo4] = 4;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindCode4] = moneyKindCode;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindDiv4] = moneyKindDiv;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindName4] = depositRelDataAcs.DepositMaster.DepositStKindCdNm4;

                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            // --- ADD K2012/07/13 ---------->>>>>
                            // 金種区分が「102：振込」の場合
                            if (moneyKindDiv == 102)
                            {
                                // 銀行コード
                                string bankCode = this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value.ToString();
                                if (String.IsNullOrEmpty(bankCode))
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = 0;
                                }
                                else
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = Int32.Parse(bankCode);
                                }
                            }
                            // --- ADD K2012/07/13 ----------<<<<<
                        }
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                        continue;
                    }

                    if ((depositRelDataAcs.HtMoneyKindDiv.ContainsKey(depositRelDataAcs.DepositMaster.DepositStKindCd5) == true) &&
                        (moneyKindDiv == (Int32)depositRelDataAcs.HtMoneyKindDiv[depositRelDataAcs.DepositMaster.DepositStKindCd5]) &&
                        (moneyKindCode == depositRelDataAcs.DepositMaster.DepositStKindCd5))
                    {
                        dr[InputDepositNormalTypeAcs.ctDeposit5] = deposit;
                        dr[InputDepositNormalTypeAcs.ctValidityTerm5] = validityTerm;
                        dr[InputDepositNormalTypeAcs.ctDepositRowNo5] = 5;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindCode5] = moneyKindCode;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindDiv5] = moneyKindDiv;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindName5] = depositRelDataAcs.DepositMaster.DepositStKindCdNm5;
                        
                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            // --- ADD K2012/07/13 ---------->>>>>
                            // 金種区分が「102：振込」の場合
                            if (moneyKindDiv == 102)
                            {
                                // 銀行コード
                                string bankCode = this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value.ToString();
                                if (String.IsNullOrEmpty(bankCode))
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = 0;
                                }
                                else
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = Int32.Parse(bankCode);
                                }
                            }
                            // --- ADD K2012/07/13 ----------<<<<<
                        }                        
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                        continue;
                    }

                    if ((depositRelDataAcs.HtMoneyKindDiv.ContainsKey(depositRelDataAcs.DepositMaster.DepositStKindCd6) == true) &&
                        (moneyKindDiv == (Int32)depositRelDataAcs.HtMoneyKindDiv[depositRelDataAcs.DepositMaster.DepositStKindCd6]) &&
                        (moneyKindCode == depositRelDataAcs.DepositMaster.DepositStKindCd6))
                    {
                        dr[InputDepositNormalTypeAcs.ctDeposit6] = deposit;
                        dr[InputDepositNormalTypeAcs.ctValidityTerm6] = validityTerm;
                        dr[InputDepositNormalTypeAcs.ctDepositRowNo6] = 6;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindCode6] = moneyKindCode;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindDiv6] = moneyKindDiv;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindName6] = depositRelDataAcs.DepositMaster.DepositStKindCdNm6;

                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            // --- ADD K2012/07/13 ---------->>>>>
                            // 金種区分が「102：振込」の場合
                            if (moneyKindDiv == 102)
                            {
                                // 銀行コード
                                string bankCode = this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value.ToString();
                                if (String.IsNullOrEmpty(bankCode))
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = 0;
                                }
                                else
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = Int32.Parse(bankCode);
                                }
                            }
                            // --- ADD K2012/07/13 ----------<<<<<
                        }                        
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                        continue;
                    }

                    if ((depositRelDataAcs.HtMoneyKindDiv.ContainsKey(depositRelDataAcs.DepositMaster.DepositStKindCd7) == true) &&
                        (moneyKindDiv == (Int32)depositRelDataAcs.HtMoneyKindDiv[depositRelDataAcs.DepositMaster.DepositStKindCd7]) &&
                        (moneyKindCode == depositRelDataAcs.DepositMaster.DepositStKindCd7))
                    {
                        dr[InputDepositNormalTypeAcs.ctDeposit7] = deposit;
                        dr[InputDepositNormalTypeAcs.ctValidityTerm7] = validityTerm;
                        dr[InputDepositNormalTypeAcs.ctDepositRowNo7] = 7;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindCode7] = moneyKindCode;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindDiv7] = moneyKindDiv;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindName7] = depositRelDataAcs.DepositMaster.DepositStKindCdNm7;

                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            // --- ADD K2012/07/13 ---------->>>>>
                            // 金種区分が「102：振込」の場合
                            if (moneyKindDiv == 102)
                            {
                                // 銀行コード
                                string bankCode = this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value.ToString();
                                if (String.IsNullOrEmpty(bankCode))
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = 0;
                                }
                                else
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = Int32.Parse(bankCode);
                                }
                            }
                            // --- ADD K2012/07/13 ----------<<<<<
                        }
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                        continue;
                    }

                    if ((depositRelDataAcs.HtMoneyKindDiv.ContainsKey(depositRelDataAcs.DepositMaster.DepositStKindCd8) == true) &&
                        (moneyKindDiv == (Int32)depositRelDataAcs.HtMoneyKindDiv[depositRelDataAcs.DepositMaster.DepositStKindCd8]) &&
                        (moneyKindCode == depositRelDataAcs.DepositMaster.DepositStKindCd8))
                    {
                        dr[InputDepositNormalTypeAcs.ctDeposit8] = deposit;
                        dr[InputDepositNormalTypeAcs.ctValidityTerm8] = validityTerm;
                        dr[InputDepositNormalTypeAcs.ctDepositRowNo8] = 8;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindCode8] = moneyKindCode;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindDiv8] = moneyKindDiv;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindName8] = depositRelDataAcs.DepositMaster.DepositStKindCdNm8;

                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            // --- ADD K2012/07/13 ---------->>>>>
                            // 金種区分が「102：振込」の場合
                            if (moneyKindDiv == 102)
                            {
                                // 銀行コード
                                string bankCode = this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value.ToString();
                                if (String.IsNullOrEmpty(bankCode))
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = 0;
                                }
                                else
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = Int32.Parse(bankCode);
                                }
                            }
                            // --- ADD K2012/07/13 ----------<<<<<
                        }
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                        continue;
                    }

                    if ((depositRelDataAcs.HtMoneyKindDiv.ContainsKey(depositRelDataAcs.DepositMaster.DepositStKindCd9) == true) &&
                        (moneyKindDiv == (Int32)depositRelDataAcs.HtMoneyKindDiv[depositRelDataAcs.DepositMaster.DepositStKindCd9]) &&
                        (moneyKindCode == depositRelDataAcs.DepositMaster.DepositStKindCd9))
                    {
                        dr[InputDepositNormalTypeAcs.ctDeposit9] = deposit;
                        dr[InputDepositNormalTypeAcs.ctValidityTerm9] = validityTerm;
                        dr[InputDepositNormalTypeAcs.ctDepositRowNo9] = 9;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindCode9] = moneyKindCode;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindDiv9] = moneyKindDiv;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindName9] = depositRelDataAcs.DepositMaster.DepositStKindCdNm9;

                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            // --- ADD K2012/07/13 ---------->>>>>
                            // 金種区分が「102：振込」の場合
                            if (moneyKindDiv == 102)
                            {
                                // 銀行コード
                                string bankCode = this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value.ToString();
                                if (String.IsNullOrEmpty(bankCode))
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = 0;
                                }
                                else
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = Int32.Parse(bankCode);
                                }
                            }
                            // --- ADD K2012/07/13 ----------<<<<<
                        }
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                        continue;
                    }

                    if ((depositRelDataAcs.HtMoneyKindDiv.ContainsKey(depositRelDataAcs.DepositMaster.DepositStKindCd10) == true) &&
                        (moneyKindDiv == (Int32)depositRelDataAcs.HtMoneyKindDiv[depositRelDataAcs.DepositMaster.DepositStKindCd10]) &&
                        (moneyKindCode == depositRelDataAcs.DepositMaster.DepositStKindCd10))
                    {
                        dr[InputDepositNormalTypeAcs.ctDeposit10] = deposit;
                        dr[InputDepositNormalTypeAcs.ctValidityTerm10] = validityTerm;
                        dr[InputDepositNormalTypeAcs.ctDepositRowNo10] = 10;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindCode10] = moneyKindCode;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindDiv10] = moneyKindDiv;
                        dr[InputDepositNormalTypeAcs.ctMoneyKindName10] = depositRelDataAcs.DepositMaster.DepositStKindCdNm10;
                        
                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            // --- ADD K2012/07/13 ---------->>>>>
                            // 金種区分が「102：振込」の場合
                            if (moneyKindDiv == 102)
                            {
                                // 銀行コード
                                string bankCode = this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value.ToString();
                                if (String.IsNullOrEmpty(bankCode))
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = 0;
                                }
                                else
                                {
                                    dr[InputDepositNormalTypeAcs.ctBankCode] = Int32.Parse(bankCode);
                                }
                            }
                            // --- ADD K2012/07/13 ----------<<<<<
                        }
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                        continue;
                    }
                }

                // 共通 入金額
                dr[InputDepositNormalTypeAcs.ctDeposit] = (long)detailTotal;

                // 共通 手数料
                dr[InputDepositNormalTypeAcs.ctFeeDeposit] = (Int64)edtFeeDeposit.GetValue();

                // 共通 値引
                dr[InputDepositNormalTypeAcs.ctDiscountDeposit] = (Int64)edtDiscountDeposit.GetValue();

                Int64 total = (long)detailTotal + (Int64)edtFeeDeposit.GetValue() + (Int64)edtDiscountDeposit.GetValue();
                pureTotal += (Int64)edtFeeDeposit.GetValue() + (Int64)edtDiscountDeposit.GetValue();

                // 入金合計 共通
                dr[InputDepositNormalTypeAcs.ctDepositTotal] = total;

                // DEL 2009/06/24 ------>>>
                //// 入金引当残 共通 (入金合計 共通 - 入金引当額 共通)
                //dr[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit] = total - (Int64)dr[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit];
                // DEL 2009/06/24 ------<<<

                // ADD 2009/06/24 ------>>>
                // 入金引当額
                Int64 depositAlwcBlnce = GetDepositAlwTotal();
                dr[InputDepositNormalTypeAcs.ctDepositAllowance_Deposit] = depositAlwcBlnce;
                // 入金引当残 共通
                dr[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit] = total - depositAlwcBlnce;
                // ADD 2009/06/24 ------<<<
                // FIXME:入金合計
                //edtDepositTotal.SetValue(total); // DEL 2009/12/16
                edtDepositTotal.DataText = total.ToString(); // ADD 2009/12/16

                // 今回入金金額
                //Int64 thisTimeDmdTtl = this._depositCustDmdPrc.ThisTimeDmdNrml + total;
                //Int64 thisTimeDmdTtl = this._depositCustDmdPrc.ThisTimeDmdNrml + (long)pureTotal;// DEL 2015/08/17 時シン Redmine#47015 今回入金額の累計後残高は誤る対応
                
                //----- ADD 2015/08/17 時シン Redmine#47015 今回入金額の累計後残高は誤る対応 ---------->>>>>
                //----- DEL 2015/09/04 時シン Redmine#47015の#20 今回入金額計算の追加対応 ---------->>>>>
                //// 手数料
                //Int64 feeDeposit = 0;
                //// 値引
                //Int64 discountDeposit = 0;
                //// 入金伝票番号
                //Int32 depositSlipNo = this.edtDepositSlipNo.GetInt();
                //// 入金伝票選択の時
                //if (depositSlipNo != 0)
                //{
                //    // 入金情報テーブル
                //    DataTable ctDepositDataTable = inputDepositNormalTypeAcs.GetDsDepositInfo().Tables[InputDepositNormalTypeAcs.ctDepositDataTable];
                //    // 入金伝票番号より、該当するレコードの取得
                //    string rowFilter = InputDepositNormalTypeAcs.ctDepositSlipNo + "=" + depositSlipNo.ToString();
                //    DataRow[] dataRow = ctDepositDataTable.Select(rowFilter);
                //    // レコードが取得できる場合
                //    if (dataRow != null && dataRow.Length > 0)
                //    {
                //        DataRow depositRow = dataRow[0];
                //        // 元の手数料
                //        string ctFeeDeposit = depositRow[InputDepositNormalTypeAcs.ctFeeDeposit].ToString();
                //        // 元の手数料非空の場合
                //        if (!string.IsNullOrEmpty(ctFeeDeposit))
                //        {
                //            feeDeposit = Convert.ToInt64(ctFeeDeposit);
                //        }
                //        // 元の値引
                //        string ctDiscountDeposit = depositRow[InputDepositNormalTypeAcs.ctDiscountDeposit].ToString();
                //        // 元の値引非空の場合
                //        if (!string.IsNullOrEmpty(ctDiscountDeposit))
                //        {
                //            discountDeposit = Convert.ToInt64(ctDiscountDeposit);
                //        }
                //    }
                //}
                //----- DEL 2015/09/04 時シン Redmine#47015の#20 今回入金額計算の追加対応 ----------<<<<<
                //----- ADD 2015/09/04 時シン Redmine#47015の#20 今回入金額計算の追加対応 ---------->>>>>
                // 手数料
                Int64 feeDeposit;
                // 値引
                Int64 discountDeposit;
                this.GetOrgFeeDiscountDeposit(out feeDeposit, out discountDeposit);
                //----- ADD 2015/09/04 時シン Redmine#47015の#20 今回入金額計算の追加対応 ----------<<<<<

                // 今回入金金額
                Int64 thisTimeDmdTtl = this._depositCustDmdPrc.ThisTimeDmdNrml - feeDeposit - discountDeposit + (long)pureTotal;
                //----- ADD 2015/08/17 時シン Redmine#47015 今回入金額の累計後残高は誤る対応 ----------<<<<<
                
                this.lbl_ThisTimeDmdTtl.Text = thisTimeDmdTtl.ToString("###,##0");
                // 差引残高
                Int64 balance = this._depositCustDmdPrc.AcpOdrTtl3TmBfBlDmd + this._depositCustDmdPrc.AcpOdrTtl2TmBfBlDmd + this._depositCustDmdPrc.LastTimeDemand - thisTimeDmdTtl;
                this.lbl_Balance.Text = balance.ToString("###,##0");
                // 更新後残高
                this.lbl_AfCalDemandPrice.Text = (balance + this._depositCustDmdPrc.OfsThisTimeSales + this._depositCustDmdPrc.OfsThisSalesTax).ToString("###,##0");
            }

            // 摘要
            if ((obj == edtOutline) || (obj == null))
            {
                dr[InputDepositNormalTypeAcs.ctOutline] = edtOutline.DataText;
            }

            //----- ADD 2012/09/21 田建委 redmine#32415 ---------->>>>>
            // 発行者
            if ((obj == tEdit_EmployeeCode) || (obj == null))
            {
                dr[InputDepositNormalTypeAcs.ctDepositInputEmpCd] = tEdit_EmployeeCode.DataText;
                dr[InputDepositNormalTypeAcs.ctDepositInputEmpNm] = tEdit_SalesInputName.DataText;
            }
            //----- ADD 2012/09/21 田建委 redmine#32415 ----------<<<<<
        }

        

		/// <summary>
		/// 検索処理(得意先コード指定)
		/// </summary>
		/// <param name="searchMode">検索モード</param>
		/// <param name="customerCode">得意先コード</param>
		/// <param name="depositSlipNo">入金伝票番号</param>
		/// <param name="message">エラー発生時メッセージ</param>
        /// <param name="mode"></param>
		/// <returns>ConstantManagement.DB_Status</returns>
		/// <remarks>
		/// <br>Note       : 得意先コード指定にて検索処理を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
        /// <br>Update Note: 2012/12/24 王君</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
		/// </remarks>
		private int SearchCustomerMode(SearchMode searchMode, int customerCode, int depositSlipNo, out string message)
		{
            //// 得意先情報欄初期化処理
            //this.ClearCustomer();

			// 入金伝票入力欄初期化処理
			this.ClearDeposit();

			// 得意先情報/得意先金額情報取得用パラメータ 作成処理
			InputDepositNormalTypeAcs.SearchCustomerParameter searchCustomerParameter = this.SetCustomerParameter(customerCode);
            // ------ ADD 王君 2012/12/24 Redmine#33741 ------>>>>>
           if (Convert.ToInt16(searchMode) == 2)
            {
                searchCustomerParameter.CustomerCode = customerCode;
                searchCustomerParameter.ClaimCode = customerCode;
            }
            // ------ ADD 王君 2012/12/24 Redmine#33741 ------<<<<<

			// 入金情報/引当情報取得用パラメータ 作成処理
			InputDepositNormalTypeAcs.SearchDepositParameter searchDepositParameter = this.SetDepositParameter(searchMode, customerCode, depositSlipNo);
			
			// 請求売上情報取得用パラメータ 作成処理
			InputDepositNormalTypeAcs.SearchSalesParameter searchSalesParameter = this.SetSalesParameter(searchMode, customerCode);

			DepositCustomer depositCustomer;
			DepositCustDmdPrc depositCustDmdPrc;

			// 引当無しモードの時
			bool getAllowanceDiv = true;
			if (depositRelDataAcs.AllowanceProc == 2)
			{
				getAllowanceDiv = false;
			}

			// 入金関連データ取得処理（得意先コード指定）
			int st = inputDepositNormalTypeAcs.SearchCustomerMode(searchCustomerParameter, searchDepositParameter, searchSalesParameter, getAllowanceDiv, this._consTaxLayMethod, out depositCustomer, out depositCustDmdPrc, out message);
			if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
			{
				// *** 入金情報と請求情報は、SearchCustomerModeにてグリッドのDataSetにセットされる事で表示される *** //

				// 得意先情報表示処理
				this.DisplayCustomer(depositCustomer);

				// 請求金額情報表示処理
				this.DisplayCustDmdPrc(depositCustDmdPrc);
			}

			return st;
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 検索処理(入金伝票番号指定)
		/// </summary>
		/// <param name="searchMode">検索モード</param>
		/// <param name="depositSlipNo">入金伝票番号</param>
		/// <param name="message">エラー発生時メッセージ</param>
		/// <returns>ConstantManagement.DB_Status</returns>
		/// <remarks>
		/// <br>Note       : 入金伝票番号指定にて検索処理を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private int SearchDepositSlipNoMode(SearchMode searchMode, int depositSlipNo, out string message)
		{
			// 得意先情報欄初期化処理
			this.ClearCustomer();

			// 入金伝票入力欄初期化処理
			this.ClearDeposit();

			// 得意先情報/得意先金額情報取得用パラメータ 作成処理
			InputDepositNormalTypeAcs.SearchCustomerParameter searchCustomerParameter = this.SetCustomerParameter(0);

			// 入金情報/引当情報取得用パラメータ 作成処理
			InputDepositNormalTypeAcs.SearchDepositParameter searchDepositParameter = this.SetDepositParameter(searchMode, 0, depositSlipNo);

			// 請求売上情報取得用パラメータ 作成処理
			InputDepositNormalTypeAcs.SearchSalesParameter searchSalesParameter = this.SetSalesParameter(searchMode, 0);
			
			DepositCustomer depositCustomer;
			DepositCustDmdPrc depositCustDmdPrc;

			// 引当無しモードの時
			bool getAllowanceDiv = true;
			if (depositRelDataAcs.AllowanceProc == 2)
			{
				getAllowanceDiv = false;
			}

			// 入金関連データ取得処理（入金伝票番号指定）
			int st = inputDepositNormalTypeAcs.SearchDepositSlipNoMode(searchCustomerParameter, searchDepositParameter, searchSalesParameter, getAllowanceDiv, out depositCustomer, out depositCustDmdPrc, out message);
			if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
			{
				// *** 入金情報と請求情報は、SearchDepositSlipNoModeにてグリッドのDataSetにセットされる事で表示される *** //

				// 得意先情報表示処理
				this.DisplayCustomer(depositCustomer);

				// 請求金額情報表示処理
				this.DisplayCustDmdPrc(depositCustDmdPrc);
			}

			return st;
		}
	       --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// 検索処理(売上伝票番号指定)
		/// </summary>
		/// <param name="searchMode">検索モード</param>
		/// <param name="customerCode">得意先コード</param>
        /// <param name="acceptAnOrderNo">受注番号</param>
		/// <param name="salesSlipNum">売上伝票番号</param>
		/// <param name="message">エラー発生時メッセージ</param>
		/// <returns>ConstantManagement.DB_Status</returns>
		/// <remarks>
		/// <br>Note       : 受注番号指定にて検索処理を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
        // ↓ 20070125 18322 c MA.NS用に変更
		//private int SearchAcceptAnOrderNoMode(SearchMode searchMode, int customerCode, int acceptAnOrderNo, out string message)
		private int SearchAcceptAnOrderNoMode( SearchMode searchMode
                                             , int        customerCode
                                             , int        acceptAnOrderNo
                                             , string     salesSlipNum
                                             , out string message)
        // ↑ 20070125 18322 c
		{
			// 得意先情報欄初期化処理
			this.ClearCustomer();

			// 入金伝票入力欄初期化処理
			this.ClearDeposit();

			// 伝票日付
			detSearchSlipDateStart.SetLongDate(0);

			// 引当済入金伝票呼出区分
			opsAlwcDmdSalesCall.Value = 0;

			// 入金日
			detDepositDateStart.SetLongDate(0);

			// 引当済入金伝票呼出区分
			opsAlwcDepositCall.Value = 0;

			// 得意先情報/得意先金額情報取得用パラメータ 作成処理
			InputDepositNormalTypeAcs.SearchCustomerParameter searchCustomerParameter = this.SetCustomerParameter(customerCode);

			// 入金情報/引当情報取得用パラメータ 作成処理
			InputDepositNormalTypeAcs.SearchDepositParameter searchDepositParameter = this.SetDepositParameter(searchMode, customerCode, 0);
			
			// 一部条件のクリア
			searchDepositParameter.AlwcDepositCall		= 0;								// 引当済請求入金伝票呼出区分

			// 受注番号セット
			//searchDepositParameter.AcceptAnOrderNo = acceptAnOrderNo;  // 2007.10.10 del

            // ↓ 20070130 18322 c MA.NS用に変更
			// 売上伝票番号セット
			searchDepositParameter.SalesSlipNum = salesSlipNum;
            // ↑ 20070130 18322 c

			// 請求売上情報取得用パラメータ 作成処理
			InputDepositNormalTypeAcs.SearchSalesParameter searchSalesParameter = this.SetSalesParameter(searchMode, customerCode);

            // ↓ 20070125 18322 c MA.NS用に変更
			//// 一部条件のクリア
			//searchSalesParameter.AlwcDmdSalesCall		= 0;								// 引当済請求売上伝票呼出区分
			//searchSalesParameter.SearchSlipDateStart	= 0;								// 伝票日付 開始
            //
			//// 受注番号セット
			//searchSalesParameter.AcceptAnOrderNo = acceptAnOrderNo;

			// 一部条件のクリア
	        // 引当済請求売上伝票呼出区分
			searchSalesParameter.AlwcSalesSlipCall 	 = 0;
			// 伝票日付 開始
			searchSalesParameter.SearchSlipDateStart = 0;

			// 受注番号セット
			//searchSalesParameter.AcceptAnOrderNo = acceptAnOrderNo;  // 2007.10.10 del

			// 売上伝票番号セット
			searchSalesParameter.SalesSlipNum = salesSlipNum;
            // ↑ 20070125 18322 c

			DepositCustomer depositCustomer;
			DepositCustDmdPrc depositCustDmdPrc;

			// 入金関連データ取得処理（受注番号指定）
			int st = inputDepositNormalTypeAcs.SearchAcceptAnOrderNoMode(searchCustomerParameter, searchDepositParameter, searchSalesParameter, out depositCustomer, out depositCustDmdPrc, out message);
			if (st != (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
			{
				// *** 入金情報と請求情報は、SearchAcceptAnOrderNoModeにてグリッドのDataSetにセットされる事で表示される *** //

				// 得意先情報表示処理
				this.DisplayCustomer(depositCustomer);

				// 請求金額情報表示処理
				this.DisplayCustDmdPrc(depositCustDmdPrc);
			}

			if (st == 14)
				st = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
			if (st == 24)
				st = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

			return st;
		}
	
		/// <summary>
		/// 入金伝票保存処理
		/// </summary>
		/// <param name="flgNewDeposit">更新後新規入金モードフラグ</param>
		/// <remarks>
		/// <br>Note       : 入金伝票の保存処理を行います。</br>
		/// <returns>処理結果 0:正常更新, 1:保存前不正データチェックエラー, 2:その他エラー</returns>
		/// <br>Programmer : 30414 忍 幸史</br>
		/// <br>Date       : 2008/06/26</br>
        /// <br>Update Note: 2010/06/17 李占川 Redmine#9948の修正
        /// <br>UpdateNote  : 2010/06/30 葛軍 各種仕様変更／障害対応</br>
        /// <br>              RedMine# 10657</br>
        /// <br>Update Note : 2012/12/24 王君</br>
        /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
        /// <br>              Redmine#33741の対応</br>
        /// <br>Update Note : 2013/07/18 呉軍</br>
        /// <br>管理番号    : 配信日なし</br>
        /// <br>              Redmine#35133既存障害№1の対応</br>
        /// </remarks>
		private int SaveDeposit(bool flgNewDeposit)
		{
            string errMsg = "";

            if ((Int32)selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositSlipNo] != 0)
            {
                // ログ出力
                if (MyOpeCtrl.Disabled((int)OperationCode.Revision))
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                  this.Name,
                                  "セキュリティにより伝票修正が制限されています。",
                                  0,
                                  MessageBoxButtons.OK);
                    return 0;
                }
            }

            try
            {
                // 得意先
                //if (this.tNedit_CustomerCode.GetInt() != this._prevCustomerCode) // DEL 王君 2012/12/24 Redmine#33741
                if (this.tNedit_CustomerCode.GetInt() != this._prevCustomerCode && this.tNedit_CustomerCode.GetInt() == 0)  // ADD 王君 2012/12/24 Redmine#33741
                {
                    errMsg = "得意先コードが変更されています。";
                    ClearScreen();
                    SearchAfterDisplySetting(-1);
                    return 1;
                }

                // 入金伝票未選択の時
                if (selectedDepositCopyRow == null)
                {
                    errMsg = "入金伝票が選択されていません。";
                    return 1;
                }
                // 修正不可入金データ判断処理
                uint retVal = IsLockDepositData(selectedDepositCopyRow);
                if (((retVal & 0x00f00000) == 0x00f00000) &&
                    ((retVal & 0x0f000000) != 0x0f000000))
                {
                    errMsg = "POS売上入金で作成された入金伝票の為、更新できません。";
                    return 1;
                }
                if ((retVal & 0x000000f0) == 0x000000f0)
                {
                    errMsg = "自動入金伝票の為、更新できません。";
                    return 1;
                }
                if ((retVal & 0x0000f000) == 0x0000f000)
                {
                    errMsg = "赤入金伝票の為、更新できません。";
                    return 1;
                }
                if ((retVal & 0x000f0000) == 0x000f0000)
                {
                    errMsg = "入金伝票(相殺済み黒)の為、更新できません。";
                    return 1;
                }

                // 入金額取得
                Int64 deposit = GetDepositTotal();

                // 手数料取得
                Int64 feeDeposit = this.edtFeeDeposit.GetInt();

                // ----- DEL 2013/07/18 呉軍 For Redmine#35133 ----- >>>>>
                //if (deposit >= 0)
                //{
                //    if (feeDeposit < 0)
                //    {
                //        errMsg = "手数料の値が不正です。";
                //        this.edtFeeDeposit.Focus();
                //        return -1;
                //    }
                //}
                //else
                //{
                //    if (feeDeposit > 0)
                //    {
                //        errMsg = "手数料の値が不正です。";
                //        this.edtFeeDeposit.Focus();
                //        return -1;
                //    }
                //}
                // ----- DEL 2013/07/18 呉軍 For Redmine#35133 ----- <<<<<

                // 入金合計金額取得
                Int64 depositTotal = this.edtDepositTotal.GetInt();

                // 引当額合計取得
                Int64 depositAlwTotal = GetDepositAlwTotal();

                if (depositTotal < 0)
                {
                    if ((depositAlwTotal > 0) || (depositAlwTotal < depositTotal))
                    {
                        errMsg = "引当額が入金合計を超えています。";
                        this.grdDepositKind.Focus();
                        this.grdDepositKind.Rows[0].Cells[DepositRelDataAcs.ctDeposit].Activate();
                        this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                        return 1;
                    }
                }
                else
                {
                    if (depositAlwTotal > depositTotal)
                    {
                        errMsg = "引当額が入金合計を超えています。";
                        this.grdDepositKind.Focus();
                        this.grdDepositKind.Rows[0].Cells[DepositRelDataAcs.ctDeposit].Activate();
                        this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                        return 1;
                    }
                }
            }
            finally
            {
                if (errMsg.Length > 0)
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                  this.Name, 
                                  errMsg, 
                                  0, 
                                  MessageBoxButtons.OK);
                }
            }

            //ADD START 2010/05/07 gejun forM1007A-手形データ追加
            // 期日チェック
            if (this._draftOptSet)
            {
                for (int rowIndex = 0; rowIndex < this.grdDepositKind.Rows.Count; rowIndex++)
                {
                    if ((int)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value == (int)MnyKindDiv.Bill)
                    {
                        this._doubleCheckFlg = true;
                        if (!this.ValidityTermCheck(rowIndex))
                        {
                            this._doubleCheckFlg = false;
                            return 1;
                        }
                        this._doubleCheckFlg = false;
                    }
                }
            }

            //ADD END 2010/05/07 gejun forM1007A-手形データ追加
            // 入金内訳一覧の内容を反映させるため
            this.grdDepositKind.ActiveCell = null;

			// 受注一覧の引当内容を反映させるため
            //this.grdDmdSalesList.ActiveCell = null; // DEL BY zhujw 2014/07/09 FOR RedMine#42902の⑬ 「-」のみで他の項目に移動しようとすると以下のエラーが発生する。
            // ADD BY zhujw 2014/07/09 FOR RedMine#42902の⑬ 「-」のみで他の項目に移動しようとすると以下のエラーが発生する。 ---->>>>>
            if (selectedAllowanceCopyRows.Count > 0)
            {
			this.grdDmdSalesList.ActiveCell = null;
            }
            // ADD BY zhujw 2014/07/09 FOR RedMine#42902の⑬ 「-」のみで他の項目に移動しようとすると以下のエラーが発生する。 ----<<<<<

            // 入金伝票入力欄変更時処理　※0円の入金伝票を作成する場合、次の CheackDataBeforeSave() で selectedDepositCopyRow が設定されます
            GetDisplayDeposit(null, selectedDepositCopyRow, selectedAllowanceCopyRows);

			// 保存前データチェック処理
            if (CheackDataBeforeSave() == false)
            {
                return 1;
            }

            if ((this._consTaxLayMethod == 2) || (this._consTaxLayMethod == 3))
            {
                if (selectedAllowanceCopyRows.Count > 0)
                {
                    DialogResult res = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                                     this.Name,
                                                     "指定得意先は請求時課税のユーザーです。" + "\r\n" + "売上引当を行うと消費税が合わなくなりますが、よろしいですか？",
                                                     0,
                                                     MessageBoxButtons.YesNo);

                    if (res == DialogResult.No)
                    {
                        this.tNedit_CustomerCode.Focus();
                        return 1;
                    }
                }
            }

			// イベントの無効化
			GridEventManager eventManager = this.grdDepositList.EventManager;
			eventManager.SetEnabled(GridEventIds.BeforeRowDeactivate, false);

			try
			{
				this.Cursor = Cursors.WaitCursor;

                // 保存前の入金日を退避
                DateTime dtDepositDate = this.edtDepositDate.GetDateTime();

				// TODO:入金データ保存処理
				int depositSlipNo;
				string message;
                //MODIFY START 2009/05/06 gejun for M1007A-手形データ追加
                int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                // --- ADD 2010/06/30 ----------------------------------------->>>>>
                if (this._rcvDraftData == null)
                {
                    int moneyKindDiv; 
                    int moneyKindCode;
                    Int64 deposit;
                    DateTime dateTime;
                    int rowIndex = -1;
                    bool changeFlg = true;

                    List<RcvDraftData> retList = new List<RcvDraftData>();
                    if (this._draftOptSet && SearchDraftData(ref retList) == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                    {
                        this._rcvDraftData = (RcvDraftData)retList[0];
                        // 論理削除区分=1:論理削除
                        if (this._rcvDraftData.LogicalDeleteCode == 1)
                        {
                            this._rcvDraftData = null;
                        }

                        if (this._rcvDraftData != null)
                        {
                            for (int index = 0; index < this.grdDepositKind.Rows.Count; index++)
                            {
                                moneyKindDiv = (int)this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctDepositKindDiv].Value;
                                if (moneyKindDiv == (int)MnyKindDiv.Bill)
                                {
                                    rowIndex = index;
                                    break;
                                }
                            }

                            if (rowIndex >= 0)
                            {
                                // ADD 2010/07/02 ----->>>
                                if (!(this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == DBNull.Value) &&
                                     !((string)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == ""))
                                {
                                // ADD 2010/07/02 ----->>>
                                    // 金種コード
                                    moneyKindDiv = (int)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value;
                                    moneyKindCode = (Int32)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindCode].Value;
                                    deposit = Convert.ToInt64(this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value.ToString().Replace(",", ""));
                                    GetPayTimeLimit(rowIndex, out dateTime);

                                    DataRow dr = beforeSelectedDepositRow;

                                    if (dr != null)
                                    {
                                        if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv1]) &&
                                            (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode1]))
                                        {
                                            if (deposit == (Int64)dr[InputDepositNormalTypeAcs.ctDeposit1]
                                                && dateTime == (DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm1])
                                                changeFlg = false;
                                        }

                                        if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv2]) &&
                                           (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode2]))
                                        {
                                            if (deposit == (Int64)dr[InputDepositNormalTypeAcs.ctDeposit2]
                                                && dateTime == (DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm2])
                                                changeFlg = false;
                                        }

                                        if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv3]) &&
                                            (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode3]))
                                        {
                                            if (deposit == (Int64)dr[InputDepositNormalTypeAcs.ctDeposit3]
                                                && dateTime == (DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm3])
                                                changeFlg = false;
                                        }

                                        if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv4]) &&
                                            (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode4]))
                                        {
                                            if (deposit == (Int64)dr[InputDepositNormalTypeAcs.ctDeposit4]
                                                && dateTime == (DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm4])
                                                changeFlg = false;
                                        }
                                        if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv5]) &&
                                                (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode5]))
                                        {
                                            if (deposit == (Int64)dr[InputDepositNormalTypeAcs.ctDeposit5]
                                                && dateTime == (DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm5])
                                                changeFlg = false;
                                        }
                                        if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv6]) &&
                                                (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode6]))
                                        {
                                            if (deposit == (Int64)dr[InputDepositNormalTypeAcs.ctDeposit6]
                                                && dateTime == (DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm6])
                                                changeFlg = false;
                                        }
                                        if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv7]) &&
                                                (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode7]))
                                        {
                                            if (deposit == (Int64)dr[InputDepositNormalTypeAcs.ctDeposit7]
                                                && dateTime == (DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm7])
                                                changeFlg = false;
                                        }
                                        if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv8]) &&
                                                (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode8]))
                                        {
                                            if (deposit == (Int64)dr[InputDepositNormalTypeAcs.ctDeposit8]
                                                && dateTime == (DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm8])
                                                changeFlg = false;
                                        }
                                        if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv9]) &&
                                            (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode9]))
                                        {
                                            if (deposit == (Int64)dr[InputDepositNormalTypeAcs.ctDeposit9]
                                                && dateTime == (DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm9])
                                                changeFlg = false;
                                        }
                                        if ((moneyKindDiv == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindDiv10]) &&
                                            (moneyKindCode == (Int32)dr[InputDepositNormalTypeAcs.ctMoneyKindCode10]))
                                        {
                                            if (deposit == (Int64)dr[InputDepositNormalTypeAcs.ctDeposit10]
                                                && dateTime == (DateTime)dr[InputDepositNormalTypeAcs.ctValidityTerm10])
                                                changeFlg = false;
                                        }
                                    }
                                // ADD 2010/07/02 ----->>>
                                }
                                else
                                    changeFlg = false;
                                // ADD 2010/07/02 ----->>>
                            }
                            else
                                changeFlg = false;

                            if (!changeFlg )
                                this._rcvDraftData = null;
                        }
                    }

                }
                // --- ADD 2010/06/30 ----------------------------------------->>>>>

                if (this._rcvDraftData == null)
                    status = inputDepositNormalTypeAcs.SaveDepositData(this._loginSectionCode, _selectSectionCode, tNedit_CustomerCode.GetInt(), this._claimCode, selectedDepositCopyRow, selectedAllowanceCopyRows, dtDepositDate, out depositSlipNo, out message);
                else
                {
                    bool updateFlg = false;
                    for (int rowIndex = 0; rowIndex < this.grdDepositKind.Rows.Count; rowIndex++)
                    {
                        // 金種区分取得
                        int moneyKindDiv = (int)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value;
 
                        // 金種区分が「105：手形」の場合
                        if ((moneyKindDiv == (int)MnyKindDiv.Bill))
                        {
                            // 手形期日取得
                            DateTime dateTime;
                            GetPayTimeLimit(rowIndex, out dateTime);
                            // 手形期日
                            if (TDateTime.IsAvailableDate(dateTime) == false)
                            {
                                updateFlg = false;
                                break;
                            }

                            if ((this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == DBNull.Value) ||
                    (string)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == "")
                            {
                                updateFlg = false;
                                break;
                            }
                            // 入金行番号
                            this._rcvDraftData.DepositRowNo = rowIndex + 1;

                            // --- ADD 2010/06/30 ----------------------------------------->>>>>
                            this._rcvDraftData.ValidityTerm = Convert.ToInt32(dateTime.ToString("yyyyMMdd"));
                            this._rcvDraftData.Deposit = Convert.ToInt64(this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value.ToString().Replace(",", ""));
                            // --- ADD 2010/06/30 ----------------------------------------->>>>>
                            updateFlg = true;
                        }
                    }
                    if (updateFlg)
                        status = inputDepositNormalTypeAcs.SaveDepositDataWithDraftData(this._loginSectionCode, _selectSectionCode, tNedit_CustomerCode.GetInt(), this._claimCode, selectedDepositCopyRow, selectedAllowanceCopyRows, dtDepositDate, out depositSlipNo, out message, this._rcvDraftData, this._rcvDraftDataDel);
                    else
                        status = inputDepositNormalTypeAcs.SaveDepositData(this._loginSectionCode, _selectSectionCode, tNedit_CustomerCode.GetInt(), this._claimCode, selectedDepositCopyRow, selectedAllowanceCopyRows, dtDepositDate, out depositSlipNo, out message);
                }
                //MODIFY END 2009/05/06 gejun for M1007A-手形データ追加
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        this._FirstStartFlag = false; // ADD 2010/06/17
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_CONCT_TIMEOUT:
                        {
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                          this.Name, 
                                          "入金番号を別端末が採番しています。しばらくお待ちになって再度実行してください。" + "\r\n\r\n" + message, 
                                          status, 
                                          MessageBoxButtons.OK);                         
                            return (status);
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                        {
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                          this.Name, 
                                          "入金伝票は他端末により既に削除されています。" + "\r\n\r\n" + message, 
                                          status, 
                                          MessageBoxButtons.OK);
                            return (status);
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        {
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                          this.Name, 
                                          "入金伝票は他端末により既に更新、又は削除されています。" + "\r\n\r\n" + "再度入金伝票を呼び出して下さい。" + "\r\n\r\n" + message, 
                                          status, 
                                          MessageBoxButtons.OK);
                            return (status);
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_DUPLICATE:
                        {
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                          this.Name, 
                                          "入金伝票は他端末により既に引当されています。" + "\r\n\r\n" + "再度入金伝票を呼び出して下さい。" + "\r\n\r\n" + message, 
                                          status, 
                                          MessageBoxButtons.OK);
                            return (status);
                        }
                    // 企業ロックタイムアウト
                    case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT:
                        {
                            // --- UPD m.suzuki 2010/08/18 ---------->>>>>
                            //TMsgDisp.Show(this,
                            //            emErrorLevel.ERR_LEVEL_STOPDISP,
                            //            this.Name,
                            //            "保存に失敗しました。" + "\r\n"
                            //            + "\r\n" +
                            //            "シェアチェックエラー（企業ロック）です。" + "\r\n" +
                            //            "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n" +
                            //            "再試行するか、しばらく待ってから再度処理を行ってください。",
                            //            status,
                            //            MessageBoxButtons.OK);
                            TMsgDisp.Show(this,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                this.Name,
                                "処理が込み合っているため中断しました。" + "\r\n" +
                                "再試行するか、しばらく待ってから再度処理を実行して下さい。" + "\r\n",
                                status,
                                MessageBoxButtons.OK );
                            // --- UPD m.suzuki 2010/08/18 ----------<<<<<
                            return (status);
                        }
                    // 拠点ロックタイムアウト
                    case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT:
                    // --- ADD m.suzuki 2010/08/18 ---------->>>>>
                    // 締次ロック(伝票側)タイムアウト
                    case (int)ConstantManagement.DB_Status.ctDB_ADS_LOCK_TIMEOUT:
                    // --- ADD m.suzuki 2010/08/18 ----------<<<<<
                        {
                            // --- UPD m.suzuki 2010/08/18 ---------->>>>>
                            //TMsgDisp.Show(this,
                            //            emErrorLevel.ERR_LEVEL_STOPDISP,
                            //            this.Name,
                            //            "保存に失敗しました。" + "\r\n"
                            //            + "\r\n" +
                            //            "シェアチェックエラー（拠点ロック）です。" + "\r\n" +
                            //            "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n" +
                            //            "再試行するか、しばらく待ってから再度処理を行ってください。",
                            //            status,
                            //            MessageBoxButtons.OK);
                            TMsgDisp.Show( this,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                this.Name,
                                "処理が込み合っているため中断しました。" + "\r\n" +
                                "再試行するか、しばらく待ってから再度処理を実行して下さい。" + "\r\n",
                                status,
                                MessageBoxButtons.OK );
                            // --- UPD m.suzuki 2010/08/18 ----------<<<<<
                            return (status);
                        }
                    // 倉庫ロックタイムアウト
                    case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT:
                        {
                            // --- UPD m.suzuki 2010/08/18 ---------->>>>>
                            //TMsgDisp.Show(this,
                            //            emErrorLevel.ERR_LEVEL_STOPDISP,
                            //            this.Name,
                            //            "保存に失敗しました。" + "\r\n"
                            //            + "\r\n" +
                            //            "シェアチェックエラー（倉庫ロック）です。" + "\r\n" +
                            //            "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました。" + "\r\n" +
                            //            "再試行するか、しばらく待ってから再度処理を行ってください。",
                            //            status,
                            //            MessageBoxButtons.OK);
                            TMsgDisp.Show( this,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                this.Name,
                                "処理が込み合っているため中断しました。" + "\r\n" +
                                "再試行するか、しばらく待ってから再度処理を実行して下さい。" + "\r\n",
                                status,
                                MessageBoxButtons.OK );
                            // --- UPD m.suzuki 2010/08/18 ----------<<<<<
                            return (status);
                        }
                    // --- ADD m.suzuki 2010/08/18 ---------->>>>>
                    // 締次ロック(集計側)タイムアウト
                    case (int)ConstantManagement.DB_Status.ctDB_ADU_LOCK_TIMEOUT:
                        {
                            TMsgDisp.Show( this,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                this.Name,
                                "対象の期間を集計処理中のため中断しました。" + "\r\n" +
                                "入金日を変更して、再度処理を実行して下さい。" + "\r\n",
                                status,
                                MessageBoxButtons.OK );
                            return (status);
                        }
                    // --- ADD m.suzuki 2010/08/18 ----------<<<<<
                    // ADD 2011/08/24 qijh SCM対応 - 拠点管理(10704767-00) --------->>>>>
                    case STATUS_CHK_SEND_ERR:
                        {
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                          this.Name,
                                          CHK_SEND_ERR_MSG,
                                          status,
                                          MessageBoxButtons.OK);
                            return (status);
                        }
                    // ADD 2011/08/24 qijh SCM対応 - 拠点管理(10704767-00) ---------<<<<<
                    default:
                        {
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, 
                                          this.Name, 
                                          "入金伝票の保存処理に失敗しました。" + "\r\n\r\n" + message, 
                                          status, 
                                          MessageBoxButtons.OK);
                            return (status);
                        }
                }

                if ((Int32)selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositSlipNo] != 0)
                {
                    // ログ出力
                    if (MyOpeCtrl.EnabledWithLog((int)OperationCode.Revision))
                    {
                        MyOpeCtrl.Logger.WriteOperationLog(
                            "Revision",
                            (int)OperationCode.Revision,
                            0,
                            string.Format("{0}伝票、伝票番号:{1}を修正", "入金", depositSlipNo.ToString("000000000")));
                    }
                }

                // 請求金額情報取得スレッド開始処理
                CustDmdPrcThreadStart();

                //// 入金一覧の更新行をアクティブとする
                //grdDepositList.ActiveRow = null;
                //foreach (UltraGridRow rw in this.grdDepositList.Rows)
                //{
                //    if ((int)rw.Cells[InputDepositNormalTypeAcs.ctDepositSlipNo].Value == depositSlipNo)
                //    {
                //        rw.Activate();
                //        break;
                //    }
                //}

                if (flgNewDeposit == true)
                {
                    // 新規入金伝票入力準備処理
                    this.NewDepositStandby();

                    for (int index = 0; index < grdDepositList.Rows.Count; index++)
                    {
                        grdDepositList.DisplayLayout.Rows[index].ExpansionIndicator = ShowExpansionIndicator.CheckOnDisplay;
                    }

                    for (int index = 0; index < this.grdDmdSalesList.Rows.Count; index++)
                    {
                        this.grdDmdSalesList.Rows[index].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.Disabled;
                    }
                }
                // 2009/10/23 Del >>>
                //if ((int)this.deposlipdateclrdiv_tcomboeditor.value == 0)
                //{
                //    // システム日付に戻す
                //    this.edtdepositdate.setdatetime(datetime.today);
                //}
                //else
                //{
                //    // 入力日付のまま
                //    this.edtdepositdate.setdatetime(dtdepositdate);
                //}
                // 2009/10/23 Del <<<
                
                //btnSearchDeposit_Click(btnSearchDeposit, new EventArgs());
                //btnSearchDmdSales_Click(this.btnSearchDmdSales, new EventArgs());

                //grdDepositKind.DisplayLayout.RowScrollRegions.Clear();

                //GetDepositInfo(this._claimCode); // DEL 2009/12/16

                // --- ADD 2009/12/16 ---------->>>>>
                if (this._grdDepositSearchFlag)
                {
                    // 入金情報取得処理
                    //GetDepositInfo(this._claimCode); // DEL 王君 2012/12/24 Redmine#33741
                    GetDepositInfo(this._claimCode, 0);// ADD 王君 2012/12/24 Redmine#33741
                    btnSearchDeposit_Click(btnSearchDeposit, new EventArgs());
                }
                else
                {
                    // 入金情報取得処理
                    //GetDepositInfo(this._claimCode); // DEL 王君 2012/12/24 Redmine#33741
                    GetDepositInfo(this._claimCode, 0);// ADD 王君 2012/12/24 Redmine#33741
                }
                // --- ADD 2009/12/16 ----------<<<<<

                // 2009/10/23 Add >>>
                if ((int)this.DepoSlipDateClrDiv_tComboEditor.Value == 0)
                {
                    // システム日付に戻す
                    this.edtDepositDate.SetDateTime(DateTime.Today);
                }
                else
                {
                    // 入力日付のまま
                    this.edtDepositDate.SetDateTime(dtDepositDate);
                }
                // 2009/10/23 Add <<<
                
                // 保存確認ダイアログ表示
				SaveCompletionDialog dialog = new SaveCompletionDialog();
				dialog.ShowDialog(2);

                this.tNedit_CustomerCode.Focus();
			}
			finally
			{
				eventManager.SetEnabled(GridEventIds.BeforeRowDeactivate, true);

				this.Cursor = Cursors.Default;
			}

			return 0;
		}

        /// <summary>
        /// 入金伝票削除処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 入金伝票の削除処理を行います。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// <br>UpdateNote : 2010/12/20 李占川 入金伝票入力の改修</br>
        /// <br>             伝票削除を実行した後、鑑部の今回入金額を更新する</br>
        /// </remarks>
        private void DeleteDeposit()
        {
            string errMsg = "";

            try
            {
                // 入金伝票未選択の時
                if (this.edtDepositSlipNo.GetInt() == 0)
                {
                    errMsg = "入金伝票が選択されていません。";
                    return;
                }
                // 修正不可入金データ判断処理
                uint retVal = IsLockDepositData(beforeSelectedDepositRow);
                if ((retVal & 0x0000000f) == 0x0000000f)
                {
                    errMsg = "締済み伝票の為、削除できません。";
                    return;
                }
                if (((retVal & 0x00f00000) == 0x00f00000) &&
                    ((retVal & 0x0f000000) != 0x0f000000))
                {
                    errMsg = "POS売上入金で作成された入金伝票の為、削除できません。";
                    return;
                }
                if ((retVal & 0x000000f0) == 0x000000f0)
                {
                    errMsg = "自動入金伝票の為、削除できません。";
                    return;
                }
                if ((retVal & 0x000f0000) == 0x000f0000)
                {
                    errMsg = "入金伝票(相殺済み黒)の為、削除できません。";
                    return;
                }
            }
            finally
            {
                if (errMsg.Length > 0)
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                  this.Name, 
                                  errMsg, 
                                  0, 
                                  MessageBoxButtons.OK);
                }
            }

            // 赤伝区分によりメッセージ作成
            string denInfo = "";
            //MODIFY START 2009/05/06 gejun for M1007A-手形データ追加
            string msg = "";
            switch ((Int32)beforeSelectedDepositRow[InputDepositNormalTypeAcs.ctDepositDebitNoteCd])
            {
                case 1:
                    denInfo = "入金伝票番号 ： [" + ((Int32)beforeSelectedDepositRow[InputDepositNormalTypeAcs.ctDepositSlipNo]).ToString("00000000#") + "]　赤入金伝票";
                    break;
                case 2:
                    denInfo = "入金伝票番号 ： [" + ((Int32)beforeSelectedDepositRow[InputDepositNormalTypeAcs.ctDepositSlipNo]).ToString("00000000#") + "]　入金伝票(相殺済み黒)";
                    break;
                default:
                    denInfo = "入金伝票番号 ： [" + ((Int32)beforeSelectedDepositRow[InputDepositNormalTypeAcs.ctDepositSlipNo]).ToString("00000000#") + "]";
                    break;
            }
            List<RcvDraftData> retList = new List<RcvDraftData>();
            if (this._draftOptSet && SearchDraftData(ref retList) == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
            {
                msg = "手形データは削除されません。" + "\r\n\r\n" + "削除してもよいですか？";
            }
            else
            {
                msg = "選択中の入金伝票を削除します。" + "\r\n\r\n" + "  " + denInfo + "\r\n\r\n" + "よろしいですか？";
            }
            //MODIFY END 2009/05/06 gejun for M1007A-手形データ追加
            DialogResult res = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, 
                                             this.Name,
                                             msg,  //ADD 2009/05/06 gejun for M1007A-手形データ追加
                                             0, 
                                             MessageBoxButtons.YesNo, 
                                             MessageBoxDefaultButton.Button2);
            if (res != DialogResult.Yes)
            {
                return;
            }
            string timeDmdTtl = string.Empty;
            try
            {
                this.Cursor = Cursors.WaitCursor;

                // ADD 2009/05/01 コメント追記
                // 物理削除メソッドを使用しているが、リモート側で論理削除処理に変更している
                // 入金データ削除処理
                int status = inputDepositNormalTypeAcs.DeleteDepositData(enterpriseCode, beforeSelectedDepositRow, out errMsg);
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        // --- ADD 2010/12/20 ----------------------------------------->>>>>
                        // 入金合計
                        double depositTotal = 0;
                        if (this.edtDepositTotal.GetInt() != 0)
                        {
                            depositTotal = double.Parse(this.edtDepositTotal.DataText.Trim());
                        }
                        // 今回入金金額
                        this._depositCustDmdPrc.ThisTimeDmdNrml = this._depositCustDmdPrc.ThisTimeDmdNrml - (long)depositTotal;
                        // --- ADD 2010/12/20 -----------------------------------------<<<<<
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                        {
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                          this.Name,
                                          "入金伝票は他端末により既に削除されています。" + "\r\n\r\n" + errMsg,
                                          status,
                                          MessageBoxButtons.OK);
                            return;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                        {
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                          this.Name,
                                          "入金伝票は他端末により更新されています。" + "\r\n\r\n" + "再度入金伝票を呼び出して下さい。" + "\r\n\r\n" + errMsg,
                                          status,
                                          MessageBoxButtons.OK);
                            return;
                        }
                    // 企業ロックタイムアウト
                    case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT:
                        {
                            TMsgDisp.Show(this,
                                        emErrorLevel.ERR_LEVEL_STOPDISP,
                                        this.Name,
                                        "削除に失敗しました。" + "\r\n"
                                        + "\r\n" +
                                        "シェアチェックエラー（企業ロック）です。" + "\r\n" +
                                        "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n" +
                                        "再試行するか、しばらく待ってから再度処理を行ってください。",
                                        status,
                                        MessageBoxButtons.OK);
                            return;
                        }
                    // 拠点ロックタイムアウト
                    case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT:
                        {
                            TMsgDisp.Show(this,
                                        emErrorLevel.ERR_LEVEL_STOPDISP,
                                        this.Name,
                                        "削除に失敗しました。" + "\r\n"
                                        + "\r\n" +
                                        "シェアチェックエラー（拠点ロック）です。" + "\r\n" +
                                        "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n" +
                                        "再試行するか、しばらく待ってから再度処理を行ってください。",
                                        status,
                                        MessageBoxButtons.OK);
                            return;
                        }
                    // 倉庫ロックタイムアウト
                    case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT:
                        {
                            TMsgDisp.Show(this,
                                        emErrorLevel.ERR_LEVEL_STOPDISP,
                                        this.Name,
                                        "削除に失敗しました。" + "\r\n"
                                        + "\r\n" +
                                        "シェアチェックエラー（倉庫ロック）です。" + "\r\n" +
                                        "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました。" + "\r\n" +
                                        "再試行するか、しばらく待ってから再度処理を行ってください。",
                                        status,
                                        MessageBoxButtons.OK);
                            return;
                        }
                    // ADD 2011/08/24 qijh SCM対応 - 拠点管理(10704767-00) --------->>>>>
                    case STATUS_CHK_SEND_ERR:
                        {
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                          this.Name,
                                          CHK_SEND_ERR_MSG,
                                          status,
                                          MessageBoxButtons.OK);
                            return;
                        }
                    // ADD 2011/08/24 qijh SCM対応 - 拠点管理(10704767-00) ---------<<<<<
                    default:
                        {
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP,
                                          this.Name,
                                          "入金伝票の削除処理に失敗しました。" + "\r\n\r\n" + errMsg,
                                          status,
                                          MessageBoxButtons.OK);
                            return;
                        }
                }

                // ログ出力
                if (MyOpeCtrl.EnabledWithLog((int)OperationCode.Delete))
                {
                    MyOpeCtrl.Logger.WriteOperationLog(
                        "Delete",
                        (int)OperationCode.Delete,
                        0,
                        string.Format("{0}伝票、伝票番号:{1}を削除", "入金", ((Int32)beforeSelectedDepositRow[InputDepositNormalTypeAcs.ctDepositSlipNo]).ToString("000000000")));
                }

                // 請求金額情報取得スレッド開始処理
                CustDmdPrcThreadStart();

                // 新規入金伝票入力準備処理
                NewDepositStandby();
                for (int index = 0; index < this.grdDmdSalesList.Rows.Count; index++)
                {
                    this.grdDmdSalesList.Rows[index].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.Disabled;
                }
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// 入金伝票赤伝処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 入金伝票の赤伝処理を行います。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// <br>UpdateNote : 2010/12/20 李占川 入金伝票入力の改修</br>
        /// <br>             赤伝発行を実行した後、鑑部の今回入金額を更新する</br>
        /// </remarks>
        private void AkaDeposit()
        {
            int depositSlipNo;
            int depositDate;
            int acptAnOdrStatus;
            string errMsg = "";

            // 現在の入金番号を取得
            depositSlipNo = (int)selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositSlipNo];

            // 受注ステータスを取得
            acptAnOdrStatus = (int)selectedDepositCopyRow[InputDepositNormalTypeAcs.ctAcptAnOdrStatus];

            try
            {
                // 新規入金の時
                if (depositSlipNo == 0)
                {
                    errMsg = "入金伝票を選択して下さい。";
                    return;
                }
                // 修正不可入金データ判断処理 赤伝入金の時
                uint retVal = IsLockDepositData(selectedDepositCopyRow);
                if (((retVal & 0x0000f000) == 0x0000f000) || ((retVal & 0x000f0000) == 0x000f0000))
                {
                    errMsg = "選択されている入金伝票は既に赤伝の為、処理は行えません。";
                    return;
                }
                if (((retVal & 0x00f00000) == 0x00f00000) &&
                    ((retVal & 0x0f000000) != 0x0f000000))
                {
                    errMsg = "POS売上入金で作成された入金伝票の為、処理は行えません。";
                    return;
                }
            }
            finally
            {
                if (errMsg.Length > 0)
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                  this.Name, 
                                  errMsg, 
                                  0, 
                                  MessageBoxButtons.OK);
                }
            }
            //ADD START 2009/05/06 gejun for M1007A-手形データ追加
            List<RcvDraftData> retList = new List<RcvDraftData>();
            if (this._draftOptSet && SearchDraftData(ref retList) == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
            {
                DialogResult dialogRet = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION,
                                       this.Name,
                                       "手形データの赤伝は発行されません。" + "\r\n\r\n" + "発行してもよいですか？",
                                       0,
                                       MessageBoxButtons.YesNo,
                                       MessageBoxDefaultButton.Button2);
                if (dialogRet != DialogResult.Yes)
                {
                    return;
                }
            }
            //ADD END 2009/05/06 gejun for M1007A-手形データ追加
            // 赤伝画面を起動
            SFUKK01403UB frm = new SFUKK01403UB();

            // 画面スキン変更
            this._controlScreenSkin.SettingScreenSkin(frm);

            // 入金伝票赤伝処理
            DialogResult result = frm.ShowDialogAkaCreate(inputDepositNormalTypeAcs, depositSlipNo, out depositDate);

            if (result != DialogResult.OK)
            {
                return;
            }
            // --- ADD 2010/12/20 ----------------------------------------->>>>>
            // 入金合計
            double depositTotal = 0;
            if (this.edtDepositTotal.GetInt() != 0)
            {
                depositTotal = double.Parse(this.edtDepositTotal.DataText.Trim());
            }
            // --- ADD 2010/12/20 -----------------------------------------<<<<<
            // 選択入金伝票再展開処理 ※編集中の時に変更前状態へ戻す
            ReExpandSelectDeposit();

            // 赤伝入金作成前 預り金区分取得処理
            int depositCd = 0;

            // 入金データ赤伝処理
            string message = "";
            int akaDepositSlipNo = 0;

            int status = inputDepositNormalTypeAcs.AkaDepositData(0, 
                                                              enterpriseCode, 
                                                              this.employee.BelongSectionCode, 
                                                              this.employee.EmployeeCode, 
                                                              this.employee.Name, 
                                                              depositDate, 
                                                              depositCd, 
                                                              depositSlipNo, 
                                                              acptAnOdrStatus,
                                                              out akaDepositSlipNo, 
                                                              out message);

            switch (status)
            {
                case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                    // --- ADD 2010/12/20 ----------------------------------------->>>>>
                    // 今回入金金額
                    this._depositCustDmdPrc.ThisTimeDmdNrml = this._depositCustDmdPrc.ThisTimeDmdNrml - (long)depositTotal;
                    // --- ADD 2010/12/20 -----------------------------------------<<<<<
                    break;
                case (int)ConstantManagement.DB_Status.ctDB_CONCT_TIMEOUT:
                    {
                        TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                      this.Name, 
                                      "入金伝票番号を別端末が採番しています。しばらくお待ちになって再度実行してください。" + "\r\n\r\n" + message, 
                                      status, 
                                      MessageBoxButtons.OK);
                        return;
                    }
                case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                    {
                        TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                      this.Name, 
                                      "入金伝票は他端末により既に削除されています。" + "\r\n\r\n" + message, 
                                      status, 
                                      MessageBoxButtons.OK);

                        return;
                    }
                case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:
                    {
                        TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                      this.Name, 
                                      "入金伝票は他端末により更新されています。" + "\r\n\r\n" + "再度入金伝票を呼び出して下さい。" + "\r\n\r\n" + message, 
                                      status, 
                                      MessageBoxButtons.OK);
                        return;
                    }
                // 企業ロックタイムアウト
                case (int)ConstantManagement.DB_Status.ctDB_ENT_LOCK_TIMEOUT:
                    {
                        TMsgDisp.Show(this,
                                    emErrorLevel.ERR_LEVEL_STOPDISP,
                                    this.Name,
                                    "赤伝作成に失敗しました。" + "\r\n"
                                    + "\r\n" +
                                    "シェアチェックエラー（企業ロック）です。" + "\r\n" +
                                    "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n" +
                                    "再試行するか、しばらく待ってから再度処理を行ってください。",
                                    status,
                                    MessageBoxButtons.OK);
                        return;
                    }
                // 拠点ロックタイムアウト
                case (int)ConstantManagement.DB_Status.ctDB_SEC_LOCK_TIMEOUT:
                    {
                        TMsgDisp.Show(this,
                                    emErrorLevel.ERR_LEVEL_STOPDISP,
                                    this.Name,
                                    "赤伝作成に失敗しました。" + "\r\n"
                                    + "\r\n" +
                                    "シェアチェックエラー（拠点ロック）です。" + "\r\n" +
                                    "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n" +
                                    "再試行するか、しばらく待ってから再度処理を行ってください。",
                                    status,
                                    MessageBoxButtons.OK);
                        return;
                    }
                // 倉庫ロックタイムアウト
                case (int)ConstantManagement.DB_Status.ctDB_WAR_LOCK_TIMEOUT:
                    {
                        TMsgDisp.Show(this,
                                    emErrorLevel.ERR_LEVEL_STOPDISP,
                                    this.Name,
                                    "赤伝作成に失敗しました。" + "\r\n"
                                    + "\r\n" +
                                    "シェアチェックエラー（倉庫ロック）です。" + "\r\n" +
                                    "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました。" + "\r\n" +
                                    "再試行するか、しばらく待ってから再度処理を行ってください。",
                                    status,
                                    MessageBoxButtons.OK);
                        return;
                    }
                // ADD 2011/08/24 qijh SCM対応 - 拠点管理(10704767-00) --------->>>>>
                case STATUS_CHK_SEND_ERR:
                    {
                        TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                      this.Name,
                                      CHK_SEND_ERR_MSG,
                                      status,
                                      MessageBoxButtons.OK);
                        return;
                    }
                // ADD 2011/08/24 qijh SCM対応 - 拠点管理(10704767-00) ---------<<<<<
                default:
                    {
                        TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, 
                                      this.Name, 
                                      "入金伝票の赤伝処理に失敗しました。" + "\r\n\r\n" + message, 
                                      status, 
                                      MessageBoxButtons.OK);
                        return;
                    }
            }

            // ログ出力
            if (MyOpeCtrl.EnabledWithLog((int)OperationCode.RedSlip))
            {
                MyOpeCtrl.Logger.WriteOperationLog(
                    "RedSlip",
                    (int)OperationCode.RedSlip,
                    0,
                    string.Format("{0}伝票、伝票番号:{1}を赤伝", "入金", depositSlipNo.ToString("000000000")));
            }

            btnSearchDeposit_Click(btnSearchDeposit, new EventArgs());

            // 請求金額情報取得スレッド開始処理
            CustDmdPrcThreadStart();

            // 新規入金伝票入力準備処理(現在伝票内容の一部を反映)
            NewDepositStandbyFromAka(depositDate);

            grdDepositList.DisplayLayout.RowScrollRegions.Clear();

           
            // 保存確認ダイアログ表示
            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                          this.Name, 
                          "赤入金伝票を次の番号で作成しました。" + "\r\n\r\n" + "  入金伝票番号 : [" + akaDepositSlipNo.ToString("00000000#") + "]", 
                          0, 
                          MessageBoxButtons.OK);
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
        /// 入金伝票保存処理
        /// </summary>
        /// <param name="flgNewDeposit">更新後新規入金モードフラグ</param>
        /// <remarks>
        /// <br>Note       : 入金伝票の保存処理を行います。</br>
        /// <returns>処理結果 0:正常更新, 1:保存前不正データチェックエラー, 2:その他エラー</returns>
        /// <br>Programmer : 97036 amami</br>
        /// <br>Date       : 2005.07.21</br>
        /// </remarks>
        private int SaveDeposit(bool flgNewDeposit)
        {
            // 入金伝票未選択の時
            if (selectedDepositCopyRow == null)
            {
                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票が選択されていません。", 0, MessageBoxButtons.OK);
                return 1;
            }

            // 修正不可入金データ判断処理
            uint retVal = this.IsLockDepositData(selectedDepositCopyRow);
            // ↓ 20070525 18322 a
            if (((retVal & 0x00f00000) == 0x00f00000) &&
                ((retVal & 0x0f000000) != 0x0f000000))
            {
                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "POS売上入金で作成された入金伝票の為、更新できません。", 0, MessageBoxButtons.OK);
                return 1;
            }
            // ↑ 20070525 18322 a
            if ((retVal & 0x000000f0) == 0x000000f0)
            {
                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "自動入金伝票の為、更新できません。", 0, MessageBoxButtons.OK);
                return 1;
            }
            if ((retVal & 0x0000f000) == 0x0000f000)
            {
                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "赤入金伝票の為、更新できません。", 0, MessageBoxButtons.OK);
                return 1;
            }
            if ((retVal & 0x000f0000) == 0x000f0000)
            {
                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票(相殺済み黒)の為、更新できません。", 0, MessageBoxButtons.OK);
                return 1;
            }

            // 受注一覧の引当内容を反映させるため
            grdDmdSalesList.ActiveCell = null;

            // 入金伝票入力欄変更時処理
            this.GetDisplayDeposit(null, selectedDepositCopyRow, selectedAllowanceCopyRows);

            // 保存前データチェック処理
            Control control;
            if (this.CheackDataBeforeSave(out control) == false)
            {
                if (control != null)
                {
                    control.Focus();
                }
                return 1;
            }

            // イベントの無効化
            GridEventManager eventManager = this.grdDepositList.EventManager;
            eventManager.SetEnabled(GridEventIds.BeforeRowDeactivate, false);

            try
            {
                this.Cursor = Cursors.WaitCursor;

                // 保存前の入金日を退避
                DateTime dtDepositDate = this.edtDepositDate.GetDateTime();

                // 入金データ保存処理
                int depositSlipNo;
                string message;

                int st = inputDepositNormalTypeAcs.SaveDepositData(this.employee.BelongSectionCode, _selectSectionCode, tNedit_CustomerCode.GetInt(), this._claimCode, selectedDepositCopyRow, selectedAllowanceCopyRows, out depositSlipNo, out message);
                if (st == (int)ConstantManagement.DB_Status.ctDB_CONCT_TIMEOUT)
                {
                    // エラー発生
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金番号を別端末が採番しています。しばらくお待ちになって再度実行してください。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
                    return 1;
                }
                else if ((st == (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE) || (st == (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE))
                {
                    // エラー発生
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票は他端末により既に更新、又は削除されています。" + "\r\n\r\n" +
                        "再度入金伝票を呼び出して下さい。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
                    return 1;
                }
                else if (st == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                {
                    // エラー発生
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票は他端末により既に削除されています。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
                    return 1;
                }
                else if (st == (int)ConstantManagement.DB_Status.ctDB_DUPLICATE)
                {
                    // エラー発生
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票は他端末により既に引当されています。" + "\r\n\r\n" +
                        "再度入金伝票を呼び出して下さい。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
                    return 1;
                }
                else if (st != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // エラー発生
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "入金伝票の保存処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
                    return 2;
                }

                // 請求金額情報取得スレッド開始処理
                this.CustDmdPrcThreadStart();

                // 入金一覧の更新行をアクティブとする
                grdDepositList.ActiveRow = null;
                foreach (UltraGridRow rw in this.grdDepositList.Rows)
                {
                    if ((int)rw.Cells[InputDepositNormalTypeAcs.ctDepositSlipNo].Value == depositSlipNo)
                    {
                        rw.Activate();
                        break;
                    }
                }

                if (flgNewDeposit == true)
                {
                    // 新規入金伝票入力準備処理
                    this.NewDepositStandby();
                }

                // 退避した入金日を元に戻す。
                this.edtDepositDate.SetDateTime(dtDepositDate);

                // 保存確認ダイアログ表示
                SaveCompletionDialog dialog = new SaveCompletionDialog();
                dialog.ShowDialog(2);
            }
            finally
            {
                eventManager.SetEnabled(GridEventIds.BeforeRowDeactivate, true);

                this.Cursor = Cursors.Default;
            }

            return 0;
        }

        /// <summary>
		/// 入金伝票削除処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 入金伝票の削除処理を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void DeleteDeposit()
		{
			// 入金伝票未選択の時
			if (edtDepositSlipNo.GetInt() == 0)
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票が選択されていません。", 0, MessageBoxButtons.OK);
				return;
			}

			// 修正不可入金データ判断処理
			uint retVal = this.IsLockDepositData(beforeSelectedDepositRow);
			if ((retVal & 0x0000000f) == 0x0000000f)
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "締済み伝票の為、削除できません。", 0, MessageBoxButtons.OK);
				return;
			}
            // ↓ 20070525 18322 a
            if (((retVal & 0x00f00000) == 0x00f00000) &&
                ((retVal & 0x0f000000) != 0x0f000000)   )
            {
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "POS売上入金で作成された入金伝票の為、削除できません。", 0, MessageBoxButtons.OK);
				return;
            }
            // ↑ 20070525 18322 a
			if ((retVal & 0x000000f0) == 0x000000f0)
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "自動入金伝票の為、削除できません。", 0, MessageBoxButtons.OK);
				return;
			}
			if ((retVal & 0x000f0000) == 0x000f0000)
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票(相殺済み黒)の為、削除できません。", 0, MessageBoxButtons.OK);
				return;
			}

			// 削除前データチェック処理
			Control control;
			if (this.CheackDataBeforeDelete(out control) == false)
			{
				if (control != null)
				{
					control.Focus();
				}
				return;
			}
            
            // 赤伝区分によりメッセージ作成
			string denInfo = "";
			switch (Convert.ToInt32(beforeSelectedDepositRow[InputDepositNormalTypeAcs.ctDepositDebitNoteCd]))
			{
				case 1:
					denInfo = "入金番号 ： [" + ((Int32)beforeSelectedDepositRow[InputDepositNormalTypeAcs.ctDepositSlipNo]).ToString("00000000#") + "]　赤入金伝票";
					break;
				case 2:
					denInfo = "入金番号 ： [" + ((Int32)beforeSelectedDepositRow[InputDepositNormalTypeAcs.ctDepositSlipNo]).ToString("00000000#") + "]　入金伝票(相殺済み黒)";
					break;
				default :
					denInfo = "入金番号 ： [" + ((Int32)beforeSelectedDepositRow[InputDepositNormalTypeAcs.ctDepositSlipNo]).ToString("00000000#") + "]";
					break;
			}
			DialogResult res = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, this.Name,
				"選択中の入金伝票を削除します。" + "\r\n\r\n" + "  " + denInfo + "\r\n\r\n" + "よろしいですか？", 0, MessageBoxButtons.YesNo, MessageBoxDefaultButton.Button2);
			if (res == DialogResult.Yes)
			{
				try
				{
					this.Cursor = Cursors.WaitCursor;

					// 入金データ削除処理
					string message;
					int st = inputDepositNormalTypeAcs.DeleteDepositData(enterpriseCode, beforeSelectedDepositRow, out message);
					if ((st == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND) || (st == (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE))
					{
						// エラー発生
						TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票は他端末により既に削除されています。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
						return;
					} 
					else if (st == (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE)
					{
						// エラー発生
						TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票は他端末により更新されています。" + "\r\n\r\n" +
							"再度入金伝票を呼び出して下さい。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
						return;
					} 
					else if (st != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
					{
						// エラー発生
						TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "入金伝票の削除処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
						return;
					} 

					// 請求金額情報取得スレッド開始処理
					this.CustDmdPrcThreadStart();

					// 新規入金伝票入力準備処理
					this.NewDepositStandby();
				}
				finally
				{
					this.Cursor = Cursors.Default;
				}
			}

		}

		/// <summary>
		/// 入金伝票赤伝処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 入金伝票の赤伝処理を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void AkaDeposit()
		{
			int depositSlipNo;
			int depositDate;

			// 現在の入金番号を取得
			depositSlipNo = (int)selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositSlipNo];

			// 新規入金の時
			if (depositSlipNo == 0)
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票を選択して下さい。", 0, MessageBoxButtons.OK);
				return;
			}

			// 修正不可入金データ判断処理 赤伝入金の時
			uint retVal = this.IsLockDepositData(selectedDepositCopyRow);
			if (((retVal & 0x0000f000) == 0x0000f000) || ((retVal & 0x000f0000) == 0x000f0000))
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "選択されている入金伝票は既に赤伝の為、処理は行えません。", 0, MessageBoxButtons.OK);
				return;
			}
            // ↓ 20070525 18322 a
            if (((retVal & 0x00f00000) == 0x00f00000) &&
                ((retVal & 0x0f000000) != 0x0f000000)   )
            {
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "POS売上入金で作成された入金伝票の為、処理は行えません。", 0, MessageBoxButtons.OK);
				return;
            }
            // ↑ 20070525 18322 a

			// 赤伝画面を起動
			SFUKK01403UB frm = new SFUKK01403UB();

            // ↓ 20070131 18322 a MA.NS用に変更
            // 画面スキン変更
            this._controlScreenSkin.SettingScreenSkin(frm);
            // ↑ 20070131 18322 a

			// 入金伝票赤伝処理
			DialogResult result = frm.ShowDialogAkaCreate(inputDepositNormalTypeAcs, depositSlipNo, out depositDate);

			if (result == DialogResult.OK)
			{
				// 選択入金伝票再展開処理 ※編集中の時に変更前状態へ戻す
				this.ReExpandSelectDeposit();

				// 赤伝入金作成前 預り金区分取得処理
                // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
                int depositCd = 0;
                //int depositCd;
                //if (this.GetAkaDepositCd(out depositCd) == false)
                //{
                //    return;
                //}
                // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<

				// 入金データ赤伝処理
				string message = "";
				int akaDepositSlipNo = 0;

                // ↓ 20070125 18322 c MA.NS用に変更
				//int st = inputDepositNormalTypeAcs.AkaDepositData(0, enterpriseCode, this.employee.BelongSectionCode, this.employee.EmployeeCode, depositDate, depositCd, depositSlipNo, out akaDepositSlipNo, out message);

				int st = inputDepositNormalTypeAcs.AkaDepositData(     0
                                                                 ,     enterpriseCode
                                                                 ,     this.employee.BelongSectionCode
                                                                 ,     this.employee.EmployeeCode
                                                                 ,     this.employee.Name
                                                                 ,     depositDate
                                                                 ,     depositCd
                                                                 ,     depositSlipNo
                                                                 , out akaDepositSlipNo
                                                                 , out message
                                                                 );


                // ↑ 20070125 18322 c

				if (st == (int)ConstantManagement.DB_Status.ctDB_CONCT_TIMEOUT)
				{
					// エラー発生
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金番号を別端末が採番しています。しばらくお待ちになって再度実行してください。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
					return;
				}
				else if (st == (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE)
				{
					// エラー発生
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票は他端末により更新されています。" + "\r\n\r\n" +
						"再度入金伝票を呼び出して下さい。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
					return;
				}
				else if ((st == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND) || (st == (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE))
				{
					// エラー発生
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票は他端末により既に削除されています。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
					return;
				}
				else if (st != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
				{
					// エラー発生
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "入金伝票の赤伝処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
					return;
				}

				// 請求金額情報取得スレッド開始処理
				this.CustDmdPrcThreadStart();

				// 新規入金伝票入力準備処理(現在伝票内容の一部を反映)
				this.NewDepositStandbyFromAka(depositDate);

				// 保存確認ダイアログ表示
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "赤入金伝票を次の番号で作成しました。" + "\r\n\r\n" + "  入金番号 : [" + akaDepositSlipNo.ToString("00000000#") + "]", 0, MessageBoxButtons.OK);
			}
		}
		   --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// 領収書発行処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 入金伝票の領収書発行処理を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void ReceiptPrint()
		{
			// 入金伝票入力欄変更時処理
			this.GetDisplayDeposit(null, selectedDepositCopyRow, selectedAllowanceCopyRows);

			// 修正不可入金データ判断処理 赤伝入金の時
			uint retVal = this.IsLockDepositData(selectedDepositCopyRow);
			if (((retVal & 0x0000f000) == 0x0000f000) || ((retVal & 0x000f0000) == 0x000f0000))
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "選択されている入金伝票は既に赤伝の為、処理は行えません。", 0, MessageBoxButtons.OK);
				return;
			}

			// --- マイナス入金の時 --- //
			if (Convert.ToInt64(selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositTotal]) < 0)
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金金額がマイナスの為、領収書発行は行えません。", 0, MessageBoxButtons.OK);
				return;
			}

			// 現在の入金番号を取得
			int depositSlipNo = (int)selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositSlipNo];

			// 新規入金の時
			if (depositSlipNo == 0)
			{
				// 入金伝票保存処理
				if (this.SaveDeposit(false) != 0) return;
			}
			else
			{
				// 入金内容の変更状況チェック処理
                // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
                //if (this.CheckUpdateData(false) != 0) return;
                if (this.CheckUpdateData(false, true) != 0) return;
                // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<
            }

			// --- マイナス入金の時 --- //
			// 保存[いいえ]の時にマイナスに戻る可能性があるのでもう一度チェック
			if (Convert.ToInt64(selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositTotal]) < 0)
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金金額がマイナスの為、領収書発行は行えません。", 0, MessageBoxButtons.OK);
				return;
			}

			try
			{
				this.Cursor = Cursors.WaitCursor;

				// 領収書データ作成処理
				Receipt receipt = inputDepositNormalTypeAcs.SetReceiptFromDepositDataRow(enterpriseCode, this.employee.BelongSectionCode, inputDepositNormalTypeAcs.GetDepositCustomer(), selectedDepositCopyRow);

                // ↓ 20070519 18322 d 今のところ使用しないので削除
				//// 領収書発行呼出
				//if (sfukk01502UA == null) sfukk01502UA = new SFUKK01502UA();
				//sfukk01502UA.ShowReceiptPrintDialogFromDeposit(this, receipt);
                // ↑ 20070519 18322 d
			}
			finally
			{
				this.Cursor = Cursors.Default;
			}
		}
		
		/// <summary>
		/// 新規入金伝票入力処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 新規入金伝票入力の処理を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
        /// <br>UpdateNote : 2009/12/25 李占川 ＰＭ．ＮＳ保守依頼④</br>
        /// <br>             Redmine#2128の対応</br>
        /// <br>Update Note: 2012/12/24 王君</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
		/// </remarks>
		private void NewDeposit()
		{
			// 受注引当一覧の行を非アクティブとする
			// これが無いと更新有無メッセージ後に引当額の残像がのこる。
			grdDmdSalesList.ActiveCell = null;

            // ----- ADD 王君 2012/12/24 Redmine#33741 ---------->>>>>
            Control control = new Control();
            bool flag = false;
            if (this.edtFeeDeposit.Focused)
            {
                this.tNedit_CustomerCode.Focus();
                control = this.edtFeeDeposit;
                flag = true;
            }
            else if (this.edtDiscountDeposit.Focused)
            {
                this.tNedit_CustomerCode.Focus();
                control = this.edtDiscountDeposit;
                flag = true;
            }else
            {
            }
            int rowindexKind = -1;
            int rowindexList = -1;
            GetGuidRowNo(out rowindexList,out rowindexKind);
            // ----- ADD 王君 2012/12/24 Redmine#33741 ----------<<<<<
			// 入金内容の変更状況チェック処理
            // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
            //if (this.CheckUpdateData(true) != 0)
            //{
            //    return;
            //}
            if (this.CheckUpdateData(true, true) != 0)
            {
                // ----- ADD 王君 2012/12/24 Redmine#33741 ---------->>>>>
                if (flag)
                {
                    control.Focus();
                }
                if (rowindexKind >= 0)
                {
                    this.grdDepositKind.Rows[rowindexKind].Cells[DepositRelDataAcs.ctDeposit].Activate();
                }
                if (rowindexList >= 0)
                {
                    this.grdDepositList.Rows[rowindexList].Activate();
                }
                // ----- ADD 王君 2012/12/24 Redmine#33741 ----------<<<<<
                return;
            }
            // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<

            // 画面情報初期化
            ClearScreen();
            SearchAfterDisplySetting(-1);
            this._preEdtDepositDate = DateTime.MinValue; // ADD 2009/12/25

            // フォーカス設定
            this.tNedit_CustomerCode.Focus();

            //// イベントの無効化
            //GridEventManager eventManager = this.grdDepositList.EventManager;
            //eventManager.SetEnabled(GridEventIds.BeforeRowDeactivate, false);
            //try
            //{
            //    // 新規入金伝票入力準備処理
            //    this.NewDepositStandby();

            //    // 請求売上情報データセット再登録処理
            //    inputDepositNormalTypeAcs.ResetDsDmdSalesInfo();

            //    for (int index = 0; index < this.grdDmdSalesList.Rows.Count; index++)
            //    {
            //        this.grdDmdSalesList.Rows[index].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.Disabled;
            //    }
            //}
            //finally
            //{
            //    eventManager.SetEnabled(GridEventIds.BeforeRowDeactivate, true);
            //}
		}

		/// <summary>
		/// 新規入金伝票入力準備処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 新規入金伝票入力の準備処理を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
        /// <br>UpdateNote : 2009/12/25 李占川 ＰＭ．ＮＳ保守依頼④</br>
        /// <br>             Redmine#2128の対応</br>
        /// <br>UpdateNote : 2012/12/24 王君</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
		/// </remarks>
		private void NewDepositStandby()
		{
            // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
            // 入金内訳グリッドのセルを非アクティブとする
            this.grdDepositKind.ActiveCell = null;

            // 入金内訳グリッドの行を非アクティブとする
            this.grdDepositKind.ActiveRow = null;
            // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

			// 入金一覧の新規行を非アクティブとする
			grdDepositList.ActiveRow = null;

			// 受注引当一覧のセルを非アクティブとする
			grdDmdSalesList.ActiveCell = null;

			// 受注引当一覧の行を非アクティブとする
			grdDmdSalesList.ActiveRow = null;

			// 入金伝票変更前画面初期化処理
			this.DisplyClearToDepositChange();

			// 入金一覧タブを表示する
			tabList.Tabs["DepositTab"].Selected = true;

			// 入金情報新規行追加処理
			selectedDepositCopyRow = inputDepositNormalTypeAcs.DepositNewRow();

            // --- ADD 2009/12/25 ---------->>>>>
            if (this._preEdtDepositDate != DateTime.MinValue)
            {
                selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp] = this._preEdtDepositDate.ToString("yyyy/MM/dd");
                selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositAddUpADate] = TDateTime.DateTimeToLongDate(this._preEdtDepositDate); 
            }
            // --- ADD 2009/12/25 ----------<<<<<

			// 引当情報DataRow取得処理
			selectedAllowanceCopyRows.Clear();
            beforeSelectedAllowanceRows.Clear();

			// 入金伝票入力欄表示処理
            //this.SetDisplayDeposit(selectedDepositCopyRow); // DEL 王君 2012/12/24 Redmine#33741
            this.SetDisplayDeposit(selectedDepositCopyRow, 0);// ADD 王君 2012/12/24 Redmine#33741

			// DataRowコピー処理
			inputDepositNormalTypeAcs.CopyDepositDataRow(ref selectedDepositCopyRow, ref beforeSelectedDepositRow);
			inputDepositNormalTypeAcs.CopyAllowanceDataRow(ref selectedAllowanceCopyRows, ref beforeSelectedAllowanceRows);

            // ↓ 20070126 18322 c MA.NS用に変更
            #region SF 諸費用別入金判定は使用しないので削除（全てコメントアウト）
            //// 諸費用別入金判定
			//if (depositRelDataAcs.OptSeparateCost == true)
			//{
			//	// 諸費用別入金 パネル表示
			//	pnlSeparateCost.Visible = true;
            //
			//	// 入金額にフォーカスをセット
			//	edtAcpOdrDeposit.Focus();
			//}
			//else
			//{
			//	// 入金額にフォーカスをセット
			//	edtDeposit.Focus();
            //}
            #endregion

            // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
            // 入金額にフォーカスをセット
            //edtDeposit.Focus();
            this.edtDepositDate.Focus();

            //this.tNedit_BankCode.Enabled = false;
            //this.btnBankGuid.Enabled = false;
            //this.edtDraftDrawingDate.Enabled = false;
            //this.tEdit_DraftNo.Enabled = false;
            //this.cmbDraftKind.Enabled = false;
            //this.cmbDraftDivide.Enabled = false;
            // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<
            
            // ↑ 20070126 18322 c
        }

		/// <summary>
		/// 新規入金伝票入力準備処理(現在伝票内容の一部を反映)
		/// </summary>
		/// <param name="depositDate">赤伝入金日付</param>
		/// <remarks>
		/// <br>Note       : 現在伝票内容の一部を反映し新規入金伝票入力の準備処理を行います。</br>
		/// <br>Programmer : 30414 忍 幸史</br>
		/// <br>Date       : 2008/06/26</br>
        /// <br>Update Note : 2012/12/24 王君</br>
        /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
        /// <br>              Redmine#33741の対応</br>
		/// </remarks>
		private void NewDepositStandbyFromAka(int depositDate)
		{
            if (grdDepositList.ActiveRow == null) return;

			UltraGridRow row;

			if (grdDepositList.ActiveRow.Band.Key == InputDepositNormalTypeAcs.ctRelation_DepositAllowance)
			{
				row = grdDepositList.ActiveRow.ParentRow;
			}
			else
			{
				row = grdDepositList.ActiveRow;
			}

			// 新規入金用表示する為に保持
			DataRow dr = inputDepositNormalTypeAcs.GetSelectDepositCopyRow(row.Cells[InputDepositNormalTypeAcs.ctDepositDataRow].Value as DataRow);

			// 入金一覧の新規行を非アクティブとする
			grdDepositList.ActiveRow = null;

			// 受注引当一覧の行を非アクティブとする
			grdDmdSalesList.ActiveCell = null;

			// 受注引当一覧の行を非アクティブとする
			grdDmdSalesList.ActiveRow = null;

			// 入金一覧タブを表示する
			tabList.Tabs["DepositTab"].Selected = true;

			// 入金情報新規行追加処理
			selectedDepositCopyRow = inputDepositNormalTypeAcs.DepositNewRow();
			
			// 引当情報DataRow取得処理
			selectedAllowanceCopyRows.Clear();

            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositDateDisp] = TDateTime.GetSFDateNow().ToString("yyyy/MM/dd");      // 入金日付(表示用)
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositDate] = TDateTime.DateTimeToLongDate(DateTime.Today);             // 入金日付
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp] = depositDate.ToString("yyyy/MM/dd");             // 計上日付(表示用)
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositAddUpADate] = depositDate;                                        // 計上日付
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositNm] = dr[InputDepositNormalTypeAcs.ctDepositNm];                  // 預り金区分名称
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositKindName] = dr[InputDepositNormalTypeAcs.ctDepositKindName];      // 入金金種
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDeposit] = dr[InputDepositNormalTypeAcs.ctDeposit];                      // 共通 入金額
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctFeeDeposit] = dr[InputDepositNormalTypeAcs.ctFeeDeposit];                // 共通 手数料
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDiscountDeposit] = dr[InputDepositNormalTypeAcs.ctDiscountDeposit];      // 共通 値引
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositTotal] = dr[InputDepositNormalTypeAcs.ctDepositTotal];            // 共通 入金計
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctBankCode] = dr[InputDepositNormalTypeAcs.ctBankCode];                    // 銀行コード
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctBankName] = dr[InputDepositNormalTypeAcs.ctBankName];                    // 銀行名称
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftDivide] = dr[InputDepositNormalTypeAcs.ctDraftDivide];              // 手形区分
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftDivideName] = dr[InputDepositNormalTypeAcs.ctDraftDivideName];      // 手形区分名称
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftKind] = dr[InputDepositNormalTypeAcs.ctDraftKind];                  // 手形種類
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftKindName] = dr[InputDepositNormalTypeAcs.ctDraftKindName];          // 手形種類名称
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftNo] = dr[InputDepositNormalTypeAcs.ctDraftNo];                      // 手形番号
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftDrawingDate] = dr[InputDepositNormalTypeAcs.ctDraftDrawingDate];    // 手形振出日
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctOutline] = dr[InputDepositNormalTypeAcs.ctOutline];                      // 摘要
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositRowNo1] = dr[InputDepositNormalTypeAcs.ctDepositRowNo1];          // 入金行番号1
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindCode1] = dr[InputDepositNormalTypeAcs.ctMoneyKindCode1];        // 金種コード1
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindName1] = dr[InputDepositNormalTypeAcs.ctMoneyKindName1];        // 金種名称1
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindDiv1] = dr[InputDepositNormalTypeAcs.ctMoneyKindDiv1];          // 金種区分1
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDeposit1] = dr[InputDepositNormalTypeAcs.ctDeposit1];                    // 入金金額1
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctValidityTerm1] = dr[InputDepositNormalTypeAcs.ctValidityTerm1];          // 有効期限1
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositRowNo2] = dr[InputDepositNormalTypeAcs.ctDepositRowNo2];          // 入金行番号2
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindCode2] = dr[InputDepositNormalTypeAcs.ctMoneyKindCode2];        // 金種コード2
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindName2] = dr[InputDepositNormalTypeAcs.ctMoneyKindName2];        // 金種名称2
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindDiv2] = dr[InputDepositNormalTypeAcs.ctMoneyKindDiv2];          // 金種区分2
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDeposit2] = dr[InputDepositNormalTypeAcs.ctDeposit2];                    // 入金金額2
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctValidityTerm2] = dr[InputDepositNormalTypeAcs.ctValidityTerm2];          // 有効期限2
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositRowNo3] = dr[InputDepositNormalTypeAcs.ctDepositRowNo3];          // 入金行番号3
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindCode3] = dr[InputDepositNormalTypeAcs.ctMoneyKindCode3];        // 金種コード3
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindName3] = dr[InputDepositNormalTypeAcs.ctMoneyKindName3];        // 金種名称3
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindDiv3] = dr[InputDepositNormalTypeAcs.ctMoneyKindDiv3];          // 金種区分3
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDeposit3] = dr[InputDepositNormalTypeAcs.ctDeposit3];                    // 入金金額3
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctValidityTerm3] = dr[InputDepositNormalTypeAcs.ctValidityTerm3];          // 有効期限3
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositRowNo4] = dr[InputDepositNormalTypeAcs.ctDepositRowNo4];          // 入金行番号4
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindCode4] = dr[InputDepositNormalTypeAcs.ctMoneyKindCode4];        // 金種コード4
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindName4] = dr[InputDepositNormalTypeAcs.ctMoneyKindName4];        // 金種名称4
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindDiv4] = dr[InputDepositNormalTypeAcs.ctMoneyKindDiv4];          // 金種区分4
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDeposit4] = dr[InputDepositNormalTypeAcs.ctDeposit4];                    // 入金金額4
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctValidityTerm4] = dr[InputDepositNormalTypeAcs.ctValidityTerm4];          // 有効期限4
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositRowNo5] = dr[InputDepositNormalTypeAcs.ctDepositRowNo5];          // 入金行番号5
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindCode5] = dr[InputDepositNormalTypeAcs.ctMoneyKindCode5];        // 金種コード5
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindName5] = dr[InputDepositNormalTypeAcs.ctMoneyKindName5];        // 金種名称5
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindDiv5] = dr[InputDepositNormalTypeAcs.ctMoneyKindDiv5];          // 金種区分5
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDeposit5] = dr[InputDepositNormalTypeAcs.ctDeposit5];                    // 入金金額5
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctValidityTerm5] = dr[InputDepositNormalTypeAcs.ctValidityTerm5];          // 有効期限5
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositRowNo6] = dr[InputDepositNormalTypeAcs.ctDepositRowNo6];          // 入金行番号6
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindCode6] = dr[InputDepositNormalTypeAcs.ctMoneyKindCode6];        // 金種コード6
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindName6] = dr[InputDepositNormalTypeAcs.ctMoneyKindName6];        // 金種名称6
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindDiv6] = dr[InputDepositNormalTypeAcs.ctMoneyKindDiv6];          // 金種区分6
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDeposit6] = dr[InputDepositNormalTypeAcs.ctDeposit6];                    // 入金金額6
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctValidityTerm6] = dr[InputDepositNormalTypeAcs.ctValidityTerm6];          // 有効期限6
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositRowNo7] = dr[InputDepositNormalTypeAcs.ctDepositRowNo7];          // 入金行番号7
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindCode7] = dr[InputDepositNormalTypeAcs.ctMoneyKindCode7];        // 金種コード7
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindName7] = dr[InputDepositNormalTypeAcs.ctMoneyKindName7];        // 金種名称7
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindDiv7] = dr[InputDepositNormalTypeAcs.ctMoneyKindDiv7];          // 金種区分7
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDeposit7] = dr[InputDepositNormalTypeAcs.ctDeposit7];                    // 入金金額7
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctValidityTerm7] = dr[InputDepositNormalTypeAcs.ctValidityTerm7];          // 有効期限7
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositRowNo8] = dr[InputDepositNormalTypeAcs.ctDepositRowNo8];          // 入金行番号8
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindCode8] = dr[InputDepositNormalTypeAcs.ctMoneyKindCode8];        // 金種コード8
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindName8] = dr[InputDepositNormalTypeAcs.ctMoneyKindName8];        // 金種名称8
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindDiv8] = dr[InputDepositNormalTypeAcs.ctMoneyKindDiv8];          // 金種区分8
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDeposit8] = dr[InputDepositNormalTypeAcs.ctDeposit8];                    // 入金金額8
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctValidityTerm8] = dr[InputDepositNormalTypeAcs.ctValidityTerm8];          // 有効期限8
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositRowNo9] = dr[InputDepositNormalTypeAcs.ctDepositRowNo9];          // 入金行番号9
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindCode9] = dr[InputDepositNormalTypeAcs.ctMoneyKindCode9];        // 金種コード9
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindName9] = dr[InputDepositNormalTypeAcs.ctMoneyKindName9];        // 金種名称9
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindDiv9] = dr[InputDepositNormalTypeAcs.ctMoneyKindDiv9];          // 金種区分9
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDeposit9] = dr[InputDepositNormalTypeAcs.ctDeposit9];                    // 入金金額9
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctValidityTerm9] = dr[InputDepositNormalTypeAcs.ctValidityTerm9];          // 有効期限9
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositRowNo10] = dr[InputDepositNormalTypeAcs.ctDepositRowNo10];        // 入金行番号10
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindCode10] = dr[InputDepositNormalTypeAcs.ctMoneyKindCode10];      // 金種コード10
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindName10] = dr[InputDepositNormalTypeAcs.ctMoneyKindName10];      // 金種名称10
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctMoneyKindDiv10] = dr[InputDepositNormalTypeAcs.ctMoneyKindDiv10];        // 金種区分10
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDeposit10] = dr[InputDepositNormalTypeAcs.ctDeposit10];                  // 入金金額10
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctValidityTerm10] = dr[InputDepositNormalTypeAcs.ctValidityTerm10];        // 有効期限10


			// 入金伝票入力欄表示処理
            //SetDisplayDeposit(selectedDepositCopyRow); // DEL 王君 2012/12/24 Redmine#33741
            SetDisplayDeposit(selectedDepositCopyRow, 0);// ADD 王君 2012/12/24 Redmine#33741

			// 入金伝票入力欄変更時処理
			GetDisplayDeposit(null, selectedDepositCopyRow, selectedAllowanceCopyRows);

			// DataRowコピー処理
			inputDepositNormalTypeAcs.CopyDepositDataRow(ref selectedDepositCopyRow, ref beforeSelectedDepositRow);
			inputDepositNormalTypeAcs.CopyAllowanceDataRow(ref selectedAllowanceCopyRows, ref beforeSelectedAllowanceRows);
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
        /// 新規入金伝票入力準備処理(現在伝票内容の一部を反映)
        /// </summary>
        /// <param name="depositDate">赤伝入金日付</param>
        /// <remarks>
        /// <br>Note       : 現在伝票内容の一部を反映し新規入金伝票入力の準備処理を行います。</br>
        /// <br>Programmer : 97036 amami</br>
        /// <br>Date       : 2005.07.21</br>
        /// </remarks>
        private void NewDepositStandbyFromAka(int depositDate)
        {
            UltraGridRow row;

            if (grdDepositList.ActiveRow.Band.Key == InputDepositNormalTypeAcs.ctRelation_DepositAllowance)
            {
                row = grdDepositList.ActiveRow.ParentRow;
            }
            else
            {
                row = grdDepositList.ActiveRow;
            }

            // 新規入金用表示する為に保持
            DataRow dr = inputDepositNormalTypeAcs.GetSelectDepositCopyRow(row.Cells[InputDepositNormalTypeAcs.ctDepositDataRow].Value as DataRow);

            // 入金一覧の新規行を非アクティブとする
            grdDepositList.ActiveRow = null;

            // 受注引当一覧の行を非アクティブとする
            grdDmdSalesList.ActiveCell = null;

            // 受注引当一覧の行を非アクティブとする
            grdDmdSalesList.ActiveRow = null;

            // 入金一覧タブを表示する
            tabList.Tabs["DepositTab"].Selected = true;

            // 入金情報新規行追加処理
            selectedDepositCopyRow = inputDepositNormalTypeAcs.DepositNewRow();

            // 引当情報DataRow取得処理
            selectedAllowanceCopyRows.Clear();

            // 2007.10.10 upd start ------------------------------------->>
            // 赤伝入金日付をセット
            // 入金日付(表示用)
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositDateDisp] = depositDate;
            // 入金日付
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositDate] = depositDate;
            // 入金日付
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositDateDisp] = TDateTime.GetSFDateNow().ToString("yyyy/MM/dd");
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositDate] = TDateTime.DateTimeToLongDate(DateTime.Today);
            // 入金計上日
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp] = depositDate.ToString("yyyy/MM/dd");
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositAddUpADate] = depositDate;
            // 2007.10.10 upd end ---------------------------------------<<

            // 特定の項目以外を赤伝(黒)状態にセットする
            // 預り金区分名称
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositCd] = dr[InputDepositNormalTypeAcs.ctDepositCd];
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositNm] = dr[InputDepositNormalTypeAcs.ctDepositNm];

            // 入金金種
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositKindDivCd] = dr[InputDepositNormalTypeAcs.ctDepositKindDivCd];
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositKindCode]  = dr[InputDepositNormalTypeAcs.ctDepositKindCode];
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositKindName] = dr[InputDepositNormalTypeAcs.ctDepositKindName];

            // ↓ 20070125 18322 d MA.NS用に変更
            #region SF 受注・諸費用は使用しないので削除
            //// 受注 入金額
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctAcpOdrDeposit] = dr[InputDepositNormalTypeAcs.ctAcpOdrDeposit];
            //
            //// 受注 手数料
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctAcpOdrChargeDeposit] = dr[InputDepositNormalTypeAcs.ctAcpOdrChargeDeposit];
            //
            //// 受注 値引
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctAcpOdrDisDeposit] = dr[InputDepositNormalTypeAcs.ctAcpOdrDisDeposit];
            //
            //// 受注 入金計
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctAcpOdrDepositTotal] = dr[InputDepositNormalTypeAcs.ctAcpOdrDepositTotal];
            //
            //// 諸費用 入金額
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctVariousCostDeposit] = dr[InputDepositNormalTypeAcs.ctVariousCostDeposit];
            //
            //// 諸費用 手数料
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctVarCostChargeDeposit] = dr[InputDepositNormalTypeAcs.ctVarCostChargeDeposit];
            //
            //// 諸費用 値引
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctVarCostDisDeposit] = dr[InputDepositNormalTypeAcs.ctVarCostDisDeposit];
            //
            //// 諸費用 入金計
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctVariousCostDepositTotal] = dr[InputDepositNormalTypeAcs.ctVariousCostDepositTotal];
            #endregion
            // ↑ 20070125 18322 d

            // 共通 入金額
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDeposit] = dr[InputDepositNormalTypeAcs.ctDeposit];

            // 共通 手数料
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctFeeDeposit] = dr[InputDepositNormalTypeAcs.ctFeeDeposit];

            // 共通 値引
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDiscountDeposit] = dr[InputDepositNormalTypeAcs.ctDiscountDeposit];

            // ↓ 20070129 18322 a MA.NS用に変更
            // 共通 インセンティブ
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctRebateDeposit] = dr[InputDepositNormalTypeAcs.ctRebateDeposit];  // 2007.10.10 hikita del
            // ↑ 20070129 18322 a

            // 共通 入金計
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositTotal] = dr[InputDepositNormalTypeAcs.ctDepositTotal];

            // 2007.10.10 hikita del start ------------------------------------------------------------------------------->>
            //// クレジット/ローン区分
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctCreditOrLoanCd] = dr[InputDepositNormalTypeAcs.ctCreditOrLoanCd];

            //// クレジット会社コード
            //selectedDepositCopyRow[InputDepositNormalTypeAcs.ctCreditCompanyCode] = dr[InputDepositNormalTypeAcs.ctCreditCompanyCode];
            // 2007.10.10 hikita del end ---------------------------------------------------------------------------------<<

            // 2007.10.10 hikita add start ------------------------------------------------------------------------------->>
            // 銀行コード
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctBankCode] = dr[InputDepositNormalTypeAcs.ctBankCode];
            // 銀行名称
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctBankName] = dr[InputDepositNormalTypeAcs.ctBankName];
            // 手形区分
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftDivide] = dr[InputDepositNormalTypeAcs.ctDraftDivide];
            // 手形区分名称
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftDivideName] = dr[InputDepositNormalTypeAcs.ctDraftDivideName];
            // 手形種類
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftKind] = dr[InputDepositNormalTypeAcs.ctDraftKind];
            // 手形種類名称
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftKindName] = dr[InputDepositNormalTypeAcs.ctDraftKindName];
            // 手形番号
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftNo] = dr[InputDepositNormalTypeAcs.ctDraftNo];
            // 2007.10.10 hikita add end ---------------------------------------------------------------------------------<<
            // 手形振出日
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftDrawingDate] = dr[InputDepositNormalTypeAcs.ctDraftDrawingDate];

			// 手形支払期日
			selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDraftPayTimeLimit] = dr[InputDepositNormalTypeAcs.ctDraftPayTimeLimit];

            // 摘要
            selectedDepositCopyRow[InputDepositNormalTypeAcs.ctOutline] = dr[InputDepositNormalTypeAcs.ctOutline];

            // 入金伝票入力欄表示処理
            this.SetDisplayDeposit(selectedDepositCopyRow);

            // 入金伝票入力欄変更時処理
            this.GetDisplayDeposit(null, selectedDepositCopyRow, selectedAllowanceCopyRows);

            // DataRowコピー処理
            inputDepositNormalTypeAcs.CopyDepositDataRow(ref selectedDepositCopyRow, ref beforeSelectedDepositRow);
            inputDepositNormalTypeAcs.CopyAllowanceDataRow(ref selectedAllowanceCopyRows, ref beforeSelectedAllowanceRows);

            // ↓ 20070126 18322 c MA.NS用に変更
            #region SF 諸費用別入金判定は使用しないので削除（全てコメントアウト）
            //// 諸費用別入金判定
            //if (depositRelDataAcs.OptSeparateCost == true)
            //{
            //	// 諸費用別入金 パネル表示
            //	pnlSeparateCost.Visible = true;
            //
            //	// 入金額にフォーカスをセット
            //	edtAcpOdrDeposit.Focus();
            //}
            //else
            //{
            //	// 入金額にフォーカスをセット
            //	edtDeposit.Focus();
            //}
            #endregion

            // 入金額にフォーカスをセット
            edtDeposit.Focus();

            // ↑ 20070126 18322 c
        }
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
        /// 保存前データチェック処理
        /// </summary>
        /// <returns>チェック結果  True:OK, False:NG</returns>
        /// <remarks>
        /// <br>Note       : 入金伝票の保存前データチェックを行います。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// <br>UpdateNote : 2009/12/16 李占川 ＰＭ．ＮＳ保守依頼④</br>
        /// <br>             金額入力時のｶｰｿﾙ遷移が遅いのを修正</br>
        /// <br>UpdateNote : 2009/12/25 李占川 redmine#2128の対応</br>
        /// <br>UpdateNote : 2010/12/20 李占川 入金伝票入力の改修</br>
        /// <br>             手形データあり入金の金額ゼロ変更時のメッセージ追加</br>
        /// </remarks>
        private bool CheackDataBeforeSave()
        {
            string errMsg = "";
            StringCollection messages;
            DialogResult res = DialogResult.OK;

            // --- ADD 2010/12/20 ----------------------------------------->>>>>
            bool updateFlg = false;//手形データ判定
            // --- ADD 2010/12/20 -----------------------------------------<<<<<
            try
            {
                // 修正の時は変更状態チェックを行う
                if (this.edtDepositSlipNo.GetInt() != 0)
                {
                    // 行の変更状況チェック処理
                    //if (inputDepositNormalTypeAcs.CheckUpdateData(beforeSelectedDepositRow, beforeSelectedAllowanceRows, selectedDepositCopyRow, selectedAllowanceCopyRows) == false) // DEL 2009/12/25
                    if (inputDepositNormalTypeAcs.CheckUpdateData(beforeSelectedDepositRow, beforeSelectedAllowanceRows, selectedDepositCopyRow, selectedAllowanceCopyRows, edtDepositSlipNo.GetInt()) == false) // ADD 2009/12/25
                    {
                        // 未変更の時
                        errMsg = "入金伝票の変更は行われていません。";

                        this.grdDepositKind.Focus();
                        if (this.grdDepositKind.Rows.Count > 0)
                        {
                            this.grdDepositKind.DisplayLayout.Rows[0].Cells[DepositRelDataAcs.ctDeposit].Activate();
                            this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                        }

                        //ADD START 2010/05/06 gejun for M1007A-手形データ追加
                        if (this._draftOptSet)
                        {
                            for (int rowIndex = 0; rowIndex < this.grdDepositKind.Rows.Count; rowIndex++)
                            {
                                // 金種区分取得
                                int moneyKindDiv = (int)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value;
                                // 金種区分が「105：手形」の場合
                                if ((moneyKindDiv == (int)MnyKindDiv.Bill))
                                {
                                    if (this._rcvDraftData != null)
                                    {
                                        // 手形期日取得
                                        DateTime dateTime;
                                        GetPayTimeLimit(rowIndex, out dateTime);
                                        // 手形期日
                                        if (TDateTime.IsAvailableDate(dateTime) == false)
                                        {
                                            return (false);
                                        }

                                        if ((this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == DBNull.Value) ||
                                (string)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == "")
                                        {
                                            return (false);
                                        }

                                        // 入金行番号
                                        this._rcvDraftData.DepositRowNo = rowIndex + 1;
                                        int depositSlipNo = 0;
                                        string message = "";

                                        int status = inputDepositNormalTypeAcs.SaveDepositDataWithDraftData("", _selectSectionCode, tNedit_CustomerCode.GetInt(), this._claimCode, selectedDepositCopyRow, selectedAllowanceCopyRows, DateTime.Now, out depositSlipNo, out message, this._rcvDraftData, this._rcvDraftDataDel);
                                        this._rcvDraftData = null;
                                        this._rcvDraftDataDel = null;
                                        switch (status)
                                        {
                                            case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                                                {
                                                    break;
                                                }
                                            case (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE:

                                                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOP,
                                                    "SaveProc",
                                                   "既に他端末より更新されています。",
                                                    status,
                                                    MessageBoxButtons.OK);
                                                break;
                                            case (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE:
                                                {
                                                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOP,
                                                        "SaveProc",
                                                        "既に他端末より削除されています。",
                                                        status,
                                                        MessageBoxButtons.OK);
                                                    break;
                                                }
                                            // ADD 2011/08/24 qijh SCM対応 - 拠点管理(10704767-00) --------->>>>>
                                            case STATUS_CHK_SEND_ERR:
                                                {
                                                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                                                  this.Name,
                                                                  CHK_SEND_ERR_MSG,
                                                                  status,
                                                                  MessageBoxButtons.OK);
                                                    break;
                                                }
                                            // ADD 2011/08/24 qijh SCM対応 - 拠点管理(10704767-00) ---------<<<<<
                                            default:
                                                {
                                                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOP,
                                                          "SaveProc",
                                                          "保存処理に失敗しました。",
                                                          status,
                                                          MessageBoxButtons.OK);
                                                    break;
                                                }
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                        //ADD END 2010/05/06 gejun for M1007A-手形データ追加

                        return (false);
                    }
                    // --- ADD 2010/12/20 ----------------------------------------->>>>>
                    if (this.edtDepositTotal.DataText == "0")
                    {
                        List<RcvDraftData> retList = new List<RcvDraftData>();
                        if (this._draftOptSet && SearchDraftData(ref retList) == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                        {
                            updateFlg = true;
                        }
                    }
                    // --- ADD 2010/12/20 ----------------------------------------->>>>>
                }

                // 修正可能の時
                if (!((this.edtDepositSlipNo.GetInt() != 0) && (this.IsLockDepositData(selectedDepositCopyRow) != 0)))
                {
                    // 入金日チェック
                    if (this.edtDepositDate.GetLongDate() == 0)
                    {
                        errMsg = "入金日を入力して下さい。";
                        this.edtDepositDate.Focus();
                        return (false);
                    }
                    if (TDateTime.IsAvailableDate(this.edtDepositDate.GetDateTime()) == false)
                    {
                        errMsg = "入金日の日付が不正です。";
                        this.edtDepositDate.Focus();
                        return (false);
                    }

                    if (depositRelDataAcs.DepoSlipDateAmbit == 1)
                    {
                        if (this.edtDepositDate.GetLongDate() > TDateTime.GetSFDateNow("YYYYMMDD"))
                        {
                            errMsg = "未来日付での入金はできません。";
                            this.edtDepositDate.Focus();
                            return (false);
                        }
                    }

                    DateTime targetDate;

                    if (this.edtDepositSlipNo.GetInt() != 0)
                    {
                        if (this._prevDepositDate != this.edtDepositDate.GetDateTime())
                        {
                            targetDate = inputDepositNormalTypeAcs.GetTotalDayDmdC(this._selectSectionCode, this._claimCode);
                            if (targetDate != DateTime.MinValue)
                            {
                                if (this._prevDepositDate <= targetDate)
                                {
                                    errMsg = "入金日が前回請求締日以前になっている為、登録できません。" + "\r\n\r\n" + "  前回請求締日：" + targetDate.ToString("yyyy年MM月dd日");
                                    //errMsg = "変更前の入金日が前回請求締日以前のため修正できません。";
                                    this.edtDepositDate.SetDateTime(this._prevDepositDate);
                                    this.edtDepositDate.Focus();
                                    return (false);
                                }
                            }

                            targetDate = inputDepositNormalTypeAcs.GetHisTotalDayMonthlyAccRec(this._selectSectionCode);
                            if (targetDate != DateTime.MinValue)
                            {
                                if (this._prevDepositDate <= targetDate)
                                {
                                    errMsg = "入金日が前回月次更新日以前になっている為、登録できません。" + "\r\n\r\n" + "  前回月次更新日：" + targetDate.ToString("yyyy年MM月dd日");
                                    //errMsg = "変更前の入金日が前回月次更新日以前のため修正できません。";
                                    this.edtDepositDate.SetDateTime(this._prevDepositDate);
                                    this.edtDepositDate.Focus();
                                    return (false);
                                }
                            }
                        }
                    }

                    // 入金日チェック 最終締次更新年月日チェック
                    targetDate = inputDepositNormalTypeAcs.GetTotalDayDmdC(this._selectSectionCode, this._claimCode);
                    if (targetDate != DateTime.MinValue)
                    {
                        if (this.edtDepositDate.GetDateTime() <= targetDate)
                        {
                            errMsg = "入金日が前回請求締日以前になっている為、登録できません。" + "\r\n\r\n" + "  前回請求締日：" + targetDate.ToString("yyyy年MM月dd日");
                            this.edtDepositDate.Focus();
                            return (false);
                        }
                    }

                    targetDate = inputDepositNormalTypeAcs.GetHisTotalDayMonthlyAccRec(this._selectSectionCode);
                    if (targetDate != DateTime.MinValue)
                    {
                        if (this.edtDepositDate.GetDateTime() <= targetDate)
                        {
                            errMsg = "入金日が前回月次更新日以前になっている為、登録できません。" + "\r\n\r\n" + "  前回月次更新日：" + targetDate.ToString("yyyy年MM月dd日");
                            this.edtDepositDate.Focus();
                            return (false);
                        }
                    }

                    // HACK:入金額チェック
                    //if (this.edtDepositTotal.GetValue() == 0) // DEL 2009/12/16
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    //if (this.edtDepositTotal.DataText == string.Empty) // ADD 2009/12/16
                    // DEL 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ---------->>>>>
                    bool isZeroSlip = false;
                    if (this.edtDepositTotal.DataText == string.Empty || this.edtDepositTotal.DataText == "0")
                    // ADD 2010/04/30 MANTIS対応[15195]：入金内訳に0円も表示する ----------<<<<<
                    {
                        // ----- DEL 2013/06/20 gaofeng For Redmine#35133 ----- >>>>>
                        //long depositAlwcBlnce = 0;
                        //if (this.labDepositAlwcBlnce.Text.Trim() != "")
                        //{
                        //    if ((long)Convert.ToDouble(this.labDepositAlwcBlnce.Text.Trim()) != 0)
                        //    {
                        //        depositAlwcBlnce = (long)Convert.ToDouble(this.labDepositAlwcBlnce.Text.Trim());
                        //    }
                        //}

                        //if ((selectedAllowanceCopyRows == null) || (selectedAllowanceCopyRows.Count == 0) ||
                        //    (depositAlwcBlnce != 0))
                        //{
                        //    // DEL 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更 ---------->>>>>
                        //    //errMsg = "入金金額を入力して下さい。";

                        //    //this.grdDepositKind.Focus();
                        //    //if (this.grdDepositKind.Rows.Count > 0)
                        //    //{
                        //    //    this.grdDepositKind.DisplayLayout.Rows[0].Cells[DepositRelDataAcs.ctDeposit].Activate();
                        //    //    this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                        //    //}

                        //    //return (false);
                        //    // DEL 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更 ----------<<<<<
                        //    // ADD 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更 ---------->>>>>
                        //    // FIXME:0円の入金伝票を作成
                        //    errMsg = SAVING_ZERO_DEPOSIT_MSG;
                        //    SFUKK01403UC selectingMoneyKindDialog = new SFUKK01403UC(
                        //        this.grdDepositKind,
                        //        this.selectedDepositCopyRow // [OK]すると金種項目が設定される
                        //    );
                        //    // --- ADD 2010/12/20 ----------------------------------------->>>>>
                        //    if (updateFlg)
                        //    {
                        //        selectingMoneyKindDialog.ulblTeGataMessage.Visible = true;
                        //    }
                        //    else
                        //    {
                        //        selectingMoneyKindDialog.ulblTeGataMessage.Visible = false;
                        //    }
                        //    // --- ADD 2010/12/20 -----------------------------------------<<<<<
                        //    {
                        //        selectingMoneyKindDialog.TakeValidityTerm += this.GetPayTimeLimit;
                        //        DialogResult dialogResult = selectingMoneyKindDialog.ShowDialog(this);
                        //        if (dialogResult.Equals(DialogResult.Cancel))
                        //        {
                        //            return false;   // 0円の入金伝票を作成せずに戻る
                        //        }
                        //        isZeroSlip = true;
                        //    }
                        //    // ADD 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更 ----------<<<<<
                        //}
                        // ADD 2010/05/14 MANTIS対応[15195]：入金引当からの0円データの保存処理で金種が選択できない ---------->>>>>
                        // ----- DEL 2013/06/20 gaofeng For Redmine#35133 ----- <<<<<

                        // ----- ADD 2013/06/20 gaofeng For Redmine#35133 ----- >>>>>
                        // 全ての金種の金額が空白かを判断
                        bool allZero = (this.edtFeeDeposit.GetInt() == 0 && this.edtDiscountDeposit.GetInt() == 0);
                        if (allZero == true)
                        {
                            for (int rowIndex = 0; rowIndex < this.grdDepositKind.Rows.Count; rowIndex++)
                            {
                                // 入金金額が空白
                                if ((this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == DBNull.Value) ||
                                    (string)this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == "")
                                {
                                    continue;
                                }
                                else
                                {
                                    allZero = false;
                                    break;
                                }
                            }
                        }

                        // 引当選択なし、入金も入力しない場合、メッセージを出す
                        if ((selectedAllowanceCopyRows == null || selectedAllowanceCopyRows.Count == 0) && allZero == true)
                        {
                            errMsg = SAVING_ZERO_DEPOSIT_MSG;

                            this.grdDepositKind.Focus();
                            if (this.grdDepositKind.Rows.Count > 0)
                            {
                                this.grdDepositKind.DisplayLayout.Rows[0].Cells[DepositRelDataAcs.ctDeposit].Activate();
                                this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                            }

                            return (false);
                        }

                        // ----- ADD 2013/06/20 gaofeng For Redmine#35133 ----- <<<<<

                        // 売上引当タブ.入金未引当額が 0円
                        //else if (selectedAllowanceCopyRows.Count > 0 && depositAlwcBlnce.Equals(0)) //  DEL 2013/06/20 gaofeng For Redmine#35133
                        if (selectedAllowanceCopyRows != null && selectedAllowanceCopyRows.Count > 0 && allZero == true) //  ADD 2013/06/20 gaofeng For Redmine#35133
                        {
                            // FIXME:0円の入金伝票を作成
                            //errMsg = SAVING_ZERO_DEPOSIT_MSG; //  DEL 2013/06/20 gaofeng For Redmine#35133
                            SFUKK01403UC selectingMoneyKindDialog = new SFUKK01403UC(
                                this.grdDepositKind,
                                this.selectedDepositCopyRow // [OK]すると金種項目が設定される
                            );
                            // --- ADD 2010/12/20 ----------------------------------------->>>>>
                            if (updateFlg)
                            {
                                selectingMoneyKindDialog.ulblTeGataMessage.Visible = true;
                            }
                            else
                            {
                                selectingMoneyKindDialog.ulblTeGataMessage.Visible = false;
                            }
                            // --- ADD 2010/12/20 -----------------------------------------<<<<<
                            {
                                selectingMoneyKindDialog.TakeValidityTerm += this.GetPayTimeLimit;
                                DialogResult dialogResult = selectingMoneyKindDialog.ShowDialog(this);
                                if (dialogResult.Equals(DialogResult.Cancel))
                                {
                                    return false;   // 0円の入金伝票を作成せずに戻る
                                }
                                isZeroSlip = true;
                            }
                        }
                        // ADD 2010/05/14 MANTIS対応[15195]：入金引当からの0円データの保存処理で金種が選択できない ----------<<<<<
                    }

                    //bool bankFlg = false;

                    for (int rowIndex = 0; rowIndex < this.grdDepositKind.Rows.Count; rowIndex++)
                    {
                        // 金種区分取得
                        int depositKindDiv = (int)this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value;

                        // 金種区分が「105：手形」、「107：小切手」以外の場合
                        if ((depositKindDiv != 105) && (depositKindDiv != 107))
                        {
                            continue;
                        }

                        // 入金金額が空白
                        if ((this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == DBNull.Value) ||
                            (string)this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == "")
                        {
                            continue;
                        }

                        // 手形支払期日取得
                        DateTime dateTime;
                        bool bStatus = GetPayTimeLimit(rowIndex, out dateTime);
                        // 手形支払期日
                        if (TDateTime.IsAvailableDate(dateTime) == false)
                        {
                            // ADD 2010/05/14 MANTIS対応[15195]：0円データでは、有効期間を持つ金種の日付チェックは不要 ---------->>>>>
                            if (!isZeroSlip)
                            // ADD 2010/05/14 MANTIS対応[15195]：0円データでは、有効期間を持つ金種の日付チェックは不要 ----------<<<<<
                            {
                                errMsg = "手形支払期日の日付が不正です。";
                                this.grdDepositKind.Focus();
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activate();
                                this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                                return (false);
                            }
                        }
                    }
                }

                // 引当状況不正チェック処理 (Lebel:Err)
                if (inputDepositNormalTypeAcs.CheckUpdateAlwcBlnce(0, depositRelDataAcs.AllowanceProc, selectedDepositCopyRow, selectedAllowanceCopyRows, inputDepositNormalTypeAcs.GetDsDmdSalesInfo(), out messages) != 0)
                {
                    errMsg = messages[0];

                    this.grdDepositKind.Focus();
                    if (this.grdDepositKind.Rows.Count > 0)
                    {
                        this.grdDepositKind.DisplayLayout.Rows[0].Cells[DepositRelDataAcs.ctDeposit].Activate();
                        this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                    }

                    return (false);
                }
            }
            finally
            {
                // DEL 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更 ---------->>>>>
                //if (errMsg.Length != 0)
                // DEL 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更 ----------<<<<<
                // ADD 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更 ---------->>>>>
                // 0円の入金伝票を作成する場合はメッセージ表示しない
                //if (errMsg.Length != 0 && !errMsg.Equals(SAVING_ZERO_DEPOSIT_MSG)) //  DEL 2013/06/20 gaofeng For Redmine#35133
                if (errMsg.Length != 0) //  ADD 2013/06/20 gaofeng For Redmine#35133
                // ADD 2010/03/25 MANTIS対応[15195]：0円入金保存時に｢金種画面｣を表示し、選択後に登録へ変更 ----------<<<<<
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_EXCLAMATION, 
                                  this.Name, 
                                  errMsg, 
                                  0, 
                                  MessageBoxButtons.OK);
                }
                else
                {
                    // 引当状況不正チェック処理 (Lebel:Info)
                    if (inputDepositNormalTypeAcs.CheckUpdateAlwcBlnce(1, depositRelDataAcs.AllowanceProc, selectedDepositCopyRow, selectedAllowanceCopyRows, inputDepositNormalTypeAcs.GetDsDmdSalesInfo(), out messages) != 0)
                    {
                        for (int ix = 0; ix < messages.Count; ix++)
                        {
                            res = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, messages[ix], 0, MessageBoxButtons.OKCancel);
                            if (res == DialogResult.Cancel)
                            {
                                break;
                            }
                        }
                    }
                }
            }

            if (res == DialogResult.Cancel)
            {
                this.grdDepositKind.Focus();
                if (this.grdDepositKind.Rows.Count > 0)
                {
                    this.grdDepositKind.DisplayLayout.Rows[0].Cells[DepositRelDataAcs.ctDeposit].Activate();
                    this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                }
                return (false);
            }

            return (true);
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 保存前データチェック処理
		/// </summary>
		/// <param name="control">エラーコントロール</param>
		/// <returns>チェック結果  True:OK, False:NG</returns>
		/// <remarks>
		/// <br>Note       : 入金伝票の保存前データチェックを行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private bool CheackDataBeforeSave(out Control control)
		{
			control = null;

			// 修正の時は変更状態チェックを行う
			if (edtDepositSlipNo.GetInt() != 0)
			{
				// 行の変更状況チェック処理
				if (inputDepositNormalTypeAcs.CheckUpdateData(beforeSelectedDepositRow, beforeSelectedAllowanceRows, selectedDepositCopyRow, selectedAllowanceCopyRows) == false)
				{
					// 未変更の時
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金伝票の変更は行われていません。", 0, MessageBoxButtons.OK);

					if (edtDeposit.ReadOnly == false)
						control = edtDeposit;
                    
                    return false;
				}
			}

			// 未来入金日チェック
			if (edtDepositDate.GetLongDate() > TDateTime.GetSFDateNow("YYYYMMDD"))
			{
				DialogResult res = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, this.Name, "未来日付での入金ですが、よろしいですか？", 0, MessageBoxButtons.OKCancel);
				if (res == DialogResult.Cancel)
				{
					control = edtDepositDate;
					return false;
				}
			}

            // 修正可能の時
			if (!((edtDepositSlipNo.GetInt() != 0) && (this.IsLockDepositData(selectedDepositCopyRow) != 0)))
			{
				// 入金日チェック
				if (edtDepositDate.GetLongDate() == 0)
				{
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金日を入力して下さい。", 0, MessageBoxButtons.OK);
					control = edtDepositDate;
					return false;
				}
				if (TDateTime.IsAvailableDate(edtDepositDate.GetDateTime()) == false)
				{
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金日の日付が不正です。", 0, MessageBoxButtons.OK);
					control = edtDepositDate;
					return false;
				}
                // ↓ 20070801 18322 a
	    		if (TDateTime.DateTimeToLongDate(edtDepositDate.GetDateTime()) <= this.inputDepositNormalTypeAcs.GetLastMonthlyDate())
    			{
    				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "支払日が前回月次更新日以前になっています。", 0, MessageBoxButtons.OK);
    				control = edtDepositDate;
    				return false;
	    		}
                // ↑ 20070801 18322 a
			
				// 入金日チェック 最終締次更新年月日チェック
				if (inputDepositNormalTypeAcs.CheckPastCAddUpUpdDate(edtDepositDate.GetLongDate()) <= 0)
				{
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金日が前回請求締日以前になっています。", 0, MessageBoxButtons.OK);
					control = edtDepositDate;
					return false;
				}

				// 預り金区分チェック
				if (opsDepositDiv.Items[0].ValueList.SelectedIndex == -1)
				{
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "預り金区分を入力して下さい。", 0, MessageBoxButtons.OK);
					control = opsDepositDiv;
					return false;
				}

                // 入金金種チェック
                bool flg = false;
                foreach (Infragistics.Win.UltraWinTree.UltraTreeNode nd in treMoneyKind.Nodes)
                {
                    if (nd.CheckedState == CheckState.Checked)
                    {
                        flg = true;
                        break;
                    }
                }
                
                if (flg == false)
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金金種を選択して下さい。", 0, MessageBoxButtons.OK);
                    control = treMoneyKind;
                    return false;
                }

				// 入金額チェック
				if (edtDepositTotal.GetValue() == 0)
				{
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金額を入力して下さい。", 0, MessageBoxButtons.OK);
                    // ↓ 20070126 18322 c MA.NS用に変更
                    #region SF 諸費用別入金判定は使用しないので削除（全てコメントアウト）
                    //// 諸費用別入金判定
					//if (depositRelDataAcs.OptSeparateCost == true)
					//{
					//	// 諸費用別入金 パネル表示
					//	pnlSeparateCost.Visible = true;
					//	control = edtAcpOdrDeposit;
					//}
					//else
					//{
					//	control = edtDeposit;
                    //}
                    #endregion

                    control = edtDeposit;

                    // ↑ 20070126 18322 c
					return false;
				}

                // 2007.10.10 hikita del start ------------------------------------------------------------->>
                //if ((this.cmbCreditOrLoanCd.Enabled) &&
                //    (this.cmbCreditOrLoanCd.ReadOnly == false))
                //{
                //    // クレジット・ローン区分が選択可のとき、クレジット会社コードチェック
                //    if (this.edtCreditCompanyName.Text.Trim() == "")
                //    {
                //        TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "クレジット会社を入力して下さい。", 0, MessageBoxButtons.OK);
                //        if (this.btnCreditCompanyGuid.Enabled)
                //        {
                //            // クレジット会社コード
                //            control = this.edtCreditCompanyCode;
                //        }
                //        else
                //        {
                //            // クレジット・ローン区分
                //            control = this.cmbCreditOrLoanCd;
                //        }
                //        return false;
                //    }
                //}
                // 2007.10.10 hikita del end ----------------------------------------------------------------<<

				// 手形振出日
				if ((edtDraftDrawingDate.GetLongDate() != 0) && (TDateTime.IsAvailableDate(edtDraftDrawingDate.GetDateTime()) == false))
				{
					TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "手形振出日の日付が不正です。", 0, MessageBoxButtons.OK);
					control = edtDraftDrawingDate;
					return false;
				}

                // 手形支払期日
                if ((edtDraftPayTimeLimit.GetLongDate() != 0) && (TDateTime.IsAvailableDate(edtDraftPayTimeLimit.GetDateTime()) == false))
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "手形支払期日の日付が不正です。", 0, MessageBoxButtons.OK);
                    control = edtDraftPayTimeLimit;
                    return false;
                }

                // 手形振出日/手形支払期日範囲チェック
                if ((edtDraftDrawingDate.GetLongDate() != 0) && (edtDraftPayTimeLimit.GetLongDate() != 0) &&
                    (edtDraftDrawingDate.GetLongDate() > edtDraftPayTimeLimit.GetLongDate()))
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "手形支払期日が手形振出日より過去になっています。", 0, MessageBoxButtons.OK);
                    control = edtDraftDrawingDate;
                    return false;
                }
            }

			// 引当状況不正チェック処理 (Lebel:Err)
			System.Collections.Specialized.StringCollection messages;
			if (inputDepositNormalTypeAcs.CheckUpdateAlwcBlnce(0, depositRelDataAcs.OptSeparateCost, depositRelDataAcs.AllowanceProc, selectedDepositCopyRow, selectedAllowanceCopyRows, inputDepositNormalTypeAcs.GetDsDmdSalesInfo(), out messages) != 0)
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, messages[0], 0, MessageBoxButtons.OK);

				control = edtDeposit;
                
                return false;
			}

			// 引当状況不正チェック処理 (Lebel:Info)
			if (inputDepositNormalTypeAcs.CheckUpdateAlwcBlnce(1, depositRelDataAcs.OptSeparateCost, depositRelDataAcs.AllowanceProc, selectedDepositCopyRow, selectedAllowanceCopyRows, inputDepositNormalTypeAcs.GetDsDmdSalesInfo(), out messages) != 0)
			{
				for (int ix = 0; ix < messages.Count; ix++)
				{
					DialogResult res = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, messages[ix], 0, MessageBoxButtons.OKCancel);
					if (res == DialogResult.Cancel)
					{
						control = edtDeposit;
                        
                        return false;
					}
				}
			}

			return true;
		}

		/// <summary>
		/// 削除前データチェック処理
		/// </summary>
		/// <param name="control">エラーコントロール</param>
		/// <returns>チェック結果  True:OK, False:NG</returns>
		/// <remarks>
		/// <br>Note       : 削除伝票の保存前データチェックを行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private bool CheackDataBeforeDelete(out Control control)
		{
			control = null;

			// 預り金の時
			if (Convert.ToInt32(beforeSelectedDepositRow[InputDepositNormalTypeAcs.ctDepositCd]) == 1)
			{
				string message;
				int st;
				foreach (DataRow beforeSelectedAllowanceRow in beforeSelectedAllowanceRows)
				{
					// 引当先受注伝票のチェック処理 締済み存在チェック
					st = inputDepositNormalTypeAcs.CheackAllowanceSalese(3, beforeSelectedAllowanceRow, this.SetSalesParameter(SearchMode.AllSearch, tNedit_CustomerCode.GetInt()), out message);
					if (st == 2)
					{
                        // ↓ 20070129 18322 c MA.NS用に変更
						//TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "既に引当を行っている受注伝票が締済みの為、削除処理は行えません。", 0, MessageBoxButtons.OK);

						TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "既に引当を行っている売上伝票が締済みの為、削除処理は行えません。", 0, MessageBoxButtons.OK);
                        // ↑ 20070129 18322 c
						return false;
					}
					else if (st != 0)
					{
						// エラー発生
						TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "削除前データチェック処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
						return false;
					}

					// 引当先受注伝票のチェック処理 赤伝存在チェック
					st = inputDepositNormalTypeAcs.CheackAllowanceSalese(1, beforeSelectedAllowanceRow, this.SetSalesParameter(SearchMode.AllSearch, tNedit_CustomerCode.GetInt()), out message);
					if (st == 2)
					{
                        // ↓ 20070129 18322 c MA.NS用に変更
						//TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "既に引当を行っている受注伝票が赤伝の為、削除処理は行えません。", 0, MessageBoxButtons.OK);

						TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "既に引当を行っている売上伝票が赤伝の為、削除処理は行えません。", 0, MessageBoxButtons.OK);
                        // ↑ 20070129 18322 c
						return false;
					}
					else if (st != 0)
					{
						// エラー発生
						TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "削除前データチェック処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
						return false;
					}

					// 引当先受注伝票のチェック処理 相殺済み黒存在チェック
					st = inputDepositNormalTypeAcs.CheackAllowanceSalese(2, beforeSelectedAllowanceRow, this.SetSalesParameter(SearchMode.AllSearch, tNedit_CustomerCode.GetInt()), out message);
					if (st == 2)
					{
                        // ↓ 20070129 18322 c MA.NS用に変更
						//TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "既に引当を行っている受注伝票で赤伝が発行されている為、削除処理は行えません。", 0, MessageBoxButtons.OK);

						TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "既に引当を行っている売上伝票で赤伝が発行されている為、削除処理は行えません。", 0, MessageBoxButtons.OK);
                        // ↑ 20070129 18322 c
						return false;
					}
					else if (st != 0)
					{
						// エラー発生
						TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "削除前データチェック処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
						return false;
					}
				}
			}

			return true;
		}
        
        /// <summary>
		/// 赤伝入金作成前 預り金区分取得処理
		/// </summary>
		/// <param name="depositCd">預り金区分</param>
		/// <returns>チェック結果  True:OK, False:NG</returns>
		/// <remarks>
		/// <br>Note       : 作成する赤伝の預り金区分を戻します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private bool GetAkaDepositCd(out int depositCd)
		{
			depositCd = Convert.ToInt32(beforeSelectedDepositRow[InputDepositNormalTypeAcs.ctDepositCd]);

			// 預り金の時
			if (depositCd == 1)
			{
				string message;
				int st;
				foreach (DataRow beforeSelectedAllowanceRow in beforeSelectedAllowanceRows)
				{
					// 引当先受注伝票のチェック処理 締済み存在チェック
					st = inputDepositNormalTypeAcs.CheackAllowanceSalese(3, beforeSelectedAllowanceRow, this.SetSalesParameter(SearchMode.AllSearch, tNedit_CustomerCode.GetInt()), out message);
					if (st == 2)
					{
						// 受注が締まっている時は通常入金の赤に変える
						// ※請求書の金額が変わってしまうので！
						depositCd = 0;
						return true;
					}
					else if (st != 0)
					{
						// エラー発生
						TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "削除前データチェック処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
						return false;
					}
                    //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //// >>> 締まっていない時は、売伝が赤伝or相殺済み黒の時でも預り金のまま赤入金を作成するようにする >>>
                    //// >>> 売伝の請求額が変わってしまうが、請求書には影響ないので。                                 >>>
                    //// >>> よって以下のロジックは削除！                                                             >>>
                    //// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //// 引当先受注伝票のチェック処理 赤伝存在チェック
                    //st = inputDepositNormalTypeAcs.CheackAllowanceSalese(1, beforeSelectedAllowanceRow, this.SetSalesParameter(SearchMode.AllSearch, edtSearchCustomerCode.GetInt()), out message);
                    //if (st == 2)
                    //{
                    //    // 受注が赤伝の時は通常入金の赤に変える
                    //    depositCd = 0;
                    //    return true;
                    //}
                    //else if (st != 0)
                    //{
                    //    // エラー発生
                    //    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "削除前データチェック処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
                    //    return false;
                    //}

                    //// 引当先受注伝票のチェック処理 相殺済み黒存在チェック
                    //st = inputDepositNormalTypeAcs.CheackAllowanceSalese(2, beforeSelectedAllowanceRow, this.SetSalesParameter(SearchMode.AllSearch, edtSearchCustomerCode.GetInt()), out message);
                    //if (st == 2)
                    //{
                    //    // 受注が相殺済み黒の時は通常入金の赤に変える
                    //    depositCd = 0;
                    //    return true;
                    //}
                    //else if (st != 0)
                    //{
                    //    // エラー発生
                    //    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "削除前データチェック処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
                    //    return false;
                    //}
				}
			}

			return true;
		}
		   --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// オール検索前データチェック処理
		/// </summary>
		/// <param name="control">エラーコントロール</param>
		/// <returns>チェック結果  True:OK, False:NG</returns>
		/// <remarks>
		/// <br>Note       : メイン検索前データチェックを行います。</br>
		/// <br>Programmer : 30414 忍 幸史</br>
		/// <br>Date       : 2008/06/26</br>
		/// </remarks>
		private bool CheackDataBeforeAllSearch()
		{
			// 入金伝票検索前データチェック処理
            if (CheackDataBeforeDepsitSearch() == false)
            {
                // 入金一覧タブを表示する
                tabList.Tabs["DepositTab"].Selected = true;
                return (false);
            }

			// 受注伝票検索前データチェック処理
            if (CheackDataBeforeDmdSalesSearch() == false)
            {
                // 受注引当一覧タブを表示する
                tabList.Tabs["DmdSalesTab"].Selected = true;
                return (false);
            }

			return (true);
		}
		
		/// <summary>
		/// 入金伝票検索前データチェック処理
		/// </summary>
		/// <returns>チェック結果  True:OK, False:NG</returns>
		/// <remarks>
		/// <br>Note       : 入金伝票の検索前データチェックを行います。</br>
		/// <br>Programmer : 30414 忍 幸史</br>
		/// <br>Date       : 2008/06/26</br>
		/// </remarks>
		private bool CheackDataBeforeDepsitSearch()
		{
            string errMsg = "";

            int startDate = this.detDepositDateStart.GetLongDate();
            int endDate = this.detDepositDateEnd.GetLongDate();

            try
            {
                // 得意先選択チェック
                if (this.tNedit_CustomerCode.GetInt() == 0)
                {
                    errMsg = "先に得意先の検索を行って下さい。";
                    this.tNedit_CustomerCode.Focus();
                    return (false);
                }

                // 入金日（開始）
                if ((startDate != 0) && (TDateTime.IsAvailableDate(TDateTime.LongDateToDateTime(startDate)) == false))
                {
                    errMsg = "入金日（開始）の日付が不正です。";
                    this.detDepositDateStart.Focus();
                    return (false);
                }

                // 入金日（終了）
                if ((endDate != 0) && (TDateTime.IsAvailableDate(TDateTime.LongDateToDateTime(endDate)) == false))
                {
                    errMsg = "入金日（終了）の日付が不正です。";
                    this.detDepositDateEnd.Focus();
                    return (false);
                }

                // 入金日 範囲
                if ((startDate != 0) && (endDate != 0) && (startDate > endDate))
                {
                    errMsg = "入金日の範囲指定が不正です。";
                    this.detDepositDateStart.Focus();
                    return (false);
                }
            }
            finally
            {
                if (errMsg.Length > 0)
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                  this.Name, 
                                  errMsg, 
                                  0, 
                                  MessageBoxButtons.OK);
                }
            }

			return (true);
		}
		
		/// <summary>
		/// 受注伝票検索前データチェック処理
		/// </summary>
		/// <param name="control">エラーコントロール</param>
		/// <returns>チェック結果  True:OK, False:NG</returns>
		/// <remarks>
		/// <br>Note       : 受注伝票の検索前データチェックを行います。</br>
		/// <br>Programmer : 30414 忍 幸史</br>
		/// <br>Date       : 2008/06/26</br>
		/// </remarks>
		private bool CheackDataBeforeDmdSalesSearch()
		{
            string errMsg = "";

			int startDate = detSearchSlipDateStart.GetLongDate();
			int endDate = detSearchSlipDateEnd.GetLongDate();

            try
            {
                // 得意先選択チェック
                if (this.tNedit_CustomerCode.GetInt() == 0)
                {
                    errMsg = "先に得意先の検索を行って下さい。";
                    this.tNedit_CustomerCode.Focus();
                    return (false);
                }

                // 伝票日付（開始）
                if ((startDate != 0) && (TDateTime.IsAvailableDate(TDateTime.LongDateToDateTime(startDate)) == false))
                {
                    errMsg = "伝票日付（開始）の日付が不正です。";
                    this.detSearchSlipDateStart.Focus();
                    return (false);
                }

                // 伝票日付（終了）
                if ((endDate != 0) && (TDateTime.IsAvailableDate(TDateTime.LongDateToDateTime(endDate)) == false))
                {
                    errMsg = "伝票日付（終了）の日付が不正です。";
                    this.detSearchSlipDateEnd.Focus();
                    return (false);
                }

                // 伝票日付 範囲
                if ((startDate != 0) && (endDate != 0) && (startDate > endDate))
                {
                    errMsg = "伝票日付の範囲指定が不正です。";
                    this.detSearchSlipDateStart.Focus();
                    return (false);
                }
            }
            finally
            {
                if (errMsg.Length > 0)
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                  this.Name, 
                                  errMsg, 
                                  0, 
                                  MessageBoxButtons.OK);
                }
            }

			return (true);
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
        /// オール検索前データチェック処理
        /// </summary>
        /// <param name="control">エラーコントロール</param>
        /// <returns>チェック結果  True:OK, False:NG</returns>
        /// <remarks>
        /// <br>Note       : メイン検索前データチェックを行います。</br>
        /// <br>Programmer : 97036 amami</br>
        /// <br>Date       : 2005.07.21</br>
        /// </remarks>
        private bool CheackDataBeforeAllSearch(out Control control)
        {
            control = null;

            // 入金伝票検索前データチェック処理
            if (CheackDataBeforeDepsitSearch(out control) == false)
            {
                // 入金一覧タブを表示する
                tabList.Tabs["DepositTab"].Selected = true;
                return false;
            }

            // 受注伝票検索前データチェック処理
            if (CheackDataBeforeDmdSalesSearch(out control) == false)
            {
                // 受注引当一覧タブを表示する
                tabList.Tabs["DmdSalesTab"].Selected = true;
                return false;
            }

            return true;
        }
        
        /// <summary>
        /// 入金伝票検索前データチェック処理
        /// </summary>
        /// <param name="control">エラーコントロール</param>
        /// <returns>チェック結果  True:OK, False:NG</returns>
        /// <remarks>
        /// <br>Note       : 入金伝票の検索前データチェックを行います。</br>
        /// <br>Programmer : 97036 amami</br>
        /// <br>Date       : 2005.07.21</br>
        /// </remarks>
        private bool CheackDataBeforeDepsitSearch(out Control control)
        {
            control = null;

            int startDate = detDepositDateStart.GetLongDate();
            int endDate = detDepositDateEnd.GetLongDate();

            // 入金日（開始）
            if ((startDate != 0) && (TDateTime.IsAvailableDate(TDateTime.LongDateToDateTime(startDate)) == false))
            {
                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金日（開始）の日付が不正です。", 0, MessageBoxButtons.OK);
                control = detDepositDateStart;
                return false;
            }

            // 入金日（終了）
            if ((endDate != 0) && (TDateTime.IsAvailableDate(TDateTime.LongDateToDateTime(endDate)) == false))
            {
                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金日（終了）の日付が不正です。", 0, MessageBoxButtons.OK);
                control = detDepositDateEnd;
                return false;
            }

            // 入金日 範囲
            if ((startDate != 0) && (endDate != 0) && (startDate > endDate))
            {
                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "入金日の範囲指定が不正です。", 0, MessageBoxButtons.OK);
                control = detDepositDateStart;
                return false;
            }

            return true;
        }

        /// <summary>
        /// 受注伝票検索前データチェック処理
        /// </summary>
        /// <param name="control">エラーコントロール</param>
        /// <returns>チェック結果  True:OK, False:NG</returns>
        /// <remarks>
        /// <br>Note       : 受注伝票の検索前データチェックを行います。</br>
        /// <br>Programmer : 97036 amami</br>
        /// <br>Date       : 2005.07.21</br>
        /// </remarks>
        private bool CheackDataBeforeDmdSalesSearch(out Control control)
        {
            control = null;

            int startDate = detSearchSlipDateStart.GetLongDate();
            int endDate = detSearchSlipDateEnd.GetLongDate();

            // 伝票日付（開始）
            if ((startDate != 0) && (TDateTime.IsAvailableDate(TDateTime.LongDateToDateTime(startDate)) == false))
            {
                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "伝票日付（開始）の日付が不正です。", 0, MessageBoxButtons.OK);
                control = detSearchSlipDateStart;
                return false;
            }

            // 伝票日付（終了）
            if ((endDate != 0) && (TDateTime.IsAvailableDate(TDateTime.LongDateToDateTime(endDate)) == false))
            {
                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "伝票日付（終了）の日付が不正です。", 0, MessageBoxButtons.OK);
                control = detSearchSlipDateEnd;
                return false;
            }

            // 伝票日付 範囲
            if ((startDate != 0) && (endDate != 0) && (startDate > endDate))
            {
                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "伝票日付の範囲指定が不正です。", 0, MessageBoxButtons.OK);
                control = detSearchSlipDateStart;
                return false;
            }

            // 2007.10.10 hikita del start ------------------------------------------------------------>>
            //// 伝票種別(受注ステータス)
            //if ((cbxAcptAnOdrStartus1.Checked == false) && (cbxAcptAnOdrStartus2.Checked == false) && (cbxAcptAnOdrStartus3.Checked == false))
            //{
            //    // ↓ 20070221 18322 c MA.NS用に変更
            //    //TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "伝票種別(受注ステータス)にチェックを入れて下さい。", 0, MessageBoxButtons.OK);

            //    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "伝票種別にチェックを入れて下さい。", 0, MessageBoxButtons.OK);
            //    // ↑ 20070221 18322 c
            //    control = cbxAcptAnOdrStartus1;
            //    return false;
            //}
            // 2007.10.10 hikita del end --------------------------------------------------------------<<

            // ↓ 20070116 18322 d 携帯.NS用に変更
            //// 伝票種別(システム種別)
            //if ((cbxDataInputSystem1.Checked == false) && (cbxDataInputSystem2.Checked == false) && (cbxDataInputSystem3.Checked == false))
            //{
            //    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "伝票種別(システム種別)にチェックを入れて下さい。", 0, MessageBoxButtons.OK);
            //	control = cbxDataInputSystem1;
            //	return false;
            //}
            // ↑ 20070116 18322 d

            return true;
        }

        /// <summary>
		/// 得意先情報/得意先金額情報取得用パラメータ 作成処理
		/// </summary>
		/// <param name="customerCode">得意先コード</param>
		/// <returns>得意先情報/得意先金額情報取得用パラメータ クラス</returns>
		/// <remarks>
		/// <br>Note       : 得意先情報/得意先金額情報取得用パラメータの生成を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private InputDepositNormalTypeAcs.SearchCustomerParameter SetCustomerParameter(int customerCode)
		{
			InputDepositNormalTypeAcs.SearchCustomerParameter param = new InputDepositNormalTypeAcs.SearchCustomerParameter();

			// 企業コード
			param.EnterpriseCode = enterpriseCode;

			// 計上拠点
			param.AddUpSecCod = _selectSectionCode;

			// 計上日
			param.AddUpADate = TDateTime.DateTimeToLongDate(TDateTime.GetSFDateNow());

			// 得意先コード
			param.CustomerCode = customerCode;

            //// 請求先コード
            param.ClaimCode = this._claimCode;

			return param;
		}
		
		/// <summary>
		/// 入金情報/引当情報取得用パラメータ 作成処理
		/// </summary>
		/// <param name="searchMode">検索モード</param>
		/// <param name="customerCode">得意先コード</param>
		/// <param name="depositSlipNo">入金伝票番号</param>
		/// <returns>入金情報/引当情報取得用パラメータ クラス</returns>
		/// <remarks>
		/// <br>Note       : 入金情報/引当情報取得用パラメータの生成を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private InputDepositNormalTypeAcs.SearchDepositParameter SetDepositParameter(SearchMode searchMode, int customerCode, int depositSlipNo)
		{
			InputDepositNormalTypeAcs.SearchDepositParameter param = new InputDepositNormalTypeAcs.SearchDepositParameter();

			DateTime dt	= TDateTime.GetSFDateNow();

			// 企業コード
			param.EnterpriseCode = enterpriseCode;

            // ↓ 20070125 18322 c MA.NS用に変更
            #region SF （全てコメントアウト）
            //// 計上拠点
			//param.AddUpSecCod = _selectSectionCode;
            //
			//// 得意先コード
			//param.CustomerCode = customerCode;
            //
			//// 入金伝票番号
			//param.DepositSlipNo = depositSlipNo;
            //
			//// 受注番号
			//param.AcceptAnOrderNo = 0;
            //
			//// 入金日 開始
			//param.DepositDateStart = detDepositDateStart.GetLongDate();
            //
			//// 入金日 終了
			//param.DepositDateEnd = detDepositDateEnd.GetLongDate();
            #endregion

            // 計上拠点
			param.AddUpSecCode = _selectSectionCode;

			// 得意先コード
			param.CustomerCode = customerCode;

            //// 請求先コード
            param.ClaimCode = this._claimCode;

			// 入金伝票番号
			param.DepositSlipNo = depositSlipNo;

            // 受注番号
            // param.AcceptAnOrderNo = 0;  // 2007.10.10 del

            // 売上伝票番号
            param.SalesSlipNum = "";       // 2007.10.10 add

			// 入金日 開始
			param.DepositCallMonthsStart = detDepositDateStart.GetLongDate();

			// 入金日 終了
			param.DepositCallMonthsEnd = detDepositDateEnd.GetLongDate();
            // ↑ 20070125 18322 c

			// 引当済入金伝票呼出区分
			param.AlwcDepositCall = opsAlwcDepositCall.CheckedIndex;

			return param;
		}

		/// <summary>
		/// 請求売上情報取得用パラメータ 作成処理
		/// </summary>
		/// <param name="searchMode">検索モード</param>
		/// <param name="customerCode">得意先コード</param>
		/// <returns>請求売上情報取得用パラメータ クラス</returns>
		/// <remarks>
		/// <br>Note       : 請求売上情報取得用パラメータの生成を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private InputDepositNormalTypeAcs.SearchSalesParameter SetSalesParameter(SearchMode searchMode, int customerCode)
		{
			InputDepositNormalTypeAcs.SearchSalesParameter param = new InputDepositNormalTypeAcs.SearchSalesParameter();

			DateTime dt	= TDateTime.GetSFDateNow();

			// 企業コード
			param.EnterpriseCode = enterpriseCode;

            // ↓ 20070125 18322 c MA.NS用に変更
            #region SF （全てコメントアウト）
			//// 計上拠点
			//param.AddUpSecCod = _selectSectionCode;
            //
			//// 得意先コード
			//param.CustomerCode = customerCode;
            //
			//// 伝票番号
			//param.SlipNo = tEdit_SalesSlipNum.Text;
            //
			//// 伝票日付 開始
			//param.SearchSlipDateStart = detSearchSlipDateStart.GetLongDate();
            //
			//// 伝票日付 終了
			//param.SearchSlipDateEnd = detSearchSlipDateEnd.GetLongDate();
            //
			//// 引当済請求売上伝票呼出区分
			//param.AlwcDmdSalesCall = opsAlwcDmdSalesCall.CheckedIndex;
            //
			//// 受注ステータス
			//param.AcptAnOdrStatus = new int[0];
			//if (cbxAcptAnOdrStartus1.Checked == true)
			//{
			//	param.AcptAnOdrStatus.CopyTo( param.AcptAnOdrStatus = new int[param.AcptAnOdrStatus.Length+1], 0 );
			//	param.AcptAnOdrStatus[param.AcptAnOdrStatus.Length-1] = 10;
			//}
			//if (cbxAcptAnOdrStartus2.Checked == true)
			//{
			//	param.AcptAnOdrStatus.CopyTo( param.AcptAnOdrStatus = new int[param.AcptAnOdrStatus.Length+1], 0 );
			//	param.AcptAnOdrStatus[param.AcptAnOdrStatus.Length-1] = 20;
			//}
			//if (cbxAcptAnOdrStartus3.Checked == true)
			//{
			//	param.AcptAnOdrStatus.CopyTo( param.AcptAnOdrStatus = new int[param.AcptAnOdrStatus.Length+1], 0 );
			//	param.AcptAnOdrStatus[param.AcptAnOdrStatus.Length-1] = 30;
			//}
			//
			//// データ入力システム
			//param.DataInputSystem = new int[0];
			//param.DataInputSystem.CopyTo( param.DataInputSystem = new int[param.DataInputSystem.Length+1], 0 );
			//param.DataInputSystem[param.DataInputSystem.Length-1] = 0;
			//if (cbxDataInputSystem1.Checked == true)
			//{
			//	param.DataInputSystem.CopyTo( param.DataInputSystem = new int[param.DataInputSystem.Length+1], 0 );
			//	param.DataInputSystem[param.DataInputSystem.Length-1] = 1;
			//}
			//if (cbxDataInputSystem2.Checked == true)
			//{
			//	param.DataInputSystem.CopyTo( param.DataInputSystem = new int[param.DataInputSystem.Length+1], 0 );
			//	param.DataInputSystem[param.DataInputSystem.Length-1] = 2;
			//}
			//if (cbxDataInputSystem3.Checked == true)
			//{
			//	param.DataInputSystem.CopyTo( param.DataInputSystem = new int[param.DataInputSystem.Length+1], 0 );
			//	param.DataInputSystem[param.DataInputSystem.Length-1] = 3;
			//}
            //
			//// AA抽出区分
			//param.AutoAuctionDiv = 0;
            //
			//// クレジット・ローン区分
			//param.CreditOrLoanCd = new int[3] {0, 1, 2};
            //
			//// クレジット会社コード
			//param.CreditCompanyCode = "";
            //
			//// 販売従業員コード
			//param.SalesEmployeeCd = "";
            //
			//// 受注日(開始)
			//param.AcceptAnOrderDateStart = 0;
            //
			//// 受注日(終了)
			//param.AcceptAnOrderDateEnd = 0;
            //
			//// 納車予定日(開始)
			//param.CarDeliExpectedDateStart = 0;
            //
			//// 納車予定日(終了)
			//param.CarDeliExpectedDateEnd = 0;
            #endregion
            //// 受注ステータス
            Int32[] arrAcptAnOdrStatus = new Int32[1];
            int index = 0;

            arrAcptAnOdrStatus[index] = 30;
            index += 1;

            param.AcptAnOdrStatus = arrAcptAnOdrStatus;

            // 売上伝票番号
			param.SalesSlipNum = tEdit_SalesSlipNum.Text;

            // 得意先コード
			param.CustomerCode = customerCode;

            //// 請求先コード
            param.ClaimCode = this._claimCode;

			// 計上日(開始)
			param.AddUpADateStart = 0;

			// 計上日(終了)
			param.AddUpADateEnd = 0;

			// 請求計上拠点
			param.DemandAddUpSecCd = _selectSectionCode;

			// 実績計上拠点
			param.ResultsAddUpSecCd = "";

			// 引当済請求売上伝票呼出区分
			param.AlwcSalesSlipCall = opsAlwcDmdSalesCall.CheckedIndex;

			// 販売従業員コード
			param.SalesEmployeeCd = "";

			// 伝票日付 開始
			param.SearchSlipDateStart = detSearchSlipDateStart.GetLongDate();

			// 伝票日付 終了
			param.SearchSlipDateEnd = detSearchSlipDateEnd.GetLongDate();
            // ↑ 20070125 18322 c

			return param;
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
        /// 得意先情報/得意先金額情報取得用パラメータ 作成処理
        /// </summary>
        /// <param name="customerCode">得意先コード</param>
        /// <returns>得意先情報/得意先金額情報取得用パラメータ クラス</returns>
        /// <remarks>
        /// <br>Note       : 得意先情報/得意先金額情報取得用パラメータの生成を行います。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// </remarks>
        private InputDepositNormalTypeAcs.SearchCustomerParameter SetCustomerParameter(int customerCode)
        {
            InputDepositNormalTypeAcs.SearchCustomerParameter param = new InputDepositNormalTypeAcs.SearchCustomerParameter();

            param.EnterpriseCode = enterpriseCode;                                      // 企業コード
            param.AddUpSecCod = _selectSectionCode;                                      // 計上拠点
            param.AddUpADate = TDateTime.DateTimeToLongDate(TDateTime.GetSFDateNow());  // 計上日
            //param.CustomerCode = customerCode;                                          // 得意先コード
            param.ClaimCode = this._claimCode;                                           // 請求先コード

            return param;
        }

        /// <summary>
        /// 入金情報/引当情報取得用パラメータ 作成処理
        /// </summary>
        /// <param name="searchMode">検索モード</param>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="depositSlipNo">入金伝票番号</param>
        /// <returns>入金情報/引当情報取得用パラメータ クラス</returns>
        /// <remarks>
        /// <br>Note       : 入金情報/引当情報取得用パラメータの生成を行います。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// </remarks>
        private InputDepositNormalTypeAcs.SearchDepositParameter SetDepositParameter(SearchMode searchMode, int customerCode, int depositSlipNo)
        {
            InputDepositNormalTypeAcs.SearchDepositParameter param = new InputDepositNormalTypeAcs.SearchDepositParameter();

            DateTime dt = TDateTime.GetSFDateNow();

            param.EnterpriseCode = enterpriseCode;                              // 企業コード
            param.AddUpSecCode = _selectSectionCode;                             // 計上拠点
            //param.CustomerCode = customerCode;                                  // 得意先コード
            param.ClaimCode = this._claimCode;                                   // 請求先コード
            param.DepositSlipNo = depositSlipNo;                                // 入金伝票番号
            param.SalesSlipNum = "";                                            // 売上伝票番号
            param.DepositCallMonthsStart = detDepositDateStart.GetLongDate();   // 入金日 開始
            param.DepositCallMonthsEnd = detDepositDateEnd.GetLongDate();       // 入金日 終了
            param.AlwcDepositCall = (int)opsAlwcDepositCall.Value;            // 引当済入金伝票呼出区分

            return param;
        }

        // ------- ADD 王君 2012/12/24 Redmine#33741 ------------>>>>>
        /// <summary>
        /// 入金情報(入金伝票)取得用パラメータ 作成処理
        /// </summary>
        /// <param name="searchMode">検索モード</param>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="depositSlipNo">入金伝票番号</param>
        /// <returns>入金情報/引当情報取得用パラメータ クラス</returns>
        /// <remarks>
        /// <br>Note       : 入金情報/引当情報取得用パラメータの生成を行います。</br>
        /// <br>Programmer : 王君</br>
        /// <br>Date       : 2012/12/24</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
        /// </remarks>
        private InputDepositNormalTypeAcs.SearchDepositParameter SetDepositParameterUD(SearchMode searchMode, int customerCode, int depositSlipNo)
        {
            InputDepositNormalTypeAcs.SearchDepositParameter param = new InputDepositNormalTypeAcs.SearchDepositParameter();

            DateTime dt = TDateTime.GetSFDateNow();

            param.EnterpriseCode = enterpriseCode;                               // 企業コード
            param.AlwcDepositCall = 0;                                           // 引当済入金伝票呼出区分
            return param;
        }


        /// <summary>
        /// 得意先情報/得意先金額情報取得用パラメータ 作成処理(伝票番号検索モード)
        /// </summary>
        /// <param name="customerCode">得意先コード</param>
        /// <returns>得意先情報/得意先金額情報取得用パラメータ クラス</returns>
        /// <remarks>
        /// <br>Note       : 得意先情報/得意先金額情報取得用パラメータの生成を行います。</br>
        /// <br>Programmer : 王君</br>
        /// <br>Date       : 2012/12/24</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
        /// </remarks>
        private InputDepositNormalTypeAcs.SearchCustomerParameter SetCustomerParameterUD(int customerCode)
        {
            InputDepositNormalTypeAcs.SearchCustomerParameter param = new InputDepositNormalTypeAcs.SearchCustomerParameter();

            param.EnterpriseCode = enterpriseCode;                                      // 企業コード
            param.AddUpSecCod = _selectSectionCode;                                      // 計上拠点
            param.AddUpADate = TDateTime.DateTimeToLongDate(TDateTime.GetSFDateNow());  // 計上日
            param.CustomerCode = customerCode;                                          // 得意先コード
            param.ClaimCode = this._claimCode;                                           // 請求先コード

            return param;
        }

        /// <summary>
        /// 得意先コートチェック処理
        /// </summary>
        /// <param name="customerCode">得意先コード</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Note       : 得意先コード得意先コートチェック処理を行います。</br>
        /// <br>Programmer : 王君</br>
        /// <br>Date       : 2012/12/24</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
        /// </remarks>
        private void CustomerInfoSet(int customerCode)
        {
            CustomerInfo customerInfo;

            int status = GetCustomerInfo(out customerInfo, customerCode);
            if (status == 0)
            {
                // 得意先コード設定
                this.tNedit_CustomerCode.SetInt(customerInfo.CustomerCode);

                this._prevCustomerCode = customerInfo.CustomerCode;

                // 得意先略称取得
                this.edtCustomerName.DataText = customerInfo.CustomerSnm.Trim();
                // 計上拠点取得
                this._selectSectionCode = customerInfo.ClaimSectionCode.Trim();

                // 消費税転嫁方式
                this._consTaxLayMethod = customerInfo.ConsTaxLayMethod;
                
                // 得意先コード
                this._customerCode = customerInfo.CustomerCode;

                // 請求先コード
                this._claimCode = customerInfo.ClaimCode;

                // 入金消込区分で判断
                if (customerInfo.DepoDelCode == 0)
                {
                    // 売上引当不可
                    this.tabList.Tabs[1].Enabled = false;
                }
                else
                {
                    // 売上引当可
                    this.tabList.Tabs[1].Enabled = true;
                }
                this._prevCustomerCode = this._claimCode;
                this._focusSave = true;
            }

            if (status == 0)
            {
                // 得意先変更フラグを立てる
                _customerChangeFlg = true;

                GetDepositInfo(customerCode, 1);

                // 得意先変更フラグを削除し、入金情報を再計算する
                GetDisplayDeposit(null, selectedDepositCopyRow, selectedAllowanceCopyRows);
                _customerChangeFlg = false;
            }
        }

        /// <summary>
        /// グリッドフォーカス情報取得処理
        /// </summary>
        /// <param name="DmdListrowIndex">入金一覧グリッドの行番号</param>
        /// <param name="DKindrowIndex">入金内訳グリッドの行番号</param>
        /// <remarks>
        /// <br>Note       : グリッド行番号取得処理を行います。</br>
        /// <br>Programmer : 王君</br>
        /// <br>Date       : 2012/12/24</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応</br>
        /// </remarks>
        private void GetGuidRowNo(out int DmdListrowIndex, out int DKindrowIndex)
        {
            DmdListrowIndex = -1;
            DKindrowIndex = -1;
            int countKind = this.grdDepositKind.Rows.Count;
            int countList = this.grdDepositList.Rows.Count;
            if (countKind > 0)
            {
                for (int i = 0; i < countKind; i++)
                {
                    if (this.grdDepositKind.Rows[i].Cells[DepositRelDataAcs.ctDeposit].Activated)
                    {
                        DKindrowIndex = i;
                    }
                }
            }
            if (countList > 0)
            {
                for (int i = 0; i < countList; i++)
                {
                    if (this.grdDepositList.Rows[i].Activated)
                    {
                        DmdListrowIndex = i;
                    }
                }
            }  
        }
        // ------- ADD 王君 2012/12/24 Redmine#33741 ------------<<<<<

        /// <summary>
        /// 請求売上情報取得用パラメータ 作成処理
        /// </summary>
        /// <param name="searchMode">検索モード</param>
        /// <param name="customerCode">得意先コード</param>
        /// <returns>請求売上情報取得用パラメータ クラス</returns>
        /// <remarks>
        /// <br>Note       : 請求売上情報取得用パラメータの生成を行います。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// </remarks>
        private InputDepositNormalTypeAcs.SearchSalesParameter SetSalesParameter(SearchMode searchMode, int customerCode)
        {
            InputDepositNormalTypeAcs.SearchSalesParameter param = new InputDepositNormalTypeAcs.SearchSalesParameter();

            DateTime dt = TDateTime.GetSFDateNow();
            
            param.EnterpriseCode = enterpriseCode;                              // 企業コード
            param.AcptAnOdrStatus = new int[1];
            param.AcptAnOdrStatus[0] = 30;                                      // 受注ステータス
            param.SalesSlipNum = tEdit_SalesSlipNum.Text;                       // 売上伝票番号
            param.CustomerCode = this._customerCode;                            // 得意先コード
            param.ClaimCode = this._claimCode;                                   // 請求先コード
            param.AddUpADateStart = 0;                                          // 計上日(開始)
            param.AddUpADateEnd = 0;                                            // 計上日(終了)
            param.DemandAddUpSecCd = _selectSectionCode;                         // 請求計上拠点
            param.ResultsAddUpSecCd = "";                                       // 実績計上拠点
            param.AlwcSalesSlipCall = (int)opsAlwcDmdSalesCall.Value;           // 引当済請求売上伝票呼出区分
            param.SalesEmployeeCd = "";                                         // 販売従業員コード
            param.SearchSlipDateStart = detSearchSlipDateStart.GetLongDate();   // 伝票日付 開始
            param.SearchSlipDateEnd = detSearchSlipDateEnd.GetLongDate();       // 伝票日付 終了

            return param;
        }

        /// <summary>
        /// 入金内容の変更状況チェック処理
        /// </summary>
        /// <param name="flgNewDeposit">更新後新規入金モードフラグ</param>
        /// <param name="flgDeposit">入金チェックフラグ(True:入金内容変更状況チェック  False:引当内容変更状況チェック)</param>
        /// <returns>処理ステータス 0:処理続行,1:処理キャンセル</returns>
        /// <remarks>
        /// <br>Note       : 変更されているかチェックを行い、更新確認を促します。</br>
        /// <br>Programmer : 30414 忍 幸史</br>
        /// <br>Date       : 2008/06/26</br>
        /// <br>UpdateNote : 2009/12/25 李占川 redmine#2128の対応</br>
        /// <br>UpdateNote : 2012/12/24 王君 </br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#33741の対応 </br>
        /// </remarks>
        private int CheckUpdateData(bool flgNewDeposit, bool flgDeposit)
        {
            // 編集中の入金伝票がない時(通常ありえない)
            if (selectedDepositCopyRow == null)
            {
                // ADD START 2010/05/06 gejun for M1007A-手形データ追加
                this._rcvDraftData = null;
                this._rcvDraftDataDel = null;
                // ADD END 2010/05/06 gejun for M1007A-手形データ追加
                return (0);
            }

            this.grdDepositKind.ActiveCell = null;

            bool bStatus;
            string msg = "";

            // 入金内容変更状況チェック
            if (flgDeposit == true)
            {
                // --- UPD 2009/12/25 ---------->>>>>
                //bStatus = inputDepositNormalTypeAcs.CheckUpdateData(beforeSelectedDepositRow,
                //                                    beforeSelectedAllowanceRows,
                //                                    selectedDepositCopyRow,
                //                                    selectedAllowanceCopyRows);
                bStatus = inputDepositNormalTypeAcs.CheckUpdateData(beforeSelectedDepositRow,
                                    beforeSelectedAllowanceRows,
                                    selectedDepositCopyRow,
                                    selectedAllowanceCopyRows,
                                    edtDepositSlipNo.GetInt());
                // --- UPD 2009/12/25 ----------<<<<<

                msg = "現在、編集中のデータが存在します。" + "\r\n\r\n" + "登録してもよろしいですか？";
            }
            // 引当内容変更状況チェック
            else
            {
                // --- UPD 2009/12/25 ---------->>>>>
                //bStatus = inputDepositNormalTypeAcs.CheckUpdateData(null,
                //                                                    beforeSelectedAllowanceRows,
                //                                                    null,
                //                                                    selectedAllowanceCopyRows);
                bStatus = inputDepositNormalTypeAcs.CheckUpdateData(null,
                                                    beforeSelectedAllowanceRows,
                                                    null,
                                                    selectedAllowanceCopyRows,
                                                    edtDepositSlipNo.GetInt());
                // --- UPD 2009/12/25 ----------<<<<<

                msg = "現在、編集中の引当データが存在します。" + "\r\n\r\n" + "登録してもよろしいですか？";
            }

            if (bStatus != true)
            {
                // ADD START 2010/05/06 gejun for M1007A-手形データ追加
                this._rcvDraftData = null;
                this._rcvDraftDataDel = null;
                // ADD END 2010/05/06 gejun for M1007A-手形データ追加
                return (0);
            }

            // 変更中の時
            DialogResult res = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION,
                                             this.Name,
                                             msg,
                                             0,
                                             MessageBoxButtons.YesNoCancel,
                                             MessageBoxDefaultButton.Button3);
            switch (res)
            {
                case DialogResult.Yes:
                    // 入金伝票保存処理
                    if (SaveDeposit(flgNewDeposit) != 0)
                    {
                        return 1;
                    }
                    //----- ADD 王君 2012/12/24 Redmine#33741 ----->>>>>
                    else
                    {
                        this._saveStatus = 1; 
                    }
                    //----- ADD 王君 2012/12/24 Redmine#33741 -----<<<<<
                    break;
                case DialogResult.No:
                    if (flgDeposit == true)
                    {
                        // ADD 王君 2012/12/24 Redmine#33741 ----->>>>>
                        _edtDepositDateSave = edtDepositDate.GetDateTime();
                        this._saveStatus = 2;
                        // ADD 王君 2012/12/24 Redmine#33741 -----<<<<<
                        // 選択入金伝票再展開処理
                        ReExpandSelectDeposit();
                    }
                    else
                    {
                        // 受注引当一覧の行を非アクティブとする
                        // これが無いと更新有無メッセージ後に引当額の残像がのこる。
                        grdDmdSalesList.ActiveCell = null;

                        // イベントの無効化
                        GridEventManager eventManager = this.grdDepositList.EventManager;
                        eventManager.SetEnabled(GridEventIds.BeforeRowDeactivate, false);
                        try
                        {
                            // 入金内訳グリッドのセルを非アクティブとする
                            this.grdDepositKind.ActiveCell = null;

                            // 入金内訳グリッドの行を非アクティブとする
                            this.grdDepositKind.ActiveRow = null;

                            // 入金一覧の新規行を非アクティブとする
                            grdDepositList.ActiveRow = null;

                            // 受注引当一覧のセルを非アクティブとする
                            grdDmdSalesList.ActiveCell = null;

                            // 受注引当一覧の行を非アクティブとする
                            grdDmdSalesList.ActiveRow = null;

                            // 入金伝票変更前画面初期化処理
                            this.DisplyClearToDepositChange();

                            // 入金情報新規行追加処理
                            selectedDepositCopyRow = inputDepositNormalTypeAcs.DepositNewRow();

                            // 引当情報DataRow取得処理
                            selectedAllowanceCopyRows.Clear();

                            // 入金伝票入力欄表示処理
                            //this.SetDisplayDeposit(selectedDepositCopyRow); // DEL 王君　2012/12/24 Redmine#33741
                            this.SetDisplayDeposit(selectedDepositCopyRow, 0); // ADD 王君　2012/12/24 Redmine#33741

                            // DataRowコピー処理
                            inputDepositNormalTypeAcs.CopyDepositDataRow(ref selectedDepositCopyRow, ref beforeSelectedDepositRow);
                            inputDepositNormalTypeAcs.CopyAllowanceDataRow(ref selectedAllowanceCopyRows, ref beforeSelectedAllowanceRows);

                            // 入金額にフォーカスをセット
                            this.edtDepositDate.Focus();

                            //this.tNedit_BankCode.Enabled = false;
                            //this.btnBankGuid.Enabled = false;
                            //this.edtDraftDrawingDate.Enabled = false;
                            //this.tEdit_DraftNo.Enabled = false;
                            //this.cmbDraftKind.Enabled = false;
                            //this.cmbDraftDivide.Enabled = false;

                            // 請求売上情報データセット再登録処理
                            inputDepositNormalTypeAcs.ResetDsDmdSalesInfo();
                        }
                        finally
                        {
                            eventManager.SetEnabled(GridEventIds.BeforeRowDeactivate, true);
                        }

                        //DataRow dr = null;
                        //if (grdDepositList.ActiveRow != null)
                        //{
                        //    dr = grdDepositList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctDepositDataRow].Value as DataRow;
                        //}

                        //// 引当情報キャンセル処理
                        //inputDepositNormalTypeAcs.CancelAllowance(dr, ref selectedDepositCopyRow, ref selectedAllowanceCopyRows);

                        //// 受注一覧の入金未引当額に反映
                        //labDepositAlwcBlnce.Text = ((Int64)selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit]).ToString("###,###,##0");
                    }
                    // ADD START 2010/05/06 gejun for M1007A-手形データ追加
                    this._rcvDraftData = null;
                    this._rcvDraftDataDel = null;
                    // ADD END 2010/05/06 gejun for M1007A-手形データ追加
                    break;
                case DialogResult.Cancel:
                    this._saveStatus = 3;// ADD 王君 2012/12/24 Redmine#33741
                    return 1;
            }

            return (0);
        }
        // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 入金内容の変更状況チェック処理
		/// </summary>
		/// <param name="flgNewDeposit">更新後新規入金モードフラグ</param>
		/// <returns>処理ステータス 0:処理続行,1:処理キャンセル</returns>
		/// <remarks>
		/// <br>Note       : 変更されているかチェックを行い、更新確認を促します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private int CheckUpdateData(bool flgNewDeposit)
		{
			// 編集中の入金伝票がない時(通常ありえない)
            if (selectedDepositCopyRow == null)
            {
                return 0;
            }

			// 行の変更状況チェック処理
			if (inputDepositNormalTypeAcs.CheckUpdateData(beforeSelectedDepositRow, beforeSelectedAllowanceRows, selectedDepositCopyRow, selectedAllowanceCopyRows) == true)
			{
				// 変更中の時
				DialogResult res = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, this.Name, "現在、編集中のデータが存在します。" + "\r\n\r\n" + "登録してもよろしいですか？", 0, MessageBoxButtons.YesNoCancel, MessageBoxDefaultButton.Button3);
				switch(res)
				{
					case DialogResult.Yes:

						// 入金伝票保存処理
						if (this.SaveDeposit(flgNewDeposit) != 0)
						{
							return 1;
						}

						break;
					
					case DialogResult.No:

						// 選択入金伝票再展開処理
						this.ReExpandSelectDeposit();

						break;

					case DialogResult.Cancel:
						
						return 1;
				}
			}

			return 0;
		}
        
        /// <summary>
		/// 引当内容の変更状況チェック処理
		/// </summary>
		/// <param name="flgNewDeposit">更新後新規入金モードフラグ</param>
		/// <returns>処理ステータス 0:処理続行,1:処理キャンセル</returns>
		/// <remarks>
		/// <br>Note       : 変更されているかチェックを行い、更新確認を促します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private int CheckUpdateAllowanceData(bool flgNewDeposit)
		{
			// 編集中の入金伝票がない時(通常ありえない)
			if (selectedDepositCopyRow == null)
				return 0;

			// 行の変更状況チェック処理
			if (inputDepositNormalTypeAcs.CheckUpdateData(null, beforeSelectedAllowanceRows, null, selectedAllowanceCopyRows) == true)
			{
				// 変更中の時
				DialogResult res = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION, this.Name, "現在、編集中の引当データが存在します。" + "\r\n\r\n" + "登録してもよろしいですか？", 0, MessageBoxButtons.YesNoCancel, MessageBoxDefaultButton.Button3);
				switch(res)
				{
					case DialogResult.Yes:

						// 入金伝票保存処理
						if (this.SaveDeposit(flgNewDeposit) != 0)
						{
							return 1;
						}

						break;
					
					case DialogResult.No:

						DataRow dr = null;
						if (grdDepositList.ActiveRow != null)
						{
							dr = grdDepositList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctDepositDataRow].Value as DataRow;
						}

						// 引当情報キャンセル処理
						inputDepositNormalTypeAcs.CancelAllowance(dr, ref selectedDepositCopyRow, ref selectedAllowanceCopyRows);

						// 受注一覧の入金未引当額に反映
						labDepositAlwcBlnce.Text = Convert.ToInt64(selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit]).ToString("###,###,##0");
						break;

					case DialogResult.Cancel:
						
						return 1;
				}
			}

			return 0;
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// 選択入金伝票再展開処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 選択中の入金伝票を強制的に再展開します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void ReExpandSelectDeposit()
		{
			// 入金伝票変更前画面初期化処理
			this.DisplyClearToDepositChange();

			// 選択入金データ展開処理
			//this.ExpandSelectDeposit();// DEL 王君 2012/12/24 Redmine#33741
            this.ExpandSelectDeposit(false);// ADD 王君 2012/12/24 Redmine#33741

			// 引当タブが表示されている時
			if (tabList.Tabs["DmdSalesTab"].Active == true)
			{
				// 選択入金引当データ展開処理
				this.ExpandSelectDepositAllowance();
			}
		}
		
		/// <summary>
		/// 売上引当合計計算処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : 受注引当一覧の引当残高合計を計算し表示します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void SetSalesAllowanceTotal()
		{
			Int64 total = 0;
            Int64 depositAllowance_Sales = 0;
            Int64 totalSales = 0;

			foreach (UltraGridRow dr in grdDmdSalesList.Rows)
			{
				if (dr.IsFilteredOut == false)
				{
                    //// 引当残を合算する
                    //total += Convert.ToInt64(dr.Cells[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Value);
                    // 引当済を合算する
                    depositAllowance_Sales += Convert.ToInt64(dr.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Value);
                    // 伝票合計を合算する
                    totalSales += Convert.ToInt64(dr.Cells[InputDepositNormalTypeAcs.ctTotalSales].Value);
				}
			}

            Int64 salesAllowanceTotal = totalSales - depositAllowance_Sales;
			// 売上引当残高を表示
            labSalesAllowanceTotal.Text = salesAllowanceTotal.ToString("###,###,##0");

            // 入金未引当額設定
            SetDepositAlwcBlance();
        }

        #region 2007.10.10 hikita del
        // 2007.10.10 hikita del start ----------------------------------------------------------------------->>
        ///// <summary>
        ///// クレジット会社名称セット処理
        ///// </summary>
        ///// <param name="creditCompanyCode">情報取得用パラメータ クレジット会社コード</param>
        ///// <param name="creditCompanyName">クレジット会社名称</param>
        ///// <remarks>
        ///// <br>Note       : クレジット会社名称を設定します。</br>
        ///// <br>Programmer : 97036 amami</br>
        ///// <br>Date       : 2005.07.21</br>
        ///// </remarks>
        //private void SetCreditCompanyName(string creditCompanyCode, string creditCompanyName)
        //{
        //    // コード無しの時はクリア
        //    if (creditCompanyCode.Equals(""))
        //    {
        //        if (edtCreditCompanyCode.Text != "")
        //        {
        //            if (this.InvokeRequired)
        //            {
        //                this.Invoke(new GetCreditCompanyNamePrc.Callback(this.SetCreditCompanyName), new object[]{creditCompanyCode, creditCompanyName});
        //            }
        //            else
        //            {
        //                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
        //                              this.Name, 
        //                              "該当するクレジット会社が\r\n見つかりませんでした。",
        //                              0,
        //                              MessageBoxButtons.OK);
        //            }
        //        }

        //        edtCreditCompanyCode.Text = "";
        //        edtCreditCompanyName.Text = "";
        //        return;
        //    }

        //    // クレジット会社コードが同一の時
        //    if (edtCreditCompanyCode.Text.Equals(creditCompanyCode))
        //    {
        //        edtCreditCompanyName.Text = creditCompanyName;
        //    }
        //}
        // 2007.10.10 hiktia del end ---------------------------------------------------------------------------<<
        #endregion 2007.10.10 hikita del

        // 2007.10.10 hikita add start ------------------------------------------------------------------------->>
        /// <summary>
        /// 銀行名称セット処理
        /// </summary>
        /// <param name="bankCode">情報取得用パラメータ 銀行コード</param>
        /// <param name="bankName">銀行名称</param>
        /// <remarks>
        /// <br>Note       : 銀行名称を設定します。</br>
        /// <br>Programmer : 20081 疋田 勇人</br>
        /// <br>Date       : 2007.10.10</br>
        /// </remarks>
        private void SetBankName(string bankCode, string bankName)
        {
            //// コード無しの時はクリア
            //if (tNedit_BankCode.GetInt() != 0)
            //{
            //    this.teditBankName.Text = bankName;
            //}
            //else
            //{
            //    this.tNedit_BankCode.Text = "";
            //    this.teditBankName.Text = "";
            //}
        }
        // 2007.10.10 hikita add end ---------------------------------------------------------------------------<<

        /// <summary>
		/// 請求金額情報取得スレッド開始処理
		/// </summary>
		/// <remarks>
		/// <br>Note       : スレッドを開始します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void CustDmdPrcThreadStart()
		{
			// スレッドが実行中だったら処理を中断させる
			if ((custDmdPrcThread != null) && (custDmdPrcThread.ThreadState == ThreadState.Running))
			{
				custDmdPrcThread.Abort();
			}

			// 得意先情報/得意先金額情報取得用パラメータ 作成処理
			InputDepositNormalTypeAcs.SearchCustomerParameter searchCustomerParameter = this.SetCustomerParameter(tNedit_CustomerCode.GetInt());

            // ↓ 20070129 18322 c ワーカースレッドの時にうまく得意先金額情報が更新されないので修正
			//// GetCustDmdPrc オブジェクトの作成
			//GetCustDmdPrc getCustDmdPrc = new GetCustDmdPrc( searchCustomerParameter, new GetCustDmdPrc.Callback(this.DisplayCustDmdPrc) );

			// GetCustDmdPrc オブジェクトの作成
			GetCustDmdPrc getCustDmdPrc = new GetCustDmdPrc( searchCustomerParameter, new GetCustDmdPrc.Callback(this.ThreadDisplayCustDmdPrc) );
            // ↑ 20070129 18322 c

			// Threadオブジェクトを作成する
			custDmdPrcThread = new Thread( new ThreadStart(getCustDmdPrc.Main) );

			// スレッドを開始する
			custDmdPrcThread.Start();
		}

        /// <summary>
        /// 得意先情報/得意先金額情報取得スレッド鏡情報再設定処理
        /// </summary>
        /// <param name="depositCustDmdPrc"></param>
        /// <remarks>
        /// <br>Note		: 新規スレッドでの鏡情報の再設定処理を行います。</br>
        /// <br>Programmer	: 18322 木村 武正</br>
        /// <br>Date		: 2006.12.22</br>
        /// </remarks>
        private void ThreadDisplayCustDmdPrc(DepositCustDmdPrc depositCustDmdPrc)
        {
            if (this.InvokeRequired)
            {
                // 現在のスレッドがワーカースレッドの場合は、Invokeメソッドを使用してメソッドをコール
                this.Invoke(new GetCustDmdPrc.Callback(this.DisplayCustDmdPrc),
                                                       new object[] { depositCustDmdPrc });
            }
            else
            {
                // 現在のスレッドがUIスレッドの場合は、そのままメソッドをコール
                this.DisplayCustDmdPrc(depositCustDmdPrc);
            }
        }

        #region 2007.10.10 hikita del
        // 2007.10.10 hikita del start --------------------------------------------------------------->>
        ///// <summary>
        ///// クレジット会社名称取得スレッド開始処理
        ///// </summary>
        ///// <remarks>
        ///// <br>Note       : スレッドを開始します。</br>
        ///// <br>Programmer : 97036 amami</br>
        ///// <br>Date       : 2005.07.21</br>
        ///// </remarks>
        //private void CreditCompanyNamePrcThreadStart()
        //{
        //    // スレッドが実行中だったら処理を中断させる
        //    if ((creditCompanyNamePrcThread != null) && (creditCompanyNamePrcThread.ThreadState == ThreadState.Running))
        //    {
        //        creditCompanyNamePrcThread.Abort();
        //    }

        //    // GetCustDmdPrc オブジェクトの作成
        //    GetCreditCompanyNamePrc getCreditCompanyNamePrc = new GetCreditCompanyNamePrc(enterpriseCode, edtCreditCompanyCode.DataText, new GetCreditCompanyNamePrc.Callback(this.SetCreditCompanyName));

        //    // Threadオブジェクトを作成する
        //    creditCompanyNamePrcThread = new Thread(new System.Threading.ThreadStart(getCreditCompanyNamePrc.Main));

        //    // スレッドを開始する
        //    creditCompanyNamePrcThread.Start();
        //}
        // 2007.10.10 hikita del end -----------------------------------------------------------------<<
        #endregion 2007.10.10 hikita del

        // 2007.10.10 hikita add start --------------------------------------------------------------->>
        /// <summary>
        /// 銀行名称取得スレッド開始処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : スレッドを開始します。</br>
        /// <br>Programmer : 20081 疋田 勇人</br>
        /// <br>Date       : 2007.10.10</br>
        /// </remarks>
        private void BankNamePrcThreadStart()
        {
            //// スレッドが実行中だったら処理を中断させる
            //if ((bankNamePrcThread != null) && (bankNamePrcThread.ThreadState == ThreadState.Running))
            //{
            //    bankNamePrcThread.Abort();
            //}

            //// GetCustDmdPrc オブジェクトの作成
            //GetBankNamePrc getBankNamePrc = new GetBankNamePrc(enterpriseCode, tNedit_BankCode.DataText, new GetBankNamePrc.Callback(this.SetBankName));

            //// Threadオブジェクトを作成する
            //bankNamePrcThread = new Thread(new System.Threading.ThreadStart(getBankNamePrc.Main));

            //// スレッドを開始する
            //bankNamePrcThread.Start();
        }
        // 2007.10.10 hikita add end -----------------------------------------------------------------<<

        #region 2008/06/26 DEL 使用していないのでコメントアウト
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// TEditプロパティー変換処理
		/// </summary>
		/// <param name="tEdit">変換対象コントロール</param>
		/// <remarks>
		/// <br>Note       : プロパティーの設定内容を変換します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void TEditChangeEdit(Broadleaf.Library.Windows.Forms.TEdit tEdit)
		{
			// 部品にて設定値が取得出来なかった場合に備えて初期設定しておく
			tEdit.ExtEdit = new TExtEdit(emCursorPosition.Prev, false, false, 9, new TEnableChars(false, false, false, false, false, false, true));

            if (NumberControl.NoTypeMngList == null) return;

            // ↓ 20070129 18322 c MA.NS用に変更
            #region SF 選択中システム/伝票種別取得処理（全てコメントアウト）
			//// 選択中システム/伝票種別取得処理
			//int[] lstDataInputSystem;
			//int[] lstSlipKindCode;
			//this.GetSelectSystemSlipKind(out lstDataInputSystem, out lstSlipKindCode);
            //
			//// システム/伝票種別が選択されていない場合は以下の処理を実行しない
			//if ((lstDataInputSystem.Length == 0) || (lstSlipKindCode.Length == 0)) return;
            //
			//// 各システム伝票番号番号コード取得処理
			//int[] noCodeArray = ConstantManagement_SF_AP.GetSlipNoNoCode(lstDataInputSystem, lstSlipKindCode);
            //
            //if (noCodeArray.Length == 0) return;
            #endregion

            int noCodeArray = ctNoCodeSalesSlipNum;
            // ↑ 20070129 18322 c

			NumberControl numberControl = new NumberControl();

			// MaxLengthプロパティ設定
			Int32 maxLength = numberControl.GetLength(noCodeArray);
			Int32 inputType = numberControl.GetInputType(noCodeArray);

			if (maxLength > 0) 
			{
				
				if (inputType == 0)		// 数値の場合
				{
					tEdit.ExtEdit = new TExtEdit(emCursorPosition.Prev, false, false, maxLength, new TEnableChars(false, false, false, false, false, false, true));
				}
				else					// 文字の場合
				{
					tEdit.ExtEdit = new TExtEdit(emCursorPosition.Prev, false, false, maxLength, new TEnableChars(false, false, true, false, true, true, true));
				}
			}

			// TextHAlignプロパティ設定
			Int32 posi = numberControl.GetDispPosition(noCodeArray);

			if (posi == 0)
			{
				tEdit.NormalAppearance.TextHAlign = HAlign.Right;
			}
			else
			{
				tEdit.NormalAppearance.TextHAlign = HAlign.Left;
			}

		}
		   --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 使用していないのでコメントアウト

        // ↓ 20070129 18322 c MA.NS用に変更
        #region SF 選択中システム/伝票種別取得処理（整備・鈑金・車販は使用しないので全てコメントアウト）
		///// <summary>
		///// 選択中システム/伝票種別取得処理
		///// </summary>
		///// <param name="lstDataInputSystem">システム</param>
		///// <param name="lstSlipKindCode">伝票種別</param>
		///// <remarks>
		///// <br>Note       : 選択中の受注検索用システム/伝票種別の内容を取得します。</br>
		///// <br>Programmer : 97036 amami</br>
		///// <br>Date       : 2005.07.21</br>
		///// </remarks>
		//private void GetSelectSystemSlipKind(out int[] lstDataInputSystem, out int[] lstSlipKindCode)
		//{
		//	ArrayList alDataInputSystem = new ArrayList();
		//	ArrayList alSlipKindCode = new ArrayList();
		//
        //    // 整備
		//	if (cbxDataInputSystem1.Checked)
		//	{
		//		// 見積
		//		if (cbxAcptAnOdrStartus1.Checked)
		//		{
		//			alDataInputSystem.Add(1);
		//			alSlipKindCode.Add(10);
		//		}
		//		// 指示/納品
		//		if ((cbxAcptAnOdrStartus2.Checked) || (cbxAcptAnOdrStartus3.Checked))
		//		{
		//			alDataInputSystem.Add(1);
		//			alSlipKindCode.Add(20);
		//		}
		//	}
        //    
		//	// 鈑金
		//	if (cbxDataInputSystem2.Checked)
		//	{
		//		// 見積
		//		if (cbxAcptAnOdrStartus1.Checked)
		//		{
		//			alDataInputSystem.Add(2);
		//			alSlipKindCode.Add(10);
		//		}
		//		// 指示/納品
		//		if ((cbxAcptAnOdrStartus2.Checked) || (cbxAcptAnOdrStartus3.Checked))
		//		{
		//			alDataInputSystem.Add(2);
		//			alSlipKindCode.Add(20);
		//		}
		//	}
        //    
		//	// 車販
		//	if (cbxDataInputSystem3.Checked)
		//	{
		//		// 見積
		//		if (cbxAcptAnOdrStartus1.Checked)
		//		{
		//			alDataInputSystem.Add(3);
		//			alSlipKindCode.Add(10);
		//		}
		//		// 指示/納品
		//		if ((cbxAcptAnOdrStartus2.Checked) || (cbxAcptAnOdrStartus3.Checked))
		//		{
		//			alDataInputSystem.Add(3);
		//			alSlipKindCode.Add(20);
		//		}
        //    }
		//
		//	lstDataInputSystem = alDataInputSystem.ToArray(typeof(Int32)) as Int32[];
		//	lstSlipKindCode = alSlipKindCode.ToArray(typeof(Int32)) as Int32[];
		//}
        #endregion
		
		/// <summary>
		/// オブジェクト→数値変換処理
		/// </summary>
		/// <param name="obj">元の値</param>
		/// <param name="def">変換エラー時初期値</param>
		/// <returns>変換後の値</returns>
		/// <remarks>
		/// <br>Note       : オブジェクトから数字への変換処理を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private Int64 StrToIntDef(object obj, Int64 def)
		{
            Int64 targetNum = 0;

			try
			{
                targetNum = (Int64)Convert.ToDouble(obj);
                return targetNum;
			}
			catch(Exception)
			{
				return def;
			}
		}

        /// <summary>
        /// 数値入力チェック処理
        /// </summary>
        /// <param name="keta">桁数(マイナス符号を含まず)</param>
        /// <param name="priod">小数点以下桁数</param>
        /// <param name="prevVal">現在の文字列</param>
        /// <param name="key">入力されたキー値</param>
        /// <param name="selstart">カーソル位置</param>
        /// <param name="sellength">選択文字長</param>
        /// <param name="minusFlg">マイナス入力可？</param>
        /// <returns>true=入力可,false=入力不可</returns>
        private bool KeyPressNumCheck(int keta, int priod, string prevVal, char key, int selstart, int sellength, Boolean minusFlg)
        {
            // 制御キーが押された？
            if (Char.IsControl(key))
            {
                return true;
            }
            // 数値以外は、ＮＧ
            if (!Char.IsDigit(key))
            {
                // 小数点または、マイナス以外
                if ((key != '.') && (key != '-'))
                {
                    return false;
                }
            }

            // キーが押されたと仮定した場合の文字列を生成する。
            string _strResult = "";
            if (sellength > 0)
            {
                _strResult = prevVal.Substring(0, selstart) + prevVal.Substring(selstart + sellength, prevVal.Length - (selstart + sellength));
            }
            else
            {
                _strResult = prevVal;
            }

            // マイナスのチェック
            if (key == '-')
            {
                if ((minusFlg == false) || (selstart > 0) || (_strResult.IndexOf('-') != -1))
                {
                    return false;
                }
            }

            // 小数点のチェック
            if (key == '.')
            {
                if ((priod <= 0) || (_strResult.IndexOf('.') != -1))
                {
                    return false;
                }
            }
            // キーが押された結果の文字列を生成する。
            _strResult = prevVal.Substring(0, selstart)
                + key
                + prevVal.Substring(selstart + sellength, prevVal.Length - (selstart + sellength));

            // 桁数チェック！
            if (_strResult.Length > keta)
            {
                if (_strResult[0] == '-')
                {
                    if (_strResult.Length > (keta + 1))
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }

            // 小数点以下のチェック
            if (priod > 0)
            {
                // 小数点の位置決定
                int _pointPos = _strResult.IndexOf('.');

                // 整数部に入力可能な桁数を決定！
                int _Rketa = (_strResult[0] == '-') ? keta - priod : keta - priod - 1;
                // 整数部の桁数をチェック
                if (_pointPos != -1)
                {
                    if (_pointPos > _Rketa)
                    {
                        return false;
                    }
                }
                else
                {
                    if (_strResult.Length > _Rketa)
                    {
                        return false;
                    }
                }

                // 小数部の桁数をチェック
                if (_pointPos != -1)
                {
                    // 小数部の桁数を計算
                    int _priketa = _strResult.Length - _pointPos - 1;
                    if (priod < _priketa)
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        #region 2008/06/26 DEL 使用していないのでコメントアウト
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// オブジェクト→数値変換処理
		/// </summary>
		/// <param name="obj">元の値</param>
		/// <param name="def">変換エラー時初期値</param>
		/// <returns>変換後の値</returns>
		/// <remarks>
		/// <br>Note       : オブジェクトから数字への変換処理を行います。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private Int64 ObjToIntDef(object obj, Int64 def)
		{
			try
			{
				return Convert.ToInt64(obj);
			}
			catch(Exception)
			{
				return def;
			}
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 使用していないのでコメントアウト
        
        # endregion

        # region Control Events
        /// <summary>
		/// 画面ロードイベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : ユーザーがフォームを読み込む時に発生します。</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void SFUKK01403UA_Load(object sender, EventArgs e)
		{
            // ADD START 2009/05/11 gejun forM1007A-手形データ追加
            // 手形管理オプションが成立判断
            int draftOption = (int)LoginInfoAcquisition.SoftwarePurchasedCheckForUSB(ConstantManagement_SF_PRO.SoftwareCode_OPT_CMN_DraftMng);
            if (draftOption > 0)
                this._draftOptSet = true;
            else
                this._draftOptSet = false;
            // ADD END 2009/05/11 gejun forM1007A-手形データ追加

			// 親にツールバー状態通知
			if (ParentToolbarSettingEvent != null) ParentToolbarSettingEvent(this);

            //// 選択拠点を取得
            //if (GetSelectSectionCodeEvent != null) _selectSectionCode = GetSelectSectionCodeEvent(this);

            // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
            // 売上全体設定マスタ取得
            this.depositRelDataAcs.GetSalesTtlSt(this.enterpriseCode, this._loginSectionCode);
            // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

            // ADD 2009/05/15 ------>>>
            // 請求全体設定取得
            this.depositRelDataAcs.GetBillAllSt(this.enterpriseCode, this._loginSectionCode);
            // ADD 2009/05/15 ------<<<
            
            //// 入金伝票入力画面(入金型)アクセスクラス 初期化処理
            //inputDepositNormalTypeAcs.Initialize();

            // ↓ 20070131 18322 a MA.NS用に変更
            // 画面スキンファイルの読込(デフォルトスキン指定)
            this._controlScreenSkin.LoadSkin();

            // 画面スキン変更
            this._controlScreenSkin.SettingScreenSkin(this);
            // ↑ 20070131 18322 a

			// 画面初期設定処理
			this.ScreenInitialSetting();

			// ＸＭＬデータの読込処理
			this.LoadStateXmlData();

            // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
            // 入金内訳グリッド設定処理
            this.SettingDepositKindGrid();
            // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

			// 入金情報 DataSet Table 作成処理
			inputDepositNormalTypeAcs.CreateDepositDataTable();

			// 入金グリッドデータビューバインド処理
			this.BindingDsDepositView();

			// 入金グリッド表示設定処理
			this.SettingDepositGrid();

			// 請求売上情報 DataSet Table 作成処理
			inputDepositNormalTypeAcs.CreateDmdSalesDataTable();

			// 受注引当グリッドデータビューバインド処理
			this.BindingDsDmdSalesView();

			// 受注引当グリッド表示設定処理
			this.SettingDmdSalesGrid();

			// 画面状態保持クラス画面展開処理
			this.GetDisplayStatus(ref this._displayStatus);

			// 入金グリッド表示列変更処理
			this.DetailViewSettingColumun(this.ckdDetailDepositList.Checked, this.ckdAllowanceDepositList.Checked);

			// 受注引当グリッド表示列変更処理
			this.SalesViewSettingColumn(this.ckdDetailDmdSalesList.Checked, this.ckdSeparateCost.Checked);

			// 起動中フラグ
			this.formShowFlg = true;

            // 初期フォーカス設定
            this.tNedit_CustomerCode.Focus();

            // ADD 2009/03/31 不具合対応[12908],[13098]：スペースキーでの項目選択機能を実装 ---------->>>>>
            AlwcDepositCallRadioKeyPressHelper.ControlList.Add(this.opsAlwcDepositCall);
            AlwcDmdSalesCallRadioKeyPressHelper.ControlList.Add(this.opsAlwcDmdSalesCall);
            AlwcDepositCallRadioKeyPressHelper.StartSpaceKeyControl();
            AlwcDmdSalesCallRadioKeyPressHelper.StartSpaceKeyControl();
            // ADD 2009/03/31 不具合対応[12908],[13098]：スペースキーでの項目選択機能を実装 ----------<<<<<
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 入金グリッド初期化 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : データソースからコントロールにデータがロードされるときなど、
		///                   表示レイアウトが初期化されるときに発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDepositList_InitializeLayout(object sender, InitializeLayoutEventArgs e)
		{
			// 入金グリッド初期設定処理処理
			this.InitializeDepositList();
		}
		
		/// <summary>
		/// 受注引当グリッド初期化 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : データソースからコントロールにデータがロードされるときなど、
		///                   表示レイアウトが初期化されるときに発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDmdSalesList_InitializeLayout(object sender, InitializeLayoutEventArgs e)
		{
			// 受注引当グリッド初期設定処理処理
			this.InitializeDmdSalesList();
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
        /// グリッド初期化 イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : データソースからコントロールにデータがロードされるときなど、
        ///                   表示レイアウトが初期化されるときに発生します。 </br>
        /// <br>Programmer  : 30414 忍 幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private void Grid_InitializeLayout(object sender, InitializeLayoutEventArgs e)
        {
            UltraGrid uGrid = (UltraGrid)sender;

            // 入金グリッド
            if (uGrid.Name == "grdDepositList")
            {
                // 入金グリッド初期設定処理処理
                this.InitializeGrid(this.grdDepositList);
            }
            // 受注引当グリッド
            else
            {
                // 受注引当グリッド初期設定処理処理
                this.InitializeGrid(this.grdDmdSalesList);
            }
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 入金グリッド行初期化 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : 行が初期化されるときに発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDepositList_InitializeRow(object sender, InitializeRowEventArgs e)
		{
			int depositDebitNoteCd = 0;

			// 入金データバンドの時
			if (e.Row.Band == grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDepositDataTable])
			{
				depositDebitNoteCd = (int)e.Row.Cells[InputDepositNormalTypeAcs.ctDepositDebitNoteCd].Value;
			}
				// 引当データバンドの時
			else if (e.Row.Band == grdDepositList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctRelation_DepositAllowance])
			{
				depositDebitNoteCd = (int)e.Row.ParentRow.Cells[InputDepositNormalTypeAcs.ctDepositDebitNoteCd].Value;
			}
				
			switch (depositDebitNoteCd)
			{
				case 0:
					e.Row.Appearance.ForeColor = Color.Black;
					break;
				case 1:
					e.Row.Appearance.ForeColor = Color.Red;
					break;
				case 2:
					e.Row.Appearance.ForeColor = Color.DarkOrchid;
					break;
			}
		}

		/// <summary>
		/// 受注引当グリッド行初期化 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : 行が初期化されるときに発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDmdSalesList_InitializeRow(object sender, InitializeRowEventArgs e)
		{
			int dmdSalesDebitNoteCd = 0;

			// 請求売上データバンドの時
			if (e.Row.Band == grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable])
			{
				dmdSalesDebitNoteCd = (int)e.Row.Cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Value;
			}
				
			switch (dmdSalesDebitNoteCd)
			{
				case 0:
					e.Row.Appearance.ForeColor = Color.Black;
					break;
				case 1:
					e.Row.Appearance.ForeColor = Color.Red;
					break;
				case 2:
					e.Row.Appearance.ForeColor = Color.DarkOrchid;
					break;
			}
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
        /// グリッド行初期化 イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : 行が初期化されるときに発生します。 </br>
        /// <br>Programmer  : 30414 忍 幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private void Grid_InitializeRow(object sender, InitializeRowEventArgs e)
        {
            UltraGrid uGrid = (UltraGrid)sender;

            int debitNoteCd = 0;

            // 入金グリッド
            if (uGrid.Name == "grdDepositList")
            {
                // 入金データバンドの時
                if (e.Row.Band == uGrid.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDepositDataTable])
                {
                    debitNoteCd = (int)e.Row.Cells[InputDepositNormalTypeAcs.ctDepositDebitNoteCd].Value;
                }
                // 引当データバンドの時
                else if (e.Row.Band == uGrid.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctRelation_DepositAllowance])
                {
                    debitNoteCd = (int)e.Row.ParentRow.Cells[InputDepositNormalTypeAcs.ctDepositDebitNoteCd].Value;
                }
            }
            // 受注引当グリッド
            else
            {
                // 請求売上データバンドの時
                if (e.Row.Band == uGrid.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable])
                {
                    debitNoteCd = (int)e.Row.Cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Value;
                }
            }

            switch (debitNoteCd)
            {
                case 0:
                    e.Row.Appearance.ForeColor = Color.Black;
                    break;
                case 1:
                    e.Row.Appearance.ForeColor = Color.Red;
                    break;
                case 2:
                    e.Row.Appearance.ForeColor = Color.DarkOrchid;
                    break;
            }
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 入金グリッドマウスセル移動 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : マウスがセル移動したときに発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDepositList_MouseLeaveElement(object sender, UIElementEventArgs e)
		{
			// ツールチップを非表示にする
			ultraToolTipGrid.Enabled = false;
			ultraToolTipGrid.SetUltraToolTip(grdDepositList, null);
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// 入金グリッドクリック イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : マウスがクリックしたときに発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDepositList_Click(object sender, EventArgs e)
		{
			// カーソルが行をクリックしたか取得
			Point pt = grdDepositList.PointToClient(Cursor.Position);
            if (pt == null)
            {
                return;
            }

			UIElement uielement = grdDepositList.DisplayLayout.UIElement.ElementFromPoint(new Point(pt.X, pt.Y));
            if (uielement == null)
            {
                return;
            }

			UltraGridRow oRow = (UltraGridRow)uielement.GetContext(typeof(UltraGridRow));
            if (oRow == null)
            {
                return;
            }

			if ((oRow != null) && (oRow.Index >= 0) && (oRow.Band == grdDepositList.DisplayLayout.Bands[0]))
			{
				const int maxLen = 6;
				string tipstring = "";

				// 赤黒区分
				if (Convert.ToInt32(oRow.Cells[InputDepositNormalTypeAcs.ctDepositDebitNoteCd].Value) != 0)
				{
					tipstring += grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctDepositDebitNoteNm].Value.ToString();
					tipstring += "\r\n";
				}
				// 入金番号
				tipstring += grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositSlipNo].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt32(oRow.Cells[InputDepositNormalTypeAcs.ctDepositSlipNo].Value).ToString("000000000");
                // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
                // 2007.10.10 upd start -------------------------------------->>
                // 入金日(表示用)
				//tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositDateDisp].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctDepositDateDisp].Value.ToString();
                //// 入金計上日付
                //tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].Value.ToString();
                // 2007.10.10 upd end ----------------------------------------<<
                // 入金日(表示用)
                tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctDepositAddUpADateDisp].Value.ToString();
                // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<
                // 区分
				tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositNm].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctDepositNm].Value.ToString();
				// 金種
				tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositKindName].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctDepositKindName].Value.ToString();
				// 入金額
				tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDeposit].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt64(oRow.Cells[InputDepositNormalTypeAcs.ctDeposit].Value).ToString("###,###,##0");
				// 手数料
				tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctFeeDeposit].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt64(oRow.Cells[InputDepositNormalTypeAcs.ctFeeDeposit].Value).ToString("###,###,##0");
				// 値引
				tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDiscountDeposit].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt64(oRow.Cells[InputDepositNormalTypeAcs.ctDiscountDeposit].Value).ToString("###,###,##0");
                // ↓ 20070129 18322 a MA.NS用に変更
                // インセンティブ
				//tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctRebateDeposit].Header.Caption.PadRight(maxLen + 4, '　') + "：" + Convert.ToInt64(oRow.Cells[InputDepositNormalTypeAcs.ctRebateDeposit].Value).ToString("###,###,##0");  // 2007.10.10 hikita del
                // ↑ 20070129 18322 a
				// 入金計
				tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositTotal].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt64(oRow.Cells[InputDepositNormalTypeAcs.ctDepositTotal].Value).ToString("###,###,##0");
				// 引当不可ではない時
				if (depositRelDataAcs.AllowanceProc != 2)
				{
                    // 未引当額                                                                   
                    tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt64(oRow.Cells[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit].Value).ToString("###,###,##0");
				}
				// 摘要
				tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctOutline].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctOutline].Value.ToString();
				// 締めフラグ
				if (oRow.Cells[InputDepositNormalTypeAcs.ctDepositClosedFlg].Value.ToString() != "")
				{
					tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositClosedFlg].Header.Caption.PadRight(maxLen, '　') + "：" + "締済み";
				}
				else
				{
					tipstring += "\r\n" + grdDepositList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositClosedFlg].Header.Caption.PadRight(maxLen, '　') + "：" + "未締";
				}

				UltraToolTipInfo ultraToolTipInfo = new UltraToolTipInfo();
				ultraToolTipInfo.ToolTipImage = ToolTipImage.Info;
				ultraToolTipInfo.ToolTipTitle = "入金情報";
				ultraToolTipInfo.ToolTipText = tipstring;

				ultraToolTipGrid.Appearance.FontData.Name = "ＭＳ ゴシック";
				ultraToolTipGrid.SetUltraToolTip(grdDepositList, ultraToolTipInfo);
				ultraToolTipGrid.Enabled = true;
			}
        }

        #region 2007.10.10 hikita del
        // 2007.10.10 hikita del start ----------------------------------------------------------------->>
        ///// <summary>
        ///// 検索ボタン押下イベント
        ///// </summary>
        ///// <param name="sender">対象オブジェクト</param>
        ///// <param name="e">イベントデータ</param>
        ///// <remarks>
        ///// <br>Note　　　  : 検索ボタンをクリックした時に発生します。</br>
        ///// <br>Programmer  : 97036 amami</br>
        ///// <br>Date        : 2005.07.21</br>
        ///// </remarks>
        //private void btnSearch_Click(object sender, System.EventArgs e)
        //{
        //    // 入金内容の変更状況チェック処理
        //    if (this.CheckUpdateData(true) != 0)
        //    {
        //        return;
        //    }

        //    // 検索前データチェック処理
        //    if ((edtSearchCustomerCode.GetInt() == 0) && (edtSearchDepositSlipNo.GetInt() == 0))
        //    {
        //        TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "検索条件を指定して下さい。", 0, MessageBoxButtons.OK);
        //        edtSearchCustomerCode.Focus();
        //        return;
        //    }

        //    // オール検索前データチェック処理
        //    Control control;
        //    if (this.CheackDataBeforeAllSearch(out control) == false)
        //    {
        //        if (control != null)
        //        {
        //            control.Focus();
        //        }
        //        return;
        //    }
			
        //    int customerCode = edtSearchCustomerCode.GetInt();
        //    int depositSlipNo = edtSearchDepositSlipNo.GetInt();
			
        //    // 入金一覧タブを表示する
        //    tabList.Tabs["DepositTab"].Selected = true;

        //    try
        //    {
        //        this.Cursor = Cursors.WaitCursor;

        //        // データ検索前の画面設定処理
        //        this.SearchBeforeDisplySetting(SearchMode.AllSearch);

        //        int st;
        //        string message;
        //        if (customerCode != 0)
        //        {
        //            // 検索処理(得意先コード指定)
        //            st = this.SearchCustomerMode(SearchMode.AllSearch, customerCode, depositSlipNo, out message);
        //        }
        //        else
        //        {
        //            // 検索処理(入金番号指定)
        //            st = this.SearchDepositSlipNoMode(SearchMode.AllSearch, depositSlipNo, out message);
        //        }
			
        //        // データ検索後の画面設定処理
        //        this.SearchAfterDisplySetting(SearchMode.AllSearch, st);

        //        if (st == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
        //        {
        //            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, message, 0, MessageBoxButtons.OK);
        //            edtSearchCustomerCode.Focus();
        //        }
        //        else if (st != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //        {
        //            // エラー発生
        //            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "入金伝票の読込処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
        //        }
        //        else
        //        {
        //            // ↓ 20070530 18322 c 検索を行ったときに、自動で更新状態から始まるのを修正
        //            //// 新規入金伝票入力準備処理
        //            //this.NewDepositStandby();

        //            // イベントの無効化
        //            Infragistics.Win.UltraWinGrid.GridEventManager eventManager = this.grdDepositList.EventManager;
        //            eventManager.SetEnabled(Infragistics.Win.UltraWinGrid.GridEventIds.AfterRowActivate, false);
        //            try
        //            {
        //                if (this.grdDepositList.ActiveRow != null)
        //                {
        //                    this.grdDepositList.ActiveRow.Selected = false;
        //                }
        //                else
        //                {
        //                    if (this.grdDepositList.Rows.Count > 0)
        //                    {
        //                        this.grdDepositList.Rows[0].Selected = false;
        //                    }
        //                }

        //                // 新規入金伝票入力準備処理
        //                this.NewDepositStandby();

        //                // 請求売上情報データセット再登録処理
        //                inputDepositNormalTypeAcs.ResetDsDmdSalesInfo();
        //            }
        //            finally
        //            {
        //                eventManager.SetEnabled(Infragistics.Win.UltraWinGrid.GridEventIds.AfterRowActivate, true);
        //            }
        //            // ↑ 20070530 18322 c

        //        }
        //    }
        //    finally
        //    {
        //        this.Cursor = Cursors.Default;
        //    }
        //}
        // 2007.10.10 hikita del end -----------------------------------------------------------------<<
        #endregion 2007.10.10 hikita del

        // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 入金再検索ボタン押下イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : 入金再検索ボタンをクリックした時に発生します。</br>
		/// <br>Programmer  : 30414 忍 幸史</br>
		/// <br>Date        : 2008/06/26</br>
		/// </remarks>
		private void btnSearchDeposit_Click(object sender, EventArgs e)
		{
            // 入金伝票検索前データチェック処理
            if (CheackDataBeforeDepsitSearch() == false)
            {
                // 入金一覧タブを表示する
                tabList.Tabs["DepositTab"].Selected = true;

                return;
            }

			// 入金内容の変更状況チェック処理
            if (CheckUpdateData(true, true) != 0)
            {
                return;
            }

			// 入金情報/引当情報取得用パラメータ 作成処理
            InputDepositNormalTypeAcs.SearchDepositParameter searchDepositParameter = SetDepositParameter(SearchMode.DepositSearch, tNedit_CustomerCode.GetInt(), edtSearchDepositSlipNo.GetInt());

			try
			{
				this.Cursor = Cursors.WaitCursor;

				// データ検索前の画面設定処理
				SearchBeforeDisplySetting(SearchMode.DepositSearch);

                this._grdDepositSearchFlag = false; // ADD 2009/12/16

				// TODO:入金情報/引当情報取得処理
				string message;
				int status = inputDepositNormalTypeAcs.SearchDepositOnlyMode(searchDepositParameter, out message);
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        this._grdDepositSearchFlag= true; // ADD 2009/12/16
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        {
                            // データ検索後の画面設定処理
                            SearchAfterDisplySetting((int)ConstantManagement.DB_Status.ctDB_NORMAL);

                            // 入金伝票が存在しなかった時
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                          this.Name, 
                                          message, 
                                          0, 
                                          MessageBoxButtons.OK);

                            // 新規入金伝票入力準備処理
                            NewDepositStandby();

                            // フォーカス設定
                            detDepositDateStart.Focus();
                            return;
                        }
                    default:
                        {
                            // データ検索後の画面設定処理
                            SearchAfterDisplySetting(status);

                            // エラー発生
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, 
                                          this.Name, 
                                          "入金伝票の読込処理に失敗しました。" + "\r\n\r\n" + message, 
                                          status, 
                                          MessageBoxButtons.OK);
                            return;
                        }
                }
                
                // データ検索後の画面設定処理
                SearchAfterDisplySetting(status);

                // イベントの無効化
                GridEventManager eventManager = this.grdDepositList.EventManager;
                eventManager.SetEnabled(GridEventIds.AfterRowActivate, false);
                
                try
                {
                    if (this.grdDepositList.ActiveRow != null)
                    {
                        this.grdDepositList.ActiveRow.Selected = false;
                    }
                    else
                    {
                        if (this.grdDepositList.Rows.Count > 0)
                        {
                            this.grdDepositList.Rows[0].Selected = false;
                        }
                    }

                    // 新規入金伝票入力準備処理
                    NewDepositStandby();                   
                    // 請求売上情報データセット再登録処理
                    inputDepositNormalTypeAcs.ResetDsDmdSalesInfo();

                    for (int index = 0; index < this.grdDmdSalesList.Rows.Count; index++)
                    {
                        // --- ADD 2010/12/20 ---------->>>>>
                        CellsCollection cells = this.grdDmdSalesList.Rows[index].Cells;
                        // 引当残＝0の明細場合,チェックボックスはチェック不可とする
                        if ((Int64)cells[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Value == 0
                            && (!string.IsNullOrEmpty((string)cells[InputDepositNormalTypeAcs.ctDepSaleSlipNum].Value)))
                        {
                            cells[InputDepositNormalTypeAcs.ctAlwCheck].Activation = Activation.Disabled;
                        }
                        // --- ADD 2010/12/20  ----------<<<<<
                        this.grdDmdSalesList.Rows[index].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.Disabled;
                    }

                    for (int index = 0; index < grdDepositList.Rows.Count; index++)
                    {
                        grdDepositList.DisplayLayout.Rows[index].ExpansionIndicator = ShowExpansionIndicator.CheckOnDisplay;
                    }

                    SetSalesAllowanceTotal();
                }
                finally
                {
                    eventManager.SetEnabled(GridEventIds.AfterRowActivate, true);
                }
			}		
			finally
			{
				this.Cursor = Cursors.Default;
			}
		}

		/// <summary>
		/// 受注再検索ボタン押下イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : 受注再検索ボタンをクリックした時に発生します。</br>
		/// <br>Programmer  : 30414 忍 幸史</br>
		/// <br>Date        : 2008/06/26</br>
        /// <br>Update Note : 2010/12/20 李占川 PM.NS保守依頼５次改良対応</br>
        /// <br>              引当残＝0の明細は、チェックボックスをグレーアウトし、チェック不可とする</br>
		/// </remarks>
		private void btnSearchDmdSales_Click(object sender, EventArgs e)
		{
            // 受注伝票検索前データチェック処理
            if (CheackDataBeforeDmdSalesSearch() == false)
            {
                // 受注引当一覧タブを表示する
                tabList.Tabs["DmdSalesTab"].Selected = true;
                return;
            }

			// 引当内容の変更状況チェック処理
            if (CheckUpdateData(true, false) != 0)
            {
                return;
            }

			try
			{
				this.Cursor = Cursors.WaitCursor;

				// データ検索前の画面設定処理
				SearchBeforeDisplySetting(SearchMode.DmdSalesSearch);

                this._grdDmdSalesSearchFlag = false; // ADD 2009/12/16

				// 請求売上情報取得用パラメータ 作成処理
				InputDepositNormalTypeAcs.SearchSalesParameter searchSalesParameter = SetSalesParameter(SearchMode.DmdSalesSearch, tNedit_CustomerCode.GetInt());

				// 請求売上情報取得処理
				string message;
				int status = inputDepositNormalTypeAcs.SearchSalesOnlyMode(searchSalesParameter, out message);
                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        {
                            this._grdDmdSalesSearchFlag = true; // ADD 2009/12/16

                            // 引当情報の請求売上情報展開処理
                            inputDepositNormalTypeAcs.ExpandAllowanceRelationData(selectedAllowanceCopyRows);

                            // 売上引当合計計算処理
                            SetSalesAllowanceTotal();

                            // 入金未引当額設定処理
                            SetDepositAlwcBlance();

                            // データ検索後の画面設定処理
                            SearchAfterDisplySetting(status);

                            for (int index = 0; index < this.grdDmdSalesList.Rows.Count; index++)
                            {
                                CellsCollection cells = this.grdDmdSalesList.Rows[index].Cells;

                                if (cells[InputDepositNormalTypeAcs.ctAlwCheck].Text == "True")
                                {
                                    cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.AllowEdit;
                                }
                                else
                                {
                                    cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.Disabled;
                                }

                                // --- ADD 2010/12/20 ---------->>>>>
                                // 引当残＝0の明細場合,チェックボックスはチェック不可とする
                                if ((Int64)cells[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].Value == 0
                                     && (!string.IsNullOrEmpty((string)cells[InputDepositNormalTypeAcs.ctDepSaleSlipNum].Value)))
                                {
                                    cells[InputDepositNormalTypeAcs.ctAlwCheck].Activation = Activation.Disabled;
                                }
                                // --- ADD 2010/12/20  ----------<<<<<

                                // 赤伝の場合
                                if ((cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Value != DBNull.Value) &&
                                    (Convert.ToInt32(cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Value) == 1))
                                {
                                    this.grdDmdSalesList.Rows[index].Appearance.ForeColor = Color.Red;
                                    this.grdDmdSalesList.Rows[index].Appearance.ForeColorDisabled= Color.Red;
                                    continue;
                                }

                                // 返品の場合
                                if ((cells[InputDepositNormalTypeAcs.ctSalesKind].Value != DBNull.Value) &&
                                    (Convert.ToString(cells[InputDepositNormalTypeAcs.ctSalesKind].Value) == "返品"))
                                {
                                    this.grdDmdSalesList.Rows[index].Appearance.ForeColor = Color.Red;
                                    this.grdDmdSalesList.Rows[index].Appearance.ForeColorDisabled = Color.Red;
                                    continue;
                                }
                            }

                            // 受注引当一覧の行を非アクティブとする
                            grdDmdSalesList.ActiveRow = null;

                            break;
                        }
                    case (int)ConstantManagement.DB_Status.ctDB_EOF:
                        {
                            // 売上引当合計計算処理
                            SetSalesAllowanceTotal();

                            // データ検索後の画面設定処理
                            SearchAfterDisplySetting((int)ConstantManagement.DB_Status.ctDB_NORMAL);
                            // 請求売上が存在しなかった時
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, 
                                          this.Name, 
                                          message, 
                                          0, MessageBoxButtons.OK);

                            // 受注引当一覧の行を非アクティブとする
                            grdDmdSalesList.ActiveRow = null;

                            return;
                        }
                    default:
                        {
                            // 売上引当合計計算処理
                            SetSalesAllowanceTotal();

                            // データ検索後の画面設定処理
                            SearchAfterDisplySetting(status);

                            // エラー発生
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, 
                                          this.Name, 
                                          "受注伝票の読込処理に失敗しました。" + "\r\n\r\n" + message, 
                                          status, 
                                          MessageBoxButtons.OK);

                            return;
                        }
                }

                edtDepositDate.Focus();
			}		
			finally
			{
				this.Cursor = Cursors.Default;
			}
        }
        // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
        /// 入金再検索ボタン押下イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントデータ</param>
        /// <remarks>
        /// <br>Note　　　  : 入金再検索ボタンをクリックした時に発生します。</br>
        /// <br>Programmer  : 97036 amami</br>
        /// <br>Date        : 2005.07.21</br>
        /// </remarks>
        private void btnSearchDeposit_Click(object sender, EventArgs e)
        {
			// 得意先選択チェック
			if (tNedit_CustomerCode.GetInt() == 0)
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "先に得意先の検索を行って下さい。", 0, MessageBoxButtons.OK);
				tNedit_CustomerCode.Focus();
				return;
			}

            // 入金伝票検索前データチェック処理
            Control control;
            if (this.CheackDataBeforeDepsitSearch(out control) == false)
            {
                // 入金一覧タブを表示する
                tabList.Tabs["DepositTab"].Selected = true;

                if (control != null)
                {
                    control.Focus();
                }
                return;
            }

            // 入金内容の変更状況チェック処理
            if (this.CheckUpdateData(true) != 0)
            {
                return;
            }

            // 入金情報/引当情報取得用パラメータ 作成処理
            InputDepositNormalTypeAcs.SearchDepositParameter searchDepositParameter = this.SetDepositParameter(SearchMode.DepositSearch, tNedit_CustomerCode.GetInt(), edtSearchDepositSlipNo.GetInt());

            try
            {
                this.Cursor = Cursors.WaitCursor;

                // データ検索前の画面設定処理
                this.SearchBeforeDisplySetting(SearchMode.DepositSearch);

                // 入金情報/引当情報取得処理
                string message;
                int st = inputDepositNormalTypeAcs.SearchDepositOnlyMode(searchDepositParameter, out message);

                if (st == (int)ConstantManagement.DB_Status.ctDB_EOF)
                {
                    // データ検索後の画面設定処理
                    this.SearchAfterDisplySetting(SearchMode.DepositSearch, (int)ConstantManagement.DB_Status.ctDB_NORMAL);

                    // 入金伝票が存在しなかった時
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, message, 0, MessageBoxButtons.OK);

                    // 新規入金伝票入力準備処理
                    this.NewDepositStandby();

                    detDepositDateStart.Focus();
                }
                else if (st != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // データ検索後の画面設定処理
                    this.SearchAfterDisplySetting(SearchMode.DepositSearch, st);

                    // エラー発生
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "入金伝票の読込処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
                }
                else
                {
                    // データ検索後の画面設定処理
                    this.SearchAfterDisplySetting(SearchMode.DepositSearch, st);

                    // ↓ 20070530 18322 c １行目が更新状態で表示されるのを新規入力状態になるように修正
                    //// 新規入金伝票入力準備処理
                    //this.NewDepositStandby();

                    // イベントの無効化
                    GridEventManager eventManager = this.grdDepositList.EventManager;
                    eventManager.SetEnabled(GridEventIds.AfterRowActivate, false);
                    try
                    {
                        if (this.grdDepositList.ActiveRow != null)
                        {
                            this.grdDepositList.ActiveRow.Selected = false;
                        }
                        else
                        {
                            if (this.grdDepositList.Rows.Count > 0)
                            {
                                this.grdDepositList.Rows[0].Selected = false;
                            }
                        }

                        // 新規入金伝票入力準備処理
                        this.NewDepositStandby();

                        // 請求売上情報データセット再登録処理
                        inputDepositNormalTypeAcs.ResetDsDmdSalesInfo();
                    }
                    finally
                    {
                        eventManager.SetEnabled(GridEventIds.AfterRowActivate, true);
                    }
                    // ↑ 20070530 18322 c
                }
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// 受注再検索ボタン押下イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントデータ</param>
        /// <remarks>
        /// <br>Note　　　  : 受注再検索ボタンをクリックした時に発生します。</br>
        /// <br>Programmer  : 97036 amami</br>
        /// <br>Date        : 2005.07.21</br>
        /// </remarks>
        private void btnSearchDmdSales_Click(object sender, System.EventArgs e)
        {
			// 得意先選択チェック
			if (tNedit_CustomerCode.GetInt() == 0)
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "先に得意先の検索を行って下さい。", 0, MessageBoxButtons.OK);
				tNedit_CustomerCode.Focus();
				return;
			}

            // 受注伝票検索前データチェック処理
            Control control;
            if (this.CheackDataBeforeDmdSalesSearch(out control) == false)
            {
                // 受注引当一覧タブを表示する
                tabList.Tabs["DmdSalesTab"].Selected = true;

                if (control != null)
                {
                    control.Focus();
                }
                return;
            }

            // 引当内容の変更状況チェック処理
            if (this.CheckUpdateAllowanceData(true) != 0)
            {
                return;
            }

            try
            {
                this.Cursor = Cursors.WaitCursor;

                // データ検索前の画面設定処理
                this.SearchBeforeDisplySetting(SearchMode.DmdSalesSearch);

                // 請求売上情報取得用パラメータ 作成処理
                InputDepositNormalTypeAcs.SearchSalesParameter searchSalesParameter = this.SetSalesParameter(SearchMode.DmdSalesSearch, tNedit_CustomerCode.GetInt());

                // 請求売上情報取得処理
                string message;
                int st = inputDepositNormalTypeAcs.SearchSalesOnlyMode(searchSalesParameter, out message);
                if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 引当情報の請求売上情報展開処理
                    inputDepositNormalTypeAcs.ExpandAllowanceRelationData(selectedAllowanceCopyRows);
                }

                // 売上引当合計計算処理
                this.SetSalesAllowanceTotal();

                if (st == (int)ConstantManagement.DB_Status.ctDB_EOF)
                {
                    // データ検索後の画面設定処理
                    this.SearchAfterDisplySetting(SearchMode.DmdSalesSearch, (int)ConstantManagement.DB_Status.ctDB_NORMAL);

                    // 請求売上が存在しなかった時
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, message, 0, MessageBoxButtons.OK);
                    detSearchSlipDateStart.Focus();

                    // 受注引当一覧の行を非アクティブとする
                    grdDmdSalesList.ActiveRow = null;
                }
                else if (st != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // データ検索後の画面設定処理
                    this.SearchAfterDisplySetting(SearchMode.DmdSalesSearch, st);

                    // エラー発生
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "受注伝票の読込処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
                }
                else
                {
                    // データ検索後の画面設定処理
                    this.SearchAfterDisplySetting(SearchMode.DmdSalesSearch, st);

                    // 受注引当一覧の行を非アクティブとする
                    grdDmdSalesList.ActiveRow = null;

                    grdDmdSalesList.Focus();
                }
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        #region 2007.10.10 hikita del
        // 2007.10.10 hikita del start ----------------------------------------------------------->>
        ///// <summary>
        ///// クレジット会社ガイドボタン クリックイベント
        ///// </summary>
        ///// <param name="sender">対象オブジェクト</param>
        ///// <param name="e">イベントパラメータ</param>
        ///// <remarks>
        ///// <br>Note　　　  : クレジット会社ガイドを起動します。 </br>
        ///// <br>Programmer  : 97036 amami</br>
        ///// <br>Date        : 2005.07.21</br>
        ///// </remarks>
        //private void btnCreditCompanyGuid_Click(object sender, System.EventArgs e)
        //{
        //    CreditCmp creditCmp;

        //    try
        //    {
        //        this.Cursor = Cursors.WaitCursor;

        //        // クレジット会社ガイド起動
        //        if (creditCmpAcs == null) creditCmpAcs = new CreditCmpAcs();
        //        if (creditCmpAcs.ExecuteGuid(enterpriseCode, depositRelDataAcs.DemandAddUpSecCd, out creditCmp) == 0)
        //        {
        //            edtCreditCompanyCode.Text = creditCmp.CreditCompanyCode;
        //            edtCreditCompanyName.Text = creditCmp.CreditCompanyName;
        //        }
        //    }
        //    finally
        //    {
        //        this.Cursor = Cursors.Default;
        //    }
        //}

        ///// <summary>
        ///// クレジット会社コード Enterイベント
        ///// </summary>
        ///// <param name="sender">対象オブジェクト</param>
        ///// <param name="e">イベントパラメータ</param>
        ///// <remarks>
        ///// <br>Note　　　  : クレジット会社コードにカーソルが入った時に発生します。 </br>
        ///// <br>Programmer  : 97036 amami</br>
        ///// <br>Date        : 2005.07.21</br>
        ///// </remarks>
        //private void edtCreditCompanyCode_Enter(object sender, System.EventArgs e)
        //{
        //    // Enter時の内容を保持
        //    edtCreditCompanyCode.Tag =  edtCreditCompanyCode.DataText;
        //}
        // 2007.10.10 hikita del end -----------------------------------------------------<<
        #endregion 2007.10.10 hikita del

        // 2007.10.10 hikita add start --------------------------------------------------->>
        /// <summary>
        /// 銀行ガイドボタン クリックイベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : 銀行ガイドを起動します。 </br>
        /// <br>Programmer  : 20081 疋田 勇人</br>
        /// <br>Date        : 2007.10.10</br>
        /// </remarks>
        private void btnBankGuid_Click(object sender, EventArgs e)
        {
            UserGdHd userGdHd;
            UserGdBd userGdBd;

            try
            {
                this.Cursor = Cursors.WaitCursor;

                // ユーザーガイド起動

                if (_userGuideAcs.ExecuteGuid(enterpriseCode, out userGdHd, out userGdBd, 46) == 0)
                {
                    //if (userGdBd.GuideCode != this._prevBankCode)
                    //{
                    //    this.tNedit_BankCode.SetInt(userGdBd.GuideCode);
                    //    this.teditBankName.Text = userGdBd.GuideName;

                    //    this._prevBankCode = userGdBd.GuideCode;
                    //}

                    //// フォーカス設定
                    //this.edtDraftDrawingDate.Focus();
                }
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        #region 2008/06/26 DEL 使用しないのでコメントアウト
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
        /// 銀行コード Enterイベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : 銀行コードにカーソルが入った時に発生します。 </br>
        /// <br>Programmer  : 20081 疋田 勇人</br>
        /// <br>Date        : 2007.10.10</br>
        /// </remarks>
        private void editBankCode_Enter(object sender, EventArgs e)
        {
            // Enter時の内容を保持
            tNedit_BankCode.Tag = tNedit_BankCode.DataText;
        }
        // 2007.10.10 hikita add end -----------------------------------------------------<<
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL 使用しないのでコメントアウト

        /// <summary>
        /// 入金伝票入力欄項目Exitイベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントデータ</param>
        /// <remarks>
        /// <br>Note　　　  : 入金伝票入力欄の各項目をExitした時に発生します。</br>
        /// <br>Programmer  : 97036 amami</br>
        /// <br>Date        : 2005.07.21</br>
        /// <br>UpdateNote  : 2009/12/16 李占川 ＰＭ．ＮＳ保守依頼③</br>
        /// <br>              得意先変更時等の入力済みチェックの対象を金額項目のみに変更</br>
        /// <br>UpdateNote  : 2009/12/25 李占川 redmine#2128の対応</br>
        /// </remarks>
        private void edtDeposit_Leave(object sender, EventArgs e)
		{
			// 入金伝票が選択されている時
			if (selectedDepositCopyRow != null)
			{
                if (this._searchFlg == false)
                {
                    return;
                }

				// 入金伝票入力欄変更時処理
				this.GetDisplayDeposit(sender, selectedDepositCopyRow, selectedAllowanceCopyRows);

                // --- DEL 2009/12/25 ---------->>>>>
                // --- ADD 2009/12/16 ---------->>>>>
                //if (this.labInputModeTitle.Text == "[ 新規 ]"
                //    && (sender == this.edtDepositDate || sender == this.edtOutline))
                //{
                //    inputDepositNormalTypeAcs.CopyDepositDataRow(ref selectedDepositCopyRow, ref beforeSelectedDepositRow);
                //    inputDepositNormalTypeAcs.CopyAllowanceDataRow(ref selectedAllowanceCopyRows, ref beforeSelectedAllowanceRows);
                //}
                // --- ADD 2009/12/16 ----------<<<<<
                // --- DEL 2009/12/25 ----------<<<<<
			}

            //// 銀行コードの時
            //if (sender.Equals(tNedit_BankCode))
            //{
            //    if (this.tNedit_BankCode.GetInt() == 0)
            //    {
            //        this._prevBankCode = 0;
            //        this.teditBankName.Clear();
            //        return;
            //    }

            //    // 銀行コード取得
            //    int bankCode = this.tNedit_BankCode.GetInt();

            //    if (bankCode == this._prevBankCode)
            //    {
            //        return;
            //    }

            //    this._prevBankCode = bankCode;

            //    // 銀行名称取得スレッド開始処理
            //    BankNamePrcThreadStart();
            //}

            // 2007.10.10 hikita upd start ------------------------------------------>>
            //// クレジット会社コードの時
            //if (sender.Equals(edtCreditCompanyCode))
            //{
            //    // Enter時と内容が違う時
            //    if (!edtCreditCompanyCode.Tag.Equals(edtCreditCompanyCode.DataText))
            //    {
            //        edtCreditCompanyName.DataText = "";
            //        // 未入力ではない時
            //        if (!edtCreditCompanyCode.DataText.Equals(""))
            //        {
            //            // クレジット会社名称取得スレッド開始処理
            //            CreditCompanyNamePrcThreadStart();
            //        }
            //    }
            //}
            /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
            // 銀行コードの時
            if (sender.Equals(tNedit_BankCode))
            {
                teditBankName.DataText = "";
                // 未入力ではない時
                if (tNedit_BankCode.GetInt() != 0)
                {
                    // 銀行名称取得スレッド開始処理
                    BankNamePrcThreadStart();
                }
            }
               --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
            // 2007.10.10 hikita upd end --------------------------------------------<<
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
		/// 入金伝票入力欄コントロール値変更イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : 入金伝票入力欄のコントロールの値が変更された時に発生します。</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void opsDepositDiv_ValueChanged(object sender, System.EventArgs e)
		{
			// 入金伝票入力欄表示中フラグ
			if (setDisplayDepositFlg == true)
			{
				// 預り金の時
				if (opsDepositDiv.CheckedIndex == 1)
				{
					// 一括引当ボタン
					btnAllAwl.Enabled = false;
				}
				else
				{
					// 一括引当ボタン
					btnAllAwl.Enabled = true;
				}

				return;
			}

			Infragistics.Win.UltraWinEditors.UltraOptionSet os = sender as Infragistics.Win.UltraWinEditors.UltraOptionSet;

			if (os == null) return;

			// 預り金区分
			if (os == opsDepositDiv)
			{
				// 入金伝票が選択されている時
				if (selectedDepositCopyRow != null)
				{
					// 引当先の全受注の状態チェック処理を行う
					string message = "";
					int closeCount = 0;
					int blackCount = 0;
					int redCount = 0;
					int blackredCount = 0;
					int errSt = 0;
					int st;
					foreach (System.Data.DataRow selectedAllowanceCopyRow in selectedAllowanceCopyRows)
					{
						// 引当先受注伝票のチェック処理 黒伝存在チェック
						st = inputDepositNormalTypeAcs.CheackAllowanceSalese(0, selectedAllowanceCopyRow, this.SetSalesParameter(SearchMode.AllSearch, edtSearchCustomerCode.GetInt()), out message);
						if (st == 2)
						{
							++blackCount;
						}
						else if (st != 0)
						{
							errSt = st;
						}

						// 引当先受注伝票のチェック処理 赤伝存在チェック
						st = inputDepositNormalTypeAcs.CheackAllowanceSalese(1, selectedAllowanceCopyRow, this.SetSalesParameter(SearchMode.AllSearch, edtSearchCustomerCode.GetInt()), out message);
						if (st == 2)
						{
							++redCount;
						}
						else if (st != 0)
						{
							errSt = st;
						}

						// 引当先受注伝票のチェック処理 相殺済み黒伝存在チェック
						st = inputDepositNormalTypeAcs.CheackAllowanceSalese(2, selectedAllowanceCopyRow, this.SetSalesParameter(SearchMode.AllSearch, edtSearchCustomerCode.GetInt()), out message);
						if (st == 2)
						{
							++blackredCount;
						}
						else if (st != 0)
						{
							errSt = st;
						}

						// 引当先受注伝票のチェック処理 締済み存在チェック
						st = inputDepositNormalTypeAcs.CheackAllowanceSalese(3, selectedAllowanceCopyRow, this.SetSalesParameter(SearchMode.AllSearch, edtSearchCustomerCode.GetInt()), out message);
						if (st == 2)
						{
							++closeCount;
						}
						else if (st != 0)
						{
							errSt = st;
						}
					}

					// 預り金に変更する時
					if (opsDepositDiv.CheckedIndex == 1)
					{
						if (errSt != 0)					// --- エラー発生 --- //
						{
							TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "預り金への変更チェック処理に失敗しました。" + "\r\n\r\n" + message, errSt, MessageBoxButtons.OK);

							setDisplayDepositFlg = true;
							opsDepositDiv.CheckedIndex = 0;
							setDisplayDepositFlg = false;
						}
						else if (closeCount != 0)		// --- 受注が締済みの時 --- //
						{
						
                            // ↓ 20070129 18322 c MA.NS用に変更
							//TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
							//	"既に引当を行っている受注伝票が締済みの為、変更する事は出来ません。", 0, MessageBoxButtons.OK);

                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
                                "既に引当を行っている売上伝票が締済みの為、変更する事は出来ません。", 0, MessageBoxButtons.OK);
                            // ↑ 20070129 18322 c

							setDisplayDepositFlg = true;
							opsDepositDiv.CheckedIndex = 0;
							setDisplayDepositFlg = false;
						}	
						else if (redCount != 0)			// --- 受注が赤伝の時 --- //
						{
						    // ↓ 20070129 18322 c MA.NS用に変更
							//TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
							//	"既に引当を行っている受注伝票が赤伝の為、変更する事は出来ません。", 0, MessageBoxButtons.OK);

							TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
								"既に引当を行っている売上伝票が赤伝の為、変更する事は出来ません。", 0, MessageBoxButtons.OK);
                            // ↑ 20070129 18322 c

							setDisplayDepositFlg = true;
							opsDepositDiv.CheckedIndex = 0;
							setDisplayDepositFlg = false;
						}	
						else if (blackredCount != 0)	// --- 受注が相殺済み黒の時 --- //
						{
                            // ↓ 20070129 18322 c MA.NS用に変更
							//TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
							//	"既に引当を行っている受注伝票で赤伝が発行されている為、変更する事は出来ません。", 0, MessageBoxButtons.OK);

							TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
								"既に引当を行っている売上伝票で赤伝が発行されている為、変更する事は出来ません。", 0, MessageBoxButtons.OK);
                            // ↑ 20070129 18322 c

							setDisplayDepositFlg = true;
							opsDepositDiv.CheckedIndex = 0;
							setDisplayDepositFlg = false;
						}	
						else if (blackCount > 1)		// --- 複数の黒伝受注への引当がある時 --- //
						{
							// ↓ 20070129 18322 c MA.NS用に変更
							//TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
							//	"入金伝票は既に複数の受注伝票に引当てられています。" + "\r\n\r\n" +
							//	"入金伝票(預り金)は複数の受注伝票に引当を行うことが出来ません。" + "\r\n\r\n" +
							//	"先に引当を削除して下さい。", 0, MessageBoxButtons.OK);
							
							TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
								"入金伝票は既に複数の売上伝票に引当てられています。" + "\r\n\r\n" +
								"入金伝票(預り金)は複数の売上伝票に引当を行うことが出来ません。" + "\r\n\r\n" +
								"先に引当を削除して下さい。", 0, MessageBoxButtons.OK);
                            // ↑ 20070129 18322 c

							setDisplayDepositFlg = true;
							opsDepositDiv.CheckedIndex = 0;
							setDisplayDepositFlg = false;
						}
						else							// --- 正常時 --- //
						{
							// 入金伝票入力欄変更時処理
							this.GetDisplayDeposit(sender, selectedDepositCopyRow, selectedAllowanceCopyRows);

							// 一括引当ボタン
							btnAllAwl.Enabled = false;
						}
					}
					else		// --- 通常入金に変更する時
					{
						if (errSt != 0)					// --- エラー発生 --- //
						{
							TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "預り金への変更チェック処理に失敗しました。" + "\r\n\r\n" + message, errSt, MessageBoxButtons.OK);

							setDisplayDepositFlg = true;
							opsDepositDiv.CheckedIndex = 1;
							setDisplayDepositFlg = false;
						}
						else if (closeCount != 0)		// --- 受注が締済みの時 --- //
						{
						    // ↓ 20070129 18322 c MA.NS用に変更
							//TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
							//	"既に引当を行っている受注伝票が締済みの為、変更する事は出来ません。", 0, MessageBoxButtons.OK);

							TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
								"既に引当を行っている売上伝票が締済みの為、変更する事は出来ません。", 0, MessageBoxButtons.OK);
                            // ↑ 20070129 18322 c

							setDisplayDepositFlg = true;
							opsDepositDiv.CheckedIndex = 1;
							setDisplayDepositFlg = false;
						}	
						else if (redCount != 0)			// --- 受注が赤伝の時 --- //
						{
						    // ↓ 20070129 18322 c MA.NS用に変更
							//TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
							//	"既に引当を行っている受注伝票が赤伝の為、変更する事は出来ません。", 0, MessageBoxButtons.OK);

							TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
								"既に引当を行っている売上伝票が赤伝の為、変更する事は出来ません。", 0, MessageBoxButtons.OK);
                            // ↑ 20070129 18322 c

							setDisplayDepositFlg = true;
							opsDepositDiv.CheckedIndex = 1;
							setDisplayDepositFlg = false;
						}	
						else if (blackredCount != 0)	// --- 受注が相殺済み黒の時 --- //
						{
                            // ↓ 20070129 18322 c MA.NS用に変更
							//TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
							//	"既に引当を行っている受注伝票で赤伝が発行されている為、変更する事は出来ません。", 0, MessageBoxButtons.OK);

							TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, 
								"既に引当を行っている売上伝票で赤伝が発行されている為、変更する事は出来ません。", 0, MessageBoxButtons.OK);
                            // ↑ 20070129 18322 c

							setDisplayDepositFlg = true;
							opsDepositDiv.CheckedIndex = 1;
							setDisplayDepositFlg = false;
						}	
						else							// --- 正常時 --- //
						{
							// 入金伝票入力欄変更時処理
							this.GetDisplayDeposit(sender, selectedDepositCopyRow, selectedAllowanceCopyRows);

							// 一括引当ボタン
							btnAllAwl.Enabled = false;
						}
					}
				}
			}

			// セルのアクティブ状態を再セットして、イベントを発生させる
			Infragistics.Win.UltraWinGrid.UltraGridCell cell = grdDmdSalesList.ActiveCell;
			grdDmdSalesList.ActiveCell = null;
			grdDmdSalesList.ActiveCell = cell;
		}
        
        /// <summary>
		/// 入金伝票入力欄ツリー項目チェックイベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : 入金伝票入力欄のツリーをチェックした時に発生します。</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void treMoneyKind_AfterCheck(object sender, Infragistics.Win.UltraWinTree.NodeEventArgs e)
		{
			// 入金伝票が選択されている時
			if (selectedDepositCopyRow != null)
			{
				// 入金伝票入力欄変更時処理
				this.GetDisplayDeposit(sender, selectedDepositCopyRow, selectedAllowanceCopyRows);
			}
		}

		/// <summary>
		/// 入金伝票入力欄ツリー項目クリックイベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : 入金伝票入力欄のツリーをクリックした時に発生します。</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void treMoneyKind_Click(object sender, System.EventArgs e)
		{
			// カーソルがノードをクリックしたか取得
			Point pt = treMoneyKind.PointToClient(Cursor.Position);
			Infragistics.Win.UIElement uielement = treMoneyKind.UIElement.ElementFromPoint(new Point(pt.X, pt.Y));
			Infragistics.Win.UltraWinTree.UltraTreeNode nd = uielement.GetContext(typeof(Infragistics.Win.UltraWinTree.UltraTreeNode)) as Infragistics.Win.UltraWinTree.UltraTreeNode;
			if (nd != null)
			{
				nd.CheckedState = CheckState.Checked;
			}
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        #region 2007.10.10 hikita del
        // 2007.10.10 hikita del start ------------------------------------------>>
        ///// <summary>
        ///// クレジット/ローン区分変更イベント
        ///// </summary>
        ///// <param name="sender">対象オブジェクト</param>
        ///// <param name="e">イベントデータ</param>
        ///// <remarks>
        ///// <br>Note　　　  : 内容が変更された時に発生します。</br>
        ///// <br>Programmer  : 97036 amami</br>
        ///// <br>Date        : 2005.07.21</br>
        ///// </remarks>
        //private void cmbCreditOrLoanCd_ValueChanged(object sender, System.EventArgs e)
        //{
        //    if ((Int16)cmbCreditOrLoanCd.Value == 0)
        //    {
        //        edtCreditCompanyCode.ReadOnly = true;
        //        btnCreditCompanyGuid.Enabled = false;
        //        edtCreditCompanyCode.Text = "";
        //        edtCreditCompanyName.Text = "";
        //    }
        //    else
        //    {
        //        edtCreditCompanyCode.ReadOnly = false;
        //        btnCreditCompanyGuid.Enabled = true;
        //    }
        //}
        // 2007.10.10 hikita del end --------------------------------------------<<
        #endregion 2007.10.10 hikita del

        #region 2008/06/26 DEL 使用していないのでコメントアウト
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 入力欄表示切替イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : 入力欄表示切替をした時に発生します。</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void labInputViewChange_Click(object sender, EventArgs e)
		{
            // ↓ 20070126 18322 d MA.NS用に変更
			//// 諸費用別入金パネル 表示反転
			//pnlSeparateCost.Visible = !pnlSeparateCost.Visible;
            // ↑ 20070126 18322 d
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL 使用していないのでコメントアウト

        /// <summary>
		/// 入金グリッドフォントサイズ値変更イベント
		/// </summary>
		/// <param name="sender">イベントオブジェクト</param>
		/// <param name="e">イベント情報</param>
		/// <remarks>
		/// <br>Note       : 入金グリッドフォントサイズを変更した時に発動します。</br>
		/// <br>Programer  : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void cmbDepositFontSize_ValueChanged(object sender, EventArgs e)
		{
			// 行のフォントサイズセット
            grdDepositList.DisplayLayout.Appearance.FontData.SizeInPoints = (Int32)cmbDepositFontSize.SelectedItem.DataValue;

            if ((cmbDepositFontSize.Tag is bool) && ((bool)cmbDepositFontSize.Tag == true))
            {
                // 入金グリッド列サイズ変更スレッドスタート
                Thread depositGridColumnSizeChangeThread = new Thread(new ParameterizedThreadStart(DepositGridColumnSizeChange));

                depositGridColumnSizeChangeThread.Start((object)this.ckdDepositAutoColumnSize.Checked);
            }
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 入金グリッド列オートサイズチェックボックス押下イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : 列のサイズを自動調整するチェックエディタコントロールのChecked
		///					　プロパティが変更されるときに発生します。
		///					　グリッド列のAutoResizeメソッドを実行します。</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void ckdDepositAutoColumnSize_CheckedChanged(object sender, EventArgs e)
		{
			if ((ckdDepositAutoColumnSize.Tag is bool) && ((bool)ckdDepositAutoColumnSize.Tag == true))
			{
				// 入金グリッド列サイズ変更スレッドスタート
				Thread depositGridColumnSizeChangeThread = new Thread(new ParameterizedThreadStart(DepositGridColumnSizeChange));

				depositGridColumnSizeChangeThread.Start((object)this.ckdDepositAutoColumnSize.Checked);
			}
		}
        
        /// <summary>
		/// 入金グリッド詳細表示チェックボックス押下イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : 詳細表示チェックボックスをクリックした時に発生します。</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void ckdDetailDepositList_CheckedChanged(object sender, EventArgs e)
		{
			if ((ckdDetailDepositList.Tag is bool) && ((bool)ckdDetailDepositList.Tag == true))
			{
				// 入金グリッド表示列変更処理
				this.DetailViewSettingColumun(this.ckdDetailDepositList.Checked, this.ckdAllowanceDepositList.Checked);
			}
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// 入金グリッド引当内訳表示チェックボックス押下イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : 引当内訳表示チェックボックスをクリックした時に発生します。</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void ckdAllowanceDepositList_CheckedChanged(object sender, EventArgs e)
		{
			if ((ckdAllowanceDepositList.Tag is bool) && ((bool)ckdAllowanceDepositList.Tag == true))
			{
				// 入金グリッド表示列変更処理
				this.DetailViewSettingColumun(this.ckdDetailDepositList.Checked, this.ckdAllowanceDepositList.Checked);
			}
		}

        /// <summary>
        /// グリッド列オートサイズチェックボックス押下イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントデータ</param>
        /// <remarks>
        /// <br>Note　　　  : 列のサイズを自動調整するチェックエディタコントロールのChecked
        ///					　プロパティが変更されるときに発生します。
        ///					　グリッド列のAutoResizeメソッドを実行します。</br>
        /// <br>Programmer  : 30414 忍 幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private void ckdAutoColumnSize_CheckedChanged(object sender, EventArgs e)
        {
            UltraCheckEditor uCheckEditor = (UltraCheckEditor)sender;

            if ((uCheckEditor.Tag is bool) && ((bool)uCheckEditor.Tag == true))
            {
                Thread gridColumnSizeChangeThread;

                if (uCheckEditor.Name == "ckdDepositAutoColumnSize")
                {
                    // 入金グリッド列サイズ変更スレッドスタート
                    gridColumnSizeChangeThread = new Thread(new ParameterizedThreadStart(DepositGridColumnSizeChange));
                }
                else
                {
                    // 受注引当グリッド列サイズ変更スレッドスタート
                    gridColumnSizeChangeThread = new Thread(new ParameterizedThreadStart(SalesGridColumnSizeChange));
                }

                gridColumnSizeChangeThread.Start((object)uCheckEditor.Checked);
            }
        }

        /// <summary>
        /// グリッド詳細表示チェックボックス押下イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントデータ</param>
        /// <remarks>
        /// <br>Note　　　  : 詳細表示チェックボックスをクリックした時に発生します。</br>
        /// <br>Programmer  : 30414 忍 幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private void ckdDetail_CheckedChanged(object sender, EventArgs e)
        {
            UltraCheckEditor uCheckEditor = (UltraCheckEditor)sender;

            if ((uCheckEditor.Tag is bool) && ((bool)uCheckEditor.Tag == true))
            {
                if (uCheckEditor.Name == "ckdDetailDepositList")
                {
                    // 入金グリッド表示列変更処理
                    this.DetailViewSettingColumun(uCheckEditor.Checked, this.ckdAllowanceDepositList.Checked);
                }
                else
                {
                    // 受注引当グリッド表示列変更処理
                    this.SalesViewSettingColumn(uCheckEditor.Checked, this.ckdSeparateCost.Checked);
                }
            }
        }

		/// <summary>
		/// 受注引当グリッドフォントサイズ値変更イベント
		/// </summary>
		/// <param name="sender">イベントオブジェクト</param>
		/// <param name="e">イベント情報</param>
		/// <remarks>
		/// <br>Note       : 受注引当グリッドフォントサイズを変更した時に発動します。</br>
		/// <br>Programer  : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		private void cmbSalesFontSize_ValueChanged(object sender, EventArgs e)
		{
			// フォントサイズセット
			grdDmdSalesList.DisplayLayout.Appearance.FontData.SizeInPoints = (Int32)cmbSalesFontSize.SelectedItem.DataValue;

            if ((cmbSalesFontSize.Tag is bool) && ((bool)cmbSalesFontSize.Tag == true))
            {
                // 受注引当グリッド列サイズ変更スレッドスタート
                Thread salesGridColumnSizeChangeThread = new Thread(new ParameterizedThreadStart(SalesGridColumnSizeChange));

                salesGridColumnSizeChangeThread.Start((object)this.ckdSalesAutoColumnSize.Checked);
            }
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 受注引当グリッド列オートサイズチェックボックス押下イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : 列のサイズを自動調整するチェックエディタコントロールのChecked
		///					　プロパティが変更されるときに発生します。
		///					　グリッド列のAutoResizeメソッドを実行します。</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void ckdSalesAutoColumnSize_CheckedChanged(object sender, EventArgs e)
		{
			if ((ckdSalesAutoColumnSize.Tag is bool) && ((bool)ckdSalesAutoColumnSize.Tag == true))
			{
				// 受注引当グリッド列サイズ変更スレッドスタート
				Thread salesGridColumnSizeChangeThread = new Thread(new ParameterizedThreadStart(SalesGridColumnSizeChange));

				salesGridColumnSizeChangeThread.Start((object)this.ckdSalesAutoColumnSize.Checked);
			}
		}
        
        /// <summary>
		/// 受注引当グリッド詳細表示チェックボックス押下イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : 詳細表示チェックボックスをクリックした時に発生します。</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void ckdDetailDmdSalesList_CheckedChanged(object sender, EventArgs e)
		{
			if ((ckdDetailDmdSalesList.Tag is bool) && ((bool)ckdDetailDmdSalesList.Tag == true))
			{
				// 受注引当グリッド表示列変更処理
				this.SalesViewSettingColumn(this.ckdDetailDmdSalesList.Checked, this.ckdSeparateCost.Checked);
			}
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// 受注引当グリッド諸費用別引当チェックボックス押下イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントデータ</param>
		/// <remarks>
		/// <br>Note　　　  : 諸費用別引当チェックボックスをクリックした時に発生します。</br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void ckdSeparateCost_CheckedChanged(object sender, EventArgs e)
		{
			if ((ckdSeparateCost.Tag is bool) && ((bool)ckdSeparateCost.Tag == true))
			{
				// 受注引当グリッド表示列変更処理
				this.SalesViewSettingColumn(this.ckdDetailDmdSalesList.Checked, this.ckdSeparateCost.Checked);
			}
		}

        /// <summary>
        /// グリッド行アクティブ イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : アクティブ行が変更された時に発生します。 </br>
        /// <br>Programmer  : 30414 忍 幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private void Grid_AfterRowActivate(object sender, EventArgs e)
        {
            UltraGrid uGrid = (UltraGrid)sender;

            // 入金グリッド
            if (uGrid.Name == "grdDepositList")
            {
                // 選択行が無い時は処理を抜ける
                if (uGrid.ActiveRow == null) return;

                UltraGridRow row;

                if (uGrid.ActiveRow.Band.Key == InputDepositNormalTypeAcs.ctRelation_DepositAllowance)
                {
                    row = uGrid.ActiveRow.ParentRow;
                }
                else
                {
                    row = uGrid.ActiveRow;
                }

                // 入金情報DataRow取得処理
                DataRow depositCopyRow = inputDepositNormalTypeAcs.GetSelectDepositCopyRow(row.Cells[InputDepositNormalTypeAcs.ctDepositDataRow].Value as DataRow);
                // 引当情報DataRow取得処理
                ArrayList allowanceCopyRows = inputDepositNormalTypeAcs.GetSelectAllowanceCopyRow(row.Cells[InputDepositNormalTypeAcs.ctDepositDataRow].Value as DataRow);

                //selectedDepositCopyRow = inputDepositNormalTypeAcs.GetSelectDepositCopyRow(row.Cells[InputDepositNormalTypeAcs.ctDepositDataRow].Value as DataRow);
                //selectedAllowanceCopyRows = inputDepositNormalTypeAcs.GetSelectAllowanceCopyRow(row.Cells[InputDepositNormalTypeAcs.ctDepositDataRow].Value as DataRow);

                //// DataRowコピー処理
                //inputDepositNormalTypeAcs.CopyDepositDataRow(ref depositCopyRow, ref beforeSelectedDepositRow);
                //inputDepositNormalTypeAcs.CopyAllowanceDataRow(ref allowanceCopyRows, ref beforeSelectedAllowanceRows);

                // 入金伝票状態内容表示
                uint retVal = this.IsLockDepositData(depositCopyRow);
                if ((retVal & 0x0000f000) == 0x0000f000)		// --- 赤伝入金(赤) --- //
                {
                    labDepositList.Text = "赤入金伝票の為、更新 は出来ません。";
                    return;
                }
                if ((retVal & 0x000f0000) == 0x000f0000)		// --- 赤伝入金(黒) --- //
                {
                    labDepositList.Text = "入金伝票(相殺済み黒)の為、更新 / 削除 は出来ません。";
                    return;
                }
                if ((retVal & 0x0000000f) == 0x0000000f)		// --- 締済入金 --- //
                {
                    // 引当無しモードの時
                    if (depositRelDataAcs.AllowanceProc == 2)
                    {
                        labDepositList.Text = "締済入金伝票の為、 更新 / 削除 は出来ません。";
                    }
                    else
                    {
                        labDepositList.Text = "締済入金伝票の為、 更新 / 削除 は出来ません。 (引当更新は可能です)";
                    }
                    return;
                }

                if ((retVal & 0x000000f0) == 0x000000f0)		// --- 自動入金 --- //
                {
                    labDepositList.Text = "自動入金伝票の為、更新 / 削除  は出来ません。";
                    return;
                }
                if ((retVal & 0x00000f00) == 0x00000f00)		// --- 修正不可モード --- //
                {
                    // 引当無しモードの時
                    if (depositRelDataAcs.AllowanceProc == 2)
                    {
                        labDepositList.Text = "修正不可モードの為、更新 は出来ません。";
                    }
                    else
                    {
                        labDepositList.Text = "修正不可モードの為、更新 は出来ません。 (引当更新は可能です)";
                    }
                    return;
                }
                labDepositList.Text = "";
            }
            // 受注引当グリッド
            else if (uGrid.Name == "grdDmdSalesList")
            {
                // 受注引当グリッド選択行取得処理
                selectedDmdSalesRow = grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctSalesDataRow].Value as DataRow;

                if (grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctSalesClosedFlg].Value.ToString() != "")
                {
                    // --- DEL 2009/03/19 障害ID:12623対応------------------------------------------------------>>>>>
                    //int salesSlipNum = int.Parse((string)grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctSalesSlipNum].Value);

                    //bool existFlg = false;

                    //if (this.edtDepositSlipNo.GetInt() != 0)
                    //{
                    //    foreach (int salesSlipNum_Alw in this._selectedSalesSlipNumAlwList)
                    //    {
                    //        if (salesSlipNum == salesSlipNum_Alw)
                    //        {
                    //            existFlg = true;
                    //            break;
                    //        }
                    //    }
                    //}

                    //if (!existFlg)
                    //{
                    //    selectedDmdSalesRow[InputDepositNormalTypeAcs.ctAlwCheck] = "false";
                    //    //ChangeAlwcCheck(grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctAlwCheck]);
                    //}
                    //else
                    //{
                    //    selectedDmdSalesRow[InputDepositNormalTypeAcs.ctAlwCheck] = "true";
                    //    //ChangeAlwcCheck(grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctAlwCheck]);
                    //}

                    //labDmdSalesList.Text = "売上伝票が締まっている為、引当は行えません。";
                    //return;
                    // --- DEL 2009/03/19 障害ID:12623対応------------------------------------------------------<<<<<
                }
                else
                {
                    labDmdSalesList.Text = "";
                    return;
                }
            }
        }

        /// <summary>
        /// グリッド行非アクティブ イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : アクティブ行が無くなる直前に発生します。 </br>
        /// <br>Programmer  : 30414 忍 幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private void Grid_BeforeRowDeactivate(object sender, CancelEventArgs e)
        {
            UltraGrid uGrid = (UltraGrid)sender;

            // 入金グリッド
            if (uGrid.Name == "grdDepositList")
            {
                // 入金内容の変更状況チェック処理
                // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
                //if (this.CheckUpdateData(true) != 0)
                //{
                //    e.Cancel = true;
                //    return;
                //}
                //if (this.CheckUpdateData(true, true) != 0)
                //{
                //    e.Cancel = true;
                //    return;
                //}
                //// --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<

                //// 入金伝票変更前画面初期化処理
                //this.DisplyClearToDepositChange();

                // 入金グリッド選択行消去処理
                labDepositList.Text = "";
            }
            // 受注引当グリッド
            else
            {
                // 受注伝票変更前画面初期化処理
                this.DisplyClearToDmdSalesChange();
            }
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 入金グリッド行アクティブ イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : アクティブ行が変更された時に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDepositList_AfterRowActivate(object sender, EventArgs e)
		{
			// 選択入金データ展開処理
			this.ExpandSelectDeposit();
		}

        /// <summary>
		/// 入金グリッド行アクティブ イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : アクティブ行になる直前に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDepositList_BeforeRowActivate(object sender, RowEventArgs e)
		{
            // 新規の時は変更状態チェックを行う
            if (edtDepositSlipNo.GetInt() == 0)
            {
                // 請求売上情報データセット再登録処理
                inputDepositNormalTypeAcs.ResetDsDmdSalesInfo();
            }
        }

		/// <summary>
		/// 入金グリッド行非アクティブ イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : アクティブ行が無くなる直前に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDepositList_BeforeRowDeactivate(object sender, CancelEventArgs e)
		{
			// 入金内容の変更状況チェック処理
			if (this.CheckUpdateData(true) != 0)
			{
				e.Cancel = true;
				return;
			}

			// 入金伝票変更前画面初期化処理
			this.DisplyClearToDepositChange();
		}
        
		/// <summary>
		/// 受注引当グリッド行アクティブ イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : アクティブ行が変更された時に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDmdSalesList_AfterRowActivate(object sender, EventArgs e)
		{
			// 受注引当グリッド選択行取得処理
			selectedDmdSalesRow = grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctSalesDataRow].Value as DataRow;
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// 受注引当グリッド行フィルター適用後 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : 行フィルターが適用された直後に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDmdSalesList_AfterRowFilterChanged(object sender, AfterRowFilterChangedEventArgs e)
		{
			// 売上引当合計計算処理
			this.SetSalesAllowanceTotal();
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 受注引当グリッド行非アクティブ イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : アクティブ行が無くなる直前に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDmdSalesList_BeforeRowDeactivate(object sender, CancelEventArgs e)
		{
			// 受注伝票変更前画面初期化処理
			this.DisplyClearToDmdSalesChange();
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// 受注引当グリッドボタン押下イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : ボタンが押された時に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDmdSalesList_ClickCellButton(object sender, CellEventArgs e)
		{
            // ↓ 20070125 18322 c MA.NS用に変更
            #region SF 全てコメントアウト
            //int acceptAnOrderNo = Convert.ToInt32(e.Cell.Row.Cells[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].Value);
			//string slipNo = e.Cell.Row.Cells[InputDepositNormalTypeAcs.ctSlipNo].Value.ToString();
            //
			//try
			//{
			//	this.Cursor = Cursors.WaitCursor;
            //
			//	// 入金引当表示処理(受注伝票→入金引当)
			//	if (sfukk01415UA == null) sfukk01415UA = new SFUKK01415UA();
			//	sfukk01415UA.ViewAllowanceOfAcceptOdr(depositRelDataAcs.OptSeparateCost, enterpriseCode, edtSearchCustomerCode.GetInt(), acceptAnOrderNo, slipNo);
			//}
			//finally
			//{
			//	this.Cursor = Cursors.Default;
            //}
            #endregion

			try
			{
				this.Cursor = Cursors.WaitCursor;

				// 入金引当表示処理(受注伝票→入金引当)
				if (sfukk01415UA == null) sfukk01415UA = new SFUKK01415UA();

                this._controlScreenSkin.SettingScreenSkin(sfukk01415UA);

                // 受注番号取得
                // int acceptAnOrderNo = Convert.ToInt32(e.Cell.Row.Cells[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].Value); // 2007.10.10 del
                int acptAnOdrStatus = Convert.ToInt32(e.Cell.Row.Cells[InputDepositNormalTypeAcs.ctAcptAnOdrStatus].Value);    // 2007.10.10 add

                // 売上伝票番号取得
			    string salesSlipNo = e.Cell.Row.Cells[InputDepositNormalTypeAcs.ctSalesSlipNum].Value.ToString();

                // 入金内訳表示
                // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
                //sfukk01415UA.ViewAllowanceOfAcceptOdr( depositRelDataAcs.OptSeparateCost
				sfukk01415UA.ViewAllowanceOfAcceptOdr(
                                                     enterpriseCode
                // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<
                                                     , tNedit_CustomerCode.GetInt()
                                                     , acptAnOdrStatus
                                                     , salesSlipNo
                                                     );
			}
			finally
			{
				this.Cursor = Cursors.Default;
			}
            // ↑ 20070125 18322 c
        }

        #region DEL 2008/06/26 Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 受注引当グリッドセルアクティブ イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : 引当て可/不可の状態変更を行います。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDmdSalesList_AfterCellActivate(object sender, EventArgs e)
		{
			UltraGridCell cl = grdDmdSalesList.ActiveCell;
			
			UltraGridBand bd = grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable];

			try
			{
                // ↓ 20070125 18322 c MA.NS用に変更
				//// 引当チェックボックス列の時 or 引当額 受注 (入金引当マスタ) or 引当額 諸費用 (入金引当マスタ) or 引当額 共通 (入金引当マスタ) 列の時
				//if ((cl.Column == bd.Columns[InputDepositNormalTypeAcs.ctAlwCheck]) || 
				//	(cl.Column == bd.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw]) ||
				//	(cl.Column == bd.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw]) ||
				//	(cl.Column == bd.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw]))
				//{

				// 引当チェックボックス列の時 or 引当額 受注 (入金引当マスタ) or 引当額 諸費用 (入金引当マスタ) or 引当額 共通 (入金引当マスタ) 列の時
				if ((cl.Column == bd.Columns[InputDepositNormalTypeAcs.ctAlwCheck]) || 
					(cl.Column == bd.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw]))
				{
				// ↑ 20070125 18322 c
                    // ↓ 20070525 18322 a 
                    uint retVal = this.IsLockDepositData(selectedDepositCopyRow);
                    if (((retVal & 0x00f00000) == 0x00f00000) &&
                        ((retVal & 0x0f000000) != 0x0f000000)   )
                    {
                        // 編集不可
                        //cl.Column.CellActivation = Activation.NoEdit;
						labDmdSalesList.Text = "POS売上入力で作成された入金伝票の為、変更できません。";
						return;
                    }
                    // ↑ 20070525 18322 a

                    // 修正不可入金データ判断処理 自動入金の時
					if ((this.IsLockDepositData(selectedDepositCopyRow) & 0x000000f0) == 0x000000f0)
					{
						// 編集不可
                        //cl.Column.CellActivation = Activation.NoEdit;
						labDmdSalesList.Text = "自動入金伝票の為、変更できません。";
						return;
					}
					
					// 修正不可入金データ判断処理 赤伝入金(赤)の時
					if ((this.IsLockDepositData(selectedDepositCopyRow) & 0x0000f000) == 0x0000f000)
					{
						// 編集不可
                        //cl.Column.CellActivation = Activation.NoEdit;
						labDmdSalesList.Text = "赤入金伝票の為、変更できません。";
						return;
					}
					
					// 修正不可入金データ判断処理 赤伝入金(黒)の時
					if ((this.IsLockDepositData(selectedDepositCopyRow) & 0x000f0000) == 0x000f0000)
					{
						// 編集不可
                        //cl.Column.CellActivation = Activation.NoEdit;
						labDmdSalesList.Text = "入金伝票(相殺済み黒)の為、変更できません。";
						return;
					}
					
					// 修正不可請求売上データ判断処理 請求売上(赤)の時
					if ((this.IsLockDmdSalesData(selectedDmdSalesRow) & 0x000000f0) == 0x000000f0)
					{
						// 編集不可
                        //cl.Column.CellActivation = Activation.NoEdit;

                        // ↓ 20070129 18322 c MA.NS用に変更
						//labDmdSalesList.Text = "受注伝票が赤伝の為、引当修正は行えません。";

                        labDmdSalesList.Text = "売上伝票が赤伝の為、引当修正は行えません。";
                        // ↑ 20070129 18322 c
						return;
					}

					// 修正不可請求売上データ判断処理 請求売上(相殺済み黒)の時
					if ((this.IsLockDmdSalesData(selectedDmdSalesRow) & 0x00000f00) == 0x00000f00)
					{
						// 編集不可
                        //cl.Column.CellActivation = Activation.NoEdit;
                        // ↓ 20070129 18322 c MA.NS用に変更
						//labDmdSalesList.Text = "選択受注伝票では赤伝が発行されている為、引当修正は行えません。";

						labDmdSalesList.Text = "選択売上伝票では赤伝が発行されている為、引当修正は行えません。";
                        // ↑ 20070129 18322 c
						return;
                    }

                    //  預り金入金の時
                    if (Convert.ToInt32(selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositCd]) == 1)
                    {
                        // 複数引当チェック
                        foreach (DataRow selectedAllowanceCopyRow in selectedAllowanceCopyRows)
                        {
                            // 引当先受注伝票のチェック処理 黒伝存在チェック
                            string message;
                            int st = inputDepositNormalTypeAcs.CheackAllowanceSalese(0, selectedAllowanceCopyRow, this.SetSalesParameter(SearchMode.AllSearch, tNedit_CustomerCode.GetInt()), out message);
                            if (st == 2)
                            {
                                // 黒伝存在時で現在の引当先ではない時
                                //if (Convert.ToInt32(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctAcceptAnOrderNo]) != Convert.ToInt32(selectedAllowanceCopyRow[InputDepositNormalTypeAcs.ctAcceptAnOrderNo_Alw]))  // 2007.10.10 hikita del
                                if (Convert.ToString(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctSalesSlipNum]) != Convert.ToString(selectedAllowanceCopyRow[InputDepositNormalTypeAcs.ctSalesSlipNum_Alw]))          // 2007.10.10 hikita add
                                {
                                    // 編集不可
                                    cl.Column.CellActivation = Activation.NoEdit;
                                    // ↓ 20070125 18322 c
                                    //labDmdSalesList.Text = "入金伝票(預り金)は既に他の受注伝票に引当てられている為、引当は行えません。";
                                    labDmdSalesList.Text = "入金伝票(預り金)は既に他の売上伝票に引当てられている為、引当は行えません。";
                                    // ↑ 20070125 18322 c
                                    return;
                                }
                                else
                                {
                                    break;
                                }
                            }
                            else if (st != 0)
                            {
                                // エラー発生
                                // ↓ 20070129 18322 c MA.NS用に変更
                                //TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "引当先受注伝票のチェック処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);

                                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "引当先売上伝票のチェック処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
                                // ↑ 20070129 18322 c
                                return;
                            }
                        }

                        // 修正不可請求売上データ判断処理 締済の時
                        if ((this.IsLockDmdSalesData(selectedDmdSalesRow) & 0x0000000f) == 0x0000000f)
                        {
                            // 編集不可
                            cl.Column.CellActivation = Activation.NoEdit;
                            // ↓ 20070129 18322 c MA.NS用に変更
                            //labDmdSalesList.Text = "受注伝票が締まっている為、入金伝票(預り金)の引当修正は行えません。";

                            labDmdSalesList.Text = "売上伝票が締まっている為、入金伝票(預り金)の引当修正は行えません。";
                            // ↑ 20070129 18322 c
                            return;
                        }

                        // ↓ 20070525 18322 a
                        // 修正不可請求売上データ判断処理 POS売上の売掛以外
                        if ((this.IsLockDmdSalesData(selectedDmdSalesRow) & 0x0000f000) == 0x0000f000)
                        {
                            // 編集不可
                            cl.Column.CellActivation = Activation.NoEdit;
                            labDmdSalesList.Text = "POSで入力された売掛以外の伝票の為、入金伝票の引当修正は行えません。";
                            return;
                        }
                        // ↑ 20070525 18322 a

                    }

                    // 引当チェックボックス列の時
					if (cl.Column == bd.Columns[InputDepositNormalTypeAcs.ctAlwCheck])
					{
						// 編集可能
                        //cl.Column.CellActivation = Activation.AllowEdit;
					}
						// 引当額(入金引当マスタ)列の時
					else
					{
						// 引当チェックボックスがTrueの時
						if (cl.Row.Cells[InputDepositNormalTypeAcs.ctAlwCheck].Text == "True")
						{
							// 編集可能
                            //cl.Column.CellActivation = Activation.AllowEdit;
						}
						else
						{
							// 編集不可
                            //cl.Column.CellActivation = Activation.NoEdit;
						}
					}
				}
			}
			finally
			{
				// 入力可能セルの時は編集モードにする
				grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
			}
		
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion DEL 2008/06/26 Partsman用に変更

        /// <summary>
        /// 受注引当グリッドセルアクティブ イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        private void grdDmdSalesList_AfterCellActivate(object sender, EventArgs e)
        {
            UltraGridCell cl = grdDmdSalesList.ActiveCell;
            UltraGridBand bd = grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable];

            try
            {
                // 引当チェックボックス列の時 or 引当額 受注 (入金引当マスタ) or 引当額 諸費用 (入金引当マスタ) or 引当額 共通 (入金引当マスタ) 列の時
                if ((cl.Column == bd.Columns[InputDepositNormalTypeAcs.ctAlwCheck]) ||
                    (cl.Column == bd.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw]))
                {
                    uint retVal = this.IsLockDepositData(selectedDepositCopyRow);
                    if (((retVal & 0x00f00000) == 0x00f00000) &&
                        ((retVal & 0x0f000000) != 0x0f000000))
                    {
                        // 編集不可
                        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctAlwCheck] = "false";
                        ChangeAlwcCheck(cl.Row.Cells[InputDepositNormalTypeAcs.ctAlwCheck]);
                        labDmdSalesList.Text = "POS売上入力で作成された入金伝票の為、変更できません。";
                        return;
                    }

                    // 修正不可入金データ判断処理 自動入金の時
                    if ((this.IsLockDepositData(selectedDepositCopyRow) & 0x000000f0) == 0x000000f0)
                    {
                        // 編集不可
                        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctAlwCheck] = "false";
                        ChangeAlwcCheck(cl.Row.Cells[InputDepositNormalTypeAcs.ctAlwCheck]);
                        labDmdSalesList.Text = "自動入金伝票の為、変更できません。";
                        return;
                    }

                    // 修正不可入金データ判断処理 赤伝入金(赤)の時
                    if ((this.IsLockDepositData(selectedDepositCopyRow) & 0x0000f000) == 0x0000f000)
                    {
                        // 編集不可
                        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctAlwCheck] = "false";
                        ChangeAlwcCheck(cl.Row.Cells[InputDepositNormalTypeAcs.ctAlwCheck]);
                        labDmdSalesList.Text = "赤入金伝票の為、変更できません。";
                        return;
                    }

                    // 修正不可入金データ判断処理 赤伝入金(黒)の時
                    if ((this.IsLockDepositData(selectedDepositCopyRow) & 0x000f0000) == 0x000f0000)
                    {
                        // 編集不可
                        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctAlwCheck] = "false";
                        ChangeAlwcCheck(cl.Row.Cells[InputDepositNormalTypeAcs.ctAlwCheck]);
                        labDmdSalesList.Text = "入金伝票(相殺済み黒)の為、変更できません。";
                        return;
                    }

                    // --- DEL 2009/03/19 障害ID:12623対応------------------------------------------------------>>>>>
                    //if (grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctSalesClosedFlg].Value.ToString() != "")
                    //{
                    //    int salesSlipNum = int.Parse((string)grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctSalesSlipNum].Value);

                    //    bool existFlg = false;

                    //    if (this.edtDepositSlipNo.GetInt() != 0)
                    //    {
                    //        foreach (int salesSlipNum_Alw in this._selectedSalesSlipNumAlwList)
                    //        {
                    //            if (salesSlipNum == salesSlipNum_Alw)
                    //            {
                    //                existFlg = true;
                    //                break;
                    //            }
                    //        }
                    //    }

                    //    if (!existFlg)
                    //    {
                    //        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctAlwCheck] = "false";
                    //        //ChangeAlwcCheck(cl.Row.Cells[InputDepositNormalTypeAcs.ctAlwCheck]);
                    //    }
                    //    else
                    //    {
                    //        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctAlwCheck] = "true";
                    //        //ChangeAlwcCheck(cl.Row.Cells[InputDepositNormalTypeAcs.ctAlwCheck]);
                    //    }
                    //    labDmdSalesList.Text = "売上伝票が締まっている為、引当は行えません。";
                    //    return;
                    //}
                    // --- DEL 2009/03/19 障害ID:12623対応------------------------------------------------------<<<<<

                    //// 修正不可請求売上データ判断処理 請求売上(赤)の時
                    //if ((this.IsLockDmdSalesData(selectedDmdSalesRow) & 0x000000f0) == 0x000000f0)
                    //{
                    //    // 編集不可
                    //    selectedDmdSalesRow[InputDepositNormalTypeAcs.ctAlwCheck] = "false";
                    //    ChangeAlwcCheck(cl.Row.Cells[InputDepositNormalTypeAcs.ctAlwCheck]);
                    //    labDmdSalesList.Text = "売上伝票が赤伝の為、引当修正は行えません。";
                    //    return;
                    //}

                    //// 修正不可請求売上データ判断処理 請求売上(相殺済み黒)の時
                    //if ((this.IsLockDmdSalesData(selectedDmdSalesRow) & 0x00000f00) == 0x00000f00)
                    //{
                    //    // 編集不可
                    //    selectedDmdSalesRow[InputDepositNormalTypeAcs.ctAlwCheck] = "false";
                    //    ChangeAlwcCheck(cl.Row.Cells[InputDepositNormalTypeAcs.ctAlwCheck]);
                    //    labDmdSalesList.Text = "選択売上伝票では赤伝が発行されている為、引当修正は行えません。";
                    //    return;
                    //}
                }
            }
            finally
            {
                // 入力可能セルの時は編集モードにする
                grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
            }
        }

		/// <summary>
		/// 受注引当グリッドセル非アクティブ イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDmdSalesList_BeforeCellDeactivate(object sender, CancelEventArgs e)
		{
			labDmdSalesList.Text = "";
		}

		/// <summary>
		/// 受注引当グリッドエディットモード開始 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : 編集モードになる前に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDmdSalesList_BeforeEnterEditMode(object sender, CancelEventArgs e)
		{
			// IMEモードOFF
			grdDmdSalesList.ImeMode = ImeMode.Disable;

			UltraGridBand bd = grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable];

            // ↓ 20070125 18322 c
			//// 引当額 受注 (入金引当額) or 引当額 諸費用 (入金引当額) or 引当額 共通 (入金引当額) 列の時
			//if ((grdDmdSalesList.ActiveCell.Column == bd.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw]) ||
			//	(grdDmdSalesList.ActiveCell.Column == bd.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw]) ||
			//	(grdDmdSalesList.ActiveCell.Column == bd.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw]))
			//{

			// 引当額 共通 (入金引当額) 列の時
			if (grdDmdSalesList.ActiveCell.Column == bd.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw])
			{
            // ↑ 20070125 18322 c
				// 現在(変更前)の 引当額 共通 (入金引当額) を取得する
                //grdDmdSalesList.ActiveCell.Tag = Convert.ToInt64(grdDmdSalesList.ActiveCell.Value);
			}
		}

        // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 受注引当グリッドエディットモード終了前 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : 編集モードが終わる前に発生します。 </br>
		/// <br>Programmer  : 30414 忍 幸史</br>
		/// <br>Date        : 2008/06/26</br>
		/// </remarks>
		private void grdDmdSalesList_BeforeExitEditMode(object sender, Infragistics.Win.UltraWinGrid.BeforeExitEditModeEventArgs e)
		{
            #region 旧ソース
            //UltraGridBand bd = grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable];

            //// 引当列ではない時
            //if (grdDmdSalesList.ActiveCell.Column != bd.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw])
            //{
            //    return;
            //}

            //// 引当情報DataRowの取得
            //int index = 0;
            //foreach (DataRow drChild in selectedAllowanceCopyRows)
            //{
            //    // 同一売上番号の時
            //    if (Convert.ToInt32(drChild[InputDepositNormalTypeAcs.ctSalesSlipNum_Alw]) == Convert.ToInt32(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctSalesSlipNum]))
            //    {
            //        //if ((acpOdrDepositAlwc == 0) && (varCostDepoAlwc == 0) && (depositAllowance == 0))
            //        //{
            //        //    // 引当額0円の時は削除
            //        //    drAllowance.Remove(drChild);
            //        //}
            //        //else
            //        //{
            //        //    // 入金引当額
            //        //    drChild[ctDepositAllowance] = depositAllowance;
            //        //}

            //        break;
            //    }
            //    index++;
            //}

            //// 入金未引当額取得
            //double depositAlwcBlnce;
            //if (this.labDepositAlwcBlnce.Text == "")
            //{
            //    depositAlwcBlnce = 0;
            //}
            //else
            //{
            //    depositAlwcBlnce = Convert.ToDouble(this.labDepositAlwcBlnce.Text);
            //}

            //// 売上伝票金額を取得
            //Int64 salesTotalTaxExc = StrToIntDef(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctTotalSales].ToString(), 0);

            //// 変更前引当済金額取得
            //Int64 bfDepositAllowanceSales = Convert.ToInt64(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctBfDepositAllowance_Sales]);

            //// 変更前引当残金額取得
            //Int64 bfDepositAlwcBlnceSales = Convert.ToInt64(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctBfDepositAlwcBlnce_Sales]);

            //Int64 maxValue;
            //if (bfDepositAllowanceSales == 0)
            //{
            //    // 未引当の場合
            //    maxValue = salesTotalTaxExc;
            //}
            //else
            //{
            //    // 引当済金額がある場合
            //    maxValue = bfDepositAlwcBlnceSales;
            //}

            //// 引当額を取得
            //Int64 depositAllowance = StrToIntDef(grdDmdSalesList.ActiveCell.Text, 0);

            //// 入金合計取得
            //Int64 depositTotal = this.edtDepositTotal.GetInt();

            //if (GetDepositAllowance_Alw(grdDmdSalesList.ActiveCell.Row.Index) + depositAllowance > depositTotal)
            //{
            //    Int64 temp = depositTotal - GetDepositAllowance_Alw(grdDmdSalesList.ActiveCell.Row.Index);

            //    if (maxValue >= 0)
            //    {
            //        if (temp > maxValue)
            //        {
            //            // 引当額
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Alw] = maxValue;
            //            if ((selectedAllowanceCopyRows != null) && (selectedAllowanceCopyRows.Count != 0))
            //            {
            //                ((DataRow)selectedAllowanceCopyRows[index])[InputDepositNormalTypeAcs.ctDepositAllowance] = maxValue;
            //            }
            //            this.grdDmdSalesList.ActiveCell.Value = maxValue;

            //            // 引当残
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = 0;

            //            // 引当済
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = maxValue + bfDepositAllowanceSales;
            //        }
            //        else
            //        {
            //            // 引当額
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Alw] = temp;
            //            if ((selectedAllowanceCopyRows != null) && (selectedAllowanceCopyRows.Count != 0))
            //            {
            //                ((DataRow)selectedAllowanceCopyRows[index])[InputDepositNormalTypeAcs.ctDepositAllowance] = temp;
            //            }
            //            this.grdDmdSalesList.ActiveCell.Value = temp;

            //            // 引当残
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotalTaxExc - temp - bfDepositAllowanceSales;

            //            // 引当済
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = temp + bfDepositAllowanceSales;
            //        }
            //    }
            //    else
            //    {
            //        // 引当額
            //        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Alw] = temp;
            //        if ((selectedAllowanceCopyRows != null) && (selectedAllowanceCopyRows.Count != 0))
            //        {
            //            ((DataRow)selectedAllowanceCopyRows[index])[InputDepositNormalTypeAcs.ctDepositAllowance] = temp;
            //        }
            //        this.grdDmdSalesList.ActiveCell.Value = temp;

            //        // 引当残
            //        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotalTaxExc - temp - bfDepositAllowanceSales;

            //        // 引当済
            //        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = temp + bfDepositAllowanceSales;
            //    }
            //}
            //else
            //{
            //    if (maxValue >= 0)
            //    {
            //        if (depositAllowance > maxValue)
            //        {
            //            // 引当額
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Alw] = maxValue;
            //            if ((selectedAllowanceCopyRows != null) && (selectedAllowanceCopyRows.Count != 0))
            //            {
            //                ((DataRow)selectedAllowanceCopyRows[index])[InputDepositNormalTypeAcs.ctDepositAllowance] = maxValue;
            //            }
            //            this.grdDmdSalesList.ActiveCell.Value = maxValue;

            //            // 引当残
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = 0;

            //            // 引当済
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = maxValue + bfDepositAllowanceSales;
            //        }
            //        else
            //        {
            //            // 引当額
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Alw] = depositAllowance;
            //            if ((selectedAllowanceCopyRows != null) && (selectedAllowanceCopyRows.Count != 0))
            //            {
            //                ((DataRow)selectedAllowanceCopyRows[index])[InputDepositNormalTypeAcs.ctDepositAllowance] = depositAllowance;
            //            }
            //            this.grdDmdSalesList.ActiveCell.Value = depositAllowance;

            //            // 引当残
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotalTaxExc - depositAllowance - bfDepositAllowanceSales;

            //            // 引当済
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = depositAllowance + bfDepositAllowanceSales;
            //        }
            //    }
            //    else
            //    {
            //        // 引当額
            //        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Alw] = depositAllowance;
            //        if ((selectedAllowanceCopyRows != null) && (selectedAllowanceCopyRows.Count != 0))
            //        {
            //            ((DataRow)selectedAllowanceCopyRows[index])[InputDepositNormalTypeAcs.ctDepositAllowance] = depositAllowance;
            //        }
            //        this.grdDmdSalesList.ActiveCell.Value = depositAllowance;

            //        // 引当残
            //        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotalTaxExc - depositAllowance - bfDepositAllowanceSales;

            //        // 引当済
            //        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = depositAllowance + bfDepositAllowanceSales;
            //    }
            //}

            //grdDmdSalesList.ActiveRow.Refresh();

            //// 入金未引当額設定
            //SetDepositAlwcBlance();

            //// 売上引当合計計算処理
            //this.SetSalesAllowanceTotal();
            #endregion 旧ソース

            UltraGridBand bd = grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable];

            // 引当列ではない時
            if (grdDmdSalesList.ActiveCell.Column != bd.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw])
            {
                return;
            }

            // --- DEL 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 既存障害④ ----------------------------------------->>>>>
            #region 削除
            //// 変更前引当済金額を取得
            //Int64 bfDepositAllowanceSales = StrToIntDef(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctBfDepositAllowance_Sales].ToString(), 0);

            //// 変更前引当残金額を取得
            //Int64 bfDepositAlwBlnce = StrToIntDef(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctBfDepositAlwcBlnce_Sales].ToString(), 0);

            //// 売上伝票金額を取得
            //Int64 salesTotalTaxExc = StrToIntDef(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctTotalSales].ToString(), 0);

            //// 引当額を取得
            //Int64 depositAllowance = StrToIntDef(grdDmdSalesList.ActiveCell.Text, 0);

            //Int64 maxValue;
            //if (bfDepositAllowanceSales == 0)
            //{
            //    // 未引当の場合
            //    maxValue = salesTotalTaxExc;
            //}
            //else
            //{
            //    // 引当済金額がある場合
            //    maxValue = bfDepositAlwBlnce;
            //}

            ////-----------------------
            //// 売上伝票金額がプラス
            ////-----------------------
            //if (salesTotalTaxExc >= 0)
            //{
            //    //-----------------------
            //    // 引当額がプラス
            //    //-----------------------
            //    if (depositAllowance >= 0)
            //    {
            //        //-----------------------
            //        // 引当額 > 伝票金額
            //        //-----------------------
            //        if (depositAllowance > maxValue)
            //        {
            //            // 引当額
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Alw] = maxValue;
            //            grdDmdSalesList.ActiveCell.Value = salesTotalTaxExc;

            //            // 引当残
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = 0;

            //            // 引当済
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = maxValue + bfDepositAllowanceSales;
            //        }
            //        else
            //        {
            //            // 引当残
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotalTaxExc - depositAllowance - bfDepositAllowanceSales;

            //            // 引当済
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = depositAllowance + bfDepositAllowanceSales;
            //        }
            //    }
            //    //-----------------------
            //    // 引当額がマイナス
            //    //-----------------------
            //    else
            //    {
            //        // 引当残
            //        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotalTaxExc - depositAllowance - bfDepositAllowanceSales;

            //        // 引当済
            //        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = depositAllowance + bfDepositAllowanceSales;
            //    }
            //}
            ////-----------------------
            //// 売上伝票金額がマイナス
            ////-----------------------
            //else
            //{
            //    //-----------------------
            //    // 引当額がプラス
            //    //-----------------------
            //    if (depositAllowance >= 0)
            //    {
            //        // 引当残
            //        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotalTaxExc - depositAllowance - bfDepositAllowanceSales;

            //        // 引当済
            //        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = depositAllowance + bfDepositAllowanceSales;
            //    }
            //    //-----------------------
            //    // 引当額がマイナス
            //    //-----------------------
            //    else
            //    {
            //        //-----------------------
            //        // 引当額 > 伝票金額
            //        //-----------------------
            //        if (depositAllowance < salesTotalTaxExc)
            //        {
            //            // 引当額
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Alw] = maxValue;
            //            grdDmdSalesList.ActiveCell.Value = salesTotalTaxExc;

            //            // 引当残
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = 0;

            //            // 引当済
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = maxValue + bfDepositAllowanceSales;
            //        }
            //        else
            //        {
            //            // 引当残
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotalTaxExc - depositAllowance - bfDepositAllowanceSales;

            //            // 引当済
            //            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = depositAllowance + bfDepositAllowanceSales;
            //        }
            //    }
            //}
            #endregion 削除
            // --- DEL 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 既存障害④ -----------------------------------------<<<<<

            // --- ADD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 既存障害④ ----------------------------------------->>>>>

            // 売上伝票金額を取得
            Int64 salesTotalTaxExc = StrToIntDef(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctTotalSales].ToString(), 0);

            // 引当額を取得
            Int64 depositAllowance = StrToIntDef(grdDmdSalesList.ActiveCell.Text, 0);

            // ADD BY zhujw 2014/07/09 FOR RedMine#42902の⑬ 「-」のみで他の項目に移動しようとすると以下のエラーが発生する。 ---->>>>>
            Int64 num = 0;
            if (!Int64.TryParse(grdDmdSalesList.ActiveCell.Text, out num)) grdDmdSalesList.ActiveCell.Value = 0;
            // ADD BY zhujw 2014/07/09 FOR RedMine#42902の⑬ 「-」のみで他の項目に移動しようとすると以下のエラーが発生する。 ----<<<<<

            //画面変更前引当額
            Int64 DepositAllowance_Alw = StrToIntDef(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].ToString(), 0);

            //画面変更前引当残
            Int64 DepositAlwcBlnce_Sales = StrToIntDef(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales].ToString(), 0);

            Int64 maxValue = DepositAllowance_Alw + DepositAlwcBlnce_Sales;

            Int64 fugo = 1;
            if (maxValue < 0) fugo = -1;

            if (((maxValue - depositAllowance) * fugo) < 0)
                    {
                        // 引当額
                depositAllowance = maxValue;
                        selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Alw] = maxValue;
                grdDmdSalesList.ActiveCell.Value = maxValue;
                    }
                        // 引当残
            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = maxValue - depositAllowance;

                        // 引当済
            selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = salesTotalTaxExc - (maxValue - depositAllowance);
            // --- ADD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 既存障害④ -----------------------------------------<<<<<
        }

        private Int64 GetDepositAllowance_Alw(int rowIndex)
        {
            Int64 depositAllowance_Alw = 0;

            for (int index = 0; index < this.grdDmdSalesList.Rows.Count; index++)
            {
                if (index == rowIndex)
                {
                    continue;
                }

                if (this.grdDmdSalesList.Rows[index].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Value == DBNull.Value)
                {
                    continue;
                }

                depositAllowance_Alw += (Int64)this.grdDmdSalesList.Rows[index].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Value;
            }

            return depositAllowance_Alw;
        }
        // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

        #region DEL 2008/06/26 Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
        /// 受注引当グリッドエディットモード終了前 イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : 編集モードが終わる前に発生します。 </br>
        /// <br>Programmer  : 97036 amami</br>
        /// <br>Date        : 2005.07.21</br>
        /// </remarks>
        private void grdDmdSalesList_BeforeExitEditMode(object sender, Infragistics.Win.UltraWinGrid.BeforeExitEditModeEventArgs e)
        {
            UltraGridBand bd = grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable];

            // 現在列の 変更前の引当額を取得する
            Int64 allowance_Bef = this.StrToIntDef(grdDmdSalesList.ActiveCell.Tag, 0);

            // ↓ 20070125 18322 c MA.NS用に変更
            #region SF 引当額 受注・諸費用は使用しないため削除
            //// 引当額 受注 (入金引当マスタ) 列の時
            //if (grdDmdSalesList.ActiveCell.Column == bd.Columns[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw])
            //{
            //	// 変更後の 引当額 受注 (入金引当マスタ) を取得する
            //	Int64 acpOdrDepositAlwc_Aft = this.StrToIntDef(grdDmdSalesList.ActiveCell.Text, 0);
            //
            //	// 不正な数値が入力された場合はセルに再セットする
            //	if (acpOdrDepositAlwc_Aft == 0)
            //		grdDmdSalesList.ActiveCell.Value = 0;
            //
            //	// 変更差額を取得する
            //	Int64 difference = acpOdrDepositAlwc_Aft - allowance_Bef;
            //
            //	// 金額が変更された時には再計算を行う
            //	if (difference != 0)
            //	{
            //		// 入金引当情報 受注 変更処理
            //		inputDepositNormalTypeAcs.UpdateAcpOdrDepositAlwc(difference, ref selectedDmdSalesRow, ref selectedDepositCopyRow, false, true, true);
            //
            //		// 入金引当情報 共通 変更処理
            //		Int64 alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(difference, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
            //
            //		// 変更後の 引当額 諸費用 (入金引当マスタ) を取得する
            //		Int64 varCostDepoAlwc_Aft = this.StrToIntDef(grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].Value, 0);
            //
            //		// 変更後の 引当額 共通 (入金引当マスタ) を取得する
            //		Int64 depositAllowance_Aft = this.StrToIntDef(grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Value, 0);
            //
            //		// 引当情報変更処理
            //		inputDepositNormalTypeAcs.UpdateAllowance(acpOdrDepositAlwc_Aft, varCostDepoAlwc_Aft, depositAllowance_Aft, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);
            //
            //		// 引当後の入金引当残を更新する
            //		labDepositAlwcBlnce.Text = alwcBlnce.ToString("###,###,##0");
            //	}
            //
            //	grdDmdSalesList.ActiveRow.Refresh();
            //}
            //
            //	// 引当額 諸費用 (入金引当マスタ) 列の時
            //else if (grdDmdSalesList.ActiveCell.Column == bd.Columns[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw])
            //{
            //	// 変更後の 引当額 諸費用 (入金引当マスタ) を取得する
            //	Int64 varCostDepoAlwc_Aft = this.StrToIntDef(grdDmdSalesList.ActiveCell.Text, 0);
            //
            //	// 不正な数値が入力された場合はセルに再セットする
            //	if (varCostDepoAlwc_Aft == 0)
            //		grdDmdSalesList.ActiveCell.Value = 0;
            //
            //	// 変更差額を取得する
            //	Int64 difference = varCostDepoAlwc_Aft - allowance_Bef;
            //
            //	// 金額が変更された時には再計算を行う
            //	if (difference != 0)
            //	{
            //		// 入金引当情報 諸費用 変更処理
            //		inputDepositNormalTypeAcs.UpdateCostDepositAlwc(difference, ref selectedDmdSalesRow, ref selectedDepositCopyRow, false, true, true);
            //		
            //		// 入金引当情報 共通 変更処理
            //		Int64 alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(difference, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
            //
            //		// 変更後の 引当額 受注 (入金引当マスタ) を取得する
            //		Int64 acpOdrDepositAlwc_Aft = this.StrToIntDef(grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].Value, 0);
            //
            //		// 変更後の 引当額 共通 (入金引当マスタ) を取得する
            //		Int64 depositAllowance_Aft = this.StrToIntDef(grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Value, 0);
            //
            //		// 引当情報変更処理
            //		inputDepositNormalTypeAcs.UpdateAllowance(acpOdrDepositAlwc_Aft, varCostDepoAlwc_Aft, depositAllowance_Aft, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);
            //
            //		// 引当後の入金引当残を更新する
            //		labDepositAlwcBlnce.Text = alwcBlnce.ToString("###,###,##0");
            //	}
            //
            //	grdDmdSalesList.ActiveRow.Refresh();
            //}
            //	// 引当額 共通 (入金引当マスタ) 列の時
            //else if (grdDmdSalesList.ActiveCell.Column == bd.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw])
            //{
            #endregion

            // 引当額 共通 (入金引当マスタ) 列の時
            if (grdDmdSalesList.ActiveCell.Column == bd.Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Alw])
            {
                // ↑ 20070125 18322 c
                // 変更後の 引当額 共通 (入金引当マスタ) を取得する
                Int64 depositAllowance_Aft = this.StrToIntDef(grdDmdSalesList.ActiveCell.Text, 0);

                // 不正な数値が入力された場合はセルに再セットする
                if (depositAllowance_Aft == 0)
                    grdDmdSalesList.ActiveCell.Value = 0;

                // 変更差額を取得する
                //Int64 difference = depositAllowance_Aft - allowance_Bef;
                Int64 difference = depositAllowance_Aft;

                // 金額が変更された時には再計算を行う
                if (difference != 0)
                {
                    // 入金引当情報 共通 変更処理
                    //Int64 alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(difference, ref selectedDmdSalesRow, ref selectedDepositCopyRow, false, true, true);
                    Int64 alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(difference, ref selectedDmdSalesRow, ref selectedDepositCopyRow, false, true, false);

                    // 引当後の入金引当残を更新する
                    labDepositAlwcBlnce.Text = alwcBlnce.ToString("###,###,##0");

                    // ↓ 20070125 18322 c MA.NS用に変更
                    #region SF 諸費用別入金オプションは使用しないので削除
                    //// 諸費用別入金オプション判定
                    //if (depositRelDataAcs.OptSeparateCost == true)
                    //{
                    //	if (difference >= 0)		// --- 差額が＋の時は 諸費用先引き --- //
                    //	{							// ※諸費用を引き、余り額は受注より全て引く
                    //		// 入金引当情報 諸費用 変更処理
                    //		difference = inputDepositNormalTypeAcs.ZeroUpdateCostDepositAlwc(difference, ref selectedDmdSalesRow, ref selectedDepositCopyRow);
                    //
                    //		// 入金引当情報 受注 変更処理
                    //		inputDepositNormalTypeAcs.UpdateAcpOdrDepositAlwc(difference, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
                    //	} 
                    //	else						// --- 差額が－の時は 受注先引き --- //
                    //	{							// ※受注→諸費用と引き、余り額は受注より全て引く
                    //		// 入金引当情報 受注 変更処理
                    //		difference = inputDepositNormalTypeAcs.ZeroUpdateAcpOdrDepositAlwc(difference,  ref selectedDmdSalesRow, ref selectedDepositCopyRow);
                    //
                    //		// 入金引当情報 諸費用 変更処理
                    //		difference = inputDepositNormalTypeAcs.ZeroUpdateCostDepositAlwc(difference,  ref selectedDmdSalesRow, ref selectedDepositCopyRow);
                    //
                    //		// 入金引当情報 受注 変更処理
                    //		inputDepositNormalTypeAcs.UpdateAcpOdrDepositAlwc(difference, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
                    //	}
                    //
                    //	// 変更後の 引当額 受注 (入金引当マスタ) を取得する
                    //	Int64 acpOdrDepositAlwc_Aft = this.StrToIntDef(grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].Value, 0);
                    //
                    //	// 変更後の 引当額 諸費用 (入金引当マスタ) を取得する
                    //	Int64 varCostDepoAlwc_Aft = this.StrToIntDef(grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctVarCostDepoAlwc_Alw].Value, 0);
                    //
                    //	// 引当情報変更処理
                    //	inputDepositNormalTypeAcs.UpdateAllowance(acpOdrDepositAlwc_Aft, varCostDepoAlwc_Aft, depositAllowance_Aft, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);
                    //}
                    //else
                    //{
                    //	// 入金引当情報 受注 変更処理
                    //	inputDepositNormalTypeAcs.UpdateAcpOdrDepositAlwc(difference, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
                    //
                    //	// 引当情報変更処理
                    //	inputDepositNormalTypeAcs.UpdateAllowance(depositAllowance_Aft, 0, depositAllowance_Aft, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);
                    //}
                    #endregion

                    // 引当情報変更処理
                    inputDepositNormalTypeAcs.UpdateAllowance(depositAllowance_Aft, 0, depositAllowance_Aft, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);
                    // ↑ 20070125 18322 c
                }

                grdDmdSalesList.ActiveRow.Refresh();
            }
        }
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion DEL 2008/06/26 Partsman用に変更

        /// <summary>
        /// 受注引当グリッドエディットモード終了後 イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : 編集モードが終わった後に発生します。 </br>
        /// <br>Programmer  : 97036 amami</br>
        /// <br>Date        : 2005.07.21</br>
        /// </remarks>
        private void grdDmdSalesList_AfterExitEditMode(object sender, EventArgs e)
		{
			// 売上引当合計計算処理
			this.SetSalesAllowanceTotal();

            // --- ADD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 既存障害② ----------------------------------------->>>>>
            // 売上引当グリッドがアクティブでない場合、処理を中断する
            if (this.grdDmdSalesList.ActiveCell == null) return;
            // --- ADD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 既存障害② -----------------------------------------<<<<<

            int rowIndex = this.grdDmdSalesList.ActiveCell.Row.Index;

            // 引当額取得
            long depositAlwTotal = StrToIntDef(this.grdDmdSalesList.Rows[rowIndex].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Text, 0);

            if (selectedDepositCopyRow != null)
            {
                if (this.grdDmdSalesList.Rows[rowIndex].Cells[InputDepositNormalTypeAcs.ctAlwCheck].Text == "True")
                {
                    // 引当情報変更処理
                    inputDepositNormalTypeAcs.UpdateAllowance(depositAlwTotal, 0, depositAlwTotal, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);
                }
            }
		}

        // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
        /// 受注引当グリッドセル値変更 イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : キーが押された時に発生します。 </br>
        /// <br>Programmer  : 30414 忍 幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private void grdDmdSalesList_CellChange(object sender, CellEventArgs e)
        {
            // 引当チェックボックス列の時
            if (e.Cell.Column == grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable].Columns[InputDepositNormalTypeAcs.ctAlwCheck])
            {
                ChangeAlwcCheck(e.Cell);
            }

            //// 売上引当合計計算処理
            //this.SetSalesAllowanceTotal();
        }

        /// <summary>
        /// 引当チェック変更処理
        /// </summary>
        /// <param name="cell">対象セル</param>
        /// <remarks>
        /// <br>Note　　　  : 引当額の再計算を行います。 </br>
        /// <br>Programmer  : 30414 忍 幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// <br>Update Note : 2011/02/11 李占川 Redmine#18904の修正
        /// </remarks>
        private void ChangeAlwcCheck(UltraGridCell cell)
        {
            // チェックONの時
            if (cell.Text == "True")
            {
                // 伝票合計取得
                Int64 salesTotal = Convert.ToInt64(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctTotalSales]);

                // 引当済金額取得
                Int64 depositAllowanceSales = Convert.ToInt64(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales]);

                // 引当残金額取得
                Int64 depositAlwcBlnceSales = Convert.ToInt64(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales]);

                // 入金未引当額取得
                double depositAlwcBlnce;
                if (this.labDepositAlwcBlnce.Text == "")
                {
                    depositAlwcBlnce = 0;
                }
                else
                {
                    depositAlwcBlnce = Convert.ToDouble(this.labDepositAlwcBlnce.Text);
                }

                Int64 depositAllowance_Alw; // 引当額

                if (depositAllowanceSales == 0)
                {
                    // 未引当の場合
                    //if ((long)depositAlwcBlnce < salesTotal)
                    //{
                    //    depositAllowance_Alw = (long)depositAlwcBlnce;
                    //}
                    //else
                    //{
                    //    depositAllowance_Alw = salesTotal;
                    //}
                    depositAllowance_Alw = salesTotal;

                    // 引当残
                    selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotal - depositAllowance_Alw;

                    // 引当済
                    selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = depositAllowance_Alw;
                }
                else
                {
                    // 引当済の場合
                    //if ((long)depositAlwcBlnce < depositAlwcBlnceSales)
                    //{
                    //    depositAllowance_Alw = (long)depositAlwcBlnce;
                    //}
                    //else
                    //{
                    //    depositAllowance_Alw = depositAlwcBlnceSales;
                    //}
                    // DEL 2010/05/17 MANTIS対応[15195]：売上引当にて、売上の赤伝データの引当額が不正 ---------->>>>>
                    // depositAllowance_Alw = depositAlwcBlnceSales;   // 引当残
                    // DEL 2010/05/17 MANTIS対応[15195]：売上引当にて、売上の赤伝データの引当額が不正 ----------<<<<<
                    // ADD 2010/05/17 MANTIS対応[15195]：売上引当にて、売上の赤伝データの引当額が不正 ---------->>>>>
                    // --- UPD 2011/02/11 ---------->>>>>
                    //depositAllowance_Alw = depositAllowanceSales;   // 引当済
                    depositAllowance_Alw = depositAlwcBlnceSales;   // 引当残
                    // --- UPD 2011/02/11  ----------<<<<<
                    // ADD 2010/05/17 MANTIS対応[15195]：売上引当にて、売上の赤伝データの引当額が不正 ----------<<<<<

                    // 引当残
                    selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotal - depositAllowance_Alw - depositAllowanceSales;

                    // 引当済
                    selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = depositAllowance_Alw + depositAllowanceSales;
                }

                // 引当額
                selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Alw] = depositAllowance_Alw;

                // 引当情報変更処理
                inputDepositNormalTypeAcs.UpdateAllowance(depositAllowance_Alw, 0, depositAllowance_Alw, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);

                this.grdDmdSalesList.Rows[cell.Row.Index].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.AllowEdit;
                this.grdDmdSalesList.Rows[cell.Row.Index].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activate();
                this.grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
            }
            // チェックOFFの時
            else
            {
                // 変更前引当残取得
                Int64 bfDepositAlwBlnce_Sales = Convert.ToInt64(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctBfDepositAlwcBlnce_Sales]);

                // 変更前引当済取得
                Int64 bfDepositAllowance_Sales = Convert.ToInt64(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctBfDepositAllowance_Sales]);

                // 引当額設定
                selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Alw] = 0;

                // 引当残設定(伝票合計－引当額)
                selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = bfDepositAlwBlnce_Sales;

                // 引当済設定
                selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = bfDepositAllowance_Sales;

                // 引当情報変更処理
                inputDepositNormalTypeAcs.UpdateAllowance(0, 0, 0, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);

                this.grdDmdSalesList.Rows[cell.Row.Index].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.Disabled;
            }

            // 引当額 共通 (入金引当マスタ) 列が表示されている時
            if (cell.Row.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Column.Hidden == false)
            {
                // 引当額 共通 (入金引当マスタ) 列をアクティブにする
                cell.Row.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activate();
            }

            // 入金未引当額設定
            SetDepositAlwcBlance();

            // 売上引当合計計算処理
            this.SetSalesAllowanceTotal();
        }

        /// <summary>
        /// 一括引当ボタン押下 イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : 一括引当ボタンが押された時に発生します。 </br>
        /// <br>Programmer  : 30414 忍 幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private void btnAllAwl_Click(object sender, EventArgs e)
        {
            // --- DEL 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 既存障害① ----------------------------------------->>>>>
            #region 削除
            //// 入金未引当額が0の場合は処理を行わない
            //if (labDepositAlwcBlnce.Text.Equals("") || labDepositAlwcBlnce.Text.Equals("0"))
            //{
            //    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name,
            //        "入金未引当額が0円の為、引当を行えません。" + "\r\n\r\n" + "入金金額を入力するか、他の入金伝票を選択してください。", 0, MessageBoxButtons.OK);
            //    return;
            //}
            #endregion 削除
            // --- DEL 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 既存障害① -----------------------------------------<<<<<
            // --- ADD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 既存障害① ----------------------------------------->>>>>
            #region 追加
            // 入金未引当額が0の場合は処理を行わない
            if (labDepositAlwcBlnce.Text.Equals(""))
                labDepositAlwcBlnce.Text = "0";

            if (0 <= double.Parse(labDepositAlwcBlnce.Text))
            {
                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name,
                    "入金額が不足している為、引当を行えません。" + "\r\n\r\n" + "入金金額を入力するか、他の入金伝票を選択してください。", 0, MessageBoxButtons.OK);
                return;
            }
            #endregion 追加
            // --- ADD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 既存障害① -----------------------------------------<<<<<

            // 受注引当一覧が１件も無い時
            if (grdDmdSalesList.Rows.Count == 0) return;

            Int64 depositAllowance;

            // ADD 2009/06/24 ------>>>
            // 伝票合計がマイナスの伝票から引当を行う
            for (int loop = 0; loop < 2; loop++)
            {
            // ADD 2009/06/24 ------<<<
                // 受注引当一覧を先頭行からループ
                for (int ix = 0; ix < inputDepositNormalTypeAcs.GetDsDmdSalesInfo().Tables[InputDepositNormalTypeAcs.ctDmdSalesDataTable].Rows.Count; ix++)
                {
                    DataRow dr = inputDepositNormalTypeAcs.GetDsDmdSalesInfo().Tables[InputDepositNormalTypeAcs.ctDmdSalesDataTable].Rows[ix];

                    // 修正不可請求売上データ判断処理 請求売上(赤)の時は無視
                    if ((this.IsLockDmdSalesData(dr) & 0x000000f0) == 0x000000f0) continue;

                    // 修正不可請求売上データ判断処理 請求売上(相殺済み黒)の時は無視
                    if ((this.IsLockDmdSalesData(dr) & 0x00000f00) == 0x00000f00) continue;

                    // 修正不可請求売上データ判断処理 POS売上の売掛以外
                    if ((this.IsLockDmdSalesData(dr) & 0x0000f000) == 0x0000f000)
                    {
                        continue;
                    }

                    // DEL 2009/06/24 ------>>>
                    //// 選択状態にする
                    //dr[InputDepositNormalTypeAcs.ctAlwCheck] = "true";

                    //this.grdDmdSalesList.Rows[ix].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.AllowEdit;
                    // DEL 2009/06/24 ------<<<

                    // 入金未引当額取得
                    double depositAlwcBlnce = Convert.ToDouble(this.labDepositAlwcBlnce.Text);

                    // 伝票合計取得
                    Int64 salesTotal = Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctTotalSales]);

                    // 引当済金額取得
                    Int64 depositAllowanceSales = Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctDepositAllowance_Sales]);

                    // 引当残金額取得
                    Int64 depositAlwcBlnceSales = Convert.ToInt64(dr[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales]);

                    // ADD 2009/06/24 ------>>>
                    // 伝票合計と引当済金額が一致の場合は無視
                    if (salesTotal == depositAllowanceSales)
                    {
                        continue;
                    }

                    // １回目のループは、伝票合計がプラスの売上は無視
                    if ((loop == 0) && (salesTotal > 0))
                    {
                        continue;
                    }
                    // ２回目のループは、伝票合計がマイナスの売上は無視
                    else if ((loop == 1) && (salesTotal < 0))
                    {
                        continue;
                    }
                    // ADD 2009/06/24 ------<<<
                    
                    // DEL 2009/06/24 ------>>>
                    // 選択状態にする
                    dr[InputDepositNormalTypeAcs.ctAlwCheck] = "true";

                    this.grdDmdSalesList.Rows[ix].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.AllowEdit;
                    // DEL 2009/06/24 ------<<<

                    if (depositAllowanceSales == 0)
                    {
                        // 未引当の場合
                        // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 ----------------------------------------->>>>>
                        //if ((long)depositAlwcBlnce < salesTotal)
                        if ((long)depositAlwcBlnce * -1 < salesTotal)
                        // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 -----------------------------------------<<<<<
                        {
                            // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 ----------------------------------------->>>>>
                            //depositAllowance = (long)depositAlwcBlnce;
                            depositAllowance = (long)depositAlwcBlnce * -1;
                            // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 -----------------------------------------<<<<<
                        }
                        else
                        {
                            depositAllowance = salesTotal;
                        }

                        // 引当残
                        dr[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotal - depositAllowance;

                        // 引当済
                        dr[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = depositAllowance;
                    }
                    else
                    {
                        // 2009/06/24 引当済と引当残の算出を修正
                        // 引当済の場合
                        // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 ----------------------------------------->>>>>
                        //if ((long)depositAlwcBlnce < depositAlwcBlnceSales)
                        if ((long)depositAlwcBlnce * -1 < depositAlwcBlnceSales)
                        // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 -----------------------------------------<<<<<
                        {
                            //depositAllowance = (long)depositAlwcBlnce;    // DEL 2009/06/24
                            // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 ----------------------------------------->>>>>
                            //depositAllowance = (long)depositAlwcBlnce + depositAllowanceSales;  // ADD 2009/06/24
                            depositAllowance = (long)depositAlwcBlnce * -1;
                            // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 -----------------------------------------<<<<<
                        }
                        else
                        {
                            //depositAllowance = depositAlwcBlnceSales; // DEL 2009/06/24
                            // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 ----------------------------------------->>>>>
                            //depositAllowance = depositAlwcBlnceSales + depositAllowanceSales;   // ADD 2009/06/24
                            depositAllowance = depositAlwcBlnceSales;
                            // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 -----------------------------------------<<<<<
                        }

                        // 引当残
                        //dr[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotal - depositAllowance - depositAllowanceSales;   // DEL 2009/06/24
                        // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 ----------------------------------------->>>>>
                        //dr[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotal - depositAllowance; // ADD 2009/06/24
                        dr[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales] = salesTotal - depositAllowance - depositAllowanceSales;
                        // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 -----------------------------------------<<<<<

                        // 引当済
                        //dr[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = depositAllowance + depositAllowanceSales;    // DEL 2009/06/24
                        // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 ----------------------------------------->>>>>
                        //dr[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = depositAllowance;  // ADD 2009/06/24
                        dr[InputDepositNormalTypeAcs.ctDepositAllowance_Sales] = depositAllowance + depositAllowanceSales;
                        // --- UPD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 -----------------------------------------<<<<<

                        // --- ADD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 ----------------------------------------->>>>>
                        //引当額(画面変更前引当額 + 今回引当額)
                        Int64 DepositAllowance_Alw = StrToIntDef(dr[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].ToString(), 0);
                        depositAllowance = DepositAllowance_Alw + depositAllowance;
                        // --- ADD 2015/07/16 y.wakita 東海自動車工業課題対応一覧№1 -----------------------------------------<<<<<
                    }

                    // 引当額
                    dr[InputDepositNormalTypeAcs.ctDepositAllowance_Alw] = depositAllowance;

                    // 引当情報変更処理
                    inputDepositNormalTypeAcs.UpdateAllowance(depositAllowance, 0, depositAllowance, dr, selectedDepositCopyRow, ref selectedAllowanceCopyRows);

                    // 入金未引当額設定
                    SetDepositAlwcBlance();

                    // 入金未引当額が0の場合は処理を行わない
                    if (labDepositAlwcBlnce.Text.Equals("") || labDepositAlwcBlnce.Text.Equals("0"))
                    {
                        break;
                    }
                }
            // ADD 2009/06/24 ------>>>
            }
            // ADD 2009/06/24 ------<<<
            
            // 売上引当合計計算処理
            this.SetSalesAllowanceTotal();
        }
        // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

        #region DEL 2008/06/26 Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 受注引当グリッドセル値変更 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : キーが押された時に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDmdSalesList_CellChange(object sender, CellEventArgs e)
		{
            // ↓ 20070125 18322 c MA.NS用に変更
            #region SF 諸費用別入金は使用しないので削除
            //// 引当チェックボックス列の時
			//if (e.Cell.Column == grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable].Columns[InputDepositNormalTypeAcs.ctAlwCheck])
			//{
			//	Int64 acpOdrDepositAlwc;
			//	Int64 varCostDepoAlwc;
			//	Int64 depositAllowance;
			//	Int64 alwcBlnce;
			//
			//	// チェックONの時
			//	if (e.Cell.Text == "True")
			//	{
			//		// 諸費用別入金判定
			//		if (depositRelDataAcs.OptSeparateCost == true)			// --- 諸費用別入金 有り --- //
			//		{
			//			// 引当額 受注 (入金引当額) 最大額取得処理
			//			acpOdrDepositAlwc = inputDepositNormalTypeAcs.GetMaxAcpOdrDepositAlwc(selectedDmdSalesRow, selectedDepositCopyRow);
			//
			//			// 入金引当情報 受注 変更処理
			//			inputDepositNormalTypeAcs.UpdateAcpOdrDepositAlwc(acpOdrDepositAlwc, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
			//
			//			// 引当額 諸費用 (入金引当額) 最大額取得処理
			//			varCostDepoAlwc = inputDepositNormalTypeAcs.GetMaxCostDepositAlwc(selectedDmdSalesRow, selectedDepositCopyRow);
			//
			//			// 入金引当情報 諸費用 変更処理
			//			inputDepositNormalTypeAcs.UpdateCostDepositAlwc(varCostDepoAlwc, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
			//
			//			// 引当額 共通 (入金引当額) 最大額取得処理 ※受注と諸費用の引当合計を共通の引当額とする
			//			depositAllowance = acpOdrDepositAlwc + varCostDepoAlwc;
			//
			//			// 入金引当情報 共通 変更処理
			//			alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(depositAllowance, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
			//
			//			// 引当情報変更処理
			//			inputDepositNormalTypeAcs.UpdateAllowance(acpOdrDepositAlwc, varCostDepoAlwc, depositAllowance, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);
			//		}
			//		else													// --- 諸費用別入金 無し --- //
			//		{
			//			// 諸費用別入金無しの時は、共通の項目をベースに計算し、受注に反映させる
			//			// ※このやり方でないと、諸費用別入金オプションの途中削除がうまくいかないはず
			//
			//			// 引当額 共通 (入金引当額) 最大額取得処理
			//			depositAllowance = inputDepositNormalTypeAcs.GetMaxDepositAlwc(selectedDmdSalesRow, selectedDepositCopyRow);
			//
			//			// 入金引当情報 共通 変更処理
			//			alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(depositAllowance, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
			//
			//			// 入金引当情報 受注 変更処理
			//			inputDepositNormalTypeAcs.UpdateAcpOdrDepositAlwc(depositAllowance, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
			//
			//			// 引当情報変更処理
			//			inputDepositNormalTypeAcs.UpdateAllowance(depositAllowance, 0, depositAllowance, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);
			//		}
			//
			//		// 引当後の入金引当残を更新する
			//		labDepositAlwcBlnce.Text = alwcBlnce.ToString("###,###,##0");
			//	}
			//		// チェックOFFの時
			//	else
			//	{
			//		// 引当額 受注 (入金引当額) クリア額処理
			//		acpOdrDepositAlwc = inputDepositNormalTypeAcs.GetClearAcpOdrDepositAlwc(selectedDmdSalesRow);
			//
			//		// 入金引当情報 受注 変更処理
			//		inputDepositNormalTypeAcs.UpdateAcpOdrDepositAlwc(acpOdrDepositAlwc, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
			//
			//		// 引当額 諸費用 (入金引当額) クリア額処理
			//		varCostDepoAlwc = inputDepositNormalTypeAcs.GetClearCostDepositAlwc(selectedDmdSalesRow);
			//
			//		// 入金引当情報 諸費用 変更処理
			//		inputDepositNormalTypeAcs.UpdateCostDepositAlwc(varCostDepoAlwc, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
			//
			//		// 引当額 共通 (入金引当額) クリア額処理
			//		depositAllowance = inputDepositNormalTypeAcs.GetClearDepositAlwc(selectedDmdSalesRow);
			//
			//		// 入金引当情報 共通 変更処理
			//		alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(depositAllowance, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
			//
			//		// 引当情報変更処理
			//		inputDepositNormalTypeAcs.UpdateAllowance(0, 0, 0, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);
			//
			//		// 引当後の入金引当残を更新する
			//		labDepositAlwcBlnce.Text = alwcBlnce.ToString("###,###,##0");
			//	}
			//
			//	// 引当額 共通 (入金引当マスタ) 列が表示されている時
			//	if (e.Cell.Row.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Column.Hidden == false)
			//	{
			//		// 引当額 共通 (入金引当マスタ) 列をアクティブにする
			//		e.Cell.Row.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activate();
			//	}
			//	// 引当額 受注 (入金引当マスタ) 列が表示されている時
			//	else if (e.Cell.Row.Cells[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].Column.Hidden == false)
			//	{
			//		// 引当額 受注 (入金引当マスタ) 列をアクティブにする
			//		e.Cell.Row.Cells[InputDepositNormalTypeAcs.ctAcpOdrDepositAlwc_Alw].Activate();
			//	}
			//}
			#endregion

            // 引当チェックボックス列の時
			if (e.Cell.Column == grdDmdSalesList.DisplayLayout.Bands[InputDepositNormalTypeAcs.ctDmdSalesDataTable].Columns[InputDepositNormalTypeAcs.ctAlwCheck])
			{
                // ↓ 20070125 18322 d MA.NSでは使用しないので削除
				//Int64 acpOdrDepositAlwc;
				//Int64 varCostDepoAlwc;
                // ↑ 20070125 18322 d
				Int64 depositAllowance;
				Int64 alwcBlnce;

				// チェックONの時
				if (e.Cell.Text == "True")
				{
					// 諸費用別入金無しの時は、共通の項目をベースに計算し、受注に反映させる
					// ※このやり方でないと、諸費用別入金オプションの途中削除がうまくいかないはず

					// 引当額 共通 (入金引当額) 最大額取得処理
					depositAllowance = inputDepositNormalTypeAcs.GetMaxDepositAlwc(selectedDmdSalesRow, selectedDepositCopyRow);
                    
                    // 入金引当情報 共通 変更処理
					//alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(depositAllowance, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
                    alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(depositAllowance, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, false, false);

					// 引当情報変更処理
					inputDepositNormalTypeAcs.UpdateAllowance(depositAllowance, 0, depositAllowance, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);

					// 引当後の入金引当残を更新する
					labDepositAlwcBlnce.Text = alwcBlnce.ToString("###,###,##0");
				}
					// チェックOFFの時
				else
				{
					// 引当額 共通 (入金引当額) クリア額処理
					depositAllowance = inputDepositNormalTypeAcs.GetClearDepositAlwc(selectedDmdSalesRow);

					// 入金引当情報 共通 変更処理
					//alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(depositAllowance, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
                    alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(depositAllowance, ref selectedDmdSalesRow, ref selectedDepositCopyRow, false, false, true);

					// 引当情報変更処理
					inputDepositNormalTypeAcs.UpdateAllowance(0, 0, 0, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);

					// 引当後の入金引当残を更新する
					labDepositAlwcBlnce.Text = alwcBlnce.ToString("###,###,##0");
				}

				// 引当額 共通 (入金引当マスタ) 列が表示されている時
				if (e.Cell.Row.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Column.Hidden == false)
				{
					// 引当額 共通 (入金引当マスタ) 列をアクティブにする
					e.Cell.Row.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activate();
				}
			}
            // ↑ 20070125 18322 c

			// 売上引当合計計算処理
			this.SetSalesAllowanceTotal();
		}

		/// <summary>
		/// 一括引当ボタン押下 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : 一括引当ボタンが押された時に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void btnAllAwl_Click(object sender, EventArgs e)
		{
			// 入金未引当額が0の場合は処理を行わない
			if (labDepositAlwcBlnce.Text.Equals("") || labDepositAlwcBlnce.Text.Equals("0"))
			{
				TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name,
					"入金未引当額が0円の為、引当を行えません。" + "\r\n\r\n" + "入金額を入力するか、他の入金伝票を選択してください。", 0, MessageBoxButtons.OK);
				return;
			}

			// 受注引当一覧が１件も無い時
			if (grdDmdSalesList.Rows.Count == 0) return;

            // ↓ 20070125 18322 d MA.NSでは使用しないので削除
			//Int64 acpOdrDepositAlwc;
			//Int64 varCostDepoAlwc;
            // ↑ 20070125 18322 d
			Int64 depositAllowance;
			Int64 alwcBlnce;

            // 受注引当一覧を先頭行からループ
			foreach (UltraGridRow dr in grdDmdSalesList.Rows)
			{
				// 引当額(入金引当マスタ)列をアクティブにする
				dr.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activate();

				// 受注引当残が０円の時は無視
                if (Convert.ToInt64(selectedDmdSalesRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Sales]) == 0) continue;

                // 修正不可請求売上データ判断処理 請求売上(赤)の時は無視
                if ((this.IsLockDmdSalesData(selectedDmdSalesRow) & 0x000000f0) == 0x000000f0) continue;

                // 修正不可請求売上データ判断処理 請求売上(相殺済み黒)の時は無視
                if ((this.IsLockDmdSalesData(selectedDmdSalesRow) & 0x00000f00) == 0x00000f00) continue;

                // 修正不可請求売上データ判断処理 POS売上の売掛以外
                if ((this.IsLockDmdSalesData(selectedDmdSalesRow) & 0x0000f000) == 0x0000f000)
                {
                    continue;
                }

                // 選択状態にする
				dr.Cells[InputDepositNormalTypeAcs.ctAlwCheck].Value = "true";

                // ↓ 20070125 18322 c MA.NS用に変更
                #region SF 諸費用別入金判定は使用しないので削除（全てコメントアウト）
                //// 諸費用別入金判定
				//if (depositRelDataAcs.OptSeparateCost == true)			// --- 諸費用別入金 有り --- //
				//{
				//	// 引当額 受注 (入金引当額) 最大額取得処理
				//	acpOdrDepositAlwc = inputDepositNormalTypeAcs.GetMaxAcpOdrDepositAlwc(selectedDmdSalesRow, selectedDepositCopyRow);
				//
				//	// 入金引当情報 受注 変更処理
				//	inputDepositNormalTypeAcs.UpdateAcpOdrDepositAlwc(acpOdrDepositAlwc, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
				//
				//	// 引当額 諸費用 (入金引当額) 最大額取得処理
				//	varCostDepoAlwc = inputDepositNormalTypeAcs.GetMaxCostDepositAlwc(selectedDmdSalesRow, selectedDepositCopyRow);
				//
				//	// 入金引当情報 諸費用 変更処理
				//	inputDepositNormalTypeAcs.UpdateCostDepositAlwc(varCostDepoAlwc, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
				//
				//	// 引当額 共通 (入金引当額) 最大額取得処理 ※受注と諸費用の引当合計を共通の引当額とする
				//	depositAllowance = acpOdrDepositAlwc + varCostDepoAlwc;
				//
				//	// 入金引当情報 共通 変更処理
				//	alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(depositAllowance, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
				//
				//	// 引当情報変更処理
				//	inputDepositNormalTypeAcs.UpdateAllowance(acpOdrDepositAlwc, varCostDepoAlwc, depositAllowance, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);
				//}
				//else													// --- 諸費用別入金 無し --- //
				//{
				//	// 諸費用別入金無しの時は、共通の項目をベースに計算し、受注に反映させる
				//	// ※このやり方でないと、諸費用別入金オプションの途中削除がうまくいかないはず
				//
				//	// 引当額 共通 (入金引当額) 最大額取得処理
				//	depositAllowance = inputDepositNormalTypeAcs.GetMaxDepositAlwc(selectedDmdSalesRow, selectedDepositCopyRow);
				//
				//	// 入金引当情報 共通 変更処理
				//	alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(depositAllowance, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
				//
				//	// 入金引当情報 受注 変更処理
				//	inputDepositNormalTypeAcs.UpdateAcpOdrDepositAlwc(depositAllowance, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);
				//
				//	// 引当情報変更処理
				//	inputDepositNormalTypeAcs.UpdateAllowance(depositAllowance, 0, depositAllowance, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);
				//}
                #endregion

				// 諸費用別入金無しの時は、共通の項目をベースに計算し、受注に反映させる
				// ※このやり方でないと、諸費用別入金オプションの途中削除がうまくいかないはず

				// 引当額 共通 (入金引当額) 最大額取得処理
				depositAllowance = inputDepositNormalTypeAcs.GetMaxDepositAlwc(selectedDmdSalesRow, selectedDepositCopyRow);

				// 入金引当情報 共通 変更処理
				alwcBlnce = inputDepositNormalTypeAcs.UpdateDepositAlwc(depositAllowance, ref selectedDmdSalesRow, ref selectedDepositCopyRow, true, true, true);

				// 引当情報変更処理
    			inputDepositNormalTypeAcs.UpdateAllowance(depositAllowance, 0, depositAllowance, selectedDmdSalesRow, selectedDepositCopyRow, ref selectedAllowanceCopyRows);
                // ↑ 20070125 18322 c

				// 引当後の入金引当残を更新する
				labDepositAlwcBlnce.Text = alwcBlnce.ToString("###,###,##0");

				// 入金引当残が無くなったら処理を抜ける
				if (alwcBlnce == 0) break;
			}

			// アクティブセルをエディッティング状態にする為に以下の処理
			grdDmdSalesList.ActiveCell = null;
			grdDmdSalesList.ActiveRow.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activate();

			// 売上引当合計計算処理
			this.SetSalesAllowanceTotal();
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion DEL 2008/06/26 Partsman用に変更

        /// <summary>
		/// タブページ選択後 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : 選択タブが変更された後に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
        /// <br>Update Note : 2012/12/24 王君 </br>
        /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
        /// <br>              Redmine#33741の修正</br>
		/// </remarks>
		private void tabList_SelectedTabChanged(object sender, SelectedTabChangedEventArgs e)
		{
			// 起動中フラグ
			if (this.formShowFlg == false) return;

			// タブに合わせた初期カーソル位置セット
			if (e.Tab.Key == "DepositTab")
			{
                //if (grdDepositList.Rows.Count == 0)
                //{
                //    // このタイミングでのセットフォーカスは年にする
                //    detDepositDateStart.InitFocus = emInitFocus.difYear;
                //    detDepositDateStart.Focus();
                //    detDepositDateStart.InitFocus = emInitFocus.difNone;
                //}
                //else
                //{
                //    grdDepositList.Focus();
                //}
                // このタイミングでのセットフォーカスは年にする
                detDepositDateStart.InitFocus = emInitFocus.difYear;
                detDepositDateStart.Focus();
                detDepositDateStart.InitFocus = emInitFocus.difNone;
                this._buttonReadSlip = true;　// ADD 王君 2012/12/24 Redmine#33741
			}
			else if (e.Tab.Key == "DmdSalesTab")
			{
                //if (grdDmdSalesList.Rows.Count == 0)
                //{
                //    // このタイミングでのセットフォーカスは年にする
                //    detSearchSlipDateStart.InitFocus = emInitFocus.difYear;
                //    detSearchSlipDateStart.Focus();
                //    detSearchSlipDateStart.InitFocus = emInitFocus.difNone;
                //}
                //else
                //{
                //    grdDmdSalesList.Focus();
                //}
                // このタイミングでのセットフォーカスは年にする
                detSearchSlipDateStart.InitFocus = emInitFocus.difYear;
                detSearchSlipDateStart.Focus();
                detSearchSlipDateStart.InitFocus = emInitFocus.difNone;
                this._buttonReadSlip = false; // ADD 王君 2012/12/24 Redmine#33741
			}
            // 親にツールバー状態通知
            if (ParentToolbarSettingEvent != null) ParentToolbarSettingEvent(this);　// ADD 王君 2012/12/24 Redmine#33741
		}

		/// <summary>
		/// タブページ選択前 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : 選択タブが変更される前に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void tabList_SelectedTabChanging(object sender, SelectedTabChangingEventArgs e)
		{
			// 起動中フラグ
			if (this.formShowFlg == false) return;
			
			// 受注引当タブが選択された時
			if (e.Tab.Key == "DmdSalesTab")
			{
				// 選択入金引当データ展開処理
				this.ExpandSelectDepositAllowance();
			}
		}

        /// <summary>
        /// グリッドマウスセル移動 イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : マウスがセル移動したときに発生します。 </br>
        /// <br>Programmer  : 30414 忍 幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private void Grid_MouseLeaveElement(object sender, UIElementEventArgs e)
        {
            UltraGrid uGrid = (UltraGrid)sender;

            // ツールチップを非表示にする
            ultraToolTipGrid.Enabled = false;
            ultraToolTipGrid.SetUltraToolTip(uGrid, null);
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 受注引当グリッドマウスセル移動 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : マウスがセル移動したときに発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDmdSalesList_MouseLeaveElement(object sender, UIElementEventArgs e)
		{
			// ツールチップを非表示にする
			ultraToolTipGrid.Enabled = false;
			ultraToolTipGrid.SetUltraToolTip(grdDmdSalesList, null);
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// スプリッターマウスEnter イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : コントロールにマウスが入った時にします。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void splitter1_MouseEnter(object sender, EventArgs e)
		{
			splitter1.BackColor = Color.FromArgb(192, 192, 255);
		}

		/// <summary>
		/// スプリッターマウスLeave イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : コントロールからマウスが抜けた時にします。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void splitter1_MouseLeave(object sender, EventArgs e)
		{
			splitter1.BackColor = Color.FromArgb(222, 239, 255);
		}

		/// <summary>
		/// 受注引当グリッドクリック イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : マウスがクリックしたときに発生します。 </br>
		/// <br>Programmer  : 30414 忍 幸史</br>
		/// <br>Date        : 2008/06/26</br>
        /// <br>Update Note : 2010/12/20 李占川 PM.NS保守依頼５次改良対応</br>
        /// <br>              引当残＝0の明細は、チェックボックスをグレーアウトし、チェック不可とする</br>
		/// </remarks>
		private void grdDmdSalesList_Click(object sender, EventArgs e)
		{
			// カーソルが行をクリックしたか取得
			Point pt = grdDmdSalesList.PointToClient(Cursor.Position);
            if (pt == null)
            {
                return;
            }

			UIElement uielement = grdDmdSalesList.DisplayLayout.UIElement.ElementFromPoint(new Point(pt.X, pt.Y));
            if (uielement == null)
            {
                return;
            }

			UltraGridRow oRow = (UltraGridRow)uielement.GetContext(typeof(UltraGridRow));
            if (oRow == null)
            {
                return;
            }

			UltraGridColumn oCol = (UltraGridColumn)uielement.GetContext(typeof(UltraGridColumn));
            if (oCol == null)
            {
                return;
            }

			if ((oRow != null) && (oRow.Index >= 0) && (oCol != null) && (oCol.ToString() != InputDepositNormalTypeAcs.ctAlwCheck))
			{
				const int maxLen = 9;
				string tipstring = "";

				// 赤黒区分
				if (Convert.ToInt32(oRow.Cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Value) != 0)
				{
					tipstring += grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].Value.ToString();
					tipstring += "\r\n";
				}

				// 売上伝票番号
				tipstring += grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSalesSlipNum].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctSalesSlipNum].Value.ToString();
				
				// 伝票日付(表示用)
				tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].Value.ToString();

				// 種別
				tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSalesKind].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctSalesKind].Value.ToString();
				//  ---ADD 2011/07/22 ------>>>>>
                tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSlipNote].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctSlipNote].Value.ToString();
                //  ---ADD 2011/07/22 ------<<<<
                
                // 伝票合計額
				tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctTotalSales].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt64(oRow.Cells[InputDepositNormalTypeAcs.ctTotalSales].Value).ToString("###,###,##0");
				// 引当済額
				tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt64(oRow.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Value).ToString("###,###,##0");
				// 締めフラグ
				if (oRow.Cells[InputDepositNormalTypeAcs.ctSalesClosedFlg].Value.ToString() != "")
				{
					tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].Header.Caption.PadRight(maxLen, '　') + "：" + "締済み";
				}
				else
				{
					tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].Header.Caption.PadRight(maxLen, '　') + "：" + "未締";
				}

				UltraToolTipInfo ultraToolTipInfo = new UltraToolTipInfo();
				ultraToolTipInfo.ToolTipImage = ToolTipImage.Info;

				ultraToolTipInfo.ToolTipTitle = "売上情報";
				ultraToolTipInfo.ToolTipText = tipstring;

				ultraToolTipGrid.Appearance.FontData.Name = "ＭＳ ゴシック";
				ultraToolTipGrid.SetUltraToolTip(grdDmdSalesList, ultraToolTipInfo);
				ultraToolTipGrid.Enabled = true;
			}

            if ((oRow != null) && (oRow.Index >= 0) && (oCol != null))
            {
                if (oCol.ToString() == InputDepositNormalTypeAcs.ctAlwCheck)
                {
                    // --- ADD 2010/12/20 ---------->>>>>
                    // 引当残＝0の明細は、チェックボックスをグレーアウトし、チェック不可とする。
                    if (this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index].Activation == Activation.Disabled)
                    {
                        return;
                    }
                    // --- ADD 2010/12/20  ----------<<<<<

                    this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index].Activate();

                    // --- CHG 2009/03/19 障害ID:12623対応------------------------------------------------------>>>>>
                    //if (this.grdDmdSalesList.Rows[oRow.Index].Cells[InputDepositNormalTypeAcs.ctSalesClosedFlg].Value.ToString() == "")
                    //{
                    //    if (this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index].Text == "True")
                    //    {
                    //        this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index].Value = "False";
                    //    }
                    //    else
                    //    {
                    //        this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index].Value = "True";
                    //    }

                    //    this.grdDmdSalesList.PerformAction(UltraGridAction.ExitEditMode);

                    //    grdDmdSalesList_CellChange(this.grdDmdSalesList, new CellEventArgs(this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index]));

                    //    this.grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
                    //}
                    //else
                    //{
                    //    if (this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index].Text == "True")
                    //    {
                    //        this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index].Value = "True";
                    //    }
                    //    else
                    //    {
                    //        this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index].Value = "False";
                    //    }

                    //    this.grdDmdSalesList.PerformAction(UltraGridAction.ExitEditMode);
                    //}

                    if (this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index].Text == "True")
                    {
                        this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index].Value = "False";
                    }
                    else
                    {
                        this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index].Value = "True";
                    }

                    this.grdDmdSalesList.PerformAction(UltraGridAction.ExitEditMode);

                    grdDmdSalesList_CellChange(this.grdDmdSalesList, new CellEventArgs(this.grdDmdSalesList.Rows[oRow.Index].Cells[oCol.Index]));

                    this.grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
                    // --- CHG 2009/03/19 障害ID:12623対応------------------------------------------------------<<<<<
                }
                else if (oCol.ToString() == InputDepositNormalTypeAcs.ctDepositAllowance_Alw)
                {
                    if (this.grdDmdSalesList.Rows[oRow.Index].Cells[InputDepositNormalTypeAcs.ctAlwCheck].Text == "True")
                    {
                        this.grdDmdSalesList.Rows[oRow.Index].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activate();
                        this.grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
                    }
                    else
                    {
                        this.grdDmdSalesList.Rows[oRow.Index].Cells[InputDepositNormalTypeAcs.ctAlwCheck].Activate();
                        this.grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
                    }
                }
                else if (oCol.ToString() == InputDepositNormalTypeAcs.ctDepositAlwBtn)
                {
                    this.grdDmdSalesList.Rows[oRow.Index].Cells[InputDepositNormalTypeAcs.ctDepositAlwBtn].Activate();
                    this.grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
                }
                else
                {
                    this.grdDmdSalesList.Rows[oRow.Index].Cells[InputDepositNormalTypeAcs.ctAlwCheck].Activate();
                    this.grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
                }
            }
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
        /// 受注引当グリッドクリック イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : マウスがクリックしたときに発生します。 </br>
        /// <br>Programmer  : 97036 amami</br>
        /// <br>Date        : 2005.07.21</br>
        /// </remarks>
        private void grdDmdSalesList_Click(object sender, EventArgs e)
        {
            // カーソルが行をクリックしたか取得
            Point pt = grdDmdSalesList.PointToClient(Cursor.Position);
            UIElement uielement = grdDmdSalesList.DisplayLayout.UIElement.ElementFromPoint(new Point(pt.X, pt.Y));
            UltraGridRow oRow = (UltraGridRow)uielement.GetContext(typeof(UltraGridRow));
            UltraGridColumn oCol = (UltraGridColumn)uielement.GetContext(typeof(UltraGridColumn));

            if ((oRow != null) && (oRow.Index >= 0) && (oCol != null) && (oCol.ToString() != InputDepositNormalTypeAcs.ctAlwCheck))
            {
                const int maxLen = 9;
                string tipstring = "";

                // 赤黒区分
                if (Convert.ToInt32(oRow.Cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Value) != 0)
                {
                    tipstring += grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteNm].Value.ToString();
                    tipstring += "\r\n";
                }

                // ↓ 20070125 18322 c MA.NS用に変更
                //// 伝票番号
                //tipstring += grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSlipNo].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctSlipNo].Value.ToString();
                //// 受注番号
                //tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt32(oRow.Cells[InputDepositNormalTypeAcs.ctAcceptAnOrderNo].Value).ToString();

                // 売上伝票番号
                tipstring += grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSalesSlipNum].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctSalesSlipNum].Value.ToString();
                // ↑ 20070125 18322 c

                // 伝票日付(表示用)
                tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctSearchSlipDateDisp].Value.ToString();

                // 2007.10.10 hikita del start ------------------------------------------------------------------------->>
                // ↓ 20070525 18322 a
                //// POSレシート番号
                //tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctPosReceiptNo].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctPosReceiptNo].Value.ToString();
                //// レジ処理日
                //tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctRegiProcDate].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctRegiProcDate].Value.ToString();
                // ↑ 20070525 18322 a
                // 2007.10.10 hikita del end ---------------------------------------------------------------------------<<

                // 種別
                tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSalesKind].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctSalesKind].Value.ToString();
                // ↓ 20070125 18322 d MA.NS用に変更
                //// 売上名称
                //tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSalesName].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctSalesName].Value.ToString();
                //// 登録番号
                //tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctNumberPlate].Header.Caption.PadRight(maxLen, '　') + "：" + oRow.Cells[InputDepositNormalTypeAcs.ctNumberPlate].Value.ToString();
                //// 受注売上額
                //tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctAcceptAnOrderSales].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt64(oRow.Cells[InputDepositNormalTypeAcs.ctAcceptAnOrderSales].Value).ToString("###,###,##0");
                //// 諸費用額
                //tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctTotalVariousCost].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt64(oRow.Cells[InputDepositNormalTypeAcs.ctTotalVariousCost].Value).ToString("###,###,##0");
                // ↑ 20070125 18322 d
                // 伝票合計額
                tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctTotalSales].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt64(oRow.Cells[InputDepositNormalTypeAcs.ctTotalSales].Value).ToString("###,###,##0");
                // 引当済額
                tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Header.Caption.PadRight(maxLen, '　') + "：" + Convert.ToInt64(oRow.Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Sales].Value).ToString("###,###,##0");
                // 締めフラグ
                if (oRow.Cells[InputDepositNormalTypeAcs.ctSalesClosedFlg].Value.ToString() != "")
                {
                    tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].Header.Caption.PadRight(maxLen, '　') + "：" + "締済み";
                }
                else
                {
                    tipstring += "\r\n" + grdDmdSalesList.DisplayLayout.Bands[0].Columns[InputDepositNormalTypeAcs.ctSalesClosedFlg].Header.Caption.PadRight(maxLen, '　') + "：" + "未締";
                }

                UltraToolTipInfo ultraToolTipInfo = new UltraToolTipInfo();
                ultraToolTipInfo.ToolTipImage = ToolTipImage.Info;
                // ↓ 20070125 18322 c
                //ultraToolTipInfo.ToolTipTitle = "受注情報";

                ultraToolTipInfo.ToolTipTitle = "売上情報";
                // ↑ 20070125 18322 c
                ultraToolTipInfo.ToolTipText = tipstring;

                ultraToolTipGrid.Appearance.FontData.Name = "ＭＳ ゴシック";
                ultraToolTipGrid.SetUltraToolTip(grdDmdSalesList, ultraToolTipInfo);
                ultraToolTipGrid.Enabled = true;
            }
        }
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        /// <summary>
		/// 受注引当グリッドキーダウン イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : キーが押された時に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void grdDmdSalesList_KeyDown(object sender, KeyEventArgs e)
		{
			UltraGrid ug = (UltraGrid)sender;

			if (ug.ActiveCell == null) return;

			switch (e.KeyCode)
			{
					// 上 Key
				case Keys.Up:
				{
					// 最上位行の時
					if(ug.ActiveCell.Row.Index == 0)
					{		
						// cbxAcptAnOdrStartus1.Focus();  // 2007.10.10 del
                        tEdit_SalesSlipNum.Focus();          // 2007.10.10 add 
						e.Handled = true;
					}
					else
					{
						ug.PerformAction(UltraGridAction.AboveCell);
						e.Handled = true;
					}
					break;
				}
					// 下 Key
				case Keys.Down:
				{
					// 最下位行の時
					if (ug.ActiveRow.Index == (ug.Rows.Count - 1))
					{
						btnAllAwl.Focus();
						e.Handled = true;
					}
					else
					{
						ug.PerformAction(UltraGridAction.BelowCell);
						e.Handled = true;
					}
					break;
				}
					// 右 Key
				case Keys.Right:
				{
					// エディット編集モードの時
					if ((ug.ActiveCell.Column.DataType != typeof(Boolean)) && (ug.ActiveCell.IsInEditMode == true))
					{
						// カーソルが文字列の一番右端の時
						if ((ug.ActiveCell.SelLength == 0) &&
							(ug.ActiveCell.SelStart == ug.ActiveCell.Text.Length))
						{
							ug.PerformAction(UltraGridAction.NextCell);
							e.Handled = true;
						}
					}
					else
					{
						ug.PerformAction(UltraGridAction.NextCell);
						e.Handled = true;
					}
					break;
				}
					// 左 Key
				case Keys.Left:
				{
					// 編集モードの時
					if ((ug.ActiveCell.Column.DataType != typeof(Boolean)) && (ug.ActiveCell.IsInEditMode == true))
					{
						// カーソルが文字列の一番左端の時
						if ((ug.ActiveCell.SelLength == 0) &&
							(ug.ActiveCell.SelStart == 0))
						{
                            //if (ug.ActiveCell.Row.Index != 0)
                            //{
                            //    ug.PerformAction(UltraGridAction.PrevCell);
                            //}
                            ug.PerformAction(UltraGridAction.PrevCell);
                            e.Handled = true;
						}
					}
					else
					{
						ug.PerformAction(UltraGridAction.PrevCell);
						e.Handled = true;
					}
					break;
				}

                case Keys.Space:
                    {
                        if (ug.ActiveCell.Column.Key == InputDepositNormalTypeAcs.ctDepositAlwBtn)
                        {
                            grdDmdSalesList_ClickCellButton(ug, new CellEventArgs(ug.ActiveCell));
                        }
                        break;
                    }
			}
        }

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// 入金金種キーコントロール イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : 入金金種でキーが押された時に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void treMoneyKind_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
		{
			if (e.KeyCode == Keys.Down)
			{
				if (treMoneyKind.Nodes.GetItem(treMoneyKind.Nodes.Count-1) == treMoneyKind.ActiveNode)
				{
                    // ↓ 20070126 18322 c MA.NS用に変更
                    #region SF 諸費用別入金判定は使用しないので削除（全てコメントアウト）
                    //// 諸費用別入金判定
					//if (depositRelDataAcs.OptSeparateCost == true)
					//{
					//	// 諸費用別入金 パネル表示
					//	pnlSeparateCost.Visible = true;
                    //
					//	// 入金額にフォーカスをセット
					//	edtAcpOdrDeposit.Focus();
					//}
					//else
					//{
					//	// 入金額にフォーカスをセット
					//	edtDeposit.Focus();
                    //}
                    #endregion

                    // 入金額にフォーカスをセット
					edtDeposit.Focus();
                    // ↑ 20070126 18322 c
				}	
			}
			else if (e.KeyCode == Keys.Up)
			{
				if (treMoneyKind.Nodes.GetItem(0) == treMoneyKind.ActiveNode)
					opsDepositDiv.Focus();
			}
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        #region 2007.10.10 del
        // 2007.10.10 del start -------------------------------------------->>
        ///// <summary>
        ///// 伝票種別チェック状態変更 イベント
        ///// </summary>
        ///// <param name="sender">対象オブジェクト</param>
        ///// <param name="e">イベントパラメータ</param>
        ///// <remarks>
        ///// <br>Note　　　  : チェック状態が変更された時に発生します。 </br>
        ///// <br>Programmer  : 97036 amami</br>
        ///// <br>Date        : 2005.07.21</br>
        ///// </remarks>
        //private void cbxAcptAnOdrStartus1_CheckedChanged(object sender, System.EventArgs e)
        //{
        //    // TEditプロパティー変換処理
        //    this.TEditChangeEdit(tEdit_SalesSlipNum);
        //}
        // 2007.10.10 del end ----------------------------------------------<<
        #endregion 2007.10.10 del

        #region 2008/06/26 DEL 使用していないのでコメントアウト
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// システムチェック状態変更 イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : チェック状態が変更された時に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void cbxDataInputSystem1_CheckedChanged(object sender, EventArgs e)
		{
			// TEditプロパティー変換処理
			this.TEditChangeEdit(tEdit_SalesSlipNum);
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL 使用していないのでコメントアウト

        /// <summary>
		/// 伝票番号エディットLeave イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : フォーカスが無くなる時に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void tEdit_SalesSlipNum_Leave(object sender, EventArgs e)
		{
			// 伝票番号
			if (tEdit_SalesSlipNum.Text != "")
			{
				string before = tEdit_SalesSlipNum.Text;

                // ↓ 20070129 18322 c MA.NS用に変更
                #region SF 選択中システム/伝票種別取得処理（全てコメントアウト）
                //// 選択中システム/伝票種別取得処理
				//int[] lstDataInputSystem;
				//int[] lstSlipKindCode;
				//this.GetSelectSystemSlipKind(out lstDataInputSystem, out lstSlipKindCode);
				//if ((lstDataInputSystem.Length != 0) && (lstSlipKindCode.Length != 0))
				//{
				//	// 各システム伝票番号番号コード取得処理
				//	int[] noCodeArray = ConstantManagement_SF_AP.GetSlipNoNoCode(lstDataInputSystem, lstSlipKindCode);
                //
				//	if (noCodeArray.Length != 0)
				//	{
                //
				//		NumberControl numberControl = new NumberControl();
                //
				//		// 番号正規化処理
				//		tEdit_SalesSlipNum.Text = numberControl.Convert(noCodeArray, before);
				//	}
                //}
                #endregion

				NumberControl numberControl = new NumberControl();

				// 番号正規化処理
                int noCodeArray = ctNoCodeSalesSlipNum;
    			tEdit_SalesSlipNum.Text = numberControl.Convert(noCodeArray, before);
                // ↑ 20070129 18322 c
            }
		}

        /// <summary>
        /// メイン処理
        /// </summary>
        /// <remarks>
        /// <br>Note		: 銀行名称の取得を行います。</br>
        /// <br>Programmer	: 20081 疋田　勇人</br>
        /// <br>Date		: 2007.09.05</br>
        /// </remarks>
        private string GetBankName(int bankCode)
        {
            string bankName = "";
            try
            {
                // 銀行名取得
                string guideName = "";

                int st = this._userGuideAcs.GetGuideName(out guideName, enterpriseCode, 46, bankCode);
                if (st == 0)
                {
                    bankName = guideName.Trim();
                }
            }
            catch (Exception)
            {
                bankName = "";
            }

            return bankName;
        }

        /// <summary>
        /// キーコントロール イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : キーが押された時に発生します。 </br>
        /// <br>Programmer  : 30414 忍 幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// <br>UpdateNote  : 2009/12/25 李占川 ＰＭ．ＮＳ保守依頼④</br>
        /// <br>              Redmine#2128の対応</br>
        /// <br>Update Note : 2010/06/17 李占川 Redmine#9948の修正
        /// <br>Update Note : 2011/08/08 李占川 案件一覧連番921、redmine#23408の対応</br>
        /// <br>              得意先コードに「納入先」のコードを入力すると、エラー表示されます</br>
        /// <br>Update Note : 2011/11/28 陳建明 入金伝票入力 振込金額を入力した後のフォーカス制御の修正</br>
        /// <br>Update Note : 2012/09/21 田建委</br>
        /// <br>管理番号    : 2012/10/17配信分</br>
        /// <br>              Redmine#32415 発行者の追加対応</br>
        /// <br>Update Note : 2012/12/24 王君</br>
        /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
        /// <br>              Redmine#33741の対応</br>
        /// <br>Update Note : 2013/02/06 王君</br>
        /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
        /// <br>              Redmine#33741の対応</br>
        /// <br>Update Note : 2013/02/07 王君</br>
        /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
        /// <br>              Redmine#33741の対応</br>
        /// <br>Update Note : 2013/02/19 王君</br>
        /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
        /// <br>              Redmine#33741の対応</br>
        /// <br>Update Note : 2013/02/25 王君</br>
        /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
        /// <br>              Redmine#33741の対応</br>
        /// </remarks>
        private void tRetKeyControl1_ChangeFocus(object sender, ChangeFocusEventArgs e)
        {
            if (e.PrevCtrl == null)
            {
                return;
            }
            switch (e.PrevCtrl.Name)
            {
                // 伝票日付制御
                case "DepoSlipDateClrDiv_tComboEditor":
                    {
                        if (e.Key == Keys.Down)
                        {
                            e.NextCtrl = this.tNedit_CustomerCode;
                            this.tNedit_CustomerCode.Focus();
                            return;
                        }
                        break;
                    }
                // UNDONE:得意先コード
                case "tNedit_CustomerCode":
                    {
                        // 得意先コード取得
                        int customerCode = this.tNedit_CustomerCode.GetInt();

                        // 前回値と一緒の場合
                        if ((customerCode != 0) && (customerCode == this._prevCustomerCode))
                        {
                            if (e.ShiftKey == false)
                            {
                                if ((e.Key == Keys.Tab) || (e.Key == Keys.Enter))
                                {
                                    if (this.edtCustomerName.DataText.Trim() != "")
                                    {
                                        if (this.edtDepositDate.Enabled)
                                        {
                                            // --- UPD 2010/06/08 ---------->>>>>
                                            //e.NextCtrl = this.edtDepositDate;
                                            if (DepoSlipDateClrDiv_tComboEditor.SelectedIndex == 1)
                                            {
                                                // --- UPD 2010/06/17 ---------->>>>>
                                                //e.NextCtrl = null;
                                                //this.grdDepositKind.DisplayLayout.Rows[0].Cells[3].Activate();
                                                //this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);

                                                if (_FirstStartFlag)
                                                {
                                                    e.NextCtrl = this.edtDepositDate;
                                                }
                                                else
                                                {
                                                    e.NextCtrl = null;
                                                    this.grdDepositKind.DisplayLayout.Rows[0].Cells[3].Activate();
                                                    this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                                                }
                                                // --- UPD 2010/06/17 ----------<<<<<
                                            }
                                            else
                                            {
                                                e.NextCtrl = this.edtDepositDate;
                                            }
                                            // --- UPD 2010/06/08 ----------<<<<<
                                        }
                                        else
                                        {
                                            e.NextCtrl = this.detDepositDateStart;
                                        }
                                        return;
                                    }
                                }
                            }
                            return;
                        }
                        /* ---- DEL 王君 2012/12/24 Redmine#33741 ------->>>>> 
                        // 2011.07.21 add wangf start
                        // 得意先テキストボックスの中に未入力時、画面そのまま表示
                        else if (customerCode == 0)
                        {
                            return;
                        }
                        // 2011.07.21 add wangf end
                        // ---- DEL 王君 2012/12/24 Redmine#33741 -------<<<<< */

                        CustomerInfo customerInfo;

                        //--------------------------------------------------------------------
                        // 得意先コードから得意先マスタを取得し、請求先コードと比較
                        // 得意先コードと請求先コードに差異がある場合は請求先コードで再検索
                        //--------------------------------------------------------------------
                        int status = GetCustomerInfo(out customerInfo, customerCode);
                        // ----- ADD 王君 2013/02/19 Redmine#33741 ----->>>>>
                        bool flag;
                        if (customerCode == 0)
                        {
                            flag = false;
                        }
                        else
                        {
                            flag = true;
                        }
                        // ----- ADD 王君 2013/02/19 Redmine#33741 -----<<<<<
                        if (status == 0)
                        {
                            // --- ADD 2011/08/08 ---------->>>>>
                            if (customerInfo.IsCustomer != true)
                            {
                                #region 納入先入力
                                //-----------------------------------------------------------------------------
                                // 納入先入力
                                //-----------------------------------------------------------------------------
                                TMsgDisp.Show(
                                    this,
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    this.Name,
                                    "納入先は入力できません。",
                                    -1,
                                    MessageBoxButtons.OK);
                                this.tNedit_CustomerCode.SetInt(this._prevCustomerCode);
                                e.NextCtrl = this.tNedit_CustomerCode;
                                return;
                                #endregion
                            }
                            // --- ADD 2011/08/08 ----------<<<<<

                            // 得意先コード設定
                            this.tNedit_CustomerCode.SetInt(customerInfo.CustomerCode);

                            // 得意先略称取得
                            this.edtCustomerName.DataText = customerInfo.CustomerSnm.Trim();

                            // 請求先コードチェック
                            bool bStatus = CheckClaimCode(customerInfo);
                            if (!bStatus) 
                            {
                                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                                  this.Name,
                                                  "請求先に変更しました。",
                                                  0,
                                                  MessageBoxButtons.OK);

                                // 得意先コード
                                this._customerCode = customerInfo.CustomerCode;
                            // ----- ADD 王君 2012/12/24 Redmine#33741 ----------->>>>>
                                status = ChangeCustomerCode(customerInfo.ClaimCode);
                                if (status == -1)
                                {
                                    #region 納入先入力
                                    //-----------------------------------------------------------------------------
                                    // 納入先入力
                                    //-----------------------------------------------------------------------------
                                    TMsgDisp.Show(
                                        this,
                                        emErrorLevel.ERR_LEVEL_INFO,
                                        this.Name,
                                        "納入先は入力できません。",
                                        -1,
                                        MessageBoxButtons.OK);
                                    this.tNedit_CustomerCode.Clear();
                                    this.edtCustomerName.Text = "";
                                    e.NextCtrl = this.tNedit_CustomerCode;
                                    return;
                                    #endregion
                                }
                           // ----- ADD 王君 2012/12/24 Redmine#33741 -----------<<<<<
                            }
                            else
                            {
                                // 計上拠点取得
                                this._selectSectionCode = customerInfo.ClaimSectionCode.Trim();

                                // 消費税転嫁方式
                                this._consTaxLayMethod = customerInfo.ConsTaxLayMethod;

                                // 得意先コード
                                this._customerCode = customerInfo.CustomerCode;

                                // 請求先コード
                                this._claimCode = customerInfo.ClaimCode;

                                // 入金消込区分で判断
                                if (customerInfo.DepoDelCode == 0)
                                {
                                    // 売上引当不可
                                    this.tabList.Tabs[1].Enabled = false;
                                }
                                else
                                {
                                    // 売上引当可
                                    this.tabList.Tabs[1].Enabled = true;
                                }
                            }

                            this._prevCustomerCode = this._claimCode;
                            this._focusSave = true;// ADD 王君 2012/12/24 Redmine#33741
                        }

                        if (status == 0)
                        {
                            // 2011/05/16 Add >>>
                            // 得意先変更フラグを立てる
                            _customerChangeFlg = true;
                            // 2011/05/16 Add <<<

                            //GetDepositInfo(this._claimCode); // DEL 王君 2012/12/24 Redmine#33741
                            GetDepositInfo(this._claimCode, 0); // ADD 王君 2012/12/24 Redmine#33741

                            // 2011/05/16 Add >>>
                            // 得意先変更フラグを削除し、入金情報を再計算する
                            GetDisplayDeposit(null, selectedDepositCopyRow, selectedAllowanceCopyRows);
                            _customerChangeFlg = false;
                            // 2011/05/16 Add <<<
                        }
                        else
                        {
                            /* ----- DEL 王君 2013/02/06 Redmine#33741 ------->>>>>
                            // ----- ADD 王君 2012/12/24 Redmine#33741 ------->>>>>
                            if (e.NextCtrl != null && this._focusFlag)
                            {
                                if (!"btnCustomerGuid".Equals(e.NextCtrl.Name))
                                {
                                    ClearScreen();
                                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                        this.Name,
                                        "得意先コードが未入力です。",
                                        0,
                                        MessageBoxButtons.OK);
                                    e.NextCtrl = this.tNedit_CustomerCode;
                                    this._focusSave = false;
                                }
                            }
                            else if (this.tNedit_CustomerCode.GetInt() != 0)
                            {
                                ClearScreen();
                                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                       this.Name,
                                       "得意先コードが未入力です。",
                                       0,
                                       MessageBoxButtons.OK);
                                this._focusSave = false;
                                return;
                            }
                            else 
                            {
                                this._focusSave = false;
                                ClearScreen();
                                return;
                            }
                        // ----- ADD 王君 2012/12/24 Redmine#33741 -------<<<<<
                           ----- DEL 王君 2013/02/06 Redmine#33741 ------ <<<<<*/
                            // 画面情報初期化
                            ClearScreen();
                            // ツールバー設定
                            SearchAfterDisplySetting(-1);

                            this._preEdtDepositDate = DateTime.MinValue; // ADD 2009/12/25
                        }

                        if (e.ShiftKey == false)
                        {
                            switch (e.Key)
                            {
                                case Keys.Tab:
                                case Keys.Enter:
                                    {
                                        //if (this.edtCustomerName.DataText.Trim() != "")   // DEL 2009/06/26
                                        if (status == 0)    // ADD 2009/06/26
                                        {
                                            if (this.edtDepositDate.Enabled)
                                            {
                                                // --- UPD 2010/06/08 ---------->>>>>
                                                //e.NextCtrl = this.edtDepositDate;
                                                if (DepoSlipDateClrDiv_tComboEditor.SelectedIndex == 1)
                                                {
                                                    // --- UPD 2010/06/17 ---------->>>>>
                                                    //e.NextCtrl = null;
                                                    //this.grdDepositKind.DisplayLayout.Rows[0].Cells[3].Activate();
                                                    //this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);

                                                    if (_FirstStartFlag)
                                                    {
                                                        e.NextCtrl = this.edtDepositDate;
                                                    }
                                                    else
                                                    {
                                                        e.NextCtrl = null;
                                                        this.grdDepositKind.DisplayLayout.Rows[0].Cells[3].Activate();
                                                        this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                                                    }
                                                    // --- UPD 2010/06/17 ----------<<<<<
                                                }
                                                else
                                                {
                                                    e.NextCtrl = this.edtDepositDate;
                                                }
                                                // --- UPD 2010/06/08 ----------<<<<<
                                            }
                                            else
                                            {
                                                e.NextCtrl = this.detDepositDateStart;
                                            }
                                            return;
                                        }
                                        else
                                        {
                                            //this.btnCustomerGuid_Click(this.tNedit_CustomerCode, new EventArgs()); // DEL 王君　2013/02/06 Redmine#33741 
                                            //if (this.edtCustomerName.DataText.Trim() != "")   // DEL 2009/06/26
                                            // ----- ADD 王君　2013/02/07 Redmine#33741 ----- >>>>>
                                            if (this._focusFlag)
                                            {
                                                // ----- ADD 王君　2013/02/07 Redmine#33741 ----- <<<<<
                                                /* ----- DEL 王君　2013/02/25 Redmine#33741 ----- >>>>>
                                                // ----- ADD 王君　2013/02/19 Redmine#33741 ----- >>>>>
                                                if (!flag)
                                                {
                                                // ----- ADD 王君　2013/02/19 Redmine#33741 ----- <<<<<
                                                    // ----- ADD 王君　2013/02/06 Redmine#33741 ----- >>>>>
                                                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                                        this.Name,
                                                        "得意先コードが未入力です。",
                                                        0,
                                                        MessageBoxButtons.OK);
                                                    e.NextCtrl = this.tNedit_CustomerCode;
                                                    ClearScreen();
                                                    SearchAfterDisplySetting(-1);
                                                    return;
                                                    // ----- ADD 王君　2013/02/06 Redmine#33741 ----- <<<<<
                                                // ----- ADD 王君　2013/02/19 Redmine#33741 ----- >>>>>
                                                }
                                                else
                                                {
                                                 //----- DEL 王君　2013/02/25 Redmine#33741 */ 
                                                    this.btnCustomerGuid_Click(this.tNedit_CustomerCode, new EventArgs());
                                                    if (!this._cusotmerGuideSelected)
                                                    {
                                                        TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                                       this.Name,
                                                       "得意先コードが未入力です。",
                                                       0,
                                                       MessageBoxButtons.OK);
                                                        e.NextCtrl = this.tNedit_CustomerCode;
                                                        ClearScreen();
                                                        SearchAfterDisplySetting(-1);
                                                    }
                                                    else
                                                    {
                                                        e.NextCtrl = this.edtDepositDate;
                                                        return;
                                                    }
                                                }
                                                // ----- ADD 王君　2013/02/19 Redmine#33741 ----- <<<<<
                                                //} //  ADD 王君　2013/02/07 Redmine#33741 //  DEL 王君　2013/02/25 Redmine#33741
                                            if (this._cusotmerGuideSelected)    // ADD 2009/06/26
                                            {
                                                e.NextCtrl = this.edtDepositDate;
                                                return;
                                            }
                                            else
                                            {
                                                ClearScreen();
                                                SearchAfterDisplySetting(-1);
                                            }
                                        }
                                        break;
                                    }
                                case Keys.Up:
                                    {
                                        //if (this.edtCustomerName.DataText.Trim() == "")   // DEL 2009/06/26
                                        if (status != 0)    // ADD 2009/06/26
                                        {
                                            ClearScreen();
                                            SearchAfterDisplySetting(-1);
                                            //e.NextCtrl = this.tNedit_CustomerCode;// ADD 王君 2012/12/24 Redmine#33741 // DEL 王君 2013/02/06 Redmine#33741
                                        }
                                        /* ----- DEL 王君 2013/02/06 Redmine#33741 ----->>>>>>
                                        // ----- ADD 王君 2012/12/24 Redmine#33741 ----->>>>>
                                        else
                                        {
                                        // ----- ADD 王君 2012/12/24 Redmine#33741 -----<<<<<
                                        ----- DEL 王君 2013/02/06 Redmine#33741 ----->>>>>*/
                                            e.NextCtrl = this.DepoSlipDateClrDiv_tComboEditor; 
                                            this.DepoSlipDateClrDiv_tComboEditor.Focus();
                                        // } // ADD 王君 2012/12/24 Redmine#33741  // DEL 2013/02/06 Redmine#33741
                                        return;
                                    }
                                case Keys.Down:
                                    // ------ ADD 王君 2012/02/06 Redmine#33741 ----- >>>>>
                                    {
                                        if (status != 0)
                                        {
                                            /* ------ DEL 王君 2013/02/25 Redmine#33741 ----- >>>>>
                                            // ------ ADD 王君 2013/02/19 Redmine#33741 ----- >>>>>
                                            if (!flag)
                                            {
                                            // ------ ADD 王君 2013/02/19 Redmine#33741 ----- <<<<<
                                                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                                    this.Name,
                                                    "得意先コードが未入力です。",
                                                    0,
                                                    MessageBoxButtons.OK);
                                            // ------ ADD 王君 2013/02/19 Redmine#33741 ----- >>>>>
                                                e.NextCtrl = this.tNedit_CustomerCode;
                                            }
                                            // ------ ADD 王君 2013/02/19 Redmine#33741 ----- <<<<<
                                            ClearScreen();
                                            SearchAfterDisplySetting(-1);
                                            //e.NextCtrl = this.tNedit_CustomerCode;// DEL 王君  2013/02/19 Redmine#33741 
                                            // ------ DEL 王君 2013/02/25 Redmine#33741 ----- <<<<< */
                                            // ------ ADD 王君 2013/02/25 Redmine#33741 ----- >>>>>
                                            if (!flag)
                                            {
                                                this.btnCustomerGuid_Click(this.tNedit_CustomerCode, new EventArgs());
                                                if (!this._cusotmerGuideSelected)
                                                {
                                                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                                   this.Name,
                                                   "得意先コードが未入力です。",
                                                   0,
                                                   MessageBoxButtons.OK);
                                                    e.NextCtrl = this.tNedit_CustomerCode;
                                                    ClearScreen();
                                                    SearchAfterDisplySetting(-1);
                                                }
                                                else
                                                {
                                                    e.NextCtrl = this.edtDepositDate;
                                                }
                                            }
                                            else
                                            {
                                                ClearScreen();
                                                SearchAfterDisplySetting(-1);
                                            }
                                            // ------ ADD 王君 2013/02/25 Redmine#33741 ----- <<<<<
                                        }
                                        return;
                                    }
                                    // ------ ADD 王君  2012/02/06 Redmine#33741 ----- <<<<<
                                case Keys.Left:
                                    // ----- ADD 王君 2012/12/24 Redmine#33741 ------->>>>> 
                                    {
                                        if (status != 0) 
                                        {
                                            ClearScreen();
                                            SearchAfterDisplySetting(-1);
                                            //e.NextCtrl = this.tNedit_CustomerCode; // DEL 王君 2013/02/06 Redmine#33741
                                        }
                                        return;
                                    }
                                    // ----- ADD 王君 2012/12/24 Redmine#33741 -------<<<<<
                                case Keys.Right:
                                    {
                                        //if (this.edtCustomerName.DataText.Trim() == "")   // DEL 2009/06/26
                                        if (status != 0)    // ADD 2009/06/26
                                        {
                                            /* ------ DEL 王君 2013/02/25 Redmine#33741 ----- >>>>>
                                            // ------ ADD 王君 2013/02/19 Redmine#33741 ----- >>>>>
                                            if (!flag)
                                            {
                                            // ------ ADD 王君 2013/02/19 Redmine#33741 ----- <<<<<
                                                // ----- ADD 王君　2013/02/06 Redmine#33741 ----- >>>>>
                                                TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                                    this.Name,
                                                    "得意先コードが未入力です。",
                                                    0,
                                                    MessageBoxButtons.OK);
                                                e.NextCtrl = this.tNedit_CustomerCode;
                                                // ----- ADD 王君　2013/02/06 Redmine#33741 ----- <<<<<
                                            // ------ ADD 王君 2013/02/19 Redmine#33741 ----- >>>>>
                                            } 
                                            else
                                            {
                                            // ------ ADD 王君 2013/02/19 Redmine#33741 ----- <<<<<
                                                e.NextCtrl = this.btnCustomerGuid;//  ADD 王君 2012/12/24 Redmine#33741
                                            }//  ADD 王君 2013/02/19 Redmine#33741
                                             ------ DEL 王君 2013/02/25 Redmine#33741 ----- <<<<< */
                                            // ------ ADD 王君 2013/02/25 Redmine#33741 ----- >>>>>
                                            if (!flag)
                                            {
                                                this.btnCustomerGuid_Click(this.tNedit_CustomerCode, new EventArgs());
                                                if (!this._cusotmerGuideSelected)
                                                {
                                                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                                   this.Name,
                                                   "得意先コードが未入力です。",
                                                   0,
                                                   MessageBoxButtons.OK);
                                                    e.NextCtrl = this.tNedit_CustomerCode;
                                                    ClearScreen();
                                                    SearchAfterDisplySetting(-1);
                                                }
                                                else
                                                {
                                                    e.NextCtrl = this.edtDepositDate;
                                                }
                                            }
                                            else
                                            {
                                            // ------ ADD 王君 2013/02/25 Redmine#33741 ----- <<<<<
                                            ClearScreen();
                                            SearchAfterDisplySetting(-1);
                                            }  // ADD 王君 2013/02/25 Redmine#33741
                                        }
                                        return;
                                    }
                            }
                        }
                        break;
                    }
                case "edtDepositDate":
                    {
                        if (e.ShiftKey == true)
                        {
                            if (e.Key == Keys.Tab)
                            {
                                if (this.edtCustomerName.DataText.Trim() != "")
                                {
                                    e.NextCtrl = this.tNedit_CustomerCode;
                                    return;
                                }
                            }
                        }
                        break;
                    }
                // 得意先ガイドボタン
                case "btnCustomerGuid":
                    {
                        /* ---- DEL 王君 2012/12/24 Redmine#33741 ------>>>>>
                        if (e.Key == Keys.Up)
                        {
                            e.NextCtrl = this.DepoSlipDateClrDiv_tComboEditor;
                            this.DepoSlipDateClrDiv_tComboEditor.Focus();
                            return;
                        }
                        // ---- DEL 王君 2012/12/24 Redmine#33741 ------<<<<<*/
                        /*---- DEL 王君 2013/02/06 Redmine#33741 ------>>>>>
                        // ---- ADD 王君 2012/12/24 Redmine#33741 ------>>>>>
                        if (e.ShiftKey == false)
                        {
                            if (string.IsNullOrEmpty(this.tNedit_CustomerCode.Text.Trim()))
                            {
                                if (e.NextCtrl.Name != "tNedit_CustomerCode" && e.NextCtrl.Name != "btnCustomerGuid")
                                {
                                    ClearScreen();
                                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                        this.Name,
                                        "得意先コードが未入力です。",
                                        0,
                                        MessageBoxButtons.OK);
                                    SearchAfterDisplySetting(-1);
                                    e.NextCtrl = this.tNedit_CustomerCode;
                                }
                            }
                        }
                        // ---- ADD 王君 2012/12/24 Redmine#33741 ------<<<<<
                         ---- DEL 王君 2013/02/06 Redmine#33741 ------<<<<< */
                        //---- ADD 王君 2013/02/06 Redmine#33741 ------>>>>>
                        if (e.Key == Keys.Up)
                        {
                            e.NextCtrl = this.DepoSlipDateClrDiv_tComboEditor;
                            this.DepoSlipDateClrDiv_tComboEditor.Focus();
                            return;
                        }
                        //---- ADD 王君 2013/02/06 Redmine#33741 ------<<<<<
                        break;
                    }
                // 銀行コード
                case "tNedit_BankCode":
                    //if (this.tNedit_BankCode.GetInt() == 0)
                    //{
                    //    this.teditBankName.Clear();
                    //    this._prevBankCode = 0;
                    //    return;
                    //}

                    //// 銀行コード取得
                    //int bankCode = this.tNedit_BankCode.GetInt();

                    //this.teditBankName.DataText = GetBankName(bankCode);

                    //if (this.teditBankName.DataText.Trim() == "")
                    //{
                    //    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                    //              this.Name,
                    //              "銀行コードが存在しません。",
                    //              0,
                    //              MessageBoxButtons.OK);
                    //    e.NextCtrl = e.PrevCtrl;
                    //    this.tNedit_BankCode.SelectAll();
                    //    return;
                    //}

                    //if (e.ShiftKey == false)
                    //{
                    //    if ((e.Key == Keys.Tab) || (e.Key == Keys.Enter))
                    //    {
                    //        if (this.teditBankName.DataText.Trim() != "")
                    //        {
                    //            e.NextCtrl = this.edtDraftDrawingDate;
                    //        }
                    //    }
                    //}
                    break;
                // 振出日
                case "edtDraftDrawingDate":
                    {
                        //if (e.ShiftKey == true)
                        //{
                        //    if (e.Key == Keys.Tab)
                        //    {
                        //        if (this.teditBankName.DataText.Trim() != "")
                        //        {
                        //            e.NextCtrl = this.tNedit_BankCode;
                        //            return;
                        //        }
                        //    }
                        //}
                        break;
                    }
                // 受注引当グリッド
                case "grdDmdSalesList":
                    {
                        if (e.ShiftKey == false)
                        {
                            // リターンキーの時
                            if ((e.Key == Keys.Return) ||
                                (e.Key == Keys.Tab))
                            {
                                if (grdDmdSalesList.ActiveCell != null)
                                {
                                    if (grdDmdSalesList.ActiveCell.Row.Index == grdDmdSalesList.Rows.Count - 1)
                                    {
                                        if (this.ckdDetailDmdSalesList.Checked)
                                        {
                                            if (grdDmdSalesList.ActiveCell.Column.Key == InputDepositNormalTypeAcs.ctDepositAlwBtn)
                                            {
                                                e.NextCtrl = this.btnAllAwl;
                                            }
                                            else
                                            {
                                                // 次のセルにフォーカス遷移
                                                e.NextCtrl = null;
                                                grdDmdSalesList.PerformAction(UltraGridAction.NextCellByTab);
                                            }
                                        }
                                        else
                                        {
                                            if (grdDmdSalesList.Rows[grdDmdSalesList.ActiveCell.Row.Index].Cells[InputDepositNormalTypeAcs.ctAlwCheck].Text == "True")
                                            {
                                                if (grdDmdSalesList.ActiveCell.Column.Key == InputDepositNormalTypeAcs.ctDepositAllowance_Alw)
                                                {
                                                    e.NextCtrl = this.btnAllAwl;
                                                }
                                                else
                                                {
                                                    // 次のセルにフォーカス遷移
                                                    e.NextCtrl = null;
                                                    grdDmdSalesList.PerformAction(UltraGridAction.NextCellByTab);
                                                }
                                            }
                                            else
                                            {
                                                if (grdDmdSalesList.ActiveCell.Column.Key == InputDepositNormalTypeAcs.ctAlwCheck)
                                                {
                                                    e.NextCtrl = this.btnAllAwl;
                                                }
                                                else
                                                {
                                                    // 次のセルにフォーカス遷移
                                                    e.NextCtrl = null;
                                                    grdDmdSalesList.PerformAction(UltraGridAction.NextCellByTab);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        // 次のセルにフォーカス遷移
                                        e.NextCtrl = null;
                                        grdDmdSalesList.PerformAction(UltraGridAction.NextCellByTab);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (e.Key == Keys.Tab)
                            {
                                if ((grdDmdSalesList.ActiveCell.Row.Index == 0) &&
                                    (grdDmdSalesList.ActiveCell.Column.Key == InputDepositNormalTypeAcs.ctAlwCheck))
                                {
                                    e.NextCtrl = this.btnSearchDmdSales;
                                }
                                else
                                {
                                    // 前のセルにフォーカス遷移
                                    e.NextCtrl = null;
                                    grdDmdSalesList.PerformAction(UltraGridAction.PrevCellByTab);
                                }
                            }
                        }
                        break;
                    }
                // 入金内訳グリッド
                case "grdDepositKind":
                    {
                        if (e.ShiftKey == false)
                        {
                            if ((e.Key == Keys.Enter) || (e.Key == Keys.Tab))
                            {
                                if (this.grdDepositKind.ActiveCell == null)
                                {
                                    return;
                                }
                                this._notMouseMoveFlg = true;// ADD 2010/05/06 gejun for M1007A-手形データ追加
                                int rowIndex = this.grdDepositKind.ActiveCell.Row.Index;

                                //if (grdDepositKind.ActiveCell.Text != "")
                                //{
                                //    //--------------------------------------
                                //    // 現在のセルに値が入力されている場合
                                //    //--------------------------------------

                                //    // 金種区分取得
                                //    int depositKindDiv = (int)grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value;

                                //    // 金種区分が「102：振込」の場合
                                //    if (depositKindDiv == 102)
                                //    {
                                //        // 手数料にフォーカス設定
                                //        e.NextCtrl = this.edtFeeDeposit;
                                //        grdDepositKind.ActiveCell = null;
                                //        this.edtFeeDeposit.Focus();
                                //        return;
                                //    }
                                //    else if ((depositKindDiv == 105) || (depositKindDiv == 107))
                                //    {
                                //        e.NextCtrl = null;
                                //        grdDepositKind.PerformAction(UltraGridAction.NextCellByTab);
                                //        grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                                //        return;
                                //    }
                                //    else
                                //    {
                                //        if (rowIndex == grdDepositKind.Rows.Count - 1)
                                //        {
                                //            // 最終行
                                //            e.NextCtrl = this.edtFeeDeposit;
                                //            grdDepositKind.ActiveCell = null;
                                //            this.edtFeeDeposit.Focus();
                                //            return;
                                //        }
                                //        else
                                //        {
                                //            e.NextCtrl = null;
                                //            grdDepositKind.PerformAction(UltraGridAction.NextCellByTab);
                                //            grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                                //            return;
                                //        }
                                //    }
                                //}
                                //else
                                //{
                                //    //--------------------------------------
                                //    // 現在のセルの値が空白の場合
                                //    //--------------------------------------

                                //    if (rowIndex == grdDepositKind.Rows.Count - 1)
                                //    {
                                //        // 最終行
                                //        e.NextCtrl = this.edtFeeDeposit;
                                //        grdDepositKind.ActiveCell = null;
                                //        this.edtFeeDeposit.Focus();
                                //        return;
                                //    }
                                //    else
                                //    {
                                //        // 最終行以外
                                //        e.NextCtrl = null;
                                //        grdDepositKind.PerformAction(UltraGridAction.NextCellByTab);
                                //        grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                                //        return;
                                //    }
                                //}
                                if (rowIndex == grdDepositKind.Rows.Count - 1 || (rowIndex == 1 && grdDepositKind.ActiveCell.Text != ""&&
                                 grdDepositKind.ActiveCell.Column.Index == 3 && e.Key == Keys.Enter)) //Add by 陳建明 2011/11/28 for Redmine#7955
                                //if (rowIndex == grdDepositKind.Rows.Count - 1 || rowIndex == 1) //Add by 陳建明 2011/11/18 for Redmine#7955 //Del by 陳建明 2011/11/28 for Redmine#7955
                                //if (rowIndex == grdDepositKind.Rows.Count - 1) Del by 陳建明 2011/11/18 for Redmine#7955
                                {
                                    // 最終行
                                    e.NextCtrl = this.edtFeeDeposit;
                                    grdDepositKind.ActiveCell = null;
                                    this.edtFeeDeposit.Focus();
                                    return;
                                }
                                else
                                {
                                    // 最終行以外
                                    e.NextCtrl = null;
                                    grdDepositKind.PerformAction(UltraGridAction.NextCellByTab);
                                    grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                                    return;
                                }
                            }
                        }
                        else
                        {
                            if (e.Key == Keys.Tab)
                            {
                                if (this.grdDepositKind.ActiveCell == null)
                                {
                                    return;
                                }

                                this._notMouseMoveFlg = true;// ADD 2010/05/06 gejun for M1007A-手形データ追加

                                int rowIndex = this.grdDepositKind.ActiveCell.Row.Index;
                                int columnIndex = this.grdDepositKind.ActiveCell.Column.Index;

                                if ((rowIndex == 0) && (columnIndex == 3))
                                {
                                    e.NextCtrl = edtDepositDate;
                                }
                                else
                                {
                                    e.NextCtrl = null;
                                    grdDepositKind.PerformAction(UltraGridAction.PrevCellByTab);
                                }
                            }
                        }
                        this._notMouseMoveFlg = false;// ADD 2010/05/06 gejun for M1007A-手形データ追加
                        break;
                    }
                case "btnSearchDeposit":
                    {
                        if (e.ShiftKey == false)
                        {
                            if ((e.Key == Keys.Tab) || (e.Key == Keys.Enter))
                            {
                                if (this.grdDepositList.Rows.Count == 0)
                                {
                                    e.NextCtrl = cmbDepositFontSize;
                                }
                                else
                                {
                                    e.NextCtrl = null;
                                    this.grdDepositList.Focus();
                                    this.grdDepositList.Rows[0].Activate();
                                }
                            }
                        }
                        break;
                    }
                case "grdDepositList":
                    {
                        if (e.ShiftKey == false)
                        {
                            if ((e.Key == Keys.Tab) || (e.Key == Keys.Enter))
                            {
                                if (this.grdDepositList.Rows.Count == 0)
                                {
                                    return;
                                }
                                if (this.grdDepositList.ActiveRow == null)
                                {
                                    return;
                                }

                                grdDepositList_DoubleClickRow(this.grdDepositList, new DoubleClickRowEventArgs(this.grdDepositList.ActiveRow, RowArea.CellArea));

                                if ((this.edtDepositDate.Enabled == true) && (this.edtDepositDate.ReadOnly == false))
                                {
                                    e.NextCtrl = this.edtDepositDate;
                                }
                                else
                                {
                                    e.NextCtrl = this.grdDepositList;
                                }
                            }
                        }
                        //else
                        //{
                        //    if (e.Key == Keys.Tab)
                        //    {
                        //        if (this.grdDepositList.ActiveRow == null)
                        //        {
                        //            return;
                        //        }

                        //        if (this.grdDepositList.ActiveRow.Index == 0)
                        //        {
                        //            e.NextCtrl = this.btnSearchDeposit;
                        //        }
                        //        else
                        //        {
                        //            e.NextCtrl = null;
                        //            this.grdDepositList.Rows[this.grdDepositList.ActiveRow.Index - 1].Activate();
                        //        }
                        //    }
                        //}
                        return;
                    }
                case "cmbDepositFontSize":
                    {
                        if (e.ShiftKey == true)
                        {
                            if (e.Key == Keys.Tab)
                            {
                                if (this.grdDepositList.Rows.Count == 0)
                                {
                                    e.NextCtrl = this.btnSearchDeposit;
                                }
                                else
                                {
                                    e.NextCtrl = this.grdDepositList;
                                    this.grdDepositList.Focus();
                                    this.grdDepositList.Rows[this.grdDepositList.Rows.Count - 1].Activate();
                                }
                            }
                        }
                        break;
                    }
                case "edtOutline":
                    {
                        if (e.ShiftKey == false)
                        {
                            // 2009.04.02 30413 犬飼 Enterで保存処理実行を追加 >>>>>>START
                            //if ((e.Key == Keys.Tab) || (e.Key == Keys.Enter))
                            if (e.Key == Keys.Tab)
                            {
                                //e.NextCtrl = e.PrevCtrl; // DEL 2012/09/21 田建委 redmine#32415
                                e.NextCtrl = tEdit_EmployeeCode; // ADD 2012/09/21 田建委 redmine#32415
                            }
                            else if (e.Key == Keys.Enter)
                            {
                                //----- DEL 2012/09/21 田建委 redmine#32415 ---------->>>>>
                                //e.NextCtrl = e.PrevCtrl;

                                //if (this._buttonSave)
                                //{
                                //    DialogResult dr = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION,
                                //                                    "SFUKK01403U",
                                //                                    "登録してもよろしいですか？",
                                //                                    0,
                                //                                    MessageBoxButtons.YesNo);
                                //    if (dr == DialogResult.Yes)
                                //    {
                                //        e.NextCtrl = null;
                                //        // 保存処理実行
                                //        this.SaveDepositProc();
                                //    }
                                //}
                                //----- DEL 2012/09/21 田建委 redmine#32415 ----------<<<<<
                                e.NextCtrl = tEdit_EmployeeCode; // ADD 2012/09/21 田建委 redmine#32415
                            }
                            // 2009.04.02 30413 犬飼 Enterで保存処理実行を追加 <<<<<<END
                            else if (e.Key == Keys.Right)
                            {
                                if (this.tabList.Tabs[1].Active)
                                {
                                    e.NextCtrl = detSearchSlipDateStart;
                                }
                            }
                        }
                        break;
                    }
                //----- ADD 2012/09/21 田建委 redmine#32415 ---------->>>>>
                case "tEdit_EmployeeCode": // 発行者コード
                    {
                        string inputValue = tEdit_EmployeeCode.Text;

                        string code;
                        bool status = ReadSalesInputName(out code);

                        if (status == true)
                        {
                            // 名称表示
                            if (!string.IsNullOrEmpty(_swSalesInputCode))
                            {
                                this.tEdit_EmployeeCode.Text = this._swSalesInputCode.Trim().PadLeft(4, '0');
                                this.tEdit_SalesInputName.Text = this._swSalesInputName;
                            }
                            else
                            {
                                this.tEdit_EmployeeCode.Clear();
                                this.tEdit_SalesInputName.Clear();
                            }

                            if (!e.ShiftKey)
                            {
                                switch (e.Key)
                                {
                                    case Keys.Tab:
                                    case Keys.Return:
                                        {
                                            e.NextCtrl = uButton_SalesInputCode;
                                        }
                                        break;
                                }
                            }
                            else
                            {
                                switch (e.Key)
                                {
                                    case Keys.Return:
                                    case Keys.Tab:
                                        {
                                            e.NextCtrl = edtOutline;
                                        }
                                        break;
                                }
                            }
                        }
                        else
                        {
                            this.tEdit_EmployeeCode.Clear();
                            this.tEdit_SalesInputName.Clear();

                            uButton_SalesInputCode_Click(tEdit_EmployeeCode, new EventArgs());

                            e.NextCtrl = e.PrevCtrl;
                        }
                        break;
                    }
                case "uButton_SalesInputCode": // 発行者ガイド
                    {
                        if (e.ShiftKey == false)
                        {
                            if (e.Key == Keys.Tab)
                            {
                                e.NextCtrl = e.PrevCtrl;
                            }
                            else if (e.Key == Keys.Enter)
                            {
                                e.NextCtrl = e.PrevCtrl;

                                if (this._buttonSave)
                                {
                                    DialogResult dr = TMsgDisp.Show(emErrorLevel.ERR_LEVEL_QUESTION,
                                                                    "SFUKK01403U",
                                                                    "登録してもよろしいですか？",
                                                                    0,
                                                                    MessageBoxButtons.YesNo);
                                    if (dr == DialogResult.Yes)
                                    {
                                        e.NextCtrl = null;
                                        // 保存処理実行
                                        this.SaveDepositProc();
                                    }
                                }
                            }
                            else if (e.Key == Keys.Right)
                            {
                                if (this.tabList.Tabs[1].Active)
                                {
                                    e.NextCtrl = detSearchSlipDateStart;
                                }
                            }
                        }
                        break;
                    }
                //----- ADD 2012/09/21 田建委 redmine#32415 ----------<<<<<
            }

            if (e.NextCtrl == null)
            {
                return;
            }

            switch (e.NextCtrl.Name)
            {
                // 入金内訳グリッド
                case "grdDepositKind":
                    {
                        if (e.ShiftKey == false)
                        {
                            if ((e.Key == Keys.Tab) || (e.Key == Keys.Enter) || (e.Key == Keys.Down))
                            {
                                if ((this.grdDepositKind.Rows.Count == 0) || 
                                    (this.grdDepositKind.Rows[0].Activation == Activation.Disabled))
                                {
                                    e.NextCtrl = edtFeeDeposit;
                                    return;
                                }
                            }
                        }
                        else
                        {
                            if ((e.Key == Keys.Tab) || (e.Key == Keys.Up) || (e.Key == Keys.Left))
                            {
                                if ((this.grdDepositKind.Rows.Count == 0) ||
                                    (this.grdDepositKind.Rows[0].Activation == Activation.Disabled))
                                {
                                    e.NextCtrl = edtDepositDate;
                                    return;
                                }
                            }
                        }

                        // 金種区分取得
                        int depositKindDiv = (int)grdDepositKind.DisplayLayout.Rows[grdDepositKind.Rows.Count - 1].Cells[DepositRelDataAcs.ctDepositKindDiv].Value;

                        if (e.ShiftKey == false)
                        {
                            if ((e.Key == Keys.Tab) || (e.Key == Keys.Enter) || (e.Key == Keys.Down) || (e.Key == Keys.Left))
                            {
                                e.NextCtrl = null;
                                this.grdDepositKind.DisplayLayout.Rows[0].Cells[3].Activate();
                                this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                                return;
                            }
                            else if (e.Key == Keys.Up)
                            {
                                e.NextCtrl = null;
                                this.grdDepositKind.DisplayLayout.Rows[grdDepositKind.Rows.Count - 1].Cells[3].Activate();
                                this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                                return;
                            }
                        }
                        else
                        {
                            if (e.Key == Keys.Tab)
                            {
                                if ((depositKindDiv == 105) || (depositKindDiv == 107))
                                {
                                    e.NextCtrl = null;
                                    this.grdDepositKind.DisplayLayout.Rows[grdDepositKind.Rows.Count - 1].Cells[6].Activate();
                                    this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                                    return;
                                }
                                else
                                {
                                    e.NextCtrl = null;
                                    this.grdDepositKind.DisplayLayout.Rows[grdDepositKind.Rows.Count - 1].Cells[3].Activate();
                                    this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                                    return;
                                }
                            }
                        }
                    }
                    break;
                case "DepoSlipDateClrDiv_tComboEditor":
                    {
                        if (e.ShiftKey == true)
                        {
                            if (this.tabList.Tabs[0].Active)
                            {
                                e.NextCtrl = ckdAllowanceDepositList;
                            }
                            else
                            {
                                e.NextCtrl = ckdDetailDmdSalesList;
                            }
                            return;
                        }
                        if (e.Key == Keys.Enter || e.Key == Keys.Tab)
                        {
                            e.NextCtrl = this.tNedit_CustomerCode;
                            return;
                        }
                    }
                    break;
                case "grdDepositList":
                    {
                        if (e.ShiftKey == false)
                        {
                            if (e.Key == Keys.Down)
                            {
                                if (this.grdDepositList.Rows.Count == 0)
                                {
                                    e.NextCtrl = cmbDepositFontSize;
                                }
                                else
                                {
                                    e.NextCtrl = null;
                                    this.grdDepositList.Focus();
                                    this.grdDepositList.Rows[0].Activate();
                                }
                            }
                            else if (e.Key == Keys.Up)
                            {
                                if (this.grdDepositList.Rows.Count == 0)
                                {
                                    e.NextCtrl = btnSearchDeposit;
                                }
                                else
                                {
                                    e.NextCtrl = null;
                                    this.grdDepositList.Focus();
                                    this.grdDepositList.Rows[this.grdDepositList.Rows.Count - 1].Activate();
                                }
                            }
                            else if (e.Key == Keys.Right)
                            {
                                e.NextCtrl = detDepositDateStart;
                            }
                        }
                        break;
                    }
                case "grdDmdSalesList":
                    {
                        if (e.ShiftKey == false)
                        {
                            switch (e.Key)
                            {
                                case Keys.Tab:
                                case Keys.Enter:
                                case Keys.Down:
                                    {
                                        if (grdDmdSalesList.Rows.Count == 0)
                                        {
                                            e.NextCtrl = btnAllAwl;
                                            return;
                                        }

                                        this.grdDmdSalesList.Rows[0].Cells[InputDepositNormalTypeAcs.ctAlwCheck].Activate();
                                        this.grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
                                        break;
                                    }
                                case Keys.Up:
                                    {
                                        if (grdDmdSalesList.Rows.Count == 0)
                                        {
                                            if (e.PrevCtrl == btnAllAwl)
                                            {
                                                e.NextCtrl = btnSearchDmdSales;
                                            }
                                            else
                                            {
                                                e.NextCtrl = btnAllAwl;
                                            }
                                            return;
                                        }

                                        this.grdDmdSalesList.Rows[this.grdDmdSalesList.Rows.Count - 1].Cells[InputDepositNormalTypeAcs.ctAlwCheck].Activate();
                                        this.grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
                                        break;
                                    }
                                case Keys.Right:
                                    {
                                        e.NextCtrl = detSearchSlipDateStart;
                                        break;
                                    }
                            }
                        }
                        else
                        {
                            if (e.Key == Keys.Tab)
                            {
                                if (grdDmdSalesList.Rows.Count == 0)
                                {
                                    return;
                                }

                                if (this.ckdDetailDmdSalesList.Checked)
                                {
                                    this.grdDmdSalesList.Rows[this.grdDmdSalesList.Rows.Count - 1].Cells[InputDepositNormalTypeAcs.ctDepositAlwBtn].Activate();
                                    this.grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
                                }
                                else
                                {
                                    if (this.grdDmdSalesList.Rows[this.grdDmdSalesList.Rows.Count - 1].Cells[InputDepositNormalTypeAcs.ctAlwCheck].Text == "True")
                                    {
                                        this.grdDmdSalesList.Rows[this.grdDmdSalesList.Rows.Count - 1].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activate();
                                        this.grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
                                    }
                                    else
                                    {
                                        this.grdDmdSalesList.Rows[this.grdDmdSalesList.Rows.Count - 1].Cells[InputDepositNormalTypeAcs.ctAlwCheck].Activate();
                                        this.grdDmdSalesList.PerformAction(UltraGridAction.EnterEditMode);
                                    }
                                }
                                
                            }
                        }
                    }
                    break;
            }
        }

        # endregion

        //----- ADD 2012/09/21 田建委 redmine#32415 ---------->>>>>
        /// <summary>
        /// 発行者名称取得
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <remarks>
        /// <br>Note　　　  : 発行者名称取得を行う。 </br>
        /// <br>Programmer  : 田建委</br>
        /// <br>Date        : 2012/09/21</br>
        /// <br>管理番号    : 2012/10/17配信分</br>
        /// <br>              Redmine#32415 発行者の追加対応</br>
        /// </remarks>
        private bool ReadSalesInputName(out string code)
        {
            // 入力値を取得
            string inputValue = this.tEdit_EmployeeCode.Text.Trim();
            code = inputValue;

            // 空でなければ処理開始
            if (!string.IsNullOrEmpty(inputValue))
            {
                try
                {
                    // 入力値が変わっていた場合のみコード変換
                    if (inputValue != this._swSalesInputCode)
                    {
                        // コードから名称へ変換
                        Employee employeeInfo;
                        int status = this._employeeAcs.Read(out employeeInfo, this.enterpriseCode, inputValue);
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            this._swSalesInputCode = inputValue;
                            this._swSalesInputName = employeeInfo.Name;
                            code = _swSalesInputCode;
                            return true;
                        }
                        else
                        {
                            // 戻す
                            code = uiSetControl1.GetZeroPadCanceledText(tEdit_EmployeeCode.Name, _swSalesInputCode);
                            return false;
                        }
                    }
                    return true;
                }
                catch
                {
                    // 戻す
                    code = uiSetControl1.GetZeroPadCanceledText(tEdit_EmployeeCode.Name, _swSalesInputCode);
                    return false;
                }
            }
            else
            {
                this._swSalesInputCode = string.Empty;
                this._swSalesInputName = string.Empty;
                code = string.Empty;
                return true;
            }
        }
        //----- ADD 2012/09/21 田建委 redmine#32415 ----------<<<<<

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		/// <summary>
		/// キーコントロール イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : キーが押された時に発生します。 </br>
		/// <br>Programmer  : 97036 amami</br>
		/// <br>Date        : 2005.07.21</br>
		/// </remarks>
		private void tRetKeyControl1_ChangeFocus(object sender, ChangeFocusEventArgs e)
		{
            // 2007.10.10 add start ----------------------------------------------------->>
            // 入金先コードを入力した時点で検索
            if ((e.PrevCtrl == tNedit_CustomerCode) && (this.tNedit_CustomerCode.GetInt() != 0))
            {
                // 管理拠点コード取得(得意先マスタ)
                string sectionNm = string.Empty;
                CustomerInfo customerInfo;
                int status = this._customerInfoAcs.ReadDBData(this.enterpriseCode, this.tNedit_CustomerCode.GetInt(), true, out customerInfo);

                // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
                if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    this.edtCustomerName.Clear();
                    this.edtTotalDay.Clear();
                    return;
                }
                // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 請求計上拠点の取得
                    // --- CHG 2008/06/26 --------------------------------------------------------------------->>>>>
                    //SecInfoSet secInfoSet;
                    //_secInfoAcs.GetSecInfo(customerInfo.MngSectionCode, SecInfoAcs.CtrlFuncCode.DemandAddUpSecCd, out secInfoSet);
                    //if (secInfoSet != null)
                    //{
                    //    this._selectSectionCode = secInfoSet.SectionCode;
                    //    sectionNm = secInfoSet.SectionGuideNm;
                    //}
                    foreach (SecInfoSet secInfoSet in _secInfoAcs.SecInfoSetList)
                    {
                        if (secInfoSet.SectionCode.Trim() == customerInfo.MngSectionCode.Trim())
                        {
                            this._selectSectionCode = secInfoSet.SectionCode;
                            sectionNm = secInfoSet.SectionGuideNm.Trim();
                        }
                    }
                    // --- CHG 2008/06/26 ---------------------------------------------------------------------<<<<<

                    // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
                    // 得意先名称設定
                    this.edtCustomerName.DataText = customerInfo.Name.Trim() + customerInfo.Name2.Trim();
                    // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<
                }
                // 拠点名称をフレームに渡す
                if (HandOverAddUpSecNameEvent != null) HandOverAddUpSecNameEvent(this, sectionNm);

                // 入金内容の変更状況チェック処理
                if (this.CheckUpdateData(true) != 0)
                {
                    return;
                }

                // 検索前データチェック処理
                if (tNedit_CustomerCode.GetInt() == 0)
                {
                    TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, "検索条件を指定して下さい。", 0, MessageBoxButtons.OK);
                    tNedit_CustomerCode.Focus();
                    return;
                }

                // オール検索前データチェック処理
                Control control;
                if (this.CheackDataBeforeAllSearch(out control) == false)
                {
                    if (control != null)
                    {
                        control.Focus();
                    }
                    return;
                }

                int customerCode = tNedit_CustomerCode.GetInt();
                int depositSlipNo = 0;

                // 入金一覧タブを表示する
                tabList.Tabs["DepositTab"].Selected = true;

                try
                {
                    this.Cursor = Cursors.WaitCursor;

                    // データ検索前の画面設定処理
                    this.SearchBeforeDisplySetting(SearchMode.AllSearch);

                    int st;
                    string message;
                    if (customerCode != 0)
                    {
                        // 検索処理(得意先コード指定)
                        st = this.SearchCustomerMode(SearchMode.AllSearch, customerCode, depositSlipNo, out message);
                    }
                    else
                    {
                        // 検索処理(入金番号指定)
                        st = this.SearchDepositSlipNoMode(SearchMode.AllSearch, depositSlipNo, out message);
                    }

                    // データ検索後の画面設定処理
                    this.SearchAfterDisplySetting(SearchMode.AllSearch, st);

                    if (st == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                    {
                        TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO, this.Name, message, 0, MessageBoxButtons.OK);
                        tNedit_CustomerCode.Focus();
                    }
                    else if (st != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        // エラー発生
                        TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP, this.Name, "入金伝票の読込処理に失敗しました。" + "\r\n\r\n" + message, st, MessageBoxButtons.OK);
                    }
                    else
                    {
                        //// 新規入金伝票入力準備処理
                        // イベントの無効化
                        GridEventManager eventManager = this.grdDepositList.EventManager;
                        eventManager.SetEnabled(GridEventIds.AfterRowActivate, false);
                        try
                        {
                            if (this.grdDepositList.ActiveRow != null)
                            {
                                this.grdDepositList.ActiveRow.Selected = false;
                            }
                            else
                            {
                                if (this.grdDepositList.Rows.Count > 0)
                                {
                                    this.grdDepositList.Rows[0].Selected = false;
                                }
                            }

                            // 新規入金伝票入力準備処理
                            this.NewDepositStandby();

                            // 請求売上情報データセット再登録処理
                            inputDepositNormalTypeAcs.ResetDsDmdSalesInfo();
                        }
                        finally
                        {
                            eventManager.SetEnabled(GridEventIds.AfterRowActivate, true);
                        }
                    }
                }
                finally 
                {
                    this.Cursor = Cursors.Default;
                }
            }
            // 2007.10.10 add end -------------------------------------------------------<<

            // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
            if ((e.PrevCtrl == this.tNedit_CustomerCode) && (this.tNedit_CustomerCode.GetInt() == 0))
            {
                // 得意先名称初期化
                this.edtCustomerName.Clear();
                return;
            }
            // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<

			// 受注引当グリッドの時
			if (e.PrevCtrl == grdDmdSalesList)
			{
				// リターンキーの時
				if ((e.Key == Keys.Return) ||
					(e.Key == Keys.Tab))
				{
					e.NextCtrl = null;

					if (grdDmdSalesList.ActiveCell != null)
					{
						// 次のセルにフォーカス遷移
						e.NextCtrl = null;
						grdDmdSalesList.PerformAction(UltraGridAction.NextCell);
					}
				}
			}

            if (e.PrevCtrl == grdDepositKind)
            {
                if (e.Key == Keys.Enter)
                {
                    e.NextCtrl = null;

                    if (grdDepositKind.ActiveCell != null)
                    {
                        e.NextCtrl = null;
                        grdDepositKind.PerformAction(UltraGridAction.NextCell);
                    }
                }
            }
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        # region private class
        /// <summary>
		/// 請求金額情報取得クラス
		/// </summary>
		/// <remarks>
		/// <br>Note       : 請求金額情報を取得するクラスです。
		///                : 取得結果はコンストラクタ引数のコールバックメソッドにて返します。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.08.20</br>
		/// </remarks>
		private class GetCustDmdPrc
		{
			/// <summary>結果を返すためのコールバックデリゲート</summary>
			public delegate void Callback(DepositCustDmdPrc depositCustDmdPrc);

			/// <summary>デリゲートオブジェクト</summary>
			private Callback callbackDelegate;

			/// <summary>入金伝票入力画面(入金型)アクセスクラス</summary>
			private InputDepositNormalTypeAcs inputDepositNormalTypeAcs;

			/// <summary>得意先情報/得意先金額情報取得用パラメータ</summary>
			private InputDepositNormalTypeAcs.SearchCustomerParameter parameter;

			/// <summary>
			/// 請求金額情報取得クラス(別スレッド用)
			/// </summary>
			/// <param name="searchCustomerParameter">得意先情報/得意先金額情報取得用パラメータ</param>
			/// <param name="callback">Mainメソッド終了時コールバックメソッド</param>
			/// <remarks>
			/// <br>Note       : 使用するメンバの初期化を行います。</br>
			/// <br>Programmer : 97036 amami</br>
			/// <br>Date       : 2005.08.20</br>
			/// </remarks>
			public GetCustDmdPrc(InputDepositNormalTypeAcs.SearchCustomerParameter searchCustomerParameter, Callback callback)
			{
				// 入金伝票入力画面(入金型)アクセスクラス
				this.inputDepositNormalTypeAcs = new InputDepositNormalTypeAcs();

				// 得意先情報/得意先金額情報取得用パラメータ
				parameter = searchCustomerParameter;

				// コールバックメソッドのデリゲート登録
				callbackDelegate = callback;
			}

			/// <summary>
			/// メイン処理
			/// </summary>
			/// <remarks>
			/// <br>Note       : 請求金額情報の取得を行います。</br>
			/// <br>Programmer : 97036 amami</br>
			/// <br>Date       : 2005.07.21</br>
			/// </remarks>
			public void Main()
			{
				try
				{
					// 入金関連データ取得処理（得意先コード指定）
					DepositCustDmdPrc depositCustDmdPrc;
					string message;
					int st = inputDepositNormalTypeAcs.ReadCustomDemandInfo(parameter, out depositCustDmdPrc, out message);
					if (st == 0)
					{
						// コールバックデリゲートを実行して結果を返す → DisplayCustDmdPrcメソッドコールバック
						if (callbackDelegate != null)
							callbackDelegate(depositCustDmdPrc);
					}
				}
				catch (ThreadAbortException)
				{
					// スレッド中断時
				}
				catch (Exception)
				{
					// その他エラー時  たいした処理ではないので、エラーがおきても無視
				}

			}
        }

        #region 2007.10.10 del
        // 2007.10.10 del start -------------------------------------------------------------->>
        ///// <summary>
        ///// クレジット会社名称取得クラス
        ///// </summary>
        ///// <remarks>
        ///// <br>Note       : クレジット会社名称を取得するクラスです。
        /////                : 取得結果はコンストラクタ引数のコールバックメソッドにて返します。</br>
        ///// <br>Programmer : 97036 amami</br>
        ///// <br>Date       : 2005.07.21</br>
        ///// </remarks>
        //private class GetCreditCompanyNamePrc
        //{
        //    /// <summary>結果を返すためのコールバックデリゲート</summary>
        //    public delegate void Callback(string creditCompanyCode, string creditCompanyName);

        //    /// <summary>デリゲートオブジェクト</summary>
        //    private Callback callbackDelegate;

        //    /// <summary>クレジット会社テーブルアクセスクラス</summary>
        //    private CreditCmpAcs creditCmpAcs;

        //    /// <summary>情報取得用パラメータ 企業コード</summary>
        //    private string _enterpriseCode;

        //    /// <summary>情報取得用パラメータ クレジット会社コード</summary>
        //    private string _creditCompanyCode;

        //    /// <summary>
        //    /// クレジット会社名称取得クラス
        //    /// </summary>
        //    /// <param name="enterpriseCode">情報取得用パラメータ 企業コード</param>
        //    /// <param name="creditCompanyCode">情報取得用パラメータ クレジット会社コード</param>
        //    /// <param name="callback">Mainメソッド終了時コールバックメソッド</param>
        //    /// <remarks>
        //    /// <br>Note       : 使用するメンバの初期化を行います。</br>
        //    /// <br>Programmer : 97036 amami</br>
        //    /// <br>Date       : 2005.07.21</br>
        //    /// </remarks>
        //    public GetCreditCompanyNamePrc(string enterpriseCode, string creditCompanyCode, Callback callback)
        //    {
        //        // クレジット会社テーブルアクセスクラス
        //        this.creditCmpAcs = new CreditCmpAcs();

        //        // 情報取得用パラメータ
        //        _enterpriseCode		= enterpriseCode;
        //        _creditCompanyCode	= creditCompanyCode;

        //        // コールバックメソッドのデリゲート登録
        //        callbackDelegate = callback;
        //    }

        //    /// <summary>
        //    /// メイン処理
        //    /// </summary>
        //    /// <remarks>
        //    /// <br>Note       : クレジット会社名称の取得を行います。</br>
        //    /// <br>Programmer : 97036 amami</br>
        //    /// <br>Date       : 2005.07.21</br>
        //    /// </remarks>
        //    public void Main()
        //    {
        //        try
        //        {
        //            // クレジット会社取得
        //            CreditCmp creditCmp = new CreditCmp();
        //            int st = creditCmpAcs.Read(out creditCmp, _enterpriseCode, _creditCompanyCode);
        //            if (st == 0)
        //            {
        //                // コールバックデリゲートを実行して結果を返す → メソッドコールバック
        //                if (callbackDelegate != null)
        //                    callbackDelegate(_creditCompanyCode, creditCmp.CreditCompanyName);
        //            }
        //            else
        //            {
        //                // コールバックデリゲートを実行して結果を返す → メソッドコールバック
        //                if (callbackDelegate != null)
        //                    callbackDelegate("", "");
        //            }
        //        }
        //        catch (ThreadAbortException)
        //        {
        //            // スレッド中断時
        //        }
        //        catch (Exception)
        //        {
        //            // その他エラー時  たいした処理ではないので、エラーがおきても無視
        //        }

        //    }
        //}
        // 2007.10.10 del end ----------------------------------------------------------------<<
        #endregion 2007.10.10 del

        // 2007.10.10 add start -------------------------------------------------------------->>
        /// <summary>
        /// 銀行名称取得クラス
        /// </summary>
        /// <remarks>
        /// <br>Note       : 銀行名称を取得するクラスです。
        ///                : 取得結果はコンストラクタ引数のコールバックメソッドにて返します。</br>
        /// <br>Programmer : 20081 疋田 勇人</br>
        /// <br>Date       : 2007.10.10</br>
        /// </remarks>
        private class GetBankNamePrc
        {
            /// <summary>結果を返すためのコールバックデリゲート</summary>
            public delegate void Callback(string bankCode, string bankName);

            /// <summary>デリゲートオブジェクト</summary>
            private Callback callbackDelegate;

            /// <summary>ユーザーガイドアクセスクラス</summary>
            private UserGuideAcs userGuideAcs;

            /// <summary>情報取得用パラメータ 企業コード</summary>
            private string _enterpriseCode;

            /// <summary>情報取得用パラメータ 銀行コード</summary>
            private string _bankCode;

            /// <summary>
            /// 銀行名称取得クラス
            /// </summary>
            /// <param name="enterpriseCode">情報取得用パラメータ 企業コード</param>
            /// <param name="bankCode">情報取得用パラメータ 銀行コード</param>
            /// <param name="callback">Mainメソッド終了時コールバックメソッド</param>
            /// <remarks>
            /// <br>Note       : 使用するメンバの初期化を行います。</br>
            /// <br>Programmer : 20081 疋田 勇人</br>
            /// <br>Date       : 2007.10.10</br>
            /// </remarks>
            public GetBankNamePrc(string enterpriseCode, string bankCode, Callback callback)
            {
                // ユーザーガイドアクセスクラス
                this.userGuideAcs = new UserGuideAcs();

                // 情報取得用パラメータ
                _enterpriseCode	 = enterpriseCode;
                _bankCode	     = bankCode;

                // コールバックメソッドのデリゲート登録
                callbackDelegate = callback;
            }

            /// <summary>
            /// メイン処理
            /// </summary>
            /// <remarks>
            /// <br>Note       : 銀行名称の取得を行います。</br>
            /// <br>Programmer : 20081 疋田 勇人</br>
            /// <br>Date       : 2007.10.10</br>
            /// </remarks>
            public void Main()
            {
                try
                {
                    // 銀行取得
                    string guideName = "";
                    int iBankCode = 0;
                    iBankCode = Convert.ToInt32(_bankCode);
                    UserGdBd userGdBd = new UserGdBd();

                    int st = userGuideAcs.GetGuideName(out guideName, _enterpriseCode, 46, iBankCode);
                    
                    if (st == 0)
                    {
                        // コールバックデリゲートを実行して結果を返す → メソッドコールバック
                        if (callbackDelegate != null)
                            callbackDelegate(_bankCode, guideName);
                    }
                    else
                    {
                        // コールバックデリゲートを実行して結果を返す → メソッドコールバック
                        if (callbackDelegate != null)
                            callbackDelegate("", "");
                    }
                }
                catch (ThreadAbortException)
                {
                    // スレッド中断時
                }
                catch (Exception)
                {
                    // その他エラー時  たいした処理ではないので、エラーがおきても無視
                }

            }
        }
        // 2007.10.10 add end ----------------------------------------------------------------<<
   		# endregion

		# region public class
		/// <summary>
		/// 画面状態保持クラス
		/// </summary>
		/// <remarks>
		/// <br>Note       : 画面状態を保持する為の外部ＸＭＬファイルのクラスです。</br>
		/// <br>Programmer : 97036 amami</br>
		/// <br>Date       : 2005.07.21</br>
		/// </remarks>
		[Serializable]
		public class SFUKK01403UA_DisplayInfo
		{
			/// <summary>コンストラクタ</summary>
			public SFUKK01403UA_DisplayInfo()
			{
				_detailDepositList = 0;
				_allowanceDepositList = 0;
				_detailDmdSalesList = 0;
				_separateCost = 0;
			}

			/// <summary>入金一覧 詳細表示</summary>
			private Int32 _detailDepositList;
			/// <summary>入金一覧 引当内訳</summary>
			private Int32 _allowanceDepositList;
			/// <summary>受注一覧 詳細表示</summary>
			private Int32 _detailDmdSalesList;
			/// <summary>受注一覧 諸費用別引当</summary>
			private Int32 _separateCost;

			/// <summary>入金一覧 詳細表示 プロパティ</summary>
			public Int32 DetailDepositList
			{
				get { return _detailDepositList; }
				set { _detailDepositList = value; }
			}
			/// <summary>入金一覧 引当内訳 プロパティ</summary>
			public Int32 AllowanceDepositList
			{
				get { return _allowanceDepositList; }
				set { _allowanceDepositList = value; }
			}
			/// <summary>受注一覧 詳細表示 プロパティ</summary>
			public Int32 DetailDmdSalesList
			{
				get { return _detailDmdSalesList; }
				set { _detailDmdSalesList = value; }
			}
			/// <summary>受注一覧 諸費用別引当 プロパティ</summary>
			public Int32 SeparateCost
			{
				get { return _separateCost; }
				set { _separateCost = value; }
			}
		}
		# endregion

		# region Enum
		enum SearchMode
		{
			AllSearch = 0,
			LuncherSearch = 1,
			DepositSearch = 2,
			DmdSalesSearch = 3
		}
		# endregion

        #region 2008/06/26 DEL Partsman用に変更
        /* --- DEL 2008/06/26 --------------------------------------------------------------------->>>>>
		# region Debug
		private void ultraButton1_Click(object sender, System.EventArgs e)
		{
			SFUKK01403UZ frm = new SFUKK01403UZ();
			frm.Show();

			frm.DataSetBinding(selectedDepositCopyRow, selectedAllowanceCopyRows);

		}
		# endregion

		/// <summary>
		/// 得意先ガイドボタン クリックイベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="e">イベントパラメータ</param>
		/// <remarks>
		/// <br>Note　　　  : 得意先ガイドを起動します。 </br>
		/// <br>Programmer  : 18322 T.Kimura</br>
		/// <br>Date        : 2007.07.26</br>
		/// </remarks>
        private void btnCustomerGuid_Click(object sender, EventArgs e)
        {
            // SFTOK01370UA customerSearchForm = new SFTOK01370UA(SFTOK01370UA.SEARCHMODE_ACCEPT_WHOLE_SALE, SFTOK01370UA.EXECUTEMODE_GUIDE_AND_EDIT);  // 2007.10.10 del
            SFTOK01370UA customerSearchForm = new SFTOK01370UA(SFTOK01370UA.SEARCHMODE_CUSTOMER_ONLY, SFTOK01370UA.EXECUTEMODE_GUIDE_AND_EDIT);         // 2007.10.10 add

            customerSearchForm.CustomerSelect += new CustomerSelectEventHandler(this.CustomerSearchForm_CustomerSelect);
            customerSearchForm.ShowDialog(this);
            tNedit_CustomerCode.Focus();          // 2007.10.10 hikita add
        }

		/// <summary>
		/// 得意先選択時発生イベント
		/// </summary>
		/// <param name="sender">対象オブジェクト</param>
		/// <param name="customerSearchRet">得意先車両検索戻り値クラス</param>
		private void CustomerSearchForm_CustomerSelect(object sender, CustomerSearchRet customerSearchRet)
		{
            if (customerSearchRet == null)
            {
                this._cusotmerGuideSelected = false;
                return;
            }
            
			CustomerInfo customerInfo;
			int status = this._customerInfoAcs.ReadDBData(customerSearchRet.EnterpriseCode, customerSearchRet.CustomerCode, true, out customerInfo);
			if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
			{
				if (customerInfo == null)
				{
					TMsgDisp.Show(
						this,
						emErrorLevel.ERR_LEVEL_EXCLAMATION,
						this.Name,
						"選択した得意先は得意先情報入力が行われていない為、使用出来ません。",
						status,
						MessageBoxButtons.OK);

					return;
				}
			}
			else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
			{
				TMsgDisp.Show(
					this,
					emErrorLevel.ERR_LEVEL_EXCLAMATION,
					this.Name,
					"選択した得意先は既に削除されています。",
					status,
					MessageBoxButtons.OK);

				return;
			}
			else
			{
				TMsgDisp.Show(
					this,
					emErrorLevel.ERR_LEVEL_STOPDISP,
					this.Name,
					"得意先情報の取得に失敗しました。",
					status,
					MessageBoxButtons.OK);

				return;
			}

            if (customerSearchRet.CustomerCode != this._prevCustomerCode)
            {
                // 得意先コード設定
                tNedit_CustomerCode.SetInt(customerSearchRet.CustomerCode);
            }

            this._cusotmerGuideSelected = true;
		}
           --- DEL 2008/06/26 ---------------------------------------------------------------------<<<<<*/
        #endregion 2008/06/26 DEL Partsman用に変更

        // --- ADD 2008/06/26 --------------------------------------------------------------------->>>>>
        /// <summary>
        /// 得意先ガイドボタン クリックイベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : 得意先ガイドを起動します。 </br>
        /// <br>Programmer  : 30414 忍 幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// <br>Update Note : 2010/06/17 李占川 Redmine#9948の修正
        /// <br>Update Note : 2011/01/21 yangmj Redmine#18653の修正
        /// <br>Update Note : 2012/12/24 王君</br>
        /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
        /// <br>              Redmine#33741の対応</br>
        /// </remarks>
        private void btnCustomerGuid_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;

                this._cusotmerGuideSelected = false;

                // --- UPD 2011/01/21 ---------->>>>>
                //PMKHN04005UA customerSearchForm = new PMKHN04005UA(PMKHN04005UA.SEARCHMODE_CUSTOMER_ONLY, PMKHN04005UA.EXECUTEMODE_GUIDE_ONLY);

                //customerSearchForm.CustomerSelect += new PMKHN04005UA.CustomerSelectEventHandler(this.CustomerSearchForm_CustomerSelect);

                PMKHN04001UA customerSearchForm = new PMKHN04001UA(PMKHN04001UA.SEARCHMODE_CUSTOMER_ONLY, PMKHN04001UA.EXECUTEMODE_GUIDE_ONLY);
                customerSearchForm.CustomerSelect += new CustomerSelectEventHandler(this.CustomerSearchForm_CustomerSelect);
                // --- UPD 2011/01/21 ----------<<<<<
                customerSearchForm.ShowDialog(this);

                // フォーカス設定
                if (this._cusotmerGuideSelected == true)
                {
                    // 2011/05/16 Add >>>
                    // 得意先変更フラグを立てる
                    _customerChangeFlg = true;
                    // 2011/05/16 Add <<<

                    //GetDepositInfo(this.tNedit_CustomerCode.GetInt()); // DEL 王君 2012/12/24 Redmine#33741 　
                    GetDepositInfo(this.tNedit_CustomerCode.GetInt(), 0); // ADD 王君 2012/12/24 Redmine#33741 

                    // 2011/05/16 Add >>>
                    // 得意先変更フラグを削除し、入金情報を再計算する
                    GetDisplayDeposit(null, selectedDepositCopyRow, selectedAllowanceCopyRows);
                    _customerChangeFlg = false;
                    // 2011/05/16 Add <<<

                    // 入金日にフォーカスセット
                    // --- UPD 2010/06/08 ---------->>>>>
                    //this.edtDepositDate.Focus();
                    if (DepoSlipDateClrDiv_tComboEditor.SelectedIndex == 1)
                    {
                        // --- UPD 2010/06/17 ---------->>>>>
                        //this.grdDepositKind.DisplayLayout.Rows[0].Cells[3].Activate();
                        //this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);

                        if (_FirstStartFlag)
                        {
                            this.edtDepositDate.Focus();
                        }
                        else
                        {
                            this.grdDepositKind.DisplayLayout.Rows[0].Cells[3].Activate();
                            this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                        }
                        // --- UPD 2010/06/17 ----------<<<<<
                    }
                    else
                    {
                        this.edtDepositDate.Focus();
                    }
                    // --- UPD 2010/06/08 ----------<<<<<
                }
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// 得意先選択時発生イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="customerSearchRet">得意先車両検索戻り値クラス</param>
        /// <remarks>
        /// <br>Update Note : 2011/08/08 李占川 案件一覧連番921、redmine#23408の対応</br>
        /// <br>              得意先コードに「納入先」のコードを入力すると、エラー表示されます</br>
        /// </remarks>
        private void CustomerSearchForm_CustomerSelect(object sender, CustomerSearchRet customerSearchRet)
        {
            if (customerSearchRet == null)
            {
                this._cusotmerGuideSelected = false;
                return;
            }
            
            if (customerSearchRet.CustomerCode != this._prevCustomerCode)
            {
                CustomerInfo customerInfo;
                int status = GetCustomerInfo(out customerInfo, customerSearchRet.CustomerCode);
                if (status == 0)
                {
                    // --- ADD 2011/08/08 ---------->>>>>
                    if (customerInfo.IsCustomer != true)
                    {
                        #region 納入先入力
                        //-----------------------------------------------------------------------------
                        // 納入先入力
                        //-----------------------------------------------------------------------------
                        TMsgDisp.Show(
                            this,
                            emErrorLevel.ERR_LEVEL_INFO,
                            this.Name,
                            "納入先は入力できません。",
                            -1,
                            MessageBoxButtons.OK);
                        this.tNedit_CustomerCode.SetInt(this._customerCode);
                        this._cusotmerGuideSelected = false;
                        return;
                        #endregion
                    }
                    // --- ADD 2011/08/08 ----------<<<<<

                    // 得意先コード設定
                    this.tNedit_CustomerCode.SetInt(customerInfo.CustomerCode);

                    // 得意先略称取得
                    this.edtCustomerName.DataText = customerInfo.CustomerSnm.Trim();

                    // 請求先コードチェック
                    bool bStatus = CheckClaimCode(customerInfo);
                    if (!bStatus)
                    {
                        TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                          this.Name,
                                          "請求先に変更しました。",
                                          0,
                                          MessageBoxButtons.OK);

                        // 得意先コード
                        this._customerCode = customerInfo.CustomerCode;

                        ChangeCustomerCode(customerInfo.ClaimCode);
                    }
                    else
                    {
                        // 計上拠点取得
                        this._selectSectionCode = customerInfo.ClaimSectionCode.Trim();

                        // 消費税転嫁方式
                        this._consTaxLayMethod = customerInfo.ConsTaxLayMethod;

                        // 得意先コード
                        this._customerCode = customerInfo.CustomerCode;

                        // 請求先コード
                        this._claimCode = customerInfo.ClaimCode;

                        // 入金消込区分で判断
                        if (customerInfo.DepoDelCode == 0)
                        {
                            // 売上引当不可
                            this.tabList.Tabs[1].Enabled = false;
                        }
                        else
                        {
                            // 売上引当可
                            this.tabList.Tabs[1].Enabled = true;
                        }
                    }

                    this._prevCustomerCode = this._claimCode;
                }
            }

            this._cusotmerGuideSelected = true;
        }

        /// <summary>
        /// 請求先コードチェック処理
        /// </summary>
        /// <param name="customerInfo">得意先マスタ</param>
        /// <returns>ステータス(True:一致 Flase:不一致)</returns>
        private bool CheckClaimCode(CustomerInfo customerInfo)
        {
            if (customerInfo.CustomerCode == customerInfo.ClaimCode)
            {
                return (true);
            }
            else
            {
                return (false);
            }
        }

        /// <summary>
        /// 得意先コード変換処理
        /// </summary>
        /// <param name="claimCode">請求先コード</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Update Note : 2011/08/08 王君</br>
        /// <br>管理番号　　: 10806793-00 2013/03/13配信分</br>
        /// <br>            : Redmine#33741の対応</br>
        /// </remarks>
        private int ChangeCustomerCode(int claimCode)
        {
            // 得意先コードに請求先コードをセット
            this.tNedit_CustomerCode.SetInt(claimCode);

            CustomerInfo customerInfo;

            int status = GetCustomerInfo(out customerInfo, claimCode);
            if (status == 0)
            {
                // 得意先略称取得
                this.edtCustomerName.DataText = customerInfo.CustomerSnm.Trim();
                // ----- ADD 王君 2012/12/24 Redmine#33741 ----->>>>>
                if (customerInfo.IsCustomer != true)
                {
                    return -1;
                }
                else
                {
                    // ----- ADD 王君 2012/12/24 Redmine#33741 -----<<<<<

                    // 計上拠点取得
                    this._selectSectionCode = customerInfo.ClaimSectionCode.Trim();

                    // 消費税転嫁方式
                    this._consTaxLayMethod = customerInfo.ConsTaxLayMethod;

                    // 請求先コード
                    this._claimCode = customerInfo.ClaimCode;

                    // 入金消込区分で判断
                    if (customerInfo.DepoDelCode == 0)
                    {
                        // 売上引当不可
                        this.tabList.Tabs[1].Enabled = false;
                    }
                    else
                    {
                        // 売上引当可
                        this.tabList.Tabs[1].Enabled = true;
                    }
                } // ADD 王君 2012/12/24 Redmine#33741
            }

            return (status);
        }

        /// <summary>
        /// カンマ削除処理
        /// </summary>
        /// <param name="targetText">カンマ削除前テキスト</param>
        /// <param name="retText">カンマ削除済みテキスト</param>
        /// <remarks>
        /// <br>Note		: 対象のテキストからカンマを削除します。</br>
        /// <br>Programmer	: 30414　忍　幸史</br>
        /// <br>Date		: 2008/06/26</br>
        /// </remarks>
        private string RemoveComma(string targetText)
        {
            string retText = "";

            // セル値編集用にカンマ削除
            for (int i = targetText.Length - 1; i >= 0; i--)
            {
                if (targetText[i].ToString() == ",")
                {
                    targetText = targetText.Remove(i, 1);
                }
            }

            retText = targetText;

            return retText;
        }

        /// <summary>
        /// 入金合計算出処理
        /// </summary>
        /// <remarks>
        /// <br>Note		: 入金合計額を算出し表示します。</br>
        /// <br>Programmer	: 30414　忍　幸史</br>
        /// <br>Date		: 2008/06/26</br>
        /// <br>UpdateNote  : 2009/12/16 李占川 ＰＭ．ＮＳ保守依頼④</br>
        /// <br>              金額入力時のｶｰｿﾙ遷移が遅いのを修正</br>
        /// <br>Note		: Redmine#47015の#20 今回入金額計算の追加対応</br>
        /// <br>Programmer	: 時シン</br>
        /// <br>Date		: 2015/09/04</br>
        /// </remarks>
        private void SetDepositTotal()
        {
            if (this._searchFlg == false)
            {
                return;
            }

            // 入金金額 共通 変更処理
            double total;
            double detailTotal = 0;
            double pureTotal = 0; // ADD 2015/09/04 時シン Redmine#47015の#20 今回入金額計算の追加対応
            for (int rowIndex = 0; rowIndex < this.grdDepositKind.Rows.Count; rowIndex++)
            {
                if ((this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == DBNull.Value) ||
                    ((string)this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == ""))
                {
                    pureTotal += 0 - double.Parse(this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag.ToString()); // ADD 2015/09/04 時シン Redmine#47015の#20 今回入金額計算の追加対応
                    continue;
                }

                double targetNum = double.Parse((string)this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value);
                pureTotal += targetNum - double.Parse(this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Tag.ToString()); // ADD 2015/09/04 時シン Redmine#47015の#20 今回入金額計算の追加対応
                detailTotal += targetNum;
            }

            // 手数料
            double feeDeposit = 0;
            if (this.edtFeeDeposit.GetInt() != 0)
            {
                feeDeposit = double.Parse(this.edtFeeDeposit.DataText.Trim());
            }

            // 値引
            double discountDeposit = 0;
            if (this.edtDiscountDeposit.GetInt() != 0)
            {
                discountDeposit = double.Parse(this.edtDiscountDeposit.DataText.Trim());
            }

            // FIXME:入金合計
            total = detailTotal + feeDeposit + discountDeposit;
            //edtDepositTotal.SetValue(total);  // DEL 2009/12/16
            edtDepositTotal.DataText = total.ToString(); // ADD 2009/12/16

            //----- ADD 2015/09/04 時シン Redmine#47015の#20 今回入金額計算の追加対応 ---------->>>>>
            pureTotal += feeDeposit + discountDeposit;
            // 手数料
            Int64 orgFeeDeposit;
            // 値引
            Int64 orgDiscountDeposit;
            // 前回の手数料と値引の取得
            this.GetOrgFeeDiscountDeposit(out orgFeeDeposit, out orgDiscountDeposit);
            // 今回入金金額
            Int64 thisTimeDmdTtl = this._depositCustDmdPrc.ThisTimeDmdNrml - orgFeeDeposit - orgDiscountDeposit + (long)pureTotal;
            //----- ADD 2015/09/04 時シン Redmine#47015の#20 今回入金額計算の追加対応 ----------<<<<<

            // 今回入金金額
            //Int64 thisTimeDmdTtl = this._depositCustDmdPrc.ThisTimeDmdNrml + (long)total; // DEL 2015/09/04 時シン Redmine#47015の#20 今回入金額計算の追加対応
            this.lbl_ThisTimeDmdTtl.Text = thisTimeDmdTtl.ToString("###,##0");
            // 差引残高
            Int64 balance = this._depositCustDmdPrc.AcpOdrTtl3TmBfBlDmd + this._depositCustDmdPrc.AcpOdrTtl2TmBfBlDmd + this._depositCustDmdPrc.LastTimeDemand - thisTimeDmdTtl;
            this.lbl_Balance.Text = balance.ToString("###,##0");
            // 更新後残高
            this.lbl_AfCalDemandPrice.Text = (balance + this._depositCustDmdPrc.OfsThisTimeSales + this._depositCustDmdPrc.OfsThisSalesTax).ToString("###,##0");
        }

        //----- ADD 2015/09/04 時シン Redmine#47015の#20 今回入金額計算の追加対応 ---------->>>>>
        /// <summary>
        /// 前回手数料と値引の取得処理
        /// </summary>
        /// <remarks>
        /// <br>Note　　　  : 前回手数料と値引の取得処理 </br>
        /// <br>Programmer  : 時シン</br>
        /// <br>Date        : 2015/09/04</br>
        /// </remarks>
        private void GetOrgFeeDiscountDeposit(out Int64 orgFeeDeposit, out Int64 orgDiscountDeposit)
        {
            // 前回の手数料
            orgFeeDeposit = 0;
            // 前回の値引
            orgDiscountDeposit = 0;
            // 入金伝票番号
            Int32 depositSlipNo = this.edtDepositSlipNo.GetInt();
            // 入金伝票選択の時
            if (depositSlipNo != 0)
            {
                // 入金情報テーブル
                DataTable ctDepositDataTable = inputDepositNormalTypeAcs.GetDsDepositInfo().Tables[InputDepositNormalTypeAcs.ctDepositDataTable];
                // 入金伝票番号より、該当するレコードの取得
                string rowFilter = InputDepositNormalTypeAcs.ctDepositSlipNo + "=" + depositSlipNo.ToString();
                DataRow[] dataRow = ctDepositDataTable.Select(rowFilter);
                // レコードが取得できる場合
                if (dataRow != null && dataRow.Length > 0)
                {
                    DataRow depositRow = dataRow[0];
                    // 元の手数料
                    string ctFeeDeposit = depositRow[InputDepositNormalTypeAcs.ctFeeDeposit].ToString();
                    // 元の手数料非空の場合
                    if (!string.IsNullOrEmpty(ctFeeDeposit))
                    {
                        orgFeeDeposit = Convert.ToInt64(ctFeeDeposit);
                    }
                    // 元の値引
                    string ctDiscountDeposit = depositRow[InputDepositNormalTypeAcs.ctDiscountDeposit].ToString();
                    // 元の値引非空の場合
                    if (!string.IsNullOrEmpty(ctDiscountDeposit))
                    {
                        orgDiscountDeposit = Convert.ToInt64(ctDiscountDeposit);
                    }
                }
            }
        }
        //----- ADD 2015/09/04 時シン Redmine#47015の#20 今回入金額計算の追加対応 ----------<<<<<

        /// <summary>
        /// 入金額取得処理
        /// </summary>
        /// <returns>入金額</returns>
        /// <remarks>
        /// <br>Note　　　  : 入金額を取得します。 </br>
        /// <br>Programmer  : 30414 忍　幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private Int64 GetDepositTotal()
        {
            double detailTotal = 0;
            for (int rowIndex = 0; rowIndex < this.grdDepositKind.Rows.Count; rowIndex++)
            {
                if ((this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == DBNull.Value) ||
                    ((string)this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value == ""))
                {
                    continue;
                }

                double targetNum = double.Parse((string)this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value);

                detailTotal += targetNum;
            }

            Int64 depositTotal = (Int64)detailTotal;

            return depositTotal;
        }

        /// <summary>
        /// KeyDown イベント(grdDepositKind)
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : 入金内訳グリッド上でKeyが押されたときに発生します。 </br>
        /// <br>Programmer  : 30414 忍　幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private void grdDepositKind_KeyDown(object sender, KeyEventArgs e)
        {
            UltraGrid uGrid = (UltraGrid)sender;

            if (uGrid.ActiveCell == null)
            {
                return;
            }

            int columnIndex = uGrid.ActiveCell.Column.Index;
            int rowIndex = uGrid.ActiveCell.Row.Index;

            // -------------------------------------------
            // カーソルキー押下時のフォーカス制御を行います
            // -------------------------------------------
            switch (e.KeyCode)
            {
                case Keys.Up:
                    if (rowIndex == 0)
                    {
                        // 入金日にフォーカス設定
                        e.Handled = true;
                        uGrid.ActiveCell = null;
                        uGrid.ActiveRow = null;
                        this.edtDepositDate.Focus();
                    }
                    else
                    {
                        e.Handled = true;
                        uGrid.DisplayLayout.Rows[rowIndex - 1].Cells[columnIndex].Activate();
                        uGrid.PerformAction(UltraGridAction.EnterEditMode);
                    }
                    break;
                case Keys.Down:
                    if (rowIndex == uGrid.Rows.Count - 1)
                    {
                        // 手数料にフォーカス設定
                        e.Handled = true;
                        uGrid.ActiveCell = null;
                        uGrid.ActiveRow = null;
                        this.edtFeeDeposit.Focus();
                    }
                    else
                    {
                        e.Handled = true;
                        uGrid.DisplayLayout.Rows[rowIndex + 1].Cells[columnIndex].Activate();
                        uGrid.PerformAction(UltraGridAction.EnterEditMode);
                    }
                    break;
                case Keys.Left:
                    // --- UPD m.suzuki 2010/07/12 ---------->>>>>
                    //if (columnIndex > 3)
                    //{
                    //    e.Handled = true;
                    //    uGrid.DisplayLayout.Rows[rowIndex].Cells[columnIndex - 1].Activate();
                    //    uGrid.PerformAction(UltraGridAction.EnterEditMode);
                    //}

                    // 編集モードの時
                    if ( (uGrid.ActiveCell.Column.DataType != typeof( Boolean )) && (uGrid.ActiveCell.IsInEditMode == true) )
                    {
                        // 選択文字長によらず、選択開始位置が先頭ならば、左項目へ移動する
                        if ( uGrid.ActiveCell.SelStart == 0 )
                        {
                            uGrid.PerformAction( UltraGridAction.PrevCell );
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        uGrid.PerformAction( UltraGridAction.PrevCell );
                        e.Handled = true;
                    }
                    // --- UPD m.suzuki 2010/07/12 ----------<<<<<
                    break;
                case Keys.Right:
                    // --- UPD m.suzuki 2010/07/12 ---------->>>>>
                    //if ( columnIndex < 6 )
                    //{
                    //    e.Handled = true;
                    //    uGrid.DisplayLayout.Rows[rowIndex].Cells[columnIndex + 1].Activate();
                    //    uGrid.PerformAction( UltraGridAction.EnterEditMode );
                    //}

                    // エディット編集モードの時
                    if ( (uGrid.ActiveCell.Column.DataType != typeof( Boolean )) && (uGrid.ActiveCell.IsInEditMode == true) )
                    {
                        // カーソルが文字列の一番右端の時
                        if ( (uGrid.ActiveCell.SelLength == 0) &&
                            (uGrid.ActiveCell.SelStart == uGrid.ActiveCell.Text.Length) )
                        {
                            // "日"から"→"キーで移動するとき、手形データ登録ＵＩを表示する準備をする。
                            // (※フラグを立てておくと、grdDepositKind_AfterExitEditModeでＵＩ起動される)
                            if ( columnIndex == this.grdDepositKind.DisplayLayout.Bands[0].Columns[DepositRelDataAcs.ctDay].Index )
                            {
                                this._notMouseMoveFlg = true;
                            }

                            uGrid.PerformAction( UltraGridAction.NextCell );
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        uGrid.PerformAction( UltraGridAction.NextCell );
                        e.Handled = true;
                    }
                    // --- UPD m.suzuki 2010/07/12 ----------<<<<<
                    break;
                case Keys.Escape:
                    {
                        if (uGrid.ActiveCell.IsInEditMode)
                        {
                            UltraGridCell cell = uGrid.ActiveCell;
                            uGrid.ActiveCell = null;
                            if (cell.Row.Index != uGrid.Rows.Count - 1)
                            {
                                uGrid.Rows[cell.Row.Index + 1].Activate();
                            }
                            else if (uGrid.Rows.Count == 1)
                            {
                                uGrid.ActiveCell = null;
                            }
                            else
                            {
                                uGrid.Rows[cell.Row.Index - 1].Activate();
                            }
                            uGrid.Rows[cell.Row.Index].Activate();
                            uGrid.ActiveCell = cell;
                            e.Handled = true;
                        }
                    }
                    break;
            }
        }

        /// <summary>
        /// KeyPress イベント(grdDepositKind)
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : 入金内訳グリッド上でKeyが押されたときに発生します。 </br>
        /// <br>Programmer  : 30414 忍　幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// <br>UpdateNote  : K2012/07/13 FSI今野 山形部品個別依頼</br>
        /// <br>              振込金額入力時は独自の銀行コードの入力を可能に修正</br>
        /// </remarks>
        private void grdDepositKind_KeyPress(object sender, KeyPressEventArgs e)
        {
            UltraGrid uGrid = (UltraGrid)sender;

            if (uGrid.ActiveCell == null)
            {
                return;
            }

            int rowIndex = uGrid.ActiveCell.Row.Index;
            int columnIndex = uGrid.ActiveCell.Column.Index;

            if (!uGrid.ActiveCell.IsInEditMode)
            {
                return;
            }

            switch (columnIndex)
            {
                case 3: // 入金金額
                    {
                        // --- ADD 2010/06/30 ----------------------------------------->>>>>
                        string retText = "";
                        string targetText = "";
                        int beginIndex, endIndex ;
                        if (uGrid.ActiveCell.Text == "")
                        {
                            // --- UPD m.suzuki 2010/07/12 ---------->>>>>
                            //if ((byte)e.KeyChar < (byte)'1' || (byte)'9' < (byte)e.KeyChar)
                            if ( !NumberInputCheck( e.KeyChar ) )
                            // --- UPD m.suzuki 2010/07/12 ----------<<<<<
                            {
                                e.KeyChar = '\0';
                            }
                        }
                        else
                        {
                            targetText = RemoveComma(uGrid.ActiveCell.Text);
                            if (uGrid.ActiveCell.SelText == uGrid.ActiveCell.Text)
                            {
                                // --- UPD m.suzuki 2010/07/12 ---------->>>>>
                                //if ((byte)e.KeyChar < (byte)'1' || (byte)'9' < (byte)e.KeyChar)
                                if ( !NumberInputCheck( e.KeyChar ) )
                                // --- UPD m.suzuki 2010/07/12 ----------<<<<<
                                {
                                    e.KeyChar = '\0';
                                }

                            }
                            else
                            {
                                beginIndex = uGrid.ActiveCell.SelStart;
                                endIndex = uGrid.ActiveCell.SelStart + uGrid.ActiveCell.SelLength;
                                // --- UPD m.suzuki 2010/07/12 ---------->>>>>
                                //if ((byte)e.KeyChar < (byte)'1' || (byte)'9' < (byte)e.KeyChar)
                                if ( !NumberInputCheck( e.KeyChar ) )
                                // --- UPD m.suzuki 2010/07/12 ----------<<<<<
                                {
                                    for (int index = 0; index < targetText.Length; index++)
                                    {
                                        if (index < beginIndex || index >= endIndex)
                                            retText = retText + targetText[index];
                                        else
                                            continue;
                                    }
                                    // --- UPD m.suzuki 2010/07/12 ---------->>>>>
                                    //if (retText != "" && Convert.ToInt32(retText) == 0)
                                    if (retText != "" && ToInt64(retText) == 0)
                                    // --- UPD m.suzuki 2010/07/12 ----------<<<<<
                                        e.KeyChar = '\0';
                                }

                            }

                        }
                        // --- ADD 2010/06/30 ----------------------------------------->>>>>

                        // --- ADD m.suzuki 2010/07/12 ---------->>>>>
                        // 現在位置より右側に'-'(ハイフン)があったら制御キー以外はキャンセル
                        if ( ((uGrid.ActiveCell.SelStart + uGrid.ActiveCell.SelLength) <= uGrid.ActiveCell.Text.IndexOf( '-' )) && !char.IsControl( e.KeyChar ) )
                        {
                            e.Handled = true;
                            return;
                        }
                        // --- ADD m.suzuki 2010/07/12 ----------<<<<<

                        if (!KeyPressNumCheck(10, 0, uGrid.ActiveCell.Text, e.KeyChar, uGrid.ActiveCell.SelStart, uGrid.ActiveCell.SelLength, true))
                        {
                            e.Handled = true;
                            return;
                        }

                        break;
                    }
                case 4: // 年
                    {
                        if (!KeyPressNumCheck(4, 0, uGrid.ActiveCell.Text, e.KeyChar, uGrid.ActiveCell.SelStart, uGrid.ActiveCell.SelLength, false))
                        {
                            e.Handled = true;
                            return;
                        }
                        break;
                    }
                case 5: // 月
                case 6: // 日
                    {
                        if (!KeyPressNumCheck(2, 0, uGrid.ActiveCell.Text, e.KeyChar, uGrid.ActiveCell.SelStart, uGrid.ActiveCell.SelLength, false))
                        {
                            e.Handled = true;
                            return;
                        }
                        break;
                    }
                // --- ADD K2012/07/13 ---------->>>>>
                case 7: // 銀行
                    {                        
                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            if (!KeyPressNumCheck(2, 0, uGrid.ActiveCell.Text, e.KeyChar, uGrid.ActiveCell.SelStart, uGrid.ActiveCell.SelLength, false))
                            {
                                e.Handled = true;
                                return;
                            }
                        }
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                        break;
                    }
                // --- ADD K2012/07/13 ----------<<<<<
                default:
                    {
                        break;
                    }
            }
        }

        // --- ADD m.suzuki 2010/07/12 ---------->>>>>
        /// <summary>
        /// セルアクティブ後の処理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void grdDepositKind_AfterCellActivate( object sender, EventArgs e )
        {
            try
            {
            }
            finally
            {
                // 入力可能セルの時は編集モードにする
                grdDepositKind.PerformAction( UltraGridAction.EnterEditMode );
            }
        }
        /// <summary>
        /// 数値入力チェック
        /// </summary>
        /// <param name="ch"></param>
        /// <returns></returns>
        private bool NumberInputCheck( char ch )
        {
            // ※KeyPressNumCheckで再度チェックする前提で、
            //   制御文字、ハイフンを許可する。

            // 制御文字はOK
            if ( Char.IsControl( ch ) )
            {
                return true;
            }

            // 数字はOK
            if ( (byte)'1' <= (byte)ch && (byte)ch <= (byte)'9' )
            {
                return true;
            }

            // '-'はOK
            if ( (byte)'-' == (byte)ch )
            {
                return true;
            }

            // それ以外はNG
            return false;
        }
        /// <summary>
        /// 数値変換処理
        /// </summary>
        /// <param name="text"></param>
        /// <returns></returns>
        private Int64 ToInt64( string text )
        {
            // ※Convert.ToInt32を使用すると、"-"のような入力は例外発生するので、
            //   try-catchする。

            try
            {
                return Convert.ToInt64( text );
            }
            catch
            {
                return 0;
            }
        }
        // --- ADD m.suzuki 2010/07/12 ----------<<<<<

        /// <summary>
        /// 手形期日取得処理
        /// </summary>
        /// <param name="index">対象行インデックス</param>
        /// <returns>手形期日</returns>
        private bool GetPayTimeLimit(int index, out DateTime payTimeLimit)
        {
            payTimeLimit = new DateTime();

            int year;
            int month;
            int day;

            string targetValue;

            if ((this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctYear].Value == DBNull.Value) ||
                ((string)this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctYear].Value == ""))
            {
                return (false);
            }
            else
            {
                targetValue = (string)this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctYear].Value;
                if (targetValue[targetValue.Length - 1].ToString() == "年")
                {
                    targetValue = targetValue.Remove(targetValue.Length - 1);
                }
                year = int.Parse(targetValue);
            }

            if ((this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctMonth].Value == DBNull.Value) ||
                ((string)this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctMonth].Value == ""))
            {
                return (false);
            }
            else
            {
                targetValue = (string)this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctMonth].Value;
                if (targetValue[targetValue.Length - 1].ToString() == "月")
                {
                    targetValue = targetValue.Remove(targetValue.Length - 1);
                }
                month = int.Parse(targetValue);

                if (month > 12)
                {
                    return (false);
                }
            }

            if ((this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctDay].Value == DBNull.Value) ||
                ((string)this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctDay].Value == ""))
            {
                return (false);
            }
            else
            {
                targetValue = (string)this.grdDepositKind.Rows[index].Cells[DepositRelDataAcs.ctDay].Value;
                if (targetValue[targetValue.Length - 1].ToString() == "日")
                {
                    targetValue = targetValue.Remove(targetValue.Length - 1);
                }
                day = int.Parse(targetValue);

                if (DateTime.DaysInMonth(year, month) < day)
                {
                    return (false);
                }
            }

            if (TDateTime.IsAvailableDate(new DateTime(year, month, day)) == false)
            {
                return (false);
            }

            payTimeLimit = new DateTime(year, month, day);

            return (true);
        }

        /// <summary>
        /// CellChange イベント(grdDepositKind)
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : セルの値が変更されたときに発生します。 </br>
        /// <br>Programmer  : 30414 忍　幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// <br>UpdateNote  : 2010/06/30 葛軍 各種仕様変更／障害対応</br>
        /// <br>              RedMine# 10657</br>
        /// <br>UpdateNote : K2012/07/13 FSI今野 山形部品個別依頼</br>
        /// <br>             振込金額入力時は独自の銀行コードの入力を可能に修正</br>
        /// </remarks>
        private void grdDepositKind_CellChange(object sender, CellEventArgs e)
        {
            UltraGrid uGrid = (UltraGrid)sender;

            if (uGrid.ActiveCell == null)
            {
                return;
            }

            int columnIndex = uGrid.ActiveCell.Column.Index;
            int rowIndex = uGrid.ActiveCell.Row.Index;

            // 金種区分取得
            int depositKindDiv = (int)uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value;

            // --- ADD K2012/07/13 ---------->>>>>
            string targetText = ToInt64(e.Cell.Text.Trim()).ToString("###,###");
            //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
            if (this._opt_YamagataCtrl == (int)Option.ON)
            {
                // 金種区分が「102：振込」の場合
                if (depositKindDiv == 102)
                {
                    if (columnIndex == 7)
                    {
                        if (targetText != "")
                        {
                            uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = string.Format("{0:d2}", targetText);
                        }
                    }
                    else
                    {
                        if (targetText == "")
                        {
                            uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.Disabled;
                        }
                        else
                        {
                            uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Activation = Activation.AllowEdit;
                        }
                    }
                }
            }
            //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
            // --- ADD K2012/07/13 ----------<<<<<


            if (columnIndex != 3)
            {
                return;
            }

            // 金種区分が「105：手形」、「107:小切手」以外の場合
            if ((depositKindDiv != 105) && (depositKindDiv != 107))
            {
                return;
            }

            // セルの値を取得
            // --- UPD m.suzuki 2010/07/12 ---------->>>>>
            //string targetText = e.Cell.Text.Trim();
            //string targetText = ToInt64( e.Cell.Text.Trim() ).ToString( "###,###" );
            // --- UPD m.suzuki 2010/07/12 ----------<<<<<

            if (targetText == "")
            {
                // 期日列を入力不可に設定
                uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Value = DBNull.Value;
                uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Value = DBNull.Value;
                uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Value = DBNull.Value;
                uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.Disabled;
                uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.Disabled;
                uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.Disabled;

                //// 金種区分が「105：手形」
                //if (depositKindDiv == 105)
                //{
                //    this.tNedit_BankCode.Clear();
                //    this.teditBankName.Clear();
                //    this.edtDraftDrawingDate.SetDateTime(DateTime.MinValue);
                //    this.tEdit_DraftNo.Clear();
                //    this.cmbDraftKind.Clear();
                //    this.cmbDraftDivide.Clear();

                //    this.tNedit_BankCode.Enabled = false;
                //    this.btnBankGuid.Enabled = false;
                //    this.edtDraftDrawingDate.Enabled = false;
                //    this.tEdit_DraftNo.Enabled = false;
                //    this.cmbDraftKind.Enabled = false;
                //    this.cmbDraftDivide.Enabled = false;
                //}
            }
            else
            {
                // --- ADD 2010/06/30 ----------------------------------------->>>>>
                // 期日列が未入力の場合
                if ("" == uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Text.Trim() ||
                    "" == uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Text.Trim() ||
                    "" == uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Text.Trim())
                {
                // --- ADD 2010/06/30 ----------------------------------------->>>>>
                    // 期日列を入力可に設定
                    uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Activation = Activation.AllowEdit;
                    uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Activation = Activation.AllowEdit;
                    uGrid.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activation = Activation.AllowEdit;

                    uGrid.Rows[rowIndex].Cells[DepositRelDataAcs.ctYear].Value = DateTime.Today.Year.ToString() + "年";
                    uGrid.Rows[rowIndex].Cells[DepositRelDataAcs.ctMonth].Value = DateTime.Today.Month.ToString() + "月";
                    uGrid.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Value = DateTime.Today.Day.ToString() + "日";
                }// --- ADD 2010/06/30 ----------------------------------------->>>>>

                //// 金種区分が「105：手形」
                //if (depositKindDiv == 105)
                //{
                //    this.tNedit_BankCode.Enabled = true;
                //    this.btnBankGuid.Enabled = true;
                //    this.edtDraftDrawingDate.Enabled = true;
                //    this.tEdit_DraftNo.Enabled = true;
                //    this.cmbDraftKind.Enabled = true;
                //    this.cmbDraftDivide.Enabled = true;
                //}
            }
        }

        /// <summary>
        /// AfterEnterEditMode イベント(grdDepositKind)
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : セルが編集モードになったときに発生します。 </br>
        /// <br>Programmer  : 30414 忍　幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private void grdDepositKind_AfterEnterEditMode(object sender, EventArgs e)
        {
            int rowIndex = this.grdDepositKind.ActiveCell.Row.Index;
            int columnIndex = this.grdDepositKind.ActiveCell.Column.Index;

            if ((this.grdDepositKind.ActiveCell.Value == DBNull.Value) || ((string)this.grdDepositKind.ActiveCell.Value == ""))
            {
                return;
            }

            string targetText;
            string retText;

            switch (columnIndex)
            {
                case 3: // 入金金額列
                    {
                        targetText = (string)this.grdDepositKind.ActiveCell.Value;

                        // カンマ削除
                        retText = RemoveComma(targetText);

                        this.grdDepositKind.ActiveCell.Value = retText;
                        this.grdDepositKind.ActiveCell.SelStart = 0;
                        this.grdDepositKind.ActiveCell.SelLength = retText.Length;
                        return;
                    }
                case 4: // 年
                case 5: // 月
                case 6: // 日
                    {
                        targetText = (string)this.grdDepositKind.ActiveCell.Value;
                        retText = targetText.Remove(targetText.Length - 1);

                        this.grdDepositKind.ActiveCell.Value = retText;
                        this.grdDepositKind.ActiveCell.SelStart = 0;
                        this.grdDepositKind.ActiveCell.SelLength = retText.Length;
                        return;
                    }
                default:
                    {
                        return;
                    }
            }
        }

        /// <summary>
        /// AfterExitEditMode イベント(grdDepositKind)
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : セルの編集モードが終了したときに発生します。 </br>
        /// <br>Programmer  : 30414 忍　幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// <br>UpdateNote  : K2012/07/13 FSI今野 山形部品個別依頼</br>
        /// <br>              振込金額入力時は独自の銀行コードの入力を可能に修正</br>
        /// <br>UpdateNote  : 2013/01/10 zhuhh</br>
        /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
        /// <br>            : redmine #34123 手形データ重複した伝票番号の登録を出来る様にする</br>
        /// </remarks>
        private void grdDepositKind_AfterExitEditMode(object sender, EventArgs e)
        {
            // ADD START 2010/05/06 gejun for M1007A-手形データ追加
            bool notMouseMoveFlg = this._notMouseMoveFlg;
            this._notMouseMoveFlg = false;
            // ADD END 2010/05/06 gejun for M1007A-手形データ追加

            if (this.grdDepositKind.ActiveCell == null)
            {
                return;
            }

            int rowIndex = this.grdDepositKind.ActiveCell.Row.Index;
            int columnIndex = this.grdDepositKind.ActiveCell.Column.Index;

            switch (columnIndex)
            {
                case 3: // 入金金額列
                    {
                        // --- ADD m.suzuki 2010/07/12 ---------->>>>>
                        // ハイフンのみ入力状態で編集終了した場合は金額=0とみなす。
                        // その他、不正入力も一度数値変換することで補正する。
                        if ( this.grdDepositKind.ActiveCell.Value != DBNull.Value )
                        {
                            this.grdDepositKind.ActiveCell.Value = ToInt64( (string)this.grdDepositKind.ActiveCell.Value ).ToString( "###,###" );
                        }
                        // --- ADD m.suzuki 2010/07/12 ----------<<<<<

                        // 入金合計算出
                        SetDepositTotal();

                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            // --- ADD K2012/07/13 ---------->>>>>
                            // 金種区分取得
                            int depositKindDiv = (int)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value;
                            // 金種区分が「102：振込」の場合
                            if (depositKindDiv == 102 && string.IsNullOrEmpty(this.grdDepositKind.ActiveCell.Text))
                            {
                                this.grdDepositKind.DisplayLayout.Rows[rowIndex].Cells[DepositRelDataAcs.ctBank].Value = "00";
                            }
                            // --- ADD K2012/07/13 ----------<<<<<
                        }
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<

                        if ((this.grdDepositKind.ActiveCell == null) || (this.grdDepositKind.ActiveCell.Value == DBNull.Value) || ((string)this.grdDepositKind.ActiveCell.Value == ""))
                        {
                            break;
                        }

                        string targetText = (string)this.grdDepositKind.ActiveCell.Value;

                        // カンマ削除
                        string retText = RemoveComma(targetText);

                        double targetValue = double.Parse(retText);

                        this.grdDepositKind.ActiveCell.Value = targetValue.ToString("###,###");
                        break;
                    }
                case 4: // 年
                    {
                        if ((this.grdDepositKind.ActiveCell.Value != DBNull.Value) &&
                            ((string)this.grdDepositKind.ActiveCell.Value != ""))
                        {
                            int year = int.Parse((string)this.grdDepositKind.ActiveCell.Value);
                            if (year != 0)
                            {
                                this.grdDepositKind.ActiveCell.Value = year.ToString() + "年";
                            }
                            else
                            {
                                this.grdDepositKind.ActiveCell.Value = "";
                            }
                        }
                        break;
                    }
                case 5: // 月
                    {
                        if ((this.grdDepositKind.ActiveCell.Value != DBNull.Value) &&
                            ((string)this.grdDepositKind.ActiveCell.Value != ""))
                        {
                            int month = int.Parse((string)this.grdDepositKind.ActiveCell.Value);
                            if ((month > 0) && (month <= 12))
                            {
                                this.grdDepositKind.ActiveCell.Value = month.ToString() + "月";
                            }
                            else
                            {
                                this.grdDepositKind.ActiveCell.Value = "";
                            }
                        }
                        break;
                    }
                case 6: // 日
                    {
                        if ((this.grdDepositKind.ActiveCell.Value != DBNull.Value) &&
                            ((string)this.grdDepositKind.ActiveCell.Value != ""))
                        {
                            int day = int.Parse((string)this.grdDepositKind.ActiveCell.Value);
                            if ((day > 0) && (day <= 31))
                            {
                                this.grdDepositKind.ActiveCell.Value = day.ToString() + "日";
                                //ADD START 2010/05/06 gejun for M1007A-手形データ追加
                                if (!this._draftOptSet) return;
                                // 金種区分取得
                                int depositKindDiv = (int)this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDepositKindDiv].Value;
                                // 手形の場合
                                if (depositKindDiv == (int)MnyKindDiv.Bill && !_doubleCheckFlg)
                                {
                                    // 期日入力チェック
                                    if (!ValidityTermCheck(rowIndex))
                                        return;
                                }
                                // 手形 かつ　得意先コード入力                             
                                if (depositKindDiv == (int)MnyKindDiv.Bill && this.tNedit_CustomerCode.GetInt() != 0 && notMouseMoveFlg)
                                {
                                    RcvDraftData paraRcvDraftData = new RcvDraftData();
                                    // 手形データ設定処理
                                    if (this.SetDraftData(ref paraRcvDraftData, rowIndex))
                                    {
                                        // 手形データメンテナンス画面
                                        PMTEG09101UA pMTEG09101UA = new PMTEG09101UA(paraRcvDraftData.Clone());
                                        pMTEG09101UA.ShowDialog();

                                        // 手形データを保存する場合
                                        if (pMTEG09101UA.SaveFlg)
                                        {
                                            if (pMTEG09101UA.RcvDraftData != null)
                                            {
                                                this._rcvDraftData = pMTEG09101UA.RcvDraftData.Clone();
                                                // ----- ADD zhuhh 2013/01/10 for Redmine #34123 ----->>>>>
                                                if (!String.IsNullOrEmpty(this._rcvDraftData.SectionCode))
                                                {
                                                    this._rcvDraftData.SectionCode = this._rcvDraftData.SectionCode.PadRight(6, ' ');
                                                }
                                                // ----- ADD zhuhh 2013/01/10 for Redmine #34123 -----<<<<<
                                                this._rcvDraftData.EnterpriseCode = this.enterpriseCode;
                                                // 手形データ無変更の場合
                                                if (!this._rcvDraftData.Equals(paraRcvDraftData))
                                                {
                                                    //if (paraRcvDraftData.RcvDraftNo != this._rcvDraftData.RcvDraftNo)// DEL zhuhh 2013/01/10 for Redmine #34123
                                                    // ----- ADD zhuhh 2013/01/10 for Redmine #34123 ----->>>>>
                                                    if ((paraRcvDraftData.RcvDraftNo != this._rcvDraftData.RcvDraftNo) || (paraRcvDraftData.BankAndBranchCd != this._rcvDraftData.BankAndBranchCd)
                                                        || (paraRcvDraftData.DraftDrawingDate != this._rcvDraftData.DraftDrawingDate))
                                                    // ----- ADD zhuhh 2013/01/10 for Redmine #34123 -----<<<<<
                                                    {
                                                        if (this.edtDepositSlipNo.GetInt() != 0 && paraRcvDraftData.RcvDraftNo != "")
                                                        {
                                                            // 削除用手形データ保存
                                                            if (this._rcvDraftDataDel == null)
                                                            {
                                                                this._rcvDraftDataDel = paraRcvDraftData.Clone();
                                                                this._rcvDraftDataDel.EnterpriseCode = this.enterpriseCode;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        // リソースをすべてクリーンアップする。
                                        pMTEG09101UA.Dispose();
                                    }
                                    else
                                    {
                                        return;
                                    }
                                }
                                //ADD END 2010/05/06 gejun for M1007A-手形データ追加
                            }
                            else
                            {
                                this.grdDepositKind.ActiveCell.Value = "";
                            }
                        }
                        break;
                    }
                // --- ADD K2012/07/13 ---------->>>>>
                case 7: // 銀行
                    {
                        //----- ADD K2013/03/22 張曼 Redmine#35063 ----->>>>>
                        if (this._opt_YamagataCtrl == (int)Option.ON)
                        {
                            if (this.grdDepositKind.ActiveCell.Value != DBNull.Value)
                            {
                                int bank = int.Parse((string)this.grdDepositKind.ActiveCell.Value);
                                if ((bank > 0) && (bank <= 99))
                                {
                                    this.grdDepositKind.ActiveCell.Value = string.Format("{0:d2}", bank);
                                }
                                else
                                {
                                    this.grdDepositKind.ActiveCell.Value = "00";
                                }
                            }
                            else
                            {
                                this.grdDepositKind.ActiveCell.Value = "00";
                            }
                        }
                        //----- ADD K2013/03/22 張曼 Redmine#35063 -----<<<<<
                        break;
                    }
                // --- ADD K2012/07/13 ----------<<<<<                
                default:
                    {
                        return;
                    }
            }

            // 入金伝票が選択されている時
            if (selectedDepositCopyRow != null)
            {
                if (this._searchFlg == false)
                {
                    return;
                }

                // 入金伝票入力欄変更時処理
                GetDisplayDeposit(null, selectedDepositCopyRow, selectedAllowanceCopyRows);
            }
        }

        /// <summary>
        /// Leave イベント(grdDepositKind)
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータ</param>
        /// <remarks>
        /// <br>Note　　　  : コントロール(入金内訳グリッド)からフォーカスが離れたときに発生します。 </br>
        /// <br>Programmer  : 30414 忍　幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private void grdDepositKind_Leave(object sender, EventArgs e)
        {
            this.grdDepositKind.ActiveCell = null;
            this.grdDepositKind.ActiveRow = null;
        }

        /// <summary>
        /// 入金情報取得処理
        /// </summary>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="mode">検索モード（０：得意先モード、１：伝票番号モード）</param>
        /// <remarks>
        /// <br>Update Note : 2012/12/24 王君</br>
        /// <br>管理番号    : 10806793-00 2013/03/13配信分</br>
        /// <br>              Redmine#33741の対応</br>
        /// </remarks>
        //private void GetDepositInfo(int customerCode) // DEL 王君 2012/12/24 Redmine#33741
        private void GetDepositInfo(int customerCode, int mode) // ADD 王君 2012/12/24 Redmine#33741
        {
            int status;

            // --- ADD 2009/12/16 ---------->>>>>
            this._grdDepositSearchFlag = false;
            this._grdDmdSalesSearchFlag = false;
            // --- ADD 2009/12/16 ----------<<<<<

            // 入金内容の変更状況チェック処理
            // 2011/05/16 Add >>>
            // 得意先変更中は処理しない
            if (!_customerChangeFlg)
            {
            // 2011/05/16 Add <<<
                if (CheckUpdateData(true, true) != 0)
                {
                    return;
                }
            }   // 2011/05/16 Add

            // オール検索前データチェック処理
            if (CheackDataBeforeAllSearch() == false)
            {
                return;
            }

            int depositSlipNo = 0;

            // 入金一覧タブを表示する
            tabList.Tabs["DepositTab"].Selected = true;

            try
            {
                this.Cursor = Cursors.WaitCursor;

                // データ検索前の画面設定処理
                SearchBeforeDisplySetting(SearchMode.AllSearch);

                string message;

                // 検索処理(得意先コード指定)
                //status = SearchCustomerMode(SearchMode.AllSearch, customerCode, depositSlipNo, out message); // DEL 王君 2012/12/24 Redmine#33741
                // ----- ADD 王君 2012/12/24 Redmine#33741 ------->>>>> 
                if (mode == 0)
                {
                    status = SearchCustomerMode(SearchMode.AllSearch, customerCode, depositSlipNo, out message);
                }
                else
                {
                    status = SearchCustomerMode(SearchMode.DepositSearch, customerCode, depositSlipNo, out message); // 伝票番号検索モード
                }
                // ----- ADD 王君 2012/12/24 Redmine#33741 -------<<<<<

                // データ検索後の画面設定処理
                SearchAfterDisplySetting(status);

                switch (status)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                        {
                            TMsgDisp.Show(emErrorLevel.ERR_LEVEL_INFO,
                                          this.Name,
                                          message,
                                          0,
                                          MessageBoxButtons.OK);

                            // フォーカス設定
                            tNedit_CustomerCode.Focus();
                            return;
                        }
                    default:
                        // エラー発生
                        TMsgDisp.Show(emErrorLevel.ERR_LEVEL_STOPDISP,
                                      this.Name,
                                      "入金伝票の読込処理に失敗しました。" + "\r\n\r\n" + message,
                                      status,
                                      MessageBoxButtons.OK);
                        return;
                }

                // 新規入金伝票入力準備処理
                // イベントの無効化
                GridEventManager eventManager = this.grdDepositList.EventManager;
                eventManager.SetEnabled(GridEventIds.AfterRowActivate, false);

                try
                {
                    if (this.grdDepositList.ActiveRow != null)
                    {
                        this.grdDepositList.ActiveRow.Selected = false;
                    }
                    else
                    {
                        if (this.grdDepositList.Rows.Count > 0)
                        {
                            this.grdDepositList.Rows[0].Selected = false;
                        }
                    }

                    // 新規入金伝票入力準備処理
                    NewDepositStandby();

                    // 請求売上情報データセット再登録処理
                    inputDepositNormalTypeAcs.ResetDsDmdSalesInfo();

                    for (int index = 0; index < this.grdDmdSalesList.Rows.Count; index++)
                    {
                        CellsCollection cells = this.grdDmdSalesList.Rows[index].Cells;

                        cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Activation = Activation.Disabled;

                        // 赤伝の場合
                        if ((cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Value != DBNull.Value) &&
                            (Convert.ToInt32(cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Value) == 1))
                        {
                            this.grdDmdSalesList.Rows[index].Appearance.ForeColor = Color.Red;
                            this.grdDmdSalesList.Rows[index].Appearance.ForeColorDisabled = Color.Red;
                            continue;
                        }

                        // 返品の場合
                        if ((cells[InputDepositNormalTypeAcs.ctSalesKind].Value != DBNull.Value) &&
                            (Convert.ToString(cells[InputDepositNormalTypeAcs.ctSalesKind].Value) == "返品"))
                        {
                            this.grdDmdSalesList.Rows[index].Appearance.ForeColor = Color.Red;
                            this.grdDmdSalesList.Rows[index].Appearance.ForeColorDisabled = Color.Red;
                            continue;
                        }
                    }

                    for (int index = 0; index < grdDepositList.Rows.Count; index++)
                    {
                        grdDepositList.DisplayLayout.Rows[index].ExpansionIndicator = ShowExpansionIndicator.CheckOnDisplay;
                    }

                    SetSalesAllowanceTotal();
                }
                finally
                {
                    eventManager.SetEnabled(GridEventIds.AfterRowActivate, true);
                }
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// 得意先情報取得処理
        /// </summary>
        /// <param name="customerInfo">得意先情報オブジェクト</param>
        /// <param name="customerCode">得意先コード</param>
        /// <returns>Status</returns>
        /// <remarks>
        /// <br>Note　　　  : 得意先コードから対象の得意先情報を取得します。 </br>
        /// <br>Programmer  : 30414 忍　幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private int GetCustomerInfo(out CustomerInfo customerInfo, int customerCode)
        {
            customerInfo = new CustomerInfo();
            int status;

            try
            {
                status = this._customerInfoAcs.ReadDBData(this.enterpriseCode, customerCode, true, out customerInfo);
            }
            catch
            {
                status = -1;
                customerInfo = null;
            }

            return (status);
        }

        /// <summary>
        /// ValueChanged イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントハンドラ</param>
        /// <remarks>
        /// <br>Note　　　  : 入金合計の値が変わる度に発生します。 </br>
        /// <br>Programmer  : 30414 忍　幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// <br>UpdateNote  : 2009/12/16 李占川 ＰＭ．ＮＳ保守依頼④</br>
        /// <br>              金額未入力時のｶｰｿﾙ遷移が遅いのを修正</br>
        /// </remarks>
        private void edtDepositTotal_ValueChanged(object sender, EventArgs e)
        {
            // --- ADD 2009/12/16 ---------->>>>>
            if (!this._grdDmdSalesSearchFlag)
            {
                return;
            }
            // --- ADD 2009/12/16 ----------<<<<<

            // 入金未引当額設定
            SetDepositAlwcBlance();
        }

        /// <summary>
        /// 引当額合計取得処理
        /// </summary>
        /// <returns>引当額合計</returns>
        /// <remarks>
        /// <br>Note　　　  : 引当額合計を取得します。 </br>
        /// <br>Programmer  : 30414 忍　幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private Int64 GetDepositAlwTotal()
        {
            Int64 depositAlwTotal = 0;

            //this.grdDmdSalesList.UpdateData();// DEL BY zhujw 2014/07/09 FOR RedMine#42902の⑬ 「-」のみで他の項目に移動しようとすると以下のエラーが発生する。

            for (int rowIndex = 0; rowIndex < this.grdDmdSalesList.Rows.Count; rowIndex++)
            {
                if (this.grdDmdSalesList.Rows[rowIndex].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Value is System.DBNull) this.grdDmdSalesList.Rows[rowIndex].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Value = 0; // ADD BY zhujw 2014/07/09 FOR RedMine#42902の⑬ 「-」のみで他の項目に移動しようとすると以下のエラーが発生する。
                // DEL 2010/05/17 MANTIS対応[15195]：売上引当にて、売上の赤伝データの引当額が不正 ---------->>>>>
                // 売上伝票が赤だった場合
                //if ((Int32)this.grdDmdSalesList.Rows[rowIndex].Cells[InputDepositNormalTypeAcs.ctDmdSalesDebitNoteCd].Value == 1)
                //{
                //    continue;
                //}
                // DEL 2010/05/17 MANTIS対応[15195]：売上引当にて、売上の赤伝データの引当額が不正 ----------<<<<<

                // 引当額取得
                depositAlwTotal += StrToIntDef(this.grdDmdSalesList.Rows[rowIndex].Cells[InputDepositNormalTypeAcs.ctDepositAllowance_Alw].Text, 0);
            }

            return depositAlwTotal;
        }

        /// <summary>
        /// 入金未引当額設定処理
        /// </summary>
        /// <remarks>
        /// <br>Note　　　  : 入金未引当額を設定します。 </br>
        /// <br>Programmer  : 30414 忍　幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// <br>Update Note : 2011/02/14 李占川 Redmine#18904の対応</br>
        /// <br>              入金伝票入力（入金型）の売上引当タブの入金未引当額の表示内容を変更する。</br>
        /// </remarks>
        private void SetDepositAlwcBlance()
        {
            //if (this.edtDepositTotal.GetInt() == 0)
            //{
            //    // 入金未引当額クリア
            //    this.labDepositAlwcBlnce.Text = "";

            //    // 入金合計クリア
            //    this.labDepositTotal.Text = "";
            //    return;
            //}

            // 入金合計取得
            Int64 depositTotal = this.edtDepositTotal.GetInt();

            // 引当額合計取得
            Int64 depositAlwTotal = GetDepositAlwTotal();

            // --- UPD 2011/02/14 ---------->>>>>
            // UNDONE:入金未引当額設定
            if (selectedDepositCopyRow == null)
            {
                //this.labDepositAlwcBlnce.Text = (depositTotal - depositAlwTotal).ToString("###,###,##0");
                this.labDepositAlwcBlnce.Text = (depositAlwTotal - depositTotal).ToString("###,###,##0");
            }
            else
            {
                //if (opsAlwcDmdSalesCall.CheckedIndex == 0)
                //{
                //    // 表示する
                //    this.labDepositAlwcBlnce.Text = (depositTotal - depositAlwTotal).ToString("###,###,##0");
                //}
                //else
                //{

                //    // 表示しない
                //    Int64 depositAlwcBlnce = (Int64)selectedDepositCopyRow[InputDepositNormalTypeAcs.ctDepositAlwcBlnce_Deposit];
                //    this.labDepositAlwcBlnce.Text = (depositAlwcBlnce - depositAlwTotal).ToString("###,###,##0");
                //}
                this.labDepositAlwcBlnce.Text = (depositAlwTotal - depositTotal).ToString("###,###,##0");
            }
            // --- UPD 2011/02/14  ----------<<<<<

            // 入金合計設定
            this.labDepositTotal.Text = depositTotal.ToString("###,###,##0");
        }

        /// <summary>
        /// 入金未引当額取得処理
        /// </summary>
        /// <returns>入金未引当額</returns>
        /// <remarks>
        /// <br>Note　　　  : 入金未引当額を取得します。 </br>
        /// <br>Programmer  : 30414 忍　幸史</br>
        /// <br>Date        : 2008/06/26</br>
        /// </remarks>
        private Int64 GetDepositAlwcBlance()
        {
            Int64 depositAlwcBlance = 0;

            if (this.edtDepositTotal.GetInt() == 0)
            {
                return depositAlwcBlance;
            }

            // 入金合計取得
            Int64 depositTotal = this.edtDepositTotal.GetInt();

            // 引当額合計取得
            Int64 depositAlwTotal = GetDepositAlwTotal();

            // 入金未引当額取得
            depositAlwcBlance = depositTotal - depositAlwTotal;

            return depositAlwcBlance;
        }

        /// <summary>
        /// DoubleClickRow イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントハンドラ</param>
        private void grdDepositList_DoubleClickRow(object sender, DoubleClickRowEventArgs e)
        {
            // 入金内容の変更状況チェック処理
            if (this.CheckUpdateData(true, true) != 0)
            {
                // UPD 2011/08/13 qijh SCM対応 - 拠点管理(10704767-00) --------->>>>>
                // 下記の処理はグリッド利用不正なので、grdDepositKind -> grdDepositListに修正
                //this.grdDepositKind.Rows[this._prevDoubleClickRowIndex].Activate();
                this.grdDepositList.Rows[this._prevDoubleClickRowIndex].Activate();
                // UPD 2011/08/13 qijh SCM対応 - 拠点管理(10704767-00) ---------<<<<<
                return;
            }

            this._prevDoubleClickRowIndex = e.Row.Index;

            // 入金伝票変更前画面初期化処理
            DisplyClearToDepositChange();

            // 新規の時は変更状態チェックを行う
            if (edtDepositSlipNo.GetInt() == 0)
            {
                // 請求売上情報データセット再登録処理
                inputDepositNormalTypeAcs.ResetDsDmdSalesInfo();
            }

            // 選択入金データ展開処理
            //ExpandSelectDeposit(); // DEL 王君　2012/12/24 Redmine#33741
            ExpandSelectDeposit(false); // ADD 王君　2012/12/24 Redmine#33741

            btnSearchDmdSales_Click(this.btnSearchDmdSales, new EventArgs());
        }

        /// <summary>
        /// KeyPress イベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントハンドラ</param>
        private void grdDmdSalesList_KeyPress(object sender, KeyPressEventArgs e)
        {
            UltraGrid uGrid = (UltraGrid)sender;

            if (uGrid.ActiveCell == null)
            {
                return;
            }

            if (uGrid.ActiveCell.Column.Key != InputDepositNormalTypeAcs.ctDepositAllowance_Alw)
            {
                return;
            }

            if (!KeyPressNumCheck(10, 0, uGrid.ActiveCell.Text, e.KeyChar, uGrid.ActiveCell.SelStart, uGrid.ActiveCell.SelLength, true))
            {
                e.Handled = true;
                return;
            }
        }

        private void grdDmdSalesList_Leave(object sender, EventArgs e)
        {
            this.grdDmdSalesList.ActiveCell = null;
            this.grdDmdSalesList.ActiveRow = null;
        }

        private void grdDepositList_Leave(object sender, EventArgs e)
        {
            this.grdDepositList.ActiveCell = null;
            this.grdDepositList.ActiveRow = null;
        }

        private void grdDepositList_KeyDown(object sender, KeyEventArgs e)
        {
            if (this.grdDepositList.ActiveRow == null)
            {
                return;
            }

            int rowIndex = this.grdDepositList.ActiveRow.Index;

            if (e.KeyCode == Keys.Up)
            {
                if (rowIndex == 0)
                {
                    this.edtSearchDepositSlipNo.Focus();
                    e.Handled = true;
                }
            }
            else if (e.KeyCode == Keys.Down)
            {
                if (rowIndex == this.grdDepositList.Rows.Count - 1)
                {
                    this.cmbDepositFontSize.Focus();
                    e.Handled = true;
                }
            }
        }
        // --- ADD 2008/06/26 ---------------------------------------------------------------------<<<<<
        //ADD START 2010/05/06 gejun for M1007A-手形データ追加
        /// <summary>
        /// 受取手形データ設定処理
        /// </summary>
        /// <param name="rcvDraftData">受取手形データ</param>
        /// <param name="rowIndex">行番号</param>
        /// <remarks>
        /// <br>Note		: 受取手形データ設定処理を行う。</br>
        /// <br>Programmer	: gejun</br>
        /// <br>Date		: 2010.04.28</br>
        /// <br>UpdateNote  : 2010/06/30 葛軍 各種仕様変更／障害対応</br>
        /// <br>              RedMine# 10657</br>
        /// <br>UpdateNote  : 2010/12/20 李占川 PM.NS障害改良対応(12月分)</br>
        /// <br>              手形金額の数値変換処理の修正（Redmine#18248）</br>
        /// </remarks>
        private bool SetDraftData(ref RcvDraftData rcvDraftData, int rowIndex)
        {
            // 新規の場合
            if (this.edtDepositSlipNo.GetInt() == 0)
            {
                // 表示用ﾊﾟﾗﾒｰﾀの準備
                if (this._rcvDraftData == null)
                    this.SetNewDraftData(ref rcvDraftData, rowIndex);
                else
                    rcvDraftData = this._rcvDraftData;
                return true;
            }
            // 更新の場合
            else
            {
                if (this.edtDepositSlipNo.GetInt() != 0)
                {
                    if (this._rcvDraftData == null)
                    {
                        List<RcvDraftData> retList = new List<RcvDraftData>();
                        if (SearchDraftData(ref retList) == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                        {
                            rcvDraftData = (RcvDraftData)retList[0];
                            // 論理削除区分=1:論理削除
                            if (rcvDraftData.LogicalDeleteCode == 1)
                            {
                                TMsgDisp.Show(this,
                                      emErrorLevel.ERR_LEVEL_INFO,
                                      this.Name,
                                      "手形データが削除されている為、処理出来ません。",
                                      0,
                                      MessageBoxButtons.OK);

                                // 保存ボタンを利用不可にする
                                _buttonSave = false;
                                if (ParentToolbarSettingEvent != null)
                                {
                                    ParentToolbarSettingEvent(this);
                                }
                                return false;
                            }
                            // --- ADD 2010/06/30 ----------------------------------------->>>>>
                            DateTime validityTerm;
                            GetPayTimeLimit(rowIndex, out validityTerm);
                            rcvDraftData.ValidityTerm = Convert.ToInt32(validityTerm.ToString("yyyyMMdd"));
                            // --- UPD 2010/12/20 ---------->>>>>
                            //rcvDraftData.Deposit = Convert.ToInt64(this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value.ToString().Replace(",", ""));
                            try
                            {
                                rcvDraftData.Deposit = Convert.ToInt64(this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value.ToString().Replace(",", ""));
                            }
                            catch
                            {
                                rcvDraftData.Deposit = 0;
                            }
                            // --- UPD 2010/12/20  ----------<<<<<
                            // --- ADD 2010/06/30 ----------------------------------------->>>>>

                        }
                        else
                            this.SetNewDraftData(ref rcvDraftData, rowIndex);
                    }
                    else
                    {
                        // 表示用ﾊﾟﾗﾒｰﾀの準備
                        // --- ADD 2010/06/30 ----------------------------------------->>>>>
                        DateTime validityTerm;
                        GetPayTimeLimit(rowIndex, out validityTerm);
                        this._rcvDraftData.ValidityTerm = Convert.ToInt32(validityTerm.ToString("yyyyMMdd"));
                        // --- UPD 2010/12/20 ---------->>>>>
                        //this._rcvDraftData.Deposit = Convert.ToInt64(this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value.ToString().Replace(",", ""));
                        try
                        {
                            this._rcvDraftData.Deposit = Convert.ToInt64(this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value.ToString().Replace(",", ""));
                        }
                        catch
                        {
                            this._rcvDraftData.Deposit = 0;
                        }
                        // --- UPD 2010/12/20  ----------<<<<<
                        // --- ADD 2010/06/30 ----------------------------------------->>>>> 
                        rcvDraftData = this._rcvDraftData;
                    }
                    return true;
                }
                return false;
            }

        }
        /// <summary>
        /// 受取手形データの新規処理
        /// </summary>
        /// <param name="payDraftData">支払手形データ</param>
        /// <param name="rowIndex">行番号</param>
        /// <remarks>
        /// <br>Note		: 支払手形データの新規処理を行う。</br>
        /// <br>Programmer	: gejun</br>
        /// <br>Date		: 2010.04.28</br>
        /// <br>UpdateNote  : 2010.05.16 姜凱 redmine#7606の対応</br>
        /// </remarks>
        private void SetNewDraftData(ref RcvDraftData paraRcvDraftData, int rowIndex)
        {
            // 拠点コード
            paraRcvDraftData.SectionCode = this._loginSectionCode.PadLeft(2, '0').PadRight(6, ' ');
            // 手形種別
            paraRcvDraftData.DraftKindCd = 0;
            // 自他振区分
            paraRcvDraftData.DraftDivide = 0;
            // 振出日
            paraRcvDraftData.DraftDrawingDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
            // 期日
            DateTime validityTerm;
            GetPayTimeLimit(rowIndex, out validityTerm);
            paraRcvDraftData.ValidityTerm = Convert.ToInt32(validityTerm.ToString("yyyyMMdd"));
            // 処理日
            paraRcvDraftData.ProcDate = Convert.ToInt32(paraRcvDraftData.DraftDrawingDate.ToString("yyyyMMdd"));
            // 取引先得意先コード
            paraRcvDraftData.CustomerCode = this.tNedit_CustomerCode.GetInt();
            CustomerInfo customerInfo;
            if ((int)ConstantManagement.MethodResult.ctFNC_NORMAL ==
                    GetCustomerInfo(out customerInfo, paraRcvDraftData.CustomerCode))
            {
                // 取引先得意先拠点コード
                paraRcvDraftData.AddUpSecCode = customerInfo.ClaimSectionCode;
                // 取引先得意先名称
                paraRcvDraftData.CustomerSnm = customerInfo.CustomerSnm;
            }
            // --- ADD 2010/05/16 -------------->>>>>
            // 入金金額
            paraRcvDraftData.Deposit = Convert.ToInt64(this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDeposit].Value.ToString().Replace(",", ""));
            // --- ADD 2010/05/16 --------------<<<<<
        }
        /// <summary>
        /// 期日チェック処理
        /// </summary>
        /// <param name="rowIndex">行番号</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note		: 期日チェック処理を行う。</br>
        /// <br>Programmer	: gejun</br>
        /// <br>Date		: 2010.05.04</br>
        /// </remarks>
        private bool ValidityTermCheck(int rowIndex)
        {
            if (this.edtDepositDate.GetDateTime() != DateTime.MinValue)
            {
                DateTime validityTerm;
                GetPayTimeLimit(rowIndex, out validityTerm);
                if (validityTerm != DateTime.MinValue && this.edtDepositDate.GetDateTime() > validityTerm)
                {
                    TMsgDisp.Show(this,
                          emErrorLevel.ERR_LEVEL_EXCLAMATION,
                          this.Name,
                          "入金日以上の日付を入力して下さい。",
                          0,
                          MessageBoxButtons.OK);
                    this.grdDepositKind.Focus();
                    this.grdDepositKind.Rows[rowIndex].Cells[DepositRelDataAcs.ctDay].Activate();
                    this.grdDepositKind.PerformAction(UltraGridAction.EnterEditMode);
                    return false;
                }
            }
            return true;
        }

        /// <summary>
        /// 受取手形データ検索処理
        /// </summary>
        /// <param name="retList">受取手形データオブジェクトリスト</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note		: 受取手形データ検索処理を行う。</br>
        /// <br>Programmer	: gejun</br>
        /// <br>Date		: 2010.04.28</br>
        /// </remarks>
        private int SearchDraftData(ref List<RcvDraftData> retList)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

            //受取手形アクセスクラス
            if (_rcvDraftDataAcs == null)
                _rcvDraftDataAcs = new RcvDraftDataAcs();

            RcvDraftData paraRcvDraftData = new RcvDraftData();
            paraRcvDraftData.EnterpriseCode = this.enterpriseCode;
            paraRcvDraftData.DepositSlipNo = this.edtDepositSlipNo.GetInt();
            // --- ADD 2012/07/24 y.wakita ----------------------------------------->>>>>
            if (paraRcvDraftData.DepositSlipNo == 0)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
                return status;
            }
            // --- ADD 2012/07/24 y.wakita -----------------------------------------<<<<<
            status = this._rcvDraftDataAcs.Search(out retList, 1, paraRcvDraftData);
            switch (status)
            {
                case (int)ConstantManagement.MethodResult.ctFNC_NORMAL:
                case (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN:
                    {
                        break;
                    }
                default:
                    {
                        TMsgDisp.Show(this,                         // 親ウィンドウフォーム
                            emErrorLevel.ERR_LEVEL_STOP,			// エラーレベル
                            "SFUKK01403U",							// アセンブリID
                            this.Text,                              // プログラム名称
                            "Search",                               // 処理名称
                            TMsgDisp.OPE_GET,                       // オペレーション
                            "読み込みに失敗しました。",				// 表示するメッセージ
                            status,									// ステータス値
                            this._rcvDraftDataAcs,					// エラーが発生したオブジェクト
                            MessageBoxButtons.OK,					// 表示するボタン
                            MessageBoxDefaultButton.Button1);		// 初期表示ボタン
                        break;
                    }
            }
            return status;
        }
        //ADD END 2010/05/06 gejun for M1007A-手形データ追加
        // --- ADD m.suzuki 2010/07/01 ---------->>>>>
        /// <summary>
        /// 未入金一覧表 印刷ボタン
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnNoDepSalList_Click( object sender, EventArgs e )
        {
            PMKAU02000UA noDepSalListForm = new PMKAU02000UA();
            try
            {
                // 初期表示内容セット
                noDepSalListForm.ParaDmdSectionCode = _selectSectionCode;
                noDepSalListForm.ParaClaimCode = _claimCode;

                // 表示
                noDepSalListForm.ShowDialog( this );
            }
            finally
            {
                noDepSalListForm.Dispose();
            }
        }
        /// <summary>
        /// 未入金一覧表ボタンの有効・無効判定（※起動時に１回のみ使用する想定）
        /// </summary>
        /// <returns></returns>
        private bool CheckNoDepSalListEnabled()
        {
            const int ct_PDFOut = 1;
            const int ct_PrintOut = 2;

            if ( MyOpeCtrlForNoDepSalList.Disabled( ct_PrintOut ) &&
                 MyOpeCtrlForNoDepSalList.Disabled( ct_PDFOut ) )
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        // --- ADD m.suzuki 2010/07/01 ----------<<<<<

        //----- ADD 2012/09/21 田建委 redmine#32415 ---------->>>>>
        /// <summary>
        /// 発行者ガイド
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントハンドラ</param>
        /// <remarks>
        /// <br>Note　　　  : 発行者ガイドを押す処理を行う。 </br>
        /// <br>Programmer  : 田建委</br>
        /// <br>Date        : 2012/09/21</br>
        /// <br>管理番号    : 2012/10/17配信分</br>
        /// <br>              Redmine#32415 発行者の追加対応</br>
        /// </remarks>
        private void uButton_SalesInputCode_Click(object sender, EventArgs e)
        {
            // ガイド表示
            Employee employeeInfo;
            int status;

            status = this._employeeAcs.ExecuteGuid(this.enterpriseCode, true, out employeeInfo);

            // ステータスが正常の場合
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                // 名前をUIにセット、コードはメモリ内に保存
                this._swSalesInputName = employeeInfo.Name.TrimEnd();
                this._swSalesInputCode = employeeInfo.EmployeeCode;

                if (!string.IsNullOrEmpty(_swSalesInputCode))
                {
                    this.tEdit_EmployeeCode.Text = this._swSalesInputCode.Trim().PadLeft(4, '0');
                    this.tEdit_SalesInputName.Text = this._swSalesInputName;
                }

                this.tEdit_EmployeeCode.Focus();
            }
        }
        //----- ADD 2012/09/21 田建委 redmine#32415 ----------<<<<<
    }
}
