using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Collections;
using System.Windows.Forms;

using Broadleaf.Application.UIData;
using Broadleaf.Library.Resources;
using Broadleaf.Application.Resources;
using Broadleaf.Application.Common;
using Broadleaf.Application.Remoting.Adapter;
using Broadleaf.Application.Remoting;
using Broadleaf.Application.Remoting.ParamData;
using Broadleaf.Library.Collections;
using Broadleaf.Windows.Forms;
using Broadleaf.Library.Windows.Forms;
using Broadleaf.Library.Globarization;
using Broadleaf.Library.Text;

using System.Xml;
using System.Xml.Serialization;
using Broadleaf.Xml.Serialization;
using System.Runtime.Serialization.Formatters.Binary; // 2010/04/27
using System.IO; // 2010/04/27
using Broadleaf.RCDS.Web.Services; // 2010/02/26
using Broadleaf.Application.Controller.Agent;  // 2011/02/01
using Broadleaf.Application.Controller.Util;  // 2011/02/01

namespace Broadleaf.Application.Controller
{
    /// <summary>
    /// 売上入力アクセスクラス(商品自動登録／伝票明細追加情報／一式入力／受注情報／伝票メモ／仕入情報関係／車両情報)
    /// </summary>
    /// <remarks>
    /// <br>Note       : 売上入力の制御全般を行います。</br>
    /// <br>Programmer : 20056 對馬 大輔</br>
    /// <br>Date       : 2007.11.12</br>
    /// <br></br>
    /// <br>UpDate</br>
    /// <br>2007.11.12 20056 對馬 大輔 新規作成</br>
    /// <br>2009.06.17 21024 佐々木 健 MANTIS[0013531] 車台番号の範囲チェックメソッドを追加</br>
    /// <br>2009.07.14 22018 鈴木 正臣 MANTIS[0013804] 車台番号の範囲チェックを一部修正(範囲:1～xなら入力:000…0を許可しない)</br>
    /// <br>2009.08.10 22018 鈴木 正臣 見出貼付機能の追加</br>
    /// <br>2009/09/08 20056 對馬 大輔 MANTIS[0013622] 仕入同時で作成する仕入データの仕入伝票区分(明細)をセットするように修正</br>
    /// <br>2009/10/15 22018 鈴木 正臣 MANTIS[0014360] 見出貼付機能の修正。（フル型式固定番号＝ゼロを含む場合の対応）</br>
    /// <br>Update Note  : 2009/09/08② 張凱</br>
    /// <br>               PM.NS-2-A・車輌管理</br>
    /// <br>               車輌管理機能の追加</br>
    /// <br>2009/10/21 22018 鈴木 正臣 MANTIS[0014465] 見出貼付機能の修正。（型式検索後に品番入力モードにして型式手入力した場合の対応）</br>
    /// <br>Update Note  : 2009/10/27 張凱</br>
    /// <br>               PM.NS-2-A・車輌管理</br>
    /// <br>               「MENTIS：0014492」の修正</br>
    /// <br>Update Note  : 2009/11/05 張凱</br>
    /// <br>               PM.NS-2-A・車輌管理</br>
    /// <br>               「MENTIS：0014553」の修正</br>
    /// <br>Update Note : 2009/10/19 張凱</br>
    /// <br>              PM.NS-3-A・PM.NS保守依頼②</br>
    /// <br>              PM.NS保守依頼②を追加</br>
    /// <br>Update Note : 2010/01/27 張凱 ４次改良対応</br>
    /// <br>              PM.NS保守依頼４次改良対応を追加</br>
    /// <br>Update Note : 2010/02/26 對馬 大輔 </br>
    /// <br>              SCM対応</br>
    /// <br>Update Note : 2010/03/30 對馬 大輔 </br>
    /// <br>              SCM対応</br>
    /// <br>              ①SCMオプションが無効の場合、リサイクル関連項目の読込を行わない</br>
    /// <br>              ②回答送信後、回答処理ボタンの押下を不可とする</br>
    /// <br>              ③回答処理ボタン入力制御を追加</br>
    /// <br>              ④問合せ一覧よりキャンセルデータを読み込んだ場合、返品として展開する</br>
    /// <br>Update Note:  2010/04/02 22018 鈴木 正臣</br>
    /// <br>           :  MANTIS[15240]見出貼付の修正（車種名カナの対応）</br>
    /// <br>Update Note : 2010/04/14 鈴木 正臣</br>
    /// <br>              MANTIS[15284] 品名が入力変更された時、品名カナにはＵＩ上の品名を半角変換してセットするよう変更</br>   
    /// <br>Update Note : 2010/04/20 對馬 大輔 </br>
    /// <br>              SCM対応</br>
    /// <br>              ①キャンセルデータ除外対応</br>
    /// <br>              ②商品種別を設定するように変更</br>
    /// <br>Update Note : 2010/04/27 gaoyh</br>
    /// <br>              受注マスタ（車両）自由検索型式固定番号配列の追加対応</br>
    /// <br>Update Note : 2010/05/13 鈴木 正臣</br>
    /// <br>              自由検索部品自動登録対応</br>   
    /// <br>Update Note : 2010/05/20 鈴木 正臣</br>
    /// <br>              自由検索型式固定番号配列の対応を修正</br>   
    /// <br>Update Note : 2010/05/27 佐々木 健</br>
    /// <br>              SCM対応</br>
    /// <br>              ①キャンセル時、SCM受注明細データ（回答）の単価、金額等が不正になる不具合の修正</br>
    /// <br>Update Note : 2010/05/30 20056 對馬 大輔 </br>
    /// <br>              成果物統合(６次改良＋７次改良＋自由検索＋SCM)</br>
    /// <br>Update Note : 2010/06/02 譚洪 PM.NS障害・改良対応（７月リリース案件）</br>
    /// <br>Update Note : 2010/06/22 張凱 redmine#9942</br>
    /// <br>              売掛なしの得意先で得意先名称を変更後に、管理番号を入力して、車輌検索すると、得意先名称が元に戻る。</br>
    /// <br>Update Note : 2010/06/26 李占川 </br>
    /// <br>              BLコード変換処理のロジックの削除</br>
    /// <br>Update Note : 2010/06/16 井上　裕貴</br>
    /// <br>              SCM対応</br>
    /// <br>              未回答分のキャンセル対応（SCM）</br>
    /// <br>Update Note : 2010/06/30 對馬 大輔</br>
    /// <br>              SCM対応</br>
    /// <br>              ①各種テーブルレイアウト変更対応</br>
    /// <br>Update Note : 2010/06/09　20056 對馬 大輔</br>
    /// <br>              仕入先変更時、数量が固定で再セットされる不具合対応</br>
    /// <br>Update Note : 2010/06/16 井上　裕貴</br>
    /// <br>Update Note : 2010/07/01　張凱</br>
    /// <br>              納品区分・H納品区分・指定拠点が変更された場合は、すべての同一発注先の明細に対して、設定内容を反映する</br>
    /// <br>Update Note : 2010/07/01 李占川 </br>
    /// <br>              Redmine#10768の対応。</br>
    /// <br>Update Note : 2010/07/06 楊明俊 </br>
    /// <br>              Redmine#10892の対応。</br>  
    /// <br>Update Note : 2010/07/16 李占川 </br>
    /// <br>              課題管理表#579,#580の対応。</br>  
    /// <br>Update Note:  2010/07/26 20056 對馬 大輔 UOE送信処理で作成された売上伝票を削除時にエラーとなる不具合の修正</br>
    /// <br>Update Note:  2010/09/24 20056 對馬 大輔 デバッグ起動時、例外エラーが発生しないように修正</br>
    /// <br>Update Note:  2010/09/29 20056 對馬 大輔 </br>
    /// <br>              売仕入同時入力を返品で入力した場合の符号を反転する</br>
    /// <br>Update Note: 2010/10/01 對馬 大輔</br>
    /// <br>             用品入力明細で掛率算出を可能とする</br>
    /// <br>Update Note: 2010/10/07 對馬 大輔</br>
    /// <br>             売仕入同時入力した返品データの更新を可能とする</br>
    /// <br>Update Note: 2010/11/30 20056 對馬 大輔</br>
    /// <br>             商品自動登録時の価格開始日の設定方法変更</br>
    /// <br>Update Note: 2010/12/02 20056 對馬 大輔</br>
    /// <br>             商品自動登録時、自動登録対象外明細が存在した場合、それ以降の明細が対象にならない件の対応</br>
    /// <br>Update Note:  2010/12/16 20056 對馬 大輔</br>
    /// <br>              ・現金得意先で明細入力後、伝票種別を売上以外に変更できない件の対応</br>
    /// <br>Update Note: 2011/01/31 21024 佐々木 健</br>
    /// <br>             SCM改良(マーケ検証結果対応)</br>
    /// <br>             ①納期設定マスタのレイアウト変更対応</br>
    /// <br>             ②見積時にも、回答納期を入力出来るように変更</br>
    /// <br>             ③回答送信のユーザーインターフェース変更(保存の流れを修正)</br>
    /// <br>             ④ツールバーの表示制御の修正</br>
    /// <br>Update Note: 2011/02/01 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)一部回答判定対応：SCM回答時、回答明細から判定し、回答区分に一部回答をセットするように変更する</br>
    /// <br>              2)PS管理番号保持対応：PS管理番号を正常にデータ登録／読込するように修正する</br>
    /// <br>              3)追加回答対応：SCM回答時、明細を追加して回答可能とする</br>
    /// <br>              4)値引き回答対応：SCM回答時、行値引き／商品値引き行を含んでいても回答可能とする</br>
    /// <br>              5)再問合せ対応：再問合せの回答を可能とする</br>
    /// <br>Update Note: 2011/02/10 22018 鈴木 正臣</br>
    /// <br>             価格再取得ダイアログの初期値を「いいえ」に変更</br>
    /// <br>Update Note: 2011/02/18 21024 佐々木 健</br>
    /// <br>             SCM対応</br>
    /// <br>              1)キャンセル区分の対応</br>
    /// <br>Update Note: 2011/03/04 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)CTIによる得意先情報表示時、担当者、受注者、発行者コードがゼロの場合、設定情報を参照しセットを行うように修正</br>
    /// <br>              2)CITからの起動時、初期フォーカス位置を型式指定番号とする</br>
    /// <br>              3)見積伝票呼出時、ＳＣＭデータが存在する場合、全明細を画面表示し、取消明細は送信しないように変更する</br>
    /// <br>                ※既存処理の売上伝票呼出時と同様とする</br>
    /// <br>Update Note: 2011/03/06 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)発注回答後に返品確定し、元伝票を修正呼出しし、再送信した場合、返品明細を送信しないように修正</br>
    /// <br>Update Note: 2011/03/07 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)いきなり回答時、年式をセットするように修正</br>
    /// <br>Update Note: 2011/03/08 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)発注回答時の受注伝票に対応するSCM情報の枝番不正対応</br>
    /// <br>Update Note: 2011/03/09 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)回答時、車検証型式をセットするように修正</br>
    /// <br>Update Note: 2011/03/10 20056 對馬 大輔</br>
    /// <br>              1)車輌情報入力ありの伝票を修正呼出し、追加検索でカラー、トリム、年式の絞込が有効となるように修正</br>
    /// <br>              2)同一明細でSFから問合せ／発注</br>
    /// <br>Update Note: 2011/03/14 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)画面拠点以外の拠点の問合せ／発注を展開可能とする</br>
    /// <br>              2)返品回答時、キャンセル区分をセットするように変更</br>
    /// <br>Update Note: 2011/03/16 20056 對馬 大輔</br>
    /// <br>              MANTIS[0017175]種別：売上で受注数入力後、種別：見積、単価見積に変更後、保存すると伝票が印刷されず不正データが作成される件の対応</br>
    /// <br>Update Note: 2011/03/22 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)PMから直接回答する場合、問合せ／発注に対し行追加する場合、問合せ元明細識別GUIDをセットするように変更</br>
    /// <br>Update Note: 2011/05/25 20056 對馬 大輔</br>
    /// <br>             SCM改良</br>
    /// <br>              1)送信確認画面に指示書番号の入力を追加</br>
    /// <br>              2)フッタ部に指示書番号の入力を追加</br>
    /// <br>              3)販売区分の入力を販売区分表示区分で制御</br>   
    /// <br>Update Note: 2011/05/30 曹文傑</br>
    /// <br>             キャンペーン売価を取得するように変更</br>
    /// <br>Update Note: 2011/08/04 王飛</br>
    /// <br>             連番895  管理番号検索モードの処理を追加する</br>
    /// <br>Update Note: 2011/08/10 徐錦山</br>
    /// <br>             連番817  売上伝票入力から仕入明細データへ得意先の処理追加</br> 
    /// <br>UpdateNote : 2011/07/14 譚洪 Redmine#22876 売単価の端数処理に関しての修正</br>
    /// <br>UpdateNote : 2011/07/20 譚洪 Redmine#22833 SCM部品価格問合せに関しての対応</br>
    /// <br>Update Note: 2011/07/15 施健</br>
    /// <br>             回答時、同BLコードを入力すると同一の問合せ行番号で枝番違いとなるため、SFでも複数のデータを表示するように修正</br>
    /// <br>UpdateNote : 2011/07/26 朱宝軍 Redmine#23212 プロジェクトNo1 PCC for NS（SCM）改良 プロジェクト課題管理表_No8</br>
    /// <br>UpdateNote : K2011/08/12 yangyi</br>
    /// <br>管理番号   : 10703874-00</br>
    /// <br>作成内容   : イスコ個別対応</br>
    /// <br>UpdateNote : 2011/08/30 譚洪 連番995 行追加すると、仕入伝票入力で追加した行が削除される時があるの対応</br>
    /// <br>UpdateNote : 2011/08/23 朱宝軍 PCCUOE_テーブルレイアウト変更対応</br>
    /// <br>UpdateNote : K2011/09/01 yangyi</br>
    /// <br>管理番号   : 10703874-00</br>
    /// <br>作成内容   : Redmine24294対応</br>
    /// <br>UpdateNote : 2011/09/05 譚洪 Redmine#23965 販売区分を変更時の価格再取得のメッセージ表示の対応</br>
    /// <br>UpdateNote : 2011/09/19 朱猛 Redmine#25233 売伝に発注データを展開する場合、売伝の設定行数以上のデータを内部的にも展開しないようにする</br>
    /// <br>UpdateNote : 2011/09/21 朱猛 売伝の設定行数以上のデータを内部的にも展開しない処理には回答完了のデータをカウントしないとする</br>
    /// <br>UpdateNote : 2011/09/21 Redmine#25217 登録、データ送信されることもあるが、いずれにしろ時間がかかりすぎるの対応 </br>
    /// <br>Update Note: 2011/09/21 劉立 Redmine#25385</br>
    /// <br>             PCCUOE／SF側　回答表示</br>
    /// <br>Update Note: 2011/09/21 高峰 Redmine#25408</br>
    /// <br>Update Note: 2011/10/12 陳建明 Redmine#25623</br>
    /// <br>Update Note: 2011/10/10 譚洪 Redmine#25772</br>
    /// <br>Update Note: 2011/10/14 yangyi Redmine#25763</br>
    /// <br>Update Note: 2011/10/26 鄧潘ハン Redmine#26010 アクセスバイオレーションエラーの対応</br>
    /// <br>Update Note: 2011/10/26 鄧潘ハン Redmine#26224</br>
    /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
    /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
    /// <br>UpdateNote : 2011/10/27 高峰 Redmine#26293 売上伝票入力／PMからいきなり回答する場合のＢＬコードの回答方法の対応</br>
    /// <br>Update Note: 2011/10/29 20056 對馬 大輔</br>
    /// <br>             障害対応</br>
    /// <br>               1)受注伝票を修正呼出した場合、金額情報が再計算される</br>
    /// <br>                 →受注伝票修正呼出時、価格の再計算を行わないように修正</br>
    /// <br>               2)原単価、原価率、売単価、売価率を変更しても発注受注に反映されない</br>
    /// <br>                 →受注データ分割時、価格再計算を行わないように修正</br>
    /// <br>                 →発注数入力時、受注情報の価格再計算を行わないように修正</br>
    /// <br>                 →発注数入力時、売上情報の価格再計算を行わないように修正</br>
    /// <br>               3)発注受注に販売区分が反映されない</br>
    /// <br>                 →販売区分入力時に受注情報を更新</br>
    /// <br>UpdateNote : 2011/11/01 yangmj Redmine#26224 販売区分の対応</br>
    /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
    /// <br>Update Note: 2011/11/07   鄧潘ハン Redmine#26442 発注選択時のBO区分の初期表示の対応</br>
    /// <br>Update Note: 2011/11/15   鄧潘ハン Redmine#7730 管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
    /// <br>Update Note: 2011/11/17   鄧潘ハン Redmine#7730 管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
    /// <br>Update Note: 2011/11/18   鄧潘ハン Redmine#7730 管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
    /// <br>Update Note: 2011/11/21   鄧潘ハン Redmine#7730 管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
    /// <br>Update Note: 2011/11/25   鄧潘ハン Redmine#8075 車両管理情報についての仕様変更</br>
    /// <br>Update Note: 2011/11/25   譚洪 Redmine#7953 売上伝票入力／受注データについての対応</br>
    /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
    /// <br>管理番号   : 10703874-00</br>
    /// <br>作成内容   : イスコ個別対応</br>
    /// <br>Update Note: K2012/01/06 shij</br>
    /// <br>管理番号   ：10707327-00 2012/01/25配信分対応</br>
    /// <br>           :Redmine#27542 売上伝票入力/受注データの作成の修正</br>
    /// <br>Update Note: 2012/01/16 30517 夏野 駿希</br>
    /// <br>             SCM改良・特記事項対応</br>
    /// <br>Update Note: 2012/01/19 譚洪 Redmine#28098</br>
    /// <br>作成内容   : 拠点管理／送信済みエラーの対応</br>
    /// <br>Update Note: 2012/01/20 20056 對馬 大輔</br>
    /// <br>             障害対応</br>
    /// <br>               送信済みエラーとならない条件で、売仕入同時入力を既に存在する仕入伝票情報を</br>
    /// <br>               入力して登録を行った時、送信済みエラーとなってしまう 件の対応</br>
    /// <br>Update Note: 2012/02/27 wangf</br>
    /// <br>管理番号   : 10707327-00 2012/03/28配信分</br>
    /// <br>             Redmine#28281 伝票に印刷される行数の不具合の対応</br>
    /// <br>Update Note: 2012/03/05 20056 對馬 大輔</br>
    /// <br>管理番号   : 10707327-00 障害対応</br>
    /// <br>             得意先電子元帳の赤伝で作成されるPMSF連携伝票の返品手数料明細は</br>
    /// <br>             車両複数チェックを行わないように変更する</br>
    /// <br>Update Note: 2012/04/09 yangmj</br>
    /// <br>管理番号   : 10801804-00 2012/05/24配信分</br>
    /// <br>             Redmine#29313   売上伝票入力 商品価格の再取得で販売区分が初期値に戻る</br>
    /// <br>Update Note: 2012/05/24 30745 吉岡 孝憲</br>
    /// <br>             障害No170</br>
    /// <br>             SCM受注明細データ（回答）にPS管理番号項目追加</br>
    /// <br>Update Note: 2012/05/24 高川　悟 </br>
    /// <br>             障害No171</br>
    /// <br>             回答純正商品番号がセットされない障害の修正</br>
    /// <br>Update Note: 2012/05/24 湯上 千加子</br>
    /// <br>             障害対応</br>
    /// <br>               売上伝票入力にて一部の部品を行削除して送信すると</br>
    /// <br>               表示順位が不正な状態で送信されてしまう 件の対応</br>
    /// <br>Update Note: 2012/05/25 吉岡　孝憲 </br>
    /// <br>             障害No134</br>
    /// <br>             型式（フル型式）が完全な型式では無い場合、空白を設定</br>
    /// <br>Update Note: 2012/05/30 20073 西 毅 </br>
    /// <br>             SCM改良対応・自動見積部品コード</br>
    /// <br>Update Note: 2012/05/31 30744 湯上 千加子 </br>
    /// <br>             障害No10277</br>
    /// <br>             SCM受注データ(車両情報)装備情報の設定方法の変更</br>
    /// <br>Update Note: 2012/05/31 高川　悟 </br>
    /// <br>             障害No131</br>
    /// <br>             ＳＦ側に返すグレード名称（GradeNameRF）項目を全角に変換する</br>
    /// <br>Update Note: 2012/06/12 吉岡　孝憲 </br>
    /// <br>             障害No134 135 修正漏れ</br>
    /// <br>             134、135対応時の修正漏れの対応</br>
    /// <br>Update Note: 2012/06/15 吉岡 孝憲</br>
    /// <br>             障害対応 №90</br>
    /// <br>             SCM障害№171修正時のバグ対応。</br>
    /// <br>Update Note: 2012/06/18 脇田　靖之 </br>
    /// <br>             障害№135 修正漏れ</br>
    /// <br>             BL-POSの得意先で登録時に項目チェックでエラーになり、</br>
    /// <br>             エラー項目修正後再度登録を行うとデータが何も登録されることなく、</br>
    /// <br>             明細がクリアされた状態で元の画面に戻る障害の対応</br>
    /// <br>Update Note: 2012/06/19 20073 西 毅 </br>
    /// <br>             自動見積部品コードのPM側のセットは廃止するように修正</br>
    /// <br>Update Note: 2012/06/24 20056 對馬 大輔 </br>
    /// <br>             2012/06/28配信分障害一覧No124</br>
    /// <br>Update Note: 2012/06/27 20056 對馬 大輔 </br>
    /// <br>             SCM障害№171修正時のバグ対応</br>
    /// <br>Update Note: 2012/07/03 20056 對馬 大輔 </br>
    /// <br>             SCM障害№117修正時のバグ対応</br>
    /// <br>Update Note: 2012/07/06 脇田　靖之 </br>
    /// <br>             車台管理番号を変更しても年式がマスタの内容で反映されない件の修正</br>
    /// <br>Update Note: 2012/07/31 30744 湯上 千加子</br>
    /// <br>             SCM障害№10356対応　手動回答時に行挿入した明細行が回答されない障害の対応</br>
    /// <br>Update Note: 2012/07/11 No.35 吉岡 孝憲</br>
    /// <br>管理番号   : </br>
    /// <br>             返品時に問合せ番号、問合せ行番号を設定する</br>
    /// <br>Update Note: 2012/07/11 30744 湯上 千加子</br>
    /// <br>             SCM障害№111 連携得意先のUOE発注時、SCM受注明細データが作成されない障害の対応</br>
    /// <br>Update Note: 2012/07/11 三戸　伸悟 </br>
    /// <br>             障害No115</br>
    /// <br>             原動機型式（エンジン）の不正</br>
    /// <br>Update Note: 2012/08/23 脇田　靖之 </br>
    /// <br>             リマークセットの障害修正</br>
    /// <br>Update Note: 2012/08/30 30745 吉岡 孝憲</br>
    /// <br>             2012/10月配信予定SCM障害№10345対応 </br>
    /// <br>Update Note: 2012/09/20 三戸　伸悟</br>
    /// <br>管理番号   : </br>
    /// <br>             №35の戻し</br>
    /// <br>Update Note: 2012/09/04 脇田　靖之 </br>
    /// <br>             カラー・トリムの存在チェックを外し、マスタに存在しないコードも入力可能にするように修正</br>
    /// <br>Update Note: 2012/09/11 脇田　靖之 </br>
    /// <br>             カラー・トリムの存在チェックを外し、マスタに存在しないコードも入力可能にするように修正</br>
    /// <br>Update Note: 2012/09/15 西　毅 </br>
    /// <br>             車輛管理マスタの型式任意入力時にカラー、トリムコードが表示されない障害の修正</br>
    /// <br>Update Note: 2012/10/23 脇田 靖之</br>
    /// <br>             売仕入同時入力で仕入データの重複が発生してしまう件の修正</br>
    /// <br>Update Note: 2012/10/30 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             2012/10/20障害修正による2次障害の修正</br>
    /// <br>             （得意先マスタを変更した時に、拠点コードが変更されない）</br>
    /// <br>Update Note: 2012/11/13 宮本 利明</br>
    /// <br>管理番号   : 10801804-00 №1668</br>
    /// <br>             売上過去日付制御を個別オプション化（イスコまたはオプションありで日付制御）</br>
    /// <br>Update Note: 2012/11/27 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             売上仕入同時入力で仕入情報を設定した明細を削除すると仕入データの重複が発生する件の修正</br>
    /// <br>Update Note: 2012/12/12 30744 湯上 千加子 </br>
    /// <br>             2013/01/16配信 SCM障害No10423対応</br>
    /// <br>             委託倉庫・優先倉庫の判定方法の変更</br>
    /// <br>Update Note: 2012/11/30 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             売上仕入同時入力で売上伝票を別々で入力し仕入伝票番号を同一で作成し、</br>
    /// <br>             作成した売上伝票の片方を伝票削除した場合、仕入伝票が呼び出せなくなる件の修正</br>
    /// <br>Update Note: 2012/12/20 30744 湯上 千加子</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             2013/01/16配信 システムテスト障害№24対応</br>
    /// <br>Update Note: 2013/01/29 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             売上伝票入力から車輌管理情報を連続して登録すると、</br>
    /// <br>             車輌管理番号(CarMngNoRF)が重複する障害の修正</br>
    /// <br>Update Note: 2013/01/30 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             貸出計上時に仕入情報を入力後、伝票修正で仕入情報を更新した場合、</br>
    /// <br>             伝票呼出しができなくなる障害の修正</br>
    /// <br>Update Note: 2013/01/24 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             売上仕入同時入力を売上伝票２伝票で同じ仕入情報で作成し、</br>
    /// <br>             修正呼出しで片方の仕入情報を変更した場合、元の仕入伝票にデータが残ったまま</br>
    /// <br>             新しい仕入伝票が作成される障害を修正</br>
    /// <br>Update Note: 2013/01/14 李艶兵</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             2013/03/13配信 Redmine#33792 UOE発注データの売上日付を変更した場合、
    /// <br>             UOE伝票は変更した売上日付を取得しない障害の修正</br>
    /// <br>Update Note: 2012/12/27 30744 湯上 千加子</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             2013/03/13配信 SCM障害№10378対応</br>
    /// <br>             WebServerチェック時のログ出力追加</br>
    /// <br>Update Note: 2013/01/07 吉岡 孝憲</br>
    /// <br>管理番号   : </br>
    /// <br>             2012/03/13配信予定 SCM障害№10474対応 ダブって発注される</br>
    /// <br>Update Note: 2013/02/14 脇田 靖之</br>
    /// <br>管理番号   : </br>
    /// <br>             車台番号入力時、生産年式範囲をチェックするように修正</br>
    /// <br>Update Note: 2013/02/19 脇田 靖之</br>
    /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
    /// <br>           : BLコード０対応　対応漏れ</br>
    /// <br>Update Note: 2013/02/22 吉岡 孝憲</br>
    /// <br>             2013/03/06配信 №108対応時の不具合対応 </br>
    /// <br>Update Note: 2013/02/26 脇田 靖之</br>
    /// <br>管理番号   : 10806793-00</br>
    /// <br>             見積計上時のＵＯＥ発注対応</br>
    /// <br>             単価見積（在庫有り）計上時のＵＯＥ発注障害対応</br>
    /// <br>Update Note: 2013/03/27 吉岡 孝憲</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害№10491対応</br>
    /// <br>Update Note: 2013/03/27 No.1854 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             BLコード情報未設定データ障害の対応</br>
    /// <br>Update Note: 2013/02/05 宮本 利明</br>
    /// <br>管理番号   : 10801804-00 受注対応</br>
    /// <br>             伝票種別に「受注」を追加</br>
    /// <br>Update Note: 2013/04/11 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00 受注対応で以下の障害の修正</br>
    /// <br>             ①先頭行以外の行の車輌情報が登録されない</br>
    /// <br>             ②受注数にマイナスを入力するとアラートが出て画面上は元の値に戻るが</br>
    /// <br>               登録するとマイナスで登録される</br>
    /// <br>             ③伝票種別が「売上」で受注伝票を登録した後、続けて入力すると</br>
    /// <br>               伝票種別が「受注」になる</br>
    /// <br>             ④伝票種別が「受注」で受注数が未設定の場合、エラーにする</br>
    /// <br>             ⑤受注伝票を呼出し「挿入」「削除」等を行うと登録明細の順番が変わる</br>
    /// <br>Update Note: 2013/04/17 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             納入先確認不具合対応</br>
    /// <br>Update Note: 2013/04/18 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             受注対応削除</br>
    /// <br>Update Note: 2013/04/18 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             車輌管理番号を呼出して部品検索すると、部品選択に年式範囲外の部品が表示される障害対応</br>
    /// <br>Update Note: 2013/03/21 FSI今野 利裕</br>
    /// <br>管理番号   : 10900269-00</br>
    /// <br>             SPK車台番号文字列対応</br>   
    /// <br>Update Note: 2013/04/19 30744 湯上 千加子</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害№10521対応 SCM受注データ（車両情報）に車両管理コード追加</br>
    /// <br>Update Note: 2013/05/08 30745 吉岡 孝憲</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             システムテスト障害№7、№9対応</br>
    /// <br>Update Note: 2013/05/08 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             車輌未確定の車輌管理データ呼出時にエラーとなる障害を修正</br>
    /// <br>Update Note: 2013/03/28 30744 湯上 千加子</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害№192対応</br>
    /// <br>Update Note: 2013/05/08 30745 吉岡
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             2013/06/18配信　SCM障害№10308,№10528</br>
    /// <br>Update Note: 2013/05/15 30745 吉岡
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             2013/06/18配信　SCM障害№10410</br>
    /// <br>Update Note: 2013/05/09 30744 湯上 千加子</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害№10384対応 SCM受注データ（車両情報）に入庫予定日追加</br>
    /// <br>Update Note: 2013/02/27 qijh</br>
    /// <br>管理番号   : 10900690-00 配信日なし分</br>
    /// <br>             Redmine#34752 「PMSCMのNo.10385」BLPの対応</br>
    /// <br>Update Note: 2013/04/08 30744 湯上 千加子</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害№10488対応</br>
    /// <br>Update Note: 2013/05/24  30747 三戸 伸悟</br>
    /// <br>           : 2013/06/18配信分 SCM障害№10536対応</br>
    /// <br>           : タブレット使用区分追加</br>
    /// <br>Update Note: 2013/05/24  30744 湯上 千加子</br>
    /// <br>           : SCM障害№10537対応</br>
    /// <br>Update Note: 2013/05/08 30747 三戸 伸悟</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害№10328対応 手動回答時品番検索最前面</br>
    /// <br>Update Note: 2013/05/22 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00 仕掛一覧№1964</br>
    /// <br>             検索モードが"品番入力"の場合、車台番号に切り替えるように修正</br>   
    /// <br>Update Note: 2013/06/10 30747 三戸 伸悟</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             システムテスト障害№33対応</br>
    /// <br>Update Note: 2013/06/17 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00</br>
    /// <br>             新規登録ログ出力対応</br>
    /// <br>Update Note: 2013/06/19 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00</br>
    /// <br>             2013/06/18配信　システムテスト障害№64</br>
    /// <br>Update Note: 2013/06/24 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00</br>
    /// <br>             タブレット対応  【2013/05/24 三戸 SCM障害№10536】の修正と被ってるため、ヘッダコメントのみ </br>
    /// <br>Update Note: 2013/06/26 30744 湯上 千加子</br>
    /// <br>管理番号   : 10902175-00</br>
    /// <br>             タブレット対応 ダイレクト回答時、連結企業設定マスタによる設定を行う処理を追加</br>
    /// <br>Update Note: 2013/10/02 吉岡</br>
    /// <br>管理番号   : </br>
    /// <br>             SCM仕掛一覧№10577対応</br>
    /// <br>Update Note: 2013/09/27 宮本 利明</br>
    /// <br>管理番号   : 10902175-00 SCM仕掛一覧 №10576</br>
    /// <br>             受注情報作成処理(存在する場合のみ)を追加</br>
    /// <br>Update Note: 2013/10/17 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00</br>
    /// <br>             2013/06/18配信　システムテスト障害№65,70</br>
    /// <br>Update Note: 2013/11/07 吉岡</br>
    /// <br>管理番号   : 10902175-00</br>
    /// <br>             VSS[019] システムテスト障害№10 №10328関連</br>
    /// <br>Update Note: 2013/11/13 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : システムテスト一覧№34対応（仕掛一覧 №2119）</br>
    /// <br>Update Note: 2013/11/15 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : システムテスト一覧№39対応（仕掛一覧 №2119）</br>
    /// <br>Update Note: 2013/11/22 30744 湯上 千加子</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : 商品保証課Redmine#679対応</br>
    /// <br>Update Note: 2013/11/29 30744 湯上 千加子</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : 商品保証課Redmine#723対応</br>
    /// <br>Update Note: 2013/12/11 30744 湯上 千加子</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : SCM仕掛一覧№10613対応</br>
    /// <br>Update Note: 2013/12/19 陳健</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : Redmine#41550 売上伝票入力消費税8%増税対応</br>
    /// <br>Update Note: 2013/12/24 30744 湯上 千加子</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : SCM仕掛一覧№10619対応</br>
    /// <br>Update Note: 2014/01/23 陳健</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : Redmine#41771 売上伝票入力消費税8%増税対応</br>
    /// <br>Update Note: 2014/04/02 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : 仕掛一覧№2346対応</br>
    /// <br>             消費税の算出がおかしくなる障害。</br>
    /// <br>Update Note: K2014/02/09 yangyi</br>
    /// <br>管理番号   : 10970681-00 前橋京和商会個別個別対応</br>
    /// <br>           : 売上伝票入力の改良対応</br>
    /// <br>Update Note: K2014/05/08 zhujw</br>
    /// <br>管理番号   : 11070071-00 丸徳商会 個別開発</br>
    /// <br>           : 丸徳商会-得意先ガイドの改良対応</br>
    /// <br>Update Note: K2014/06/03 zhujw</br>
    /// <br>管理番号   : 11070071-00 丸徳商会 個別開発</br>
    /// <br>           : RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について</br>
    /// <br>           : ①得意先コードをガイド（[F5]、[☆]）から入力した場合、得意先ガイドが表示されません</br>
    /// <br>           : ②意先ガイド画面のPGID変更</br>
    /// <br>Update Note: 2014/05/19 宮本 利明</br>
    /// <br>管理番号   : 11070071-00</br>
    /// <br>           : 仕掛一覧№2218 車輌備考欄にコード入力項目を追加</br>
    /// <br>Update Note: 2014/06/04 30744 湯上 千加子</br>
    /// <br>管理番号   : </br>
    /// <br>           : SCM仕掛一覧№10659対応</br>
    /// <br>Update Note: 鄧潘ハン 2014/07/23</br>
    /// <br>管理番号   : 11070147-00</br>
    /// <br>           : SCM仕掛一覧№10659の3SCM受発注明細データに在庫状況区分のセットの対応</br>
    /// <br>Update Note: 2014/08/13 宮本 利明</br>
    /// <br>管理番号   : 11070148-00 SCM仕掛一覧 №10643</br>
    /// <br>             返品時にSCM問合せデータを取得して受発注種別を引き継ぐように修正</br>
    /// <br>Update Note: 2014/09/04 西 毅</br>
    /// <br>管理番号   : 11070148-00 障害対応</br>
    /// <br>             SCM得意先で手入力商品登録しようとすると例外エラー終了してしまう障害の修正</br>
    /// <br>Update Note: 2014/09/01 譚洪</br>
    /// <br>管理番号   : 11070184-00　SCM障害対応 №190　RedMine#43289</br>
    /// <br>         　: SFから問合せの車輌情報・備考を売上伝票入力に表示する</br>
    /// <br>Update Note: K2014/06/12 脇田 靖之</br>
    /// <br>管理番号   : 11001634-00</br>
    /// <br>             ㈱フタバ個別 赤伝･返品･削除時在庫引当処理対応</br>
    /// <br>Update Note: K2014/08/15 脇田 靖之</br>
    /// <br>管理番号   : 11001634-00</br>
    /// <br>             ㈱フタバ個別 赤伝･返品･削除時在庫引当処理対応</br>
    /// <br>             システムテスト障害№7、10対応</br>
    /// <br>Update Note: K2014/08/21 脇田 靖之</br>
    /// <br>管理番号   : 11001634-00</br>
    /// <br>             ㈱フタバ個別 赤伝･返品･削除時在庫引当処理対応</br>
    /// <br>             システムテスト障害№13対応</br>
    /// <br>Update Note: 2014/09/22 鹿庭 一郎</br>
    /// <br>管理番号   : 11070184-00 SCM仕掛一覧No.10598対応</br>
    /// <br>             文字列車台番号の有効化対応</br>
    /// <br>Update Note: 2014/11/10 31065 豊沢 憲弘</br>
    /// <br>管理番号   : 11070221-00　20141126全体配信 システムテスト障害№8対応</br>
    /// <br>         　: SFで即発注時、PM側でセット品子を複数選択後に登録した場合、</br>
    /// <br>         　: PM側売伝の売上金額と、SF側の金額に差異あるの対応</br>
    /// <br>Update Note: 2014/11/14 30744 湯上 千加子</br>
    /// <br>管理番号   : SCM仕掛一覧№10694対応</br>
    /// <br>         　: SFでセット品子を複数選択して発注しPM側で手動回答時、SCM受注明細データ（回答）のセット品情報がクリアされる</br>
    /// <br>Update Note: 2014/08/27 zhujw</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>           : RedMine43254 在庫品なのにも関わらず、売仕入同時入力が起動し、仕入データが作成されたの修正</br>
    /// <br>Update Note: 2014/10/20 脇田 靖之</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>           : Redmine 43729 №3(仕掛№2463)売仕入同時入力で作成される仕入データの担当者が仕入先マスタの担当者を売上伝票入力上の担当者に修正する。</br>
    /// <br>           : 仮対応）仕入データの担当者に画面の担当者を設定するように仮対応</br>
    /// <br>Update Note: 2014/10/27 脇田 靖之</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>           : RedMine43254 障害対応</br>
    /// <br>           : 在庫有りの商品を発注すると発注情報が作成されない障害の修正</br>
    /// <br>Update Note: 2014/11/18 劉超</br>
    /// <br>管理番号   : 11002003-00　RedMine#43035</br>
    /// <br>         　: 車輛出荷部品表示に表示されないデータの調査</br>
    /// <br>Update Note: 2014/11/10 陳艶丹</br>
    /// <br>管理番号   : 11070149-00 №2157 RedMine#43865</br>
    /// <br>             宮田自動車商会様（課題№18）</br>
    /// <br>             見積計上時に在庫品が混在している場合で且つ発注を実行した場合、</br>
    /// <br>             作成される売上データの車両情報が抜ける。</br>
    /// <br>Update Note: 2014/12/11 脇田 靖之</br>
    /// <br>管理番号   : 11070149-00 №2157 RedMine#43865</br>
    /// <br>             宮田自動車商会様（課題№18）</br>
    /// <br>             既存障害対応</br>
    /// <br>             受注計上時に在庫品をUOE発注した場合、エラーになる障害の対応</br>
    /// <br>Update Note: 2014/12/19  30744 湯上 千加子</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化 PMNS対応 自動回答方式の追加</br>
    /// <br>           : SCM高速化 PMNS対応 貸出区分、メーカー希望小売価格、オープン価格区分の追加</br>
    /// <br>Update Note: 2015/01/07  30744 湯上 千加子</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化 メーカー希望小売価格対応</br>
    /// <br>Update Note: 2015/01/19  31065 豊沢 憲弘</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : リコメンド対応</br>
    /// <br>Update Note: 2015/01/27  30744 湯上 千加子</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化Redmine#33対応</br>
    /// <br>Update Note: 2015/01/28  30744 湯上 千加子</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化Redmine#61対応</br>
    /// <br>Update Note: 2015/01/29  30744 湯上 千加子</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化Redmine#87対応   SCM高速化Redmine#61デグレ対応</br>
    /// <br>Update Note: 2015/01/30  30744 湯上 千加子</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化 生産年式、車台番号対応</br>
    /// <br>Update Note: 2015/02/04  31065 豊沢 憲弘</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : PM-SCM社内障害一覧No.72対応</br>
    /// <br>Update Note: 2015/02/10  30744 湯上 千加子</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化Redmine#180対応</br>
    /// <br>Update Note: 2015/02/10  30745 吉岡</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化 回答納期区分対応 項目追加</br>
    /// <br>Update Note: 2015/02/17  30745 吉岡</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化Redmine#231対応</br>
    /// <br>Update Note: 2015/02/18  30744 湯上</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化Redmine#243対応</br>
    /// <br>Update Note: 2015/02/23  30746 高川 悟</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化 C向け種別・特記事項対応</br>
    /// <br>Update Note: 2015/02/09  30744 湯上 千加子</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>           : SCM連携マルチキャスト対応</br>
    /// <br>Update Note: 2015/03/06  30744 湯上</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化Redmine#342対応</br>
    /// <br>Update Note: 2015/03/13  30745 吉岡</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化Redmine#365 返品時のお買い得選択区分内容不正</br>
    /// <br>Update Note: 2015/03/18  31065 豊沢</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化 メーカー希望小売価格対応</br>
    /// <br>Update Note: 2015/03/30  30744 湯上</br>
    /// <br>管理番号   : </br>
    /// <br>           : 全体配信システムテスト障害№59対応</br>
    /// <br>Update Note: 2015/04/06 30757 佐々木 貴英</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>             仕掛№2405 得意先変更時表示区分再取得対応</br>
    /// <br>Update Note: 2015/05/12  イン晶晶</br>
    /// <br>管理番号   : 11175123-00</br>
    /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
    /// <br>Update Note: 2015/06/25  30744 湯上</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : 商品保証課Redmine#4149対応 </br>
    /// <br>           : ①同一行番号で枝番違いの問合せの時、回答済データとの突き合わせ条件に行番号枝番を追加する</br>
    /// <br>           : ②SCM受注明細データ（問合せ・発注）のデータキャッシュ時、既存チェック時の条件に問合せ行番号枝番を追加する</br>
    /// <br>           : ③返品データ生成時、売上明細データからSCM受注明細データ（回答）を生成する際、対象データの抽出条件に問合せ行番号枝番を追加する</br>
    /// <br>Update Note: 2015/07/08  31065 豊沢</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : 商品保証課Redmine#4222対応</br>
    /// <br>           : 手動回答時、問合せ明細.行番号、枝番に結びつくBLコードを【商品の情報に関わらず】同一BLコードで回答するように修正</br>
    /// <br>Update Note: 2015/08/19  宋剛</br>
    /// <br>管理番号   : 11170129-00</br>
    /// <br>           : 障害報告Redmine#47004対応</br>
    /// <br>           : 売上伝票入力の請求先情報画面閉じる時、請求先情報をキャッシュに更新しないように修正</br>
    /// <br>Update Note: 2015/09/03 田建委</br>
    /// <br>管理番号   : 11170129-00 </br>
    /// <br>           : Redmine#47038 【№526】売上伝票入力の障害対応</br>
    /// <br>           : 仕入伝票が修正モードの場合、仕入明細データの「仕入形式（元）」と「仕入明細通番（元）」の補正処理を行いません。</br>
   /// <br>Update Note: 2015/09/03 脇田 靖之</br>
    /// <br>管理番号   : 11170139-00</br>
    /// <br>             社内障害№707 販売区分を変更した場合に売価が再計算されない障害の対応</br>
    /// <br>Update Note: 2015/11/27 時シン</br>
    /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
    /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
    /// <br>Update Note: 2015/12/04 斉勝</br>
    /// <br>管理番号   : 11170204-00 </br>
    /// <br>           : Redmine#47421 【№349】売上伝票入力の障害対応</br>
    /// <br>           : SCM受注データ(車両情報)の「車台番号」の設定に、車両情報の「車台型式-車台番号」が30桁超える場合、「車台番号」のみ設定する。(「車台型式」は設定しない)</br>
    /// <br>Update Note: 2015/12/14 李侠</br>
    /// <br>管理番号   : 11175418-00</br>
    /// <br>             売仕入同時入力SEQが異なる障害対応 </br>
    /// <br>Update Note: K2016/12/14  時シン</br>
    /// <br>管理番号   : 11202330-00</br>
    /// <br>           : 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応</br>
    /// <br>Update Note: K2016/12/26 譚洪</br>
    /// <br>管理番号   : 11270116-00 売上伝票入力パッケージ出荷用ソースのマージ</br>
    /// <br>             ㈱福田部品オプション（個別）</br>
    /// <br>Update Note: 2017/04/13 宋剛</br>
    /// <br>管理番号   : 11370030-00 Redmine#49284 売上仕入同時入力 品番無エラー対応</br>
    /// <br>Update Note: 2017/04/13 譚洪</br>
    /// <br>管理番号     11370030-00 Redmine#49283 仕入担当参照区分を追加</br>
    /// <br>Update Note: 2018/04/16 田建委</br>
    /// <br>管理番号   : 11470007-00</br>
    /// <br>           : ①SFからの問い合わせデータに追加された新BLコード等をBLコード検索部品の検索パラメータに設定する。</br>
    /// <br>           : ②SFへの回答データに問い合わせデータの新BLコード等を設定する。</br>
    /// <br>Update Note: K2018/12/07 陳艶丹</br>
    /// <br>管理番号   : 11475134-00</br>
    /// <br>             RedMine#49789 前橋京和商会個別　得意先メモ障害の対応</br>
    /// <br>Update Note: 2019/01/08 譚洪</br>
    /// <br>管理番号   : 11470076-00</br>
    /// <br>             新元号の対応</br>
    /// <br>Update Note: 2020/02/24 譚洪</br>
    /// <br>管理番号   : 11570208-00</br>
    /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
    /// <br>Update Note: 2020/12/31 譚洪</br>
    /// <br>管理番号   : 11600001-00</br>
    /// <br>             PMKOBETSU-4100 BLP（フル型以外時に型式情報が表示されない）の対応</br>
    /// <br>Update Note: 2021/04/12 陳艶丹</br>
    /// <br>管理番号   : 11770021-00</br>
    /// <br>           : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
    /// <br>Update Note: K2021/05/10  陳艶丹</br>
    /// <br>管理番号   : 11601223-00</br>
    /// <br>           : PMKOBETSU-4140 No.32 明細の順番が入れ替わる現象の対応</br>
    /// <br>Update Note : 2021/06/21 譚洪</br>
    /// <br>管理番号    : 11770021-00</br>
    /// <br>            : PMKOBETSU-4136 得意先ガイド掛率グループ表示不正の対応</br>
    /// <br>Update Note : 2021/07/13 譚洪</br>
    /// <br>管理番号    : 11601223-00</br>
    /// <br>            : PMKOBETSU-4151 仕入伝票番号消失障害の対応</br>
    /// <br>Update Note : 2021/09/23 陳艶丹</br>
    /// <br>管理番号    : 11601223-00</br>
    /// <br>            : BLINCIDENT-3014 貸出計上時に仕入先が空白になるの対応</br>
    /// </remarks>
    using SCMWebServer = SingletonInstance<SCMWebAcsAgent>; // 2011/02/01
    using SCMWebServer2 = SingletonInstance<SCMWebAcsAgentForCnctSet>; // 2011/05/25
    using System.Diagnostics;  //ADD yangyi K2014/02/09
    using System.Threading;    //ADD yangyi K2014/02/09

    //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ---------------->>>>>
    /// <summary>
    /// 表示区分列挙体
    /// </summary>
    internal enum PriceSelectDivValues : int
    {
        None = -1
      , PrimeGoods = 0
      , PureGoods = 1
      , HigherPureMultiple = 2
      , HigherPureSingle = 3
    }
    //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ----------------<<<<<

    public partial class SalesSlipInputAcs
    {
        #region ●商品自動登録
        // ===================================================================================== //
        // プライベート変数
        // ===================================================================================== //
        # region Private Members
        private SalesInputDataSet.AutoEntryGoodsDataTable _autoEntryGoodsDataTable;
        //>>>2010/11/30
        private DateTime _hisTotalDayMonthly; // 前回月次更新日
        private List<DateTime> _startMonthDateList; // 自社テーブル開始日リスト
        //<<<2010/11/30

        // ---ADD 2011/05/30------------------>>>>>
        private CampaignObjGoodsSt _campaignObjGoodsSt = null;
        private CampaignObjGoodsStAcs _campaignObjGoodsStAcs = null;
        private string _sectionCode = string.Empty;
        // ---ADD 2011/05/30------------------<<<<<

        // ----- ADD K2011/08/12 --------------------------->>>>>
        private EmployeeAcs _employeeAcs;
        //private IGetServerTime _iGetServerTime; // DEL K2011/12/09
        public bool _slipNote2ErrFlag;
        // ----- ADD K2011/08/12 ---------------------------<<<<<
        public bool _salesDateErrFlag; //ADD K2011/09/01
        private string login_EnterpriseCode = "0123130012020600"; // ADD K2011/12/09

        private bool _salesCodeChgFlag; //ADD 2012/04/09 yangmj redmine#29313

        // 2012/08/30 ADD T.Yoshioka 2012/10月配信予定 SCM障害№10345 --------->>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 得意先マスタ　情報
        /// </summary>
        private CustomerInfo _customerInfo;
        /// <summary>
        /// 得意先コード　保管用
        /// </summary>
        private int _customerCodeSave ;
        // 2012/08/30 ADD T.Yoshioka 2012/10月配信予定 SCM障害№10345 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

        // ADD 2013/03/28 SCM障害№192対応 --------------------------------------->>>>>
        // 入力行オーバーフラグ
        public bool _inputOverCountFlag;
        // ADD 2013/03/28 SCM障害№192対応 ---------------------------------------<<<<<

        // --- ADD K2014/06/12 Y.Wakita ---------->>>>>
        private string _sectWarehouseCd1 = string.Empty;    // 拠点倉庫1
        private string _sectWarehouseCd2 = string.Empty;    // 拠点倉庫2
        private string _sectWarehouseCd3 = string.Empty;    // 拠点倉庫3

        private bool _sectWarehouseCdDiv = false;    // 拠点設定マスタ
        private bool _custWarehouseCdDiv = false;    // 得意先設定マスタ

        public bool _deleteFlg = false;     // 削除フラグ
        public int _deleteAcptAnOdrStatus;  // 削除元受注ステータス
        // --- ADD K2014/06/12 Y.Wakita ----------<<<<<

        // ADD 2014/11/10 k.toyosawa 20141126全体配信 障害対応 --->>>>>>
        int _lastRowNumber = -1;
        // ADD 2014/11/10 k.toyosawa 20141126全体配信 障害対応 ---<<<<<<
        // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
        private const int CtDisplayCd = 0;
        private int DisplayDivCd = 0;
        private const string CtTitleNoSt = "[";
        private const string CtSpace = " ";
        // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
        // ------ ADD 2021/06/21 譚洪 PMKOBETSU-4136 得意先ガイド掛率グループ表示不正の対応-------->>>>>
        private const int RateGroupNoSet = -1;
        // ------ ADD 2021/06/21 譚洪 PMKOBETSU-4136 得意先ガイド掛率グループ表示不正の対応-------->>>>>
        # endregion

        // ===================================================================================== //
        // プロパティ
        // ===================================================================================== //
        # region Properties
        /// <summary>
        /// 商品自動登録データテーブルオブジェクト
        /// </summary>
        public SalesInputDataSet.AutoEntryGoodsDataTable AutoEntryGoodsDataTable
        {
            set { this._autoEntryGoodsDataTable = value; }
            get { return this._autoEntryGoodsDataTable; }
        }
        // ---ADD 2011/05/30------------>>>>>
        /// <summary>
        /// キャンペーン対象商品設定データ
        /// </summary>
        public CampaignObjGoodsSt CampaignObjGoodsStInfo
        {
            get { return this._campaignObjGoodsSt; }
        }
        /// <summary>
        /// キャンペーン対象商品設定アクセス
        /// </summary>
        public CampaignObjGoodsStAcs CampaignObjGoodsStAcsInfo
        {
            set { this._campaignObjGoodsStAcs = value; }
            get { return this._campaignObjGoodsStAcs; }
        }
        /// <summary>
        /// 画面の拠点コード
        /// </summary>
        public string SectionCode
        {
            set { this._sectionCode = value; }
            get { return this._sectionCode; }
        }
        // ---ADD 2011/05/30------------<<<<<

        // ----- ADD K2011/08/12 --------------------------->>>>>
        /// <summary>備考２チェックエラーフラグ（true：エラーあり、false：エラーなし）</summary>
        public bool SlipNote2ErrFlag
        {
            set { this._slipNote2ErrFlag = value; }
            get { return this._slipNote2ErrFlag; }
        }
        // ----- ADD K2011/08/12 ---------------------------<<<<<

        // ----- ADD K2011/09/01 --------------------------->>>>>
        /// <summary>売上日付チェックエラーフラグ（true：エラーあり、false：エラーなし）</summary>
        public bool SalesDateErrFlag
        {
            set { this._salesDateErrFlag = value; }
            get { return this._salesDateErrFlag; }
        }
        // ----- ADD K2011/09/01 ---------------------------<<<<<

        // ----- ADD 2012/04/09 yangmj redmine#29313 --------------------------->>>>>
        /// <summary>販売区分変更フラグ（true：変更する、false：変更しない）</summary>
        public bool SalesCodeChgFlag
        {
            set { this._salesCodeChgFlag = value; }
            get { return this._salesCodeChgFlag; }
        }
        // ----- ADD 2012/04/09 yangmj redmine#29313 ---------------------------<<<<<
        // --- ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について② ------->>>>>
        /// <summary>前回得意先コード</summary>
        public int PreCustomCd
        {
            set { this._preCustomCd = value; }
            get { return this._preCustomCd; }
        }
        // --- ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について② -------<<<<<

        // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
        /// <summary>表示区分（0:表示,1:非表示）</summary>
        public int DisplayDivCode
        {
            set { this.DisplayDivCd = value; }
            get { return this.DisplayDivCd; }
        }
        // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
        # endregion

        // ===================================================================================== //
        // パブリックメソッド
        // ===================================================================================== //
        # region Public Methods
        /// <summary>
        /// 商品自動登録テーブルを売上明細テーブルから設定
        /// </summary>
        /// <returns></returns>
        /// <br>Update Note: 2010/01/27 高峰 商品自動登録の登録条件変更の対応</br>
        public bool GetAutoEntryGoodsDataTable()
        {
            Dictionary<GoodsInfoKey, SalesInputDataSet.SalesDetailRow> autoEntryGoodsKeyDic = new Dictionary<GoodsInfoKey, SalesInputDataSet.SalesDetailRow>();

            int rowNo = 0;
            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                // if ((!string.IsNullOrEmpty(row.GoodsNo)) && (row.GoodsMakerCd != 0) && (row.BLGoodsCode != 0)) // DEL 2010/01/27 商品自動登録の登録条件変更
                if ((!string.IsNullOrEmpty(row.GoodsNo)) && (row.GoodsMakerCd != 0)) // ADD 2010/01/27
                {
                    //---------------------------------------------------------
                    // 商品マスタ再読込 未登録のみ自動登録対象とする
                    //---------------------------------------------------------
                    GoodsUnitData goodsUnitData = new GoodsUnitData();
                    // ----------ADD 2010/11/25 -----------<<<<<
                    goodsUnitData = this.GetGoodsUnitDataDic(row.GoodsMakerCd,row.GoodsNo);
                    //>>>2010/12/10
                    //if (goodsUnitData.OfferKubun < 3 && goodsUnitData.OfferKubun >= 0)
                    if ((goodsUnitData == null) || (goodsUnitData.OfferKubun < 3 && goodsUnitData.OfferKubun >= 0))
                    //<<<2010/12/10
                    {
                        // ----------ADD 2010/11/25 ----------->>>>>
                        int status = this._salesSlipInputInitDataAcs.GetGoodsUnitData(this._enterpriseCode, this._loginSectionCode, row.GoodsMakerCd, row.GoodsNo, out goodsUnitData);
                        if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            GoodsInfoKey autoEntryGoodsKey = new GoodsInfoKey(row.GoodsNo, row.GoodsMakerCd);
                            if (autoEntryGoodsKeyDic.ContainsKey(autoEntryGoodsKey) != true)
                            {
                                rowNo++;
                                SalesInputDataSet.AutoEntryGoodsRow autoEntryGoodsRow = this._autoEntryGoodsDataTable.NewAutoEntryGoodsRow();
                                this.SettingAutoEntryGoodsRowFromSalesDetailRow(rowNo, ref autoEntryGoodsRow, row);
                                this._autoEntryGoodsDataTable.AddAutoEntryGoodsRow(autoEntryGoodsRow);
                                autoEntryGoodsKeyDic.Add(autoEntryGoodsKey, row);
                            }
                        }
                    }//ADD 2010/11/25
                    //>>>2010/12/02
                    //else
                    //{
                    //    return false;
                    //}
                    //<<<2010/12/02
                }                
            }
            if (rowNo > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 商品自動登録行オブジェクトを売上明細行オブジェクトから設定
        /// </summary>
        /// <param name="rowNo"></param>
        /// <param name="autoEntryGoodsRow"></param>
        /// <param name="salesDetailRow"></param>
        public void SettingAutoEntryGoodsRowFromSalesDetailRow(int rowNo, ref SalesInputDataSet.AutoEntryGoodsRow autoEntryGoodsRow, SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            autoEntryGoodsRow.RowNo = rowNo;
            autoEntryGoodsRow.Checked = false;
            autoEntryGoodsRow.BLGoodsCode = salesDetailRow.BLGoodsCode;
            autoEntryGoodsRow.BLGoodsFullName = salesDetailRow.BLGoodsFullName;
            autoEntryGoodsRow.CostRate = salesDetailRow.CostRate;
            autoEntryGoodsRow.GoodsMakerCd = salesDetailRow.GoodsMakerCd;
            autoEntryGoodsRow.GoodsName = salesDetailRow.GoodsName;
            autoEntryGoodsRow.GoodsNo = salesDetailRow.GoodsNo;
            autoEntryGoodsRow.ListPrice = salesDetailRow.ListPriceDisplay;
            autoEntryGoodsRow.SalesUnitCost = salesDetailRow.SalesUnitCost;
            autoEntryGoodsRow.SupplierCd = salesDetailRow.SupplierCd;
            autoEntryGoodsRow.SupplierSnm = salesDetailRow.SupplierSnm;
            autoEntryGoodsRow.DtlRelationGuid = salesDetailRow.DtlRelationGuid; // 共通キー
            autoEntryGoodsRow.GoodsOfferDate = DateTime.Today;                  // 商品提供日付
            autoEntryGoodsRow.PriceUpdateDiv = true;                            // 価格更新区分(0:なし 1:あり)
            autoEntryGoodsRow.PriceOfferDate = DateTime.Today;                  // 価格提供日付
            //>>>2010/11/30
            //switch ((AcptAnOdrStatusState)this._salesSlip.AcptAnOdrStatusDisplay)
            //{
            //    case AcptAnOdrStatusState.Estimate:
            //    case AcptAnOdrStatusState.UnitPriceEstimate:
            //        autoEntryGoodsRow.PriceStartDate = this._salesSlip.SalesDate;
            //        break;
            //    case AcptAnOdrStatusState.Sales:
            //        autoEntryGoodsRow.PriceStartDate = this._salesSlip.SalesDate;
            //        break;
            //    case AcptAnOdrStatusState.Shipment:
            //        //autoEntryGoodsRow.PriceStartDate = this._salesSlip.ShipmentDay; // DEL 2010/10/08
            //        autoEntryGoodsRow.PriceStartDate = this._salesSlip.SalesDate; // ADD 2010/10/08
            //        break;
            //}
            autoEntryGoodsRow.PriceStartDate = GetPriceStartDate(this._salesSlip.SalesDate);
            //<<<2010/11/30
        }

        /// <summary>
        /// 商品自動登録行オブジェクトを取得
        /// </summary>
        /// <param name="dtlRelationGuid">共通キー</param>
        /// <returns></returns>
        public SalesInputDataSet.AutoEntryGoodsRow GetAutoEntryGoodsRow(Guid dtlRelationGuid)
        {
            SalesInputDataSet.AutoEntryGoodsRow autoEntryGoodsRow = this._autoEntryGoodsDataTable.FindByDtlRelationGuid(dtlRelationGuid);
            return autoEntryGoodsRow;
        }
        # endregion

        // ===================================================================================== //
        // プライベートメソッド
        // ===================================================================================== //
        #region Private Methods
        //>>>2010/11/30
        /// <summary>
        /// 価格開始日取得処理
        /// </summary>
        /// <param name="dateTime"></param>
        /// <returns></returns>
        private DateTime GetPriceStartDate(DateTime dateTime)
        {
            try
            {
                //--------------------------------------------------
                // 通常は、前回月次更新日の翌日
                //--------------------------------------------------
                if ((this._hisTotalDayMonthly == null) || (this._hisTotalDayMonthly == DateTime.MinValue)) this._hisTotalDayMonthly = this.GetHisTotalDayMonthlyProc();
                DateTime prevTotalDay = this._hisTotalDayMonthly;
                if (prevTotalDay != DateTime.MinValue)
                {
                    // 前回月次更新日の翌日
                    return prevTotalDay.AddDays(1);
                }

                //--------------------------------------------------
                // （※新規搬入して一度も月次更新をしていないような場合）自社.期首日
                //--------------------------------------------------
                if (this._startMonthDateList == null) this._startMonthDateList = this.GetFinancialYearTableProc();
                if (this._startMonthDateList != null && this._startMonthDateList.Count > 0)
                {
                    // 期首日←最初の月の開始日
                    return this._startMonthDateList[0];
                }
            }
            catch
            {
            }

            // ※通常は発生しないが期首日も取得できなかった場合は既存処理と同様。
            return dateTime;
        }

        /// <summary>
        /// 前回月次更新日設定処理
        /// </summary>
        public void GetHisTotalDayMonthly()
        {
            this._hisTotalDayMonthly = this.GetHisTotalDayMonthlyProc();
        }

        /// <summary>
        /// 前回月次更新日取得処理
        /// </summary>
        /// <returns></returns>
        private DateTime GetHisTotalDayMonthlyProc()
        {
            if (_totalDayCalculator == null) this._totalDayCalculator = TotalDayCalculator.GetInstance();

            int status;
            DateTime prevTotalDay;

            // 締日算出モジュールのキャッシュクリア
            this._totalDayCalculator.ClearCache();

            // 買掛オプション判定
            PurchaseStatus ps;
            ps = LoginInfoAcquisition.SoftwarePurchasedCheckForCompany(ConstantManagement_SF_PRO.SoftwareCode_OPT_CMN_StockingPayment);
            if (ps == PurchaseStatus.Contract)
            {
                // 買掛オプションあり
                // 売上月次処理日、仕入月次処理日の古い年月取得
                this._totalDayCalculator.InitializeHisMonthly();
                status = this._totalDayCalculator.GetHisTotalDayMonthly(string.Empty, out prevTotalDay);
                if (prevTotalDay == DateTime.MinValue)
                {
                    // 売上月次処理日取得
                    status = this._totalDayCalculator.GetHisTotalDayMonthlyAccRec(string.Empty, out prevTotalDay);
                    if (prevTotalDay == DateTime.MinValue)
                    {
                        // 仕入月次処理日取得
                        status = this._totalDayCalculator.GetHisTotalDayMonthlyAccPay(string.Empty, out prevTotalDay);
                    }
                }
            }
            else
            {
                // 買掛オプションなし
                // 売上月次処理日取得
                this._totalDayCalculator.InitializeHisMonthlyAccRec();
                status = this._totalDayCalculator.GetHisTotalDayMonthlyAccRec(string.Empty, out prevTotalDay);
            }

            return prevTotalDay;
        }

        /// <summary>
        /// 自社テーブル開始日リスト設定処理
        /// </summary>
        public void GetFinancialYearTable()
        {
            this._startMonthDateList = this.GetFinancialYearTableProc();
        }

        /// <summary>
        /// 自社テーブル開始日リスト取得処理
        /// </summary>
        /// <returns></returns>
        private List<DateTime> GetFinancialYearTableProc()
        {
            if (_dateGetAcs == null)
            {
                _dateGetAcs = DateGetAcs.GetInstance();
            }
            else
            {
                _dateGetAcs.ReloadCompanyInf(); // 必ず再取得する
            }
            List<DateTime> startMonthDateList = null;
            List<DateTime> endMonthDateList = null;

            CompanyInf companyInf = _dateGetAcs.GetCompanyInf();
            if (companyInf != null && companyInf.CompanyBiginDate != 0)
            {
                _dateGetAcs.GetFinancialYearTable(out startMonthDateList, out endMonthDateList);
            }
            return startMonthDateList;
        }
        //<<<2010/11/30
        # endregion
        # endregion

        #region ●伝票明細追加情報
        /// <summary>
        /// 伝票明細追加情報データリストを売上／受注データリストへ設定（売上用）
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        public void SettingSlipDetailAddInfoForSalesData(ref ArrayList salesDataList, ref ArrayList acptDataList)
        {
            #region 売上データリスト
            //-------------------------------------------------------------
            // 売上データリスト
            //-------------------------------------------------------------
            int slipDtlRegOrder = 1;
            ArrayList salesDataListClone = (ArrayList)salesDataList.Clone();
            for (int i = 0; i < salesDataListClone.Count; i++)
            {
                CustomSerializeArrayList list = (CustomSerializeArrayList)salesDataListClone[i];

                // 伝票明細追加情報データリスト
                List<SlipDetailAddInfoWork> slipDetailAddInfoWorkList = new List<SlipDetailAddInfoWork>();

                SalesSlip salesSlip = null;
                List<SalesDetail> salesDetailList = null;
                foreach (object obj in list)
                {
                    if (obj is SalesSlip)
                    {
                        salesSlip = (SalesSlip)obj;
                    }
                    if (obj is List<SalesDetail>)
                    {
                        salesDetailList = (List<SalesDetail>)obj;
                    }
                }

                if ((salesSlip != null) && (salesDetailList != null))
                {
                    // --- ADD K2014/06/12 Y.Wakita ---------->>>>>
                    this._sectWarehouseCd1 = string.Empty;   // 拠点倉庫1
                    this._sectWarehouseCd2 = string.Empty;   // 拠点倉庫2
                    this._sectWarehouseCd3 = string.Empty;   // 拠点倉庫3

                    #region フタバ個別対応
                    if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaSlipPrtCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
                    {
                        SecInfoSet secInfoSet = this._salesSlipInputInitDataAcs.GetSecInfo(LoginInfoAcquisition.Employee.BelongSectionCode.Trim());
                        if (secInfoSet != null)
                        {
                            this._sectWarehouseCd1 = secInfoSet.SectWarehouseCd1;   // 拠点倉庫1
                            this._sectWarehouseCd2 = secInfoSet.SectWarehouseCd2;   // 拠点倉庫2
                            this._sectWarehouseCd3 = secInfoSet.SectWarehouseCd3;   // 拠点倉庫3
                        }
                    }
                    #endregion
                    // --- ADD K2014/06/12 Y.Wakita ----------<<<<<

                    foreach (SalesDetail salesDetail in salesDetailList)
                    {
                        // 商品自動登録行オブジェクト取得
                        SalesInputDataSet.AutoEntryGoodsRow autoEntryGoodsRow = this._autoEntryGoodsDataTable.FindByDtlRelationGuid(salesDetail.DtlRelationGuid);
                        // 伝票明細追加情報データオブジェクト取得
                        SlipDetailAddInfoWork slipDetailAddInfoWork = this.SettingSlipDetailAddInfoFromAutoEntryGoodsRow(slipDtlRegOrder, salesSlip, salesDetail, autoEntryGoodsRow);
                        // 伝票明細追加情報データリスト追加
                        slipDetailAddInfoWorkList.Add(slipDetailAddInfoWork);
                        if (autoEntryGoodsRow != null)
                        {
                            // 商品自動登録行削除
                            this._autoEntryGoodsDataTable.RemoveAutoEntryGoodsRow(autoEntryGoodsRow);
                        }
                        slipDtlRegOrder++;
                    }
                }

                // 売上データリストへ伝票明細追加情報データリスト追加
                if (slipDetailAddInfoWorkList.Count != 0)
                {
                    CustomSerializeArrayList salesData = (CustomSerializeArrayList)salesDataList[i];
                    salesData.Add(slipDetailAddInfoWorkList);
                }
            }
            #endregion

            #region 受注データリスト
            //-------------------------------------------------------------
            // 受注データリスト
            //-------------------------------------------------------------
            slipDtlRegOrder = 1;
            ArrayList acptDataListClone = (ArrayList)acptDataList.Clone();
            for (int i = 0; i < acptDataListClone.Count; i++)
            {
                CustomSerializeArrayList list = (CustomSerializeArrayList)acptDataListClone[i];

                // 伝票明細追加情報データリスト
                List<SlipDetailAddInfoWork> slipDetailAddInfoWorkList = new List<SlipDetailAddInfoWork>();

                SalesSlip salesSlip = null;
                List<SalesDetail> salesDetailList = null;
                foreach (object obj in list)
                {
                    if (obj is SalesSlip)
                    {
                        salesSlip = (SalesSlip)obj;
                    }
                    if (obj is List<SalesDetail>)
                    {
                        salesDetailList = (List<SalesDetail>)obj;
                    }
                }

                if ((salesSlip != null) && (salesDetailList != null))
                {
                    foreach (SalesDetail salesDetail in salesDetailList)
                    {
                        // 商品自動登録行オブジェクト取得
                        SalesInputDataSet.AutoEntryGoodsRow autoEntryGoodsRow = this._autoEntryGoodsDataTable.FindByDtlRelationGuid(salesDetail.DtlRelationGuid);
                        // 伝票明細追加情報データオブジェクト取得
                        SlipDetailAddInfoWork slipDetailAddInfoWork = this.SettingSlipDetailAddInfoFromAutoEntryGoodsRow(slipDtlRegOrder, salesSlip, salesDetail, autoEntryGoodsRow);
                        // 伝票明細追加情報データリスト追加
                        slipDetailAddInfoWorkList.Add(slipDetailAddInfoWork);
                        if (autoEntryGoodsRow != null)
                        {
                            // 商品自動登録行削除
                            this._autoEntryGoodsDataTable.RemoveAutoEntryGoodsRow(autoEntryGoodsRow);
                        }
                        slipDtlRegOrder++;
                    }
                }

                // 売上データリストへ伝票明細追加情報データリスト追加
                if (slipDetailAddInfoWorkList.Count != 0)
                {
                    CustomSerializeArrayList salesData = (CustomSerializeArrayList)acptDataList[i];
                    salesData.Add(slipDetailAddInfoWorkList);
                }
            }
            #endregion
        }

        /// <summary>
        /// 伝票明細追加情報データを商品自動登録行オブジェクトより設定（売上用）
        /// </summary>
        /// <param name="slipDtlRegOrder"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetail"></param>
        /// <param name="autoEntryGoodsRow"></param>
        /// <returns></returns>
        private SlipDetailAddInfoWork SettingSlipDetailAddInfoFromAutoEntryGoodsRow(int slipDtlRegOrder,SalesSlip salesSlip, SalesDetail salesDetail, SalesInputDataSet.AutoEntryGoodsRow autoEntryGoodsRow)
        {
            SlipDetailAddInfoWork slipDetailAddInfoWork = new SlipDetailAddInfoWork();

            // --- ADD m.suzuki 2010/05/13 自由検索---------->>>>>
            if (this._salesSlipInputInitDataAcs.Opt_FreeSearch == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                // 自由検索部品自動登録判定
                AutoEntryFreeSearchPartsAcs autoEntryFSPartsAcs = AutoEntryFreeSearchPartsAcs.GetInsctance();
                slipDetailAddInfoWork.FullModelList = autoEntryFSPartsAcs.GetCarModelsForAutoEntryFreeSearchParts(salesDetail.DtlRelationGuid);

                // 0:自動登録しない, 1:自動登録する
                slipDetailAddInfoWork.FreeSearchPartsEntryDiv = (slipDetailAddInfoWork.FullModelList == null || slipDetailAddInfoWork.FullModelList.Length == 0) ? 0 : 1;
            }
            else
            {
                slipDetailAddInfoWork.FreeSearchPartsEntryDiv = 0;
            }
            // --- ADD m.suzuki 2010/05/13 自由検索----------<<<<<

            if (autoEntryGoodsRow != null)
            {
                slipDetailAddInfoWork.GoodsEntryDiv = 0;
                if (autoEntryGoodsRow.Checked) slipDetailAddInfoWork.GoodsEntryDiv = 1;
                slipDetailAddInfoWork.PriceUpdateDiv = 0;
                if (autoEntryGoodsRow.PriceUpdateDiv) slipDetailAddInfoWork.PriceUpdateDiv = 1;
                slipDetailAddInfoWork.GoodsOfferDate = autoEntryGoodsRow.GoodsOfferDate;
                slipDetailAddInfoWork.PriceStartDate = autoEntryGoodsRow.PriceStartDate;
                slipDetailAddInfoWork.PriceOfferDate = autoEntryGoodsRow.PriceOfferDate;

                if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().RetGoodsStockEtyDiv == 0) &&   // 返品時在庫登録区分(0:する 1:しない)
                    (salesSlip.SalesSlipCd == (int)SalesSlipCd.RetGoods) &&                         // 返品
                    (salesDetail.SalesSlipDtlNumSrc != 0) &&                                        // 元データあり
                    (salesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum) &&          // 新規登録
                    (salesDetail.WarehouseCode != string.Empty))                                    // 倉庫コード入力あり
                {
                    slipDetailAddInfoWork.GoodsEntryDiv = 1; // 商品登録区分(0:登録しない 1:登録する)
                    slipDetailAddInfoWork.PriceUpdateDiv = 1; // 価格登録区分(0:登録しない 1:登録する)
                    slipDetailAddInfoWork.GoodsOfferDate = DateTime.MinValue;
                    slipDetailAddInfoWork.PriceStartDate = salesSlip.SalesDate;
                    slipDetailAddInfoWork.PriceOfferDate = DateTime.MinValue;
                }
            }
            else
            {
                slipDetailAddInfoWork.GoodsEntryDiv = 0;
                slipDetailAddInfoWork.PriceUpdateDiv = 0;
                slipDetailAddInfoWork.GoodsOfferDate = DateTime.MinValue;
                slipDetailAddInfoWork.PriceStartDate = DateTime.MinValue;
                slipDetailAddInfoWork.PriceOfferDate = DateTime.MinValue;

                if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().RetGoodsStockEtyDiv == 0) &&   // 返品時在庫登録区分(0:する 1:しない)
                    (salesSlip.SalesSlipCd == (int)SalesSlipCd.RetGoods) &&                         // 返品
                    (salesDetail.SalesSlipDtlNumSrc != 0) &&                                        // 元データあり
                    (salesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum) &&          // 新規登録
                    (salesDetail.WarehouseCode != string.Empty))                                    // 倉庫コード入力あり
                {
                    slipDetailAddInfoWork.GoodsEntryDiv = 1; // 商品登録区分(0:登録しない 1:登録する)
                    slipDetailAddInfoWork.PriceUpdateDiv = 1; // 価格登録区分(0:登録しない 1:登録する)
                    slipDetailAddInfoWork.GoodsOfferDate = DateTime.MinValue;
                    slipDetailAddInfoWork.PriceStartDate = salesSlip.SalesDate;
                    slipDetailAddInfoWork.PriceOfferDate = DateTime.MinValue;
                }
            }
            slipDetailAddInfoWork.DtlRelationGuid = salesDetail.DtlRelationGuid;
            slipDetailAddInfoWork.CarRelationGuid = salesDetail.CarRelationGuid;
            slipDetailAddInfoWork.SlipDtlRegOrder = slipDtlRegOrder;

            slipDetailAddInfoWork.AddUpRemDiv = 0;     // 受注データ計上残区分　0:伝票追加情報参照,1:残す,2:残さない
            if (salesSlip.SalesSlipNum == ctDefaultSalesSlipNum)
            {
                if ((salesDetail.AcptAnOdrStatusSrc == (int)AcptAnOdrStatusState.AcceptAnOrder) &&
                    (salesDetail.SalesSlipDtlNumSrc == 0))
                {
                    slipDetailAddInfoWork.AddUpRemDiv = 1;     // 受注データ計上残区分　0:伝票追加情報参照,1:残す,2:残さない
                }
            }

            // 受注計上で売上受注発注同時入力を行い、残が発生する場合「2:残さない」とする（追加受注データテーブルで新規受注作成為）
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTableCalc.FindByDtlRelationGuid(salesDetail.DtlRelationGuid);
            if ((uoeOrderDtlRow != null) &&
                (salesSlip.AcptAnOdrStatus != (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder) &&
                (salesDetail.AcptAnOdrRemainCnt != 0) &&
                (salesDetail.AcptAnOdrRemainCnt - uoeOrderDtlRow.AcceptAnOrderCnt != 0))
            {
                slipDetailAddInfoWork.AddUpRemDiv = 2;     // 0:伝票追加情報参照,1:残す,2:残さない
            }

            // --- ADD K2014/06/12 Y.Wakita ---------->>>>>
            slipDetailAddInfoWork.ZaiUpdFlg = false;
            slipDetailAddInfoWork.AddUpRemFlg = false;

            #region フタバ個別対応
            if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaSlipPrtCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                this._sectWarehouseCdDiv = false;    // 拠点設定マスタ
                this._custWarehouseCdDiv = false;    // 得意先設定マスタ

                // 拠点倉庫1～3
                if ((this._sectWarehouseCd1.Trim() == salesDetail.WarehouseCode.Trim()) ||
                    (this._sectWarehouseCd2.Trim() == salesDetail.WarehouseCode.Trim()) ||
                    (this._sectWarehouseCd3.Trim() == salesDetail.WarehouseCode.Trim()))
                {
                    this._sectWarehouseCdDiv = true;
                }

                // 得意先優先倉庫コード
                if (salesSlip.CustWarehouseCd.Trim() == salesDetail.WarehouseCode.Trim())
                {
                    this._custWarehouseCdDiv = true;
                }

                // 伝票種別が返品、赤伝の場合
                // --- UPD K2014/08/15 Y.Wakita ---------->>>>>
                //if ((salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) &&
                //    ((salesSlip.InputMode == ctINPUTMODE_SalesSlip_Return) || (salesSlip.InputMode == ctINPUTMODE_SalesSlip_Red)))
                if (salesSlip.DebitNoteDiv == 1 ||          // 赤伝
                   (salesSlip.SalesSlipCd == (int)SalesSlipCd.RetGoods &&               // 返品
                    salesDetail.AcptAnOdrStatus == (int)AcptAnOdrStatusState.Sales))    // 30：返品-売上
                // --- UPD K2014/08/15 Y.Wakita ----------<<<<<
                {
                    if ((this._sectWarehouseCdDiv == false) && 
                        (this._custWarehouseCdDiv == false))
                    {
                        // フタバ個別で在庫更新しない場合
                        slipDetailAddInfoWork.ZaiUpdFlg = true;
                    }
                }

                // 伝票削除（受注伝票を除く）の場合
                if (this._deleteFlg)
                {
                    // --- UPD K2014/08/21 Y.Wakita ---------->>>>>
                    //if (this._deleteAcptAnOdrStatus != (int)AcptAnOdrStatusState.AcceptAnOrder)
                    if ((this._deleteAcptAnOdrStatus == (int)AcptAnOdrStatusState.Sales) ||
                       ((this._deleteAcptAnOdrStatus == (int)AcptAnOdrStatusState.Shipment) && (salesSlip.SalesSlipCd == (int)SalesSlipCd.Sales)))
                    // --- UPD K2014/08/21 Y.Wakita ----------<<<<<
                    {
                        if ((this._sectWarehouseCdDiv == false) &&
                            (this._custWarehouseCdDiv == false))
                        {
                            // フタバ個別で在庫更新しない場合
                            slipDetailAddInfoWork.ZaiUpdFlg = true;
                        }
                    }
                }

                // 貸出計上の場合
                if (salesDetail.AcptAnOdrStatusSrc == (int)AcptAnOdrStatusState.Shipment)
                {
                    if ((this._sectWarehouseCdDiv == false) &&
                        (this._custWarehouseCdDiv == false))
                    {
                        // フタバ個別で在庫更新しない場合
                        slipDetailAddInfoWork.AddUpRemFlg = true;
                    }
                }
            }
            #endregion
            // --- ADD K2014/06/12 Y.Wakita ----------<<<<<
            return slipDetailAddInfoWork;
        }

        /// <summary>
        /// 伝票明細追加情報データを商品自動登録行オブジェクトより設定（仕入用）
        /// </summary>
        /// <param name="slipDtlRegOrder"></param>
        /// <param name="stockSlipRow"></param>
        /// <param name="stockDetailRow"></param>
        /// <returns></returns>
        private SlipDetailAddInfoWork SettingSlipDetailAddInfoForStockData(int slipDtlRegOrder, SalesInputDataSet.StockSlipRow stockSlipRow, SalesInputDataSet.StockDetailRow stockDetailRow)
        {
            SlipDetailAddInfoWork slipDetailAddInfoWork = new SlipDetailAddInfoWork();

            // 売仕入同時入力で商品および価格情報の更新は行わない
            if ((!string.IsNullOrEmpty(stockDetailRow.GoodsNo) && (stockDetailRow.GoodsMakerCd != 0)))
            {
                slipDetailAddInfoWork.GoodsEntryDiv = 0;
                slipDetailAddInfoWork.PriceUpdateDiv = 0;
                slipDetailAddInfoWork.GoodsOfferDate = DateTime.MinValue;
                slipDetailAddInfoWork.PriceStartDate = DateTime.MinValue;
                slipDetailAddInfoWork.PriceOfferDate = DateTime.MinValue;
            }
            else
            {
                slipDetailAddInfoWork.GoodsEntryDiv = 0;
                slipDetailAddInfoWork.PriceUpdateDiv = 0;
                slipDetailAddInfoWork.GoodsOfferDate = DateTime.MinValue;
                slipDetailAddInfoWork.PriceStartDate = DateTime.MinValue;
                slipDetailAddInfoWork.PriceOfferDate = DateTime.MinValue;
            }
            slipDetailAddInfoWork.DtlRelationGuid = stockDetailRow.DtlRelationGuid;
            slipDetailAddInfoWork.SlipDtlRegOrder = slipDtlRegOrder;
            // --- ADD K2014/06/12 Y.Wakita ---------->>>>>
            slipDetailAddInfoWork.ZaiUpdFlg = false;
            slipDetailAddInfoWork.AddUpRemFlg = false;
            // --- ADD K2014/06/12 Y.Wakita ----------<<<<<
            return slipDetailAddInfoWork;
        }
        #endregion

        #region ●一式
        // ===================================================================================== //
        // プライベート変数
        // ===================================================================================== //
        # region Private Members
        private SalesInputDataSet.CompleteInfoDataTable _completeInfoDataTable;
        private int _targetIndex;
        private int _targetRowNo;
        #endregion

        // ===================================================================================== //
        // プロパティ
        // ===================================================================================== //
        # region Properties
        /// <summary>
        /// 一式情報データテーブルオブジェクト
        /// </summary>
        public SalesInputDataSet.CompleteInfoDataTable CompleteInfoDataTable
        {
            set { this._completeInfoDataTable = value; }
            get { return this._completeInfoDataTable; }
        }
        /// <summary>
        /// 一式情報Index
        /// </summary>
        public int TargetIndex
        {
            set { this._targetIndex = value; }
            get { return this._targetIndex; }
        }
        /// <summary>
        /// 一式情報RowNo
        /// </summary>
        public int TargetRowNo
        {
            set { this._targetRowNo = value; }
            get { return this._targetRowNo; }
        }

        //---ADD 2010/07/13---------->>>>>
        public List<SalesSlipInputAcs.AcptAnOdrStatusState> StateList
        {
            set { this._stateList = value; }
            get { return this._stateList; }
        }
        //---ADD 2010/07/13----------<<<<<
        #endregion

        // ===================================================================================== //
        // パブリックメソッド
        // ===================================================================================== //
        # region Public Methods
        /// <summary>
        /// 選択明細リストから複数一式情報が存在するかチェック
        /// </summary>
        /// <param name="selectedSalesRowNoList">売上明細データテーブル選択行番号リスト</param>
        /// <returns></returns>
        public bool CheckingSalesDetailPluralCompleteInfo(List<int> selectedSalesRowNoList)
        {

            bool ret = true;
            List<int> completeSalesRowNo = new List<int>();

            foreach (int salesRowNo in selectedSalesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow[] rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}={1}", this._salesDetailDataTable.SalesRowNoColumn.ColumnName, salesRowNo));

                if (!completeSalesRowNo.Contains(rows[0].CmpltSalesRowNo))
                {
                    completeSalesRowNo.Add(rows[0].CmpltSalesRowNo);
                }

                if (completeSalesRowNo.Count > 1)
                {
                    ret = false;
                    break;
                }
            }

            return ret;

        }

        /// <summary>
        /// 選択明細リストから一式情報が登録されているするかチェック
        /// </summary>
        /// <param name="selectedSalesRowNoList">売上明細データテーブル選択行番号リスト</param>
        /// <returns></returns>
        public bool CheckingSalesDetailCompleteInfo(List<int> selectedSalesRowNoList)
        {

            bool ret = false;
            List<int> completeSalesRowNoList = new List<int>();

            foreach (int salesRowNo in selectedSalesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow[] rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}={1}", this._salesDetailDataTable.SalesRowNoColumn.ColumnName, salesRowNo));

                if ((rows[0].CmpltSalesRowNo != 0) &&
                    (!completeSalesRowNoList.Contains(rows[0].CmpltSalesRowNo)))
                {
                    completeSalesRowNoList.Add(rows[0].CmpltSalesRowNo);
                }
            }

            if (completeSalesRowNoList.Count == 1)
            {
                int cmpltSalesRowNo = completeSalesRowNoList[0];
                if (cmpltSalesRowNo != 0)
                {
                    this.TargetRowNo = cmpltSalesRowNo;
                    this.TargetIndex = cmpltSalesRowNo - 1;
                    ret = true;
                }
            }

            return ret;

        }

        /// <summary>
        /// 選択明細リストから一式情報データテーブルを設定
        /// </summary>
        /// <param name="selectedSalesRowNoList">売上明細データテーブル選択行番号リスト</param>
        /// <returns></returns>
        public void GetCompleteInfo(List<int> selectedSalesRowNoList)
        {

            SalesInputDataSet.CompleteInfoRow row = this._completeInfoDataTable.NewCompleteInfoRow();

            int rowCount = this._completeInfoDataTable.Rows.Count;
            this._targetIndex = rowCount;
            this._targetRowNo = rowCount + 1;
            row.RowNo = rowCount + 1;
            row.CmpltSalesRowNo = rowCount + 1;
            row.CmpltShipmentCnt = 1;
            foreach (int salesRowNo in selectedSalesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow[] rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}={1}", this._salesDetailDataTable.SalesRowNoColumn.ColumnName, salesRowNo));
                row.CmpltSalesMoney += rows[0].SalesMoneyDisplay;
                row.CmpltCost += rows[0].Cost;
            }
            row.CmpltSalesUnitCost = row.CmpltCost;
            row.CmpltSalesUnPrcFl = row.CmpltSalesMoney;
            this._completeInfoDataTable.AddCompleteInfoRow(row);

        }

        /// <summary>
        /// 売上明細データテーブルへ一式情報設定
        /// </summary>
        /// <param name="selectedSalesRowNoList">売上明細データテーブル選択行番号リスト</param>
        public void SettingSalesDetailCompleteInfo(List<int> selectedSalesRowNoList)
        {
            SalesInputDataSet.CompleteInfoRow completeInfoRow = this._completeInfoDataTable.FindByCmpltSalesRowNo(this._targetRowNo);
            if (completeInfoRow == null) return;
            foreach (int salesRowNo in selectedSalesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
                salesDetailRow.CmpltSalesRowNo = completeInfoRow.CmpltSalesRowNo;
                salesDetailRow.CmpltGoodsMakerCd = completeInfoRow.CmpltGoodsMakerCd;
                salesDetailRow.CmpltMakerName = completeInfoRow.CmpltGoodsMakerNm;
                salesDetailRow.CmpltGoodsName = completeInfoRow.CmpltGoodsName;
                salesDetailRow.CmpltShipmentCnt = completeInfoRow.CmpltShipmentCnt;
                salesDetailRow.CmpltSalesUnPrcFl = completeInfoRow.CmpltSalesUnPrcFl;
                salesDetailRow.CmpltSalesMoney = completeInfoRow.CmpltSalesMoney;
                salesDetailRow.CmpltSalesUnitCost = completeInfoRow.CmpltSalesUnitCost;
                salesDetailRow.CmpltCost = completeInfoRow.CmpltCost;
                salesDetailRow.CmpltPartySalSlNum = completeInfoRow.CmpltPartySalSlNum;
                salesDetailRow.CmpltNote = completeInfoRow.CmpltNote;
            }
            this._salesSlip.CompleteCd = 1; // 一式伝票区分
        }

        /// <summary>
        /// 売上明細データリストから一式情報セット
        /// </summary>
        /// <param name="salesDetailList">売上明細データリスト</param>
        public void SettingCompleteInfoFromSalesDetailList(List<SalesDetail> salesDetailList)
        {
            int rowNo = 1;
            foreach (SalesDetail salesDetail in salesDetailList)
            {
                if ((this._completeInfoDataTable.FindByCmpltSalesRowNo(salesDetail.CmpltSalesRowNo) == null) &&
                    (salesDetail.CmpltSalesRowNo != 0))
                {
                    SalesInputDataSet.CompleteInfoRow completeInfoRow = this._completeInfoDataTable.NewCompleteInfoRow();
                    completeInfoRow.RowNo = rowNo;
                    completeInfoRow.CmpltSalesRowNo = salesDetail.CmpltSalesRowNo;
                    completeInfoRow.CmpltGoodsMakerCd = salesDetail.CmpltGoodsMakerCd;
                    completeInfoRow.CmpltGoodsMakerNm = salesDetail.CmpltMakerName;
                    completeInfoRow.CmpltGoodsName = salesDetail.CmpltGoodsName;
                    completeInfoRow.CmpltShipmentCnt = salesDetail.CmpltShipmentCnt;
                    completeInfoRow.CmpltSalesUnPrcFl = salesDetail.CmpltSalesUnPrcFl;
                    completeInfoRow.CmpltSalesMoney = salesDetail.CmpltSalesMoney;
                    completeInfoRow.CmpltSalesUnitCost = salesDetail.CmpltSalesUnitCost;
                    completeInfoRow.CmpltCost = salesDetail.CmpltCost;
                    completeInfoRow.CmpltPartySalSlNum = salesDetail.CmpltPartySalSlNum;
                    completeInfoRow.CmpltNote = salesDetail.CmpltNote;
                    this._completeInfoDataTable.AddCompleteInfoRow(completeInfoRow);
                    rowNo++;
                }
            }
        }

        /// <summary>
        /// 売上明細データテーブルの一式情報クリア（オーバーロード）
        /// </summary>
        /// <param name="selectedSalesRowNoList">売上明細データテーブル選択行番号リスト</param>
        public void ClearSalesDetailCompleteInfoRow(List<int> selectedSalesRowNoList)
        {

            if (selectedSalesRowNoList.Count != 0)
            {
                this._salesSlip.CompleteCd = 0; // 一式伝票区分
            }

            foreach (int salesRowNo in selectedSalesRowNoList)
            {
                ClearSalesDetailCompleteInfoRow(salesRowNo);
            }
        }

        /// <summary>
        /// 売上明細データテーブルの一式情報クリア
        /// </summary>
        /// <param name="salesRowNo"></param>
        public void ClearSalesDetailCompleteInfoRow(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (salesDetailRow == null) return;
            SalesInputDataSet.CompleteInfoRow completeInfoRow = this._completeInfoDataTable.FindByCmpltSalesRowNo(salesDetailRow.CmpltSalesRowNo);
            if (completeInfoRow == null) return;

            completeInfoRow.CmpltSalesMoney -= salesDetailRow.SalesMoneyDisplay;
            completeInfoRow.CmpltCost -= salesDetailRow.Cost;

            salesDetailRow.CmpltSalesRowNo = 0;
            salesDetailRow.CmpltGoodsMakerCd = 0;
            salesDetailRow.CmpltMakerName = string.Empty;
            salesDetailRow.CmpltGoodsName = string.Empty;

            salesDetailRow.CmpltNote = string.Empty;
            salesDetailRow.CmpltPartySalSlNum = string.Empty;

            salesDetailRow.CmpltShipmentCnt = 1;

            salesDetailRow.CmpltSalesUnPrcFl = 0;
            salesDetailRow.CmpltSalesMoney = 0;
            salesDetailRow.CmpltSalesUnitCost = 0;
            salesDetailRow.CmpltCost = 0;
        }

        /// <summary>
        /// 一式情報データテーブル削除（オーバーロード）
        /// </summary>
        /// <param name="selectedSalesRowNoList">売上明細データテーブル選択行番号リスト</param>
        public void DeleteCompleteInfoRow(List<int> selectedSalesRowNoList)
        {
            foreach (int salesRowNo in selectedSalesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
                this.DeleteCompleteInfoRow(salesDetailRow.CmpltSalesRowNo);
            }
        }

        /// <summary>
        /// 一式情報データテーブル削除
        /// </summary>
        /// <param name="salesSlipNum"></param>
        /// <param name="salesRowNo"></param>
        public void DeleteCompleteInfoRow(int cmpltRowNo)
        {
            SalesInputDataSet.CompleteInfoRow targetCompleteInfoRow = this._completeInfoDataTable.FindByCmpltSalesRowNo(cmpltRowNo);
            if (targetCompleteInfoRow == null) return;
            this._completeInfoDataTable.RemoveCompleteInfoRow(targetCompleteInfoRow);
        }

        /// <summary>
        /// 一式情報データテーブル更新処理（オーバーロード）
        /// </summary>
        /// <param name="selectedSalesRowNoList">売上明細データテーブル選択行番号リスト</param>
        public void UpdateCompleteInfoRowFromSalesDetail(List<int> selectedSalesRowNoList)
        {
            foreach (int salesRowNo in selectedSalesRowNoList)
            {
                this.UpdateCompleteInfoRowFromSalesDetail(salesRowNo);
            }
        }

        /// <summary>
        /// 一式情報データテーブル更新処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        public void UpdateCompleteInfoRowFromSalesDetail(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (salesDetailRow == null) return;
            SalesInputDataSet.CompleteInfoRow completeInfoRow = this._completeInfoDataTable.FindByCmpltSalesRowNo(salesDetailRow.CmpltSalesRowNo);
            if (completeInfoRow == null) return;

            completeInfoRow.CmpltSalesMoney = salesDetailRow.SalesMoneyDisplay;
            completeInfoRow.CmpltCost = salesDetailRow.Cost;
        }

        /// <summary>
        /// 一式情報構築処理（オーバーロード）
        /// </summary>
        /// <param name="salesRowNoList"></param>
        public void ConstructionCompleteInfo(List<int> salesRowNoList)
        {
            foreach (int salesRowNo in salesRowNoList)
            {
                ConstructionCompleteInfo(salesRowNo);
            }
        }

        /// <summary>
        /// 一式情報構築処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        public void ConstructionCompleteInfo(int salesRowNo)
        {
            //----------------------------------------------------------------------------------
            // 一式情報データテーブルおよび売上明細データテーブルの一式情報を再構築します。
            //----------------------------------------------------------------------------------

            // 対象となる一式番号取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (salesDetailRow == null) return;
            // 対象となる売上明細データレコード取得
            SalesInputDataSet.SalesDetailRow[] rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}={1}", this._salesDetailDataTable.CmpltSalesRowNoColumn.ColumnName, salesDetailRow.CmpltSalesRowNo));

            //------------------------------------------------------
            // 金額再計算
            //------------------------------------------------------
            long salesMoney = 0;
            long cost = 0;
            foreach (SalesInputDataSet.SalesDetailRow row in rows)
            {
                salesMoney += row.SalesMoneyDisplay;
                cost += row.Cost;
            }

            //------------------------------------------------------
            // 売上明細データテーブルへ金額再セット
            //------------------------------------------------------
            foreach (SalesInputDataSet.SalesDetailRow row in rows)
            {
                row.CmpltSalesMoney = salesMoney;
                row.CmpltCost = cost;
            }

            //------------------------------------------------------
            // 一式情報データテーブルへ金額再セット
            //------------------------------------------------------
            SalesInputDataSet.CompleteInfoRow completeInfoRow = this._completeInfoDataTable.FindByCmpltSalesRowNo(salesDetailRow.CmpltSalesRowNo);
            if (completeInfoRow == null) return;
            completeInfoRow.CmpltSalesMoney = salesMoney;
            completeInfoRow.CmpltCost = cost;

            //------------------------------------------------------
            // 金額情報再セット
            //------------------------------------------------------
            SetCmpltPriceInfo(completeInfoRow.CmpltSalesRowNo);
        }

        /// <summary>
        /// 一式情報行番号取得処理
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public int GetCmpltSalesRowNo(int index)
        {
            SalesInputDataSet.CompleteInfoRow row = this._completeInfoDataTable[index];
            return row.CmpltSalesRowNo;
        }

        /// <summary>
        /// 一式メーカー情報セット処理
        /// </summary>
        /// <param name="code"></param>
        /// <param name="name"></param>
        public void SetCmpltMakerInfo(int code, string name)
        {
            this._completeInfoDataTable[this._targetIndex].CmpltGoodsMakerCd = code;
            this._completeInfoDataTable[this._targetIndex].CmpltGoodsMakerNm = name;
        }

        /// <summary>
        /// 一式名称セット処理
        /// </summary>
        /// <param name="name"></param>
        public void SetCmpltGoodsName(string name)
        {
            this._completeInfoDataTable[this._targetIndex].CmpltGoodsName = name;
        }

        /// <summary>
        /// 一式得意先注番セット処理
        /// </summary>
        /// <param name="name"></param>
        public void SetCmpltPartySalSlNum(string name)
        {
            this._completeInfoDataTable[this._targetIndex].CmpltPartySalSlNum = name;
        }

        /// <summary>
        /// 一式備考セット処理
        /// </summary>
        /// <param name="name"></param>
        public void SetCmpltNote(string name)
        {
            this._completeInfoDataTable[this._targetIndex].CmpltNote = name;
        }

        /// <summary>
        /// 一式金額情報セット処理（オーバーロード）
        /// </summary>
        /// <param name="shipmentCnt"></param>
        public void SetCmpltPriceInfo(int rowNo)
        {
            SalesInputDataSet.CompleteInfoRow completeInfoRow = this._completeInfoDataTable.FindByCmpltSalesRowNo(rowNo);
            SetCmpltPriceInfo(rowNo, completeInfoRow.CmpltShipmentCnt);
        }

        /// <summary>
        /// 一式金額情報セット処理
        /// </summary>
        /// <param name="shipmentCnt"></param>
        public void SetCmpltPriceInfo(int rowNo, double shipmentCnt)
        {
            SalesInputDataSet.CompleteInfoRow completeInfoRow = this._completeInfoDataTable.FindByCmpltSalesRowNo(rowNo);

            double cmpltSalesUnprcFl = 0;
            double cmpltSalesUnitCost = 0;
            float cmpltSalesMoney = completeInfoRow.CmpltSalesMoney;
            float cmpltCost = completeInfoRow.CmpltCost;

            // 売単価(小数点第３位四捨五入)
            FractionCalculate.FracCalcMoney(cmpltSalesMoney / (double)shipmentCnt, 0.01, 2, out cmpltSalesUnprcFl);
            // 原単価(小数点第３位四捨五入)
            FractionCalculate.FracCalcMoney(cmpltCost / (double)shipmentCnt, 0.01, 2, out cmpltSalesUnitCost);

            completeInfoRow.CmpltShipmentCnt = shipmentCnt;
            completeInfoRow.CmpltSalesUnPrcFl = cmpltSalesUnprcFl;
            completeInfoRow.CmpltSalesUnitCost = cmpltSalesUnitCost;
        }

        /// <summary>
        /// 売上データテーブルより有効明細行番号リストを取得する
        /// </summary>
        /// <returns></returns>
        public List<int> GetEffectiveSalesRowNoList()
        {
            List<int> salesRowNoList = new List<int>();
            SalesInputDataSet.SalesDetailRow[] rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Empty);

            foreach (SalesInputDataSet.SalesDetailRow row in rows)
            {
                salesRowNoList.Add(row.SalesRowNo);
            }

            return salesRowNoList;
        }
        #endregion
        #endregion

        #region ●受注情報
        /// <summary>
        /// 受注情報存在チェック
        /// </summary>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：レコード有無</remarks>
        public bool ExistAcptAnOdr()
        {
            bool ret = false;

            foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow acptAnOdrRow in this._salesDetailAcceptAnOrderDataTable)
            {
                // 受注数
                if ((acptAnOdrRow != null) && (acptAnOdrRow.ShipmentCnt != 0))
                {
                    ret = true;
                    break;
                }
            }

            return ret;
        }

        /// <summary>
        /// 商品価格の再設定を行う必要がある商品が入力されている受注明細行オブジェクトが存在するかどうかをチェックします。
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailAcceptAnOrderCanGoodsPriceReSettingData()
        {
            bool exist = false;

            foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow acptAnOdrRow in this._salesDetailAcceptAnOrderDataTable)
            {
                if (((acptAnOdrRow.EditStatus == ctEDITSTATUS_AllOK) || (acptAnOdrRow.EditStatus == ctEDITSTATUS_AddUpEdit) || (acptAnOdrRow.EditStatus == ctEDITSTATUS_AddUpNew)) &&
                    (!string.IsNullOrEmpty(acptAnOdrRow.GoodsNo)) && (acptAnOdrRow.GoodsMakerCd != 0))
                {
                    exist = true;
                    break;
                }
            }

            return exist;
        }

        /// <summary>
        /// 受注情報テーブル行追加
        /// </summary>
        /// <param name="salesSlipNum"></param>
        /// <param name="salesRowNo"></param>
        /// <returns>追加した受注情報オブジェクト</returns>
        /// <remarks>
        /// <br>Update Note: K2021/05/10 陳艶丹</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>           : PMKOBETSU-4140 No.32 明細の順番が入れ替わる現象の対応</br>
        /// </remarks>
        private SalesInputDataSet.SalesDetailAcceptAnOrderRow SalesDetailAcceptAnOrderAddRow(string salesSlipNum, int salesRowNo)
        {
            // 受注情報キーセット
            SalesInputDataSet.SalesDetailAcceptAnOrderRow row = this._salesDetailAcceptAnOrderDataTable.NewSalesDetailAcceptAnOrderRow();

            // 売上情報キーセット
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesSlipNum, salesRowNo);

            row.DtlRelationGuid = salesDetailRow.DtlRelationGuid;

            // --- DEL K2021/05/10 陳艶丹 PMKOBETSU-4140 No.32 明細の順番が入れ替わる現象の対応 ---->>>>>
            //// ADD 2010/09/30 --- >>>>
            //for (int i = salesRowNo; i <= this._salesDetailAcceptAnOrderDataTable.Count; i++)
            //{
            //    // --- UPD 2013/04/18 T.Nishi ---------->>>>>
            //    //// --- UPD 2013/04/11 Y.Wakita ⑤ ---------->>>>>
            //    ////this._salesDetailAcceptAnOrderDataTable[i - 1].SalesRowNo = i + 1;
            //    //this._salesDetailAcceptAnOrderDataTable[i - 1].SalesRowNo = this._salesDetailAcceptAnOrderDataTable[i - 1].SalesRowNo + 1;
            //    //// --- UPD 2013/04/11 Y.Wakita ⑤ ---------->>>>>
            //    this._salesDetailAcceptAnOrderDataTable[i - 1].SalesRowNo = i + 1;
            //    // --- UPD 2013/04/18 T.Nishi ----------<<<<<
            //}
            //// ADD 2010/09/30 --- <<<<
            // --- DEL K2021/05/10 陳艶丹 PMKOBETSU-4140 No.32 明細の順番が入れ替わる現象の対応 ----<<<<<

            // --- ADD K2021/05/10 陳艶丹 PMKOBETSU-4140 No.32 明細の順番が入れ替わる現象の対応 ---->>>>>
            //行番号は受注情報テーブルの配列数より小さ場合
            if (salesRowNo <= _salesDetailAcceptAnOrderDataTable.Count)
            {
                for (int i = 0; i < this._salesDetailAcceptAnOrderDataTable.Count; i++)
                {
                    for (int j = 0; j < this._salesDetailDataTable.Count; j++)
                    {
                        //受注明細データの関連カイドと売上明細データの関連カイドは一致する場合
                        if (this._salesDetailAcceptAnOrderDataTable[i].DtlRelationGuid == this._salesDetailDataTable[j].DtlRelationGuid)
                        {
                            //受注明細データの行番号を設定する
                            this._salesDetailAcceptAnOrderDataTable[i].SalesRowNo = this._salesDetailDataTable[j].SalesRowNo;
                            break;
                        }
                    }
                }
            }
            // --- ADD K2021/05/10 陳艶丹 PMKOBETSU-4140 No.32 明細の順番が入れ替わる現象の対応 ----<<<<<

            this._salesDetailAcceptAnOrderDataTable.AddSalesDetailAcceptAnOrderRow(row);
            return row;
        }

        /// <summary>
        /// 受注情報テーブル削除
        /// </summary>
        /// <param name="salesRowNoList"></param>
        private void DeleteSalesDetailAcceptAnOrderRow(List<int> salesRowNoList)
        {
            foreach (int salesRowNo in salesRowNoList)
            {
                this.DeleteSalesDetailAcceptAnOrderRow(this._currentSalesSlipNum, salesRowNo);
            }
        }

        /// <summary>
        /// 受注情報テーブル削除
        /// </summary>
        /// <param name="salesRowNoList"></param>
        private void DeleteSalesDetailAcceptAnOrderRow(List<Guid> guidList)
        {
            foreach (Guid guid in guidList)
            {
                this.DeleteSalesDetailAcceptAnOrderRow(guid);
            }
        }

        /// <summary>
        /// 受注情報テーブル削除
        /// </summary>
        /// <param name="guidList"></param>
        /// <param name="acptDetailDataTable"></param>
        private void DeleteSalesDetailAcceptAnOrderRow(List<Guid> guidList, ref SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTable)
        {
            foreach (Guid guid in guidList)
            {
                this.DeleteSalesDetailAcceptAnOrderRow(guid, ref acptDetailDataTable);
            }
        }

        /// <summary>
        /// 受注情報テーブル削除
        /// </summary>
        /// <param name="salesSlipNum"></param>
        /// <param name="salesRowNo"></param>
        private void DeleteSalesDetailAcceptAnOrderRow(string salesSlipNum, int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow targetSalesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesSlipNum, salesRowNo);
            SalesInputDataSet.SalesDetailAcceptAnOrderRow targetRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(targetSalesDetailRow.DtlRelationGuid);
            if (targetRow == null) return;
            this._salesDetailAcceptAnOrderDataTable.RemoveSalesDetailAcceptAnOrderRow(targetRow);

            // --- DEL 2013/04/18 T.Nishi ---------->>>>>
            //// --- ADD 2013/04/11 Y.Wakita ⑤ ---------->>>>>
            //this._salesDetailAcceptAnOrderDataTable.BeginLoadData();
            //for (int i = 0; i < this._salesDetailAcceptAnOrderDataTable.Rows.Count; i++)
            //{
            //    this._salesDetailAcceptAnOrderDataTable[i].SalesRowNo = i + 1;
            //}
            //this._salesDetailAcceptAnOrderDataTable.EndLoadData();
            //// --- ADD 2013/04/11 Y.Wakita ⑤ ----------<<<<<
            // --- DEL 2013/04/18 T.Nishi ----------<<<<<
        }

        /// <summary>
        /// 受注情報テーブル削除
        /// </summary>
        /// <param name="acceptAnOrderKey"></param>
        private void DeleteSalesDetailAcceptAnOrderRow(Guid dtlRelationGuid)
        {
            SalesInputDataSet.SalesDetailAcceptAnOrderRow targetRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(dtlRelationGuid);
            if (targetRow == null) return;
            this._salesDetailAcceptAnOrderDataTable.RemoveSalesDetailAcceptAnOrderRow(targetRow);

            // --- DEL 2013/04/18 T.Nishi ---------->>>>>
            //// --- ADD 2013/04/11 Y.Wakita ⑤ ---------->>>>>
            //this._salesDetailAcceptAnOrderDataTable.BeginLoadData();
            //for (int i = 0; i < this._salesDetailAcceptAnOrderDataTable.Rows.Count; i++)
            //{
            //    this._salesDetailAcceptAnOrderDataTable[i].SalesRowNo = i + 1;
            //}
            //this._salesDetailAcceptAnOrderDataTable.EndLoadData();
            //// --- ADD 2013/04/11 Y.Wakita ⑤ ----------<<<<<
            // --- DEL 2013/04/18 T.Nishi ----------<<<<<
        }

        /// <summary>
        /// 受注情報テーブル削除
        /// </summary>
        /// <param name="acceptAnOrderKey"></param>
        private void DeleteSalesDetailAcceptAnOrderRow(Guid dtlRelationGuid, ref SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTable)
        {
            SalesInputDataSet.SalesDetailAcceptAnOrderRow targetRow = acptDetailDataTable.FindByDtlRelationGuid(dtlRelationGuid);
            if (targetRow == null) return;
            acptDetailDataTable.RemoveSalesDetailAcceptAnOrderRow(targetRow);

            // --- DEL 2013/04/18 T.Nishi ---------->>>>>
            //// --- ADD 2013/04/11 Y.Wakita ⑤ ---------->>>>>
            //acptDetailDataTable.BeginLoadData();
            //for (int i = 0; i < acptDetailDataTable.Rows.Count; i++)
            //{
            //    acptDetailDataTable[i].SalesRowNo = i + 1;
            //}
            //acptDetailDataTable.EndLoadData();
            //// --- ADD 2013/04/11 Y.Wakita ⑤ ----------<<<<<
            // --- DEL 2013/04/18 T.Nishi ----------<<<<<
        }

        /// <summary>
        /// 受注情報オブジェクトのクリアを行います。
        /// </summary>
        /// <param name="salesRowNoList">クリア対象売上行番号リスト</param>
        public void ClearSalesDetailAcceptAnOrderRow(List<int> salesRowNoList)
        {
            foreach (int salesRowNo in salesRowNoList)
            {
                // 受注情報明細行クリア処理
                this.ClearSalesDetailAcceptAnOrderRow(salesRowNo);
            }
        }

        /// <summary>
        /// 受注情報オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="row">売上明細行オブジェクト</param>
        private void ClearSalesDetailAcceptAnOrderRow(SalesInputDataSet.SalesDetailAcceptAnOrderRow row)
        {
            if (row == null) return;

            row.DtlRelationGuid = Guid.Empty;
            row.SalesSlipNum = ctDefaultSalesSlipNum;
            row.SalesRowNo = 0;
            row.SalesMoneyTaxInc = 0;// 売上金額(税込)
            row.SalesMoneyTaxExc = 0;// 売上金額(税抜)
            row.Cost = 0;// 原価金額
            row.AcceptAnOrderCnt = 0; // 受注数量
            row.AcptAnOdrAdjustCnt = 0; // 受注調整数
            row.AcptAnOdrRemainCnt = 0; // 受注残数
        }

        /// <summary>
        /// 受注情報オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">クリア対象売上行番号</param>
        public void ClearSalesDetailAcceptAnOrderRow(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this.SalesSlip.SalesSlipNum.PadLeft(9, '0'), salesRowNo);
            if (salesDetailRow != null)
            {
                SalesInputDataSet.SalesDetailAcceptAnOrderRow row = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
                if (row != null)
                {
                    this.ClearSalesDetailAcceptAnOrderRow(row);
                }
            }
        }

        /// <summary>
        /// 受注情報オブジェクトのコピーを行います。
        /// </summary>
        /// <param name="salesRowNo"></param>
        public SalesInputDataSet.SalesDetailAcceptAnOrderRow CloneSalesDetailAcceptAnOrderRow(SalesInputDataSet.SalesDetailRow sourceRow, SalesInputDataSet.SalesDetailRow targetRow)
        {
            // コピー元受注情報取得
            SalesInputDataSet.SalesDetailAcceptAnOrderRow sourceSalesDetailAcceptAnOrderRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(sourceRow.DtlRelationGuid);

            // コピー先受注情報取得
            SalesInputDataSet.SalesDetailAcceptAnOrderRow targetSalesDetailAcceptAnOrderRow = this._salesDetailAcceptAnOrderDataTable.NewSalesDetailAcceptAnOrderRow();

            // 項目セット
            this.CopyAcceptAnOrderFromAcceptAnOrder(sourceSalesDetailAcceptAnOrderRow, targetSalesDetailAcceptAnOrderRow);
            targetSalesDetailAcceptAnOrderRow.DtlRelationGuid = targetRow.DtlRelationGuid;
            this._salesDetailAcceptAnOrderDataTable.AddSalesDetailAcceptAnOrderRow(targetSalesDetailAcceptAnOrderRow);

            return targetSalesDetailAcceptAnOrderRow;
        }

        /// <summary>
        /// 対象行の受注情報を取得します
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <returns>伝票メモオブジェクト</returns>
        public SalesInputDataSet.SalesDetailAcceptAnOrderRow GetSalesDetailAcceptAnOrderRow(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailAcceptAnOrderRow retSalesDetailAcceptAnOrderRow = null;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                retSalesDetailAcceptAnOrderRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);

                // 存在しなかった場合は追加する
                if (retSalesDetailAcceptAnOrderRow == null)
                {
                    retSalesDetailAcceptAnOrderRow = this.SalesDetailAcceptAnOrderAddRow(this._currentSalesSlipNum, salesRowNo);
                }
            }
            return retSalesDetailAcceptAnOrderRow;
        }

        /// <summary>
        /// 対象行の受注情報を取得します
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <returns>受注データ行オブジェクト</returns>
        public SalesInputDataSet.SalesDetailAcceptAnOrderRow GetSalesDetailAcceptAnOrderRow(Guid dtlRelationGuid)
        {
            return this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(dtlRelationGuid);
        }

        // --- ADD 2013/09/27 T.Miyamoto ------------------------------>>>>>
        /// <summary>
        /// 対象行に受注情報が存在する場合、売上から受注へコピー
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        public void ExistSettingSalesDetailAcceptAnOrder(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailAcceptAnOrderRow retSalesDetailAcceptAnOrderRow = null;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row != null)
            {
                retSalesDetailAcceptAnOrderRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);
                // 存在しなかった場合は追加する
                if (retSalesDetailAcceptAnOrderRow != null)
                {
                    SettingSalesDetailAcceptAnOrder(salesRowNo, this._salesDetailDataTable);
                }
            }
        }
        // --- ADD 2013/09/27 T.Miyamoto ------------------------------<<<<<

        /// <summary>
        /// 受注情報設定（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        public void SettingSalesDetailAcceptAnOrder(int salesRowNo)
        {
            SettingSalesDetailAcceptAnOrder(salesRowNo, this._salesDetailDataTable);
        }

        /// <summary>
        /// 受注情報設定
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="salesDetailDataTable">売上明細データテーブル</param>
        public void SettingSalesDetailAcceptAnOrder(int salesRowNo, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.SalesDetailAcceptAnOrderRow salesDetailAcceptAnOrderRow = this.GetSalesDetailAcceptAnOrderRow(salesRowNo);

            if (salesDetailAcceptAnOrderRow != null)
            {

                this.CopyAcceptAnOrderFromSalesDetail(salesDetailRow, salesDetailAcceptAnOrderRow);
                // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                //// --- ADD 2013/04/11 Y.Wakita ⑤ ---------->>>>>
                //// 受注明細データテーブルソート処理
                //this.salesDetailAcceptAnOrderDataTableSort();
                //// --- ADD 2013/04/11 Y.Wakita ⑤ ----------<<<<<
                // --- DEL 2013/04/18 T.Nishi ----------<<<<<
            }
        }

        /// <summary>
        /// 売上明細行オブジェクト→受注明細行オブジェクトへのコピーを行います。
        /// </summary>
        /// <param name="sourceRow">コピー元売上明細行オブジェクト</param>
        /// <param name="targetRow">コピー先受注明細行オブジェクト</param>
        private void CopyAcceptAnOrderFromSalesDetail(SalesInputDataSet.SalesDetailRow sourceRow, SalesInputDataSet.SalesDetailAcceptAnOrderRow targetRow)
        {
            if ((sourceRow == null) || (targetRow == null)) return;

            targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo; // 受注番号
            targetRow.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder; // 受注ステータス
            targetRow.SalesSlipNum = sourceRow.SalesSlipNum; // 売上伝票番号

            targetRow.SalesRowNo = sourceRow.SalesRowNo; // 売上行番号
            targetRow.SalesRowDerivNo = sourceRow.SalesRowDerivNo; // 売上行番号枝番
            targetRow.SectionCode = sourceRow.SectionCode; // 拠点コード
            targetRow.SubSectionCode = sourceRow.SubSectionCode; // 部門コード
            targetRow.SalesDate = sourceRow.SalesDate; // 売上日付
            targetRow.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            targetRow.SalesSlipDtlNum = sourceRow.SalesSlipDtlNum; // 売上明細通番
            targetRow.AcptAnOdrStatusSrc = sourceRow.AcptAnOdrStatusSrc; // 受注ステータス（元）
            targetRow.SalesSlipDtlNumSrc = sourceRow.SalesSlipDtlNumSrc; // 売上明細通番（元）
            targetRow.SupplierFormalSync = sourceRow.SupplierFormalSync; // 仕入形式（同時）
            targetRow.StockSlipDtlNumSync = sourceRow.StockSlipDtlNumSync; // 仕入明細通番（同時）
            targetRow.SalesSlipCdDtl = sourceRow.SalesSlipCdDtl; // 売上伝票区分（明細）
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate; // 納品完了予定日
            targetRow.GoodsKindCode = sourceRow.GoodsKindCode; // 商品属性
            targetRow.GoodsSearchDivCd = sourceRow.GoodsSearchDivCd; // 商品検索区分
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd; // 商品メーカーコード
            targetRow.MakerName = sourceRow.MakerName; // メーカー名称
            targetRow.MakerKanaName = sourceRow.MakerKanaName; // メーカーカナ名称
            targetRow.GoodsNo = sourceRow.GoodsNo; // 商品番号
            targetRow.GoodsName = sourceRow.GoodsName; // 商品名称
            targetRow.GoodsNameKana = sourceRow.GoodsNameKana; // 商品名称カナ
            targetRow.GoodsLGroup = sourceRow.GoodsLGroup; // 商品大分類コード
            targetRow.GoodsLGroupName = sourceRow.GoodsLGroupName; // 商品大分類名称
            targetRow.GoodsMGroup = sourceRow.GoodsMGroup; // 商品中分類コード
            targetRow.GoodsMGroupName = sourceRow.GoodsMGroupName; // 商品中分類名称
            targetRow.BLGroupCode = sourceRow.BLGroupCode; // BLグループコード
            targetRow.BLGroupName = sourceRow.BLGroupName; // BLグループコード名称
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode; // BL商品コード
            targetRow.BLGoodsFullName = sourceRow.BLGoodsFullName; // BL商品コード名称（全角）
            targetRow.EnterpriseGanreCode = sourceRow.EnterpriseGanreCode; // 自社分類コード
            targetRow.EnterpriseGanreName = sourceRow.EnterpriseGanreName; // 自社分類名称
            targetRow.WarehouseCode = sourceRow.WarehouseCode; // 倉庫コード
            targetRow.WarehouseName = sourceRow.WarehouseName; // 倉庫名称
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo; // 倉庫棚番
            targetRow.SalesOrderDivCd = sourceRow.SalesOrderDivCd; // 売上在庫取寄せ区分
            targetRow.OpenPriceDiv = sourceRow.OpenPriceDiv; // オープン価格区分
            targetRow.GoodsRateRank = sourceRow.GoodsRateRank; // 商品掛率ランク
            targetRow.CustRateGrpCode = sourceRow.CustRateGrpCode; // 得意先掛率グループコード
            targetRow.ListPriceRate = sourceRow.ListPriceRate; // 定価率
            targetRow.RateSectPriceUnPrc = sourceRow.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            targetRow.RateDivLPrice = sourceRow.RateDivLPrice; // 掛率設定区分（定価）
            targetRow.UnPrcCalcCdLPrice = sourceRow.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            targetRow.PriceCdLPrice = sourceRow.PriceCdLPrice; // 価格区分（定価）
            targetRow.StdUnPrcLPrice = sourceRow.StdUnPrcLPrice; // 基準単価（定価）
            targetRow.FracProcUnitLPrice = sourceRow.FracProcUnitLPrice; // 端数処理単位（定価）
            targetRow.FracProcLPrice = sourceRow.FracProcLPrice; // 端数処理（定価）
            targetRow.ListPriceTaxIncFl = sourceRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            targetRow.ListPriceTaxExcFl = sourceRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            targetRow.ListPriceChngCd = sourceRow.ListPriceChngCd; // 定価変更区分
            targetRow.SalesRate = sourceRow.SalesRate; // 売価率
            targetRow.RateSectSalUnPrc = sourceRow.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            targetRow.RateDivSalUnPrc = sourceRow.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            targetRow.UnPrcCalcCdSalUnPrc = sourceRow.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            targetRow.PriceCdSalUnPrc = sourceRow.PriceCdSalUnPrc; // 価格区分（売上単価）
            targetRow.StdUnPrcSalUnPrc = sourceRow.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            targetRow.FracProcUnitSalUnPrc = sourceRow.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            targetRow.FracProcSalUnPrc = sourceRow.FracProcSalUnPrc; // 端数処理（売上単価）
            targetRow.SalesUnPrcTaxIncFl = sourceRow.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            targetRow.SalesUnPrcTaxExcFl = sourceRow.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            targetRow.SalesUnPrcChngCd = sourceRow.SalesUnPrcChngCd; // 売上単価変更区分
            targetRow.CostRate = sourceRow.CostRate; // 原価率
            targetRow.RateSectCstUnPrc = sourceRow.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            targetRow.RateDivUnCst = sourceRow.RateDivUnCst; // 掛率設定区分（原価単価）
            targetRow.UnPrcCalcCdUnCst = sourceRow.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            targetRow.PriceCdUnCst = sourceRow.PriceCdUnCst; // 価格区分（原価単価）
            targetRow.StdUnPrcUnCst = sourceRow.StdUnPrcUnCst; // 基準単価（原価単価）
            targetRow.FracProcUnitUnCst = sourceRow.FracProcUnitUnCst; // 端数処理単位（原価単価）
            targetRow.FracProcUnCst = sourceRow.FracProcUnCst; // 端数処理（原価単価）
            targetRow.SalesUnitCost = sourceRow.SalesUnitCost; // 原価単価
            targetRow.SalesUnitCostChngDiv = sourceRow.SalesUnitCostChngDiv; // 原価単価変更区分
            targetRow.RateBLGoodsCode = sourceRow.RateBLGoodsCode; // BL商品コード（掛率）
            targetRow.RateBLGoodsName = sourceRow.RateBLGoodsName; // BL商品コード名称（掛率）
            targetRow.RateGoodsRateGrpCd = sourceRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            targetRow.RateGoodsRateGrpNm = sourceRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            targetRow.RateBLGroupCode = sourceRow.RateBLGroupCode; // BLグループコード（掛率）
            targetRow.RateBLGroupName = sourceRow.RateBLGroupName; // BLグループ名称（掛率）
            targetRow.PrtBLGoodsCode = sourceRow.PrtBLGoodsCode; // BL商品コード（印刷）
            targetRow.PrtBLGoodsName = sourceRow.PrtBLGoodsName; // BL商品コード名称（印刷）
            targetRow.SalesCode = sourceRow.SalesCode; // 販売区分コード
            targetRow.SalesCdNm = sourceRow.SalesCdNm; // 販売区分名称
            targetRow.WorkManHour = sourceRow.WorkManHour; // 作業工数
            targetRow.ShipmentCnt = sourceRow.ShipmentCnt; // 出荷数
            targetRow.AcceptAnOrderCnt = sourceRow.AcceptAnOrderCnt; // 受注数量
            targetRow.AcptAnOdrAdjustCnt = sourceRow.AcptAnOdrAdjustCnt; // 受注調整数
            targetRow.AcptAnOdrRemainCnt = sourceRow.AcptAnOdrRemainCnt; // 受注残数
            targetRow.RemainCntUpdDate = sourceRow.RemainCntUpdDate; // 残数更新日
            targetRow.SalesMoneyTaxInc = sourceRow.SalesMoneyTaxInc; // 売上金額（税込み）
            targetRow.SalesMoneyTaxExc = sourceRow.SalesMoneyTaxExc; // 売上金額（税抜き）
            targetRow.Cost = sourceRow.Cost; // 原価
            targetRow.GrsProfitChkDiv = sourceRow.GrsProfitChkDiv; // 粗利チェック区分
            targetRow.SalesGoodsCd = sourceRow.SalesGoodsCd; // 売上商品区分
            targetRow.SalesPriceConsTax = sourceRow.SalesPriceConsTax; // 売上金額消費税額
            targetRow.TaxationDivCd = sourceRow.TaxationDivCd; // 課税区分
            targetRow.PartySlipNumDtl = sourceRow.PartySlipNumDtl; // 相手先伝票番号（明細）
            targetRow.DtlNote = sourceRow.DtlNote; // 明細備考
            targetRow.SupplierCd = sourceRow.SupplierCd; // 仕入先コード
            targetRow.SupplierSnm = sourceRow.SupplierSnm; // 仕入先略称
            targetRow.OrderNumber = sourceRow.OrderNumber; // 発注番号
            targetRow.WayToOrder = sourceRow.WayToOrder; // 注文方法
            targetRow.SlipMemo1 = sourceRow.SlipMemo1; // 伝票メモ１
            targetRow.SlipMemo2 = sourceRow.SlipMemo2; // 伝票メモ２
            targetRow.SlipMemo3 = sourceRow.SlipMemo3; // 伝票メモ３
            targetRow.InsideMemo1 = sourceRow.InsideMemo1; // 社内メモ１
            targetRow.InsideMemo2 = sourceRow.InsideMemo2; // 社内メモ２
            targetRow.InsideMemo3 = sourceRow.InsideMemo3; // 社内メモ３
            targetRow.BfListPrice = sourceRow.BfListPrice; // 変更前定価
            targetRow.BfSalesUnitPrice = sourceRow.BfSalesUnitPrice; // 変更前売価
            targetRow.BfUnitCost = sourceRow.BfUnitCost; // 変更前原価
            targetRow.CmpltSalesRowNo = sourceRow.CmpltSalesRowNo; // 一式明細番号
            targetRow.CmpltGoodsMakerCd = sourceRow.CmpltGoodsMakerCd; // メーカーコード（一式）
            targetRow.CmpltMakerName = sourceRow.CmpltMakerName; // メーカー名称（一式）
            targetRow.CmpltMakerKanaName = sourceRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            targetRow.CmpltGoodsName = sourceRow.CmpltGoodsName; // 商品名称（一式）
            targetRow.CmpltShipmentCnt = sourceRow.CmpltShipmentCnt; // 数量（一式）
            targetRow.CmpltSalesUnPrcFl = sourceRow.CmpltSalesUnPrcFl; // 売上単価（一式）
            targetRow.CmpltSalesMoney = sourceRow.CmpltSalesMoney; // 売上金額（一式）
            targetRow.CmpltSalesUnitCost = sourceRow.CmpltSalesUnitCost; // 原価単価（一式）
            targetRow.CmpltCost = sourceRow.CmpltCost; // 原価金額（一式）
            targetRow.CmpltPartySalSlNum = sourceRow.CmpltPartySalSlNum; // 相手先伝票番号（一式）
            targetRow.CmpltNote = sourceRow.CmpltNote; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            targetRow.SelectedGoodsNoDiv = sourceRow.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            targetRow.PrtGoodsNo = sourceRow.PrtGoodsNo; // 印刷用品番
            targetRow.PrtMakerCode = sourceRow.PrtMakerCode; // 印刷用メーカーコード
            targetRow.PrtMakerName = sourceRow.PrtMakerName; // 印刷用メーカー名称
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid; // 共通キー
            targetRow.CarRelationGuid = sourceRow.CarRelationGuid; // 車両情報共通キー
            targetRow.SalesRowNoDisplay = sourceRow.SalesRowNoDisplay; // 行番号（表示用）
            targetRow.SupplierStock = sourceRow.SupplierStock; // 現在庫数
            targetRow.SupplierStockDisplay = sourceRow.SupplierStockDisplay; // 現在庫数（表示用）
            targetRow.OpenPriceDivDisplay = sourceRow.OpenPriceDivDisplay; // オープン価格区分（表示用）
            targetRow.ListPriceDisplay = sourceRow.ListPriceDisplay; // 定価（表示用）
            targetRow.SalesUnPrcDisplay = sourceRow.SalesUnPrcDisplay; // 売上単価（表示用）
            targetRow.SalesUnitCostTaxExc = sourceRow.SalesUnitCostTaxExc; // 原価単価（税抜）
            targetRow.SalesUnitCostTaxInc = sourceRow.SalesUnitCostTaxInc; // 原価単価（税込）
            targetRow.ShipmentCntDisplay = sourceRow.ShipmentCntDisplay; // 出荷数（表示用）
            targetRow.AddUpEnableCnt = sourceRow.AddUpEnableCnt; // 計上可能数
            targetRow.AlreadyAddUpCnt = sourceRow.AlreadyAddUpCnt; // 計上済数
            targetRow.ShipmentCntDefault = sourceRow.ShipmentCntDefault; // 出荷数（初期値）
            targetRow.SalesMoneyDisplay = sourceRow.SalesMoneyDisplay; // 売上金額（表示用）
            targetRow.CostTaxInc = sourceRow.CostTaxInc; // 原価金額（税込）
            targetRow.CostTaxExc = sourceRow.CostTaxExc; // 原価金額（税抜）
            targetRow.AcceptAnOrderCntDisplay = sourceRow.AcceptAnOrderCntDisplay; // 受注数（表示用）
            targetRow.AcceptAnOrderCntDefault = sourceRow.AcceptAnOrderCntDefault; // 受注数（初期値）
            targetRow.TaxDiv = sourceRow.TaxDiv; // 課税区分（UI用）
            targetRow.CanTaxDivChange = sourceRow.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            targetRow.RowStatus = sourceRow.RowStatus; // 行ステータス
            targetRow.EditStatus = sourceRow.EditStatus; // エディットステータス
            targetRow.SlipMemoExist = sourceRow.SlipMemoExist; // メモ存在フラグ
            targetRow.SupplierSlipExist = sourceRow.SupplierSlipExist; // 仕入情報存在フラグ
            targetRow.DetailGrossProfitRate = sourceRow.DetailGrossProfitRate; // 明細粗利率
            targetRow.CostUpRate = sourceRow.CostUpRate; // 原価アップ率
            targetRow.GrossProfitSecureRate = sourceRow.GrossProfitSecureRate; // 粗利確保率
            targetRow.SupplierCdForStock = sourceRow.SupplierCdForStock; // 仕入先コード
            targetRow.StockDate = sourceRow.StockDate; // 仕入日
            targetRow.PartySalesSlipNum = sourceRow.PartySalesSlipNum; // 仕入伝票番号
            targetRow.BoCode = sourceRow.BoCode; // BO区分
            targetRow.SupplierCdForOrder = sourceRow.SupplierCdForOrder; // 発注先
            targetRow.AcceptAnOrderCntForOrder = sourceRow.AcceptAnOrderCntForOrder; // 発注数
            targetRow.SupplierSnmForOrder = sourceRow.SupplierSnmForOrder; // 発注先名称
            targetRow.UOEDeliGoodsDiv = sourceRow.UOEDeliGoodsDiv; // 納品区分
            targetRow.DeliveredGoodsDivNm = sourceRow.DeliveredGoodsDivNm; // 納品区分名称
            targetRow.DeliveredGoodsDivNmSave = sourceRow.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            targetRow.FollowDeliGoodsDiv = sourceRow.FollowDeliGoodsDiv; // H納品区分
            targetRow.FollowDeliGoodsDivNm = sourceRow.FollowDeliGoodsDivNm; // H納品区分名称
            targetRow.FollowDeliGoodsDivNmSave = sourceRow.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            targetRow.UOEResvdSection = sourceRow.UOEResvdSection; // 指定拠点
            targetRow.UOEResvdSectionNm = sourceRow.UOEResvdSectionNm; // 指定拠点名称
            targetRow.UOEResvdSectionNmSave = sourceRow.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            targetRow.PriceStartDate = sourceRow.PriceStartDate; // 新定価適用日
            targetRow.Dummy = sourceRow.Dummy; // ダミー（空欄表示用）
            targetRow.SearchPartsModeState = sourceRow.SearchPartsModeState; // 部品検索状態
            targetRow.SalesMoneyInputDiv = sourceRow.SalesMoneyInputDiv; // 売上金額手入力区分
            targetRow.SalesUnPrcTaxExcFlDefault = sourceRow.SalesUnPrcTaxExcFlDefault; // 売上単価（税込，浮動）初期値
            targetRow.SalesUnPrcTaxIncFlDefault = sourceRow.SalesUnPrcTaxIncFlDefault; // 売上単価（税抜，浮動）初期値
            targetRow.SalesUnitCostTaxExcDefault = sourceRow.SalesUnitCostTaxExcDefault; // 原価単価（税抜）初期値
            targetRow.SalesUnitCostTaxIncDefault = sourceRow.SalesUnitCostTaxIncDefault; // 原価単価（税込）初期値
            //>>>2010/02/26
            targetRow.CampaignCode = sourceRow.CampaignCode; // キャンペーンコード
            targetRow.CampaignName = sourceRow.CampaignName; // キャンペーン名称
            targetRow.GoodsDivCd = sourceRow.GoodsDivCd; // 商品種別
            //targetRow.AnswerDelivDate = sourceRow.DeliGdsCmpltDueDate; // 回答納期
            targetRow.RecycleDiv = sourceRow.RecycleDiv; // リサイクル区分
            targetRow.RecycleDivNm = sourceRow.RecycleDivNm; // リサイクル区分名称
            targetRow.RecycleDivNmSave = sourceRow.RecycleDivNmSave; // リサイクル区分名称
            targetRow.WayToAcptOdr = sourceRow.WayToAcptOdr; // 受注方法
            targetRow.GoodsMngNo = sourceRow.GoodsMngNo; // 商品管理番号
            targetRow.InqRowNumber = sourceRow.InqRowNumber; // 問合せ行番号
            targetRow.InqRowNumDerivedNo = sourceRow.InqRowNumDerivedNo; // 問合せ行番号枝番
            //<<<2010/02/26
            // 2012/01/16 Add >>>
            targetRow.GoodsSpecialNote = sourceRow.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<

            #region 補正
            if (sourceRow.SalesSlipDtlNum == 0)
            {
                targetRow.ShipmentCnt = sourceRow.AcceptAnOrderCntDisplay; // 出荷数
                targetRow.AcceptAnOrderCnt = sourceRow.AcceptAnOrderCntDisplay; // 受注数量
                targetRow.AcptAnOdrAdjustCnt = 0; // 受注調整数
                targetRow.AcptAnOdrRemainCnt = sourceRow.AcceptAnOrderCntDisplay - sourceRow.ShipmentCnt; // 受注残数
            }
            #endregion

        }

        /// <summary>
        /// 受注明細行オブジェクト→売上明細行オブジェクトへのコピーを行います。
        /// </summary>
        /// <param name="sourceRow">コピー元受注明細行オブジェクト</param>
        /// <param name="targetRow">コピー先売上明細行オブジェクト</param>
        private void CopySalesDetailFromAcceptAnOrder(SalesInputDataSet.SalesDetailAcceptAnOrderRow sourceRow, SalesInputDataSet.SalesDetailRow targetRow)
        {
            if ((sourceRow == null) || (targetRow == null)) return;

            //targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo; // 受注番号
            //targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus; // 受注ステータス
            //targetRow.SalesSlipNum = sourceRow.SalesSlipNum; // 売上伝票番号

            // --- ADD 2014/12/11 Y.Wakita ---------->>>>>
            // 受注計上時の発注の場合、受注番号、受注ステータス、売上伝票番号を引き継ぐ
            if (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp)
            {
                targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo;  // 受注番号
                targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus;  // 受注ステータス
                targetRow.SalesSlipNum = sourceRow.SalesSlipNum;        // 売上伝票番号
            }
            // --- ADD 2014/12/11 Y.Wakita ----------<<<<<

            targetRow.SalesRowNo = sourceRow.SalesRowNo; // 売上行番号
            targetRow.SalesRowDerivNo = sourceRow.SalesRowDerivNo; // 売上行番号枝番
            targetRow.SectionCode = sourceRow.SectionCode; // 拠点コード
            targetRow.SubSectionCode = sourceRow.SubSectionCode; // 部門コード
            targetRow.SalesDate = sourceRow.SalesDate; // 売上日付
            targetRow.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            targetRow.SalesSlipDtlNum = sourceRow.SalesSlipDtlNum; // 売上明細通番
            targetRow.AcptAnOdrStatusSrc = sourceRow.AcptAnOdrStatusSrc; // 受注ステータス（元）
            targetRow.SalesSlipDtlNumSrc = sourceRow.SalesSlipDtlNumSrc; // 売上明細通番（元）
            targetRow.SupplierFormalSync = sourceRow.SupplierFormalSync; // 仕入形式（同時）
            targetRow.StockSlipDtlNumSync = sourceRow.StockSlipDtlNumSync; // 仕入明細通番（同時）
            targetRow.SalesSlipCdDtl = sourceRow.SalesSlipCdDtl; // 売上伝票区分（明細）
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate; // 納品完了予定日
            targetRow.GoodsKindCode = sourceRow.GoodsKindCode; // 商品属性
            targetRow.GoodsSearchDivCd = sourceRow.GoodsSearchDivCd; // 商品検索区分
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd; // 商品メーカーコード
            targetRow.MakerName = sourceRow.MakerName; // メーカー名称
            targetRow.MakerKanaName = sourceRow.MakerKanaName; // メーカーカナ名称
            targetRow.GoodsNo = sourceRow.GoodsNo; // 商品番号
            targetRow.GoodsName = sourceRow.GoodsName; // 商品名称
            targetRow.GoodsNameKana = sourceRow.GoodsNameKana; // 商品名称カナ
            targetRow.GoodsLGroup = sourceRow.GoodsLGroup; // 商品大分類コード
            targetRow.GoodsLGroupName = sourceRow.GoodsLGroupName; // 商品大分類名称
            targetRow.GoodsMGroup = sourceRow.GoodsMGroup; // 商品中分類コード
            targetRow.GoodsMGroupName = sourceRow.GoodsMGroupName; // 商品中分類名称
            targetRow.BLGroupCode = sourceRow.BLGroupCode; // BLグループコード
            targetRow.BLGroupName = sourceRow.BLGroupName; // BLグループコード名称
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode; // BL商品コード
            targetRow.BLGoodsFullName = sourceRow.BLGoodsFullName; // BL商品コード名称（全角）
            targetRow.EnterpriseGanreCode = sourceRow.EnterpriseGanreCode; // 自社分類コード
            targetRow.EnterpriseGanreName = sourceRow.EnterpriseGanreName; // 自社分類名称
            targetRow.WarehouseCode = sourceRow.WarehouseCode; // 倉庫コード
            targetRow.WarehouseName = sourceRow.WarehouseName; // 倉庫名称
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo; // 倉庫棚番
            targetRow.SalesOrderDivCd = sourceRow.SalesOrderDivCd; // 売上在庫取寄せ区分
            targetRow.OpenPriceDiv = sourceRow.OpenPriceDiv; // オープン価格区分
            targetRow.GoodsRateRank = sourceRow.GoodsRateRank; // 商品掛率ランク
            targetRow.CustRateGrpCode = sourceRow.CustRateGrpCode; // 得意先掛率グループコード
            targetRow.ListPriceRate = sourceRow.ListPriceRate; // 定価率
            targetRow.RateSectPriceUnPrc = sourceRow.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            targetRow.RateDivLPrice = sourceRow.RateDivLPrice; // 掛率設定区分（定価）
            targetRow.UnPrcCalcCdLPrice = sourceRow.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            targetRow.PriceCdLPrice = sourceRow.PriceCdLPrice; // 価格区分（定価）
            targetRow.StdUnPrcLPrice = sourceRow.StdUnPrcLPrice; // 基準単価（定価）
            targetRow.FracProcUnitLPrice = sourceRow.FracProcUnitLPrice; // 端数処理単位（定価）
            targetRow.FracProcLPrice = sourceRow.FracProcLPrice; // 端数処理（定価）
            targetRow.ListPriceTaxIncFl = sourceRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            targetRow.ListPriceTaxExcFl = sourceRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            targetRow.ListPriceChngCd = sourceRow.ListPriceChngCd; // 定価変更区分
            targetRow.SalesRate = sourceRow.SalesRate; // 売価率
            targetRow.RateSectSalUnPrc = sourceRow.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            targetRow.RateDivSalUnPrc = sourceRow.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            targetRow.UnPrcCalcCdSalUnPrc = sourceRow.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            targetRow.PriceCdSalUnPrc = sourceRow.PriceCdSalUnPrc; // 価格区分（売上単価）
            targetRow.StdUnPrcSalUnPrc = sourceRow.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            targetRow.FracProcUnitSalUnPrc = sourceRow.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            targetRow.FracProcSalUnPrc = sourceRow.FracProcSalUnPrc; // 端数処理（売上単価）
            targetRow.SalesUnPrcTaxIncFl = sourceRow.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            targetRow.SalesUnPrcTaxExcFl = sourceRow.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            targetRow.SalesUnPrcChngCd = sourceRow.SalesUnPrcChngCd; // 売上単価変更区分
            targetRow.CostRate = sourceRow.CostRate; // 原価率
            targetRow.RateSectCstUnPrc = sourceRow.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            targetRow.RateDivUnCst = sourceRow.RateDivUnCst; // 掛率設定区分（原価単価）
            targetRow.UnPrcCalcCdUnCst = sourceRow.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            targetRow.PriceCdUnCst = sourceRow.PriceCdUnCst; // 価格区分（原価単価）
            targetRow.StdUnPrcUnCst = sourceRow.StdUnPrcUnCst; // 基準単価（原価単価）
            targetRow.FracProcUnitUnCst = sourceRow.FracProcUnitUnCst; // 端数処理単位（原価単価）
            targetRow.FracProcUnCst = sourceRow.FracProcUnCst; // 端数処理（原価単価）
            targetRow.SalesUnitCost = sourceRow.SalesUnitCost; // 原価単価
            targetRow.SalesUnitCostChngDiv = sourceRow.SalesUnitCostChngDiv; // 原価単価変更区分
            targetRow.RateBLGoodsCode = sourceRow.RateBLGoodsCode; // BL商品コード（掛率）
            targetRow.RateBLGoodsName = sourceRow.RateBLGoodsName; // BL商品コード名称（掛率）
            targetRow.RateGoodsRateGrpCd = sourceRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            targetRow.RateGoodsRateGrpNm = sourceRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            targetRow.RateBLGroupCode = sourceRow.RateBLGroupCode; // BLグループコード（掛率）
            targetRow.RateBLGroupName = sourceRow.RateBLGroupName; // BLグループ名称（掛率）
            targetRow.PrtBLGoodsCode = sourceRow.PrtBLGoodsCode; // BL商品コード（印刷）
            targetRow.PrtBLGoodsName = sourceRow.PrtBLGoodsName; // BL商品コード名称（印刷）
            targetRow.SalesCode = sourceRow.SalesCode; // 販売区分コード
            targetRow.SalesCdNm = sourceRow.SalesCdNm; // 販売区分名称
            targetRow.WorkManHour = sourceRow.WorkManHour; // 作業工数
            targetRow.ShipmentCnt = sourceRow.ShipmentCnt; // 出荷数
            targetRow.AcceptAnOrderCnt = sourceRow.AcceptAnOrderCnt; // 受注数量
            targetRow.AcptAnOdrAdjustCnt = sourceRow.AcptAnOdrAdjustCnt; // 受注調整数
            targetRow.AcptAnOdrRemainCnt = sourceRow.AcptAnOdrRemainCnt; // 受注残数
            targetRow.RemainCntUpdDate = sourceRow.RemainCntUpdDate; // 残数更新日
            targetRow.SalesMoneyTaxInc = sourceRow.SalesMoneyTaxInc; // 売上金額（税込み）
            targetRow.SalesMoneyTaxExc = sourceRow.SalesMoneyTaxExc; // 売上金額（税抜き）
            targetRow.Cost = sourceRow.Cost; // 原価
            targetRow.GrsProfitChkDiv = sourceRow.GrsProfitChkDiv; // 粗利チェック区分
            targetRow.SalesGoodsCd = sourceRow.SalesGoodsCd; // 売上商品区分
            targetRow.SalesPriceConsTax = sourceRow.SalesPriceConsTax; // 売上金額消費税額
            targetRow.TaxationDivCd = sourceRow.TaxationDivCd; // 課税区分
            targetRow.PartySlipNumDtl = sourceRow.PartySlipNumDtl; // 相手先伝票番号（明細）
            targetRow.DtlNote = sourceRow.DtlNote; // 明細備考
            targetRow.SupplierCd = sourceRow.SupplierCd; // 仕入先コード
            targetRow.SupplierSnm = sourceRow.SupplierSnm; // 仕入先略称
            targetRow.OrderNumber = sourceRow.OrderNumber; // 発注番号
            targetRow.WayToOrder = sourceRow.WayToOrder; // 注文方法
            targetRow.SlipMemo1 = sourceRow.SlipMemo1; // 伝票メモ１
            targetRow.SlipMemo2 = sourceRow.SlipMemo2; // 伝票メモ２
            targetRow.SlipMemo3 = sourceRow.SlipMemo3; // 伝票メモ３
            targetRow.InsideMemo1 = sourceRow.InsideMemo1; // 社内メモ１
            targetRow.InsideMemo2 = sourceRow.InsideMemo2; // 社内メモ２
            targetRow.InsideMemo3 = sourceRow.InsideMemo3; // 社内メモ３
            targetRow.BfListPrice = sourceRow.BfListPrice; // 変更前定価
            targetRow.BfSalesUnitPrice = sourceRow.BfSalesUnitPrice; // 変更前売価
            targetRow.BfUnitCost = sourceRow.BfUnitCost; // 変更前原価
            targetRow.CmpltSalesRowNo = sourceRow.CmpltSalesRowNo; // 一式明細番号
            targetRow.CmpltGoodsMakerCd = sourceRow.CmpltGoodsMakerCd; // メーカーコード（一式）
            targetRow.CmpltMakerName = sourceRow.CmpltMakerName; // メーカー名称（一式）
            targetRow.CmpltMakerKanaName = sourceRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            targetRow.CmpltGoodsName = sourceRow.CmpltGoodsName; // 商品名称（一式）
            targetRow.CmpltShipmentCnt = sourceRow.CmpltShipmentCnt; // 数量（一式）
            targetRow.CmpltSalesUnPrcFl = sourceRow.CmpltSalesUnPrcFl; // 売上単価（一式）
            targetRow.CmpltSalesMoney = sourceRow.CmpltSalesMoney; // 売上金額（一式）
            targetRow.CmpltSalesUnitCost = sourceRow.CmpltSalesUnitCost; // 原価単価（一式）
            targetRow.CmpltCost = sourceRow.CmpltCost; // 原価金額（一式）
            targetRow.CmpltPartySalSlNum = sourceRow.CmpltPartySalSlNum; // 相手先伝票番号（一式）
            targetRow.CmpltNote = sourceRow.CmpltNote; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            targetRow.SelectedGoodsNoDiv = sourceRow.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            targetRow.PrtGoodsNo = sourceRow.PrtGoodsNo; // 印刷用品番
            targetRow.PrtMakerCode = sourceRow.PrtMakerCode; // 印刷用メーカーコード
            targetRow.PrtMakerName = sourceRow.PrtMakerName; // 印刷用メーカー名称
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid; // 共通キー
            targetRow.CarRelationGuid = sourceRow.CarRelationGuid; // 車両情報共通キー
            //targetRow.SalesRowNoDisplay = sourceRow.SalesRowNoDisplay; // 行番号（表示用）
            targetRow.SupplierStock = sourceRow.SupplierStock; // 現在庫数
            targetRow.SupplierStockDisplay = sourceRow.SupplierStockDisplay; // 現在庫数（表示用）
            targetRow.OpenPriceDivDisplay = sourceRow.OpenPriceDivDisplay; // オープン価格区分（表示用）
            targetRow.ListPriceDisplay = sourceRow.ListPriceDisplay; // 定価（表示用）
            targetRow.SalesUnPrcDisplay = sourceRow.SalesUnPrcDisplay; // 売上単価（表示用）
            targetRow.SalesUnitCostTaxExc = sourceRow.SalesUnitCostTaxExc; // 原価単価（税抜）
            targetRow.SalesUnitCostTaxInc = sourceRow.SalesUnitCostTaxInc; // 原価単価（税込）
            targetRow.ShipmentCntDisplay = sourceRow.ShipmentCntDisplay; // 出荷数（表示用）
            targetRow.AddUpEnableCnt = sourceRow.AddUpEnableCnt; // 計上可能数
            targetRow.AlreadyAddUpCnt = sourceRow.AlreadyAddUpCnt; // 計上済数
            targetRow.ShipmentCntDefault = sourceRow.ShipmentCntDefault; // 出荷数（初期値）
            targetRow.SalesMoneyDisplay = sourceRow.SalesMoneyDisplay; // 売上金額（表示用）
            targetRow.CostTaxInc = sourceRow.CostTaxInc; // 原価金額（税込）
            targetRow.CostTaxExc = sourceRow.CostTaxExc; // 原価金額（税抜）
            targetRow.AcceptAnOrderCntDisplay = sourceRow.AcceptAnOrderCntDisplay; // 受注数（表示用）
            targetRow.AcceptAnOrderCntDefault = sourceRow.AcceptAnOrderCntDefault; // 受注数（初期値）
            targetRow.TaxDiv = sourceRow.TaxDiv; // 課税区分（UI用）
            targetRow.CanTaxDivChange = sourceRow.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            targetRow.RowStatus = sourceRow.RowStatus; // 行ステータス
            targetRow.EditStatus = sourceRow.EditStatus; // エディットステータス
            targetRow.SlipMemoExist = sourceRow.SlipMemoExist; // メモ存在フラグ
            targetRow.SupplierSlipExist = sourceRow.SupplierSlipExist; // 仕入情報存在フラグ
            targetRow.DetailGrossProfitRate = sourceRow.DetailGrossProfitRate; // 明細粗利率
            targetRow.CostUpRate = sourceRow.CostUpRate; // 原価アップ率
            targetRow.GrossProfitSecureRate = sourceRow.GrossProfitSecureRate; // 粗利確保率
            targetRow.SupplierCdForStock = sourceRow.SupplierCdForStock; // 仕入先コード
            targetRow.StockDate = sourceRow.StockDate; // 仕入日
            targetRow.PartySalesSlipNum = sourceRow.PartySalesSlipNum; // 仕入伝票番号
            targetRow.BoCode = sourceRow.BoCode; // BO区分
            targetRow.SupplierCdForOrder = sourceRow.SupplierCdForOrder; // 発注先
            targetRow.AcceptAnOrderCntForOrder = sourceRow.AcceptAnOrderCntForOrder; // 発注数
            targetRow.SupplierSnmForOrder = sourceRow.SupplierSnmForOrder; // 発注先名称
            targetRow.UOEDeliGoodsDiv = sourceRow.UOEDeliGoodsDiv; // 納品区分
            targetRow.DeliveredGoodsDivNm = sourceRow.DeliveredGoodsDivNm; // 納品区分名称
            targetRow.DeliveredGoodsDivNmSave = sourceRow.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            targetRow.FollowDeliGoodsDiv = sourceRow.FollowDeliGoodsDiv; // H納品区分
            targetRow.FollowDeliGoodsDivNm = sourceRow.FollowDeliGoodsDivNm; // H納品区分名称
            targetRow.FollowDeliGoodsDivNmSave = sourceRow.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            targetRow.UOEResvdSection = sourceRow.UOEResvdSection; // 指定拠点
            targetRow.UOEResvdSectionNm = sourceRow.UOEResvdSectionNm; // 指定拠点名称
            targetRow.UOEResvdSectionNmSave = sourceRow.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            targetRow.PriceStartDate = sourceRow.PriceStartDate; // 新定価適用日
            targetRow.Dummy = sourceRow.Dummy; // ダミー（空欄表示用）
            targetRow.SearchPartsModeState = sourceRow.SearchPartsModeState; // 部品検索状態
            targetRow.SalesMoneyInputDiv = sourceRow.SalesMoneyInputDiv; // 売上金額手入力区分
            targetRow.SalesUnPrcTaxExcFlDefault = sourceRow.SalesUnPrcTaxExcFlDefault; // 売上単価（税込，浮動）初期値
            targetRow.SalesUnPrcTaxIncFlDefault = sourceRow.SalesUnPrcTaxIncFlDefault; // 売上単価（税抜，浮動）初期値
            targetRow.SalesUnitCostTaxExcDefault = sourceRow.SalesUnitCostTaxExcDefault; // 原価単価（税抜）初期値
            targetRow.SalesUnitCostTaxIncDefault = sourceRow.SalesUnitCostTaxIncDefault; // 原価単価（税込）初期値
            //>>>2010/02/26
            targetRow.CampaignCode = sourceRow.CampaignCode; // キャンペーンコード
            targetRow.CampaignName = sourceRow.CampaignName; // キャンペーン名称
            targetRow.GoodsDivCd = sourceRow.GoodsDivCd; // 商品種別
            //targetRow.AnswerDelivDate = sourceRow.AnswerDelivDate; // 回答納期
            targetRow.RecycleDiv = sourceRow.RecycleDiv; // リサイクル区分
            targetRow.RecycleDivNm = sourceRow.RecycleDivNm; // リサイクル区分名称
            targetRow.RecycleDivNmSave = sourceRow.RecycleDivNmSave; // リサイクル区分名称
            targetRow.WayToAcptOdr = sourceRow.WayToAcptOdr; // 受注方法
            targetRow.GoodsMngNo = sourceRow.GoodsMngNo; // 商品管理番号
            targetRow.InqRowNumber = sourceRow.InqRowNumber; // 問合せ行番号
            targetRow.InqRowNumDerivedNo = sourceRow.InqRowNumDerivedNo; // 問合せ行番号枝番
            //<<<2010/02/26
            // 2012/01/16 Add >>>
            targetRow.GoodsSpecialNote = sourceRow.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<
        }

        /// <summary>
        /// 受注明細行オブジェクト→受注明細行オブジェクトへのコピーを行います。
        /// </summary>
        /// <param name="sourceRow">コピー元受注明細行オブジェクト</param>
        /// <param name="targetRow">コピー先売上明細行オブジェクト</param>
        private void CopyAcceptAnOrderFromAcceptAnOrder(SalesInputDataSet.SalesDetailAcceptAnOrderRow sourceRow, SalesInputDataSet.SalesDetailAcceptAnOrderRow targetRow)
        {
            if ((sourceRow == null) || (targetRow == null)) return;

            //targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo; // 受注番号
            //targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus; // 受注ステータス
            targetRow.SalesSlipNum = sourceRow.SalesSlipNum; // 売上伝票番号
            targetRow.SalesRowNo = sourceRow.SalesRowNo; // 売上行番号
            targetRow.SalesRowDerivNo = sourceRow.SalesRowDerivNo; // 売上行番号枝番
            targetRow.SectionCode = sourceRow.SectionCode; // 拠点コード
            targetRow.SubSectionCode = sourceRow.SubSectionCode; // 部門コード
            targetRow.SalesDate = sourceRow.SalesDate; // 売上日付
            targetRow.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            targetRow.SalesSlipDtlNum = sourceRow.SalesSlipDtlNum; // 売上明細通番
            targetRow.AcptAnOdrStatusSrc = sourceRow.AcptAnOdrStatusSrc; // 受注ステータス（元）
            targetRow.SalesSlipDtlNumSrc = sourceRow.SalesSlipDtlNumSrc; // 売上明細通番（元）
            targetRow.SupplierFormalSync = sourceRow.SupplierFormalSync; // 仕入形式（同時）
            targetRow.StockSlipDtlNumSync = sourceRow.StockSlipDtlNumSync; // 仕入明細通番（同時）
            targetRow.SalesSlipCdDtl = sourceRow.SalesSlipCdDtl; // 売上伝票区分（明細）
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate; // 納品完了予定日
            targetRow.GoodsKindCode = sourceRow.GoodsKindCode; // 商品属性
            targetRow.GoodsSearchDivCd = sourceRow.GoodsSearchDivCd; // 商品検索区分
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd; // 商品メーカーコード
            targetRow.MakerName = sourceRow.MakerName; // メーカー名称
            targetRow.MakerKanaName = sourceRow.MakerKanaName; // メーカーカナ名称
            targetRow.GoodsNo = sourceRow.GoodsNo; // 商品番号
            targetRow.GoodsName = sourceRow.GoodsName; // 商品名称
            targetRow.GoodsNameKana = sourceRow.GoodsNameKana; // 商品名称カナ
            targetRow.GoodsLGroup = sourceRow.GoodsLGroup; // 商品大分類コード
            targetRow.GoodsLGroupName = sourceRow.GoodsLGroupName; // 商品大分類名称
            targetRow.GoodsMGroup = sourceRow.GoodsMGroup; // 商品中分類コード
            targetRow.GoodsMGroupName = sourceRow.GoodsMGroupName; // 商品中分類名称
            targetRow.BLGroupCode = sourceRow.BLGroupCode; // BLグループコード
            targetRow.BLGroupName = sourceRow.BLGroupName; // BLグループコード名称
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode; // BL商品コード
            targetRow.BLGoodsFullName = sourceRow.BLGoodsFullName; // BL商品コード名称（全角）
            targetRow.EnterpriseGanreCode = sourceRow.EnterpriseGanreCode; // 自社分類コード
            targetRow.EnterpriseGanreName = sourceRow.EnterpriseGanreName; // 自社分類名称
            targetRow.WarehouseCode = sourceRow.WarehouseCode; // 倉庫コード
            targetRow.WarehouseName = sourceRow.WarehouseName; // 倉庫名称
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo; // 倉庫棚番
            targetRow.SalesOrderDivCd = sourceRow.SalesOrderDivCd; // 売上在庫取寄せ区分
            targetRow.OpenPriceDiv = sourceRow.OpenPriceDiv; // オープン価格区分
            targetRow.GoodsRateRank = sourceRow.GoodsRateRank; // 商品掛率ランク
            targetRow.CustRateGrpCode = sourceRow.CustRateGrpCode; // 得意先掛率グループコード
            targetRow.ListPriceRate = sourceRow.ListPriceRate; // 定価率
            targetRow.RateSectPriceUnPrc = sourceRow.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            targetRow.RateDivLPrice = sourceRow.RateDivLPrice; // 掛率設定区分（定価）
            targetRow.UnPrcCalcCdLPrice = sourceRow.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            targetRow.PriceCdLPrice = sourceRow.PriceCdLPrice; // 価格区分（定価）
            targetRow.StdUnPrcLPrice = sourceRow.StdUnPrcLPrice; // 基準単価（定価）
            targetRow.FracProcUnitLPrice = sourceRow.FracProcUnitLPrice; // 端数処理単位（定価）
            targetRow.FracProcLPrice = sourceRow.FracProcLPrice; // 端数処理（定価）
            targetRow.ListPriceTaxIncFl = sourceRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            targetRow.ListPriceTaxExcFl = sourceRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            targetRow.ListPriceChngCd = sourceRow.ListPriceChngCd; // 定価変更区分
            targetRow.SalesRate = sourceRow.SalesRate; // 売価率
            targetRow.RateSectSalUnPrc = sourceRow.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            targetRow.RateDivSalUnPrc = sourceRow.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            targetRow.UnPrcCalcCdSalUnPrc = sourceRow.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            targetRow.PriceCdSalUnPrc = sourceRow.PriceCdSalUnPrc; // 価格区分（売上単価）
            targetRow.StdUnPrcSalUnPrc = sourceRow.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            targetRow.FracProcUnitSalUnPrc = sourceRow.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            targetRow.FracProcSalUnPrc = sourceRow.FracProcSalUnPrc; // 端数処理（売上単価）
            targetRow.SalesUnPrcTaxIncFl = sourceRow.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            targetRow.SalesUnPrcTaxExcFl = sourceRow.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            targetRow.SalesUnPrcChngCd = sourceRow.SalesUnPrcChngCd; // 売上単価変更区分
            targetRow.CostRate = sourceRow.CostRate; // 原価率
            targetRow.RateSectCstUnPrc = sourceRow.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            targetRow.RateDivUnCst = sourceRow.RateDivUnCst; // 掛率設定区分（原価単価）
            targetRow.UnPrcCalcCdUnCst = sourceRow.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            targetRow.PriceCdUnCst = sourceRow.PriceCdUnCst; // 価格区分（原価単価）
            targetRow.StdUnPrcUnCst = sourceRow.StdUnPrcUnCst; // 基準単価（原価単価）
            targetRow.FracProcUnitUnCst = sourceRow.FracProcUnitUnCst; // 端数処理単位（原価単価）
            targetRow.FracProcUnCst = sourceRow.FracProcUnCst; // 端数処理（原価単価）
            targetRow.SalesUnitCost = sourceRow.SalesUnitCost; // 原価単価
            targetRow.SalesUnitCostChngDiv = sourceRow.SalesUnitCostChngDiv; // 原価単価変更区分
            targetRow.RateBLGoodsCode = sourceRow.RateBLGoodsCode; // BL商品コード（掛率）
            targetRow.RateBLGoodsName = sourceRow.RateBLGoodsName; // BL商品コード名称（掛率）
            targetRow.RateGoodsRateGrpCd = sourceRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            targetRow.RateGoodsRateGrpNm = sourceRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            targetRow.RateBLGroupCode = sourceRow.RateBLGroupCode; // BLグループコード（掛率）
            targetRow.RateBLGroupName = sourceRow.RateBLGroupName; // BLグループ名称（掛率）
            targetRow.PrtBLGoodsCode = sourceRow.PrtBLGoodsCode; // BL商品コード（印刷）
            targetRow.PrtBLGoodsName = sourceRow.PrtBLGoodsName; // BL商品コード名称（印刷）
            targetRow.SalesCode = sourceRow.SalesCode; // 販売区分コード
            targetRow.SalesCdNm = sourceRow.SalesCdNm; // 販売区分名称
            targetRow.WorkManHour = sourceRow.WorkManHour; // 作業工数
            targetRow.ShipmentCnt = sourceRow.ShipmentCnt; // 出荷数
            targetRow.AcceptAnOrderCnt = sourceRow.AcceptAnOrderCnt; // 受注数量
            targetRow.AcptAnOdrAdjustCnt = sourceRow.AcptAnOdrAdjustCnt; // 受注調整数
            targetRow.AcptAnOdrRemainCnt = sourceRow.AcptAnOdrRemainCnt; // 受注残数
            targetRow.RemainCntUpdDate = sourceRow.RemainCntUpdDate; // 残数更新日
            targetRow.SalesMoneyTaxInc = sourceRow.SalesMoneyTaxInc; // 売上金額（税込み）
            targetRow.SalesMoneyTaxExc = sourceRow.SalesMoneyTaxExc; // 売上金額（税抜き）
            targetRow.Cost = sourceRow.Cost; // 原価
            targetRow.GrsProfitChkDiv = sourceRow.GrsProfitChkDiv; // 粗利チェック区分
            targetRow.SalesGoodsCd = sourceRow.SalesGoodsCd; // 売上商品区分
            targetRow.SalesPriceConsTax = sourceRow.SalesPriceConsTax; // 売上金額消費税額
            targetRow.TaxationDivCd = sourceRow.TaxationDivCd; // 課税区分
            targetRow.PartySlipNumDtl = sourceRow.PartySlipNumDtl; // 相手先伝票番号（明細）
            targetRow.DtlNote = sourceRow.DtlNote; // 明細備考
            targetRow.SupplierCd = sourceRow.SupplierCd; // 仕入先コード
            targetRow.SupplierSnm = sourceRow.SupplierSnm; // 仕入先略称
            targetRow.OrderNumber = sourceRow.OrderNumber; // 発注番号
            targetRow.WayToOrder = sourceRow.WayToOrder; // 注文方法
            targetRow.SlipMemo1 = sourceRow.SlipMemo1; // 伝票メモ１
            targetRow.SlipMemo2 = sourceRow.SlipMemo2; // 伝票メモ２
            targetRow.SlipMemo3 = sourceRow.SlipMemo3; // 伝票メモ３
            targetRow.InsideMemo1 = sourceRow.InsideMemo1; // 社内メモ１
            targetRow.InsideMemo2 = sourceRow.InsideMemo2; // 社内メモ２
            targetRow.InsideMemo3 = sourceRow.InsideMemo3; // 社内メモ３
            targetRow.BfListPrice = sourceRow.BfListPrice; // 変更前定価
            targetRow.BfSalesUnitPrice = sourceRow.BfSalesUnitPrice; // 変更前売価
            targetRow.BfUnitCost = sourceRow.BfUnitCost; // 変更前原価
            targetRow.CmpltSalesRowNo = sourceRow.CmpltSalesRowNo; // 一式明細番号
            targetRow.CmpltGoodsMakerCd = sourceRow.CmpltGoodsMakerCd; // メーカーコード（一式）
            targetRow.CmpltMakerName = sourceRow.CmpltMakerName; // メーカー名称（一式）
            targetRow.CmpltMakerKanaName = sourceRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            targetRow.CmpltGoodsName = sourceRow.CmpltGoodsName; // 商品名称（一式）
            targetRow.CmpltShipmentCnt = sourceRow.CmpltShipmentCnt; // 数量（一式）
            targetRow.CmpltSalesUnPrcFl = sourceRow.CmpltSalesUnPrcFl; // 売上単価（一式）
            targetRow.CmpltSalesMoney = sourceRow.CmpltSalesMoney; // 売上金額（一式）
            targetRow.CmpltSalesUnitCost = sourceRow.CmpltSalesUnitCost; // 原価単価（一式）
            targetRow.CmpltCost = sourceRow.CmpltCost; // 原価金額（一式）
            targetRow.CmpltPartySalSlNum = sourceRow.CmpltPartySalSlNum; // 相手先伝票番号（一式）
            targetRow.CmpltNote = sourceRow.CmpltNote; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            targetRow.SelectedGoodsNoDiv = sourceRow.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            targetRow.PrtGoodsNo = sourceRow.PrtGoodsNo; // 印刷用品番
            targetRow.PrtMakerCode = sourceRow.PrtMakerCode; // 印刷用メーカーコード
            targetRow.PrtMakerName = sourceRow.PrtMakerName; // 印刷用メーカー名称
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid; // 共通キー
            targetRow.CarRelationGuid = sourceRow.CarRelationGuid; // 車両情報共通キー
            //targetRow.SalesRowNoDisplay = sourceRow.SalesRowNoDisplay; // 行番号（表示用）
            targetRow.SupplierStock = sourceRow.SupplierStock; // 現在庫数
            targetRow.SupplierStockDisplay = sourceRow.SupplierStockDisplay; // 現在庫数（表示用）
            targetRow.OpenPriceDivDisplay = sourceRow.OpenPriceDivDisplay; // オープン価格区分（表示用）
            targetRow.ListPriceDisplay = sourceRow.ListPriceDisplay; // 定価（表示用）
            targetRow.SalesUnPrcDisplay = sourceRow.SalesUnPrcDisplay; // 売上単価（表示用）
            targetRow.SalesUnitCostTaxExc = sourceRow.SalesUnitCostTaxExc; // 原価単価（税抜）
            targetRow.SalesUnitCostTaxInc = sourceRow.SalesUnitCostTaxInc; // 原価単価（税込）
            targetRow.ShipmentCntDisplay = sourceRow.ShipmentCntDisplay; // 出荷数（表示用）
            targetRow.AddUpEnableCnt = sourceRow.AddUpEnableCnt; // 計上可能数
            targetRow.AlreadyAddUpCnt = sourceRow.AlreadyAddUpCnt; // 計上済数
            targetRow.ShipmentCntDefault = sourceRow.ShipmentCntDefault; // 出荷数（初期値）
            targetRow.SalesMoneyDisplay = sourceRow.SalesMoneyDisplay; // 売上金額（表示用）
            targetRow.CostTaxInc = sourceRow.CostTaxInc; // 原価金額（税込）
            targetRow.CostTaxExc = sourceRow.CostTaxExc; // 原価金額（税抜）
            targetRow.AcceptAnOrderCntDisplay = sourceRow.AcceptAnOrderCntDisplay; // 受注数（表示用）
            targetRow.AcceptAnOrderCntDefault = sourceRow.AcceptAnOrderCntDefault; // 受注数（初期値）
            targetRow.TaxDiv = sourceRow.TaxDiv; // 課税区分（UI用）
            targetRow.CanTaxDivChange = sourceRow.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            targetRow.RowStatus = sourceRow.RowStatus; // 行ステータス
            targetRow.EditStatus = sourceRow.EditStatus; // エディットステータス
            targetRow.SlipMemoExist = sourceRow.SlipMemoExist; // メモ存在フラグ
            targetRow.SupplierSlipExist = sourceRow.SupplierSlipExist; // 仕入情報存在フラグ
            targetRow.DetailGrossProfitRate = sourceRow.DetailGrossProfitRate; // 明細粗利率
            targetRow.CostUpRate = sourceRow.CostUpRate; // 原価アップ率
            targetRow.GrossProfitSecureRate = sourceRow.GrossProfitSecureRate; // 粗利確保率
            targetRow.SupplierCdForStock = sourceRow.SupplierCdForStock; // 仕入先コード
            targetRow.StockDate = sourceRow.StockDate; // 仕入日
            targetRow.PartySalesSlipNum = sourceRow.PartySalesSlipNum; // 仕入伝票番号
            targetRow.BoCode = sourceRow.BoCode; // BO区分
            targetRow.SupplierCdForOrder = sourceRow.SupplierCdForOrder; // 発注先
            targetRow.AcceptAnOrderCntForOrder = sourceRow.AcceptAnOrderCntForOrder; // 発注数
            targetRow.SupplierSnmForOrder = sourceRow.SupplierSnmForOrder; // 発注先名称
            targetRow.UOEDeliGoodsDiv = sourceRow.UOEDeliGoodsDiv; // 納品区分
            targetRow.DeliveredGoodsDivNm = sourceRow.DeliveredGoodsDivNm; // 納品区分名称
            targetRow.DeliveredGoodsDivNmSave = sourceRow.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            targetRow.FollowDeliGoodsDiv = sourceRow.FollowDeliGoodsDiv; // H納品区分
            targetRow.FollowDeliGoodsDivNm = sourceRow.FollowDeliGoodsDivNm; // H納品区分名称
            targetRow.FollowDeliGoodsDivNmSave = sourceRow.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            targetRow.UOEResvdSection = sourceRow.UOEResvdSection; // 指定拠点
            targetRow.UOEResvdSectionNm = sourceRow.UOEResvdSectionNm; // 指定拠点名称
            targetRow.UOEResvdSectionNmSave = sourceRow.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            targetRow.PriceStartDate = sourceRow.PriceStartDate; // 新定価適用日
            targetRow.Dummy = sourceRow.Dummy; // ダミー（空欄表示用）
            targetRow.SearchPartsModeState = sourceRow.SearchPartsModeState; // 部品検索状態
            targetRow.SalesMoneyInputDiv = sourceRow.SalesMoneyInputDiv; // 売上金額手入力区分
            targetRow.SalesUnPrcTaxExcFlDefault = sourceRow.SalesUnPrcTaxExcFlDefault; // 売上単価（税込，浮動）初期値
            targetRow.SalesUnPrcTaxIncFlDefault = sourceRow.SalesUnPrcTaxIncFlDefault; // 売上単価（税抜，浮動）初期値
            targetRow.SalesUnitCostTaxExcDefault = sourceRow.SalesUnitCostTaxExcDefault; // 原価単価（税抜）初期値
            targetRow.SalesUnitCostTaxIncDefault = sourceRow.SalesUnitCostTaxIncDefault; // 原価単価（税込）初期値
            //>>>2010/02/26
            targetRow.CampaignCode = sourceRow.CampaignCode; // キャンペーンコード
            targetRow.CampaignName = sourceRow.CampaignName; // キャンペーン名称
            targetRow.GoodsDivCd = sourceRow.GoodsDivCd; // 商品種別
            //targetRow.AnswerDelivDate = sourceRow.AnswerDelivDate; // 回答納期
            targetRow.RecycleDiv = sourceRow.RecycleDiv; // リサイクル区分
            targetRow.RecycleDivNm = sourceRow.RecycleDivNm; // リサイクル区分名称
            targetRow.RecycleDivNmSave = sourceRow.RecycleDivNmSave; // リサイクル区分名称
            targetRow.WayToAcptOdr = sourceRow.WayToAcptOdr; // 受注方法
            targetRow.GoodsMngNo = sourceRow.GoodsMngNo; // 商品管理番号
            targetRow.InqRowNumber = sourceRow.InqRowNumber; // 問合せ行番号
            targetRow.InqRowNumDerivedNo = sourceRow.InqRowNumDerivedNo; // 問合せ行番号枝番
            //<<<2010/02/26
            // 2012/01/16 Add >>>
            targetRow.GoodsSpecialNote = sourceRow.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<
        }

        /// <summary>
        /// 受注明細行オブジェクトのコピーを行います。
        /// </summary>
        /// <param name="sourceRow">コピー元受注明細行オブジェクト</param>
        /// <param name="targetRow">コピー先受注明細行オブジェクト</param>
        private void CopyCompleteAcceptAnOrderRow(SalesInputDataSet.SalesDetailAcceptAnOrderRow sourceRow, SalesInputDataSet.SalesDetailAcceptAnOrderRow targetRow)
        {
            //targetRow.CreateDateTime = sourceRow.CreateDateTime; // 作成日時
            //targetRow.UpdateDateTime = sourceRow.UpdateDateTime; // 更新日時
            //targetRow.EnterpriseCode = sourceRow.EnterpriseCode; // 企業コード
            //targetRow.FileHeaderGuid = sourceRow.FileHeaderGuid; // GUID
            //targetRow.UpdEmployeeCode = sourceRow.UpdEmployeeCode; // 更新従業員コード
            //targetRow.UpdAssemblyId1 = sourceRow.UpdAssemblyId1; // 更新アセンブリID1
            //targetRow.UpdAssemblyId2 = sourceRow.UpdAssemblyId2; // 更新アセンブリID2
            //targetRow.LogicalDeleteCode = sourceRow.LogicalDeleteCode; // 論理削除区分
            targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo; // 受注番号
            targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus; // 受注ステータス
            targetRow.SalesSlipNum = sourceRow.SalesSlipNum; // 売上伝票番号
            targetRow.SalesRowNo = sourceRow.SalesRowNo; // 売上行番号
            targetRow.SalesRowDerivNo = sourceRow.SalesRowDerivNo; // 売上行番号枝番
            targetRow.SectionCode = sourceRow.SectionCode; // 拠点コード
            targetRow.SubSectionCode = sourceRow.SubSectionCode; // 部門コード
            targetRow.SalesDate = sourceRow.SalesDate; // 売上日付
            targetRow.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            targetRow.SalesSlipDtlNum = sourceRow.SalesSlipDtlNum; // 売上明細通番
            targetRow.AcptAnOdrStatusSrc = sourceRow.AcptAnOdrStatusSrc; // 受注ステータス（元）
            targetRow.SalesSlipDtlNumSrc = sourceRow.SalesSlipDtlNumSrc; // 売上明細通番（元）
            targetRow.SupplierFormalSync = sourceRow.SupplierFormalSync; // 仕入形式（同時）
            targetRow.StockSlipDtlNumSync = sourceRow.StockSlipDtlNumSync; // 仕入明細通番（同時）
            targetRow.SalesSlipCdDtl = sourceRow.SalesSlipCdDtl; // 売上伝票区分（明細）
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate; // 納品完了予定日
            targetRow.GoodsKindCode = sourceRow.GoodsKindCode; // 商品属性
            targetRow.GoodsSearchDivCd = sourceRow.GoodsSearchDivCd; // 商品検索区分
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd; // 商品メーカーコード
            targetRow.MakerName = sourceRow.MakerName; // メーカー名称
            targetRow.MakerKanaName = sourceRow.MakerKanaName; // メーカーカナ名称
            targetRow.GoodsNo = sourceRow.GoodsNo; // 商品番号
            targetRow.GoodsName = sourceRow.GoodsName; // 商品名称
            targetRow.GoodsNameKana = sourceRow.GoodsNameKana; // 商品名称カナ
            targetRow.GoodsLGroup = sourceRow.GoodsLGroup; // 商品大分類コード
            targetRow.GoodsLGroupName = sourceRow.GoodsLGroupName; // 商品大分類名称
            targetRow.GoodsMGroup = sourceRow.GoodsMGroup; // 商品中分類コード
            targetRow.GoodsMGroupName = sourceRow.GoodsMGroupName; // 商品中分類名称
            targetRow.BLGroupCode = sourceRow.BLGroupCode; // BLグループコード
            targetRow.BLGroupName = sourceRow.BLGroupName; // BLグループコード名称
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode; // BL商品コード
            targetRow.BLGoodsFullName = sourceRow.BLGoodsFullName; // BL商品コード名称（全角）
            targetRow.EnterpriseGanreCode = sourceRow.EnterpriseGanreCode; // 自社分類コード
            targetRow.EnterpriseGanreName = sourceRow.EnterpriseGanreName; // 自社分類名称
            targetRow.WarehouseCode = sourceRow.WarehouseCode; // 倉庫コード
            targetRow.WarehouseName = sourceRow.WarehouseName; // 倉庫名称
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo; // 倉庫棚番
            targetRow.SalesOrderDivCd = sourceRow.SalesOrderDivCd; // 売上在庫取寄せ区分
            targetRow.OpenPriceDiv = sourceRow.OpenPriceDiv; // オープン価格区分
            targetRow.GoodsRateRank = sourceRow.GoodsRateRank; // 商品掛率ランク
            targetRow.CustRateGrpCode = sourceRow.CustRateGrpCode; // 得意先掛率グループコード
            targetRow.ListPriceRate = sourceRow.ListPriceRate; // 定価率
            targetRow.RateSectPriceUnPrc = sourceRow.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            targetRow.RateDivLPrice = sourceRow.RateDivLPrice; // 掛率設定区分（定価）
            targetRow.UnPrcCalcCdLPrice = sourceRow.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            targetRow.PriceCdLPrice = sourceRow.PriceCdLPrice; // 価格区分（定価）
            targetRow.StdUnPrcLPrice = sourceRow.StdUnPrcLPrice; // 基準単価（定価）
            targetRow.FracProcUnitLPrice = sourceRow.FracProcUnitLPrice; // 端数処理単位（定価）
            targetRow.FracProcLPrice = sourceRow.FracProcLPrice; // 端数処理（定価）
            targetRow.ListPriceTaxIncFl = sourceRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            targetRow.ListPriceTaxExcFl = sourceRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            targetRow.ListPriceChngCd = sourceRow.ListPriceChngCd; // 定価変更区分
            targetRow.SalesRate = sourceRow.SalesRate; // 売価率
            targetRow.RateSectSalUnPrc = sourceRow.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            targetRow.RateDivSalUnPrc = sourceRow.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            targetRow.UnPrcCalcCdSalUnPrc = sourceRow.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            targetRow.PriceCdSalUnPrc = sourceRow.PriceCdSalUnPrc; // 価格区分（売上単価）
            targetRow.StdUnPrcSalUnPrc = sourceRow.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            targetRow.FracProcUnitSalUnPrc = sourceRow.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            targetRow.FracProcSalUnPrc = sourceRow.FracProcSalUnPrc; // 端数処理（売上単価）
            targetRow.SalesUnPrcTaxIncFl = sourceRow.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            targetRow.SalesUnPrcTaxExcFl = sourceRow.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            targetRow.SalesUnPrcChngCd = sourceRow.SalesUnPrcChngCd; // 売上単価変更区分
            targetRow.CostRate = sourceRow.CostRate; // 原価率
            targetRow.RateSectCstUnPrc = sourceRow.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            targetRow.RateDivUnCst = sourceRow.RateDivUnCst; // 掛率設定区分（原価単価）
            targetRow.UnPrcCalcCdUnCst = sourceRow.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            targetRow.PriceCdUnCst = sourceRow.PriceCdUnCst; // 価格区分（原価単価）
            targetRow.StdUnPrcUnCst = sourceRow.StdUnPrcUnCst; // 基準単価（原価単価）
            targetRow.FracProcUnitUnCst = sourceRow.FracProcUnitUnCst; // 端数処理単位（原価単価）
            targetRow.FracProcUnCst = sourceRow.FracProcUnCst; // 端数処理（原価単価）
            targetRow.SalesUnitCost = sourceRow.SalesUnitCost; // 原価単価
            targetRow.SalesUnitCostChngDiv = sourceRow.SalesUnitCostChngDiv; // 原価単価変更区分
            targetRow.RateBLGoodsCode = sourceRow.RateBLGoodsCode; // BL商品コード（掛率）
            targetRow.RateBLGoodsName = sourceRow.RateBLGoodsName; // BL商品コード名称（掛率）
            targetRow.RateGoodsRateGrpCd = sourceRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            targetRow.RateGoodsRateGrpNm = sourceRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            targetRow.RateBLGroupCode = sourceRow.RateBLGroupCode; // BLグループコード（掛率）
            targetRow.RateBLGroupName = sourceRow.RateBLGroupName; // BLグループ名称（掛率）
            targetRow.PrtBLGoodsCode = sourceRow.PrtBLGoodsCode; // BL商品コード（印刷）
            targetRow.PrtBLGoodsName = sourceRow.PrtBLGoodsName; // BL商品コード名称（印刷）
            targetRow.SalesCode = sourceRow.SalesCode; // 販売区分コード
            targetRow.SalesCdNm = sourceRow.SalesCdNm; // 販売区分名称
            targetRow.WorkManHour = sourceRow.WorkManHour; // 作業工数
            targetRow.ShipmentCnt = sourceRow.ShipmentCnt; // 出荷数
            targetRow.AcceptAnOrderCnt = sourceRow.AcceptAnOrderCnt; // 受注数量
            targetRow.AcptAnOdrAdjustCnt = sourceRow.AcptAnOdrAdjustCnt; // 受注調整数
            targetRow.AcptAnOdrRemainCnt = sourceRow.AcptAnOdrRemainCnt; // 受注残数
            targetRow.RemainCntUpdDate = sourceRow.RemainCntUpdDate; // 残数更新日
            targetRow.SalesMoneyTaxInc = sourceRow.SalesMoneyTaxInc; // 売上金額（税込み）
            targetRow.SalesMoneyTaxExc = sourceRow.SalesMoneyTaxExc; // 売上金額（税抜き）
            targetRow.Cost = sourceRow.Cost; // 原価
            targetRow.GrsProfitChkDiv = sourceRow.GrsProfitChkDiv; // 粗利チェック区分
            targetRow.SalesGoodsCd = sourceRow.SalesGoodsCd; // 売上商品区分
            targetRow.SalesPriceConsTax = sourceRow.SalesPriceConsTax; // 売上金額消費税額
            targetRow.TaxationDivCd = sourceRow.TaxationDivCd; // 課税区分
            targetRow.PartySlipNumDtl = sourceRow.PartySlipNumDtl; // 相手先伝票番号（明細）
            targetRow.DtlNote = sourceRow.DtlNote; // 明細備考
            targetRow.SupplierCd = sourceRow.SupplierCd; // 仕入先コード
            targetRow.SupplierSnm = sourceRow.SupplierSnm; // 仕入先略称
            targetRow.OrderNumber = sourceRow.OrderNumber; // 発注番号
            targetRow.WayToOrder = sourceRow.WayToOrder; // 注文方法
            targetRow.SlipMemo1 = sourceRow.SlipMemo1; // 伝票メモ１
            targetRow.SlipMemo2 = sourceRow.SlipMemo2; // 伝票メモ２
            targetRow.SlipMemo3 = sourceRow.SlipMemo3; // 伝票メモ３
            targetRow.InsideMemo1 = sourceRow.InsideMemo1; // 社内メモ１
            targetRow.InsideMemo2 = sourceRow.InsideMemo2; // 社内メモ２
            targetRow.InsideMemo3 = sourceRow.InsideMemo3; // 社内メモ３
            targetRow.BfListPrice = sourceRow.BfListPrice; // 変更前定価
            targetRow.BfSalesUnitPrice = sourceRow.BfSalesUnitPrice; // 変更前売価
            targetRow.BfUnitCost = sourceRow.BfUnitCost; // 変更前原価
            targetRow.CmpltSalesRowNo = sourceRow.CmpltSalesRowNo; // 一式明細番号
            targetRow.CmpltGoodsMakerCd = sourceRow.CmpltGoodsMakerCd; // メーカーコード（一式）
            targetRow.CmpltMakerName = sourceRow.CmpltMakerName; // メーカー名称（一式）
            targetRow.CmpltMakerKanaName = sourceRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            targetRow.CmpltGoodsName = sourceRow.CmpltGoodsName; // 商品名称（一式）
            targetRow.CmpltShipmentCnt = sourceRow.CmpltShipmentCnt; // 数量（一式）
            targetRow.CmpltSalesUnPrcFl = sourceRow.CmpltSalesUnPrcFl; // 売上単価（一式）
            targetRow.CmpltSalesMoney = sourceRow.CmpltSalesMoney; // 売上金額（一式）
            targetRow.CmpltSalesUnitCost = sourceRow.CmpltSalesUnitCost; // 原価単価（一式）
            targetRow.CmpltCost = sourceRow.CmpltCost; // 原価金額（一式）
            targetRow.CmpltPartySalSlNum = sourceRow.CmpltPartySalSlNum; // 相手先伝票番号（一式）
            targetRow.CmpltNote = sourceRow.CmpltNote; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            targetRow.SelectedGoodsNoDiv = sourceRow.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            targetRow.PrtGoodsNo = sourceRow.PrtGoodsNo; // 印刷用品番
            targetRow.PrtMakerCode = sourceRow.PrtMakerCode; // 印刷用メーカーコード
            targetRow.PrtMakerName = sourceRow.PrtMakerName; // 印刷用メーカー名称
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid; // 共通キー
            targetRow.CarRelationGuid = sourceRow.CarRelationGuid; // 車両情報共通キー
            targetRow.SalesRowNoDisplay = sourceRow.SalesRowNoDisplay; // 行番号（表示用）
            targetRow.SupplierStock = sourceRow.SupplierStock; // 現在庫数
            targetRow.SupplierStockDisplay = sourceRow.SupplierStockDisplay; // 現在庫数（表示用）
            targetRow.OpenPriceDivDisplay = sourceRow.OpenPriceDivDisplay; // オープン価格区分（表示用）
            targetRow.ListPriceDisplay = sourceRow.ListPriceDisplay; // 定価（表示用）
            targetRow.SalesUnPrcDisplay = sourceRow.SalesUnPrcDisplay; // 売上単価（表示用）
            targetRow.SalesUnitCostTaxExc = sourceRow.SalesUnitCostTaxExc; // 原価単価（税抜）
            targetRow.SalesUnitCostTaxInc = sourceRow.SalesUnitCostTaxInc; // 原価単価（税込）
            targetRow.ShipmentCntDisplay = sourceRow.ShipmentCntDisplay; // 出荷数（表示用）
            targetRow.AddUpEnableCnt = sourceRow.AddUpEnableCnt; // 計上可能数
            targetRow.AlreadyAddUpCnt = sourceRow.AlreadyAddUpCnt; // 計上済数
            targetRow.ShipmentCntDefault = sourceRow.ShipmentCntDefault; // 出荷数（初期値）
            targetRow.SalesMoneyDisplay = sourceRow.SalesMoneyDisplay; // 売上金額（表示用）
            targetRow.CostTaxInc = sourceRow.CostTaxInc; // 原価金額（税込）
            targetRow.CostTaxExc = sourceRow.CostTaxExc; // 原価金額（税抜）
            targetRow.AcceptAnOrderCntDisplay = sourceRow.AcceptAnOrderCntDisplay; // 受注数（表示用）
            targetRow.AcceptAnOrderCntDefault = sourceRow.AcceptAnOrderCntDefault; // 受注数（初期値）
            targetRow.TaxDiv = sourceRow.TaxDiv; // 課税区分（UI用）
            targetRow.CanTaxDivChange = sourceRow.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            targetRow.RowStatus = sourceRow.RowStatus; // 行ステータス
            targetRow.EditStatus = sourceRow.EditStatus; // エディットステータス
            targetRow.SlipMemoExist = sourceRow.SlipMemoExist; // メモ存在フラグ
            targetRow.SupplierSlipExist = sourceRow.SupplierSlipExist; // 仕入情報存在フラグ
            targetRow.DetailGrossProfitRate = sourceRow.DetailGrossProfitRate; // 明細粗利率
            targetRow.CostUpRate = sourceRow.CostUpRate; // 原価アップ率
            targetRow.GrossProfitSecureRate = sourceRow.GrossProfitSecureRate; // 粗利確保率
            targetRow.SupplierCdForStock = sourceRow.SupplierCdForStock; // 仕入先コード
            targetRow.StockDate = sourceRow.StockDate; // 仕入日
            targetRow.PartySalesSlipNum = sourceRow.PartySalesSlipNum; // 仕入伝票番号
            targetRow.BoCode = sourceRow.BoCode; // BO区分
            targetRow.SupplierCdForOrder = sourceRow.SupplierCdForOrder; // 発注先
            targetRow.AcceptAnOrderCntForOrder = sourceRow.AcceptAnOrderCntForOrder; // 発注数
            targetRow.SupplierSnmForOrder = sourceRow.SupplierSnmForOrder; // 発注先名称
            targetRow.UOEDeliGoodsDiv = sourceRow.UOEDeliGoodsDiv; // 納品区分
            targetRow.DeliveredGoodsDivNm = sourceRow.DeliveredGoodsDivNm; // 納品区分名称
            targetRow.DeliveredGoodsDivNmSave = sourceRow.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            targetRow.FollowDeliGoodsDiv = sourceRow.FollowDeliGoodsDiv; // H納品区分
            targetRow.FollowDeliGoodsDivNm = sourceRow.FollowDeliGoodsDivNm; // H納品区分名称
            targetRow.FollowDeliGoodsDivNmSave = sourceRow.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            targetRow.UOEResvdSection = sourceRow.UOEResvdSection; // 指定拠点
            targetRow.UOEResvdSectionNm = sourceRow.UOEResvdSectionNm; // 指定拠点名称
            targetRow.UOEResvdSectionNmSave = sourceRow.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            targetRow.PriceStartDate = sourceRow.PriceStartDate; // 新定価適用日
            targetRow.Dummy = sourceRow.Dummy; // ダミー（空欄表示用）
            targetRow.SearchPartsModeState = sourceRow.SearchPartsModeState; // 部品検索状態
            targetRow.SalesMoneyInputDiv = sourceRow.SalesMoneyInputDiv; // 売上金額手入力区分
            targetRow.SalesUnPrcTaxIncFlDefault = sourceRow.SalesUnPrcTaxIncFlDefault; // 売上単価（税込，浮動）
            targetRow.SalesUnPrcTaxExcFlDefault = sourceRow.SalesUnPrcTaxExcFlDefault; // 売上単価（税抜，浮動）
            targetRow.SalesUnitCostTaxExcDefault = sourceRow.SalesUnitCostTaxExcDefault; // 原価単価（税抜）
            targetRow.SalesUnitCostTaxIncDefault = sourceRow.SalesUnitCostTaxIncDefault; // 原価単価（税込）
            //targetRow.ShipmentCntDefForChk = sourceRow.ShipmentCntDefForChk; // 出荷数初期値（変更チェック用）
            //targetRow.AcceptAnOrderCntDefForChk = sourceRow.AcceptAnOrderCntDefForChk; // 受注数初期値（変更チェック用）
            //>>>2010/02/26
            targetRow.CampaignCode = sourceRow.CampaignCode; // キャンペーンコード
            targetRow.CampaignName = sourceRow.CampaignName; // キャンペーン名称
            targetRow.GoodsDivCd = sourceRow.GoodsDivCd; // 商品種別
            //targetRow.AnswerDelivDate = sourceRow.AnswerDelivDate; // 回答納期
            targetRow.RecycleDiv = sourceRow.RecycleDiv; // リサイクル区分
            targetRow.RecycleDivNm = sourceRow.RecycleDivNm; // リサイクル区分名称
            targetRow.RecycleDivNmSave = sourceRow.RecycleDivNmSave; // リサイクル区分名称
            targetRow.WayToAcptOdr = sourceRow.WayToAcptOdr; // 受注方法
            targetRow.GoodsMngNo = sourceRow.GoodsMngNo; // 商品管理番号
            targetRow.InqRowNumber = sourceRow.InqRowNumber; // 問合せ行番号
            targetRow.InqRowNumDerivedNo = sourceRow.InqRowNumDerivedNo; // 問合せ行番号枝番
            //<<<2010/02/26
            // 2012/01/16 Add >>>
            targetRow.GoodsSpecialNote = sourceRow.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<
        }

        /// <summary>
        /// 受注明細テーブルオブジェクトの商品価格の再設定を行います。
        /// </summary>
        /// <param name="goodsUnitDataListList"></param>
        public void AcptAnOdrDetailRowGoodsPriceReSetting(List<List<GoodsUnitData>> goodsUnitDataListList)
        {
            //this.AcptAnOdrDetailRowGoodsPriceReSetting(this._salesDetailAcceptAnOrderDataTable);

            List<GoodsUnitData> goodsUnitDataList = new List<GoodsUnitData>();
            this.GetGoodsUnitDataListFromListList(goodsUnitDataListList, out goodsUnitDataList);
            this.AcptAnOdrDetailRowGoodsPriceReSetting(goodsUnitDataList);
        }

        /// <summary>
        /// 受注明細テーブルオブジェクトの商品価格の再設定を行います。
        /// </summary>
        /// <param name="goodsUnitDataList">商品連結データリスト</param>
        public void AcptAnOdrDetailRowGoodsPriceReSetting(List<GoodsUnitData> goodsUnitDataList)
        {
            // 税率再セット
            // --- UPD 2014/04/02 Y.Wakita ---------->>>>>
            //this._salesSlip.ConsTaxRate = _salesSlipInputInitDataAcs.TaxRate;
            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
            if (this._salesSlip.ConsTaxLayMethod == 0 && this._salesSlipInputInitDataAcs.RentSyncSupFlg)
            {
                this._salesSlip.ConsTaxRate = this._salesSlipInputInitDataAcs.GetTaxRateMst(this._salesSlip.SalesDate); // 税率
                this._salesSlipInputInitDataAcs.TaxRate = this._salesSlip.ConsTaxRate;
                this._salesSlipInputInitDataAcs.TaxRateDiv = 2;
            }
            else
            {
                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                this._salesSlip.ConsTaxRate = this._salesSlipInputInitDataAcs.GetTaxRate(this._salesSlip.SalesDate); // 税率
            }// ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応
            
            // --- UPD 2014/04/02 Y.Wakita ----------<<<<<

            List<UnitPriceCalcRet> allUnitPriceCalcRetList = this.CalclationUnitPriceForAcptAnOdr();
            List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>();

            for (int i = 0; i < this._salesDetailAcceptAnOrderDataTable.Rows.Count; i++)
            {
                SalesInputDataSet.SalesDetailAcceptAnOrderRow row = this._salesDetailAcceptAnOrderDataTable[i];

                if (((row.EditStatus == ctEDITSTATUS_AllOK) || (row.EditStatus == ctEDITSTATUS_AddUpEdit) || (row.EditStatus == ctEDITSTATUS_AddUpNew)) &&
                    (!string.IsNullOrEmpty(row.GoodsNo)) || (!string.IsNullOrEmpty(row.GoodsName)))
                {
                    GoodsUnitData goodsUnitData = new GoodsUnitData();
                    //>>>2010/10/01
                    //goodsUnitData = this.GetGoodsUnitDataDic(row.GoodsMakerCd, row.GoodsNo);
                    //<<<2010/10/01
                    unitPriceCalcRetList = this.GetUnitPriceCalcRetList(allUnitPriceCalcRetList, row.GoodsNo, row.GoodsMakerCd, row.SupplierCd);
                    SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.NewSalesDetailRow();
                    this.CopySalesDetailFromAcceptAnOrder(row, salesDetailRow); // 受注→売上
                    goodsUnitData = this.GetGoodsUnitDataDic(row.GoodsMakerCd, row.GoodsNo, salesDetailRow); // 2010/10/01
                    this.SalesDetailRowGoodsPriceSetting(ref salesDetailRow, goodsUnitData, true, unitPriceCalcRetList);
                    this.CopyAcceptAnOrderFromSalesDetail(salesDetailRow, row); // 売上→受注
                }
            }
        }

        /// <summary>
        /// 受注データヘッダ情報の作成を行います。
        /// </summary>
        public void MakeSalesSlipAcptAnOdr()
        {
            this._salesSlipAcptAnOdr = this._salesSlip.Clone();

            if (this._salesSlipAcptAnOdr == null) return;
            if (this._salesDetailAcceptAnOrderDataTable.Count == 0) return;

            this._salesSlipAcptAnOdr.SalesDate = this._salesSlip.SalesDate;
            // ------------ADD START wangf 2012/02/27 FOR Redmine#28281--------->>>>
            // 受注データに売上データをクローンしました、フィルド「受注ステータス」値が「受注」を変わる
            this._salesSlipAcptAnOdr.AcptAnOdrStatusDisplay = (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder;
            // ------------ADD END wangf 2012/02/27 FOR Redmine#28281---------<<<<<

            if ((this._salesSlip.AcptAnOdrStatus != (int)AcptAnOdrStatusState.AcceptAnOrder) &&
                (this._salesSlip.SalesSlipNum != ctDefaultSalesSlipNum))
            {
                this._salesSlipAcptAnOdr.SalesSlipNum = ctDefaultSalesSlipNum;
                this._salesSlipAcptAnOdr.UpdateDateTime = DateTime.MinValue;
            }
        }

        /// <summary>
        /// 売上データ→受注データへのコピーを行います。（共通項目のみ）
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesSlipAcptAnOdr"></param>
        public void CopyAcceptAnOrderFromSalesSlip(SalesSlip salesSlip, SalesSlip salesSlipAcptAnOdr)
        {
            salesSlipAcptAnOdr.CreateDateTime = salesSlip.CreateDateTime; // 作成日時
            salesSlipAcptAnOdr.UpdateDateTime = salesSlip.UpdateDateTime; // 更新日時
            salesSlipAcptAnOdr.EnterpriseCode = salesSlip.EnterpriseCode; // 企業コード
            salesSlipAcptAnOdr.FileHeaderGuid = salesSlip.FileHeaderGuid; // GUID
            salesSlipAcptAnOdr.UpdEmployeeCode = salesSlip.UpdEmployeeCode; // 更新従業員コード
            salesSlipAcptAnOdr.UpdAssemblyId1 = salesSlip.UpdAssemblyId1; // 更新アセンブリID1
            salesSlipAcptAnOdr.UpdAssemblyId2 = salesSlip.UpdAssemblyId2; // 更新アセンブリID2
            salesSlipAcptAnOdr.LogicalDeleteCode = salesSlip.LogicalDeleteCode; // 論理削除区分
            salesSlipAcptAnOdr.AcptAnOdrStatus = salesSlip.AcptAnOdrStatus; // 受注ステータス
            salesSlipAcptAnOdr.SalesSlipNum = salesSlip.SalesSlipNum; // 売上伝票番号
            salesSlipAcptAnOdr.SectionCode = salesSlip.SectionCode; // 拠点コード
            salesSlipAcptAnOdr.SubSectionCode = salesSlip.SubSectionCode; // 部門コード
            salesSlipAcptAnOdr.DebitNoteDiv = salesSlip.DebitNoteDiv; // 赤伝区分
            salesSlipAcptAnOdr.DebitNLnkSalesSlNum = salesSlip.DebitNLnkSalesSlNum; // 赤黒連結売上伝票番号
            salesSlipAcptAnOdr.SalesSlipCd = salesSlip.SalesSlipCd; // 売上伝票区分
            salesSlipAcptAnOdr.SalesGoodsCd = salesSlip.SalesGoodsCd; // 売上商品区分
            salesSlipAcptAnOdr.AccRecDivCd = salesSlip.AccRecDivCd; // 売掛区分
            salesSlipAcptAnOdr.SalesInpSecCd = salesSlip.SalesInpSecCd; // 売上入力拠点コード
            salesSlipAcptAnOdr.DemandAddUpSecCd = salesSlip.DemandAddUpSecCd; // 請求計上拠点コード
            salesSlipAcptAnOdr.ResultsAddUpSecCd = salesSlip.ResultsAddUpSecCd; // 実績計上拠点コード
            salesSlipAcptAnOdr.UpdateSecCd = salesSlip.UpdateSecCd; // 更新拠点コード
            salesSlipAcptAnOdr.SalesSlipUpdateCd = salesSlip.SalesSlipUpdateCd; // 売上伝票更新区分
            salesSlipAcptAnOdr.SearchSlipDate = salesSlip.SearchSlipDate; // 伝票検索日付
            salesSlipAcptAnOdr.ShipmentDay = salesSlip.ShipmentDay; // 出荷日付
            salesSlipAcptAnOdr.SalesDate = salesSlip.SalesDate; // 売上日付
            salesSlipAcptAnOdr.AddUpADate = salesSlip.AddUpADate; // 計上日付
            salesSlipAcptAnOdr.DelayPaymentDiv = salesSlip.DelayPaymentDiv; // 来勘区分
            salesSlipAcptAnOdr.EstimateFormNo = salesSlip.EstimateFormNo; // 見積書番号
            salesSlipAcptAnOdr.EstimateDivide = salesSlip.EstimateDivide; // 見積区分
            salesSlipAcptAnOdr.InputAgenCd = salesSlip.InputAgenCd; // 入力担当者コード
            salesSlipAcptAnOdr.InputAgenNm = salesSlip.InputAgenNm; // 入力担当者名称
            salesSlipAcptAnOdr.SalesInputCode = salesSlip.SalesInputCode; // 売上入力者コード
            salesSlipAcptAnOdr.SalesInputName = salesSlip.SalesInputName; // 売上入力者名称
            salesSlipAcptAnOdr.FrontEmployeeCd = salesSlip.FrontEmployeeCd; // 受付従業員コード
            salesSlipAcptAnOdr.FrontEmployeeNm = salesSlip.FrontEmployeeNm; // 受付従業員名称
            salesSlipAcptAnOdr.SalesEmployeeCd = salesSlip.SalesEmployeeCd; // 販売従業員コード
            salesSlipAcptAnOdr.SalesEmployeeNm = salesSlip.SalesEmployeeNm; // 販売従業員名称
            salesSlipAcptAnOdr.TotalAmountDispWayCd = salesSlip.TotalAmountDispWayCd; // 総額表示方法区分
            salesSlipAcptAnOdr.TtlAmntDispRateApy = salesSlip.TtlAmntDispRateApy; // 総額表示掛率適用区分
            salesSlipAcptAnOdr.SalesTotalTaxInc = salesSlip.SalesTotalTaxInc; // 売上伝票合計（税込み）
            salesSlipAcptAnOdr.SalesTotalTaxExc = salesSlip.SalesTotalTaxExc; // 売上伝票合計（税抜き）
            salesSlipAcptAnOdr.SalesPrtTotalTaxInc = salesSlip.SalesPrtTotalTaxInc; // 売上部品合計（税込み）
            salesSlipAcptAnOdr.SalesPrtTotalTaxExc = salesSlip.SalesPrtTotalTaxExc; // 売上部品合計（税抜き）
            salesSlipAcptAnOdr.SalesWorkTotalTaxInc = salesSlip.SalesWorkTotalTaxInc; // 売上作業合計（税込み）
            salesSlipAcptAnOdr.SalesWorkTotalTaxExc = salesSlip.SalesWorkTotalTaxExc; // 売上作業合計（税抜き）
            salesSlipAcptAnOdr.SalesSubtotalTaxInc = salesSlip.SalesSubtotalTaxInc; // 売上小計（税込み）
            salesSlipAcptAnOdr.SalesSubtotalTaxExc = salesSlip.SalesSubtotalTaxExc; // 売上小計（税抜き）
            salesSlipAcptAnOdr.SalesPrtSubttlInc = salesSlip.SalesPrtSubttlInc; // 売上部品小計（税込み）
            salesSlipAcptAnOdr.SalesPrtSubttlExc = salesSlip.SalesPrtSubttlExc; // 売上部品小計（税抜き）
            salesSlipAcptAnOdr.SalesWorkSubttlInc = salesSlip.SalesWorkSubttlInc; // 売上作業小計（税込み）
            salesSlipAcptAnOdr.SalesWorkSubttlExc = salesSlip.SalesWorkSubttlExc; // 売上作業小計（税抜き）
            salesSlipAcptAnOdr.SalesNetPrice = salesSlip.SalesNetPrice; // 売上正価金額
            salesSlipAcptAnOdr.SalesSubtotalTax = salesSlip.SalesSubtotalTax; // 売上小計（税）
            salesSlipAcptAnOdr.ItdedSalesOutTax = salesSlip.ItdedSalesOutTax; // 売上外税対象額
            salesSlipAcptAnOdr.ItdedSalesInTax = salesSlip.ItdedSalesInTax; // 売上内税対象額
            salesSlipAcptAnOdr.SalSubttlSubToTaxFre = salesSlip.SalSubttlSubToTaxFre; // 売上小計非課税対象額
            salesSlipAcptAnOdr.SalesOutTax = salesSlip.SalesOutTax; // 売上金額消費税額（外税）
            salesSlipAcptAnOdr.SalAmntConsTaxInclu = salesSlip.SalAmntConsTaxInclu; // 売上金額消費税額（内税）
            salesSlipAcptAnOdr.SalesDisTtlTaxExc = salesSlip.SalesDisTtlTaxExc; // 売上値引金額計（税抜き）
            salesSlipAcptAnOdr.ItdedSalesDisOutTax = salesSlip.ItdedSalesDisOutTax; // 売上値引外税対象額合計
            salesSlipAcptAnOdr.ItdedSalesDisInTax = salesSlip.ItdedSalesDisInTax; // 売上値引内税対象額合計
            salesSlipAcptAnOdr.ItdedPartsDisOutTax = salesSlip.ItdedPartsDisOutTax; // 部品値引対象額合計（税抜き）
            salesSlipAcptAnOdr.ItdedPartsDisInTax = salesSlip.ItdedPartsDisInTax; // 部品値引対象額合計（税込み）
            salesSlipAcptAnOdr.ItdedWorkDisOutTax = salesSlip.ItdedWorkDisOutTax; // 作業値引対象額合計（税抜き）
            salesSlipAcptAnOdr.ItdedWorkDisInTax = salesSlip.ItdedWorkDisInTax; // 作業値引対象額合計（税込み）
            salesSlipAcptAnOdr.ItdedSalesDisTaxFre = salesSlip.ItdedSalesDisTaxFre; // 売上値引非課税対象額合計
            salesSlipAcptAnOdr.SalesDisOutTax = salesSlip.SalesDisOutTax; // 売上値引消費税額（外税）
            salesSlipAcptAnOdr.SalesDisTtlTaxInclu = salesSlip.SalesDisTtlTaxInclu; // 売上値引消費税額（内税）
            salesSlipAcptAnOdr.PartsDiscountRate = salesSlip.PartsDiscountRate; // 部品値引率
            salesSlipAcptAnOdr.RavorDiscountRate = salesSlip.RavorDiscountRate; // 工賃値引率
            salesSlipAcptAnOdr.TotalCost = salesSlip.TotalCost; // 原価金額計
            salesSlipAcptAnOdr.ConsTaxLayMethod = salesSlip.ConsTaxLayMethod; // 消費税転嫁方式
            salesSlipAcptAnOdr.ConsTaxRate = salesSlip.ConsTaxRate; // 消費税税率
            salesSlipAcptAnOdr.FractionProcCd = salesSlip.FractionProcCd; // 端数処理区分
            salesSlipAcptAnOdr.AccRecConsTax = salesSlip.AccRecConsTax; // 売掛消費税
            salesSlipAcptAnOdr.AutoDepositCd = salesSlip.AutoDepositCd; // 自動入金区分
            salesSlipAcptAnOdr.AutoDepositSlipNo = salesSlip.AutoDepositSlipNo; // 自動入金伝票番号
            salesSlipAcptAnOdr.DepositAllowanceTtl = salesSlip.DepositAllowanceTtl; // 入金引当合計額
            salesSlipAcptAnOdr.DepositAlwcBlnce = salesSlip.DepositAlwcBlnce; // 入金引当残高
            salesSlipAcptAnOdr.ClaimCode = salesSlip.ClaimCode; // 請求先コード
            salesSlipAcptAnOdr.ClaimSnm = salesSlip.ClaimSnm; // 請求先略称
            salesSlipAcptAnOdr.CustomerCode = salesSlip.CustomerCode; // 得意先コード
            salesSlipAcptAnOdr.CustomerName = salesSlip.CustomerName; // 得意先名称
            salesSlipAcptAnOdr.CustomerName2 = salesSlip.CustomerName2; // 得意先名称2
            salesSlipAcptAnOdr.CustomerSnm = salesSlip.CustomerSnm; // 得意先略称
            salesSlipAcptAnOdr.HonorificTitle = salesSlip.HonorificTitle; // 敬称
            salesSlipAcptAnOdr.OutputNameCode = salesSlip.OutputNameCode; // 諸口コード
            salesSlipAcptAnOdr.OutputName = salesSlip.OutputName; // 諸口名称
            salesSlipAcptAnOdr.CustSlipNo = salesSlip.CustSlipNo; // 得意先伝票番号
            salesSlipAcptAnOdr.SlipAddressDiv = salesSlip.SlipAddressDiv; // 伝票住所区分
            salesSlipAcptAnOdr.AddresseeCode = salesSlip.AddresseeCode; // 納品先コード
            salesSlipAcptAnOdr.AddresseeName = salesSlip.AddresseeName; // 納品先名称
            salesSlipAcptAnOdr.AddresseeName2 = salesSlip.AddresseeName2; // 納品先名称2
            salesSlipAcptAnOdr.AddresseePostNo = salesSlip.AddresseePostNo; // 納品先郵便番号
            salesSlipAcptAnOdr.AddresseeAddr1 = salesSlip.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
            salesSlipAcptAnOdr.AddresseeAddr3 = salesSlip.AddresseeAddr3; // 納品先住所3(番地)
            salesSlipAcptAnOdr.AddresseeAddr4 = salesSlip.AddresseeAddr4; // 納品先住所4(アパート名称)
            salesSlipAcptAnOdr.AddresseeTelNo = salesSlip.AddresseeTelNo; // 納品先電話番号
            salesSlipAcptAnOdr.AddresseeFaxNo = salesSlip.AddresseeFaxNo; // 納品先FAX番号
            salesSlipAcptAnOdr.PartySaleSlipNum = salesSlip.PartySaleSlipNum; // 相手先伝票番号
            salesSlipAcptAnOdr.SlipNote = salesSlip.SlipNote; // 伝票備考
            salesSlipAcptAnOdr.SlipNote2 = salesSlip.SlipNote2; // 伝票備考２
            salesSlipAcptAnOdr.SlipNote3 = salesSlip.SlipNote3; // 伝票備考３
            salesSlipAcptAnOdr.RetGoodsReasonDiv = salesSlip.RetGoodsReasonDiv; // 返品理由コード
            salesSlipAcptAnOdr.RetGoodsReason = salesSlip.RetGoodsReason; // 返品理由
            salesSlipAcptAnOdr.RegiProcDate = salesSlip.RegiProcDate; // レジ処理日
            salesSlipAcptAnOdr.CashRegisterNo = salesSlip.CashRegisterNo; // レジ番号
            salesSlipAcptAnOdr.PosReceiptNo = salesSlip.PosReceiptNo; // POSレシート番号
            salesSlipAcptAnOdr.DetailRowCount = salesSlip.DetailRowCount; // 明細行数
            salesSlipAcptAnOdr.EdiSendDate = salesSlip.EdiSendDate; // ＥＤＩ送信日
            salesSlipAcptAnOdr.EdiTakeInDate = salesSlip.EdiTakeInDate; // ＥＤＩ取込日
            salesSlipAcptAnOdr.UoeRemark1 = salesSlip.UoeRemark1; // ＵＯＥリマーク１
            salesSlipAcptAnOdr.UoeRemark2 = salesSlip.UoeRemark2; // ＵＯＥリマーク２
            salesSlipAcptAnOdr.SlipPrintDivCd = salesSlip.SlipPrintDivCd; // 伝票発行区分
            salesSlipAcptAnOdr.SlipPrintFinishCd = salesSlip.SlipPrintFinishCd; // 伝票発行済区分
            salesSlipAcptAnOdr.SalesSlipPrintDate = salesSlip.SalesSlipPrintDate; // 売上伝票発行日
            salesSlipAcptAnOdr.BusinessTypeCode = salesSlip.BusinessTypeCode; // 業種コード
            salesSlipAcptAnOdr.BusinessTypeName = salesSlip.BusinessTypeName; // 業種名称
            salesSlipAcptAnOdr.OrderNumber = salesSlip.OrderNumber; // 発注番号
            salesSlipAcptAnOdr.DeliveredGoodsDiv = salesSlip.DeliveredGoodsDiv; // 納品区分
            salesSlipAcptAnOdr.DeliveredGoodsDivNm = salesSlip.DeliveredGoodsDivNm; // 納品区分名称
            salesSlipAcptAnOdr.SalesAreaCode = salesSlip.SalesAreaCode; // 販売エリアコード
            salesSlipAcptAnOdr.SalesAreaName = salesSlip.SalesAreaName; // 販売エリア名称
            salesSlipAcptAnOdr.ReconcileFlag = salesSlip.ReconcileFlag; // 消込フラグ
            salesSlipAcptAnOdr.SlipPrtSetPaperId = salesSlip.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
            salesSlipAcptAnOdr.CompleteCd = salesSlip.CompleteCd; // 一式伝票区分
            salesSlipAcptAnOdr.SalesPriceFracProcCd = salesSlip.SalesPriceFracProcCd; // 売上金額端数処理区分
            salesSlipAcptAnOdr.StockGoodsTtlTaxExc = salesSlip.StockGoodsTtlTaxExc; // 在庫商品合計金額（税抜）
            salesSlipAcptAnOdr.PureGoodsTtlTaxExc = salesSlip.PureGoodsTtlTaxExc; // 純正商品合計金額（税抜）
            salesSlipAcptAnOdr.ListPricePrintDiv = salesSlip.ListPricePrintDiv; // 定価印刷区分
            salesSlipAcptAnOdr.EraNameDispCd1 = salesSlip.EraNameDispCd1; // 元号表示区分１
            salesSlipAcptAnOdr.EstimaTaxDivCd = salesSlip.EstimaTaxDivCd; // 見積消費税区分
            salesSlipAcptAnOdr.EstimateFormPrtCd = salesSlip.EstimateFormPrtCd; // 見積書印刷区分
            salesSlipAcptAnOdr.EstimateSubject = salesSlip.EstimateSubject; // 見積件名
            salesSlipAcptAnOdr.Footnotes1 = salesSlip.Footnotes1; // 脚注１
            salesSlipAcptAnOdr.Footnotes2 = salesSlip.Footnotes2; // 脚注２
            salesSlipAcptAnOdr.EstimateTitle1 = salesSlip.EstimateTitle1; // 見積タイトル１
            salesSlipAcptAnOdr.EstimateTitle2 = salesSlip.EstimateTitle2; // 見積タイトル２
            salesSlipAcptAnOdr.EstimateTitle3 = salesSlip.EstimateTitle3; // 見積タイトル３
            salesSlipAcptAnOdr.EstimateTitle4 = salesSlip.EstimateTitle4; // 見積タイトル４
            salesSlipAcptAnOdr.EstimateTitle5 = salesSlip.EstimateTitle5; // 見積タイトル５
            salesSlipAcptAnOdr.EstimateNote1 = salesSlip.EstimateNote1; // 見積備考１
            salesSlipAcptAnOdr.EstimateNote2 = salesSlip.EstimateNote2; // 見積備考２
            salesSlipAcptAnOdr.EstimateNote3 = salesSlip.EstimateNote3; // 見積備考３
            salesSlipAcptAnOdr.EstimateNote4 = salesSlip.EstimateNote4; // 見積備考４
            salesSlipAcptAnOdr.EstimateNote5 = salesSlip.EstimateNote5; // 見積備考５
            salesSlipAcptAnOdr.EstimateValidityDate = salesSlip.EstimateValidityDate; // 見積有効期限
            salesSlipAcptAnOdr.PartsNoPrtCd = salesSlip.PartsNoPrtCd; // 品番印字区分
            salesSlipAcptAnOdr.OptionPringDivCd = salesSlip.OptionPringDivCd; // オプション印字区分
            salesSlipAcptAnOdr.RateUseCode = salesSlip.RateUseCode; // 掛率使用区分
            salesSlipAcptAnOdr.InputMode = salesSlip.InputMode; // 入力モード
            salesSlipAcptAnOdr.SalesSlipDisplay = salesSlip.SalesSlipDisplay; // 売上伝票区分(画面表示用)
            salesSlipAcptAnOdr.AcptAnOdrStatusDisplay = salesSlip.AcptAnOdrStatusDisplay; // 受注ステータス
            salesSlipAcptAnOdr.CustRateGrpCode = salesSlip.CustRateGrpCode; // 得意先掛率グループコード
            salesSlipAcptAnOdr.ClaimName = salesSlip.ClaimName; // 請求先名称
            salesSlipAcptAnOdr.ClaimName2 = salesSlip.ClaimName2; // 請求先名称２
            salesSlipAcptAnOdr.CreditMngCode = salesSlip.CreditMngCode; // 与信管理区分
            salesSlipAcptAnOdr.TotalDay = salesSlip.TotalDay; // 締日
            salesSlipAcptAnOdr.NTimeCalcStDate = salesSlip.NTimeCalcStDate; // 次回勘定開始日
            salesSlipAcptAnOdr.TotalMoneyForGrossProfit = salesSlip.TotalMoneyForGrossProfit; // 粗利計算用売上金額
            salesSlipAcptAnOdr.SectionName = salesSlip.SectionName; // 拠点名称
            salesSlipAcptAnOdr.SubSectionName = salesSlip.SubSectionName; // 部門名称
            salesSlipAcptAnOdr.CarMngDivCd = salesSlip.CarMngDivCd; // 車輌管理区分
            salesSlipAcptAnOdr.SearchMode = salesSlip.SearchMode; // 部品検索モード
            salesSlipAcptAnOdr.SearchCarMode = salesSlip.SearchCarMode; // 車両検索モード
            salesSlipAcptAnOdr.SalesRate = salesSlip.SalesRate; // 売価率
            salesSlipAcptAnOdr.CustOrderNoDispDiv = salesSlip.CustOrderNoDispDiv; // 得意先注番表示区分
            salesSlipAcptAnOdr.CustWarehouseCd = salesSlip.CustWarehouseCd; // 得意先優先倉庫コード
            salesSlipAcptAnOdr.AccRecDivCd = salesSlip.AccRecDivCd; // 売掛区分
            salesSlipAcptAnOdr.TransStopDate = salesSlip.TransStopDate; // 取引中止日
        }

        /// <summary>
        /// 売上明細データテーブル→受注明細データテーブルへ項目設定を行います。（随時設定項目以外）（オーバーロード）
        /// </summary>
        public void SettingSalesDetailAcptAnOdrFromSalesDetail()
        {
            this.SettingSalesDetailAcptAnOdrFromSalesDetail(this._salesDetailAcceptAnOrderDataTable, this._salesDetailDataTable);
        }

        /// <summary>
        /// 売上明細データテーブル→受注明細データテーブルへ項目設定を行います。（随時設定項目以外）（オーバーロード）
        /// </summary>
        /// <param name="salesDetailAcceptAnOrderDataTable"></param>
        /// <param name="salesDetailDataTable"></param>
        private void SettingSalesDetailAcptAnOdrFromSalesDetail(SalesInputDataSet.SalesDetailAcceptAnOrderDataTable salesDetailAcceptAnOrderDataTable, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            if (salesDetailAcceptAnOrderDataTable.Count == 0) return;

            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in salesDetailDataTable)
            {

                SalesInputDataSet.SalesDetailAcceptAnOrderRow acptAnOrderRow = salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);

                if (acptAnOrderRow != null)
                {
                    this.SettingSalesDetailAcptAnOdrFromSalesDetail(ref acptAnOrderRow, salesDetailRow);
                }
            }
        }

        /// <summary>
        /// 売上明細データ行オブジェクト→受注明細データ行オブジェクトへ項目設定を行います。（随時設定項目以外）（オーバーロード）
        /// </summary>
        /// <param name="salesDetailAcceptAnOrderDataTable"></param>
        /// <param name="salesDetailDataTable"></param>
        private void SettingSalesDetailAcptAnOdrFromSalesDetail(ref SalesInputDataSet.SalesDetailAcceptAnOrderRow acptAnOrderRow, SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            acptAnOrderRow.DtlNote = salesDetailRow.DtlNote; // 明細備考
            acptAnOrderRow.PartySlipNumDtl = salesDetailRow.PartySlipNumDtl; // 得意先注番
            acptAnOrderRow.OpenPriceDiv = salesDetailRow.OpenPriceDiv; // オープン価格区分
            acptAnOrderRow.WarehouseCode = salesDetailRow.WarehouseCode; // 倉庫コード
            acptAnOrderRow.WarehouseName = salesDetailRow.WarehouseName; // 倉庫名称
            acptAnOrderRow.WarehouseShelfNo = salesDetailRow.WarehouseShelfNo; // 棚番
            acptAnOrderRow.DeliGdsCmpltDueDate = salesDetailRow.DeliGdsCmpltDueDate; // 納品完了予定日
            acptAnOrderRow.BLGoodsCode = salesDetailRow.BLGoodsCode; // BL商品コード
            acptAnOrderRow.BLGoodsFullName = salesDetailRow.BLGoodsFullName; // BL商品コード名称（全角）
            // --- ADD m.suzuki 2010/04/14 ---------->>>>>
            acptAnOrderRow.GoodsName = salesDetailRow.GoodsName; // 商品名称...受注数を入れてから品名変更すると反映されない不具合修正の為
            // --- ADD m.suzuki 2010/04/14 ----------<<<<<
            acptAnOrderRow.GoodsNameKana = salesDetailRow.GoodsNameKana; // 商品名称カナ
            acptAnOrderRow.DtlNote = salesDetailRow.DtlNote; // 明細備考
            acptAnOrderRow.PartySlipNumDtl = salesDetailRow.PartySlipNumDtl; // 得意先注番（明細）
            acptAnOrderRow.SupplierCd = salesDetailRow.SupplierCd; // 仕入先コード
            acptAnOrderRow.SupplierSnm = salesDetailRow.SupplierSnm; // 仕入先名称

            acptAnOrderRow.SlipMemo1 = salesDetailRow.SlipMemo1; // 伝票メモ１
            acptAnOrderRow.SlipMemo2 = salesDetailRow.SlipMemo2; // 伝票メモ１
            acptAnOrderRow.SlipMemo3 = salesDetailRow.SlipMemo3; // 伝票メモ１
            acptAnOrderRow.InsideMemo1 = salesDetailRow.InsideMemo1; // 社内メモ１
            acptAnOrderRow.InsideMemo2 = salesDetailRow.InsideMemo2; // 社内メモ１
            acptAnOrderRow.InsideMemo3 = salesDetailRow.InsideMemo3; // 社内メモ１

            acptAnOrderRow.DeliveredGoodsDivNm = salesDetailRow.DeliveredGoodsDivNm;
            acptAnOrderRow.DeliveredGoodsDivNmSave = salesDetailRow.DeliveredGoodsDivNmSave;
            acptAnOrderRow.UOEDeliGoodsDiv = salesDetailRow.UOEDeliGoodsDiv;
            acptAnOrderRow.UOEResvdSection = salesDetailRow.UOEResvdSection;
            acptAnOrderRow.UOEResvdSectionNm = salesDetailRow.UOEResvdSectionNm;
            acptAnOrderRow.UOEResvdSectionNmSave = salesDetailRow.UOEResvdSectionNmSave;
            acptAnOrderRow.FollowDeliGoodsDiv = salesDetailRow.FollowDeliGoodsDiv;
            acptAnOrderRow.FollowDeliGoodsDivNm = salesDetailRow.FollowDeliGoodsDivNm;
            acptAnOrderRow.FollowDeliGoodsDivNmSave = salesDetailRow.FollowDeliGoodsDivNmSave;

        }

        /// <summary>
        /// 受注データオブジェクトをインスタンス変数にキャッシュします。
        /// </summary>
        /// <param name="acptAnOdrSlip"></param>
        public void CacheAcptAnOdrSlip(SalesSlip acptAnOdrSlip)
        {
            if (acptAnOdrSlip != null)
            {
                this._salesSlipAcptAnOdr = acptAnOdrSlip.Clone();
                this._salesSlipAcptAnOdr.SalesDate = acptAnOdrSlip.SalesDate;
            }
        }

        /// <summary>
        /// 受注明細データワークオブジェクトリストを受注明細データテーブルにキャッシュします。
        /// </summary>
        /// <param name="acptAnOdrDetailList">受注明細データワークオブジェクトリスト</param>
        private void CacheAcptAnOdrDetail(List<SalesDetail> acptAnOdrDetailList)
        {
            foreach (SalesDetail acptAnOdrDetail in acptAnOdrDetailList)
            {
                this.CacheAcptAnOdrDetailDataTable(acptAnOdrDetail, this._salesDetailAcceptAnOrderDataTable);
            }
        }

        /// <summary>
        /// 受注明細データワークオブジェクトを受注明細データテーブルにキャッシュします。
        /// </summary>
        /// <param name="acptAnOdrDetail">受注明細データワークオブジェクト</param>
        /// <param name="acptAnOdrDetailDataTable">受注明細データテーブル</param>
        private void CacheAcptAnOdrDetailDataTable(SalesDetail acptAnOdrDetail, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptAnOdrDetailDataTable)
        {
            try
            {
                acptAnOdrDetailDataTable.AddSalesDetailAcceptAnOrderRow(this.CreateRowFromUIData(acptAnOdrDetail, acptAnOdrDetailDataTable));
            }
            catch (ConstraintException)
            {
                SalesInputDataSet.SalesDetailAcceptAnOrderRow row = acptAnOdrDetailDataTable.FindByDtlRelationGuid(acptAnOdrDetail.DtlRelationGuid);
                this.SetRowFromUIData(ref row, acptAnOdrDetail);
            }
        }

        /// <summary>
        /// 指定した受注明細データワークオブジェクトを元に受注明細データテーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="acptAnOdrDetail">受注データワークオブジェクト</param>
        /// <param name="acptAnOdrDetailDataTable">受注明細データテーブル</param>
        /// <returns>受注明細データ行オブジェクト</returns>
        private SalesInputDataSet.SalesDetailAcceptAnOrderRow CreateRowFromUIData(SalesDetail acptAnOdrDetail, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptAnOdrDetailDataTable)
        {
            SalesInputDataSet.SalesDetailAcceptAnOrderRow row = acptAnOdrDetailDataTable.NewSalesDetailAcceptAnOrderRow();

            this.SetRowFromUIData(ref row, acptAnOdrDetail);
            return row;
        }

        /// <summary>
        /// 受注明細データオブジェクトから受注明細データ行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="row">受注明細データ行オブジェクト</param>
        /// <param name="acptAnOdrDetail">受注明細データワークオブジェクト</param>
        private void SetRowFromUIData(ref SalesInputDataSet.SalesDetailAcceptAnOrderRow row, SalesDetail acptAnOdrDetail)
        {
            //row.CreateDateTime = acptAnOdrDetail.CreateDateTime; // 作成日時
            //row.UpdateDateTime = acptAnOdrDetail.UpdateDateTime; // 更新日時
            //row.EnterpriseCode = acptAnOdrDetail.EnterpriseCode; // 企業コード
            //row.FileHeaderGuid = acptAnOdrDetail.FileHeaderGuid; // GUID
            //row.UpdEmployeeCode = acptAnOdrDetail.UpdEmployeeCode; // 更新従業員コード
            //row.UpdAssemblyId1 = acptAnOdrDetail.UpdAssemblyId1; // 更新アセンブリID1
            //row.UpdAssemblyId2 = acptAnOdrDetail.UpdAssemblyId2; // 更新アセンブリID2
            //row.LogicalDeleteCode = acptAnOdrDetail.LogicalDeleteCode; // 論理削除区分
            row.AcceptAnOrderNo = acptAnOdrDetail.AcceptAnOrderNo; // 受注番号
            row.AcptAnOdrStatus = acptAnOdrDetail.AcptAnOdrStatus; // 受注ステータス
            row.SalesSlipNum = acptAnOdrDetail.SalesSlipNum; // 売上伝票番号
            row.SalesRowNo = acptAnOdrDetail.SalesRowNo; // 売上行番号
            row.SalesRowDerivNo = acptAnOdrDetail.SalesRowDerivNo; // 売上行番号枝番
            row.SectionCode = acptAnOdrDetail.SectionCode; // 拠点コード
            row.SubSectionCode = acptAnOdrDetail.SubSectionCode; // 部門コード
            row.SalesDate = acptAnOdrDetail.SalesDate; // 売上日付
            row.CommonSeqNo = acptAnOdrDetail.CommonSeqNo; // 共通通番
            row.SalesSlipDtlNum = acptAnOdrDetail.SalesSlipDtlNum; // 売上明細通番
            row.AcptAnOdrStatusSrc = acptAnOdrDetail.AcptAnOdrStatusSrc; // 受注ステータス（元）
            row.SalesSlipDtlNumSrc = acptAnOdrDetail.SalesSlipDtlNumSrc; // 売上明細通番（元）
            row.SupplierFormalSync = acptAnOdrDetail.SupplierFormalSync; // 仕入形式（同時）
            row.StockSlipDtlNumSync = acptAnOdrDetail.StockSlipDtlNumSync; // 仕入明細通番（同時）
            row.SalesSlipCdDtl = acptAnOdrDetail.SalesSlipCdDtl; // 売上伝票区分（明細）
            //>>>2010/02/26
            //row.DeliGdsCmpltDueDate = acptAnOdrDetail.DeliGdsCmpltDueDate; // 納品完了予定日
            row.DeliGdsCmpltDueDate = acptAnOdrDetail.AnswerDelivDate; // 納品完了予定日
            //<<<2010/02/26
            row.GoodsKindCode = acptAnOdrDetail.GoodsKindCode; // 商品属性
            row.GoodsSearchDivCd = acptAnOdrDetail.GoodsSearchDivCd; // 商品検索区分
            row.GoodsMakerCd = acptAnOdrDetail.GoodsMakerCd; // 商品メーカーコード
            row.MakerName = acptAnOdrDetail.MakerName; // メーカー名称
            row.MakerKanaName = acptAnOdrDetail.MakerKanaName; // メーカーカナ名称
            row.GoodsNo = acptAnOdrDetail.GoodsNo; // 商品番号
            row.GoodsName = acptAnOdrDetail.GoodsName; // 商品名称
            row.GoodsNameKana = acptAnOdrDetail.GoodsNameKana; // 商品名称カナ
            row.GoodsLGroup = acptAnOdrDetail.GoodsLGroup; // 商品大分類コード
            row.GoodsLGroupName = acptAnOdrDetail.GoodsLGroupName; // 商品大分類名称
            row.GoodsMGroup = acptAnOdrDetail.GoodsMGroup; // 商品中分類コード
            row.GoodsMGroupName = acptAnOdrDetail.GoodsMGroupName; // 商品中分類名称
            row.BLGroupCode = acptAnOdrDetail.BLGroupCode; // BLグループコード
            row.BLGroupName = acptAnOdrDetail.BLGroupName; // BLグループコード名称
            row.BLGoodsCode = acptAnOdrDetail.BLGoodsCode; // BL商品コード
            row.BLGoodsFullName = acptAnOdrDetail.BLGoodsFullName; // BL商品コード名称（全角）
            row.EnterpriseGanreCode = acptAnOdrDetail.EnterpriseGanreCode; // 自社分類コード
            row.EnterpriseGanreName = acptAnOdrDetail.EnterpriseGanreName; // 自社分類名称
            row.WarehouseCode = acptAnOdrDetail.WarehouseCode; // 倉庫コード
            row.WarehouseName = acptAnOdrDetail.WarehouseName; // 倉庫名称
            row.WarehouseShelfNo = acptAnOdrDetail.WarehouseShelfNo; // 倉庫棚番
            row.SalesOrderDivCd = acptAnOdrDetail.SalesOrderDivCd; // 売上在庫取寄せ区分
            row.OpenPriceDiv = acptAnOdrDetail.OpenPriceDiv; // オープン価格区分
            row.GoodsRateRank = acptAnOdrDetail.GoodsRateRank; // 商品掛率ランク
            row.CustRateGrpCode = acptAnOdrDetail.CustRateGrpCode; // 得意先掛率グループコード
            row.ListPriceRate = acptAnOdrDetail.ListPriceRate; // 定価率
            row.RateSectPriceUnPrc = acptAnOdrDetail.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            row.RateDivLPrice = acptAnOdrDetail.RateDivLPrice; // 掛率設定区分（定価）
            row.UnPrcCalcCdLPrice = acptAnOdrDetail.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            row.PriceCdLPrice = acptAnOdrDetail.PriceCdLPrice; // 価格区分（定価）
            row.StdUnPrcLPrice = acptAnOdrDetail.StdUnPrcLPrice; // 基準単価（定価）
            row.FracProcUnitLPrice = acptAnOdrDetail.FracProcUnitLPrice; // 端数処理単位（定価）
            row.FracProcLPrice = acptAnOdrDetail.FracProcLPrice; // 端数処理（定価）
            row.ListPriceTaxIncFl = acptAnOdrDetail.ListPriceTaxIncFl; // 定価（税込，浮動）
            row.ListPriceTaxExcFl = acptAnOdrDetail.ListPriceTaxExcFl; // 定価（税抜，浮動）
            row.ListPriceChngCd = acptAnOdrDetail.ListPriceChngCd; // 定価変更区分
            row.SalesRate = acptAnOdrDetail.SalesRate; // 売価率
            row.RateSectSalUnPrc = acptAnOdrDetail.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            row.RateDivSalUnPrc = acptAnOdrDetail.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            row.UnPrcCalcCdSalUnPrc = acptAnOdrDetail.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            row.PriceCdSalUnPrc = acptAnOdrDetail.PriceCdSalUnPrc; // 価格区分（売上単価）
            row.StdUnPrcSalUnPrc = acptAnOdrDetail.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            row.FracProcUnitSalUnPrc = acptAnOdrDetail.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            row.FracProcSalUnPrc = acptAnOdrDetail.FracProcSalUnPrc; // 端数処理（売上単価）
            row.SalesUnPrcTaxIncFl = acptAnOdrDetail.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            row.SalesUnPrcTaxExcFl = acptAnOdrDetail.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            row.SalesUnPrcChngCd = acptAnOdrDetail.SalesUnPrcChngCd; // 売上単価変更区分
            row.CostRate = acptAnOdrDetail.CostRate; // 原価率
            row.RateSectCstUnPrc = acptAnOdrDetail.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            row.RateDivUnCst = acptAnOdrDetail.RateDivUnCst; // 掛率設定区分（原価単価）
            row.UnPrcCalcCdUnCst = acptAnOdrDetail.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            row.PriceCdUnCst = acptAnOdrDetail.PriceCdUnCst; // 価格区分（原価単価）
            row.StdUnPrcUnCst = acptAnOdrDetail.StdUnPrcUnCst; // 基準単価（原価単価）
            row.FracProcUnitUnCst = acptAnOdrDetail.FracProcUnitUnCst; // 端数処理単位（原価単価）
            row.FracProcUnCst = acptAnOdrDetail.FracProcUnCst; // 端数処理（原価単価）
            row.SalesUnitCost = acptAnOdrDetail.SalesUnitCost; // 原価単価
            row.SalesUnitCostChngDiv = acptAnOdrDetail.SalesUnitCostChngDiv; // 原価単価変更区分
            row.RateBLGoodsCode = acptAnOdrDetail.RateBLGoodsCode; // BL商品コード（掛率）
            row.RateBLGoodsName = acptAnOdrDetail.RateBLGoodsName; // BL商品コード名称（掛率）
            row.RateGoodsRateGrpCd = acptAnOdrDetail.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            row.RateGoodsRateGrpNm = acptAnOdrDetail.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            row.RateBLGroupCode = acptAnOdrDetail.RateBLGroupCode; // BLグループコード（掛率）
            row.RateBLGroupName = acptAnOdrDetail.RateBLGroupName; // BLグループ名称（掛率）
            row.PrtBLGoodsCode = acptAnOdrDetail.PrtBLGoodsCode; // BL商品コード（印刷）
            row.PrtBLGoodsName = acptAnOdrDetail.PrtBLGoodsName; // BL商品コード名称（印刷）
            row.SalesCode = acptAnOdrDetail.SalesCode; // 販売区分コード
            row.SalesCdNm = acptAnOdrDetail.SalesCdNm; // 販売区分名称
            row.WorkManHour = acptAnOdrDetail.WorkManHour; // 作業工数
            row.ShipmentCnt = acptAnOdrDetail.ShipmentCnt; // 出荷数
            row.AcceptAnOrderCnt = acptAnOdrDetail.AcceptAnOrderCnt; // 受注数量
            row.AcptAnOdrAdjustCnt = acptAnOdrDetail.AcptAnOdrAdjustCnt; // 受注調整数
            row.AcptAnOdrRemainCnt = acptAnOdrDetail.AcptAnOdrRemainCnt; // 受注残数
            row.RemainCntUpdDate = acptAnOdrDetail.RemainCntUpdDate; // 残数更新日
            row.SalesMoneyTaxInc = acptAnOdrDetail.SalesMoneyTaxInc; // 売上金額（税込み）
            row.SalesMoneyTaxExc = acptAnOdrDetail.SalesMoneyTaxExc; // 売上金額（税抜き）
            row.Cost = acptAnOdrDetail.Cost; // 原価
            row.GrsProfitChkDiv = acptAnOdrDetail.GrsProfitChkDiv; // 粗利チェック区分
            row.SalesGoodsCd = acptAnOdrDetail.SalesGoodsCd; // 売上商品区分
            row.SalesPriceConsTax = acptAnOdrDetail.SalesPriceConsTax; // 売上金額消費税額
            row.TaxationDivCd = acptAnOdrDetail.TaxationDivCd; // 課税区分
            row.PartySlipNumDtl = acptAnOdrDetail.PartySlipNumDtl; // 相手先伝票番号（明細）
            row.DtlNote = acptAnOdrDetail.DtlNote; // 明細備考
            row.SupplierCd = acptAnOdrDetail.SupplierCd; // 仕入先コード
            row.SupplierSnm = acptAnOdrDetail.SupplierSnm; // 仕入先略称
            row.OrderNumber = acptAnOdrDetail.OrderNumber; // 発注番号
            row.WayToOrder = acptAnOdrDetail.WayToOrder; // 注文方法
            row.SlipMemo1 = acptAnOdrDetail.SlipMemo1; // 伝票メモ１
            row.SlipMemo2 = acptAnOdrDetail.SlipMemo2; // 伝票メモ２
            row.SlipMemo3 = acptAnOdrDetail.SlipMemo3; // 伝票メモ３
            row.InsideMemo1 = acptAnOdrDetail.InsideMemo1; // 社内メモ１
            row.InsideMemo2 = acptAnOdrDetail.InsideMemo2; // 社内メモ２
            row.InsideMemo3 = acptAnOdrDetail.InsideMemo3; // 社内メモ３
            row.BfListPrice = acptAnOdrDetail.BfListPrice; // 変更前定価
            row.BfSalesUnitPrice = acptAnOdrDetail.BfSalesUnitPrice; // 変更前売価
            row.BfUnitCost = acptAnOdrDetail.BfUnitCost; // 変更前原価
            row.CmpltSalesRowNo = acptAnOdrDetail.CmpltSalesRowNo; // 一式明細番号
            row.CmpltGoodsMakerCd = acptAnOdrDetail.CmpltGoodsMakerCd; // メーカーコード（一式）
            row.CmpltMakerName = acptAnOdrDetail.CmpltMakerName; // メーカー名称（一式）
            row.CmpltGoodsName = acptAnOdrDetail.CmpltGoodsName; // 商品名称（一式）
            row.CmpltShipmentCnt = acptAnOdrDetail.CmpltShipmentCnt; // 数量（一式）
            row.CmpltSalesUnPrcFl = acptAnOdrDetail.CmpltSalesUnPrcFl; // 売上単価（一式）
            row.CmpltSalesMoney = acptAnOdrDetail.CmpltSalesMoney; // 売上金額（一式）
            row.CmpltSalesUnitCost = acptAnOdrDetail.CmpltSalesUnitCost; // 原価単価（一式）
            row.CmpltCost = acptAnOdrDetail.CmpltCost; // 原価金額（一式）
            row.CmpltPartySalSlNum = acptAnOdrDetail.CmpltPartySalSlNum; // 相手先伝票番号（一式）
            row.CmpltNote = acptAnOdrDetail.CmpltNote; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            row.SelectedGoodsNoDiv = acptAnOdrDetail.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            row.PrtGoodsNo = acptAnOdrDetail.PrtGoodsNo; // 印刷用品番
            row.PrtMakerCode = acptAnOdrDetail.PrtMakerCode; // 印刷用メーカーコード
            row.PrtMakerName = acptAnOdrDetail.PrtMakerName; // 印刷用メーカー名称
            //row.DtlRelationGuid = acptAnOdrDetail.DtlRelationGuid; // 共通キー
            row.CarRelationGuid = acptAnOdrDetail.CarRelationGuid; // 車両情報共通キー
            //row.SalesRowNoDisplay = acptAnOdrDetail.SalesRowNoDisplay; // 行番号（表示用）
            //row.SupplierStock = acptAnOdrDetail.SupplierStock; // 現在庫数
            //row.SupplierStockDisplay = acptAnOdrDetail.SupplierStockDisplay; // 現在庫数（表示用）
            //row.OpenPriceDivDisplay = acptAnOdrDetail.OpenPriceDivDisplay; // オープン価格区分（表示用）
            //row.ListPriceDisplay = acptAnOdrDetail.ListPriceDisplay; // 定価（表示用）
            //row.SalesUnPrcDisplay = acptAnOdrDetail.SalesUnPrcDisplay; // 売上単価（表示用）
            //row.SalesUnitCostTaxExc = acptAnOdrDetail.SalesUnitCostTaxExc; // 原価単価（税抜）
            //row.SalesUnitCostTaxInc = acptAnOdrDetail.SalesUnitCostTaxInc; // 原価単価（税込）
            //row.ShipmentCntDisplay = acptAnOdrDetail.ShipmentCntDisplay; // 出荷数（表示用）
            //row.AddUpEnableCnt = acptAnOdrDetail.AddUpEnableCnt; // 計上可能数
            //row.AlreadyAddUpCnt = acptAnOdrDetail.AlreadyAddUpCnt; // 計上済数
            //row.ShipmentCntDefault = acptAnOdrDetail.ShipmentCntDefault; // 出荷数（初期値）
            //row.SalesMoneyDisplay = acptAnOdrDetail.SalesMoneyDisplay; // 売上金額（表示用）
            //row.CostTaxInc = acptAnOdrDetail.CostTaxInc; // 原価金額（税込）
            //row.CostTaxExc = acptAnOdrDetail.CostTaxExc; // 原価金額（税抜）
            row.AcceptAnOrderCntDisplay = acptAnOdrDetail.ShipmentCnt; // 受注数（表示用）
            row.AcceptAnOrderCntDefault = acptAnOdrDetail.ShipmentCnt; // 受注数（初期値）
            //row.TaxDiv = acptAnOdrDetail.TaxDiv; // 課税区分（UI用）
            //row.CanTaxDivChange = acptAnOdrDetail.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            //row.RowStatus = acptAnOdrDetail.RowStatus; // 行ステータス
            //row.EditStatus = acptAnOdrDetail.EditStatus; // エディットステータス
            //row.SlipMemoExist = acptAnOdrDetail.SlipMemoExist; // メモ存在フラグ
            //row.SupplierSlipExist = acptAnOdrDetail.SupplierSlipExist; // 仕入情報存在フラグ
            //row.DetailGrossProfitRate = acptAnOdrDetail.DetailGrossProfitRate; // 明細粗利率
            //row.CostUpRate = acptAnOdrDetail.CostUpRate; // 原価アップ率
            //row.GrossProfitSecureRate = acptAnOdrDetail.GrossProfitSecureRate; // 粗利確保率
            //row.SupplierCdForStock = acptAnOdrDetail.SupplierCdForStock; // 仕入先コード
            //row.StockDate = acptAnOdrDetail.StockDate; // 仕入日
            //row.PartySalesSlipNum = acptAnOdrDetail.PartySalesSlipNum; // 仕入伝票番号
            //row.BoCode = acptAnOdrDetail.BoCode; // BO区分
            //row.SupplierCdForOrder = acptAnOdrDetail.SupplierCdForOrder; // 発注先
            //row.AcceptAnOrderCntForOrder = acptAnOdrDetail.AcceptAnOrderCntForOrder; // 発注数
            //row.SupplierSnmForOrder = acptAnOdrDetail.SupplierSnmForOrder; // 発注先名称
            //row.DeliveredGoodsDiv = acptAnOdrDetail.DeliveredGoodsDiv; // 納品区分
            //row.DeliveredGoodsDivNm = acptAnOdrDetail.DeliveredGoodsDivNm; // 納品区分名称
            //row.DeliveredGoodsDivNmSave = acptAnOdrDetail.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            //row.FollowDeliGoodsDiv = acptAnOdrDetail.FollowDeliGoodsDiv; // H納品区分
            //row.FollowDeliGoodsDivNm = acptAnOdrDetail.FollowDeliGoodsDivNm; // H納品区分名称
            //row.FollowDeliGoodsDivNmSave = acptAnOdrDetail.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            //row.UOEResvdSection = acptAnOdrDetail.UOEResvdSection; // 指定拠点
            //row.UOEResvdSectionNm = acptAnOdrDetail.UOEResvdSectionNm; // 指定拠点名称
            //row.UOEResvdSectionNmSave = acptAnOdrDetail.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            //row.NewListPrice = acptAnOdrDetail.NewListPrice; // 新価格
            //row.NewListPriceStartDate = acptAnOdrDetail.NewListPriceStartDate; // 新価格適用日
            //row.OldListPrice = acptAnOdrDetail.OldListPrice; // 旧価格
            //row.ListPriceOpenDiv = acptAnOdrDetail.ListPriceOpenDiv; // オープン価格区分
            //row.Dummy = acptAnOdrDetail.Dummy; // ダミー（空欄表示用）

            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(acptAnOdrDetail.SalesSlipNum, acptAnOdrDetail.SalesRowNo);
            if (salesDetailRow != null)
            {
                row.DtlRelationGuid = salesDetailRow.DtlRelationGuid;
                row.CarRelationGuid = salesDetailRow.CarRelationGuid;
            }
            else
            {
                row.DtlRelationGuid = Guid.NewGuid();
            }
            // 2012/01/16 Add >>>
            row.GoodsSpecialNote = acptAnOdrDetail.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<

            //>>>2011/10/29
            #region 補正
            int sign = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;

            //-----------------------------------------------------------------------------
            // 原価、原価金額再計算(テーブル上に税込、税抜項目が無い為)
            //-----------------------------------------------------------------------------
            double costTaxExc = 0;
            double costTaxInc = 0;
            double salesUnitCostTaxExc = 0;
            double salesUnitCostTaxInc = 0;
            this.CalcTaxExcAndTaxIncForStock(acptAnOdrDetail.TaxationDivCd, row.SupplierCd, this._salesSlipAcptAnOdr.ConsTaxRate, this._salesSlipAcptAnOdr.TotalAmountDispWayCd, acptAnOdrDetail.Cost, out costTaxExc, out costTaxInc);
            this.CalcTaxExcAndTaxIncForStock(acptAnOdrDetail.TaxationDivCd, row.SupplierCd, this._salesSlipAcptAnOdr.ConsTaxRate, this._salesSlipAcptAnOdr.TotalAmountDispWayCd, acptAnOdrDetail.SalesUnitCost, out salesUnitCostTaxExc, out salesUnitCostTaxInc);
            row.CostTaxExc = (long)costTaxExc;
            row.CostTaxInc = (long)costTaxInc;
            row.SalesUnitCostTaxExc = salesUnitCostTaxExc;
            row.SalesUnitCostTaxInc = salesUnitCostTaxInc;

            //-----------------------------------------------------------------------------
            // 売単価、定価（表示用）
            //-----------------------------------------------------------------------------
            if (this._salesSlipAcptAnOdr.TotalAmountDispWayCd == 0)
            {
                // 総額表示しない
                switch ((CalculateTax.TaxationCode)acptAnOdrDetail.TaxationDivCd)
                {
                    case CalculateTax.TaxationCode.TaxExc:
                        row.SalesUnPrcDisplay = acptAnOdrDetail.SalesUnPrcTaxExcFl;
                        row.ListPriceDisplay = acptAnOdrDetail.ListPriceTaxExcFl;
                        break;
                    case CalculateTax.TaxationCode.TaxInc:
                        row.SalesUnPrcDisplay = acptAnOdrDetail.SalesUnPrcTaxIncFl;
                        row.ListPriceDisplay = acptAnOdrDetail.ListPriceTaxIncFl;
                        break;
                    case CalculateTax.TaxationCode.TaxNone:
                        row.SalesUnPrcDisplay = acptAnOdrDetail.SalesUnPrcTaxExcFl;
                        row.ListPriceDisplay = acptAnOdrDetail.ListPriceTaxExcFl;
                        break;
                }
            }
            else
            {
                // 総額表示する
                switch ((CalculateTax.TaxationCode)acptAnOdrDetail.TaxationDivCd)
                {
                    case CalculateTax.TaxationCode.TaxExc:
                        row.SalesUnPrcDisplay = acptAnOdrDetail.SalesUnPrcTaxIncFl;
                        row.ListPriceDisplay = acptAnOdrDetail.ListPriceTaxIncFl;
                        break;
                    case CalculateTax.TaxationCode.TaxInc:
                        row.SalesUnPrcDisplay = acptAnOdrDetail.SalesUnPrcTaxIncFl;
                        row.ListPriceDisplay = acptAnOdrDetail.ListPriceTaxIncFl;
                        break;
                    case CalculateTax.TaxationCode.TaxNone:
                        row.SalesUnPrcDisplay = acptAnOdrDetail.SalesUnPrcTaxIncFl;
                        row.ListPriceDisplay = acptAnOdrDetail.ListPriceTaxIncFl;
                        break;
                }
            }

            //-----------------------------------------------------------------------------
            // 売上金額（表示用）
            //-----------------------------------------------------------------------------
            switch ((SalesGoodsCd)acptAnOdrDetail.SalesGoodsCd)
            {
                // 商品、商品外
                case SalesGoodsCd.Goods:
                case SalesGoodsCd.NonGoods:
                    {
                        if (this._salesSlipAcptAnOdr.TotalAmountDispWayCd == (int)TotalAmountDispWayCd.NoTotalAmount)
                        {
                            // 総額表示なし
                            switch ((CalculateTax.TaxationCode)acptAnOdrDetail.TaxationDivCd)
                            {
                                case CalculateTax.TaxationCode.TaxExc:
                                    row.SalesMoneyDisplay = acptAnOdrDetail.SalesMoneyTaxExc * sign;
                                    break;
                                case CalculateTax.TaxationCode.TaxInc:
                                    row.SalesMoneyDisplay = acptAnOdrDetail.SalesMoneyTaxInc * sign;
                                    break;
                                case CalculateTax.TaxationCode.TaxNone:
                                    row.SalesMoneyDisplay = acptAnOdrDetail.SalesMoneyTaxExc * sign;
                                    break;
                            }
                        }
                        else
                        {
                            // 総額表示あり
                            row.SalesMoneyDisplay = acptAnOdrDetail.SalesMoneyTaxInc * sign;
                        }
                        break;
                    }
                // 消費税調整
                case SalesGoodsCd.ConsTaxAdjust:
                case SalesGoodsCd.AccRecConsTaxAdjust:
                    {
                        row.SalesMoneyDisplay = acptAnOdrDetail.SalesMoneyTaxInc * sign;
                        break;
                    }
                // 残高調整
                case SalesGoodsCd.BalanceAdjust:
                case SalesGoodsCd.AccRecBalanceAdjust:
                    {
                        row.SalesMoneyDisplay = acptAnOdrDetail.SalesMoneyTaxInc * sign;
                        break;
                    }
            }

            //-----------------------------------------------------------------------------
            // その他補正
            //-----------------------------------------------------------------------------
            // 原価アップ率、粗利確保率
            switch ((UnitPriceCalculation.UnitPrcCalcDiv)row.UnPrcCalcCdSalUnPrc)
            {
                case UnitPriceCalculation.UnitPrcCalcDiv.RateVal:
                    break;
                case UnitPriceCalculation.UnitPrcCalcDiv.UpRate:
                    row.CostUpRate = acptAnOdrDetail.SalesRate;
                    break;
                case UnitPriceCalculation.UnitPrcCalcDiv.GrsProfitSecureRate:
                    row.GrossProfitSecureRate = acptAnOdrDetail.SalesRate;
                    break;
                case UnitPriceCalculation.UnitPrcCalcDiv.Price:
                    break;
            }

            // EditStatus
            switch ((SalesSlipInputAcs.SalesSlipCdDtl)row.SalesSlipCdDtl)
            {
                case SalesSlipCdDtl.Sales:
                case SalesSlipCdDtl.RetGoods:
                    if (this._salesSlipAcptAnOdr.SalesSlipNum != ctDefaultSalesSlipNum)
                    {
                        row.EditStatus = ctEDITSTATUS_ExistSlip;
                    }
                    else
                    {
                        row.EditStatus = ctEDITSTATUS_AllOK;
                    }
                    // 計上元明細通番が入っていて受注ステータスが計上元と異なる場合は計上明細
                    if ((acptAnOdrDetail.SalesSlipDtlNumSrc != 0) && (acptAnOdrDetail.AcptAnOdrStatusSrc != acptAnOdrDetail.AcptAnOdrStatus))
                    {
                        if (this._salesSlipAcptAnOdr.SalesSlipNum != ctDefaultSalesSlipNum)
                        {
                            row.EditStatus = ctEDITSTATUS_AddUpEdit;
                        }
                        else
                        {
                            row.EditStatus = ctEDITSTATUS_AddUpNew;
                        }
                    }
                    break;
                case SalesSlipCdDtl.Discount:
                    row.EditStatus = (row.ShipmentCntDisplay == 0) ? ctEDITSTATUS_RowDiscount : ctEDITSTATUS_GoodsDiscount;
                    break;
                case SalesSlipCdDtl.Annotation:
                    row.EditStatus = ctEDITSTATUS_Annotation;
                    break;
            }

            // RowStatus
            row.RowStatus = ctROWSTATUS_NORMAL;

            // 課税非課税区分
            if (acptAnOdrDetail.TaxationDivCd == 1)
            {
                row.TaxDiv = 1;						// 非課税
            }
            else
            {
                row.TaxDiv = 0;						// 課税
            }

            // 課税非課税区分変更可能フラグ
            if (acptAnOdrDetail.SalesGoodsCd == (int)SalesGoodsCd.NonGoods)
            {
                row.CanTaxDivChange = true;
            }
            else
            {
                row.CanTaxDivChange = false;
            }

            // 部品検索状態
            switch (acptAnOdrDetail.GoodsSearchDivCd)
            {
                case 0: // BLコード検索
                    row.SearchPartsModeState = (int)SearchPartsModeState.BLCodeSearch;
                    break;
                case 1: // 品番検索
                    row.SearchPartsModeState = (int)SearchPartsModeState.GoodsNoSearch;
                    break;
                case 2: //手入力
                    row.SearchPartsModeState = (int)SearchPartsModeState.NonSearch;
                    break;
            }

            // 金額手入力区分
            if ((row.SalesUnPrcDisplay == 0) && (row.SalesMoneyDisplay != 0))
            {
                row.SalesMoneyInputDiv = (int)SalesMoneyInputDiv.Input;
            }
            else
            {
                row.SalesMoneyInputDiv = (int)SalesMoneyInputDiv.Calculate;
            }

            // 売単価、原単価初期値
            row.SalesUnPrcTaxExcFlDefault = row.SalesUnPrcTaxExcFl;
            row.SalesUnPrcTaxIncFlDefault = row.SalesUnPrcTaxIncFl;
            row.SalesUnitCostTaxExcDefault = row.SalesUnitCostTaxExc;
            row.SalesUnitCostTaxIncDefault = row.SalesUnitCostTaxInc;
            #endregion
            //<<<2011/10/29
        }

        /// <summary>
        /// ＤＢに保存する受注情報データを調整します。
        /// </summary>
        public void AdjustAcptSaveData()
        {
            #region ●不要明細削除
            List<Guid> deleteGuidList = new List<Guid>();
            foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow row in this._salesDetailAcceptAnOrderDataTable)
            {
                if ((string.IsNullOrEmpty(row.GoodsName.Trim())) || (row.AcceptAnOrderCntDisplay == 0))
                {
                    deleteGuidList.Add(row.DtlRelationGuid);
                }
            }
            // 受注情報明細行削除処理
            this.DeleteSalesDetailAcceptAnOrderRow(deleteGuidList);
            #endregion
        }

        /// <summary>
        /// ＤＢに保存する受注情報データを調整します。
        /// </summary>
        /// <param name="acptAnOrderDataTable">受注データテーブル</param>
        public void AdjustAcptSaveData(SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptAnOrderDataTable)
        {
            #region ●不要明細削除
            List<Guid> deleteGuidList = new List<Guid>();
            foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow row in acptAnOrderDataTable)
            {
                // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                //// --- ADD 2013/04/11 Y.Wakita ④ ---------->>>>>
                //if (this._salesSlip.AcptAnOdrStatusDisplay == (int)AcptAnOdrStatusState.AcceptAnOrder)
                //{
                //    if (string.IsNullOrEmpty(row.GoodsName.Trim()))
                //    {
                //        deleteGuidList.Add(row.DtlRelationGuid);
                //    }
                //}
                //else
                //{
                //// --- ADD 2013/04/11 Y.Wakita ④ ----------<<<<<
                // --- DEL 2013/04/18 T.Nishi ----------<<<<<
	                if ((string.IsNullOrEmpty(row.GoodsName.Trim())) || (row.AcceptAnOrderCntDisplay == 0))
	                {
	                    deleteGuidList.Add(row.DtlRelationGuid);
	                }
                // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                //// --- ADD 2013/04/11 Y.Wakita ④ ---------->>>>>
                //}
                //// --- ADD 2013/04/11 Y.Wakita ④ ----------<<<<<
                // --- DEL 2013/04/18 T.Nishi ----------<<<<<
            }
            // 受注情報明細行削除処理
            this.DeleteSalesDetailAcceptAnOrderRow(deleteGuidList);
            #endregion
        }

        /// <summary>
        /// 受注明細行オブジェクトの数量を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingAcptAnOdrDetailRowShipmentCnt(List<SalesDetail> salesDetailList)
        {
            foreach (SalesDetail salesDetail in salesDetailList)
            {
                this.SettingAcptAnOdrDetailRowShipmentCnt(salesDetail.SalesRowNo);
            }
        }

        /// <summary>
        /// 受注明細行オブジェクトの数量を設定します。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingAcptAnOdrDetailRowShipmentCnt(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.SalesDetailAcceptAnOrderRow row = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            if (row == null) return;

            double shipmentCntRealValue = row.ShipmentCntDisplay;
            if (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) shipmentCntRealValue *= -1;

            //--------------------------------------------
            // 新規登録行
            //--------------------------------------------
            if (row.SalesSlipDtlNum == 0)
            {
                if ((this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp))
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                    row.AcptAnOdrAdjustCnt = 0;
                    row.AcptAnOdrRemainCnt = row.AcceptAnOrderCnt - shipmentCntRealValue;
                }
                else
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCntDisplay;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCntDisplay;
                    row.AcptAnOdrAdjustCnt = 0;
                    row.AcptAnOdrRemainCnt = row.AcceptAnOrderCntDisplay - shipmentCntRealValue;
                }
            }
            //--------------------------------------------
            // 既存修正行
            //--------------------------------------------
            else
            {
                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlip.AcptAnOdrStatus)
                {
                    case AcptAnOdrStatusState.AcceptAnOrder:
                        double acptAdjustCnt = row.AcceptAnOrderCntDisplay - row.AcceptAnOrderCnt;// 入力前との差分を計算
                        row.ShipmentCnt = shipmentCntRealValue;
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        row.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt + acptAdjustCnt;
                        row.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt + acptAdjustCnt;
                        break;
                    default:
                        break;
                }
            }

            // 現在庫数調整
            if (!(string.IsNullOrEmpty(row.WarehouseCode.Trim())))
            {
                this.AcptAnOdrDetailStockInfoAdjust();
                this.SalesDetailStockInfoAdjust();
            }

            // 掛率から単価を再計算
            this.SalesDetailRowGoodsPriceSetting(ref row);
        }

        //>>>2011/10/29
        /// <summary>
        /// 受注明細行オブジェクトの数量を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingAcptAnOdrDetailRowShipmentCnt2(List<SalesDetail> salesDetailList)
        {
            foreach (SalesDetail salesDetail in salesDetailList)
            {
                this.SettingAcptAnOdrDetailRowShipmentCnt2(salesDetail.SalesRowNo);
            }
        }

        /// <summary>
        /// 受注明細行オブジェクトの数量を設定します。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingAcptAnOdrDetailRowShipmentCnt2(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.SalesDetailAcceptAnOrderRow row = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            if (row == null) return;

            double shipmentCntRealValue = row.ShipmentCntDisplay;
            if (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) shipmentCntRealValue *= -1;

            //--------------------------------------------
            // 新規登録行
            //--------------------------------------------
            if (row.SalesSlipDtlNum == 0)
            {
                if ((this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp))
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                    row.AcptAnOdrAdjustCnt = 0;
                    row.AcptAnOdrRemainCnt = row.AcceptAnOrderCnt - shipmentCntRealValue;
                }
                else
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCntDisplay;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCntDisplay;
                    row.AcptAnOdrAdjustCnt = 0;
                    row.AcptAnOdrRemainCnt = row.AcceptAnOrderCntDisplay - shipmentCntRealValue;
                }
            }
            //--------------------------------------------
            // 既存修正行
            //--------------------------------------------
            else
            {
                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlip.AcptAnOdrStatus)
                {
                    case AcptAnOdrStatusState.AcceptAnOrder:
                        double acptAdjustCnt = row.AcceptAnOrderCntDisplay - row.AcceptAnOrderCnt;// 入力前との差分を計算
                        row.ShipmentCnt = shipmentCntRealValue;
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        row.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt + acptAdjustCnt;
                        row.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt + acptAdjustCnt;
                        break;
                    default:
                        break;
                }
            }

            // 現在庫数調整
            if (!(string.IsNullOrEmpty(row.WarehouseCode.Trim())))
            {
                this.AcptAnOdrDetailStockInfoAdjust();
                this.SalesDetailStockInfoAdjust();
            }
        }
        //<<<2011/10/29

        /// <summary>
        /// 売上明細データオブジェクトリストの現在庫数を調整します。
        /// </summary>
        public void AcptAnOdrDetailStockInfoAdjust()
        {
            if (this._stockInfoDataTable.Rows.Count > 0)
            {
                try
                {
                    this._salesDetailAcceptAnOrderDataTable.AcceptChanges();
                    this._salesDetailAcceptAnOrderDataTable.BeginLoadData();

                    List<StockInfoKey> stockKeyInfoList = new List<StockInfoKey>();

                    foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow acptAnOdrDetailRow in this._salesDetailAcceptAnOrderDataTable)
                    {
                        if (!string.IsNullOrEmpty(acptAnOdrDetailRow.WarehouseCode.Trim()))
                        {
                            StockInfoKey stockKeyInfo = new StockInfoKey(acptAnOdrDetailRow.WarehouseCode.Trim(), acptAnOdrDetailRow.GoodsNo, acptAnOdrDetailRow.GoodsMakerCd);

                            if (!stockKeyInfoList.Contains(stockKeyInfo))
                            {
                                this.AcptAnOdrDetailStockInfoAdjust(acptAnOdrDetailRow.WarehouseCode, acptAnOdrDetailRow.GoodsNo, acptAnOdrDetailRow.GoodsMakerCd);
                                stockKeyInfoList.Add(stockKeyInfo);
                            }
                        }
                    }
                }
                finally
                {
                    this._salesDetailAcceptAnOrderDataTable.EndLoadData();
                }
            }
        }

        /// <summary>
        /// 売上明細データオブジェクトリストの現在庫数を調整します。
        /// </summary>
        /// <param name="warehouseCode">倉庫コード</param>
        /// <param name="goodsNo">商品コード</param>
        /// <param name="goodsMakerCode">メーカーコード</param>
        private void AcptAnOdrDetailStockInfoAdjust(string warehouseCode, string goodsNo, int goodsMakerCode)
        {
            if ((string.IsNullOrEmpty(warehouseCode)) || (string.IsNullOrEmpty(goodsNo)) || (goodsMakerCode == 0)) return;

            SalesInputDataSet.StockInfoRow stockInfoRow = this._stockInfoDataTable.FindByWarehouseCodeGoodsNoGoodsMakerCd(warehouseCode, goodsNo, goodsMakerCode);

            if (stockInfoRow != null)
            {
                string defaultRowFilter = this._acptAnOdrDetailDataView.RowFilter;
                string defaultSort = this._acptAnOdrDetailDataView.Sort;

                try
                {
                    SalesInputDataSet.SalesDetailAcceptAnOrderRow acptAnOdrDetailRow;
                    // 在庫マスタ上の現在庫を取得する
                    double shipmentPosCnt = stockInfoRow.ShipmentPosCnt;

                    string selectString = string.Format("{0}='{1}' AND {2}='{3}' AND {4}={5}",
                                                this._salesDetailAcceptAnOrderDataTable.WarehouseCodeColumn.ColumnName,
                                                stockInfoRow.WarehouseCode.Trim(),
                                                this._salesDetailAcceptAnOrderDataTable.GoodsNoColumn.ColumnName,
                                                stockInfoRow.GoodsNo,
                                                this._salesDetailAcceptAnOrderDataTable.GoodsMakerCdColumn.ColumnName,
                                                stockInfoRow.GoodsMakerCd);

                    this._acptAnOdrDetailDataView.Sort = string.Format("{0}", this._salesDetailAcceptAnOrderDataTable.SalesRowNoColumn);

                    // 一旦、修正分の数量を差し引いた現在庫数を計算する(全明細が削除された場合の現在庫数を算出)
                    this._acptAnOdrDetailDataView.RowFilter = string.Format("{0} AND {1} <> 0", selectString, this._salesDetailAcceptAnOrderDataTable.SalesSlipDtlNumColumn.ColumnName);

                    if (this._acptAnOdrDetailDataView.Count > 0)
                    {
                        foreach (DataRowView drv in this._salesDetailDataView)
                        {
                            acptAnOdrDetailRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid((Guid)drv[this._salesDetailAcceptAnOrderDataTable.DtlRelationGuidColumn.ColumnName]);
                            if (acptAnOdrDetailRow == null) continue;
                            bool shipmentCntChange = this.SupplierStockCountChangeCheck(acptAnOdrDetailRow);

                            // 現在庫数が変わる場合は元の数量分差し引く
                            if (shipmentCntChange == true)
                            {
                                if (acptAnOdrDetailRow.ShipmentCntDefault != 0)
                                {
                                    shipmentPosCnt -= acptAnOdrDetailRow.ShipmentCntDefault;
                                }
                                else
                                {
                                    shipmentPosCnt -= (acptAnOdrDetailRow.AcceptAnOrderCntDisplay != 0) ? acptAnOdrDetailRow.AcceptAnOrderCntDisplay : acptAnOdrDetailRow.ShipmentCnt;
                                }
                            }
                        }
                    }

                    // 先頭明細から現在庫数を再計算する
                    this._acptAnOdrDetailDataView.RowFilter = selectString;

                    foreach (DataRowView drv in this._acptAnOdrDetailDataView)
                    {
                        acptAnOdrDetailRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid((Guid)drv[this._salesDetailAcceptAnOrderDataTable.DtlRelationGuidColumn.ColumnName]);
                        bool shipmentCntChange = this.SupplierStockCountChangeCheck(acptAnOdrDetailRow);

                        acptAnOdrDetailRow.SupplierStock = shipmentPosCnt;
                        // 現在庫数が変わる場合は加算
                        if (shipmentCntChange == true)
                        {
                            shipmentPosCnt -= (acptAnOdrDetailRow.AcceptAnOrderCntDisplay != 0) ? acptAnOdrDetailRow.AcceptAnOrderCntDisplay : acptAnOdrDetailRow.ShipmentCnt;
                        }
                        acptAnOdrDetailRow.SupplierStockDisplay = shipmentPosCnt;
                        acptAnOdrDetailRow.WarehouseShelfNo = stockInfoRow.WarehouseShelfNo;
                    }

                }
                finally
                {
                    this._salesDetailDataView.RowFilter = defaultRowFilter;
                    this._salesDetailDataView.Sort = defaultSort;
                }
            }
        }

        /// <summary>
        /// 受注データテーブル分割処理
        /// </summary>
        /// <remarks>通常受注データと発注受注データを別テーブルへ分割</remarks>
        /// <br>Update Note: 2011/10/26   鄧潘ハン Redmine#26224</br>
        /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
        /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
        /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
        /// <br>Update Note: 2011/11/25   譚洪 Redmine#7953</br>
        public void DivisionAcceptAnOrderDataTable()
        {
            //-----------------------------------------------------------------------------
            // 発注選択していない場合、分割処理無し
            //-----------------------------------------------------------------------------
            if (!this.ExistOrderInfo()) return;

            //-----------------------------------------------------------------------------
            // 元受注データテーブル退避
            //-----------------------------------------------------------------------------
            SalesInputDataSet.SalesDetailAcceptAnOrderDataTable tempAcptTable = (SalesInputDataSet.SalesDetailAcceptAnOrderDataTable)this._salesDetailAcceptAnOrderDataTable.Copy();

            //-----------------------------------------------------------------------------
            // 発注受注データテーブルクリア
            //-----------------------------------------------------------------------------
            this._salesDetailAcceptAnOrderDataTableForOrder.Rows.Clear();


            foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow row in this._salesDetailAcceptAnOrderDataTable)
            {
                if (row.WarehouseCode == string.Empty) continue;

                SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, row.SalesRowNo);
                SalesInputDataSet.SalesDetailRow salesDetailRowBeforeAddup = null;
                if (this._salesDetailDataTableBeforeAddUp != null) salesDetailRowBeforeAddup = this._salesDetailDataTableBeforeAddUp.FindBySalesSlipNumSalesRowNo(this._salesSlipBeforeAddUp.SalesSlipNum, row.SalesRowNo);
                SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);

                #region 通常受注データ(出荷数入力済み)
                //-----------------------------------------------------------------------------
                // 通常受注データ(出荷数入力済み)
                //-----------------------------------------------------------------------------
                if (salesDetailRow != null)
                {
                    SalesInputDataSet.SalesDetailAcceptAnOrderRow acptRow = tempAcptTable.FindByDtlRelationGuid(row.DtlRelationGuid);

                    // --- ADD 2011/11/25 ------------ >>>>>
                    if ((acptRow.AcceptAnOrderCnt == 0 && acptRow.AddUpEnableCnt == 0)
                        || (acptRow.AcceptAnOrderCnt != 0 && ctDefaultBoCode.Equals(acptRow.BoCode)))
                    {
                        tempAcptTable.RemoveSalesDetailAcceptAnOrderRow(acptRow);
                        continue;
                    }
                    // --- ADD 2011/11/25 ------------ <<<<<

                    if (salesDetailRow.ShipmentCntDisplay != 0)
                    {
                        //-----------------------------------------------------------------------------
                        // 再セット
                        //-----------------------------------------------------------------------------
                        acptRow.EditStatus = ctEDITSTATUS_AllOK;
                        if ((this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                            (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                            (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_ShipmentAddUp))
                        {
                            acptRow.ShipmentCnt = salesDetailRow.ShipmentCntDisplay;
                            acptRow.AcceptAnOrderCnt = salesDetailRow.AcceptAnOrderCnt;
                            acptRow.AcptAnOdrAdjustCnt = 0;
                            acptRow.AcptAnOdrRemainCnt = salesDetailRow.AcceptAnOrderCnt - salesDetailRow.ShipmentCntDisplay;
                            acptRow.AcceptAnOrderCntDisplay = salesDetailRow.ShipmentCntDisplay;
                        }
                        else
                        {
                            acptRow.ShipmentCnt = salesDetailRow.ShipmentCntDisplay;
                            acptRow.AcceptAnOrderCnt = salesDetailRow.ShipmentCntDisplay;
                            acptRow.AcptAnOdrAdjustCnt = 0;
                            acptRow.AcptAnOdrRemainCnt = salesDetailRow.ShipmentCntDisplay;
                            acptRow.AcceptAnOrderCntDisplay = salesDetailRow.ShipmentCntDisplay;
                        }
                    }
                    else if ((uoeOrderDtlRow != null) &&
                             //(uoeOrderDtlRow.BoCode != ctDefaultBoCode) && // DEL 2011/10/26
                             (uoeOrderDtlRow.BoCode != ctDefaultBoCode) && // ADD 2011/11/01
                             (uoeOrderDtlRow.AcceptAnOrderCnt != 0))
                    {
                        if ((this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                            (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                            (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_ShipmentAddUp))
                        {
                            if (salesDetailRowBeforeAddup != null)
                            {
                                acptRow.SupplierFormalSync = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order;
                                acptRow.StockSlipDtlNumSync = 0;
                                // ----DEL 2014/11/10 陳艶丹 REDMINE#43865---- >>>>>
                                //acptRow.AcptAnOdrStatusSrc = salesDetailRowBeforeAddup.AcptAnOdrStatusSrc;
                                //acptRow.AcptAnOdrStatus = salesDetailRowBeforeAddup.AcptAnOdrStatus;
                                //acptRow.SalesSlipDtlNumSrc = salesDetailRowBeforeAddup.SalesSlipDtlNumSrc;
                                //acptRow.SalesSlipNum = salesDetailRowBeforeAddup.SalesSlipNum;
                                //acptRow.SalesSlipDtlNum = salesDetailRowBeforeAddup.SalesSlipDtlNum;
                                // ----DEL 2014/11/10 陳艶丹 REDMINE#43865---- <<<<<

                                //acptRow.ShipmentCnt = salesDetailRowBeforeAddup.ShipmentCnt;
                                //acptRow.ShipmentCntDisplay = salesDetailRowBeforeAddup.ShipmentCntDisplay;
                                //acptRow.ShipmentCntDefault = salesDetailRowBeforeAddup.ShipmentCntDefault;
                                //acptRow.AddUpEnableCnt = salesDetailRowBeforeAddup.AddUpEnableCnt;
                                //acptRow.AlreadyAddUpCnt = salesDetailRowBeforeAddup.AlreadyAddUpCnt;
                                //acptRow.AcceptAnOrderCntDisplay = salesDetailRowBeforeAddup.AcceptAnOrderCntDisplay;
                                //acptRow.AcceptAnOrderCnt = salesDetailRowBeforeAddup.AcceptAnOrderCnt;
                                //acptRow.AcceptAnOrderCntDefault = salesDetailRowBeforeAddup.AcceptAnOrderCntDefault;
                                //acptRow.AcptAnOdrAdjustCnt = salesDetailRowBeforeAddup.AcptAnOdrAdjustCnt;
                                //acptRow.AcptAnOdrRemainCnt = salesDetailRowBeforeAddup.AcptAnOdrRemainCnt;
                                //acptRow.EditStatus = salesDetailRowBeforeAddup.EditStatus; //DEL 2014/11/10 陳艶丹 REDMINE#43865
                            }
                        }
                        else
                        {
                            //-----------------------------------------------------------------------------
                            // 出荷数がゼロの場合、発注受注データ対象となる為、行削除
                            //-----------------------------------------------------------------------------
                            tempAcptTable.RemoveSalesDetailAcceptAnOrderRow(acptRow);
                        }
                    }
                }
                #endregion

                #region 発注受注データ(発注数入力済み)
                //-----------------------------------------------------------------------------
                // 発注受注データ(発注数入力済み)
                //-----------------------------------------------------------------------------
                if (!(((this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                       (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                       (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_ShipmentAddUp)) &&
                      (salesDetailRow.ShipmentCntDisplay == 0)))
                {
                    if ((uoeOrderDtlRow != null) && (uoeOrderDtlRow.AcceptAnOrderCnt != 0))
                    {
                        // 行生成
                        SalesInputDataSet.SalesDetailAcceptAnOrderRow acptRow = this._salesDetailAcceptAnOrderDataTableForOrder.NewSalesDetailAcceptAnOrderRow(); ;
                        // 初期値設定
                        this.CopyCompleteAcceptAnOrderRow(row, acptRow);

                        //-----------------------------------------------------------------------------
                        // 再セット
                        //-----------------------------------------------------------------------------
                        if ((this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                            (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                            (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_ShipmentAddUp))
                        {
                            acptRow.ShipmentCnt = uoeOrderDtlRow.AcceptAnOrderCnt;
                            acptRow.AcceptAnOrderCnt = uoeOrderDtlRow.AcceptAnOrderCnt;
                            acptRow.AcptAnOdrAdjustCnt = 0;
                            acptRow.AcptAnOdrRemainCnt = uoeOrderDtlRow.AcceptAnOrderCnt;
                            acptRow.AcceptAnOrderCntDisplay = uoeOrderDtlRow.AcceptAnOrderCnt;

                            acptRow.AcceptAnOrderNo = 0;
                            acptRow.SalesSlipNum = ctDefaultSalesSlipNum;
                            acptRow.CommonSeqNo = 0;
                            acptRow.SalesSlipDtlNum = 0;
                            acptRow.AcptAnOdrStatusSrc = 0;
                            acptRow.SalesSlipDtlNumSrc = 0;
                            acptRow.SupplierFormalSync = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order;
                            acptRow.StockSlipDtlNumSync = 0;
                            acptRow.WarehouseCode = string.Empty;
                            acptRow.WarehouseName = string.Empty;
                            acptRow.WarehouseShelfNo = string.Empty;
                            acptRow.SupplierStock = 0;
                            acptRow.SupplierStockDisplay = 0;
                        }
                        else
                        {
                            acptRow.ShipmentCnt = uoeOrderDtlRow.AcceptAnOrderCnt;
                            acptRow.AcceptAnOrderCnt = uoeOrderDtlRow.AcceptAnOrderCnt;
                            acptRow.AcptAnOdrAdjustCnt = 0;
                            acptRow.AcptAnOdrRemainCnt = uoeOrderDtlRow.AcceptAnOrderCnt;
                            acptRow.AcceptAnOrderCntDisplay = uoeOrderDtlRow.AcceptAnOrderCnt;

                            acptRow.AcceptAnOrderNo = 0;
                            acptRow.SalesSlipNum = ctDefaultSalesSlipNum;
                            acptRow.CommonSeqNo = 0;
                            acptRow.SalesSlipDtlNum = 0;
                            acptRow.AcptAnOdrStatusSrc = 0;
                            acptRow.SalesSlipDtlNumSrc = 0;
                            acptRow.SupplierFormalSync = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order;
                            acptRow.StockSlipDtlNumSync = 0;
                            acptRow.WarehouseCode = string.Empty;
                            acptRow.WarehouseName = string.Empty;
                            acptRow.WarehouseShelfNo = string.Empty;
                            acptRow.SupplierStock = 0;
                            acptRow.SupplierStockDisplay = 0;
                        }
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        acptRow.AnsDeliDateDiv = salesDetailRow.AnsDeliDateDiv;
                        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                        // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ---------->>>>>>>>>>
                        acptRow.GoodsSpecialNtForFac = salesDetailRow.GoodsSpecialNtForFac;  // 商品規格・特記事項(工場向け)
                        acptRow.GoodsSpecialNtForCOw = salesDetailRow.GoodsSpecialNtForCOw;  // 商品規格・特記事項(カーオーナー向け)
                        acptRow.PrmSetDtlName2ForFac = salesDetailRow.PrmSetDtlName2ForFac;  // 優良設定詳細名称２(工場向け)
                        acptRow.PrmSetDtlName2ForCOw = salesDetailRow.PrmSetDtlName2ForCOw;  // 優良設定詳細名称２(カーオーナー向け)
                        // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ----------<<<<<<<<<<

                        //-----------------------------------------------------------------------------
                        // 発注受注データテーブル追加
                        //-----------------------------------------------------------------------------
                        this._salesDetailAcceptAnOrderDataTableForOrder.AddSalesDetailAcceptAnOrderRow(acptRow);
                    }
                }
                #endregion

                #region 追加受注データ(残あり)
                //-----------------------------------------------------------------------------
                // 追加受注データ(残あり)
                //-----------------------------------------------------------------------------
                if (((this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                     (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                     (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_ShipmentAddUp)) &&
                    (salesDetailRow != null) && (uoeOrderDtlRow != null) &&
                    (row.AddUpEnableCnt - salesDetailRow.ShipmentCntDisplay - uoeOrderDtlRow.AcceptAnOrderCnt != 0))
                {
                    // 行生成
                    SalesInputDataSet.SalesDetailAcceptAnOrderRow acptRow = this._salesDetailAcceptAnOrderDataTableForAdd.NewSalesDetailAcceptAnOrderRow();
                    // 初期値設定
                    this.CopyCompleteAcceptAnOrderRow(row, acptRow);

                    //-----------------------------------------------------------------------------
                    // 再セット
                    //-----------------------------------------------------------------------------
                    acptRow.EditStatus = ctEDITSTATUS_AllOK;

                    acptRow.ShipmentCnt = row.AddUpEnableCnt - salesDetailRow.ShipmentCntDisplay - uoeOrderDtlRow.AcceptAnOrderCnt;
                    acptRow.AcceptAnOrderCnt = row.AddUpEnableCnt - salesDetailRow.ShipmentCntDisplay - uoeOrderDtlRow.AcceptAnOrderCnt;
                    acptRow.AcptAnOdrAdjustCnt = 0;
                    acptRow.AcptAnOdrRemainCnt = row.AddUpEnableCnt - salesDetailRow.ShipmentCntDisplay - uoeOrderDtlRow.AcceptAnOrderCnt;
                    acptRow.AcceptAnOrderCntDisplay = row.AddUpEnableCnt - salesDetailRow.ShipmentCntDisplay - uoeOrderDtlRow.AcceptAnOrderCnt;

                    acptRow.AcceptAnOrderNo = 0;
                    acptRow.SalesSlipNum = ctDefaultSalesSlipNum;
                    acptRow.CommonSeqNo = 0;
                    acptRow.SalesSlipDtlNum = 0;
                    acptRow.AcptAnOdrStatusSrc = 0;
                    acptRow.SalesSlipDtlNumSrc = 0;
                    acptRow.SupplierFormalSync = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Non;
                    acptRow.StockSlipDtlNumSync = 0;
                    //acptRow.WarehouseCode = string.Empty;
                    //acptRow.WarehouseName = string.Empty;
                    //acptRow.WarehouseShelfNo = string.Empty;
                    //acptRow.SupplierStock = 0;
                    //acptRow.SupplierStockDisplay = 0;

                    acptRow.DtlRelationGuid = Guid.NewGuid(); // 新規受注の為、再取得

                    //-----------------------------------------------------------------------------
                    // 追加受注データテーブル追加
                    //-----------------------------------------------------------------------------
                    this._salesDetailAcceptAnOrderDataTableForAdd.AddSalesDetailAcceptAnOrderRow(acptRow);
                }
                #endregion
            }

            //-----------------------------------------------------------------------------
            // 通常受注データテーブル再計算
            //-----------------------------------------------------------------------------
            for (int i = 0; i < tempAcptTable.Count; i++)
            {
                SalesInputDataSet.SalesDetailAcceptAnOrderRow row = tempAcptTable[i];
                //this.SalesDetailRowGoodsPriceSetting(ref row); // 単価情報再セット // 2011/10/29
                this.CalculationSalesMoney(ref row);
                this.CalculationCost(row); // 2011/10/29
            }
            
            //-----------------------------------------------------------------------------
            // 発注受注デーテーブル再計算
            //-----------------------------------------------------------------------------
            for (int i = 0; i < this._salesDetailAcceptAnOrderDataTableForOrder.Count; i++)
            {
                SalesInputDataSet.SalesDetailAcceptAnOrderRow row = this._salesDetailAcceptAnOrderDataTableForOrder[i];
                //this.SalesDetailRowGoodsPriceSetting(ref row); // 単価情報再セット // 2011/10/29
                this.CalculationSalesMoney(ref row);
                this.CalculationCost(row); // 2011/10/29
            }

            //-----------------------------------------------------------------------------
            // 追加受注デーテーブル再計算
            //-----------------------------------------------------------------------------
            for (int i = 0; i < this._salesDetailAcceptAnOrderDataTableForAdd.Count; i++)
            {
                SalesInputDataSet.SalesDetailAcceptAnOrderRow row = this._salesDetailAcceptAnOrderDataTableForAdd[i];
                //this.SalesDetailRowGoodsPriceSetting(ref row); // 単価情報再セット // 2011/10/29
                this.CalculationSalesMoney(ref row);
                this.CalculationCost(row); // 2011/10/29
            }

            //-----------------------------------------------------------------------------
            // DtlRelationGuid再設定前情報保存
            //-----------------------------------------------------------------------------
            this._uoeOrderDtlDataTableCalc = (SalesInputDataSet.UOEOrderDtlDataTable)this._uoeOrderDtlDataTable.Copy();

            //-----------------------------------------------------------------------------
            // DtlRelationGuid再設定
            //-----------------------------------------------------------------------------
            this.ReSettingDtlRelationGuid();

            //-----------------------------------------------------------------------------
            // 通常受注データテーブル入替
            //-----------------------------------------------------------------------------
            this._salesDetailAcceptAnOrderDataTable.Rows.Clear();
            this._salesDetailAcceptAnOrderDataTable = (SalesInputDataSet.SalesDetailAcceptAnOrderDataTable)tempAcptTable.Copy();
        }

        /// <summary>
        /// 発注関連データテーブルDtlRelationGuid再設定処理
        /// </summary>
        private void ReSettingDtlRelationGuid()
        {
            if ((this._salesDetailAcceptAnOrderDataTableForOrder == null) ||
                (this._salesDetailAcceptAnOrderDataTableForOrder.Count == 0) ||
                (this._uoeOrderDtlDataTable == null) ||
                (this._uoeOrderDtlDataTable.Count == 0) ||
                (this._stockTempDataTable == null) ||
                (this._stockTempDataTable.Count == 0)) return;

            for (int i = 0; i < this._salesDetailAcceptAnOrderDataTableForOrder.Count; i++)
            {
                SalesInputDataSet.SalesDetailAcceptAnOrderRow acptRow = this._salesDetailAcceptAnOrderDataTableForOrder[i];
                SalesInputDataSet.UOEOrderDtlRow uoeRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(acptRow.DtlRelationGuid);
                SalesInputDataSet.StockTempRow stockTempRow = this._stockTempDataTable.FindByDtlRelationGuid(acptRow.DtlRelationGuid);
                acptRow.DtlRelationGuid = Guid.NewGuid();
                uoeRow.DtlRelationGuid = acptRow.DtlRelationGuid;
                stockTempRow.DtlRelationGuid = acptRow.DtlRelationGuid;
            }
        }
        #endregion

        #region ●伝票メモ
        /// <summary>
        /// 対象行の伝票メモ入力値有無チェック
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns>true:入力あり false:入力なし</returns>
        public bool SlipMemoInputCheck(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (salesDetailRow != null)
            {
                if ((string.IsNullOrEmpty(salesDetailRow.InsideMemo1)) &&
                    (string.IsNullOrEmpty(salesDetailRow.InsideMemo2)) &&
                    (string.IsNullOrEmpty(salesDetailRow.InsideMemo3)) &&
                    (string.IsNullOrEmpty(salesDetailRow.SlipMemo1)) &&
                    (string.IsNullOrEmpty(salesDetailRow.SlipMemo2)) &&
                    (string.IsNullOrEmpty(salesDetailRow.SlipMemo3)))
                {
                    return false;
                }
            }
            return true;
        }

        /// <summary>
        /// 伝票メモ設定
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="slipMemoList">伝票メモリスト</param>
        /// <param name="insideMemoList">社内メモリスト</param>
        public void SettingSlipMemo(int salesRowNo, List<string> slipMemoList, List<string> insideMemoList)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (slipMemoList.Count > 0) salesDetailRow.SlipMemo1 = slipMemoList[0];
            if (slipMemoList.Count > 1) salesDetailRow.SlipMemo2 = slipMemoList[1];
            if (slipMemoList.Count > 2) salesDetailRow.SlipMemo3 = slipMemoList[2];

            if (insideMemoList.Count > 0) salesDetailRow.InsideMemo1 = insideMemoList[0];
            if (insideMemoList.Count > 1) salesDetailRow.InsideMemo2 = insideMemoList[1];
            if (insideMemoList.Count > 2) salesDetailRow.InsideMemo3 = insideMemoList[2];
        }

        /// <summary>
        /// メモ複写区分に従って、メモ情報をクリアします。
        /// </summary>
        /// <param name="row"></param>
        private void MemoInfoAdjust(ref SalesInputDataSet.SalesDetailRow row)
        {
            // メモ複写区分によって処理分岐
            switch (this._salesSlipInputInitDataAcs.GetAllDefSet().MemoMoveDiv)
            {
                // 全て
                case (int)MemoMoveDiv.All:
                    {
                        break;
                    }
                // 社外メモのみ
                case (int)MemoMoveDiv.SlipMemoOnly:
                    {
                        row.InsideMemo1 = string.Empty;
                        row.InsideMemo2 = string.Empty;
                        row.InsideMemo3 = string.Empty;
                        break;
                    }
                // しない
                case (int)MemoMoveDiv.None:
                    {
                        row.InsideMemo1 = string.Empty;
                        row.InsideMemo2 = string.Empty;
                        row.InsideMemo3 = string.Empty;
                        row.SlipMemo1 = string.Empty;
                        row.SlipMemo2 = string.Empty;
                        row.SlipMemo3 = string.Empty;
                        break;
                    }
            }
        }
        #endregion

        #region ●仕入情報
        #region 仕入情報データテーブル操作
        /// <summary>
        /// 仕入情報存在チェック
        /// </summary>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：仕入先コード、仕入数</remarks>
        public bool ExistStockTemp()
        {
            bool ret = false;

            foreach (SalesInputDataSet.StockTempRow stockTempRow in this._stockTempDataTable)
            {
                // チェック条件：仕入先コード 仕入日 仕入伝票番号
                if ((stockTempRow != null) && 
                    (stockTempRow.SupplierCd != 0) && (stockTempRow.StockDate != DateTime.MinValue) && (stockTempRow.PartySaleSlipNum != string.Empty))
                {
                    ret = true;
                    break;
                }
            }

            return ret;
        }

        /// <summary>
        /// 仕入情報存在チェック
        /// </summary>
        /// <param name="salesRowNo">対象行</param>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：仕入先コード、仕入日、仕入伝票番号</remarks>
        public bool ExistStockTemp(int salesRowNo)
        {
            bool ret = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum.PadLeft(9, '0'), salesRowNo);

            if (row != null)
            {
                SalesInputDataSet.StockTempRow stockTempRow = this.GetStockTempRow(salesRowNo);

                ret = this.ExistStockTemp(stockTempRow);
            }

            return ret;
        }

        /// <summary>
        /// 仕入情報存在チェック
        /// </summary>
        /// <param name="salesRowNo">対象行</param>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：仕入先コード、仕入日、仕入伝票番号</remarks>
        public bool ExistStockTemp(SalesInputDataSet.StockTempRow stockTempRow)
        {
            bool ret = false;

            if (stockTempRow != null)
            {
                // チェック条件：仕入先コード、仕入日、仕入伝票番号
                if ((stockTempRow != null) &&
                    (stockTempRow.SupplierCd != 0) && (stockTempRow.StockDate != DateTime.MinValue) && (stockTempRow.PartySaleSlipNum != string.Empty))
                {
                    ret = true;
                }
            }

            return ret;
        }

        // --- ADD 2012/10/23 Y.Wakita ---------->>>>>
        /// <summary>
        /// 仕入情報存在チェック
        /// </summary>
        /// <param name="salesRowNo">対象行</param>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：仕入先コード、仕入日、仕入伝票番号</remarks>
        public bool ExistStockTemp(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            bool ret = false;

            if (salesDetailRow != null)
            {
                SalesInputDataSet.StockTempRow stockTempRow = this.GetStockTempRow(salesDetailRow);

                ret = this.ExistStockTemp(stockTempRow);
            }

            return ret;
        }

        // --- ADD 2012/10/23 Y.Wakita ----------<<<<<

        /// <summary>
        /// 仕入情報(仕入形式：仕入)存在チェック
        /// </summary>
        /// <param name="salesRowNo">対象行</param>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：仕入先コード、仕入日、仕入伝票番号</remarks>
        public bool ExistStockTempForStock(int salesRowNo)
        {
            bool ret = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum.PadLeft(9, '0'), salesRowNo);

            if (row != null)
            {
                SalesInputDataSet.StockTempRow stockTempRow = this.GetStockTempRow(salesRowNo);

                // チェック条件：仕入先コード、仕入日、仕入伝票番号
                if ((stockTempRow != null) &&
                    (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock) &&
                    (stockTempRow.SupplierCd != 0) && (stockTempRow.StockDate != DateTime.MinValue) && (stockTempRow.PartySaleSlipNum != string.Empty))
                {
                    ret = true;
                }
            }

            return ret;
        }

        /// <summary>
        /// 仕入情報(仕入形式：発注)存在チェック
        /// </summary>
        /// <param name="salesRowNo">対象行</param>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：仕入先コード、仕入日、仕入伝票番号</remarks>
        public bool ExistStockTempForOrder(int salesRowNo)
        {
            bool ret = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum.PadLeft(9, '0'), salesRowNo);

            if (row != null)
            {
                SalesInputDataSet.StockTempRow stockTempRow = this.GetStockTempRow(salesRowNo);

                // チェック条件：仕入先コード、仕入日、仕入伝票番号
                if ((stockTempRow != null) &&
                    (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order) &&
                    (stockTempRow.SupplierCd != 0) && (stockTempRow.StockDate != DateTime.MinValue) && (stockTempRow.PartySaleSlipNum != string.Empty))
                {
                    ret = true;
                }
            }

            return ret;
        }

        /// <summary>
        /// 仕入情報テーブル行追加
        /// </summary>
        /// <param name="salesSlipNum">売上伝票番号</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>追加した売上同時計上オブジェクト</returns>
        private SalesInputDataSet.StockTempRow StockTempAddRow(string salesSlipNum, int salesRowNo)
        {
            // 仕入情報データ行オブジェクト生成
            SalesInputDataSet.StockTempRow row = this._stockTempDataTable.NewStockTempRow();

            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesSlipNum, salesRowNo);

            // 共通キーセット(売上明細データよりセット)
            if (salesDetailRow != null)
            {
                row.DtlRelationGuid = salesDetailRow.DtlRelationGuid;
            }
            else
            {
                row.DtlRelationGuid = Guid.NewGuid();
            }
            row.FileHeaderGuid = Guid.Empty;

            // 仕入情報データテーブルへ追加
            this._stockTempDataTable.AddStockTempRow(row);

            return row;
        }

        // --- ADD 2012/10/23 Y.Wakita ---------->>>>>
        /// <summary>
        /// 仕入情報テーブル行追加
        /// </summary>
        /// <param name="salesSlipNum">売上伝票番号</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>追加した売上同時計上オブジェクト</returns>
        private SalesInputDataSet.StockTempRow StockTempAddRow(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            // 仕入情報データ行オブジェクト生成
            SalesInputDataSet.StockTempRow row = this._stockTempDataTable.NewStockTempRow();

            // 共通キーセット(売上明細データよりセット)
            if (salesDetailRow != null)
            {
                row.DtlRelationGuid = salesDetailRow.DtlRelationGuid;
            }
            else
            {
                row.DtlRelationGuid = Guid.NewGuid();
            }
            row.FileHeaderGuid = Guid.Empty;

            // 仕入情報データテーブルへ追加
            this._stockTempDataTable.AddStockTempRow(row);

            return row;
        }
        // --- ADD 2012/10/23 Y.Wakita ----------<<<<<


        /// <summary>
        /// 仕入情報テーブル削除（オーバーロード）
        /// </summary>
        /// <param name="salesRowNoList">売上行番号リスト</param>
        private void DeleteStockTempRow(List<int> salesRowNoList)
        {
            foreach (int salesRowNo in salesRowNoList)
            {
                this.DeleteStockTempRow(this._currentSalesSlipNum, salesRowNo);
            }
        }

        /// <summary>
        /// 仕入情報テーブル削除（オーバーロード）
        /// </summary>
        /// <param name="salesSlipNum">売上伝票番号</param>
        /// <param name="salesRowNo">売上行番号</param>
        private void DeleteStockTempRow(string salesSlipNum, int salesRowNo)
        {
            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow targetSalesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesSlipNum, salesRowNo);

            // 仕入情報データ行オブジェクト取得
            SalesInputDataSet.StockTempRow targetRow = this._stockTempDataTable.FindByDtlRelationGuid(targetSalesDetailRow.DtlRelationGuid);

            if (targetRow == null) return;

            // --- ADD 2012/11/27 Y.Wakita ---------->>>>>
            // 仕入情報データテーブルの削除情報追加
            SalesInputDataSet.StockTempRow deleteRow = this._stockTempDataTableDelete.FindByDtlRelationGuid(targetRow.DtlRelationGuid);
            if (deleteRow != null)
            {
                this.CopyCompleteStockTempRow(targetRow, deleteRow);
            }
            else
            {
                deleteRow = this._stockTempDataTableDelete.NewStockTempRow();
                this.CopyCompleteStockTempRow(targetRow, deleteRow);
                this._stockTempDataTableDelete.AddStockTempRow(deleteRow);
            }
            // --- ADD 2012/11/27 Y.Wakita ----------<<<<<

            // 仕入情報データテーブルから削除
            this._stockTempDataTable.RemoveStockTempRow(targetRow);
        }

        /// <summary>
        /// 仕入情報テーブル削除（オーバーロード）
        /// </summary>
        /// <param name="dtlRelationGuid">共通キー</param>
        private void DeleteStockTempRow(Guid dtlRelationGuid)
        {
            // 仕入情報データ行オブジェクト取得
            SalesInputDataSet.StockTempRow targetRow = this._stockTempDataTable.FindByDtlRelationGuid(dtlRelationGuid);

            if (targetRow == null) return;

            // --- ADD 2012/11/27 Y.Wakita ---------->>>>>
            // 仕入情報データテーブルの削除情報追加
            SalesInputDataSet.StockTempRow deleteRow = this._stockTempDataTableDelete.FindByDtlRelationGuid(targetRow.DtlRelationGuid);
            if (deleteRow != null)
            {
                this.CopyCompleteStockTempRow(targetRow, deleteRow);
            }
            else
            {
                deleteRow = this._stockTempDataTableDelete.NewStockTempRow();
                this.CopyCompleteStockTempRow(targetRow, deleteRow);
                this._stockTempDataTableDelete.AddStockTempRow(deleteRow);
            }
            // --- ADD 2012/11/27 Y.Wakita ----------<<<<<

            // 仕入情報データテーブルから削除
            this._stockTempDataTable.RemoveStockTempRow(targetRow);
        }

        // --- ADD 2013/01/24 Y.Wakita ---------->>>>>
        /// <summary>
        /// 仕入情報テーブル削除
        /// </summary>
        /// <param name="dtlRelationGuid">共通キー</param>
        public void DeleteStockTempRow2(Guid dtlRelationGuid)
        {
            // 仕入情報データ行オブジェクト取得
            SalesInputDataSet.StockTempRow targetRow = this._stockTempDataTable.FindByDtlRelationGuid(dtlRelationGuid);

            if (targetRow == null) return;

            // 仕入情報データテーブルの削除情報追加
            SalesInputDataSet.StockTempRow deleteRow = this._stockTempDataTableDelete.FindByDtlRelationGuid(targetRow.DtlRelationGuid);
            if (deleteRow != null)
            {
                this.CopyCompleteStockTempRow(targetRow, deleteRow);
            }
            else
            {
                deleteRow = this._stockTempDataTableDelete.NewStockTempRow();
                this.CopyCompleteStockTempRow(targetRow, deleteRow);
                this._stockTempDataTableDelete.AddStockTempRow(deleteRow);
            }
        }
        // --- ADD 2013/01/24 Y.Wakita ---------->>>>>

        /// <summary>
        /// 仕入情報オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNoList">クリア対象売上行番号リスト</param>
        public void ClearStockTempRow(List<int> salesRowNoList)
        {
            foreach (int salesRowNo in salesRowNoList)
            {
                this.ClearStockTempRow(salesRowNo);
            }
        }

        /// <summary>
        /// 仕入情報オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="row">仕入情報オブジェクト</param>
        private void ClearStockTempRow(SalesInputDataSet.StockTempRow row)
        {
            if (row == null) return;

            #region 項目セット
            row.CreateDateTime = DateTime.MinValue; // 作成日時
            row.UpdateDateTime = DateTime.MinValue; // 更新日時
            row.EnterpriseCode = string.Empty; // 企業コード
            row.FileHeaderGuid = Guid.Empty; // GUID
            row.UpdEmployeeCode = string.Empty; // 更新従業員コード
            row.UpdAssemblyId1 = string.Empty; // 更新アセンブリID1
            row.UpdAssemblyId2 = string.Empty; // 更新アセンブリID2
            row.LogicalDeleteCode = 0; // 論理削除区分
            row.SupplierFormal = 0; // 仕入形式
            row.SupplierSlipNo = ctDefaultSupplierSlipNo; // 仕入伝票番号
            row.SectionCode = string.Empty; // 拠点コード
            row.SubSectionCode = 0; // 部門コード
            row.DebitNoteDiv = 0; // 赤伝区分
            row.DebitNLnkSuppSlipNo = 0; // 赤黒連結仕入伝票番号
            row.SupplierSlipCd = 0; // 仕入伝票区分
            row.StockGoodsCd = 0; // 仕入商品区分
            row.AccPayDivCd = 0; // 買掛区分
            row.StockSectionCd = string.Empty; // 仕入拠点コード
            row.StockAddUpSectionCd = string.Empty; // 仕入計上拠点コード
            row.StockSlipUpdateCd = 0; // 仕入伝票更新区分
            row.InputDay = DateTime.MinValue; // 入力日
            row.ArrivalGoodsDay = DateTime.MinValue; // 入荷日
            row.StockDate = DateTime.MinValue; // 仕入日
            row.StockAddUpADate = DateTime.MinValue; // 仕入計上日付
            row.DelayPaymentDiv = 0; // 来勘区分
            row.PayeeCode = 0; // 支払先コード
            row.PayeeSnm = string.Empty; // 支払先略称
            row.SupplierCd = 0; // 仕入先コード
            row.SupplierNm1 = string.Empty; // 仕入先名1
            row.SupplierNm2 = string.Empty; // 仕入先名2
            row.SupplierSnm = string.Empty; // 仕入先略称
            row.BusinessTypeCode = 0; // 業種コード
            row.BusinessTypeName = string.Empty; // 業種名称
            row.SalesAreaCode = 0; // 販売エリアコード
            row.SalesAreaName = string.Empty; // 販売エリア名称
            row.StockInputCode = string.Empty; // 仕入入力者コード
            row.StockInputName = string.Empty; // 仕入入力者名称
            row.StockAgentCode = string.Empty; // 仕入担当者コード
            row.StockAgentName = string.Empty; // 仕入担当者名称
            row.SuppTtlAmntDspWayCd = 0; // 仕入先総額表示方法区分
            row.TtlAmntDispRateApy = 0; // 総額表示掛率適用区分
            row.StockTotalPrice = 0; // 仕入金額合計
            row.StockSubttlPrice = 0; // 仕入金額小計
            row.StockTtlPricTaxInc = 0; // 仕入金額計（税込み）
            row.StockTtlPricTaxExc = 0; // 仕入金額計（税抜き）
            row.StockNetPrice = 0; // 仕入正価金額
            row.StockPriceConsTax = 0; // 仕入金額消費税額
            row.TtlItdedStcOutTax = 0; // 仕入外税対象額合計
            row.TtlItdedStcInTax = 0; // 仕入内税対象額合計
            row.TtlItdedStcTaxFree = 0; // 仕入非課税対象額合計
            row.StockOutTax = 0; // 仕入金額消費税額（外税）
            row.StckPrcConsTaxInclu = 0; // 仕入金額消費税額（内税）
            row.StckDisTtlTaxExc = 0; // 仕入値引金額計（税抜き）
            row.ItdedStockDisOutTax = 0; // 仕入値引外税対象額合計
            row.ItdedStockDisInTax = 0; // 仕入値引内税対象額合計
            row.ItdedStockDisTaxFre = 0; // 仕入値引非課税対象額合計
            row.StockDisOutTax = 0; // 仕入値引消費税額（外税）
            row.StckDisTtlTaxInclu = 0; // 仕入値引消費税額（内税）
            row.TaxAdjust = 0; // 消費税調整額
            row.BalanceAdjust = 0; // 残高調整額
            row.SuppCTaxLayCd = 0; // 仕入先消費税転嫁方式コード
            row.SupplierConsTaxRate = 0; // 仕入先消費税税率
            row.AccPayConsTax = 0; // 買掛消費税
            row.StockFractionProcCd = 0; // 仕入端数処理区分
            row.AutoPayment = 0; // 自動支払区分
            row.AutoPaySlipNum = 0; // 自動支払伝票番号
            row.RetGoodsReasonDiv = 0; // 返品理由コード
            row.RetGoodsReason = string.Empty; // 返品理由
            row.PartySaleSlipNum = string.Empty; // 相手先伝票番号
            row.SupplierSlipNote1 = string.Empty; // 仕入伝票備考1
            row.SupplierSlipNote2 = string.Empty; // 仕入伝票備考2
            row.DetailRowCount = 0; // 明細行数
            row.EdiSendDate = DateTime.MinValue; // ＥＤＩ送信日
            row.EdiTakeInDate = DateTime.MinValue; // ＥＤＩ取込日
            row.UoeRemark1 = string.Empty; // ＵＯＥリマーク１
            row.UoeRemark2 = string.Empty; // ＵＯＥリマーク２
            row.SlipPrintDivCd = 0; // 伝票発行区分
            row.SlipPrintFinishCd = 0; // 伝票発行済区分
            row.StockSlipPrintDate = DateTime.MinValue; // 仕入伝票発行日
            row.SlipPrtSetPaperId = string.Empty; // 伝票印刷設定用帳票ID
            row.SlipAddressDiv = 0; // 伝票住所区分
            row.AddresseeCode = 0; // 納品先コード
            row.AddresseeName = string.Empty; // 納品先名称
            row.AddresseeName2 = string.Empty; // 納品先名称2
            row.AddresseePostNo = string.Empty; // 納品先郵便番号
            row.AddresseeAddr1 = string.Empty; // 納品先住所1(都道府県市区郡・町村・字)
            row.AddresseeAddr3 = string.Empty; // 納品先住所3(番地)
            row.AddresseeAddr4 = string.Empty; // 納品先住所4(アパート名称)
            row.AddresseeTelNo = string.Empty; // 納品先電話番号
            row.AddresseeFaxNo = string.Empty; // 納品先FAX番号
            row.DirectSendingCd = 0; // 直送区分
            row.AcceptAnOrderNo = 0; // 受注番号
            row.SupplierFormalDetail = 0; // 仕入形式
            row.SupplierSlipNoDetail = 0; // 仕入伝票番号
            row.StockRowNo = 0; // 仕入行番号
            row.SectionCodeDetail = string.Empty; // 拠点コード
            row.SubSectionCodeDetail = 0; // 部門コード
            row.CommonSeqNo = 0; // 共通通番
            row.StockSlipDtlNum = 0; // 仕入明細通番
            row.SupplierFormalSrc = 0; // 仕入形式（元）
            row.StockSlipDtlNumSrc = 0; // 仕入明細通番（元）
            row.AcptAnOdrStatusSync = 0; // 受注ステータス（同時）
            row.SalesSlipDtlNumSync = 0; // 売上明細通番（同時）
            row.StockSlipCdDtl = 0; // 仕入伝票区分（明細）
            row.StockInputCodeDetail = string.Empty; // 仕入入力者コード
            row.StockInputNameDetail = string.Empty; // 仕入入力者名称
            row.StockAgentCodeDetail = string.Empty; // 仕入担当者コード
            row.StockAgentNameDetail = string.Empty; // 仕入担当者名称
            row.GoodsKindCode = 0; // 商品属性
            row.GoodsMakerCd = 0; // 商品メーカーコード
            row.MakerName = string.Empty; // メーカー名称
            row.MakerKanaName = string.Empty; // メーカーカナ名称
            row.CmpltMakerKanaName = string.Empty; // メーカーカナ名称（一式）
            row.GoodsNo = string.Empty; // 商品番号
            row.GoodsName = string.Empty; // 商品名称
            row.GoodsNameKana = string.Empty; // 商品名称カナ
            row.GoodsLGroup = 0; // 商品大分類コード
            row.GoodsLGroupName = string.Empty; // 商品大分類名称
            row.GoodsMGroup = 0; // 商品中分類コード
            row.GoodsMGroupName = string.Empty; // 商品中分類名称
            row.BLGroupCode = 0; // BLグループコード
            row.BLGroupName = string.Empty; // BLグループコード名称
            row.BLGoodsCode = 0; // BL商品コード
            row.BLGoodsFullName = string.Empty; // BL商品コード名称（全角）
            row.EnterpriseGanreCode = 0; // 自社分類コード
            row.EnterpriseGanreName = string.Empty; // 自社分類名称
            row.WarehouseCode = string.Empty; // 倉庫コード
            row.WarehouseName = string.Empty; // 倉庫名称
            row.WarehouseShelfNo = string.Empty; // 倉庫棚番
            row.StockOrderDivCd = 0; // 仕入在庫取寄せ区分
            row.OpenPriceDiv = 0; // オープン価格区分
            row.GoodsRateRank = string.Empty; // 商品掛率ランク
            row.CustRateGrpCode = 0; // 得意先掛率グループコード
            row.SuppRateGrpCode = 0; // 仕入先掛率グループコード
            row.ListPriceTaxExcFl = 0; // 定価（税抜，浮動）
            row.ListPriceTaxIncFl = 0; // 定価（税込，浮動）
            row.StockRate = 0; // 仕入率
            row.RateSectStckUnPrc = string.Empty; // 掛率設定拠点（仕入単価）
            row.RateDivStckUnPrc = string.Empty; // 掛率設定区分（仕入単価）
            row.UnPrcCalcCdStckUnPrc = 0; // 単価算出区分（仕入単価）
            row.PriceCdStckUnPrc = 0; // 価格区分（仕入単価）
            row.StdUnPrcStckUnPrc = 0; // 基準単価（仕入単価）
            row.FracProcUnitStcUnPrc = 0; // 端数処理単位（仕入単価）
            row.FracProcStckUnPrc = 0; // 端数処理（仕入単価）
            row.StockUnitPriceFl = 0; // 仕入単価（税抜，浮動）
            row.StockUnitTaxPriceFl = 0; // 仕入単価（税込，浮動）
            row.StockUnitChngDiv = 0; // 仕入単価変更区分
            row.BfStockUnitPriceFl = 0; // 変更前仕入単価（浮動）
            row.BfListPrice = 0; // 変更前定価
            row.RateBLGoodsCode = 0; // BL商品コード（掛率）
            row.RateBLGoodsName = string.Empty; // BL商品コード名称（掛率）
            row.RateGoodsRateGrpCd = 0; // 商品掛率グループコード（掛率）
            row.RateGoodsRateGrpNm = string.Empty; // 商品掛率グループ名称（掛率）
            row.RateBLGroupCode = 0; // BLグループコード（掛率）
            row.RateBLGroupName = string.Empty; // BLグループ名称（掛率）
            row.StockCount = 0; // 仕入数
            row.OrderCnt = 0; // 発注数量
            row.OrderAdjustCnt = 0; // 発注調整数
            row.OrderRemainCnt = 0; // 発注残数
            row.RemainCntUpdDate = DateTime.MinValue; // 残数更新日
            row.StockPriceTaxExc = 0; // 仕入金額（税抜き）
            row.StockPriceTaxInc = 0; // 仕入金額（税込み）
            row.StockGoodsCdDetail = 0; // 仕入商品区分
            row.StockPriceConsTaxDetail = 0; // 仕入金額消費税額
            row.TaxationCode = 0; // 課税区分
            row.StockDtiSlipNote1 = string.Empty; // 仕入伝票明細備考1
            row.SalesCustomerCode = 0; // 販売先コード
            row.SalesCustomerSnm = string.Empty; // 販売先略称
            row.SlipMemo1 = string.Empty; // 伝票メモ１
            row.SlipMemo2 = string.Empty; // 伝票メモ２
            row.SlipMemo3 = string.Empty; // 伝票メモ３
            row.InsideMemo1 = string.Empty; // 社内メモ１
            row.InsideMemo2 = string.Empty; // 社内メモ２
            row.InsideMemo3 = string.Empty; // 社内メモ３
            row.SupplierCdDetail = 0; // 仕入先コード
            row.SupplierSnmDetail = string.Empty; // 仕入先略称
            row.AddresseeCodeDetail = 0; // 納品先コード
            row.AddresseeNameDetail = string.Empty; // 納品先名称
            row.DirectSendingCdDetail = 0; // 直送区分
            row.OrderNumber = string.Empty; // 発注番号
            row.WayToOrder = 0; // 注文方法
            row.DeliGdsCmpltDueDate = DateTime.MinValue; // 納品完了予定日
            row.ExpectDeliveryDate = DateTime.MinValue; // 希望納期
            row.OrderDataCreateDiv = 0; // 発注データ作成区分
            row.OrderDataCreateDate = DateTime.MinValue; // 発注データ作成日
            row.OrderFormIssuedDiv = 0; // 発注書発行済区分
            row.TotalDay = 0; // 締日
            row.NTimeCalcStDate = 0; // 次回勘定開始日
            row.PayeeName = string.Empty; // 支払先名称
            row.PayeeName2 = string.Empty; // 支払先名称２
            row.AddUpEnableCnt = 0; // 計上可能数量
            row.AlreadyAddUpCnt = 0; // 計上済数量
            row.EditStatus = 0; // エディットステータス
            row.DtlRelationGuid = Guid.Empty; // 共通キー
            #endregion
        }

        /// <summary>
        /// 仕入情報オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">クリア対象売上行番号</param>
        public void ClearStockTempRow(int salesRowNo)
        {
            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this.SalesSlip.SalesSlipNum, salesRowNo);

            // 仕入情報データ行オブジェクト取得
            SalesInputDataSet.StockTempRow row = this._stockTempDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);

            if (row != null)
            {
                this.ClearStockTempRow(row);
            }
        }

        /// <summary>
        /// 仕入情報オブジェクトのクリアを行います。
        /// </summary>
        /// <param name="row"></param>
        public void ClearStockTempRowForNew(StockTemp stockTemp)
        {
            //// 売上明細データ行オブジェクト取得
            //SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this.SalesSlip.SalesSlipNum, salesRowNo);

            //// 仕入情報データ行オブジェクト取得
            //SalesInputDataSet.StockTempRow row = this._stockTempDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);

            if (stockTemp != null)
            {
                stockTemp.CreateDateTime = DateTime.MinValue;
                stockTemp.UpdateDateTime = DateTime.MinValue;
                stockTemp.EnterpriseCode = string.Empty;
                stockTemp.FileHeaderGuid = Guid.Empty;
                stockTemp.UpdEmployeeCode = string.Empty;
                stockTemp.UpdAssemblyId1 = string.Empty;
                stockTemp.UpdAssemblyId2 = string.Empty;
                stockTemp.LogicalDeleteCode = 0;
                stockTemp.AcceptAnOrderNo = 0;
                stockTemp.SupplierSlipNo = ctDefaultSupplierSlipNo;
                stockTemp.SupplierSlipNoDetail = ctDefaultSupplierSlipNo;
                stockTemp.CommonSeqNo = 0;
                stockTemp.StockSlipDtlNum = 0;
            }
        }

        //>>>2010/09/27
        /// <summary>
        /// 仕入情報オブジェクトのクリアを行います。
        /// </summary>
        /// <param name="stockTempRow"></param>
        public void ClearStockTempRowForNew(ref SalesInputDataSet.StockTempRow stockTempRow)
        {
            if (stockTempRow != null)
            {
                stockTempRow.CreateDateTime = DateTime.MinValue;
                stockTempRow.UpdateDateTime = DateTime.MinValue;
                stockTempRow.EnterpriseCode = string.Empty;
                stockTempRow.FileHeaderGuid = Guid.Empty;
                stockTempRow.UpdEmployeeCode = string.Empty;
                stockTempRow.UpdAssemblyId1 = string.Empty;
                stockTempRow.UpdAssemblyId2 = string.Empty;
                stockTempRow.LogicalDeleteCode = 0;
                stockTempRow.AcceptAnOrderNo = 0;
                stockTempRow.SupplierSlipNo = ctDefaultSupplierSlipNo;
                stockTempRow.SupplierSlipNoDetail = ctDefaultSupplierSlipNo;
                stockTempRow.CommonSeqNo = 0;
                stockTempRow.StockSlipDtlNum = 0;
            }
        }
        //<<<2010/09/27

        /// <summary>
        /// 対象行の仕入情報を取得します
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <returns>仕入情報データオブジェクト</returns>
        public SalesInputDataSet.StockTempRow GetStockTempRow(int salesRowNo)
        {
            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.StockTempRow stockTempRow = null;
            if (salesDetailRow != null)
            {
                // 仕入情報データ行オブジェクト取得
                stockTempRow = this._stockTempDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);

                // 存在しなかった場合は追加する
                if (stockTempRow == null) stockTempRow = this.StockTempAddRow(this._currentSalesSlipNum, salesRowNo);
            }

            return stockTempRow;
        }

        // --- ADD 2012/10/23 Y.Wakita ---------->>>>>
        /// <summary>
        /// 対象行の仕入情報を取得します
        /// </summary>
        /// <param name="salesDetailRow">売上明細行オブジェクト</param>
        /// <returns>仕入情報データオブジェクト</returns>
        public SalesInputDataSet.StockTempRow GetStockTempRow(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            SalesInputDataSet.StockTempRow stockTempRow = null;
            if (salesDetailRow != null)
            {
                // 仕入情報データ行オブジェクト取得
                stockTempRow = this._stockTempDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);

                // 存在しなかった場合は追加する
                if (stockTempRow == null) stockTempRow = this.StockTempAddRow(salesDetailRow);
            }

            return stockTempRow;
        }
        // --- ADD 2012/10/23 Y.Wakita ----------<<<<<

        /// <summary>
        /// 対象仕入明細行の仕入情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        public void SettingStockTempInfo(int salesRowNo)
        {
            StockTemp stockTemp = null;

            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this.GetSalesDetailRow(salesRowNo);

            if (salesDetailRow != null)
            {
                if ((!string.IsNullOrEmpty(salesDetailRow.GoodsNo)) || (!string.IsNullOrEmpty(salesDetailRow.GoodsName)))
                {
                    stockTemp = this.GetStockTemp(salesRowNo, SalesSlipInputAcs.UnitCostInputType.SalesInfo);
                }
            }

            this._salesSlipStockInfoInputAcs.SettingStockTemp(salesRowNo, stockTemp, salesDetailRow);
        }

        /// <summary>
        /// 仕入情報を取得します。
        /// </summary>
        /// <param name="salesRowNo">仕入情報データ行オブジェクト</param>
        /// <returns>仕入情報データオブジェクト</returns>
        /// <br>Update Note: 2017/04/13 宋剛</br>
        /// <br>管理番号   : 11370030-00 Redmine#49284 売上仕入同時入力 品番無エラー対応</br>
        public StockTemp GetStockTemp(int salesRowNo, SalesSlipInputAcs.UnitCostInputType unitCostInputType)
        {
            SalesInputDataSet.StockTempRow stockTempRow = this.GetStockTempRow(salesRowNo);
            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this.GetSalesDetailRow(salesRowNo);
            StockTemp stockTemp = null;

            if ((stockTempRow != null) && (salesDetailRow != null))
            {
                if (!((salesDetailRow.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount) &&
                    (salesDetailRow.ShipmentCntDisplay == 0)))
                {
                    // テーブルからデータを取得する
                    this.GetUIDataFromStockTempRow(salesDetailRow, stockTempRow, out stockTemp);

                    // UPD 2017/04/13 BY 宋剛 FOR Redmine#49284 売上仕入同時入力 品番無エラー対応 ---->>>>>
                    // if ((stockTemp.GoodsNo != salesDetailRow.GoodsNo) || (stockTemp.GoodsMakerCd != salesDetailRow.GoodsMakerCd))
                    if ((stockTemp.GoodsNo != salesDetailRow.GoodsNo) || (stockTemp.GoodsMakerCd != salesDetailRow.GoodsMakerCd)
                        || ((stockTemp.StockSlipDtlNum == 0) && (stockTemp.GoodsName != salesDetailRow.GoodsName)))
                    // UPD 2017/04/13 BY 宋剛 FOR Redmine#49284 売上仕入同時入力 品番無エラー対応 ----<<<<<
                    {
                        // 仕入情報初期値設定
                        this.StockTempDefaultSetting(salesDetailRow, ref stockTemp);
                    }

                    if (unitCostInputType == SalesSlipInputAcs.UnitCostInputType.SalesInfo)
                    {
                        // 単価設定処理
                        this._salesSlipStockInfoInputAcs.SettingStockTempFromStockUnitPrice(ref stockTemp, salesDetailRow);
                        // 仕入金額計算処理
                        this._salesSlipStockInfoInputAcs.CalculationStockPrice(ref stockTemp);
                    }
                }
            }
            return stockTemp;
        }

        /// <summary>
        /// 仕入情報データ行オブジェクトより、仕入情報データオブジェクトを取得します。
        /// </summary>
        /// <param name="row">仕入情報データ行オブジェクト</param>
        /// <param name="stockTemp">仕入情報データオブジェクト</param>
        private void GetUIDataFromStockTempRow(SalesInputDataSet.SalesDetailRow salesDetailRow, SalesInputDataSet.StockTempRow row, out StockTemp stockTemp)
        {
            stockTemp = GetUIDataFromStockTempRow(salesDetailRow, row);
        }

        /// <summary>
        /// 仕入情報データ行オブジェクトより仕入情報データオブジェクトを取得します。
        /// </summary>
        /// <param name="salesDetailRow">売上明細データ行オブジェクト</param>
        /// <param name="stockTempRow">仕入情報データ行オブジェクト</param>
        /// <returns>仕入情報データオブジェクト</returns>
        private StockTemp GetUIDataFromStockTempRow(SalesInputDataSet.SalesDetailRow salesDetailRow, SalesInputDataSet.StockTempRow stockTempRow)
        {
            StockTemp stockTemp = new StockTemp();

            #region 項目セット
            stockTemp.CreateDateTime = stockTempRow.CreateDateTime; // 作成日時
            stockTemp.UpdateDateTime = stockTempRow.UpdateDateTime; // 更新日時
            stockTemp.EnterpriseCode = stockTempRow.EnterpriseCode; // 企業コード
            stockTemp.FileHeaderGuid = stockTempRow.FileHeaderGuid; // GUID
            stockTemp.UpdEmployeeCode = stockTempRow.UpdEmployeeCode; // 更新従業員コード
            stockTemp.UpdAssemblyId1 = stockTempRow.UpdAssemblyId1; // 更新アセンブリID1
            stockTemp.UpdAssemblyId2 = stockTempRow.UpdAssemblyId2; // 更新アセンブリID2
            stockTemp.LogicalDeleteCode = stockTempRow.LogicalDeleteCode; // 論理削除区分
            stockTemp.SupplierFormal = stockTempRow.SupplierFormal; // 仕入形式
            stockTemp.SupplierSlipNo = stockTempRow.SupplierSlipNo; // 仕入伝票番号
            stockTemp.SectionCode = stockTempRow.SectionCode; // 拠点コード
            stockTemp.SubSectionCode = stockTempRow.SubSectionCode; // 部門コード
            stockTemp.DebitNoteDiv = stockTempRow.DebitNoteDiv; // 赤伝区分
            stockTemp.DebitNLnkSuppSlipNo = stockTempRow.DebitNLnkSuppSlipNo; // 赤黒連結仕入伝票番号
            stockTemp.SupplierSlipCd = stockTempRow.SupplierSlipCd; // 仕入伝票区分
            stockTemp.StockGoodsCd = stockTempRow.StockGoodsCd; // 仕入商品区分
            stockTemp.AccPayDivCd = stockTempRow.AccPayDivCd; // 買掛区分
            stockTemp.StockSectionCd = stockTempRow.StockSectionCd; // 仕入拠点コード
            stockTemp.StockAddUpSectionCd = stockTempRow.StockAddUpSectionCd; // 仕入計上拠点コード
            stockTemp.StockSlipUpdateCd = stockTempRow.StockSlipUpdateCd; // 仕入伝票更新区分
            stockTemp.InputDay = stockTempRow.InputDay; // 入力日
            stockTemp.ArrivalGoodsDay = stockTempRow.ArrivalGoodsDay; // 入荷日
            stockTemp.StockDate = stockTempRow.StockDate; // 仕入日
            stockTemp.StockAddUpADate = stockTempRow.StockAddUpADate; // 仕入計上日付
            stockTemp.DelayPaymentDiv = stockTempRow.DelayPaymentDiv; // 来勘区分
            stockTemp.PayeeCode = stockTempRow.PayeeCode; // 支払先コード
            stockTemp.PayeeSnm = stockTempRow.PayeeSnm; // 支払先略称
            stockTemp.SupplierCd = stockTempRow.SupplierCd; // 仕入先コード
            stockTemp.SupplierNm1 = stockTempRow.SupplierNm1; // 仕入先名1
            stockTemp.SupplierNm2 = stockTempRow.SupplierNm2; // 仕入先名2
            stockTemp.SupplierSnm = stockTempRow.SupplierSnm; // 仕入先略称
            stockTemp.BusinessTypeCode = stockTempRow.BusinessTypeCode; // 業種コード
            stockTemp.BusinessTypeName = stockTempRow.BusinessTypeName; // 業種名称
            stockTemp.SalesAreaCode = stockTempRow.SalesAreaCode; // 販売エリアコード
            stockTemp.SalesAreaName = stockTempRow.SalesAreaName; // 販売エリア名称
            stockTemp.StockInputCode = stockTempRow.StockInputCode; // 仕入入力者コード
            stockTemp.StockInputName = stockTempRow.StockInputName; // 仕入入力者名称
            stockTemp.StockAgentCode = stockTempRow.StockAgentCode; // 仕入担当者コード
            stockTemp.StockAgentName = stockTempRow.StockAgentName; // 仕入担当者名称
            stockTemp.SuppTtlAmntDspWayCd = stockTempRow.SuppTtlAmntDspWayCd; // 仕入先総額表示方法区分
            stockTemp.TtlAmntDispRateApy = stockTempRow.TtlAmntDispRateApy; // 総額表示掛率適用区分
            stockTemp.StockTotalPrice = stockTempRow.StockTotalPrice; // 仕入金額合計
            stockTemp.StockSubttlPrice = stockTempRow.StockSubttlPrice; // 仕入金額小計
            stockTemp.StockTtlPricTaxInc = stockTempRow.StockTtlPricTaxInc; // 仕入金額計（税込み）
            stockTemp.StockTtlPricTaxExc = stockTempRow.StockTtlPricTaxExc; // 仕入金額計（税抜き）
            stockTemp.StockNetPrice = stockTempRow.StockNetPrice; // 仕入正価金額
            stockTemp.StockPriceConsTax = stockTempRow.StockPriceConsTax; // 仕入金額消費税額
            stockTemp.TtlItdedStcOutTax = stockTempRow.TtlItdedStcOutTax; // 仕入外税対象額合計
            stockTemp.TtlItdedStcInTax = stockTempRow.TtlItdedStcInTax; // 仕入内税対象額合計
            stockTemp.TtlItdedStcTaxFree = stockTempRow.TtlItdedStcTaxFree; // 仕入非課税対象額合計
            stockTemp.StockOutTax = stockTempRow.StockOutTax; // 仕入金額消費税額（外税）
            stockTemp.StckPrcConsTaxInclu = stockTempRow.StckPrcConsTaxInclu; // 仕入金額消費税額（内税）
            stockTemp.StckDisTtlTaxExc = stockTempRow.StckDisTtlTaxExc; // 仕入値引金額計（税抜き）
            stockTemp.ItdedStockDisOutTax = stockTempRow.ItdedStockDisOutTax; // 仕入値引外税対象額合計
            stockTemp.ItdedStockDisInTax = stockTempRow.ItdedStockDisInTax; // 仕入値引内税対象額合計
            stockTemp.ItdedStockDisTaxFre = stockTempRow.ItdedStockDisTaxFre; // 仕入値引非課税対象額合計
            stockTemp.StockDisOutTax = stockTempRow.StockDisOutTax; // 仕入値引消費税額（外税）
            stockTemp.StckDisTtlTaxInclu = stockTempRow.StckDisTtlTaxInclu; // 仕入値引消費税額（内税）
            stockTemp.TaxAdjust = stockTempRow.TaxAdjust; // 消費税調整額
            stockTemp.BalanceAdjust = stockTempRow.BalanceAdjust; // 残高調整額
            stockTemp.SuppCTaxLayCd = stockTempRow.SuppCTaxLayCd; // 仕入先消費税転嫁方式コード
            stockTemp.SupplierConsTaxRate = stockTempRow.SupplierConsTaxRate; // 仕入先消費税税率
            stockTemp.AccPayConsTax = stockTempRow.AccPayConsTax; // 買掛消費税
            stockTemp.StockFractionProcCd = stockTempRow.StockFractionProcCd; // 仕入端数処理区分
            stockTemp.AutoPayment = stockTempRow.AutoPayment; // 自動支払区分
            stockTemp.AutoPaySlipNum = stockTempRow.AutoPaySlipNum; // 自動支払伝票番号
            stockTemp.RetGoodsReasonDiv = stockTempRow.RetGoodsReasonDiv; // 返品理由コード
            stockTemp.RetGoodsReason = stockTempRow.RetGoodsReason; // 返品理由
            stockTemp.PartySaleSlipNum = stockTempRow.PartySaleSlipNum; // 相手先伝票番号
            stockTemp.SupplierSlipNote1 = stockTempRow.SupplierSlipNote1; // 仕入伝票備考1
            stockTemp.SupplierSlipNote2 = stockTempRow.SupplierSlipNote2; // 仕入伝票備考2
            stockTemp.DetailRowCount = stockTempRow.DetailRowCount; // 明細行数
            stockTemp.EdiSendDate = stockTempRow.EdiSendDate; // ＥＤＩ送信日
            stockTemp.EdiTakeInDate = stockTempRow.EdiTakeInDate; // ＥＤＩ取込日
            stockTemp.UoeRemark1 = stockTempRow.UoeRemark1; // ＵＯＥリマーク１
            stockTemp.UoeRemark2 = stockTempRow.UoeRemark2; // ＵＯＥリマーク２
            stockTemp.SlipPrintDivCd = stockTempRow.SlipPrintDivCd; // 伝票発行区分
            stockTemp.SlipPrintFinishCd = stockTempRow.SlipPrintFinishCd; // 伝票発行済区分
            stockTemp.StockSlipPrintDate = stockTempRow.StockSlipPrintDate; // 仕入伝票発行日
            stockTemp.SlipPrtSetPaperId = stockTempRow.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
            stockTemp.SlipAddressDiv = stockTempRow.SlipAddressDiv; // 伝票住所区分
            stockTemp.AddresseeCode = stockTempRow.AddresseeCode; // 納品先コード
            stockTemp.AddresseeName = stockTempRow.AddresseeName; // 納品先名称
            stockTemp.AddresseeName2 = stockTempRow.AddresseeName2; // 納品先名称2
            stockTemp.AddresseePostNo = stockTempRow.AddresseePostNo; // 納品先郵便番号
            stockTemp.AddresseeAddr1 = stockTempRow.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
            stockTemp.AddresseeAddr3 = stockTempRow.AddresseeAddr3; // 納品先住所3(番地)
            stockTemp.AddresseeAddr4 = stockTempRow.AddresseeAddr4; // 納品先住所4(アパート名称)
            stockTemp.AddresseeTelNo = stockTempRow.AddresseeTelNo; // 納品先電話番号
            stockTemp.AddresseeFaxNo = stockTempRow.AddresseeFaxNo; // 納品先FAX番号
            stockTemp.DirectSendingCd = stockTempRow.DirectSendingCd; // 直送区分

            stockTemp.AcceptAnOrderNo = stockTempRow.AcceptAnOrderNo; // 受注番号
            stockTemp.SupplierFormalDetail = stockTempRow.SupplierFormalDetail; // 仕入形式
            stockTemp.SupplierSlipNoDetail = stockTempRow.SupplierSlipNoDetail; // 仕入伝票番号
            stockTemp.StockRowNo = stockTempRow.StockRowNo; // 仕入行番号
            stockTemp.SectionCodeDetail = stockTempRow.SectionCodeDetail; // 拠点コード
            stockTemp.SubSectionCodeDetail = stockTempRow.SubSectionCodeDetail; // 部門コード
            stockTemp.CommonSeqNo = stockTempRow.CommonSeqNo; // 共通通番
            stockTemp.StockSlipDtlNum = stockTempRow.StockSlipDtlNum; // 仕入明細通番
            stockTemp.SupplierFormalSrc = stockTempRow.SupplierFormalSrc; // 仕入形式（元）
            stockTemp.StockSlipDtlNumSrc = stockTempRow.StockSlipDtlNumSrc; // 仕入明細通番（元）
            stockTemp.AcptAnOdrStatusSync = stockTempRow.AcptAnOdrStatusSync; // 受注ステータス（同時）
            stockTemp.SalesSlipDtlNumSync = stockTempRow.SalesSlipDtlNumSync; // 売上明細通番（同時）
            stockTemp.StockSlipCdDtl = stockTempRow.StockSlipCdDtl; // 仕入伝票区分（明細）
            stockTemp.StockInputCodeDetail = stockTempRow.StockInputCodeDetail; // 仕入入力者コード
            stockTemp.StockInputNameDetail = stockTempRow.StockInputNameDetail; // 仕入入力者名称
            stockTemp.StockAgentCodeDetail = stockTempRow.StockAgentCodeDetail; // 仕入担当者コード
            stockTemp.StockAgentNameDetail = stockTempRow.StockAgentNameDetail; // 仕入担当者名称
            stockTemp.GoodsKindCode = stockTempRow.GoodsKindCode; // 商品属性
            stockTemp.GoodsMakerCd = stockTempRow.GoodsMakerCd; // 商品メーカーコード
            stockTemp.MakerName = stockTempRow.MakerName; // メーカー名称
            stockTemp.MakerKanaName = stockTempRow.MakerKanaName; // メーカーカナ名称
            stockTemp.GoodsNo = stockTempRow.GoodsNo; // 商品番号
            stockTemp.GoodsName = stockTempRow.GoodsName; // 商品名称
            stockTemp.GoodsNameKana = stockTempRow.GoodsNameKana; // 商品名称カナ
            stockTemp.GoodsLGroup = stockTempRow.GoodsLGroup; // 商品大分類コード
            stockTemp.GoodsLGroupName = stockTempRow.GoodsLGroupName; // 商品大分類名称
            stockTemp.GoodsMGroup = stockTempRow.GoodsMGroup; // 商品中分類コード
            stockTemp.GoodsMGroupName = stockTempRow.GoodsMGroupName; // 商品中分類名称
            stockTemp.BLGroupCode = stockTempRow.BLGroupCode; // BLグループコード
            stockTemp.BLGroupName = stockTempRow.BLGroupName; // BLグループコード名称
            stockTemp.BLGoodsCode = stockTempRow.BLGoodsCode; // BL商品コード
            stockTemp.BLGoodsFullName = stockTempRow.BLGoodsFullName; // BL商品コード名称（全角）
            stockTemp.EnterpriseGanreCode = stockTempRow.EnterpriseGanreCode; // 自社分類コード
            stockTemp.EnterpriseGanreName = stockTempRow.EnterpriseGanreName; // 自社分類名称
            stockTemp.WarehouseCode = stockTempRow.WarehouseCode; // 倉庫コード
            stockTemp.WarehouseName = stockTempRow.WarehouseName; // 倉庫名称
            stockTemp.WarehouseShelfNo = stockTempRow.WarehouseShelfNo; // 倉庫棚番
            stockTemp.StockOrderDivCd = stockTempRow.StockOrderDivCd; // 仕入在庫取寄せ区分
            stockTemp.OpenPriceDiv = stockTempRow.OpenPriceDiv; // オープン価格区分
            stockTemp.GoodsRateRank = stockTempRow.GoodsRateRank; // 商品掛率ランク
            stockTemp.CustRateGrpCode = stockTempRow.CustRateGrpCode; // 得意先掛率グループコード
            stockTemp.SuppRateGrpCode = stockTempRow.SuppRateGrpCode; // 仕入先掛率グループコード
            stockTemp.ListPriceTaxExcFl = stockTempRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            stockTemp.ListPriceTaxIncFl = stockTempRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            stockTemp.StockRate = stockTempRow.StockRate; // 仕入率
            stockTemp.RateSectStckUnPrc = stockTempRow.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
            stockTemp.RateDivStckUnPrc = stockTempRow.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
            stockTemp.UnPrcCalcCdStckUnPrc = stockTempRow.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
            stockTemp.PriceCdStckUnPrc = stockTempRow.PriceCdStckUnPrc; // 価格区分（仕入単価）
            stockTemp.StdUnPrcStckUnPrc = stockTempRow.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
            stockTemp.FracProcUnitStcUnPrc = stockTempRow.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
            stockTemp.FracProcStckUnPrc = stockTempRow.FracProcStckUnPrc; // 端数処理（仕入単価）
            stockTemp.StockUnitPriceFl = stockTempRow.StockUnitPriceFl; // 仕入単価（税抜，浮動）
            stockTemp.StockUnitTaxPriceFl = stockTempRow.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
            stockTemp.StockUnitChngDiv = stockTempRow.StockUnitChngDiv; // 仕入単価変更区分
            stockTemp.BfStockUnitPriceFl = stockTempRow.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
            stockTemp.BfListPrice = stockTempRow.BfListPrice; // 変更前定価
            stockTemp.RateBLGoodsCode = stockTempRow.RateBLGoodsCode; // BL商品コード（掛率）
            stockTemp.RateBLGoodsName = stockTempRow.RateBLGoodsName; // BL商品コード名称（掛率）
            stockTemp.RateGoodsRateGrpCd = stockTempRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            stockTemp.RateGoodsRateGrpNm = stockTempRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            stockTemp.RateBLGroupCode = stockTempRow.RateBLGroupCode; // BLグループコード（掛率）
            stockTemp.RateBLGroupName = stockTempRow.RateBLGroupName; // BLグループ名称（掛率）
            stockTemp.StockCount = stockTempRow.StockCount; // 仕入数
            stockTemp.OrderCnt = stockTempRow.OrderCnt; // 発注数量
            stockTemp.OrderAdjustCnt = stockTempRow.OrderAdjustCnt; // 発注調整数
            stockTemp.OrderRemainCnt = stockTempRow.OrderRemainCnt; // 発注残数
            stockTemp.RemainCntUpdDate = stockTempRow.RemainCntUpdDate; // 残数更新日
            stockTemp.StockPriceTaxExc = stockTempRow.StockPriceTaxExc; // 仕入金額（税抜き）
            stockTemp.StockPriceTaxInc = stockTempRow.StockPriceTaxInc; // 仕入金額（税込み）
            stockTemp.StockGoodsCdDetail = stockTempRow.StockGoodsCdDetail; // 仕入商品区分
            stockTemp.StockPriceConsTaxDetail = stockTempRow.StockPriceConsTaxDetail; // 仕入金額消費税額
            stockTemp.TaxationCode = stockTempRow.TaxationCode; // 課税区分
            stockTemp.StockDtiSlipNote1 = stockTempRow.StockDtiSlipNote1; // 仕入伝票明細備考1
            stockTemp.SalesCustomerCode = stockTempRow.SalesCustomerCode; // 販売先コード
            stockTemp.SalesCustomerSnm = stockTempRow.SalesCustomerSnm; // 販売先略称
            stockTemp.SlipMemo1 = stockTempRow.SlipMemo1; // 伝票メモ１
            stockTemp.SlipMemo2 = stockTempRow.SlipMemo2; // 伝票メモ２
            stockTemp.SlipMemo3 = stockTempRow.SlipMemo3; // 伝票メモ３
            stockTemp.InsideMemo1 = stockTempRow.InsideMemo1; // 社内メモ１
            stockTemp.InsideMemo2 = stockTempRow.InsideMemo2; // 社内メモ２
            stockTemp.InsideMemo3 = stockTempRow.InsideMemo3; // 社内メモ３
            stockTemp.SupplierCdDetail = stockTempRow.SupplierCdDetail; // 仕入先コード
            stockTemp.SupplierSnmDetail = stockTempRow.SupplierSnmDetail; // 仕入先略称
            stockTemp.AddresseeCodeDetail = stockTempRow.AddresseeCodeDetail; // 納品先コード
            stockTemp.AddresseeNameDetail = stockTempRow.AddresseeNameDetail; // 納品先名称
            stockTemp.DirectSendingCdDetail = stockTempRow.DirectSendingCdDetail; // 直送区分
            stockTemp.OrderNumber = stockTempRow.OrderNumber; // 発注番号
            stockTemp.WayToOrder = stockTempRow.WayToOrder; // 注文方法
            stockTemp.DeliGdsCmpltDueDate = stockTempRow.DeliGdsCmpltDueDate; // 納品完了予定日
            stockTemp.ExpectDeliveryDate = stockTempRow.ExpectDeliveryDate; // 希望納期
            stockTemp.OrderDataCreateDiv = stockTempRow.OrderDataCreateDiv; // 発注データ作成区分
            stockTemp.OrderDataCreateDate = stockTempRow.OrderDataCreateDate; // 発注データ作成日
            stockTemp.OrderFormIssuedDiv = stockTempRow.OrderFormIssuedDiv; // 発注書発行済区分
            //stockTemp.SupplierSlipDisplay = stockTempRow.SupplierSlipDisplay; // 仕入伝票区分(画面表示用)
            stockTemp.TotalDay = stockTempRow.TotalDay; // 締日
            stockTemp.NTimeCalcStDate = stockTempRow.NTimeCalcStDate; // 次回勘定開始日
            stockTemp.PayeeName = stockTempRow.PayeeName; // 支払先名称
            stockTemp.PayeeName2 = stockTempRow.PayeeName2; // 支払先名称２
            stockTemp.AddUpEnableCnt = stockTempRow.AddUpEnableCnt; // 計上可能数量
            stockTemp.AlreadyAddUpCnt = stockTempRow.AlreadyAddUpCnt; // 計上済数量
            stockTemp.EditStatus = stockTempRow.EditStatus; // エディットステータス
            stockTemp.DtlRelationGuid = stockTempRow.DtlRelationGuid; // 共通キー
            #endregion

            return stockTemp;
        }

        /// <summary>
        /// 仕入形式取得処理
        /// </summary>
        /// <param name="salesDetailRow">売上明細データ行オブジェクト</param>
        /// <returns>仕入形式</returns>
        public int GetSupplierFormal(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            // 仕入形式初期値
            int retSupplierFormal = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock;

            //if (salesDetailRow.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_AddUpNew)
            //{
            //    //---------------------------------------------------
            //    // 発注画面表示区分
            //    //---------------------------------------------------
            //    int orderScrDisp = 0;
            //    if (this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt() != null) orderScrDisp = this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt().OrderScrDisp;

            //    switch (orderScrDisp)
            //    {
            //        // しない
            //        case 0:
            //            if (this._salesSlipInputInitDataAcs.GetStockTtlSt() != null)
            //            {
            //                //---------------------------------------------------
            //                // 仕入形式初期値
            //                //---------------------------------------------------
            //                retSupplierFormal = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock;
            //            }
            //            else
            //            {
            //                retSupplierFormal = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock;
            //            }
            //            break;
            //        // する
            //        case 1:
            //            retSupplierFormal = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order;
            //            break;
            //        // 受注数＞出荷数の場合
            //        case 2:
            //            if (salesDetailRow.AcceptAnOrderCntDisplay <= salesDetailRow.ShipmentCntDisplay)
            //            {
            //                //---------------------------------------------------
            //                // 仕入形式初期値
            //                //---------------------------------------------------
            //                retSupplierFormal = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock;
            //            }
            //            else
            //            {
            //                retSupplierFormal = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order;
            //            }
            //            break;
            //    }
            //}
            //else
            //{
            //    //---------------------------------------------------
            //    // 仕入形式初期値
            //    //---------------------------------------------------
            //    retSupplierFormal = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock;
            //}
            return retSupplierFormal;
        }

        /// <summary>
        /// 仕入情報初期値設定
        /// </summary>
        /// <param name="salesDetailRow">売上明細データ行オブジェクト</param>
        /// <param name="stockTemp">仕入情報データオブジェクト</param>
        /// <br>Update Note: 2011/08/10 徐錦山</br>
        /// <br>             連番817  売上伝票入力から仕入明細データへ得意先の処理追加</br> 
        private void StockTempDefaultSetting(SalesInputDataSet.SalesDetailRow salesDetailRow, ref StockTemp stockTemp)
        {
            stockTemp = new StockTemp();

            #region 項目設定
            // 伝票情報
            //stockTemp.CreateDateTime = this._salesSlip.CreateDateTime; // 作成日時
            //stockTemp.UpdateDateTime = this._salesSlip.UpdateDateTime; // 更新日時
            //stockTemp.EnterpriseCode = this._salesSlip.EnterpriseCode; // 企業コード
            //stockTemp.FileHeaderGuid = this._salesSlip.FileHeaderGuid; // GUID
            //stockTemp.UpdEmployeeCode = this._salesSlip.UpdEmployeeCode; // 更新従業員コード
            //stockTemp.UpdAssemblyId1 = this._salesSlip.UpdAssemblyId1; // 更新アセンブリID1
            //stockTemp.UpdAssemblyId2 = this._salesSlip.UpdAssemblyId2; // 更新アセンブリID2
            //stockTemp.LogicalDeleteCode = this._salesSlip.LogicalDeleteCode; // 論理削除区分
            stockTemp.SupplierFormal = this.GetSupplierFormal(salesDetailRow); ; // 仕入形式
            stockTemp.SupplierSlipNo = ctDefaultSupplierSlipNo; // 仕入伝票番号
            stockTemp.SectionCode = this._salesSlip.SectionCode; // 拠点コード
            stockTemp.SubSectionCode = this._salesSlip.SubSectionCode; // 部門コード
            stockTemp.DebitNoteDiv = this._salesSlip.DebitNoteDiv; // 赤伝区分
            stockTemp.DebitNLnkSuppSlipNo = 0; // 赤黒連結仕入伝票番号
            stockTemp.SupplierSlipCd = (this._salesSlip.SalesSlipCd == 0) ? 10 : 20; // 仕入伝票区分
            stockTemp.StockGoodsCd = 0; // 仕入商品区分(0:商品)
            stockTemp.AccPayDivCd = 1; // 買掛区分(1:買掛)
            stockTemp.StockSectionCd = this._salesSlip.ResultsAddUpSecCd; // 仕入拠点コード
            //stockTemp.StockAddUpSectionCd = this._salesSlip.StockAddUpSectionCd; // 仕入計上拠点コード
            //stockTemp.StockSlipUpdateCd = this._salesSlip.StockSlipUpdateCd; // 仕入伝票更新区分
            stockTemp.InputDay = this._salesSlip.SearchSlipDate; // 入力日
            stockTemp.ArrivalGoodsDay = this._salesSlip.SalesDate; // 入荷日
            stockTemp.StockDate = this._salesSlip.SalesDate; // 仕入日
            stockTemp.StockAddUpADate = this._salesSlip.SalesDate; // 仕入計上日付
            //stockTemp.DelayPaymentDiv = this._salesSlip.DelayPaymentDiv; // 来勘区分
            //stockTemp.PayeeCode = this._salesSlip.PayeeCode; // 支払先コード
            //stockTemp.PayeeSnm = this._salesSlip.PayeeSnm; // 支払先略称
            stockTemp.SupplierCd = salesDetailRow.SupplierCd; // 仕入先コード
            //stockTemp.SupplierNm1 = this._salesSlip.SupplierNm1; // 仕入先名1
            //stockTemp.SupplierNm2 = this._salesSlip.SupplierNm2; // 仕入先名2
            //stockTemp.SupplierSnm = salesDetailRow.SupplierSnm; // 仕入先略称
            //stockTemp.BusinessTypeCode = this._salesSlip.BusinessTypeCode; // 業種コード
            //stockTemp.BusinessTypeName = this._salesSlip.BusinessTypeName; // 業種名称
            //stockTemp.SalesAreaCode = this._salesSlip.SalesAreaCode; // 販売エリアコード
            //stockTemp.SalesAreaName = this._salesSlip.SalesAreaName; // 販売エリア名称
            stockTemp.StockInputCode = this._salesSlip.InputAgenCd; // 仕入入力者コード
            stockTemp.StockInputName = this._salesSlip.InputAgenNm; // 仕入入力者名称
            stockTemp.StockAgentCode = this._salesSlip.SalesEmployeeCd; // 仕入担当者コード
            stockTemp.StockAgentName = this._salesSlip.SalesEmployeeNm; // 仕入担当者名称
            //stockTemp.SuppTtlAmntDspWayCd = this._salesSlip.SuppTtlAmntDspWayCd; // 仕入先総額表示方法区分
            stockTemp.TtlAmntDispRateApy = this._salesSlip.TtlAmntDispRateApy; // 総額表示掛率適用区分
            //stockTemp.StockTotalPrice = this._salesSlip.StockTotalPrice; // 仕入金額合計
            //stockTemp.StockSubttlPrice = this._salesSlip.StockSubttlPrice; // 仕入金額小計
            //stockTemp.StockTtlPricTaxInc = this._salesSlip.StockTtlPricTaxInc; // 仕入金額計（税込み）
            //stockTemp.StockTtlPricTaxExc = this._salesSlip.StockTtlPricTaxExc; // 仕入金額計（税抜き）
            //stockTemp.StockNetPrice = this._salesSlip.StockNetPrice; // 仕入正価金額
            //stockTemp.StockPriceConsTax = this._salesSlip.StockPriceConsTax; // 仕入金額消費税額
            //stockTemp.TtlItdedStcOutTax = this._salesSlip.TtlItdedStcOutTax; // 仕入外税対象額合計
            //stockTemp.TtlItdedStcInTax = this._salesSlip.TtlItdedStcInTax; // 仕入内税対象額合計
            //stockTemp.TtlItdedStcTaxFree = this._salesSlip.TtlItdedStcTaxFree; // 仕入非課税対象額合計
            //stockTemp.StockOutTax = this._salesSlip.StockOutTax; // 仕入金額消費税額（外税）
            //stockTemp.StckPrcConsTaxInclu = this._salesSlip.StckPrcConsTaxInclu; // 仕入金額消費税額（内税）
            //stockTemp.StckDisTtlTaxExc = this._salesSlip.StckDisTtlTaxExc; // 仕入値引金額計（税抜き）
            //stockTemp.ItdedStockDisOutTax = this._salesSlip.ItdedStockDisOutTax; // 仕入値引外税対象額合計
            //stockTemp.ItdedStockDisInTax = this._salesSlip.ItdedStockDisInTax; // 仕入値引内税対象額合計
            //stockTemp.ItdedStockDisTaxFre = this._salesSlip.ItdedStockDisTaxFre; // 仕入値引非課税対象額合計
            //stockTemp.StockDisOutTax = this._salesSlip.StockDisOutTax; // 仕入値引消費税額（外税）
            //stockTemp.StckDisTtlTaxInclu = this._salesSlip.StckDisTtlTaxInclu; // 仕入値引消費税額（内税）
            //stockTemp.TaxAdjust = this._salesSlip.TaxAdjust; // 消費税調整額
            //stockTemp.BalanceAdjust = this._salesSlip.BalanceAdjust; // 残高調整額
            //stockTemp.SuppCTaxLayCd = this._salesSlip.SuppCTaxLayCd; // 仕入先消費税転嫁方式コード
            stockTemp.SupplierConsTaxRate = this._salesSlip.ConsTaxRate; // 仕入先消費税税率
            //stockTemp.AccPayConsTax = this._salesSlip.AccPayConsTax; // 買掛消費税
            //stockTemp.StockFractionProcCd = this._salesSlip.StockFractionProcCd; // 仕入端数処理区分
            //stockTemp.AutoPayment = this._salesSlip.AutoPayment; // 自動支払区分
            //stockTemp.AutoPaySlipNum = this._salesSlip.AutoPaySlipNum; // 自動支払伝票番号
            //stockTemp.RetGoodsReasonDiv = this._salesSlip.RetGoodsReasonDiv; // 返品理由コード
            //stockTemp.RetGoodsReason = this._salesSlip.RetGoodsReason; // 返品理由
            //stockTemp.PartySaleSlipNum = this._salesSlip.PartySaleSlipNum; // 相手先伝票番号
            //stockTemp.SupplierSlipNote1 = this._salesSlip.SupplierSlipNote1; // 仕入伝票備考1
            //stockTemp.SupplierSlipNote2 = this._salesSlip.SupplierSlipNote2; // 仕入伝票備考2
            //stockTemp.DetailRowCount = this._salesSlip.DetailRowCount; // 明細行数
            //stockTemp.EdiSendDate = this._salesSlip.EdiSendDate; // ＥＤＩ送信日
            //stockTemp.EdiTakeInDate = this._salesSlip.EdiTakeInDate; // ＥＤＩ取込日
            stockTemp.UoeRemark1 = this._salesSlip.UoeRemark1; // ＵＯＥリマーク１
            stockTemp.UoeRemark2 = this._salesSlip.UoeRemark2; // ＵＯＥリマーク２
            //stockTemp.SlipPrintDivCd = this._salesSlip.SlipPrintDivCd; // 伝票発行区分
            //stockTemp.SlipPrintFinishCd = this._salesSlip.SlipPrintFinishCd; // 伝票発行済区分
            //stockTemp.StockSlipPrintDate = this._salesSlip.StockSlipPrintDate; // 仕入伝票発行日
            //stockTemp.SlipPrtSetPaperId = this._salesSlip.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
            //stockTemp.SlipAddressDiv = this._salesSlip.SlipAddressDiv; // 伝票住所区分
            //stockTemp.AddresseeCode = this._salesSlip.AddresseeCode; // 納品先コード
            //stockTemp.AddresseeName = this._salesSlip.AddresseeName; // 納品先名称
            //stockTemp.AddresseeName2 = this._salesSlip.AddresseeName2; // 納品先名称2
            //stockTemp.AddresseePostNo = this._salesSlip.AddresseePostNo; // 納品先郵便番号
            //stockTemp.AddresseeAddr1 = this._salesSlip.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
            //stockTemp.AddresseeAddr3 = this._salesSlip.AddresseeAddr3; // 納品先住所3(番地)
            //stockTemp.AddresseeAddr4 = this._salesSlip.AddresseeAddr4; // 納品先住所4(アパート名称)
            //stockTemp.AddresseeTelNo = this._salesSlip.AddresseeTelNo; // 納品先電話番号
            //stockTemp.AddresseeFaxNo = this._salesSlip.AddresseeFaxNo; // 納品先FAX番号
            //stockTemp.DirectSendingCd = this._salesSlip.DirectSendingCd; // 直送区分

            // 明細情報
            stockTemp.AcceptAnOrderNo = salesDetailRow.AcceptAnOrderNo; // 受注番号
            stockTemp.SupplierFormalDetail = this.GetSupplierFormal(salesDetailRow); ; // 仕入形式
            stockTemp.SupplierSlipNoDetail = ctDefaultSupplierSlipNo; // 仕入伝票番号
            //stockTemp.StockRowNo = salesDetailRow.StockRowNo; // 仕入行番号
            stockTemp.SectionCodeDetail = this._salesSlip.SectionCode; // 拠点コード
            stockTemp.SubSectionCodeDetail = this._salesSlip.SubSectionCode; // 部門コード
            stockTemp.CommonSeqNo = salesDetailRow.CommonSeqNo; // 共通通番
            //stockTemp.StockSlipDtlNum = salesDetailRow.StockSlipDtlNum; // 仕入明細通番
            //stockTemp.SupplierFormalSrc = salesDetailRow.SupplierFormalSrc; // 仕入形式（元）
            //stockTemp.StockSlipDtlNumSrc = salesDetailRow.StockSlipDtlNumSrc; // 仕入明細通番（元）
            //stockTemp.AcptAnOdrStatusSync = salesDetailRow.AcptAnOdrStatusSync; // 受注ステータス（同時）
            //stockTemp.SalesSlipDtlNumSync = salesDetailRow.SalesSlipDtlNumSync; // 売上明細通番（同時）
            //stockTemp.StockSlipCdDtl = salesDetailRow.StockSlipCdDtl; // 仕入伝票区分（明細）
            //stockTemp.StockInputCodeDetail = salesDetailRow.StockInputCodeDetail; // 仕入入力者コード
            //stockTemp.StockInputNameDetail = salesDetailRow.StockInputNameDetail; // 仕入入力者名称
            //stockTemp.StockAgentCodeDetail = salesDetailRow.StockAgentCodeDetail; // 仕入担当者コード
            //stockTemp.StockAgentNameDetail = salesDetailRow.StockAgentNameDetail; // 仕入担当者名称
            stockTemp.GoodsKindCode = salesDetailRow.GoodsKindCode; // 商品属性
            stockTemp.GoodsMakerCd = salesDetailRow.GoodsMakerCd; // 商品メーカーコード
            stockTemp.MakerName = salesDetailRow.MakerName; // メーカー名称
            stockTemp.MakerKanaName = salesDetailRow.MakerKanaName; // メーカーカナ名称
            stockTemp.CmpltMakerKanaName = salesDetailRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            stockTemp.GoodsNo = salesDetailRow.GoodsNo; // 商品番号
            stockTemp.GoodsName = salesDetailRow.GoodsName; // 商品名称
            stockTemp.GoodsNameKana = salesDetailRow.GoodsNameKana; // 商品名称カナ
            stockTemp.GoodsLGroup = salesDetailRow.GoodsLGroup; // 商品大分類コード
            stockTemp.GoodsLGroupName = salesDetailRow.GoodsLGroupName; // 商品大分類名称
            stockTemp.GoodsMGroup = salesDetailRow.GoodsMGroup; // 商品中分類コード
            stockTemp.GoodsMGroupName = salesDetailRow.GoodsMGroupName; // 商品中分類名称
            stockTemp.BLGroupCode = salesDetailRow.BLGroupCode; // BLグループコード
            stockTemp.BLGroupName = salesDetailRow.BLGroupName; // BLグループコード名称
            stockTemp.BLGoodsCode = salesDetailRow.BLGoodsCode; // BL商品コード
            stockTemp.BLGoodsFullName = salesDetailRow.BLGoodsFullName; // BL商品コード名称（全角）
            stockTemp.EnterpriseGanreCode = salesDetailRow.EnterpriseGanreCode; // 自社分類コード
            stockTemp.EnterpriseGanreName = salesDetailRow.EnterpriseGanreName; // 自社分類名称
            stockTemp.WarehouseCode = salesDetailRow.WarehouseCode; // 倉庫コード
            stockTemp.WarehouseName = salesDetailRow.WarehouseName; // 倉庫名称
            stockTemp.WarehouseShelfNo = salesDetailRow.WarehouseShelfNo; // 倉庫棚番
            //stockTemp.StockOrderDivCd = salesDetailRow.StockOrderDivCd; // 仕入在庫取寄せ区分
            stockTemp.OpenPriceDiv = salesDetailRow.OpenPriceDiv; // オープン価格区分
            stockTemp.GoodsRateRank = salesDetailRow.GoodsRateRank; // 商品掛率ランク
            stockTemp.CustRateGrpCode = salesDetailRow.CustRateGrpCode; // 得意先掛率グループコード
            //stockTemp.SuppRateGrpCode = salesDetailRow.SuppRateGrpCode; // 仕入先掛率グループコード
            stockTemp.ListPriceTaxExcFl = salesDetailRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            stockTemp.ListPriceTaxIncFl = salesDetailRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            //stockTemp.StockRate = salesDetailRow.StockRate; // 仕入率
            //stockTemp.RateSectStckUnPrc = salesDetailRow.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
            //stockTemp.RateDivStckUnPrc = salesDetailRow.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
            //stockTemp.UnPrcCalcCdStckUnPrc = salesDetailRow.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
            //stockTemp.PriceCdStckUnPrc = salesDetailRow.PriceCdStckUnPrc; // 価格区分（仕入単価）
            //stockTemp.StdUnPrcStckUnPrc = salesDetailRow.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
            //stockTemp.FracProcUnitStcUnPrc = salesDetailRow.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
            //stockTemp.FracProcStckUnPrc = salesDetailRow.FracProcStckUnPrc; // 端数処理（仕入単価）
            //stockTemp.StockUnitPriceFl = salesDetailRow.StockUnitPriceFl; // 仕入単価（税抜，浮動）
            //stockTemp.StockUnitTaxPriceFl = salesDetailRow.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
            //stockTemp.StockUnitChngDiv = salesDetailRow.StockUnitChngDiv; // 仕入単価変更区分
            //stockTemp.BfStockUnitPriceFl = salesDetailRow.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
            stockTemp.BfListPrice = salesDetailRow.BfListPrice; // 変更前定価
            stockTemp.RateBLGoodsCode = salesDetailRow.RateBLGoodsCode; // BL商品コード（掛率）
            stockTemp.RateBLGoodsName = salesDetailRow.RateBLGoodsName; // BL商品コード名称（掛率）
            stockTemp.RateGoodsRateGrpCd = salesDetailRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            stockTemp.RateGoodsRateGrpNm = salesDetailRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            stockTemp.RateBLGroupCode = salesDetailRow.RateBLGroupCode; // BLグループコード（掛率）
            stockTemp.RateBLGroupName = salesDetailRow.RateBLGroupName; // BLグループ名称（掛率）
            //>>>2010/09/29
            //stockTemp.StockCount = salesDetailRow.ShipmentCntDisplay; // 仕入数
            //stockTemp.OrderCnt = salesDetailRow.ShipmentCntDisplay; // 発注数量
            //stockTemp.OrderAdjustCnt = 0; // 発注調整数
            //stockTemp.OrderRemainCnt = salesDetailRow.ShipmentCntDisplay; // 発注残数
            int sign = (this._salesSlip.SalesSlipCd != 0) ? -1 : 1;
            stockTemp.StockCount = salesDetailRow.ShipmentCntDisplay * sign; // 仕入数
            stockTemp.OrderCnt = salesDetailRow.ShipmentCntDisplay * sign; // 発注数量
            stockTemp.OrderAdjustCnt = 0; // 発注調整数
            stockTemp.OrderRemainCnt = salesDetailRow.ShipmentCntDisplay * sign; // 発注残数
            //<<<2010/09/29
            //stockTemp.RemainCntUpdDate = salesDetailRow.RemainCntUpdDate; // 残数更新日
            //stockTemp.StockPriceTaxExc = salesDetailRow.StockPriceTaxExc; // 仕入金額（税抜き）
            //stockTemp.StockPriceTaxInc = salesDetailRow.StockPriceTaxInc; // 仕入金額（税込み）
            stockTemp.StockGoodsCdDetail = 0; // 仕入商品区分
            //stockTemp.StockPriceConsTaxDetail = salesDetailRow.StockPriceConsTaxDetail; // 仕入金額消費税額
            stockTemp.TaxationCode = salesDetailRow.TaxationDivCd; // 課税区分
            //stockTemp.StockDtiSlipNote1 = salesDetailRow.StockDtiSlipNote1; // 仕入伝票明細備考1
            //stockTemp.SalesCustomerCode = salesDetailRow.SalesCustomerCode; // 販売先コード
            //stockTemp.SalesCustomerSnm = salesDetailRow.SalesCustomerSnm; // 販売先略称
            // ------ 2011/08/10 XUJS ADD STA ------>>>>>>
            stockTemp.SalesCustomerCode = this._salesSlip.CustomerCode; // 販売先コード
            stockTemp.SalesCustomerSnm = this._salesSlip.CustomerSnm;   // 販売先略称
            // ------ 2011/08/10 XUJS ADD END ------<<<<<<
            //stockTemp.SlipMemo1 = salesDetailRow.SlipMemo1; // 伝票メモ１
            //stockTemp.SlipMemo2 = salesDetailRow.SlipMemo2; // 伝票メモ２
            //stockTemp.SlipMemo3 = salesDetailRow.SlipMemo3; // 伝票メモ３
            //stockTemp.InsideMemo1 = salesDetailRow.InsideMemo1; // 社内メモ１
            //stockTemp.InsideMemo2 = salesDetailRow.InsideMemo2; // 社内メモ２
            //stockTemp.InsideMemo3 = salesDetailRow.InsideMemo3; // 社内メモ３
            //stockTemp.SupplierCdDetail = salesDetailRow.SupplierCdDetail; // 仕入先コード
            //stockTemp.SupplierSnmDetail = salesDetailRow.SupplierSnmDetail; // 仕入先略称
            //stockTemp.AddresseeCodeDetail = salesDetailRow.AddresseeCodeDetail; // 納品先コード
            //stockTemp.AddresseeNameDetail = salesDetailRow.AddresseeNameDetail; // 納品先名称
            //stockTemp.DirectSendingCdDetail = salesDetailRow.DirectSendingCdDetail; // 直送区分
            stockTemp.ExpectDeliveryDate = DateTime.Today; // 希望納期
            stockTemp.OrderDataCreateDiv = 0; // 発注データ作成区分
            //stockTemp.DeliGdsCmpltDueDate = salesDetailRow.DeliGdsCmpltDueDate; // 納品完了予定日
            //stockTemp.ExpectDeliveryDate = salesDetailRow.ExpectDeliveryDate; // 希望納期
            //stockTemp.OrderDataCreateDiv = salesDetailRow.OrderDataCreateDiv; // 発注データ作成区分
            //stockTemp.OrderDataCreateDate = salesDetailRow.OrderDataCreateDate; // 発注データ作成日
            //stockTemp.OrderFormIssuedDiv = salesDetailRow.OrderFormIssuedDiv; // 発注書発行済区分
            //stockTemp.TotalDay = salesDetailRow.TotalDay; // 締日
            //stockTemp.NTimeCalcStDate = salesDetailRow.NTimeCalcStDate; // 次回勘定開始日
            //stockTemp.PayeeName = salesDetailRow.PayeeName; // 支払先名称
            //stockTemp.PayeeName2 = salesDetailRow.PayeeName2; // 支払先名称２
            stockTemp.AddUpEnableCnt = salesDetailRow.AddUpEnableCnt; // 計上可能数量
            stockTemp.AlreadyAddUpCnt = salesDetailRow.AlreadyAddUpCnt; // 計上済数量
            stockTemp.EditStatus = salesDetailRow.EditStatus; // エディットステータス
            stockTemp.DtlRelationGuid = salesDetailRow.DtlRelationGuid; // 共通キー

            // 仕入先情報
            Supplier supplier;
            int status = this._supplierAcs.Read(out supplier, this._enterpriseCode, salesDetailRow.SupplierCd);
            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            if (supplier == null)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            }
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplier(ref stockTemp, supplier);
            }

            // 単価情報
            int stockFractionProcCd = this._supplierAcs.GetStockFractionProcCd(this._enterpriseCode, salesDetailRow.SupplierCd, SupplierAcs.StockFracProcMoneyDiv.CnsTaxFrcProcCd);
            int taxFracProcCd = 0;
            double taxFracProcUnit = 0;
            this._salesSlipInputInitDataAcs.GetSalesFractionProcInfo(SalesSlipInputInitDataAcs.ctFracProcMoneyDiv_Tax, stockFractionProcCd, 0, out taxFracProcUnit, out taxFracProcCd);
            stockTemp.StockFractionProcCd = taxFracProcCd;

            if (stockTemp.SupplierSlipNo == ctDefaultSupplierSlipNo)
            {
                // 単価設定処理
                this._salesSlipStockInfoInputAcs.SettingStockTempFromStockUnitPrice(ref stockTemp, salesDetailRow);
            }
            #endregion
        }

        /// <summary>
        /// 仕入情報初期値設定(保存前用)
        /// </summary>
        /// <param name="salesDetailRow">売上明細データ行オブジェクト</param>
        /// <param name="stockTemp">仕入情報データオブジェクト</param>
        /// <br>Update Note: 2013/12/19 陳健</br>
        /// <br>             Redmine#41550 売上伝票入力消費税8%増税対応。</br>
        /// <br>管理番号   : 11370030-00 2017/04/13 譚洪</br>
        /// <br>             Redmine#49283 仕入担当参照区分を追加</br>
        private void StockTempDefaultSettingBeforeSave(SalesInputDataSet.SalesDetailRow salesDetailRow, ref StockTemp stockTemp)
        {
            #region 項目設定
            // 伝票情報
            //stockTemp.CreateDateTime = this._salesSlip.CreateDateTime; // 作成日時
            //stockTemp.UpdateDateTime = this._salesSlip.UpdateDateTime; // 更新日時
            //stockTemp.EnterpriseCode = this._salesSlip.EnterpriseCode; // 企業コード
            //stockTemp.FileHeaderGuid = this._salesSlip.FileHeaderGuid; // GUID
            //stockTemp.UpdEmployeeCode = this._salesSlip.UpdEmployeeCode; // 更新従業員コード
            //stockTemp.UpdAssemblyId1 = this._salesSlip.UpdAssemblyId1; // 更新アセンブリID1
            //stockTemp.UpdAssemblyId2 = this._salesSlip.UpdAssemblyId2; // 更新アセンブリID2
            //stockTemp.LogicalDeleteCode = this._salesSlip.LogicalDeleteCode; // 論理削除区分
            //stockTemp.SupplierFormal = this.GetSupplierFormal(salesDetailRow); ; // 仕入形式
            //stockTemp.SupplierSlipNo = ctDefaultSupplierSlipNo; // 仕入伝票番号
            stockTemp.SectionCode = this._salesSlip.SectionCode; // 拠点コード
            stockTemp.SubSectionCode = this._salesSlip.SubSectionCode; // 部門コード
            stockTemp.DebitNoteDiv = this._salesSlip.DebitNoteDiv; // 赤伝区分
            stockTemp.DebitNLnkSuppSlipNo = 0; // 赤黒連結仕入伝票番号
            stockTemp.SupplierSlipCd = (this._salesSlip.SalesSlipCd == 0) ? 10 : 20; // 仕入伝票区分
            stockTemp.StockGoodsCd = 0; // 仕入商品区分(0:商品)
            stockTemp.AccPayDivCd = 1; // 買掛区分(1:買掛)
            stockTemp.StockSectionCd = this._salesSlip.ResultsAddUpSecCd; // 仕入拠点コード
            //stockTemp.StockAddUpSectionCd = this._salesSlip.StockAddUpSectionCd; // 仕入計上拠点コード
            //stockTemp.StockSlipUpdateCd = this._salesSlip.StockSlipUpdateCd; // 仕入伝票更新区分
            stockTemp.InputDay = this._salesSlip.SearchSlipDate; // 入力日
            stockTemp.ArrivalGoodsDay = salesDetailRow.StockDate; // 入荷日
            stockTemp.StockDate = salesDetailRow.StockDate; // 仕入日
            stockTemp.StockAddUpADate = salesDetailRow.StockDate; // 仕入計上日付
            //stockTemp.DelayPaymentDiv = this._salesSlip.DelayPaymentDiv; // 来勘区分
            //stockTemp.PayeeCode = this._salesSlip.PayeeCode; // 支払先コード
            //stockTemp.PayeeSnm = this._salesSlip.PayeeSnm; // 支払先略称
            stockTemp.SupplierCd = salesDetailRow.SupplierCdForStock; // 仕入先コード
            //stockTemp.SupplierNm1 = this._salesSlip.SupplierNm1; // 仕入先名1
            //stockTemp.SupplierNm2 = this._salesSlip.SupplierNm2; // 仕入先名2
            //stockTemp.SupplierSnm = salesDetailRow.SupplierSnm; // 仕入先略称
            //stockTemp.BusinessTypeCode = this._salesSlip.BusinessTypeCode; // 業種コード
            //stockTemp.BusinessTypeName = this._salesSlip.BusinessTypeName; // 業種名称
            //stockTemp.SalesAreaCode = this._salesSlip.SalesAreaCode; // 販売エリアコード
            //stockTemp.SalesAreaName = this._salesSlip.SalesAreaName; // 販売エリア名称
            stockTemp.StockInputCode = this._salesSlip.InputAgenCd; // 仕入入力者コード
            stockTemp.StockInputName = this._salesSlip.InputAgenNm; // 仕入入力者名称
            stockTemp.StockAgentCode = this._salesSlip.SalesEmployeeCd; // 仕入担当者コード
            stockTemp.StockAgentName = this._salesSlip.SalesEmployeeNm; // 仕入担当者名称
            //stockTemp.SuppTtlAmntDspWayCd = this._salesSlip.SuppTtlAmntDspWayCd; // 仕入先総額表示方法区分
            stockTemp.TtlAmntDispRateApy = this._salesSlip.TtlAmntDispRateApy; // 総額表示掛率適用区分
            //stockTemp.StockTotalPrice = this._salesSlip.StockTotalPrice; // 仕入金額合計
            //stockTemp.StockSubttlPrice = this._salesSlip.StockSubttlPrice; // 仕入金額小計
            //stockTemp.StockTtlPricTaxInc = this._salesSlip.StockTtlPricTaxInc; // 仕入金額計（税込み）
            //stockTemp.StockTtlPricTaxExc = this._salesSlip.StockTtlPricTaxExc; // 仕入金額計（税抜き）
            //stockTemp.StockNetPrice = this._salesSlip.StockNetPrice; // 仕入正価金額
            //stockTemp.StockPriceConsTax = this._salesSlip.StockPriceConsTax; // 仕入金額消費税額
            //stockTemp.TtlItdedStcOutTax = this._salesSlip.TtlItdedStcOutTax; // 仕入外税対象額合計
            //stockTemp.TtlItdedStcInTax = this._salesSlip.TtlItdedStcInTax; // 仕入内税対象額合計
            //stockTemp.TtlItdedStcTaxFree = this._salesSlip.TtlItdedStcTaxFree; // 仕入非課税対象額合計
            //stockTemp.StockOutTax = this._salesSlip.StockOutTax; // 仕入金額消費税額（外税）
            //stockTemp.StckPrcConsTaxInclu = this._salesSlip.StckPrcConsTaxInclu; // 仕入金額消費税額（内税）
            //stockTemp.StckDisTtlTaxExc = this._salesSlip.StckDisTtlTaxExc; // 仕入値引金額計（税抜き）
            //stockTemp.ItdedStockDisOutTax = this._salesSlip.ItdedStockDisOutTax; // 仕入値引外税対象額合計
            //stockTemp.ItdedStockDisInTax = this._salesSlip.ItdedStockDisInTax; // 仕入値引内税対象額合計
            //stockTemp.ItdedStockDisTaxFre = this._salesSlip.ItdedStockDisTaxFre; // 仕入値引非課税対象額合計
            //stockTemp.StockDisOutTax = this._salesSlip.StockDisOutTax; // 仕入値引消費税額（外税）
            //stockTemp.StckDisTtlTaxInclu = this._salesSlip.StckDisTtlTaxInclu; // 仕入値引消費税額（内税）
            //stockTemp.TaxAdjust = this._salesSlip.TaxAdjust; // 消費税調整額
            //stockTemp.BalanceAdjust = this._salesSlip.BalanceAdjust; // 残高調整額
            //stockTemp.SuppCTaxLayCd = this._salesSlip.SuppCTaxLayCd; // 仕入先消費税転嫁方式コード
            //stockTemp.SupplierConsTaxRate = this._salesSlip.ConsTaxRate; // 仕入先消費税税率    // DEL 陳健 2013/12/19 Redmine#41550 No.5
            stockTemp.SupplierConsTaxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesDetailRow.StockDate);   // 仕入先消費税税率    // ADD 陳健 2013/12/19 Redmine#41550 No.5
            //stockTemp.AccPayConsTax = this._salesSlip.AccPayConsTax; // 買掛消費税
            //stockTemp.StockFractionProcCd = this._salesSlip.StockFractionProcCd; // 仕入端数処理区分
            //stockTemp.AutoPayment = this._salesSlip.AutoPayment; // 自動支払区分
            //stockTemp.AutoPaySlipNum = this._salesSlip.AutoPaySlipNum; // 自動支払伝票番号
            //stockTemp.RetGoodsReasonDiv = this._salesSlip.RetGoodsReasonDiv; // 返品理由コード
            //stockTemp.RetGoodsReason = this._salesSlip.RetGoodsReason; // 返品理由
            //stockTemp.PartySaleSlipNum = salesDetailRow.PartySalesSlipNum; // 相手先伝票番号
            //stockTemp.SupplierSlipNote1 = this._salesSlip.SupplierSlipNote1; // 仕入伝票備考1
            //stockTemp.SupplierSlipNote2 = this._salesSlip.SupplierSlipNote2; // 仕入伝票備考2
            //stockTemp.DetailRowCount = this._salesSlip.DetailRowCount; // 明細行数
            //stockTemp.EdiSendDate = this._salesSlip.EdiSendDate; // ＥＤＩ送信日
            //stockTemp.EdiTakeInDate = this._salesSlip.EdiTakeInDate; // ＥＤＩ取込日
            stockTemp.UoeRemark1 = this._salesSlip.UoeRemark1; // ＵＯＥリマーク１
            stockTemp.UoeRemark2 = this._salesSlip.UoeRemark2; // ＵＯＥリマーク２
            //stockTemp.SlipPrintDivCd = this._salesSlip.SlipPrintDivCd; // 伝票発行区分
            //stockTemp.SlipPrintFinishCd = this._salesSlip.SlipPrintFinishCd; // 伝票発行済区分
            //stockTemp.StockSlipPrintDate = this._salesSlip.StockSlipPrintDate; // 仕入伝票発行日
            //stockTemp.SlipPrtSetPaperId = this._salesSlip.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
            //stockTemp.SlipAddressDiv = this._salesSlip.SlipAddressDiv; // 伝票住所区分
            //stockTemp.AddresseeCode = this._salesSlip.AddresseeCode; // 納品先コード
            //stockTemp.AddresseeName = this._salesSlip.AddresseeName; // 納品先名称
            //stockTemp.AddresseeName2 = this._salesSlip.AddresseeName2; // 納品先名称2
            //stockTemp.AddresseePostNo = this._salesSlip.AddresseePostNo; // 納品先郵便番号
            //stockTemp.AddresseeAddr1 = this._salesSlip.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
            //stockTemp.AddresseeAddr3 = this._salesSlip.AddresseeAddr3; // 納品先住所3(番地)
            //stockTemp.AddresseeAddr4 = this._salesSlip.AddresseeAddr4; // 納品先住所4(アパート名称)
            //stockTemp.AddresseeTelNo = this._salesSlip.AddresseeTelNo; // 納品先電話番号
            //stockTemp.AddresseeFaxNo = this._salesSlip.AddresseeFaxNo; // 納品先FAX番号
            //stockTemp.DirectSendingCd = this._salesSlip.DirectSendingCd; // 直送区分

            // 明細情報
            //stockTemp.AcceptAnOrderNo = salesDetailRow.AcceptAnOrderNo; // 受注番号
            //stockTemp.SupplierFormalDetail = this.GetSupplierFormal(salesDetailRow); ; // 仕入形式
            //stockTemp.SupplierSlipNoDetail = ctDefaultSupplierSlipNo; // 仕入伝票番号
            //stockTemp.StockRowNo = salesDetailRow.StockRowNo; // 仕入行番号
            stockTemp.SectionCodeDetail = this._salesSlip.SectionCode; // 拠点コード
            stockTemp.SubSectionCodeDetail = this._salesSlip.SubSectionCode; // 部門コード
            //stockTemp.CommonSeqNo = salesDetailRow.CommonSeqNo; // 共通通番
            //stockTemp.StockSlipDtlNum = salesDetailRow.StockSlipDtlNum; // 仕入明細通番
            //stockTemp.SupplierFormalSrc = salesDetailRow.SupplierFormalSrc; // 仕入形式（元）
            //stockTemp.StockSlipDtlNumSrc = salesDetailRow.StockSlipDtlNumSrc; // 仕入明細通番（元）
            //stockTemp.AcptAnOdrStatusSync = salesDetailRow.AcptAnOdrStatusSync; // 受注ステータス（同時）
            //stockTemp.SalesSlipDtlNumSync = salesDetailRow.SalesSlipDtlNumSync; // 売上明細通番（同時）
            //stockTemp.StockSlipCdDtl = salesDetailRow.StockSlipCdDtl; // 仕入伝票区分（明細）
            // 2009/09/08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ADD
            switch (this._salesSlip.SalesSlipCd)
            {
                case (int)SalesSlipInputAcs.SalesSlipCd.Sales:
                    stockTemp.StockSlipCdDtl = 0; // 仕入
                    break;
                case (int)SalesSlipInputAcs.SalesSlipCd.RetGoods:
                    stockTemp.StockSlipCdDtl = 1; // 返品
                    break;
            }
            // 2009/09/08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ADD
            //stockTemp.StockInputCodeDetail = salesDetailRow.StockInputCodeDetail; // 仕入入力者コード
            //stockTemp.StockInputNameDetail = salesDetailRow.StockInputNameDetail; // 仕入入力者名称
            //stockTemp.StockAgentCodeDetail = salesDetailRow.StockAgentCodeDetail; // 仕入担当者コード
            //stockTemp.StockAgentNameDetail = salesDetailRow.StockAgentNameDetail; // 仕入担当者名称
            stockTemp.GoodsKindCode = salesDetailRow.GoodsKindCode; // 商品属性
            stockTemp.GoodsMakerCd = salesDetailRow.GoodsMakerCd; // 商品メーカーコード
            stockTemp.MakerName = salesDetailRow.MakerName; // メーカー名称
            stockTemp.MakerKanaName = salesDetailRow.MakerKanaName; // メーカーカナ名称
            stockTemp.CmpltMakerKanaName = salesDetailRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            stockTemp.GoodsNo = salesDetailRow.GoodsNo; // 商品番号
            stockTemp.GoodsName = salesDetailRow.GoodsName; // 商品名称
            stockTemp.GoodsNameKana = salesDetailRow.GoodsNameKana; // 商品名称カナ
            stockTemp.GoodsLGroup = salesDetailRow.GoodsLGroup; // 商品大分類コード
            stockTemp.GoodsLGroupName = salesDetailRow.GoodsLGroupName; // 商品大分類名称
            stockTemp.GoodsMGroup = salesDetailRow.GoodsMGroup; // 商品中分類コード
            stockTemp.GoodsMGroupName = salesDetailRow.GoodsMGroupName; // 商品中分類名称
            stockTemp.BLGroupCode = salesDetailRow.BLGroupCode; // BLグループコード
            stockTemp.BLGroupName = salesDetailRow.BLGroupName; // BLグループコード名称
            stockTemp.BLGoodsCode = salesDetailRow.BLGoodsCode; // BL商品コード
            stockTemp.BLGoodsFullName = salesDetailRow.BLGoodsFullName; // BL商品コード名称（全角）
            stockTemp.EnterpriseGanreCode = salesDetailRow.EnterpriseGanreCode; // 自社分類コード
            stockTemp.EnterpriseGanreName = salesDetailRow.EnterpriseGanreName; // 自社分類名称
            stockTemp.WarehouseCode = salesDetailRow.WarehouseCode; // 倉庫コード
            stockTemp.WarehouseName = salesDetailRow.WarehouseName; // 倉庫名称
            stockTemp.WarehouseShelfNo = salesDetailRow.WarehouseShelfNo; // 倉庫棚番
            //stockTemp.StockOrderDivCd = salesDetailRow.StockOrderDivCd; // 仕入在庫取寄せ区分
            stockTemp.OpenPriceDiv = salesDetailRow.OpenPriceDiv; // オープン価格区分
            stockTemp.GoodsRateRank = salesDetailRow.GoodsRateRank; // 商品掛率ランク
            stockTemp.CustRateGrpCode = salesDetailRow.CustRateGrpCode; // 得意先掛率グループコード
            //stockTemp.SuppRateGrpCode = salesDetailRow.SuppRateGrpCode; // 仕入先掛率グループコード
            stockTemp.ListPriceTaxExcFl = salesDetailRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            stockTemp.ListPriceTaxIncFl = salesDetailRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            //stockTemp.StockRate = salesDetailRow.CostRate; // 仕入率
            //stockTemp.RateSectStckUnPrc = salesDetailRow.RateSectCstUnPrc; // 掛率設定拠点（仕入単価）
            //stockTemp.RateDivStckUnPrc = salesDetailRow.RateDivUnCst; // 掛率設定区分（仕入単価）
            //stockTemp.UnPrcCalcCdStckUnPrc = salesDetailRow.UnPrcCalcCdUnCst; // 単価算出区分（仕入単価）
            //stockTemp.PriceCdStckUnPrc = salesDetailRow.PriceCdUnCst; // 価格区分（仕入単価）
            //stockTemp.StdUnPrcStckUnPrc = salesDetailRow.StdUnPrcUnCst; // 基準単価（仕入単価）
            //stockTemp.FracProcUnitStcUnPrc = salesDetailRow.FracProcUnitUnCst; // 端数処理単位（仕入単価）
            //stockTemp.FracProcStckUnPrc = salesDetailRow.FracProcUnCst; // 端数処理（仕入単価）
            //stockTemp.StockUnitPriceFl = salesDetailRow.SalesUnitCostTaxExc; // 仕入単価（税抜，浮動）
            //stockTemp.StockUnitTaxPriceFl = salesDetailRow.SalesUnitCostTaxInc; // 仕入単価（税込，浮動）
            //stockTemp.StockUnitChngDiv = salesDetailRow.SalesUnitCostChngDiv; // 仕入単価変更区分
            //stockTemp.BfStockUnitPriceFl = salesDetailRow.BfUnitCost; // 変更前仕入単価（浮動）
            stockTemp.BfListPrice = salesDetailRow.BfListPrice; // 変更前定価
            stockTemp.RateBLGoodsCode = salesDetailRow.RateBLGoodsCode; // BL商品コード（掛率）
            stockTemp.RateBLGoodsName = salesDetailRow.RateBLGoodsName; // BL商品コード名称（掛率）
            stockTemp.RateGoodsRateGrpCd = salesDetailRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            stockTemp.RateGoodsRateGrpNm = salesDetailRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            stockTemp.RateBLGroupCode = salesDetailRow.RateBLGroupCode; // BLグループコード（掛率）
            stockTemp.RateBLGroupName = salesDetailRow.RateBLGroupName; // BLグループ名称（掛率）
            //>>>2010/09/29
            //stockTemp.StockCount = salesDetailRow.ShipmentCntDisplay; // 仕入数
            //stockTemp.OrderCnt = salesDetailRow.ShipmentCntDisplay; // 発注数量
            //stockTemp.OrderRemainCnt = salesDetailRow.ShipmentCntDisplay; // 発注残数
            //stockTemp.OrderAdjustCnt = 0; // 発注調整数
            int sign = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;
            stockTemp.StockCount = salesDetailRow.ShipmentCntDisplay * sign; // 仕入数
            stockTemp.OrderCnt = salesDetailRow.ShipmentCntDisplay * sign; // 発注数量
            stockTemp.OrderRemainCnt = salesDetailRow.ShipmentCntDisplay * sign; // 発注残数
            stockTemp.OrderAdjustCnt = 0; // 発注調整数
            //<<<2010/09/29
            //stockTemp.RemainCntUpdDate = salesDetailRow.RemainCntUpdDate; // 残数更新日
            //stockTemp.StockPriceTaxExc = salesDetailRow.StockPriceTaxExc; // 仕入金額（税抜き）
            //stockTemp.StockPriceTaxInc = salesDetailRow.StockPriceTaxInc; // 仕入金額（税込み）
            stockTemp.StockGoodsCdDetail = 0; // 仕入商品区分
            //stockTemp.StockPriceConsTaxDetail = salesDetailRow.StockPriceConsTaxDetail; // 仕入金額消費税額
            stockTemp.TaxationCode = salesDetailRow.TaxationDivCd; // 課税区分
            //stockTemp.StockDtiSlipNote1 = salesDetailRow.StockDtiSlipNote1; // 仕入伝票明細備考1
            //stockTemp.SalesCustomerCode = salesDetailRow.SalesCustomerCode; // 販売先コード
            //stockTemp.SalesCustomerSnm = salesDetailRow.SalesCustomerSnm; // 販売先略称
            //stockTemp.SlipMemo1 = salesDetailRow.SlipMemo1; // 伝票メモ１
            //stockTemp.SlipMemo2 = salesDetailRow.SlipMemo2; // 伝票メモ２
            //stockTemp.SlipMemo3 = salesDetailRow.SlipMemo3; // 伝票メモ３
            //stockTemp.InsideMemo1 = salesDetailRow.InsideMemo1; // 社内メモ１
            //stockTemp.InsideMemo2 = salesDetailRow.InsideMemo2; // 社内メモ２
            //stockTemp.InsideMemo3 = salesDetailRow.InsideMemo3; // 社内メモ３
            //stockTemp.SupplierCdDetail = salesDetailRow.SupplierCdDetail; // 仕入先コード
            //stockTemp.SupplierSnmDetail = salesDetailRow.SupplierSnmDetail; // 仕入先略称
            //stockTemp.AddresseeCodeDetail = salesDetailRow.AddresseeCodeDetail; // 納品先コード
            //stockTemp.AddresseeNameDetail = salesDetailRow.AddresseeNameDetail; // 納品先名称
            //stockTemp.DirectSendingCdDetail = salesDetailRow.DirectSendingCdDetail; // 直送区分
            stockTemp.ExpectDeliveryDate = DateTime.Today; // 希望納期
            stockTemp.OrderDataCreateDiv = 0; // 発注データ作成区分
            //stockTemp.DeliGdsCmpltDueDate = salesDetailRow.DeliGdsCmpltDueDate; // 納品完了予定日
            //stockTemp.ExpectDeliveryDate = salesDetailRow.ExpectDeliveryDate; // 希望納期
            //stockTemp.OrderDataCreateDiv = salesDetailRow.OrderDataCreateDiv; // 発注データ作成区分
            //stockTemp.OrderDataCreateDate = salesDetailRow.OrderDataCreateDate; // 発注データ作成日
            //stockTemp.OrderFormIssuedDiv = salesDetailRow.OrderFormIssuedDiv; // 発注書発行済区分
            //stockTemp.TotalDay = salesDetailRow.TotalDay; // 締日
            //stockTemp.NTimeCalcStDate = salesDetailRow.NTimeCalcStDate; // 次回勘定開始日
            //stockTemp.PayeeName = salesDetailRow.PayeeName; // 支払先名称
            //stockTemp.PayeeName2 = salesDetailRow.PayeeName2; // 支払先名称２
            stockTemp.AddUpEnableCnt = salesDetailRow.AddUpEnableCnt; // 計上可能数量
            stockTemp.AlreadyAddUpCnt = salesDetailRow.AlreadyAddUpCnt; // 計上済数量
            stockTemp.EditStatus = salesDetailRow.EditStatus; // エディットステータス
            stockTemp.DtlRelationGuid = salesDetailRow.DtlRelationGuid; // 共通キー

            // 仕入先情報
            Supplier supplier;
            int status = this._supplierAcs.Read(out supplier, this._enterpriseCode, salesDetailRow.SupplierCd);
            status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            if (supplier == null)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            }
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplier(ref stockTemp, supplier);
            }

            // --- DEL 2017/04/13 譚洪 Redmine#49283---------->>>>>
            // --- ADD 譚洪 K2016/12/26 ㈱福田部品 --- >>>>>
            // ㈱福田部品
            //if (this._salesSlipInputInitDataAcs.Opt_FukudaCustom == (int)SalesSlipInputInitDataAcs.Option.ON)
            //{
            //// --- ADD 譚洪 K2016/12/26 ㈱福田部品 --- <<<<<
            //    // --- ADD 2014/10/20 Y.Wakita Redmine#43729 仮対応 ---------->>>>>
            //    // 無条件に画面情報を使用するように仮修正
            //    stockTemp.StockAgentCode = this._salesSlip.SalesEmployeeCd; // 仕入担当者コード
            //    stockTemp.StockAgentName = this._salesSlip.SalesEmployeeNm; // 仕入担当者名称
            //    // --- ADD 2014/10/20 Y.Wakita Redmine#43729 仮対応 ----------<<<<<
            //}  // ADD 譚洪 K2016/12/26 ㈱福田部品
            // --- DEL 2017/04/13 譚洪 Redmine#49283----------<<<<<


            // --- ADD 2017/04/13 譚洪 Redmine#49283---------->>>>>
            // 仕入先担当者表示区分は「1:画面情報を使用する」場合時
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().StockEmpRefDiv == 1)
            {
                stockTemp.StockAgentCode = this._salesSlip.SalesEmployeeCd; // 仕入担当者コード
                stockTemp.StockAgentName = this._salesSlip.SalesEmployeeNm; // 仕入担当者名称
            }
            // --- ADD 2017/04/13 譚洪 Redmine#49283----------<<<<<
            

            // 定価情報
            if (stockTemp.SuppCTaxLayCd == (int)SalesSlipInputAcs.ConsTaxLayMethod.TaxExempt)
            {
                stockTemp.ListPriceTaxExcFl = salesDetailRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
                stockTemp.ListPriceTaxIncFl = salesDetailRow.ListPriceTaxExcFl; // 定価（税込，浮動）
                stockTemp.StockUnitPriceFl = salesDetailRow.SalesUnitCostTaxExc; // 仕入単価（税抜，浮動）
                stockTemp.StockUnitTaxPriceFl = salesDetailRow.SalesUnitCostTaxExc; // 仕入単価（税込，浮動）
            }
            else
            {
                stockTemp.ListPriceTaxExcFl = salesDetailRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
                stockTemp.ListPriceTaxIncFl = salesDetailRow.ListPriceTaxIncFl; // 定価（税込，浮動）
                stockTemp.StockUnitPriceFl = salesDetailRow.SalesUnitCostTaxExc; // 仕入単価（税抜，浮動）
                stockTemp.StockUnitTaxPriceFl = salesDetailRow.SalesUnitCostTaxInc; // 仕入単価（税込，浮動）
            }

            // 単価情報
            if (salesDetailRow.BfUnitCost != salesDetailRow.SalesUnitCostTaxExc)
            {
                stockTemp.StockRate = salesDetailRow.CostRate; // 仕入率
                stockTemp.RateSectStckUnPrc = salesDetailRow.RateSectCstUnPrc; // 掛率設定拠点（仕入単価）
                stockTemp.RateDivStckUnPrc = salesDetailRow.RateDivUnCst; // 掛率設定区分（仕入単価）
                stockTemp.UnPrcCalcCdStckUnPrc = salesDetailRow.UnPrcCalcCdUnCst; // 単価算出区分（仕入単価）
                stockTemp.PriceCdStckUnPrc = salesDetailRow.PriceCdUnCst; // 価格区分（仕入単価）
                stockTemp.StdUnPrcStckUnPrc = salesDetailRow.StdUnPrcUnCst; // 基準単価（仕入単価）
                stockTemp.FracProcUnitStcUnPrc = salesDetailRow.FracProcUnitUnCst; // 端数処理単位（仕入単価）
                stockTemp.FracProcStckUnPrc = salesDetailRow.FracProcUnCst; // 端数処理（仕入単価）
                if (stockTemp.SuppCTaxLayCd == (int)SalesSlipInputAcs.ConsTaxLayMethod.TaxExempt)
                {
                    stockTemp.StockUnitPriceFl = salesDetailRow.SalesUnitCostTaxExc; // 仕入単価（税抜，浮動）
                    stockTemp.StockUnitTaxPriceFl = salesDetailRow.SalesUnitCostTaxExc; // 仕入単価（税込，浮動）
                }
                else
                {
                    stockTemp.StockUnitPriceFl = salesDetailRow.SalesUnitCostTaxExc; // 仕入単価（税抜，浮動）
                    stockTemp.StockUnitTaxPriceFl = salesDetailRow.SalesUnitCostTaxInc; // 仕入単価（税込，浮動）
                }
                stockTemp.StockUnitChngDiv = salesDetailRow.SalesUnitCostChngDiv; // 仕入単価変更区分
                stockTemp.BfStockUnitPriceFl = salesDetailRow.BfUnitCost; // 変更前仕入単価（浮動）
            }

            // 発注
            if (stockTemp.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order)
            {
                stockTemp.StockCount = salesDetailRow.AcceptAnOrderCntForOrder; // 仕入数
                stockTemp.OrderCnt = salesDetailRow.AcceptAnOrderCntForOrder; // 発注数量
                stockTemp.OrderRemainCnt = salesDetailRow.AcceptAnOrderCntForOrder; // 発注残数
                
                stockTemp.OrderDataCreateDiv = 1; // 発注データ作成区分
                stockTemp.OrderDataCreateDate = salesDetailRow.StockDate; // 発注データ作成日
                stockTemp.WayToOrder = 2; // 注文方法
            }
            #endregion
        }

        /// <summary>
        /// 仕入情報をキャッシュします。
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="stockTemp">仕入情報データオブジェクト</param>
        private void CacheStockTemp(int salesRowNo, StockTemp stockTemp)
        {
            SalesInputDataSet.StockTempRow stockTempRow = this.GetStockTempRow(salesRowNo);
            this.CacheStockTemp(stockTemp, ref stockTempRow);
        }

        /// <summary>
        /// 仕入情報をキャッシュします。
        /// </summary>
        /// <param name="sourceStockTemp">キャッシュ元仕入データオブジェクト</param>
        /// <param name="targetStockTempRow">キャッシュ先仕入情報テーブル行オブジェクト</param>
        private void CacheStockTemp(StockTemp sourceStockTemp, ref SalesInputDataSet.StockTempRow targetStockTempRow)
        {
            #region 項目セット
            targetStockTempRow.CreateDateTime = sourceStockTemp.CreateDateTime; // 作成日時
            targetStockTempRow.UpdateDateTime = sourceStockTemp.UpdateDateTime; // 更新日時
            targetStockTempRow.EnterpriseCode = sourceStockTemp.EnterpriseCode; // 企業コード
            targetStockTempRow.FileHeaderGuid = sourceStockTemp.FileHeaderGuid; // GUID
            targetStockTempRow.UpdEmployeeCode = sourceStockTemp.UpdEmployeeCode; // 更新従業員コード
            targetStockTempRow.UpdAssemblyId1 = sourceStockTemp.UpdAssemblyId1; // 更新アセンブリID1
            targetStockTempRow.UpdAssemblyId2 = sourceStockTemp.UpdAssemblyId2; // 更新アセンブリID2
            targetStockTempRow.LogicalDeleteCode = sourceStockTemp.LogicalDeleteCode; // 論理削除区分
            targetStockTempRow.SupplierFormal = sourceStockTemp.SupplierFormal; // 仕入形式
            targetStockTempRow.SupplierSlipNo = sourceStockTemp.SupplierSlipNo; // 仕入伝票番号
            targetStockTempRow.SectionCode = sourceStockTemp.SectionCode; // 拠点コード
            targetStockTempRow.SubSectionCode = sourceStockTemp.SubSectionCode; // 部門コード
            targetStockTempRow.DebitNoteDiv = sourceStockTemp.DebitNoteDiv; // 赤伝区分
            targetStockTempRow.DebitNLnkSuppSlipNo = sourceStockTemp.DebitNLnkSuppSlipNo; // 赤黒連結仕入伝票番号
            targetStockTempRow.SupplierSlipCd = sourceStockTemp.SupplierSlipCd; // 仕入伝票区分
            targetStockTempRow.StockGoodsCd = sourceStockTemp.StockGoodsCd; // 仕入商品区分
            targetStockTempRow.AccPayDivCd = sourceStockTemp.AccPayDivCd; // 買掛区分
            targetStockTempRow.StockSectionCd = sourceStockTemp.StockSectionCd; // 仕入拠点コード
            targetStockTempRow.StockAddUpSectionCd = sourceStockTemp.StockAddUpSectionCd; // 仕入計上拠点コード
            targetStockTempRow.StockSlipUpdateCd = sourceStockTemp.StockSlipUpdateCd; // 仕入伝票更新区分
            targetStockTempRow.InputDay = sourceStockTemp.InputDay; // 入力日
            targetStockTempRow.ArrivalGoodsDay = sourceStockTemp.ArrivalGoodsDay; // 入荷日
            targetStockTempRow.StockDate = sourceStockTemp.StockDate; // 仕入日
            targetStockTempRow.StockAddUpADate = sourceStockTemp.StockAddUpADate; // 仕入計上日付
            targetStockTempRow.DelayPaymentDiv = sourceStockTemp.DelayPaymentDiv; // 来勘区分
            targetStockTempRow.PayeeCode = sourceStockTemp.PayeeCode; // 支払先コード
            targetStockTempRow.PayeeSnm = sourceStockTemp.PayeeSnm; // 支払先略称
            targetStockTempRow.SupplierCd = sourceStockTemp.SupplierCd; // 仕入先コード
            targetStockTempRow.SupplierNm1 = sourceStockTemp.SupplierNm1; // 仕入先名1
            targetStockTempRow.SupplierNm2 = sourceStockTemp.SupplierNm2; // 仕入先名2
            targetStockTempRow.SupplierSnm = sourceStockTemp.SupplierSnm; // 仕入先略称
            targetStockTempRow.BusinessTypeCode = sourceStockTemp.BusinessTypeCode; // 業種コード
            targetStockTempRow.BusinessTypeName = sourceStockTemp.BusinessTypeName; // 業種名称
            targetStockTempRow.SalesAreaCode = sourceStockTemp.SalesAreaCode; // 販売エリアコード
            targetStockTempRow.SalesAreaName = sourceStockTemp.SalesAreaName; // 販売エリア名称
            targetStockTempRow.StockInputCode = sourceStockTemp.StockInputCode; // 仕入入力者コード
            targetStockTempRow.StockInputName = sourceStockTemp.StockInputName; // 仕入入力者名称
            targetStockTempRow.StockAgentCode = sourceStockTemp.StockAgentCode; // 仕入担当者コード
            targetStockTempRow.StockAgentName = sourceStockTemp.StockAgentName; // 仕入担当者名称
            targetStockTempRow.SuppTtlAmntDspWayCd = sourceStockTemp.SuppTtlAmntDspWayCd; // 仕入先総額表示方法区分
            targetStockTempRow.TtlAmntDispRateApy = sourceStockTemp.TtlAmntDispRateApy; // 総額表示掛率適用区分
            targetStockTempRow.StockTotalPrice = sourceStockTemp.StockTotalPrice; // 仕入金額合計
            targetStockTempRow.StockSubttlPrice = sourceStockTemp.StockSubttlPrice; // 仕入金額小計
            targetStockTempRow.StockTtlPricTaxInc = sourceStockTemp.StockTtlPricTaxInc; // 仕入金額計（税込み）
            targetStockTempRow.StockTtlPricTaxExc = sourceStockTemp.StockTtlPricTaxExc; // 仕入金額計（税抜き）
            targetStockTempRow.StockNetPrice = sourceStockTemp.StockNetPrice; // 仕入正価金額
            targetStockTempRow.StockPriceConsTax = sourceStockTemp.StockPriceConsTax; // 仕入金額消費税額
            targetStockTempRow.TtlItdedStcOutTax = sourceStockTemp.TtlItdedStcOutTax; // 仕入外税対象額合計
            targetStockTempRow.TtlItdedStcInTax = sourceStockTemp.TtlItdedStcInTax; // 仕入内税対象額合計
            targetStockTempRow.TtlItdedStcTaxFree = sourceStockTemp.TtlItdedStcTaxFree; // 仕入非課税対象額合計
            targetStockTempRow.StockOutTax = sourceStockTemp.StockOutTax; // 仕入金額消費税額（外税）
            targetStockTempRow.StckPrcConsTaxInclu = sourceStockTemp.StckPrcConsTaxInclu; // 仕入金額消費税額（内税）
            targetStockTempRow.StckDisTtlTaxExc = sourceStockTemp.StckDisTtlTaxExc; // 仕入値引金額計（税抜き）
            targetStockTempRow.ItdedStockDisOutTax = sourceStockTemp.ItdedStockDisOutTax; // 仕入値引外税対象額合計
            targetStockTempRow.ItdedStockDisInTax = sourceStockTemp.ItdedStockDisInTax; // 仕入値引内税対象額合計
            targetStockTempRow.ItdedStockDisTaxFre = sourceStockTemp.ItdedStockDisTaxFre; // 仕入値引非課税対象額合計
            targetStockTempRow.StockDisOutTax = sourceStockTemp.StockDisOutTax; // 仕入値引消費税額（外税）
            targetStockTempRow.StckDisTtlTaxInclu = sourceStockTemp.StckDisTtlTaxInclu; // 仕入値引消費税額（内税）
            targetStockTempRow.TaxAdjust = sourceStockTemp.TaxAdjust; // 消費税調整額
            targetStockTempRow.BalanceAdjust = sourceStockTemp.BalanceAdjust; // 残高調整額
            targetStockTempRow.SuppCTaxLayCd = sourceStockTemp.SuppCTaxLayCd; // 仕入先消費税転嫁方式コード
            targetStockTempRow.SupplierConsTaxRate = sourceStockTemp.SupplierConsTaxRate; // 仕入先消費税税率
            targetStockTempRow.AccPayConsTax = sourceStockTemp.AccPayConsTax; // 買掛消費税
            targetStockTempRow.StockFractionProcCd = sourceStockTemp.StockFractionProcCd; // 仕入端数処理区分
            targetStockTempRow.AutoPayment = sourceStockTemp.AutoPayment; // 自動支払区分
            targetStockTempRow.AutoPaySlipNum = sourceStockTemp.AutoPaySlipNum; // 自動支払伝票番号
            targetStockTempRow.RetGoodsReasonDiv = sourceStockTemp.RetGoodsReasonDiv; // 返品理由コード
            targetStockTempRow.RetGoodsReason = sourceStockTemp.RetGoodsReason; // 返品理由
            targetStockTempRow.PartySaleSlipNum = sourceStockTemp.PartySaleSlipNum; // 相手先伝票番号
            targetStockTempRow.SupplierSlipNote1 = sourceStockTemp.SupplierSlipNote1; // 仕入伝票備考1
            targetStockTempRow.SupplierSlipNote2 = sourceStockTemp.SupplierSlipNote2; // 仕入伝票備考2
            targetStockTempRow.DetailRowCount = sourceStockTemp.DetailRowCount; // 明細行数
            targetStockTempRow.EdiSendDate = sourceStockTemp.EdiSendDate; // ＥＤＩ送信日
            targetStockTempRow.EdiTakeInDate = sourceStockTemp.EdiTakeInDate; // ＥＤＩ取込日
            targetStockTempRow.UoeRemark1 = sourceStockTemp.UoeRemark1; // ＵＯＥリマーク１
            targetStockTempRow.UoeRemark2 = sourceStockTemp.UoeRemark2; // ＵＯＥリマーク２
            targetStockTempRow.SlipPrintDivCd = sourceStockTemp.SlipPrintDivCd; // 伝票発行区分
            targetStockTempRow.SlipPrintFinishCd = sourceStockTemp.SlipPrintFinishCd; // 伝票発行済区分
            targetStockTempRow.StockSlipPrintDate = sourceStockTemp.StockSlipPrintDate; // 仕入伝票発行日
            targetStockTempRow.SlipPrtSetPaperId = sourceStockTemp.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
            targetStockTempRow.SlipAddressDiv = sourceStockTemp.SlipAddressDiv; // 伝票住所区分
            targetStockTempRow.AddresseeCode = sourceStockTemp.AddresseeCode; // 納品先コード
            targetStockTempRow.AddresseeName = sourceStockTemp.AddresseeName; // 納品先名称
            targetStockTempRow.AddresseeName2 = sourceStockTemp.AddresseeName2; // 納品先名称2
            targetStockTempRow.AddresseePostNo = sourceStockTemp.AddresseePostNo; // 納品先郵便番号
            targetStockTempRow.AddresseeAddr1 = sourceStockTemp.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
            targetStockTempRow.AddresseeAddr3 = sourceStockTemp.AddresseeAddr3; // 納品先住所3(番地)
            targetStockTempRow.AddresseeAddr4 = sourceStockTemp.AddresseeAddr4; // 納品先住所4(アパート名称)
            targetStockTempRow.AddresseeTelNo = sourceStockTemp.AddresseeTelNo; // 納品先電話番号
            targetStockTempRow.AddresseeFaxNo = sourceStockTemp.AddresseeFaxNo; // 納品先FAX番号
            targetStockTempRow.DirectSendingCd = sourceStockTemp.DirectSendingCd; // 直送区分
            targetStockTempRow.AcceptAnOrderNo = sourceStockTemp.AcceptAnOrderNo; // 受注番号
            targetStockTempRow.SupplierFormalDetail = sourceStockTemp.SupplierFormalDetail; // 仕入形式
            targetStockTempRow.SupplierSlipNoDetail = sourceStockTemp.SupplierSlipNoDetail; // 仕入伝票番号
            targetStockTempRow.StockRowNo = sourceStockTemp.StockRowNo; // 仕入行番号
            targetStockTempRow.SectionCodeDetail = sourceStockTemp.SectionCodeDetail; // 拠点コード
            targetStockTempRow.SubSectionCodeDetail = sourceStockTemp.SubSectionCodeDetail; // 部門コード
            targetStockTempRow.CommonSeqNo = sourceStockTemp.CommonSeqNo; // 共通通番
            targetStockTempRow.StockSlipDtlNum = sourceStockTemp.StockSlipDtlNum; // 仕入明細通番
            targetStockTempRow.SupplierFormalSrc = sourceStockTemp.SupplierFormalSrc; // 仕入形式（元）
            targetStockTempRow.StockSlipDtlNumSrc = sourceStockTemp.StockSlipDtlNumSrc; // 仕入明細通番（元）
            targetStockTempRow.AcptAnOdrStatusSync = sourceStockTemp.AcptAnOdrStatusSync; // 受注ステータス（同時）
            targetStockTempRow.SalesSlipDtlNumSync = sourceStockTemp.SalesSlipDtlNumSync; // 売上明細通番（同時）
            targetStockTempRow.StockSlipCdDtl = sourceStockTemp.StockSlipCdDtl; // 仕入伝票区分（明細）
            targetStockTempRow.StockInputCodeDetail = sourceStockTemp.StockInputCodeDetail; // 仕入入力者コード
            targetStockTempRow.StockInputNameDetail = sourceStockTemp.StockInputNameDetail; // 仕入入力者名称
            targetStockTempRow.StockAgentCodeDetail = sourceStockTemp.StockAgentCodeDetail; // 仕入担当者コード
            targetStockTempRow.StockAgentNameDetail = sourceStockTemp.StockAgentNameDetail; // 仕入担当者名称
            targetStockTempRow.GoodsKindCode = sourceStockTemp.GoodsKindCode; // 商品属性
            targetStockTempRow.GoodsMakerCd = sourceStockTemp.GoodsMakerCd; // 商品メーカーコード
            targetStockTempRow.MakerName = sourceStockTemp.MakerName; // メーカー名称
            targetStockTempRow.MakerKanaName = sourceStockTemp.MakerKanaName; // メーカーカナ名称
            targetStockTempRow.CmpltMakerKanaName = sourceStockTemp.CmpltMakerKanaName; // メーカーカナ名称（一式）
            targetStockTempRow.GoodsNo = sourceStockTemp.GoodsNo; // 商品番号
            targetStockTempRow.GoodsName = sourceStockTemp.GoodsName; // 商品名称
            targetStockTempRow.GoodsNameKana = sourceStockTemp.GoodsNameKana; // 商品名称カナ
            targetStockTempRow.GoodsLGroup = sourceStockTemp.GoodsLGroup; // 商品大分類コード
            targetStockTempRow.GoodsLGroupName = sourceStockTemp.GoodsLGroupName; // 商品大分類名称
            targetStockTempRow.GoodsMGroup = sourceStockTemp.GoodsMGroup; // 商品中分類コード
            targetStockTempRow.GoodsMGroupName = sourceStockTemp.GoodsMGroupName; // 商品中分類名称
            targetStockTempRow.BLGroupCode = sourceStockTemp.BLGroupCode; // BLグループコード
            targetStockTempRow.BLGroupName = sourceStockTemp.BLGroupName; // BLグループコード名称
            targetStockTempRow.BLGoodsCode = sourceStockTemp.BLGoodsCode; // BL商品コード
            targetStockTempRow.BLGoodsFullName = sourceStockTemp.BLGoodsFullName; // BL商品コード名称（全角）
            targetStockTempRow.EnterpriseGanreCode = sourceStockTemp.EnterpriseGanreCode; // 自社分類コード
            targetStockTempRow.EnterpriseGanreName = sourceStockTemp.EnterpriseGanreName; // 自社分類名称
            targetStockTempRow.WarehouseCode = sourceStockTemp.WarehouseCode; // 倉庫コード
            targetStockTempRow.WarehouseName = sourceStockTemp.WarehouseName; // 倉庫名称
            targetStockTempRow.WarehouseShelfNo = sourceStockTemp.WarehouseShelfNo; // 倉庫棚番
            targetStockTempRow.StockOrderDivCd = sourceStockTemp.StockOrderDivCd; // 仕入在庫取寄せ区分
            targetStockTempRow.OpenPriceDiv = sourceStockTemp.OpenPriceDiv; // オープン価格区分
            targetStockTempRow.GoodsRateRank = sourceStockTemp.GoodsRateRank; // 商品掛率ランク
            targetStockTempRow.CustRateGrpCode = sourceStockTemp.CustRateGrpCode; // 得意先掛率グループコード
            targetStockTempRow.SuppRateGrpCode = sourceStockTemp.SuppRateGrpCode; // 仕入先掛率グループコード
            targetStockTempRow.ListPriceTaxExcFl = sourceStockTemp.ListPriceTaxExcFl; // 定価（税抜，浮動）
            targetStockTempRow.ListPriceTaxIncFl = sourceStockTemp.ListPriceTaxIncFl; // 定価（税込，浮動）
            targetStockTempRow.StockRate = sourceStockTemp.StockRate; // 仕入率
            targetStockTempRow.RateSectStckUnPrc = sourceStockTemp.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
            targetStockTempRow.RateDivStckUnPrc = sourceStockTemp.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
            targetStockTempRow.UnPrcCalcCdStckUnPrc = sourceStockTemp.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
            targetStockTempRow.PriceCdStckUnPrc = sourceStockTemp.PriceCdStckUnPrc; // 価格区分（仕入単価）
            targetStockTempRow.StdUnPrcStckUnPrc = sourceStockTemp.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
            targetStockTempRow.FracProcUnitStcUnPrc = sourceStockTemp.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
            targetStockTempRow.FracProcStckUnPrc = sourceStockTemp.FracProcStckUnPrc; // 端数処理（仕入単価）
            targetStockTempRow.StockUnitPriceFl = sourceStockTemp.StockUnitPriceFl; // 仕入単価（税抜，浮動）
            targetStockTempRow.StockUnitTaxPriceFl = sourceStockTemp.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
            targetStockTempRow.StockUnitChngDiv = sourceStockTemp.StockUnitChngDiv; // 仕入単価変更区分
            targetStockTempRow.BfStockUnitPriceFl = sourceStockTemp.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
            targetStockTempRow.BfListPrice = sourceStockTemp.BfListPrice; // 変更前定価
            targetStockTempRow.RateBLGoodsCode = sourceStockTemp.RateBLGoodsCode; // BL商品コード（掛率）
            targetStockTempRow.RateBLGoodsName = sourceStockTemp.RateBLGoodsName; // BL商品コード名称（掛率）
            targetStockTempRow.RateGoodsRateGrpCd = sourceStockTemp.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            targetStockTempRow.RateGoodsRateGrpNm = sourceStockTemp.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            targetStockTempRow.RateBLGroupCode = sourceStockTemp.RateBLGroupCode; // BLグループコード（掛率）
            targetStockTempRow.RateBLGroupName = sourceStockTemp.RateBLGroupName; // BLグループ名称（掛率）
            targetStockTempRow.StockCount = sourceStockTemp.StockCount; // 仕入数
            targetStockTempRow.OrderCnt = sourceStockTemp.OrderCnt; // 発注数量
            targetStockTempRow.OrderAdjustCnt = sourceStockTemp.OrderAdjustCnt; // 発注調整数
            targetStockTempRow.OrderRemainCnt = sourceStockTemp.OrderRemainCnt; // 発注残数
            targetStockTempRow.RemainCntUpdDate = sourceStockTemp.RemainCntUpdDate; // 残数更新日
            targetStockTempRow.StockPriceTaxExc = sourceStockTemp.StockPriceTaxExc; // 仕入金額（税抜き）
            targetStockTempRow.StockPriceTaxInc = sourceStockTemp.StockPriceTaxInc; // 仕入金額（税込み）
            targetStockTempRow.StockGoodsCdDetail = sourceStockTemp.StockGoodsCdDetail; // 仕入商品区分
            targetStockTempRow.StockPriceConsTaxDetail = sourceStockTemp.StockPriceConsTaxDetail; // 仕入金額消費税額
            targetStockTempRow.TaxationCode = sourceStockTemp.TaxationCode; // 課税区分
            targetStockTempRow.StockDtiSlipNote1 = sourceStockTemp.StockDtiSlipNote1; // 仕入伝票明細備考1
            targetStockTempRow.SalesCustomerCode = sourceStockTemp.SalesCustomerCode; // 販売先コード
            targetStockTempRow.SalesCustomerSnm = sourceStockTemp.SalesCustomerSnm; // 販売先略称
            targetStockTempRow.SlipMemo1 = sourceStockTemp.SlipMemo1; // 伝票メモ１
            targetStockTempRow.SlipMemo2 = sourceStockTemp.SlipMemo2; // 伝票メモ２
            targetStockTempRow.SlipMemo3 = sourceStockTemp.SlipMemo3; // 伝票メモ３
            targetStockTempRow.InsideMemo1 = sourceStockTemp.InsideMemo1; // 社内メモ１
            targetStockTempRow.InsideMemo2 = sourceStockTemp.InsideMemo2; // 社内メモ２
            targetStockTempRow.InsideMemo3 = sourceStockTemp.InsideMemo3; // 社内メモ３
            targetStockTempRow.SupplierCdDetail = sourceStockTemp.SupplierCdDetail; // 仕入先コード
            targetStockTempRow.SupplierSnmDetail = sourceStockTemp.SupplierSnmDetail; // 仕入先略称
            targetStockTempRow.AddresseeCodeDetail = sourceStockTemp.AddresseeCodeDetail; // 納品先コード
            targetStockTempRow.AddresseeNameDetail = sourceStockTemp.AddresseeNameDetail; // 納品先名称
            targetStockTempRow.DirectSendingCdDetail = sourceStockTemp.DirectSendingCdDetail; // 直送区分
            targetStockTempRow.OrderNumber = sourceStockTemp.OrderNumber; // 発注番号
            targetStockTempRow.WayToOrder = sourceStockTemp.WayToOrder; // 注文方法
            targetStockTempRow.DeliGdsCmpltDueDate = sourceStockTemp.DeliGdsCmpltDueDate; // 納品完了予定日
            targetStockTempRow.ExpectDeliveryDate = sourceStockTemp.ExpectDeliveryDate; // 希望納期
            targetStockTempRow.OrderDataCreateDiv = sourceStockTemp.OrderDataCreateDiv; // 発注データ作成区分
            targetStockTempRow.OrderDataCreateDate = sourceStockTemp.OrderDataCreateDate; // 発注データ作成日
            targetStockTempRow.OrderFormIssuedDiv = sourceStockTemp.OrderFormIssuedDiv; // 発注書発行済区分
            targetStockTempRow.TotalDay = sourceStockTemp.TotalDay; // 締日
            targetStockTempRow.NTimeCalcStDate = sourceStockTemp.NTimeCalcStDate; // 次回勘定開始日
            targetStockTempRow.PayeeName = sourceStockTemp.PayeeName; // 支払先名称
            targetStockTempRow.PayeeName2 = sourceStockTemp.PayeeName2; // 支払先名称２
            targetStockTempRow.AddUpEnableCnt = sourceStockTemp.AddUpEnableCnt; // 計上可能数量
            targetStockTempRow.AlreadyAddUpCnt = sourceStockTemp.AlreadyAddUpCnt; // 計上済数量
            targetStockTempRow.EditStatus = sourceStockTemp.EditStatus; // エディットステータス
            //stockTempRow.DtlRelationGuid = stockTemp.DtlRelationGuid; // 共通キー
            #endregion
        }

        /// <summary>
        /// ＤＢに保存する仕入情報データを調整します。
        /// </summary>
        public void AdjustStockSaveData()
        {
            #region ●不要明細削除
            List<Guid> deleteGuidList = new List<Guid>();
            //----------------------------------------
            // 仕入先コード、数量なし明細削除
            //----------------------------------------
            foreach (SalesInputDataSet.StockTempRow row in this._stockTempDataTable)
            {
                if ((row.SupplierCd == 0) || (row.StockCount == 0))
                {
                    deleteGuidList.Add(row.DtlRelationGuid);
                }
            }
            // 仕入情報明細行削除処理
            
            this.DeleteStockTempRow(deleteGuidList);
            #endregion
        }

        /// <summary>
        /// 仕入情報データ行オブジェクトの削除を行います。
        /// </summary>
        /// <param name="guidList">削除行StockRowNoリスト</param>
        public void DeleteStockTempRow(List<Guid> guidList)
        {
            if (guidList.Count == 0) return;

            this._stockTempDataTable.BeginLoadData();
            foreach (Guid dtlRelateionGuid in guidList)
            {
                SalesInputDataSet.StockTempRow targetRow = this._stockTempDataTable.FindByDtlRelationGuid(dtlRelateionGuid);
                if (targetRow == null) continue;

                this._stockTempDataTable.RemoveStockTempRow(targetRow);
            }
            this._stockTempDataTable.EndLoadData();

        }

        /// <summary>
        /// 仕入情報データ行オブジェクトの計上可能数量の値を設定します。
        /// </summary>
        public void StockTempRowAddUpEnableCountSetting()
        {
            // 赤伝区分(0:黒伝 1:赤伝 2:元黒)
            if (this._salesSlip.DebitNoteDiv != 0) return;

            foreach (SalesInputDataSet.StockTempRow row in this._stockTempDataTable)
            {
                if (row.StockSlipDtlNumSrc == 0) continue;
                row.AddUpEnableCnt = Math.Abs(row.OrderRemainCnt);
            }
        }
        #endregion

        #region 仕入情報テーブル → 仕入データテーブル、仕入明細データテーブル
        /// <summary>
        /// 仕入情報を伝票種別、伝票区分、仕入先、支払先、仕入日、入荷日、計上日、担当者単位に分けます。
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <remarks>
        /// <br>Update Note: 2015/12/14 李侠</br>
        /// <br>管理番号   : 11175418-00</br>
        /// <br>           : Redmine#48098 売仕入同時入力SEQが異なる障害対応</br>
        /// </remarks>
        private void CollectStockSlipUnit(ArrayList salesDataList)
        {
            if ((this._stockTempDataTable == null) || (this._stockTempDataTable.Count == 0)) return;

            //>>>2012/01/20
            //if (!this.ExistStockTemp()) return;

            //this._stockSlipDataTable.Rows.Clear();
            //this._stockDetailDataTable.Rows.Clear();

            this._stockSlipDataTable.Rows.Clear();
            this._stockDetailDataTable.Rows.Clear();

            if (!this.ExistStockTemp()) return;
            //<<<2012/01/20

            #region ●仕入情報
            //-----------------------------------------------------------------------------
            // 仕入情報
            //-----------------------------------------------------------------------------
            DataView stockTempView = new DataView(this._stockTempDataTable);

            // DEL 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
            //// 拠点、伝票種別、伝票区分、仕入先ｺｰﾄﾞ、支払先ｺｰﾄﾞ、仕入日、入荷日、計上日、担当者、相手先伝番、仕入SEQでソート
            //stockTempView.Sort = string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11}",
            //    this._stockTempDataTable.StockSectionCdColumn.ColumnName,
            //    this._stockTempDataTable.SupplierFormalColumn.ColumnName,
            //    this._stockTempDataTable.SupplierSlipCdColumn.ColumnName,
            //    this._stockTempDataTable.AccPayDivCdColumn.ColumnName,
            //    this._stockTempDataTable.SupplierCdColumn.ColumnName,
            //    this._stockTempDataTable.PayeeCodeColumn.ColumnName,
            //    this._stockTempDataTable.StockDateColumn.ColumnName,
            //    this._stockTempDataTable.ArrivalGoodsDayColumn.ColumnName,
            //    this._stockTempDataTable.StockAddUpADateColumn.ColumnName,
            //    this._stockTempDataTable.StockAgentCodeColumn.ColumnName,
            //    this._stockTempDataTable.PartySaleSlipNumColumn.ColumnName,
            //    this._stockTempDataTable.SupplierSlipNoColumn);
            // DEL 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<
            // ADD 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
            // 拠点、伝票形式、伝票区分、仕入先ｺｰﾄﾞ、仕入日、相手先伝番、仕入SEQでソート
            stockTempView.Sort = string.Format("{0},{1},{2},{3},{4},{5},{6}",
                this._stockTempDataTable.StockSectionCdColumn.ColumnName,
                this._stockTempDataTable.SupplierFormalColumn.ColumnName,
                this._stockTempDataTable.SupplierSlipCdColumn.ColumnName,
                this._stockTempDataTable.SupplierCdColumn.ColumnName,
                this._stockTempDataTable.StockDateColumn.ColumnName,
                this._stockTempDataTable.PartySaleSlipNumColumn.ColumnName,
                this._stockTempDataTable.SupplierSlipNoColumn);
            // ADD 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<

            string stockSectionCd = string.Empty;
            int supplierFormal = -1;
            int supplierSlipCd = -1;
            //int accPayDivCd = -1;// DEL 2015/12/14 李侠 For Redmine#48098
            int customerCode = -1;
            //int payeeCode = -1;// DEL 2015/12/14 李侠 For Redmine#48098
            DateTime stockDate = DateTime.MinValue;
            // DEL 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
            //DateTime stockAddUpADate = DateTime.MinValue;
            //DateTime arrivalGoodsDay = DateTime.MinValue;
            //string stockAgentCode = string.Empty;
            // DEL 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<
            string partySaleSlipNum = string.Empty;

            int slipRowNo = 0;
            int detailRowNo = 0;
            this._dataSet.StockSlip.BeginLoadData();

            foreach (DataRowView rowView in stockTempView)
            {
                // 仕入先コード、仕入日、仕入伝票番号が未入力の場合、読み飛ばし
                if (((int)rowView[this._stockTempDataTable.SupplierFormalColumn.ColumnName] == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock) &&
                    (((int)rowView[this._stockTempDataTable.SupplierCdColumn.ColumnName] == 0) ||
                     ((DateTime)rowView[this._stockTempDataTable.StockDateColumn.ColumnName] == DateTime.MinValue) ||
                     (string.IsNullOrEmpty((string)rowView[this._stockTempDataTable.PartySaleSlipNumColumn.ColumnName])))) continue;

                // 仕入以外は読み飛ばし
                if ((int)rowView[this._stockTempDataTable.SupplierFormalColumn.ColumnName] != (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock) continue;

                // 条件が変わったらヘッダ行を追加する
                if ((((string)rowView[this._stockTempDataTable.StockSectionCdColumn.ColumnName]).Trim() != stockSectionCd.Trim()) ||
                    ((int)rowView[this._stockTempDataTable.SupplierFormalColumn.ColumnName] != supplierFormal) ||
                    ((int)rowView[this._stockTempDataTable.SupplierSlipCdColumn.ColumnName] != supplierSlipCd) ||
                    // DEL 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
                    //((int)rowView[this._stockTempDataTable.AccPayDivCdColumn.ColumnName] != accPayDivCd) ||
                    //((int)rowView[this._stockTempDataTable.SupplierCdColumn.ColumnName] != customerCode) ||
                    //((int)rowView[this._stockTempDataTable.PayeeCodeColumn.ColumnName] != payeeCode) ||
                    //((DateTime)rowView[this._stockTempDataTable.StockDateColumn.ColumnName] != stockDate) ||
                    //((DateTime)rowView[this._stockTempDataTable.StockAddUpADateColumn.ColumnName] != stockAddUpADate) ||
                    //((DateTime)rowView[this._stockTempDataTable.ArrivalGoodsDayColumn.ColumnName] != arrivalGoodsDay) ||
                    //(((string)rowView[this._stockTempDataTable.StockAgentCodeColumn.ColumnName]).Trim() != stockAgentCode.Trim()) ||
                    // DEL 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<
                    // ADD 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
                    // 比較項目：仕入拠点・仕入形式・伝票区分・仕入先・仕入日・相手先伝番
                    ((int)rowView[this._stockTempDataTable.SupplierCdColumn.ColumnName] != customerCode) ||
                    ((DateTime)rowView[this._stockTempDataTable.StockDateColumn.ColumnName] != stockDate) ||
                    // ADD 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<
                    ((string)rowView[this._stockTempDataTable.PartySaleSlipNumColumn.ColumnName] != partySaleSlipNum))
                {
                    stockSectionCd = ((string)rowView[this._stockTempDataTable.StockSectionCdColumn.ColumnName]).Trim();;
                    supplierFormal = (int)rowView[this._stockTempDataTable.SupplierFormalColumn.ColumnName];
                    supplierSlipCd = (int)rowView[this._stockTempDataTable.SupplierSlipCdColumn.ColumnName];
                    // DEL 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
                    //accPayDivCd = (int)rowView[this._stockTempDataTable.AccPayDivCdColumn.ColumnName];
                    //customerCode = (int)rowView[this._stockTempDataTable.SupplierCdColumn.ColumnName];
                    //payeeCode = (int)rowView[this._stockTempDataTable.PayeeCodeColumn.ColumnName];
                    //stockDate = (DateTime)rowView[this._stockTempDataTable.StockDateColumn.ColumnName];
                    //stockAddUpADate = (DateTime)rowView[this._stockTempDataTable.StockAddUpADateColumn.ColumnName];
                    //arrivalGoodsDay = (DateTime)rowView[this._stockTempDataTable.ArrivalGoodsDayColumn.ColumnName];
                    //stockAgentCode = (string)rowView[this._stockTempDataTable.StockAgentCodeColumn.ColumnName];
                    // DEL 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<
                    // ADD 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
                    // 比較項目：仕入拠点・仕入形式・伝票区分・仕入先・仕入日・相手先伝番
                    customerCode = (int)rowView[this._stockTempDataTable.SupplierCdColumn.ColumnName];
                    stockDate = (DateTime)rowView[this._stockTempDataTable.StockDateColumn.ColumnName];
                    // ADD 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<
                    partySaleSlipNum = (string)rowView[this._stockTempDataTable.PartySaleSlipNumColumn.ColumnName];

                    slipRowNo++;
                    detailRowNo = 0;
                    // 仕入データ追加
                    this._stockSlipDataTable.AddStockSlipRow(GetStockSlipRow(slipRowNo, this._stockTempDataTable.FindByDtlRelationGuid((Guid)rowView[this._stockTempDataTable.DtlRelationGuidColumn.ColumnName]), this._dataSet.StockSlip));
                }
                detailRowNo++;
                // 仕入明細データ追加
                this._stockDetailDataTable.AddStockDetailRow(GetStockDetailRow(slipRowNo, detailRowNo, this._stockTempDataTable.FindByDtlRelationGuid((Guid)rowView[this._stockTempDataTable.DtlRelationGuidColumn.ColumnName]), this._dataSet.StockDetail));
            }
            this._dataSet.StockSlip.EndLoadData();
            #endregion

            #region ●発注情報
            //-----------------------------------------------------------------------------
            // 発注情報
            //-----------------------------------------------------------------------------
            #region 売上データ用変数
            SalesSlip sourceSalesSlip = new SalesSlip();
            List<SalesDetail> sourceSalesDetailList = new List<SalesDetail>();
            #endregion

            foreach (CustomSerializeArrayList list in salesDataList)
            {
                #region 売上データ分解
                //------------------------------------------------------
                // 売上データ分解
                //------------------------------------------------------
                foreach (object obj in list)
                {
                    if (obj is SalesSlip)
                    {
                        sourceSalesSlip = (SalesSlip)obj;
                    }
                    else if (obj is List<SalesDetail>)
                    {
                        sourceSalesDetailList = (List<SalesDetail>)obj;
                    }
                }
                #endregion

                detailRowNo = 0;

                foreach (SalesDetail salesDetail in sourceSalesDetailList)
                {
                    SalesInputDataSet.StockTempRow stockTempRow = this._stockTempDataTable.FindByDtlRelationGuid(salesDetail.DtlRelationGuid);

                    if (stockTempRow == null) continue;

                    // 発注以外は読み飛ばし
                    if (stockTempRow.SupplierFormal != (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order) continue;

                    // UOE発注データが存在しない場合、読み飛ばし
                    if (!this.ExistOrderInfo(stockTempRow.DtlRelationGuid)) continue;

                    if (detailRowNo == 0)
                    {
                        slipRowNo++; // 仕入情報作成後の番号引き継ぎ
                        // 仕入データ追加
                        this._stockSlipDataTable.AddStockSlipRow(GetStockSlipRow(slipRowNo, stockTempRow, this._dataSet.StockSlip));
                    }
                    detailRowNo++;
                    // 仕入明細データ追加
                    this._stockDetailDataTable.AddStockDetailRow(GetStockDetailRow(slipRowNo, detailRowNo, stockTempRow, this._dataSet.StockDetail));
                }

            }
            #endregion

        }

        /// <summary>
        /// 仕入データ行生成処理
        /// </summary>
        /// <param name="no">行番号</param>
        /// <param name="StockTempRow">仕入情報行オブジェクト</param>
        /// <returns>仕入データ行オブジェクト</returns>
        private SalesInputDataSet.StockSlipRow GetStockSlipRow(int slipRowNo, SalesInputDataSet.StockTempRow stockTempRow, SalesInputDataSet.StockSlipDataTable table)
        {
            SalesInputDataSet.StockSlipRow row = table.NewStockSlipRow();

            row.No = slipRowNo;

            #region 項目セット
            row.CreateDateTime = stockTempRow.CreateDateTime; // 作成日時
            row.UpdateDateTime = stockTempRow.UpdateDateTime; // 更新日時
            row.EnterpriseCode = stockTempRow.EnterpriseCode; // 企業コード
            row.FileHeaderGuid = stockTempRow.FileHeaderGuid; // GUID
            row.UpdEmployeeCode = stockTempRow.UpdEmployeeCode; // 更新従業員コード
            row.UpdAssemblyId1 = stockTempRow.UpdAssemblyId1; // 更新アセンブリID1
            row.UpdAssemblyId2 = stockTempRow.UpdAssemblyId2; // 更新アセンブリID2
            row.LogicalDeleteCode = stockTempRow.LogicalDeleteCode; // 論理削除区分
            row.SupplierFormal = stockTempRow.SupplierFormal; // 仕入形式
            row.SupplierSlipNo = stockTempRow.SupplierSlipNo; // 仕入伝票番号
            if (stockTempRow.SupplierSlipNo == ctDefaultSupplierSlipNo) row.SupplierSlipNo = 0;
            row.SectionCode = stockTempRow.SectionCode; // 拠点コード
            row.SubSectionCode = stockTempRow.SubSectionCode; // 部門コード
            row.DebitNoteDiv = stockTempRow.DebitNoteDiv; // 赤伝区分
            row.DebitNLnkSuppSlipNo = stockTempRow.DebitNLnkSuppSlipNo; // 赤黒連結仕入伝票番号
            row.SupplierSlipCd = stockTempRow.SupplierSlipCd; // 仕入伝票区分
            row.StockGoodsCd = stockTempRow.StockGoodsCd; // 仕入商品区分
            row.AccPayDivCd = stockTempRow.AccPayDivCd; // 買掛区分
            row.StockSectionCd = stockTempRow.StockSectionCd; // 仕入拠点コード
            row.StockAddUpSectionCd = stockTempRow.StockAddUpSectionCd; // 仕入計上拠点コード
            row.StockSlipUpdateCd = stockTempRow.StockSlipUpdateCd; // 仕入伝票更新区分
            row.InputDay = stockTempRow.InputDay; // 入力日
            row.ArrivalGoodsDay = stockTempRow.ArrivalGoodsDay; // 入荷日
            row.StockDate = stockTempRow.StockDate; // 仕入日
            row.StockAddUpADate = stockTempRow.StockAddUpADate; // 仕入計上日付
            row.DelayPaymentDiv = stockTempRow.DelayPaymentDiv; // 来勘区分
            row.PayeeCode = stockTempRow.PayeeCode; // 支払先コード
            row.PayeeSnm = stockTempRow.PayeeSnm; // 支払先略称
            row.SupplierCd = stockTempRow.SupplierCd; // 仕入先コード
            row.SupplierNm1 = stockTempRow.SupplierNm1; // 仕入先名1
            row.SupplierNm2 = stockTempRow.SupplierNm2; // 仕入先名2
            row.SupplierSnm = stockTempRow.SupplierSnm; // 仕入先略称
            row.BusinessTypeCode = stockTempRow.BusinessTypeCode; // 業種コード
            row.BusinessTypeName = stockTempRow.BusinessTypeName; // 業種名称
            row.SalesAreaCode = stockTempRow.SalesAreaCode; // 販売エリアコード
            row.SalesAreaName = stockTempRow.SalesAreaName; // 販売エリア名称
            row.StockInputCode = stockTempRow.StockInputCode; // 仕入入力者コード
            row.StockInputName = stockTempRow.StockInputName; // 仕入入力者名称
            row.StockAgentCode = stockTempRow.StockAgentCode; // 仕入担当者コード
            row.StockAgentName = stockTempRow.StockAgentName; // 仕入担当者名称
            row.SuppTtlAmntDspWayCd = stockTempRow.SuppTtlAmntDspWayCd; // 仕入先総額表示方法区分
            row.TtlAmntDispRateApy = stockTempRow.TtlAmntDispRateApy; // 総額表示掛率適用区分
            row.StockTotalPrice = stockTempRow.StockTotalPrice; // 仕入金額合計
            row.StockSubttlPrice = stockTempRow.StockSubttlPrice; // 仕入金額小計
            row.StockTtlPricTaxInc = stockTempRow.StockTtlPricTaxInc; // 仕入金額計（税込み）
            row.StockTtlPricTaxExc = stockTempRow.StockTtlPricTaxExc; // 仕入金額計（税抜き）
            row.StockNetPrice = stockTempRow.StockNetPrice; // 仕入正価金額
            row.StockPriceConsTax = stockTempRow.StockPriceConsTax; // 仕入金額消費税額
            row.TtlItdedStcOutTax = stockTempRow.TtlItdedStcOutTax; // 仕入外税対象額合計
            row.TtlItdedStcInTax = stockTempRow.TtlItdedStcInTax; // 仕入内税対象額合計
            row.TtlItdedStcTaxFree = stockTempRow.TtlItdedStcTaxFree; // 仕入非課税対象額合計
            row.StockOutTax = stockTempRow.StockOutTax; // 仕入金額消費税額（外税）
            row.StckPrcConsTaxInclu = stockTempRow.StckPrcConsTaxInclu; // 仕入金額消費税額（内税）
            row.StckDisTtlTaxExc = stockTempRow.StckDisTtlTaxExc; // 仕入値引金額計（税抜き）
            row.ItdedStockDisOutTax = stockTempRow.ItdedStockDisOutTax; // 仕入値引外税対象額合計
            row.ItdedStockDisInTax = stockTempRow.ItdedStockDisInTax; // 仕入値引内税対象額合計
            row.ItdedStockDisTaxFre = stockTempRow.ItdedStockDisTaxFre; // 仕入値引非課税対象額合計
            row.StockDisOutTax = stockTempRow.StockDisOutTax; // 仕入値引消費税額（外税）
            row.StckDisTtlTaxInclu = stockTempRow.StckDisTtlTaxInclu; // 仕入値引消費税額（内税）
            row.TaxAdjust = stockTempRow.TaxAdjust; // 消費税調整額
            row.BalanceAdjust = stockTempRow.BalanceAdjust; // 残高調整額
            row.SuppCTaxLayCd = stockTempRow.SuppCTaxLayCd; // 仕入先消費税転嫁方式コード
            row.SupplierConsTaxRate = stockTempRow.SupplierConsTaxRate; // 仕入先消費税税率
            row.AccPayConsTax = stockTempRow.AccPayConsTax; // 買掛消費税
            row.StockFractionProcCd = stockTempRow.StockFractionProcCd; // 仕入端数処理区分
            row.AutoPayment = stockTempRow.AutoPayment; // 自動支払区分
            row.AutoPaySlipNum = stockTempRow.AutoPaySlipNum; // 自動支払伝票番号
            row.RetGoodsReasonDiv = stockTempRow.RetGoodsReasonDiv; // 返品理由コード
            row.RetGoodsReason = stockTempRow.RetGoodsReason; // 返品理由
            row.PartySaleSlipNum = stockTempRow.PartySaleSlipNum; // 相手先伝票番号
            row.SupplierSlipNote1 = stockTempRow.SupplierSlipNote1; // 仕入伝票備考1
            row.SupplierSlipNote2 = stockTempRow.SupplierSlipNote2; // 仕入伝票備考2
            row.DetailRowCount = stockTempRow.DetailRowCount; // 明細行数
            row.EdiSendDate = stockTempRow.EdiSendDate; // ＥＤＩ送信日
            row.EdiTakeInDate = stockTempRow.EdiTakeInDate; // ＥＤＩ取込日
            row.UoeRemark1 = stockTempRow.UoeRemark1; // ＵＯＥリマーク１
            row.UoeRemark2 = stockTempRow.UoeRemark2; // ＵＯＥリマーク２
            row.SlipPrintDivCd = stockTempRow.SlipPrintDivCd; // 伝票発行区分
            row.SlipPrintFinishCd = stockTempRow.SlipPrintFinishCd; // 伝票発行済区分
            row.StockSlipPrintDate = stockTempRow.StockSlipPrintDate; // 仕入伝票発行日
            row.SlipPrtSetPaperId = stockTempRow.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
            row.SlipAddressDiv = stockTempRow.SlipAddressDiv; // 伝票住所区分
            row.AddresseeCode = stockTempRow.AddresseeCode; // 納品先コード
            row.AddresseeName = stockTempRow.AddresseeName; // 納品先名称
            row.AddresseeName2 = stockTempRow.AddresseeName2; // 納品先名称2
            row.AddresseePostNo = stockTempRow.AddresseePostNo; // 納品先郵便番号
            row.AddresseeAddr1 = stockTempRow.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
            row.AddresseeAddr3 = stockTempRow.AddresseeAddr3; // 納品先住所3(番地)
            row.AddresseeAddr4 = stockTempRow.AddresseeAddr4; // 納品先住所4(アパート名称)
            row.AddresseeTelNo = stockTempRow.AddresseeTelNo; // 納品先電話番号
            row.AddresseeFaxNo = stockTempRow.AddresseeFaxNo; // 納品先FAX番号
            row.DirectSendingCd = stockTempRow.DirectSendingCd; // 直送区分
            row.PayeeName = stockTempRow.PayeeName; // 支払先名称
            row.PayeeName2 = stockTempRow.PayeeName2; // 支払先名称２

            // 発注の場合、補正
            if (row.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order)
            {
                row.SupplierSlipCd = (int)SalesSlipStockInfoInputAcs.SupplierSlipCd.Stock;
            }
            #endregion

            return row;
        }

        /// <summary>
        /// 仕入明細データ行生成処理
        /// </summary>
        /// <param name="slipRowNo">伝票行番号</param>
        /// <param name="detailRowNo">明細行番号</param>
        /// <param name="stockTempRow">仕入情報行オブジェクト</param>
        /// <param name="table">仕入明細データ行オブジェクト</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Update Note: 2015/09/03 田建委</br>
        /// <br>管理番号   : 11170129-00 </br>
        /// <br>           : Redmine#47038 【№526】売上伝票入力の障害対応</br>
        /// <br>           : 仕入伝票が修正モードの場合、仕入明細データの「仕入形式（元）」と「仕入明細通番（元）」の補正処理を行いません。</br>
        /// </remarks>
        private SalesInputDataSet.StockDetailRow GetStockDetailRow(int slipRowNo, int detailRowNo, SalesInputDataSet.StockTempRow stockTempRow, SalesInputDataSet.StockDetailDataTable table)
        {
            SalesInputDataSet.StockDetailRow row = table.NewStockDetailRow();

            row.No = slipRowNo;
            row.StockRowNo = detailRowNo;

            #region 項目セット
            row.AcceptAnOrderNo = stockTempRow.AcceptAnOrderNo; // 受注番号
            row.SupplierFormal = stockTempRow.SupplierFormal; // 仕入形式
            row.SupplierSlipNo = stockTempRow.SupplierSlipNo; // 仕入伝票番号
            if (stockTempRow.SupplierSlipNo == ctDefaultSupplierSlipNo) row.SupplierSlipNo = 0;
            //row.StockRowNo = stockTempRow.StockRowNo; // 仕入行番号
            row.SectionCode = stockTempRow.SectionCode; // 拠点コード
            row.SubSectionCode = stockTempRow.SubSectionCode; // 部門コード
            row.CommonSeqNo = stockTempRow.CommonSeqNo; // 共通通番
            row.StockSlipDtlNum = stockTempRow.StockSlipDtlNum; // 仕入明細通番
            row.SupplierFormalSrc = stockTempRow.SupplierFormalSrc; // 仕入形式（元）
            row.StockSlipDtlNumSrc = stockTempRow.StockSlipDtlNumSrc; // 仕入明細通番（元）
            row.AcptAnOdrStatusSync = stockTempRow.AcptAnOdrStatusSync; // 受注ステータス（同時）
            row.SalesSlipDtlNumSync = stockTempRow.SalesSlipDtlNumSync; // 売上明細通番（同時）
            row.StockSlipCdDtl = stockTempRow.StockSlipCdDtl; // 仕入伝票区分（明細）
            row.StockInputCode = stockTempRow.StockInputCode; // 仕入入力者コード
            row.StockInputName = stockTempRow.StockInputName; // 仕入入力者名称
            row.StockAgentCode = stockTempRow.StockAgentCode; // 仕入担当者コード
            row.StockAgentName = stockTempRow.StockAgentName; // 仕入担当者名称
            row.GoodsKindCode = stockTempRow.GoodsKindCode; // 商品属性
            row.GoodsMakerCd = stockTempRow.GoodsMakerCd; // 商品メーカーコード
            row.MakerName = stockTempRow.MakerName; // メーカー名称
            row.MakerKanaName = stockTempRow.MakerKanaName; // メーカーカナ名称
            row.CmpltMakerKanaName = stockTempRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            row.GoodsNo = stockTempRow.GoodsNo; // 商品番号
            row.GoodsName = stockTempRow.GoodsName; // 商品名称
            row.GoodsNameKana = stockTempRow.GoodsNameKana; // 商品名称カナ
            row.GoodsLGroup = stockTempRow.GoodsLGroup; // 商品大分類コード
            row.GoodsLGroupName = stockTempRow.GoodsLGroupName; // 商品大分類名称
            row.GoodsMGroup = stockTempRow.GoodsMGroup; // 商品中分類コード
            row.GoodsMGroupName = stockTempRow.GoodsMGroupName; // 商品中分類名称
            row.BLGroupCode = stockTempRow.BLGroupCode; // BLグループコード
            row.BLGroupName = stockTempRow.BLGroupName; // BLグループコード名称
            row.BLGoodsCode = stockTempRow.BLGoodsCode; // BL商品コード
            row.BLGoodsFullName = stockTempRow.BLGoodsFullName; // BL商品コード名称（全角）
            row.EnterpriseGanreCode = stockTempRow.EnterpriseGanreCode; // 自社分類コード
            row.EnterpriseGanreName = stockTempRow.EnterpriseGanreName; // 自社分類名称
            row.WarehouseCode = stockTempRow.WarehouseCode; // 倉庫コード
            row.WarehouseName = stockTempRow.WarehouseName; // 倉庫名称
            row.WarehouseShelfNo = stockTempRow.WarehouseShelfNo; // 倉庫棚番
            row.StockOrderDivCd = stockTempRow.StockOrderDivCd; // 仕入在庫取寄せ区分
            row.OpenPriceDiv = stockTempRow.OpenPriceDiv; // オープン価格区分
            row.GoodsRateRank = stockTempRow.GoodsRateRank; // 商品掛率ランク
            row.CustRateGrpCode = stockTempRow.CustRateGrpCode; // 得意先掛率グループコード
            row.SuppRateGrpCode = stockTempRow.SuppRateGrpCode; // 仕入先掛率グループコード
            row.ListPriceTaxExcFl = stockTempRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            row.ListPriceTaxIncFl = stockTempRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            row.StockRate = stockTempRow.StockRate; // 仕入率
            row.RateSectStckUnPrc = stockTempRow.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
            row.RateDivStckUnPrc = stockTempRow.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
            row.UnPrcCalcCdStckUnPrc = stockTempRow.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
            row.PriceCdStckUnPrc = stockTempRow.PriceCdStckUnPrc; // 価格区分（仕入単価）
            row.StdUnPrcStckUnPrc = stockTempRow.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
            row.FracProcUnitStcUnPrc = stockTempRow.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
            row.FracProcStckUnPrc = stockTempRow.FracProcStckUnPrc; // 端数処理（仕入単価）
            row.StockUnitPriceFl = stockTempRow.StockUnitPriceFl; // 仕入単価（税抜，浮動）
            row.StockUnitTaxPriceFl = stockTempRow.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
            row.StockUnitChngDiv = stockTempRow.StockUnitChngDiv; // 仕入単価変更区分
            row.BfStockUnitPriceFl = stockTempRow.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
            row.BfListPrice = stockTempRow.BfListPrice; // 変更前定価
            row.RateBLGoodsCode = stockTempRow.RateBLGoodsCode; // BL商品コード（掛率）
            row.RateBLGoodsName = stockTempRow.RateBLGoodsName; // BL商品コード名称（掛率）
            row.RateGoodsRateGrpCd = stockTempRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            row.RateGoodsRateGrpNm = stockTempRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            row.RateBLGroupCode = stockTempRow.RateBLGroupCode; // BLグループコード（掛率）
            row.RateBLGroupName = stockTempRow.RateBLGroupName; // BLグループ名称（掛率）
            row.StockCount = stockTempRow.StockCount; // 仕入数
            row.OrderCnt = stockTempRow.OrderCnt; // 発注数量
            row.OrderAdjustCnt = stockTempRow.OrderAdjustCnt; // 発注調整数
            row.OrderRemainCnt = stockTempRow.OrderRemainCnt; // 発注残数
            row.RemainCntUpdDate = stockTempRow.RemainCntUpdDate; // 残数更新日
            row.StockPriceTaxExc = stockTempRow.StockPriceTaxExc; // 仕入金額（税抜き）
            row.StockPriceTaxInc = stockTempRow.StockPriceTaxInc; // 仕入金額（税込み）
            row.StockGoodsCd = stockTempRow.StockGoodsCd; // 仕入商品区分
            row.StockPriceConsTax = stockTempRow.StockPriceConsTaxDetail; // 仕入金額消費税額
            row.TaxationCode = stockTempRow.TaxationCode; // 課税区分
            row.StockDtiSlipNote1 = stockTempRow.StockDtiSlipNote1; // 仕入伝票明細備考1
            row.SalesCustomerCode = stockTempRow.SalesCustomerCode; // 販売先コード
            row.SalesCustomerSnm = stockTempRow.SalesCustomerSnm; // 販売先略称
            row.SlipMemo1 = stockTempRow.SlipMemo1; // 伝票メモ１
            row.SlipMemo2 = stockTempRow.SlipMemo2; // 伝票メモ２
            row.SlipMemo3 = stockTempRow.SlipMemo3; // 伝票メモ３
            row.InsideMemo1 = stockTempRow.InsideMemo1; // 社内メモ１
            row.InsideMemo2 = stockTempRow.InsideMemo2; // 社内メモ２
            row.InsideMemo3 = stockTempRow.InsideMemo3; // 社内メモ３
            //row.SupplierCd = stockTempRow.SupplierCd; // 仕入先コード
            //row.SupplierSnm = stockTempRow.SupplierSnm; // 仕入先略称
            //row.AddresseeCode = stockTempRow.AddresseeCode; // 納品先コード
            //row.AddresseeName = stockTempRow.AddresseeName; // 納品先名称
            //row.DirectSendingCd = stockTempRow.DirectSendingCd; // 直送区分
            //row.OrderNumber = stockTempRow.OrderNumber; // 発注番号
            //row.WayToOrder = stockTempRow.WayToOrder; // 注文方法
            //row.DeliGdsCmpltDueDate = stockTempRow.DeliGdsCmpltDueDate; // 納品完了予定日
            //row.ExpectDeliveryDate = stockTempRow.ExpectDeliveryDate; // 希望納期
            //row.OrderDataCreateDiv = stockTempRow.OrderDataCreateDiv; // 発注データ作成区分
            //row.OrderDataCreateDate = stockTempRow.OrderDataCreateDate; // 発注データ作成日
            //row.OrderFormIssuedDiv = stockTempRow.OrderFormIssuedDiv; // 発注書発行済区分
            row.DtlRelationGuid = stockTempRow.DtlRelationGuid; // 共通キー

            //-----------------------------------------------------------------------------
            // 補正
            //-----------------------------------------------------------------------------
            // 仕入形式（元）、仕入明細通番（元）
            //----- DEL 2015/09/03 田建委 Redmine#47038 【№526】売上伝票入力の障害対応 ---------->>>>>
            //// --- UPD 2013/01/30 Y.Wakita ---------->>>>>
            ////>>>2010/10/07
            //////if (stockTempRow.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_AddUpNew)
            ////if ((stockTempRow.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_AddUpNew) &&
            ////    (stockTempRow.SupplierSlipCd != 20)) // 返品
            //////<<<2010/10/07
            //if (stockTempRow.SupplierSlipCd != 20) // 返品
            //// --- UPD 2013/01/30 Y.Wakita ----------<<<<<
            //{
            //    row.SupplierFormalSrc = -1;
            //    row.StockSlipDtlNumSrc = 0;
            //}
            //----- DEL 2015/09/03 田建委 Redmine#47038 【№526】売上伝票入力の障害対応 ----------<<<<<
            //----- ADD 2015/09/03 田建委 Redmine#47038 【№526】売上伝票入力の障害対応 ---------->>>>>
            // 新規作成する仕入データを作成するため、仕入形式（元）、仕入明細通番（元）の補正が必要あります。
            // 新規仕入データの判断条件：仕入伝票番号が「仕入伝票番号初期値」(1000000000)です。
            if (stockTempRow.SupplierSlipNo == ctDefaultSupplierSlipNo)
            {
                row.SupplierFormalSrc = -1;
                row.StockSlipDtlNumSrc = 0;
            }
            //----- ADD 2015/09/03 田建委 Redmine#47038 【№526】売上伝票入力の障害対応 ----------<<<<<

            // 受注ステータス（同時）
            switch ((SalesSlipStockInfoInputAcs.SupplierFormal)stockTempRow.SupplierFormal)
            {
                case SalesSlipStockInfoInputAcs.SupplierFormal.Stock:
                case SalesSlipStockInfoInputAcs.SupplierFormal.ArrivalGoods:
                    row.AcptAnOdrStatusSync = stockTempRow.AcptAnOdrStatusSync;
                    break;
                case SalesSlipStockInfoInputAcs.SupplierFormal.Order:
                    SalesInputDataSet.SalesDetailAcceptAnOrderRow acptAnOdrRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(stockTempRow.DtlRelationGuid);
                    if (acptAnOdrRow == null) acptAnOdrRow = this._salesDetailAcceptAnOrderDataTableForOrder.FindByDtlRelationGuid(stockTempRow.DtlRelationGuid);
                    if (acptAnOdrRow != null) row.AcptAnOdrStatusSync = acptAnOdrRow.AcptAnOdrStatus;
                    break;
            }
            // 発注の場合
            if (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order)
            {
                row.SupplierCd = stockTempRow.SupplierCd; // 仕入先コード
                row.SupplierSnm = stockTempRow.SupplierSnm; // 仕入先略称
                row.AddresseeCode = stockTempRow.AddresseeCode; // 納品先コード
                row.AddresseeName = stockTempRow.AddresseeName; // 納品先名称
                row.DirectSendingCd = stockTempRow.DirectSendingCd; // 直送区分
                row.OrderNumber = stockTempRow.OrderNumber; // 発注番号
                row.WayToOrder = 2; // 注文方法
                row.DeliGdsCmpltDueDate = stockTempRow.DeliGdsCmpltDueDate; // 納品完了予定日
                row.ExpectDeliveryDate = stockTempRow.ExpectDeliveryDate; // 希望納期
                row.OrderDataCreateDiv = 1; // 発注データ作成区分
                row.OrderDataCreateDate = DateTime.Today; // 発注データ作成日
                row.OrderFormIssuedDiv = stockTempRow.OrderFormIssuedDiv; // 発注書発行済区分
            }
            #endregion

            return row;
        }

        /// <summary>
        /// 仕入データテーブルの仕入合計金額、明細行数などを調整します。
        /// </summary>
        private void AdjustStockSlipTable()
        {
            if ((this._stockSlipDataTable == null) || (this._stockSlipDataTable.Count == 0)) return;

            foreach (SalesInputDataSet.StockSlipRow row in this._dataSet.StockSlip.Rows)
            {
                DataRow[] childRows = row.GetChildRows("StockSlip_StockDetail");

                if ((childRows != null) && (childRows.Length > 0))
                {
                    SalesInputDataSet.StockDetailRow topRow = (SalesInputDataSet.StockDetailRow)childRows[0];

                    //-----------------------------------------------------------------------------
                    // 明細行数補正
                    //-----------------------------------------------------------------------------
                    row.DetailRowCount = childRows.Length;

                    //-----------------------------------------------------------------------------
                    // 金額補正
                    //-----------------------------------------------------------------------------
                    int taxFractionProcCd = this._supplierAcs.GetStockFractionProcCd(this._enterpriseCode, row.SupplierCd, SupplierAcs.StockFracProcMoneyDiv.CnsTaxFrcProcCd);

                    long stockTtlPricTaxInc = 0;	// 仕入金額計（税込み）
                    long stockTtlPricTaxExc = 0;	// 仕入金額計（税抜き）
                    long stockPriceConsTax = 0;		// 仕入金額消費税額
                    long ttlItdedStcOutTax = 0;		// 仕入外税対象額合計
                    long ttlItdedStcInTax = 0;		// 仕入内税対象額合計
                    long ttlItdedStcTaxFree = 0;	// 仕入非課税対象額合計
                    long stockOutTax = 0;			// 仕入金額消費税額（外税）
                    long stckPrcConsTaxInclu = 0;	// 仕入金額消費税額（内税）
                    long stckDisTtlTaxExc = 0;		// 仕入値引金額計（税抜き）
                    long itdedStockDisOutTax = 0;	// 仕入値引外税対象額合計
                    long itdedStockDisInTax = 0;	// 仕入値引内税対象額合計
                    long itdedStockDisTaxFre = 0;	// 仕入値引非課税対象額合計
                    long stockDisOutTax = 0;		// 仕入値引消費税額（外税）
                    long stckDisTtlTaxInclu = 0;	// 仕入値引消費税額（内税）
                    long balanceAdjust = 0;			// 残高調整額
                    long taxAdjust = 0;				// 消費税調整額

                    this.CalculationStockTotalPrice(row.SupplierConsTaxRate, taxFractionProcCd, row.SuppTtlAmntDspWayCd, row.SuppCTaxLayCd, out stockTtlPricTaxInc, out stockTtlPricTaxExc, out stockPriceConsTax, out ttlItdedStcOutTax, out ttlItdedStcInTax, out ttlItdedStcTaxFree, out stockOutTax, out stckPrcConsTaxInclu, out stckDisTtlTaxExc, out itdedStockDisOutTax, out itdedStockDisInTax, out itdedStockDisTaxFre, out stockDisOutTax, out stckDisTtlTaxInclu, out balanceAdjust, out taxAdjust, childRows);

                    row.StockTtlPricTaxInc = stockTtlPricTaxInc;		                            // 仕入金額計（税込み）
                    row.StockTtlPricTaxExc = stockTtlPricTaxExc;		                            // 仕入金額計（税抜き）
                    row.StockPriceConsTax = stockPriceConsTax;		                                // 仕入金額消費税額
                    row.TtlItdedStcOutTax = ttlItdedStcOutTax;		                                // 仕入外税対象額合計
                    row.TtlItdedStcInTax = ttlItdedStcInTax;			                            // 仕入内税対象額合計
                    row.TtlItdedStcTaxFree = ttlItdedStcTaxFree;		                            // 仕入非課税対象額合計
                    row.StockOutTax = stockOutTax;					                                // 仕入金額消費税額（外税）
                    row.StckPrcConsTaxInclu = stckPrcConsTaxInclu;	                                // 仕入金額消費税額（内税）
                    row.StckDisTtlTaxExc = stckDisTtlTaxExc;			                            // 仕入値引金額計（税抜き）
                    row.ItdedStockDisOutTax = itdedStockDisOutTax;	                                // 仕入値引外税対象額合計
                    row.ItdedStockDisInTax = itdedStockDisInTax;		                            // 仕入値引内税対象額合計
                    row.ItdedStockDisTaxFre = itdedStockDisTaxFre;	                                // 仕入値引非課税対象額合計
                    row.StockDisOutTax = stockDisOutTax;				                            // 仕入値引消費税額（外税）
                    row.StckDisTtlTaxInclu = stckDisTtlTaxInclu;		                            // 仕入値引消費税額（内税）
                    row.StockNetPrice = ttlItdedStcOutTax + ttlItdedStcInTax + ttlItdedStcTaxFree;	// 仕入正価金額 = 外税対象金額 + 内税対象金額 + 非課税対象金額
                    row.StockTotalPrice = stockTtlPricTaxInc + ttlItdedStcTaxFree;					// 仕入金額合計 = 仕入金額計（税込み）+ 仕入非課税対象額合計
                    row.StockSubttlPrice = stockTtlPricTaxExc + ttlItdedStcTaxFree;					// 仕入金額小計 = 仕入金額計（税抜き）+ 仕入非課税対象額合計
                    row.AccPayConsTax = stockOutTax + stckPrcConsTaxInclu + stockDisOutTax + stckDisTtlTaxInclu; // 買掛消費税

                    //-----------------------------------------------------------------------------
                    // 仕入伝票番号補正
                    //-----------------------------------------------------------------------------
                    foreach (SalesInputDataSet.StockDetailRow stockDetailRow in childRows)
                    {
                        stockDetailRow.SupplierSlipNo = row.SupplierSlipNo;
                        // --- ADD 2013/02/19 Y.Wakita ---------->>>>>
                        // BLコード０対応
                        if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().BLGoodsCdZeroSuprt == 1)
                        {
                            if (stockDetailRow.BLGoodsCode == 0)
                            {
                                // BL商品コードに変換コードを設定
                                stockDetailRow.BLGoodsCode = this._salesSlipInputInitDataAcs.GetSalesTtlSt().BLGoodsCdChange;
                            }
                        }
                        // --- ADD 2013/02/19 Y.Wakita ----------<<<<<
                    }
                }
            }
        }

        /// <summary>
        /// 仕入金額の合計を計算します。
        /// </summary>
        /// <param name="supplierConsTaxRate">仕入先消費税税率</param>
        /// <param name="stockTaxFractionProcCode">仕入消費税端数処理コード</param>
        /// <param name="suppTtlAmntDspWayCd">仕入先総額表示方法区分</param>
        /// <param name="suppCTaxLayCd">消費税転嫁方式</param>
        /// <param name="stockTtlPricTaxInc">仕入金額計（税込み）</param>
        /// <param name="stockTtlPricTaxExc">仕入金額計（税抜き）</param>
        /// <param name="stockPriceConsTax">仕入金額消費税額</param>
        /// <param name="ttlItdedStcOutTax">仕入外税対象額合計</param>
        /// <param name="ttlItdedStcInTax">仕入内税対象額合計</param>
        /// <param name="ttlItdedStcTaxFree">仕入非課税対象額合計</param>
        /// <param name="stockOutTax">仕入金額消費税額（外税）</param>
        /// <param name="stckPrcConsTaxInclu">仕入金額消費税額（内税）</param>
        /// <param name="stckDisTtlTaxExc">仕入値引金額計（税抜き）</param>
        /// <param name="itdedStockDisOutTax">仕入値引外税対象額合計</param>
        /// <param name="itdedStockDisInTax">仕入値引内税対象額合計</param>
        /// <param name="itdedStockDisTaxFre">仕入値引非課税対象額合計</param>
        /// <param name="stockDisOutTax">仕入値引消費税額（外税）</param>
        /// <param name="stckDisTtlTaxInclu">仕入値引消費税額（内税）</param>
        /// <param name="balanceAdjust">残高調整合計額</param>
        /// <param name="taxAdjust">消費税合計額</param>
        /// <param name="stockDetailRows">仕入情報データオブジェクト配列</param>
        private void CalculationStockTotalPrice(double supplierConsTaxRate, int stockTaxFractionProcCode, int suppTtlAmntDspWayCd, int suppCTaxLayCd, out long stockTtlPricTaxInc, out long stockTtlPricTaxExc, out long stockPriceConsTax, out long ttlItdedStcOutTax, out long ttlItdedStcInTax, out long ttlItdedStcTaxFree, out long stockOutTax, out long stckPrcConsTaxInclu, out long stckDisTtlTaxExc, out long itdedStockDisOutTax, out long itdedStockDisInTax, out long itdedStockDisTaxFre, out long stockDisOutTax, out long stckDisTtlTaxInclu, out long balanceAdjust, out long taxAdjust, DataRow[] stockDetailRows)
        {
            // 仕入消費税端数処理単位、端数処理区分を取得
            int taxFracProcCd = 0;
            double taxFracProcUnit = 0;
            this._salesSlipInputInitDataAcs.GetStockFractionProcInfo(SalesSlipInputInitDataAcs.ctFracProcMoneyDiv_Tax, stockTaxFractionProcCode, 0, out taxFracProcUnit, out taxFracProcCd);

            stockTtlPricTaxInc = 0;		// 仕入金額計（税込み）
            stockTtlPricTaxExc = 0;		// 仕入金額計（税抜き）
            stockPriceConsTax = 0;		// 仕入金額消費税額
            ttlItdedStcOutTax = 0;		// 仕入外税対象額合計
            ttlItdedStcInTax = 0;		// 仕入内税対象額合計
            long ttlItdedStcInTax_TaxInc = 0; // 仕入内税対象額合計（税込）
            ttlItdedStcTaxFree = 0;		// 仕入非課税対象額合計
            stockOutTax = 0;			// 仕入金額消費税額（外税）
            stckPrcConsTaxInclu = 0;	// 仕入金額消費税額（内税）
            stckDisTtlTaxExc = 0;		// 仕入値引金額計（税抜き）
            itdedStockDisOutTax = 0;	// 仕入値引外税対象額合計
            itdedStockDisInTax = 0;		// 仕入値引内税対象額合計
            long itdedStockDisInTax_TaxInc = 0; // 仕入値引内税対象金額合計(税込み)
            itdedStockDisTaxFre = 0;	// 仕入値引非課税対象額合計
            stockDisOutTax = 0;			// 仕入値引消費税額（外税）
            stckDisTtlTaxInclu = 0;		// 仕入値引消費税額（内税）
            balanceAdjust = 0;			// 残高調整額
            taxAdjust = 0;				// 消費税調整額

            //--------------------------------------------------
            // 計算に必要な金額の計算
            //--------------------------------------------------
            #region 計算に必要な金額の計算
            foreach (SalesInputDataSet.StockDetailRow stockDetailRow in stockDetailRows)
            {
                // 仕入外税対象額合計
                ttlItdedStcOutTax += ((stockDetailRow.TaxationCode == (int)CalculateTax.TaxationCode.TaxExc) && (stockDetailRow.StockSlipCdDtl != 2)) ? stockDetailRow.StockPriceTaxExc : 0;

                // 仕入金額消費税額（外税）
                stockOutTax += ((stockDetailRow.TaxationCode == (int)CalculateTax.TaxationCode.TaxExc) && (stockDetailRow.StockSlipCdDtl != 2)) ? stockDetailRow.StockPriceConsTax : 0;

                // 仕入内税対象額合計
                ttlItdedStcInTax += ((stockDetailRow.TaxationCode == (int)CalculateTax.TaxationCode.TaxInc) && (stockDetailRow.StockSlipCdDtl != 2)) ? stockDetailRow.StockPriceTaxExc : 0;

                // 仕入内税対象額合計（税込）
                ttlItdedStcInTax_TaxInc += ((stockDetailRow.TaxationCode == (int)CalculateTax.TaxationCode.TaxInc) && (stockDetailRow.StockSlipCdDtl != 2)) ? stockDetailRow.StockPriceTaxInc : 0;

                // 仕入金額消費税額（内税）
                stckPrcConsTaxInclu += ((stockDetailRow.TaxationCode == (int)CalculateTax.TaxationCode.TaxInc) && (stockDetailRow.StockSlipCdDtl != 2)) ? stockDetailRow.StockPriceConsTax : 0;

                // 仕入非課税対象額合計
                ttlItdedStcTaxFree += ((stockDetailRow.TaxationCode == (int)CalculateTax.TaxationCode.TaxNone) && (stockDetailRow.StockSlipCdDtl != 2)) ? stockDetailRow.StockPriceTaxInc : 0;

                // 仕入値引外税対象額合計
                itdedStockDisOutTax += ((stockDetailRow.TaxationCode == (int)CalculateTax.TaxationCode.TaxExc) && (stockDetailRow.StockSlipCdDtl == 2)) ? stockDetailRow.StockPriceTaxExc : 0;

                // 仕入値引消費税額（外税）
                stockDisOutTax += ((stockDetailRow.TaxationCode == (int)CalculateTax.TaxationCode.TaxExc) && (stockDetailRow.StockSlipCdDtl == 2)) ? stockDetailRow.StockPriceConsTax : 0;

                // 仕入値引内税対象額合計
                itdedStockDisInTax += ((stockDetailRow.TaxationCode == (int)CalculateTax.TaxationCode.TaxInc) && (stockDetailRow.StockSlipCdDtl == 2)) ? stockDetailRow.StockPriceTaxExc : 0;

                // 仕入値引内税対象金額合計(税込み)
                itdedStockDisInTax_TaxInc += ((stockDetailRow.TaxationCode == (int)CalculateTax.TaxationCode.TaxInc) && (stockDetailRow.StockSlipCdDtl == 2)) ? stockDetailRow.StockPriceTaxInc : 0;

                // 仕入値引消費税額（内税）
                stckDisTtlTaxInclu += ((stockDetailRow.TaxationCode == (int)CalculateTax.TaxationCode.TaxInc) && (stockDetailRow.StockSlipCdDtl == 2)) ? stockDetailRow.StockPriceConsTax : 0;

                // 仕入値引非課税対象額合計
                itdedStockDisTaxFre += ((stockDetailRow.TaxationCode == (int)CalculateTax.TaxationCode.TaxNone) && (stockDetailRow.StockSlipCdDtl == 2)) ? stockDetailRow.StockPriceTaxInc : 0;

                // 仕入値引金額計（税抜き） = 仕入値引外税対象額合計 + 仕入値引内税対象額合計 + 仕入値引非課税対象額合計
                stckDisTtlTaxExc += itdedStockDisOutTax + itdedStockDisInTax + itdedStockDisTaxFre;
            }


            #endregion

            //// 総額表示する
            //if (suppTtlAmntDspWayCd == 1)
            //{
            //    //--------------------------------------------------
            //    // ① 仕入金額計（税込み）：仕入外税対象額合計 + 仕入金額消費税額（外税）+ 仕入値引外税対象額合計 + 仕入値引消費税額（外税） + 仕入内税対象額合計（税込） +  値引内税対象金額合計(税込み)
            //    //--------------------------------------------------
            //    stockTtlPricTaxInc = ttlItdedStcOutTax + stockOutTax + itdedStockDisOutTax + stockDisOutTax + ttlItdedStcInTax_TaxInc + itdedStockDisInTax_TaxInc;

            //    //--------------------------------------------------
            //    // ② 仕入金額消費税額：①から内税を計算
            //    //--------------------------------------------------
            //    stockPriceConsTax = CalculateTax.GetTaxFromPriceInc(supplierConsTaxRate, taxFracProcUnit, taxFracProcCd, stockTtlPricTaxInc);

            //    //--------------------------------------------------
            //    // ③ 仕入金額計（税抜き）：② - ①
            //    //--------------------------------------------------
            //    stockTtlPricTaxExc = stockTtlPricTaxInc - stockPriceConsTax;
            //}
            // 転嫁方式：非課税の場合に金額を調整する
            if (suppCTaxLayCd == 9)
            {
                // 仕入金額消費税額（外税）
                stockOutTax = 0;

                // 仕入金額消費税額（内税）
                stckPrcConsTaxInclu = 0;

                // 仕入非課税対象額合計 = 仕入非課税対象額合計 + 仕入外税対象額合計 + 仕入内税対象額合計
                ttlItdedStcTaxFree += ttlItdedStcOutTax + ttlItdedStcInTax;

                // 仕入外税対象額合計
                ttlItdedStcOutTax = 0;

                // 仕入内税対象額合計
                ttlItdedStcInTax = 0;

                // 仕入内税対象額合計（税込）
                ttlItdedStcInTax_TaxInc = 0;

                // 仕入値引消費税額（外税）
                stockDisOutTax = 0;

                // 仕入値引消費税額（内税）
                stckDisTtlTaxInclu = 0;

                // 仕入値引非課税対象額合計 = 仕入値引非課税対象額合計 + 仕入値引外税対象額合計 + 仕入値引内税対象額合計
                itdedStockDisTaxFre += itdedStockDisOutTax + itdedStockDisInTax;

                // 仕入値引外税対象額合計
                itdedStockDisOutTax = 0;

                // 仕入値引内税対象額合計
                itdedStockDisInTax = 0;

                // 仕入値引内税対象額合計（税込)
                itdedStockDisInTax_TaxInc = 0;

                // 仕入値引金額計（税抜き） = 仕入値引外税対象額合計 + 仕入値引内税対象額合計 + 仕入値引非課税対象額合計
                stckDisTtlTaxExc = itdedStockDisOutTax + itdedStockDisInTax + itdedStockDisTaxFre;
            }

            // 明細転嫁以外
            if (suppCTaxLayCd != 1)
            {
                //--------------------------------------------------
                // ① 仕入金額計(税抜き)：仕入外税対象額合計 + 仕入内税対象額合計 + 値引外税対象金額合計 + 値引内税対象金額合計 
                //--------------------------------------------------
                stockTtlPricTaxExc = ttlItdedStcOutTax + ttlItdedStcInTax + itdedStockDisOutTax + itdedStockDisInTax;

                //--------------------------------------------------
                // ② 仕入金額計(税込み)：仕入内税対象額合計(税込み) + 値引内税対象額合計(税込み) + 仕入外税対象額合計 + 値引外税対象金額合計 ＋ (仕入外税対象額合計 + 値引外税対象金額合計)×税率)
                //--------------------------------------------------
                stockTtlPricTaxInc = ttlItdedStcInTax_TaxInc + itdedStockDisInTax_TaxInc + ttlItdedStcOutTax + itdedStockDisOutTax + CalculateTax.GetTaxFromPriceExc(supplierConsTaxRate, taxFracProcUnit, taxFracProcCd, ttlItdedStcOutTax + itdedStockDisOutTax);

                //--------------------------------------------------
                // ③ 消費税合計：② - ①
                //--------------------------------------------------
                stockPriceConsTax = stockTtlPricTaxInc - stockTtlPricTaxExc;

                //--------------------------------------------------
                // ④ 仕入金額消費税額（外税）：仕入外税対象額合計 × 税率
                //--------------------------------------------------
                stockOutTax = CalculateTax.GetTaxFromPriceExc(supplierConsTaxRate, taxFracProcUnit, taxFracProcCd, ttlItdedStcOutTax);

                //--------------------------------------------------
                // ⑤ 外税対象消費税(税抜き、値引き含む) ：(仕入外税対象額合計 + 仕入値引外税対象額合計) × 税率
                //--------------------------------------------------
                long stockOutTax_All = CalculateTax.GetTaxFromPriceExc(supplierConsTaxRate, taxFracProcUnit, taxFracProcCd, ttlItdedStcOutTax + itdedStockDisOutTax);

                //--------------------------------------------------
                // ⑥ 値引外税消費税合計：④ - ⑤
                //--------------------------------------------------
                stockDisOutTax = stockOutTax_All - stockOutTax;
            }
            // 明細転嫁
            else
            {
                //--------------------------------------------------
                // ① 仕入金額消費税額：仕入金額消費税額（外税） + 仕入金額消費税額（内税） +  仕入値引消費税額（外税） + 仕入値引消費税額（内税）
                //--------------------------------------------------
                stockPriceConsTax = stockOutTax + stckPrcConsTaxInclu + stockDisOutTax + stckDisTtlTaxInclu;

                //--------------------------------------------------
                // ② 仕入金額計(税抜き)：仕入外税対象額合計 + 仕入内税対象額合計 + 値引外税対象金額合計 + 値引内税対象金額合計
                //--------------------------------------------------
                stockTtlPricTaxExc = ttlItdedStcOutTax + ttlItdedStcInTax + itdedStockDisOutTax + itdedStockDisInTax;

                //--------------------------------------------------
                // ③ 仕入金額計(税込み)：① + ②
                //--------------------------------------------------
                stockTtlPricTaxInc = stockTtlPricTaxExc + stockPriceConsTax;
            }



            //// 総額表示する
            //if (suppTtlAmntDspWayCd == 1)
            //{
            //    //--------------------------------------------------
            //    // ① 仕入金額計（税込み）：仕入外税対象額合計 + 仕入金額消費税額（外税） + 仕入内税対象額合計（税込） +  値引内税対象金額合計(税込み)
            //    //--------------------------------------------------
            //    stockTtlPricTaxInc = ttlItdedStcOutTax + stockOutTax + ttlItdedStcInTax_TaxInc + itdedStockDisInTax_TaxInc;

            //    //--------------------------------------------------
            //    // ② 仕入金額消費税額：①から内税を計算
            //    //--------------------------------------------------
            //    stockPriceConsTax = CalculateTax.GetTaxFromPriceInc(supplierConsTaxRate, taxFracProcUnit, taxFracProcCd, stockTtlPricTaxInc);

            //    //--------------------------------------------------
            //    // ③ 仕入金額計（税抜き）：② - ①
            //    //--------------------------------------------------
            //    stockTtlPricTaxExc = stockTtlPricTaxInc - stockPriceConsTax;
            //}
            //else if (suppCTaxLayCd != 0)
            //{

            //    //--------------------------------------------------
            //    // ① 仕入金額消費税額：仕入金額消費税額（外税） + 仕入金額消費税額（内税） +  仕入値引消費税額（外税） + 仕入値引消費税額（内税）
            //    //--------------------------------------------------
            //    stockPriceConsTax = stockOutTax + stckPrcConsTaxInclu + stockDisOutTax + stckDisTtlTaxInclu;

            //    //--------------------------------------------------
            //    // ② 仕入金額計(税抜き)：仕入外税対象額合計 + 仕入内税対象額合計 + 値引外税対象金額合計
            //    //--------------------------------------------------
            //    stockTtlPricTaxExc = ttlItdedStcOutTax + ttlItdedStcInTax + itdedStockDisOutTax;

            //    //--------------------------------------------------
            //    // ③ 仕入金額計(税込み)：① + ②
            //    //--------------------------------------------------
            //    stockTtlPricTaxInc = stockTtlPricTaxExc + stockPriceConsTax;
            //}
            //// 総額表示無しで、伝票転嫁
            //else
            //{
            //    //--------------------------------------------------
            //    // ① 仕入金額計(税抜き)：仕入外税対象額合計 + 仕入内税対象額合計 + 値引外税対象金額合計
            //    //--------------------------------------------------
            //    stockTtlPricTaxExc = ttlItdedStcOutTax + ttlItdedStcInTax + itdedStockDisOutTax;

            //    //--------------------------------------------------
            //    // ② 仕入金額計(税込み)：仕入内税対象額合計(税込み) + 仕入外税対象額合計 + 値引外税対象金額合計 ＋ (仕入外税対象額合計 + 値引外税対象金額合計)×税率)
            //    //--------------------------------------------------
            //    stockTtlPricTaxInc = ttlItdedStcInTax_TaxInc + ttlItdedStcOutTax + itdedStockDisOutTax + CalculateTax.GetTaxFromPriceExc(supplierConsTaxRate, taxFracProcUnit, taxFracProcCd, ttlItdedStcOutTax + itdedStockDisOutTax);

            //    //--------------------------------------------------
            //    // ③ 消費税合計：② - ①
            //    //--------------------------------------------------
            //    stockPriceConsTax = stockTtlPricTaxInc - stockTtlPricTaxExc;

            //    //--------------------------------------------------
            //    // ④ 仕入金額消費税額（外税）：仕入外税対象額合計 × 税率
            //    //--------------------------------------------------
            //    stockOutTax = CalculateTax.GetTaxFromPriceExc(supplierConsTaxRate, taxFracProcUnit, taxFracProcCd, ttlItdedStcOutTax);

            //    //--------------------------------------------------
            //    // ⑤ 外税対象消費税(税抜き、値引き含む) ：(仕入外税対象額合計 + 仕入値引外税対象額合計) × 税率
            //    //--------------------------------------------------
            //    long stockOutTax_All = CalculateTax.GetTaxFromPriceExc(supplierConsTaxRate, taxFracProcUnit, taxFracProcCd, ttlItdedStcOutTax + itdedStockDisOutTax);

            //    //--------------------------------------------------
            //    // ⑥ 値引外税消費税合計：④ - ⑤
            //    //--------------------------------------------------
            //    stockDisOutTax = stockOutTax_All - stockOutTax;
            //}
        }
        #endregion

        #region 仕入データテーブル、仕入明細データテーブル → Write用仕入リスト
        /// <summary>
        /// 仕入リストを仕入データテーブルおよび仕入明細データテーブルより取得します。
        /// </summary>
        /// <param name="stockSlipInfoList"></param>
        /// <param name="deleteStockSlipInfoList"></param>
        /// <param name="stockSyncInfoKeyList"></param>
        /// <param name="salesDataList"></param>
        private void GetCurrentStockInfo(out ArrayList stockSlipInfoList, out ArrayList deleteStockSlipInfoList, List<StockSyncInfoKey> stockSyncInfoKeyList, ArrayList salesDataList)
        {
            //-----------------------------------------------------------------------------
            // 既存入力分仕入情報設定処理
            //-----------------------------------------------------------------------------
            this.SettingExistInputStockInfo(ref stockSyncInfoKeyList);

            //>>>2010/09/27
            //-----------------------------------------------------------------------------
            // 既存修正行のヘッダ情報クリア処理
            //-----------------------------------------------------------------------------
            this.RevisionHeaderClear();
            //<<<2010/09/27

            //-----------------------------------------------------------------------------
            // 仕入データテーブル、仕入明細データテーブル作成
            //-----------------------------------------------------------------------------
            this.CollectStockSlipUnit(salesDataList);

            //-----------------------------------------------------------------------------
            // 仕入データテーブル、仕入明細データテーブル補正処理
            //-----------------------------------------------------------------------------
            this.AdjustStockSlipTable();

            //-----------------------------------------------------------------------------
            // 仕入リスト取得
            //-----------------------------------------------------------------------------
            this.GetUIDataFromStockTable(this._stockSlipDataTable, this._stockDetailDataTable, out stockSlipInfoList);

            //-----------------------------------------------------------------------------
            // 削除仕入伝票情報リスト作成
            //-----------------------------------------------------------------------------
            this.MakeDeleteStockSlipInfoList(this._stockSlipDataTable, this._stockDetailDataTable, stockSyncInfoKeyList, out deleteStockSlipInfoList);
        }

        /// <summary>
        /// 仕入リストを仕入データテーブルおよび仕入明細データテーブルより取得します。
        /// </summary>
        /// <param name="stockSlipDataTable">仕入データテーブル</param>
        /// <param name="stockDetailDataTable">仕入明細データテーブル</param>
        /// <param name="stockSlipInfoList">仕入リスト</param>
        /// <remarks>
        /// <br>Update Note : 2021/07/13 譚洪</br>
        /// <br>管理番号    : 11601223-00</br>
        /// <br>            : PMKOBETSU-4151 仕入伝票番号消失障害の対応</br>
        /// </remarks>
        private void GetUIDataFromStockTable(SalesInputDataSet.StockSlipDataTable stockSlipDataTable, SalesInputDataSet.StockDetailDataTable stockDetailDataTable, out ArrayList stockSlipInfoList)
        {
            stockSlipInfoList = new ArrayList();        // 仕入情報リスト初期化
            int slipDtlRegOrder = 1;

            if ((stockSlipDataTable == null) || (stockSlipDataTable.Count == 0)) return;

            //----------------------------------------------------
            // 伝票情報ループ
            //----------------------------------------------------
            foreach (SalesInputDataSet.StockSlipRow stockSlipRow in stockSlipDataTable)
            {
                CustomSerializeArrayList stockSlipList = new CustomSerializeArrayList();    // 仕入データリスト初期化
                ArrayList stockDetailList = new ArrayList();                                // 仕入明細データリスト初期化
                ArrayList slipDetailAddInfoWorkList = new ArrayList();                      // 伝票明細追加情報リスト初期化
                bool addFlg = false; // 2012/01/20

                //----------------------------------------------------
                // 明細情報取得
                //----------------------------------------------------
                DataRow[] childRows = stockSlipRow.GetChildRows("StockSlip_StockDetail");

                if ((childRows != null) && (childRows.Length > 0))
                {
                    //----------------------------------------------------
                    // 明細情報ループ
                    //----------------------------------------------------
                    foreach (SalesInputDataSet.StockDetailRow stockDetailRow in childRows)
                    {
                        // 仕入明細データオブジェクト取得
                        StockDetailWork stockDetailWork = this.GetParamDataFromStockDetailRow(stockSlipRow, stockDetailRow);
                        // 仕入明細データオブジェクト追加
                        if (stockDetailWork != null)
                        {
                            stockDetailWork.EnterpriseCode = this._enterpriseCode;
                            // --- ADD 2021/07/13 譚洪 PMKOBETSU-4151 仕入伝票番号消失障害の対応 ----->>>>>
                            stockDetailWork.SectionCode = LoginInfoAcquisition.Employee.BelongSectionCode;
                            // --- ADD 2021/07/13 譚洪 PMKOBETSU-4151 仕入伝票番号消失障害の対応 -----<<<<<
                            stockDetailList.Add(stockDetailWork);
                        }

                        // 伝票明細追加情報取得
                        SlipDetailAddInfoWork slipDetailAddInfoWork = this.SettingSlipDetailAddInfoForStockData(slipDtlRegOrder, stockSlipRow, stockDetailRow);
                        // 伝票明細追加情報追加
                        if (slipDetailAddInfoWork != null) slipDetailAddInfoWorkList.Add(slipDetailAddInfoWork);

                        //>>>2012/01/20
                        // 売上明細データ存在チェック→１明細でも該当すれば登録対象
                        SalesInputDataSet.SalesDetailRow[] rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}='{1}'", this._salesDetailDataTable.DtlRelationGuidColumn.ColumnName, stockDetailRow.DtlRelationGuid));
                        SalesInputDataSet.SalesDetailAcceptAnOrderRow[] rowsAcptForOrder = null;
                        SalesInputDataSet.SalesDetailAcceptAnOrderRow[] rowsAcpt = null;
                        if ((this._salesDetailAcceptAnOrderDataTableForOrder != null) && (this._salesDetailAcceptAnOrderDataTableForOrder.Count != 0))
                        {
                            rowsAcptForOrder = (SalesInputDataSet.SalesDetailAcceptAnOrderRow[])this._salesDetailAcceptAnOrderDataTableForOrder.Select(string.Format("{0}='{1}'", this._salesDetailAcceptAnOrderDataTableForOrder.DtlRelationGuidColumn.ColumnName, stockDetailRow.DtlRelationGuid));
                        }
                        if ((this._salesDetailAcceptAnOrderDataTable != null) && (this._salesDetailAcceptAnOrderDataTable.Count != 0))
                        {
                            rowsAcpt = (SalesInputDataSet.SalesDetailAcceptAnOrderRow[])this._salesDetailAcceptAnOrderDataTable.Select(string.Format("{0}='{1}'", this._salesDetailAcceptAnOrderDataTable.DtlRelationGuidColumn.ColumnName, stockDetailRow.DtlRelationGuid));
                        }

                        if ((rows.Length != 0) ||
                            ((rowsAcptForOrder != null) && (rowsAcptForOrder.Length != 0)) ||
                            ((rowsAcpt != null) && (rowsAcpt.Length != 0))) addFlg = true;
                        //<<<2012/01/20

                        slipDtlRegOrder++;
                    }
                }

                // --- ADD 2012/11/27 Y.Wakita ---------->>>>>
                if ((this._stockTempDataTableDelete != null) && (this._stockTempDataTableDelete.Count != 0))
                {
                    addFlg = true;
                    //this._stockTempDataTableDelete.DefaultView.Sort()
                }
                // --- ADD 2012/11/27 Y.Wakita ----------<<<<<

                //----------------------------------------------------
                // 仕入情報構築
                //----------------------------------------------------
                if (stockDetailList != null)
                {
                    // 仕入データオブジェクト取得
                    StockSlipWork stockSlipWork = this.GetParamDataFromStockRow(stockSlipRow);
                    if (stockSlipWork != null)
                    {
                        stockSlipWork.EnterpriseCode = this._enterpriseCode;
                        // --- ADD 2021/07/13 譚洪 PMKOBETSU-4151 仕入伝票番号消失障害の対応 ----->>>>>
                        stockSlipWork.SectionCode = LoginInfoAcquisition.Employee.BelongSectionCode;
                        // --- ADD 2021/07/13 譚洪 PMKOBETSU-4151 仕入伝票番号消失障害の対応 -----<<<<<

                        //>>>2012/01/20
                        if ((stockSlipWorkTempListForExist != null) && (stockSlipWorkTempListForExist.Count != 0))
                        {
                            foreach (StockSlipWork stockSlipTempWork in stockSlipWorkTempListForExist)
                            {
                                if (!stockSlipWorkTempList.Contains(stockSlipTempWork))
                                {
                                    stockSlipWorkTempList.Add(stockSlipTempWork);
                                }
                            }
                        }
                        //<<<2012/01/20
                        // ADD 2012/01/19 Redmine28098 --- >>>>>
                        foreach (StockSlipWork stockSlipTempWork in stockSlipWorkTempList)
                        {

                            //>>>2012/01/20
                            //if (stockSlipTempWork.SupplierFormal == stockSlipWork.SupplierFormal
                            //    && stockSlipTempWork.SupplierSlipNo == stockSlipWork.SupplierSlipNo)
                            if ((stockSlipTempWork.SupplierFormal == stockSlipWork.SupplierFormal) &&
                                (stockSlipTempWork.PartySaleSlipNum == stockSlipWork.PartySaleSlipNum) &&
                                (stockSlipTempWork.SupplierCd == stockSlipWork.SupplierCd) &&
                                (stockSlipTempWork.StockDate == stockSlipWork.StockDate))
                            //<<<2012/01/20
                            {
                                stockSlipWork.PreStockDate = stockSlipTempWork.StockDate;
                            }
                        }
                        // ADD 2012/01/19 Redmine28098 --- <<<<<

                        // 仕入データオブジェクト追加
                        if (stockSlipWork.SupplierFormal != (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order) stockSlipList.Add(stockSlipWork);
                        // 仕入明細データリスト追加
                        stockSlipList.Add(stockDetailList);
                        // 伝票明細追加情報追加
                        stockSlipList.Add(slipDetailAddInfoWorkList);
                    }
                }
                //>>>2012/01/20
                //// 仕入データリスト追加
                //if (stockSlipList != null) stockSlipInfoList.Add(stockSlipList);

                // 仕入データリスト追加
                if ((stockSlipList != null) && (addFlg)) stockSlipInfoList.Add(stockSlipList);
                //<<<2012/01/20
            }
        }

        /// <summary>
        /// 仕入データワークオブジェクトを仕入データ行オブジェクトより取得します。
        /// </summary>
        /// <param name="stockSlipRow">仕入データ行オブジェクト</param>
        /// <returns>仕入データワークオブジェクト</returns>
        private StockSlipWork GetParamDataFromStockRow(SalesInputDataSet.StockSlipRow stockSlipRow)
        {
            StockSlipWork stockSlipWork = new StockSlipWork();

            #region 項目セット
            stockSlipWork.CreateDateTime = stockSlipRow.CreateDateTime; // 作成日時
            stockSlipWork.UpdateDateTime = stockSlipRow.UpdateDateTime; // 更新日時
            stockSlipWork.EnterpriseCode = stockSlipRow.EnterpriseCode; // 企業コード
            stockSlipWork.FileHeaderGuid = stockSlipRow.FileHeaderGuid; // GUID
            stockSlipWork.UpdEmployeeCode = stockSlipRow.UpdEmployeeCode; // 更新従業員コード
            stockSlipWork.UpdAssemblyId1 = stockSlipRow.UpdAssemblyId1; // 更新アセンブリID1
            stockSlipWork.UpdAssemblyId2 = stockSlipRow.UpdAssemblyId2; // 更新アセンブリID2
            stockSlipWork.LogicalDeleteCode = stockSlipRow.LogicalDeleteCode; // 論理削除区分
            stockSlipWork.SupplierFormal = stockSlipRow.SupplierFormal; // 仕入形式
            stockSlipWork.SupplierSlipNo = stockSlipRow.SupplierSlipNo; // 仕入伝票番号
            stockSlipWork.SectionCode = stockSlipRow.SectionCode; // 拠点コード
            stockSlipWork.SubSectionCode = stockSlipRow.SubSectionCode; // 部門コード
            stockSlipWork.DebitNoteDiv = stockSlipRow.DebitNoteDiv; // 赤伝区分
            stockSlipWork.DebitNLnkSuppSlipNo = stockSlipRow.DebitNLnkSuppSlipNo; // 赤黒連結仕入伝票番号
            stockSlipWork.SupplierSlipCd = stockSlipRow.SupplierSlipCd; // 仕入伝票区分
            stockSlipWork.StockGoodsCd = stockSlipRow.StockGoodsCd; // 仕入商品区分
            stockSlipWork.AccPayDivCd = stockSlipRow.AccPayDivCd; // 買掛区分
            stockSlipWork.StockSectionCd = stockSlipRow.StockSectionCd; // 仕入拠点コード
            stockSlipWork.StockAddUpSectionCd = stockSlipRow.StockAddUpSectionCd; // 仕入計上拠点コード
            stockSlipWork.StockSlipUpdateCd = stockSlipRow.StockSlipUpdateCd; // 仕入伝票更新区分
            stockSlipWork.InputDay = stockSlipRow.InputDay; // 入力日
            stockSlipWork.ArrivalGoodsDay = stockSlipRow.ArrivalGoodsDay; // 入荷日
            stockSlipWork.StockDate = stockSlipRow.StockDate; // 仕入日
            stockSlipWork.StockAddUpADate = stockSlipRow.StockAddUpADate; // 仕入計上日付
            stockSlipWork.DelayPaymentDiv = stockSlipRow.DelayPaymentDiv; // 来勘区分
            stockSlipWork.PayeeCode = stockSlipRow.PayeeCode; // 支払先コード
            stockSlipWork.PayeeSnm = stockSlipRow.PayeeSnm; // 支払先略称
            stockSlipWork.SupplierCd = stockSlipRow.SupplierCd; // 仕入先コード
            stockSlipWork.SupplierNm1 = stockSlipRow.SupplierNm1; // 仕入先名1
            stockSlipWork.SupplierNm2 = stockSlipRow.SupplierNm2; // 仕入先名2
            stockSlipWork.SupplierSnm = stockSlipRow.SupplierSnm; // 仕入先略称
            stockSlipWork.BusinessTypeCode = stockSlipRow.BusinessTypeCode; // 業種コード
            stockSlipWork.BusinessTypeName = stockSlipRow.BusinessTypeName; // 業種名称
            stockSlipWork.SalesAreaCode = stockSlipRow.SalesAreaCode; // 販売エリアコード
            stockSlipWork.SalesAreaName = stockSlipRow.SalesAreaName; // 販売エリア名称
            stockSlipWork.StockInputCode = stockSlipRow.StockInputCode; // 仕入入力者コード
            stockSlipWork.StockInputName = stockSlipRow.StockInputName; // 仕入入力者名称
            stockSlipWork.StockAgentCode = stockSlipRow.StockAgentCode; // 仕入担当者コード
            stockSlipWork.StockAgentName = stockSlipRow.StockAgentName; // 仕入担当者名称
            stockSlipWork.SuppTtlAmntDspWayCd = stockSlipRow.SuppTtlAmntDspWayCd; // 仕入先総額表示方法区分
            stockSlipWork.TtlAmntDispRateApy = stockSlipRow.TtlAmntDispRateApy; // 総額表示掛率適用区分
            stockSlipWork.StockTotalPrice = stockSlipRow.StockTotalPrice; // 仕入金額合計
            stockSlipWork.StockSubttlPrice = stockSlipRow.StockSubttlPrice; // 仕入金額小計
            stockSlipWork.StockTtlPricTaxInc = stockSlipRow.StockTtlPricTaxInc; // 仕入金額計（税込み）
            stockSlipWork.StockTtlPricTaxExc = stockSlipRow.StockTtlPricTaxExc; // 仕入金額計（税抜き）
            stockSlipWork.StockNetPrice = stockSlipRow.StockNetPrice; // 仕入正価金額
            stockSlipWork.StockPriceConsTax = stockSlipRow.StockPriceConsTax; // 仕入金額消費税額
            stockSlipWork.TtlItdedStcOutTax = stockSlipRow.TtlItdedStcOutTax; // 仕入外税対象額合計
            stockSlipWork.TtlItdedStcInTax = stockSlipRow.TtlItdedStcInTax; // 仕入内税対象額合計
            stockSlipWork.TtlItdedStcTaxFree = stockSlipRow.TtlItdedStcTaxFree; // 仕入非課税対象額合計
            stockSlipWork.StockOutTax = stockSlipRow.StockOutTax; // 仕入金額消費税額（外税）
            stockSlipWork.StckPrcConsTaxInclu = stockSlipRow.StckPrcConsTaxInclu; // 仕入金額消費税額（内税）
            stockSlipWork.StckDisTtlTaxExc = stockSlipRow.StckDisTtlTaxExc; // 仕入値引金額計（税抜き）
            stockSlipWork.ItdedStockDisOutTax = stockSlipRow.ItdedStockDisOutTax; // 仕入値引外税対象額合計
            stockSlipWork.ItdedStockDisInTax = stockSlipRow.ItdedStockDisInTax; // 仕入値引内税対象額合計
            stockSlipWork.ItdedStockDisTaxFre = stockSlipRow.ItdedStockDisTaxFre; // 仕入値引非課税対象額合計
            stockSlipWork.StockDisOutTax = stockSlipRow.StockDisOutTax; // 仕入値引消費税額（外税）
            stockSlipWork.StckDisTtlTaxInclu = stockSlipRow.StckDisTtlTaxInclu; // 仕入値引消費税額（内税）
            stockSlipWork.TaxAdjust = stockSlipRow.TaxAdjust; // 消費税調整額
            stockSlipWork.BalanceAdjust = stockSlipRow.BalanceAdjust; // 残高調整額
            stockSlipWork.SuppCTaxLayCd = stockSlipRow.SuppCTaxLayCd; // 仕入先消費税転嫁方式コード
            stockSlipWork.SupplierConsTaxRate = stockSlipRow.SupplierConsTaxRate; // 仕入先消費税税率
            stockSlipWork.AccPayConsTax = stockSlipRow.AccPayConsTax; // 買掛消費税
            stockSlipWork.StockFractionProcCd = stockSlipRow.StockFractionProcCd; // 仕入端数処理区分
            stockSlipWork.AutoPayment = stockSlipRow.AutoPayment; // 自動支払区分
            stockSlipWork.AutoPaySlipNum = stockSlipRow.AutoPaySlipNum; // 自動支払伝票番号
            stockSlipWork.RetGoodsReasonDiv = stockSlipRow.RetGoodsReasonDiv; // 返品理由コード
            stockSlipWork.RetGoodsReason = stockSlipRow.RetGoodsReason; // 返品理由
            stockSlipWork.PartySaleSlipNum = stockSlipRow.PartySaleSlipNum; // 相手先伝票番号
            stockSlipWork.SupplierSlipNote1 = stockSlipRow.SupplierSlipNote1; // 仕入伝票備考1
            stockSlipWork.SupplierSlipNote2 = stockSlipRow.SupplierSlipNote2; // 仕入伝票備考2
            stockSlipWork.DetailRowCount = stockSlipRow.DetailRowCount; // 明細行数
            stockSlipWork.EdiSendDate = stockSlipRow.EdiSendDate; // ＥＤＩ送信日
            stockSlipWork.EdiTakeInDate = stockSlipRow.EdiTakeInDate; // ＥＤＩ取込日
            stockSlipWork.UoeRemark1 = stockSlipRow.UoeRemark1; // ＵＯＥリマーク１
            stockSlipWork.UoeRemark2 = stockSlipRow.UoeRemark2; // ＵＯＥリマーク２
            stockSlipWork.SlipPrintDivCd = stockSlipRow.SlipPrintDivCd; // 伝票発行区分
            stockSlipWork.SlipPrintFinishCd = stockSlipRow.SlipPrintFinishCd; // 伝票発行済区分
            stockSlipWork.StockSlipPrintDate = stockSlipRow.StockSlipPrintDate; // 仕入伝票発行日
            stockSlipWork.SlipPrtSetPaperId = stockSlipRow.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
            stockSlipWork.SlipAddressDiv = stockSlipRow.SlipAddressDiv; // 伝票住所区分
            stockSlipWork.AddresseeCode = stockSlipRow.AddresseeCode; // 納品先コード
            stockSlipWork.AddresseeName = stockSlipRow.AddresseeName; // 納品先名称
            stockSlipWork.AddresseeName2 = stockSlipRow.AddresseeName2; // 納品先名称2
            stockSlipWork.AddresseePostNo = stockSlipRow.AddresseePostNo; // 納品先郵便番号
            stockSlipWork.AddresseeAddr1 = stockSlipRow.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
            stockSlipWork.AddresseeAddr3 = stockSlipRow.AddresseeAddr3; // 納品先住所3(番地)
            stockSlipWork.AddresseeAddr4 = stockSlipRow.AddresseeAddr4; // 納品先住所4(アパート名称)
            stockSlipWork.AddresseeTelNo = stockSlipRow.AddresseeTelNo; // 納品先電話番号
            stockSlipWork.AddresseeFaxNo = stockSlipRow.AddresseeFaxNo; // 納品先FAX番号
            stockSlipWork.DirectSendingCd = stockSlipRow.DirectSendingCd; // 直送区分
            //stockSlipWork.PayeeName = stockSlipRow.PayeeName; // 支払先名称
            //stockSlipWork.PayeeName2 = stockSlipRow.PayeeName2; // 支払先名称２
            #endregion

            return stockSlipWork;
        }

        /// <summary>
        /// 仕入明細データワークオブジェクトを仕入明細データ行オブジェクトより取得します。
        /// </summary>
        /// <param name="stockSlipRow">仕入データ行オブジェクト</param>
        /// <param name="stockDetailRow">仕入明細データ行オブジェクト</param>
        /// <returns>仕入明細データワークオブジェクト</returns>
        private StockDetailWork GetParamDataFromStockDetailRow(SalesInputDataSet.StockSlipRow stockSlipRow, SalesInputDataSet.StockDetailRow stockDetailRow)
        {
            StockDetailWork stockDetailWork = new StockDetailWork();

            #region 項目セット
            //stockDetailWork.CreateDateTime = stockDetailRow.CreateDateTime; // 作成日時
            //stockDetailWork.UpdateDateTime = stockDetailRow.UpdateDateTime; // 更新日時
            //stockDetailWork.EnterpriseCode = stockDetailRow.EnterpriseCode; // 企業コード
            //stockDetailWork.FileHeaderGuid = stockDetailRow.FileHeaderGuid; // GUID
            //stockDetailWork.UpdEmployeeCode = stockDetailRow.UpdEmployeeCode; // 更新従業員コード
            //stockDetailWork.UpdAssemblyId1 = stockDetailRow.UpdAssemblyId1; // 更新アセンブリID1
            //stockDetailWork.UpdAssemblyId2 = stockDetailRow.UpdAssemblyId2; // 更新アセンブリID2
            //stockDetailWork.LogicalDeleteCode = stockDetailRow.LogicalDeleteCode; // 論理削除区分
            stockDetailWork.AcceptAnOrderNo = stockDetailRow.AcceptAnOrderNo; // 受注番号
            stockDetailWork.SupplierFormal = stockDetailRow.SupplierFormal; // 仕入形式
            stockDetailWork.SupplierSlipNo = stockDetailRow.SupplierSlipNo; // 仕入伝票番号
            stockDetailWork.StockRowNo = stockDetailRow.StockRowNo; // 仕入行番号
            stockDetailWork.SectionCode = stockDetailRow.SectionCode; // 拠点コード
            stockDetailWork.SubSectionCode = stockDetailRow.SubSectionCode; // 部門コード
            stockDetailWork.CommonSeqNo = stockDetailRow.CommonSeqNo; // 共通通番
            stockDetailWork.StockSlipDtlNum = stockDetailRow.StockSlipDtlNum; // 仕入明細通番
            stockDetailWork.SupplierFormalSrc = stockDetailRow.SupplierFormalSrc; // 仕入形式（元）
            stockDetailWork.StockSlipDtlNumSrc = stockDetailRow.StockSlipDtlNumSrc; // 仕入明細通番（元）
            stockDetailWork.AcptAnOdrStatusSync = stockDetailRow.AcptAnOdrStatusSync; // 受注ステータス（同時）
            stockDetailWork.SalesSlipDtlNumSync = stockDetailRow.SalesSlipDtlNumSync; // 売上明細通番（同時）
            stockDetailWork.StockSlipCdDtl = stockDetailRow.StockSlipCdDtl; // 仕入伝票区分（明細）
            stockDetailWork.StockInputCode = stockDetailRow.StockInputCode; // 仕入入力者コード
            stockDetailWork.StockInputName = stockDetailRow.StockInputName; // 仕入入力者名称
            stockDetailWork.StockAgentCode = stockDetailRow.StockAgentCode; // 仕入担当者コード
            stockDetailWork.StockAgentName = stockDetailRow.StockAgentName; // 仕入担当者名称
            stockDetailWork.GoodsKindCode = stockDetailRow.GoodsKindCode; // 商品属性
            stockDetailWork.GoodsMakerCd = stockDetailRow.GoodsMakerCd; // 商品メーカーコード
            stockDetailWork.MakerName = stockDetailRow.MakerName; // メーカー名称
            stockDetailWork.MakerKanaName = stockDetailRow.MakerKanaName; // メーカーカナ名称
            stockDetailWork.CmpltMakerKanaName = stockDetailRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            stockDetailWork.GoodsNo = stockDetailRow.GoodsNo; // 商品番号
            stockDetailWork.GoodsName = stockDetailRow.GoodsName; // 商品名称
            stockDetailWork.GoodsNameKana = stockDetailRow.GoodsNameKana; // 商品名称カナ
            stockDetailWork.GoodsLGroup = stockDetailRow.GoodsLGroup; // 商品大分類コード
            stockDetailWork.GoodsLGroupName = stockDetailRow.GoodsLGroupName; // 商品大分類名称
            stockDetailWork.GoodsMGroup = stockDetailRow.GoodsMGroup; // 商品中分類コード
            stockDetailWork.GoodsMGroupName = stockDetailRow.GoodsMGroupName; // 商品中分類名称
            stockDetailWork.BLGroupCode = stockDetailRow.BLGroupCode; // BLグループコード
            stockDetailWork.BLGroupName = stockDetailRow.BLGroupName; // BLグループコード名称
            stockDetailWork.BLGoodsCode = stockDetailRow.BLGoodsCode; // BL商品コード
            stockDetailWork.BLGoodsFullName = stockDetailRow.BLGoodsFullName; // BL商品コード名称（全角）
            stockDetailWork.EnterpriseGanreCode = stockDetailRow.EnterpriseGanreCode; // 自社分類コード
            stockDetailWork.EnterpriseGanreName = stockDetailRow.EnterpriseGanreName; // 自社分類名称
            stockDetailWork.WarehouseCode = stockDetailRow.WarehouseCode; // 倉庫コード
            stockDetailWork.WarehouseName = stockDetailRow.WarehouseName; // 倉庫名称
            stockDetailWork.WarehouseShelfNo = stockDetailRow.WarehouseShelfNo; // 倉庫棚番
            stockDetailWork.StockOrderDivCd = stockDetailRow.StockOrderDivCd; // 仕入在庫取寄せ区分
            stockDetailWork.OpenPriceDiv = stockDetailRow.OpenPriceDiv; // オープン価格区分
            stockDetailWork.GoodsRateRank = stockDetailRow.GoodsRateRank; // 商品掛率ランク
            stockDetailWork.CustRateGrpCode = stockDetailRow.CustRateGrpCode; // 得意先掛率グループコード
            stockDetailWork.SuppRateGrpCode = stockDetailRow.SuppRateGrpCode; // 仕入先掛率グループコード
            stockDetailWork.ListPriceTaxExcFl = stockDetailRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            stockDetailWork.ListPriceTaxIncFl = stockDetailRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            stockDetailWork.StockRate = stockDetailRow.StockRate; // 仕入率
            stockDetailWork.RateSectStckUnPrc = stockDetailRow.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
            stockDetailWork.RateDivStckUnPrc = stockDetailRow.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
            stockDetailWork.UnPrcCalcCdStckUnPrc = stockDetailRow.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
            stockDetailWork.PriceCdStckUnPrc = stockDetailRow.PriceCdStckUnPrc; // 価格区分（仕入単価）
            stockDetailWork.StdUnPrcStckUnPrc = stockDetailRow.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
            stockDetailWork.FracProcUnitStcUnPrc = stockDetailRow.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
            stockDetailWork.FracProcStckUnPrc = stockDetailRow.FracProcStckUnPrc; // 端数処理（仕入単価）
            stockDetailWork.StockUnitPriceFl = stockDetailRow.StockUnitPriceFl; // 仕入単価（税抜，浮動）
            stockDetailWork.StockUnitTaxPriceFl = stockDetailRow.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
            stockDetailWork.StockUnitChngDiv = stockDetailRow.StockUnitChngDiv; // 仕入単価変更区分
            stockDetailWork.BfStockUnitPriceFl = stockDetailRow.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
            stockDetailWork.BfListPrice = stockDetailRow.BfListPrice; // 変更前定価
            stockDetailWork.RateBLGoodsCode = stockDetailRow.RateBLGoodsCode; // BL商品コード（掛率）
            stockDetailWork.RateBLGoodsName = stockDetailRow.RateBLGoodsName; // BL商品コード名称（掛率）
            stockDetailWork.RateGoodsRateGrpCd = stockDetailRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            stockDetailWork.RateGoodsRateGrpNm = stockDetailRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            stockDetailWork.RateBLGroupCode = stockDetailRow.RateBLGroupCode; // BLグループコード（掛率）
            stockDetailWork.RateBLGroupName = stockDetailRow.RateBLGroupName; // BLグループ名称（掛率）
            stockDetailWork.StockCount = stockDetailRow.StockCount; // 仕入数
            stockDetailWork.OrderCnt = stockDetailRow.OrderCnt; // 発注数量
            stockDetailWork.OrderAdjustCnt = stockDetailRow.OrderAdjustCnt; // 発注調整数
            stockDetailWork.OrderRemainCnt = stockDetailRow.OrderRemainCnt; // 発注残数
            stockDetailWork.RemainCntUpdDate = stockDetailRow.RemainCntUpdDate; // 残数更新日
            stockDetailWork.StockPriceTaxExc = stockDetailRow.StockPriceTaxExc; // 仕入金額（税抜き）
            stockDetailWork.StockPriceTaxInc = stockDetailRow.StockPriceTaxInc; // 仕入金額（税込み）
            stockDetailWork.StockGoodsCd = stockDetailRow.StockGoodsCd; // 仕入商品区分
            stockDetailWork.StockPriceConsTax = stockDetailRow.StockPriceConsTax; // 仕入金額消費税額
            stockDetailWork.TaxationCode = stockDetailRow.TaxationCode; // 課税区分
            stockDetailWork.StockDtiSlipNote1 = stockDetailRow.StockDtiSlipNote1; // 仕入伝票明細備考1
            stockDetailWork.SalesCustomerCode = stockDetailRow.SalesCustomerCode; // 販売先コード
            stockDetailWork.SalesCustomerSnm = stockDetailRow.SalesCustomerSnm; // 販売先略称
            stockDetailWork.SlipMemo1 = stockDetailRow.SlipMemo1; // 伝票メモ１
            stockDetailWork.SlipMemo2 = stockDetailRow.SlipMemo2; // 伝票メモ２
            stockDetailWork.SlipMemo3 = stockDetailRow.SlipMemo3; // 伝票メモ３
            stockDetailWork.InsideMemo1 = stockDetailRow.InsideMemo1; // 社内メモ１
            stockDetailWork.InsideMemo2 = stockDetailRow.InsideMemo2; // 社内メモ２
            stockDetailWork.InsideMemo3 = stockDetailRow.InsideMemo3; // 社内メモ３
            stockDetailWork.SupplierCd = stockDetailRow.SupplierCd; // 仕入先コード
            stockDetailWork.SupplierSnm = stockDetailRow.SupplierSnm; // 仕入先略称
            stockDetailWork.AddresseeCode = stockDetailRow.AddresseeCode; // 納品先コード
            stockDetailWork.AddresseeName = stockDetailRow.AddresseeName; // 納品先名称
            stockDetailWork.DirectSendingCd = stockDetailRow.DirectSendingCd; // 直送区分
            stockDetailWork.OrderNumber = stockDetailRow.OrderNumber; // 発注番号
            stockDetailWork.WayToOrder = stockDetailRow.WayToOrder; // 注文方法
            stockDetailWork.DeliGdsCmpltDueDate = stockDetailRow.DeliGdsCmpltDueDate; // 納品完了予定日
            stockDetailWork.ExpectDeliveryDate = stockDetailRow.ExpectDeliveryDate; // 希望納期
            stockDetailWork.OrderDataCreateDiv = stockDetailRow.OrderDataCreateDiv; // 発注データ作成区分
            stockDetailWork.OrderDataCreateDate = stockDetailRow.OrderDataCreateDate; // 発注データ作成日
            stockDetailWork.OrderFormIssuedDiv = stockDetailRow.OrderFormIssuedDiv; // 発注書発行済区分
            stockDetailWork.DtlRelationGuid = stockDetailRow.DtlRelationGuid; // 共通キー
            #endregion

            return stockDetailWork;
        }        
        #endregion

        //>>>2010/09/27
        #region 既存修正行のヘッダ情報クリア処理
        /// <summary>
        /// 既存修正行のヘッダ情報クリア処理
        /// </summary>
        private void RevisionHeaderClear()
        {
            #region ●仕入情報再構築処理(既存修正時、キー情報(仕入先、仕入日、仕入伝票番号)変更対応)
            bool newInsertFlg = false;
            SalesInputDataSet.StockTempDataTable stockTempDataTableNew = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTable.Copy();
            stockTempDataTableNew.Clear();
            foreach (SalesInputDataSet.StockTempRow row in this._stockTempDataTable)
            {
                // 対象行取得
                SalesInputDataSet.StockTempRow rowNew = stockTempDataTableNew.NewStockTempRow();
                this.CopyCompleteStockTempRow(row, rowNew);

                // 初期読込データ取得
                SalesInputDataSet.StockTempRow tempRow = this._stockTempDataTableSaveForRevision.FindByDtlRelationGuid(row.DtlRelationGuid);

                if ((this._stockTempDataTableSaveForRevision != null) &&
                    (this._stockTempDataTableSaveForRevision.Count != 0) &&
                    (tempRow != null))
                {
                    if ((row.StockDate != tempRow.StockDate) ||
                        (row.PartySaleSlipNum != tempRow.PartySaleSlipNum) ||
                        (row.SupplierCd != tempRow.SupplierCd))
                    {
                        // 仕入日、仕入先、仕入伝票番号に変更が有った場合、ヘッダ情報クリアし、新規行とする。
                        this.ClearStockTempRowForNew(ref rowNew);
                        newInsertFlg = true;
                    }
                }

                // 行追加
                stockTempDataTableNew.AddStockTempRow(rowNew);
            }

            this._stockTempDataTable = (SalesInputDataSet.StockTempDataTable)stockTempDataTableNew.Copy();
            #endregion
        }
        #endregion
        //<<<2010/09/27

        #region 削除仕入リスト
        /// <summary>
        /// 削除仕入リスト作成
        /// </summary>
        /// <param name="stockSlipDataTable"></param>
        /// <param name="stockDetailDataTable"></param>
        /// <param name="stockSyncInfoKeyList"></param>
        /// <param name="deleteStockSlipInfoList"></param>
        private void MakeDeleteStockSlipInfoList(SalesInputDataSet.StockSlipDataTable stockSlipDataTable, SalesInputDataSet.StockDetailDataTable stockDetailDataTable, List<StockSyncInfoKey> stockSyncInfoKeyList, out ArrayList deleteStockSlipInfoList)
        {
            List<StockSyncInfoKey> setStockSyncInfoKeyList = new List<StockSyncInfoKey>();
            deleteStockSlipInfoList = new ArrayList();
            ArrayList delKeyList = new ArrayList();

            foreach (StockSyncInfoKey stockSyncInfoKey in stockSyncInfoKeyList)
            {
                if (stockSyncInfoKey.SupplierSlipNo == ctDefaultSupplierSlipNo) continue;
                SalesInputDataSet.StockDetailRow[] rows = (SalesInputDataSet.StockDetailRow[])stockDetailDataTable.Select(string.Format("{0}={1} AND {2}={3}",
                                                                                                                        stockDetailDataTable.SupplierFormalColumn.ColumnName,
                                                                                                                        stockSyncInfoKey.SupplierFormalSync,
                                                                                                                        stockDetailDataTable.StockSlipDtlNumColumn.ColumnName,
                                                                                                                        stockSyncInfoKey.StockSlipDtlNumSync));


                StockSyncInfoKey key = new StockSyncInfoKey(stockSyncInfoKey.EnterpriseCode, stockSyncInfoKey.SupplierFormalSync, stockSyncInfoKey.SupplierSlipNo, stockSyncInfoKey.UpdateDateTime, stockSyncInfoKey.DebitNoteDiv, 0);

                IOWriteMASIRDeleteWork sirDeleteWork = new IOWriteMASIRDeleteWork();
                sirDeleteWork.EnterpriseCode = stockSyncInfoKey.EnterpriseCode;
                sirDeleteWork.SupplierFormal = stockSyncInfoKey.SupplierFormalSync;
                sirDeleteWork.SupplierSlipNo = stockSyncInfoKey.SupplierSlipNo;
                sirDeleteWork.UpdateDateTime = stockSyncInfoKey.UpdateDateTime;
                sirDeleteWork.DebitNoteDiv = stockSyncInfoKey.DebitNoteDiv;

                if (rows.Length == 0)
                {
                    if (!setStockSyncInfoKeyList.Contains(key)) deleteStockSlipInfoList.Add(sirDeleteWork);
                }
                else
                {
                    // １明細でも存在していれば、削除対象外
                    delKeyList.Add(key);
                }

                setStockSyncInfoKeyList.Add(key);
            }

            ArrayList realList = new ArrayList();
            foreach (IOWriteMASIRDeleteWork delWork in deleteStockSlipInfoList)
            {
                StockSyncInfoKey tempKey = new StockSyncInfoKey(delWork.EnterpriseCode, delWork.SupplierFormal, delWork.SupplierSlipNo, delWork.UpdateDateTime, delWork.DebitNoteDiv, 0);

                //if (!delKeyList.Contains(tempKey)) realList.Add(delWork);
                bool flg = false;
                foreach (StockSyncInfoKey key in delKeyList)
                {
                    if ((key.EnterpriseCode == tempKey.EnterpriseCode) &&
                        (key.SupplierFormalSync == tempKey.SupplierFormalSync) &&
                        (key.SupplierSlipNo == tempKey.SupplierSlipNo) &&
                        (key.DebitNoteDiv == tempKey.DebitNoteDiv) &&
                        (key.StockSlipDtlNumSync == tempKey.StockSlipDtlNumSync))
                    {
                        flg = true;
                        break;
                    }
                }
                if (!flg) realList.Add(delWork);
            }
            deleteStockSlipInfoList = new ArrayList();
            deleteStockSlipInfoList.AddRange(realList);
        }

        /// <summary>
        /// 削除用仕入情報リスト取得処理
        /// </summary>
        /// <param name="stockSlipForReadDataTable">仕入データテーブル(読込用)</param>
        /// <param name="stockDetailForReadDataTable">仕入明細データテーブル(読込用)</param>
        /// <param name="paymentSlpDataTable">支払データテーブル</param>
        /// <returns>CustomSerializeArrayList</returns>
        // --- UPD 2010/07/26 ---------->>>>>
        //private CustomSerializeArrayList GetStockInfoForDelete(SalesInputDataSet.StockSlipForReadDataTable stockSlipForReadDataTable, SalesInputDataSet.StockDetailForReadDataTable stockDetailForReadDataTable, SalesInputDataSet.PaymentSlpDataTable paymentSlpDataTable)
        private CustomSerializeArrayList GetStockInfoForDelete(SalesInputDataSet.StockSlipForReadDataTable stockSlipForReadDataTable, SalesInputDataSet.StockDetailForReadDataTable stockDetailForReadDataTable, SalesInputDataSet.PaymentSlpDataTable paymentSlpDataTable, SalesSlip salesSlip, List<SalesDetail> salesDetailList)
        // --- UPD 2010/07/26 ----------<<<<<
        {
            // --- ADD 2010/07/26 ---------->>>>>
            //--------------------------------------------------------------------------------
            // ※UOE発注で確認伝票とフォロー伝票に分かれた時、入力時に同じ行に対応する明細は
            //   共通通番も同じになる為、明細通番で絞り込む。
            //--------------------------------------------------------------------------------

            // 売上伝票の受注ステータス・売上明細通番を退避する
            Dictionary<string, bool> salesDetailKeyDic = new Dictionary<string, bool>();
            foreach (SalesDetail salesDetail in salesDetailList)
            {
                string key = CreateSalesDetailKey(salesDetail.AcptAnOdrStatus, salesDetail.SalesSlipDtlNum);
                salesDetailKeyDic.Add(key, true);
            }
            // --- ADD 2010/07/26 ----------<<<<<

            CustomSerializeArrayList retList = new CustomSerializeArrayList();
            CustomSerializeArrayList dataStockList = new CustomSerializeArrayList();

            //-----------------------------------------------------------------------------
            // 仕入データ削除情報
            //-----------------------------------------------------------------------------
            foreach (SalesInputDataSet.StockSlipForReadRow stockSlipRow in stockSlipForReadDataTable)
            {
                if (stockSlipRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order) continue;

                // --- ADD 2010/07/26 ---------->>>>>
                // 明細を抽出
                DataRow[] stockDetailRows = stockDetailForReadDataTable.Select(string.Format("{0}={1} AND {2}={3}",
                                                stockSlipForReadDataTable.SupplierFormalColumn.ColumnName, stockSlipRow.SupplierFormal,
                                                stockSlipForReadDataTable.SupplierSlipNoColumn.ColumnName, stockSlipRow.SupplierSlipNo));
                if (stockDetailRows == null || stockDetailRows.Length == 0)
                {
                    continue;
                }

                // --- UPD 2012/11/30 Y.Wakita ---------->>>>>
                //bool deleteCheck = false;
                //foreach (DataRow stockDetailRow in stockDetailRows)
                //{
                //    string key = CreateSalesDetailKey(
                //                    (Int32)stockDetailRow[stockDetailForReadDataTable.AcptAnOdrStatusSyncColumn.ColumnName],
                //                    (Int64)stockDetailRow[stockDetailForReadDataTable.SalesSlipDtlNumSyncColumn.ColumnName]);
                //    if (salesDetailKeyDic.ContainsKey(key))
                //    {
                //        deleteCheck = true;
                //        break;
                //    }
                //}
                //// 
                //if (!deleteCheck) continue;
                //// --- ADD 2010/07/26 ----------<<<<<
                //
                //dataStockList = new CustomSerializeArrayList();
                //IOWriteMASIRDeleteWork sirDeleteWork = new IOWriteMASIRDeleteWork();
                //
                //sirDeleteWork.EnterpriseCode = stockSlipRow.EnterpriseCode;
                //sirDeleteWork.SupplierFormal = stockSlipRow.SupplierFormal;
                //sirDeleteWork.SupplierSlipNo = stockSlipRow.SupplierSlipNo;
                //sirDeleteWork.UpdateDateTime = stockSlipRow.UpdateDateTime;
                //sirDeleteWork.DebitNoteDiv = stockSlipRow.DebitNoteDiv;
                //dataStockList.Add(sirDeleteWork);
                //
                //if (dataStockList.Count != 0) retList.Add(dataStockList);

                dataStockList = new CustomSerializeArrayList();
                long wkStockSlipDtlNum = 0;
                foreach (DataRow stockDetailRow in stockDetailRows)
                {
                    wkStockSlipDtlNum = (Int64)stockDetailRow[stockDetailForReadDataTable.StockSlipDtlNumColumn.ColumnName];
                    string key = CreateSalesDetailKey(
                                    (Int32)stockDetailRow[stockDetailForReadDataTable.AcptAnOdrStatusSyncColumn.ColumnName],
                                    (Int64)stockDetailRow[stockDetailForReadDataTable.SalesSlipDtlNumSyncColumn.ColumnName]);
                    if (salesDetailKeyDic.ContainsKey(key))
                    {
                        IOWriteMASIRDeleteWork sirDeleteWork = new IOWriteMASIRDeleteWork();

                        sirDeleteWork.EnterpriseCode = stockSlipRow.EnterpriseCode;
                        sirDeleteWork.SupplierFormal = stockSlipRow.SupplierFormal;
                        sirDeleteWork.SupplierSlipNo = stockSlipRow.SupplierSlipNo;
                        sirDeleteWork.UpdateDateTime = stockSlipRow.UpdateDateTime;
                        sirDeleteWork.DebitNoteDiv = stockSlipRow.DebitNoteDiv;
                        sirDeleteWork.StockSlipDtlNum = wkStockSlipDtlNum;
                        dataStockList.Add(sirDeleteWork);
                    }
                }

                if (dataStockList.Count != 0) retList.Add(dataStockList);
                // --- UPD 2012/11/30 Y.Wakita ----------<<<<<
            }

            // --- UPD 2010/07/26 ---------->>>>>
            ////-----------------------------------------------------------------------------
            //// 発注データ削除情報（UOE発注データじゃなくて仕入データ）
            ////-----------------------------------------------------------------------------
            //// 　発注データは、削除区分に従わず常に削除（リモート判断）
            ////-----------------------------------------------------------------------------
            //dataStockList = new CustomSerializeArrayList();
            //foreach (SalesInputDataSet.StockDetailForReadRow stockDetailRow in stockDetailForReadDataTable)
            //{
            //    // 
            //    //if (stockDetailRow.SupplierFormal != (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order) continue;

            //    SalesInputDataSet.StockSlipForReadRow stockSlipRow = stockSlipForReadDataTable.FindBySupplierFormalSupplierSlipNo( stockDetailRow.SupplierFormal, stockDetailRow.SupplierSlipNo );

            //    StockDetailWork stockDetailWork = this.SetStockDetailWorkFromRow( stockDetailRow );

            //    stockDetailWork.EnterpriseCode = stockSlipRow.EnterpriseCode;
            //    stockDetailWork.SupplierFormal = stockSlipRow.SupplierFormal;
            //    stockDetailWork.SupplierSlipNo = stockSlipRow.SupplierSlipNo;
            //    stockDetailWork.UpdateDateTime = stockSlipRow.UpdateDateTime;

            //    dataStockList.Add(stockDetailWork);
            //}
            //if (dataStockList.Count != 0) retList.Add(dataStockList);


            // 受注伝票の場合のみ紐付く発注を削除可能
            if (salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
            {
                //-----------------------------------------------------------------------------
                // 発注データ削除情報（UOE発注データじゃなくて仕入データ）
                //-----------------------------------------------------------------------------
                // 　発注データは、削除区分に従わず常に削除（リモート判断）
                //-----------------------------------------------------------------------------
                dataStockList = new CustomSerializeArrayList();
                foreach (SalesInputDataSet.StockDetailForReadRow stockDetailRow in stockDetailForReadDataTable)
                {
                    if (stockDetailRow.SupplierFormal != (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order) continue;
                    StockDetailWork stockDetailWork = this.SetStockDetailWorkFromRow(stockDetailRow);

                    SalesInputDataSet.StockSlipForReadRow stockSlipRow = stockSlipForReadDataTable.FindBySupplierFormalSupplierSlipNo( stockDetailRow.SupplierFormal, stockDetailRow.SupplierSlipNo );
                    stockDetailWork.EnterpriseCode = stockSlipRow.EnterpriseCode;
                    stockDetailWork.SupplierFormal = stockSlipRow.SupplierFormal;
                    stockDetailWork.SupplierSlipNo = stockSlipRow.SupplierSlipNo;
                    stockDetailWork.UpdateDateTime = stockSlipRow.UpdateDateTime;

                    dataStockList.Add(stockDetailWork);
                }
                if (dataStockList.Count != 0) retList.Add(dataStockList);
            }
            // --- UPD 2010/07/26 ----------<<<<<

            return retList;
        }

        // --- ADD 2010/07/26 ---------->>>>>
        /// <summary>
        /// 売上明細KEY文字列生成
        /// </summary>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipDtlNum"></param>
        /// <returns></returns>
        private string CreateSalesDetailKey(int acptAnOdrStatus, Int64 salesSlipDtlNum)
        {
            return string.Format("{0},{1}", acptAnOdrStatus, salesSlipDtlNum);
        }
        // --- ADD 2010/07/26 ----------<<<<<
        #endregion

        #region Write用仕入リスト → 仕入データテーブル、仕入明細データテーブル
        /// <summary>
        /// 仕入リストから仕入データテーブル、仕入明細データテーブルにキャッシュします。
        /// </summary>
        /// <param name="stockSlipInfoList"></param>
        private void CacheStockSlipInfo(ArrayList stockSlipInfoList)
        {

            for (int i = 0; i < stockSlipInfoList.Count; i++)
            {
                if (stockSlipInfoList[i] is CustomSerializeArrayList)
                {
                    CustomSerializeArrayList tempList = (CustomSerializeArrayList)stockSlipInfoList[i];
                    foreach (object tempObj in tempList)
                    {
                        //---------------------------------------
                        // ヘッダ情報
                        //---------------------------------------
                        if (tempObj is StockSlipWork)
                        {
                            StockSlipWork tempStockSlipWork = (StockSlipWork)tempObj;
                            this.CacheStockSlipForReadDataTable(tempStockSlipWork, this._stockSlipForReadDataTable);
                        }

                        //---------------------------------------
                        // 明細情報
                        //---------------------------------------
                        if (tempObj is ArrayList)
                        {
                            ArrayList tempStockDetailWorkList = (ArrayList)tempObj;
                            if (tempStockDetailWorkList[0] is StockDetailWork)
                            {
                                foreach (StockDetailWork stockDetailWork in tempStockDetailWorkList)
                                {
                                    this.CacheStockDetailForReadDataTable(stockDetailWork, this._stockDetailForReadDataTable);
                                }
                            }
                        }
                    }
                }
            }

            // 仕入情報データキャッシュ処理
            this.CacheStockTemp();
          
        }
        #endregion

        #region 仕入データワークオブジェクト、仕入明細データワークオブジェクトリスト → 仕入情報テーブル
        /// <summary>
        /// 既存入力分仕入情報設定処理
        /// </summary>
        /// <param name="stockSyncInfoKeyList"></param>
        /// <remarks>
        /// <br>Update Note: 2015/12/14 李侠</br>
        /// <br>管理番号   : 11175418-00</br>
        /// <br>           : Redmine#48098 売仕入同時入力SEQが異なる障害対応</br>
        /// </remarks>
        private void SettingExistInputStockInfo(ref List<StockSyncInfoKey> stockSyncInfoKeyList)
        {
            #region ●初期処理
            //-----------------------------------------------------------------------------
            // 初期処理
            //-----------------------------------------------------------------------------
            StockSlipWork stockSlipWork;        // 読込用仕入データワークオブジェクト
            ArrayList stockDetailWorkList;      // 読込用仕入明細データワークオブジェクト
            StockSlipKey stockSlipKey = new StockSlipKey();   // 今回キー情報
            StockSlipKey svStockSlipKey = new StockSlipKey(); // 前回キー情報
            string enterpriseCodeColumnName = this._stockTempDataTable.EnterpriseCodeColumn.ColumnName;
            // ADD 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
            // 仕入拠点・仕入伝票区分
            string stockSectionCdColumnName = this._stockTempDataTable.StockSectionCdColumn.ColumnName;
            string supplierSlipCdColumnName = this._stockTempDataTable.SupplierSlipCdColumn.ColumnName;
            // ADD 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<
            string supplierCdColumnName = this._stockTempDataTable.SupplierCdColumn.ColumnName;
            string stockDateColumnName = this._stockTempDataTable.StockDateColumn.ColumnName;
            string partySaleSlipNumColumnName = this._stockTempDataTable.PartySaleSlipNumColumn.ColumnName;
            string supplierFormalColumnName = this._stockTempDataTable.SupplierFormalColumn.ColumnName;
            string stockSlipDtlNumColumnName = this._stockTempDataTable.StockSlipDtlNumColumn.ColumnName;
            bool bfirst = true;
            //>>>2012/01/20
            foreach (StockSlipWork stockSlipTempWork in stockSlipWorkTempListForExist)
            {
                if (stockSlipWorkTempList.Contains(stockSlipTempWork)) stockSlipWorkTempList.Remove(stockSlipTempWork);
            }
            stockSlipWorkTempListForExist = new List<StockSlipWork>();
            //<<<2012/01/20
            #endregion

            #region ●入力仕入情報から既存入力分仕入情報設定
            if (this.ExistStockTemp())
            {
                //-----------------------------------------------------------------------------
                // 仕入情報データテーブル内容保持
                //-----------------------------------------------------------------------------
                SalesInputDataSet.StockTempDataTable svStockTempDataTable = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTable.Copy();
                DataView stockTempView = new DataView(svStockTempDataTable);

                // --- ADD 2012/11/27 Y.Wakita ---------->>>>>
                //-----------------------------------------------------------------------------
                // 仕入情報削除データテーブル内容保持
                //-----------------------------------------------------------------------------
                SalesInputDataSet.StockTempDataTable delStockTempDataTable = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTableDelete.Copy();
                DataView stockTempDeleteView = new DataView(delStockTempDataTable);
                // --- ADD 2012/11/27 Y.Wakita ----------<<<<<

                //-----------------------------------------------------------------------------
                // ソート指定：企業コード、仕入先、仕入日、仕入伝票番号
                //-----------------------------------------------------------------------------
                stockTempView.Sort = string.Format("{0},{1},{2},{3}", enterpriseCodeColumnName,
                                                                      supplierCdColumnName,
                                                                      stockDateColumnName,
                                                                      partySaleSlipNumColumnName);

                foreach (DataRowView stockTempRowView in stockTempView)
                {
                    //-----------------------------------------------------------------------------
                    // 読み飛ばしチェック(企業コード、仕入先、仕入日、仕入伝票番号)
                    //-----------------------------------------------------------------------------
                    stockSlipKey = new StockSlipKey((string)stockTempRowView[enterpriseCodeColumnName],
                                                    (int)stockTempRowView[supplierCdColumnName],
                                                    (DateTime)stockTempRowView[stockDateColumnName],
                                                    (string)stockTempRowView[partySaleSlipNumColumnName]);
                    if (bfirst)
                    {
                        svStockSlipKey = new StockSlipKey((string)stockTempRowView[enterpriseCodeColumnName],
                                                        (int)stockTempRowView[supplierCdColumnName],
                                                        (DateTime)stockTempRowView[stockDateColumnName],
                                                        (string)stockTempRowView[partySaleSlipNumColumnName]);
                        bfirst = false;
                    }
                    else
                    {
                        if (svStockSlipKey.Equals(stockSlipKey)) continue;
                    }

                    //-----------------------------------------------------------------------------
                    // 既存入力分仕入情報取得
                    //-----------------------------------------------------------------------------
                    // DEL 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
                    //int status = this.ReadStockSlip(this._enterpriseCode,
                    //                   (int)stockTempRowView[supplierFormalColumnName],
                    //                   (string)stockTempRowView[partySaleSlipNumColumnName],
                    //                   (int)stockTempRowView[supplierCdColumnName],
                    //                   (DateTime)stockTempRowView[stockDateColumnName],
                    //                   out stockSlipWork, out stockDetailWorkList);
                    // DEL 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<
                    // ADD 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
                    // 検索条件：企業コード・仕入拠点・仕入伝票区分・仕入番号・仕入日・仕入先
                    int status = this.ReadStockSlip(this._enterpriseCode,
                                       (int)stockTempRowView[supplierFormalColumnName],
                                       (string)stockTempRowView[stockSectionCdColumnName],
                                       (int)stockTempRowView[supplierSlipCdColumnName],
                                       (string)stockTempRowView[partySaleSlipNumColumnName],
                                       (DateTime)stockTempRowView[stockDateColumnName],
                                       (int)stockTempRowView[supplierCdColumnName],
                                       3,
                                       out stockSlipWork, out stockDetailWorkList);
                    // ADD 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<

                    if (stockSlipWork != null)
                    {
                        foreach (StockDetailWork stockDetailWork in stockDetailWorkList)
                        {
                            //-----------------------------------------------------------------------------
                            // 仕入情報データテーブルから一致明細取得
                            //-----------------------------------------------------------------------------
                            if (this._stockTempDataTableForSet == null)
                            {
                                // キャッシュ情報退避(仕入保存時の制御で使用)
                                this._stockTempDataTableForSet = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTable.Copy();
                            }
                            SalesInputDataSet.StockTempRow[] rows =
                                (SalesInputDataSet.StockTempRow[])this._stockTempDataTable.Select(string.Format("{0}='{1}' AND {2}={3} AND {4}={5}",
                                                                                                  enterpriseCodeColumnName, stockDetailWork.EnterpriseCode,
                                                                                                  supplierFormalColumnName, stockDetailWork.SupplierFormal,
                                                                                                  stockSlipDtlNumColumnName, stockDetailWork.StockSlipDtlNum));

                            //-----------------------------------------------------------------------------
                            // 元仕入情報取得
                            //-----------------------------------------------------------------------------
                            StockTemp sourceStockTemp = ConvertSalesSlip.UIDataFromParamData(stockSlipWork, stockDetailWork);

                            //-----------------------------------------------------------------------------
                            // 仕入情報データテーブルに存在しない場合→追加
                            //-----------------------------------------------------------------------------
                            SalesInputDataSet.StockTempRow stockTempRow;
                            if (rows.Length == 0)
                            {
                                // --- ADD 2012/11/27 Y.Wakita ---------->>>>>
                                // 削除した仕入情報は追加しない
                                bool deleteFlag = true;
                                foreach (DataRowView stockTempRowDeleteView in stockTempDeleteView)
                                {
                                    if (stockDetailWork.StockSlipDtlNum == (long)stockTempRowDeleteView[stockSlipDtlNumColumnName])
                                    {
                                        deleteFlag = false;
                                    }
                                }
                                if (deleteFlag)
                                {
                                    // --- ADD 2012/11/27 Y.Wakita ----------<<<<<
                                    //-----------------------------------------------------------------------------
                                    // 仕入情報データテーブル追加
                                    //-----------------------------------------------------------------------------
                                    stockTempRow = this.StockTempAddRow(ctDefaultSalesSlipNum, 0);
                                    this.CacheStockTemp(sourceStockTemp, ref stockTempRow);

                                    //>>> 2012/01/20
                                    StockSlipWork stockSlipTempWork = new StockSlipWork();
                                    stockSlipTempWork.SupplierCd = stockTempRow.SupplierCd; // 仕入先
                                    stockSlipTempWork.PartySaleSlipNum = stockTempRow.PartySaleSlipNum; // 仕入伝票番号
                                    stockSlipTempWork.SupplierFormal = stockTempRow.SupplierFormal; // 仕入形式
                                    stockSlipTempWork.StockDate = stockTempRow.StockDate; // 仕入日
                                    if (!stockSlipWorkTempListForExist.Contains(stockSlipTempWork)) stockSlipWorkTempListForExist.Add(stockSlipTempWork);
                                    //<<< 2012/01/20
                                    // --- ADD 2012/11/27 Y.Wakita ---------->>>>>
                                }
                                // --- ADD 2012/11/27 Y.Wakita ----------<<<<<
                            }

                            //-----------------------------------------------------------------------------
                            // 売仕入同時入力データキーリスト追加
                            //-----------------------------------------------------------------------------
                            this.MakeStockSyncInfoKeyListForStockInput(sourceStockTemp, ref stockSyncInfoKeyList);
                        }
                    }

                    //-----------------------------------------------------------------------------
                    // 前回情報保持
                    //-----------------------------------------------------------------------------
                    svStockSlipKey = new StockSlipKey((string)stockTempRowView[enterpriseCodeColumnName],
                                                      (int)stockTempRowView[supplierCdColumnName],
                                                      (DateTime)stockTempRowView[stockDateColumnName],
                                                      (string)stockTempRowView[partySaleSlipNumColumnName]);
                }
            }
            #endregion

            #region ●Read保存仕入情報から既存入力分仕入情報設定
            if ((this._stockTempDataTableForSet != null) && (this._stockTempDataTableForSet.Count != 0))
            {
                //-----------------------------------------------------------------------------
                // 仕入情報データテーブル内容保持
                //-----------------------------------------------------------------------------
                SalesInputDataSet.StockTempDataTable svStockTempDataTableSave = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTableForSet.Copy();
                DataView stockTempSaveView = new DataView(svStockTempDataTableSave);
                // --- ADD 2012/11/27 Y.Wakita ---------->>>>>
                //-----------------------------------------------------------------------------
                // 仕入情報削除データテーブル内容保持
                //-----------------------------------------------------------------------------
                SalesInputDataSet.StockTempDataTable delStockTempDataTable = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTableDelete.Copy();
                DataView stockTempDeleteView = new DataView(delStockTempDataTable);
                // --- ADD 2012/11/27 Y.Wakita ----------<<<<<
                bfirst = true;

                //-----------------------------------------------------------------------------
                // ソート指定：企業コード、仕入先、仕入日、仕入伝票番号
                //-----------------------------------------------------------------------------
                stockTempSaveView.Sort = string.Format("{0},{1},{2},{3}", enterpriseCodeColumnName,
                                                                      supplierCdColumnName,
                                                                      stockDateColumnName,
                                                                      partySaleSlipNumColumnName);

                foreach (DataRowView stockTempRowView in stockTempSaveView)
                {
                    //-----------------------------------------------------------------------------
                    // 読み飛ばしチェック(企業コード、仕入先、仕入日、仕入伝票番号)
                    //-----------------------------------------------------------------------------
                    stockSlipKey = new StockSlipKey((string)stockTempRowView[enterpriseCodeColumnName],
                                                    (int)stockTempRowView[supplierCdColumnName],
                                                    (DateTime)stockTempRowView[stockDateColumnName],
                                                    (string)stockTempRowView[partySaleSlipNumColumnName]);
                    if (bfirst)
                    {
                        svStockSlipKey = new StockSlipKey((string)stockTempRowView[enterpriseCodeColumnName],
                                                        (int)stockTempRowView[supplierCdColumnName],
                                                        (DateTime)stockTempRowView[stockDateColumnName],
                                                        (string)stockTempRowView[partySaleSlipNumColumnName]);
                        bfirst = false;
                    }
                    else
                    {
                        if (svStockSlipKey.Equals(stockSlipKey)) continue;
                    }

                    //-----------------------------------------------------------------------------
                    // 既存入力分仕入情報取得
                    //-----------------------------------------------------------------------------
                    // DEL 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
                    //int status = this.ReadStockSlip(this._enterpriseCode,
                    //                   (int)stockTempRowView[supplierFormalColumnName],
                    //                   (string)stockTempRowView[partySaleSlipNumColumnName],
                    //                   (int)stockTempRowView[supplierCdColumnName],
                    //                   (DateTime)stockTempRowView[stockDateColumnName],
                    //                   out stockSlipWork, out stockDetailWorkList);
                    // DEL 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<
                    // ADD 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
                    // 検索条件：企業コード・仕入拠点・仕入伝票区分・仕入番号・仕入日・仕入先
                    int status = this.ReadStockSlip(this._enterpriseCode,
                                       (int)stockTempRowView[supplierFormalColumnName],
                                       (string)stockTempRowView[stockSectionCdColumnName],
                                       (int)stockTempRowView[supplierSlipCdColumnName],
                                       (string)stockTempRowView[partySaleSlipNumColumnName],
                                       (DateTime)stockTempRowView[stockDateColumnName],
                                       (int)stockTempRowView[supplierCdColumnName],
                                       3,
                                       out stockSlipWork, out stockDetailWorkList);
                    // ADD 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<

                    if (stockSlipWork != null)
                    {
                        foreach (StockDetailWork stockDetailWork in stockDetailWorkList)
                        {
                            //-----------------------------------------------------------------------------
                            // 仕入情報データテーブルから一致明細取得
                            //-----------------------------------------------------------------------------
                            SalesInputDataSet.StockTempRow[] rows =
                                (SalesInputDataSet.StockTempRow[])this._stockTempDataTable.Select(string.Format("{0}='{1}' AND {2}={3} AND {4}={5}",
                                                                                                  enterpriseCodeColumnName, stockDetailWork.EnterpriseCode,
                                                                                                  supplierFormalColumnName, stockDetailWork.SupplierFormal,
                                                                                                  stockSlipDtlNumColumnName, stockDetailWork.StockSlipDtlNum));

                            //-----------------------------------------------------------------------------
                            // 元仕入情報取得
                            //-----------------------------------------------------------------------------
                            StockTemp sourceStockTemp = ConvertSalesSlip.UIDataFromParamData(stockSlipWork, stockDetailWork);

                            //-----------------------------------------------------------------------------
                            // 仕入情報データテーブルに存在しない場合→追加
                            //-----------------------------------------------------------------------------
                            SalesInputDataSet.StockTempRow stockTempRow;
                            if (rows.Length == 0)
                            {
                                // --- ADD 2012/11/27 Y.Wakita ---------->>>>>
                                // 削除した仕入情報は追加しない
                                bool deleteFlag = true;
                                foreach (DataRowView stockTempRowDeleteView in stockTempDeleteView)
                                {
                                    if (stockDetailWork.StockSlipDtlNum == (long)stockTempRowDeleteView[stockSlipDtlNumColumnName])
                                    {
                                        deleteFlag = false;
                                    }
                                }
                                if (deleteFlag)
                                {
                                    // --- ADD 2012/11/27 Y.Wakita ----------<<<<<
                                    //-----------------------------------------------------------------------------
                                    // 仕入情報データテーブル追加
                                    //-----------------------------------------------------------------------------
                                    stockTempRow = this.StockTempAddRow(ctDefaultSalesSlipNum, 0);
                                    this.CacheStockTemp(sourceStockTemp, ref stockTempRow);
                                    // --- ADD 2012/11/27 Y.Wakita ---------->>>>>
                                }
                                // --- ADD 2012/11/27 Y.Wakita ----------<<<<<
                            }

                            //-----------------------------------------------------------------------------
                            // 売仕入同時入力データキーリスト追加
                            //-----------------------------------------------------------------------------
                            this.MakeStockSyncInfoKeyListForStockInput(sourceStockTemp, ref stockSyncInfoKeyList);
                        }
                    }

                    //-----------------------------------------------------------------------------
                    // 前回情報保持
                    //-----------------------------------------------------------------------------
                    svStockSlipKey = new StockSlipKey((string)stockTempRowView[enterpriseCodeColumnName],
                                                      (int)stockTempRowView[supplierCdColumnName],
                                                      (DateTime)stockTempRowView[stockDateColumnName],
                                                      (string)stockTempRowView[partySaleSlipNumColumnName]);
                }
            }
            #endregion
        }

        #endregion

        #region 仕入データワークオブジェクトリスト → 仕入データテーブル
        /// <summary>
        /// 仕入データワークオブジェクトリストを仕入データテーブルにキャッシュします。
        /// </summary>
        /// <param name="stockSlipWorkList">仕入データワークオブジェクトリスト</param>
        private void CacheStockSlipForRead(List<StockSlipWork> stockSlipWorkList)
        {
            if (stockSlipWorkList != null)
            {
                foreach (StockSlipWork stockSlipWork in stockSlipWorkList)
                {
                    this.CacheStockSlipForReadDataTable(stockSlipWork, this._stockSlipForReadDataTable);
                }
            }
        }

        /// <summary>
        /// 仕入データワークオブジェクトを仕入データテーブルにキャッシュします。
        /// </summary>
        /// <param name="stockSlipWork">仕入データワークオブジェクト</param>
        /// <param name="stockSlipForReadDataTable">仕入データテーブル</param>
        private void CacheStockSlipForReadDataTable(StockSlipWork stockSlipWork, SalesInputDataSet.StockSlipForReadDataTable stockSlipForReadDataTable)
        {
            try
            {
                stockSlipForReadDataTable.AddStockSlipForReadRow(this.CreateRowFromUIData(stockSlipWork, stockSlipForReadDataTable));
            }
            catch (ConstraintException)
            {
                SalesInputDataSet.StockSlipForReadRow row = stockSlipForReadDataTable.FindBySupplierFormalSupplierSlipNo(stockSlipWork.SupplierFormal, stockSlipWork.SupplierSlipNo);
                this.SetRowFromUIData(ref row, stockSlipWork);
            }
        }

        /// <summary>
        /// 指定した仕入データワークオブジェクトを元に仕入データテーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="stockSlip">仕入データワークオブジェクト</param>
        /// <param name="stockSlipForReadDataTable">仕入データテーブル</param>
        /// <returns>仕入データ行オブジェクト</returns>
        private SalesInputDataSet.StockSlipForReadRow CreateRowFromUIData(StockSlipWork stockSlipWork, SalesInputDataSet.StockSlipForReadDataTable stockSlipForReadDataTable)
        {
            SalesInputDataSet.StockSlipForReadRow row = stockSlipForReadDataTable.NewStockSlipForReadRow();
            this.SetRowFromUIData(ref row, stockSlipWork);
            return row;
        }

        /// <summary>
        /// 仕入データワークオブジェクトから仕入データ行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="row">仕入データ行オブジェクト</param>
        /// <param name="stockSlipWork">仕入データワークオブジェクト</param>
        private void SetRowFromUIData(ref SalesInputDataSet.StockSlipForReadRow row, StockSlipWork stockSlipWork)
        {
            row.CreateDateTime = stockSlipWork.CreateDateTime; // 作成日時
            row.UpdateDateTime = stockSlipWork.UpdateDateTime; // 更新日時
            row.EnterpriseCode = stockSlipWork.EnterpriseCode; // 企業コード
            row.FileHeaderGuid = stockSlipWork.FileHeaderGuid; // GUID
            row.UpdEmployeeCode = stockSlipWork.UpdEmployeeCode; // 更新従業員コード
            row.UpdAssemblyId1 = stockSlipWork.UpdAssemblyId1; // 更新アセンブリID1
            row.UpdAssemblyId2 = stockSlipWork.UpdAssemblyId2; // 更新アセンブリID2
            row.LogicalDeleteCode = stockSlipWork.LogicalDeleteCode; // 論理削除区分
            row.SupplierFormal = stockSlipWork.SupplierFormal; // 仕入形式
            row.SupplierSlipNo = stockSlipWork.SupplierSlipNo; // 仕入伝票番号
            row.SectionCode = stockSlipWork.SectionCode; // 拠点コード
            row.SubSectionCode = stockSlipWork.SubSectionCode; // 部門コード
            row.DebitNoteDiv = stockSlipWork.DebitNoteDiv; // 赤伝区分
            row.DebitNLnkSuppSlipNo = stockSlipWork.DebitNLnkSuppSlipNo; // 赤黒連結仕入伝票番号
            row.SupplierSlipCd = stockSlipWork.SupplierSlipCd; // 仕入伝票区分
            row.StockGoodsCd = stockSlipWork.StockGoodsCd; // 仕入商品区分
            row.AccPayDivCd = stockSlipWork.AccPayDivCd; // 買掛区分
            row.StockSectionCd = stockSlipWork.StockSectionCd; // 仕入拠点コード
            row.StockAddUpSectionCd = stockSlipWork.StockAddUpSectionCd; // 仕入計上拠点コード
            row.StockSlipUpdateCd = stockSlipWork.StockSlipUpdateCd; // 仕入伝票更新区分
            row.InputDay = stockSlipWork.InputDay; // 入力日
            row.ArrivalGoodsDay = stockSlipWork.ArrivalGoodsDay; // 入荷日
            row.StockDate = stockSlipWork.StockDate; // 仕入日
            row.StockAddUpADate = stockSlipWork.StockAddUpADate; // 仕入計上日付
            row.DelayPaymentDiv = stockSlipWork.DelayPaymentDiv; // 来勘区分
            row.PayeeCode = stockSlipWork.PayeeCode; // 支払先コード
            row.PayeeSnm = stockSlipWork.PayeeSnm; // 支払先略称
            row.SupplierCd = stockSlipWork.SupplierCd; // 仕入先コード
            row.SupplierNm1 = stockSlipWork.SupplierNm1; // 仕入先名1
            row.SupplierNm2 = stockSlipWork.SupplierNm2; // 仕入先名2
            row.SupplierSnm = stockSlipWork.SupplierSnm; // 仕入先略称
            row.BusinessTypeCode = stockSlipWork.BusinessTypeCode; // 業種コード
            row.BusinessTypeName = stockSlipWork.BusinessTypeName; // 業種名称
            row.SalesAreaCode = stockSlipWork.SalesAreaCode; // 販売エリアコード
            row.SalesAreaName = stockSlipWork.SalesAreaName; // 販売エリア名称
            row.StockInputCode = stockSlipWork.StockInputCode; // 仕入入力者コード
            row.StockInputName = stockSlipWork.StockInputName; // 仕入入力者名称
            row.StockAgentCode = stockSlipWork.StockAgentCode; // 仕入担当者コード
            row.StockAgentName = stockSlipWork.StockAgentName; // 仕入担当者名称
            row.SuppTtlAmntDspWayCd = stockSlipWork.SuppTtlAmntDspWayCd; // 仕入先総額表示方法区分
            row.TtlAmntDispRateApy = stockSlipWork.TtlAmntDispRateApy; // 総額表示掛率適用区分
            row.StockTotalPrice = stockSlipWork.StockTotalPrice; // 仕入金額合計
            row.StockSubttlPrice = stockSlipWork.StockSubttlPrice; // 仕入金額小計
            row.StockTtlPricTaxInc = stockSlipWork.StockTtlPricTaxInc; // 仕入金額計（税込み）
            row.StockTtlPricTaxExc = stockSlipWork.StockTtlPricTaxExc; // 仕入金額計（税抜き）
            row.StockNetPrice = stockSlipWork.StockNetPrice; // 仕入正価金額
            row.StockPriceConsTax = stockSlipWork.StockPriceConsTax; // 仕入金額消費税額
            row.TtlItdedStcOutTax = stockSlipWork.TtlItdedStcOutTax; // 仕入外税対象額合計
            row.TtlItdedStcInTax = stockSlipWork.TtlItdedStcInTax; // 仕入内税対象額合計
            row.TtlItdedStcTaxFree = stockSlipWork.TtlItdedStcTaxFree; // 仕入非課税対象額合計
            row.StockOutTax = stockSlipWork.StockOutTax; // 仕入金額消費税額（外税）
            row.StckPrcConsTaxInclu = stockSlipWork.StckPrcConsTaxInclu; // 仕入金額消費税額（内税）
            row.StckDisTtlTaxExc = stockSlipWork.StckDisTtlTaxExc; // 仕入値引金額計（税抜き）
            row.ItdedStockDisOutTax = stockSlipWork.ItdedStockDisOutTax; // 仕入値引外税対象額合計
            row.ItdedStockDisInTax = stockSlipWork.ItdedStockDisInTax; // 仕入値引内税対象額合計
            row.ItdedStockDisTaxFre = stockSlipWork.ItdedStockDisTaxFre; // 仕入値引非課税対象額合計
            row.StockDisOutTax = stockSlipWork.StockDisOutTax; // 仕入値引消費税額（外税）
            row.StckDisTtlTaxInclu = stockSlipWork.StckDisTtlTaxInclu; // 仕入値引消費税額（内税）
            row.TaxAdjust = stockSlipWork.TaxAdjust; // 消費税調整額
            row.BalanceAdjust = stockSlipWork.BalanceAdjust; // 残高調整額
            row.SuppCTaxLayCd = stockSlipWork.SuppCTaxLayCd; // 仕入先消費税転嫁方式コード
            row.SupplierConsTaxRate = stockSlipWork.SupplierConsTaxRate; // 仕入先消費税税率
            row.AccPayConsTax = stockSlipWork.AccPayConsTax; // 買掛消費税
            row.StockFractionProcCd = stockSlipWork.StockFractionProcCd; // 仕入端数処理区分
            row.AutoPayment = stockSlipWork.AutoPayment; // 自動支払区分
            row.AutoPaySlipNum = stockSlipWork.AutoPaySlipNum; // 自動支払伝票番号
            row.RetGoodsReasonDiv = stockSlipWork.RetGoodsReasonDiv; // 返品理由コード
            row.RetGoodsReason = stockSlipWork.RetGoodsReason; // 返品理由
            row.PartySaleSlipNum = stockSlipWork.PartySaleSlipNum; // 相手先伝票番号
            row.SupplierSlipNote1 = stockSlipWork.SupplierSlipNote1; // 仕入伝票備考1
            row.SupplierSlipNote2 = stockSlipWork.SupplierSlipNote2; // 仕入伝票備考2
            row.DetailRowCount = stockSlipWork.DetailRowCount; // 明細行数
            row.EdiSendDate = stockSlipWork.EdiSendDate; // ＥＤＩ送信日
            row.EdiTakeInDate = stockSlipWork.EdiTakeInDate; // ＥＤＩ取込日
            row.UoeRemark1 = stockSlipWork.UoeRemark1; // ＵＯＥリマーク１
            row.UoeRemark2 = stockSlipWork.UoeRemark2; // ＵＯＥリマーク２
            row.SlipPrintDivCd = stockSlipWork.SlipPrintDivCd; // 伝票発行区分
            row.SlipPrintFinishCd = stockSlipWork.SlipPrintFinishCd; // 伝票発行済区分
            row.StockSlipPrintDate = stockSlipWork.StockSlipPrintDate; // 仕入伝票発行日
            row.SlipPrtSetPaperId = stockSlipWork.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
            row.SlipAddressDiv = stockSlipWork.SlipAddressDiv; // 伝票住所区分
            row.AddresseeCode = stockSlipWork.AddresseeCode; // 納品先コード
            row.AddresseeName = stockSlipWork.AddresseeName; // 納品先名称
            row.AddresseeName2 = stockSlipWork.AddresseeName2; // 納品先名称2
            row.AddresseePostNo = stockSlipWork.AddresseePostNo; // 納品先郵便番号
            row.AddresseeAddr1 = stockSlipWork.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
            row.AddresseeAddr3 = stockSlipWork.AddresseeAddr3; // 納品先住所3(番地)
            row.AddresseeAddr4 = stockSlipWork.AddresseeAddr4; // 納品先住所4(アパート名称)
            row.AddresseeTelNo = stockSlipWork.AddresseeTelNo; // 納品先電話番号
            row.AddresseeFaxNo = stockSlipWork.AddresseeFaxNo; // 納品先FAX番号
            row.DirectSendingCd = stockSlipWork.DirectSendingCd; // 直送区分
        }
        #endregion

        #region 仕入明細データワークオブジェクトリスト → 仕入明細データテーブル
        /// <summary>
        /// 仕入明細データワークオブジェクトリストを仕入明細データテーブルにキャッシュします。
        /// </summary>
        /// <param name="stockDetailWorkList">仕入明細データワークオブジェクトリスト</param>
        private void CacheStockDetailForRead(List<StockDetailWork> stockDetailWorkList)
        {
            if (stockDetailWorkList != null)
            {
                foreach (StockDetailWork stockDetailWork in stockDetailWorkList)
                {
                    this.CacheStockDetailForReadDataTable(stockDetailWork, this._stockDetailForReadDataTable);
                }
            }
        }

        /// <summary>
        /// 仕入明細データワークオブジェクトを仕入明細データテーブルにキャッシュします。
        /// </summary>
        /// <param name="stockDetailWork">仕入明細データワークオブジェクト</param>
        /// <param name="stockDetailForReadDataTable">仕入明細データテーブル</param>
        private void CacheStockDetailForReadDataTable(StockDetailWork stockDetailWork, SalesInputDataSet.StockDetailForReadDataTable stockDetailForReadDataTable)
        {
            try
            {
                stockDetailForReadDataTable.AddStockDetailForReadRow(this.CreateRowFromUIData(stockDetailWork, stockDetailForReadDataTable));
            }
            catch (ConstraintException)
            {
                SalesInputDataSet.StockDetailForReadRow row = stockDetailForReadDataTable.FindBySupplierSlipNoStockSlipDtlNum(stockDetailWork.SupplierSlipNo, stockDetailWork.StockSlipDtlNum);
                this.SetRowFromUIData(ref row, stockDetailWork);
            }
        }

        /// <summary>
        /// 指定した仕入明細データワークオブジェクトを元に仕入明細データテーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="stockDetailWork">仕入データワークオブジェクト</param>
        /// <param name="stockDetailForReadDataTable">仕入明細データテーブル</param>
        /// <returns>仕入明細データ行オブジェクト</returns>
        private SalesInputDataSet.StockDetailForReadRow CreateRowFromUIData(StockDetailWork stockDetailWork, SalesInputDataSet.StockDetailForReadDataTable stockDetailForReadDataTable)
        {

            SalesInputDataSet.StockDetailForReadRow row = stockDetailForReadDataTable.NewStockDetailForReadRow();

            this.SetRowFromUIData(ref row, stockDetailWork);
            return row;
        }

        /// <summary>
        /// 仕入明細データワークオブジェクトから仕入明細データ行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="row">仕入明細データ行オブジェクト</param>
        /// <param name="stockDetailWork">仕入明細データワークオブジェクト</param>
        private void SetRowFromUIData(ref SalesInputDataSet.StockDetailForReadRow row, StockDetailWork stockDetailWork)
        {
            row.AcceptAnOrderNo = stockDetailWork.AcceptAnOrderNo; // 受注番号
            row.SupplierFormal = stockDetailWork.SupplierFormal; // 仕入形式
            row.SupplierSlipNo = stockDetailWork.SupplierSlipNo; // 仕入伝票番号
            row.StockRowNo = stockDetailWork.StockRowNo; // 仕入行番号
            row.SectionCode = stockDetailWork.SectionCode; // 拠点コード
            row.SubSectionCode = stockDetailWork.SubSectionCode; // 部門コード
            row.CommonSeqNo = stockDetailWork.CommonSeqNo; // 共通通番
            row.StockSlipDtlNum = stockDetailWork.StockSlipDtlNum; // 仕入明細通番
            row.SupplierFormalSrc = stockDetailWork.SupplierFormalSrc; // 仕入形式（元）
            row.StockSlipDtlNumSrc = stockDetailWork.StockSlipDtlNumSrc; // 仕入明細通番（元）
            row.AcptAnOdrStatusSync = stockDetailWork.AcptAnOdrStatusSync; // 受注ステータス（同時）
            row.SalesSlipDtlNumSync = stockDetailWork.SalesSlipDtlNumSync; // 売上明細通番（同時）
            row.StockSlipCdDtl = stockDetailWork.StockSlipCdDtl; // 仕入伝票区分（明細）
            row.StockInputCode = stockDetailWork.StockInputCode; // 仕入入力者コード
            row.StockInputName = stockDetailWork.StockInputName; // 仕入入力者名称
            row.StockAgentCode = stockDetailWork.StockAgentCode; // 仕入担当者コード
            row.StockAgentName = stockDetailWork.StockAgentName; // 仕入担当者名称
            row.GoodsKindCode = stockDetailWork.GoodsKindCode; // 商品属性
            row.GoodsMakerCd = stockDetailWork.GoodsMakerCd; // 商品メーカーコード
            row.MakerName = stockDetailWork.MakerName; // メーカー名称
            row.MakerKanaName = stockDetailWork.MakerKanaName; // メーカーカナ名称
            row.GoodsNo = stockDetailWork.GoodsNo; // 商品番号
            row.GoodsName = stockDetailWork.GoodsName; // 商品名称
            row.GoodsNameKana = stockDetailWork.GoodsNameKana; // 商品カナ名称
            //row.GoodsShortName = stockDetailWork.GoodsShortName; // 商品名略称
            row.GoodsLGroup = stockDetailWork.GoodsLGroup; // 商品大分類コード
            row.GoodsLGroupName = stockDetailWork.GoodsLGroupName; // 商品大分類名称
            row.GoodsMGroup = stockDetailWork.GoodsMGroup; // 商品中分類コード
            row.GoodsMGroupName = stockDetailWork.GoodsMGroupName; // 商品中分類名称
            row.BLGroupCode = stockDetailWork.BLGroupCode; // BLグループコード
            row.BLGroupName = stockDetailWork.BLGroupName; // BLグループコード名称
            row.BLGoodsCode = stockDetailWork.BLGoodsCode; // BL商品コード
            row.BLGoodsFullName = stockDetailWork.BLGoodsFullName; // BL商品コード名称（全角）
            row.EnterpriseGanreCode = stockDetailWork.EnterpriseGanreCode; // 自社分類コード
            row.EnterpriseGanreName = stockDetailWork.EnterpriseGanreName; // 自社分類名称
            row.WarehouseCode = stockDetailWork.WarehouseCode; // 倉庫コード
            row.WarehouseName = stockDetailWork.WarehouseName; // 倉庫名称
            row.WarehouseShelfNo = stockDetailWork.WarehouseShelfNo; // 倉庫棚番
            row.StockOrderDivCd = stockDetailWork.StockOrderDivCd; // 仕入在庫取寄せ区分
            row.OpenPriceDiv = stockDetailWork.OpenPriceDiv; // オープン価格区分
            row.GoodsRateRank = stockDetailWork.GoodsRateRank; // 商品掛率ランク
            row.CustRateGrpCode = stockDetailWork.CustRateGrpCode; // 得意先掛率グループコード
            row.SuppRateGrpCode = stockDetailWork.SuppRateGrpCode; // 仕入先掛率グループコード
            row.ListPriceTaxExcFl = stockDetailWork.ListPriceTaxExcFl; // 定価（税抜，浮動）
            row.ListPriceTaxIncFl = stockDetailWork.ListPriceTaxIncFl; // 定価（税込，浮動）
            row.StockRate = stockDetailWork.StockRate; // 仕入率
            row.RateSectStckUnPrc = stockDetailWork.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
            row.RateDivStckUnPrc = stockDetailWork.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
            row.UnPrcCalcCdStckUnPrc = stockDetailWork.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
            row.PriceCdStckUnPrc = stockDetailWork.PriceCdStckUnPrc; // 価格区分（仕入単価）
            row.StdUnPrcStckUnPrc = stockDetailWork.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
            row.FracProcUnitStcUnPrc = stockDetailWork.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
            row.FracProcStckUnPrc = stockDetailWork.FracProcStckUnPrc; // 端数処理（仕入単価）
            row.StockUnitPriceFl = stockDetailWork.StockUnitPriceFl; // 仕入単価（税抜，浮動）
            row.StockUnitTaxPriceFl = stockDetailWork.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
            row.StockUnitChngDiv = stockDetailWork.StockUnitChngDiv; // 仕入単価変更区分
            row.BfStockUnitPriceFl = stockDetailWork.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
            row.BfListPrice = stockDetailWork.BfListPrice; // 変更前定価
            row.RateBLGoodsCode = stockDetailWork.RateBLGoodsCode; // BL商品コード（掛率）
            row.RateBLGoodsName = stockDetailWork.RateBLGoodsName; // BL商品コード名称（掛率）
            row.RateGoodsRateGrpCd = stockDetailWork.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            row.RateGoodsRateGrpNm = stockDetailWork.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            row.RateBLGroupCode = stockDetailWork.RateBLGroupCode; // BLグループコード（掛率）
            row.RateBLGroupName = stockDetailWork.RateBLGroupName; // BLグループ名称（掛率）
            row.StockCount = stockDetailWork.StockCount; // 仕入数
            row.OrderCnt = stockDetailWork.OrderCnt; // 発注数量
            row.OrderAdjustCnt = stockDetailWork.OrderAdjustCnt; // 発注調整数
            row.OrderRemainCnt = stockDetailWork.OrderRemainCnt; // 発注残数
            row.RemainCntUpdDate = stockDetailWork.RemainCntUpdDate; // 残数更新日
            row.StockPriceTaxExc = stockDetailWork.StockPriceTaxExc; // 仕入金額（税抜き）
            row.StockPriceTaxInc = stockDetailWork.StockPriceTaxInc; // 仕入金額（税込み）
            row.StockGoodsCd = stockDetailWork.StockGoodsCd; // 仕入商品区分
            row.StockPriceConsTax = stockDetailWork.StockPriceConsTax; // 仕入金額消費税額
            row.TaxationCode = stockDetailWork.TaxationCode; // 課税区分
            row.StockDtiSlipNote1 = stockDetailWork.StockDtiSlipNote1; // 仕入伝票明細備考1
            row.SalesCustomerCode = stockDetailWork.SalesCustomerCode; // 販売先コード
            row.SalesCustomerSnm = stockDetailWork.SalesCustomerSnm; // 販売先略称
            row.SlipMemo1 = stockDetailWork.SlipMemo1; // 伝票メモ１
            row.SlipMemo2 = stockDetailWork.SlipMemo2; // 伝票メモ２
            row.SlipMemo3 = stockDetailWork.SlipMemo3; // 伝票メモ３
            row.InsideMemo1 = stockDetailWork.InsideMemo1; // 社内メモ１
            row.InsideMemo2 = stockDetailWork.InsideMemo2; // 社内メモ２
            row.InsideMemo3 = stockDetailWork.InsideMemo3; // 社内メモ３
            row.SupplierCd = stockDetailWork.SupplierCd; // 仕入先コード
            row.SupplierSnm = stockDetailWork.SupplierSnm; // 仕入先略称
            row.AddresseeCode = stockDetailWork.AddresseeCode; // 納品先コード
            row.AddresseeName = stockDetailWork.AddresseeName; // 納品先名称
            row.DirectSendingCd = stockDetailWork.DirectSendingCd; // 直送区分
            row.OrderNumber = stockDetailWork.OrderNumber; // 発注番号
            row.WayToOrder = stockDetailWork.WayToOrder; // 注文方法
            row.DeliGdsCmpltDueDate = stockDetailWork.DeliGdsCmpltDueDate; // 納品完了予定日
            row.ExpectDeliveryDate = stockDetailWork.ExpectDeliveryDate; // 希望納期
            row.OrderDataCreateDiv = stockDetailWork.OrderDataCreateDiv; // 発注データ作成区分
            row.OrderDataCreateDate = stockDetailWork.OrderDataCreateDate; // 発注データ作成日
            row.OrderFormIssuedDiv = stockDetailWork.OrderFormIssuedDiv; // 発注書発行済区分

            DataRow[] dataRows = row.GetChildRows("StockDetailForRead_SalesDetail");
            if ((dataRows != null) && (dataRows.Length > 0))
            {
                foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in dataRows)
                {
                    row.DtlRelationGuid = salesDetailRow.DtlRelationGuid;
                    row.EditStatus = salesDetailRow.EditStatus;
                    break;
                }
            }
            else
            {
                row.DtlRelationGuid = Guid.Empty;
            }
        }
        #endregion

        #region 仕入データテーブル、仕入明細データテーブル → 仕入情報テーブル
        /// <summary>
        /// 仕入データテーブル、仕入明細データテーブルから仕入情報データテーブルにキャッシュします。
        /// </summary>
        private void CacheStockTemp()
        {
            foreach (SalesInputDataSet.StockSlipForReadRow stockSlipForReadRow in this._stockSlipForReadDataTable)
            {
                DataRow[] dataRows = stockSlipForReadRow.GetChildRows("StockSlipForRead_StockDetailForRead");
                if ((dataRows != null) && (dataRows.Length > 0))
                {
                    foreach (SalesInputDataSet.StockDetailForReadRow stockDetailForReadRow in dataRows)
                    {
                        // 同時入力親情報が存在する場合のみキャッシュ
                        DataRow[] dataRowsSalesDetail = stockDetailForReadRow.GetChildRows("StockDetailForRead_SalesDetail");
                        if ((dataRowsSalesDetail != null) && (dataRowsSalesDetail.Length > 0))
                        {
                            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in dataRowsSalesDetail)
                            {
                                if (salesDetailRow != null)
                                {
                                    this.CacheStockTempDataTable(stockSlipForReadRow, stockDetailForReadRow, this._stockTempDataTable);
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            this.StockTempRowAddUpEnableCountSetting();

            // キャッシュ情報退避(仕入保存時の制御で使用)
            this._stockTempDataTableForSet = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTable.Copy();
        }

        /// <summary>
        /// 仕入データ行オブジェクト、仕入明細データ行オブジェクトから仕入明細データテーブルにキャッシュします。
        /// </summary>
        /// <param name="stockSlipForReadRow">仕入データ行オブジェクト</param>
        /// <param name="stockDetailForReadRow">仕入明細データ行オブジェクト</param>
        /// <param name="stockTempDataTable">仕入情報データテーブル</param>
        /// <br>UpdateNote : 2011/08/30 譚洪 連番995 行追加すると、仕入伝票入力で追加した行が削除される時があるの対応</br>
        private void CacheStockTempDataTable(SalesInputDataSet.StockSlipForReadRow stockSlipForReadRow, SalesInputDataSet.StockDetailForReadRow stockDetailForReadRow, SalesInputDataSet.StockTempDataTable stockTempDataTable)
        {
            try
            {
                // --- UPD 2011/08/30 ---- >>>>>>>
                 SalesInputDataSet.SalesDetailRow[] rows =
                (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}='{1}'",
                                                                                  this._salesDetailDataTable.StockSlipDtlNumSyncColumn.ColumnName, stockDetailForReadRow.StockSlipDtlNum));

                 if (rows.Length != 0)
                {
                    stockTempDataTable.AddStockTempRow(this.CreateRowFromUIData(stockSlipForReadRow, stockDetailForReadRow, stockTempDataTable));
                }
                // --- UPD 2011/08/30 ---- <<<<<<<
            }
            catch (ConstraintException)
            {
                SalesInputDataSet.StockTempRow stockTempRow = stockTempDataTable.FindByDtlRelationGuid(stockDetailForReadRow.DtlRelationGuid);
                this.SetRowFromUIData(ref stockTempRow, stockSlipForReadRow, stockDetailForReadRow);
            }
        }

        /// <summary>
        /// 指定した仕入データオブジェクト、仕入明細データオブジェクトを元に仕入情報データ行オブジェクトを生成します。
        /// </summary>
        /// <param name="stockSlipForReadRow">仕入データオブジェクト</param>
        /// <param name="stockDetailForReadRow">仕入明細データオブジェクト</param>
        /// <param name="stockTempDataTable">仕入情報データテーブル</param>
        /// <returns>仕入情報データ行オブジェクト</returns>
        private SalesInputDataSet.StockTempRow CreateRowFromUIData(SalesInputDataSet.StockSlipForReadRow stockSlipForReadRow, SalesInputDataSet.StockDetailForReadRow stockDetailForReadRow, SalesInputDataSet.StockTempDataTable stockTempDataTable)
        {
            SalesInputDataSet.StockTempRow stockTempRow = stockTempDataTable.NewStockTempRow();
            this.SetRowFromUIData(ref stockTempRow, stockSlipForReadRow, stockDetailForReadRow);
            return stockTempRow;
        }

        /// <summary>
        /// 仕入データ行オブジェクト、仕入明細データ行オブジェクトから仕入情報行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="row">仕入情報行オブジェクト</param>
        /// <param name="stockSlipForReadRow">仕入データ行オブジェクト</param>
        /// <param name="stockDetailForReadRow">仕入明細データ行オブジェクト</param>
        private void SetRowFromUIData(ref SalesInputDataSet.StockTempRow row, SalesInputDataSet.StockSlipForReadRow stockSlipForReadRow, SalesInputDataSet.StockDetailForReadRow stockDetailForReadRow)
        {
            if (stockSlipForReadRow.SupplierFormal != (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order)
            {
                #region 仕入、入荷
                //----------------------------------------------------
                // 仕入、入荷
                //----------------------------------------------------
                row.CreateDateTime = stockSlipForReadRow.CreateDateTime; // 作成日時
                row.UpdateDateTime = stockSlipForReadRow.UpdateDateTime; // 更新日時
                row.EnterpriseCode = stockSlipForReadRow.EnterpriseCode; // 企業コード
                row.FileHeaderGuid = stockSlipForReadRow.FileHeaderGuid; // GUID
                row.UpdEmployeeCode = stockSlipForReadRow.UpdEmployeeCode; // 更新従業員コード
                row.UpdAssemblyId1 = stockSlipForReadRow.UpdAssemblyId1; // 更新アセンブリID1
                row.UpdAssemblyId2 = stockSlipForReadRow.UpdAssemblyId2; // 更新アセンブリID2
                row.LogicalDeleteCode = stockSlipForReadRow.LogicalDeleteCode; // 論理削除区分
                row.SupplierFormal = stockSlipForReadRow.SupplierFormal; // 仕入形式
                row.SupplierSlipNo = stockSlipForReadRow.SupplierSlipNo; // 仕入伝票番号
                row.SectionCode = stockSlipForReadRow.SectionCode; // 拠点コード
                row.SubSectionCode = stockSlipForReadRow.SubSectionCode; // 部門コード
                row.DebitNoteDiv = stockSlipForReadRow.DebitNoteDiv; // 赤伝区分
                row.DebitNLnkSuppSlipNo = stockSlipForReadRow.DebitNLnkSuppSlipNo; // 赤黒連結仕入伝票番号
                row.SupplierSlipCd = stockSlipForReadRow.SupplierSlipCd; // 仕入伝票区分
                row.StockGoodsCd = stockSlipForReadRow.StockGoodsCd; // 仕入商品区分
                row.AccPayDivCd = stockSlipForReadRow.AccPayDivCd; // 買掛区分
                row.StockSectionCd = stockSlipForReadRow.StockSectionCd; // 仕入拠点コード
                row.StockAddUpSectionCd = stockSlipForReadRow.StockAddUpSectionCd; // 仕入計上拠点コード
                row.StockSlipUpdateCd = stockSlipForReadRow.StockSlipUpdateCd; // 仕入伝票更新区分
                row.InputDay = stockSlipForReadRow.InputDay; // 入力日
                row.ArrivalGoodsDay = stockSlipForReadRow.ArrivalGoodsDay; // 入荷日
                row.StockDate = stockSlipForReadRow.StockDate; // 仕入日
                row.StockAddUpADate = stockSlipForReadRow.StockAddUpADate; // 仕入計上日付
                row.DelayPaymentDiv = stockSlipForReadRow.DelayPaymentDiv; // 来勘区分
                row.PayeeCode = stockSlipForReadRow.PayeeCode; // 支払先コード
                row.PayeeSnm = stockSlipForReadRow.PayeeSnm; // 支払先略称
                row.SupplierCd = stockSlipForReadRow.SupplierCd; // 仕入先コード
                row.SupplierNm1 = stockSlipForReadRow.SupplierNm1; // 仕入先名1
                row.SupplierNm2 = stockSlipForReadRow.SupplierNm2; // 仕入先名2
                row.SupplierSnm = stockSlipForReadRow.SupplierSnm; // 仕入先略称
                row.BusinessTypeCode = stockSlipForReadRow.BusinessTypeCode; // 業種コード
                row.BusinessTypeName = stockSlipForReadRow.BusinessTypeName; // 業種名称
                row.SalesAreaCode = stockSlipForReadRow.SalesAreaCode; // 販売エリアコード
                row.SalesAreaName = stockSlipForReadRow.SalesAreaName; // 販売エリア名称
                row.StockInputCode = stockSlipForReadRow.StockInputCode; // 仕入入力者コード
                row.StockInputName = stockSlipForReadRow.StockInputName; // 仕入入力者名称
                row.StockAgentCode = stockSlipForReadRow.StockAgentCode; // 仕入担当者コード
                row.StockAgentName = stockSlipForReadRow.StockAgentName; // 仕入担当者名称
                row.SuppTtlAmntDspWayCd = stockSlipForReadRow.SuppTtlAmntDspWayCd; // 仕入先総額表示方法区分
                row.TtlAmntDispRateApy = stockSlipForReadRow.TtlAmntDispRateApy; // 総額表示掛率適用区分
                row.StockTotalPrice = stockSlipForReadRow.StockTotalPrice; // 仕入金額合計
                row.StockSubttlPrice = stockSlipForReadRow.StockSubttlPrice; // 仕入金額小計
                row.StockTtlPricTaxInc = stockSlipForReadRow.StockTtlPricTaxInc; // 仕入金額計（税込み）
                row.StockTtlPricTaxExc = stockSlipForReadRow.StockTtlPricTaxExc; // 仕入金額計（税抜き）
                row.StockNetPrice = stockSlipForReadRow.StockNetPrice; // 仕入正価金額
                row.StockPriceConsTax = stockSlipForReadRow.StockPriceConsTax; // 仕入金額消費税額
                row.TtlItdedStcOutTax = stockSlipForReadRow.TtlItdedStcOutTax; // 仕入外税対象額合計
                row.TtlItdedStcInTax = stockSlipForReadRow.TtlItdedStcInTax; // 仕入内税対象額合計
                row.TtlItdedStcTaxFree = stockSlipForReadRow.TtlItdedStcTaxFree; // 仕入非課税対象額合計
                row.StockOutTax = stockSlipForReadRow.StockOutTax; // 仕入金額消費税額（外税）
                row.StckPrcConsTaxInclu = stockSlipForReadRow.StckPrcConsTaxInclu; // 仕入金額消費税額（内税）
                row.StckDisTtlTaxExc = stockSlipForReadRow.StckDisTtlTaxExc; // 仕入値引金額計（税抜き）
                row.ItdedStockDisOutTax = stockSlipForReadRow.ItdedStockDisOutTax; // 仕入値引外税対象額合計
                row.ItdedStockDisInTax = stockSlipForReadRow.ItdedStockDisInTax; // 仕入値引内税対象額合計
                row.ItdedStockDisTaxFre = stockSlipForReadRow.ItdedStockDisTaxFre; // 仕入値引非課税対象額合計
                row.StockDisOutTax = stockSlipForReadRow.StockDisOutTax; // 仕入値引消費税額（外税）
                row.StckDisTtlTaxInclu = stockSlipForReadRow.StckDisTtlTaxInclu; // 仕入値引消費税額（内税）
                row.TaxAdjust = stockSlipForReadRow.TaxAdjust; // 消費税調整額
                row.BalanceAdjust = stockSlipForReadRow.BalanceAdjust; // 残高調整額
                row.SuppCTaxLayCd = stockSlipForReadRow.SuppCTaxLayCd; // 仕入先消費税転嫁方式コード
                row.SupplierConsTaxRate = stockSlipForReadRow.SupplierConsTaxRate; // 仕入先消費税税率
                row.AccPayConsTax = stockSlipForReadRow.AccPayConsTax; // 買掛消費税
                row.StockFractionProcCd = stockSlipForReadRow.StockFractionProcCd; // 仕入端数処理区分
                row.AutoPayment = stockSlipForReadRow.AutoPayment; // 自動支払区分
                row.AutoPaySlipNum = stockSlipForReadRow.AutoPaySlipNum; // 自動支払伝票番号
                row.RetGoodsReasonDiv = stockSlipForReadRow.RetGoodsReasonDiv; // 返品理由コード
                row.RetGoodsReason = stockSlipForReadRow.RetGoodsReason; // 返品理由
                row.PartySaleSlipNum = stockSlipForReadRow.PartySaleSlipNum; // 相手先伝票番号
                row.SupplierSlipNote1 = stockSlipForReadRow.SupplierSlipNote1; // 仕入伝票備考1
                row.SupplierSlipNote2 = stockSlipForReadRow.SupplierSlipNote2; // 仕入伝票備考2
                row.DetailRowCount = stockSlipForReadRow.DetailRowCount; // 明細行数
                row.EdiSendDate = stockSlipForReadRow.EdiSendDate; // ＥＤＩ送信日
                row.EdiTakeInDate = stockSlipForReadRow.EdiTakeInDate; // ＥＤＩ取込日
                row.UoeRemark1 = stockSlipForReadRow.UoeRemark1; // ＵＯＥリマーク１
                row.UoeRemark2 = stockSlipForReadRow.UoeRemark2; // ＵＯＥリマーク２
                row.SlipPrintDivCd = stockSlipForReadRow.SlipPrintDivCd; // 伝票発行区分
                row.SlipPrintFinishCd = stockSlipForReadRow.SlipPrintFinishCd; // 伝票発行済区分
                row.StockSlipPrintDate = stockSlipForReadRow.StockSlipPrintDate; // 仕入伝票発行日
                row.SlipPrtSetPaperId = stockSlipForReadRow.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
                row.SlipAddressDiv = stockSlipForReadRow.SlipAddressDiv; // 伝票住所区分
                row.AddresseeCode = stockSlipForReadRow.AddresseeCode; // 納品先コード
                row.AddresseeName = stockSlipForReadRow.AddresseeName; // 納品先名称
                row.AddresseeName2 = stockSlipForReadRow.AddresseeName2; // 納品先名称2
                row.AddresseePostNo = stockSlipForReadRow.AddresseePostNo; // 納品先郵便番号
                row.AddresseeAddr1 = stockSlipForReadRow.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
                row.AddresseeAddr3 = stockSlipForReadRow.AddresseeAddr3; // 納品先住所3(番地)
                row.AddresseeAddr4 = stockSlipForReadRow.AddresseeAddr4; // 納品先住所4(アパート名称)
                row.AddresseeTelNo = stockSlipForReadRow.AddresseeTelNo; // 納品先電話番号
                row.AddresseeFaxNo = stockSlipForReadRow.AddresseeFaxNo; // 納品先FAX番号
                row.DirectSendingCd = stockSlipForReadRow.DirectSendingCd; // 直送区分

                row.AcceptAnOrderNo = stockDetailForReadRow.AcceptAnOrderNo; // 受注番号
                row.SupplierFormalDetail = stockDetailForReadRow.SupplierFormal; // 仕入形式
                row.SupplierSlipNoDetail = stockDetailForReadRow.SupplierSlipNo; // 仕入伝票番号
                row.StockRowNo = stockDetailForReadRow.StockRowNo; // 仕入行番号
                row.SectionCodeDetail = stockDetailForReadRow.SectionCode; // 拠点コード
                row.SubSectionCodeDetail = stockDetailForReadRow.SubSectionCode; // 部門コード
                row.CommonSeqNo = stockDetailForReadRow.CommonSeqNo; // 共通通番
                row.StockSlipDtlNum = stockDetailForReadRow.StockSlipDtlNum; // 仕入明細通番
                row.SupplierFormalSrc = stockDetailForReadRow.SupplierFormalSrc; // 仕入形式（元）
                row.StockSlipDtlNumSrc = stockDetailForReadRow.StockSlipDtlNumSrc; // 仕入明細通番（元）
                row.AcptAnOdrStatusSync = stockDetailForReadRow.AcptAnOdrStatusSync; // 受注ステータス（同時）
                row.SalesSlipDtlNumSync = stockDetailForReadRow.SalesSlipDtlNumSync; // 売上明細通番（同時）
                row.StockSlipCdDtl = stockDetailForReadRow.StockSlipCdDtl; // 仕入伝票区分（明細）
                row.StockInputCodeDetail = stockDetailForReadRow.StockInputCode; // 仕入入力者コード
                row.StockInputNameDetail = stockDetailForReadRow.StockInputName; // 仕入入力者名称
                row.StockAgentCodeDetail = stockDetailForReadRow.StockAgentCode; // 仕入担当者コード
                row.StockAgentNameDetail = stockDetailForReadRow.StockAgentName; // 仕入担当者名称
                row.GoodsKindCode = stockDetailForReadRow.GoodsKindCode; // 商品属性
                row.GoodsMakerCd = stockDetailForReadRow.GoodsMakerCd; // 商品メーカーコード
                row.MakerName = stockDetailForReadRow.MakerName; // メーカー名称
                row.MakerKanaName = stockDetailForReadRow.MakerKanaName; // メーカーカナ名称
                row.CmpltMakerKanaName = stockDetailForReadRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
                row.GoodsNo = stockDetailForReadRow.GoodsNo; // 商品番号
                row.GoodsName = stockDetailForReadRow.GoodsName; // 商品名称
                row.GoodsNameKana = stockDetailForReadRow.GoodsNameKana; // 商品名称カナ
                row.GoodsLGroup = stockDetailForReadRow.GoodsLGroup; // 商品大分類コード
                row.GoodsLGroupName = stockDetailForReadRow.GoodsLGroupName; // 商品大分類名称
                row.GoodsMGroup = stockDetailForReadRow.GoodsMGroup; // 商品中分類コード
                row.GoodsMGroupName = stockDetailForReadRow.GoodsMGroupName; // 商品中分類名称
                row.BLGroupCode = stockDetailForReadRow.BLGroupCode; // BLグループコード
                row.BLGroupName = stockDetailForReadRow.BLGroupName; // BLグループコード名称
                row.BLGoodsCode = stockDetailForReadRow.BLGoodsCode; // BL商品コード
                row.BLGoodsFullName = stockDetailForReadRow.BLGoodsFullName; // BL商品コード名称（全角）
                row.EnterpriseGanreCode = stockDetailForReadRow.EnterpriseGanreCode; // 自社分類コード
                row.EnterpriseGanreName = stockDetailForReadRow.EnterpriseGanreName; // 自社分類名称
                row.WarehouseCode = stockDetailForReadRow.WarehouseCode; // 倉庫コード
                row.WarehouseName = stockDetailForReadRow.WarehouseName; // 倉庫名称
                row.WarehouseShelfNo = stockDetailForReadRow.WarehouseShelfNo; // 倉庫棚番
                row.StockOrderDivCd = stockDetailForReadRow.StockOrderDivCd; // 仕入在庫取寄せ区分
                row.OpenPriceDiv = stockDetailForReadRow.OpenPriceDiv; // オープン価格区分
                row.GoodsRateRank = stockDetailForReadRow.GoodsRateRank; // 商品掛率ランク
                row.CustRateGrpCode = stockDetailForReadRow.CustRateGrpCode; // 得意先掛率グループコード
                row.SuppRateGrpCode = stockDetailForReadRow.SuppRateGrpCode; // 仕入先掛率グループコード
                row.ListPriceTaxExcFl = stockDetailForReadRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
                row.ListPriceTaxIncFl = stockDetailForReadRow.ListPriceTaxIncFl; // 定価（税込，浮動）
                row.StockRate = stockDetailForReadRow.StockRate; // 仕入率
                row.RateSectStckUnPrc = stockDetailForReadRow.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
                row.RateDivStckUnPrc = stockDetailForReadRow.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
                row.UnPrcCalcCdStckUnPrc = stockDetailForReadRow.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
                row.PriceCdStckUnPrc = stockDetailForReadRow.PriceCdStckUnPrc; // 価格区分（仕入単価）
                row.StdUnPrcStckUnPrc = stockDetailForReadRow.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
                row.FracProcUnitStcUnPrc = stockDetailForReadRow.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
                row.FracProcStckUnPrc = stockDetailForReadRow.FracProcStckUnPrc; // 端数処理（仕入単価）
                row.StockUnitPriceFl = stockDetailForReadRow.StockUnitPriceFl; // 仕入単価（税抜，浮動）
                row.StockUnitTaxPriceFl = stockDetailForReadRow.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
                row.StockUnitChngDiv = stockDetailForReadRow.StockUnitChngDiv; // 仕入単価変更区分
                row.BfStockUnitPriceFl = stockDetailForReadRow.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
                row.BfListPrice = stockDetailForReadRow.BfListPrice; // 変更前定価
                row.RateBLGoodsCode = stockDetailForReadRow.RateBLGoodsCode; // BL商品コード（掛率）
                row.RateBLGoodsName = stockDetailForReadRow.RateBLGoodsName; // BL商品コード名称（掛率）
                row.RateGoodsRateGrpCd = stockDetailForReadRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
                row.RateGoodsRateGrpNm = stockDetailForReadRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
                row.RateBLGroupCode = stockDetailForReadRow.RateBLGroupCode; // BLグループコード（掛率）
                row.RateBLGroupName = stockDetailForReadRow.RateBLGroupName; // BLグループ名称（掛率）
                row.StockCount = stockDetailForReadRow.StockCount; // 仕入数
                row.OrderCnt = stockDetailForReadRow.OrderCnt; // 発注数量
                row.OrderAdjustCnt = stockDetailForReadRow.OrderAdjustCnt; // 発注調整数
                row.OrderRemainCnt = stockDetailForReadRow.OrderRemainCnt; // 発注残数
                row.RemainCntUpdDate = stockDetailForReadRow.RemainCntUpdDate; // 残数更新日
                row.StockPriceTaxExc = stockDetailForReadRow.StockPriceTaxExc; // 仕入金額（税抜き）
                row.StockPriceTaxInc = stockDetailForReadRow.StockPriceTaxInc; // 仕入金額（税込み）
                row.StockGoodsCdDetail = stockDetailForReadRow.StockGoodsCd; // 仕入商品区分
                row.StockPriceConsTaxDetail = stockDetailForReadRow.StockPriceConsTax; // 仕入金額消費税額
                row.TaxationCode = stockDetailForReadRow.TaxationCode; // 課税区分
                row.StockDtiSlipNote1 = stockDetailForReadRow.StockDtiSlipNote1; // 仕入伝票明細備考1
                row.SalesCustomerCode = stockDetailForReadRow.SalesCustomerCode; // 販売先コード
                row.SalesCustomerSnm = stockDetailForReadRow.SalesCustomerSnm; // 販売先略称
                row.SlipMemo1 = stockDetailForReadRow.SlipMemo1; // 伝票メモ１
                row.SlipMemo2 = stockDetailForReadRow.SlipMemo2; // 伝票メモ２
                row.SlipMemo3 = stockDetailForReadRow.SlipMemo3; // 伝票メモ３
                row.InsideMemo1 = stockDetailForReadRow.InsideMemo1; // 社内メモ１
                row.InsideMemo2 = stockDetailForReadRow.InsideMemo2; // 社内メモ２
                row.InsideMemo3 = stockDetailForReadRow.InsideMemo3; // 社内メモ３
                row.SupplierCdDetail = stockDetailForReadRow.SupplierCd; // 仕入先コード
                row.SupplierSnmDetail = stockDetailForReadRow.SupplierSnm; // 仕入先略称
                row.AddresseeCodeDetail = stockDetailForReadRow.AddresseeCode; // 納品先コード
                row.AddresseeNameDetail = stockDetailForReadRow.AddresseeName; // 納品先名称
                row.DirectSendingCdDetail = stockDetailForReadRow.DirectSendingCd; // 直送区分
                row.OrderNumber = stockDetailForReadRow.OrderNumber; // 発注番号
                row.WayToOrder = stockDetailForReadRow.WayToOrder; // 注文方法
                row.DeliGdsCmpltDueDate = stockDetailForReadRow.DeliGdsCmpltDueDate; // 納品完了予定日
                row.ExpectDeliveryDate = stockDetailForReadRow.ExpectDeliveryDate; // 希望納期
                row.OrderDataCreateDiv = stockDetailForReadRow.OrderDataCreateDiv; // 発注データ作成区分
                row.OrderDataCreateDate = stockDetailForReadRow.OrderDataCreateDate; // 発注データ作成日
                row.OrderFormIssuedDiv = stockDetailForReadRow.OrderFormIssuedDiv; // 発注書発行済区分
                //row.TotalDay = stockDetailForReadRow.TotalDay; // 締日
                //row.NTimeCalcStDate = stockDetailForReadRow.NTimeCalcStDate; // 次回勘定開始日
                //row.PayeeName = stockDetailForReadRow.PayeeName; // 支払先名称
                //row.PayeeName2 = stockDetailForReadRow.PayeeName2; // 支払先名称２
                //row.AddUpEnableCnt = stockDetailForReadRow.AddUpEnableCnt; // 計上可能数量
                row.AddUpEnableCnt = stockDetailForReadRow.OrderRemainCnt; // 計上可能数量
                //row.AlreadyAddUpCnt = stockDetailForReadRow.AlreadyAddUpCnt; // 計上済数量
                row.EditStatus = stockDetailForReadRow.EditStatus; // エディットステータス
                row.DtlRelationGuid = stockDetailForReadRow.DtlRelationGuid; // 共通キー
                #endregion
            }
            else
            {

                #region 発注
                //----------------------------------------------------
                // 発注
                //----------------------------------------------------
                // 仕入先情報
                Supplier supplier;
                int status = this._supplierAcs.Read(out supplier, this._enterpriseCode, stockDetailForReadRow.SupplierCd);
                if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) supplier = new Supplier();

                // 支払先情報取得
                Supplier payeeSupplier;
                status = this._supplierAcs.Read(out payeeSupplier, this._enterpriseCode, supplier.PayeeCode);
                if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) payeeSupplier = new Supplier();

                //row.CreateDateTime = stockSlipForReadRow.CreateDateTime; // 作成日時
                //row.UpdateDateTime = stockSlipForReadRow.UpdateDateTime; // 更新日時
                //row.EnterpriseCode = stockSlipForReadRow.EnterpriseCode; // 企業コード
                row.FileHeaderGuid = Guid.Empty; // GUID
                //row.UpdEmployeeCode = stockSlipForReadRow.UpdEmployeeCode; // 更新従業員コード
                //row.UpdAssemblyId1 = stockSlipForReadRow.UpdAssemblyId1; // 更新アセンブリID1
                //row.UpdAssemblyId2 = stockSlipForReadRow.UpdAssemblyId2; // 更新アセンブリID2
                //row.LogicalDeleteCode = stockSlipForReadRow.LogicalDeleteCode; // 論理削除区分
                row.SupplierFormal = stockSlipForReadRow.SupplierFormal; // 仕入形式
                row.SupplierSlipNo = stockSlipForReadRow.SupplierSlipNo; // 仕入伝票番号
                row.SectionCode = stockSlipForReadRow.SectionCode; // 拠点コード
                row.SubSectionCode = stockSlipForReadRow.SubSectionCode; // 部門コード
                row.DebitNoteDiv = stockSlipForReadRow.DebitNoteDiv; // 赤伝区分
                row.DebitNLnkSuppSlipNo = stockSlipForReadRow.DebitNLnkSuppSlipNo; // 赤黒連結仕入伝票番号
                row.SupplierSlipCd = (int)SalesSlipStockInfoInputAcs.SupplierSlipCd.Stock; // 仕入伝票区分
                row.StockGoodsCd = stockDetailForReadRow.StockGoodsCd; // 仕入商品区分
                row.AccPayDivCd = (int)SalesSlipStockInfoInputAcs.AccPayDivCd.AccPay; // 買掛区分
                row.StockSectionCd = stockSlipForReadRow.StockSectionCd; // 仕入拠点コード
                row.StockAddUpSectionCd = stockSlipForReadRow.StockAddUpSectionCd; // 仕入計上拠点コード
                row.StockSlipUpdateCd = stockSlipForReadRow.StockSlipUpdateCd; // 仕入伝票更新区分
                row.InputDay = stockSlipForReadRow.InputDay; // 入力日
                row.ArrivalGoodsDay = stockSlipForReadRow.ArrivalGoodsDay; // 入荷日
                row.StockDate = DateTime.Today; // 仕入日
                row.StockAddUpADate = stockSlipForReadRow.StockAddUpADate; // 仕入計上日付
                row.DelayPaymentDiv = stockSlipForReadRow.DelayPaymentDiv; // 来勘区分
                row.PayeeCode = stockSlipForReadRow.PayeeCode; // 支払先コード
                row.PayeeSnm = stockSlipForReadRow.PayeeSnm; // 支払先略称
                row.SupplierCd = stockSlipForReadRow.SupplierCd; // 仕入先コード
                row.SupplierNm1 = stockSlipForReadRow.SupplierNm1; // 仕入先名1
                row.SupplierNm2 = stockSlipForReadRow.SupplierNm2; // 仕入先名2
                row.SupplierSnm = stockSlipForReadRow.SupplierSnm; // 仕入先略称
                row.BusinessTypeCode = stockSlipForReadRow.BusinessTypeCode; // 業種コード
                row.BusinessTypeName = stockSlipForReadRow.BusinessTypeName; // 業種名称
                row.SalesAreaCode = stockSlipForReadRow.SalesAreaCode; // 販売エリアコード
                row.SalesAreaName = stockSlipForReadRow.SalesAreaName; // 販売エリア名称
                row.StockInputCode = stockSlipForReadRow.StockInputCode; // 仕入入力者コード
                row.StockInputName = stockSlipForReadRow.StockInputName; // 仕入入力者名称
                row.StockAgentCode = stockSlipForReadRow.StockAgentCode; // 仕入担当者コード
                row.StockAgentName = stockSlipForReadRow.StockAgentName; // 仕入担当者名称
                // 得意先仕入情報マスタの仕入先総額表示方法参照区分が
                // ｢1:仕入先参照」の場合は得意先仕入情報マスタの「仕入先総額表示方法区分」を設定する
                // ｢0:全体設定参照」の場合は全体初期値設定マスタの「総額表示方法区分」を設定する
                row.SuppTtlAmntDspWayCd = (supplier.StckTtlAmntDspWayRef == 1) ? supplier.SuppTtlAmntDspWayCd : this._salesSlipInputInitDataAcs.GetAllDefSet().TotalAmountDispWayCd;
                row.TtlAmntDispRateApy = stockSlipForReadRow.TtlAmntDispRateApy; // 総額表示掛率適用区分
                row.StockTotalPrice = stockSlipForReadRow.StockTotalPrice; // 仕入金額合計
                row.StockSubttlPrice = stockSlipForReadRow.StockSubttlPrice; // 仕入金額小計
                row.StockTtlPricTaxInc = stockSlipForReadRow.StockTtlPricTaxInc; // 仕入金額計（税込み）
                row.StockTtlPricTaxExc = stockSlipForReadRow.StockTtlPricTaxExc; // 仕入金額計（税抜き）
                row.StockNetPrice = stockSlipForReadRow.StockNetPrice; // 仕入正価金額
                row.StockPriceConsTax = stockSlipForReadRow.StockPriceConsTax; // 仕入金額消費税額
                row.TtlItdedStcOutTax = stockSlipForReadRow.TtlItdedStcOutTax; // 仕入外税対象額合計
                row.TtlItdedStcInTax = stockSlipForReadRow.TtlItdedStcInTax; // 仕入内税対象額合計
                row.TtlItdedStcTaxFree = stockSlipForReadRow.TtlItdedStcTaxFree; // 仕入非課税対象額合計
                row.StockOutTax = stockSlipForReadRow.StockOutTax; // 仕入金額消費税額（外税）
                row.StckPrcConsTaxInclu = stockSlipForReadRow.StckPrcConsTaxInclu; // 仕入金額消費税額（内税）
                row.StckDisTtlTaxExc = stockSlipForReadRow.StckDisTtlTaxExc; // 仕入値引金額計（税抜き）
                row.ItdedStockDisOutTax = stockSlipForReadRow.ItdedStockDisOutTax; // 仕入値引外税対象額合計
                row.ItdedStockDisInTax = stockSlipForReadRow.ItdedStockDisInTax; // 仕入値引内税対象額合計
                row.ItdedStockDisTaxFre = stockSlipForReadRow.ItdedStockDisTaxFre; // 仕入値引非課税対象額合計
                row.StockDisOutTax = stockSlipForReadRow.StockDisOutTax; // 仕入値引消費税額（外税）
                row.StckDisTtlTaxInclu = stockSlipForReadRow.StckDisTtlTaxInclu; // 仕入値引消費税額（内税）
                row.TaxAdjust = stockSlipForReadRow.TaxAdjust; // 消費税調整額
                row.BalanceAdjust = stockSlipForReadRow.BalanceAdjust; // 残高調整額
                // 得意先仕入情報マスタの仕入先消費税転嫁方式参照区分が
                // 「1:仕入先参照」の場合は得意先仕入情報マスタの「仕入先消費税転嫁方式コード」を設定する
                // 「0:仕入在庫全体設定参照」の場合は仕入在庫全体設定マスタの「仕入先消費税転嫁方式コード」を設定する
                // ここ
                //row.SuppCTaxLayCd = (payeeSupplier.SuppCTaxLayRefCd == 1) ? payeeSupplier.SuppCTaxLayCd : this._salesSlipInputInitDataAcs.GetStockTtlSt().SuppCTaxLayCd; // 仕入先消費税転嫁方式コード
                row.SupplierConsTaxRate = this._salesSlipInputInitDataAcs.GetTaxRate(stockDetailForReadRow.OrderDataCreateDate); // 仕入先消費税税率
                row.AccPayConsTax = stockSlipForReadRow.AccPayConsTax; // 買掛消費税
                int stockFractionProcCd = this._supplierAcs.GetStockFractionProcCd(this._enterpriseCode, row.SupplierCd, SupplierAcs.StockFracProcMoneyDiv.CnsTaxFrcProcCd);
                int taxFracProcCd = 0;
                double taxFracProcUnit = 0;
                this._salesSlipInputInitDataAcs.GetSalesFractionProcInfo(SalesSlipInputInitDataAcs.ctFracProcMoneyDiv_Tax, stockFractionProcCd, 0, out taxFracProcUnit, out taxFracProcCd);
                row.StockFractionProcCd = taxFracProcCd; // 仕入端数処理区分
                row.AutoPayment = stockSlipForReadRow.AutoPayment; // 自動支払区分
                row.AutoPaySlipNum = stockSlipForReadRow.AutoPaySlipNum; // 自動支払伝票番号
                row.RetGoodsReasonDiv = stockSlipForReadRow.RetGoodsReasonDiv; // 返品理由コード
                row.RetGoodsReason = stockSlipForReadRow.RetGoodsReason; // 返品理由
                row.PartySaleSlipNum = stockSlipForReadRow.PartySaleSlipNum; // 相手先伝票番号
                row.SupplierSlipNote1 = stockSlipForReadRow.SupplierSlipNote1; // 仕入伝票備考1
                row.SupplierSlipNote2 = stockSlipForReadRow.SupplierSlipNote2; // 仕入伝票備考2
                row.DetailRowCount = stockSlipForReadRow.DetailRowCount; // 明細行数
                row.EdiSendDate = stockSlipForReadRow.EdiSendDate; // ＥＤＩ送信日
                row.EdiTakeInDate = stockSlipForReadRow.EdiTakeInDate; // ＥＤＩ取込日
                row.UoeRemark1 = stockSlipForReadRow.UoeRemark1; // ＵＯＥリマーク１
                row.UoeRemark2 = stockSlipForReadRow.UoeRemark2; // ＵＯＥリマーク２
                row.SlipPrintDivCd = stockSlipForReadRow.SlipPrintDivCd; // 伝票発行区分
                row.SlipPrintFinishCd = stockSlipForReadRow.SlipPrintFinishCd; // 伝票発行済区分
                row.StockSlipPrintDate = stockSlipForReadRow.StockSlipPrintDate; // 仕入伝票発行日
                row.SlipPrtSetPaperId = stockSlipForReadRow.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
                row.SlipAddressDiv = stockSlipForReadRow.SlipAddressDiv; // 伝票住所区分
                row.AddresseeCode = stockSlipForReadRow.AddresseeCode; // 納品先コード
                row.AddresseeName = stockSlipForReadRow.AddresseeName; // 納品先名称
                row.AddresseeName2 = stockSlipForReadRow.AddresseeName2; // 納品先名称2
                row.AddresseePostNo = stockSlipForReadRow.AddresseePostNo; // 納品先郵便番号
                row.AddresseeAddr1 = stockSlipForReadRow.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
                row.AddresseeAddr3 = stockSlipForReadRow.AddresseeAddr3; // 納品先住所3(番地)
                row.AddresseeAddr4 = stockSlipForReadRow.AddresseeAddr4; // 納品先住所4(アパート名称)
                row.AddresseeTelNo = stockSlipForReadRow.AddresseeTelNo; // 納品先電話番号
                row.AddresseeFaxNo = stockSlipForReadRow.AddresseeFaxNo; // 納品先FAX番号
                row.DirectSendingCd = stockSlipForReadRow.DirectSendingCd; // 直送区分

                row.AcceptAnOrderNo = stockDetailForReadRow.AcceptAnOrderNo; // 受注番号
                row.SupplierFormalDetail = stockDetailForReadRow.SupplierFormal; // 仕入形式
                row.SupplierSlipNoDetail = stockDetailForReadRow.SupplierSlipNo; // 仕入伝票番号
                row.StockRowNo = stockDetailForReadRow.StockRowNo; // 仕入行番号
                row.SectionCodeDetail = stockDetailForReadRow.SectionCode; // 拠点コード
                row.SubSectionCodeDetail = stockDetailForReadRow.SubSectionCode; // 部門コード
                row.CommonSeqNo = stockDetailForReadRow.CommonSeqNo; // 共通通番
                row.StockSlipDtlNum = stockDetailForReadRow.StockSlipDtlNum; // 仕入明細通番
                row.SupplierFormalSrc = stockDetailForReadRow.SupplierFormalSrc; // 仕入形式（元）
                row.StockSlipDtlNumSrc = stockDetailForReadRow.StockSlipDtlNumSrc; // 仕入明細通番（元）
                row.AcptAnOdrStatusSync = stockDetailForReadRow.AcptAnOdrStatusSync; // 受注ステータス（同時）
                row.SalesSlipDtlNumSync = stockDetailForReadRow.SalesSlipDtlNumSync; // 売上明細通番（同時）
                row.StockSlipCdDtl = stockDetailForReadRow.StockSlipCdDtl; // 仕入伝票区分（明細）
                row.StockInputCodeDetail = stockDetailForReadRow.StockInputCode; // 仕入入力者コード
                row.StockInputNameDetail = stockDetailForReadRow.StockInputName; // 仕入入力者名称
                row.StockAgentCodeDetail = stockDetailForReadRow.StockAgentCode; // 仕入担当者コード
                row.StockAgentNameDetail = stockDetailForReadRow.StockAgentName; // 仕入担当者名称
                row.GoodsKindCode = stockDetailForReadRow.GoodsKindCode; // 商品属性
                row.GoodsMakerCd = stockDetailForReadRow.GoodsMakerCd; // 商品メーカーコード
                row.MakerName = stockDetailForReadRow.MakerName; // メーカー名称
                row.MakerKanaName = stockDetailForReadRow.MakerKanaName; // メーカーカナ名称
                row.GoodsNo = stockDetailForReadRow.GoodsNo; // 商品番号
                row.GoodsName = stockDetailForReadRow.GoodsName; // 商品名称
                row.GoodsNameKana = stockDetailForReadRow.GoodsNameKana; // 商品名称カナ
                //row.GoodsShortName = stockDetailForReadRow.GoodsShortName; // 商品名略称
                row.GoodsLGroup = stockDetailForReadRow.GoodsLGroup; // 商品大分類コード
                row.GoodsLGroupName = stockDetailForReadRow.GoodsLGroupName; // 商品大分類名称
                row.GoodsMGroup = stockDetailForReadRow.GoodsMGroup; // 商品中分類コード
                row.GoodsMGroupName = stockDetailForReadRow.GoodsMGroupName; // 商品中分類名称
                row.BLGroupCode = stockDetailForReadRow.BLGroupCode; // BLグループコード
                row.BLGroupName = stockDetailForReadRow.BLGroupName; // BLグループコード名称
                row.BLGoodsCode = stockDetailForReadRow.BLGoodsCode; // BL商品コード
                row.BLGoodsFullName = stockDetailForReadRow.BLGoodsFullName; // BL商品コード名称（全角）
                row.EnterpriseGanreCode = stockDetailForReadRow.EnterpriseGanreCode; // 自社分類コード
                row.EnterpriseGanreName = stockDetailForReadRow.EnterpriseGanreName; // 自社分類名称
                row.WarehouseCode = stockDetailForReadRow.WarehouseCode; // 倉庫コード
                row.WarehouseName = stockDetailForReadRow.WarehouseName; // 倉庫名称
                row.WarehouseShelfNo = stockDetailForReadRow.WarehouseShelfNo; // 倉庫棚番
                row.StockOrderDivCd = stockDetailForReadRow.StockOrderDivCd; // 仕入在庫取寄せ区分
                row.OpenPriceDiv = stockDetailForReadRow.OpenPriceDiv; // オープン価格区分
                row.GoodsRateRank = stockDetailForReadRow.GoodsRateRank; // 商品掛率ランク
                row.CustRateGrpCode = stockDetailForReadRow.CustRateGrpCode; // 得意先掛率グループコード
                row.SuppRateGrpCode = stockDetailForReadRow.SuppRateGrpCode; // 仕入先掛率グループコード
                row.ListPriceTaxExcFl = stockDetailForReadRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
                row.ListPriceTaxIncFl = stockDetailForReadRow.ListPriceTaxIncFl; // 定価（税込，浮動）
                row.StockRate = stockDetailForReadRow.StockRate; // 仕入率
                row.RateSectStckUnPrc = stockDetailForReadRow.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
                row.RateDivStckUnPrc = stockDetailForReadRow.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
                row.UnPrcCalcCdStckUnPrc = stockDetailForReadRow.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
                row.PriceCdStckUnPrc = stockDetailForReadRow.PriceCdStckUnPrc; // 価格区分（仕入単価）
                row.StdUnPrcStckUnPrc = stockDetailForReadRow.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
                row.FracProcUnitStcUnPrc = stockDetailForReadRow.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
                row.FracProcStckUnPrc = stockDetailForReadRow.FracProcStckUnPrc; // 端数処理（仕入単価）
                row.StockUnitPriceFl = stockDetailForReadRow.StockUnitPriceFl; // 仕入単価（税抜，浮動）
                row.StockUnitTaxPriceFl = stockDetailForReadRow.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
                row.StockUnitChngDiv = stockDetailForReadRow.StockUnitChngDiv; // 仕入単価変更区分
                row.BfStockUnitPriceFl = stockDetailForReadRow.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
                row.BfListPrice = stockDetailForReadRow.BfListPrice; // 変更前定価
                row.RateBLGoodsCode = stockDetailForReadRow.RateBLGoodsCode; // BL商品コード（掛率）
                row.RateBLGoodsName = stockDetailForReadRow.RateBLGoodsName; // BL商品コード名称（掛率）
                row.RateGoodsRateGrpCd = stockDetailForReadRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
                row.RateGoodsRateGrpNm = stockDetailForReadRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
                row.RateBLGroupCode = stockDetailForReadRow.RateBLGroupCode; // BLグループコード（掛率）
                row.RateBLGroupName = stockDetailForReadRow.RateBLGroupName; // BLグループ名称（掛率）
                row.StockCount = stockDetailForReadRow.StockCount; // 仕入数
                row.OrderCnt = stockDetailForReadRow.OrderCnt; // 発注数量
                row.OrderAdjustCnt = stockDetailForReadRow.OrderAdjustCnt; // 発注調整数
                row.OrderRemainCnt = stockDetailForReadRow.OrderRemainCnt; // 発注残数
                row.RemainCntUpdDate = stockDetailForReadRow.RemainCntUpdDate; // 残数更新日
                row.StockPriceTaxExc = stockDetailForReadRow.StockPriceTaxExc; // 仕入金額（税抜き）
                row.StockPriceTaxInc = stockDetailForReadRow.StockPriceTaxInc; // 仕入金額（税込み）
                row.StockGoodsCdDetail = stockDetailForReadRow.StockGoodsCd; // 仕入商品区分
                row.StockPriceConsTaxDetail = stockDetailForReadRow.StockPriceConsTax; // 仕入金額消費税額
                row.TaxationCode = stockDetailForReadRow.TaxationCode; // 課税区分
                row.StockDtiSlipNote1 = stockDetailForReadRow.StockDtiSlipNote1; // 仕入伝票明細備考1
                row.SalesCustomerCode = stockDetailForReadRow.SalesCustomerCode; // 販売先コード
                row.SalesCustomerSnm = stockDetailForReadRow.SalesCustomerSnm; // 販売先略称
                row.SlipMemo1 = stockDetailForReadRow.SlipMemo1; // 伝票メモ１
                row.SlipMemo2 = stockDetailForReadRow.SlipMemo2; // 伝票メモ２
                row.SlipMemo3 = stockDetailForReadRow.SlipMemo3; // 伝票メモ３
                row.InsideMemo1 = stockDetailForReadRow.InsideMemo1; // 社内メモ１
                row.InsideMemo2 = stockDetailForReadRow.InsideMemo2; // 社内メモ２
                row.InsideMemo3 = stockDetailForReadRow.InsideMemo3; // 社内メモ３
                row.SupplierCdDetail = stockDetailForReadRow.SupplierCd; // 仕入先コード
                row.SupplierSnmDetail = stockDetailForReadRow.SupplierSnm; // 仕入先略称
                row.AddresseeCodeDetail = stockDetailForReadRow.AddresseeCode; // 納品先コード
                row.AddresseeNameDetail = stockDetailForReadRow.AddresseeName; // 納品先名称
                row.DirectSendingCdDetail = stockDetailForReadRow.DirectSendingCd; // 直送区分
                row.OrderNumber = stockDetailForReadRow.OrderNumber; // 発注番号
                row.WayToOrder = stockDetailForReadRow.WayToOrder; // 注文方法
                row.DeliGdsCmpltDueDate = stockDetailForReadRow.DeliGdsCmpltDueDate; // 納品完了予定日
                row.ExpectDeliveryDate = stockDetailForReadRow.ExpectDeliveryDate; // 希望納期
                row.OrderDataCreateDiv = stockDetailForReadRow.OrderDataCreateDiv; // 発注データ作成区分
                row.OrderDataCreateDate = stockDetailForReadRow.OrderDataCreateDate; // 発注データ作成日
                row.OrderFormIssuedDiv = stockDetailForReadRow.OrderFormIssuedDiv; // 発注書発行済区分
                //row.SupplierSlipDisplay = stockDetailForReadRow.SupplierSlipDisplay; // 仕入伝票区分(画面表示用)
                //row.TotalDay = stockDetailForReadRow.TotalDay; // 締日
                //row.NTimeCalcStDate = stockDetailForReadRow.NTimeCalcStDate; // 次回勘定開始日
                //row.PayeeName = stockDetailForReadRow.PayeeName; // 支払先名称
                //row.PayeeName2 = stockDetailForReadRow.PayeeName2; // 支払先名称２
                //row.AddUpEnableCnt = stockDetailForReadRow.AddUpEnableCnt; // 計上可能数量
                row.AddUpEnableCnt = stockDetailForReadRow.OrderRemainCnt; // 計上可能数量
                //row.AlreadyAddUpCnt = stockDetailForReadRow.AlreadyAddUpCnt; // 計上済数量
                row.EditStatus = stockDetailForReadRow.EditStatus; // エディットステータス
                row.DtlRelationGuid = stockDetailForReadRow.DtlRelationGuid; // 共通キー
                #endregion
            }
        }
        #endregion

        #region 仕入明細データテーブル → 仕入明細ワークオブジェクト
        /// <summary>
        /// 仕入明細行オブジェクトから仕入明細ワークオブジェクトに項目を設定します。（発注削除用）
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        private StockDetailWork SetStockDetailWorkFromRow(SalesInputDataSet.StockDetailForReadRow row)
        {
            StockDetailWork stockDetailWork = new StockDetailWork();

            //stockDetailWork.CreateDateTime = row.CreateDateTime; // 作成日時
            //stockDetailWork.UpdateDateTime = row.UpdateDateTime; // 更新日時
            //stockDetailWork.EnterpriseCode = row.EnterpriseCode; // 企業コード
            //stockDetailWork.FileHeaderGuid = row.FileHeaderGuid; // GUID
            //stockDetailWork.UpdEmployeeCode = row.UpdEmployeeCode; // 更新従業員コード
            //stockDetailWork.UpdAssemblyId1 = row.UpdAssemblyId1; // 更新アセンブリID1
            //stockDetailWork.UpdAssemblyId2 = row.UpdAssemblyId2; // 更新アセンブリID2
            //stockDetailWork.LogicalDeleteCode = row.LogicalDeleteCode; // 論理削除区分
            stockDetailWork.AcceptAnOrderNo = row.AcceptAnOrderNo; // 受注番号
            stockDetailWork.SupplierFormal = row.SupplierFormal; // 仕入形式
            stockDetailWork.SupplierSlipNo = row.SupplierSlipNo; // 仕入伝票番号
            stockDetailWork.StockRowNo = row.StockRowNo; // 仕入行番号
            stockDetailWork.SectionCode = row.SectionCode; // 拠点コード
            stockDetailWork.SubSectionCode = row.SubSectionCode; // 部門コード
            stockDetailWork.CommonSeqNo = row.CommonSeqNo; // 共通通番
            stockDetailWork.StockSlipDtlNum = row.StockSlipDtlNum; // 仕入明細通番
            stockDetailWork.SupplierFormalSrc = row.SupplierFormalSrc; // 仕入形式（元）
            stockDetailWork.StockSlipDtlNumSrc = row.StockSlipDtlNumSrc; // 仕入明細通番（元）
            stockDetailWork.AcptAnOdrStatusSync = row.AcptAnOdrStatusSync; // 受注ステータス（同時）
            stockDetailWork.SalesSlipDtlNumSync = row.SalesSlipDtlNumSync; // 売上明細通番（同時）
            stockDetailWork.StockSlipCdDtl = row.StockSlipCdDtl; // 仕入伝票区分（明細）
            stockDetailWork.StockInputCode = row.StockInputCode; // 仕入入力者コード
            stockDetailWork.StockInputName = row.StockInputName; // 仕入入力者名称
            stockDetailWork.StockAgentCode = row.StockAgentCode; // 仕入担当者コード
            stockDetailWork.StockAgentName = row.StockAgentName; // 仕入担当者名称
            stockDetailWork.GoodsKindCode = row.GoodsKindCode; // 商品属性
            stockDetailWork.GoodsMakerCd = row.GoodsMakerCd; // 商品メーカーコード
            stockDetailWork.MakerName = row.MakerName; // メーカー名称
            stockDetailWork.MakerKanaName = row.MakerKanaName; // メーカーカナ名称
            stockDetailWork.CmpltMakerKanaName = row.CmpltMakerKanaName; // メーカーカナ名称（一式）
            stockDetailWork.GoodsNo = row.GoodsNo; // 商品番号
            stockDetailWork.GoodsName = row.GoodsName; // 商品名称
            stockDetailWork.GoodsNameKana = row.GoodsNameKana; // 商品名称カナ
            stockDetailWork.GoodsLGroup = row.GoodsLGroup; // 商品大分類コード
            stockDetailWork.GoodsLGroupName = row.GoodsLGroupName; // 商品大分類名称
            stockDetailWork.GoodsMGroup = row.GoodsMGroup; // 商品中分類コード
            stockDetailWork.GoodsMGroupName = row.GoodsMGroupName; // 商品中分類名称
            stockDetailWork.BLGroupCode = row.BLGroupCode; // BLグループコード
            stockDetailWork.BLGroupName = row.BLGroupName; // BLグループコード名称
            stockDetailWork.BLGoodsCode = row.BLGoodsCode; // BL商品コード
            stockDetailWork.BLGoodsFullName = row.BLGoodsFullName; // BL商品コード名称（全角）
            stockDetailWork.EnterpriseGanreCode = row.EnterpriseGanreCode; // 自社分類コード
            stockDetailWork.EnterpriseGanreName = row.EnterpriseGanreName; // 自社分類名称
            stockDetailWork.WarehouseCode = row.WarehouseCode; // 倉庫コード
            stockDetailWork.WarehouseName = row.WarehouseName; // 倉庫名称
            stockDetailWork.WarehouseShelfNo = row.WarehouseShelfNo; // 倉庫棚番
            stockDetailWork.StockOrderDivCd = row.StockOrderDivCd; // 仕入在庫取寄せ区分
            stockDetailWork.OpenPriceDiv = row.OpenPriceDiv; // オープン価格区分
            stockDetailWork.GoodsRateRank = row.GoodsRateRank; // 商品掛率ランク
            stockDetailWork.CustRateGrpCode = row.CustRateGrpCode; // 得意先掛率グループコード
            stockDetailWork.SuppRateGrpCode = row.SuppRateGrpCode; // 仕入先掛率グループコード
            stockDetailWork.ListPriceTaxExcFl = row.ListPriceTaxExcFl; // 定価（税抜，浮動）
            stockDetailWork.ListPriceTaxIncFl = row.ListPriceTaxIncFl; // 定価（税込，浮動）
            stockDetailWork.StockRate = row.StockRate; // 仕入率
            stockDetailWork.RateSectStckUnPrc = row.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
            stockDetailWork.RateDivStckUnPrc = row.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
            stockDetailWork.UnPrcCalcCdStckUnPrc = row.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
            stockDetailWork.PriceCdStckUnPrc = row.PriceCdStckUnPrc; // 価格区分（仕入単価）
            stockDetailWork.StdUnPrcStckUnPrc = row.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
            stockDetailWork.FracProcUnitStcUnPrc = row.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
            stockDetailWork.FracProcStckUnPrc = row.FracProcStckUnPrc; // 端数処理（仕入単価）
            stockDetailWork.StockUnitPriceFl = row.StockUnitPriceFl; // 仕入単価（税抜，浮動）
            stockDetailWork.StockUnitTaxPriceFl = row.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
            stockDetailWork.StockUnitChngDiv = row.StockUnitChngDiv; // 仕入単価変更区分
            stockDetailWork.BfStockUnitPriceFl = row.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
            stockDetailWork.BfListPrice = row.BfListPrice; // 変更前定価
            stockDetailWork.RateBLGoodsCode = row.RateBLGoodsCode; // BL商品コード（掛率）
            stockDetailWork.RateBLGoodsName = row.RateBLGoodsName; // BL商品コード名称（掛率）
            stockDetailWork.RateGoodsRateGrpCd = row.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            stockDetailWork.RateGoodsRateGrpNm = row.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            stockDetailWork.RateBLGroupCode = row.RateBLGroupCode; // BLグループコード（掛率）
            stockDetailWork.RateBLGroupName = row.RateBLGroupName; // BLグループ名称（掛率）
            stockDetailWork.StockCount = row.StockCount; // 仕入数
            stockDetailWork.OrderCnt = row.OrderCnt; // 発注数量
            stockDetailWork.OrderAdjustCnt = row.OrderAdjustCnt; // 発注調整数
            stockDetailWork.OrderRemainCnt = row.OrderRemainCnt; // 発注残数
            stockDetailWork.RemainCntUpdDate = row.RemainCntUpdDate; // 残数更新日
            stockDetailWork.StockPriceTaxExc = row.StockPriceTaxExc; // 仕入金額（税抜き）
            stockDetailWork.StockPriceTaxInc = row.StockPriceTaxInc; // 仕入金額（税込み）
            stockDetailWork.StockGoodsCd = row.StockGoodsCd; // 仕入商品区分
            stockDetailWork.StockPriceConsTax = row.StockPriceConsTax; // 仕入金額消費税額
            stockDetailWork.TaxationCode = row.TaxationCode; // 課税区分
            stockDetailWork.StockDtiSlipNote1 = row.StockDtiSlipNote1; // 仕入伝票明細備考1
            stockDetailWork.SalesCustomerCode = row.SalesCustomerCode; // 販売先コード
            stockDetailWork.SalesCustomerSnm = row.SalesCustomerSnm; // 販売先略称
            stockDetailWork.SlipMemo1 = row.SlipMemo1; // 伝票メモ１
            stockDetailWork.SlipMemo2 = row.SlipMemo2; // 伝票メモ２
            stockDetailWork.SlipMemo3 = row.SlipMemo3; // 伝票メモ３
            stockDetailWork.InsideMemo1 = row.InsideMemo1; // 社内メモ１
            stockDetailWork.InsideMemo2 = row.InsideMemo2; // 社内メモ２
            stockDetailWork.InsideMemo3 = row.InsideMemo3; // 社内メモ３
            stockDetailWork.SupplierCd = row.SupplierCd; // 仕入先コード
            stockDetailWork.SupplierSnm = row.SupplierSnm; // 仕入先略称
            stockDetailWork.AddresseeCode = row.AddresseeCode; // 納品先コード
            stockDetailWork.AddresseeName = row.AddresseeName; // 納品先名称
            stockDetailWork.DirectSendingCd = row.DirectSendingCd; // 直送区分
            stockDetailWork.OrderNumber = row.OrderNumber; // 発注番号
            stockDetailWork.WayToOrder = row.WayToOrder; // 注文方法
            stockDetailWork.DeliGdsCmpltDueDate = row.DeliGdsCmpltDueDate; // 納品完了予定日
            stockDetailWork.ExpectDeliveryDate = row.ExpectDeliveryDate; // 希望納期
            stockDetailWork.OrderDataCreateDiv = row.OrderDataCreateDiv; // 発注データ作成区分
            stockDetailWork.OrderDataCreateDate = row.OrderDataCreateDate; // 発注データ作成日
            stockDetailWork.OrderFormIssuedDiv = row.OrderFormIssuedDiv; // 発注書発行済区分
            stockDetailWork.DtlRelationGuid = row.DtlRelationGuid; // 共通キー

            return stockDetailWork;
        }
        #endregion

        #region 計上元仕入明細データワークオブジェクトリスト → 計上元仕入明細データテーブル
        /// <summary>
        /// 計上元仕入明細データワークオブジェクトリストを計上元仕入明細データテーブルにキャッシュします。
        /// </summary>
        /// <param name="addUppOrgStockDetailList">計上元仕入明細データワークオブジェクトリスト</param>
        private void CacheAddUppOrgStockDetail(List<AddUpOrgStockDetailWork> addUppOrgStockDetailList)
        {
            if (addUppOrgStockDetailList != null)
            {
                foreach (AddUpOrgStockDetailWork addUpOrgStockDetailWork in addUppOrgStockDetailList)
                {
                    this.CacheAddUpOrgStockDetailDataTable(addUpOrgStockDetailWork, this._addUpOrgStockDetailDataTable);
                }
            }
        }

        /// <summary>
        /// 計上元仕入明細データワークオブジェクトを計上元仕入明細データテーブルにキャッシュします。
        /// </summary>
        /// <param name="addUpOrgStockDetailWork">計上元仕入明細データワークオブジェクト</param>
        /// <param name="addUpOrgStockDetailDataTable">計上元仕入明細データテーブル</param>
        private void CacheAddUpOrgStockDetailDataTable(AddUpOrgStockDetailWork addUpOrgStockDetailWork, SalesInputDataSet.AddUpOrgStockDetailDataTable addUpOrgStockDetailDataTable)
        {
            try
            {
                addUpOrgStockDetailDataTable.AddAddUpOrgStockDetailRow(this.CreateRowFromUIData(addUpOrgStockDetailWork, addUpOrgStockDetailDataTable));
            }
            catch (ConstraintException)
            {
                SalesInputDataSet.AddUpOrgStockDetailRow row = addUpOrgStockDetailDataTable.FindBySupplierSlipNoStockSlipDtlNum(addUpOrgStockDetailWork.SupplierSlipNo, addUpOrgStockDetailWork.StockSlipDtlNum);
                this.SetRowFromUIData(ref row, addUpOrgStockDetailWork);
            }
        }

        /// <summary>
        /// 指定した計上元仕入明細データワークオブジェクトを元に計上元仕入明細データテーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="addUpOrgStockDetailWork">計上元仕入データワークオブジェクト</param>
        /// <param name="addUpOrgStockDetailDataTable">計上元仕入明細データテーブル</param>
        /// <returns>計上元仕入明細データ行オブジェクト</returns>
        private SalesInputDataSet.AddUpOrgStockDetailRow CreateRowFromUIData(AddUpOrgStockDetailWork addUpOrgStockDetailWork, SalesInputDataSet.AddUpOrgStockDetailDataTable addUpOrgStockDetailDataTable)
        {

            SalesInputDataSet.AddUpOrgStockDetailRow row = addUpOrgStockDetailDataTable.NewAddUpOrgStockDetailRow();

            this.SetRowFromUIData(ref row, addUpOrgStockDetailWork);
            return row;
        }

        /// <summary>
        /// 計上元仕入明細データワークオブジェクトから計上元仕入明細データ行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="row">計上元仕入明細データ行オブジェクト</param>
        /// <param name="stockDetailWork">計上元仕入明細データワークオブジェクト</param>
        private void SetRowFromUIData(ref SalesInputDataSet.AddUpOrgStockDetailRow row, AddUpOrgStockDetailWork addUpOrgStockDetailWork)
        {
            row.AcceptAnOrderNo = addUpOrgStockDetailWork.AcceptAnOrderNo; // 受注番号
            row.SupplierFormal = addUpOrgStockDetailWork.SupplierFormal; // 仕入形式
            row.SupplierSlipNo = addUpOrgStockDetailWork.SupplierSlipNo; // 仕入伝票番号
            row.StockRowNo = addUpOrgStockDetailWork.StockRowNo; // 仕入行番号
            row.SectionCode = addUpOrgStockDetailWork.SectionCode; // 拠点コード
            row.SubSectionCode = addUpOrgStockDetailWork.SubSectionCode; // 部門コード
            row.CommonSeqNo = addUpOrgStockDetailWork.CommonSeqNo; // 共通通番
            row.StockSlipDtlNum = addUpOrgStockDetailWork.StockSlipDtlNum; // 仕入明細通番
            row.SupplierFormalSrc = addUpOrgStockDetailWork.SupplierFormalSrc; // 仕入形式（元）
            row.StockSlipDtlNumSrc = addUpOrgStockDetailWork.StockSlipDtlNumSrc; // 仕入明細通番（元）
            row.AcptAnOdrStatusSync = addUpOrgStockDetailWork.AcptAnOdrStatusSync; // 受注ステータス（同時）
            row.SalesSlipDtlNumSync = addUpOrgStockDetailWork.SalesSlipDtlNumSync; // 売上明細通番（同時）
            row.StockSlipCdDtl = addUpOrgStockDetailWork.StockSlipCdDtl; // 仕入伝票区分（明細）
            row.StockInputCode = addUpOrgStockDetailWork.StockInputCode; // 仕入入力者コード
            row.StockInputName = addUpOrgStockDetailWork.StockInputName; // 仕入入力者名称
            row.StockAgentCode = addUpOrgStockDetailWork.StockAgentCode; // 仕入担当者コード
            row.StockAgentName = addUpOrgStockDetailWork.StockAgentName; // 仕入担当者名称
            row.GoodsKindCode = addUpOrgStockDetailWork.GoodsKindCode; // 商品属性
            row.GoodsMakerCd = addUpOrgStockDetailWork.GoodsMakerCd; // 商品メーカーコード
            row.MakerName = addUpOrgStockDetailWork.MakerName; // メーカー名称
            row.MakerKanaName = addUpOrgStockDetailWork.MakerKanaName; // メーカーカナ名称
            row.GoodsNo = addUpOrgStockDetailWork.GoodsNo; // 商品番号
            row.GoodsName = addUpOrgStockDetailWork.GoodsName; // 商品名称
            row.GoodsNameKana = addUpOrgStockDetailWork.GoodsNameKana; // 商品カナ名称
            //row.GoodsShortName = addUppOrgStockDetailWork.GoodsShortName; // 商品名略称
            row.GoodsLGroup = addUpOrgStockDetailWork.GoodsLGroup; // 商品大分類コード
            row.GoodsLGroupName = addUpOrgStockDetailWork.GoodsLGroupName; // 商品大分類名称
            row.GoodsMGroup = addUpOrgStockDetailWork.GoodsMGroup; // 商品中分類コード
            row.GoodsMGroupName = addUpOrgStockDetailWork.GoodsMGroupName; // 商品中分類名称
            row.BLGroupCode = addUpOrgStockDetailWork.BLGroupCode; // BLグループコード
            row.BLGroupName = addUpOrgStockDetailWork.BLGroupName; // BLグループコード名称
            row.BLGoodsCode = addUpOrgStockDetailWork.BLGoodsCode; // BL商品コード
            row.BLGoodsFullName = addUpOrgStockDetailWork.BLGoodsFullName; // BL商品コード名称（全角）
            row.EnterpriseGanreCode = addUpOrgStockDetailWork.EnterpriseGanreCode; // 自社分類コード
            row.EnterpriseGanreName = addUpOrgStockDetailWork.EnterpriseGanreName; // 自社分類名称
            row.WarehouseCode = addUpOrgStockDetailWork.WarehouseCode; // 倉庫コード
            row.WarehouseName = addUpOrgStockDetailWork.WarehouseName; // 倉庫名称
            row.WarehouseShelfNo = addUpOrgStockDetailWork.WarehouseShelfNo; // 倉庫棚番
            row.StockOrderDivCd = addUpOrgStockDetailWork.StockOrderDivCd; // 仕入在庫取寄せ区分
            row.OpenPriceDiv = addUpOrgStockDetailWork.OpenPriceDiv; // オープン価格区分
            row.GoodsRateRank = addUpOrgStockDetailWork.GoodsRateRank; // 商品掛率ランク
            row.CustRateGrpCode = addUpOrgStockDetailWork.CustRateGrpCode; // 得意先掛率グループコード
            row.SuppRateGrpCode = addUpOrgStockDetailWork.SuppRateGrpCode; // 仕入先掛率グループコード
            row.ListPriceTaxExcFl = addUpOrgStockDetailWork.ListPriceTaxExcFl; // 定価（税抜，浮動）
            row.ListPriceTaxIncFl = addUpOrgStockDetailWork.ListPriceTaxIncFl; // 定価（税込，浮動）
            row.StockRate = addUpOrgStockDetailWork.StockRate; // 仕入率
            row.RateSectStckUnPrc = addUpOrgStockDetailWork.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
            row.RateDivStckUnPrc = addUpOrgStockDetailWork.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
            row.UnPrcCalcCdStckUnPrc = addUpOrgStockDetailWork.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
            row.PriceCdStckUnPrc = addUpOrgStockDetailWork.PriceCdStckUnPrc; // 価格区分（仕入単価）
            row.StdUnPrcStckUnPrc = addUpOrgStockDetailWork.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
            row.FracProcUnitStcUnPrc = addUpOrgStockDetailWork.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
            row.FracProcStckUnPrc = addUpOrgStockDetailWork.FracProcStckUnPrc; // 端数処理（仕入単価）
            row.StockUnitPriceFl = addUpOrgStockDetailWork.StockUnitPriceFl; // 仕入単価（税抜，浮動）
            row.StockUnitTaxPriceFl = addUpOrgStockDetailWork.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
            row.StockUnitChngDiv = addUpOrgStockDetailWork.StockUnitChngDiv; // 仕入単価変更区分
            row.BfStockUnitPriceFl = addUpOrgStockDetailWork.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
            row.BfListPrice = addUpOrgStockDetailWork.BfListPrice; // 変更前定価
            row.RateBLGoodsCode = addUpOrgStockDetailWork.RateBLGoodsCode; // BL商品コード（掛率）
            row.RateBLGoodsName = addUpOrgStockDetailWork.RateBLGoodsName; // BL商品コード名称（掛率）
            row.RateGoodsRateGrpCd = addUpOrgStockDetailWork.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            row.RateGoodsRateGrpNm = addUpOrgStockDetailWork.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            row.RateBLGroupCode = addUpOrgStockDetailWork.RateBLGroupCode; // BLグループコード（掛率）
            row.RateBLGroupName = addUpOrgStockDetailWork.RateBLGroupName; // BLグループ名称（掛率）
            row.StockCount = addUpOrgStockDetailWork.StockCount; // 仕入数
            row.OrderCnt = addUpOrgStockDetailWork.OrderCnt; // 発注数量
            row.OrderAdjustCnt = addUpOrgStockDetailWork.OrderAdjustCnt; // 発注調整数
            row.OrderRemainCnt = addUpOrgStockDetailWork.OrderRemainCnt; // 発注残数
            row.RemainCntUpdDate = addUpOrgStockDetailWork.RemainCntUpdDate; // 残数更新日
            row.StockPriceTaxExc = addUpOrgStockDetailWork.StockPriceTaxExc; // 仕入金額（税抜き）
            row.StockPriceTaxInc = addUpOrgStockDetailWork.StockPriceTaxInc; // 仕入金額（税込み）
            row.StockGoodsCd = addUpOrgStockDetailWork.StockGoodsCd; // 仕入商品区分
            row.StockPriceConsTax = addUpOrgStockDetailWork.StockPriceConsTax; // 仕入金額消費税額
            row.TaxationCode = addUpOrgStockDetailWork.TaxationCode; // 課税区分
            row.StockDtiSlipNote1 = addUpOrgStockDetailWork.StockDtiSlipNote1; // 仕入伝票明細備考1
            row.SalesCustomerCode = addUpOrgStockDetailWork.SalesCustomerCode; // 販売先コード
            row.SalesCustomerSnm = addUpOrgStockDetailWork.SalesCustomerSnm; // 販売先略称
            row.SlipMemo1 = addUpOrgStockDetailWork.SlipMemo1; // 伝票メモ１
            row.SlipMemo2 = addUpOrgStockDetailWork.SlipMemo2; // 伝票メモ２
            row.SlipMemo3 = addUpOrgStockDetailWork.SlipMemo3; // 伝票メモ３
            row.InsideMemo1 = addUpOrgStockDetailWork.InsideMemo1; // 社内メモ１
            row.InsideMemo2 = addUpOrgStockDetailWork.InsideMemo2; // 社内メモ２
            row.InsideMemo3 = addUpOrgStockDetailWork.InsideMemo3; // 社内メモ３
            row.SupplierCd = addUpOrgStockDetailWork.SupplierCd; // 仕入先コード
            row.SupplierSnm = addUpOrgStockDetailWork.SupplierSnm; // 仕入先略称
            row.AddresseeCode = addUpOrgStockDetailWork.AddresseeCode; // 納品先コード
            row.AddresseeName = addUpOrgStockDetailWork.AddresseeName; // 納品先名称
            row.DirectSendingCd = addUpOrgStockDetailWork.DirectSendingCd; // 直送区分
            row.OrderNumber = addUpOrgStockDetailWork.OrderNumber; // 発注番号
            row.WayToOrder = addUpOrgStockDetailWork.WayToOrder; // 注文方法
            row.DeliGdsCmpltDueDate = addUpOrgStockDetailWork.DeliGdsCmpltDueDate; // 納品完了予定日
            row.ExpectDeliveryDate = addUpOrgStockDetailWork.ExpectDeliveryDate; // 希望納期
            row.OrderDataCreateDiv = addUpOrgStockDetailWork.OrderDataCreateDiv; // 発注データ作成区分
            row.OrderDataCreateDate = addUpOrgStockDetailWork.OrderDataCreateDate; // 発注データ作成日
            row.OrderFormIssuedDiv = addUpOrgStockDetailWork.OrderFormIssuedDiv; // 発注書発行済区分

            DataRow[] dataRows = row.GetChildRows("AddUpOrgStockDetail_StockTemp");
            if ((dataRows != null) && (dataRows.Length > 0))
            {
                foreach (SalesInputDataSet.StockTempRow stockTempRow in dataRows)
                {
                    row.DtlRelationGuid = stockTempRow.DtlRelationGuid;
                    break;
                }
            }
            else
            {
                row.DtlRelationGuid = Guid.Empty;
            }
        }
        #endregion

        #region 売上明細テーブル→仕入情報テーブル
        /// <summary>
        /// 売上明細データテーブル→仕入明細データテーブルへ項目設定を行います。（オーバーロード）
        /// </summary>
        public void SettingStockTempFromSalesDetail()
        {
            this.SettingStockTempFromSalesDetail(this.StockTempDataTable, this._salesSlip, this._salesDetailDataTable);
        }

        /// <summary>
        /// 売上明細データテーブル→仕入明細データテーブルへ項目設定を行います。（オーバーロード）
        /// </summary>
        /// <param name="stockTempDataTable"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailDataTable"></param>
        /// <remarks>
        /// <br>Update Note : 2021/09/23 陳艶丹</br>
        /// <br>管理番号    : 11601223-00</br>
        /// <br>            : BLINCIDENT-3014 貸出計上時に仕入先が空白になるの対応</br>
        /// </remarks>
        private void SettingStockTempFromSalesDetail(SalesInputDataSet.StockTempDataTable stockTempDataTable, SalesSlip salesSlip, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in salesDetailDataTable)
            {
                if ((!this.ExistSalesDetailStockInfo(salesDetailRow)) &&
                    (salesDetailRow.AcceptAnOrderCntDisplay == 0))
                {
                    continue;
                }
                // --- DEL 2014/10/27 Y.Wakita ---------->>>>>
                //// ------------------- ADD BY zhujw FOR 在庫品なのにも関わらず、売仕入同時入力が起動し、仕入データが作成されたの修正 2014/08/27 ----- >>>>>
                //if (!string.IsNullOrEmpty(salesDetailRow.WarehouseCode))                
                //{                    
                //    salesDetailRow.PartySalesSlipNum = string.Empty;                    
                //    salesDetailRow.StockDate = DateTime.MinValue;                    
                //    salesDetailRow.SupplierCdForStock = 0;                
                //}
                //// ------------------- ADD BY zhujw FOR 在庫品なのにも関わらず、売仕入同時入力が起動し、仕入データが作成されたの修正 2014/08/27 ----- <<<<<
                // --- DEL 2014/10/27 Y.Wakita ----------<<<<<

                SalesInputDataSet.StockTempRow stockTempRow = stockTempDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);

                if (stockTempRow != null)
                {
                    // --- ADD 2014/10/27 Y.Wakita ---------->>>>>
                    if ((!string.IsNullOrEmpty(salesDetailRow.WarehouseCode)) &&
                        (stockTempRow.SupplierFormal != (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order))
                    {
                        // ADD 2021/09/23 陳艶丹 BLINCIDENT-3014 貸出計上時に仕入先が空白になるの対応
                        if (salesSlip.AcptAnOdrStatus != (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment)
                        {
                            // ADD 2021/09/23 陳艶丹 BLINCIDENT-3014 貸出計上時に仕入先が空白になるの対応
                        salesDetailRow.PartySalesSlipNum = string.Empty;
                        salesDetailRow.StockDate = DateTime.MinValue;
                        salesDetailRow.SupplierCdForStock = 0;
                        }// ADD 2021/09/23 陳艶丹 BLINCIDENT-3014
                    }
                    // --- ADD 2014/10/27 Y.Wakita ----------<<<<<

                    this.SettingStockTempFromSalesDetail(ref stockTempRow, salesSlip, salesDetailRow);
                }
            }
        }

        /// <summary>
        /// 売上明細データ行オブジェクト→仕入明細データ行オブジェクトへ項目設定を行います。（オーバーロード）
        /// </summary>
        /// <param name="stockTempRow"></param>
        /// <param name="salesDetailDataTable"></param>
        private void SettingStockTempFromSalesDetail(ref SalesInputDataSet.StockTempRow stockTempRow, SalesSlip salesSlip, SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            // 仕入情報更新
            StockTemp stockTemp = new StockTemp();
            this.CopyCompleteStockTempRow(stockTempRow, ref stockTemp);
            this.StockTempDefaultSettingBeforeSave(salesDetailRow, ref stockTemp);
            this._salesSlipStockInfoInputAcs.CalculationStockPrice(ref stockTemp);
            this.CopyCompleteStockTempRow(stockTemp, ref stockTempRow);

            stockTempRow.AcptAnOdrStatusSync = salesSlip.AcptAnOdrStatus;
            if (stockTempRow.SupplierFormal != (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order)
            {
                stockTempRow.WarehouseCode = salesDetailRow.WarehouseCode;
                stockTempRow.WarehouseName = salesDetailRow.WarehouseName;
                stockTempRow.WarehouseShelfNo = salesDetailRow.WarehouseShelfNo;
                stockTempRow.StockOrderDivCd = (!string.IsNullOrEmpty(stockTempRow.WarehouseCode)) ? 1 : 0; // 1:在庫 0:取寄
            }
            else
            {
                stockTempRow.WarehouseCode = string.Empty;
                stockTempRow.WarehouseName = string.Empty;
                stockTempRow.WarehouseShelfNo = string.Empty;
                stockTempRow.StockOrderDivCd = 0; // 1:在庫 0:取寄
            }

        }
        #endregion

        #region 仕入情報コピー
        /// <summary>
        /// 仕入情報行オブジェクトのコピーを行います。
        /// </summary>
        /// <param name="sourceRow">コピー元仕入情報オブジェクト</param>
        /// <param name="targetRow">コピー元仕入情報行オブジェクト</param>
        private void CopyCompleteStockTempRow(StockTemp sourceRow, ref SalesInputDataSet.StockTempRow targetRow)
        {
            targetRow.CreateDateTime = sourceRow.CreateDateTime; // 作成日時
            targetRow.UpdateDateTime = sourceRow.UpdateDateTime; // 更新日時
            targetRow.EnterpriseCode = sourceRow.EnterpriseCode; // 企業コード
            targetRow.FileHeaderGuid = sourceRow.FileHeaderGuid; // GUID
            targetRow.UpdEmployeeCode = sourceRow.UpdEmployeeCode; // 更新従業員コード
            targetRow.UpdAssemblyId1 = sourceRow.UpdAssemblyId1; // 更新アセンブリID1
            targetRow.UpdAssemblyId2 = sourceRow.UpdAssemblyId2; // 更新アセンブリID2
            targetRow.LogicalDeleteCode = sourceRow.LogicalDeleteCode; // 論理削除区分
            targetRow.SupplierFormal = sourceRow.SupplierFormal; // 仕入形式
            targetRow.SupplierSlipNo = sourceRow.SupplierSlipNo; // 仕入伝票番号
            targetRow.SectionCode = sourceRow.SectionCode; // 拠点コード
            targetRow.SubSectionCode = sourceRow.SubSectionCode; // 部門コード
            targetRow.DebitNoteDiv = sourceRow.DebitNoteDiv; // 赤伝区分
            targetRow.DebitNLnkSuppSlipNo = sourceRow.DebitNLnkSuppSlipNo; // 赤黒連結仕入伝票番号
            targetRow.SupplierSlipCd = sourceRow.SupplierSlipCd; // 仕入伝票区分
            targetRow.StockGoodsCd = sourceRow.StockGoodsCd; // 仕入商品区分
            targetRow.AccPayDivCd = sourceRow.AccPayDivCd; // 買掛区分
            targetRow.StockSectionCd = sourceRow.StockSectionCd; // 仕入拠点コード
            targetRow.StockAddUpSectionCd = sourceRow.StockAddUpSectionCd; // 仕入計上拠点コード
            targetRow.StockSlipUpdateCd = sourceRow.StockSlipUpdateCd; // 仕入伝票更新区分
            targetRow.InputDay = sourceRow.InputDay; // 入力日
            targetRow.ArrivalGoodsDay = sourceRow.ArrivalGoodsDay; // 入荷日
            targetRow.StockDate = sourceRow.StockDate; // 仕入日
            targetRow.StockAddUpADate = sourceRow.StockAddUpADate; // 仕入計上日付
            targetRow.DelayPaymentDiv = sourceRow.DelayPaymentDiv; // 来勘区分
            targetRow.PayeeCode = sourceRow.PayeeCode; // 支払先コード
            targetRow.PayeeSnm = sourceRow.PayeeSnm; // 支払先略称
            targetRow.SupplierCd = sourceRow.SupplierCd; // 仕入先コード
            targetRow.SupplierNm1 = sourceRow.SupplierNm1; // 仕入先名1
            targetRow.SupplierNm2 = sourceRow.SupplierNm2; // 仕入先名2
            targetRow.SupplierSnm = sourceRow.SupplierSnm; // 仕入先略称
            targetRow.BusinessTypeCode = sourceRow.BusinessTypeCode; // 業種コード
            targetRow.BusinessTypeName = sourceRow.BusinessTypeName; // 業種名称
            targetRow.SalesAreaCode = sourceRow.SalesAreaCode; // 販売エリアコード
            targetRow.SalesAreaName = sourceRow.SalesAreaName; // 販売エリア名称
            targetRow.StockInputCode = sourceRow.StockInputCode; // 仕入入力者コード
            targetRow.StockInputName = sourceRow.StockInputName; // 仕入入力者名称
            targetRow.StockAgentCode = sourceRow.StockAgentCode; // 仕入担当者コード
            targetRow.StockAgentName = sourceRow.StockAgentName; // 仕入担当者名称
            targetRow.SuppTtlAmntDspWayCd = sourceRow.SuppTtlAmntDspWayCd; // 仕入先総額表示方法区分
            targetRow.TtlAmntDispRateApy = sourceRow.TtlAmntDispRateApy; // 総額表示掛率適用区分
            targetRow.StockTotalPrice = sourceRow.StockTotalPrice; // 仕入金額合計
            targetRow.StockSubttlPrice = sourceRow.StockSubttlPrice; // 仕入金額小計
            targetRow.StockTtlPricTaxInc = sourceRow.StockTtlPricTaxInc; // 仕入金額計（税込み）
            targetRow.StockTtlPricTaxExc = sourceRow.StockTtlPricTaxExc; // 仕入金額計（税抜き）
            targetRow.StockNetPrice = sourceRow.StockNetPrice; // 仕入正価金額
            targetRow.StockPriceConsTax = sourceRow.StockPriceConsTax; // 仕入金額消費税額
            targetRow.TtlItdedStcOutTax = sourceRow.TtlItdedStcOutTax; // 仕入外税対象額合計
            targetRow.TtlItdedStcInTax = sourceRow.TtlItdedStcInTax; // 仕入内税対象額合計
            targetRow.TtlItdedStcTaxFree = sourceRow.TtlItdedStcTaxFree; // 仕入非課税対象額合計
            targetRow.StockOutTax = sourceRow.StockOutTax; // 仕入金額消費税額（外税）
            targetRow.StckPrcConsTaxInclu = sourceRow.StckPrcConsTaxInclu; // 仕入金額消費税額（内税）
            targetRow.StckDisTtlTaxExc = sourceRow.StckDisTtlTaxExc; // 仕入値引金額計（税抜き）
            targetRow.ItdedStockDisOutTax = sourceRow.ItdedStockDisOutTax; // 仕入値引外税対象額合計
            targetRow.ItdedStockDisInTax = sourceRow.ItdedStockDisInTax; // 仕入値引内税対象額合計
            targetRow.ItdedStockDisTaxFre = sourceRow.ItdedStockDisTaxFre; // 仕入値引非課税対象額合計
            targetRow.StockDisOutTax = sourceRow.StockDisOutTax; // 仕入値引消費税額（外税）
            targetRow.StckDisTtlTaxInclu = sourceRow.StckDisTtlTaxInclu; // 仕入値引消費税額（内税）
            targetRow.TaxAdjust = sourceRow.TaxAdjust; // 消費税調整額
            targetRow.BalanceAdjust = sourceRow.BalanceAdjust; // 残高調整額
            targetRow.SuppCTaxLayCd = sourceRow.SuppCTaxLayCd; // 仕入先消費税転嫁方式コード
            targetRow.SupplierConsTaxRate = sourceRow.SupplierConsTaxRate; // 仕入先消費税税率
            targetRow.AccPayConsTax = sourceRow.AccPayConsTax; // 買掛消費税
            targetRow.StockFractionProcCd = sourceRow.StockFractionProcCd; // 仕入端数処理区分
            targetRow.AutoPayment = sourceRow.AutoPayment; // 自動支払区分
            targetRow.AutoPaySlipNum = sourceRow.AutoPaySlipNum; // 自動支払伝票番号
            targetRow.RetGoodsReasonDiv = sourceRow.RetGoodsReasonDiv; // 返品理由コード
            targetRow.RetGoodsReason = sourceRow.RetGoodsReason; // 返品理由
            targetRow.PartySaleSlipNum = sourceRow.PartySaleSlipNum; // 相手先伝票番号
            targetRow.SupplierSlipNote1 = sourceRow.SupplierSlipNote1; // 仕入伝票備考1
            targetRow.SupplierSlipNote2 = sourceRow.SupplierSlipNote2; // 仕入伝票備考2
            targetRow.DetailRowCount = sourceRow.DetailRowCount; // 明細行数
            targetRow.EdiSendDate = sourceRow.EdiSendDate; // ＥＤＩ送信日
            targetRow.EdiTakeInDate = sourceRow.EdiTakeInDate; // ＥＤＩ取込日
            targetRow.UoeRemark1 = sourceRow.UoeRemark1; // ＵＯＥリマーク１
            targetRow.UoeRemark2 = sourceRow.UoeRemark2; // ＵＯＥリマーク２
            targetRow.SlipPrintDivCd = sourceRow.SlipPrintDivCd; // 伝票発行区分
            targetRow.SlipPrintFinishCd = sourceRow.SlipPrintFinishCd; // 伝票発行済区分
            targetRow.StockSlipPrintDate = sourceRow.StockSlipPrintDate; // 仕入伝票発行日
            targetRow.SlipPrtSetPaperId = sourceRow.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
            targetRow.SlipAddressDiv = sourceRow.SlipAddressDiv; // 伝票住所区分
            targetRow.AddresseeCode = sourceRow.AddresseeCode; // 納品先コード
            targetRow.AddresseeName = sourceRow.AddresseeName; // 納品先名称
            targetRow.AddresseeName2 = sourceRow.AddresseeName2; // 納品先名称2
            targetRow.AddresseePostNo = sourceRow.AddresseePostNo; // 納品先郵便番号
            targetRow.AddresseeAddr1 = sourceRow.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
            targetRow.AddresseeAddr3 = sourceRow.AddresseeAddr3; // 納品先住所3(番地)
            targetRow.AddresseeAddr4 = sourceRow.AddresseeAddr4; // 納品先住所4(アパート名称)
            targetRow.AddresseeTelNo = sourceRow.AddresseeTelNo; // 納品先電話番号
            targetRow.AddresseeFaxNo = sourceRow.AddresseeFaxNo; // 納品先FAX番号
            targetRow.DirectSendingCd = sourceRow.DirectSendingCd; // 直送区分
            targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo; // 受注番号
            targetRow.SupplierFormalDetail = sourceRow.SupplierFormalDetail; // 仕入形式
            targetRow.SupplierSlipNoDetail = sourceRow.SupplierSlipNoDetail; // 仕入伝票番号
            targetRow.StockRowNo = sourceRow.StockRowNo; // 仕入行番号
            targetRow.SectionCodeDetail = sourceRow.SectionCodeDetail; // 拠点コード
            targetRow.SubSectionCodeDetail = sourceRow.SubSectionCodeDetail; // 部門コード
            targetRow.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            targetRow.StockSlipDtlNum = sourceRow.StockSlipDtlNum; // 仕入明細通番
            targetRow.SupplierFormalSrc = sourceRow.SupplierFormalSrc; // 仕入形式（元）
            targetRow.StockSlipDtlNumSrc = sourceRow.StockSlipDtlNumSrc; // 仕入明細通番（元）
            targetRow.AcptAnOdrStatusSync = sourceRow.AcptAnOdrStatusSync; // 受注ステータス（同時）
            targetRow.SalesSlipDtlNumSync = sourceRow.SalesSlipDtlNumSync; // 売上明細通番（同時）
            targetRow.StockSlipCdDtl = sourceRow.StockSlipCdDtl; // 仕入伝票区分（明細）
            targetRow.StockInputCodeDetail = sourceRow.StockInputCodeDetail; // 仕入入力者コード
            targetRow.StockInputNameDetail = sourceRow.StockInputNameDetail; // 仕入入力者名称
            targetRow.StockAgentCodeDetail = sourceRow.StockAgentCodeDetail; // 仕入担当者コード
            targetRow.StockAgentNameDetail = sourceRow.StockAgentNameDetail; // 仕入担当者名称
            targetRow.GoodsKindCode = sourceRow.GoodsKindCode; // 商品属性
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd; // 商品メーカーコード
            targetRow.MakerName = sourceRow.MakerName; // メーカー名称
            targetRow.MakerKanaName = sourceRow.MakerKanaName; // メーカーカナ名称
            targetRow.CmpltMakerKanaName = sourceRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            targetRow.GoodsNo = sourceRow.GoodsNo; // 商品番号
            targetRow.GoodsName = sourceRow.GoodsName; // 商品名称
            targetRow.GoodsNameKana = sourceRow.GoodsNameKana; // 商品名称カナ
            targetRow.GoodsLGroup = sourceRow.GoodsLGroup; // 商品大分類コード
            targetRow.GoodsLGroupName = sourceRow.GoodsLGroupName; // 商品大分類名称
            targetRow.GoodsMGroup = sourceRow.GoodsMGroup; // 商品中分類コード
            targetRow.GoodsMGroupName = sourceRow.GoodsMGroupName; // 商品中分類名称
            targetRow.BLGroupCode = sourceRow.BLGroupCode; // BLグループコード
            targetRow.BLGroupName = sourceRow.BLGroupName; // BLグループコード名称
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode; // BL商品コード
            targetRow.BLGoodsFullName = sourceRow.BLGoodsFullName; // BL商品コード名称（全角）
            targetRow.EnterpriseGanreCode = sourceRow.EnterpriseGanreCode; // 自社分類コード
            targetRow.EnterpriseGanreName = sourceRow.EnterpriseGanreName; // 自社分類名称
            targetRow.WarehouseCode = sourceRow.WarehouseCode; // 倉庫コード
            targetRow.WarehouseName = sourceRow.WarehouseName; // 倉庫名称
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo; // 倉庫棚番
            targetRow.StockOrderDivCd = sourceRow.StockOrderDivCd; // 仕入在庫取寄せ区分
            targetRow.OpenPriceDiv = sourceRow.OpenPriceDiv; // オープン価格区分
            targetRow.GoodsRateRank = sourceRow.GoodsRateRank; // 商品掛率ランク
            targetRow.CustRateGrpCode = sourceRow.CustRateGrpCode; // 得意先掛率グループコード
            targetRow.SuppRateGrpCode = sourceRow.SuppRateGrpCode; // 仕入先掛率グループコード
            targetRow.ListPriceTaxExcFl = sourceRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            targetRow.ListPriceTaxIncFl = sourceRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            targetRow.StockRate = sourceRow.StockRate; // 仕入率
            targetRow.RateSectStckUnPrc = sourceRow.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
            targetRow.RateDivStckUnPrc = sourceRow.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
            targetRow.UnPrcCalcCdStckUnPrc = sourceRow.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
            targetRow.PriceCdStckUnPrc = sourceRow.PriceCdStckUnPrc; // 価格区分（仕入単価）
            targetRow.StdUnPrcStckUnPrc = sourceRow.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
            targetRow.FracProcUnitStcUnPrc = sourceRow.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
            targetRow.FracProcStckUnPrc = sourceRow.FracProcStckUnPrc; // 端数処理（仕入単価）
            targetRow.StockUnitPriceFl = sourceRow.StockUnitPriceFl; // 仕入単価（税抜，浮動）
            targetRow.StockUnitTaxPriceFl = sourceRow.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
            targetRow.StockUnitChngDiv = sourceRow.StockUnitChngDiv; // 仕入単価変更区分
            targetRow.BfStockUnitPriceFl = sourceRow.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
            targetRow.BfListPrice = sourceRow.BfListPrice; // 変更前定価
            targetRow.RateBLGoodsCode = sourceRow.RateBLGoodsCode; // BL商品コード（掛率）
            targetRow.RateBLGoodsName = sourceRow.RateBLGoodsName; // BL商品コード名称（掛率）
            targetRow.RateGoodsRateGrpCd = sourceRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            targetRow.RateGoodsRateGrpNm = sourceRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            targetRow.RateBLGroupCode = sourceRow.RateBLGroupCode; // BLグループコード（掛率）
            targetRow.RateBLGroupName = sourceRow.RateBLGroupName; // BLグループ名称（掛率）
            targetRow.StockCount = sourceRow.StockCount; // 仕入数
            targetRow.OrderCnt = sourceRow.OrderCnt; // 発注数量
            targetRow.OrderAdjustCnt = sourceRow.OrderAdjustCnt; // 発注調整数
            targetRow.OrderRemainCnt = sourceRow.OrderRemainCnt; // 発注残数
            targetRow.RemainCntUpdDate = sourceRow.RemainCntUpdDate; // 残数更新日
            targetRow.StockPriceTaxExc = sourceRow.StockPriceTaxExc; // 仕入金額（税抜き）
            targetRow.StockPriceTaxInc = sourceRow.StockPriceTaxInc; // 仕入金額（税込み）
            targetRow.StockGoodsCdDetail = sourceRow.StockGoodsCdDetail; // 仕入商品区分
            targetRow.StockPriceConsTaxDetail = sourceRow.StockPriceConsTaxDetail; // 仕入金額消費税額
            targetRow.TaxationCode = sourceRow.TaxationCode; // 課税区分
            targetRow.StockDtiSlipNote1 = sourceRow.StockDtiSlipNote1; // 仕入伝票明細備考1
            targetRow.SalesCustomerCode = sourceRow.SalesCustomerCode; // 販売先コード
            targetRow.SalesCustomerSnm = sourceRow.SalesCustomerSnm; // 販売先略称
            targetRow.SlipMemo1 = sourceRow.SlipMemo1; // 伝票メモ１
            targetRow.SlipMemo2 = sourceRow.SlipMemo2; // 伝票メモ２
            targetRow.SlipMemo3 = sourceRow.SlipMemo3; // 伝票メモ３
            targetRow.InsideMemo1 = sourceRow.InsideMemo1; // 社内メモ１
            targetRow.InsideMemo2 = sourceRow.InsideMemo2; // 社内メモ２
            targetRow.InsideMemo3 = sourceRow.InsideMemo3; // 社内メモ３
            targetRow.SupplierCdDetail = sourceRow.SupplierCdDetail; // 仕入先コード
            targetRow.SupplierSnmDetail = sourceRow.SupplierSnmDetail; // 仕入先略称
            targetRow.AddresseeCodeDetail = sourceRow.AddresseeCodeDetail; // 納品先コード
            targetRow.AddresseeNameDetail = sourceRow.AddresseeNameDetail; // 納品先名称
            targetRow.DirectSendingCdDetail = sourceRow.DirectSendingCdDetail; // 直送区分
            targetRow.OrderNumber = sourceRow.OrderNumber; // 発注番号
            targetRow.WayToOrder = sourceRow.WayToOrder; // 注文方法
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate; // 納品完了予定日
            targetRow.ExpectDeliveryDate = sourceRow.ExpectDeliveryDate; // 希望納期
            targetRow.OrderDataCreateDiv = sourceRow.OrderDataCreateDiv; // 発注データ作成区分
            targetRow.OrderDataCreateDate = sourceRow.OrderDataCreateDate; // 発注データ作成日
            targetRow.OrderFormIssuedDiv = sourceRow.OrderFormIssuedDiv; // 発注書発行済区分
            targetRow.TotalDay = sourceRow.TotalDay; // 締日
            targetRow.NTimeCalcStDate = sourceRow.NTimeCalcStDate; // 次回勘定開始日
            targetRow.PayeeName = sourceRow.PayeeName; // 支払先名称
            targetRow.PayeeName2 = sourceRow.PayeeName2; // 支払先名称２
            targetRow.AddUpEnableCnt = sourceRow.AddUpEnableCnt; // 計上可能数量
            targetRow.AlreadyAddUpCnt = sourceRow.AlreadyAddUpCnt; // 計上済数量
            targetRow.EditStatus = sourceRow.EditStatus; // エディットステータス
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid; // 共通キー
        }

        /// <summary>
        /// 仕入情報行オブジェクトのコピーを行います。
        /// </summary>
        /// <param name="sourceRow">コピー元仕入情報オブジェクト</param>
        /// <param name="targetRow">コピー元仕入情報行オブジェクト</param>
        private void CopyCompleteStockTempRow(SalesInputDataSet.StockTempRow sourceRow, ref StockTemp targetRow)
        {
            targetRow.CreateDateTime = sourceRow.CreateDateTime; // 作成日時
            targetRow.UpdateDateTime = sourceRow.UpdateDateTime; // 更新日時
            targetRow.EnterpriseCode = sourceRow.EnterpriseCode; // 企業コード
            targetRow.FileHeaderGuid = sourceRow.FileHeaderGuid; // GUID
            targetRow.UpdEmployeeCode = sourceRow.UpdEmployeeCode; // 更新従業員コード
            targetRow.UpdAssemblyId1 = sourceRow.UpdAssemblyId1; // 更新アセンブリID1
            targetRow.UpdAssemblyId2 = sourceRow.UpdAssemblyId2; // 更新アセンブリID2
            targetRow.LogicalDeleteCode = sourceRow.LogicalDeleteCode; // 論理削除区分
            targetRow.SupplierFormal = sourceRow.SupplierFormal; // 仕入形式
            targetRow.SupplierSlipNo = sourceRow.SupplierSlipNo; // 仕入伝票番号
            targetRow.SectionCode = sourceRow.SectionCode; // 拠点コード
            targetRow.SubSectionCode = sourceRow.SubSectionCode; // 部門コード
            targetRow.DebitNoteDiv = sourceRow.DebitNoteDiv; // 赤伝区分
            targetRow.DebitNLnkSuppSlipNo = sourceRow.DebitNLnkSuppSlipNo; // 赤黒連結仕入伝票番号
            targetRow.SupplierSlipCd = sourceRow.SupplierSlipCd; // 仕入伝票区分
            targetRow.StockGoodsCd = sourceRow.StockGoodsCd; // 仕入商品区分
            targetRow.AccPayDivCd = sourceRow.AccPayDivCd; // 買掛区分
            targetRow.StockSectionCd = sourceRow.StockSectionCd; // 仕入拠点コード
            targetRow.StockAddUpSectionCd = sourceRow.StockAddUpSectionCd; // 仕入計上拠点コード
            targetRow.StockSlipUpdateCd = sourceRow.StockSlipUpdateCd; // 仕入伝票更新区分
            targetRow.InputDay = sourceRow.InputDay; // 入力日
            targetRow.ArrivalGoodsDay = sourceRow.ArrivalGoodsDay; // 入荷日
            targetRow.StockDate = sourceRow.StockDate; // 仕入日
            targetRow.StockAddUpADate = sourceRow.StockAddUpADate; // 仕入計上日付
            targetRow.DelayPaymentDiv = sourceRow.DelayPaymentDiv; // 来勘区分
            targetRow.PayeeCode = sourceRow.PayeeCode; // 支払先コード
            targetRow.PayeeSnm = sourceRow.PayeeSnm; // 支払先略称
            targetRow.SupplierCd = sourceRow.SupplierCd; // 仕入先コード
            targetRow.SupplierNm1 = sourceRow.SupplierNm1; // 仕入先名1
            targetRow.SupplierNm2 = sourceRow.SupplierNm2; // 仕入先名2
            targetRow.SupplierSnm = sourceRow.SupplierSnm; // 仕入先略称
            targetRow.BusinessTypeCode = sourceRow.BusinessTypeCode; // 業種コード
            targetRow.BusinessTypeName = sourceRow.BusinessTypeName; // 業種名称
            targetRow.SalesAreaCode = sourceRow.SalesAreaCode; // 販売エリアコード
            targetRow.SalesAreaName = sourceRow.SalesAreaName; // 販売エリア名称
            targetRow.StockInputCode = sourceRow.StockInputCode; // 仕入入力者コード
            targetRow.StockInputName = sourceRow.StockInputName; // 仕入入力者名称
            targetRow.StockAgentCode = sourceRow.StockAgentCode; // 仕入担当者コード
            targetRow.StockAgentName = sourceRow.StockAgentName; // 仕入担当者名称
            targetRow.SuppTtlAmntDspWayCd = sourceRow.SuppTtlAmntDspWayCd; // 仕入先総額表示方法区分
            targetRow.TtlAmntDispRateApy = sourceRow.TtlAmntDispRateApy; // 総額表示掛率適用区分
            targetRow.StockTotalPrice = sourceRow.StockTotalPrice; // 仕入金額合計
            targetRow.StockSubttlPrice = sourceRow.StockSubttlPrice; // 仕入金額小計
            targetRow.StockTtlPricTaxInc = sourceRow.StockTtlPricTaxInc; // 仕入金額計（税込み）
            targetRow.StockTtlPricTaxExc = sourceRow.StockTtlPricTaxExc; // 仕入金額計（税抜き）
            targetRow.StockNetPrice = sourceRow.StockNetPrice; // 仕入正価金額
            targetRow.StockPriceConsTax = sourceRow.StockPriceConsTax; // 仕入金額消費税額
            targetRow.TtlItdedStcOutTax = sourceRow.TtlItdedStcOutTax; // 仕入外税対象額合計
            targetRow.TtlItdedStcInTax = sourceRow.TtlItdedStcInTax; // 仕入内税対象額合計
            targetRow.TtlItdedStcTaxFree = sourceRow.TtlItdedStcTaxFree; // 仕入非課税対象額合計
            targetRow.StockOutTax = sourceRow.StockOutTax; // 仕入金額消費税額（外税）
            targetRow.StckPrcConsTaxInclu = sourceRow.StckPrcConsTaxInclu; // 仕入金額消費税額（内税）
            targetRow.StckDisTtlTaxExc = sourceRow.StckDisTtlTaxExc; // 仕入値引金額計（税抜き）
            targetRow.ItdedStockDisOutTax = sourceRow.ItdedStockDisOutTax; // 仕入値引外税対象額合計
            targetRow.ItdedStockDisInTax = sourceRow.ItdedStockDisInTax; // 仕入値引内税対象額合計
            targetRow.ItdedStockDisTaxFre = sourceRow.ItdedStockDisTaxFre; // 仕入値引非課税対象額合計
            targetRow.StockDisOutTax = sourceRow.StockDisOutTax; // 仕入値引消費税額（外税）
            targetRow.StckDisTtlTaxInclu = sourceRow.StckDisTtlTaxInclu; // 仕入値引消費税額（内税）
            targetRow.TaxAdjust = sourceRow.TaxAdjust; // 消費税調整額
            targetRow.BalanceAdjust = sourceRow.BalanceAdjust; // 残高調整額
            targetRow.SuppCTaxLayCd = sourceRow.SuppCTaxLayCd; // 仕入先消費税転嫁方式コード
            targetRow.SupplierConsTaxRate = sourceRow.SupplierConsTaxRate; // 仕入先消費税税率
            targetRow.AccPayConsTax = sourceRow.AccPayConsTax; // 買掛消費税
            targetRow.StockFractionProcCd = sourceRow.StockFractionProcCd; // 仕入端数処理区分
            targetRow.AutoPayment = sourceRow.AutoPayment; // 自動支払区分
            targetRow.AutoPaySlipNum = sourceRow.AutoPaySlipNum; // 自動支払伝票番号
            targetRow.RetGoodsReasonDiv = sourceRow.RetGoodsReasonDiv; // 返品理由コード
            targetRow.RetGoodsReason = sourceRow.RetGoodsReason; // 返品理由
            targetRow.PartySaleSlipNum = sourceRow.PartySaleSlipNum; // 相手先伝票番号
            targetRow.SupplierSlipNote1 = sourceRow.SupplierSlipNote1; // 仕入伝票備考1
            targetRow.SupplierSlipNote2 = sourceRow.SupplierSlipNote2; // 仕入伝票備考2
            targetRow.DetailRowCount = sourceRow.DetailRowCount; // 明細行数
            targetRow.EdiSendDate = sourceRow.EdiSendDate; // ＥＤＩ送信日
            targetRow.EdiTakeInDate = sourceRow.EdiTakeInDate; // ＥＤＩ取込日
            targetRow.UoeRemark1 = sourceRow.UoeRemark1; // ＵＯＥリマーク１
            targetRow.UoeRemark2 = sourceRow.UoeRemark2; // ＵＯＥリマーク２
            targetRow.SlipPrintDivCd = sourceRow.SlipPrintDivCd; // 伝票発行区分
            targetRow.SlipPrintFinishCd = sourceRow.SlipPrintFinishCd; // 伝票発行済区分
            targetRow.StockSlipPrintDate = sourceRow.StockSlipPrintDate; // 仕入伝票発行日
            targetRow.SlipPrtSetPaperId = sourceRow.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
            targetRow.SlipAddressDiv = sourceRow.SlipAddressDiv; // 伝票住所区分
            targetRow.AddresseeCode = sourceRow.AddresseeCode; // 納品先コード
            targetRow.AddresseeName = sourceRow.AddresseeName; // 納品先名称
            targetRow.AddresseeName2 = sourceRow.AddresseeName2; // 納品先名称2
            targetRow.AddresseePostNo = sourceRow.AddresseePostNo; // 納品先郵便番号
            targetRow.AddresseeAddr1 = sourceRow.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
            targetRow.AddresseeAddr3 = sourceRow.AddresseeAddr3; // 納品先住所3(番地)
            targetRow.AddresseeAddr4 = sourceRow.AddresseeAddr4; // 納品先住所4(アパート名称)
            targetRow.AddresseeTelNo = sourceRow.AddresseeTelNo; // 納品先電話番号
            targetRow.AddresseeFaxNo = sourceRow.AddresseeFaxNo; // 納品先FAX番号
            targetRow.DirectSendingCd = sourceRow.DirectSendingCd; // 直送区分
            targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo; // 受注番号
            targetRow.SupplierFormalDetail = sourceRow.SupplierFormalDetail; // 仕入形式
            targetRow.SupplierSlipNoDetail = sourceRow.SupplierSlipNoDetail; // 仕入伝票番号
            targetRow.StockRowNo = sourceRow.StockRowNo; // 仕入行番号
            targetRow.SectionCodeDetail = sourceRow.SectionCodeDetail; // 拠点コード
            targetRow.SubSectionCodeDetail = sourceRow.SubSectionCodeDetail; // 部門コード
            targetRow.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            targetRow.StockSlipDtlNum = sourceRow.StockSlipDtlNum; // 仕入明細通番
            targetRow.SupplierFormalSrc = sourceRow.SupplierFormalSrc; // 仕入形式（元）
            targetRow.StockSlipDtlNumSrc = sourceRow.StockSlipDtlNumSrc; // 仕入明細通番（元）
            targetRow.AcptAnOdrStatusSync = sourceRow.AcptAnOdrStatusSync; // 受注ステータス（同時）
            targetRow.SalesSlipDtlNumSync = sourceRow.SalesSlipDtlNumSync; // 売上明細通番（同時）
            targetRow.StockSlipCdDtl = sourceRow.StockSlipCdDtl; // 仕入伝票区分（明細）
            targetRow.StockInputCodeDetail = sourceRow.StockInputCodeDetail; // 仕入入力者コード
            targetRow.StockInputNameDetail = sourceRow.StockInputNameDetail; // 仕入入力者名称
            targetRow.StockAgentCodeDetail = sourceRow.StockAgentCodeDetail; // 仕入担当者コード
            targetRow.StockAgentNameDetail = sourceRow.StockAgentNameDetail; // 仕入担当者名称
            targetRow.GoodsKindCode = sourceRow.GoodsKindCode; // 商品属性
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd; // 商品メーカーコード
            targetRow.MakerName = sourceRow.MakerName; // メーカー名称
            targetRow.MakerKanaName = sourceRow.MakerKanaName; // メーカーカナ名称
            targetRow.CmpltMakerKanaName = sourceRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            targetRow.GoodsNo = sourceRow.GoodsNo; // 商品番号
            targetRow.GoodsName = sourceRow.GoodsName; // 商品名称
            targetRow.GoodsNameKana = sourceRow.GoodsNameKana; // 商品名称カナ
            targetRow.GoodsLGroup = sourceRow.GoodsLGroup; // 商品大分類コード
            targetRow.GoodsLGroupName = sourceRow.GoodsLGroupName; // 商品大分類名称
            targetRow.GoodsMGroup = sourceRow.GoodsMGroup; // 商品中分類コード
            targetRow.GoodsMGroupName = sourceRow.GoodsMGroupName; // 商品中分類名称
            targetRow.BLGroupCode = sourceRow.BLGroupCode; // BLグループコード
            targetRow.BLGroupName = sourceRow.BLGroupName; // BLグループコード名称
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode; // BL商品コード
            targetRow.BLGoodsFullName = sourceRow.BLGoodsFullName; // BL商品コード名称（全角）
            targetRow.EnterpriseGanreCode = sourceRow.EnterpriseGanreCode; // 自社分類コード
            targetRow.EnterpriseGanreName = sourceRow.EnterpriseGanreName; // 自社分類名称
            targetRow.WarehouseCode = sourceRow.WarehouseCode; // 倉庫コード
            targetRow.WarehouseName = sourceRow.WarehouseName; // 倉庫名称
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo; // 倉庫棚番
            targetRow.StockOrderDivCd = sourceRow.StockOrderDivCd; // 仕入在庫取寄せ区分
            targetRow.OpenPriceDiv = sourceRow.OpenPriceDiv; // オープン価格区分
            targetRow.GoodsRateRank = sourceRow.GoodsRateRank; // 商品掛率ランク
            targetRow.CustRateGrpCode = sourceRow.CustRateGrpCode; // 得意先掛率グループコード
            targetRow.SuppRateGrpCode = sourceRow.SuppRateGrpCode; // 仕入先掛率グループコード
            targetRow.ListPriceTaxExcFl = sourceRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            targetRow.ListPriceTaxIncFl = sourceRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            targetRow.StockRate = sourceRow.StockRate; // 仕入率
            targetRow.RateSectStckUnPrc = sourceRow.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
            targetRow.RateDivStckUnPrc = sourceRow.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
            targetRow.UnPrcCalcCdStckUnPrc = sourceRow.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
            targetRow.PriceCdStckUnPrc = sourceRow.PriceCdStckUnPrc; // 価格区分（仕入単価）
            targetRow.StdUnPrcStckUnPrc = sourceRow.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
            targetRow.FracProcUnitStcUnPrc = sourceRow.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
            targetRow.FracProcStckUnPrc = sourceRow.FracProcStckUnPrc; // 端数処理（仕入単価）
            targetRow.StockUnitPriceFl = sourceRow.StockUnitPriceFl; // 仕入単価（税抜，浮動）
            targetRow.StockUnitTaxPriceFl = sourceRow.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
            targetRow.StockUnitChngDiv = sourceRow.StockUnitChngDiv; // 仕入単価変更区分
            targetRow.BfStockUnitPriceFl = sourceRow.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
            targetRow.BfListPrice = sourceRow.BfListPrice; // 変更前定価
            targetRow.RateBLGoodsCode = sourceRow.RateBLGoodsCode; // BL商品コード（掛率）
            targetRow.RateBLGoodsName = sourceRow.RateBLGoodsName; // BL商品コード名称（掛率）
            targetRow.RateGoodsRateGrpCd = sourceRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            targetRow.RateGoodsRateGrpNm = sourceRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            targetRow.RateBLGroupCode = sourceRow.RateBLGroupCode; // BLグループコード（掛率）
            targetRow.RateBLGroupName = sourceRow.RateBLGroupName; // BLグループ名称（掛率）
            targetRow.StockCount = sourceRow.StockCount; // 仕入数
            targetRow.OrderCnt = sourceRow.OrderCnt; // 発注数量
            targetRow.OrderAdjustCnt = sourceRow.OrderAdjustCnt; // 発注調整数
            targetRow.OrderRemainCnt = sourceRow.OrderRemainCnt; // 発注残数
            targetRow.RemainCntUpdDate = sourceRow.RemainCntUpdDate; // 残数更新日
            targetRow.StockPriceTaxExc = sourceRow.StockPriceTaxExc; // 仕入金額（税抜き）
            targetRow.StockPriceTaxInc = sourceRow.StockPriceTaxInc; // 仕入金額（税込み）
            targetRow.StockGoodsCdDetail = sourceRow.StockGoodsCdDetail; // 仕入商品区分
            targetRow.StockPriceConsTaxDetail = sourceRow.StockPriceConsTaxDetail; // 仕入金額消費税額
            targetRow.TaxationCode = sourceRow.TaxationCode; // 課税区分
            targetRow.StockDtiSlipNote1 = sourceRow.StockDtiSlipNote1; // 仕入伝票明細備考1
            targetRow.SalesCustomerCode = sourceRow.SalesCustomerCode; // 販売先コード
            targetRow.SalesCustomerSnm = sourceRow.SalesCustomerSnm; // 販売先略称
            targetRow.SlipMemo1 = sourceRow.SlipMemo1; // 伝票メモ１
            targetRow.SlipMemo2 = sourceRow.SlipMemo2; // 伝票メモ２
            targetRow.SlipMemo3 = sourceRow.SlipMemo3; // 伝票メモ３
            targetRow.InsideMemo1 = sourceRow.InsideMemo1; // 社内メモ１
            targetRow.InsideMemo2 = sourceRow.InsideMemo2; // 社内メモ２
            targetRow.InsideMemo3 = sourceRow.InsideMemo3; // 社内メモ３
            targetRow.SupplierCdDetail = sourceRow.SupplierCdDetail; // 仕入先コード
            targetRow.SupplierSnmDetail = sourceRow.SupplierSnmDetail; // 仕入先略称
            targetRow.AddresseeCodeDetail = sourceRow.AddresseeCodeDetail; // 納品先コード
            targetRow.AddresseeNameDetail = sourceRow.AddresseeNameDetail; // 納品先名称
            targetRow.DirectSendingCdDetail = sourceRow.DirectSendingCdDetail; // 直送区分
            targetRow.OrderNumber = sourceRow.OrderNumber; // 発注番号
            targetRow.WayToOrder = sourceRow.WayToOrder; // 注文方法
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate; // 納品完了予定日
            targetRow.ExpectDeliveryDate = sourceRow.ExpectDeliveryDate; // 希望納期
            targetRow.OrderDataCreateDiv = sourceRow.OrderDataCreateDiv; // 発注データ作成区分
            targetRow.OrderDataCreateDate = sourceRow.OrderDataCreateDate; // 発注データ作成日
            targetRow.OrderFormIssuedDiv = sourceRow.OrderFormIssuedDiv; // 発注書発行済区分
            targetRow.TotalDay = sourceRow.TotalDay; // 締日
            targetRow.NTimeCalcStDate = sourceRow.NTimeCalcStDate; // 次回勘定開始日
            targetRow.PayeeName = sourceRow.PayeeName; // 支払先名称
            targetRow.PayeeName2 = sourceRow.PayeeName2; // 支払先名称２
            targetRow.AddUpEnableCnt = sourceRow.AddUpEnableCnt; // 計上可能数量
            targetRow.AlreadyAddUpCnt = sourceRow.AlreadyAddUpCnt; // 計上済数量
            targetRow.EditStatus = sourceRow.EditStatus; // エディットステータス
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid; // 共通キー
        }

        /// <summary>
        /// 仕入情報行オブジェクトのコピーを行います。
        /// </summary>
        /// <param name="sourceRow">コピー元仕入情報オブジェクト</param>
        /// <param name="targetRow">コピー元仕入情報行オブジェクト</param>
        private void CopyCompleteStockTempRow(SalesInputDataSet.StockTempRow sourceRow, SalesInputDataSet.StockTempRow targetRow)
        {
            targetRow.CreateDateTime = sourceRow.CreateDateTime; // 作成日時
            targetRow.UpdateDateTime = sourceRow.UpdateDateTime; // 更新日時
            targetRow.EnterpriseCode = sourceRow.EnterpriseCode; // 企業コード
            targetRow.FileHeaderGuid = sourceRow.FileHeaderGuid; // GUID
            targetRow.UpdEmployeeCode = sourceRow.UpdEmployeeCode; // 更新従業員コード
            targetRow.UpdAssemblyId1 = sourceRow.UpdAssemblyId1; // 更新アセンブリID1
            targetRow.UpdAssemblyId2 = sourceRow.UpdAssemblyId2; // 更新アセンブリID2
            targetRow.LogicalDeleteCode = sourceRow.LogicalDeleteCode; // 論理削除区分
            targetRow.SupplierFormal = sourceRow.SupplierFormal; // 仕入形式
            targetRow.SupplierSlipNo = sourceRow.SupplierSlipNo; // 仕入伝票番号
            targetRow.SectionCode = sourceRow.SectionCode; // 拠点コード
            targetRow.SubSectionCode = sourceRow.SubSectionCode; // 部門コード
            targetRow.DebitNoteDiv = sourceRow.DebitNoteDiv; // 赤伝区分
            targetRow.DebitNLnkSuppSlipNo = sourceRow.DebitNLnkSuppSlipNo; // 赤黒連結仕入伝票番号
            targetRow.SupplierSlipCd = sourceRow.SupplierSlipCd; // 仕入伝票区分
            targetRow.StockGoodsCd = sourceRow.StockGoodsCd; // 仕入商品区分
            targetRow.AccPayDivCd = sourceRow.AccPayDivCd; // 買掛区分
            targetRow.StockSectionCd = sourceRow.StockSectionCd; // 仕入拠点コード
            targetRow.StockAddUpSectionCd = sourceRow.StockAddUpSectionCd; // 仕入計上拠点コード
            targetRow.StockSlipUpdateCd = sourceRow.StockSlipUpdateCd; // 仕入伝票更新区分
            targetRow.InputDay = sourceRow.InputDay; // 入力日
            targetRow.ArrivalGoodsDay = sourceRow.ArrivalGoodsDay; // 入荷日
            targetRow.StockDate = sourceRow.StockDate; // 仕入日
            targetRow.StockAddUpADate = sourceRow.StockAddUpADate; // 仕入計上日付
            targetRow.DelayPaymentDiv = sourceRow.DelayPaymentDiv; // 来勘区分
            targetRow.PayeeCode = sourceRow.PayeeCode; // 支払先コード
            targetRow.PayeeSnm = sourceRow.PayeeSnm; // 支払先略称
            targetRow.SupplierCd = sourceRow.SupplierCd; // 仕入先コード
            targetRow.SupplierNm1 = sourceRow.SupplierNm1; // 仕入先名1
            targetRow.SupplierNm2 = sourceRow.SupplierNm2; // 仕入先名2
            targetRow.SupplierSnm = sourceRow.SupplierSnm; // 仕入先略称
            targetRow.BusinessTypeCode = sourceRow.BusinessTypeCode; // 業種コード
            targetRow.BusinessTypeName = sourceRow.BusinessTypeName; // 業種名称
            targetRow.SalesAreaCode = sourceRow.SalesAreaCode; // 販売エリアコード
            targetRow.SalesAreaName = sourceRow.SalesAreaName; // 販売エリア名称
            targetRow.StockInputCode = sourceRow.StockInputCode; // 仕入入力者コード
            targetRow.StockInputName = sourceRow.StockInputName; // 仕入入力者名称
            targetRow.StockAgentCode = sourceRow.StockAgentCode; // 仕入担当者コード
            targetRow.StockAgentName = sourceRow.StockAgentName; // 仕入担当者名称
            targetRow.SuppTtlAmntDspWayCd = sourceRow.SuppTtlAmntDspWayCd; // 仕入先総額表示方法区分
            targetRow.TtlAmntDispRateApy = sourceRow.TtlAmntDispRateApy; // 総額表示掛率適用区分
            targetRow.StockTotalPrice = sourceRow.StockTotalPrice; // 仕入金額合計
            targetRow.StockSubttlPrice = sourceRow.StockSubttlPrice; // 仕入金額小計
            targetRow.StockTtlPricTaxInc = sourceRow.StockTtlPricTaxInc; // 仕入金額計（税込み）
            targetRow.StockTtlPricTaxExc = sourceRow.StockTtlPricTaxExc; // 仕入金額計（税抜き）
            targetRow.StockNetPrice = sourceRow.StockNetPrice; // 仕入正価金額
            targetRow.StockPriceConsTax = sourceRow.StockPriceConsTax; // 仕入金額消費税額
            targetRow.TtlItdedStcOutTax = sourceRow.TtlItdedStcOutTax; // 仕入外税対象額合計
            targetRow.TtlItdedStcInTax = sourceRow.TtlItdedStcInTax; // 仕入内税対象額合計
            targetRow.TtlItdedStcTaxFree = sourceRow.TtlItdedStcTaxFree; // 仕入非課税対象額合計
            targetRow.StockOutTax = sourceRow.StockOutTax; // 仕入金額消費税額（外税）
            targetRow.StckPrcConsTaxInclu = sourceRow.StckPrcConsTaxInclu; // 仕入金額消費税額（内税）
            targetRow.StckDisTtlTaxExc = sourceRow.StckDisTtlTaxExc; // 仕入値引金額計（税抜き）
            targetRow.ItdedStockDisOutTax = sourceRow.ItdedStockDisOutTax; // 仕入値引外税対象額合計
            targetRow.ItdedStockDisInTax = sourceRow.ItdedStockDisInTax; // 仕入値引内税対象額合計
            targetRow.ItdedStockDisTaxFre = sourceRow.ItdedStockDisTaxFre; // 仕入値引非課税対象額合計
            targetRow.StockDisOutTax = sourceRow.StockDisOutTax; // 仕入値引消費税額（外税）
            targetRow.StckDisTtlTaxInclu = sourceRow.StckDisTtlTaxInclu; // 仕入値引消費税額（内税）
            targetRow.TaxAdjust = sourceRow.TaxAdjust; // 消費税調整額
            targetRow.BalanceAdjust = sourceRow.BalanceAdjust; // 残高調整額
            targetRow.SuppCTaxLayCd = sourceRow.SuppCTaxLayCd; // 仕入先消費税転嫁方式コード
            targetRow.SupplierConsTaxRate = sourceRow.SupplierConsTaxRate; // 仕入先消費税税率
            targetRow.AccPayConsTax = sourceRow.AccPayConsTax; // 買掛消費税
            targetRow.StockFractionProcCd = sourceRow.StockFractionProcCd; // 仕入端数処理区分
            targetRow.AutoPayment = sourceRow.AutoPayment; // 自動支払区分
            targetRow.AutoPaySlipNum = sourceRow.AutoPaySlipNum; // 自動支払伝票番号
            targetRow.RetGoodsReasonDiv = sourceRow.RetGoodsReasonDiv; // 返品理由コード
            targetRow.RetGoodsReason = sourceRow.RetGoodsReason; // 返品理由
            targetRow.PartySaleSlipNum = sourceRow.PartySaleSlipNum; // 相手先伝票番号
            targetRow.SupplierSlipNote1 = sourceRow.SupplierSlipNote1; // 仕入伝票備考1
            targetRow.SupplierSlipNote2 = sourceRow.SupplierSlipNote2; // 仕入伝票備考2
            targetRow.DetailRowCount = sourceRow.DetailRowCount; // 明細行数
            targetRow.EdiSendDate = sourceRow.EdiSendDate; // ＥＤＩ送信日
            targetRow.EdiTakeInDate = sourceRow.EdiTakeInDate; // ＥＤＩ取込日
            targetRow.UoeRemark1 = sourceRow.UoeRemark1; // ＵＯＥリマーク１
            targetRow.UoeRemark2 = sourceRow.UoeRemark2; // ＵＯＥリマーク２
            targetRow.SlipPrintDivCd = sourceRow.SlipPrintDivCd; // 伝票発行区分
            targetRow.SlipPrintFinishCd = sourceRow.SlipPrintFinishCd; // 伝票発行済区分
            targetRow.StockSlipPrintDate = sourceRow.StockSlipPrintDate; // 仕入伝票発行日
            targetRow.SlipPrtSetPaperId = sourceRow.SlipPrtSetPaperId; // 伝票印刷設定用帳票ID
            targetRow.SlipAddressDiv = sourceRow.SlipAddressDiv; // 伝票住所区分
            targetRow.AddresseeCode = sourceRow.AddresseeCode; // 納品先コード
            targetRow.AddresseeName = sourceRow.AddresseeName; // 納品先名称
            targetRow.AddresseeName2 = sourceRow.AddresseeName2; // 納品先名称2
            targetRow.AddresseePostNo = sourceRow.AddresseePostNo; // 納品先郵便番号
            targetRow.AddresseeAddr1 = sourceRow.AddresseeAddr1; // 納品先住所1(都道府県市区郡・町村・字)
            targetRow.AddresseeAddr3 = sourceRow.AddresseeAddr3; // 納品先住所3(番地)
            targetRow.AddresseeAddr4 = sourceRow.AddresseeAddr4; // 納品先住所4(アパート名称)
            targetRow.AddresseeTelNo = sourceRow.AddresseeTelNo; // 納品先電話番号
            targetRow.AddresseeFaxNo = sourceRow.AddresseeFaxNo; // 納品先FAX番号
            targetRow.DirectSendingCd = sourceRow.DirectSendingCd; // 直送区分
            targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo; // 受注番号
            targetRow.SupplierFormalDetail = sourceRow.SupplierFormalDetail; // 仕入形式
            targetRow.SupplierSlipNoDetail = sourceRow.SupplierSlipNoDetail; // 仕入伝票番号
            targetRow.StockRowNo = sourceRow.StockRowNo; // 仕入行番号
            targetRow.SectionCodeDetail = sourceRow.SectionCodeDetail; // 拠点コード
            targetRow.SubSectionCodeDetail = sourceRow.SubSectionCodeDetail; // 部門コード
            targetRow.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            targetRow.StockSlipDtlNum = sourceRow.StockSlipDtlNum; // 仕入明細通番
            targetRow.SupplierFormalSrc = sourceRow.SupplierFormalSrc; // 仕入形式（元）
            targetRow.StockSlipDtlNumSrc = sourceRow.StockSlipDtlNumSrc; // 仕入明細通番（元）
            targetRow.AcptAnOdrStatusSync = sourceRow.AcptAnOdrStatusSync; // 受注ステータス（同時）
            targetRow.SalesSlipDtlNumSync = sourceRow.SalesSlipDtlNumSync; // 売上明細通番（同時）
            targetRow.StockSlipCdDtl = sourceRow.StockSlipCdDtl; // 仕入伝票区分（明細）
            targetRow.StockInputCodeDetail = sourceRow.StockInputCodeDetail; // 仕入入力者コード
            targetRow.StockInputNameDetail = sourceRow.StockInputNameDetail; // 仕入入力者名称
            targetRow.StockAgentCodeDetail = sourceRow.StockAgentCodeDetail; // 仕入担当者コード
            targetRow.StockAgentNameDetail = sourceRow.StockAgentNameDetail; // 仕入担当者名称
            targetRow.GoodsKindCode = sourceRow.GoodsKindCode; // 商品属性
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd; // 商品メーカーコード
            targetRow.MakerName = sourceRow.MakerName; // メーカー名称
            targetRow.MakerKanaName = sourceRow.MakerKanaName; // メーカーカナ名称
            targetRow.CmpltMakerKanaName = sourceRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            targetRow.GoodsNo = sourceRow.GoodsNo; // 商品番号
            targetRow.GoodsName = sourceRow.GoodsName; // 商品名称
            targetRow.GoodsNameKana = sourceRow.GoodsNameKana; // 商品名称カナ
            targetRow.GoodsLGroup = sourceRow.GoodsLGroup; // 商品大分類コード
            targetRow.GoodsLGroupName = sourceRow.GoodsLGroupName; // 商品大分類名称
            targetRow.GoodsMGroup = sourceRow.GoodsMGroup; // 商品中分類コード
            targetRow.GoodsMGroupName = sourceRow.GoodsMGroupName; // 商品中分類名称
            targetRow.BLGroupCode = sourceRow.BLGroupCode; // BLグループコード
            targetRow.BLGroupName = sourceRow.BLGroupName; // BLグループコード名称
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode; // BL商品コード
            targetRow.BLGoodsFullName = sourceRow.BLGoodsFullName; // BL商品コード名称（全角）
            targetRow.EnterpriseGanreCode = sourceRow.EnterpriseGanreCode; // 自社分類コード
            targetRow.EnterpriseGanreName = sourceRow.EnterpriseGanreName; // 自社分類名称
            targetRow.WarehouseCode = sourceRow.WarehouseCode; // 倉庫コード
            targetRow.WarehouseName = sourceRow.WarehouseName; // 倉庫名称
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo; // 倉庫棚番
            targetRow.StockOrderDivCd = sourceRow.StockOrderDivCd; // 仕入在庫取寄せ区分
            targetRow.OpenPriceDiv = sourceRow.OpenPriceDiv; // オープン価格区分
            targetRow.GoodsRateRank = sourceRow.GoodsRateRank; // 商品掛率ランク
            targetRow.CustRateGrpCode = sourceRow.CustRateGrpCode; // 得意先掛率グループコード
            targetRow.SuppRateGrpCode = sourceRow.SuppRateGrpCode; // 仕入先掛率グループコード
            targetRow.ListPriceTaxExcFl = sourceRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            targetRow.ListPriceTaxIncFl = sourceRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            targetRow.StockRate = sourceRow.StockRate; // 仕入率
            targetRow.RateSectStckUnPrc = sourceRow.RateSectStckUnPrc; // 掛率設定拠点（仕入単価）
            targetRow.RateDivStckUnPrc = sourceRow.RateDivStckUnPrc; // 掛率設定区分（仕入単価）
            targetRow.UnPrcCalcCdStckUnPrc = sourceRow.UnPrcCalcCdStckUnPrc; // 単価算出区分（仕入単価）
            targetRow.PriceCdStckUnPrc = sourceRow.PriceCdStckUnPrc; // 価格区分（仕入単価）
            targetRow.StdUnPrcStckUnPrc = sourceRow.StdUnPrcStckUnPrc; // 基準単価（仕入単価）
            targetRow.FracProcUnitStcUnPrc = sourceRow.FracProcUnitStcUnPrc; // 端数処理単位（仕入単価）
            targetRow.FracProcStckUnPrc = sourceRow.FracProcStckUnPrc; // 端数処理（仕入単価）
            targetRow.StockUnitPriceFl = sourceRow.StockUnitPriceFl; // 仕入単価（税抜，浮動）
            targetRow.StockUnitTaxPriceFl = sourceRow.StockUnitTaxPriceFl; // 仕入単価（税込，浮動）
            targetRow.StockUnitChngDiv = sourceRow.StockUnitChngDiv; // 仕入単価変更区分
            targetRow.BfStockUnitPriceFl = sourceRow.BfStockUnitPriceFl; // 変更前仕入単価（浮動）
            targetRow.BfListPrice = sourceRow.BfListPrice; // 変更前定価
            targetRow.RateBLGoodsCode = sourceRow.RateBLGoodsCode; // BL商品コード（掛率）
            targetRow.RateBLGoodsName = sourceRow.RateBLGoodsName; // BL商品コード名称（掛率）
            targetRow.RateGoodsRateGrpCd = sourceRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            targetRow.RateGoodsRateGrpNm = sourceRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            targetRow.RateBLGroupCode = sourceRow.RateBLGroupCode; // BLグループコード（掛率）
            targetRow.RateBLGroupName = sourceRow.RateBLGroupName; // BLグループ名称（掛率）
            targetRow.StockCount = sourceRow.StockCount; // 仕入数
            targetRow.OrderCnt = sourceRow.OrderCnt; // 発注数量
            targetRow.OrderAdjustCnt = sourceRow.OrderAdjustCnt; // 発注調整数
            targetRow.OrderRemainCnt = sourceRow.OrderRemainCnt; // 発注残数
            targetRow.RemainCntUpdDate = sourceRow.RemainCntUpdDate; // 残数更新日
            targetRow.StockPriceTaxExc = sourceRow.StockPriceTaxExc; // 仕入金額（税抜き）
            targetRow.StockPriceTaxInc = sourceRow.StockPriceTaxInc; // 仕入金額（税込み）
            targetRow.StockGoodsCdDetail = sourceRow.StockGoodsCdDetail; // 仕入商品区分
            targetRow.StockPriceConsTaxDetail = sourceRow.StockPriceConsTaxDetail; // 仕入金額消費税額
            targetRow.TaxationCode = sourceRow.TaxationCode; // 課税区分
            targetRow.StockDtiSlipNote1 = sourceRow.StockDtiSlipNote1; // 仕入伝票明細備考1
            targetRow.SalesCustomerCode = sourceRow.SalesCustomerCode; // 販売先コード
            targetRow.SalesCustomerSnm = sourceRow.SalesCustomerSnm; // 販売先略称
            targetRow.SlipMemo1 = sourceRow.SlipMemo1; // 伝票メモ１
            targetRow.SlipMemo2 = sourceRow.SlipMemo2; // 伝票メモ２
            targetRow.SlipMemo3 = sourceRow.SlipMemo3; // 伝票メモ３
            targetRow.InsideMemo1 = sourceRow.InsideMemo1; // 社内メモ１
            targetRow.InsideMemo2 = sourceRow.InsideMemo2; // 社内メモ２
            targetRow.InsideMemo3 = sourceRow.InsideMemo3; // 社内メモ３
            targetRow.SupplierCdDetail = sourceRow.SupplierCdDetail; // 仕入先コード
            targetRow.SupplierSnmDetail = sourceRow.SupplierSnmDetail; // 仕入先略称
            targetRow.AddresseeCodeDetail = sourceRow.AddresseeCodeDetail; // 納品先コード
            targetRow.AddresseeNameDetail = sourceRow.AddresseeNameDetail; // 納品先名称
            targetRow.DirectSendingCdDetail = sourceRow.DirectSendingCdDetail; // 直送区分
            targetRow.OrderNumber = sourceRow.OrderNumber; // 発注番号
            targetRow.WayToOrder = sourceRow.WayToOrder; // 注文方法
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate; // 納品完了予定日
            targetRow.ExpectDeliveryDate = sourceRow.ExpectDeliveryDate; // 希望納期
            targetRow.OrderDataCreateDiv = sourceRow.OrderDataCreateDiv; // 発注データ作成区分
            targetRow.OrderDataCreateDate = sourceRow.OrderDataCreateDate; // 発注データ作成日
            targetRow.OrderFormIssuedDiv = sourceRow.OrderFormIssuedDiv; // 発注書発行済区分
            targetRow.TotalDay = sourceRow.TotalDay; // 締日
            targetRow.NTimeCalcStDate = sourceRow.NTimeCalcStDate; // 次回勘定開始日
            targetRow.PayeeName = sourceRow.PayeeName; // 支払先名称
            targetRow.PayeeName2 = sourceRow.PayeeName2; // 支払先名称２
            targetRow.AddUpEnableCnt = sourceRow.AddUpEnableCnt; // 計上可能数量
            targetRow.AlreadyAddUpCnt = sourceRow.AlreadyAddUpCnt; // 計上済数量
            targetRow.EditStatus = sourceRow.EditStatus; // エディットステータス
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid; // 共通キー
        }
        #endregion

        #region 仕入データ検索
        /// <summary>
        /// 仕入先伝票番号を使用して仕入データおよび仕入明細データを検索します。
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="supplierFormal">仕入形式</param>
        /// <param name="partySalesSlipNum">仕入伝票番号</param>
        /// <param name="supplierCd">仕入先コード</param>
        /// <param name="stockdate">仕入日</param>
        /// <param name="stockSlipWork">仕入データオブジェクト</param>
        /// <param name="stockDetailList">仕入明細データオブジェクト</param>
        /// <returns></returns>
        public int ReadStockSlip( string enterpriseCode, int supplierFormal, string partySalesSlipNum, int supplierCd, DateTime stockdate, out StockSlipWork stockSlipWork, out ArrayList stockDetailList )
		{
            return this.ReadStockSlip(enterpriseCode, supplierFormal, string.Empty, partySalesSlipNum, stockdate, supplierCd, 2, out stockSlipWork, out stockDetailList);
		}

        /// <summary>
        /// 仕入データを検索します。
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="supplierFormal">仕入形式</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="partySalesSlipNum">仕入伝票番号</param>
        /// <param name="targetDate">仕入日</param>
        /// <param name="supplierCd">仕入先コード</param>
        /// <param name="partySalesSlipNumSearchMode">仕入伝票番号検索モード(0:完全一致,1:前方一致,2:完全一致明細あり)</param>
        /// <param name="stockSlipWork">仕入データワークオブジェクト</param>
        /// <param name="stockDetailWorkList">仕入明細データワークオブジェクトリスト</param>
        /// <returns></returns>
        private int ReadStockSlip( string enterpriseCode, int supplierFormal, string sectionCode, string partySalesSlipNum, DateTime targetDate,int supplierCd, int partySalesSlipNumSearchMode, out StockSlipWork stockSlipWork, out ArrayList stockDetailWorkList)
		{
			StockSlipWork paraStockSlipWork = new StockSlipWork();
			paraStockSlipWork.EnterpriseCode = enterpriseCode;
			paraStockSlipWork.SupplierFormal = supplierFormal;
			paraStockSlipWork.StockSectionCd= sectionCode;
            paraStockSlipWork.SupplierCd = supplierCd;
			paraStockSlipWork.PartySaleSlipNum = partySalesSlipNum;

			if (supplierFormal == 0)
			{
				paraStockSlipWork.StockDate = targetDate;
			}
			else
			{
				paraStockSlipWork.ArrivalGoodsDay = targetDate;
			}
			return this.ReadStockSlipProc(paraStockSlipWork, partySalesSlipNumSearchMode, out stockSlipWork, out stockDetailWorkList);
		}

        // ADD 2015/12/14 李侠 For Redmine#48098-------------------------------->>>>>
        /// <summary>
        /// 仕入データを検索します。
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="supplierFormal">仕入形式</param>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="supplierslipcd">伝票区分</param>
        /// <param name="partySalesSlipNum">仕入伝票番号</param>
        /// <param name="targetDate">仕入日</param>
        /// <param name="supplierCd">仕入先コード</param>
        /// <param name="partySalesSlipNumSearchMode">仕入伝票番号検索モード(0:完全一致,1:前方一致,2:完全一致明細あり,3:完全一致明細あり(売上仕入用))</param>
        /// <param name="stockSlipWork">仕入データワークオブジェクト</param>
        /// <param name="stockDetailWorkList">仕入明細データワークオブジェクトリスト</param>
        /// <returns></returns>
        private int ReadStockSlip(string enterpriseCode, int supplierFormal, string sectionCode, int supplierslipcd, string partySalesSlipNum, DateTime targetDate, int supplierCd, int partySalesSlipNumSearchMode, out StockSlipWork stockSlipWork, out ArrayList stockDetailWorkList)
        {
            StockSlipWork paraStockSlipWork = new StockSlipWork();
            paraStockSlipWork.EnterpriseCode = enterpriseCode;
            paraStockSlipWork.SupplierFormal = supplierFormal;
            paraStockSlipWork.StockSectionCd = sectionCode;
            paraStockSlipWork.SupplierCd = supplierCd;
            paraStockSlipWork.PartySaleSlipNum = partySalesSlipNum;
            paraStockSlipWork.SupplierSlipCd = supplierslipcd;

            if (supplierFormal == 0)
            {
                paraStockSlipWork.StockDate = targetDate;
            }
            else
            {
                paraStockSlipWork.ArrivalGoodsDay = targetDate;
            }
            return this.ReadStockSlipProc(paraStockSlipWork, partySalesSlipNumSearchMode, out stockSlipWork, out stockDetailWorkList);
        }
        // ADD 2015/12/14 李侠 For Redmine#48098--------------------------------<<<<<

        /// <summary>
        /// 仕入データを検索します。
        /// </summary>
        /// <param name="paraStockSlipWork">検索パラメータ(仕入ワークオブジェクト)</param>
        /// <param name="readMode">仕入伝票番号検索モード</param>
        /// <param name="stockSlipWork">仕入データワークオブジェクト</param>
        /// <param name="stockDetailWorkList">仕入明細データワークオブジェクトリスト</param>
        /// <returns>STATUS</returns>
        private int ReadStockSlipProc( StockSlipWork paraStockSlipWork, int readMode, out StockSlipWork stockSlipWork, out ArrayList stockDetailWorkList)
		{
            stockSlipWork = null;
            stockDetailWorkList = null;
			CustomSerializeArrayList retList=new CustomSerializeArrayList();

            object retObj = (object)retList;
			object paraObj;

            paraObj = (object)paraStockSlipWork;

            int status = this._iStockSlipDB.SearchPartySaleSlipNum(ref retObj, paraObj, readMode);

			if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
			{
				CustomSerializeArrayList retCustomSerializeArrayList = (CustomSerializeArrayList)retObj;

                stockSlipWork = new StockSlipWork();
                stockDetailWorkList = new ArrayList();
				for (int i = 0; i < retCustomSerializeArrayList.Count; i++)
				{
					if (retCustomSerializeArrayList[i] is StockSlipWork)
					{
                        stockSlipWork = (StockSlipWork)retCustomSerializeArrayList[i];
					}
                    else if (retCustomSerializeArrayList[i] is ArrayList)
                    {
                        stockDetailWorkList = (ArrayList)retCustomSerializeArrayList[i];
                    }
				}
			}
			return status;
		}        
        #endregion
        #endregion

        #region ●車両情報
        /// <summary>
        /// 車両情報存在チェック
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistCarInfo(int salesRowNo)
        {
            bool ret = false;

            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum.PadLeft(9, '0'), salesRowNo);

            if (salesDetailRow != null)
            {
                SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(salesDetailRow.CarRelationGuid);

                // 判定項目：型式、管理番号
                if ((!string.IsNullOrEmpty(carInfoRow.FullModel)) && (!string.IsNullOrEmpty(carInfoRow.CarMngCode)))
                {
                    ret = true;
                }
            }

            return ret;
        }

        /// <summary>
        /// 車両情報存在チェック
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        /// <br>Update Note: 2009/09/08② 張凱 車輌管理機能対応</br>
        public bool ExistCarInfo()
        {
            // --- UPD 2009/09/08② -------------->>>
            // チェック変更
            bool ret = false;

            int index = 0;// ADD 2009/09/08②

            SalesInputDataSet.CarInfoRow carInfoOldRow = this._carInfoDataTable.NewCarInfoRow(); // ADD 2009/09/08②

            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this.SalesDetailDataTable)
            {
                if (salesDetailRow.CarRelationGuid == Guid.Empty) continue;
                SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(salesDetailRow.CarRelationGuid);
                if (carInfoRow != null)
                {
                    if (index == 0)
                    {
                        carInfoOldRow = carInfoRow;// ADD 2009/09/08

                    // 判定項目：型式、管理番号
                    if ((!string.IsNullOrEmpty(carInfoRow.FullModel)) && (!string.IsNullOrEmpty(carInfoRow.CarMngCode)))
                    {
                        ret = true;
                        }
                    }
                    else
                    {
                        if (CarCompare(carInfoOldRow, carInfoRow))// ADD 2009/09/08②
                        {
                            // 判定項目：型式、管理番号
                            if ((!string.IsNullOrEmpty(carInfoRow.FullModel)) && (!string.IsNullOrEmpty(carInfoRow.CarMngCode)))
                            {
                                ret = true;
                            }
                        }
                        else
                        {
                            //車両追加情報クリア処理
                            ClearAddCarInfo();
                            ret = false;
                        break;
                    }
                        carInfoOldRow = carInfoRow;// ADD 2009/09/08②
                    }

                    index++;
                }
            }

            // --- UPD 2009/09/08② --------------<<<
            return ret;
        }

        /// <summary>
        /// 新規モード車両追加情報クリア処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 車両追加情報存在をクリアします。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/09/08②</br>
        /// </remarks>
        public void ClearAddCarInfo()
        {
            if (this.SalesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal && (this.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum))
            {
                foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this.SalesDetailDataTable)
                {
                    if (salesDetailRow.CarRelationGuid == Guid.Empty) continue;
                    SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(salesDetailRow.CarRelationGuid);
                    if (carInfoRow != null)
                    {
                        carInfoRow.CarNoteCode = 0; // ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218
                        carInfoRow.CarNote = string.Empty;
                        carInfoRow.Mileage = 0;
                    }
                }
            }
        }

        /// <summary>
        /// 車両情報存在チェック
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        /// <remarks>
        /// <br>Note       :  車両情報存在を判断します。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/09/08②</br>
        /// </remarks>
        public bool ExistCarMngNoInfo()
        {
            bool ret = false;

            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this.SalesDetailDataTable)
            {
                if (salesDetailRow.CarRelationGuid == Guid.Empty) continue;
                SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(salesDetailRow.CarRelationGuid);
                if (carInfoRow != null)
                {
                    // 判定項目：車輌管理番号、車輌管理コード
                    if ((carInfoRow.CarMngNo != 0) && (!string.IsNullOrEmpty(carInfoRow.CarMngCode)))
                    {
                        ret = true;
                        break;
                    }
                }
            }
            return ret;
        }

        /// <summary>
        /// 車両管理種類マスタ比較処理
        /// </summary>
        /// <param name="target">比較対象のCarManagementクラスのインスタンス</param>
        /// <returns>一致しない項目のリスト</returns>
        /// <remarks>
        /// <br>Note       : 車両管理種類を比較します。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/09/08②</br>
        /// </remarks>
        public bool CarCompare(SalesInputDataSet.CarInfoRow carInfoOldRow, SalesInputDataSet.CarInfoRow carInfoRow)
        {
            ArrayList resList = new ArrayList();
            bool result = false;
            //型式指定番号
            if (carInfoOldRow.ModelDesignationNo != carInfoRow.ModelDesignationNo) resList.Add("ModelDesignationNo");
            //類別番号
            if (carInfoOldRow.CategoryNo != carInfoRow.CategoryNo) resList.Add("CategoryNo");
            //型式
            if (!carInfoOldRow.FullModel.Equals(carInfoRow.FullModel)) resList.Add("FullModel");
            //エンジン型式
            if (!carInfoOldRow.EngineModelNm.Equals(carInfoRow.EngineModelNm)) resList.Add("EngineModelNm");
            //車種
            if (!carInfoOldRow.MakerCode.Equals(carInfoRow.MakerCode)) resList.Add("MakerCode");
            if (!carInfoOldRow.ModelCode.Equals(carInfoRow.ModelCode)) resList.Add("ModelCode");
            if (!carInfoOldRow.ModelSubCode.Equals(carInfoRow.ModelSubCode)) resList.Add("ModelSubCode");
            //年式
            if (!carInfoOldRow.FirstEntryDate.Equals(carInfoRow.FirstEntryDate)) resList.Add("FirstEntryDate");
            //車台番号
            if (!carInfoOldRow.FrameNo.Equals(carInfoRow.FrameNo)) resList.Add("FrameNo");
            //カラー
            if (!carInfoOldRow.ColorCode.Equals(carInfoRow.ColorCode)) resList.Add("ColorCode");
            //トリム
            if (!carInfoOldRow.TrimCode.Equals(carInfoRow.TrimCode)) resList.Add("TrimCode");
            //管理番号
            if (!carInfoOldRow.CarMngCode.Equals(carInfoRow.CarMngCode)) resList.Add("CarMngCode");

            if (resList.Count == 0)
            {
                result = true;
            }
            return result;
        }

        //>>>2012/03/05
        /// <summary>
        /// 車両情報テーブル比較処理
        /// </summary>
        /// <param name="carInfoOldRow"></param>
        /// <param name="carInfoRow"></param>
        /// <returns></returns>
        public ArrayList CompareCarInfo(SalesInputDataSet.CarInfoRow carInfoOldRow, SalesInputDataSet.CarInfoRow carInfoRow)
        {
            ArrayList resList = new ArrayList();
            bool result = false;

            //if (carInfoOldRow.CarRelationGuid != carInfoRow.CarRelationGuid) resList.Add("CarRelationGuid");
            if (carInfoOldRow.CustomerCode != carInfoRow.CustomerCode) resList.Add("CustomerCode");
            if (carInfoOldRow.CarMngNo != carInfoRow.CarMngNo) resList.Add("CarMngNo");
            if (carInfoOldRow.CarMngCode != carInfoRow.CarMngCode) resList.Add("CarMngCode");
            if (carInfoOldRow.NumberPlate1Code != carInfoRow.NumberPlate1Code) resList.Add("NumberPlate1Code");
            if (carInfoOldRow.NumberPlate1Name != carInfoRow.NumberPlate1Name) resList.Add("NumberPlate1Name");
            if (carInfoOldRow.NumberPlate2 != carInfoRow.NumberPlate2) resList.Add("NumberPlate2");
            if (carInfoOldRow.NumberPlate3 != carInfoRow.NumberPlate3) resList.Add("NumberPlate3");
            if (carInfoOldRow.NumberPlate4 != carInfoRow.NumberPlate4) resList.Add("NumberPlate4");
            if (carInfoOldRow.EntryDate != carInfoRow.EntryDate) resList.Add("EntryDate");
            if (carInfoOldRow.FirstEntryDate != carInfoRow.FirstEntryDate) resList.Add("FirstEntryDate");
            if (carInfoOldRow.MakerCode != carInfoRow.MakerCode) resList.Add("MakerCode");
            if (carInfoOldRow.MakerFullName != carInfoRow.MakerFullName) resList.Add("MakerFullName");
            if (carInfoOldRow.MakerHalfName != carInfoRow.MakerHalfName) resList.Add("MakerHalfName");
            if (carInfoOldRow.ModelCode != carInfoRow.ModelCode) resList.Add("ModelCode");
            if (carInfoOldRow.ModelSubCode != carInfoRow.ModelSubCode) resList.Add("ModelSubCode");
            if (carInfoOldRow.ModelFullName != carInfoRow.ModelFullName) resList.Add("ModelFullName");
            if (carInfoOldRow.ModelHalfName != carInfoRow.ModelHalfName) resList.Add("ModelHalfName");
            if (carInfoOldRow.SystematicCode != carInfoRow.SystematicCode) resList.Add("SystematicCode");
            if (carInfoOldRow.SystematicName != carInfoRow.SystematicName) resList.Add("SystematicName");
            if (carInfoOldRow.ProduceTypeOfYearCd != carInfoRow.ProduceTypeOfYearCd) resList.Add("ProduceTypeOfYearCd");
            if (carInfoOldRow.ProduceTypeOfYearNm != carInfoRow.ProduceTypeOfYearNm) resList.Add("ProduceTypeOfYearNm");
            if (carInfoOldRow.StProduceTypeOfYear != carInfoRow.StProduceTypeOfYear) resList.Add("StProduceTypeOfYear");
            if (carInfoOldRow.EdProduceTypeOfYear != carInfoRow.EdProduceTypeOfYear) resList.Add("EdProduceTypeOfYear");
            if (carInfoOldRow.DoorCount != carInfoRow.DoorCount) resList.Add("DoorCount");
            if (carInfoOldRow.BodyNameCode != carInfoRow.BodyNameCode) resList.Add("BodyNameCode");
            if (carInfoOldRow.BodyName != carInfoRow.BodyName) resList.Add("BodyName");
            if (carInfoOldRow.ExhaustGasSign != carInfoRow.ExhaustGasSign) resList.Add("ExhaustGasSign");
            if (carInfoOldRow.SeriesModel != carInfoRow.SeriesModel) resList.Add("SeriesModel");
            if (carInfoOldRow.CategorySignModel != carInfoRow.CategorySignModel) resList.Add("CategorySignModel");
            if (carInfoOldRow.FullModel != carInfoRow.FullModel) resList.Add("FullModel");
            if (carInfoOldRow.ModelDesignationNo != carInfoRow.ModelDesignationNo) resList.Add("ModelDesignationNo");
            if (carInfoOldRow.CategoryNo != carInfoRow.CategoryNo) resList.Add("CategoryNo");
            if (carInfoOldRow.FrameModel != carInfoRow.FrameModel) resList.Add("FrameModel");
            if (carInfoOldRow.FrameNo != carInfoRow.FrameNo) resList.Add("FrameNo");
            if (carInfoOldRow.SearchFrameNo != carInfoRow.SearchFrameNo) resList.Add("SearchFrameNo");
            if (carInfoOldRow.StProduceFrameNo != carInfoRow.StProduceFrameNo) resList.Add("StProduceFrameNo");
            if (carInfoOldRow.EdProduceFrameNo != carInfoRow.EdProduceFrameNo) resList.Add("EdProduceFrameNo");
            if (carInfoOldRow.ModelGradeNm != carInfoRow.ModelGradeNm) resList.Add("ModelGradeNm");
            if (carInfoOldRow.EngineModelNm != carInfoRow.EngineModelNm) resList.Add("EngineModelNm");
            if (carInfoOldRow.EngineDisplaceNm != carInfoRow.EngineDisplaceNm) resList.Add("EngineDisplaceNm");
            if (carInfoOldRow.EDivNm != carInfoRow.EDivNm) resList.Add("EDivNm");
            if (carInfoOldRow.TransmissionNm != carInfoRow.TransmissionNm) resList.Add("TransmissionNm");
            if (carInfoOldRow.ShiftNm != carInfoRow.ShiftNm) resList.Add("ShiftNm");
            if (carInfoOldRow.WheelDriveMethodNm != carInfoRow.WheelDriveMethodNm) resList.Add("WheelDriveMethodNm");
            if (carInfoOldRow.AddiCarSpec1 != carInfoRow.AddiCarSpec1) resList.Add("AddiCarSpec1");
            if (carInfoOldRow.AddiCarSpec2 != carInfoRow.AddiCarSpec2) resList.Add("AddiCarSpec2");
            if (carInfoOldRow.AddiCarSpec3 != carInfoRow.AddiCarSpec3) resList.Add("AddiCarSpec3");
            if (carInfoOldRow.AddiCarSpec4 != carInfoRow.AddiCarSpec4) resList.Add("AddiCarSpec4");
            if (carInfoOldRow.AddiCarSpec5 != carInfoRow.AddiCarSpec5) resList.Add("AddiCarSpec5");
            if (carInfoOldRow.AddiCarSpec6 != carInfoRow.AddiCarSpec6) resList.Add("AddiCarSpec6");
            if (carInfoOldRow.AddiCarSpecTitle1 != carInfoRow.AddiCarSpecTitle1) resList.Add("AddiCarSpecTitle1");
            if (carInfoOldRow.AddiCarSpecTitle2 != carInfoRow.AddiCarSpecTitle2) resList.Add("AddiCarSpecTitle2");
            if (carInfoOldRow.AddiCarSpecTitle3 != carInfoRow.AddiCarSpecTitle3) resList.Add("AddiCarSpecTitle3");
            if (carInfoOldRow.AddiCarSpecTitle4 != carInfoRow.AddiCarSpecTitle4) resList.Add("AddiCarSpecTitle4");
            if (carInfoOldRow.AddiCarSpecTitle5 != carInfoRow.AddiCarSpecTitle5) resList.Add("AddiCarSpecTitle5");
            if (carInfoOldRow.AddiCarSpecTitle6 != carInfoRow.AddiCarSpecTitle6) resList.Add("AddiCarSpecTitle6");
            if (carInfoOldRow.RelevanceModel != carInfoRow.RelevanceModel) resList.Add("RelevanceModel");
            if (carInfoOldRow.SubCarNmCd != carInfoRow.SubCarNmCd) resList.Add("SubCarNmCd");
            if (carInfoOldRow.ModelGradeSname != carInfoRow.ModelGradeSname) resList.Add("ModelGradeSname");
            if (carInfoOldRow.BlockIllustrationCd != carInfoRow.BlockIllustrationCd) resList.Add("BlockIllustrationCd");
            if (carInfoOldRow.ThreeDIllustNo != carInfoRow.ThreeDIllustNo) resList.Add("ThreeDIllustNo");
            if (carInfoOldRow.PartsDataOfferFlag != carInfoRow.PartsDataOfferFlag) resList.Add("PartsDataOfferFlag");
            if (carInfoOldRow.InspectMaturityDate != carInfoRow.InspectMaturityDate) resList.Add("InspectMaturityDate");
            if (carInfoOldRow.LTimeCiMatDate != carInfoRow.LTimeCiMatDate) resList.Add("LTimeCiMatDate");
            if (carInfoOldRow.CarInspectYear != carInfoRow.CarInspectYear) resList.Add("CarInspectYear");
            if (carInfoOldRow.Mileage != carInfoRow.Mileage) resList.Add("Mileage");
            if (carInfoOldRow.CarNo != carInfoRow.CarNo) resList.Add("CarNo");
            //if (carInfoOldRow.FullModelFixedNoAry != carInfoRow.FullModelFixedNoAry) resList.Add("FullModelFixedNoAry");
            //if (carInfoOldRow.CategoryObjAry != carInfoRow.CategoryObjAry) resList.Add("CategoryObjAry");
            if (carInfoOldRow.ProduceTypeOfYearInput != carInfoRow.ProduceTypeOfYearInput) resList.Add("ProduceTypeOfYearInput");
            if (carInfoOldRow.ColorCode != carInfoRow.ColorCode) resList.Add("ColorCode");
            if (carInfoOldRow.ColorName1 != carInfoRow.ColorName1) resList.Add("ColorName1");
            if (carInfoOldRow.TrimCode != carInfoRow.TrimCode) resList.Add("TrimCode");
            if (carInfoOldRow.TrimName != carInfoRow.TrimName) resList.Add("TrimName");
            //if (carInfoOldRow.AcceptAnOrderNo != carInfoRow.AcceptAnOrderNo) resList.Add("AcceptAnOrderNo");
            if (carInfoOldRow.CarNote != carInfoRow.CarNote) resList.Add("CarNote");
            if (carInfoOldRow.CarAddInfo1 != carInfoRow.CarAddInfo1) resList.Add("CarAddInfo1");
            if (carInfoOldRow.CarAddInfo2 != carInfoRow.CarAddInfo2) resList.Add("CarAddInfo2");
            if (carInfoOldRow.EngineModel != carInfoRow.EngineModel) resList.Add("EngineModel");
            //if (carInfoOldRow.FreeSrchMdlFxdNoAry != carInfoRow.FreeSrchMdl) resList.Add("FreeSrchMdl");

            return resList;
        }
        //<<<2012/03/05

        /// <summary>
        /// 車両情報テーブル行追加
        /// </summary>
        /// <param name="salesSlipNum">売上伝票番号</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>追加した車両情報行オブジェクト</returns>
        private SalesInputDataSet.CarInfoRow AddCarInfoRow(string salesSlipNum, int salesRowNo)
        {
            // 車両情報共通キー生成
            Guid carRelationGuid = Guid.NewGuid();

            // 車両情報データ行オブジェクト生成
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.NewCarInfoRow();
            this.ClearCarInfoRow(ref carInfoRow);

            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesSlipNum, salesRowNo);
            salesDetailRow.CarRelationGuid =  carRelationGuid; // 車両情報共通キーセット

            // キーセット
            carInfoRow.CarRelationGuid = carRelationGuid;
            carInfoRow.FullModelFixedNoAry = new Int32[0];
            carInfoRow.FreeSrchMdlFxdNoAry = new string[0]; // ADD 2010/04/27
            this._carInfoDataTable.AddCarInfoRow(carInfoRow);

            return carInfoRow;
        }

        /// <summary>
        /// 車両情報テーブルのクリア
        /// </summary>
        public void ClearCarInfo()
        {
            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this._salesDetailDataTable)
            {
                // 車両情報行オブジェクト取得
                SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(salesDetailRow.CarRelationGuid);
                if (carInfoRow == null) return;

                this.ClearCarInfoRow(ref carInfoRow);
            }
        }

        /// <summary>
        /// 車両情報テーブルのクリア
        /// </summary>
        /// <param name="salesRowNoList">クリア対象売上行番号リスト</param>
        public void ClearCarInfoRow(List<int> salesRowNoList)
        {
            // 指定売上行番号リストを対象としてクリア
            foreach (int salesRowNo in salesRowNoList)
            {
                this.ClearCarInfoRow(salesRowNo);
            }
        }

        /// <summary>
        /// 車両情報テーブルのクリア
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <br>Update Note: 2010/01/27 高峰 車輌情報クリア時のBLコード検索に関する変更の対応</br>
        public void ClearCarInfoRow(int salesRowNo)
        {
            // 売上明細行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (salesDetailRow == null) return;

            // 車両情報行オブジェクト取得
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(salesDetailRow.CarRelationGuid);
            if (carInfoRow == null) return;

            // ---------- ADD 2010/01/27 ---------->>>>>>>>>>
            if (this._carInfo.ContainsKey(carInfoRow.CarRelationGuid)) this._carInfo.Remove(carInfoRow.CarRelationGuid);
            // ---------- ADD 2010/01/27 ----------<<<<<<<<<<
            this.ClearCarInfoRow(ref carInfoRow);
        }

        /// <summary>
        /// 車両情報テーブルのクリア
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        private void ClearCarInfoRow(Guid carRelationGuid)
        {
            // 車両情報行オブジェクト取得
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);
            if (carInfoRow == null) return;

            this.ClearCarInfoRow(ref carInfoRow);
        }

        /// <summary>
        /// 車両情報テーブルのクリア
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <br>Update Note: 2009/09/08② 張凱 車輌管理機能対応</br>
        public void ClearCarInfoRow(ref SalesInputDataSet.CarInfoRow carInfoRow)
        {
            if (carInfoRow == null) return;

            //carInfoRow.CarRelationGuid = Guid.Empty;            // 車両情報共通キー
            carInfoRow.CustomerCode = 0;                        // 得意先コード
            carInfoRow.CarMngNo = 0;                            // 車両管理番号
            // --- DEL 2009/09/08② ---------->>>>>
            //carInfoRow.CarMngCode = string.Empty;               // 車輌管理コード
            // --- DEL 2009/09/08② ----------<<<<<
            carInfoRow.NumberPlate1Code = 0;                    // 陸運事務所番号
            carInfoRow.NumberPlate1Name = string.Empty;         // 陸運事務局名称
            carInfoRow.NumberPlate2 = string.Empty;             // 車両登録番号（種別）
            carInfoRow.NumberPlate3 = string.Empty;             // 車両登録番号（カナ）
            carInfoRow.NumberPlate4 = 0;                        // 車両登録番号（プレート番号）
            carInfoRow.EntryDate = DateTime.MinValue;           // 登録年月日
            // --- UPD 2009/09/08② ---------->>>>>
            //carInfoRow.FirstEntryDate = DateTime.MinValue;      // 初年度
            carInfoRow.FirstEntryDate = 0;      // 初年度
            // --- UPD 2009/09/08② ---------->>>>>
            carInfoRow.MakerCode = 0;                           // メーカーコード
            carInfoRow.MakerFullName = string.Empty;            // メーカー全角名称
            carInfoRow.MakerHalfName = string.Empty;            // メーカー半角名称
            carInfoRow.ModelCode = 0;                           // 車種コード
            carInfoRow.ModelSubCode = 0;                        // 車種サブコード
            carInfoRow.ModelFullName = string.Empty;            // 車種全角名称
            carInfoRow.ModelHalfName = string.Empty;            // 車種半角名称
            carInfoRow.SystematicCode = 0;                      // 系統コード
            carInfoRow.SystematicName = string.Empty;           // 系統名称
            carInfoRow.ProduceTypeOfYearCd = 0;                 // 生産年式コード
            carInfoRow.ProduceTypeOfYearNm = string.Empty;      // 生産年式名称
            carInfoRow.StProduceTypeOfYear = DateTime.MinValue; // 開始生産年式
            carInfoRow.EdProduceTypeOfYear = DateTime.MinValue; // 終了生産年式
            carInfoRow.DoorCount = 0;                           // ドア数
            carInfoRow.BodyNameCode = 0;                        // ボディー名コード
            carInfoRow.BodyName = string.Empty;                 // ボディー名称
            carInfoRow.ExhaustGasSign = string.Empty;           // 排ガス記号
            carInfoRow.SeriesModel = string.Empty;              // シリーズ型式
            carInfoRow.CategorySignModel = string.Empty;        // 型式（類別記号）
            carInfoRow.FullModel = string.Empty;                // 型式（フル型）
            carInfoRow.ModelDesignationNo = 0;                  // 型式指定番号
            carInfoRow.CategoryNo = 0;                          // 類別番号
            carInfoRow.FrameModel = string.Empty;               // 車台型式
            carInfoRow.FrameNo = string.Empty;                  // 車台番号
            carInfoRow.SearchFrameNo = 0;                       // 車台番号（検索用）
            carInfoRow.StProduceFrameNo = 0;                    // 生産車台番号開始
            carInfoRow.EdProduceFrameNo = 0;                    // 生産車台番号終了
            carInfoRow.ModelGradeNm = string.Empty;             // 型式グレード名称
            carInfoRow.EngineModelNm = string.Empty;            // エンジン型式名称
            carInfoRow.EngineDisplaceNm = string.Empty;         // 排気量名称
            carInfoRow.EDivNm = string.Empty;                   // E区分名称
            carInfoRow.TransmissionNm = string.Empty;           // ミッション名称
            carInfoRow.ShiftNm = string.Empty;                  // シフト名称
            carInfoRow.WheelDriveMethodNm = string.Empty;       // 駆動方式名称
            carInfoRow.AddiCarSpec1 = string.Empty;             // 追加諸元1
            carInfoRow.AddiCarSpec2 = string.Empty;             // 追加諸元2
            carInfoRow.AddiCarSpec3 = string.Empty;             // 追加諸元3
            carInfoRow.AddiCarSpec4 = string.Empty;             // 追加諸元4
            carInfoRow.AddiCarSpec5 = string.Empty;             // 追加諸元5
            carInfoRow.AddiCarSpec6 = string.Empty;             // 追加諸元6
            carInfoRow.AddiCarSpecTitle1 = string.Empty;        // 追加諸元タイトル1
            carInfoRow.AddiCarSpecTitle2 = string.Empty;        // 追加諸元タイトル2
            carInfoRow.AddiCarSpecTitle3 = string.Empty;        // 追加諸元タイトル3
            carInfoRow.AddiCarSpecTitle4 = string.Empty;        // 追加諸元タイトル4
            carInfoRow.AddiCarSpecTitle5 = string.Empty;        // 追加諸元タイトル5
            carInfoRow.AddiCarSpecTitle6 = string.Empty;        // 追加諸元タイトル6
            carInfoRow.RelevanceModel = string.Empty;           // 関連型式
            carInfoRow.SubCarNmCd = 0;                          // サブ車名コード
            carInfoRow.ModelGradeSname = string.Empty;          // 型式グレード略称
            carInfoRow.BlockIllustrationCd = 0;                 // ブロックイラストコード
            carInfoRow.ThreeDIllustNo = 0;                      // 3DイラストNo
            carInfoRow.PartsDataOfferFlag = 0;                  // 部品データ提供フラグ
            carInfoRow.InspectMaturityDate = DateTime.MinValue; // 車検満期日
            carInfoRow.LTimeCiMatDate = DateTime.MinValue;      // 前回車検満期日
            carInfoRow.CarInspectYear = 0;                      // 車検期間
            carInfoRow.Mileage = 0;                             // 車両走行距離
            carInfoRow.CarNo = string.Empty;                    // 号車
            carInfoRow.FullModelFixedNoAry = new Int32[0];      // フル型式固定番号配列
            carInfoRow.FreeSrchMdlFxdNoAry = new string[0];      // 自由検索型式固定番号配列 // ADD 2010/04/27
            carInfoRow.ProduceTypeOfYearInput = 0;              // 年式
            carInfoRow.ColorCode = string.Empty;                // カラーコード
            carInfoRow.ColorName1 = string.Empty;               // カラー名称
            carInfoRow.TrimCode = string.Empty;                 // トリムコード
            carInfoRow.TrimName = string.Empty;                 // トリム名称
            carInfoRow.AcceptAnOrderNo = 0;                     // 受注番号
            // --- ADD 2009/09/08② ---------->>>>>
            carInfoRow.CarNote = string.Empty;                  // 車輌備考
            carInfoRow.CarNoteCode = 0;                         // 車輌備考コード ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218
            carInfoRow.CarAddInfo1 = string.Empty;              // 車輌追加情報１
            carInfoRow.CarAddInfo2 = string.Empty;              // 車輌追加情報２
            carInfoRow.EngineModel = string.Empty;              //原動機型式（エンジン）
            // --- ADD 2009/09/08② ----------<<<<<

            // ADD 2012/05/31 ------------------------------------------------------------->>>>>
            carInfoRow.FirstEntryDateNumTyp = 0;                // 初年度（NUMタイプ）
            carInfoRow.CarAddInf = new byte[0];                 // 車両付加情報オブジェクト
            carInfoRow.EquipPrtsObj = new byte[0];              // 装備部品オブジェクト
            // ADD 2012/05/31 -------------------------------------------------------------<<<<<

            // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------->>>>>
            carInfoRow.CarMngCode = string.Empty;               // 車両管理コード
            // ADD 2013/04/19 SCM障害№10521対応 -----------------------------------<<<<<

            // ADD 2012/06/12 T.Yoshioka ------->>>>>>>>>>>>>>>>>>>>> No.135修正漏れ
            carInfoRow.GradeFullName = string.Empty;             // グレード名称（全角）
            // ADD 2012/06/12 T.Yoshioka -------<<<<<<<<<<<<<<<<<<<<<

            // PMNS:国産/外車区分クリア
            // --- ADD 2013/03/21 ---------->>>>>
            carInfoRow.DomesticForeignCode = 0;                 // 国産/外車区分
            this._handleInfoCode = 0;                           // ハンドル位置情報
            // --- ADD 2013/03/21 ----------<<<<<

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.08.10 ADD
            try
            {
                // 初期状態ではCarRelationGuidのGet時に例外発生してしまうのでCatchする。
                if ( carInfoRow.CarRelationGuid != null )
                {
                    // カラー・トリム・装備の初期化
                    this.SelectColorInfo( carInfoRow.CarRelationGuid, string.Empty ); // カラー情報 初期化
                    this.SelectTrimInfo( carInfoRow.CarRelationGuid, string.Empty ); // トリム情報 初期化
                    this.SelectEquipInfo( carInfoRow.CarRelationGuid, new byte[0] ); // 装備情報 初期化
                }
            }
            catch
            {
                carInfoRow.CarRelationGuid = Guid.Empty;
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.08.10 ADD
        }

        /// <summary>
        /// 品番検索モードへ変更した場合、車両情報テーブルのクリア
        /// </summary>
        /// <remarks>
        /// <br>Note       : 品番検索モードへ変更した場合、車両情報テーブルの内容をクリアします。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/11/24</br>
        /// </remarks>
        public void ClearCarInfoByGoodsNoSearch()
        {
            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this._salesDetailDataTable)
            {
                // 車両情報行オブジェクト取得
                SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(salesDetailRow.CarRelationGuid);
                if (carInfoRow == null) return;

                carInfoRow.StProduceTypeOfYear = DateTime.MinValue; // 開始生産年式
                carInfoRow.EdProduceTypeOfYear = DateTime.MinValue; // 終了生産年式
                carInfoRow.StProduceFrameNo = 0;                    // 生産車台番号開始
                carInfoRow.EdProduceFrameNo = 0;                    // 生産車台番号終了
                carInfoRow.ColorCode = string.Empty;                // カラーコード
                carInfoRow.TrimCode = string.Empty;                 // トリムコード

                try
                {
                    // 初期状態ではCarRelationGuidのGet時に例外発生してしまうのでCatchする。
                    if (carInfoRow.CarRelationGuid != null)
                    {
                        //// カラー・トリム・装備の初期化
                        //this.SelectColorInfo(carInfoRow.CarRelationGuid, string.Empty); // カラー情報 初期化
                        //this.SelectTrimInfo(carInfoRow.CarRelationGuid, string.Empty); // トリム情報 初期化
                        //this.SelectEquipInfo(carInfoRow.CarRelationGuid, new byte[0]); // 装備情報 初期化

                        //カラー・トリム・装備のクリア
                        if (this._colorInfoDic.ContainsKey(carInfoRow.CarRelationGuid))
                        {
                            this._colorInfoDic[carInfoRow.CarRelationGuid].Clear();
                        }

                        if (this._trimInfoDic.ContainsKey(carInfoRow.CarRelationGuid))
                        {
                            this._trimInfoDic[carInfoRow.CarRelationGuid].Clear();
                        }

                        if (this._cEqpDspInfoDic.ContainsKey(carInfoRow.CarRelationGuid))
                        {
                            this._cEqpDspInfoDic[carInfoRow.CarRelationGuid].Clear();
                        }
                    }
                }
                catch
                {
                    carInfoRow.CarRelationGuid = Guid.Empty;
                }

                carInfoRow.ModelGradeNm = string.Empty;             // 型式グレード名称
                carInfoRow.BodyName = string.Empty;                 // ボディー名称
                carInfoRow.DoorCount = 0;                           // ドア数
                carInfoRow.EDivNm = string.Empty;                   // E区分名称
                carInfoRow.EngineDisplaceNm = string.Empty;         // 排気量名称
                carInfoRow.EngineModelNm = string.Empty;            // エンジン型式名称
                carInfoRow.ShiftNm = string.Empty;                  // シフト名称
                carInfoRow.TransmissionNm = string.Empty;           // ミッション名称
                carInfoRow.WheelDriveMethodNm = string.Empty;       // 駆動方式名称
                carInfoRow.AddiCarSpec1 = string.Empty;             // 追加諸元1
                carInfoRow.AddiCarSpec2 = string.Empty;             // 追加諸元2
                carInfoRow.AddiCarSpec3 = string.Empty;             // 追加諸元3
                carInfoRow.AddiCarSpec4 = string.Empty;             // 追加諸元4
                carInfoRow.AddiCarSpec5 = string.Empty;             // 追加諸元5
                carInfoRow.AddiCarSpec6 = string.Empty;             // 追加諸元6
                // --- ADD 2013/05/22 Y.Wakita ---------->>>>>
                carInfoRow.DomesticForeignCode = 0;                 // 国産/外車区分
                // --- ADD 2013/05/22 Y.Wakita ----------<<<<<
            }
        }

        /// <summary>
        /// カラー、トリム、、装備ガイドの内容のクリア
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <remarks>
        /// <br>Note       : カラー、トリム、、装備ガイドの内容をクリアします。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/09/08②</br>
        /// </remarks>
        public void ClearCarRelationGuid(int salesRowNo)
        {
            // 売上明細行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (salesDetailRow == null) return;

            // 車両情報行オブジェクト取得
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(salesDetailRow.CarRelationGuid);
            if (carInfoRow == null) return;

            carInfoRow.ColorCode = string.Empty;                // カラーコード
            carInfoRow.ColorName1 = string.Empty;               // カラー名称
            carInfoRow.TrimCode = string.Empty;                 // トリムコード
            carInfoRow.TrimName = string.Empty;                 // トリム名称

            try
            {
                // 初期状態ではCarRelationGuidのGet時に例外発生してしまうのでCatchする。
                if (carInfoRow.CarRelationGuid != null)
                {
                    // カラー・トリム・装備の初期化
                    this.SelectColorInfo(carInfoRow.CarRelationGuid, string.Empty); // カラー情報 初期化
                    this.SelectTrimInfo(carInfoRow.CarRelationGuid, string.Empty); // トリム情報 初期化
                    this.SelectEquipInfo(carInfoRow.CarRelationGuid, new byte[0]); // 装備情報 初期化
                }
            }
            catch
            {
                carInfoRow.CarRelationGuid = Guid.Empty;
            }
        }

        /// <summary>
        /// 車両情報テーブルのカラー情報クリア
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        public void ClearCarInfoRowForColorInfo(Guid carRelationGuid)
        {
            // 車両情報行オブジェクト取得
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);
            if (carInfoRow != null)
            {
                carInfoRow.ColorCode = string.Empty; // カラーコード
                carInfoRow.ColorName1 = string.Empty; // カラー名称
            }
        }

        /// <summary>
        /// 車両情報テーブルのトリム情報クリア
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        public void ClearCarInfoRowForTrimInfo(Guid carRelationGuid)
        {
            // 車両情報行オブジェクト取得
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);
            if (carInfoRow != null)
            {
                carInfoRow.TrimCode = string.Empty; // トリムコード
                carInfoRow.TrimName = string.Empty; // トリム名称
            }
        }

        /// <summary>
        /// 車両情報テーブル行削除
        /// </summary>
        /// <param name="selectedSalesRowNoList">選択売上明細行番号リスト</param>
        public void DeleteCarInfoRow(List<int> selectedSalesRowNoList)
        {
            foreach (int salesRowNo in selectedSalesRowNoList)
            {
                // 売上明細行オブジェクト取得
                SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
                this.DeleteCarInfoRow(salesDetailRow.CarRelationGuid);
            }
        }

        //>>>2010/02/26
        /// <summary>
        /// 車両情報テーブル行削除
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        public void DeleteCarInfoRow(List<Guid> carRelationGuidList)
        {
            if ((carRelationGuidList == null) || (carRelationGuidList.Count == 0)) return;

            foreach (Guid carRelationGuid in carRelationGuidList)
            {
                this.DeleteCarInfoRow(carRelationGuid);
            }
        }
        //<<<2010/02/26

        /// <summary>
        /// 車両情報テーブル行削除
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        public void DeleteCarInfoRow(Guid carRelationGuid)
        {
            // 車両情報行オブジェクト取得
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);
            if (carInfoRow == null) return;
            this._carInfoDataTable.RemoveCarInfoRow(carInfoRow);
        }

        /// <summary>
        /// 対象行の車両情報行オブジェクトを取得
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="getCarInfoMode">車両情報取得モード</param>
        /// <returns>車両情報行オブジェクト</returns>
        public SalesInputDataSet.CarInfoRow GetCarInfoRow(int salesRowNo, SalesSlipInputAcs.GetCarInfoMode getCarInfoMode)
        {
            return this.GetCarInfoRow(null, salesRowNo, getCarInfoMode);
        }

        /// <summary>
        /// 対象行の車両情報行オブジェクトを取得
        /// </summary>
        /// <param name="baseSalesSlip">処理元売上データオブジェクト</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="getCarInfoMode">車両情報取得モード</param>
        /// <returns>車両情報行オブジェクト</returns>
        public SalesInputDataSet.CarInfoRow GetCarInfoRow(SalesSlip baseSalesSlip, int salesRowNo, SalesSlipInputAcs.GetCarInfoMode getCarInfoMode)
        {
            // 売上明細データ行オブジェクト取得
            string slipNum = this._currentSalesSlipNum;
            if (baseSalesSlip != null) slipNum = baseSalesSlip.SalesSlipNum;
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(slipNum, salesRowNo);
            SalesInputDataSet.CarInfoRow carInfoRow = null;

            if (salesDetailRow != null)
            {
                // 車両情報データ行オブジェクト取得
                carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(salesDetailRow.CarRelationGuid);

                switch (getCarInfoMode)
                {
                    //--------------------------------------------------------------------------
                    // 新規登録モード
                    //--------------------------------------------------------------------------
                    //      指定車両情報が存在しない場合、新規行追加あり。
                    //--------------------------------------------------------------------------
                    case GetCarInfoMode.NewInsertMode:
                        if (carInfoRow == null)
                        {
                            carInfoRow = this.AddCarInfoRow(slipNum, salesRowNo);
                        }
                        break;
                    //--------------------------------------------------------------------------
                    // 既存修正モード（新規追加なし）
                    //--------------------------------------------------------------------------
                    //      指定車両情報が存在しない場合、前回車両情報を取得。
                    //      売上明細行オブジェクトの車両共通キーセットなし。
                    //--------------------------------------------------------------------------
                    case GetCarInfoMode.ExistGetMode:
                        if (carInfoRow == null)
                        {
                            carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(this._beforeCarRelationGuid);
                        }
                        break;
                    //--------------------------------------------------------------------------
                    // 車両情報変更モード(新規追加なし)
                    //--------------------------------------------------------------------------
                    //      指定車両情報が存在しない、明細入力ありの場合、前回車両情報を取得。
                    //      売上明細行オブジェクトの車両共通キーセットあり。
                    //--------------------------------------------------------------------------
                    case GetCarInfoMode.CarInfoChangeMode:
                        if (carInfoRow == null)
                        {
                            if (this.ExistSalesDetailOutAnnotation(salesRowNo) == true)
                            {
                                salesDetailRow.CarRelationGuid = this._beforeCarRelationGuid;
                                carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(salesDetailRow.CarRelationGuid);
                            }
                        }
                        break;
                }
            }
            return carInfoRow;
        }

        /// <summary>
        /// 車両情報テーブル行の型式指定番号および類別区分番号セット
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="modelDesignationNo">型式指定番号</param>
        /// <param name="categoryNo">類別区分番号</param>
        public void SettingCarInfoRowFromCategoryNoAndDesignationNo(int salesRowNo, int modelDesignationNo, int categoryNo)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                carInfoRow.ModelDesignationNo = modelDesignationNo; // 型式指定番号
                carInfoRow.CategoryNo = categoryNo; // 類別区分番号
            }
        }

        /// <summary>
        /// 車両情報テーブル行の型式セット
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="fullModel">型式</param>
        public void SettingCarInfoRowFromFullModel(int salesRowNo, string fullModel)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                carInfoRow.FullModel = fullModel;
            }
        }

        /// <summary>
        /// 車両情報テーブル行のエンジン型式セット
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="engineModelNm">エンジン型式</param>
        public void SettingCarInfoRowFromEngineModelNm(int salesRowNo, string engineModelNm)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                carInfoRow.EngineModelNm = engineModelNm;
            }
        }

        /// <summary>
        /// 車両情報テーブル行の年式セット
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="firstEntryDate">年式</param>
        public void SettingCarInfoRowFromFirstEntryDate(int salesRowNo, int firstEntryDate)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                if (firstEntryDate != 0)
                {
                    carInfoRow.ProduceTypeOfYearInput = firstEntryDate / 100;
                }
                else
                {
                    carInfoRow.ProduceTypeOfYearInput = 0;
                }
            }
        }

        /// <summary>
        /// 車両情報テーブル行の車台番号セット
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="frameNo">車台番号</param>
        public void SettingCarInfoRowFromFrameNo(int salesRowNo, string frameNo)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                carInfoRow.FrameNo = frameNo;
                // --- DEL 2013/03/21 ---------->>>>>
                //carInfoRow.SearchFrameNo = TStrConv.StrToIntDef(frameNo.Trim(), 0);
                // --- DEL 2013/03/21 ----------<<<<<
                // --- ADD 2013/03/21 ---------->>>>>
                // PMNS:車台番号(検索用)設定
                // 国産/外車区分が外車(2)の場合は車台番号(検索用)に0をセットする
                if (carInfoRow.DomesticForeignCode == 2)
                {
                    carInfoRow.SearchFrameNo = 0;
                }
                else
                {
                	carInfoRow.SearchFrameNo = TStrConv.StrToIntDef(frameNo.Trim(), 0);
            	}
                // --- ADD 2013/03/21 ----------<<<<<
            }
        }

        // --- ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218 ------------------------------>>>>>
        /// <summary>
        /// 車両情報テーブル行の車輌備考コードセット
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="carNote">車輌備考コード</param>
        /// <remarks>
        /// <br>Note       : 車輌備考コードをセットします。</br>
        /// </remarks>
        public void SettingCarInfoRowFromCarNoteCode(int salesRowNo, int carNoteCode)
        {
            this.SettingCarInfoRowFromCarNoteCode(salesRowNo, carNoteCode, true);
        }

        public void SettingCarInfoRowFromCarNoteCode(int salesRowNo, int carNoteCode, bool chkFlg)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                if (chkFlg)
                {
                    if (carNoteCode != 0)
                    {
                        NoteGuidBd noteGuidBd;
                        NoteGuidAcs noteGuidAcs = new NoteGuidAcs();
                        int status = noteGuidAcs.Read(out noteGuidBd, this._enterpriseCode, SalesSlipInputInitDataAcs.ctDIVCODE_CarNoteGuideDivCd, carNoteCode);
                        if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                        {
                            carInfoRow.CarNoteCode = carNoteCode;
                            carInfoRow.CarNote = noteGuidBd.NoteGuideName;
                        }
                        else
                        {
                            TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "車輌備考コードが存在しません。",
                            -1,
                            MessageBoxButtons.OK);
                        }
                    }
                    else
                    {
                        carInfoRow.CarNoteCode = 0;
                        carInfoRow.CarNote = string.Empty;
                    }
                }
                else
                {
                    //車輌備考コードセット
                    carInfoRow.CarNoteCode = carNoteCode;
                }
            }
        }
        // --- ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218 ------------------------------<<<<<

        /// <summary>
        /// 車両情報テーブル行の車輌備考セット
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="carNote">車輌備考</param>
        /// <remarks>
        /// <br>Note       : 車輌備考をセットします。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/09/08②</br>
        /// </remarks>
        public void SettingCarInfoRowFromCarNote(int salesRowNo, string carNote)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                //車輌備考セット
                carInfoRow.CarNote = carNote;
            }
        }

        /// <summary>
        /// 車両情報テーブル行の車輌走行距離セット
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="mileage">車輌走行距離</param>
        /// <remarks>
        /// <br>Note       : 車輌走行距離をセットします。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/09/08②</br>
        /// </remarks>
        public void SettingCarInfoRowFromMileage(int salesRowNo, int mileage)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                //車輌走行距離セット
                carInfoRow.Mileage = mileage;
            }
        }

        /// <summary>
        /// 車両情報テーブル行の管理番号セット
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="carMngCode">管理番号</param>
        public void SettingCarInfoRowFromCarMngCode(int salesRowNo, string carMngCode)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                carInfoRow.CarMngCode = carMngCode;
            }
        }

        /// <summary>
        /// 車両情報テーブル行の車種情報セット(カーメーカー、車種コード、車種サブコード)
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="makerCode">カーメーカーコード</param>
        /// <param name="makerFullName">メーカー全角名称</param>
        /// <param name="makerHalfName">メーカー半角名称</param>
        /// <param name="modelCode">車種コード</param>
        /// <param name="modelSubCode">車種サブコード</param>
        /// <param name="modelFullName">車種全角名称</param>
        /// <param name="modelHalfName">車種半角名称</param>
        public void SettingCarInfoRowFromModelInfo(int salesRowNo, int makerCode, string makerFullName, string makerHalfName, int modelCode, int modelSubCode, string modelFullName, string modelHalfName)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                if ((modelCode == 0) && (modelSubCode == 0))
                {
                    carInfoRow.ModelFullName = makerFullName;
                    carInfoRow.ModelHalfName = makerHalfName;
                }
                else
                {
                    carInfoRow.ModelFullName = modelFullName;
                    carInfoRow.ModelHalfName = modelHalfName;
                }
                carInfoRow.MakerCode = makerCode;
                carInfoRow.MakerFullName = makerFullName;
                carInfoRow.MakerHalfName = makerHalfName;
                carInfoRow.ModelCode = modelCode;
                carInfoRow.ModelSubCode = modelSubCode;
            }
        }

        /// <summary>
        /// 車両情報テーブル行の車種情報セット(車種マスタ)
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="modelNameU">車種マスタオブジェクト</param>
        public void SettingCarInfoRowFromModelInfo(int salesRowNo, ModelNameU modelNameU)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                carInfoRow.MakerCode = modelNameU.MakerCode;
                string makerFullName = this._salesSlipInputInitDataAcs.GetName_FromMaker(modelNameU.MakerCode);
                carInfoRow.MakerFullName = makerFullName;
                string makerHalfName = this._salesSlipInputInitDataAcs.GetKanaName_FromMaker(modelNameU.MakerCode);
                carInfoRow.MakerHalfName = makerHalfName;
                carInfoRow.ModelCode = modelNameU.ModelCode;
                carInfoRow.ModelSubCode = modelNameU.ModelSubCode;
                if ((modelNameU.ModelCode == 0) && (modelNameU.ModelSubCode == 0))
                {
                    carInfoRow.ModelFullName = makerFullName;
                    carInfoRow.ModelHalfName = makerHalfName;
                }
                else
                {
                    carInfoRow.ModelFullName = modelNameU.ModelFullName;
                    carInfoRow.ModelHalfName = modelNameU.ModelHalfName;
                }
            }
        }

        /// <summary>
        /// 車両情報テーブル行のカーメーカー情報セット
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="makerCode">カーメーカーコード</param>
        /// <param name="makerFullName">メーカー全角名称</param>
        /// <param name="makerHalfName">メーカー半角名称</param>
        public void SettingCarInfoRowFromMakerInfo(int salesRowNo, int makerCode, string makerFullName, string makerHalfName)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                carInfoRow.MakerCode = makerCode;
                carInfoRow.MakerFullName = makerFullName;
                carInfoRow.MakerHalfName = makerHalfName;
            }
        }

        /// <summary>
        /// 車両情報テーブル行のカラー情報セット
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="colorInfoRow">カラー情報行オブジェクト</param>
        private void SettingCarInfoRowFromColorInfo(Guid carRelationGuid, PMKEN01010E.ColorCdInfoRow colorInfoRow)
        {
            // 車両情報行オブジェクト取得
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);
            if (carInfoRow != null)
            {
                carInfoRow.ColorCode = colorInfoRow.ColorCode; // カラーコード
                carInfoRow.ColorName1 = colorInfoRow.ColorName1; // カラー名称
            }
        }

        // --- ADD 2012/09/04 Y.Wakita ---------->>>>>
        /// <summary>
        /// 車両情報テーブル行のカラー情報セット
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="colorCode">カラーコード</param>
        private bool SettingCarInfoRowFromColorCode(Guid carRelationGuid, string colorCode)
        {
            bool ret = false;
            int status = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;

            // 車両情報行オブジェクト取得
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);
            if (carInfoRow != null)
            {
                CarMangInputExtraInfo selectedInfo;
                status = SearchCarManagement(carInfoRow, out selectedInfo);
                if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                {
                    if (selectedInfo.ColorCode == colorCode)
                    {
                        carInfoRow.ColorCode = colorCode;   // カラーコード
                        ret = true;
                    }
                }
                // --- DEL 2012/09/11 Y.Wakita ---------->>>>>
                //else if (status == (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN)
                //{
                //    if ((carInfoRow.CarMngCode != "") && (carInfoRow.CustomerCode == 0))
                //    {
                //        carInfoRow.ColorCode = colorCode;   // カラーコード
                //        ret = true;
                //    }
                //}
                // --- DEL 2012/09/11 Y.Wakita ----------<<<<<
            }
            return ret;
        }
        // --- ADD 2012/09/04 Y.Wakita ----------<<<<<


        /// <summary>
        /// 車両情報テーブル行のトリム情報セット
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="colorInfoRow">カラー情報行オブジェクト</param>
        private void SettingCarInfoRowFromTrimInfo(Guid carRelationGuid, PMKEN01010E.TrimCdInfoRow trimInfoRow)
        {
            // 車両情報行オブジェクト取得
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);
            if (carInfoRow != null)
            {
                carInfoRow.TrimCode = trimInfoRow.TrimCode; // トリムコード
                carInfoRow.TrimName = trimInfoRow.TrimName; // トリム名称
            }
        }

        // --- ADD 2012/09/04 Y.Wakita ---------->>>>>
        /// <summary>
        /// 車両情報テーブル行のトリム情報セット
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="colorInfoRow">カラー情報行オブジェクト</param>
        private bool SettingCarInfoRowFromTrimCode(Guid carRelationGuid, string trimCode)
        {
            bool ret = false;
            int status = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;

            // 車両情報行オブジェクト取得
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);
            if (carInfoRow != null)
            {
                CarMangInputExtraInfo selectedInfo;
                status = SearchCarManagement(carInfoRow, out selectedInfo);
                if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                {
                    if (selectedInfo.TrimCode == trimCode)
                    {
                        carInfoRow.TrimCode = trimCode; // トリムコード
                        ret = true;
                    }
                }
                // --- DEL 2012/09/11 Y.Wakita ---------->>>>>
                //else if (status == (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN)
                //{
                //    if ((carInfoRow.CarMngCode != "") && (carInfoRow.CustomerCode == 0))
                //    {
                //        carInfoRow.TrimCode = trimCode; // トリムコード
                //        ret = true;
                //    }
                //}
                // --- DEL 2012/09/11 Y.Wakita ----------<<<<<
            }
            return ret;
        }
        // --- ADD 2012/09/04 Y.Wakita ----------<<<<<

        /// <summary>
        /// 売上明細データテーブルの車両情報キーセット
        /// </summary>
        /// <param name="salesDetailRow">売上明細行オブジェクト</param>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        public void SettingSalesDetailCarRelationGuid(ref SalesInputDataSet.SalesDetailRow salesDetailRow, Guid carRelationGuid)
        {
            if (salesDetailRow != null)
            {
                salesDetailRow.CarRelationGuid = carRelationGuid;
            }
        }

        /// <summary>
        /// 売上明細データテーブルの車両情報キークリア
        /// </summary>
        /// <param name="selectedSalesRowNoList">売上明細データテーブル選択行番号リスト</param>
        public void ClearSalesDetailCarInfoRow(List<int> selectedSalesRowNoList)
        {
            foreach (int salesRowNo in selectedSalesRowNoList)
            {
                this.ClearSalesDetailCarInfoRow(salesRowNo);
            }
        }

        /// <summary>
        /// 売上明細データテーブルの車両情報キークリア
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void ClearSalesDetailCarInfoRow(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (salesDetailRow == null) return;
            salesDetailRow.CarRelationGuid = Guid.Empty;
        }

        /// <summary>
        /// 売上明細データテーブルの車両情報キークリア
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        public void ClearSalesDetailCarInfoRow(Guid carRelationGuid)
        {
            SalesInputDataSet.SalesDetailRow[] rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}={1}", this._salesDetailDataTable.CarRelationGuidColumn.ColumnName, carRelationGuid));
            foreach (SalesInputDataSet.SalesDetailRow row in rows)
            {
                row.CarRelationGuid = Guid.Empty;
            }
        }

        /// <summary>
        /// 車両情報キャッシュ（車両検索情報からキャッシュ）
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="searchCarInfo">車両検索結果クラス</param>
        public void CacheCarInfo(int salesRowNo, PMKEN01010E searchCarInfo)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.NewInsertMode);
            SalesInputDataSet.SalesDetailRow salesDetailRow = this.SalesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            this.CacheCarInfo(ref carInfoRow, salesDetailRow, searchCarInfo);
        }

        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.08.10 ADD
        /// <summary>
        /// 車両情報キャッシュ（車両検索情報＋見出貼付情報からキャッシュ）
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="searchCarInfo"></param>
        /// <param name="salesSlipHeaderCopyData"></param>
        /// <br>Update Note: 2009/09/08② 張凱 車両管理番号追加</br>
        public void CacheCarInfoForSlipHeaderCopy( int salesRowNo, PMKEN01010E searchCarInfo, SalesSlipHeaderCopyData salesSlipHeaderCopyData )
        {
            //----------------------------------------
            // 標準のキャッシュ処理
            //----------------------------------------
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow( salesRowNo, SalesSlipInputAcs.GetCarInfoMode.NewInsertMode );
            SalesInputDataSet.SalesDetailRow salesDetailRow = this.SalesDetailDataTable.FindBySalesSlipNumSalesRowNo( this._currentSalesSlipNum, salesRowNo );
            // --- ADD 2012/07/06 Y.Wakita ---------->>>>>
            this.ClearCarInfoRow(salesRowNo);   // 車両情報テーブルのクリア
            this._colorInfoDic.Clear();         // カラー情報のクリア
            this._trimInfoDic.Clear();          // トリム情報のクリア
            this._cEqpDspInfoDic.Clear();       // 装備情報のクリア
            // --- ADD 2012/07/06 Y.Wakita ----------<<<<<
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/10/21 UPD
            //this.CacheCarInfo( ref carInfoRow, salesDetailRow, searchCarInfo );
            if ( searchCarInfo != null && searchCarInfo.CarModelInfoSummarized != null && searchCarInfo.CarModelInfoSummarized.Count > 0 )
            {
                this.CacheCarInfo( ref carInfoRow, salesDetailRow, searchCarInfo );
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/10/21 UPD
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/10/21 ADD
            carInfoRow.FullModel = salesSlipHeaderCopyData.FullModel.Trim(); // フル型式
            carInfoRow.EngineModelNm = salesSlipHeaderCopyData.EngineModelNm.Trim(); // エンジン型式
            carInfoRow.MakerCode = salesSlipHeaderCopyData.MakerCode; // 車種メーカーコード
            carInfoRow.ModelCode = salesSlipHeaderCopyData.ModelCode; // 車種コード
            carInfoRow.ModelSubCode = salesSlipHeaderCopyData.ModelSubCode; // 車種サブコード
            carInfoRow.ModelFullName = salesSlipHeaderCopyData.ModelFullName; // 車種全角名称
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/10/21 ADD
            // --- ADD m.suzuki 2010/04/02 ---------->>>>>
            carInfoRow.ModelHalfName = salesSlipHeaderCopyData.ModelHalfName; // 車種半角名称
            // --- ADD m.suzuki 2010/04/02 ----------<<<<<

            //----------------------------------------
            // 見出貼付用のキャッシュ処理
            //----------------------------------------
            carInfoRow.CarMngCode = salesSlipHeaderCopyData.CarMngCode; // 車輌管理番号
            carInfoRow.ModelDesignationNo = salesSlipHeaderCopyData.ModelDesignationNo; // 型式指定番号
            carInfoRow.CategoryNo = salesSlipHeaderCopyData.CategoryNo; // 類別番号
            // --- ADD 2009/09/08② ---------->>>>>
            //carInfoRow.FirstEntryDate = TDateTime.LongDateToDateTime( salesSlipHeaderCopyData.FirstEntryDate ); // 年式
            carInfoRow.FirstEntryDate = salesSlipHeaderCopyData.FirstEntryDate; // 年式
            carInfoRow.ProduceTypeOfYearInput = salesSlipHeaderCopyData.FirstEntryDate / 100; // 初年度
            // --- ADD 2009/09/08② ---------->>>>>
            carInfoRow.FrameNo = salesSlipHeaderCopyData.FrameNo; // 車台番号
            try
            {
                // --- DEL 2013/03/21 ---------->>>>>
                //carInfoRow.SearchFrameNo = Int32.Parse(carInfoRow.FrameNo);
                // --- DEL 2013/03/21 ----------<<<<<
                // --- ADD 2013/03/21 ---------->>>>>
                // PMNS:車台番号(検索用)設定
                // 国産/外車区分が外車(2)の場合は車台番号(検索用)に0をセットする
                if (salesSlipHeaderCopyData.DomesticForeignCode == 2)
                {
                    carInfoRow.SearchFrameNo = 0;
                }
                else
                {
                    carInfoRow.SearchFrameNo = Int32.Parse(carInfoRow.FrameNo);
                }
                // --- ADD 2013/03/21 ----------<<<<<
            }
            catch
            {
                carInfoRow.SearchFrameNo = 0;
            }

            // --- ADD 2009/09/08② ---------->>>>>
            carInfoRow.CarMngNo = salesSlipHeaderCopyData.CarMngNo; // 車両管理番号
            carInfoRow.CustomerCode = salesSlipHeaderCopyData.CustomerCode; //得意先コード
            carInfoRow.Mileage = salesSlipHeaderCopyData.Mileage; //車両走行距離
            carInfoRow.CarNote = salesSlipHeaderCopyData.CarNote; //車輌備考
            carInfoRow.CarNoteCode = 0; //車輌備考コード ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218
            carInfoRow.NumberPlate1Code = salesSlipHeaderCopyData.NumberPlate1Code; //陸運事務所番号
            carInfoRow.NumberPlate1Name = salesSlipHeaderCopyData.NumberPlate1Name; //陸運事務局名称
            carInfoRow.NumberPlate2 = salesSlipHeaderCopyData.NumberPlate2; //車両登録番号（種別）
            carInfoRow.NumberPlate3 = salesSlipHeaderCopyData.NumberPlate3; //車両登録番号（カナ）
            carInfoRow.NumberPlate4 = salesSlipHeaderCopyData.NumberPlate4; //車両登録番号（プレート番号）

            carInfoRow.InspectMaturityDate = salesSlipHeaderCopyData.InspectMaturityDate; //車検満期日
            carInfoRow.LTimeCiMatDate = salesSlipHeaderCopyData.LTimeCiMatDate; //前回車検満期日
            carInfoRow.CarInspectYear = salesSlipHeaderCopyData.CarInspectYear; //車検期間
            carInfoRow.EngineModel = salesSlipHeaderCopyData.EngineModel; //原動機型式（エンジン）
            carInfoRow.CarAddInfo1 = salesSlipHeaderCopyData.CarAddInfo1; //車輌追加情報１
            carInfoRow.CarAddInfo2 = salesSlipHeaderCopyData.CarAddInfo2; //車輌追加情報２
            carInfoRow.EntryDate = salesSlipHeaderCopyData.EntryDate; //登録年月日
            carInfoRow.FullModel = salesSlipHeaderCopyData.FullModel; //フル型式
            carInfoRow.EngineModelNm = salesSlipHeaderCopyData.EngineModelNm; //エンジン型式
            // --- ADD 2009/09/08② ----------<<<<<

            // PMNS:国産/外車区分セット
            // --- ADD 2013/03/21 ---------->>>>>
            // ①「見出貼付」の場合、売上伝票には国産/外車区分を保持していないため、
            // 　[salesSlipHeaderCopyData.DomesticForeignCode == 0]となるので
            // 　車両検索情報のデータをそのまま使う
            // 　※[carInfoRow.DomesticForeignCode]には区分がセットされている
            // ②「管理番号」から車両管理マスタに登録されている情報を読み出す場合、
            // 　[salesSlipHeaderCopyData.DomesticForeignCode]には区分がセットされているので
            // 　[carInfoRow.DomesticForeignCode]にデータをセットする
            // 　※このとき、[carInfoRow.DomesticForeignCode == 0]となっている
            if (salesSlipHeaderCopyData.DomesticForeignCode != 0)
            {
                carInfoRow.DomesticForeignCode = salesSlipHeaderCopyData.DomesticForeignCode; // 国産/外車区分
            }
            // --- ADD 2013/03/21 ----------<<<<<
            	
            // --- ADD 2013/04/18 Y.Wakita ---------->>>>>
            // 入力年式をセット
            // --- UPD 2013/05/08 T.Miyamoto ---------->>>>>
            //searchCarInfo.CarModelUIData[0].ProduceTypeOfYearInput = carInfoRow.ProduceTypeOfYearInput;
            if (searchCarInfo != null && searchCarInfo.CarModelUIData != null && searchCarInfo.CarModelUIData.Count > 0)
            {
                searchCarInfo.CarModelUIData[0].ProduceTypeOfYearInput = carInfoRow.ProduceTypeOfYearInput;

                // --- ADD 譚洪 2014/09/01 Redmine#43289---------->>>>>
                searchCarInfo.CarModelUIData[0].ModelDesignationNo = carInfoRow.ModelDesignationNo;
                searchCarInfo.CarModelUIData[0].CategoryNo = carInfoRow.CategoryNo;
                searchCarInfo.CarModelUIData[0].FrameNo = carInfoRow.FrameNo;
                // --- ADD 譚洪 2014/09/01 Redmine#43289----------<<<<<
                
            }
            // --- UPD 2013/05/08 T.Miyamoto ----------<<<<<
            // --- ADD 2013/04/18 Y.Wakita ----------<<<<<

            this.SelectColorInfo( salesDetailRow.CarRelationGuid, salesSlipHeaderCopyData.ColorCode ); // カラー情報
            this.SelectTrimInfo( salesDetailRow.CarRelationGuid, salesSlipHeaderCopyData.TrimCode ); // トリム情報
            this.SelectEquipInfo( salesDetailRow.CarRelationGuid, salesSlipHeaderCopyData.CategoryObjAry ); // 装備情報
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.08.10 ADD


        /// <summary>
        /// 車両情報キャッシュ（車両検索情報からキャッシュ）
        /// </summary>
        /// <param name="carInfoRow">車両情報行オブジェクト</param>
        /// <param name="salesDetailRow">売上明細行オブジェクト</param>
        /// <param name="searchCarInfo">車両検索結果クラス</param>
        /// <br>Update Note: 2009/09/08② 張凱 車両管理番号追加</br>
        private void CacheCarInfo(ref SalesInputDataSet.CarInfoRow carInfoRow, SalesInputDataSet.SalesDetailRow salesDetailRow, PMKEN01010E searchCarInfo)
        {
            PMKEN01010E.CarModelUIDataTable carModelUIDataTable = searchCarInfo.CarModelUIData; // ＵＩ用型式情報テーブル
            PMKEN01010E.CarModelInfoDataTable carModelInfoDataTable = searchCarInfo.CarModelInfoSummarized; // 型式情報要約テーブル

            // --- UPD 2009/09/08② ---------->>>>>
            if (carModelInfoDataTable != null && carModelInfoDataTable.Count > 0)
            {
                //carInfoRow.CarRelationGuid = salesDetailRow.CarRelationGuid; // 車両情報共通キー
                //carInfoRow.CustomerCode = carModelInfoDataTable[0].CustomerCode; // 得意先コード
                //carInfoRow.CarMngNo = carModelInfoDataTable[0].CarMngNo; // 車両管理番号
                //carInfoRow.CarMngCode = carModelInfoDataTable[0].CarMngCode; // 車輌管理コード
                //carInfoRow.NumberPlate1Code = carModelInfoDataTable[0].NumberPlate1Code; // 陸運事務所番号
                //carInfoRow.NumberPlate1Name = carModelInfoDataTable[0].NumberPlate1Name; // 陸運事務局名称
                //carInfoRow.NumberPlate2 = carModelInfoDataTable[0].NumberPlate2; // 車両登録番号（種別）
                //carInfoRow.NumberPlate3 = carModelInfoDataTable[0].NumberPlate3; // 車両登録番号（カナ）
                //carInfoRow.NumberPlate4 = carModelInfoDataTable[0].NumberPlate4; // 車両登録番号（プレート番号）
                //carInfoRow.EntryDate = carModelInfoDataTable[0].EntryDate; // 登録年月日
                //carInfoRow.FirstEntryDate = carModelInfoDataTable[0].FirstEntryDate; // 初年度
                carInfoRow.MakerCode = carModelInfoDataTable[0].MakerCode; // メーカーコード
                carInfoRow.MakerFullName = carModelInfoDataTable[0].MakerFullName; // メーカー全角名称
                carInfoRow.MakerHalfName = carModelInfoDataTable[0].MakerHalfName; // メーカー半角名称
                carInfoRow.ModelCode = carModelInfoDataTable[0].ModelCode; // 車種コード
                carInfoRow.ModelSubCode = carModelInfoDataTable[0].ModelSubCode; // 車種サブコード
                carInfoRow.ModelFullName = carModelInfoDataTable[0].ModelFullName; // 車種全角名称
                if (carInfoRow.ModelFullName.Length > 15) carInfoRow.ModelFullName = carInfoRow.ModelFullName.Substring(0, 15);
                carInfoRow.ModelHalfName = carModelInfoDataTable[0].ModelHalfName; // 車種半角名称
                if (carInfoRow.ModelHalfName.Length > 15) carInfoRow.ModelHalfName = carInfoRow.ModelHalfName.Substring(0, 15);
                carInfoRow.SystematicCode = carModelInfoDataTable[0].SystematicCode; // 系統コード
                carInfoRow.SystematicName = carModelInfoDataTable[0].SystematicName; // 系統名称
                carInfoRow.ProduceTypeOfYearCd = carModelInfoDataTable[0].ProduceTypeOfYearCd; // 生産年式コード
                carInfoRow.ProduceTypeOfYearNm = carModelInfoDataTable[0].ProduceTypeOfYearNm; // 生産年式名称
                DateTime sdt;
                DateTime edt;
                int iyy = carModelInfoDataTable[0].StProduceTypeOfYear / 100;
                int imm = carModelInfoDataTable[0].StProduceTypeOfYear % 100;
                if ((iyy == 9999) || (imm == 99))
                {
                    sdt = DateTime.MinValue;
                }
                else
                {
                    sdt = new DateTime(iyy, imm, 1);
                }
                iyy = carModelInfoDataTable[0].EdProduceTypeOfYear / 100;
                imm = carModelInfoDataTable[0].EdProduceTypeOfYear % 100;
                if ((iyy == 9999) || (imm == 99))
                {
                    edt = DateTime.MinValue;
                }
                else
                {
                    edt = new DateTime(iyy, imm, 1);
                }
                carInfoRow.StProduceTypeOfYear = sdt; // 開始生産年式
                carInfoRow.EdProduceTypeOfYear = edt; // 終了生産年式
                carInfoRow.ProduceTypeOfYearInput = carModelUIDataTable[0].ProduceTypeOfYearInput; // 生産年式入力
                carInfoRow.DoorCount = carModelInfoDataTable[0].DoorCount; // ドア数
                carInfoRow.BodyNameCode = carModelInfoDataTable[0].BodyNameCode; // ボディー名コード
                carInfoRow.BodyName = carModelInfoDataTable[0].BodyName; // ボディー名称
                carInfoRow.ExhaustGasSign = carModelInfoDataTable[0].ExhaustGasSign; // 排ガス記号
                carInfoRow.SeriesModel = carModelInfoDataTable[0].SeriesModel; // シリーズ型式
                carInfoRow.CategorySignModel = carModelInfoDataTable[0].CategorySignModel; // 型式（類別記号）
                carInfoRow.FullModel = carModelInfoDataTable[0].FullModel; // 型式（フル型）
                carInfoRow.ModelDesignationNo = carModelUIDataTable[0].ModelDesignationNo; // 型式指定番号
                carInfoRow.CategoryNo = carModelUIDataTable[0].CategoryNo; // 類別番号
                carInfoRow.FrameModel = carModelInfoDataTable[0].FrameModel; // 車台型式
                carInfoRow.FrameNo = carModelUIDataTable[0].FrameNo; // 車台番号
                carInfoRow.SearchFrameNo = carModelUIDataTable[0].SearchFrameNo; // 車台番号（検索用）
                carInfoRow.StProduceFrameNo = carModelInfoDataTable[0].StProduceFrameNo; // 生産車台番号開始
                carInfoRow.EdProduceFrameNo = carModelInfoDataTable[0].EdProduceFrameNo; // 生産車台番号終了
                carInfoRow.ModelGradeNm = carModelInfoDataTable[0].ModelGradeNm; // 型式グレード名称
                carInfoRow.EngineModelNm = carModelInfoDataTable[0].EngineModelNm; // エンジン型式名称
                carInfoRow.EngineDisplaceNm = carModelInfoDataTable[0].EngineDisplaceNm; // 排気量名称
                carInfoRow.EDivNm = carModelInfoDataTable[0].EDivNm; // E区分名称
                carInfoRow.TransmissionNm = carModelInfoDataTable[0].TransmissionNm; // ミッション名称
                carInfoRow.ShiftNm = carModelInfoDataTable[0].ShiftNm; // シフト名称
                carInfoRow.WheelDriveMethodNm = carModelInfoDataTable[0].WheelDriveMethodNm; // 駆動方式名称
                carInfoRow.AddiCarSpec1 = carModelInfoDataTable[0].AddiCarSpec1; // 追加諸元1
                carInfoRow.AddiCarSpec2 = carModelInfoDataTable[0].AddiCarSpec2; // 追加諸元2
                carInfoRow.AddiCarSpec3 = carModelInfoDataTable[0].AddiCarSpec3; // 追加諸元3
                carInfoRow.AddiCarSpec4 = carModelInfoDataTable[0].AddiCarSpec4; // 追加諸元4
                carInfoRow.AddiCarSpec5 = carModelInfoDataTable[0].AddiCarSpec5; // 追加諸元5
                carInfoRow.AddiCarSpec6 = carModelInfoDataTable[0].AddiCarSpec6; // 追加諸元6
                carInfoRow.AddiCarSpecTitle1 = carModelInfoDataTable[0].AddiCarSpecTitle1; // 追加諸元タイトル1
                carInfoRow.AddiCarSpecTitle2 = carModelInfoDataTable[0].AddiCarSpecTitle2; // 追加諸元タイトル2
                carInfoRow.AddiCarSpecTitle3 = carModelInfoDataTable[0].AddiCarSpecTitle3; // 追加諸元タイトル3
                carInfoRow.AddiCarSpecTitle4 = carModelInfoDataTable[0].AddiCarSpecTitle4; // 追加諸元タイトル4
                carInfoRow.AddiCarSpecTitle5 = carModelInfoDataTable[0].AddiCarSpecTitle5; // 追加諸元タイトル5
                carInfoRow.AddiCarSpecTitle6 = carModelInfoDataTable[0].AddiCarSpecTitle6; // 追加諸元タイトル6
                carInfoRow.RelevanceModel = carModelInfoDataTable[0].RelevanceModel; // 関連型式
                carInfoRow.SubCarNmCd = carModelInfoDataTable[0].SubCarNmCd; // サブ車名コード
                carInfoRow.ModelGradeSname = carModelInfoDataTable[0].ModelGradeSname; // 型式グレード略称
                carInfoRow.BlockIllustrationCd = carModelInfoDataTable[0].BlockIllustrationCd; // ブロックイラストコード
                carInfoRow.ThreeDIllustNo = carModelInfoDataTable[0].ThreeDIllustNo; // 3DイラストNo
                carInfoRow.PartsDataOfferFlag = carModelInfoDataTable[0].PartsDataOfferFlag; // 部品データ提供フラグ
                //carInfoRow.InspectMaturityDate = carModelInfoDataTable[0].InspectMaturityDate; // 車検満期日
                //carInfoRow.LTimeCiMatDate = carModelInfoDataTable[0].LTimeCiMatDate; // 前回車検満期日
                //carInfoRow.CarInspectYear = carModelInfoDataTable[0].CarInspectYear; // 車検期間
                //carInfoRow.Mileage = carModelInfoDataTable[0].Mileage; // 車両走行距離
                //carInfoRow.CarNo = carModelInfoDataTable[0].CarNo; // 号車
                // --- ADD 高川 2012/05/31 №135 ---------->>>>>
                carInfoRow.GradeFullName = carModelInfoDataTable[0].GradeFullName; // グレード名称（全角）
                // --- ADD 高川 2012/05/31 №135 ----------<<<<<

                // PMNS:国産/外車区分セット
                // --- ADD 2013/03/21 ---------->>>>>
                carInfoRow.DomesticForeignCode = carModelInfoDataTable[0].DomesticForeignCode; // 国産/外車区分
                try
                {
                    // ハンドル位置情報を既定値(両型式)とする
                    // ※ハンドル位置チェックを行わないようにする
                    this._handleInfoCode = 0; // ハンドル位置情報

                    // 型式検索で選択されているすべての行を比較する
                    int pos = searchCarInfo.CarModelInfo.HandleInfoCdColumn.Ordinal;
                    int state = searchCarInfo.CarModelInfo.SelectionStateColumn.Ordinal;
                    foreach (DataRow row in searchCarInfo.CarModelInfo.Rows)
                    {
                        // 選択されていない行はスキップする
                        if ((bool)row[state] != true)
                            continue;

                        // ハンドル位置情報をチェックする
                        HandleInfoCdRet posKind = (HandleInfoCdRet)row[pos];
                        if (posKind != HandleInfoCdRet.PositionRight && posKind != HandleInfoCdRet.PositionLeft)
                            continue;

                        // ハンドル位置を比較する
                        if (this._handleInfoCode == 0)
                        {
                            // ハンドル位置情報をセットする
                            this._handleInfoCode = (int)posKind;
                        }
                        else if (this._handleInfoCode == (int)HandleInfoCdRet.PositionRight && posKind == HandleInfoCdRet.PositionLeft)
                        {
                            // 右/左ハンドル混在の場合は両型式とする
                            this._handleInfoCode = 0;
                            break;
                        }
                        else if (this._handleInfoCode == (int)HandleInfoCdRet.PositionLeft && posKind == HandleInfoCdRet.PositionRight)
                        {
                            // 右/左ハンドル混在の場合は両型式とする
                            this._handleInfoCode = 0;
                            break;
                        }
                    }
                }
                catch
                {
                    // 例外が発生した場合は両型式(0)のままとする
                    // ※ハンドル位置チェックを行わないようにする
                    this._handleInfoCode = 0; // ハンドル位置情報
                }
                // --- ADD 2013/03/21 ----------<<<<<
            }
            // --- UPD 2009/09/08② ---------->>>>>

            // --- UPD 2010/04/27 ---------->>>>>
            //carInfoRow.FullModelFixedNoAry = this._carSearchController.GetFullModelFixedNoArray(searchCarInfo.CarModelInfo); // フル型式固定番号配列
            int[] tmp = new int[0];
            string[] tmp2 = new string[0];
            this._carSearchController.GetFullModelFixedNoArrayWithFreeSrchMdlFxdNo(searchCarInfo.CarModelInfo, out tmp, out tmp2);
            carInfoRow.FullModelFixedNoAry = tmp;
            carInfoRow.FreeSrchMdlFxdNoAry = tmp2;
            // --- UPD 2010/04/27 ----------<<<<<
            
            //carInfoRow.ProduceFrameNoInput = carModelInfoDataTable[0].ProduceFrameNoInput; // 車台番号
            //carInfoRow.ProduceTypeOfYearInput = carModelInfoDataTable[0].ProduceTypeOfYearInput; // 年式
            //carInfoRow.ColorCode; // カラーコード
            //carInfoRow.ColorName1; // カラー名称
            //carInfoRow.TrimCode; // トリムコード
            //carInfoRow.TrimName; // トリム名称

            this.CacheColorInfo(salesDetailRow.SalesSlipNum, salesDetailRow.SalesRowNo, searchCarInfo.ColorCdInfo);                         // カラー情報
            this.CacheTrimInfo(salesDetailRow.SalesSlipNum, salesDetailRow.SalesRowNo, searchCarInfo.TrimCdInfo);                           // トリム情報
            this.CacheEquipInfo(salesDetailRow.SalesSlipNum, salesDetailRow.SalesRowNo, searchCarInfo.CEqpDefDspInfo);                      // 装備情報

            carInfoRow.AcceptAnOrderNo = 0; // 受注番号

            // 車両情報Dictionaryキャッシュ
            if (this._carInfo.ContainsKey(carInfoRow.CarRelationGuid)) this._carInfo.Remove(carInfoRow.CarRelationGuid);
            this._carInfo.Add(carInfoRow.CarRelationGuid, searchCarInfo);
        }

        /// <summary>
        /// 車両情報キャッシュ（受注マスタ（車両）からキャッシュ）
        /// </summary>
        /// <param name="salesRowNo">設定対象行番号</param>
        /// <param name="salesDetail">売上明細オブジェクトリスト</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）オブジェクトリスト</param>
        /// <remarks>Call:明細選択</remarks>
        public void CacheCarInfo(int salesRowNo, SalesDetail salesDetail, List<AcceptOdrCar> acceptOdrCarList)
        {
            if (acceptOdrCarList != null)
            {
                AcceptOdrCar acceptOdrCar;
                SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(ctDefaultSalesSlipNum, salesRowNo);
                if (salesDetailRow == null) salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

                acceptOdrCar = this.GetAcceptOdrCar(salesDetail.AcceptAnOrderNo, acceptOdrCarList);
                if (this._carRelationDic.ContainsKey(salesDetail.AcceptAnOrderNo))
                {
                    salesDetailRow.CarRelationGuid = this._carRelationDic[salesDetail.AcceptAnOrderNo];
                }
                else
                {
                    if (acceptOdrCar != null)
                    {
                        this.CacheCarInfo(salesRowNo, null, salesDetail, acceptOdrCar);
                        salesDetailRow.CarRelationGuid = this._carRelationDic[acceptOdrCar.AcceptAnOrderNo];
                    }
                }
            }
        }

        /// <summary>
        /// 車両情報キャッシュ（受注マスタ（車両）からキャッシュ）
        /// </summary>
        /// <param name="baseSalesSlip">処理元売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細オブジェクトリスト</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）オブジェクトリスト</param>
        public void CacheCarInfo(SalesSlip baseSalesSlip, List<SalesDetail> salesDetailList, List<AcceptOdrCar> acceptOdrCarList)
        {
            if (acceptOdrCarList != null)
            {
                // ADD 2012/08/16 yugami ---------------------------------------------->>>>>
                int acceptAnOrderNo = 0;
                // ADD 2012/08/16 yugami ----------------------------------------------<<<<<
                AcceptOdrCar acceptOdrCar;
                foreach (SalesDetail salesDetail in salesDetailList)
                {
                    acceptOdrCar = this.GetAcceptOdrCar(salesDetail.AcceptAnOrderNo, acceptOdrCarList);
                    // CHG 2012/08/16 yugami ---------------------------------------------->>>>>
                    //if (this._carRelationDic.ContainsKey(salesDetail.AcceptAnOrderNo))
                    // 受注番号で受注マスタ（車両）が取得できないが、受注マスタ（車両）が１件しか存在しない時は１件目の受注番号を使用する
                    if (acceptOdrCar == null && acceptOdrCarList.Count == 1)
                    {
                        acceptAnOrderNo = salesDetailList[0].AcceptAnOrderNo;
                    }
                    else
                    {
                        acceptAnOrderNo = salesDetail.AcceptAnOrderNo;
                    }
                    if (this._carRelationDic.ContainsKey(acceptAnOrderNo))
                    // CHG 2012/08/16 yugami ----------------------------------------------<<<<<
                    {
                        SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesDetail.SalesSlipNum, salesDetail.SalesRowNo);
                        // CHG 2012/08/16 yugami ---------------------------------------------->>>>>
                        //salesDetailRow.CarRelationGuid = this._carRelationDic[salesDetail.AcceptAnOrderNo];
                        salesDetailRow.CarRelationGuid = this._carRelationDic[acceptAnOrderNo];
                        // CHG 2012/08/16 yugami ----------------------------------------------<<<<<
                        //>>>2010/02/26
                        SalesInputDataSet.SalesDetailAcceptAnOrderRow acptRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
                        if (acptRow != null) acptRow.CarRelationGuid = salesDetailRow.CarRelationGuid;
                        //<<<2010/02/26
                    }
                    else
                    {
                        if (acceptOdrCar != null) this.CacheCarInfo(baseSalesSlip, salesDetail, acceptOdrCar);
                        // ADD 2013/04/08 SCM障害№10488対応 ------------------------------------------------->>>>>
                        else if (acceptOdrCar == null && acceptOdrCarList.Count == 1) this.CacheCarInfo(baseSalesSlip, salesDetail, acceptOdrCarList[0]);
                        // ADD 2013/04/08 SCM障害№10488対応 -------------------------------------------------<<<<<
                    }
                }
            }
        }

        /// <summary>
        /// 車両情報キャッシュ（受注マスタ（車両）からキャッシュ）
        /// </summary>
        /// <param name="baseSalesSlip">処理元売上データオブジェクト</param>
        /// <param name="salesDetail">売上明細データオブジェクト</param>
        /// <param name="acceptOdrCar">受注マスタ（車両）オブジェクト</param>
        public void CacheCarInfo(SalesSlip baseSalesSlip, SalesDetail salesDetail, AcceptOdrCar acceptOdrCar)
        {
            this.CacheCarInfo(salesDetail.SalesRowNo, baseSalesSlip, salesDetail, acceptOdrCar);
        }

        /// <summary>
        /// 車両情報キャッシュ（受注マスタ（車両）からキャッシュ）
        /// </summary>
        /// <param name="salesRowNo">設定対象行番号</param>
        /// <param name="baseSalesSlip">処理元売上データオブジェクト</param>
        /// <param name="salesDetail">売上明細データオブジェクト</param>
        /// <param name="acceptOdrCar">受注マスタ（車両）オブジェクト</param>
        /// <br>Update Note: 2009/09/08② 張凱 車輌管理機能対応</br>
        /// <br>Update Note: 2010/01/27 張凱 各種車輌検索後のTBO検索を可能対応</br>
        public void CacheCarInfo(int salesRowNo, SalesSlip baseSalesSlip, SalesDetail salesDetail, AcceptOdrCar acceptOdrCar)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(baseSalesSlip, salesRowNo, SalesSlipInputAcs.GetCarInfoMode.NewInsertMode);

            string slipNum = this._currentSalesSlipNum;
            if (baseSalesSlip != null) slipNum = baseSalesSlip.SalesSlipNum;
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(slipNum, salesRowNo);
            SalesInputDataSet.SalesDetailAcceptAnOrderRow acptRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            if (acptRow != null) acptRow.CarRelationGuid = salesDetailRow.CarRelationGuid;

            // 車両再検索
            PMKEN01010E carInfoDataset = new PMKEN01010E();
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/10/15 UPD
            //CarSearchResultReport result = this.SearchCar(acceptOdrCar.FullModelFixedNoAry, acceptOdrCar.ModelDesignationNo, acceptOdrCar.CategoryNo, ref carInfoDataset);

            CarSearchCondition carSearchCond = new CarSearchCondition();

            carSearchCond.CarModel.FullModel = acceptOdrCar.FullModel;
            carSearchCond.MakerCode = acceptOdrCar.MakerCode;
            carSearchCond.ModelCode = acceptOdrCar.ModelCode;
            carSearchCond.ModelSubCode = acceptOdrCar.ModelSubCode;
            // --- ADD 2010/01/27 -------------->>>>>
            carSearchCond.ModelDesignationNo = acceptOdrCar.ModelDesignationNo;
            carSearchCond.CategoryNo = acceptOdrCar.CategoryNo;
            // --- ADD 2010/01/27 --------------<<<<<

            //CarSearchResultReport result = this.SearchCar( acceptOdrCar.FullModelFixedNoAry, carSearchCond, ref carInfoDataset ); // DEL 2010/04/27
            CarSearchResultReport result = this._carSearchController.SearchByFullModelFixedNo(acceptOdrCar.FullModelFixedNoAry, acceptOdrCar.FreeSrchMdlFxdNoAry, carSearchCond, ref carInfoDataset); // ADD 2010/04/27
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/10/15 UPD
            if ((result != CarSearchResultReport.retError) && (result != CarSearchResultReport.retFailed))
            {
                //>>>2011/03/10
                // 入力年式をセット
                //if (carInfoDataset.CarModelUIData != null) carInfoDataset.CarModelUIData[0].ProduceTypeOfYearInput = acceptOdrCar.FirstEntryDate; // DEL 譚洪 2014/09/01 Redmine#43289
                //<<<2011/03/10

                // --- ADD 譚洪 2014/09/01 Redmine#43289---------->>>>>
                if (carInfoDataset.CarModelUIData != null)
                {
                    carInfoDataset.CarModelUIData[0].ProduceTypeOfYearInput = acceptOdrCar.FirstEntryDate;
                    carInfoDataset.CarModelUIData[0].ModelDesignationNo = acceptOdrCar.ModelDesignationNo;
                    carInfoDataset.CarModelUIData[0].CategoryNo = acceptOdrCar.CategoryNo;
                    carInfoDataset.CarModelUIData[0].FrameNo = acceptOdrCar.FrameNo;
                }
                // --- ADD 譚洪 2014/09/01 Redmine#43289----------<<<<<


                this.CacheCarInfo(ref carInfoRow, salesDetailRow, carInfoDataset);
            }

            // ここ
            //carInfoRow.CarRelationGuid = salesDetailRow.CarRelationGuid; // 車両情報共通キー
            //carInfoRow.CustomerCode = acceptOdrCar.CustomerCode; // 得意先コード
            carInfoRow.CarMngNo = acceptOdrCar.CarMngNo; // 車両管理番号
            carInfoRow.CarMngCode = acceptOdrCar.CarMngCode; // 車輌管理コード
            carInfoRow.NumberPlate1Code = acceptOdrCar.NumberPlate1Code; // 陸運事務所番号
            carInfoRow.NumberPlate1Name = acceptOdrCar.NumberPlate1Name; // 陸運事務局名称
            carInfoRow.NumberPlate2 = acceptOdrCar.NumberPlate2; // 車両登録番号（種別）
            carInfoRow.NumberPlate3 = acceptOdrCar.NumberPlate3; // 車両登録番号（カナ）
            carInfoRow.NumberPlate4 = acceptOdrCar.NumberPlate4; // 車両登録番号（プレート番号）
            //carInfoRow.EntryDate = acceptOdrCar.EntryDate; // 登録年月日
            carInfoRow.ProduceTypeOfYearInput = 0; // 初年度

            // --- UPD 2009/09/08② ---------->>>>>
            //if (acceptOdrCar.FirstEntryDate != DateTime.MinValue)
            //{
            //    int iyy = acceptOdrCar.FirstEntryDate.Year * 100;
            //    int imm = acceptOdrCar.FirstEntryDate.Month;
            //    carInfoRow.ProduceTypeOfYearInput = iyy + imm; // 初年度
            //}
            if (acceptOdrCar.FirstEntryDate != 0)
            {
                carInfoRow.ProduceTypeOfYearInput = acceptOdrCar.FirstEntryDate;
            }
            // --- UPD 2009/09/08② ---------->>>>>
            carInfoRow.MakerCode = acceptOdrCar.MakerCode; // メーカーコード
            carInfoRow.MakerFullName = acceptOdrCar.MakerFullName; // メーカー全角名称
            carInfoRow.MakerHalfName = acceptOdrCar.MakerHalfName; // メーカー半角名称
            carInfoRow.ModelCode = acceptOdrCar.ModelCode; // 車種コード
            carInfoRow.ModelSubCode = acceptOdrCar.ModelSubCode; // 車種サブコード
            carInfoRow.ModelFullName = acceptOdrCar.ModelFullName; // 車種全角名称
            carInfoRow.ModelHalfName = acceptOdrCar.ModelHalfName; // 車種半角名称
            //carInfoRow.SystematicCode = acceptOdrCar.SystematicCode; // 系統コード
            //carInfoRow.SystematicName = acceptOdrCar.SystematicName; // 系統名称
            //carInfoRow.ProduceTypeOfYearCd = acceptOdrCar.ProduceTypeOfYearCd; // 生産年式コード
            //carInfoRow.ProduceTypeOfYearNm = acceptOdrCar.ProduceTypeOfYearNm; // 生産年式名称
            //carInfoRow.StProduceTypeOfYear = acceptOdrCar.StProduceTypeOfYear; // 開始生産年式
            //carInfoRow.EdProduceTypeOfYear = acceptOdrCar.EdProduceTypeOfYear; // 終了生産年式
            //carInfoRow.DoorCount = acceptOdrCar.DoorCount; // ドア数
            //carInfoRow.BodyNameCode = acceptOdrCar.BodyNameCode; // ボディー名コード
            //carInfoRow.BodyName = acceptOdrCar.BodyName; // ボディー名称
            carInfoRow.ExhaustGasSign = acceptOdrCar.ExhaustGasSign; // 排ガス記号
            carInfoRow.SeriesModel = acceptOdrCar.SeriesModel; // シリーズ型式
            carInfoRow.CategorySignModel = acceptOdrCar.CategorySignModel; // 型式（類別記号）
            carInfoRow.FullModel = acceptOdrCar.FullModel; // 型式（フル型）
            carInfoRow.ModelDesignationNo = acceptOdrCar.ModelDesignationNo; // 型式指定番号
            carInfoRow.CategoryNo = acceptOdrCar.CategoryNo; // 類別番号
            carInfoRow.FrameModel = acceptOdrCar.FrameModel; // 車台型式
            carInfoRow.FrameNo = acceptOdrCar.FrameNo; // 車台番号
            //carInfoRow.ProduceFrameNoInput = TStrConv.StrToIntDef(acceptOdrCar.FrameNo, 0); // 車台番号
            carInfoRow.SearchFrameNo = acceptOdrCar.SearchFrameNo; // 車台番号（検索用）
            //carInfoRow.StProduceFrameNo = acceptOdrCar.StProduceFrameNo; // 生産車台番号開始
            //carInfoRow.EdProduceFrameNo = acceptOdrCar.EdProduceFrameNo; // 生産車台番号終了
            //carInfoRow.ModelGradeNm = acceptOdrCar.ModelGradeNm; // 型式グレード名称
            carInfoRow.EngineModelNm = acceptOdrCar.EngineModelNm; // エンジン型式名称
            //carInfoRow.EngineDisplaceNm = acceptOdrCar.EngineDisplaceNm; // 排気量名称
            //carInfoRow.EDivNm = acceptOdrCar.EDivNm; // E区分名称
            //carInfoRow.TransmissionNm = acceptOdrCar.TransmissionNm; // ミッション名称
            //carInfoRow.ShiftNm = acceptOdrCar.ShiftNm; // シフト名称
            //carInfoRow.WheelDriveMethodNm = acceptOdrCar.WheelDriveMethodNm; // 駆動方式名称
            //carInfoRow.AddiCarSpec1 = acceptOdrCar.AddiCarSpec1; // 追加諸元1
            //carInfoRow.AddiCarSpec2 = acceptOdrCar.AddiCarSpec2; // 追加諸元2
            //carInfoRow.AddiCarSpec3 = acceptOdrCar.AddiCarSpec3; // 追加諸元3
            //carInfoRow.AddiCarSpec4 = acceptOdrCar.AddiCarSpec4; // 追加諸元4
            //carInfoRow.AddiCarSpec5 = acceptOdrCar.AddiCarSpec5; // 追加諸元5
            //carInfoRow.AddiCarSpec6 = acceptOdrCar.AddiCarSpec6; // 追加諸元6
            //carInfoRow.AddiCarSpecTitle1 = acceptOdrCar.AddiCarSpecTitle1; // 追加諸元タイトル1
            //carInfoRow.AddiCarSpecTitle2 = acceptOdrCar.AddiCarSpecTitle2; // 追加諸元タイトル2
            //carInfoRow.AddiCarSpecTitle3 = acceptOdrCar.AddiCarSpecTitle3; // 追加諸元タイトル3
            //carInfoRow.AddiCarSpecTitle4 = acceptOdrCar.AddiCarSpecTitle4; // 追加諸元タイトル4
            //carInfoRow.AddiCarSpecTitle5 = acceptOdrCar.AddiCarSpecTitle5; // 追加諸元タイトル5
            //carInfoRow.AddiCarSpecTitle6 = acceptOdrCar.AddiCarSpecTitle6; // 追加諸元タイトル6
            carInfoRow.RelevanceModel = acceptOdrCar.RelevanceModel; // 関連型式
            carInfoRow.SubCarNmCd = acceptOdrCar.SubCarNmCd; // サブ車名コード
            carInfoRow.ModelGradeSname = acceptOdrCar.ModelGradeSname; // 型式グレード略称
            //carInfoRow.BlockIllustrationCd = acceptOdrCar.BlockIllustrationCd; // ブロックイラストコード
            //carInfoRow.ThreeDIllustNo = acceptOdrCar.ThreeDIllustNo; // 3DイラストNo
            //carInfoRow.PartsDataOfferFlag = acceptOdrCar.PartsDataOfferFlag; // 部品データ提供フラグ
            //carInfoRow.InspectMaturityDate = acceptOdrCar.InspectMaturityDate; // 車検満期日
            //carInfoRow.LTimeCiMatDate = acceptOdrCar.LTimeCiMatDate; // 前回車検満期日
            //carInfoRow.CarInspectYear = acceptOdrCar.CarInspectYear; // 車検期間
            carInfoRow.Mileage = acceptOdrCar.Mileage; // 車両走行距離
            //carInfoRow.CarNo = acceptOdrCar.CarNo; // 号車
            carInfoRow.FullModelFixedNoAry = acceptOdrCar.FullModelFixedNoAry; // フル型式固定番号配列
            carInfoRow.FreeSrchMdlFxdNoAry = acceptOdrCar.FreeSrchMdlFxdNoAry; // 自由検索型式固定番号配列 // ADD 2010/04/27
            //carInfoRow.ProduceFrameNoInput = acceptOdrCar.ProduceFrameNoInput; // 車台番号
            //carInfoRow.ProduceTypeOfYearInput = acceptOdrCar.ProduceTypeOfYearInput; // 年式
            carInfoRow.ColorCode = acceptOdrCar.ColorCode; // カラーコード
            carInfoRow.ColorName1 = acceptOdrCar.ColorName1; // カラー名称
            carInfoRow.TrimCode = acceptOdrCar.TrimCode; // トリムコード
            carInfoRow.TrimName = acceptOdrCar.TrimName; // トリム名称

            // --- ADD 2009/09/08② ---------->>>>>
            carInfoRow.CarNote = acceptOdrCar.CarNote; // 車輌備考
            carInfoRow.CarNoteCode = 0; //車輌備考コード ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218
            // --- ADD 2009/09/08② ----------<<<<<

            // PMNS:国産/外車区分セット
            // --- ADD 2013/03/21 ---------->>>>>
            carInfoRow.DomesticForeignCode = acceptOdrCar.DomesticForeignCode; // 国産/外車区分
            // --- ADD 2013/03/21 ----------<<<<<

            // --- UPD 2012/09/11 Y.Wakita ---------->>>>>
            //this.SelectColorInfo(salesDetailRow.CarRelationGuid, acceptOdrCar.ColorCode); // カラー情報
            //this.SelectTrimInfo(salesDetailRow.CarRelationGuid, acceptOdrCar.TrimCode); // トリム情報
            this.SelectColorInfo2(salesDetailRow.CarRelationGuid, acceptOdrCar.ColorCode); // カラー情報
            this.SelectTrimInfo2(salesDetailRow.CarRelationGuid, acceptOdrCar.TrimCode); // トリム情報
            // --- UPD 2012/09/11 Y.Wakita ----------<<<<<
            this.SelectEquipInfo(salesDetailRow.CarRelationGuid, acceptOdrCar.CategoryObjAry); // 装備情報

            carInfoRow.AcceptAnOrderNo = acceptOdrCar.AcceptAnOrderNo; // 受注番号

            this._carRelationDic[acceptOdrCar.AcceptAnOrderNo] = carInfoRow.CarRelationGuid; // 車両連結情報
        }

        /// <summary>
        /// 受注マスタ（車両）オブジェクトリストから対象オブジェクトを取得
        /// </summary>
        /// <param name="acceptAnOrderNo">受注番号</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）リスト</param>
        /// <returns>受注マスタ（車両）オブジェクト</returns>
        private AcceptOdrCar GetAcceptOdrCar(int acceptAnOrderNo, List<AcceptOdrCar> acceptOdrCarList)
        {
            foreach (AcceptOdrCar acceptOdrCar in acceptOdrCarList)
            {
                if (acceptAnOrderNo == acceptOdrCar.AcceptAnOrderNo)
                {
                    return acceptOdrCar;
                }
            }
            return null;
        }

        #region ○諸元情報
        /// <summary>
        /// 諸元情報設定処理(車両情報行オブジェクト→諸元情報行オブジェクト)
        /// </summary>
        /// <param name="carModelUIRow">諸元情報行オブジェクト</param>
        /// <param name="carInfoRow">車両情報行オブジェクト</param>
        public void SetCarSpecFromCarInfoRow(ref SalesInputDataSet.CarSpecRow carSpecRow, SalesInputDataSet.CarInfoRow carInfoRow)
        {
            if (carInfoRow == null) return;

            carSpecRow.ModelGradeNm = carInfoRow.ModelGradeNm;                     // グレード
            carSpecRow.BodyName = carInfoRow.BodyName;                             // ボディ
            carSpecRow.DoorCount = carInfoRow.DoorCount;                           // ドア
            carSpecRow.EDivNm = carInfoRow.EDivNm;                                 // Ｅ区分
            carSpecRow.EngineDisplaceNm = carInfoRow.EngineDisplaceNm;             // 排気量
            carSpecRow.EngineModelNm = carInfoRow.EngineModelNm;                   // エンジン
            carSpecRow.ShiftNm = carInfoRow.ShiftNm;                               // シフト
            carSpecRow.TransmissionNm = carInfoRow.TransmissionNm;                 // ミッション
            carSpecRow.WheelDriveMethodNm = carInfoRow.WheelDriveMethodNm;         // 駆動方式
            carSpecRow.AddiCarSpec1 = carInfoRow.AddiCarSpec1;                     // 追加諸元１
            carSpecRow.AddiCarSpec2 = carInfoRow.AddiCarSpec2;                     // 追加諸元２ 
            carSpecRow.AddiCarSpec3 = carInfoRow.AddiCarSpec3;                     // 追加諸元３
            carSpecRow.AddiCarSpec4 = carInfoRow.AddiCarSpec4;                     // 追加諸元４
            carSpecRow.AddiCarSpec5 = carInfoRow.AddiCarSpec5;                     // 追加諸元５
            carSpecRow.AddiCarSpec6 = carInfoRow.AddiCarSpec6;                     // 追加諸元６
        }
        #endregion

        #region ○カラー情報
        /// <summary>
        /// カラー情報キャッシュ
        /// </summary>
        /// <param name="salesSlipNum">売上伝票番号</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="colorCdInfoDataTable">カラー情報データテーブル</param>
        private void CacheColorInfo(string salesSlipNum, int salesRowNo, PMKEN01010E.ColorCdInfoDataTable colorCdInfoDataTable)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesSlipNum, salesRowNo);
            if (this._colorInfoDic.ContainsKey(row.CarRelationGuid)) this._colorInfoDic.Remove(row.CarRelationGuid);
            //this._colorInfoDic.Add(row.CarRelationGuid, colorCdInfoDataTable);

            // --- ADD 2010/06/02 ---------->>>>>
            PMKEN01010E.ColorCdInfoDataTable table = new PMKEN01010E.ColorCdInfoDataTable();
            foreach (PMKEN01010E.ColorCdInfoRow colorCdInfoRow in colorCdInfoDataTable)
            {
                PMKEN01010E.ColorCdInfoRow[] dataRows = (PMKEN01010E.ColorCdInfoRow[])table.Select(string.Format("{0}='{1}'", table.ColorCodeColumn.ColumnName, colorCdInfoRow.ColorCode));

                if (dataRows.Length == 0)
                {
                    table.ImportRow(colorCdInfoRow);
                }
            }
            this._colorInfoDic.Add(row.CarRelationGuid, table);
            // --- ADD 2010/06/02 ----------<<<<<
            //this._colorInfoDic.Add(row.CarRelationGuid, colorCdInfoDataTable);  // DEL 2010/06/02

        }

        /// <summary>
        /// カラー情報取得処理
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>カラー情報データテーブル</returns>
        public PMKEN01010E.ColorCdInfoDataTable GetColorInfo(int salesRowNo)
        {
            PMKEN01010E.ColorCdInfoDataTable colorInfoDataTable = null;
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (salesDetailRow != null)
            {
                colorInfoDataTable = this.GetColorInfo(salesDetailRow.CarRelationGuid);
            }
            return colorInfoDataTable;
        }

        /// <summary>
        /// カラー情報取得処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <returns>カラー情報データテーブル</returns>
        public PMKEN01010E.ColorCdInfoDataTable GetColorInfo(Guid carRelationGuid)
        {
            PMKEN01010E.ColorCdInfoDataTable colorInfoDataTable = null;
            if (this._colorInfoDic.ContainsKey(carRelationGuid))
            {
                colorInfoDataTable = this._colorInfoDic[carRelationGuid];
            }
            return colorInfoDataTable;
        }

        /// <summary>
        /// 選択カラー情報取得処理
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>カラー情報行オブジェクト</returns>
        public PMKEN01010E.ColorCdInfoRow GetSelectColorInfo(int salesRowNo)
        {
            PMKEN01010E.ColorCdInfoRow colorInfoRow = null;
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (salesDetailRow != null)
            {
                colorInfoRow = this.GetSelectColorInfo(salesDetailRow.CarRelationGuid);
            }
            return colorInfoRow;
        }

        /// <summary>
        /// 選択カラー情報取得処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <returns>カラー情報行オブジェクト</returns>
        public PMKEN01010E.ColorCdInfoRow GetSelectColorInfo(Guid carRelationGuid)
        {
            PMKEN01010E.ColorCdInfoRow colorInfoRow = null;
            if (this._colorInfoDic.ContainsKey(carRelationGuid))
            {
                PMKEN01010E.ColorCdInfoDataTable colorInfoDataTable = this._colorInfoDic[carRelationGuid];
                PMKEN01010E.ColorCdInfoRow[] rows = (PMKEN01010E.ColorCdInfoRow[])colorInfoDataTable.Select(string.Format("{0}={1}", colorInfoDataTable.SelectionStateColumn.ColumnName, true));
                if (rows.Length > 0) colorInfoRow = rows[0];
            }
            return colorInfoRow;
        }

        /// <summary>
        /// カラー情報選択処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="colorCode">カラーコード</param>
        /// <returns>true:該当あり正常選択 false:該当なし</returns>
        public bool SelectColorInfo(Guid carRelationGuid, string colorCode)
        {
            bool ret = false;
            if (this._colorInfoDic.ContainsKey(carRelationGuid))
            {
                PMKEN01010E.ColorCdInfoDataTable colorInfoDataTable = this._colorInfoDic[carRelationGuid];
                ret = this.SelectColorInfo(carRelationGuid, colorInfoDataTable, colorCode);
            }
            // --- ADD 2012/09/15 T.Nishi ---------->>>>>
            else
            {
                if (colorCode != string.Empty)
                {
                    ret = this.SettingCarInfoRowFromColorCode(carRelationGuid, colorCode);
                }
            }
            // --- ADD 2012/09/15 T.Nishi ----------<<<<<
            return ret;
        }

        /// <summary>
        /// カラー情報選択処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="colorInfoDataTable">カラー情報データテーブル</param>
        /// <param name="colorCode">カラーコード</param>
        /// <returns>true:該当あり正常選択 false:該当なし</returns>
        private bool SelectColorInfo(Guid carRelationGuid, PMKEN01010E.ColorCdInfoDataTable colorInfoDataTable, string colorCode)
        {
            bool ret = false;
            this.SettingColorInfoAllState(colorInfoDataTable, false);   // 全明細選択解除
            this.ClearCarInfoRowForColorInfo(carRelationGuid);
            if (colorCode != string.Empty)
            {
                PMKEN01010E.ColorCdInfoRow[] rows = (PMKEN01010E.ColorCdInfoRow[])colorInfoDataTable.Select(string.Format("{0}='{1}'", colorInfoDataTable.ColorCodeColumn.ColumnName, colorCode));
                if (rows.Length > 0)
                {
                    PMKEN01010E.ColorCdInfoRow colorInfoRow = rows[0];
                    colorInfoRow.SelectionState = true;
                    this.SettingCarInfoRowFromColorInfo(carRelationGuid, colorInfoRow);
                    ret = true;
                }
                // --- ADD 2012/09/04 Y.Wakita ---------->>>>>
                else
                {
                    ret = this.SettingCarInfoRowFromColorCode(carRelationGuid, colorCode);
                }
                // --- ADD 2012/09/04 Y.Wakita ----------<<<<<
            }
            return ret;
        }

        // --- ADD 2012/09/11 Y.Wakita ---------->>>>>
        /// <summary>
        /// カラー情報選択処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="colorCode">カラーコード</param>
        /// <returns>true:該当あり正常選択 false:該当なし</returns>
        public bool SelectColorInfo2(Guid carRelationGuid, string colorCode)
        {
            bool ret = false;
            if (this._colorInfoDic.ContainsKey(carRelationGuid))
            {
                PMKEN01010E.ColorCdInfoDataTable colorInfoDataTable = this._colorInfoDic[carRelationGuid];
                ret = this.SelectColorInfo2(carRelationGuid, colorInfoDataTable, colorCode);
            }
            // --- ADD 2012/09/15 T.Nishi ---------->>>>>
            else
            {
                if (colorCode != string.Empty)
                {
                    ret = this.SettingCarInfoRowFromColorCode(carRelationGuid, colorCode);
                }
            }
            // --- ADD 2012/09/15 T.Nishi ----------<<<<<

            return ret;
        }

        /// <summary>
        /// カラー情報選択処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="colorInfoDataTable">カラー情報データテーブル</param>
        /// <param name="colorCode">カラーコード</param>
        /// <returns>true:該当あり正常選択 false:該当なし</returns>
        private bool SelectColorInfo2(Guid carRelationGuid, PMKEN01010E.ColorCdInfoDataTable colorInfoDataTable, string colorCode)
        {
            bool ret = false;
            this.SettingColorInfoAllState(colorInfoDataTable, false);   // 全明細選択解除
            this.ClearCarInfoRowForColorInfo(carRelationGuid);
            if (colorCode != string.Empty)
            {
                PMKEN01010E.ColorCdInfoRow[] rows = (PMKEN01010E.ColorCdInfoRow[])colorInfoDataTable.Select(string.Format("{0}='{1}'", colorInfoDataTable.ColorCodeColumn.ColumnName, colorCode));
                if (rows.Length > 0)
                {
                    PMKEN01010E.ColorCdInfoRow colorInfoRow = rows[0];
                    colorInfoRow.SelectionState = true;
                    this.SettingCarInfoRowFromColorInfo(carRelationGuid, colorInfoRow);
                    ret = true;
                }
                else
                {
                    // 車両情報行オブジェクト取得
                    SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);
                    if (carInfoRow != null)
                    {
                        carInfoRow.ColorCode = colorCode;   // カラーコード
                        ret = true;
                    }
                }
            }
            return ret;
        }
        // --- ADD 2012/09/11 Y.Wakita ----------<<<<<

        /// <summary>
        /// カラー情報全明細選択／解除処理
        /// </summary>
        /// <param name="colorInfoDataTable">カラー情報データテーブル</param>
        /// <param name="state">選択状態</param>
        public void SettingColorInfoAllState(PMKEN01010E.ColorCdInfoDataTable colorInfoDataTable, bool state)
        {
            foreach (PMKEN01010E.ColorCdInfoRow colorInfoRow in colorInfoDataTable)
            {
                colorInfoRow.SelectionState = state;
            }
        }
        #endregion

        #region ○トリム情報
        /// <summary>
        /// トリム情報キャッシュ
        /// </summary>
        /// <param name="salesSlipNum">売上伝票番号</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="trimCdInfoDataTable">トリム情報データテーブル</param>
        private void CacheTrimInfo(string salesSlipNum, int salesRowNo, PMKEN01010E.TrimCdInfoDataTable trimCdInfoDataTable)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesSlipNum, salesRowNo);
            if (this._trimInfoDic.ContainsKey(row.CarRelationGuid)) this._trimInfoDic.Remove(row.CarRelationGuid);
            this._trimInfoDic.Add(row.CarRelationGuid, trimCdInfoDataTable);
        }

        /// <summary>
        /// トリム情報取得処理
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>トリム情報データテーブル</returns>
        public PMKEN01010E.TrimCdInfoDataTable GetTrimInfo(int salesRowNo)
        {
            PMKEN01010E.TrimCdInfoDataTable trimInfoDataTable = null;
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (salesDetailRow != null)
            {
                trimInfoDataTable = this.GetTrimInfo(salesDetailRow.CarRelationGuid);
            }
            return trimInfoDataTable;
        }

        /// <summary>
        /// トリム情報取得処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <returns>トリム情報データテーブル</returns>
        public PMKEN01010E.TrimCdInfoDataTable GetTrimInfo(Guid carRelationGuid)
        {
            PMKEN01010E.TrimCdInfoDataTable trimInfoDataTable = null;
            if (this._trimInfoDic.ContainsKey(carRelationGuid))
            {
                trimInfoDataTable = this._trimInfoDic[carRelationGuid];
            }
            return trimInfoDataTable;
        }

        /// <summary>
        /// 選択トリム情報取得処理
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>トリム情報行オブジェクト</returns>
        public PMKEN01010E.TrimCdInfoRow GetSelectTrimInfo(int salesRowNo)
        {
            PMKEN01010E.TrimCdInfoRow trimInfoRow = null;
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (salesDetailRow != null)
            {
                trimInfoRow = this.GetSelectTrimInfo(salesDetailRow.CarRelationGuid);
            }
            return trimInfoRow;
        }

        /// <summary>
        /// 選択トリム情報取得処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <returns>トリム情報行オブジェクト</returns>
        public PMKEN01010E.TrimCdInfoRow GetSelectTrimInfo(Guid carRelationGuid)
        {
            PMKEN01010E.TrimCdInfoRow trimInfoRow = null;
            if (this._trimInfoDic.ContainsKey(carRelationGuid))
            {
                PMKEN01010E.TrimCdInfoDataTable trimInfoDataTable = this._trimInfoDic[carRelationGuid];
                PMKEN01010E.TrimCdInfoRow[] rows = (PMKEN01010E.TrimCdInfoRow[])trimInfoDataTable.Select(string.Format("{0}={1}", trimInfoDataTable.SelectionStateColumn.ColumnName, true));
                if (rows.Length > 0) trimInfoRow = rows[0];
            }
            return trimInfoRow;
        }

        /// <summary>
        /// トリム情報選択処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="trimCode">トリムコード</param>
        /// <returns>true:該当あり正常選択 false:該当なし</returns>
        public bool SelectTrimInfo(Guid carRelationGuid, string trimCode)
        {
            bool ret = false;
            if (this._trimInfoDic.ContainsKey(carRelationGuid))
            {
                PMKEN01010E.TrimCdInfoDataTable trimInfoDataTable = this._trimInfoDic[carRelationGuid];
                ret = this.SelectTrimInfo(carRelationGuid, trimInfoDataTable, trimCode);
            }
            // --- ADD 2012/09/15 T.Nishi ---------->>>>>
            else
            {
                if (trimCode != string.Empty)
                {
                    ret = this.SettingCarInfoRowFromTrimCode(carRelationGuid, trimCode);
                }
            }
            // --- ADD 2012/09/15 T.Nishi ----------<<<<<
            return ret;
        }

        /// <summary>
        /// トリム情報選択処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="trimInfoDataTable">トリム情報データテーブル</param>
        /// <param name="trimCode">トリムコード</param>
        /// <returns>true:該当あり正常選択 false:該当なし</returns>
        public bool SelectTrimInfo(Guid carRelationGuid, PMKEN01010E.TrimCdInfoDataTable trimInfoDataTable, string trimCode)
        {
            bool ret = false;
            this.SettingTrimInfoAllState(trimInfoDataTable, false); // 全明細選択解除
            this.ClearCarInfoRowForTrimInfo(carRelationGuid);
            if (trimCode != string.Empty)
            {
                PMKEN01010E.TrimCdInfoRow[] rows = (PMKEN01010E.TrimCdInfoRow[])trimInfoDataTable.Select(string.Format("{0}='{1}'", trimInfoDataTable.TrimCodeColumn.ColumnName, trimCode));
                if (rows.Length > 0)
                {
                    PMKEN01010E.TrimCdInfoRow trimInfoRow = rows[0];
                    trimInfoRow.SelectionState = true;
                    this.SettingCarInfoRowFromTrimInfo(carRelationGuid, trimInfoRow);
                    ret = true;
                }
                // --- ADD 2012/09/04 Y.Wakita ---------->>>>>
                else
                {
                    ret = this.SettingCarInfoRowFromTrimCode(carRelationGuid, trimCode);
                }
                // --- ADD 2012/09/04 Y.Wakita ----------<<<<<
            }
            return ret;
        }

        // --- ADD 2012/09/11 Y.Wakita ---------->>>>>
        /// <summary>
        /// トリム情報選択処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="trimCode">トリムコード</param>
        /// <returns>true:該当あり正常選択 false:該当なし</returns>
        public bool SelectTrimInfo2(Guid carRelationGuid, string trimCode)
        {
            bool ret = false;
            if (this._trimInfoDic.ContainsKey(carRelationGuid))
            {
                PMKEN01010E.TrimCdInfoDataTable trimInfoDataTable = this._trimInfoDic[carRelationGuid];
                ret = this.SelectTrimInfo2(carRelationGuid, trimInfoDataTable, trimCode);
            }
            // --- ADD 2012/09/15 T.Nishi ---------->>>>>
            else
            {
                if (trimCode != string.Empty)
                {
                    ret = this.SettingCarInfoRowFromTrimCode(carRelationGuid, trimCode);
                }
            }
            // --- ADD 2012/09/15 T.Nishi ----------<<<<<
            return ret;
        }

        /// <summary>
        /// トリム情報選択処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="trimInfoDataTable">トリム情報データテーブル</param>
        /// <param name="trimCode">トリムコード</param>
        /// <returns>true:該当あり正常選択 false:該当なし</returns>
        public bool SelectTrimInfo2(Guid carRelationGuid, PMKEN01010E.TrimCdInfoDataTable trimInfoDataTable, string trimCode)
        {
            bool ret = false;
            this.SettingTrimInfoAllState(trimInfoDataTable, false); // 全明細選択解除
            this.ClearCarInfoRowForTrimInfo(carRelationGuid);
            if (trimCode != string.Empty)
            {
                PMKEN01010E.TrimCdInfoRow[] rows = (PMKEN01010E.TrimCdInfoRow[])trimInfoDataTable.Select(string.Format("{0}='{1}'", trimInfoDataTable.TrimCodeColumn.ColumnName, trimCode));
                if (rows.Length > 0)
                {
                    PMKEN01010E.TrimCdInfoRow trimInfoRow = rows[0];
                    trimInfoRow.SelectionState = true;
                    this.SettingCarInfoRowFromTrimInfo(carRelationGuid, trimInfoRow);
                    ret = true;
                }
                else
                {
                    // 車両情報行オブジェクト取得
                    SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);
                    if (carInfoRow != null)
                    {
                        carInfoRow.TrimCode = trimCode; // トリムコード
                        ret = true;
                    }
                }
            }
            return ret;
        }
        // --- ADD 2012/09/11 Y.Wakita ----------<<<<<

        /// <summary>
        /// トリム情報全明細選択／解除処理
        /// </summary>
        /// <param name="trimInfoDataTable">トリム情報データテーブル</param>
        /// <param name="state">選択状態</param>
        public void SettingTrimInfoAllState(PMKEN01010E.TrimCdInfoDataTable trimInfoDataTable, bool state)
        {
            foreach (PMKEN01010E.TrimCdInfoRow trimInfoRow in trimInfoDataTable)
            {
                trimInfoRow.SelectionState = state;
            }
        }
        #endregion

        #region ○装備情報
        /// <summary>
        /// 装備情報キャッシュ
        /// </summary>
        /// <param name="salesSlipNum">売上伝票番号</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="cEqpDefDspInfoDataTable">装備情報データテーブル</param>
        private void CacheEquipInfo(string salesSlipNum, int salesRowNo, PMKEN01010E.CEqpDefDspInfoDataTable cEqpDefDspInfoDataTable)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesSlipNum, salesRowNo);
            if (this._cEqpDspInfoDic.ContainsKey(row.CarRelationGuid)) this._cEqpDspInfoDic.Remove(row.CarRelationGuid);
            this._cEqpDspInfoDic.Add(row.CarRelationGuid, cEqpDefDspInfoDataTable);
        }

        /// <summary>
        /// 装備情報取得処理
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>装備情報データテーブル</returns>
        public PMKEN01010E.CEqpDefDspInfoDataTable GetEquipInfo(int salesRowNo)
        {
            PMKEN01010E.CEqpDefDspInfoDataTable equipInfoDataTable = null;
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (salesDetailRow != null)
            {
                equipInfoDataTable = this.GetEquipInfo(salesDetailRow.CarRelationGuid);
            }
            return equipInfoDataTable;
        }

        /// <summary>
        /// 装備情報取得処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <returns>装備情報データテーブル</returns>
        public PMKEN01010E.CEqpDefDspInfoDataTable GetEquipInfo(Guid carRelationGuid)
        {
            PMKEN01010E.CEqpDefDspInfoDataTable equipInfoDataTable = null;
            if (this._cEqpDspInfoDic.ContainsKey(carRelationGuid))
            {
                equipInfoDataTable = this._cEqpDspInfoDic[carRelationGuid];
            }
            return equipInfoDataTable;
        }

        /// <summary>
        /// 装備情報行オブジェクト配列取得
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <returns>装備情報バイト配列</returns>
        private byte[] GetEquipInfoRows(Guid carRelationGuid)
        {
            byte[] equipInfoRows = new byte[0];
            if (this._cEqpDspInfoDic.ContainsKey(carRelationGuid))
            {
                // 装備情報データテーブル取得
                PMKEN01010E.CEqpDefDspInfoDataTable equipInfoDataTable = this._cEqpDspInfoDic[carRelationGuid];

                if (equipInfoDataTable != null)
                {
                    // 装備情報バイト配列
                    equipInfoRows = equipInfoDataTable.GetByteArray(true);
                }
            }
            return equipInfoRows;
        }

        /// <summary>
        /// 装備情報選択処理
        /// </summary>
        /// <param name="carRelationGuid"></param>
        /// <param name="equipmentGenreCd"></param>
        /// <param name="selectIndex"></param>
        /// <returns></returns>
        public bool SelectEquipInfo(Guid carRelationGuid, string equipmentGenreCd, int selectIndex)
        {
            bool ret = false;
            if (this._cEqpDspInfoDic.ContainsKey(carRelationGuid))
            {
                PMKEN01010E.CEqpDefDspInfoDataTable eqpDspInfoDataTable = this._cEqpDspInfoDic[carRelationGuid];
                ret = this.SelectEquipInfo(carRelationGuid, eqpDspInfoDataTable, equipmentGenreCd, selectIndex);
            }
            return ret;
        }

        /// <summary>
        /// 装備情報選択処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="eqpDspInfoDataTable">装備情報データテーブル</param>
        /// <param name="equipmentGenreCd">装備キー</param>
        /// <param name="equipmentCode"></param>
        /// <returns></returns>
        private bool SelectEquipInfo(Guid carRelationGuid, PMKEN01010E.CEqpDefDspInfoDataTable eqpDspInfoDataTable, string equipmentGenreCd, int selectIndex)
        {
            bool ret = false;

            PMKEN01010E.CEqpDefDspInfoRow[] rows = (PMKEN01010E.CEqpDefDspInfoRow[])eqpDspInfoDataTable.Select(string.Format("{0}='{1}'", eqpDspInfoDataTable.EquipmentGenreNmColumn.ColumnName, equipmentGenreCd));
            if (rows.Length > 0)
            {
                this.SettingEquipInfoAllState(eqpDspInfoDataTable, equipmentGenreCd, false);
                PMKEN01010E.CEqpDefDspInfoRow equipInfoRow = rows[selectIndex];
                equipInfoRow.SelectionState = true;
                ret = true;
            }
            return ret;
        }

        /// <summary>
        /// 装備情報選択処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="categoryObjAry">装備情報配列</param>
        private void SelectEquipInfo(Guid carRelationGuid, byte[] categoryObjAry)
        {
            if ((this._cEqpDspInfoDic.ContainsKey(carRelationGuid)) && (categoryObjAry != null))
            {
                PMKEN01010E.CEqpDefDspInfoDataTable eqpDspInfoDataTable = this._cEqpDspInfoDic[carRelationGuid];
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.08.10 DEL
                //eqpDspInfoDataTable.SetTableFromByteArray(categoryObjAry);
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.08.10 DEL
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.08.10 ADD
                if ( categoryObjAry.Length > 0 )
                {
                    // 指定の装備を選択状態にする
                    eqpDspInfoDataTable.SetTableFromByteArray( categoryObjAry );
                }
                else
                {
                    // 全て解除
                    foreach ( PMKEN01010E.CEqpDefDspInfoRow row in eqpDspInfoDataTable.Rows )
                    {
                        row.SelectionState = false;
                    }
                }
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.08.10 ADD
            }
        }

        /// <summary>
        /// 装備情報対象装備明細選択／解除処理
        /// </summary>
        /// <param name="trimInfoDataTable">トリム情報データテーブル</param>
        /// <param name="state">選択状態</param>
        public void SettingEquipInfoAllState(PMKEN01010E.CEqpDefDspInfoDataTable equipInfoDataTable, string key, bool state)
        {
            PMKEN01010E.CEqpDefDspInfoRow[] rows = (PMKEN01010E.CEqpDefDspInfoRow[])equipInfoDataTable.Select(string.Format("{0}='{1}'", equipInfoDataTable.EquipmentGenreNmColumn.ColumnName, key));

            foreach (PMKEN01010E.CEqpDefDspInfoRow row in rows)
            {
                row.SelectionState = state;
            }
        }

        #endregion

        #region ○車種情報
        /// <summary>
        /// 車種名称取得処理
        /// </summary>
        /// <param name="makerCode">カーメーカーコード</param>
        /// <param name="modelCode">車種コード</param>
        /// <param name="modelSubCode">車種サブコード</param>
        /// <returns></returns>
        public string GetModelFullName(int makerCode, int modelCode, int modelSubCode)
        {
            string retName = string.Empty;
            ModelNameU modelNameU = new ModelNameU();
            modelNameU = this.GetModelInfo(makerCode, modelCode, modelSubCode);
            if (modelNameU != null) retName = modelNameU.ModelFullName;

            return retName;
        }

        /// <summary>
        /// 車種半角名称取得処理
        /// </summary>
        /// <param name="makerCode">カーメーカーコード</param>
        /// <param name="modelCode">車種コード</param>
        /// <param name="modelSubCode">車種サブコード</param>
        /// <returns></returns>
        public string GetModelHalfName(int makerCode, int modelCode, int modelSubCode)
        {
            string retName = string.Empty;
            ModelNameU modelNameU = new ModelNameU();
            modelNameU = this.GetModelInfo(makerCode, modelCode, modelSubCode);
            if (modelNameU != null) retName = modelNameU.ModelHalfName;

            return retName;
        }

        /// <summary>
        /// 車種情報取得処理
        /// </summary>
        /// <param name="makerCode">カーメーカーコード</param>
        /// <param name="modelCode">車種コード</param>
        /// <param name="modelSubCode">車種サブコード</param>
        /// <returns></returns>
        private ModelNameU GetModelInfo(int makerCode, int modelCode, int modelSubCode)
        {
            ModelNameU modelNameU = null;

            if ((modelCode == 0) && (modelSubCode == 0)) return modelNameU;

            int status = this._modelNameUAcs.Read(out modelNameU, this._enterpriseCode, makerCode, modelCode, modelSubCode);

            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) modelNameU = null;

            return modelNameU;
        }
        #endregion

        /// <summary>
        /// 車両管理ワークオブジェクトリストを車両情報テーブルから取得
        /// </summary>
        /// <param name="carManagementWorkList">車両管理ワークオブジェクトリスト</param>
        private void GetCurrentCarManagementWorkList(out ArrayList carManagementWorkList)
        {
            //------------------------------------------------------------------------------------
            // リスト構成
            //------------------------------------------------------------------------------------
            // ArrayList                    車両情報リスト
            //      --CarManagementWork     車両管理ワークオブジェクト
            //------------------------------------------------------------------------------------

            carManagementWorkList = null;
            if ((this._carInfoDataTable != null) && (this._carInfoDataTable.Count != 0))
            {
                //-----------------------------------------------------
                // 車両情報リスト取得
                //-----------------------------------------------------
                this.GetCarManagementWorkListFromCarInfoTable(this._carInfoDataTable, out carManagementWorkList);
            }
        }

        /// <summary>
        /// 車両管理ワークオブジェクトリスト取得処理
        /// </summary>
        /// <param name="carInfoDataTable">車両情報テーブル</param>
        /// <param name="carManagementWorkList">車両管理ワークオブジェクトリスト</param>
        private void GetCarManagementWorkListFromCarInfoTable(SalesInputDataSet.CarInfoDataTable carInfoDataTable, out ArrayList carManagementWorkList)
        {
            carManagementWorkList = new ArrayList();

            foreach (SalesInputDataSet.CarInfoRow carInfoRow in carInfoDataTable)
            {
                CarManagementWork carManagementWork = this.GetParamDataFromCarInfoRow(carInfoRow);
                CarManagementWork clearCarManagementWork = new CarManagementWork();
                ArrayList differentList = carManagementWork.Compare(clearCarManagementWork);

                if (differentList.Count > 1)
                {
                    if (carManagementWork != null) carManagementWorkList.Add(carManagementWork);
                }
            }
        }

        /// <summary>
        /// 車両管理ワークオブジェクト取得処理
        /// </summary>
        /// <param name="carManagementWork"></param>
        /// <param name="CarRelationGuid"></param>
        /// <param name="carManagementWorkList"></param>
        private void GetCarManagementWorkFromCarManagementWorkList(out CarManagementWork carManagementWork, Guid CarRelationGuid, ArrayList carManagementWorkList)
        {
            carManagementWork = null;

            if ((carManagementWorkList == null) || (carManagementWorkList.Count == 0)) return;

            foreach (CarManagementWork cManagementWork in carManagementWorkList)
            {
                if (cManagementWork.CarRelationGuid == CarRelationGuid)
                {
                    carManagementWork = cManagementWork;
                    return;
                }
            }
            return;
        }

        /// <summary>
        /// 車両管理ワークオブジェクトを車両情報行オブジェクトから取得
        /// </summary>
        /// <param name="carInfoRow">車両情報行オブジェクト</param>
        /// <returns></returns>
        /// <br>Update Note: 2009/09/08② 張凱 車輌管理機能対応</br>
        /// <br>Update Note: 2014/11/18 劉超</br>
        /// <br>管理番号   : 11002003-00　RedMine#43035</br>
        /// <br>         　: 車輛出荷部品表示に表示されないデータの調査</br>
        private CarManagementWork GetParamDataFromCarInfoRow(SalesInputDataSet.CarInfoRow carInfoRow)
        {
            CarManagementWork carManagementWork = new CarManagementWork();

            // ここ
            //carManagementWork.EnterpriseCode = this._enterpriseCode;                // 企業コード
            //carManagementWork.CustomerCode = this._salesSlip.CustomerCode;          // 得意先コード
            carManagementWork.EnterpriseCode = string.Empty;                        // 企業コード
            carManagementWork.CustomerCode = carInfoRow.CustomerCode;               // 得意先コード
            // --- UPD 2009/09/08② -------------->>>
            //carManagementWork.CarMngNo = carInfoRow.CarMngNo;                       // 車両管理番号
            //しない、登録無
            if (this.SalesSlip.CarMngDivCd == 0)
            {
                carManagementWork.CarMngNo = 0;
            }
            //登録(確認:はい)
            else if (this.SalesSlip.CarMngDivCd == 1)
            {
                //車輌管理コード無し
                if (string.IsNullOrEmpty(carInfoRow.CarMngCode))
                {
                    carManagementWork.CarMngNo = 0;
                }
                else
                {
                    carManagementWork.CarMngNo = carInfoRow.CarMngNo;                       // 車両管理番号
                }
            }
            //登録(確認:いいえ)
            else if (this.SalesSlip.CarMngDivCd == 2)
            {
                //車輌管理コード無し
                if (string.IsNullOrEmpty(carInfoRow.CarMngCode))
                {
                    carManagementWork.CarMngNo = 0;
                }
                else
                {
            carManagementWork.CarMngNo = carInfoRow.CarMngNo;                       // 車両管理番号
                }

                //this.SalesSlip.CarMngDivCd = 0; // DEL 2014/11/18 劉超 FOR Redmine#43035
            }
            //修正モード修正呼び出し時の登録パターン
            else
            {
                if (!string.IsNullOrEmpty(carInfoRow.CarMngCode) && (carInfoRow.CarMngNo != 0))
                {
                    carManagementWork.CarMngNo = carInfoRow.CarMngNo;                       // 車両管理番号;

                    this.SalesSlip.CarMngDivCd = 1;
                }
                else
                {
                    carManagementWork.CarMngNo = 0;

                    this.SalesSlip.CarMngDivCd = 0;
                }
            }
            // --- UPD 2009/09/08② --------------<<<
            carManagementWork.CarMngCode = carInfoRow.CarMngCode;                   // 車輌管理コード
            carManagementWork.NumberPlate1Code = carInfoRow.NumberPlate1Code;       // 陸運事務所番号
            carManagementWork.NumberPlate1Name = carInfoRow.NumberPlate1Name;       // 陸運事務局名称
            carManagementWork.NumberPlate2 = carInfoRow.NumberPlate2;               // 車両登録番号（種別）
            carManagementWork.NumberPlate3 = carInfoRow.NumberPlate3;               // 車両登録番号（カナ）
            carManagementWork.NumberPlate4 = carInfoRow.NumberPlate4;               // 車両登録番号（プレート番号）
            carManagementWork.EntryDate = carInfoRow.EntryDate;                     // 登録年月日
            //　ここ
            //int iyy = carInfoRow.ProduceTypeOfYearInput / 100;
            //int imm = carInfoRow.ProduceTypeOfYearInput % 100;
            //DateTime produceTypeOfYearInput = DateTime.MinValue;
            //if ((iyy != 0) && (imm != 0)) produceTypeOfYearInput = new DateTime(iyy,imm, 1);
            //carManagementWork.FirstEntryDate = produceTypeOfYearInput;              // 初年度
            carManagementWork.FirstEntryDate = carInfoRow.ProduceTypeOfYearInput;   // 初年度
            carManagementWork.MakerCode = carInfoRow.MakerCode;                     // メーカーコード
            carManagementWork.MakerFullName = carInfoRow.MakerFullName;             // メーカー全角名称
            carManagementWork.MakerHalfName = carInfoRow.MakerHalfName;             // メーカー半角名称
            carManagementWork.ModelCode = carInfoRow.ModelCode;                     // 車種コード
            carManagementWork.ModelSubCode = carInfoRow.ModelSubCode;               // 車種サブコード
            carManagementWork.ModelFullName = carInfoRow.ModelFullName;             // 車種全角名称
            carManagementWork.ModelHalfName = carInfoRow.ModelHalfName;             // 車種半角名称
            carManagementWork.SystematicCode = carInfoRow.SystematicCode;           // 系統コード
            carManagementWork.SystematicName = carInfoRow.SystematicName;           // 系統名称
            carManagementWork.ProduceTypeOfYearCd = carInfoRow.ProduceTypeOfYearCd; // 生産年式コード
            carManagementWork.ProduceTypeOfYearNm = carInfoRow.ProduceTypeOfYearNm; // 生産年式名称
            carManagementWork.StProduceTypeOfYear = carInfoRow.StProduceTypeOfYear; // 開始生産年式
            carManagementWork.EdProduceTypeOfYear = carInfoRow.EdProduceTypeOfYear; // 終了生産年式
            carManagementWork.DoorCount = carInfoRow.DoorCount;                     // ドア数
            carManagementWork.BodyNameCode = carInfoRow.BodyNameCode;               // ボディー名コード
            carManagementWork.BodyName = carInfoRow.BodyName;                       // ボディー名称
            carManagementWork.ExhaustGasSign = carInfoRow.ExhaustGasSign;           // 排ガス記号
            carManagementWork.SeriesModel = carInfoRow.SeriesModel;                 // シリーズ型式
            carManagementWork.CategorySignModel = carInfoRow.CategorySignModel;     // 型式（類別記号）
            carManagementWork.FullModel = carInfoRow.FullModel;                     // 型式（フル型）
            carManagementWork.ModelDesignationNo = carInfoRow.ModelDesignationNo;   // 型式指定番号
            carManagementWork.CategoryNo = carInfoRow.CategoryNo;                   // 類別番号
            carManagementWork.FrameModel = carInfoRow.FrameModel;                   // 車台型式
            //carManagementWork.FrameNo = (carInfoRow.ProduceFrameNoInput == 0) ? string.Empty : carInfoRow.ProduceFrameNoInput.ToString();  // 車台番号
            carManagementWork.FrameNo = carInfoRow.FrameNo;
            carManagementWork.SearchFrameNo = carInfoRow.SearchFrameNo;             // 車台番号（検索用）
            carManagementWork.StProduceFrameNo = carInfoRow.StProduceFrameNo;       // 生産車台番号開始
            carManagementWork.EdProduceFrameNo = carInfoRow.EdProduceFrameNo;       // 生産車台番号終了
            carManagementWork.ModelGradeNm = carInfoRow.ModelGradeNm;               // 型式グレード名称
            carManagementWork.EngineModelNm = carInfoRow.EngineModelNm;             // エンジン型式名称
            carManagementWork.EngineDisplaceNm = carInfoRow.EngineDisplaceNm;       // 排気量名称
            carManagementWork.EDivNm = carInfoRow.EDivNm;                           // E区分名称
            carManagementWork.TransmissionNm = carInfoRow.TransmissionNm;           // ミッション名称
            carManagementWork.ShiftNm = carInfoRow.ShiftNm;                         // シフト名称
            carManagementWork.WheelDriveMethodNm = carInfoRow.WheelDriveMethodNm;   // 駆動方式名称
            carManagementWork.AddiCarSpec1 = carInfoRow.AddiCarSpec1;               // 追加諸元1
            carManagementWork.AddiCarSpec2 = carInfoRow.AddiCarSpec2;               // 追加諸元2
            carManagementWork.AddiCarSpec3 = carInfoRow.AddiCarSpec3;               // 追加諸元3
            carManagementWork.AddiCarSpec4 = carInfoRow.AddiCarSpec4;               // 追加諸元4
            carManagementWork.AddiCarSpec5 = carInfoRow.AddiCarSpec5;               // 追加諸元5
            carManagementWork.AddiCarSpec6 = carInfoRow.AddiCarSpec6;               // 追加諸元6
            carManagementWork.AddiCarSpecTitle1 = carInfoRow.AddiCarSpecTitle1;     // 追加諸元タイトル1
            carManagementWork.AddiCarSpecTitle2 = carInfoRow.AddiCarSpecTitle2;     // 追加諸元タイトル2
            carManagementWork.AddiCarSpecTitle3 = carInfoRow.AddiCarSpecTitle3;     // 追加諸元タイトル3
            carManagementWork.AddiCarSpecTitle4 = carInfoRow.AddiCarSpecTitle4;     // 追加諸元タイトル4
            carManagementWork.AddiCarSpecTitle5 = carInfoRow.AddiCarSpecTitle5;     // 追加諸元タイトル5
            carManagementWork.AddiCarSpecTitle6 = carInfoRow.AddiCarSpecTitle6;     // 追加諸元タイトル6
            carManagementWork.RelevanceModel = carInfoRow.RelevanceModel;           // 関連型式
            carManagementWork.SubCarNmCd = carInfoRow.SubCarNmCd;                   // サブ車名コード
            carManagementWork.ModelGradeSname = carInfoRow.ModelGradeSname;         // 型式グレード略称
            carManagementWork.BlockIllustrationCd = carInfoRow.BlockIllustrationCd; // ブロックイラストコード
            carManagementWork.ThreeDIllustNo = carInfoRow.ThreeDIllustNo;           // 3DイラストNo
            carManagementWork.PartsDataOfferFlag = carInfoRow.PartsDataOfferFlag;   // 部品データ提供フラグ
            carManagementWork.InspectMaturityDate = carInfoRow.InspectMaturityDate; // 車検満期日
            carManagementWork.LTimeCiMatDate = carInfoRow.LTimeCiMatDate;           // 前回車検満期日
            carManagementWork.CarInspectYear = carInfoRow.CarInspectYear;           // 車検期間
            carManagementWork.Mileage = carInfoRow.Mileage;                         // 車両走行距離
            carManagementWork.CarNo = carInfoRow.CarNo;                             // 号車
            carManagementWork.FullModelFixedNoAry = carInfoRow.FullModelFixedNoAry; // フル型式固定番号配列
            // ----- ADD 2010/04/27 ---------->>>>>
            BinaryFormatter formatter = new BinaryFormatter();
            MemoryStream ms = new MemoryStream();
            formatter.Serialize(ms, carInfoRow.FreeSrchMdlFxdNoAry);
            byte[] verbinary = ms.GetBuffer();
            carManagementWork.FreeSrchMdlFxdNoAry = verbinary; // 自由検索型式固定番号配列
            ms.Close();
            // ----- ADD 2010/04/27 ----------<<<<<
            carManagementWork.ColorCode = carInfoRow.ColorCode;                     // カラーコード
            carManagementWork.ColorName1 = carInfoRow.ColorName1;                   // カラー名称
            carManagementWork.TrimCode = carInfoRow.TrimCode;                       // トリムコード
            carManagementWork.TrimName = carInfoRow.TrimName;                       // トリム名称
            carManagementWork.CategoryObjAry = this.GetEquipInfoRows(carInfoRow.CarRelationGuid); // 装備オブジェクト配列
            carManagementWork.CarRelationGuid = carInfoRow.CarRelationGuid;         // 車両情報共通キー
            // --- ADD 2009/09/08② ---------->>>>>
            carManagementWork.CarNote = carInfoRow.CarNote;                         //車輌備考
            carManagementWork.CarAddInfo1 = carInfoRow.CarAddInfo1;                 //車輌追加情報1
            carManagementWork.CarAddInfo2 = carInfoRow.CarAddInfo2;                 //車輌追加情報2
            carManagementWork.EngineModel = carInfoRow.EngineModel;               //原動機型式（エンジン）
            // --- ADD 2009/09/08② ----------<<<<<
            // PMNS:国産/外車区分セット
            // --- ADD 2013/03/21 ---------->>>>>
            carManagementWork.DomesticForeignCode = carInfoRow.DomesticForeignCode; // 国産/外車区分
            carManagementWork.HandleInfoCode = this._handleInfoCode;                // ハンドル位置情報
            // --- ADD 2013/03/21 ----------<<<<<
            return carManagementWork;
        }

        /// <summary>
        /// 車両情報テーブル取得処理(車両情報Dictionaryより取得)
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>車両検索結果データセット</returns>
        public PMKEN01010E GetCarInfoFromDic(int salesRowNo)
        {
            PMKEN01010E carInfoDataSet = null;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row != null)
            {
                carInfoDataSet = this.GetCarInfoFromDic(row.CarRelationGuid);
            }
            return carInfoDataSet;
        }

        /// <summary>
        /// 車両情報テーブル取得処理(車両情報Dictionaryより取得)
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <returns>車両検索結果データセット</returns>
        private PMKEN01010E GetCarInfoFromDic(Guid carRelationGuid)
        {
            PMKEN01010E carInfoDataSet = null;
            if (this._carInfo.ContainsKey(carRelationGuid))
            {
                carInfoDataSet = this._carInfo[carRelationGuid];
            }
            return carInfoDataSet;
        }

        /// <summary>
        /// 車両情報テーブル取得処理(車両情報Dictionaryより取得)
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <returns>車両検索結果データセット</returns>
        /// <br>Note       : 車両情報テーブルを検索します。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/10/19</br>
        private PMKEN01010E GetCarInfoNew(Guid carRelationGuid)
        {
            PMKEN01010E carInfoDataSet = null;
            if (this._carInfo.ContainsKey(carRelationGuid))
            {
                carInfoDataSet = this._carInfo[carRelationGuid];
                SalesInputDataSet.CarInfoRow row = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);
                if (row != null)
                {
                    carInfoDataSet.CarModelInfoSummarized[0].MakerCode = row.MakerCode;
                }
            }
            return carInfoDataSet;
        }

        /// <summary>
        /// 車両検索データテーブル年式設定処理
        /// </summary>
        /// <param name="carRelationGuid"></param>
        /// <param name="firstEntryDate"></param>
        public void SettingCarModelUIDataFromFirstEntryDate(Guid carRelationGuid, int firstEntryDate)
        {
            if (this._carInfo.ContainsKey(carRelationGuid))
            {
                this._carInfo[carRelationGuid].CarModelUIData[0].ProduceTypeOfYearInput = firstEntryDate / 100;
            }
        }

        /// <summary>
        /// 車両検索データテーブル車台番号設定処理
        /// </summary>
        /// <param name="carRelationGuid"></param>
        /// <param name="frameNo"></param>
        /// <br>Update Note: 2009/09/08② 張凱 車輌管理機能対応</br>
        public void SettingCarModelUIDataFromProduceFrameNo(Guid carRelationGuid, string frameNo)
        {
            if (this._carInfo.ContainsKey(carRelationGuid))
            {
                // --- UPD 2009/09/08② ---------->>>>>
                if (this._carInfo[carRelationGuid].CarModelUIData.Count != 0)
                {
                    //this._carInfo[carRelationGuid].CarModelUIData[0].ProduceFrameNoInput = produceFrameNo;
                    this._carInfo[carRelationGuid].CarModelUIData[0].FrameNo = frameNo;
                    // --- DEL 2013/03/21 ---------->>>>>
                    //this._carInfo[carRelationGuid].CarModelUIData[0].SearchFrameNo = TStrConv.StrToIntDef(frameNo.Trim(), 0);
                    // --- DEL 2013/03/21 ----------<<<<<
                    // --- ADD 2013/03/21 ---------->>>>>
                    // PMNS:車台番号(検索用)設定
                    // 国産/外車区分が外車(2)の場合は車台番号(検索用)に0をセットする
                    if (this._carInfo[carRelationGuid].CarModelUIData[0].DomesticForeignCode == 2)
                    {
                        this._carInfo[carRelationGuid].CarModelUIData[0].SearchFrameNo = 0;
                    }
                    else
                    {
                    	this._carInfo[carRelationGuid].CarModelUIData[0].SearchFrameNo = TStrConv.StrToIntDef(frameNo.Trim(), 0);
                	}
                    // --- ADD 2013/03/21 ----------<<<<<
                }
                // --- UPD 2009/09/08② ----------<<<<<
            }
        }

        /// <summary>
        /// 対象年式取得処理(車台番号より取得)
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="frameNo">車台番号</param>
        /// <returns>年式(int)</returns>
        public int GetProduceTypeOfYear(Guid carRelationGuid, int frameNo)
        {
            return this.GetProduceTypeOfYearProc(carRelationGuid, frameNo);
        }

        /// <summary>
        /// 対象年式取得処理(車台番号より取得)
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="frameNo">車台番号</param>
        /// <returns>年式(int)</returns>
        private int GetProduceTypeOfYearProc(Guid carRelationGuid, int frameNo)
        {
            int retDateTime = 0;
            PMKEN01010E carInfoDataSet = this.GetCarInfoFromDic(carRelationGuid);
            if (carInfoDataSet != null)
            {
                string filter = string.Format("{0}<={1} AND {2}>={3}",
                    carInfoDataSet.PrdTypYearInfo.StProduceFrameNoColumn.ColumnName, frameNo,
                    carInfoDataSet.PrdTypYearInfo.EdProduceFrameNoColumn.ColumnName, frameNo);
                PMKEN01010E.PrdTypYearInfoRow[] row = (PMKEN01010E.PrdTypYearInfoRow[])carInfoDataSet.PrdTypYearInfo.Select(filter);
                if (row.Length > 0) retDateTime = row[0].ProduceTypeOfYear;
            }
            return retDateTime * 100;
        }

        /// <summary>
        /// 生産年式範囲チェック
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="firstEntryDate">年式</param>
        /// <returns>true:範囲内 false:範囲外</returns>
        public bool CheckProduceTypeOfYearRange(Guid carRelationGuid, int firstEntryDate)
        {
            bool ret = true;

            if (firstEntryDate != 0)
            {
                firstEntryDate = firstEntryDate / 100 * 100;
                int fyy = firstEntryDate / 10000; 
                int fmm = firstEntryDate / 100 % 100;
                
                SalesInputDataSet.CarInfoRow row = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);
                int styy = row.StProduceTypeOfYear.Year;
                int stmm = row.StProduceTypeOfYear.Month;
                int edyy = row.EdProduceTypeOfYear.Year;
                int edmm = row.EdProduceTypeOfYear.Month;
                int st = 0;
                int ed = 0;
                if (fmm != 0)
                {
                    // 年月でチェック
                    st = styy * 10000 + stmm * 100;
                    ed = edyy * 10000 + edmm * 100;
                }
                else
                {
                    // 年のみでチェック
                    st = styy * 10000;
                    ed = edyy * 10000;
                }

                if (row.StProduceTypeOfYear != DateTime.MinValue) if (firstEntryDate < st) ret = false;

                if (row.EdProduceTypeOfYear != DateTime.MinValue) if (firstEntryDate > ed) ret = false;
            }
            return ret;
        }

        // 2009.06.17 Add >>>
        /// <summary>
        /// 車台番号範囲チェック
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="inputFrameNo">車台番号入力文字列</param>
        /// <param name="searchFrameNo">車台番号</param>
        /// <returns>True:範囲内、False:範囲外</returns>
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.14 DEL
        //public bool CheckProduceFrameNo(Guid carRelationGuid, int searchFrameNo)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.14 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.14 ADD
        public bool CheckProduceFrameNo(Guid carRelationGuid, string inputFrameNo, int searchFrameNo)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.14 ADD
        {
            bool ret = true;

            SalesInputDataSet.CarInfoRow row = this._carInfoDataTable.FindByCarRelationGuid(carRelationGuid);

            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.14 DEL
            //if (row != null && searchFrameNo != 0)
            //{
            //    if (( row.StProduceFrameNo != 0 && row.StProduceFrameNo > searchFrameNo ) ||
            //        ( row.EdProduceFrameNo != 0 && row.EdProduceFrameNo < searchFrameNo )) ret = false;
            //}
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.14 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.14 ADD
            if ( row != null )
            {
                if ( searchFrameNo != 0 || !string.IsNullOrEmpty( inputFrameNo ) )
                {
                    if ( (row.StProduceFrameNo != 0 && row.StProduceFrameNo > searchFrameNo) ||
                        (row.EdProduceFrameNo != 0 && row.EdProduceFrameNo < searchFrameNo) ) ret = false;
                }
            }
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.14 ADD

            return ret;
        }
        // 2009.06.17 Add <<<

        // --- ADD 2013/03/21 ---------->>>>>
        // PMNS:ハンドル位置チェック
        /// <summary>
        /// ハンドル位置チェック(Delphi参照用)
        /// </summary>
        /// <param name="carRelationGuid">車輌情報共通キー</param>
        /// <param name="vinCode">VINコード</param>
        /// <returns>true:一致 false:不一致</returns>
        public bool CheckHandlePosition(string carRelationGuid, string vinCode)
        {
            // 文字列からGuid形式に変換する
            Guid guid = new Guid(carRelationGuid);

            return CheckHandlePosition(guid, vinCode);
        }

        /// <summary>
        /// ハンドル位置チェック
        /// </summary>
        /// <param name="carRelationGuid">車輌情報共通キー</param>
        /// <param name="vinCode">VINコード</param>
        /// <returns>true:一致 false:不一致</returns>
        public bool CheckHandlePosition(Guid carRelationGuid, string vinCode)
        {
            // キャッシュの有無をチェック
            if (this._carInfo.ContainsKey(carRelationGuid))
            {
                try
                {
                    // VINコードからハンドル位置を取得(右/左ハンドル以外の場合はチェックを行わない)
                    HandleInfoCdRet posVin = this._carSearchController.GetHandlePositionFromVinCode(vinCode);
                    if (posVin != HandleInfoCdRet.PositionRight && posVin != HandleInfoCdRet.PositionLeft)
                        return true;

                    // 型式検索で選択されているすべての行を比較する
                    int pos = this._carInfo[carRelationGuid].CarModelInfo.HandleInfoCdColumn.Ordinal;
                    int state = this._carInfo[carRelationGuid].CarModelInfo.SelectionStateColumn.Ordinal;
                    foreach (DataRow row in this._carInfo[carRelationGuid].CarModelInfo.Rows)
                    {
                        // 選択されていない行はスキップする
                        if ((bool)row[state] != true)
                            continue;

                        // 右/左ハンドル以外が1件でもあった場合は処理を中断し、位置のチェックを行わない
                        HandleInfoCdRet posKind = (HandleInfoCdRet)row[pos];
                        if (posKind != HandleInfoCdRet.PositionRight && posKind != HandleInfoCdRet.PositionLeft)
                            return true;

                        // ハンドル位置を比較する
                        if (posKind == posVin)
                        {
                            // 1件でもハンドル位置が一致している場合、一致とする
                            return true;
                        }
                    }

                    // すべての行のハンドル位置が異なる場合、不一致とする
                    return false;
                }
                catch
                {
                    // 例外が発生した場合はチェックを行わない
                }
            }

            return true;
        }
        // --- ADD 2013/03/21 ----------<<<<<

        /// <summary>
        /// 車両検索(車両検索抽出条件より検索)
        /// </summary>
        /// <param name="carSearchCondition">車両検索抽出条件</param>
        /// <param name="carInfoDataSet">車両検索データセット</param>
        /// <returns>CarSearchResultReport</returns>
        public CarSearchResultReport SearchCar(CarSearchCondition carSearchCondition, ref PMKEN01010E carInfoDataSet)
        {
            return this._carSearchController.Search(carSearchCondition, ref carInfoDataSet);
        }

        /// <summary>
        /// 車両検索(フル型式固定番号より検索)
        /// </summary>
        /// <param name="fullModelFixedNo">フル型式固定番号配列</param>
        /// <param name="modelDesignationNo">型式指定番号(未設定可)</param>
        /// <param name="categoryNo">類別区分番号(未設定可)</param>
        /// <param name="carInfoDataSet">車両検索データセット</param>
        /// <returns>CarSearchResultReport</returns>
        /// <remarks>型式指定番号および類別区分番号は、類別検索によるフル型式固定番号配列の場合のみ必須</remarks>
        // --- UPD m.suzuki 2010/05/20 自由検索---------->>>>>
        //public CarSearchResultReport SearchCar(int[] fullModelFixedNo, int modelDesignationNo, int categoryNo, ref PMKEN01010E carInfoDataSet)
        public CarSearchResultReport SearchCar(int[] fullModelFixedNo, string[] freeSrchMdlFxdNo, int modelDesignationNo, int categoryNo, ref PMKEN01010E carInfoDataSet)
        // --- UPD m.suzuki 2010/05/20 自由検索----------<<<<<
        {
            CarSearchResultReport ret = CarSearchResultReport.retFailed;
            // --- UPD m.suzuki 2010/05/20 自由検索---------->>>>>
            //if (fullModelFixedNo.Length != 0)
            if (fullModelFixedNo.Length != 0 && freeSrchMdlFxdNo.Length != 0)
            // --- UPD m.suzuki 2010/05/20 自由検索----------<<<<<
            {
                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/10/15 UPD
                //ret = this._carSearchController.SearchByFullModelFixedNo(fullModelFixedNo, modelDesignationNo, categoryNo, ref carInfoDataSet);

                CarSearchCondition carSearchCond = new CarSearchCondition();
                carSearchCond.ModelDesignationNo = modelDesignationNo;
                carSearchCond.CategoryNo = categoryNo;
                // --- UPD m.suzuki 2010/05/20 自由検索---------->>>>>
                //ret = this._carSearchController.SearchByFullModelFixedNo( fullModelFixedNo, carSearchCond, ref carInfoDataSet );
                ret = this._carSearchController.SearchByFullModelFixedNo(fullModelFixedNo, freeSrchMdlFxdNo, carSearchCond, ref carInfoDataSet);
                // --- UPD m.suzuki 2010/05/20 自由検索----------<<<<<
                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/10/15 UPD
            }
            return ret;
        }
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/10/15 ADD
        /// <summary>
        /// 車両検索(フル型式固定番号より検索)
        /// </summary>
        /// <param name="fullModelFixedNo">フル型式固定番号配列</param>
        /// <param name="carSearchCond">車輌検索条件クラス</param>
        /// <param name="carInfoDataSet">車両検索データセット</param>
        /// <returns>CarSearchResultReport</returns>
        // --- UPD m.suzuki 2010/05/20 自由検索---------->>>>>
        //public CarSearchResultReport SearchCar( int[] fullModelFixedNo, CarSearchCondition carSearchCond, ref PMKEN01010E carInfoDataSet )
        public CarSearchResultReport SearchCar(int[] fullModelFixedNo, string[] freeSrchMdlFxdNo, CarSearchCondition carSearchCond, ref PMKEN01010E carInfoDataSet)
        // --- UPD m.suzuki 2010/05/20 自由検索----------<<<<<
        {
                CarSearchResultReport ret = CarSearchResultReport.retFailed;
            // --- UPD m.suzuki 2010/05/20 自由検索---------->>>>>
            //if (fullModelFixedNo.Length != 0)
            if (fullModelFixedNo.Length != 0 || freeSrchMdlFxdNo.Length != 0)
            // --- UPD m.suzuki 2010/05/20 自由検索----------<<<<<
            {
                // --- UPD m.suzuki 2010/05/20 自由検索---------->>>>>
                //ret = this._carSearchController.SearchByFullModelFixedNo( fullModelFixedNo, carSearchCond, ref carInfoDataSet );
                ret = this._carSearchController.SearchByFullModelFixedNo(fullModelFixedNo, freeSrchMdlFxdNo, carSearchCond, ref carInfoDataSet);
                // --- UPD m.suzuki 2010/05/20 自由検索----------<<<<<
            }
            return ret;
        }
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/10/15 ADD

        /// <summary>
        /// 前回情報表示用受注マスタ(車両)退避処理
        /// </summary>
        /// <param name="salesDetailList"></param>
        /// <param name="acceptOdrCarList"></param>
        /// <br>Update Note: 2011/10/26 鄧潘ハン Redmine#26010 アクセスバイオレーションエラーの対応</br>
        private void SaveLastCarInfo(List<SalesDetail> salesDetailList, List<AcceptOdrCar> acceptOdrCarList)
        {
            AcceptOdrCar acceptOdrCar = null;
            SalesDetail salesDetail = null;

            // 最終行取得
            salesDetail = salesDetailList.Find(
                delegate(SalesDetail sales)
                {
                    if (sales.SalesRowNo == salesDetailList.Count)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );

            // 対象受注マスタ(車両)取得
            if (salesDetail != null)
            {
                acceptOdrCar = acceptOdrCarList.Find(
                    delegate(AcceptOdrCar car)
                    {
                        if (salesDetail.AcceptAnOrderNo == car.AcceptAnOrderNo)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                );
            }

            // 補正処理
            //---ADD 2011/10/26------------------>>>>>
            if (acceptOdrCar != null)
            {
                acceptOdrCar.AcceptAnOrderNo = 0; 
            }
            //---ADD 2011/10/26------------------<<<<<
            //acceptOdrCar.AcceptAnOrderNo = 0; // DEL 2011/10/26

            this._svAcceptOdrCar = acceptOdrCar;
        }

        //>>>2010/02/26
        /// <summary>
        /// ＤＢに保存する車両情報データを調整します。
        /// </summary>
        public void AdjustCarInfoSaveData()
        {
            //_carInfoDataTable

            #region ●不要明細削除
            List<Guid> deleteGuidList = new List<Guid>();
            //----------------------------------------
            // 全項目初期値明細削除
            //----------------------------------------
            foreach (SalesInputDataSet.CarInfoRow row in this._carInfoDataTable)
            {
                CarManagementWork carManagementWork = this.GetParamDataFromCarInfoRow(row);
                CarManagementWork clearCarManagementWork = new CarManagementWork();
                ArrayList differentList = carManagementWork.Compare(clearCarManagementWork);

                if (differentList.Count <= 1)
                {
                    if (carManagementWork != null) deleteGuidList.Add(row.CarRelationGuid);
                }
            }

            //----------------------------------------
            // 売上明細で使用していない明細削除
            //----------------------------------------
            List<Guid> svGuidList = new List<Guid>();
            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(row.CarRelationGuid);
                if (carInfoRow != null)
                {
                    if (!svGuidList.Contains(row.CarRelationGuid)) svGuidList.Add(row.CarRelationGuid);
                }
            }
            foreach (SalesInputDataSet.CarInfoRow row in this._carInfoDataTable)
            {
                if (!svGuidList.Contains(row.CarRelationGuid))
                {
                    if (!deleteGuidList.Contains(row.CarRelationGuid)) deleteGuidList.Add(row.CarRelationGuid);
                }
            }

            // 車両情報明細行削除処理
            this.DeleteCarInfoRow(deleteGuidList);

            #endregion
        }

        /// <summary>
        /// 車輌情報データ行オブジェクトのコピーを行います。
        /// </summary>
        /// <param name="sourceRow"></param>
        /// <param name="targetRow"></param>
        public void CopyCompleteCarInfoRow(SalesInputDataSet.CarInfoRow sourceRow, SalesInputDataSet.CarInfoRow targetRow)
        {
            #region 項目セット
            targetRow.CarRelationGuid = sourceRow.CarRelationGuid;
            targetRow.CustomerCode = sourceRow.CustomerCode;
            targetRow.CarMngNo = sourceRow.CarMngNo;
            targetRow.CarMngCode = sourceRow.CarMngCode;
            targetRow.NumberPlate1Code = sourceRow.NumberPlate1Code;
            targetRow.NumberPlate1Name = sourceRow.NumberPlate1Name;
            targetRow.NumberPlate2 = sourceRow.NumberPlate2;
            targetRow.NumberPlate3 = sourceRow.NumberPlate3;
            targetRow.NumberPlate4 = sourceRow.NumberPlate4;
            targetRow.EntryDate = sourceRow.EntryDate;
            targetRow.FirstEntryDate = sourceRow.FirstEntryDate;
            targetRow.MakerCode = sourceRow.MakerCode;
            targetRow.MakerFullName = sourceRow.MakerFullName;
            targetRow.MakerHalfName = sourceRow.MakerHalfName;
            targetRow.ModelCode = sourceRow.ModelCode;
            targetRow.ModelSubCode = sourceRow.ModelSubCode;
            targetRow.ModelFullName = sourceRow.ModelFullName;
            targetRow.ModelHalfName = sourceRow.ModelHalfName;
            targetRow.SystematicCode = sourceRow.SystematicCode;
            targetRow.SystematicName = sourceRow.SystematicName;
            targetRow.ProduceTypeOfYearCd = sourceRow.ProduceTypeOfYearCd;
            targetRow.ProduceTypeOfYearNm = sourceRow.ProduceTypeOfYearNm;
            targetRow.StProduceTypeOfYear = sourceRow.StProduceTypeOfYear;
            targetRow.EdProduceTypeOfYear = sourceRow.EdProduceTypeOfYear;
            targetRow.DoorCount = sourceRow.DoorCount;
            targetRow.BodyNameCode = sourceRow.BodyNameCode;
            targetRow.BodyName = sourceRow.BodyName;
            targetRow.ExhaustGasSign = sourceRow.ExhaustGasSign;
            targetRow.SeriesModel = sourceRow.SeriesModel;
            targetRow.CategorySignModel = sourceRow.CategorySignModel;
            targetRow.FullModel = sourceRow.FullModel;
            targetRow.ModelDesignationNo = sourceRow.ModelDesignationNo;
            targetRow.CategoryNo = sourceRow.CategoryNo;
            targetRow.FrameModel = sourceRow.FrameModel;
            targetRow.FrameNo = sourceRow.FrameNo;
            targetRow.SearchFrameNo = sourceRow.SearchFrameNo;
            targetRow.StProduceFrameNo = sourceRow.StProduceFrameNo;
            targetRow.EdProduceFrameNo = sourceRow.EdProduceFrameNo;
            targetRow.ModelGradeNm = sourceRow.ModelGradeNm;
            targetRow.EngineModelNm = sourceRow.EngineModelNm;
            targetRow.EngineDisplaceNm = sourceRow.EngineDisplaceNm;
            targetRow.EDivNm = sourceRow.EDivNm;
            targetRow.TransmissionNm = sourceRow.TransmissionNm;
            targetRow.ShiftNm = sourceRow.ShiftNm;
            targetRow.WheelDriveMethodNm = sourceRow.WheelDriveMethodNm;
            targetRow.AddiCarSpec1 = sourceRow.AddiCarSpec1;
            targetRow.AddiCarSpec2 = sourceRow.AddiCarSpec2;
            targetRow.AddiCarSpec3 = sourceRow.AddiCarSpec3;
            targetRow.AddiCarSpec4 = sourceRow.AddiCarSpec4;
            targetRow.AddiCarSpec5 = sourceRow.AddiCarSpec5;
            targetRow.AddiCarSpec6 = sourceRow.AddiCarSpec6;
            targetRow.AddiCarSpecTitle1 = sourceRow.AddiCarSpecTitle1;
            targetRow.AddiCarSpecTitle2 = sourceRow.AddiCarSpecTitle2;
            targetRow.AddiCarSpecTitle3 = sourceRow.AddiCarSpecTitle3;
            targetRow.AddiCarSpecTitle4 = sourceRow.AddiCarSpecTitle4;
            targetRow.AddiCarSpecTitle5 = sourceRow.AddiCarSpecTitle5;
            targetRow.AddiCarSpecTitle6 = sourceRow.AddiCarSpecTitle6;
            targetRow.RelevanceModel = sourceRow.RelevanceModel;
            targetRow.SubCarNmCd = sourceRow.SubCarNmCd;
            targetRow.ModelGradeSname = sourceRow.ModelGradeSname;
            targetRow.BlockIllustrationCd = sourceRow.BlockIllustrationCd;
            targetRow.ThreeDIllustNo = sourceRow.ThreeDIllustNo;
            targetRow.PartsDataOfferFlag = sourceRow.PartsDataOfferFlag;
            targetRow.InspectMaturityDate = sourceRow.InspectMaturityDate;
            targetRow.LTimeCiMatDate = sourceRow.LTimeCiMatDate;
            targetRow.CarInspectYear = sourceRow.CarInspectYear;
            targetRow.Mileage = sourceRow.Mileage;
            targetRow.CarNo = sourceRow.CarNo;
            targetRow.FullModelFixedNoAry = sourceRow.FullModelFixedNoAry;
            targetRow.FreeSrchMdlFxdNoAry = sourceRow.FreeSrchMdlFxdNoAry; // 自由検索型式固定番号配列 // 2010/06/26
            if (!sourceRow.IsCategoryObjAryNull()) targetRow.CategoryObjAry = sourceRow.CategoryObjAry;
            targetRow.ProduceTypeOfYearInput = sourceRow.ProduceTypeOfYearInput;
            targetRow.ColorCode = sourceRow.ColorCode;
            targetRow.ColorName1 = sourceRow.ColorName1;
            targetRow.TrimCode = sourceRow.TrimCode;
            targetRow.TrimName = sourceRow.TrimName;
            targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo;
            targetRow.CarNote = sourceRow.CarNote;
            targetRow.CarNoteCode = sourceRow.CarNoteCode; // ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218
            targetRow.CarAddInfo1 = sourceRow.CarAddInfo1;
            targetRow.CarAddInfo2 = sourceRow.CarAddInfo2;
            targetRow.EngineModel = sourceRow.EngineModel;
            targetRow.GradeFullName = sourceRow.GradeFullName;  //ADD 2012/06/18
            // PMNS:国産/外車区分セット
            targetRow.DomesticForeignCode = sourceRow.DomesticForeignCode; //ADD 2013/03/21
            #endregion
        }
        //<<<2010/02/26
        #endregion

        # region ●計上元明細関係
        /// <summary>
        /// 売上明細行オブジェクトに連結する計上元売上明細行オブジェクトを取得します。
        /// </summary>
        /// <param name="salesDetailRow">売上明細行オブジェクト</param>
        private SalesInputDataSet.AddUpSrcDetailRow GetAddUpSrcDataRow(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            SalesInputDataSet.AddUpSrcDetailRow row = this._addUpSrcDetailDataTable.FindByAcptAnOdrStatusSalesSlipDtlNum(salesDetailRow.AcptAnOdrStatusSrc, salesDetailRow.SalesSlipDtlNumSrc);

            return row;
        }

        /// <summary>
        /// 売上明細行オブジェクトに連結する計上元売上明細行オブジェクトを全て削除します。
        /// </summary>
        /// <param name="salesDetailRow">売上明細行オブジェクト</param>
        private void DeleteAddUpSrcDetail(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            DataRow[] dataRows = salesDetailRow.GetChildRows(cRelation_Detail_LnkDetail);
            if (dataRows == null) return;

            foreach (SalesInputDataSet.AddUpSrcDetailRow row in dataRows)
            {
                this._addUpSrcDetailDataTable.RemoveAddUpSrcDetailRow(row);
            }
        }

        /// <summary>
        /// 計上元売上明細行オブジェクトにコピー元明細より明細情報を設定します。
        /// </summary>
        /// <param name="stockDetail"></param>
        private void LnkSalesDetailRowSettingFromSalesDetail(SalesDetail salesDetail)
        {
            CacheLnkSalesDetailDataTable(salesDetail, this._addUpSrcDetailDataTable);
        }

        /// <summary>
        /// 指定した売上明細データを元に計上元売上明細データテーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="stockDetail">売上明細データオブジェクト</param>
        /// <param name="addUpSrcDetailDataTable">計上元売上明細データテーブルオブジェクト</param>
        /// <returns>売上明細データ行オブジェクト</returns>
        private SalesInputDataSet.AddUpSrcDetailRow CreateRowFromUIData(SalesDetail salesDetail, SalesInputDataSet.AddUpSrcDetailDataTable addUpSrcDetailDataTable)
        {
            SalesInputDataSet.AddUpSrcDetailRow row = addUpSrcDetailDataTable.NewAddUpSrcDetailRow();

            this.SetRowFromUIData(ref row, salesDetail);
            return row;
        }

        /// <summary>
        /// 売上明細データオブジェクトを計上元売上明細データテーブルにキャッシュします。
        /// </summary>
        /// <param name="salesDetail">売上明細データオブジェクト</param>
        /// <param name="addUpSrcDetailDataTable">計上元売上明細データテーブルオブジェクト</param>
        private void CacheLnkSalesDetailDataTable(SalesDetail salesDetail, SalesInputDataSet.AddUpSrcDetailDataTable addUpSrcDetailDataTable)
        {
            try
            {
                addUpSrcDetailDataTable.AddAddUpSrcDetailRow(this.CreateRowFromUIData(salesDetail, addUpSrcDetailDataTable));
            }
            catch (ConstraintException)
            {
                SalesInputDataSet.AddUpSrcDetailRow row = addUpSrcDetailDataTable.FindByAcptAnOdrStatusSalesSlipDtlNum(salesDetail.AcptAnOdrStatus, salesDetail.SalesSlipDtlNum);
                this.SetRowFromUIData(ref row, salesDetail);
            }
        }

        /// <summary>
        /// 売上明細データオブジェクトから計上元売上明細データ行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="row">売上明細データ行オブジェクト</param>
        /// <param name="salesDetail">売上明細データオブジェクト</param>
        private void SetRowFromUIData(ref SalesInputDataSet.AddUpSrcDetailRow row, SalesDetail salesDetail)
        {
            //row.CreateDateTime = salesDetail.CreateDateTime; // 作成日時
            //row.UpdateDateTime = salesDetail.UpdateDateTime; // 更新日時
            //row.EnterpriseCode = salesDetail.EnterpriseCode; // 企業コード
            //row.FileHeaderGuid = salesDetail.FileHeaderGuid; // GUID
            //row.UpdEmployeeCode = salesDetail.UpdEmployeeCode; // 更新従業員コード
            //row.UpdAssemblyId1 = salesDetail.UpdAssemblyId1; // 更新アセンブリID1
            //row.UpdAssemblyId2 = salesDetail.UpdAssemblyId2; // 更新アセンブリID2
            //row.LogicalDeleteCode = salesDetail.LogicalDeleteCode; // 論理削除区分
            // --- ADD m.suzuki 2011/04/21 ---------->>>>>
            row.LogicalDeleteCode = salesDetail.LogicalDeleteCode; // 論理削除区分
            // --- ADD m.suzuki 2011/04/21 ----------<<<<<
            row.AcceptAnOrderNo = salesDetail.AcceptAnOrderNo; // 受注番号
            row.AcptAnOdrStatus = salesDetail.AcptAnOdrStatus; // 受注ステータス
            row.SalesSlipNum = salesDetail.SalesSlipNum; // 売上伝票番号
            row.SalesRowNo = salesDetail.SalesRowNo; // 売上行番号
            row.SalesRowDerivNo = salesDetail.SalesRowDerivNo; // 売上行番号枝番
            row.SectionCode = salesDetail.SectionCode; // 拠点コード
            row.SubSectionCode = salesDetail.SubSectionCode; // 部門コード
            row.SalesDate = salesDetail.SalesDate; // 売上日付
            row.CommonSeqNo = salesDetail.CommonSeqNo; // 共通通番
            row.SalesSlipDtlNum = salesDetail.SalesSlipDtlNum; // 売上明細通番
            row.AcptAnOdrStatusSrc = salesDetail.AcptAnOdrStatusSrc; // 受注ステータス（元）
            row.SalesSlipDtlNumSrc = salesDetail.SalesSlipDtlNumSrc; // 売上明細通番（元）
            row.SupplierFormalSync = salesDetail.SupplierFormalSync; // 仕入形式（同時）
            row.StockSlipDtlNumSync = salesDetail.StockSlipDtlNumSync; // 仕入明細通番（同時）
            row.SalesSlipCdDtl = salesDetail.SalesSlipCdDtl; // 売上伝票区分（明細）
            //>>>2010/02/26
            //row.DeliGdsCmpltDueDate = salesDetail.DeliGdsCmpltDueDate; // 納品完了予定日
            row.DeliGdsCmpltDueDate = salesDetail.AnswerDelivDate; // 納品完了予定日
            //<<<2010/02/26
            row.GoodsKindCode = salesDetail.GoodsKindCode; // 商品属性
            row.GoodsSearchDivCd = salesDetail.GoodsSearchDivCd; // 商品検索区分
            row.GoodsMakerCd = salesDetail.GoodsMakerCd; // 商品メーカーコード
            row.MakerName = salesDetail.MakerName; // メーカー名称
            row.MakerKanaName = salesDetail.MakerKanaName; // メーカーカナ名称
            row.GoodsNo = salesDetail.GoodsNo; // 商品番号
            row.GoodsName = salesDetail.GoodsName; // 商品名称
            row.GoodsNameKana = salesDetail.GoodsNameKana; // 商品名称カナ
            row.GoodsLGroup = salesDetail.GoodsLGroup; // 商品大分類コード
            row.GoodsLGroupName = salesDetail.GoodsLGroupName; // 商品大分類名称
            row.GoodsMGroup = salesDetail.GoodsMGroup; // 商品中分類コード
            row.GoodsMGroupName = salesDetail.GoodsMGroupName; // 商品中分類名称
            row.BLGroupCode = salesDetail.BLGroupCode; // BLグループコード
            row.BLGroupName = salesDetail.BLGroupName; // BLグループコード名称
            row.BLGoodsCode = salesDetail.BLGoodsCode; // BL商品コード
            row.BLGoodsFullName = salesDetail.BLGoodsFullName; // BL商品コード名称（全角）
            row.EnterpriseGanreCode = salesDetail.EnterpriseGanreCode; // 自社分類コード
            row.EnterpriseGanreName = salesDetail.EnterpriseGanreName; // 自社分類名称
            row.WarehouseCode = salesDetail.WarehouseCode; // 倉庫コード
            row.WarehouseName = salesDetail.WarehouseName; // 倉庫名称
            row.WarehouseShelfNo = salesDetail.WarehouseShelfNo; // 倉庫棚番
            row.SalesOrderDivCd = salesDetail.SalesOrderDivCd; // 売上在庫取寄せ区分
            row.OpenPriceDiv = salesDetail.OpenPriceDiv; // オープン価格区分
            row.GoodsRateRank = salesDetail.GoodsRateRank; // 商品掛率ランク
            row.CustRateGrpCode = salesDetail.CustRateGrpCode; // 得意先掛率グループコード
            row.ListPriceRate = salesDetail.ListPriceRate; // 定価率
            row.RateSectPriceUnPrc = salesDetail.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            row.RateDivLPrice = salesDetail.RateDivLPrice; // 掛率設定区分（定価）
            row.UnPrcCalcCdLPrice = salesDetail.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            row.PriceCdLPrice = salesDetail.PriceCdLPrice; // 価格区分（定価）
            row.StdUnPrcLPrice = salesDetail.StdUnPrcLPrice; // 基準単価（定価）
            row.FracProcUnitLPrice = salesDetail.FracProcUnitLPrice; // 端数処理単位（定価）
            row.FracProcLPrice = salesDetail.FracProcLPrice; // 端数処理（定価）
            row.ListPriceTaxIncFl = salesDetail.ListPriceTaxIncFl; // 定価（税込，浮動）
            row.ListPriceTaxExcFl = salesDetail.ListPriceTaxExcFl; // 定価（税抜，浮動）
            row.ListPriceChngCd = salesDetail.ListPriceChngCd; // 定価変更区分
            row.SalesRate = salesDetail.SalesRate; // 売価率
            row.RateSectSalUnPrc = salesDetail.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            row.RateDivSalUnPrc = salesDetail.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            row.UnPrcCalcCdSalUnPrc = salesDetail.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            row.PriceCdSalUnPrc = salesDetail.PriceCdSalUnPrc; // 価格区分（売上単価）
            row.StdUnPrcSalUnPrc = salesDetail.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            row.FracProcUnitSalUnPrc = salesDetail.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            row.FracProcSalUnPrc = salesDetail.FracProcSalUnPrc; // 端数処理（売上単価）
            row.SalesUnPrcTaxIncFl = salesDetail.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            row.SalesUnPrcTaxExcFl = salesDetail.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            row.SalesUnPrcChngCd = salesDetail.SalesUnPrcChngCd; // 売上単価変更区分
            row.CostRate = salesDetail.CostRate; // 原価率
            row.RateSectCstUnPrc = salesDetail.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            row.RateDivUnCst = salesDetail.RateDivUnCst; // 掛率設定区分（原価単価）
            row.UnPrcCalcCdUnCst = salesDetail.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            row.PriceCdUnCst = salesDetail.PriceCdUnCst; // 価格区分（原価単価）
            row.StdUnPrcUnCst = salesDetail.StdUnPrcUnCst; // 基準単価（原価単価）
            row.FracProcUnitUnCst = salesDetail.FracProcUnitUnCst; // 端数処理単位（原価単価）
            row.FracProcUnCst = salesDetail.FracProcUnCst; // 端数処理（原価単価）
            row.SalesUnitCost = salesDetail.SalesUnitCost; // 原価単価
            row.SalesUnitCostChngDiv = salesDetail.SalesUnitCostChngDiv; // 原価単価変更区分
            row.RateBLGoodsCode = salesDetail.RateBLGoodsCode; // BL商品コード（掛率）
            row.RateBLGoodsName = salesDetail.RateBLGoodsName; // BL商品コード名称（掛率）
            row.RateGoodsRateGrpCd = salesDetail.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            row.RateGoodsRateGrpNm = salesDetail.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            row.RateBLGroupCode = salesDetail.RateBLGroupCode; // BLグループコード（掛率）
            row.RateBLGroupName = salesDetail.RateBLGroupName; // BLグループ名称（掛率）
            row.PrtBLGoodsCode = salesDetail.PrtBLGoodsCode; // BL商品コード（印刷）
            row.PrtBLGoodsName = salesDetail.PrtBLGoodsName; // BL商品コード名称（印刷）
            row.SalesCode = salesDetail.SalesCode; // 販売区分コード
            row.SalesCdNm = salesDetail.SalesCdNm; // 販売区分名称
            row.WorkManHour = salesDetail.WorkManHour; // 作業工数
            row.ShipmentCnt = salesDetail.ShipmentCnt; // 出荷数
            row.AcceptAnOrderCnt = salesDetail.AcceptAnOrderCnt; // 受注数量
            row.AcptAnOdrAdjustCnt = salesDetail.AcptAnOdrAdjustCnt; // 受注調整数
            row.AcptAnOdrRemainCnt = salesDetail.AcptAnOdrRemainCnt; // 受注残数
            row.RemainCntUpdDate = salesDetail.RemainCntUpdDate; // 残数更新日
            row.SalesMoneyTaxInc = salesDetail.SalesMoneyTaxInc; // 売上金額（税込み）
            row.SalesMoneyTaxExc = salesDetail.SalesMoneyTaxExc; // 売上金額（税抜き）
            row.Cost = salesDetail.Cost; // 原価
            row.GrsProfitChkDiv = salesDetail.GrsProfitChkDiv; // 粗利チェック区分
            row.SalesGoodsCd = salesDetail.SalesGoodsCd; // 売上商品区分
            row.SalesPriceConsTax = salesDetail.SalesPriceConsTax; // 売上金額消費税額
            row.TaxationDivCd = salesDetail.TaxationDivCd; // 課税区分
            row.PartySlipNumDtl = salesDetail.PartySlipNumDtl; // 相手先伝票番号（明細）
            row.DtlNote = salesDetail.DtlNote; // 明細備考
            row.SupplierCd = salesDetail.SupplierCd; // 仕入先コード
            row.SupplierSnm = salesDetail.SupplierSnm; // 仕入先略称
            row.OrderNumber = salesDetail.OrderNumber; // 発注番号
            row.WayToOrder = salesDetail.WayToOrder; // 注文方法
            row.SlipMemo1 = salesDetail.SlipMemo1; // 伝票メモ１
            row.SlipMemo2 = salesDetail.SlipMemo2; // 伝票メモ２
            row.SlipMemo3 = salesDetail.SlipMemo3; // 伝票メモ３
            row.InsideMemo1 = salesDetail.InsideMemo1; // 社内メモ１
            row.InsideMemo2 = salesDetail.InsideMemo2; // 社内メモ２
            row.InsideMemo3 = salesDetail.InsideMemo3; // 社内メモ３
            row.BfListPrice = salesDetail.BfListPrice; // 変更前定価
            row.BfSalesUnitPrice = salesDetail.BfSalesUnitPrice; // 変更前売価
            row.BfUnitCost = salesDetail.BfUnitCost; // 変更前原価
            row.CmpltSalesRowNo = salesDetail.CmpltSalesRowNo; // 一式明細番号
            row.CmpltGoodsMakerCd = salesDetail.CmpltGoodsMakerCd; // メーカーコード（一式）
            row.CmpltMakerName = salesDetail.CmpltMakerName; // メーカー名称（一式）
            row.CmpltMakerKanaName = salesDetail.CmpltMakerKanaName; // メーカーカナ名称（一式）
            row.CmpltGoodsName = salesDetail.CmpltGoodsName; // 商品名称（一式）
            row.CmpltShipmentCnt = salesDetail.CmpltShipmentCnt; // 数量（一式）
            row.CmpltSalesUnPrcFl = salesDetail.CmpltSalesUnPrcFl; // 売上単価（一式）
            row.CmpltSalesMoney = salesDetail.CmpltSalesMoney; // 売上金額（一式）
            row.CmpltSalesUnitCost = salesDetail.CmpltSalesUnitCost; // 原価単価（一式）
            row.CmpltCost = salesDetail.CmpltCost; // 原価金額（一式）
            row.CmpltPartySalSlNum = salesDetail.CmpltPartySalSlNum; // 相手先伝票番号（一式）
            row.CmpltNote = salesDetail.CmpltNote; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            row.SelectedGoodsNoDiv = salesDetail.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            row.PrtGoodsNo = salesDetail.PrtGoodsNo; // 印刷用品番
            row.PrtMakerCode = salesDetail.PrtMakerCode; // 印刷用メーカーコード
            row.PrtMakerName = salesDetail.PrtMakerName; // 印刷用メーカー名称
            row.DtlRelationGuid = salesDetail.DtlRelationGuid; // 共通キー
            row.CarRelationGuid = salesDetail.CarRelationGuid; // 車両情報共通キー
            //row.SalesRowNoDisplay = salesDetail.SalesRowNoDisplay; // 行番号（表示用）
            //row.SupplierStock = salesDetail.SupplierStock; // 現在庫数
            //row.SupplierStockDisplay = salesDetail.SupplierStockDisplay; // 現在庫数（表示用）
            //row.OpenPriceDivDisplay = salesDetail.OpenPriceDivDisplay; // オープン価格区分（表示用）
            //row.ListPriceDisplay = salesDetail.ListPriceDisplay; // 定価（表示用）
            //row.SalesUnPrcDisplay = salesDetail.SalesUnPrcDisplay; // 売上単価（表示用）
            //row.SalesUnitCostTaxExc = salesDetail.SalesUnitCostTaxExc; // 原価単価（税抜）
            //row.SalesUnitCostTaxInc = salesDetail.SalesUnitCostTaxInc; // 原価単価（税込）
            //row.ShipmentCntDisplay = salesDetail.ShipmentCntDisplay; // 出荷数（表示用）
            //row.AddUpEnableCnt = salesDetail.AddUpEnableCnt; // 計上可能数
            //row.AlreadyAddUpCnt = salesDetail.AlreadyAddUpCnt; // 計上済数
            //row.ShipmentCntDefault = salesDetail.ShipmentCntDefault; // 出荷数（初期値）
            //row.SalesMoneyDisplay = salesDetail.SalesMoneyDisplay; // 売上金額（表示用）
            //row.CostTaxInc = salesDetail.CostTaxInc; // 原価金額（税込）
            //row.CostTaxExc = salesDetail.CostTaxExc; // 原価金額（税抜）
            //row.AcceptAnOrderCntDisplay = salesDetail.AcceptAnOrderCntDisplay; // 受注数（表示用）
            //row.AcceptAnOrderCntDefault = salesDetail.AcceptAnOrderCntDefault; // 受注数（初期値）
            //row.TaxDiv = salesDetail.TaxDiv; // 課税区分（UI用）
            //row.CanTaxDivChange = salesDetail.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            //row.RowStatus = salesDetail.RowStatus; // 行ステータス
            //row.EditStatus = salesDetail.EditStatus; // エディットステータス
            //row.SlipMemoExist = salesDetail.SlipMemoExist; // メモ存在フラグ
            //row.SupplierSlipExist = salesDetail.SupplierSlipExist; // 仕入情報存在フラグ
            //row.DetailGrossProfitRate = salesDetail.DetailGrossProfitRate; // 明細粗利率
            //row.CostUpRate = salesDetail.CostUpRate; // 原価アップ率
            //row.GrossProfitSecureRate = salesDetail.GrossProfitSecureRate; // 粗利確保率
            //row.SupplierCdForStock = salesDetail.SupplierCdForStock; // 仕入先コード
            //row.StockDate = salesDetail.StockDate; // 仕入日
            //row.PartySalesSlipNum = salesDetail.PartySalesSlipNum; // 仕入伝票番号
            //row.BoCode = salesDetail.BoCode; // BO区分
            //row.SupplierCdForOrder = salesDetail.SupplierCdForOrder; // 発注先
            //row.AcceptAnOrderCntForOrder = salesDetail.AcceptAnOrderCntForOrder; // 発注数
            //row.SupplierSnmForOrder = salesDetail.SupplierSnmForOrder; // 発注先名称
            //row.DeliveredGoodsDiv = salesDetail.DeliveredGoodsDiv; // 納品区分
            //row.DeliveredGoodsDivNm = salesDetail.DeliveredGoodsDivNm; // 納品区分名称
            //row.DeliveredGoodsDivNmSave = salesDetail.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            //row.FollowDeliGoodsDiv = salesDetail.FollowDeliGoodsDiv; // H納品区分
            //row.FollowDeliGoodsDivNm = salesDetail.FollowDeliGoodsDivNm; // H納品区分名称
            //row.FollowDeliGoodsDivNmSave = salesDetail.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            //row.UOEResvdSection = salesDetail.UOEResvdSection; // 指定拠点
            //row.UOEResvdSectionNm = salesDetail.UOEResvdSectionNm; // 指定拠点名称
            //row.UOEResvdSectionNmSave = salesDetail.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            //row.PriceStartDate = salesDetail.PriceStartDate; // 新定価適用日
            //row.Dummy = salesDetail.Dummy; // ダミー（空欄表示用）
            //row.SearchPartsModeState = salesDetail.SearchPartsModeState; // 部品検索状態

            DataRow[] dataRows = row.GetChildRows("AddUpSrcDetail_SalesDetail");
            if ((dataRows != null) && (dataRows.Length > 0))
            {
                foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in dataRows)
                {
                    row.DtlRelationGuid = salesDetailRow.DtlRelationGuid;
                    break;
                }
            }
        }
        # endregion

        #region ●セキュリティ
        /// <summary>
        /// ログ出力情報キー
        /// </summary>
        public struct OutPutLogKey
        {
            /// <summary>受注ステータス</summary>
            int _acptAnOdrStatus;
            /// <summary>明細関連付けＧＵＩＤ</summary>
            Guid _dtlRelationGuid;
            /// <summary>ログ出力モード</summary>
            OutPutLogMode _outPutLogMode;

            /// <summary>
            /// コンストラクタ
            /// </summary>
            /// <param name="acptAnOdrStatus">受注ステータス</param>
            /// <param name="dtlRelationGuid">明細関連付けＧＵＩＤ</param>
            /// <param name="outPutLogMode">ログ出力モード</param>
            internal OutPutLogKey(int acptAnOdrStatus, Guid dtlRelationGuid, OutPutLogMode outPutLogMode)
            {
                this._acptAnOdrStatus = acptAnOdrStatus;
                this._dtlRelationGuid = dtlRelationGuid;
                this._outPutLogMode = outPutLogMode;
            }
            /// <summary>
            /// 受注ステータス
            /// </summary>
            internal int AcptAnOdrStatus
            {
                get { return this._acptAnOdrStatus; }
                set { this._acptAnOdrStatus = value; }
            }
            /// <summary>
            /// 明細関連付けＧＵＩＤ
            /// </summary>
            internal Guid DtlRelationGuid
            {
                get { return this._dtlRelationGuid; }
                set { this._dtlRelationGuid = value; }
            }
            /// <summary>
            /// ログ出力モード
            /// </summary>
            internal OutPutLogMode OutPutLogMode
            {
                get { return this._outPutLogMode; }
                set { this._outPutLogMode = value; }
            }
        }

        /// <summary>
        /// 修正伝票情報取得処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        /// <param name="rowNoDic"></param>
        private void GetSlipRevisionInfo(ArrayList salesDataList, ArrayList acptDataList, ref Dictionary<OutPutLogKey, int> rowNoDic)
        {
            this.GetSlipRevisionInfoProc(salesDataList, ref rowNoDic);
            this.GetSlipRevisionInfoProc(acptDataList, ref rowNoDic);
        }

        /// <summary>
        /// 修正伝票情報取得処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="rowNoDic"></param>
        private void GetSlipRevisionInfoProc(ArrayList salesDataList, ref Dictionary<OutPutLogKey, int> rowNoDic)
        {
            bool isNew = false;
            SalesDetail firstSalesDetai = new SalesDetail();

            if (salesDataList.Count != 0)
            {
                foreach (CustomSerializeArrayList list in salesDataList)
                {
                    isNew = false;
                    foreach (object obj in list)
                    {
                        if (obj is SalesSlip)
                        {
                            SalesSlip salesSlip = (SalesSlip)obj;
                            if ((salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) || (salesSlip.SalesSlipNum == string.Empty)) isNew = true;
                        }

                        if (obj is List<SalesDetail>)
                        {
                            List<SalesDetail> detailList = (List<SalesDetail>)obj;
                            firstSalesDetai = (SalesDetail)detailList[0];
                        }
                    }
                    if (!isNew)
                    {
                        OutPutLogKey outPutLogKey = new OutPutLogKey(firstSalesDetai.AcptAnOdrStatus, firstSalesDetai.DtlRelationGuid, OutPutLogMode.SlipRevision);
                        if (!rowNoDic.ContainsKey(outPutLogKey))
                        {
                            rowNoDic.Add(outPutLogKey, -1);
                        }
                        else
                        {
                            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "☆ログキー　修正伝票で重複");
                        }
                    }
                    // --- ADD 2013/06/17 Y.Wakita ---------->>>>>
                    else
                    {
                        OutPutLogKey outPutLogKey = new OutPutLogKey(firstSalesDetai.AcptAnOdrStatus, firstSalesDetai.DtlRelationGuid, OutPutLogMode.SlipEntry);
                        if (!rowNoDic.ContainsKey(outPutLogKey))
                        {
                            rowNoDic.Add(outPutLogKey, -1);
                        }
                        else
                        {
                            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "☆ログキー　登録伝票で重複");
                        }
                    }
                    // --- ADD 2013/06/17 Y.Wakita ----------<<<<<
                }
            }
        }

        /// <summary>
        /// 赤伝情報取得処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="rowNoDic"></param>
        private void GetRedSlipInfo(ArrayList salesDataList, ref Dictionary<OutPutLogKey, int> rowNoDic)
        {
            this.GetRedSlipInfoProc(salesDataList, ref rowNoDic);
        }

        /// <summary>
        /// 赤伝情報取得処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="rowNoDic"></param>
        private void GetRedSlipInfoProc(ArrayList salesDataList, ref Dictionary<OutPutLogKey, int> rowNoDic)
        {
            bool isRed = false;
            SalesDetail firstSalesDetai = new SalesDetail();

            if (salesDataList.Count != 0)
            {
                foreach (CustomSerializeArrayList list in salesDataList)
                {
                    isRed = false;
                    foreach (object obj in list)
                    {
                        if (obj is SalesSlip)
                        {
                            SalesSlip salesSlip = (SalesSlip)obj;
                            if (salesSlip.DebitNoteDiv == 1) isRed = true;
                        }
                        if (obj is List<SalesDetail>)
                        {
                            List<SalesDetail> detailList = (List<SalesDetail>)obj;
                            firstSalesDetai = (SalesDetail)detailList[0];
                        }
                    }
                    if (isRed == true)
                    {
                        OutPutLogKey outPutLogKey = new OutPutLogKey(firstSalesDetai.AcptAnOdrStatus, firstSalesDetai.DtlRelationGuid, OutPutLogMode.RedSlip);
                        if (!rowNoDic.ContainsKey(outPutLogKey))
                        {
                            rowNoDic.Add(outPutLogKey, -1);
                        }
                        else
                        {
                            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "☆ログキー　赤伝で重複");
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 単価修正情報取得処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        /// <param name="rowNoDic"></param>
        private void GetUnitPriceChangeInfo(ArrayList salesDataList, ArrayList acptDataList, ref Dictionary<OutPutLogKey, int> rowNoDic)
        {
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽単価修正情報取得開始　売上");
            this.GetUnitPriceChangeInfoProc(salesDataList, ref rowNoDic);
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽単価修正情報取得開始　受注");
            this.GetUnitPriceChangeInfoProc(acptDataList, ref rowNoDic);
        }

        /// <summary>
        /// 単価修正情報取得処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="rowNoDic"></param>
        private void GetUnitPriceChangeInfoProc(ArrayList salesDataList, ref Dictionary<OutPutLogKey, int> rowNoDic)
        {
            SalesSlip saveSalesSlip = new SalesSlip();
            List<SalesDetail> saveSalesDetaiList = new List<SalesDetail>();

            if (salesDataList.Count != 0)
            {
                foreach (CustomSerializeArrayList list in salesDataList)
                {
                    saveSalesSlip = null;
                    saveSalesDetaiList = null;
                    foreach (object obj in list)
                    {
                        if (obj is SalesSlip) saveSalesSlip = (SalesSlip)obj;
                        if (obj is List<SalesDetail>) saveSalesDetaiList = (List<SalesDetail>)obj;
                    }

                    if ((saveSalesSlip != null) && (saveSalesDetaiList != null))
                    {
                        foreach (SalesDetail salesDetail in saveSalesDetaiList)
                        {
                            bool isChange = false;
                            if ((salesDetail.SalesUnPrcTaxExcFlDefault == 0) && (salesDetail.SalesUnPrcTaxIncFlDefault == 0))
                            {
                                if (salesDetail.SalesUnPrcChngCd == 1) isChange = true;
                            }
                            else
                            {
                                if ((saveSalesSlip.TotalAmountDispWayCd == (int)SalesSlipInputAcs.TotalAmountDispWayCd.TotalAmount) ||
                                    (salesDetail.TaxationDivCd == (int)CalculateTax.TaxationCode.TaxInc))
                                {
                                    if (salesDetail.SalesUnPrcTaxIncFlDefault != salesDetail.SalesUnPrcTaxIncFl) isChange = true;
                                }
                                else
                                {
                                    if (salesDetail.SalesUnPrcTaxExcFlDefault != salesDetail.SalesUnPrcTaxExcFl) isChange = true;
                                }
                            }
                            if (isChange)
                            {
                                OutPutLogKey outPutLogKey = new OutPutLogKey(saveSalesSlip.AcptAnOdrStatus, salesDetail.DtlRelationGuid, OutPutLogMode.UnitPriceChange);
                                if (!rowNoDic.ContainsKey(outPutLogKey))
                                {
                                    rowNoDic.Add(outPutLogKey, salesDetail.SalesRowNo);
                                }
                                else
                                {
                                    SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "☆ログキー　単価で重複");
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 原単価修正情報取得処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        /// <param name="rowNoDic"></param>
        private void GetUnitCostChangeInfo(ArrayList salesDataList, ArrayList acptDataList, ref Dictionary<OutPutLogKey, int> rowNoDic)
        {
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽原単価修正情報取得開始　売上");
            this.GetUnitCostChangeInfoProc(salesDataList, ref rowNoDic);
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽原単価修正情報取得開始　受注");
            this.GetUnitCostChangeInfoProc(acptDataList, ref rowNoDic);
        }

        /// <summary>
        /// 原単価修正情報取得処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="rowNoDic"></param>
        private void GetUnitCostChangeInfoProc(ArrayList salesDataList, ref Dictionary<OutPutLogKey, int> rowNoDic)
        {
            SalesSlip saveSalesSlip = new SalesSlip();
            List<SalesDetail> saveSalesDetaiList = new List<SalesDetail>();

            if (salesDataList.Count != 0)
            {
                foreach (CustomSerializeArrayList list in salesDataList)
                {
                    saveSalesSlip = null;
                    saveSalesDetaiList = null;
                    foreach (object obj in list)
                    {
                        if (obj is SalesSlip) saveSalesSlip = (SalesSlip)obj;
                        if (obj is List<SalesDetail>) saveSalesDetaiList = (List<SalesDetail>)obj;
                    }

                    if ((saveSalesSlip != null) && (saveSalesDetaiList != null))
                    {
                        foreach (SalesDetail salesDetail in saveSalesDetaiList)
                        {
                            bool isChange = false;
                            if ((salesDetail.SalesUnitCostTacExcDefault == 0) && (salesDetail.SalesUnitCostTaxIncDefault == 0))
                            {
                                if (salesDetail.SalesUnitCostChngDiv == 1) isChange = true;
                            }
                            else
                            {
                                // 常に税抜きで比較
                                if (salesDetail.SalesUnitCostTacExcDefault != salesDetail.SalesUnitCost) isChange = true;
                            }
                            if (isChange)
                            {
                                OutPutLogKey outPutLogKey = new OutPutLogKey(saveSalesSlip.AcptAnOdrStatus, salesDetail.DtlRelationGuid, OutPutLogMode.UnitCostChange);
                                if (!rowNoDic.ContainsKey(outPutLogKey))
                                {
                                    rowNoDic.Add(outPutLogKey, salesDetail.SalesRowNo);
                                }
                                else
                                {
                                    SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "☆ログキー　原単価で重複");
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 数量修正情報取得処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        /// <param name="rowNoDic"></param>
        private void GetCountChangeInfo(ArrayList salesDataList, ArrayList acptDataList, ref Dictionary<OutPutLogKey, int> rowNoDic)
        {
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽数量修正修正情報取得開始　売上");
            this.GetCountChangeInfoProc(salesDataList, ref rowNoDic);
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽数量修正情報取得開始　受注");
            this.GetCountChangeInfoProc(acptDataList, ref rowNoDic);
        }

        /// <summary>
        /// 数量修正情報取得処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="rowNoDic"></param>
        private void GetCountChangeInfoProc(ArrayList salesDataList, ref Dictionary<OutPutLogKey, int> rowNoDic)
        {
            SalesSlip saveSalesSlip = new SalesSlip();
            List<SalesDetail> saveSalesDetaiList = new List<SalesDetail>();

            if (salesDataList.Count != 0)
            {
                foreach (CustomSerializeArrayList list in salesDataList)
                {
                    saveSalesSlip = null;
                    saveSalesDetaiList = null;
                    foreach (object obj in list)
                    {
                        if (obj is SalesSlip) saveSalesSlip = (SalesSlip)obj;
                        if (obj is List<SalesDetail>) saveSalesDetaiList = (List<SalesDetail>)obj;
                    }

                    if ((saveSalesSlip != null) && (saveSalesDetaiList != null) && (saveSalesSlip.SalesSlipNum != ctDefaultSalesSlipNum))
                    {
                        foreach (SalesDetail salesDetail in saveSalesDetaiList)
                        {
                            bool isChange = false;
                            if (salesDetail.ShipmentCntDefault == 0)
                            {
                                if (salesDetail.ShipmentCnt != salesDetail.ShipmentCntDefForChk) isChange = true;
                            }
                            else
                            {
                                if (salesDetail.ShipmentCnt != salesDetail.ShipmentCntDefault) isChange = true;
                            }
                            if (isChange)
                            {
                                OutPutLogKey outPutLogKey = new OutPutLogKey(saveSalesSlip.AcptAnOdrStatus, salesDetail.DtlRelationGuid, OutPutLogMode.CountChange);
                                if (!rowNoDic.ContainsKey(outPutLogKey))
                                {
                                    rowNoDic.Add(outPutLogKey, salesDetail.SalesRowNo);
                                }
                                else
                                {
                                    SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "☆ログキー　数量で重複");
                                }
                            }
                        }
                    }
                }
            }
        }

        // ADD 2013/03/27 T.Miyamoto ------------------------------>>>>>
        /// <summary>
        /// BLコード情報再設定取得処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        /// <param name="rowNoDic"></param>
        private void GetBLCodeInfo(ArrayList salesDataList, ArrayList acptDataList, ref Dictionary<OutPutLogKey, int> rowNoDic)
        {
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽BLコード情報再設定取得開始　売上");
            this.GetBLCodeInfoProc(salesDataList, ref rowNoDic);
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽BLコード情報再設定取得開始　受注");
            this.GetBLCodeInfoProc(acptDataList, ref rowNoDic);
        }

        /// <summary>
        /// BLコード情報再設定取得処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="rowNoDic"></param>
        private void GetBLCodeInfoProc(ArrayList salesDataList, ref Dictionary<OutPutLogKey, int> rowNoDic)
        {
            SalesSlip saveSalesSlip = new SalesSlip();
            List<SalesDetail> saveSalesDetaiList = new List<SalesDetail>();

            if (salesDataList.Count != 0)
            {
                foreach (CustomSerializeArrayList list in salesDataList)
                {
                    saveSalesSlip = null;
                    saveSalesDetaiList = null;
                    foreach (object obj in list)
                    {
                        if (obj is SalesSlip) saveSalesSlip = (SalesSlip)obj;
                        if (obj is List<SalesDetail>) saveSalesDetaiList = (List<SalesDetail>)obj;
                    }

                    if ((saveSalesSlip != null) && (saveSalesDetaiList != null))
                    {
                        foreach (SalesDetail salesDetail in saveSalesDetaiList)
                        {
                            if ((salesDetail.BLGoodsCode != 0) && (salesDetail.BLGroupCode == 0))
                            {
                                OutPutLogKey outPutLogKey = new OutPutLogKey(saveSalesSlip.AcptAnOdrStatus, salesDetail.DtlRelationGuid, OutPutLogMode.BLInfoReset);
                                if (!rowNoDic.ContainsKey(outPutLogKey))
                                {
                                    rowNoDic.Add(outPutLogKey, salesDetail.SalesRowNo);
                                }
                                else
                                {
                                    SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "☆ログキー　BL情報再設定で重複");
                                }
                            }
                        }
                    }
                }
            }
        }
        // ADD 2013/03/27 T.Miyamoto ------------------------------<<<<<

        /// <summary>
        /// ログ出力処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        /// <param name="rowNoDic"></param>
        public void OutPutLogInfo(SortedDictionary<string, ArrayList> logInfoDic)
        {
            this.OutPutLogInfoProc(logInfoDic);
        }

        /// <summary>
        /// ログ出力処理
        /// </summary>
        /// <param name="logInfoDic"></param>
        private void OutPutLogInfoProc(SortedDictionary<string, ArrayList> logInfoDic)
        {
            string outPutString = string.Empty;

            foreach (string key in logInfoDic.Keys)
            {
                int acptAnOdrStatus = this.GetAcptAnOdrStatusFromStringKey(key);
                OutPutLogMode outPutLogMode = this.GetOutPutLogModeFromStringKey(key);
                string acptAnOdrStatusName = this.GetAcptAnOdrStatusName(acptAnOdrStatus);
                string salesSlipNum = this.GetSalesSlipNumFromStringKey(key);
                
                ArrayList rowNoList = logInfoDic[key];
                string msg = string.Empty;
                if ((rowNoList != null) && (rowNoList.Count != 0))
                {
                    rowNoList.Sort();
                    foreach (int rowNo in rowNoList)
                    {
                        msg += ((string.IsNullOrEmpty(msg)) ? "" : "、") + string.Format("{0}行目", rowNo);
                    }
                }

                switch (outPutLogMode)
                {
                    case OutPutLogMode.Abort:
                        break;
                    case OutPutLogMode.RedSlip:
                        MyOpeCtrl.Logger.WriteOperationLog(
                            "RedSlip",
                            (int)OperationCode.RedSlip,
                            0,
                            string.Format("{0}伝票、売上伝票番号:{1}を赤伝", acptAnOdrStatusName, salesSlipNum));
                        break;
                    case OutPutLogMode.UnitPriceChange:
                        MyOpeCtrl.Logger.WriteOperationLog(
                            "UnitPriceChange",
                            (int)OperationCode.UnitPriceChange,
                            0,
                            string.Format("{0}伝票、売上伝票番号:{1}の{2}の{3}を修正", acptAnOdrStatusName, salesSlipNum, msg, this._salesDetailDataTable.SalesUnPrcDisplayColumn.Caption));
                        break;
                    case OutPutLogMode.UnitCostChange:
                        MyOpeCtrl.Logger.WriteOperationLog(
                            "UnitCostChange",
                            (int)OperationCode.UnitCostChange,
                            0,
                            string.Format("{0}伝票、売上伝票番号:{1}の{2}の{3}を修正", acptAnOdrStatusName, salesSlipNum, msg, this._salesDetailDataTable.SalesUnitCostColumn.Caption));
                        break;
                    case OutPutLogMode.CountChange:
                        MyOpeCtrl.Logger.WriteOperationLog(
                            "CountChange",
                            (int)OperationCode.CountChange,
                            0,
                            string.Format("{0}伝票、売上伝票番号:{1}の{2}の数量を修正", acptAnOdrStatusName, salesSlipNum, msg));
                        break;
                    case OutPutLogMode.SlipRevision:
                        MyOpeCtrl.Logger.WriteOperationLog(
                            "Revision",
                            (int)OperationCode.Revision,
                            0,
                            string.Format("{0}伝票、売上伝票番号:{1}を修正", acptAnOdrStatusName, salesSlipNum));
                        break;
                    case OutPutLogMode.SlipDelete:
                        MyOpeCtrl.Logger.WriteOperationLog(
                            "Delete",
                            (int)OperationCode.Delete,
                            0,
                            string.Format("{0}伝票、売上伝票番号:{1}を削除", acptAnOdrStatusName, salesSlipNum));
                        break;
                    // ADD 2013/03/27 T.Miyamoto ------------------------------>>>>>
                    case OutPutLogMode.BLInfoReset:
                        MyOpeCtrl.Logger.WriteOperationLog(
                            "BLInfoReset",
                            (int)OperationCode.Revision,
                            0,
                            string.Format("{0}伝票、売上伝票番号:{1}の{2}のBLコード情報を再設定", acptAnOdrStatusName, salesSlipNum, msg));
                        break;
                    // ADD 2013/03/27 T.Miyamoto ------------------------------<<<<<
                    // --- ADD 2013/06/17 Y.Wakita ---------->>>>>
                    case OutPutLogMode.SlipEntry:
                        MyOpeCtrl.Logger.WriteOperationLog(
                            "SlipEntry",
                            (int)OperationCode.Revision,
                            0,
                            string.Format("{0}伝票、売上伝票番号:{1}を登録", acptAnOdrStatusName, salesSlipNum));
                        break;
                    // --- ADD 2013/06/17 Y.Wakita ----------<<<<<
                }
            }
        }

        /// <summary>
        /// ログ出力情報生成処理(伝票通常)
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="outPutLogMode"></param>
        /// <param name="logInfoDic"></param>
        public void MakeLogInfoForSlip(SalesSlip salesSlip, OutPutLogMode outPutLogMode, ref SortedDictionary<string, ArrayList> logInfoDic)
        {
            logInfoDic.Add(this.CreateStringKey(salesSlip.AcptAnOdrStatus, salesSlip.SalesSlipNum, outPutLogMode), null);
        }

        /// <summary>
        /// ログ出力情報生成処理(伝票明細修正)
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        /// <param name="rowNoDic"></param>
        /// <param name="logInfoDic"></param>
        private void MakeLogInfoForSlipRevision(ArrayList salesDataList, ArrayList acptDataList, Dictionary<OutPutLogKey, int> rowNoDic, ref SortedDictionary<string, ArrayList> logInfoDic)
        {
            this.MakeLogInfoForSlipRevisionProc(salesDataList, acptDataList, rowNoDic, ref logInfoDic);
        }

        /// <summary>
        /// ログ出力情報生成処理(伝票明細修正)
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        /// <param name="rowNoDic"></param>
        /// <param name="logInfoDic"></param>
        private void MakeLogInfoForSlipRevisionProc(ArrayList salesDataList, ArrayList acptDataList, Dictionary<OutPutLogKey, int> rowNoDic, ref SortedDictionary<string, ArrayList> logInfoDic)
        {
            if (salesDataList.Count != 0)
            {
                foreach (CustomSerializeArrayList list in salesDataList)
                {
                    SalesSlipWork svSalesSlip = new SalesSlipWork();
                    SalesDetailWork firstSalesDetaiWork = new SalesDetailWork();
                    OutPutLogKey outPutLogKey;
                    foreach (object obj in list)
                    {
                        if (obj is ArrayList)
                        {
                            ArrayList detailList = (ArrayList)obj;
                            if (detailList[0].GetType() == typeof(SalesDetailWork))
                            {
                                firstSalesDetaiWork = (SalesDetailWork)detailList[0];
                                outPutLogKey = new OutPutLogKey(firstSalesDetaiWork.AcptAnOdrStatus, firstSalesDetaiWork.DtlRelationGuid, OutPutLogMode.SlipRevision);
                                if (rowNoDic.ContainsKey(outPutLogKey))
                                {
                                    logInfoDic.Add(this.CreateStringKey(firstSalesDetaiWork.AcptAnOdrStatus, firstSalesDetaiWork.SalesSlipNum, OutPutLogMode.SlipRevision), null);
                                }

                                // --- ADD 2013/06/17 Y.Wakita ---------->>>>>
                                outPutLogKey = new OutPutLogKey(firstSalesDetaiWork.AcptAnOdrStatus, firstSalesDetaiWork.DtlRelationGuid, OutPutLogMode.SlipEntry);
                                if (rowNoDic.ContainsKey(outPutLogKey))
                                {
                                    logInfoDic.Add(this.CreateStringKey(firstSalesDetaiWork.AcptAnOdrStatus, firstSalesDetaiWork.SalesSlipNum, OutPutLogMode.SlipEntry), null);
                                }
                                // --- ADD 2013/06/17 Y.Wakita ----------<<<<<

                                ArrayList rowNoList1 = new ArrayList();
                                ArrayList rowNoList2 = new ArrayList();
                                ArrayList rowNoList3 = new ArrayList();
                                ArrayList rowNoList4 = new ArrayList(); // ADD 2013/03/27 T.Miyamoto
                                foreach (SalesDetailWork salesDetailWork in detailList)
                                {
                                    outPutLogKey = new OutPutLogKey(salesDetailWork.AcptAnOdrStatus, salesDetailWork.DtlRelationGuid, OutPutLogMode.UnitPriceChange);
                                    if (rowNoDic.ContainsKey(outPutLogKey)) rowNoList1.Add(salesDetailWork.SalesRowNo);
                                    outPutLogKey = new OutPutLogKey(salesDetailWork.AcptAnOdrStatus, salesDetailWork.DtlRelationGuid, OutPutLogMode.UnitCostChange);
                                    if (rowNoDic.ContainsKey(outPutLogKey)) rowNoList2.Add(salesDetailWork.SalesRowNo);
                                    outPutLogKey = new OutPutLogKey(salesDetailWork.AcptAnOdrStatus, salesDetailWork.DtlRelationGuid, OutPutLogMode.CountChange);
                                    if (rowNoDic.ContainsKey(outPutLogKey)) rowNoList3.Add(salesDetailWork.SalesRowNo);
                                    // ADD 2013/03/27 T.Miyamoto ------------------------------>>>>>
                                    outPutLogKey = new OutPutLogKey(salesDetailWork.AcptAnOdrStatus, salesDetailWork.DtlRelationGuid, OutPutLogMode.BLInfoReset);
                                    if (rowNoDic.ContainsKey(outPutLogKey)) rowNoList4.Add(salesDetailWork.SalesRowNo);
                                    // ADD 2013/03/27 T.Miyamoto ------------------------------<<<<<
                                }
                                if (rowNoList1.Count != 0) logInfoDic.Add(this.CreateStringKey(((SalesDetailWork)detailList[0]).AcptAnOdrStatus, ((SalesDetailWork)detailList[0]).SalesSlipNum, OutPutLogMode.UnitPriceChange), rowNoList1);
                                if (rowNoList2.Count != 0) logInfoDic.Add(this.CreateStringKey(((SalesDetailWork)detailList[0]).AcptAnOdrStatus, ((SalesDetailWork)detailList[0]).SalesSlipNum, OutPutLogMode.UnitCostChange), rowNoList2);
                                if (rowNoList3.Count != 0) logInfoDic.Add(this.CreateStringKey(((SalesDetailWork)detailList[0]).AcptAnOdrStatus, ((SalesDetailWork)detailList[0]).SalesSlipNum, OutPutLogMode.CountChange), rowNoList3);
                                if (rowNoList4.Count != 0) logInfoDic.Add(this.CreateStringKey(((SalesDetailWork)detailList[0]).AcptAnOdrStatus, ((SalesDetailWork)detailList[0]).SalesSlipNum, OutPutLogMode.BLInfoReset), rowNoList4); // ADD 2013/03/27 T.Miyamoto
                            }
                        }
                        if (obj is SalesSlipWork)
                        {
                            svSalesSlip = (SalesSlipWork)obj;
                        }
                    }

                    outPutLogKey = new OutPutLogKey(firstSalesDetaiWork.AcptAnOdrStatus, firstSalesDetaiWork.DtlRelationGuid, OutPutLogMode.RedSlip);
                    if (rowNoDic.ContainsKey(outPutLogKey))
                    {
                        logInfoDic.Add(this.CreateStringKey(firstSalesDetaiWork.AcptAnOdrStatus, svSalesSlip.DebitNLnkSalesSlNum, OutPutLogMode.RedSlip), null);
                    }

                }
            }

            if (acptDataList.Count != 0)
            {
                foreach (CustomSerializeArrayList list in acptDataList)
                {
                    foreach (object obj in list)
                    {
                        if (obj is ArrayList)
                        {
                            ArrayList detailList = (ArrayList)obj;
                            if (detailList[0].GetType() == typeof(SalesDetailWork))
                            {
                                SalesDetailWork firstSalesDetaiWork = (SalesDetailWork)detailList[0];
                                OutPutLogKey outPutLogKey = new OutPutLogKey(firstSalesDetaiWork.AcptAnOdrStatus, firstSalesDetaiWork.DtlRelationGuid, OutPutLogMode.SlipRevision);
                                if (rowNoDic.ContainsKey(outPutLogKey))
                                {
                                    logInfoDic.Add(this.CreateStringKey(firstSalesDetaiWork.AcptAnOdrStatus, firstSalesDetaiWork.SalesSlipNum, OutPutLogMode.SlipRevision), null);
                                }

                                outPutLogKey = new OutPutLogKey(firstSalesDetaiWork.AcptAnOdrStatus, firstSalesDetaiWork.DtlRelationGuid, OutPutLogMode.RedSlip);
                                if (rowNoDic.ContainsKey(outPutLogKey))
                                {
                                    logInfoDic.Add(this.CreateStringKey(firstSalesDetaiWork.AcptAnOdrStatus, firstSalesDetaiWork.SalesSlipNum, OutPutLogMode.RedSlip), null);
                                }

                                // --- ADD 2013/06/17 Y.Wakita ---------->>>>>
                                outPutLogKey = new OutPutLogKey(firstSalesDetaiWork.AcptAnOdrStatus, firstSalesDetaiWork.DtlRelationGuid, OutPutLogMode.SlipEntry);
                                if (rowNoDic.ContainsKey(outPutLogKey))
                                {
                                    logInfoDic.Add(this.CreateStringKey(firstSalesDetaiWork.AcptAnOdrStatus, firstSalesDetaiWork.SalesSlipNum, OutPutLogMode.SlipEntry), null);
                                }
                                // --- ADD 2013/06/17 Y.Wakita ----------<<<<<

                                ArrayList rowNoList1 = new ArrayList();
                                ArrayList rowNoList2 = new ArrayList();
                                ArrayList rowNoList3 = new ArrayList();
                                ArrayList rowNoList4 = new ArrayList(); // ADD 2013/03/27 T.Miyamoto
                                foreach (SalesDetailWork salesDetailWork in detailList)
                                {
                                    outPutLogKey = new OutPutLogKey(salesDetailWork.AcptAnOdrStatus, salesDetailWork.DtlRelationGuid, OutPutLogMode.UnitPriceChange);
                                    if (rowNoDic.ContainsKey(outPutLogKey)) rowNoList1.Add(salesDetailWork.SalesRowNo);
                                    outPutLogKey = new OutPutLogKey(salesDetailWork.AcptAnOdrStatus, salesDetailWork.DtlRelationGuid, OutPutLogMode.UnitCostChange);
                                    if (rowNoDic.ContainsKey(outPutLogKey)) rowNoList2.Add(salesDetailWork.SalesRowNo);
                                    outPutLogKey = new OutPutLogKey(salesDetailWork.AcptAnOdrStatus, salesDetailWork.DtlRelationGuid, OutPutLogMode.CountChange);
                                    if (rowNoDic.ContainsKey(outPutLogKey)) rowNoList3.Add(salesDetailWork.SalesRowNo);
                                    // ADD 2013/03/27 T.Miyamoto ------------------------------>>>>>
                                    outPutLogKey = new OutPutLogKey(salesDetailWork.AcptAnOdrStatus, salesDetailWork.DtlRelationGuid, OutPutLogMode.BLInfoReset);
                                    if (rowNoDic.ContainsKey(outPutLogKey)) rowNoList4.Add(salesDetailWork.SalesRowNo);
                                    // ADD 2013/03/27 T.Miyamoto ------------------------------<<<<<
                                }
                                if (rowNoList1.Count != 0) logInfoDic.Add(this.CreateStringKey(((SalesDetailWork)detailList[0]).AcptAnOdrStatus, ((SalesDetailWork)detailList[0]).SalesSlipNum, OutPutLogMode.UnitPriceChange), rowNoList1);
                                if (rowNoList2.Count != 0) logInfoDic.Add(this.CreateStringKey(((SalesDetailWork)detailList[0]).AcptAnOdrStatus, ((SalesDetailWork)detailList[0]).SalesSlipNum, OutPutLogMode.UnitCostChange), rowNoList2);
                                if (rowNoList3.Count != 0) logInfoDic.Add(this.CreateStringKey(((SalesDetailWork)detailList[0]).AcptAnOdrStatus, ((SalesDetailWork)detailList[0]).SalesSlipNum, OutPutLogMode.CountChange), rowNoList3);
                                if (rowNoList4.Count != 0) logInfoDic.Add(this.CreateStringKey(((SalesDetailWork)detailList[0]).AcptAnOdrStatus, ((SalesDetailWork)detailList[0]).SalesSlipNum, OutPutLogMode.BLInfoReset), rowNoList4); // ADD 2013/03/27 T.Miyamoto
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// キー情報から文字列キー生成
        /// </summary>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="outPutLogMode"></param>
        /// <returns></returns>
        private string CreateStringKey(int acptAnOdrStatus, string salesSlipNum, OutPutLogMode outPutLogMode)
        {
            // key:受注ステータス+伝票番号+ログ出力モード
            string retValue = string.Empty;
            string tempSalesSlipNum = (salesSlipNum == string.Empty) ? ctDefaultSalesSlipNum : salesSlipNum;
            retValue = acptAnOdrStatus.ToString("d2") + tempSalesSlipNum + outPutLogMode.ToString("d");
            return retValue;
        }

        /// <summary>
        /// 文字列キーから売上伝票番号取得
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        private string GetSalesSlipNumFromStringKey(string key)
        {
            string retValue = ctDefaultSalesSlipNum;
            if (key != string.Empty)
            {
                retValue = key.Substring(2, key.Length - 3);
            }
            return retValue;
        }

        /// <summary>
        /// 文字列キーから受注ステータス取得
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        private int GetAcptAnOdrStatusFromStringKey(string key)
        {
            int retValue = 0;
            if (key != string.Empty)
            {
                retValue = TStrConv.StrToIntDef(key.Substring(0, 2), 0);
            }
            return retValue;
        }

        /// <summary>
        /// 文字列キーからログ出力モード取得
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        private OutPutLogMode GetOutPutLogModeFromStringKey(string key)
        {
            OutPutLogMode retValue = OutPutLogMode.Abort;
            if (key != string.Empty)
            {
                string a = key.Substring(key.Length - 1, 1);
                retValue = (OutPutLogMode)TStrConv.StrToIntDef(a, 0);
            }
            return retValue;
        }
        #endregion

        #region ●発注情報
        /// <summary>
        /// UOE発注情報存在チェック
        /// </summary>
        /// <param name="dtlRelationGuid">対象明細GUID</param>
        /// <returns></returns>
        /// <remarks>チェック条件：ＢＯ区分、発注先、発注数</remarks>
        /// <br>Update Note: 2011/10/26   鄧潘ハン Redmine#26224</br>
        /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
        /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
        /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
        public bool ExistOrderInfo(Guid dtlRelationGuid)
        {
            bool ret = false;

            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(dtlRelationGuid);

            // チェック条件：BO区分、発注先、発注数
            if ((uoeOrderDtlRow != null) &&
                //(uoeOrderDtlRow.BoCode.Trim() != ctDefaultBoCode) && // DEL 2011/10/26 
                (uoeOrderDtlRow.BoCode.Trim() != ctDefaultBoCode) && // ADD 2011/11/01
                (uoeOrderDtlRow.UOESupplierCd != 0) &&
                (uoeOrderDtlRow.AcceptAnOrderCnt != 0))
            {
                ret = true;
            }

            return ret;
        }

        // ADD 陳艶丹 2020/09/21 東亜商会の数量または売上金額不正の対応 ------>>>>>
        /// <summary>
        /// UOE発注情報存在チェック
        /// </summary>
        /// <param name="row">明細行</param>
        /// <returns></returns>
        /// <br>Note       : UOE発注情報存在チェックを行う。</br>
        /// <br>Programmer : 陳艶丹</br>
        /// <br>Date       : 2020/09/21</br>
        /// <br></br>
        public bool OrderInfoCheck(SalesInputDataSet.SalesDetailRow row)
        {
            bool ret = false;
            // 発注データ
            SalesInputDataSet.SalesDetailAcceptAnOrderRow targetRow = null;
            // 発注データリスト
            SalesInputDataSet.SalesDetailAcceptAnOrderRow[] rowsAcptForOrder = null;
            //発注データがある場合
            if ((this._salesDetailAcceptAnOrderDataTableForOrder != null) && (this._salesDetailAcceptAnOrderDataTableForOrder.Count != 0))
            {
                //指定行の発注データリストを取得
                rowsAcptForOrder = (SalesInputDataSet.SalesDetailAcceptAnOrderRow[])this._salesDetailAcceptAnOrderDataTableForOrder.Select(string.Format("{0}='{1}'", this._salesDetailDataTable.SalesRowNoColumn.ColumnName, row.SalesRowNo));
            }

            if ((rowsAcptForOrder != null) && (rowsAcptForOrder.Length != 0))
            {
                // 発注データ
                targetRow = rowsAcptForOrder[0];
            }

            // 新規の場合、発注データを利用
            if (targetRow != null)
            {
                ret = ExistOrderInfo(targetRow.DtlRelationGuid);
            }
            else
            {
                // 更新の場合、売上データを利用
                ret = ExistOrderInfo(row.DtlRelationGuid);
            }
            return ret;
        }
        // ADD 陳艶丹 2020/09/21 東亜商会の数量または売上金額不正の対応 ------<<<<<

        /// <summary>
        /// UOE発注情報存在チェック
        /// </summary>
        /// <param name="salesRowNo">対象行</param>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：ＢＯ区分、発注先、発注数</remarks>
        public bool ExistOrderInfo(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum.PadLeft(9, '0'), salesRowNo);
            return this.ExistOrderInfo(row);
        }

        /// <summary>
        /// UOE発注情報存在チェック
        /// </summary>
        /// <param name="salesRowNo">対象行</param>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：ＢＯ区分、発注先、発注数</remarks>
        public bool ExistOrderInfo(SalesInputDataSet.SalesDetailRow row)
        {
            bool ret = false;

            if (row != null)
            {
                SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);

                ret = this.ExistOrderInfo(uoeOrderDtlRow);
            }

            return ret;
        }

        //>>>2010/06/09
        /// <summary>
        /// UOE発注情報存在チェック
        /// </summary>
        /// <param name="salesRowNo">対象行</param>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：ＢＯ区分、発注先、発注数</remarks>
        /// <br>Update Note: 2011/10/26   鄧潘ハン Redmine#26224</br>
        /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
        /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
        /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
        public bool ExistOrderInfo(string befBOCode, int befUOESupplierCd, double befAcceptAnOrderCnt)
        {
            bool ret = false;

            // チェック条件：BO区分、発注先、発注数
            //---DEL 2011/10/26 ----------------------------->>>>>
            //if ((befBOCode.Trim() != ctDefaultBoCode) &&
            //   (befUOESupplierCd != 0) &&
            //---DEL 2011/10/26 -----------------------------<<<<<
            //if ((befUOESupplierCd != 0) && // ADD 2011/10/26 // DEL 2011/11/01
            //---DEL 2011/11/01----------------------------->>>>>
            if ((befBOCode.Trim() != ctDefaultBoCode) &&
                (befUOESupplierCd != 0) &&
            //---DEL 2011/11/01 -----------------------------<<<<<
                (befAcceptAnOrderCnt != 0))
            {
                ret = true;
            }

            return ret;
        }
        //<<<2010/06/09

        /// <summary>
        /// UOE発注情報存在チェック
        /// </summary>
        /// <param name="salesRowNo">対象行</param>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：ＢＯ区分、発注先、発注数</remarks>
        /// <br>Update Note: 2011/10/26   鄧潘ハン Redmine#26224</br>
        /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
        /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
        /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
        public bool ExistOrderInfo(SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow)
        {
            bool ret = false;

            // チェック条件：BO区分、発注先、発注数
            if ((uoeOrderDtlRow != null) &&
                //(uoeOrderDtlRow.BoCode.Trim() != ctDefaultBoCode) && // DEL 2011/10/26
                (uoeOrderDtlRow.BoCode.Trim() != ctDefaultBoCode) && // ADD 2011/11/01
                (uoeOrderDtlRow.UOESupplierCd != 0) &&
                (uoeOrderDtlRow.AcceptAnOrderCnt != 0))
            {
                ret = true;
            }

            return ret;
        }

        /// <summary>
        /// UOE発注情報存在チェック
        /// </summary>
        /// <param name="salesRowNo">対象行</param>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：ＢＯ区分、発注先、発注数</remarks>
        /// <br>Update Note: 2011/10/26   鄧潘ハン Redmine#26224</br>
        /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
        /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
        /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
        public bool ExistOrderInfoChkSales(SalesInputDataSet.SalesDetailRow row)
        {
            bool ret = false;

            // チェック条件：BO区分、発注先、発注数
            if ((row != null) &&
                  //(row.BoCode.Trim() != ctDefaultBoCode) && // DEL 2011/10/26
                (row.BoCode.Trim() != ctDefaultBoCode) && // ADD 2011/11/01
                (row.SupplierCdForOrder != 0) &&
                (row.AcceptAnOrderCntForOrder != 0))
            {
                ret = true;
            }

            return ret;
        }

        /// <summary>
        /// UOE発注情報存在チェック
        /// </summary>
        /// <param name="salesRowNo">対象行</param>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：ＢＯ区分、発注先、発注数</remarks>
        /// <br>Update Note: 2011/10/26   鄧潘ハン Redmine#26224</br>
        /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
        /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
        /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
        public bool ExistOrderInfo()
        {
            bool ret = false;

            if ((this._uoeOrderDtlDataTable == null) || (this._uoeOrderDtlDataTable.Count == 0)) return ret;

            foreach (SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow in this._uoeOrderDtlDataTable)
            {
                // チェック条件：BO区分、発注先、発注数
                if ((uoeOrderDtlRow != null) &&
                    //(uoeOrderDtlRow.BoCode.Trim() != ctDefaultBoCode) && // DEL 2011/10/26
                    (uoeOrderDtlRow.BoCode.Trim() != ctDefaultBoCode) &&// ADD 2011/11/01
                    (uoeOrderDtlRow.UOESupplierCd != 0) &&
                    (uoeOrderDtlRow.AcceptAnOrderCnt != 0))
                {
                    ret = true;
                    break;
                }
            }

            return ret;
        }

        /// <summary>
        /// UOE発注データテーブル行追加
        /// </summary>
        /// <param name="salesSlipNum">売上伝票番号</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>追加したUOE発注データ行オブジェクト</returns>
        private SalesInputDataSet.UOEOrderDtlRow AddUOEOrderDtlRow(string salesSlipNum, int salesRowNo)
        {
            // UOE発注データ行オブジェクト生成
            SalesInputDataSet.UOEOrderDtlRow row = this._uoeOrderDtlDataTable.NewUOEOrderDtlRow();

            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesSlipNum, salesRowNo);

            // 共通キーセット(売上明細データよりセット)
            if (salesDetailRow != null)
            {
                row.DtlRelationGuid = salesDetailRow.DtlRelationGuid;
            }
            else
            {
                row.DtlRelationGuid = Guid.NewGuid();
            }
            row.FileHeaderGuid = Guid.Empty;

            // UOE発注データテーブルへ追加
            this._uoeOrderDtlDataTable.AddUOEOrderDtlRow(row);

            return row;
        }

        /// <summary>
        /// UOE発注データテーブル削除（オーバーロード）
        /// </summary>
        /// <param name="salesRowNoList">売上行番号リスト</param>
        private void DeleteUOEOrderDtlRow(List<int> salesRowNoList)
        {
            foreach (int salesRowNo in salesRowNoList)
            {
                this.DeleteUOEOrderDtlRow(this._currentSalesSlipNum, salesRowNo);
            }
        }

        /// <summary>
        /// UOE発注データテーブル削除（オーバーロード）
        /// </summary>
        /// <param name="salesSlipNum">売上伝票番号</param>
        /// <param name="salesRowNo">売上行番号</param>
        private void DeleteUOEOrderDtlRow(string salesSlipNum, int salesRowNo)
        {
            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow targetSalesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesSlipNum, salesRowNo);

            // UOE発注データ行オブジェクト取得
            SalesInputDataSet.UOEOrderDtlRow targetRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(targetSalesDetailRow.DtlRelationGuid);

            if (targetRow == null) return;

            // UOE発注データテーブルから削除
            this._uoeOrderDtlDataTable.RemoveUOEOrderDtlRow(targetRow);
        }

        /// <summary>
        /// UOE発注データテーブル削除（オーバーロード）
        /// </summary>
        /// <param name="dtlRelationGuid">共通キー</param>
        private void DeleteUOEOrderDtlRow(Guid dtlRelationGuid)
        {
            // UOE発注データ行オブジェクト取得
            SalesInputDataSet.UOEOrderDtlRow targetRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(dtlRelationGuid);

            if (targetRow == null) return;

            // UOE発注データテーブルから削除
            this._uoeOrderDtlDataTable.RemoveUOEOrderDtlRow(targetRow);
        }

        /// <summary>
        /// UOE発注データ行オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNoList">クリア対象売上行番号リスト</param>
        public void ClearUOEOrderDtlRow(List<int> salesRowNoList)
        {
            foreach (int salesRowNo in salesRowNoList)
            {
                this.ClearUOEOrderDtlRow(salesRowNo);
            }
        }

        /// <summary>
        /// UOE発注データ行オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">クリア対象売上行番号</param>
        public void ClearUOEOrderDtlRow(int salesRowNo)
        {
            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this.SalesSlip.SalesSlipNum, salesRowNo);

            // UOE発注データ行オブジェクト取得
            SalesInputDataSet.UOEOrderDtlRow row = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);

            if (row != null)
            {
                this.ClearUOEOrderDtlRow(row);
            }
        }

        /// <summary>
        /// UOE発注データ行オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="row">UOE発注データ行オブジェクト</param>
        private void ClearUOEOrderDtlRow(SalesInputDataSet.UOEOrderDtlRow row)
        {
            if (row == null) return;

            #region 項目セット
            row.CreateDateTime = DateTime.MinValue; // 作成日時
            row.UpdateDateTime = DateTime.MinValue; // 更新日時
            row.EnterpriseCode = string.Empty; // 企業コード
            row.FileHeaderGuid = Guid.Empty; // GUID
            row.UpdEmployeeCode = string.Empty; // 更新従業員コード
            row.UpdAssemblyId1 = string.Empty; // 更新アセンブリID1
            row.UpdAssemblyId2 = string.Empty; // 更新アセンブリID2
            row.LogicalDeleteCode = 0; // 論理削除区分
            row.SystemDivCd = 0; // システム区分
            row.UOESalesOrderNo = 0; // UOE発注番号
            row.UOESalesOrderRowNo = 0; // UOE発注行番号
            row.SendTerminalNo = 0; // 送信端末番号
            row.UOESupplierCd = 0; // UOE発注先コード
            row.UOESupplierName = string.Empty; // UOE発注先名称
            row.CommAssemblyId = string.Empty; // 通信アセンブリID
            row.OnlineNo = 0; // オンライン番号
            row.OnlineRowNo = 0; // オンライン行番号
            row.SalesDate = DateTime.MinValue; // 売上日付
            row.InputDay = DateTime.MinValue; // 入力日
            row.DataUpdateDateTime = DateTime.MinValue; // データ更新日時
            row.UOEKind = 0; // UOE種別
            row.SalesSlipNum = string.Empty; // 売上伝票番号
            row.AcptAnOdrStatus = 0; // 受注ステータス
            row.SalesSlipDtlNum = 0; // 売上明細通番
            row.SectionCode = string.Empty; // 拠点コード
            row.SubSectionCode = 0; // 部門コード
            row.CustomerCode = 0; // 得意先コード
            row.CustomerSnm = string.Empty; // 得意先略称
            row.CashRegisterNo = 0; // レジ番号
            row.CommonSeqNo = 0; // 共通通番
            row.SupplierFormal = 0; // 仕入形式
            row.SupplierSlipNo = 0; // 仕入伝票番号
            row.StockSlipDtlNum = 0; // 仕入明細通番
            row.BoCode = string.Empty; // BO区分
            row.UOEDeliGoodsDiv = string.Empty; // 納品区分
            row.DeliveredGoodsDivNm = string.Empty; // 納品区分名称
            row.FollowDeliGoodsDiv = string.Empty; // フォロー納品区分
            row.FollowDeliGoodsDivNm = string.Empty; // フォロー納品区分名称
            row.UOEResvdSection = string.Empty; // UOE指定拠点
            row.UOEResvdSectionNm = string.Empty; // UOE指定拠点名称
            row.EmployeeCode = string.Empty; // 従業員コード
            row.EmployeeName = string.Empty; // 従業員名称
            row.GoodsMakerCd = 0; // 商品メーカーコード
            row.MakerName = string.Empty; // メーカー名称
            row.GoodsNo = string.Empty; // 商品番号
            row.GoodsNoNoneHyphen = string.Empty; // ハイフン無商品番号
            row.GoodsName = string.Empty; // 商品名称
            row.WarehouseCode = string.Empty; // 倉庫コード
            row.WarehouseName = string.Empty; // 倉庫名称
            row.WarehouseShelfNo = string.Empty; // 倉庫棚番
            row.AcceptAnOrderCnt = 0; // 受注数量
            row.ListPrice = 0; // 定価（浮動）
            row.SalesUnitCost = 0; // 原価単価
            row.SupplierCd = 0; // 仕入先コード
            row.SupplierSnm = string.Empty; // 仕入先略称
            row.UoeRemark1 = string.Empty; // ＵＯＥリマーク１
            row.UoeRemark2 = string.Empty; // ＵＯＥリマーク２
            row.ReceiveDate = DateTime.MinValue; // 受信日付
            row.ReceiveTime = 0; // 受信時刻
            row.AnswerMakerCd = 0; // 回答メーカーコード
            row.AnswerPartsNo = string.Empty; // 回答品番
            row.AnswerPartsName = string.Empty; // 回答品名
            row.SubstPartsNo = string.Empty; // 代替品番
            row.UOESectOutGoodsCnt = 0; // UOE拠点出庫数
            row.BOShipmentCnt1 = 0; // BO出庫数1
            row.BOShipmentCnt2 = 0; // BO出庫数2
            row.BOShipmentCnt3 = 0; // BO出庫数3
            row.MakerFollowCnt = 0; // メーカーフォロー数
            row.NonShipmentCnt = 0; // 未出庫数
            row.UOESectStockCnt = 0; // UOE拠点在庫数
            row.BOStockCount1 = 0; // BO在庫数1
            row.BOStockCount2 = 0; // BO在庫数2
            row.BOStockCount3 = 0; // BO在庫数3
            row.UOESectionSlipNo = string.Empty; // UOE拠点伝票番号
            row.BOSlipNo1 = string.Empty; // BO伝票番号１
            row.BOSlipNo2 = string.Empty; // BO伝票番号２
            row.BOSlipNo3 = string.Empty; // BO伝票番号３
            row.EOAlwcCount = 0; // EO引当数
            row.BOManagementNo = string.Empty; // BO管理番号
            row.AnswerListPrice = 0; // 回答定価
            row.AnswerSalesUnitCost = 0; // 回答原価単価
            row.UOESubstMark = string.Empty; // UOE代替マーク
            row.UOEStockMark = string.Empty; // UOE在庫マーク
            row.PartsLayerCd = string.Empty; // 層別コード
            row.MazdaUOEShipSectCd1 = string.Empty; // UOE出荷拠点コード１（マツダ）
            row.MazdaUOEShipSectCd2 = string.Empty; // UOE出荷拠点コード２（マツダ）
            row.MazdaUOEShipSectCd3 = string.Empty; // UOE出荷拠点コード３（マツダ）
            row.MazdaUOESectCd1 = string.Empty; // UOE拠点コード１（マツダ）
            row.MazdaUOESectCd2 = string.Empty; // UOE拠点コード２（マツダ）
            row.MazdaUOESectCd3 = string.Empty; // UOE拠点コード３（マツダ）
            row.MazdaUOESectCd4 = string.Empty; // UOE拠点コード４（マツダ）
            row.MazdaUOESectCd5 = string.Empty; // UOE拠点コード５（マツダ）
            row.MazdaUOESectCd6 = string.Empty; // UOE拠点コード６（マツダ）
            row.MazdaUOESectCd7 = string.Empty; // UOE拠点コード７（マツダ）
            row.MazdaUOEStockCnt1 = 0; // UOE在庫数１（マツダ）
            row.MazdaUOEStockCnt2 = 0; // UOE在庫数２（マツダ）
            row.MazdaUOEStockCnt3 = 0; // UOE在庫数３（マツダ）
            row.MazdaUOEStockCnt4 = 0; // UOE在庫数４（マツダ）
            row.MazdaUOEStockCnt5 = 0; // UOE在庫数５（マツダ）
            row.MazdaUOEStockCnt6 = 0; // UOE在庫数６（マツダ）
            row.MazdaUOEStockCnt7 = 0; // UOE在庫数７（マツダ）
            row.UOEDistributionCd = string.Empty; // UOE卸コード
            row.UOEOtherCd = string.Empty; // UOE他コード
            row.UOEHMCd = string.Empty; // UOEＨＭコード
            row.BOCount = 0; // ＢＯ数
            row.UOEMarkCode = string.Empty; // UOEマークコード
            row.SourceShipment = string.Empty; // 出荷元
            row.ItemCode = string.Empty; // アイテムコード
            row.UOECheckCode = string.Empty; // UOEチェックコード
            row.HeadErrorMassage = string.Empty; // ヘッドエラーメッセージ
            row.LineErrorMassage = string.Empty; // ラインエラーメッセージ
            row.DataSendCode = 0; // データ送信区分
            row.DataRecoverDiv = 0; // データ復旧区分
            row.EnterUpdDivSec = 0; // 入庫更新区分（拠点）
            row.EnterUpdDivBO1 = 0; // 入庫更新区分（BO1）
            row.EnterUpdDivBO2 = 0; // 入庫更新区分（BO2）
            row.EnterUpdDivBO3 = 0; // 入庫更新区分（BO3）
            row.EnterUpdDivMaker = 0; // 入庫更新区分（ﾒｰｶｰ）
            row.EnterUpdDivEO = 0; // 入庫更新区分（EO）
            row.DtlRelationGuid = Guid.Empty; // 明細共通キー
            #endregion
        }

        /// <summary>
        /// 売上明細データ行オブジェクトの発注情報のクリアを行います。
        /// </summary>
        /// <param name="targetRow"></param>
        private void ClearSalesDetailOrderInfo(SalesInputDataSet.SalesDetailRow targetRow)
        {
            //targetRow.SupplierCdForOrder = 0;
            targetRow.BoCode = ctDefaultBoCode;
            targetRow.AcceptAnOrderCntForOrder = 0;
            //targetRow.SupplierSnmForOrder;
            //targetRow.UOEDeliGoodsDiv;
            //targetRow.DeliveredGoodsDivNm;
            //targetRow.DeliveredGoodsDivNmSave;
            //targetRow.FollowDeliGoodsDiv;
            //targetRow.FollowDeliGoodsDivNm;
            //targetRow.FollowDeliGoodsDivNmSave;
            //targetRow.UOEResvdSection;
            //targetRow.UOEResvdSectionNm;
            //targetRow.UOEResvdSectionNmSave;
        }

        /// <summary>
        /// UOE発注データ行オブジェクトのコピーを行います。
        /// </summary>
        /// <param name="sourceRow"></param>
        /// <param name="targetRow"></param>
        public void CopyCompleteUOEOrderDtlRow(SalesInputDataSet.UOEOrderDtlRow sourceRow, SalesInputDataSet.UOEOrderDtlRow targetRow)
        {
            #region 項目セット
            targetRow.CreateDateTime = sourceRow.CreateDateTime; // 作成日時
            targetRow.UpdateDateTime = sourceRow.UpdateDateTime; // 更新日時
            targetRow.EnterpriseCode = sourceRow.EnterpriseCode; // 企業コード
            targetRow.FileHeaderGuid = sourceRow.FileHeaderGuid; // GUID
            targetRow.UpdEmployeeCode = sourceRow.UpdEmployeeCode; // 更新従業員コード
            targetRow.UpdAssemblyId1 = sourceRow.UpdAssemblyId1; // 更新アセンブリID1
            targetRow.UpdAssemblyId2 = sourceRow.UpdAssemblyId2; // 更新アセンブリID2
            targetRow.LogicalDeleteCode = sourceRow.LogicalDeleteCode; // 論理削除区分
            targetRow.SystemDivCd = sourceRow.SystemDivCd; // システム区分
            targetRow.UOESalesOrderNo = sourceRow.UOESalesOrderNo; // UOE発注番号
            targetRow.UOESalesOrderRowNo = sourceRow.UOESalesOrderRowNo; // UOE発注行番号
            targetRow.SendTerminalNo = sourceRow.SendTerminalNo; // 送信端末番号
            targetRow.UOESupplierCd = sourceRow.UOESupplierCd; // UOE発注先コード
            targetRow.UOESupplierName = sourceRow.UOESupplierName; // UOE発注先名称
            targetRow.CommAssemblyId = sourceRow.CommAssemblyId; // 通信アセンブリID
            targetRow.OnlineNo = sourceRow.OnlineNo; // オンライン番号
            targetRow.OnlineRowNo = sourceRow.OnlineRowNo; // オンライン行番号
            targetRow.SalesDate = sourceRow.SalesDate; // 売上日付
            targetRow.InputDay = sourceRow.InputDay; // 入力日
            targetRow.DataUpdateDateTime = sourceRow.DataUpdateDateTime; // データ更新日時
            targetRow.UOEKind = sourceRow.UOEKind; // UOE種別
            targetRow.SalesSlipNum = sourceRow.SalesSlipNum; // 売上伝票番号
            targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus; // 受注ステータス
            targetRow.SalesSlipDtlNum = sourceRow.SalesSlipDtlNum; // 売上明細通番
            targetRow.SectionCode = sourceRow.SectionCode; // 拠点コード
            targetRow.SubSectionCode = sourceRow.SubSectionCode; // 部門コード
            targetRow.CustomerCode = sourceRow.CustomerCode; // 得意先コード
            targetRow.CustomerSnm = sourceRow.CustomerSnm; // 得意先略称
            targetRow.CashRegisterNo = sourceRow.CashRegisterNo; // レジ番号
            targetRow.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            targetRow.SupplierFormal = sourceRow.SupplierFormal; // 仕入形式
            targetRow.SupplierSlipNo = sourceRow.SupplierSlipNo; // 仕入伝票番号
            targetRow.StockSlipDtlNum = sourceRow.StockSlipDtlNum; // 仕入明細通番
            targetRow.BoCode = sourceRow.BoCode; // BO区分
            targetRow.UOEDeliGoodsDiv = sourceRow.UOEDeliGoodsDiv; // 納品区分
            targetRow.DeliveredGoodsDivNm = sourceRow.DeliveredGoodsDivNm; // 納品区分名称
            targetRow.FollowDeliGoodsDiv = sourceRow.FollowDeliGoodsDiv; // フォロー納品区分
            targetRow.FollowDeliGoodsDivNm = sourceRow.FollowDeliGoodsDivNm; // フォロー納品区分名称
            targetRow.UOEResvdSection = sourceRow.UOEResvdSection; // UOE指定拠点
            targetRow.UOEResvdSectionNm = sourceRow.UOEResvdSectionNm; // UOE指定拠点名称
            targetRow.EmployeeCode = sourceRow.EmployeeCode; // 従業員コード
            targetRow.EmployeeName = sourceRow.EmployeeName; // 従業員名称
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd; // 商品メーカーコード
            targetRow.MakerName = sourceRow.MakerName; // メーカー名称
            targetRow.GoodsNo = sourceRow.GoodsNo; // 商品番号
            targetRow.GoodsNoNoneHyphen = sourceRow.GoodsNoNoneHyphen; // ハイフン無商品番号
            targetRow.GoodsName = sourceRow.GoodsName; // 商品名称
            targetRow.WarehouseCode = sourceRow.WarehouseCode; // 倉庫コード
            targetRow.WarehouseName = sourceRow.WarehouseName; // 倉庫名称
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo; // 倉庫棚番
            targetRow.AcceptAnOrderCnt = sourceRow.AcceptAnOrderCnt; // 受注数量
            targetRow.ListPrice = sourceRow.ListPrice; // 定価（浮動）
            targetRow.SalesUnitCost = sourceRow.SalesUnitCost; // 原価単価
            targetRow.SupplierCd = sourceRow.SupplierCd; // 仕入先コード
            targetRow.SupplierSnm = sourceRow.SupplierSnm; // 仕入先略称
            targetRow.UoeRemark1 = sourceRow.UoeRemark1; // ＵＯＥリマーク１
            targetRow.UoeRemark2 = sourceRow.UoeRemark2; // ＵＯＥリマーク２
            targetRow.ReceiveDate = sourceRow.ReceiveDate; // 受信日付
            targetRow.ReceiveTime = sourceRow.ReceiveTime; // 受信時刻
            targetRow.AnswerMakerCd = sourceRow.AnswerMakerCd; // 回答メーカーコード
            targetRow.AnswerPartsNo = sourceRow.AnswerPartsNo; // 回答品番
            targetRow.AnswerPartsName = sourceRow.AnswerPartsName; // 回答品名
            targetRow.SubstPartsNo = sourceRow.SubstPartsNo; // 代替品番
            targetRow.UOESectOutGoodsCnt = sourceRow.UOESectOutGoodsCnt; // UOE拠点出庫数
            targetRow.BOShipmentCnt1 = sourceRow.BOShipmentCnt1; // BO出庫数1
            targetRow.BOShipmentCnt2 = sourceRow.BOShipmentCnt2; // BO出庫数2
            targetRow.BOShipmentCnt3 = sourceRow.BOShipmentCnt3; // BO出庫数3
            targetRow.MakerFollowCnt = sourceRow.MakerFollowCnt; // メーカーフォロー数
            targetRow.NonShipmentCnt = sourceRow.NonShipmentCnt; // 未出庫数
            targetRow.UOESectStockCnt = sourceRow.UOESectStockCnt; // UOE拠点在庫数
            targetRow.BOStockCount1 = sourceRow.BOStockCount1; // BO在庫数1
            targetRow.BOStockCount2 = sourceRow.BOStockCount2; // BO在庫数2
            targetRow.BOStockCount3 = sourceRow.BOStockCount3; // BO在庫数3
            targetRow.UOESectionSlipNo = sourceRow.UOESectionSlipNo; // UOE拠点伝票番号
            targetRow.BOSlipNo1 = sourceRow.BOSlipNo1; // BO伝票番号１
            targetRow.BOSlipNo2 = sourceRow.BOSlipNo2; // BO伝票番号２
            targetRow.BOSlipNo3 = sourceRow.BOSlipNo3; // BO伝票番号３
            targetRow.EOAlwcCount = sourceRow.EOAlwcCount; // EO引当数
            targetRow.BOManagementNo = sourceRow.BOManagementNo; // BO管理番号
            targetRow.AnswerListPrice = sourceRow.AnswerListPrice; // 回答定価
            targetRow.AnswerSalesUnitCost = sourceRow.AnswerSalesUnitCost; // 回答原価単価
            targetRow.UOESubstMark = sourceRow.UOESubstMark; // UOE代替マーク
            targetRow.UOEStockMark = sourceRow.UOEStockMark; // UOE在庫マーク
            targetRow.PartsLayerCd = sourceRow.PartsLayerCd; // 層別コード
            targetRow.MazdaUOEShipSectCd1 = sourceRow.MazdaUOEShipSectCd1; // UOE出荷拠点コード１（マツダ）
            targetRow.MazdaUOEShipSectCd2 = sourceRow.MazdaUOEShipSectCd2; // UOE出荷拠点コード２（マツダ）
            targetRow.MazdaUOEShipSectCd3 = sourceRow.MazdaUOEShipSectCd3; // UOE出荷拠点コード３（マツダ）
            targetRow.MazdaUOESectCd1 = sourceRow.MazdaUOESectCd1; // UOE拠点コード１（マツダ）
            targetRow.MazdaUOESectCd2 = sourceRow.MazdaUOESectCd2; // UOE拠点コード２（マツダ）
            targetRow.MazdaUOESectCd3 = sourceRow.MazdaUOESectCd3; // UOE拠点コード３（マツダ）
            targetRow.MazdaUOESectCd4 = sourceRow.MazdaUOESectCd4; // UOE拠点コード４（マツダ）
            targetRow.MazdaUOESectCd5 = sourceRow.MazdaUOESectCd5; // UOE拠点コード５（マツダ）
            targetRow.MazdaUOESectCd6 = sourceRow.MazdaUOESectCd6; // UOE拠点コード６（マツダ）
            targetRow.MazdaUOESectCd7 = sourceRow.MazdaUOESectCd7; // UOE拠点コード７（マツダ）
            targetRow.MazdaUOEStockCnt1 = sourceRow.MazdaUOEStockCnt1; // UOE在庫数１（マツダ）
            targetRow.MazdaUOEStockCnt2 = sourceRow.MazdaUOEStockCnt2; // UOE在庫数２（マツダ）
            targetRow.MazdaUOEStockCnt3 = sourceRow.MazdaUOEStockCnt3; // UOE在庫数３（マツダ）
            targetRow.MazdaUOEStockCnt4 = sourceRow.MazdaUOEStockCnt4; // UOE在庫数４（マツダ）
            targetRow.MazdaUOEStockCnt5 = sourceRow.MazdaUOEStockCnt5; // UOE在庫数５（マツダ）
            targetRow.MazdaUOEStockCnt6 = sourceRow.MazdaUOEStockCnt6; // UOE在庫数６（マツダ）
            targetRow.MazdaUOEStockCnt7 = sourceRow.MazdaUOEStockCnt7; // UOE在庫数７（マツダ）
            targetRow.UOEDistributionCd = sourceRow.UOEDistributionCd; // UOE卸コード
            targetRow.UOEOtherCd = sourceRow.UOEOtherCd; // UOE他コード
            targetRow.UOEHMCd = sourceRow.UOEHMCd; // UOEＨＭコード
            targetRow.BOCount = sourceRow.BOCount; // ＢＯ数
            targetRow.UOEMarkCode = sourceRow.UOEMarkCode; // UOEマークコード
            targetRow.SourceShipment = sourceRow.SourceShipment; // 出荷元
            targetRow.ItemCode = sourceRow.ItemCode; // アイテムコード
            targetRow.UOECheckCode = sourceRow.UOECheckCode; // UOEチェックコード
            targetRow.HeadErrorMassage = sourceRow.HeadErrorMassage; // ヘッドエラーメッセージ
            targetRow.LineErrorMassage = sourceRow.LineErrorMassage; // ラインエラーメッセージ
            targetRow.DataSendCode = sourceRow.DataSendCode; // データ送信区分
            targetRow.DataRecoverDiv = sourceRow.DataRecoverDiv; // データ復旧区分
            targetRow.EnterUpdDivSec = sourceRow.EnterUpdDivSec; // 入庫更新区分（拠点）
            targetRow.EnterUpdDivBO1 = sourceRow.EnterUpdDivBO1; // 入庫更新区分（BO1）
            targetRow.EnterUpdDivBO2 = sourceRow.EnterUpdDivBO2; // 入庫更新区分（BO2）
            targetRow.EnterUpdDivBO3 = sourceRow.EnterUpdDivBO3; // 入庫更新区分（BO3）
            targetRow.EnterUpdDivMaker = sourceRow.EnterUpdDivMaker; // 入庫更新区分（ﾒｰｶｰ）
            targetRow.EnterUpdDivEO = sourceRow.EnterUpdDivEO; // 入庫更新区分（EO）
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid; // 共通キー
            #endregion
        }

        /// <summary>
        /// UOE発注データ行オブジェクトを取得します
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <returns>UOE発注データ行オブジェクト</returns>
        public SalesInputDataSet.UOEOrderDtlRow GetUOEOrderDtlRowForNew(int salesRowNo)
        {
            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = null;

            if (salesDetailRow != null)
            {
                // UOE発注データ行オブジェクト取得
                uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);

                // 存在しなかった場合は追加する
                if (uoeOrderDtlRow == null)
                {
                    // 新規行追加
                    uoeOrderDtlRow = this.AddUOEOrderDtlRow(this._currentSalesSlipNum, salesRowNo);
                }

                // UOE発注データに初期値セット
                this.DefaultSettingUOEOrderDtlRow(salesDetailRow, ref uoeOrderDtlRow);
            }

            return uoeOrderDtlRow;
        }

        /// <summary>
        /// UOE発注データ行オブジェクトを取得します
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <returns>UOE発注データ行オブジェクト</returns>
        public SalesInputDataSet.UOEOrderDtlRow GetUOEOrderDtlRow(int salesRowNo)
        {
            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = null;

            if (salesDetailRow != null)
            {
                // UOE発注データ行オブジェクト取得
                uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);

                // 存在しなかった場合は追加する
                if (uoeOrderDtlRow == null)
                {
                    // 新規行追加
                    uoeOrderDtlRow = this.AddUOEOrderDtlRow(this._currentSalesSlipNum, salesRowNo);

                    // UOE発注データに初期値セット
                    this.DefaultSettingUOEOrderDtlRow(salesDetailRow, ref uoeOrderDtlRow);
                }
            }

            return uoeOrderDtlRow;
        }

        /// <summary>
        /// UOE発注データ行の発注情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        public void SettingUOEOrderDtlRowForNew(int salesRowNo)
        {
            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this.GetSalesDetailRow(salesRowNo);

            if (salesDetailRow != null)
            {
                if ((!string.IsNullOrEmpty(salesDetailRow.GoodsNo)) || (!string.IsNullOrEmpty(salesDetailRow.GoodsName)))
                {
                    // UOE発注データ行オブジェクト取得
                    this.GetUOEOrderDtlRowForNew(salesRowNo);
                }
            }
        }

        /// <summary>
        /// UOE発注データ行の発注情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        public void SettingUOEOrderDtlRow(int salesRowNo)
        {
            // 売上明細データ行オブジェクト取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this.GetSalesDetailRow(salesRowNo);

            if (salesDetailRow != null)
            {
                if ((!string.IsNullOrEmpty(salesDetailRow.GoodsNo)) || (!string.IsNullOrEmpty(salesDetailRow.GoodsName)))
                {
                    // UOE発注データ行オブジェクト取得
                    this.GetUOEOrderDtlRow(salesRowNo);
                }
            }
        }

        /// <summary>
        /// UOE発注データ行オブジェクト初期値設定
        /// </summary>
        /// <param name="salesDetailRow">売上明細データ行オブジェクト</param>
        /// <param name="uoeOrderDtlRow">UOE発注データ行オブジェクト</param>
        public void DefaultSettingUOEOrderDtlRow(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            if (uoeOrderDtlRow != null)
            {
                this.DefaultSettingUOEOrderDtlRow(salesDetailRow, ref uoeOrderDtlRow);
            }
        }

        /// <summary>
        /// UOE発注データ行オブジェクト初期値設定
        /// </summary>
        /// <param name="salesDetailRow">売上明細データ行オブジェクト</param>
        /// <param name="uoeOrderDtlRow">UOE発注データ行オブジェクト</param>
        /// <br>Update Note: 2011/11/07   鄧潘ハン Redmine#26442 発注選択時のBO区分の初期表示の対応</br>
        private void DefaultSettingUOEOrderDtlRow(SalesInputDataSet.SalesDetailRow salesDetailRow, ref SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow)
        {
            if (uoeOrderDtlRow != null)
            {
                #region 項目設定
                //uoeOrderDtlRow.CreateDateTime = salesDetailRow.CreateDateTime; // 作成日時
                //uoeOrderDtlRow.UpdateDateTime = salesDetailRow.UpdateDateTime; // 更新日時
                //uoeOrderDtlRow.EnterpriseCode = salesDetailRow.EnterpriseCode; // 企業コード
                //uoeOrderDtlRow.FileHeaderGuid = salesDetailRow.FileHeaderGuid; // GUID
                //uoeOrderDtlRow.UpdEmployeeCode = salesDetailRow.UpdEmployeeCode; // 更新従業員コード
                //uoeOrderDtlRow.UpdAssemblyId1 = salesDetailRow.UpdAssemblyId1; // 更新アセンブリID1
                //uoeOrderDtlRow.UpdAssemblyId2 = salesDetailRow.UpdAssemblyId2; // 更新アセンブリID2
                //uoeOrderDtlRow.LogicalDeleteCode = salesDetailRow.LogicalDeleteCode; // 論理削除区分

                uoeOrderDtlRow.SystemDivCd = 1; // システム区分(1:伝発)
                //uoeOrderDtlRow.UOESalesOrderNo = salesDetailRow.UOESalesOrderNo; // UOE発注番号
                //uoeOrderDtlRow.UOESalesOrderRowNo = salesDetailRow.UOESalesOrderRowNo; // UOE発注行番号
                //uoeOrderDtlRow.SendTerminalNo = salesDetailRow.SendTerminalNo; // 送信端末番号
                uoeOrderDtlRow.UOESupplierCd = salesDetailRow.SupplierCdForOrder; // UOE発注先コード
                uoeOrderDtlRow.UOESupplierName = salesDetailRow.SupplierSnmForOrder; // UOE発注先名称
                //uoeOrderDtlRow.CommAssemblyId = salesDetailRow.CommAssemblyId; // 通信アセンブリID
                //uoeOrderDtlRow.OnlineNo = salesDetailRow.OnlineNo; // オンライン番号
                //uoeOrderDtlRow.OnlineRowNo = salesDetailRow.OnlineRowNo; // オンライン行番号
                uoeOrderDtlRow.SalesDate = salesDetailRow.SalesDate; // 売上日付
                uoeOrderDtlRow.InputDay = DateTime.Today; // 入力日
                uoeOrderDtlRow.DataUpdateDateTime = DateTime.Today; // データ更新日時
                uoeOrderDtlRow.UOEKind = 0; // UOE種別(0:UOE)
                //uoeOrderDtlRow.SalesSlipNum = salesDetailRow.SalesSlipNum; // 売上伝票番号
                uoeOrderDtlRow.AcptAnOdrStatus = (int)AcptAnOdrStatusState.AcceptAnOrder; // 受注ステータス
                uoeOrderDtlRow.SalesSlipDtlNum = salesDetailRow.SalesSlipDtlNum; // 売上明細通番
                uoeOrderDtlRow.SectionCode = this._salesSlip.SectionCode; // 拠点コード
                int subSectionCode;
                this._salesSlipInputInitDataAcs.GetSubSection_FromEmployeeDtl(this._salesSlip.SectionCode, out subSectionCode);
                uoeOrderDtlRow.SubSectionCode = subSectionCode; // 部門コード
                uoeOrderDtlRow.CustomerCode = this._salesSlip.CustomerCode; // 得意先コード
                uoeOrderDtlRow.CustomerSnm = this._salesSlip.CustomerSnm; // 得意先略称
                uoeOrderDtlRow.CashRegisterNo = this._salesSlipInputInitDataAcs.GetPosTerminalMg().CashRegisterNo; // レジ番号
                //uoeOrderDtlRow.CommonSeqNo = salesDetailRow.CommonSeqNo; // 共通通番
                uoeOrderDtlRow.SupplierFormal = 2; // 仕入形式(2:発注)
                //uoeOrderDtlRow.SupplierSlipNo = salesDetailRow.SupplierSlipNo; // 仕入伝票番号
                //uoeOrderDtlRow.StockSlipDtlNum = salesDetailRow.StockSlipDtlNum; // 仕入明細通番
                uoeOrderDtlRow.BoCode = salesDetailRow.BoCode; // BO区分
                uoeOrderDtlRow.UOEDeliGoodsDiv = salesDetailRow.UOEDeliGoodsDiv; // 納品区分
                uoeOrderDtlRow.DeliveredGoodsDivNm = salesDetailRow.DeliveredGoodsDivNm; // 納品区分名称
                uoeOrderDtlRow.FollowDeliGoodsDiv = salesDetailRow.FollowDeliGoodsDiv; // フォロー納品区分
                uoeOrderDtlRow.FollowDeliGoodsDivNm = salesDetailRow.FollowDeliGoodsDivNm; // フォロー納品区分名称
                uoeOrderDtlRow.UOEResvdSection = salesDetailRow.UOEResvdSection; // UOE指定拠点
                uoeOrderDtlRow.UOEResvdSectionNm = salesDetailRow.UOEResvdSectionNm; // UOE指定拠点名称
                uoeOrderDtlRow.EmployeeCode = this._salesSlip.SalesEmployeeCd; // 従業員コード
                uoeOrderDtlRow.EmployeeName = this._salesSlip.SalesEmployeeNm; // 従業員名称
                uoeOrderDtlRow.GoodsMakerCd = salesDetailRow.GoodsMakerCd; // 商品メーカーコード
                uoeOrderDtlRow.MakerName = salesDetailRow.MakerName; // メーカー名称
                uoeOrderDtlRow.GoodsNo = salesDetailRow.GoodsNo; // 商品番号
                uoeOrderDtlRow.GoodsNoNoneHyphen = salesDetailRow.GoodsNo.Replace("-", ""); // ハイフン無商品番号
                uoeOrderDtlRow.GoodsName = salesDetailRow.GoodsName; // 商品名称
                //uoeOrderDtlRow.WarehouseCode = salesDetailRow.WarehouseCode; // 倉庫コード
                //uoeOrderDtlRow.WarehouseName = salesDetailRow.WarehouseName; // 倉庫名称
                //uoeOrderDtlRow.WarehouseShelfNo = salesDetailRow.WarehouseShelfNo; // 倉庫棚番
                uoeOrderDtlRow.AcceptAnOrderCnt = salesDetailRow.AcceptAnOrderCntForOrder; // 受注数量
                uoeOrderDtlRow.ListPrice = salesDetailRow.ListPriceDisplay; // 定価（浮動）
                uoeOrderDtlRow.SalesUnitCost = salesDetailRow.SalesUnitCost; // 原価単価
                uoeOrderDtlRow.SupplierCd = salesDetailRow.SupplierCd; // 仕入先コード
                uoeOrderDtlRow.SupplierSnm = salesDetailRow.SupplierSnm; // 仕入先略称
                string remark1;
                string remark2;
                this.GetUoeRemark(salesDetailRow, out remark1, out remark2);
                uoeOrderDtlRow.UoeRemark1 = remark1; // ＵＯＥリマーク１
                uoeOrderDtlRow.UoeRemark2 = remark2; // ＵＯＥリマーク２
                //uoeOrderDtlRow.ReceiveDate = salesDetailRow.ReceiveDate; // 受信日付
                //uoeOrderDtlRow.ReceiveTime = salesDetailRow.ReceiveTime; // 受信時刻
                //uoeOrderDtlRow.AnswerMakerCd = salesDetailRow.AnswerMakerCd; // 回答メーカーコード
                //uoeOrderDtlRow.AnswerPartsNo = salesDetailRow.AnswerPartsNo; // 回答品番
                //uoeOrderDtlRow.AnswerPartsName = salesDetailRow.AnswerPartsName; // 回答品名
                //uoeOrderDtlRow.SubstPartsNo = salesDetailRow.SubstPartsNo; // 代替品番
                //uoeOrderDtlRow.UOESectOutGoodsCnt = salesDetailRow.UOESectOutGoodsCnt; // UOE拠点出庫数
                //uoeOrderDtlRow.BOShipmentCnt1 = salesDetailRow.BOShipmentCnt1; // BO出庫数1
                //uoeOrderDtlRow.BOShipmentCnt2 = salesDetailRow.BOShipmentCnt2; // BO出庫数2
                //uoeOrderDtlRow.BOShipmentCnt3 = salesDetailRow.BOShipmentCnt3; // BO出庫数3
                //uoeOrderDtlRow.MakerFollowCnt = salesDetailRow.MakerFollowCnt; // メーカーフォロー数
                //uoeOrderDtlRow.NonShipmentCnt = salesDetailRow.NonShipmentCnt; // 未出庫数
                //uoeOrderDtlRow.UOESectStockCnt = salesDetailRow.UOESectStockCnt; // UOE拠点在庫数
                //uoeOrderDtlRow.BOStockCount1 = salesDetailRow.BOStockCount1; // BO在庫数1
                //uoeOrderDtlRow.BOStockCount2 = salesDetailRow.BOStockCount2; // BO在庫数2
                //uoeOrderDtlRow.BOStockCount3 = salesDetailRow.BOStockCount3; // BO在庫数3
                //uoeOrderDtlRow.UOESectionSlipNo = salesDetailRow.UOESectionSlipNo; // UOE拠点伝票番号
                //uoeOrderDtlRow.BOSlipNo1 = salesDetailRow.BOSlipNo1; // BO伝票番号１
                //uoeOrderDtlRow.BOSlipNo2 = salesDetailRow.BOSlipNo2; // BO伝票番号２
                //uoeOrderDtlRow.BOSlipNo3 = salesDetailRow.BOSlipNo3; // BO伝票番号３
                //uoeOrderDtlRow.EOAlwcCount = salesDetailRow.EOAlwcCount; // EO引当数
                //uoeOrderDtlRow.BOManagementNo = salesDetailRow.BOManagementNo; // BO管理番号
                //uoeOrderDtlRow.AnswerListPrice = salesDetailRow.AnswerListPrice; // 回答定価
                //uoeOrderDtlRow.AnswerSalesUnitCost = salesDetailRow.AnswerSalesUnitCost; // 回答原価単価
                //uoeOrderDtlRow.UOESubstMark = salesDetailRow.UOESubstMark; // UOE代替マーク
                //uoeOrderDtlRow.UOEStockMark = salesDetailRow.UOEStockMark; // UOE在庫マーク
                //uoeOrderDtlRow.PartsLayerCd = salesDetailRow.PartsLayerCd; // 層別コード
                //uoeOrderDtlRow.MazdaUOEShipSectCd1 = salesDetailRow.MazdaUOEShipSectCd1; // UOE出荷拠点コード１（マツダ）
                //uoeOrderDtlRow.MazdaUOEShipSectCd2 = salesDetailRow.MazdaUOEShipSectCd2; // UOE出荷拠点コード２（マツダ）
                //uoeOrderDtlRow.MazdaUOEShipSectCd3 = salesDetailRow.MazdaUOEShipSectCd3; // UOE出荷拠点コード３（マツダ）
                //uoeOrderDtlRow.MazdaUOESectCd1 = salesDetailRow.MazdaUOESectCd1; // UOE拠点コード１（マツダ）
                //uoeOrderDtlRow.MazdaUOESectCd2 = salesDetailRow.MazdaUOESectCd2; // UOE拠点コード２（マツダ）
                //uoeOrderDtlRow.MazdaUOESectCd3 = salesDetailRow.MazdaUOESectCd3; // UOE拠点コード３（マツダ）
                //uoeOrderDtlRow.MazdaUOESectCd4 = salesDetailRow.MazdaUOESectCd4; // UOE拠点コード４（マツダ）
                //uoeOrderDtlRow.MazdaUOESectCd5 = salesDetailRow.MazdaUOESectCd5; // UOE拠点コード５（マツダ）
                //uoeOrderDtlRow.MazdaUOESectCd6 = salesDetailRow.MazdaUOESectCd6; // UOE拠点コード６（マツダ）
                //uoeOrderDtlRow.MazdaUOESectCd7 = salesDetailRow.MazdaUOESectCd7; // UOE拠点コード７（マツダ）
                //uoeOrderDtlRow.MazdaUOEStockCnt1 = salesDetailRow.MazdaUOEStockCnt1; // UOE在庫数１（マツダ）
                //uoeOrderDtlRow.MazdaUOEStockCnt2 = salesDetailRow.MazdaUOEStockCnt2; // UOE在庫数２（マツダ）
                //uoeOrderDtlRow.MazdaUOEStockCnt3 = salesDetailRow.MazdaUOEStockCnt3; // UOE在庫数３（マツダ）
                //uoeOrderDtlRow.MazdaUOEStockCnt4 = salesDetailRow.MazdaUOEStockCnt4; // UOE在庫数４（マツダ）
                //uoeOrderDtlRow.MazdaUOEStockCnt5 = salesDetailRow.MazdaUOEStockCnt5; // UOE在庫数５（マツダ）
                //uoeOrderDtlRow.MazdaUOEStockCnt6 = salesDetailRow.MazdaUOEStockCnt6; // UOE在庫数６（マツダ）
                //uoeOrderDtlRow.MazdaUOEStockCnt7 = salesDetailRow.MazdaUOEStockCnt7; // UOE在庫数７（マツダ）
                //uoeOrderDtlRow.UOEDistributionCd = salesDetailRow.UOEDistributionCd; // UOE卸コード
                //uoeOrderDtlRow.UOEOtherCd = salesDetailRow.UOEOtherCd; // UOE他コード
                //uoeOrderDtlRow.UOEHMCd = salesDetailRow.UOEHMCd; // UOEＨＭコード
                //uoeOrderDtlRow.BOCount = salesDetailRow.BOCount; // ＢＯ数
                //uoeOrderDtlRow.UOEMarkCode = salesDetailRow.UOEMarkCode; // UOEマークコード
                //uoeOrderDtlRow.SourceShipment = salesDetailRow.SourceShipment; // 出荷元
                //uoeOrderDtlRow.ItemCode = salesDetailRow.ItemCode; // アイテムコード
                //uoeOrderDtlRow.UOECheckCode = salesDetailRow.UOECheckCode; // UOEチェックコード
                //uoeOrderDtlRow.HeadErrorMassage = salesDetailRow.HeadErrorMassage; // ヘッドエラーメッセージ
                //uoeOrderDtlRow.LineErrorMassage = salesDetailRow.LineErrorMassage; // ラインエラーメッセージ
                uoeOrderDtlRow.DataSendCode = 0; // データ送信区分
                //uoeOrderDtlRow.DataRecoverDiv = salesDetailRow.DataRecoverDiv; // データ復旧区分
                //uoeOrderDtlRow.EnterUpdDivSec = salesDetailRow.EnterUpdDivSec; // 入庫更新区分（拠点）
                //uoeOrderDtlRow.EnterUpdDivBO1 = salesDetailRow.EnterUpdDivBO1; // 入庫更新区分（BO1）
                //uoeOrderDtlRow.EnterUpdDivBO2 = salesDetailRow.EnterUpdDivBO2; // 入庫更新区分（BO2）
                //uoeOrderDtlRow.EnterUpdDivBO3 = salesDetailRow.EnterUpdDivBO3; // 入庫更新区分（BO3）
                //uoeOrderDtlRow.EnterUpdDivMaker = salesDetailRow.EnterUpdDivMaker; // 入庫更新区分（ﾒｰｶｰ）
                //uoeOrderDtlRow.EnterUpdDivEO = salesDetailRow.EnterUpdDivEO; // 入庫更新区分（EO）
                //uoeOrderDtlRow.DtlRelationGuid = salesDetailRow.DtlRelationGuid; // 共通キー

                // 発注先情報
                UOESupplier uoeSupplier;
                //>>>2010/07/01
                //int status = this._uoeSupplierAcs.Read(out uoeSupplier, this._enterpriseCode, salesDetailRow.SupplierCdForOrder, LoginInfoAcquisition.Employee.BelongSectionCode);
                int status = this._uoeSupplierAcs.ReadCache(out uoeSupplier, this._enterpriseCode, salesDetailRow.SupplierCdForOrder, LoginInfoAcquisition.Employee.BelongSectionCode);
                //<<<2010/07/01
                status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                if (uoeSupplier == null) status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                //if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL) this.SettingUOEOrderDtlRowFromUOESupplier(ref uoeOrderDtlRow, uoeSupplier); // DEL 2011/11/07
                //---ADD 2011/11/07 -------------------------------->>>>>
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    this.SettingUOEOrderDtlRowFromUOESupplier(ref uoeOrderDtlRow, uoeSupplier);
                    //---DEL 2011/11/07 -------------------------------->>>>>
                    //if (!string.Empty.Equals(salesDetailRow.WarehouseCode.Trim()))
                    //{
                    //    uoeOrderDtlRow.BoCode = "*";
                    //}
                    //---DEL 2011/11/07 --------------------------------<<<<<
                }
                //---ADD 2011/11/07 --------------------------------<<<<<
                #endregion
            }
        }

        /// <summary>
        /// UOE発注データ行オブジェクト発注先情報設定
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="uoeSupplier"></param>
        public void SettingUOEOrderDtlRowFromUOESupplier(int salesRowNo, UOESupplier uoeSupplier)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            this.SettingUOEOrderDtlRowFromUOESupplier(ref uoeOrderDtlRow, uoeSupplier);
        }

        /// <summary>
        /// UOE発注データ行オブジェクト発注先情報設定
        /// </summary>
        /// <param name="uoeOrderDtlRow"></param>
        /// <param name="uoeSupplier"></param>
        /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
        private void SettingUOEOrderDtlRowFromUOESupplier(ref SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow, UOESupplier uoeSupplier)
        {
            if (uoeOrderDtlRow != null)
            {
                #region 項目セット
                //uoeOrderDtlRow.CreateDateTime = uoeSupplier.CreateDateTime; // 作成日時
                //uoeOrderDtlRow.UpdateDateTime = uoeSupplier.UpdateDateTime; // 更新日時
                //uoeOrderDtlRow.EnterpriseCode = uoeSupplier.EnterpriseCode; // 企業コード
                //uoeOrderDtlRow.FileHeaderGuid = uoeSupplier.FileHeaderGuid; // GUID
                //uoeOrderDtlRow.UpdEmployeeCode = uoeSupplier.UpdEmployeeCode; // 更新従業員コード
                //uoeOrderDtlRow.UpdAssemblyId1 = uoeSupplier.UpdAssemblyId1; // 更新アセンブリID1
                //uoeOrderDtlRow.UpdAssemblyId2 = uoeSupplier.UpdAssemblyId2; // 更新アセンブリID2
                //uoeOrderDtlRow.LogicalDeleteCode = uoeSupplier.LogicalDeleteCode; // 論理削除区分

                //uoeOrderDtlRow.SectionCode = uoeSupplier.SectionCode; // 拠点コード
                uoeOrderDtlRow.UOESupplierCd = uoeSupplier.UOESupplierCd; // UOE発注先コード
                uoeOrderDtlRow.UOESupplierName = uoeSupplier.UOESupplierName; // UOE発注先名称
                uoeOrderDtlRow.GoodsMakerCd = uoeSupplier.GoodsMakerCd; // 商品メーカーコード
                uoeOrderDtlRow.SupplierCd = uoeSupplier.SupplierCd; // 仕入先コード
                //uoeOrderDtlRow.TelNo = uoeSupplier.TelNo; // 電話番号
                //uoeOrderDtlRow.UOETerminalCd = uoeSupplier.UOETerminalCd; // UOE端末コード
                //uoeOrderDtlRow.UOEHostCode = uoeSupplier.UOEHostCode; // UOEホストコード
                //uoeOrderDtlRow.UOEConnectPassword = uoeSupplier.UOEConnectPassword; // UOE接続パスワード
                //uoeOrderDtlRow.UOEConnectUserId = uoeSupplier.UOEConnectUserId; // UOE接続ユーザID
                //uoeOrderDtlRow.UOEIDNum = uoeSupplier.UOEIDNum; // UOEID番号
                uoeOrderDtlRow.CommAssemblyId = uoeSupplier.CommAssemblyId; // 通信アセンブリID
                //uoeOrderDtlRow.ConnectVersionDiv = uoeSupplier.ConnectVersionDiv; // 接続バージョン区分
                //uoeOrderDtlRow.UOEShipSectCd = uoeSupplier.UOEShipSectCd; // UOE出庫拠点コード
                //uoeOrderDtlRow.UOESalSectCd = uoeSupplier.UOESalSectCd; // UOE売上拠点コード
                //uoeOrderDtlRow.UOEReservSectCd = uoeSupplier.UOEReservSectCd; // UOE指定拠点コード
                //uoeOrderDtlRow.ReceiveCondition = uoeSupplier.ReceiveCondition; // 受信状況
                //uoeOrderDtlRow.SubstPartsNoDiv = uoeSupplier.SubstPartsNoDiv; // 代替品番区分
                //uoeOrderDtlRow.PartsNoPrtCd = uoeSupplier.PartsNoPrtCd; // 品番印刷区分
                //uoeOrderDtlRow.ListPriceUseDiv = uoeSupplier.ListPriceUseDiv; // 定価使用区分
                //uoeOrderDtlRow.StockSlipDtRecvDiv = uoeSupplier.StockSlipDtRecvDiv; // 仕入データ受信区分
                //uoeOrderDtlRow.CheckCodeDiv = uoeSupplier.CheckCodeDiv; // チェックコード区分
                //uoeOrderDtlRow.BusinessCode = uoeSupplier.BusinessCode; // 業務区分
                uoeOrderDtlRow.UOEResvdSection = uoeSupplier.UOEResvdSection; // UOE指定拠点
                uoeOrderDtlRow.UOEResvdSectionNm = this._salesSlipInputInitDataAcs.GetName_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.UOEResvdSection, uoeSupplier.UOESupplierCd, uoeSupplier.UOEResvdSection);
                //uoeOrderDtlRow.EmployeeCode = uoeSupplier.EmployeeCode; // 従業員コード
                uoeOrderDtlRow.UOEDeliGoodsDiv = uoeSupplier.UOEDeliGoodsDiv; // 納品区分
                uoeOrderDtlRow.DeliveredGoodsDivNm = this._salesSlipInputInitDataAcs.GetName_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.DeliveredGoodsDiv, uoeSupplier.UOESupplierCd, uoeSupplier.UOEDeliGoodsDiv);
                // --- ADD 2010/07/01 ---------->>>>>
                //uoeOrderDtlRow.BoCode = ctDefaultBoCode; // BO区分
                if (string.Empty.Equals(uoeSupplier.BoCode.Trim()))
                {
                    //uoeOrderDtlRow.BoCode = ctDefaultBoCode;// DEL 2011/11/01
                    uoeOrderDtlRow.BoCode = string.Empty;// ADD 2011/11/01
                }
                else
                {
                    uoeOrderDtlRow.BoCode = uoeSupplier.BoCode;
                }
                // --- ADD 2010/07/01 ----------<<<<<
                if (this.CheckEnabledFollowDeliGoodsDiv(uoeSupplier.CommAssemblyId))
                {
                    uoeOrderDtlRow.FollowDeliGoodsDiv = uoeSupplier.UOEDeliGoodsDiv;
                    uoeOrderDtlRow.FollowDeliGoodsDivNm = this._salesSlipInputInitDataAcs.GetName_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.DeliveredGoodsDiv, uoeSupplier.UOESupplierCd, uoeSupplier.UOEDeliGoodsDiv);
                }
                //uoeOrderDtlRow.UOEOrderRate = uoeSupplier.UOEOrderRate; // UOE発注レート
                //uoeOrderDtlRow.EnableOdrMakerCd1 = uoeSupplier.EnableOdrMakerCd1; // 発注可能メーカーコード１
                //uoeOrderDtlRow.EnableOdrMakerCd2 = uoeSupplier.EnableOdrMakerCd2; // 発注可能メーカーコード２
                //uoeOrderDtlRow.EnableOdrMakerCd3 = uoeSupplier.EnableOdrMakerCd3; // 発注可能メーカーコード３
                //uoeOrderDtlRow.EnableOdrMakerCd4 = uoeSupplier.EnableOdrMakerCd4; // 発注可能メーカーコード４
                //uoeOrderDtlRow.EnableOdrMakerCd5 = uoeSupplier.EnableOdrMakerCd5; // 発注可能メーカーコード５
                //uoeOrderDtlRow.EnableOdrMakerCd6 = uoeSupplier.EnableOdrMakerCd6; // 発注可能メーカーコード６
                //uoeOrderDtlRow.instrumentNo = uoeSupplier.instrumentNo; // 機器番号
                //uoeOrderDtlRow.UOETestMode = uoeSupplier.UOETestMode; // UOEテストモード
                //uoeOrderDtlRow.UOEItemCd = uoeSupplier.UOEItemCd; // UOEアイテムコード
                //uoeOrderDtlRow.HondaSectionCode = uoeSupplier.HondaSectionCode; // ホンダ担当拠点
                //uoeOrderDtlRow.AnswerSaveFolder = uoeSupplier.AnswerSaveFolder; // 回答保存フォルダ
                //uoeOrderDtlRow.MazdaSectionCode = uoeSupplier.MazdaSectionCode; // マツダ自拠点コード
                //uoeOrderDtlRow.EmergencyDiv = uoeSupplier.EmergencyDiv; // 緊急区分
                //uoeOrderDtlRow.DaihatsuOrdreDiv = uoeSupplier.DaihatsuOrdreDiv; // 発注手配区分（ダイハツ）
                #endregion
            }
        }

        /// <summary>
        /// UOE発注データ行オブジェクトBO区分設定
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="boCode"></param>
        public void SettingUOEOrderDtlRowFromBoCode(int salesRowNo, string boCode)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            this.SettingUOEOrderDtlRowFromBoCode(ref uoeOrderDtlRow, boCode);
        }

        /// <summary>
        /// UOE発注データ行オブジェクトBO区分設定
        /// </summary>
        /// <param name="uoeOrderDtlRow"></param>
        /// <param name="boCode"></param>
        /// <br>Update Note: K2012/01/06 shij</br>
        /// <br>管理番号   ：10707327-00 2012/01/25配信分対応</br>
        /// <br>             Redmine#27542   売上伝票入力/受注データの作成の修正</br>
        private void SettingUOEOrderDtlRowFromBoCode(ref SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow, string boCode)
        {
            if (uoeOrderDtlRow != null) uoeOrderDtlRow.BoCode = boCode;
            // --------------- ADD START 2012.01.06 shij FOR Redmine#27542 -------->>>>
            // BO区分が「*」の場合
            if (uoeOrderDtlRow.BoCode.Trim().Equals(ctDefaultBoCode))
            {
                SalesInputDataSet.SalesDetailAcceptAnOrderRow acptAnOdrRow = this._salesDetailAcceptAnOrderDataTableForOrder.FindByDtlRelationGuid(uoeOrderDtlRow.DtlRelationGuid);
                if (acptAnOdrRow != null)
                {
                    // 受注データをクリアする。
                    this._salesDetailAcceptAnOrderDataTableForOrder.RemoveSalesDetailAcceptAnOrderRow(acptAnOdrRow);
                }
            }
            //--------------- ADD END 2012.01.06 shij FOR Redmine#27542 ----------<<<<
        }

        /// <summary>
        /// UOE発注データ行オブジェクト発注数設定
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="acceptAnOrderCnt"></param>
        public void SettingUOEOrderDtlRowFromAcceptAnOrderCnt(int salesRowNo, double acceptAnOrderCnt)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            this.SettingUOEOrderDtlRowFromAcceptAnOrderCnt(ref uoeOrderDtlRow, acceptAnOrderCnt);
        }

        /// <summary>
        /// UOE発注データ行オブジェクト発注数設定(受注数、出荷数より発注数セット)
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="acceptAnOrderCnt"></param>
        /// <remarks>受注数、出荷数より発注数セット</remarks>
        /// <br>UpdateNote : 2011/11/01 yangmj Redmine#26224 販売区分の対応</br>
        /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
        public void SettingUOEOrderDtlRowFromAcceptAnOrderCnt(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            double acceptAnOrderCnt = 0;
            //-----ADD 2011/11/01----->>>>>
            //if (salesDetailRow.AcceptAnOrderCntDisplay != 0) acceptAnOrderCnt = salesDetailRow.AcceptAnOrderCntDisplay - salesDetailRow.ShipmentCntDisplay;
            if (salesDetailRow.AcceptAnOrderCntDisplay != 0)
            {
                if (salesDetailRow.AcceptAnOrderCntDisplay - salesDetailRow.ShipmentCntDisplay <= 999)
                {
                    acceptAnOrderCnt = salesDetailRow.AcceptAnOrderCntDisplay - salesDetailRow.ShipmentCntDisplay;
                }
                else
                {
                    acceptAnOrderCnt = 999;
                    if (salesDetailRow != null) salesDetailRow.ShipmentCntDisplay = salesDetailRow.AcceptAnOrderCntDisplay - 999;
                }
            }
            //-----ADD 2011/11/02----->>>>>
            else
            {
                if (salesDetailRow != null)
                {
                    if (salesDetailRow.ShipmentCntDisplay > 999)
                    {
                        salesDetailRow.AcceptAnOrderCntDisplay = salesDetailRow.ShipmentCntDisplay;
                        acceptAnOrderCnt = 999;
                        salesDetailRow.ShipmentCntDisplay = salesDetailRow.AcceptAnOrderCntDisplay - 999;
                    }
                    else
                    {
                        salesDetailRow.AcceptAnOrderCntDisplay = salesDetailRow.ShipmentCntDisplay;
                        acceptAnOrderCnt = salesDetailRow.ShipmentCntDisplay;
                        salesDetailRow.ShipmentCntDisplay = 0;
                    }
                    // --- ADD 2013/02/26 Y.Wakita ---------->>>>>
                    if (this._salesSlip.EstimateDivide == (int)SalesSlipInputAcs.EstimateDivide.UnitPriceEstimate)
                    {
                        salesDetailRow.AddUpEnableCnt = salesDetailRow.AcceptAnOrderCntDisplay;
                    }
                    // --- ADD 2013/02/26 Y.Wakita ----------<<<<<
                } 
            }
            //-----ADD 2011/11/02-----<<<<<
            //-----ADD 2011/11/01-----<<<<<
            this.SettingUOEOrderDtlRowFromAcceptAnOrderCnt(ref uoeOrderDtlRow, acceptAnOrderCnt);
        }

        /// <summary>
        /// UOE発注データ行オブジェクト発注数設定
        /// </summary>
        /// <param name="uoeOrderDtlRow"></param>
        /// <param name="acceptAnOrderCnt"></param>
        private void SettingUOEOrderDtlRowFromAcceptAnOrderCnt(ref SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow, double acceptAnOrderCnt)
        {
            if (uoeOrderDtlRow != null) uoeOrderDtlRow.AcceptAnOrderCnt = acceptAnOrderCnt;
        }

        /// <summary>
        /// UOE発注データ行オブジェクト納品区分設定
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="uoeDeliGoodsDiv"></param>
        /// <param name="uoeDeliGoodsDivNm"></param>
        /// <br>Update Note : 2010/07/01　張凱</br>
        /// <br>  納品区分・H納品区分・指定拠点が変更された場合は、すべての同一発注先の明細に対して、設定内容を反映する</br>
        public void SettingUOEOrderDtlRowFromUOEDeliGoodsDiv(int salesRowNo, string uoeDeliGoodsDiv, string uoeDeliGoodsDivNm)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            // --- UPD ZHANGKAI 2010/07/01 ---------->>>>>
            //SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid); // DEL 2010/07/01
            //this.SettingUOEOrderDtlRowFromUOEDeliGoodsDiv(ref uoeOrderDtlRow, uoeDeliGoodsDiv, uoeDeliGoodsDivNm);// DEL 2010/07/01
       
            int supplierCdForOrder = salesDetailRow.SupplierCdForOrder;
            foreach (SalesInputDataSet.SalesDetailRow detailRow in this._salesDetailDataTable)
            {
                if (detailRow.SupplierCdForOrder == supplierCdForOrder)
                {
                    SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(detailRow.DtlRelationGuid);
                    this.SettingUOEOrderDtlRowFromUOEDeliGoodsDiv(ref uoeOrderDtlRow, uoeDeliGoodsDiv, uoeDeliGoodsDivNm);

                    detailRow.DeliveredGoodsDivNm = uoeDeliGoodsDivNm;
                    detailRow.UOEDeliGoodsDiv = uoeDeliGoodsDiv;
                }
            }
            // --- UPD ZHANGKAI 2010/07/01 ----------<<<<<
        }

        /// <summary>
        /// UOE発注データ行オブジェクト納品区分設定
        /// </summary>
        /// <param name="uoeOrderDtlRow"></param>
        /// <param name="uoeDeliGoodsDiv"></param>
        /// <param name="uoeDeliGoodsDivNm"></param>
        private void SettingUOEOrderDtlRowFromUOEDeliGoodsDiv(ref SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow, string uoeDeliGoodsDiv, string uoeDeliGoodsDivNm)
        {
            if (uoeOrderDtlRow != null)
            {
                uoeOrderDtlRow.UOEDeliGoodsDiv = uoeDeliGoodsDiv;
                uoeOrderDtlRow.DeliveredGoodsDivNm = uoeDeliGoodsDivNm;
            }
        }

        /// <summary>
        /// UOE発注データ行オブジェクトＨ納品区分設定
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="followDeliGoodsDiv"></param>
        /// <param name="followDeliGoodsDivNm"></param>
        /// <br>Update Note : 2010/07/01　張凱</br>
        /// <br>  納品区分・H納品区分・指定拠点が変更された場合は、すべての同一発注先の明細に対して、設定内容を反映する</br>
        public void SettingUOEOrderDtlRowFromFollowDeliGoodsDiv(int salesRowNo, string followDeliGoodsDiv, string followDeliGoodsDivNm)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            // --- UPD ZHANGKAI 2010/07/01 ---------->>>>>
            //SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);// DEL 2010/07/01
            //this.SettingUOEOrderDtlRowFromFollowDeliGoodsDiv(ref uoeOrderDtlRow, followDeliGoodsDiv, followDeliGoodsDivNm);// DEL 2010/07/01

            int supplierCdForOrder = salesDetailRow.SupplierCdForOrder;
            foreach (SalesInputDataSet.SalesDetailRow detailRow in this._salesDetailDataTable)
            {
                if (detailRow.SupplierCdForOrder == supplierCdForOrder)
                {
                    SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(detailRow.DtlRelationGuid);
                    this.SettingUOEOrderDtlRowFromFollowDeliGoodsDiv(ref uoeOrderDtlRow, followDeliGoodsDiv, followDeliGoodsDivNm);

                    detailRow.FollowDeliGoodsDivNm = followDeliGoodsDivNm;
                    detailRow.FollowDeliGoodsDiv = followDeliGoodsDiv;
                }
            }

            // --- UPD ZHANGKAI 2010/07/01 ----------<<<<<
        }

        /// <summary>
        /// UOE発注データ行オブジェクトＨ納品区分設定
        /// </summary>
        /// <param name="uoeOrderDtlRow"></param>
        /// <param name="followDeliGoodsDiv"></param>
        /// <param name="followDeliGoodsDivNm"></param>
        private void SettingUOEOrderDtlRowFromFollowDeliGoodsDiv(ref SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow, string followDeliGoodsDiv, string followDeliGoodsDivNm)
        {
            if (uoeOrderDtlRow != null)
            {
                uoeOrderDtlRow.FollowDeliGoodsDiv = followDeliGoodsDiv;
                uoeOrderDtlRow.FollowDeliGoodsDivNm = followDeliGoodsDivNm;
            }
        }

        /// <summary>
        /// UOE発注データ行オブジェクト指定拠点設定
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="uoeResvdSection"></param>
        /// <param name="uoeResvdSectionNm"></param>
        /// <br>Update Note : 2010/07/01　張凱</br>
        /// <br>  納品区分・H納品区分・指定拠点が変更された場合は、すべての同一発注先の明細に対して、設定内容を反映する</br>
        public void SettingUOEOrderDtlRowFromUOEResvdSection(int salesRowNo, string uoeResvdSection, string uoeResvdSectionNm)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            // --- UPD ZHANGKAI 2010/07/01 ---------->>>>>
            //SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);// DEL 2010/07/01
            //this.SettingUOEOrderDtlRowFromUOEResvdSection(ref uoeOrderDtlRow, uoeResvdSection, uoeResvdSectionNm);// DEL 2010/07/01

            int supplierCdForOrder = salesDetailRow.SupplierCdForOrder;
            foreach (SalesInputDataSet.SalesDetailRow detailRow in this._salesDetailDataTable)
            {
                if (detailRow.SupplierCdForOrder == supplierCdForOrder)
                {
                    SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(detailRow.DtlRelationGuid);
                    this.SettingUOEOrderDtlRowFromUOEResvdSection(ref uoeOrderDtlRow, uoeResvdSection, uoeResvdSectionNm);

                    detailRow.UOEResvdSectionNm = uoeResvdSectionNm;
                    detailRow.UOEResvdSection = uoeResvdSection;
                }
            }

            // --- UPD ZHANGKAI 2010/07/01 ----------<<<<<
        }

        /// <summary>
        /// UOE発注データ行オブジェクト指定拠点設定
        /// </summary>
        /// <param name="uoeOrderDtlRow"></param>
        /// <param name="uoeResvdSection"></param>
        /// <param name="uoeResvdSectionNm"></param>
        private void SettingUOEOrderDtlRowFromUOEResvdSection(ref SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow, string uoeResvdSection, string uoeResvdSectionNm)
        {
            if (uoeOrderDtlRow != null)
            {
                uoeOrderDtlRow.UOEResvdSection = uoeResvdSection;
                uoeOrderDtlRow.UOEResvdSectionNm = uoeResvdSectionNm;
            }
        }

        /// <summary>
        /// UOEリマーク取得処理
        /// </summary>
        /// <param name="salesDetailRow"></param>
        /// <param name="uoeRemark1"></param>
        /// <param name="uoeRemark2"></param>
        private void GetUoeRemark(SalesInputDataSet.SalesDetailRow salesDetailRow, out string uoeRemark1, out string uoeRemark2)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(salesDetailRow.CarRelationGuid);
            string remark = this._salesSlipInputInitDataAcs.GetUOESetting().SlipOutputRemark;
            uoeRemark1 = string.Empty;
            uoeRemark2 = string.Empty;
            int customerCode = this._salesSlip.CustomerCode;
            int tempCustomerCode = this._salesSlip.CustomerCode % 10000;
            string frontEmployee = this._salesSlip.FrontEmployeeCd;
            string fullModel = (carInfoRow != null) ? carInfoRow.FullModel : string.Empty;

            switch (this._salesSlipInputInitDataAcs.GetUOESetting().SlipOutputRemarkDiv)
            {
                case 1: // マーク＋得意先
                    // --- UPD 2012/08/23 Y.Wakita ---------->>>>>
                    //uoeRemark1 = remark + customerCode.ToString("d8");
                    uoeRemark1 = remark + customerCode.ToString("d8").Substring(2, 6);
                    // --- UPD 2012/08/23 Y.Wakita ----------<<<<<
                    break;
                case 2: // マーク＋地区
                    uoeRemark1 = remark + this._salesSlip.SalesAreaCode.ToString("d4");
                    break;
                case 3: // マーク＋担当者
                    uoeRemark1 = remark + this._salesSlip.SalesEmployeeCd;
                    break;
                case 4: // マーク＋発行者
                    uoeRemark1 = remark + this._salesSlip.SalesInputCode;
                    break;
                case 5: // マーク＋得意先＋略称区分
                    // --- UPD 2012/08/23 Y.Wakita ---------->>>>>
                    //EmployeeDtl employeeDtl = this._salesSlipInputInitDataAcs.GetEmployeeDtl(LoginInfoAcquisition.Employee.BelongSectionCode.Trim());
                    //uoeRemark1 = remark +
                    //             customerCode.ToString("d8") +
                    //             ((employeeDtl != null) ? employeeDtl.UOESnmDiv : string.Empty);
                    EmployeeDtl employeeDtl = this._salesSlipInputInitDataAcs.GetEmployeeDtl(LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                    uoeRemark1 = remark +
                                 customerCode.ToString("d8").Substring(2, 6) +
                                 ((employeeDtl != null) ? employeeDtl.UOESnmDiv : string.Empty);

                    // --- UPD 2012/08/23 Y.Wakita ----------<<<<<
                    break;
                case 6: // マーク＋型式＋得意先
                    switch (salesDetailRow.GoodsMakerCd)
                    {
                        case 1: // トヨタ
                            uoeRemark1 = (string.IsNullOrEmpty(fullModel)) ? string.Empty : (fullModel.Length > 8) ? fullModel.Substring(0, 8) : fullModel;
                            uoeRemark2 = remark + "," + tempCustomerCode.ToString("d4");
                            break;
                        case 2: // 日産
                            uoeRemark1 = remark +
                                         ((string.IsNullOrEmpty(fullModel)) ? string.Empty : (fullModel.Length > 5) ? fullModel.Substring(0, 5) : fullModel) + 
                                         tempCustomerCode.ToString("d4");
                            break;
                        case 3: // 三菱
                            break;
                        case 4: // マツダ
                            uoeRemark1 = remark + "," +
                                         ((string.IsNullOrEmpty(fullModel)) ? string.Empty : (fullModel.Length > 6) ? fullModel.Substring(0, 6) : fullModel) + "," + 
                                         tempCustomerCode.ToString("d4") + "," +
                                         ((string.IsNullOrEmpty(frontEmployee)) ? string.Empty : (frontEmployee.Length > 2) ? frontEmployee.Substring(0, 2) : frontEmployee);
                            break;
                        case 5: // ホンダ
                            uoeRemark1 = remark + "," +
                                         ((string.IsNullOrEmpty(fullModel)) ? string.Empty : (fullModel.Length > 5) ? fullModel.Substring(0, 5) : fullModel) + "," + 
                                         tempCustomerCode.ToString("d4") + "," +
                                         ((string.IsNullOrEmpty(frontEmployee)) ? string.Empty : (frontEmployee.Length > 2) ? frontEmployee.Substring(0, 2) : frontEmployee);
                            break;
                        case 8: // スバル
                            break;
                        case 10: // 日野
                            break;
                        default: // 優良
                            break;
                    }
                    break;
            }
        }

        /// <summary>
        /// 発注可能メーカーチェック処理
        /// </summary>
        /// <param name="uoeSupplier"></param>
        /// <param name="goodsMakerCd"></param>
        /// <returns>true:存在する false:存在しない</returns>
        public bool CheckEnableOdrMakerCd(UOESupplier uoeSupplier, int goodsMakerCd)
        {
            if (uoeSupplier.EnableOdrMakerCd1 == goodsMakerCd) return true;
            if (uoeSupplier.EnableOdrMakerCd2 == goodsMakerCd) return true;
            if (uoeSupplier.EnableOdrMakerCd3 == goodsMakerCd) return true;
            if (uoeSupplier.EnableOdrMakerCd4 == goodsMakerCd) return true;
            if (uoeSupplier.EnableOdrMakerCd5 == goodsMakerCd) return true;
            if (uoeSupplier.EnableOdrMakerCd6 == goodsMakerCd) return true;

            return false;
        }

        /// <summary>
        /// 納品区分Enabled取得処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        public bool CheckEnabledDeliveredGoodsDiv(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.UOEOrderDtlRow uoeOrderRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            return UOESupplierAcs.EnabledDeliveredGoodsDiv(uoeOrderRow.CommAssemblyId);
        }

        /// <summary>
        /// 納品区分Enabled取得処理
        /// </summary>
        /// <param name="dtlRelationGuid"></param>
        /// <returns></returns>
        public bool CheckEnabledDeliveredGoodsDiv(Guid dtlRelationGuid)
        {
            SalesInputDataSet.UOEOrderDtlRow uoeOrderRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(dtlRelationGuid);
            return UOESupplierAcs.EnabledDeliveredGoodsDiv(uoeOrderRow.CommAssemblyId);
        }

        /// <summary>
        /// Ｈ納品区分Enabled取得処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        public bool CheckEnabledFollowDeliGoodsDiv(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.UOEOrderDtlRow uoeOrderRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            return UOESupplierAcs.EnabledFollowDeliGoodsDiv(uoeOrderRow.CommAssemblyId);
        }

        /// <summary>
        /// Ｈ納品区分Enabled取得処理
        /// </summary>
        /// <param name="dtlRelationGuid"></param>
        /// <returns></returns>
        public bool CheckEnabledFollowDeliGoodsDiv(Guid dtlRelationGuid)
        {
            SalesInputDataSet.UOEOrderDtlRow uoeOrderRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(dtlRelationGuid);
            return UOESupplierAcs.EnabledFollowDeliGoodsDiv(uoeOrderRow.CommAssemblyId);
        }

        /// <summary>
        /// Ｈ納品区分Enabled取得処理
        /// </summary>
        /// <param name="commAssemblyId"></param>
        /// <returns></returns>
        public bool CheckEnabledFollowDeliGoodsDiv(string commAssemblyId)
        {
            return UOESupplierAcs.EnabledFollowDeliGoodsDiv(commAssemblyId);
        }

        /// <summary>
        /// 指定拠点Enabled取得処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        public bool CheckEnabledUOEResvdSection(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.UOEOrderDtlRow uoeOrderRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            return UOESupplierAcs.EnabledUOEResvdSection(uoeOrderRow.CommAssemblyId);
        }

        /// <summary>
        /// 指定拠点Enabled取得処理
        /// </summary>
        /// <param name="dtlRelationGuid"></param>
        /// <returns></returns>
        public bool CheckEnabledUOEResvdSection(Guid dtlRelationGuid)
        {
            SalesInputDataSet.UOEOrderDtlRow uoeOrderRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(dtlRelationGuid);
            return UOESupplierAcs.EnabledUOEResvdSection(uoeOrderRow.CommAssemblyId);
        }

        /// <summary>
        /// 純正発注先判定処理
        /// </summary>
        /// <param name="commAssemblyId"></param>
        /// <returns></returns>
        public UOESupplierAcs.PureCodeDiv CheckPureCodeUOESupplier(string commAssemblyId)
        {
            return UOESupplierAcs.PureCodeUOESupplier(commAssemblyId);
        }

        /// <summary>
        /// UOE発注データワークオブジェクトリスト取得
        /// </summary>
        /// <param name="acptDataList"></param>
        /// <param name="uoeOrderDtlWorkList"></param>
        public void GetCurrentUOEOrderDtlWorkList(ArrayList acptDataList, out ArrayList uoeOrderDataList)
        {
            //-----------------------------------------------------------------------------
            // UOE発注データワークオブジェクトリスト取得
            //-----------------------------------------------------------------------------
            this.GetUIDataFromUOEOrderDtlDataTable(acptDataList, this._uoeOrderDtlDataTable, out uoeOrderDataList);
        }

        /// <summary>
        /// UOE発注データワークオブジェクトリスト取得
        /// </summary>
        /// <param name="acptDataList"></param>
        /// <param name="uOEOrderDtlDataTable"></param>
        /// <param name="uoeOrderDtlWorkList"></param>
        /// <br>Update Note: 2011/10/26   鄧潘ハン Redmine#26224</br>
        /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
        /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
        /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
        private void GetUIDataFromUOEOrderDtlDataTable(ArrayList acptDataList, SalesInputDataSet.UOEOrderDtlDataTable uOEOrderDtlDataTable, out ArrayList uoeOrderDataList)
        {
            uoeOrderDataList = new ArrayList();
            CustomSerializeArrayList uoeOrderDtlWorkList;
            CustomSerializeArrayList uoeOrderDtlWorkListDummy;
            UOEOrderDtlWork uoeOrderDtlWork = new UOEOrderDtlWork();

            foreach (object obj in acptDataList)
            {
                if (obj is ArrayList)
                {
                    ArrayList objList = (ArrayList)obj;
                    foreach (object oobj in objList)
                    {
                        if (oobj is List<SalesDetail>)
                        {
                            List<SalesDetail> acptDetailList = (List<SalesDetail>)oobj;
                            uoeOrderDtlWorkList = new CustomSerializeArrayList();
                            uoeOrderDtlWorkListDummy = new CustomSerializeArrayList();

                            foreach (SalesDetail detail in acptDetailList)
                            {
                                if (detail.SupplierFormalSync == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order)
                                {
                                    SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(detail.DtlRelationGuid);
                                    //if ((uoeOrderDtlRow != null) && (uoeOrderDtlRow.BoCode != ctDefaultBoCode)) // DEL 2011/10/26
                                    //if ((uoeOrderDtlRow != null)) // ADD 2011/10/26 // DEL 2011/11/01
                                    if ((uoeOrderDtlRow != null) && (uoeOrderDtlRow.BoCode != ctDefaultBoCode)) // ADD 2011/11/01
                                    {
                                        uoeOrderDtlWork = this.GetParamDataFromUOEOrderDtlRow(uoeOrderDtlRow);
                                        uoeOrderDtlWorkList.Add(uoeOrderDtlWork);
                                    }
                                }
                            }
                            if (uoeOrderDtlWorkList.Count != 0)
                            {
                                uoeOrderDtlWorkListDummy.Add(uoeOrderDtlWorkList);
                                uoeOrderDataList.Add(uoeOrderDtlWorkListDummy);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// UOE発注データワークオブジェクトをUOE発注データ行オブジェクトより取得します。
        /// </summary>
        /// <param name="uoeOrderDtlRow"></param>
        /// <returns></returns>
        private UOEOrderDtlWork GetParamDataFromUOEOrderDtlRow(SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow)
        {
            UOEOrderDtlWork uoeOrderDtlWork = new UOEOrderDtlWork();

            #region 項目セット
            uoeOrderDtlWork.CreateDateTime = uoeOrderDtlRow.CreateDateTime; // 作成日時
            uoeOrderDtlWork.UpdateDateTime = uoeOrderDtlRow.UpdateDateTime; // 更新日時
            uoeOrderDtlWork.EnterpriseCode = this._enterpriseCode; // 企業コード
            uoeOrderDtlWork.FileHeaderGuid = uoeOrderDtlRow.FileHeaderGuid; // GUID
            uoeOrderDtlWork.UpdEmployeeCode = uoeOrderDtlRow.UpdEmployeeCode; // 更新従業員コード
            uoeOrderDtlWork.UpdAssemblyId1 = uoeOrderDtlRow.UpdAssemblyId1; // 更新アセンブリID1
            uoeOrderDtlWork.UpdAssemblyId2 = uoeOrderDtlRow.UpdAssemblyId2; // 更新アセンブリID2
            uoeOrderDtlWork.LogicalDeleteCode = uoeOrderDtlRow.LogicalDeleteCode; // 論理削除区分
            uoeOrderDtlWork.SystemDivCd = uoeOrderDtlRow.SystemDivCd; // システム区分
            uoeOrderDtlWork.UOESalesOrderNo = uoeOrderDtlRow.UOESalesOrderNo; // UOE発注番号
            uoeOrderDtlWork.UOESalesOrderRowNo = uoeOrderDtlRow.UOESalesOrderRowNo; // UOE発注行番号
            uoeOrderDtlWork.SendTerminalNo = uoeOrderDtlRow.SendTerminalNo; // 送信端末番号
            uoeOrderDtlWork.UOESupplierCd = uoeOrderDtlRow.UOESupplierCd; // UOE発注先コード
            uoeOrderDtlWork.UOESupplierName = uoeOrderDtlRow.UOESupplierName; // UOE発注先名称
            uoeOrderDtlWork.CommAssemblyId = uoeOrderDtlRow.CommAssemblyId; // 通信アセンブリID
            uoeOrderDtlWork.OnlineNo = uoeOrderDtlRow.OnlineNo; // オンライン番号
            uoeOrderDtlWork.OnlineRowNo = uoeOrderDtlRow.OnlineRowNo; // オンライン行番号
            //uoeOrderDtlWork.SalesDate = uoeOrderDtlRow.SalesDate; // 売上日付  //DEL 2013/01/14 李艶兵 Redmine#33792
            uoeOrderDtlWork.SalesDate = this._salesSlip.SalesDate;  //ADD 2013/01/14 李艶兵 Redmine#33792
            uoeOrderDtlWork.InputDay = uoeOrderDtlRow.InputDay; // 入力日
            uoeOrderDtlWork.DataUpdateDateTime = uoeOrderDtlRow.DataUpdateDateTime; // データ更新日時
            uoeOrderDtlWork.UOEKind = uoeOrderDtlRow.UOEKind; // UOE種別
            uoeOrderDtlWork.SalesSlipNum = uoeOrderDtlRow.SalesSlipNum; // 売上伝票番号
            uoeOrderDtlWork.AcptAnOdrStatus = uoeOrderDtlRow.AcptAnOdrStatus; // 受注ステータス
            uoeOrderDtlWork.SalesSlipDtlNum = uoeOrderDtlRow.SalesSlipDtlNum; // 売上明細通番
            uoeOrderDtlWork.SectionCode = this._loginSectionCode; // 拠点コード
            uoeOrderDtlWork.SubSectionCode = uoeOrderDtlRow.SubSectionCode; // 部門コード
            uoeOrderDtlWork.CustomerCode = uoeOrderDtlRow.CustomerCode; // 得意先コード
            uoeOrderDtlWork.CustomerSnm = uoeOrderDtlRow.CustomerSnm; // 得意先略称
            uoeOrderDtlWork.CashRegisterNo = uoeOrderDtlRow.CashRegisterNo; // レジ番号
            uoeOrderDtlWork.CommonSeqNo = uoeOrderDtlRow.CommonSeqNo; // 共通通番
            uoeOrderDtlWork.SupplierFormal = uoeOrderDtlRow.SupplierFormal; // 仕入形式
            uoeOrderDtlWork.SupplierSlipNo = uoeOrderDtlRow.SupplierSlipNo; // 仕入伝票番号
            uoeOrderDtlWork.StockSlipDtlNum = uoeOrderDtlRow.StockSlipDtlNum; // 仕入明細通番
            uoeOrderDtlWork.BoCode = uoeOrderDtlRow.BoCode; // BO区分
            uoeOrderDtlWork.UOEDeliGoodsDiv = uoeOrderDtlRow.UOEDeliGoodsDiv; // UOE納品区分
            uoeOrderDtlWork.DeliveredGoodsDivNm = uoeOrderDtlRow.DeliveredGoodsDivNm; // 納品区分名称
            uoeOrderDtlWork.FollowDeliGoodsDiv = uoeOrderDtlRow.FollowDeliGoodsDiv; // フォロー納品区分
            uoeOrderDtlWork.FollowDeliGoodsDivNm = uoeOrderDtlRow.FollowDeliGoodsDivNm; // フォロー納品区分名称
            uoeOrderDtlWork.UOEResvdSection = uoeOrderDtlRow.UOEResvdSection; // UOE指定拠点
            uoeOrderDtlWork.UOEResvdSectionNm = uoeOrderDtlRow.UOEResvdSectionNm; // UOE指定拠点名称
            uoeOrderDtlWork.EmployeeCode = uoeOrderDtlRow.EmployeeCode; // 従業員コード
            uoeOrderDtlWork.EmployeeName = uoeOrderDtlRow.EmployeeName; // 従業員名称
            uoeOrderDtlWork.GoodsMakerCd = uoeOrderDtlRow.GoodsMakerCd; // 商品メーカーコード
            uoeOrderDtlWork.MakerName = uoeOrderDtlRow.MakerName; // メーカー名称
            uoeOrderDtlWork.GoodsNo = uoeOrderDtlRow.GoodsNo; // 商品番号
            uoeOrderDtlWork.GoodsNoNoneHyphen = uoeOrderDtlRow.GoodsNoNoneHyphen; // ハイフン無商品番号
            uoeOrderDtlWork.GoodsName = uoeOrderDtlRow.GoodsName; // 商品名称
            uoeOrderDtlWork.WarehouseCode = uoeOrderDtlRow.WarehouseCode; // 倉庫コード
            uoeOrderDtlWork.WarehouseName = uoeOrderDtlRow.WarehouseName; // 倉庫名称
            uoeOrderDtlWork.WarehouseShelfNo = uoeOrderDtlRow.WarehouseShelfNo; // 倉庫棚番
            uoeOrderDtlWork.AcceptAnOrderCnt = uoeOrderDtlRow.AcceptAnOrderCnt; // 受注数量
            uoeOrderDtlWork.ListPrice = uoeOrderDtlRow.ListPrice; // 定価（浮動）
            uoeOrderDtlWork.SalesUnitCost = uoeOrderDtlRow.SalesUnitCost; // 原価単価
            uoeOrderDtlWork.SupplierCd = uoeOrderDtlRow.SupplierCd; // 仕入先コード
            uoeOrderDtlWork.SupplierSnm = uoeOrderDtlRow.SupplierSnm; // 仕入先略称
            uoeOrderDtlWork.UoeRemark1 = uoeOrderDtlRow.UoeRemark1; // ＵＯＥリマーク１
            uoeOrderDtlWork.UoeRemark2 = uoeOrderDtlRow.UoeRemark2; // ＵＯＥリマーク２
            uoeOrderDtlWork.ReceiveDate = uoeOrderDtlRow.ReceiveDate; // 受信日付
            uoeOrderDtlWork.ReceiveTime = uoeOrderDtlRow.ReceiveTime; // 受信時刻
            uoeOrderDtlWork.AnswerMakerCd = uoeOrderDtlRow.AnswerMakerCd; // 回答メーカーコード
            uoeOrderDtlWork.AnswerPartsNo = uoeOrderDtlRow.AnswerPartsNo; // 回答品番
            uoeOrderDtlWork.AnswerPartsName = uoeOrderDtlRow.AnswerPartsName; // 回答品名
            uoeOrderDtlWork.SubstPartsNo = uoeOrderDtlRow.SubstPartsNo; // 代替品番
            uoeOrderDtlWork.UOESectOutGoodsCnt = uoeOrderDtlRow.UOESectOutGoodsCnt; // UOE拠点出庫数
            uoeOrderDtlWork.BOShipmentCnt1 = uoeOrderDtlRow.BOShipmentCnt1; // BO出庫数1
            uoeOrderDtlWork.BOShipmentCnt2 = uoeOrderDtlRow.BOShipmentCnt2; // BO出庫数2
            uoeOrderDtlWork.BOShipmentCnt3 = uoeOrderDtlRow.BOShipmentCnt3; // BO出庫数3
            uoeOrderDtlWork.MakerFollowCnt = uoeOrderDtlRow.MakerFollowCnt; // メーカーフォロー数
            uoeOrderDtlWork.NonShipmentCnt = uoeOrderDtlRow.NonShipmentCnt; // 未出庫数
            uoeOrderDtlWork.UOESectStockCnt = uoeOrderDtlRow.UOESectStockCnt; // UOE拠点在庫数
            uoeOrderDtlWork.BOStockCount1 = uoeOrderDtlRow.BOStockCount1; // BO在庫数1
            uoeOrderDtlWork.BOStockCount2 = uoeOrderDtlRow.BOStockCount2; // BO在庫数2
            uoeOrderDtlWork.BOStockCount3 = uoeOrderDtlRow.BOStockCount3; // BO在庫数3
            uoeOrderDtlWork.UOESectionSlipNo = uoeOrderDtlRow.UOESectionSlipNo; // UOE拠点伝票番号
            uoeOrderDtlWork.BOSlipNo1 = uoeOrderDtlRow.BOSlipNo1; // BO伝票番号１
            uoeOrderDtlWork.BOSlipNo2 = uoeOrderDtlRow.BOSlipNo2; // BO伝票番号２
            uoeOrderDtlWork.BOSlipNo3 = uoeOrderDtlRow.BOSlipNo3; // BO伝票番号３
            uoeOrderDtlWork.EOAlwcCount = uoeOrderDtlRow.EOAlwcCount; // EO引当数
            uoeOrderDtlWork.BOManagementNo = uoeOrderDtlRow.BOManagementNo; // BO管理番号
            uoeOrderDtlWork.AnswerListPrice = uoeOrderDtlRow.AnswerListPrice; // 回答定価
            uoeOrderDtlWork.AnswerSalesUnitCost = uoeOrderDtlRow.AnswerSalesUnitCost; // 回答原価単価
            uoeOrderDtlWork.UOESubstMark = uoeOrderDtlRow.UOESubstMark; // UOE代替マーク
            uoeOrderDtlWork.UOEStockMark = uoeOrderDtlRow.UOEStockMark; // UOE在庫マーク
            uoeOrderDtlWork.PartsLayerCd = uoeOrderDtlRow.PartsLayerCd; // 層別コード
            uoeOrderDtlWork.MazdaUOEShipSectCd1 = uoeOrderDtlRow.MazdaUOEShipSectCd1; // UOE出荷拠点コード１（マツダ）
            uoeOrderDtlWork.MazdaUOEShipSectCd2 = uoeOrderDtlRow.MazdaUOEShipSectCd2; // UOE出荷拠点コード２（マツダ）
            uoeOrderDtlWork.MazdaUOEShipSectCd3 = uoeOrderDtlRow.MazdaUOEShipSectCd3; // UOE出荷拠点コード３（マツダ）
            uoeOrderDtlWork.MazdaUOESectCd1 = uoeOrderDtlRow.MazdaUOESectCd1; // UOE拠点コード１（マツダ）
            uoeOrderDtlWork.MazdaUOESectCd2 = uoeOrderDtlRow.MazdaUOESectCd2; // UOE拠点コード２（マツダ）
            uoeOrderDtlWork.MazdaUOESectCd3 = uoeOrderDtlRow.MazdaUOESectCd3; // UOE拠点コード３（マツダ）
            uoeOrderDtlWork.MazdaUOESectCd4 = uoeOrderDtlRow.MazdaUOESectCd4; // UOE拠点コード４（マツダ）
            uoeOrderDtlWork.MazdaUOESectCd5 = uoeOrderDtlRow.MazdaUOESectCd5; // UOE拠点コード５（マツダ）
            uoeOrderDtlWork.MazdaUOESectCd6 = uoeOrderDtlRow.MazdaUOESectCd6; // UOE拠点コード６（マツダ）
            uoeOrderDtlWork.MazdaUOESectCd7 = uoeOrderDtlRow.MazdaUOESectCd7; // UOE拠点コード７（マツダ）
            uoeOrderDtlWork.MazdaUOEStockCnt1 = uoeOrderDtlRow.MazdaUOEStockCnt1; // UOE在庫数１（マツダ）
            uoeOrderDtlWork.MazdaUOEStockCnt2 = uoeOrderDtlRow.MazdaUOEStockCnt2; // UOE在庫数２（マツダ）
            uoeOrderDtlWork.MazdaUOEStockCnt3 = uoeOrderDtlRow.MazdaUOEStockCnt3; // UOE在庫数３（マツダ）
            uoeOrderDtlWork.MazdaUOEStockCnt4 = uoeOrderDtlRow.MazdaUOEStockCnt4; // UOE在庫数４（マツダ）
            uoeOrderDtlWork.MazdaUOEStockCnt5 = uoeOrderDtlRow.MazdaUOEStockCnt5; // UOE在庫数５（マツダ）
            uoeOrderDtlWork.MazdaUOEStockCnt6 = uoeOrderDtlRow.MazdaUOEStockCnt6; // UOE在庫数６（マツダ）
            uoeOrderDtlWork.MazdaUOEStockCnt7 = uoeOrderDtlRow.MazdaUOEStockCnt7; // UOE在庫数７（マツダ）
            uoeOrderDtlWork.UOEDistributionCd = uoeOrderDtlRow.UOEDistributionCd; // UOE卸コード
            uoeOrderDtlWork.UOEOtherCd = uoeOrderDtlRow.UOEOtherCd; // UOE他コード
            uoeOrderDtlWork.UOEHMCd = uoeOrderDtlRow.UOEHMCd; // UOEＨＭコード
            uoeOrderDtlWork.BOCount = uoeOrderDtlRow.BOCount; // ＢＯ数
            uoeOrderDtlWork.UOEMarkCode = uoeOrderDtlRow.UOEMarkCode; // UOEマークコード
            uoeOrderDtlWork.SourceShipment = uoeOrderDtlRow.SourceShipment; // 出荷元
            uoeOrderDtlWork.ItemCode = uoeOrderDtlRow.ItemCode; // アイテムコード
            uoeOrderDtlWork.UOECheckCode = uoeOrderDtlRow.UOECheckCode; // UOEチェックコード
            uoeOrderDtlWork.HeadErrorMassage = uoeOrderDtlRow.HeadErrorMassage; // ヘッドエラーメッセージ
            uoeOrderDtlWork.LineErrorMassage = uoeOrderDtlRow.LineErrorMassage; // ラインエラーメッセージ
            uoeOrderDtlWork.DataSendCode = uoeOrderDtlRow.DataSendCode; // データ送信区分
            uoeOrderDtlWork.DataRecoverDiv = uoeOrderDtlRow.DataRecoverDiv; // データ復旧区分
            uoeOrderDtlWork.EnterUpdDivSec = uoeOrderDtlRow.EnterUpdDivSec; // 入庫更新区分（拠点）
            uoeOrderDtlWork.EnterUpdDivBO1 = uoeOrderDtlRow.EnterUpdDivBO1; // 入庫更新区分（BO1）
            uoeOrderDtlWork.EnterUpdDivBO2 = uoeOrderDtlRow.EnterUpdDivBO2; // 入庫更新区分（BO2）
            uoeOrderDtlWork.EnterUpdDivBO3 = uoeOrderDtlRow.EnterUpdDivBO3; // 入庫更新区分（BO3）
            uoeOrderDtlWork.EnterUpdDivMaker = uoeOrderDtlRow.EnterUpdDivMaker; // 入庫更新区分（ﾒｰｶｰ）
            uoeOrderDtlWork.EnterUpdDivEO = uoeOrderDtlRow.EnterUpdDivEO; // 入庫更新区分（EO）
            uoeOrderDtlWork.DtlRelationGuid = uoeOrderDtlRow.DtlRelationGuid; // 共通キー
            #endregion

            // 納品区分
            if (!UOESupplierAcs.EnabledDeliveredGoodsDiv(uoeOrderDtlRow.CommAssemblyId))
            {
                uoeOrderDtlWork.UOEDeliGoodsDiv = string.Empty; // UOE納品区分
                uoeOrderDtlWork.DeliveredGoodsDivNm = string.Empty; // 納品区分名称
            }
            // Ｈ納品区分
            if (!this.CheckEnabledFollowDeliGoodsDiv(uoeOrderDtlRow.CommAssemblyId))
            {
                uoeOrderDtlWork.FollowDeliGoodsDiv = string.Empty; // フォロー納品区分
                uoeOrderDtlWork.FollowDeliGoodsDivNm = string.Empty; // フォロー納品区分名称
            }
            // 指定拠点
            if (!UOESupplierAcs.EnabledUOEResvdSection(uoeOrderDtlRow.CommAssemblyId))
            {
                uoeOrderDtlWork.UOEResvdSection = string.Empty; // UOE指定拠点
                uoeOrderDtlWork.UOEResvdSectionNm = string.Empty; // UOE指定拠点名称
            }

            return uoeOrderDtlWork;
        }

        /// <summary>
        /// UOE発注データキャッシュ
        /// </summary>
        /// <param name="retUOEOrderDataList"></param>
        private void CacheUOEOrderInfo(ArrayList uoeOrderDataList)
        {
            for (int i = 0; i < uoeOrderDataList.Count; i++)
            {
                if (uoeOrderDataList[i] is CustomSerializeArrayList)
                {
                    CustomSerializeArrayList tempList = (CustomSerializeArrayList)uoeOrderDataList[i];
                    foreach (object tempObj in tempList)
                    {
                        if (tempObj is CustomSerializeArrayList)
                        {
                            CustomSerializeArrayList tempCSList = (CustomSerializeArrayList)tempObj;

                            foreach (object objWork in tempCSList)
                            {
                                if (objWork is UOEOrderDtlWork)
                                {
                                    this.CacheUOEOrderDtlDataTable((UOEOrderDtlWork)objWork, this._uoeOrderDtlDataTable);
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// UOE発注データキャッシュ
        /// </summary>
        /// <param name="retUOEOrderDataList"></param>
        private void CacheUOEOrderInfo(List<UOEOrderDtlWork> uoeOrderDtlWorkList)
        {
            if (uoeOrderDtlWorkList == null) return;
            foreach (UOEOrderDtlWork uoeOrderDtlWork in uoeOrderDtlWorkList)
            {
                if (uoeOrderDtlWork.DataSendCode == 9) continue; // 処理済みの発注データはキャッシュしない。 
                this.CacheUOEOrderDtlDataTable(uoeOrderDtlWork, this._uoeOrderDtlDataTable);
            }
        }

        /// <summary>
        /// UOE発注データキャッシュ
        /// </summary>
        /// <param name="stockDetailWork"></param>
        /// <param name="stockDetailForReadDataTable"></param>
        private void CacheUOEOrderDtlDataTable(UOEOrderDtlWork uoeOrderDtlWork, SalesInputDataSet.UOEOrderDtlDataTable uoeOrderDtlDataTable)
        {
            try
            {
                uoeOrderDtlDataTable.AddUOEOrderDtlRow(this.CreateRowFromUIData(uoeOrderDtlWork, uoeOrderDtlDataTable));
            }
            catch (ConstraintException)
            {
                SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = uoeOrderDtlDataTable.FindByDtlRelationGuid(uoeOrderDtlWork.DtlRelationGuid);
                this.SetRowFromUIData(ref uoeOrderDtlRow, uoeOrderDtlWork);
            }
        }

        /// <summary>
        /// 指定したUOE発注データワークオブジェクトを元にUOE発注データテーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="uoeOrderDtlWork"></param>
        /// <param name="uoeOrderDtlDataTable"></param>
        /// <returns></returns>
        private SalesInputDataSet.UOEOrderDtlRow CreateRowFromUIData(UOEOrderDtlWork uoeOrderDtlWork, SalesInputDataSet.UOEOrderDtlDataTable uoeOrderDtlDataTable)
        {
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = uoeOrderDtlDataTable.NewUOEOrderDtlRow();

            this.SetRowFromUIData(ref uoeOrderDtlRow, uoeOrderDtlWork);
            return uoeOrderDtlRow;
        }

        /// <summary>
        /// UOE発注データワークオブジェクトからUOE発注データ行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="row"></param>
        /// <param name="uoeOrderDtlWork"></param>
        private void SetRowFromUIData(ref SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow, UOEOrderDtlWork uoeOrderDtlWork)
        {
            #region 項目セット
            uoeOrderDtlRow.CreateDateTime = uoeOrderDtlWork.CreateDateTime; // 作成日時
            uoeOrderDtlRow.UpdateDateTime = uoeOrderDtlWork.UpdateDateTime; // 更新日時
            uoeOrderDtlRow.EnterpriseCode = uoeOrderDtlWork.EnterpriseCode; // 企業コード
            uoeOrderDtlRow.FileHeaderGuid = uoeOrderDtlWork.FileHeaderGuid; // GUID
            uoeOrderDtlRow.UpdEmployeeCode = uoeOrderDtlWork.UpdEmployeeCode; // 更新従業員コード
            uoeOrderDtlRow.UpdAssemblyId1 = uoeOrderDtlWork.UpdAssemblyId1; // 更新アセンブリID1
            uoeOrderDtlRow.UpdAssemblyId2 = uoeOrderDtlWork.UpdAssemblyId2; // 更新アセンブリID2
            uoeOrderDtlRow.LogicalDeleteCode = uoeOrderDtlWork.LogicalDeleteCode; // 論理削除区分
            uoeOrderDtlRow.SystemDivCd = uoeOrderDtlWork.SystemDivCd; // システム区分
            uoeOrderDtlRow.UOESalesOrderNo = uoeOrderDtlWork.UOESalesOrderNo; // UOE発注番号
            uoeOrderDtlRow.UOESalesOrderRowNo = uoeOrderDtlWork.UOESalesOrderRowNo; // UOE発注行番号
            uoeOrderDtlRow.SendTerminalNo = uoeOrderDtlWork.SendTerminalNo; // 送信端末番号
            uoeOrderDtlRow.UOESupplierCd = uoeOrderDtlWork.UOESupplierCd; // UOE発注先コード
            uoeOrderDtlRow.UOESupplierName = uoeOrderDtlWork.UOESupplierName; // UOE発注先名称
            uoeOrderDtlRow.CommAssemblyId = uoeOrderDtlWork.CommAssemblyId; // 通信アセンブリID
            uoeOrderDtlRow.OnlineNo = uoeOrderDtlWork.OnlineNo; // オンライン番号
            uoeOrderDtlRow.OnlineRowNo = uoeOrderDtlWork.OnlineRowNo; // オンライン行番号
            uoeOrderDtlRow.SalesDate = uoeOrderDtlWork.SalesDate; // 売上日付
            uoeOrderDtlRow.InputDay = uoeOrderDtlWork.InputDay; // 入力日
            uoeOrderDtlRow.DataUpdateDateTime = uoeOrderDtlWork.DataUpdateDateTime; // データ更新日時
            uoeOrderDtlRow.UOEKind = uoeOrderDtlWork.UOEKind; // UOE種別
            uoeOrderDtlRow.SalesSlipNum = uoeOrderDtlWork.SalesSlipNum; // 売上伝票番号
            uoeOrderDtlRow.AcptAnOdrStatus = uoeOrderDtlWork.AcptAnOdrStatus; // 受注ステータス
            uoeOrderDtlRow.SalesSlipDtlNum = uoeOrderDtlWork.SalesSlipDtlNum; // 売上明細通番
            uoeOrderDtlRow.SectionCode = uoeOrderDtlWork.SectionCode; // 拠点コード
            uoeOrderDtlRow.SubSectionCode = uoeOrderDtlWork.SubSectionCode; // 部門コード
            uoeOrderDtlRow.CustomerCode = uoeOrderDtlWork.CustomerCode; // 得意先コード
            uoeOrderDtlRow.CustomerSnm = uoeOrderDtlWork.CustomerSnm; // 得意先略称
            uoeOrderDtlRow.CashRegisterNo = uoeOrderDtlWork.CashRegisterNo; // レジ番号
            uoeOrderDtlRow.CommonSeqNo = uoeOrderDtlWork.CommonSeqNo; // 共通通番
            uoeOrderDtlRow.SupplierFormal = uoeOrderDtlWork.SupplierFormal; // 仕入形式
            uoeOrderDtlRow.SupplierSlipNo = uoeOrderDtlWork.SupplierSlipNo; // 仕入伝票番号
            uoeOrderDtlRow.StockSlipDtlNum = uoeOrderDtlWork.StockSlipDtlNum; // 仕入明細通番
            uoeOrderDtlRow.BoCode = uoeOrderDtlWork.BoCode; // BO区分
            uoeOrderDtlRow.UOEDeliGoodsDiv = uoeOrderDtlWork.UOEDeliGoodsDiv; // UOE納品区分
            uoeOrderDtlRow.DeliveredGoodsDivNm = uoeOrderDtlWork.DeliveredGoodsDivNm; // 納品区分名称
            uoeOrderDtlRow.FollowDeliGoodsDiv = uoeOrderDtlWork.FollowDeliGoodsDiv; // フォロー納品区分
            uoeOrderDtlRow.FollowDeliGoodsDivNm = uoeOrderDtlWork.FollowDeliGoodsDivNm; // フォロー納品区分名称
            uoeOrderDtlRow.UOEResvdSection = uoeOrderDtlWork.UOEResvdSection; // UOE指定拠点
            uoeOrderDtlRow.UOEResvdSectionNm = uoeOrderDtlWork.UOEResvdSectionNm; // UOE指定拠点名称
            uoeOrderDtlRow.EmployeeCode = uoeOrderDtlWork.EmployeeCode; // 従業員コード
            uoeOrderDtlRow.EmployeeName = uoeOrderDtlWork.EmployeeName; // 従業員名称
            uoeOrderDtlRow.GoodsMakerCd = uoeOrderDtlWork.GoodsMakerCd; // 商品メーカーコード
            uoeOrderDtlRow.MakerName = uoeOrderDtlWork.MakerName; // メーカー名称
            uoeOrderDtlRow.GoodsNo = uoeOrderDtlWork.GoodsNo; // 商品番号
            uoeOrderDtlRow.GoodsNoNoneHyphen = uoeOrderDtlWork.GoodsNoNoneHyphen; // ハイフン無商品番号
            uoeOrderDtlRow.GoodsName = uoeOrderDtlWork.GoodsName; // 商品名称
            uoeOrderDtlRow.WarehouseCode = uoeOrderDtlWork.WarehouseCode; // 倉庫コード
            uoeOrderDtlRow.WarehouseName = uoeOrderDtlWork.WarehouseName; // 倉庫名称
            uoeOrderDtlRow.WarehouseShelfNo = uoeOrderDtlWork.WarehouseShelfNo; // 倉庫棚番
            uoeOrderDtlRow.AcceptAnOrderCnt = uoeOrderDtlWork.AcceptAnOrderCnt; // 受注数量
            uoeOrderDtlRow.ListPrice = uoeOrderDtlWork.ListPrice; // 定価（浮動）
            uoeOrderDtlRow.SalesUnitCost = uoeOrderDtlWork.SalesUnitCost; // 原価単価
            uoeOrderDtlRow.SupplierCd = uoeOrderDtlWork.SupplierCd; // 仕入先コード
            uoeOrderDtlRow.SupplierSnm = uoeOrderDtlWork.SupplierSnm; // 仕入先略称
            uoeOrderDtlRow.UoeRemark1 = uoeOrderDtlWork.UoeRemark1; // ＵＯＥリマーク１
            uoeOrderDtlRow.UoeRemark2 = uoeOrderDtlWork.UoeRemark2; // ＵＯＥリマーク２
            uoeOrderDtlRow.ReceiveDate = uoeOrderDtlWork.ReceiveDate; // 受信日付
            uoeOrderDtlRow.ReceiveTime = uoeOrderDtlWork.ReceiveTime; // 受信時刻
            uoeOrderDtlRow.AnswerMakerCd = uoeOrderDtlWork.AnswerMakerCd; // 回答メーカーコード
            uoeOrderDtlRow.AnswerPartsNo = uoeOrderDtlWork.AnswerPartsNo; // 回答品番
            uoeOrderDtlRow.AnswerPartsName = uoeOrderDtlWork.AnswerPartsName; // 回答品名
            uoeOrderDtlRow.SubstPartsNo = uoeOrderDtlWork.SubstPartsNo; // 代替品番
            uoeOrderDtlRow.UOESectOutGoodsCnt = uoeOrderDtlWork.UOESectOutGoodsCnt; // UOE拠点出庫数
            uoeOrderDtlRow.BOShipmentCnt1 = uoeOrderDtlWork.BOShipmentCnt1; // BO出庫数1
            uoeOrderDtlRow.BOShipmentCnt2 = uoeOrderDtlWork.BOShipmentCnt2; // BO出庫数2
            uoeOrderDtlRow.BOShipmentCnt3 = uoeOrderDtlWork.BOShipmentCnt3; // BO出庫数3
            uoeOrderDtlRow.MakerFollowCnt = uoeOrderDtlWork.MakerFollowCnt; // メーカーフォロー数
            uoeOrderDtlRow.NonShipmentCnt = uoeOrderDtlWork.NonShipmentCnt; // 未出庫数
            uoeOrderDtlRow.UOESectStockCnt = uoeOrderDtlWork.UOESectStockCnt; // UOE拠点在庫数
            uoeOrderDtlRow.BOStockCount1 = uoeOrderDtlWork.BOStockCount1; // BO在庫数1
            uoeOrderDtlRow.BOStockCount2 = uoeOrderDtlWork.BOStockCount2; // BO在庫数2
            uoeOrderDtlRow.BOStockCount3 = uoeOrderDtlWork.BOStockCount3; // BO在庫数3
            uoeOrderDtlRow.UOESectionSlipNo = uoeOrderDtlWork.UOESectionSlipNo; // UOE拠点伝票番号
            uoeOrderDtlRow.BOSlipNo1 = uoeOrderDtlWork.BOSlipNo1; // BO伝票番号１
            uoeOrderDtlRow.BOSlipNo2 = uoeOrderDtlWork.BOSlipNo2; // BO伝票番号２
            uoeOrderDtlRow.BOSlipNo3 = uoeOrderDtlWork.BOSlipNo3; // BO伝票番号３
            uoeOrderDtlRow.EOAlwcCount = uoeOrderDtlWork.EOAlwcCount; // EO引当数
            uoeOrderDtlRow.BOManagementNo = uoeOrderDtlWork.BOManagementNo; // BO管理番号
            uoeOrderDtlRow.AnswerListPrice = uoeOrderDtlWork.AnswerListPrice; // 回答定価
            uoeOrderDtlRow.AnswerSalesUnitCost = uoeOrderDtlWork.AnswerSalesUnitCost; // 回答原価単価
            uoeOrderDtlRow.UOESubstMark = uoeOrderDtlWork.UOESubstMark; // UOE代替マーク
            uoeOrderDtlRow.UOEStockMark = uoeOrderDtlWork.UOEStockMark; // UOE在庫マーク
            uoeOrderDtlRow.PartsLayerCd = uoeOrderDtlWork.PartsLayerCd; // 層別コード
            uoeOrderDtlRow.MazdaUOEShipSectCd1 = uoeOrderDtlWork.MazdaUOEShipSectCd1; // UOE出荷拠点コード１（マツダ）
            uoeOrderDtlRow.MazdaUOEShipSectCd2 = uoeOrderDtlWork.MazdaUOEShipSectCd2; // UOE出荷拠点コード２（マツダ）
            uoeOrderDtlRow.MazdaUOEShipSectCd3 = uoeOrderDtlWork.MazdaUOEShipSectCd3; // UOE出荷拠点コード３（マツダ）
            uoeOrderDtlRow.MazdaUOESectCd1 = uoeOrderDtlWork.MazdaUOESectCd1; // UOE拠点コード１（マツダ）
            uoeOrderDtlRow.MazdaUOESectCd2 = uoeOrderDtlWork.MazdaUOESectCd2; // UOE拠点コード２（マツダ）
            uoeOrderDtlRow.MazdaUOESectCd3 = uoeOrderDtlWork.MazdaUOESectCd3; // UOE拠点コード３（マツダ）
            uoeOrderDtlRow.MazdaUOESectCd4 = uoeOrderDtlWork.MazdaUOESectCd4; // UOE拠点コード４（マツダ）
            uoeOrderDtlRow.MazdaUOESectCd5 = uoeOrderDtlWork.MazdaUOESectCd5; // UOE拠点コード５（マツダ）
            uoeOrderDtlRow.MazdaUOESectCd6 = uoeOrderDtlWork.MazdaUOESectCd6; // UOE拠点コード６（マツダ）
            uoeOrderDtlRow.MazdaUOESectCd7 = uoeOrderDtlWork.MazdaUOESectCd7; // UOE拠点コード７（マツダ）
            uoeOrderDtlRow.MazdaUOEStockCnt1 = uoeOrderDtlWork.MazdaUOEStockCnt1; // UOE在庫数１（マツダ）
            uoeOrderDtlRow.MazdaUOEStockCnt2 = uoeOrderDtlWork.MazdaUOEStockCnt2; // UOE在庫数２（マツダ）
            uoeOrderDtlRow.MazdaUOEStockCnt3 = uoeOrderDtlWork.MazdaUOEStockCnt3; // UOE在庫数３（マツダ）
            uoeOrderDtlRow.MazdaUOEStockCnt4 = uoeOrderDtlWork.MazdaUOEStockCnt4; // UOE在庫数４（マツダ）
            uoeOrderDtlRow.MazdaUOEStockCnt5 = uoeOrderDtlWork.MazdaUOEStockCnt5; // UOE在庫数５（マツダ）
            uoeOrderDtlRow.MazdaUOEStockCnt6 = uoeOrderDtlWork.MazdaUOEStockCnt6; // UOE在庫数６（マツダ）
            uoeOrderDtlRow.MazdaUOEStockCnt7 = uoeOrderDtlWork.MazdaUOEStockCnt7; // UOE在庫数７（マツダ）
            uoeOrderDtlRow.UOEDistributionCd = uoeOrderDtlWork.UOEDistributionCd; // UOE卸コード
            uoeOrderDtlRow.UOEOtherCd = uoeOrderDtlWork.UOEOtherCd; // UOE他コード
            uoeOrderDtlRow.UOEHMCd = uoeOrderDtlWork.UOEHMCd; // UOEＨＭコード
            uoeOrderDtlRow.BOCount = uoeOrderDtlWork.BOCount; // ＢＯ数
            uoeOrderDtlRow.UOEMarkCode = uoeOrderDtlWork.UOEMarkCode; // UOEマークコード
            uoeOrderDtlRow.SourceShipment = uoeOrderDtlWork.SourceShipment; // 出荷元
            uoeOrderDtlRow.ItemCode = uoeOrderDtlWork.ItemCode; // アイテムコード
            uoeOrderDtlRow.UOECheckCode = uoeOrderDtlWork.UOECheckCode; // UOEチェックコード
            uoeOrderDtlRow.HeadErrorMassage = uoeOrderDtlWork.HeadErrorMassage; // ヘッドエラーメッセージ
            uoeOrderDtlRow.LineErrorMassage = uoeOrderDtlWork.LineErrorMassage; // ラインエラーメッセージ
            uoeOrderDtlRow.DataSendCode = uoeOrderDtlWork.DataSendCode; // データ送信区分
            uoeOrderDtlRow.DataRecoverDiv = uoeOrderDtlWork.DataRecoverDiv; // データ復旧区分
            uoeOrderDtlRow.EnterUpdDivSec = uoeOrderDtlWork.EnterUpdDivSec; // 入庫更新区分（拠点）
            uoeOrderDtlRow.EnterUpdDivBO1 = uoeOrderDtlWork.EnterUpdDivBO1; // 入庫更新区分（BO1）
            uoeOrderDtlRow.EnterUpdDivBO2 = uoeOrderDtlWork.EnterUpdDivBO2; // 入庫更新区分（BO2）
            uoeOrderDtlRow.EnterUpdDivBO3 = uoeOrderDtlWork.EnterUpdDivBO3; // 入庫更新区分（BO3）
            uoeOrderDtlRow.EnterUpdDivMaker = uoeOrderDtlWork.EnterUpdDivMaker; // 入庫更新区分（ﾒｰｶｰ）
            uoeOrderDtlRow.EnterUpdDivEO = uoeOrderDtlWork.EnterUpdDivEO; // 入庫更新区分（EO）
            uoeOrderDtlRow.DtlRelationGuid = uoeOrderDtlWork.DtlRelationGuid; // 共通キー

            SalesInputDataSet.SalesDetailRow[] rows = null;
            if (this._salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
            {
                rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}={1} AND {2}={3}",
                    this._salesDetailDataTable.AcptAnOdrStatusColumn.ColumnName, uoeOrderDtlWork.AcptAnOdrStatus,
                    this._salesDetailDataTable.SalesSlipDtlNumColumn.ColumnName, uoeOrderDtlWork.SalesSlipDtlNum));
            }
            else
            {
                rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}={1} AND {2}={3}", 
                    this._salesDetailDataTable.AcptAnOdrStatusSrcColumn.ColumnName, uoeOrderDtlWork.AcptAnOdrStatus,
                    this._salesDetailDataTable.SalesSlipDtlNumSrcColumn.ColumnName, uoeOrderDtlWork.SalesSlipDtlNum));
            }

            if ((rows != null) && (rows.Length > 0))
            {
                foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in rows)
                {
                    uoeOrderDtlRow.DtlRelationGuid = salesDetailRow.DtlRelationGuid;
                    break;
                }
            }
            else
            {
                uoeOrderDtlRow.DtlRelationGuid = Guid.Empty;
            }

            #endregion
        }

        /// <summary>
        /// UOE発注データテーブル設定処理
        /// </summary>
        public void SettingUOEOrderDtlFromSalesDetail()
        {
            this.SettingUOEOrderDtlFromSalesDetail(this.UOEOrderDtlDataTable, this._salesSlip, this._salesDetailDataTable);
        }

        /// <summary>
        /// UOE発注データテーブル設定処理
        /// </summary>
        /// <param name="uoeOrderDtlDataTable"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailDataTable"></param>
        private void SettingUOEOrderDtlFromSalesDetail(SalesInputDataSet.UOEOrderDtlDataTable uoeOrderDtlDataTable, SalesSlip salesSlip, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in salesDetailDataTable)
            {
                if (!this.ExistOrderInfoChkSales(salesDetailRow)) continue;

                SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);

                if (uoeOrderDtlRow != null)
                {
                    this.SettingUOEOrderDtlFromSalesDetail(ref uoeOrderDtlRow, salesSlip, salesDetailRow);
                }
            }
        }

        /// <summary>
        /// UOE発注データテーブル設定処理
        /// </summary>
        /// <param name="uoeOrderDtlRow"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailRow"></param>
        private void SettingUOEOrderDtlFromSalesDetail(ref SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow, SalesSlip salesSlip, SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            this.DefaultSettingUOEOrderDtlRow(salesDetailRow, ref uoeOrderDtlRow);

            uoeOrderDtlRow.SubSectionCode = salesSlip.SubSectionCode;
            uoeOrderDtlRow.BoCode = salesDetailRow.BoCode;
            uoeOrderDtlRow.UOESupplierCd = salesDetailRow.SupplierCdForOrder; // UOE発注先コード
            uoeOrderDtlRow.UOESupplierName = salesDetailRow.SupplierSnmForOrder; // UOE発注先名称
            uoeOrderDtlRow.GoodsMakerCd = salesDetailRow.GoodsMakerCd; // 商品メーカーコード
            uoeOrderDtlRow.SupplierCd = salesDetailRow.SupplierCd; // 仕入先コード
            uoeOrderDtlRow.UOEResvdSection = salesDetailRow.UOEResvdSection; // UOE指定拠点
            uoeOrderDtlRow.UOEResvdSectionNm = this._salesSlipInputInitDataAcs.GetName_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.UOEResvdSection, salesDetailRow.SupplierCdForOrder, salesDetailRow.UOEResvdSection);
            uoeOrderDtlRow.UOEDeliGoodsDiv = salesDetailRow.UOEDeliGoodsDiv; // 納品区分
            uoeOrderDtlRow.DeliveredGoodsDivNm = this._salesSlipInputInitDataAcs.GetName_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.DeliveredGoodsDiv, salesDetailRow.SupplierCdForOrder, salesDetailRow.UOEDeliGoodsDiv);
            if (this.CheckEnabledFollowDeliGoodsDiv(uoeOrderDtlRow.CommAssemblyId))
            {
                uoeOrderDtlRow.FollowDeliGoodsDiv = salesDetailRow.FollowDeliGoodsDiv;
                uoeOrderDtlRow.FollowDeliGoodsDivNm = this._salesSlipInputInitDataAcs.GetName_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.DeliveredGoodsDiv, salesDetailRow.SupplierCdForOrder, salesDetailRow.FollowDeliGoodsDiv);
            }
        }


        /// <summary>
        /// 車両管理情報クラスワークキャッシュ（車両管理からキャッシュ）
        /// </summary>
        /// <param name="carMangInputExtraInfo">車両管理</param>
        /// <returns>SalesSlipHeaderCopyData</returns>
        /// <remarks>
        /// <br>Note       : 車両管理情報クラスをキャッシュします。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/09/08②</br>
        /// </remarks>
        public SalesSlipHeaderCopyData CacheCarInfo(CarMangInputExtraInfo carMangInputExtraInfo)
        {
            SalesSlipHeaderCopyData salesSlipHeaderCopyData = new SalesSlipHeaderCopyData();

            // 車両管理番号
            salesSlipHeaderCopyData.CarMngNo = carMangInputExtraInfo.CarMngNo;
            // 車両走行距離
            salesSlipHeaderCopyData.Mileage = carMangInputExtraInfo.Mileage;
            // 車輌備考
            salesSlipHeaderCopyData.CarNote = carMangInputExtraInfo.CarNote;
            // 陸運事務所番号
            salesSlipHeaderCopyData.NumberPlate1Code = carMangInputExtraInfo.NumberPlate1Code;
            // 陸運事務局名称
            salesSlipHeaderCopyData.NumberPlate1Name = carMangInputExtraInfo.NumberPlate1Name;
            // 車両登録番号（種別）
            salesSlipHeaderCopyData.NumberPlate2 = carMangInputExtraInfo.NumberPlate2;
            // 車両登録番号（カナ）
            salesSlipHeaderCopyData.NumberPlate3 = carMangInputExtraInfo.NumberPlate3;
            // 車両登録番号（プレート番号）
            salesSlipHeaderCopyData.NumberPlate4 = carMangInputExtraInfo.NumberPlate4;
            // 車輌管理番号
            salesSlipHeaderCopyData.CarMngCode = carMangInputExtraInfo.CarMngCode;
            // 型式指定番号
            salesSlipHeaderCopyData.ModelDesignationNo = carMangInputExtraInfo.ModelDesignationNo;
            // 類別番号
            salesSlipHeaderCopyData.CategoryNo = carMangInputExtraInfo.CategoryNo;
            // 年式
            // --- UPD 2009/11/05 「MENTIS：0014553」の修正 ---------->>>>>
            salesSlipHeaderCopyData.FirstEntryDate = carMangInputExtraInfo.ProduceTypeOfYearInput * 100;
            // --- UPD 2009/11/05 ----------<<<<<
            // 車台番号
            salesSlipHeaderCopyData.FrameNo = carMangInputExtraInfo.FrameNo;
            // カラー情報
            salesSlipHeaderCopyData.ColorCode = carMangInputExtraInfo.ColorCode;
            // トリム情報
            salesSlipHeaderCopyData.TrimCode = carMangInputExtraInfo.TrimCode;
            // 装備情報
            salesSlipHeaderCopyData.CategoryObjAry = carMangInputExtraInfo.CategoryObjAry;
            // フル型式固定番号配列
            salesSlipHeaderCopyData.FullModelFixedNoAry = carMangInputExtraInfo.FullModelFixedNoAry;
            // 自由検索型式固定番号配列
            salesSlipHeaderCopyData.FreeSrchMdlFxdNoAry = carMangInputExtraInfo.FreeSrchMdlFxdNoAry; // ADD 2010/04/27
            // 得意先コード
            salesSlipHeaderCopyData.CustomerCode = carMangInputExtraInfo.CustomerCode;
            // 車検満期日
            salesSlipHeaderCopyData.InspectMaturityDate = carMangInputExtraInfo.InspectMaturityDate;
            // 前回車検満期日
            salesSlipHeaderCopyData.LTimeCiMatDate = carMangInputExtraInfo.LTimeCiMatDate;
            // 車検期間
            salesSlipHeaderCopyData.CarInspectYear = carMangInputExtraInfo.CarInspectYear;
            // 原動機型式（エンジン）
            salesSlipHeaderCopyData.EngineModel = carMangInputExtraInfo.EngineModel;
            // 車輌追加情報１
            salesSlipHeaderCopyData.CarAddInfo1 = carMangInputExtraInfo.CarAddInfo1;
            // 車輌追加情報２
            salesSlipHeaderCopyData.CarAddInfo2 = carMangInputExtraInfo.CarAddInfo2;
            // 登録年月日
            salesSlipHeaderCopyData.EntryDate = carMangInputExtraInfo.EntryDate;
            //フル型式
            salesSlipHeaderCopyData.FullModel = carMangInputExtraInfo.FullModel;
            //エンジン型式
            salesSlipHeaderCopyData.EngineModelNm = carMangInputExtraInfo.EngineModelNm;
            // --- ADD 2009/10/27 ---------->>>>>
            salesSlipHeaderCopyData.MakerCode = carMangInputExtraInfo.MakerCode; // 車種メーカーコード
            salesSlipHeaderCopyData.ModelCode = carMangInputExtraInfo.ModelCode; // 車種コード
            salesSlipHeaderCopyData.ModelSubCode = carMangInputExtraInfo.ModelSubCode; // 車種サブコード
            salesSlipHeaderCopyData.ModelFullName = carMangInputExtraInfo.ModelFullName; // 車種全角名称
            // --- ADD 2009/10/27 ---------->>>>>
            // --- ADD m.suzuki 2010/04/02 ---------->>>>>
            salesSlipHeaderCopyData.ModelHalfName = carMangInputExtraInfo.ModelHalfName; // 車種半角名称
            // --- ADD m.suzuki 2010/04/02 ----------<<<<<

            // --- ADD 2013/03/21 ---------->>>>>
            salesSlipHeaderCopyData.DomesticForeignCode = carMangInputExtraInfo.DomesticForeignCode; // 国産/外車区分
            // ハンドル位置情報セット
            if (carMangInputExtraInfo.HandleInfoCode != 0)
                this._handleInfoCode = carMangInputExtraInfo.HandleInfoCode; // ハンドル位置情報
            // --- ADD 2013/03/21 ----------<<<<<

            return salesSlipHeaderCopyData;

        }

        /// <summary>
        /// オブジェクトからの日付LongDate取得処理
        /// </summary>
        /// <param name="targetInt"></param>
        /// <returns>LongDate</returns>
        /// <remarks>
        /// <br>Note       : 日付LongDateを処理します。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/09/08②</br>
        /// </remarks>
        private int GetLongDateFromObject(int targetInt)
        {
            if (targetInt == 0)
            {
                return 0;
            }
            else
            {
                try
                {
                    DateTime time = DateTime.ParseExact(targetInt.ToString(), "yyyyMM", null);
                    return TDateTime.DateTimeToLongDate(time);
                }
                catch
                {
                    return 0;
                }
            }
        }
        #endregion

        //>>>2010/02/26
        #region ●SCM情報

        // ADD 2015/01/28 SCM高速化Redmine#61対応 -------------------------->>>>>
        /// <summary>提供部品検索コントローラー</summary>
        private static IOfferPartsInfo _iOfferPartsInfo;
        // ADD 2015/01/28 SCM高速化Redmine#61対応 --------------------------<<<<<

        #region SCM関連チェック
        /// <summary>
        /// SCM情報存在チェック
        /// </summary>
        /// <returns>true:存在 false:非存在</returns>
        /// <remarks>チェック条件：SCM受注データ有無</remarks>
        public bool ExistSCMInfo()
        {
            bool ret = false;

            if ((this._scmAcOdrDataDataTable == null) || (this._scmAcOdrDataDataTable.Count == 0)) return ret;

            if ((this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_ShipmentAddUp) ||
                (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp))
            {
                ret = true;
            }
            else
            {
                foreach (ScmDataSet.SCMAcOdrDataRow row in this._scmAcOdrDataDataTable)
                {
                    if ((row != null) && ((row.InquiryNumber != 0) || (row.SalesSlipNum != ctDefaultSalesSlipNum)))
                    {
                        ret = true;
                        break;
                    }
                }
            }

            return ret;
        }

        //>>>2011/02/01
        /// <summary>
        /// SCM情報存在チェック
        /// </summary>
        /// <param name="salesSlipNum">売上伝票番号</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>true:存在 false:非存在</returns>
        public bool ExistSCMInfo(string salesSlipNum, int salesRowNo)
        {
            bool ret = false;

            if ((this._scmAcOdrDtlAsDataTable == null) || (this._scmAcOdrDtlAsDataTable.Count == 0)) return ret;

            //>>>2011/03/05
            //ScmDataSet.SCMAcOdrDtlAsRow asRow = this._scmAcOdrDtlAsDataTable.FindBySalesSlipNumSalesRowNo(salesSlipNum, salesRowNo);

            ScmDataSet.SCMAcOdrDtlAsRow asRow = null;
            ScmDataSet.SCMAcOdrDtlAsRow[] asRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} and {2}={3}",
                this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlipNum,
                this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, salesRowNo));

            if ((asRows != null) && (asRows.Length != 0)) asRow = asRows[0];
            //<<<2011/03/05

            if (asRow != null)
            {
                ret = true;
            }

            return ret;
        }
        //<<<2011/02/01

        /// <summary>
        /// 得意先企業／拠点コードチェック
        /// </summary>
        /// <param name="customerInfo"></param>
        /// <returns>true:設定あり false:設定なし</returns>
        public bool CheckCustomerEpCode(CustomerInfo customerInfo)
        {
            bool ret = true;
            if (customerInfo.OnlineKindDiv == (int)OnlineKindDiv.SCM)
            {
                if ((customerInfo.CustomerEpCode == string.Empty) ||
                    (customerInfo.CustomerSecCode == string.Empty))
                {
                    ret = false;
                }
            }
            return ret;
        }
        #endregion

        #region SCM受注データ操作
        /// <summary>
        /// SCM受注データワークオブジェクトを元にUOE発注データテーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="scmHeader"></param>
        /// <param name="scmAcOdrDataDataTable"></param>
        /// <returns></returns>
        private ScmDataSet.SCMAcOdrDataRow CreateSCMAcOdrRowFromUIData(UserSCMOrderHeaderRecord scmHeader, ScmDataSet.SCMAcOdrDataDataTable scmAcOdrDataDataTable)
        {
            ScmDataSet.SCMAcOdrDataRow scmAcOdrDataRow = scmAcOdrDataDataTable.NewSCMAcOdrDataRow();

            this.DefaultSettingSCMAcOdrDataRow(ref scmAcOdrDataRow);

            this.SetRowFromUIData(ref scmAcOdrDataRow, scmHeader);
            return scmAcOdrDataRow;
        }

        /// <summary>
        /// SCM受注データワークオブジェクトからSCM受注データ行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="scmAcOdrDataRow"></param>
        /// <param name="scmHeader"></param>
        private void SetRowFromUIData(ref ScmDataSet.SCMAcOdrDataRow scmAcOdrDataRow, UserSCMOrderHeaderRecord scmHeader)
        {
            #region 項目セット
            scmAcOdrDataRow.CreateDateTime = scmHeader.CreateDateTime; // 作成日時
            scmAcOdrDataRow.UpdateDateTime = scmHeader.UpdateDateTime; // 更新日時
            scmAcOdrDataRow.EnterpriseCode = scmHeader.EnterpriseCode; // 企業コード
            scmAcOdrDataRow.FileHeaderGuid = scmHeader.FileHeaderGuid; // GUID
            scmAcOdrDataRow.UpdEmployeeCode = scmHeader.UpdEmployeeCode; // 更新従業員コード
            scmAcOdrDataRow.UpdAssemblyId1 = scmHeader.UpdAssemblyId1; // 更新アセンブリID1
            scmAcOdrDataRow.UpdAssemblyId2 = scmHeader.UpdAssemblyId2; // 更新アセンブリID2
            scmAcOdrDataRow.LogicalDeleteCode = scmHeader.LogicalDeleteCode; // 論理削除区分
            scmAcOdrDataRow.InqOriginalEpCd = scmHeader.InqOriginalEpCd.Trim(); // 問合せ元企業コード//@@@@20230303
            scmAcOdrDataRow.InqOriginalSecCd = scmHeader.InqOriginalSecCd; // 問合せ元拠点コード
            scmAcOdrDataRow.InqOtherEpCd = scmHeader.InqOtherEpCd; // 問合せ先企業コード
            scmAcOdrDataRow.InqOtherSecCd = scmHeader.InqOtherSecCd; // 問合せ先拠点コード
            scmAcOdrDataRow.InquiryNumber = scmHeader.InquiryNumber; // 問合せ番号
            scmAcOdrDataRow.CustomerCode = scmHeader.CustomerCode; // 得意先コード
            scmAcOdrDataRow.UpdateDate = scmHeader.UpdateDate; // 更新年月日
            scmAcOdrDataRow.UpdateTime = scmHeader.UpdateTime; // 更新時間
            scmAcOdrDataRow.AnswerDivCd = scmHeader.AnswerDivCd; // 回答区分
            scmAcOdrDataRow.JudgementDate = scmHeader.JudgementDate; // 確定日
            scmAcOdrDataRow.InqOrdNote = scmHeader.InqOrdNote; // 問合せ・発注備考
            scmAcOdrDataRow.AppendingFile = scmHeader.AppendingFile; // 添付ファイル
            scmAcOdrDataRow.AppendingFileNm = scmHeader.AppendingFileNm; // 添付ファイル名
            scmAcOdrDataRow.InqEmployeeCd = scmHeader.InqEmployeeCd; // 問合せ従業員コード
            scmAcOdrDataRow.InqEmployeeNm = scmHeader.InqEmployeeNm; // 問合せ従業員名称
            scmAcOdrDataRow.AnsEmployeeCd = scmHeader.AnsEmployeeCd; // 回答従業員コード
            scmAcOdrDataRow.AnsEmployeeNm = scmHeader.AnsEmployeeNm; // 回答従業員名称
            scmAcOdrDataRow.InquiryDate = scmHeader.InquiryDate; // 問合せ日
            scmAcOdrDataRow.AcptAnOdrStatus = this._salesSlip.AcptAnOdrStatus; // 受注ステータス
            scmAcOdrDataRow.SalesSlipNum = scmHeader.SalesSlipNum; // 売上伝票番号
            scmAcOdrDataRow.SalesTotalTaxInc = scmHeader.SalesTotalTaxInc; // 売上伝票合計（税込み）
            scmAcOdrDataRow.SalesSubtotalTax = scmHeader.SalesSubtotalTax; // 売上小計（税）
            scmAcOdrDataRow.InqOrdDivCd = scmHeader.InqOrdDivCd; // 問合せ・発注種別
            scmAcOdrDataRow.InqOrdAnsDivCd = scmHeader.InqOrdAnsDivCd; // 問発・回答種別
            scmAcOdrDataRow.ReceiveDateTime = scmHeader.ReceiveDateTime; // 受信日時
            scmAcOdrDataRow.AnswerCreateDiv = scmHeader.AnswerCreateDiv; // 回答作成区分
            //>>>2010/06/30
            scmAcOdrDataRow.CancelDiv = scmHeader.CancelDiv; // キャンセル区分
            scmAcOdrDataRow.CMTCooprtDiv = scmHeader.CMTCooprtDiv; // CMT連携区分
            //<<<2010/06/30
            //>>>2011/05/25
            scmAcOdrDataRow.SfPmCprtInstSlipNo = scmHeader.SfPmCprtInstSlipNo; // SF-PM連携指示書番号
            //<<<2011/05/25
            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDataRow.TabUseDiv = scmHeader.TabUseDiv;  // タブレット使用区分
            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
            // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
            scmAcOdrDataRow.CarMngCode = scmHeader.CarMngCode; // 車両管理コード
            // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
            // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------>>>>>
            scmAcOdrDataRow.AcceptOrOrderKind = scmHeader.AcceptOrOrderKind; // 受発注種別
            // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------<<<<<
            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
            scmAcOdrDataRow.AutoAnsMthd = scmHeader.AutoAnsMthd; // 自動回答方式
            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
            #endregion
        }

        /// <summary>
        /// SCM受注データワークオブジェクトを元にUOE発注データテーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="scmAcOdrDataRow"></param>
        /// <returns></returns>
        private ScmDataSet.SCMAcOdrDataRow CreateSCMAcOdrRowFromUIData(SalesSlip salesSlip, ScmDataSet.SCMAcOdrDataRow scmAcOdrDataRow)
        {
            this.SetRowFromUIData(ref scmAcOdrDataRow, salesSlip);
            return scmAcOdrDataRow;
        }

        /// <summary>
        /// SCM受注データテーブル行オブジェクトに初期値をセットします。
        /// </summary>
        /// <param name="scmAcOdrDataRow"></param>
        private void DefaultSettingSCMAcOdrDataRow(ref ScmDataSet.SCMAcOdrDataRow scmAcOdrDataRow)
        {
            #region 項目セット
            scmAcOdrDataRow.CreateDateTime = DateTime.MinValue; // 作成日時
            scmAcOdrDataRow.UpdateDateTime = DateTime.MinValue; // 更新日時
            scmAcOdrDataRow.EnterpriseCode = this._enterpriseCode; // 企業コード
            scmAcOdrDataRow.FileHeaderGuid = Guid.Empty; // GUID
            scmAcOdrDataRow.UpdEmployeeCode = string.Empty; // 更新従業員コード
            scmAcOdrDataRow.UpdAssemblyId1 = string.Empty; // 更新アセンブリID1
            scmAcOdrDataRow.UpdAssemblyId2 = string.Empty; // 更新アセンブリID2
            scmAcOdrDataRow.LogicalDeleteCode = 0; // 論理削除区分
            scmAcOdrDataRow.InqOriginalEpCd = string.Empty; // 問合せ元企業コード
            scmAcOdrDataRow.InqOriginalSecCd = string.Empty; // 問合せ元拠点コード
            scmAcOdrDataRow.InqOtherEpCd = string.Empty; // 問合せ先企業コード
            scmAcOdrDataRow.InqOtherSecCd = string.Empty; // 問合せ先拠点コード
            scmAcOdrDataRow.InquiryNumber = 0; // 問合せ番号
            scmAcOdrDataRow.CustomerCode = 0; // 得意先コード
            scmAcOdrDataRow.UpdateDate = DateTime.MinValue; // 更新年月日
            scmAcOdrDataRow.UpdateTime = 0; // 更新時間
            scmAcOdrDataRow.AnswerDivCd = 0; // 回答区分
            scmAcOdrDataRow.JudgementDate = DateTime.MinValue; // 確定日
            scmAcOdrDataRow.InqOrdNote = string.Empty; // 問合せ・発注備考
            scmAcOdrDataRow.AppendingFile = new byte[0]; // 添付ファイル
            scmAcOdrDataRow.AppendingFileNm = string.Empty; // 添付ファイル名
            scmAcOdrDataRow.InqEmployeeCd = string.Empty; // 問合せ従業員コード
            scmAcOdrDataRow.InqEmployeeNm = string.Empty; // 問合せ従業員名称
            scmAcOdrDataRow.AnsEmployeeCd = string.Empty; // 回答従業員コード
            scmAcOdrDataRow.AnsEmployeeNm = string.Empty; // 回答従業員名称
            scmAcOdrDataRow.InquiryDate = DateTime.MinValue; // 問合せ日
            scmAcOdrDataRow.AcptAnOdrStatus = 0; // 受注ステータス
            scmAcOdrDataRow.SalesSlipNum = SalesSlipInputAcs.ctDefaultSalesSlipNum; // 売上伝票番号
            scmAcOdrDataRow.SalesTotalTaxInc = 0; // 売上伝票合計（税込み）
            scmAcOdrDataRow.SalesSubtotalTax = 0; // 売上小計（税）
            scmAcOdrDataRow.InqOrdDivCd = 0; // 問合せ・発注種別
            scmAcOdrDataRow.InqOrdAnsDivCd = 0; // 問発・回答種別(2:回答)
            scmAcOdrDataRow.ReceiveDateTime = DateTime.MinValue; // 受信日時
            scmAcOdrDataRow.AnswerCreateDiv = 0; // 回答作成区分
            //>>>2010/06/30
            scmAcOdrDataRow.CancelDiv = 0; // キャンセル区分
            scmAcOdrDataRow.CMTCooprtDiv = 0; // CMT連携区分
            //<<<2010/06/30
            //>>>2011/05/25
            scmAcOdrDataRow.SfPmCprtInstSlipNo = string.Empty; // SF-PM連携指示書番号
            //<<<2011/05/25
            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDataRow.TabUseDiv = 0;  // タブレット使用区分
            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
            // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
            scmAcOdrDataRow.CarMngCode = string.Empty; // 車両管理コード
            // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
            // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------>>>>>
            scmAcOdrDataRow.AcceptOrOrderKind = 0; // 受発注種別
            // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------<<<<<
            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
            scmAcOdrDataRow.AutoAnsMthd = 0; // 自動回答方式
            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<

            #endregion
        }

        /// <summary>
        /// SCM受注データワークオブジェクトからSCM受注データ行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="scmAcOdrDataRow"></param>
        /// <param name="salesSlip"></param>
        private void SetRowFromUIData(ref ScmDataSet.SCMAcOdrDataRow scmAcOdrDataRow, SalesSlip salesSlip)
        {
            #region 項目セット
            //scmAcOdrDataRow.CreateDateTime = scmHeader.CreateDateTime; // 作成日時
            //scmAcOdrDataRow.UpdateDateTime = scmHeader.UpdateDateTime; // 更新日時
            //scmAcOdrDataRow.EnterpriseCode = scmHeader.EnterpriseCode; // 企業コード
            //scmAcOdrDataRow.FileHeaderGuid = scmHeader.FileHeaderGuid; // GUID
            //scmAcOdrDataRow.UpdEmployeeCode = scmHeader.UpdEmployeeCode; // 更新従業員コード
            //scmAcOdrDataRow.UpdAssemblyId1 = scmHeader.UpdAssemblyId1; // 更新アセンブリID1
            //scmAcOdrDataRow.UpdAssemblyId2 = scmHeader.UpdAssemblyId2; // 更新アセンブリID2
            //scmAcOdrDataRow.LogicalDeleteCode = scmHeader.LogicalDeleteCode; // 論理削除区分
            scmAcOdrDataRow.InqOriginalEpCd = salesSlip.InqOriginalEpCd.Trim(); // 問合せ元企業コード//@@@@20230303
            //scmAcOdrDataRow.InqOriginalEpNm = scmHeader.InqOriginalEpNm; // 問合せ元企業名称
            scmAcOdrDataRow.InqOriginalSecCd = salesSlip.InqOriginalSecCd; // 問合せ元拠点コード
            //scmAcOdrDataRow.InqOriginalSecNm = scmHeader.InqOriginalSecNm; // 問合せ元拠点名称
            if (scmAcOdrDataRow.InquiryNumber == 0)
            {
                scmAcOdrDataRow.InqOtherEpCd = this._enterpriseCode; // 問合せ先企業コード
                //x_chenjm update sta for #25623 2011/10/12 >>>>>>>>>>>
                //scmAcOdrDataRow.InqOtherSecCd = salesSlip.ResultsAddUpSecCd; // 問合せ先拠点コード
                scmAcOdrDataRow.InqOtherSecCd = LoginInfoAcquisition.Employee.BelongSectionCode.Trim();
                //x_chenjm update end for #25623 2011/10/12 <<<<<<<<<<<
            }
            scmAcOdrDataRow.InquiryNumber = salesSlip.InquiryNumber; // 問合せ番号
            scmAcOdrDataRow.CustomerCode = salesSlip.CustomerCode; // 得意先コード
            //scmAcOdrDataRow.UpdateDate = scmHeader.UpdateDate; // 更新年月日
            //scmAcOdrDataRow.UpdateTime = scmHeader.UpdateTime; // 更新時間
            scmAcOdrDataRow.AnswerDivCd = 20; // 回答区分
            //scmAcOdrDataRow.JudgementDate = scmHeader.JudgementDate; // 確定日
            //scmAcOdrDataRow.InqOrdNote = scmHeader.InqOrdNote; // 問合せ・発注備考
            scmAcOdrDataRow.InqOrdNote = salesSlip.SlipNote; // 問合せ・発注備考 // 2011/05/25
            //scmAcOdrDataRow.AppendingFile = scmHeader.AppendingFile; // 添付ファイル
            //scmAcOdrDataRow.AppendingFileNm = scmHeader.AppendingFileNm; // 添付ファイル名
            //scmAcOdrDataRow.InqEmployeeCd = scmHeader.InqEmployeeCd; // 問合せ従業員コード
            //scmAcOdrDataRow.InqEmployeeNm = scmHeader.InqEmployeeNm; // 問合せ従業員名称
            scmAcOdrDataRow.AnsEmployeeCd = salesSlip.SalesEmployeeCd; // 回答従業員コード
            scmAcOdrDataRow.AnsEmployeeNm = salesSlip.SalesEmployeeNm; // 回答従業員名称
            if (scmAcOdrDataRow.InquiryDate == DateTime.MinValue) scmAcOdrDataRow.InquiryDate = salesSlip.SalesDate; // 問合せ日
            scmAcOdrDataRow.AcptAnOdrStatus = salesSlip.AcptAnOdrStatus; // 受注ステータス
            scmAcOdrDataRow.SalesSlipNum = salesSlip.SalesSlipNum; // 売上伝票番号
            scmAcOdrDataRow.SalesTotalTaxInc = salesSlip.SalesTotalTaxInc; // 売上伝票合計（税込み）
            scmAcOdrDataRow.SalesSubtotalTax = salesSlip.SalesSubtotalTax; // 売上小計（税）
            int InqOrdDivCd = ((salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.Sales) || (salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.AcceptAnOrder)) ? 1 : 2;
            scmAcOdrDataRow.InqOrdDivCd = InqOrdDivCd; // 問合せ・発注種別
            scmAcOdrDataRow.InqOrdAnsDivCd = 2; // 問発・回答種別(2:回答)
            //scmAcOdrDataRow.ReceiveDateTime = scmHeader.ReceiveDateTime; // 受信日時
            //scmAcOdrDataRow.AnswerCreateDiv = scmHeader.AnswerCreateDiv; // 回答作成区分
            //>>>2011/05/25
            scmAcOdrDataRow.SfPmCprtInstSlipNo = salesSlip.PartySaleSlipNum;
            //<<<2011/05/25
            #endregion
        }

        /// <summary>
        /// SCM受注データワークオブジェクトをSCM受注データ行オブジェクトより取得します。
        /// </summary>
        /// <param name="scmAcOdrDataRow"></param>
        /// <returns></returns>
        private SCMAcOdrDataWork GetParamDataFromSCMAcOdrDataRow(ScmDataSet.SCMAcOdrDataRow scmAcOdrDataRow)
        {
            SCMAcOdrDataWork scmAcOdrDataWork = new SCMAcOdrDataWork();

            #region 項目セット
            scmAcOdrDataWork.CreateDateTime = scmAcOdrDataRow.CreateDateTime; // 作成日時
            scmAcOdrDataWork.UpdateDateTime = scmAcOdrDataRow.UpdateDateTime; // 更新日時
            scmAcOdrDataWork.EnterpriseCode = this._enterpriseCode; // 企業コード
            scmAcOdrDataWork.FileHeaderGuid = scmAcOdrDataRow.FileHeaderGuid; // GUID
            scmAcOdrDataWork.UpdEmployeeCode = scmAcOdrDataRow.UpdEmployeeCode; // 更新従業員コード
            scmAcOdrDataWork.UpdAssemblyId1 = scmAcOdrDataRow.UpdAssemblyId1; // 更新アセンブリID1
            scmAcOdrDataWork.UpdAssemblyId2 = scmAcOdrDataRow.UpdAssemblyId2; // 更新アセンブリID2
            scmAcOdrDataWork.LogicalDeleteCode = scmAcOdrDataRow.LogicalDeleteCode; // 論理削除区分
            scmAcOdrDataWork.InqOriginalEpCd = scmAcOdrDataRow.InqOriginalEpCd.Trim(); // 問合せ元企業コード//@@@@20230303
            scmAcOdrDataWork.InqOriginalSecCd = scmAcOdrDataRow.InqOriginalSecCd; // 問合せ元拠点コード
            scmAcOdrDataWork.InqOtherEpCd = scmAcOdrDataRow.InqOtherEpCd; // 問合せ先企業コード
            scmAcOdrDataWork.InqOtherSecCd = scmAcOdrDataRow.InqOtherSecCd; // 問合せ先拠点コード
            scmAcOdrDataWork.InquiryNumber = scmAcOdrDataRow.InquiryNumber; // 問合せ番号
            scmAcOdrDataWork.CustomerCode = scmAcOdrDataRow.CustomerCode; // 得意先コード
            scmAcOdrDataWork.UpdateDate = scmAcOdrDataRow.UpdateDate; // 更新年月日
            scmAcOdrDataWork.UpdateTime = scmAcOdrDataRow.UpdateTime; // 更新時間
            scmAcOdrDataWork.AnswerDivCd = scmAcOdrDataRow.AnswerDivCd; // 回答区分
            scmAcOdrDataWork.JudgementDate = scmAcOdrDataRow.JudgementDate; // 確定日
            scmAcOdrDataWork.InqOrdNote = scmAcOdrDataRow.InqOrdNote; // 問合せ・発注備考
            scmAcOdrDataWork.AppendingFile = scmAcOdrDataRow.AppendingFile; // 添付ファイル
            scmAcOdrDataWork.AppendingFileNm = scmAcOdrDataRow.AppendingFileNm; // 添付ファイル名
            scmAcOdrDataWork.InqEmployeeCd = scmAcOdrDataRow.InqEmployeeCd; // 問合せ従業員コード
            scmAcOdrDataWork.InqEmployeeNm = scmAcOdrDataRow.InqEmployeeNm; // 問合せ従業員名称
            scmAcOdrDataWork.AnsEmployeeCd = scmAcOdrDataRow.AnsEmployeeCd; // 回答従業員コード
            scmAcOdrDataWork.AnsEmployeeNm = scmAcOdrDataRow.AnsEmployeeNm; // 回答従業員名称
            scmAcOdrDataWork.InquiryDate = scmAcOdrDataRow.InquiryDate; // 問合せ日
            scmAcOdrDataWork.AcptAnOdrStatus = scmAcOdrDataRow.AcptAnOdrStatus; // 受注ステータス
            scmAcOdrDataWork.SalesSlipNum = scmAcOdrDataRow.SalesSlipNum; // 売上伝票番号
            scmAcOdrDataWork.SalesTotalTaxInc = scmAcOdrDataRow.SalesTotalTaxInc; // 売上伝票合計（税込み）
            scmAcOdrDataWork.SalesSubtotalTax = scmAcOdrDataRow.SalesSubtotalTax; // 売上小計（税）
            scmAcOdrDataWork.InqOrdDivCd = scmAcOdrDataRow.InqOrdDivCd; // 問合せ・発注種別
            scmAcOdrDataWork.InqOrdAnsDivCd = scmAcOdrDataRow.InqOrdAnsDivCd; // 問発・回答種別
            scmAcOdrDataWork.ReceiveDateTime = scmAcOdrDataRow.ReceiveDateTime; // 受信日時
            scmAcOdrDataWork.AnswerCreateDiv = scmAcOdrDataRow.AnswerCreateDiv; // 回答作成区分
            //>>>2010/06/30
            scmAcOdrDataWork.CancelDiv = scmAcOdrDataRow.CancelDiv; // キャンセル区分
            scmAcOdrDataWork.CMTCooprtDiv = scmAcOdrDataRow.CMTCooprtDiv; // CMT連携区分
            //<<<2010/06/30
            //>>>2011/05/25
            scmAcOdrDataWork.SfPmCprtInstSlipNo = scmAcOdrDataRow.SfPmCprtInstSlipNo; // SF-PM連携指示書番号
            //<<<2011/05/25
            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 --------->>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDataWork.TabUseDiv = scmAcOdrDataRow.TabUseDiv;  // タブレット使用区分
            // --- ADD 2013/05/24 三戸 2013/06/18配信分 SCM障害№10536 ---------<<<<<<<<<<<<<<<<<<<<<<<<
            // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
            scmAcOdrDataWork.CarMngCode = scmAcOdrDataRow.CarMngCode; // 車両管理コード
            // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
            scmAcOdrDataWork.AutoAnsMthd = scmAcOdrDataRow.AutoAnsMthd; // 自動回答方式
            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
            #endregion

            return scmAcOdrDataWork;
        }

        //>>>2010/03/30
        /// <summary>
        /// SCM情報読込処理
        /// </summary>
        /// <param name="inquiryNumber"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="inqOriginalEpCd"></param>
        /// <param name="inqOriginalSecCd"></param>
        /// <param name="inqOrdDivCd"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <returns></returns>
        // 2011/02/18 >>>
        //public int SCMReadDBData(long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, int answerDivCd, out SalesSlip salesSlip, out List<SalesDetail> salesDetailList)
        public int SCMReadDBData(long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, short cancelDiv, out SalesSlip salesSlip, out List<SalesDetail> salesDetailList)
        // 2011/02/18 <<<
        {
            UserSCMOrderHeaderRecord scmHeader;
            UserSCMOrderCarRecord scmCar;
            List<UserSCMOrderDetailRecord> scmDetailList;
            List<UserSCMOrderAnswerRecord> scmAnswerList;

            //>>>2011/02/01
            //return this.SCMReadDBData(inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, answerDivCd, out salesSlip, out salesDetailList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
            List<UserSCMOrderDetailRecord> scmDetailListNew = new List<UserSCMOrderDetailRecord>();
            IList<ISCMOrderHeaderRecord> scmHeaderIList = new List<ISCMOrderHeaderRecord>();
            IList<ISCMOrderCarRecord> scmCarIList = new List<ISCMOrderCarRecord>();
            IList<ISCMOrderDetailRecord> scmDetailIList = new List<ISCMOrderDetailRecord>();
            IList<ISCMOrderDetailRecord> scmDetailIAllList = new List<ISCMOrderDetailRecord>();
            IList<ISCMOrderAnswerRecord> scmAnswerIList = new List<ISCMOrderAnswerRecord>();

            // 2011/02/18 >>>
            //int svAnswerDivCd;

            //this.SCMReadDBDataPProc(inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, answerDivCd, out scmHeaderIList, out scmCarIList, out scmDetailIList, out scmDetailIAllList, out scmAnswerIList, out scmDetailListNew, out svAnswerDivCd);

            //return this.SCMReadDBData(inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, answerDivCd, scmDetailListNew, scmHeaderIList, scmCarIList, scmDetailIList, scmDetailIAllList, scmAnswerIList, svAnswerDivCd, out salesSlip, out salesDetailList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);

            short svCancelDiv;

            this.SCMReadDBDataPProc(inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd.Trim(), inqOriginalSecCd, inqOrdDivCd, cancelDiv, out scmHeaderIList, out scmCarIList, out scmDetailIList, out scmDetailIAllList, out scmAnswerIList, out scmDetailListNew, out svCancelDiv);//@@@@20230303

            return this.SCMReadDBData(inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd.Trim(), inqOriginalSecCd, inqOrdDivCd, cancelDiv, scmDetailListNew, scmHeaderIList, scmCarIList, scmDetailIList, scmDetailIAllList, scmAnswerIList, svCancelDiv, out salesSlip, out salesDetailList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);//@@@@20230303
            // 2011/02/18 <<<
            //<<<2011/02/01
        }
        //<<<2010/03/30

        //>>>2011/02/01
        /// <summary>
        /// SCM情報読込処理
        /// </summary>
        /// <param name="inquiryNumber"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="inqOriginalEpCd"></param>
        /// <param name="inqOriginalSecCd"></param>
        /// <param name="inqOrdDivCd"></param>
        /// <param name="answerDivCd"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="scmHeader"></param>
        /// <param name="scmCar"></param>
        /// <param name="scmDetailList"></param>
        /// <param name="scmAnswerList"></param>
        /// <returns></returns>
        // 2011/02/18 >>>
        //public int SCMReadDBData(long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, int answerDivCd, out SalesSlip salesSlip, out List<SalesDetail> salesDetailList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList)
        public int SCMReadDBData(long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, short cancelDiv, out SalesSlip salesSlip, out List<SalesDetail> salesDetailList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList)
        // 2011/02/18 <<<
        {
            List<UserSCMOrderDetailRecord> scmDetailListNew = new List<UserSCMOrderDetailRecord>();
            IList<ISCMOrderHeaderRecord> scmHeaderIList = new List<ISCMOrderHeaderRecord>();
            IList<ISCMOrderCarRecord> scmCarIList = new List<ISCMOrderCarRecord>();
            IList<ISCMOrderDetailRecord> scmDetailIList = new List<ISCMOrderDetailRecord>();
            IList<ISCMOrderDetailRecord> scmDetailIAllList = new List<ISCMOrderDetailRecord>();
            IList<ISCMOrderAnswerRecord> scmAnswerIList = new List<ISCMOrderAnswerRecord>();
            // 2011/02/18 >>>
            //int svAnswerDivCd;
            short svCancelDiv;
            // 2011/02/18 <<<

            // 2011/02/18 >>>
            //this.SCMReadDBDataPProc(inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, answerDivCd, out scmHeaderIList, out scmCarIList, out scmDetailIList, out scmDetailIAllList, out scmAnswerIList, out scmDetailListNew, out svAnswerDivCd);

            //return this.SCMReadDBData(inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, answerDivCd, scmDetailListNew, scmHeaderIList, scmCarIList, scmDetailIList, scmDetailIAllList, scmAnswerIList, svAnswerDivCd, out salesSlip, out salesDetailList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);

            this.SCMReadDBDataPProc(inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd.Trim(), inqOriginalSecCd, inqOrdDivCd, cancelDiv, out scmHeaderIList, out scmCarIList, out scmDetailIList, out scmDetailIAllList, out scmAnswerIList, out scmDetailListNew, out svCancelDiv);//@@@@20230303

            return this.SCMReadDBData(inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd.Trim(), inqOriginalSecCd, inqOrdDivCd, cancelDiv, scmDetailListNew, scmHeaderIList, scmCarIList, scmDetailIList, scmDetailIAllList, scmAnswerIList, svCancelDiv, out salesSlip, out salesDetailList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);//@@@@20230303
            // 2011/02/18 <<<
        }
        //<<2011/02/01

        /// <summary>
        /// SCM情報読込処理
        /// </summary>
        /// <param name="inquiryNumber"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="inqOriginalEpCd"></param>
        /// <param name="inqOriginalSecCd"></param>
        /// <param name="inqOrdDivCd"></param>
        /// <param name="answerDivCd"></param>
        /// <param name="scmDetailListNew"></param>
        /// <param name="scmHeaderIList"></param>
        /// <param name="scmCarIList"></param>
        /// <param name="scmDetailIList"></param>
        /// <param name="scmDetailIAllList"></param>
        /// <param name="scmAnswerIList"></param>
        /// <param name="svAnswerDivCd"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="scmHeader"></param>
        /// <param name="scmCar"></param>
        /// <param name="scmDetailList"></param>
        /// <param name="scmAnswerList"></param>
        /// <returns></returns>
        // 2011/02/18 >>>
        ////public int SCMReadDBData(long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, out SalesSlip salesSlip, out List<SalesDetail> salesDetailList) // 2010/03/30
        ////public int SCMReadDBData(long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, int answerDivCd, out SalesSlip salesSlip, out List<SalesDetail> salesDetailList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList) // 2010/03/30 // 2011/02/01
        //public int SCMReadDBData(long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, int answerDivCd, List<UserSCMOrderDetailRecord> scmDetailListNew, IList<ISCMOrderHeaderRecord> scmHeaderIList, IList<ISCMOrderCarRecord> scmCarIList, IList<ISCMOrderDetailRecord> scmDetailIList, IList<ISCMOrderDetailRecord> scmDetailIAllList, IList<ISCMOrderAnswerRecord> scmAnswerIList, int svAnswerDivCd, out SalesSlip salesSlip, out List<SalesDetail> salesDetailList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList) // 2011/02/01

        public int SCMReadDBData(long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, short cancelDiv, List<UserSCMOrderDetailRecord> scmDetailListNew, IList<ISCMOrderHeaderRecord> scmHeaderIList, IList<ISCMOrderCarRecord> scmCarIList, IList<ISCMOrderDetailRecord> scmDetailIList, IList<ISCMOrderDetailRecord> scmDetailIAllList, IList<ISCMOrderAnswerRecord> scmAnswerIList, short svCancelDiv, out SalesSlip salesSlip, out List<SalesDetail> salesDetailList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList) // 2011/02/01
        // 2011/02/18 <<<
        {
            //>>>2011/02/01
            #region 削除
            ////-----------------------------------------------------------------------------
            //// 初期処理
            ////-----------------------------------------------------------------------------
            //salesSlip = new SalesSlip();
            //salesDetailList = new List<SalesDetail>();
            ////UserSCMOrderHeaderRecord scmHeader; // 2010/03/30
            ////UserSCMOrderCarRecord scmCar; // 2010/03/30
            //List<UserSCMOrderHeaderRecord> scmHeaderList = new List<UserSCMOrderHeaderRecord>();
            //List<UserSCMOrderHeaderRecord> scmHeaderCancelList = new List<UserSCMOrderHeaderRecord>(); // 2010/03/30
            //List<UserSCMOrderCarRecord> scmCarList = new List<UserSCMOrderCarRecord>();
            ////List<UserSCMOrderDetailRecord> scmDetailList; // 2010/03/30
            //List<UserSCMOrderDetailRecord> scmDetailListNew = new List<UserSCMOrderDetailRecord>();
            ////List<UserSCMOrderAnswerRecord> scmAnswerList; // 2010/03/30
            //IList<ISCMOrderHeaderRecord> scmHeaderIList = new List<ISCMOrderHeaderRecord>();
            //IList<ISCMOrderCarRecord> scmCarIList = new List<ISCMOrderCarRecord>();
            //IList<ISCMOrderDetailRecord> scmDetailIList = new List<ISCMOrderDetailRecord>();
            //IList<ISCMOrderDetailRecord> scmDetailIAllList = new List<ISCMOrderDetailRecord>(); // 2010/03/30
            //IList<ISCMOrderAnswerRecord> scmAnswerIList = new List<ISCMOrderAnswerRecord>();
            //List<AcceptOdrCar> acceptOdrCarList;
            //SCMRespondent scmRespondent;
            //CustomSerializeArrayList salesData;
            //bool acptFlg = false;

            //UserSCMOrderHeaderRecord sscmHeader;
            //UserSCMOrderCarRecord sscmCar;
            //List<UserSCMOrderDetailRecord> sscmDetailList;
            //List<UserSCMOrderAnswerRecord> sscmAnswerList;

            ////>>>2011/02/01 一部回答判定対応
            //UserSCMOrderHeaderRecord oscmHeader;
            //UserSCMOrderCarRecord oscmCar;
            //List<UserSCMOrderDetailRecord> oscmDetailList;
            //List<UserSCMOrderAnswerRecord> oscmAnswerList = new List<UserSCMOrderAnswerRecord>();
            ////<<<2011/02/01 一部回答判定対応

            ////>>>2011/02/01 一部回答判定対応
            ////-----------------------------------------------------------------------------
            //// 問合せ情報取得(発注情報取得時のみ)
            ////-----------------------------------------------------------------------------
            //if (inqOrdDivCd == 2)
            //{
            //    int ordStatus = this.SCMReadDBDataProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, 1, 0, out oscmHeader, out oscmCar, out oscmDetailList, out oscmAnswerList);
            //}
            ////<<<2011/02/01 一部回答判定対応
            
            ////-----------------------------------------------------------------------------
            //// 読込処理
            ////-----------------------------------------------------------------------------
            ////int status = this.SCMReadDBDataProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList); // 2010/03/30
            //int status = this.SCMReadDBDataProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, answerDivCd, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList); // 2010/03/30

            //int svAnswerDivCd = scmHeader.AnswerDivCd; // 2010/03/30

            ////>>>2010/04/20
            ////-----------------------------------------------------------------------------
            //// キャンセルデータ読込
            ////-----------------------------------------------------------------------------
            //if (scmHeader != null)
            //{
            //    this.ScmAcOdrDataSearchProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, scmHeader.InquiryNumber, scmHeader.InqOriginalEpCd, scmHeader.InqOriginalSecCd, scmHeader.InqOtherEpCd, scmHeader.InqOtherSecCd, 99, out scmHeaderCancelList);
            //}
            ////<<<2010/04/20

            ////-----------------------------------------------------------------------------
            //// 回答処理実装
            ////-----------------------------------------------------------------------------
            //scmHeader.AnswerCreateDiv = 2; // 2010/06/30
            //scmHeaderIList.Add(scmHeader);
            //scmCarIList.Add(scmCar);
            //foreach (UserSCMOrderDetailRecord rec in scmDetailList)
            //{
            //    scmDetailIAllList.Add(rec); // 2010/03/30
            //    //>>>2010/03/30
            //    //if (scmHeader.InqOrdDivCd != rec.InqOrdDivCd) continue;
            //    //if ((scmHeader.UpdateDate != rec.UpdateDate) || (scmHeader.UpdateTime != rec.UpdateTime)) continue;
            //    ////if (this.ExistAnswered(rec, scmAnswerList)) continue;
            //    //>>> 2010/06/16
            //    //                if (svAnswerDivCd != 99)
            //    //               {
            //    //                    // 通常
            //    //                    if (scmHeader.InqOrdDivCd != rec.InqOrdDivCd) continue;
            //    //                    if ((scmHeader.UpdateDate != rec.UpdateDate) || (scmHeader.UpdateTime != rec.UpdateTime)) continue;
            //    //                }
            //    //                else
            //    //                {
            //    //                   // キャンセル
            //    //                    if (!this.ExistCancel(rec, scmAnswerList, scmHeaderCancelList)) continue;
            //    //                }
            //    //
            //    if (svAnswerDivCd != 99)
            //    {
            //        // 通常
            //        if (scmHeader.InqOrdDivCd != rec.InqOrdDivCd) continue;
            //        if (rec.CancelCndtinDiv == 20) { /*全対象*/}
            //        if (rec.CancelCndtinDiv == 30) continue;
            //        //>>>2011/02/01 再問合せ対応
            //        //if (this.ExistAnswered(rec, scmAnswerList)) continue; //回答にあれば対象外
            //        if ((rec.InqOrdDivCd == 2) && (this.ExistAnswered(rec, scmAnswerList))) continue; //回答にあれば対象外
            //        //<<<2011/02/01 再問合せ対応
            //    }
            //    else
            //    {
            //        // キャンセル
            //        if (!this.ExistCancel(rec, scmAnswerList, scmHeaderCancelList)) continue;
            //    }
            //    //<<< 2010/06/16

            //    //<<<2010/03/30
            //    scmDetailIList.Add(rec);
            //    scmDetailListNew.Add(rec);
            //}
            //foreach (UserSCMOrderAnswerRecord rec in scmAnswerList) scmAnswerIList.Add(rec);
            //if (scmHeader.CancelDiv == 0)           //2010/06/16
            //{                                       //2010/06/16

            //    //>>>2010/02/26
            //    // 最新のヘッダ情報に対応する問合せ明細が存在しない場合、
            //    // 一部回答の未回答分データが存在する可能性がある為、対象データを問合せのみとし再読み込み

            //    //if ((scmDetailIList.Count == 0) || (scmDetailIList == null)) // 2010/03/30
            //    if ((svAnswerDivCd != 99) && ((scmDetailIList.Count == 0) || (scmDetailIList == null))) // 2010/03/30
            //    {
            //        scmHeaderIList = new List<ISCMOrderHeaderRecord>();
            //        scmCarIList = new List<ISCMOrderCarRecord>();
            //        scmDetailIList = new List<ISCMOrderDetailRecord>();
            //        scmAnswerIList = new List<ISCMOrderAnswerRecord>();
            //        scmDetailListNew = new List<UserSCMOrderDetailRecord>();

            //        //-----------------------------------------------------------------------------
            //        // 読込処理
            //        //-----------------------------------------------------------------------------
            //        // InqOrdAnsDivCd　1：問合せ・発注
            //        status = this.SCMReadDBDataProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, 0, 1, out sscmHeader, out sscmCar, out sscmDetailList, out sscmAnswerList);

            //        //>>>2010/04/20
            //        //-----------------------------------------------------------------------------
            //        // キャンセルデータ読込
            //        //-----------------------------------------------------------------------------
            //        if (sscmHeader != null)
            //        {
            //            this.ScmAcOdrDataSearchProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, sscmHeader.InquiryNumber, sscmHeader.InqOriginalEpCd, sscmHeader.InqOriginalSecCd, sscmHeader.InqOtherEpCd, sscmHeader.InqOtherSecCd, 99, out scmHeaderCancelList);
            //        }
            //        //<<<2010/04/20

            //        //-----------------------------------------------------------------------------
            //        // 回答処理実装
            //        //-----------------------------------------------------------------------------
            //        sscmHeader.AnswerCreateDiv = 2; // 2010/06/30
            //        scmHeaderIList.Add(sscmHeader);
            //        scmCarIList.Add(sscmCar);
            //        foreach (UserSCMOrderDetailRecord rec in sscmDetailList)
            //        {
            //            scmDetailIAllList.Add(rec); // 2010/03/30
            //            if (rec.InqRowNumDerivedNo != 1) continue;
            //            if (sscmHeader.InqOrdDivCd != rec.InqOrdDivCd) continue;
            //            //if ((sscmHeader.UpdateDate != rec.UpdateDate) || (sscmHeader.UpdateTime != rec.UpdateTime)) continue;
            //            //>>>2011/02/01 再問合せ対応
            //            //if (this.ExistAnswered(rec, scmAnswerList)) continue;
            //            if ((rec.InqOrdDivCd == 2) && (this.ExistAnswered(rec, scmAnswerList))) continue;
            //            //<<<2011/02/01 再問合せ対応
            //            if (this.ExistCancel(rec, scmHeaderCancelList)) continue;
            //            scmDetailIList.Add(rec);
            //            scmDetailListNew.Add(rec);
            //        }
            //        foreach (UserSCMOrderAnswerRecord rec in scmAnswerList) scmAnswerIList.Add(rec);

            //    }
            //}               // 2010/06/16            


            ////<<<2010/02/26

            //GoodsCndtn searchingConditionManually = new GoodsCndtn();
            //{
            //    // 手動回答処理用の検索条件を設定
            //    searchingConditionManually.SearchUICntDivCd = this._salesSlipInputConstructionAcs.SearchUICntDivCdValue;    // 検索画面制御区分
            //    searchingConditionManually.EnterProcDivCd = this._salesSlipInputConstructionAcs.EnterProcDivCdValue;      // エンターキー処理区分
            //}

            ////>>>2011/02/01 一部回答判定対応
            //if ((oscmAnswerList != null) && (oscmAnswerList.Count != 0))
            //{
            //    scmAnswerIList.Clear();
            //    foreach (UserSCMOrderAnswerRecord rec in oscmAnswerList) scmAnswerIList.Add(rec);

            //    scmDetailIList.Clear();
            //    foreach (UserSCMOrderDetailRecord rec in scmDetailList) scmDetailIList.Add(rec);
            //}
            ////<<<2011/02/01 一部回答判定対応
            #endregion

            //-----------------------------------------------------------------------------
            // 初期処理
            //-----------------------------------------------------------------------------
            salesSlip = new SalesSlip();
            salesDetailList = new List<SalesDetail>();
            List<UserSCMOrderHeaderRecord> scmHeaderList = new List<UserSCMOrderHeaderRecord>();
            List<UserSCMOrderHeaderRecord> scmHeaderCancelList = new List<UserSCMOrderHeaderRecord>(); // 2010/03/30
            List<UserSCMOrderCarRecord> scmCarList = new List<UserSCMOrderCarRecord>();
            IList<ISCMOrderDetailRecord> tempScmDetailIList = new List<ISCMOrderDetailRecord>();

            List<AcceptOdrCar> acceptOdrCarList;
            SCMRespondent scmRespondent;
            CustomSerializeArrayList salesData;
            bool acptFlg = false;

            scmHeader = new UserSCMOrderHeaderRecord();
            scmCar = new UserSCMOrderCarRecord();
            scmDetailList = new List<UserSCMOrderDetailRecord>();
            scmAnswerList = new List<UserSCMOrderAnswerRecord>();

            int status = 0;
            //<<<2011/02/01

            //>>>2011/03/10
            #region 発注情報取得
            //-----------------------------------------------------------------------
            // SCM情報読込(発注情報&キャンセル情報)
            //-----------------------------------------------------------------------
            List<UserSCMOrderDetailRecord> oscmDetailListNew = new List<UserSCMOrderDetailRecord>();
            IList<ISCMOrderHeaderRecord> oscmHeaderIList = new List<ISCMOrderHeaderRecord>();
            IList<ISCMOrderCarRecord> oscmCarIList = new List<ISCMOrderCarRecord>();
            IList<ISCMOrderDetailRecord> oscmDetailIList = new List<ISCMOrderDetailRecord>();
            IList<ISCMOrderDetailRecord> oscmDetailIAllList = new List<ISCMOrderDetailRecord>();
            IList<ISCMOrderAnswerRecord> oscmAnswerIList = new List<ISCMOrderAnswerRecord>();
            short osvCancelDiv;
            if (scmHeaderIList[0].InqOrdDivCd == 1)
            {
                int st = this.SCMReadDBDataPProc(scmHeaderIList[0].InquiryNumber, 0, salesSlip.SalesSlipNum, scmHeaderIList[0].InqOriginalEpCd.Trim(), scmHeaderIList[0].InqOriginalSecCd, 2, scmHeaderIList[0].CancelDiv, out oscmHeaderIList, out oscmCarIList, out oscmDetailIList, out oscmDetailIAllList, out oscmAnswerIList, out oscmDetailListNew, out osvCancelDiv);//@@@@20230303

                if (st == 0)
                {
                    // 保存前対象明細判定チェックの為、退避
                    this.CacheDetailListForBeforeSave(oscmAnswerIList, oscmDetailIAllList, null);
                }
            }
            List<UserSCMOrderDetailRecord> ooscmDetailListNew = new List<UserSCMOrderDetailRecord>();
            IList<ISCMOrderHeaderRecord> ooscmHeaderIList = new List<ISCMOrderHeaderRecord>();
            IList<ISCMOrderCarRecord> ooscmCarIList = new List<ISCMOrderCarRecord>();
            IList<ISCMOrderDetailRecord> ooscmDetailIList = new List<ISCMOrderDetailRecord>();
            IList<ISCMOrderDetailRecord> ooscmDetailIAllList = new List<ISCMOrderDetailRecord>();
            IList<ISCMOrderAnswerRecord> ooscmAnswerIList = new List<ISCMOrderAnswerRecord>();
            short oosvCancelDiv;
            int ist = this.SCMReadDBDataPProc(scmHeaderIList[0].InquiryNumber, 0, salesSlip.SalesSlipNum, scmHeaderIList[0].InqOriginalEpCd.Trim(), scmHeaderIList[0].InqOriginalSecCd, 2, 1, out ooscmHeaderIList, out ooscmCarIList, out ooscmDetailIList, out ooscmDetailIAllList, out ooscmAnswerIList, out ooscmDetailListNew, out oosvCancelDiv);//@@@@20230303

            if (ist == 0)
            {
                this.CacheDetailListForBeforeSave(oscmAnswerIList, oscmDetailIAllList, ooscmAnswerIList);
            }
            #endregion
            //<<<2011/03/10

            GoodsCndtn searchingConditionManually = new GoodsCndtn();
            {
                // 手動回答処理用の検索条件を設定
                searchingConditionManually.SearchUICntDivCd = this._salesSlipInputConstructionAcs.SearchUICntDivCdValue;    // 検索画面制御区分
                searchingConditionManually.EnterProcDivCd = this._salesSlipInputConstructionAcs.EnterProcDivCdValue;      // エンターキー処理区分
            }

            //>>>2011/02/01
            foreach (ISCMOrderDetailRecord rec in scmDetailIList)
            {
                //>>>2011/02/01
                //if (rec.SalesSlipNum != salesSlipNum) continue;
                //<<<2011/02/01

                // 2011/02/18 >>>
                //if (svAnswerDivCd != 99)
                if (svCancelDiv != 1)
                // 2011/02/18 <<<
                {
                    if (salesSlipNum != ctDefaultSalesSlipNum)
                    {
                        if (rec.GoodsDivCd == 3) continue;
                        if (rec.SalesSlipNum != salesSlipNum) continue;
                        if (this.ExistAnsweredForRespondent(rec, scmAnswerIList)) continue; //回答にあれば対象外
                    }
                    else
                    {
                        if (rec.GoodsDivCd == 3)
                        {
                        }
                        else
                        {
                            if (rec.SalesSlipNum != ctDefaultSalesSlipNum) 
                            {
                                if ((inqOrdDivCd == 1) && (rec.AcptAnOdrStatus == (int)AcptAnOdrStatus.Estimate)) continue;
                                if ((inqOrdDivCd == 2) && ((rec.AcptAnOdrStatus == (int)AcptAnOdrStatus.Sales) || (rec.AcptAnOdrStatus == (int)AcptAnOdrStatus.Order))) continue;
                            }
                        }
                    }

                    
                }
                tempScmDetailIList.Add(rec);
            }
            //<<<2011/02/01

            //>>>2011/02/01
            // Webサーバー更新チェックの為、退避
            this.CacheHeaderAndDetailList(scmHeaderIList, tempScmDetailIList);
            //<<<2011/02/01
            // ADD 2013/11/07 吉岡 VSS[019] システムテスト障害№10 №10328関連 --------------->>>>>>>>>>>>>>>>>>>
            IntPtr handle;
            try
            {
                // メインウインドウ(delphiの画面　MAHNB01001U.exe)のハンドルを取得
                handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            }
            catch
            {
            }
            IWin32WindowWrapper wrp;
            if (handle != null)
            {
                // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
                wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            }
            // ADD 2013/11/07 吉岡 VSS[019] システムテスト障害№10 №10328関連  ---------------<<<<<<<<<<<<<<<<<<<

            // UPD 2013/11/07 吉岡 VSS[019] システムテスト障害№10 №10328関連  --------------->>>>>>>>>>>>>>>>>>>
            #region 旧ソース
            //scmRespondent = AutoFacade.CreateSCMRespondent(AutoFacade.RunningMode.Manual,
            //    scmHeaderIList,
            //    scmCarIList,
            //    //scmDetailIList, // 2011/02/01
            //    tempScmDetailIList, //2011/02/01
            //    scmAnswerIList, // 2010/03/30
            //    scmDetailIAllList, // 2010/03/30
            //    new SCMManualConfig(
            //        //this._owner,                // フォームのインスタンス
            //        // --- UPD 2013/05/08 三戸 2013/06/18配信分 SCM障害№10328 --------->>>>>>>>>>>>>>>>>>>>>>>>
            //        //new Form(),                // フォームのインスタンス
            //            this._owner,                // フォームのインスタンス  
            //        // --- UPD 2013/05/08 三戸 2013/06/18配信分 SCM障害№10328 ---------<<<<<<<<<<<<<<<<<<<<<<<<
            //        searchingConditionManually  // 手動回答処理用の検索条件
            //    ));
            #endregion
            // メインウィンドウのハンドルが取得できない場合（通常有り得ない）は、既存処理で実施
            if (handle == null)
            {
            scmRespondent = AutoFacade.CreateSCMRespondent(AutoFacade.RunningMode.Manual,
                scmHeaderIList,
                scmCarIList,
                tempScmDetailIList, //2011/02/01
                scmAnswerIList, // 2010/03/30
                scmDetailIAllList, // 2010/03/30
                new SCMManualConfig(
                        this._owner,                // フォームのインスタンス  
                    searchingConditionManually  // 手動回答処理用の検索条件
                ));
            }
            else
            {
                scmRespondent = AutoFacade.CreateSCMRespondent(AutoFacade.RunningMode.Manual,
                    scmHeaderIList,
                    scmCarIList,
                    tempScmDetailIList,
                    scmAnswerIList,
                    scmDetailIAllList,
                    new SCMManualConfig(
                            wrp,                // フォームのインスタンス  
                        searchingConditionManually  // 手動回答処理用の検索条件
                    ));
            }
            // UPD 2013/11/07 吉岡 VSS[019] システムテスト障害№10 №10328関連  ---------------<<<<<<<<<<<<<<<<<<<

            //-----------------------------------------------------------------------------
            // 各種検索
            //-----------------------------------------------------------------------------
            // UPD 2013/03/28 湯上 SCM障害№192対応 ----------------------------------->>>>>
            #region 旧ソース
            //foreach (UserSCMOrderDetailRecord scmDetail in scmDetailListNew)
            //{
            //    scmRespondent.Search(scmDetail);
            //    this.RefreshMainDisplayEventCall();
            //}
            #endregion
            int cnt = 0;
            _inputOverCountFlag = false;
            foreach (UserSCMOrderDetailRecord scmDetail in scmDetailListNew)
            {
                scmRespondent.Search(scmDetail);

                cnt++;
                // --- UPD 2013/06/10 三戸 2013/06/18配信分 システムテスト障害№33 --------->>>>>>>>>>>>>>>>>>>>>>>>
                //if (cnt >= _salesSlipInputConstructionAcs.DataInputCountValue)
                if (cnt > _salesSlipInputConstructionAcs.DataInputCountValue)
                // --- UPD 2013/06/10 三戸 2013/06/18配信分 システムテスト障害№33 ---------<<<<<<<<<<<<<<<<<<<<<<<<
                {
                    _inputOverCountFlag = true;
                    break;
                }
            }
            // UPD 2013/03/28 湯上 SCM障害№192対応 -----------------------------------<<<<<

            //-----------------------------------------------------------------------------
            // 売上データ取得
            //-----------------------------------------------------------------------------
            salesData = scmRespondent.CreateSalesData();

            if (salesData.Count.Equals(0)) return (int)ConstantManagement.DB_Status.ctDB_ERROR;

            //-----------------------------------------------------------------------------
            // 売上データ補正
            //-----------------------------------------------------------------------------
            // 2011/02/18 >>>
            //this.ReviseSalesData(salesData, out salesSlip, out salesDetailList, out acceptOdrCarList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList, svAnswerDivCd);
            this.ReviseSalesData(salesData, out salesSlip, out salesDetailList, out acceptOdrCarList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList, svCancelDiv);
            // 2011/02/18 <<<

            // 2011/02/18 Del >>>
            ////>>>2010/03/30
            //// キャンセルの場合、回答区分補正
            //if (svAnswerDivCd == 99) scmHeader.AnswerDivCd = svAnswerDivCd;
            ////<<<2010/03/30
            // 2011/02/18 Del <<<

            //-----------------------------------------------------------------------------
            // キャッシュ
            //-----------------------------------------------------------------------------
            this.Cache(salesSlip, salesSlip, salesDetailList, null, null, null, null, null, null, null, acceptOdrCarList, null, scmHeader, scmCar, scmDetailList, scmAnswerList);

            //-----------------------------------------------------------------------------
            // 補正
            //-----------------------------------------------------------------------------
            if (salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.AcceptAnOrder) salesSlip.AcptAnOdrStatus = (int)AcptAnOdrStatusState.Sales;
            this.ReviseSalesDetail(scmAnswerList, acptFlg);

            //-----------------------------------------------------------------------------
            // 受注データキャッシュ
            //-----------------------------------------------------------------------------
            if (acptFlg)
            {
                this.CacheAcptAnOdrSlip(salesSlip);
                this.CacheAcptAnOdrDetail(salesDetailList);
            }

            //>>>2011/02/01 一部回答判定対応
            //-----------------------------------------------------------------------------
            // SCM受注明細データ(回答)退避用テーブルキャッシュ
            //-----------------------------------------------------------------------------
            this.CacheSCMAcOdrDtlAsDataTableSave();
            //<<<2011/02/01 一部回答判定対応

            return status;
        }
        // ADD 2013/11/07 吉岡 VSS[019] システムテスト障害№10 №10328関連  --------------->>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// IWin32Windowクラスのラッパークラス
        /// メインウインドウ(delphiの画面　MAHNB01001U.exe)のハンドルを設定するために作成
        /// 使用箇所はSCMReadDBDataメソッドのみ
        /// </summary>
        private class IWin32WindowWrapper : System.Windows.Forms.IWin32Window
        {
            private IntPtr _handle;
            public IntPtr Handle
            {
                get { return _handle; }
            }

            public IWin32WindowWrapper(IntPtr handle)
            {
                _handle = handle;
            }
        }
        // ADD 2013/11/07 吉岡 VSS[019] システムテスト障害№10 №10328関連  ---------------<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// SCM情報読込処理
        /// </summary>
        /// <param name="inquiryNumber"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="inqOriginalEpCd"></param>
        /// <param name="inqOriginalSecCd"></param>
        /// <param name="inqOrdDivCd"></param>
        /// <param name="answerDivCd"></param>
        /// <param name="scmHeaderIList"></param>
        /// <param name="scmCarIList"></param>
        /// <param name="scmDetailIList"></param>
        /// <param name="scmDetailIAllList"></param>
        /// <param name="scmAnswerIList"></param>
        /// <param name="scmDetailListNew"></param>
        /// <param name="svAnswerDivCd"></param>
        /// <returns></returns>
        // 2011/02/18 >>>
        //public int SCMReadDBDataPProc(long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, int answerDivCd, out IList<ISCMOrderHeaderRecord> scmHeaderIList, out IList<ISCMOrderCarRecord> scmCarIList, out IList<ISCMOrderDetailRecord> scmDetailIList, out IList<ISCMOrderDetailRecord> scmDetailIAllList, out IList<ISCMOrderAnswerRecord> scmAnswerIList, out List<UserSCMOrderDetailRecord> scmDetailListNew, out int svAnswerDivCd)
        public int SCMReadDBDataPProc(long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, short cancelDiv, out IList<ISCMOrderHeaderRecord> scmHeaderIList, out IList<ISCMOrderCarRecord> scmCarIList, out IList<ISCMOrderDetailRecord> scmDetailIList, out IList<ISCMOrderDetailRecord> scmDetailIAllList, out IList<ISCMOrderAnswerRecord> scmAnswerIList, out List<UserSCMOrderDetailRecord> scmDetailListNew, out short svCancelDiv)
        // 2011/02/18 <<<
        {
            //-----------------------------------------------------------------------------
            // 初期処理
            //-----------------------------------------------------------------------------
            List<UserSCMOrderHeaderRecord> scmHeaderList = new List<UserSCMOrderHeaderRecord>();
            List<UserSCMOrderHeaderRecord> scmHeaderCancelList = new List<UserSCMOrderHeaderRecord>(); // 2010/03/30
            List<UserSCMOrderCarRecord> scmCarList = new List<UserSCMOrderCarRecord>();
            scmDetailListNew = new List<UserSCMOrderDetailRecord>();
            scmHeaderIList = new List<ISCMOrderHeaderRecord>();
            scmCarIList = new List<ISCMOrderCarRecord>();
            scmDetailIList = new List<ISCMOrderDetailRecord>();
            scmDetailIAllList = new List<ISCMOrderDetailRecord>(); // 2010/03/30
            scmAnswerIList = new List<ISCMOrderAnswerRecord>();

            //>>>2011/03/10
            List<UserSCMOrderDetailRecord> escmDetailListNew = new List<UserSCMOrderDetailRecord>();
            List<ISCMOrderHeaderRecord> escmHeaderIList = new List<ISCMOrderHeaderRecord>();
            List<ISCMOrderCarRecord> escmCarIList = new List<ISCMOrderCarRecord>();
            List<ISCMOrderDetailRecord> escmDetailIList = new List<ISCMOrderDetailRecord>();
            List<ISCMOrderDetailRecord> escmDetailIAllList = new List<ISCMOrderDetailRecord>();
            List<ISCMOrderAnswerRecord> escmAnswerIList = new List<ISCMOrderAnswerRecord>();
            //<<<2011/03/10

            UserSCMOrderHeaderRecord sscmHeader;
            UserSCMOrderCarRecord sscmCar;
            List<UserSCMOrderDetailRecord> sscmDetailList;
            List<UserSCMOrderAnswerRecord> sscmAnswerList;
            UserSCMOrderHeaderRecord scmHeader;
            UserSCMOrderCarRecord scmCar;
            List<UserSCMOrderDetailRecord> scmDetailList;
            List<UserSCMOrderAnswerRecord> scmAnswerList;

            //>>>2011/02/01 一部回答判定対応
            UserSCMOrderHeaderRecord oscmHeader;
            UserSCMOrderCarRecord oscmCar;
            List<UserSCMOrderDetailRecord> oscmDetailList;
            List<UserSCMOrderAnswerRecord> oscmAnswerList = new List<UserSCMOrderAnswerRecord>();
            //<<<2011/02/01 一部回答判定対応

            //>>>2011/02/01 一部回答判定対応
            //-----------------------------------------------------------------------------
            // 問合せ情報取得(発注情報取得時のみ)：計上元情報として使用
            //-----------------------------------------------------------------------------
            if (inqOrdDivCd == 2)
            {
                int ordStatus = this.SCMReadDBDataProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd.Trim(), inqOriginalSecCd, 1, 0, out oscmHeader, out oscmCar, out oscmDetailList, out oscmAnswerList);//@@@@20230303
            }
            //<<<2011/02/01 一部回答判定対応

            //-----------------------------------------------------------------------------
            // 読込処理
            //-----------------------------------------------------------------------------
            //int status = this.SCMReadDBDataProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList); // 2010/03/30
            // 2011/02/18 >>>
            //int status = this.SCMReadDBDataProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, answerDivCd, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList); // 2010/03/30
            int status = this.SCMReadDBDataProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd.Trim(), inqOriginalSecCd, inqOrdDivCd, cancelDiv, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList); // 2010/03/30//@@@@20230303
            // 2011/02/18 <<<
            // 2011/07/26 >>>
            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                svCancelDiv = 0;
                return status;
            }
            // 2011/07/26 <<<
            // 2011/02/18 >>>
            //svAnswerDivCd = scmHeader.AnswerDivCd; // 2010/03/30
            svCancelDiv = scmHeader.CancelDiv; // 2010/03/30
            // 2011/02/18 <<<

            //>>>2010/04/20
            //-----------------------------------------------------------------------------
            // キャンセルデータ読込
            //-----------------------------------------------------------------------------
            if (scmHeader != null)
            {
                // 2011/02/18 >>>
                //this.ScmAcOdrDataSearchProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, scmHeader.InquiryNumber, scmHeader.InqOriginalEpCd, scmHeader.InqOriginalSecCd, scmHeader.InqOtherEpCd, scmHeader.InqOtherSecCd, 99, out scmHeaderCancelList);
                this.ScmAcOdrDataSearchProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, scmHeader.InquiryNumber, scmHeader.InqOriginalEpCd.Trim(), scmHeader.InqOriginalSecCd, scmHeader.InqOtherEpCd, scmHeader.InqOtherSecCd, 1, out scmHeaderCancelList);//@@@@20230303
                // 2011/02/18 <<<
            }
            //<<<2010/04/20

            //-----------------------------------------------------------------------------
            // 回答処理実装
            //-----------------------------------------------------------------------------
            scmHeader.AnswerCreateDiv = 2; // 2010/06/30
            //>>>2011/03/10
            //scmHeaderIList.Add(scmHeader);
            //scmCarIList.Add(scmCar);
            escmHeaderIList.Add(scmHeader);
            escmCarIList.Add(scmCar);
            //<<<2011/03/10
            foreach (UserSCMOrderDetailRecord rec in scmDetailList)
            {
                //>>>2011/03/10
                //scmDetailIAllList.Add(rec); // 2010/03/30
                escmDetailIAllList.Add(rec);
                //<<<2011/03/10

                //>>>2010/03/30
                //if (scmHeader.InqOrdDivCd != rec.InqOrdDivCd) continue;
                //if ((scmHeader.UpdateDate != rec.UpdateDate) || (scmHeader.UpdateTime != rec.UpdateTime)) continue;
                ////if (this.ExistAnswered(rec, scmAnswerList)) continue;
                //>>> 2010/06/16
                //                if (svAnswerDivCd != 99)
                //               {
                //                    // 通常
                //                    if (scmHeader.InqOrdDivCd != rec.InqOrdDivCd) continue;
                //                    if ((scmHeader.UpdateDate != rec.UpdateDate) || (scmHeader.UpdateTime != rec.UpdateTime)) continue;
                //                }
                //                else
                //                {
                //                   // キャンセル
                //                    if (!this.ExistCancel(rec, scmAnswerList, scmHeaderCancelList)) continue;
                //                }
                //
                // 2011/02/18 >>>
                //if (svAnswerDivCd != 99)
                if (svCancelDiv != 1)
                // 2011/02/18 <<<
                {
                    // 通常
                    if (scmHeader.InqOrdDivCd != rec.InqOrdDivCd) continue;
                    if (rec.CancelCndtinDiv == 20) { /*全対象*/}
                    if (rec.CancelCndtinDiv == 30) continue;
                    //>>>2011/02/01
                    //if (this.ExistAnswered(rec, scmAnswerList)) continue; //回答にあれば対象外
                    if (salesSlipNum == ctDefaultSalesSlipNum)
                    {
                        if (this.ExistAnswered(rec, scmAnswerList)) continue; //回答にあれば対象外
                    }
                    //<<<2011/02/01
                }
                else
                {
                    // キャンセル
                    if (!this.ExistCancel(rec, scmAnswerList, scmHeaderCancelList)) continue;
                }
                //<<< 2010/06/16

                //<<<2010/03/30
                //>>>2011/03/10
                //scmDetailIList.Add(rec);
                //scmDetailListNew.Add(rec);
                escmDetailIList.Add(rec);
                escmDetailListNew.Add(rec);
                //<<<2011/03/10
            }
            //>>>2011/03/10
            //foreach (UserSCMOrderAnswerRecord rec in scmAnswerList) scmAnswerIList.Add(rec);
            foreach (UserSCMOrderAnswerRecord rec in scmAnswerList) escmAnswerIList.Add(rec);
            //<<<2011/03/10
            if (scmHeader.CancelDiv == 0)           //2010/06/16
            {                                       //2010/06/16

                //>>>2010/02/26
                // 最新のヘッダ情報に対応する問合せ明細が存在しない場合、
                // 一部回答の未回答分データが存在する可能性がある為、対象データを問合せのみとし再読み込み

                // 2011/02/18 >>>
                ////if ((scmDetailIList.Count == 0) || (scmDetailIList == null)) // 2010/03/30
                //if ((svAnswerDivCd != 99) && ((scmDetailIList.Count == 0) || (scmDetailIList == null))) // 2010/03/30
                //>>>2011/03/10
                //if ((svCancelDiv != 1) && ((scmDetailIList.Count == 0) || (scmDetailIList == null))) // 2010/03/30
                if ((svCancelDiv != 1) && ((escmDetailIList.Count == 0) || (escmDetailIList == null)))
                //<<<2011/03/10
                // 2011/02/18 <<<
                {
                    //>>>2011/03/10
                    //scmHeaderIList = new List<ISCMOrderHeaderRecord>();
                    //scmCarIList = new List<ISCMOrderCarRecord>();
                    //scmDetailIList = new List<ISCMOrderDetailRecord>();
                    //scmAnswerIList = new List<ISCMOrderAnswerRecord>();
                    //scmDetailListNew = new List<UserSCMOrderDetailRecord>();
                    escmHeaderIList = new List<ISCMOrderHeaderRecord>();
                    escmCarIList = new List<ISCMOrderCarRecord>();
                    escmDetailIList = new List<ISCMOrderDetailRecord>();
                    escmAnswerIList = new List<ISCMOrderAnswerRecord>();
                    escmDetailListNew = new List<UserSCMOrderDetailRecord>();
                    //<<<2011/03/10

                    //-----------------------------------------------------------------------------
                    // 読込処理
                    //-----------------------------------------------------------------------------
                    // InqOrdAnsDivCd　1：問合せ・発注
                    status = this.SCMReadDBDataProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd.Trim(), inqOriginalSecCd, 0, 1, out sscmHeader, out sscmCar, out sscmDetailList, out sscmAnswerList);//@@@@20230303

                    //>>>2010/04/20
                    //-----------------------------------------------------------------------------
                    // キャンセルデータ読込
                    //-----------------------------------------------------------------------------
                    if (sscmHeader != null)
                    {
                        // 2011/02/18 >>>
                        //this.ScmAcOdrDataSearchProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, sscmHeader.InquiryNumber, sscmHeader.InqOriginalEpCd, sscmHeader.InqOriginalSecCd, sscmHeader.InqOtherEpCd, sscmHeader.InqOtherSecCd, 99, out scmHeaderCancelList);
                        this.ScmAcOdrDataSearchProc(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, sscmHeader.InquiryNumber, sscmHeader.InqOriginalEpCd.Trim(), sscmHeader.InqOriginalSecCd, sscmHeader.InqOtherEpCd, sscmHeader.InqOtherSecCd, 1, out scmHeaderCancelList);//@@@@20230303
                        // 2011/02/18 <<<
                    }
                    //<<<2010/04/20

                    //-----------------------------------------------------------------------------
                    // 回答処理実装
                    //-----------------------------------------------------------------------------
                    sscmHeader.AnswerCreateDiv = 2; // 2010/06/30
                    //>>>2011/03/10
                    //scmHeaderIList.Add(sscmHeader);
                    //scmCarIList.Add(sscmCar);
                    escmHeaderIList.Add(sscmHeader);
                    escmCarIList.Add(sscmCar);
                    //<<<2011/03/10

                    foreach (UserSCMOrderDetailRecord rec in sscmDetailList)
                    {
                        //>>>2011/03/10
                        //scmDetailIAllList.Add(rec); // 2010/03/30
                        escmDetailIAllList.Add(rec);
                        //<<<2011/03/10
                        if (rec.InqRowNumDerivedNo != 1) continue;
                        if (sscmHeader.InqOrdDivCd != rec.InqOrdDivCd) continue;
                        //if ((sscmHeader.UpdateDate != rec.UpdateDate) || (sscmHeader.UpdateTime != rec.UpdateTime)) continue;
                        //>>>2011/02/01
                        if (salesSlipNum == ctDefaultSalesSlipNum)
                        {
                            if (this.ExistAnswered(rec, scmAnswerList)) continue;
                        }
                        //<<<2011/02/01
                        if (this.ExistCancel(rec, scmHeaderCancelList)) continue;
                        //>>>2011/03/10
                        //scmDetailIList.Add(rec);
                        //scmDetailListNew.Add(rec);
                        escmDetailIList.Add(rec);
                        escmDetailListNew.Add(rec);
                        //<<<2011/03/10
                    }
                    //>>>2011/03/10
                    //foreach (UserSCMOrderAnswerRecord rec in scmAnswerList) scmAnswerIList.Add(rec);
                    foreach (UserSCMOrderAnswerRecord rec in scmAnswerList) escmAnswerIList.Add(rec);
                    //<<<2011/03/10

                }
                //<<<2010/02/26
            } // 2010/06/16            

            //>>>2011/02/01 一部回答判定対応
            // 補正前SCM受注明細データ(問合せ)リストキャッシュ
            this.CacheSCMDetailListSaveBefore(scmDetailIList);

            if ((oscmAnswerList != null) && (oscmAnswerList.Count != 0) && (svCancelDiv != 1))
            {
                //>>>2011/03/10
                //scmAnswerIList.Clear();
                //foreach (UserSCMOrderAnswerRecord rec in oscmAnswerList) scmAnswerIList.Add(rec);

                //scmDetailIList.Clear();
                //foreach (UserSCMOrderDetailRecord rec in scmDetailList) scmDetailIList.Add(rec);

                escmAnswerIList.Clear();
                foreach (UserSCMOrderAnswerRecord rec in oscmAnswerList) escmAnswerIList.Add(rec);

                escmDetailIList.Clear();
                foreach (UserSCMOrderDetailRecord rec in scmDetailList) escmDetailIList.Add(rec);
                //<<<2011/03/10
            }
            //<<<2011/02/01 一部回答判定対応

            //>>>2011/03/10
            scmDetailListNew = new List<UserSCMOrderDetailRecord>(escmDetailListNew);
            scmHeaderIList = new List<ISCMOrderHeaderRecord>(escmHeaderIList);
            scmCarIList = new List<ISCMOrderCarRecord>(escmCarIList);
            scmDetailIList = new List<ISCMOrderDetailRecord>(escmDetailIList);
            scmDetailIAllList = new List<ISCMOrderDetailRecord>(escmDetailIAllList);
            scmAnswerIList = new List<ISCMOrderAnswerRecord>(escmAnswerIList);
            //<<<2011/03/10

            return status;

        }

        /// <summary>
        /// 回答済み判定
        /// </summary>
        /// <param name="rec"></param>
        /// <param name="scmAnswerList"></param>
        /// <returns></returns>
        private bool ExistAnswered(UserSCMOrderDetailRecord rec, List<UserSCMOrderAnswerRecord> scmAnswerList)
        {
            List<UserSCMOrderAnswerRecord> ansRecList = scmAnswerList.FindAll(
                delegate(UserSCMOrderAnswerRecord ansrec)
                {
                    // UPD 2013/01/07 T.Yoshioka 2012/03/13配信予定 SCM障害№10474   ----------------->>>>>>>>>>>>>>>>>>
                    # region 旧コード
                    ////>>>2011/02/01 再問合せ対応
                    ////if ((ansrec.InqRowNumber == rec.InqRowNumber) &&
                    ////    (ansrec.InqOrdDivCd == rec.InqOrdDivCd))
                    //if ((ansrec.InqRowNumber == rec.InqRowNumber) &&
                    //    (ansrec.InqOrdDivCd == rec.InqOrdDivCd) &&
                    //    (ansrec.UpdateDate.Ticks >= rec.UpdateDate.Ticks) &&
                    //    (ansrec.UpdateTime >= rec.UpdateTime))
                    ////<<<2011/02/01 再問合せ対応
                    # endregion
                    // UPD 2015/06/25 商品保証課Redmine#4149①対応 -------------------------------->>>>>
                    //if ((ansrec.InqRowNumber == rec.InqRowNumber) &&
                    //    (ansrec.InqOrdDivCd == rec.InqOrdDivCd) &&
                    //    ((ansrec.UpdateDate > rec.UpdateDate) ||
                    //     ((ansrec.UpdateDate == rec.UpdateDate) && (ansrec.UpdateTime >= rec.UpdateTime)))
                    //   )
                    if ((ansrec.InqRowNumber == rec.InqRowNumber) &&
                        (ansrec.InqRowNumDerivedNo == rec.InqRowNumDerivedNo) &&
                        (ansrec.InqOrdDivCd == rec.InqOrdDivCd) &&
                        ((ansrec.UpdateDate > rec.UpdateDate) ||
                         ((ansrec.UpdateDate == rec.UpdateDate) && (ansrec.UpdateTime >= rec.UpdateTime)))
                       )
                    // UPD 2015/06/25 商品保証課Redmine#4149①対応 --------------------------------<<<<<
                    // UPD 2013/01/07 T.Yoshioka 2012/03/13配信予定 SCM障害№10474   -----------------<<<<<<<<<<<<<<<<<<
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );

            if ((ansRecList != null) && (ansRecList.Count != 0))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        //>>>2011/02/01
        /// <summary>
        /// 回答済み判定
        /// </summary>
        /// <param name="rec"></param>
        /// <param name="scmAnswerList"></param>
        /// <returns></returns>
        private bool ExistAnsweredForRespondent(ISCMOrderDetailRecord rec, IList<ISCMOrderAnswerRecord> scmAnswerList)
        {
            List<ISCMOrderAnswerRecord> ansRecList = new List<ISCMOrderAnswerRecord>();

            foreach (ISCMOrderAnswerRecord ansRec in scmAnswerList)
            {
                // 2011/02/18 >>>
                //if ((ansRec.InqRowNumber == rec.InqRowNumber) &&
                //    (ansRec.InqOrdDivCd == rec.InqOrdDivCd))

                if (( ansRec.InqRowNumber == rec.InqRowNumber ) &&
                    ( ansRec.InqOrdDivCd == rec.InqOrdDivCd ) &&
                    ( ansRec.InqRowNumDerivedNo == rec.InqRowNumDerivedNo) &&
                    (( ansRec.UpdateDate > rec.UpdateDate ) || 
                     ( ( ansRec.UpdateDate == rec.UpdateDate ) && ( ansRec.UpdateTime >= rec.UpdateTime) ) )
                   )
                // 2011/02/18 <<<
                {
                    ansRecList.Add(ansRec);
                }
            }

            if ((ansRecList != null) && (ansRecList.Count != 0))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        //<<<2011/02/01

        //>>>2010/03/30
        /// <summary>
        /// キャンセル判定
        /// </summary>
        /// <param name="rec"></param>
        /// <param name="scmAnswerList"></param>
        /// <param name="scmCancelHeaderList"></param>
        /// <returns></returns>
        private bool ExistCancel(UserSCMOrderDetailRecord rec, List<UserSCMOrderAnswerRecord> scmAnswerList, List<UserSCMOrderHeaderRecord> scmCancelHeaderList)
        {
            if ((scmAnswerList == null) || (scmAnswerList.Count == 0)) return false;

            List<UserSCMOrderAnswerRecord> ansList = scmAnswerList.FindAll(
                delegate(UserSCMOrderAnswerRecord ans)
                {
                    if ((ans.EnterpriseCode == rec.EnterpriseCode) &&
                        (ans.InqOriginalEpCd.Trim() == rec.InqOriginalEpCd.Trim()) &&//@@@@20230303
                        (ans.InqOriginalSecCd == rec.InqOriginalSecCd) &&
                        (ans.InqOtherEpCd == rec.InqOtherEpCd) &&
                        (ans.InqOtherSecCd == rec.InqOtherSecCd) &&
                        (ans.InquiryNumber == rec.InquiryNumber) &&
                        (ans.InqRowNumber == rec.InqRowNumber) &&
                        (ans.InqRowNumDerivedNo == rec.InqRowNumDerivedNo) &&
                        (ans.InqOrdDivCd == rec.InqOrdDivCd))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );

            if ((ansList != null) && (ansList.Count != 0))
            {
                // 回答明細が発注でキャンセルを含まない場合、対象とする

                if (this.ExistCancel((List<UserSCMOrderAnswerRecord>)ansList, scmCancelHeaderList))
                {
                    // キャンセル明細あり
                    return false;
                }
                else
                {
                    // キャンセル明細なし
                    List<UserSCMOrderAnswerRecord> lst = ansList.FindAll(
                        delegate(UserSCMOrderAnswerRecord ans)
                        {
                            if (ans.InqOrdDivCd == 2)
                            {
                                return true;
                            }
                            else
                            {
                                return false;
                            }
                        }
                    );

                    if ((lst != null) && (lst.Count != 0))
                    {
                        // 発注回答あり
                        return true;
                    }
                    else
                    {
                        // 発注回答なし
                        return false;
                    }
                }
            }
            else
            {
                // 回答明細が存在しない場合、対象外
                return false;
            }
        }
        //<<<2010/03/30

        //>>>2010/04/20
        /// <summary>
        /// キャンセル判定
        /// </summary>
        /// <param name="rec"></param>
        /// <param name="scmAnswerList"></param>
        /// <returns></returns>
        private bool ExistCancel(List<UserSCMOrderAnswerRecord> ansList, List<UserSCMOrderHeaderRecord> scmCancelHeaderList)
        {
            if ((scmCancelHeaderList == null) || (scmCancelHeaderList.Count == 0)) return false;

            bool ret = false;

            foreach (UserSCMOrderAnswerRecord rec in ansList)
            {
                List<UserSCMOrderHeaderRecord> headerList = scmCancelHeaderList.FindAll(
                    delegate(UserSCMOrderHeaderRecord header)
                    {
                        if ((header.EnterpriseCode == rec.EnterpriseCode) &&
                            (header.InqOriginalEpCd.Trim() == rec.InqOriginalEpCd.Trim()) &&//@@@@20230303
                            (header.InqOriginalSecCd == rec.InqOriginalSecCd) &&
                            (header.InqOtherEpCd == rec.InqOtherEpCd) &&
                            (header.InqOtherSecCd == rec.InqOtherSecCd) &&
                            (header.InquiryNumber == rec.InquiryNumber) &&
                            (header.UpdateDate == rec.UpdateDate) &&
                            (header.UpdateTime == rec.UpdateTime))
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                );

                if ((headerList != null) && (headerList.Count != 0))
                {
                    // 2011/02/18 >>>
                    //if (headerList[0].AnswerDivCd == 99)
                    if (headerList[0].CancelDiv == 1)
                    // 2011/02/18 <<<
                    {
                        // キャンセルヘッダが存在する
                        ret = true;
                        break;
                    }
                }
                else
                {
                    ret = false;
                }
            }

            return ret;
        }

        /// <summary>
        /// キャンセル判定
        /// </summary>
        /// <param name="rec"></param>
        /// <param name="scmAnswerList"></param>
        /// <returns></returns>
        private bool ExistCancel(UserSCMOrderDetailRecord rec, List<UserSCMOrderHeaderRecord> scmCancelHeaderList)
        {
            if ((scmCancelHeaderList == null) || (scmCancelHeaderList.Count == 0)) return false;

            List<UserSCMOrderHeaderRecord> headerList = scmCancelHeaderList.FindAll(
                delegate(UserSCMOrderHeaderRecord header)
                {
                    if ((header.EnterpriseCode == rec.EnterpriseCode) &&
                        (header.InqOriginalEpCd.Trim() == rec.InqOriginalEpCd.Trim()) &&//@@@@20230303
                        (header.InqOriginalSecCd == rec.InqOriginalSecCd) &&
                        (header.InqOtherEpCd == rec.InqOtherEpCd) &&
                        (header.InqOtherSecCd == rec.InqOtherSecCd) &&
                        (header.InquiryNumber == rec.InquiryNumber) &&
                        (header.UpdateDate == rec.UpdateDate) &&
                        (header.UpdateTime == rec.UpdateTime))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );

            if ((headerList != null) && (headerList.Count != 0))
            {
                // 2011/02/18 >>>
                //if (headerList[0].AnswerDivCd == 99)
                if (headerList[0].CancelDiv == 1)
                // 2011/02/18 <<<
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        //<<<2010/04/20

        /// <summary>
        /// 売上データ補正
        /// </summary>
        /// <param name="salesData"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="acceptOdrCarList"></param>
        /// <param name="scmHeader"></param>
        /// <param name="scmCar"></param>
        /// <param name="scmDetailList"></param>
        /// <param name="scmAnswerList"></param>
        // 2011/02/18 >>>
        //private void ReviseSalesData(CustomSerializeArrayList salesData, out SalesSlip salesSlip, out List<SalesDetail> salesDetailList, out List<AcceptOdrCar> acceptOdrCarList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList) // 2010/03/30
        //private void ReviseSalesData(CustomSerializeArrayList salesData, out SalesSlip salesSlip, out List<SalesDetail> salesDetailList, out List<AcceptOdrCar> acceptOdrCarList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList, int answerDivCd) // 2010/03/30
        private void ReviseSalesData(CustomSerializeArrayList salesData, out SalesSlip salesSlip, out List<SalesDetail> salesDetailList, out List<AcceptOdrCar> acceptOdrCarList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList, short cancelDiv) 
        // 2011/02/18 <<<
        {
            //-----------------------------------------------------------------------------
            // 初期化
            //-----------------------------------------------------------------------------
            SalesSlip sourceSalesSlip = new SalesSlip();
            ArrayList sourceSalesDetailArrayList = new ArrayList();
            List<SalesDetail> sourceSalesDetailList = new List<SalesDetail>();
            SearchDepsitMain sourceDepsitMain = new SearchDepsitMain();
            SearchDepositAlw sourceDepositAlw = new SearchDepositAlw();
            AcceptOdrCarWork sourceAcceptOdrCarWork = new AcceptOdrCarWork();
            CarManagementWork sourceCarManagementWork = new CarManagementWork();
            List<SlipDetailAddInfoWork> sourceSlipDetailAddInfoWorkList = new List<SlipDetailAddInfoWork>();
            SCMAcOdrDataWork sourceSCMAcOdrDataWork = new SCMAcOdrDataWork();
            SCMAcOdrDtCarWork sourceSCMAcOdrDtCarWork = new SCMAcOdrDtCarWork();
            ArrayList sourceSCMAcOdrDtlIqWorkArrayList = new ArrayList();
            ArrayList sourceSCMAcOdrDtlAsWorkArrayList = new ArrayList();

            //-----------------------------------------------------------------------------
            // 元データ分解
            //-----------------------------------------------------------------------------
            #region 元データ分解
            foreach (object obj in salesData)
            {
                if (obj is SalesSlip)
                {
                    sourceSalesSlip = (SalesSlip)obj;
                }
                else if (obj is SearchDepsitMain)
                {
                    sourceDepsitMain = (SearchDepsitMain)obj;
                }
                else if (obj is SearchDepositAlw)
                {
                    sourceDepositAlw = (SearchDepositAlw)obj;
                }
                //else if (obj is AcceptOdrCarWork)
                //{
                //    sourceAcceptOdrCarWork = (AcceptOdrCarWork)obj;
                //}
                else if (obj is List<SlipDetailAddInfoWork>)
                {
                    sourceSlipDetailAddInfoWorkList = (List<SlipDetailAddInfoWork>)obj;
                }
                else if (obj is SCMAcOdrDataWork)
                {
                    sourceSCMAcOdrDataWork = (SCMAcOdrDataWork)obj;
                }
                else if (obj is SCMAcOdrDtCarWork)
                {
                    sourceSCMAcOdrDtCarWork = (SCMAcOdrDtCarWork)obj;
                }
                //else if (obj is ArrayList)//DEL 2011/08/23
                else if (obj is ArrayList && ((ArrayList)obj).Count > 0)//ADD 2011/08/23
                {
                    ArrayList al = (ArrayList)obj;
                    if (al[0] is SCMAcOdrDtlIqWork)
                    {
                        sourceSCMAcOdrDtlIqWorkArrayList = (ArrayList)obj;
                    }
                    else if (al[0] is SCMAcOdrDtlAsWork)
                    {
                        sourceSCMAcOdrDtlAsWorkArrayList = (ArrayList)obj;
                    }
                    else if (al[0] is CarManagementWork)
                    {
                        sourceCarManagementWork = (CarManagementWork)((ArrayList)obj)[0];
                    }
                    else if (al[0] is SalesDetail)
                    {
                        sourceSalesDetailArrayList = (ArrayList)obj;
                    }
                }
            }
            #endregion

            //salesSlip = ConvertSalesSlip.UIDataFromParamData(sourceSalesSlip);
            salesSlip = sourceSalesSlip;
            //sourceSalesDetailList = new List<SalesDetailWork>((SalesDetailWork[])sourceSalesDetailWorkArrayList.ToArray(typeof(SalesDetailWork)));
            //salesDetailList = ConvertSalesSlip.UIDataFromParamData(sourceSalesDetailList);
            salesDetailList = new List<SalesDetail>((SalesDetail[])sourceSalesDetailArrayList.ToArray(typeof(SalesDetail)));
            // ---ADD 2011/09/21 ----------------->>>
            List<SalesDetail> tmpSalesDetailList = new List<SalesDetail>();
            int cnt = 0;
            // 売上明細データの行数はユーザー設定の入力行数を超えないように制御する
            foreach (SalesDetail salesDetail in salesDetailList)
            {
                cnt++;
                if (cnt <= _salesSlipInputConstructionAcs.DataInputCountValue)
                {
                    tmpSalesDetailList.Add(salesDetail);
                }
                else
                {
                    break;
                }
            }
            salesDetailList = tmpSalesDetailList;
            // ---ADD 2011/09/21 -----------------<<<
            this.SettingCarManagementWorkFromAcceptOdrCarWork(sourceCarManagementWork, ref sourceAcceptOdrCarWork);
            AcceptOdrCar acceptOdrCar = ConvertSalesSlip.UIDataFromParamData(sourceAcceptOdrCarWork);
            acceptOdrCar.AcceptAnOrderNo = ((SalesDetail)salesDetailList[0]).AcceptAnOrderNo; // 2012/07/03
            acceptOdrCarList = new List<AcceptOdrCar>();
            acceptOdrCarList.Add(acceptOdrCar);

            scmHeader = new UserSCMOrderHeaderRecord(sourceSCMAcOdrDataWork);
            scmCar = new UserSCMOrderCarRecord(sourceSCMAcOdrDtCarWork);
            scmDetailList = new List<UserSCMOrderDetailRecord>();
            scmAnswerList = new List<UserSCMOrderAnswerRecord>();
            foreach (SCMAcOdrDtlIqWork iqWork in sourceSCMAcOdrDtlIqWorkArrayList)
            {
                scmDetailList.Add(new UserSCMOrderDetailRecord(iqWork));
            }
            foreach (SCMAcOdrDtlAsWork ansWork in sourceSCMAcOdrDtlAsWorkArrayList)
            {
                scmAnswerList.Add(new UserSCMOrderAnswerRecord(ansWork));
            }

            //-----------------------------------------------------------------------------
            // 売上データ調整
            //-----------------------------------------------------------------------------
            salesSlip.AcptAnOdrStatusDisplay = salesSlip.AcptAnOdrStatus;
            if (salesSlip.AcptAnOdrStatusDisplay == (int)AcptAnOdrStatusState.AcceptAnOrder) salesSlip.AcptAnOdrStatusDisplay = (int)AcptAnOdrStatusState.Sales;
            this.AdjustSalesReadDBData(ref salesSlip, ref salesDetailList);
            SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip); // 表示用受注ステータスの設定
            SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip); // 表示用伝票区分設定処理

            //>>>2011/02/01
            #region 担当者
            int salesEmployeeCd = TStrConv.StrToIntDef(salesSlip.SalesEmployeeCd, 0);
            if (salesEmployeeCd == 0)
            {
                CustomerInfo customerInfo;
                int st = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, salesSlip.CustomerCode, true, false, out customerInfo);
                if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    Employee employee = this._salesSlipInputInitDataAcs.GetEmployee(customerInfo.CustomerAgentCd);
                    if (employee != null)
                    {
                        salesSlip.SalesEmployeeCd = customerInfo.CustomerAgentCd; // 担当者コード
                        if (salesSlip.SalesEmployeeNm.Length > 16) salesSlip.SalesEmployeeNm = salesSlip.SalesEmployeeNm.Substring(0, 16);
                    }
                    else
                    {
                        switch (this._salesSlipInputConstructionAcs.EmployeeCdDivValue)
                        {
                            // ログイン担当者
                            case 0:
                                employee = this._salesSlipInputInitDataAcs.GetEmployee(LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                                if (employee != null)
                                {
                                    salesSlip.SalesEmployeeCd = LoginInfoAcquisition.Employee.EmployeeCode.Trim();  // 担当者コード
                                    salesSlip.SalesEmployeeNm = employee.Name;  // 担当者名称
                                }
                                break;
                            // 空白
                            case 1:
                                salesSlip.SalesEmployeeCd = string.Empty;  // 担当者コード
                                salesSlip.SalesEmployeeNm = string.Empty;  // 担当者名称
                                break;
                            // 固定値(設定値)
                            case 2:
                                employee = this._salesSlipInputInitDataAcs.GetEmployee(this._salesSlipInputConstructionAcs.EmployeeCdValue.Trim());
                                if (employee != null)
                                {
                                    salesSlip.SalesEmployeeCd = this._salesSlipInputConstructionAcs.EmployeeCdValue.Trim();  // 担当者コード
                                    salesSlip.SalesEmployeeNm = employee.Name;  // 担当者名称
                                }
                                break;
                        }
                    }
                }
            }
            #endregion

            #region 受注者
            switch (this._salesSlipInputConstructionAcs.FrontEmployeeCdDivValue)
            {
                // ログイン担当者
                case 0:
                    Employee emp = this._salesSlipInputInitDataAcs.GetEmployee(LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                    if (emp != null)
                    {
                        salesSlip.FrontEmployeeCd = LoginInfoAcquisition.Employee.EmployeeCode.Trim();  // 担当者コード
                        salesSlip.FrontEmployeeNm = emp.Name;
                        if (salesSlip.FrontEmployeeNm.Length > 16) salesSlip.FrontEmployeeNm = salesSlip.FrontEmployeeNm.Substring(0, 16);
                    }
                    break;
                // 空白
                case 1:
                    salesSlip.FrontEmployeeCd = string.Empty;  // 担当者コード
                    salesSlip.FrontEmployeeNm = string.Empty;  // 担当者名称
                    break;
                // 固定値(設定値)
                case 2:
                    Employee empp = this._salesSlipInputInitDataAcs.GetEmployee(this._salesSlipInputConstructionAcs.FrontEmployeeCdValue.Trim());
                    if (empp != null)
                    {
                        salesSlip.FrontEmployeeCd = this._salesSlipInputConstructionAcs.FrontEmployeeCdValue.Trim();  // 担当者コード
                        salesSlip.FrontEmployeeNm = empp.Name;
                        if (salesSlip.FrontEmployeeNm.Length > 16) salesSlip.FrontEmployeeNm = salesSlip.FrontEmployeeNm.Substring(0, 16);
                    }
                    break;
            }
            #endregion

            #region 発行者
            // 発行者
            switch (this._salesSlipInputConstructionAcs.SalesInputCdDivValue)
            {
                // ログイン担当者
                case 0:
                    Employee emp = this._salesSlipInputInitDataAcs.GetEmployee(LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                    if (emp != null)
                    {
                        salesSlip.SalesInputCode = LoginInfoAcquisition.Employee.EmployeeCode.Trim();  // 担当者コード
                        salesSlip.SalesInputName = emp.Name;
                        if (salesSlip.SalesInputName.Length > 16) salesSlip.SalesInputName = salesSlip.SalesInputName.Substring(0, 16);
                    }
                    break;
                // 空白
                case 1:
                    salesSlip.SalesInputCode = string.Empty;  // 担当者コード
                    salesSlip.SalesInputName = string.Empty;  // 担当者名称
                    break;
                // 固定値(設定値)
                case 2:
                    Employee empp = this._salesSlipInputInitDataAcs.GetEmployee(this._salesSlipInputConstructionAcs.SalesInputCdValue.Trim());
                    if (empp != null)
                    {
                        salesSlip.SalesInputCode = this._salesSlipInputConstructionAcs.SalesInputCdValue.Trim();  // 担当者コード
                        salesSlip.SalesInputName = empp.Name;
                        if (salesSlip.SalesInputName.Length > 16) salesSlip.SalesInputName = salesSlip.SalesInputName.Substring(0, 16);
                    }
                    break;
            }
            #endregion
            //<<<2011/02/01

            //>>>2010/03/30
            // キャンセルデータ補正
            // 2011/02/18 >>>
            //if (answerDivCd == 99)
            if (cancelDiv == 1)
            // 2011/02/18 <<<
            {
                salesSlip.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales;
                salesSlip.AcptAnOdrStatusDisplay = salesSlip.AcptAnOdrStatus;
                foreach (SalesDetail detail in salesDetailList)
                {
                    detail.AcptAnOdrStatus = salesSlip.AcptAnOdrStatus;
                }
            }
            //<<<2010/03/30

            //>>>2011/02/01
            List<SalesDetail> tempList = new List<SalesDetail>();
            if (salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods)
            {
                foreach (SalesDetail detail in salesDetailList)
                {
                    string value = detail.AcptAnOdrStatusSrc.ToString() + "," + detail.SalesSlipDtlNumSrc.ToString();
                    this._dtlNumDic.Add(detail.SalesRowNo, value);
                    detail.AcptAnOdrStatusSrc = 0;
                    detail.SalesSlipDtlNumSrc = 0;
                    tempList.Add(detail);
                }
                if (tempList.Count != 0)
                {
                    salesDetailList.Clear();
                    salesDetailList = tempList;
                }
            }
            //<<<2011/02/01
        }

        /// <summary>
        /// 売上明細データ補正
        /// </summary>
        /// <param name="scmAnswerList"></param>
        /// <param name="acptFlg"></param>
        private void ReviseSalesDetail(List<UserSCMOrderAnswerRecord> scmAnswerList, bool acptFlg)
        {
            //>>>2011/02/01
            // 返品データ展開時、返品補正
            if (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods)
            {
                this.CreateReturnSlipDetailInfo();
            }
            //<<<2011/02/01

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                UserSCMOrderAnswerRecord rec = scmAnswerList.Find(
                    delegate(UserSCMOrderAnswerRecord trec)
                    {
                        if ((trec.SalesSlipNum == row.SalesSlipNum) &&
                            (trec.SalesRowNo == row.SalesRowNo))
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                );

                if (row.AcptAnOdrStatus == (int)AcptAnOdrStatusState.AcceptAnOrder)
                {
                    row.ShipmentCntDisplay = row.ShipmentCnt;
                    //row.ShipmentCnt = 0;
                }
                else if (row.AcptAnOdrStatus == (int)AcptAnOdrStatusState.Sales)
                {
                    if ((rec.GoodsDivCd == 2) || // リサイクル部品
                        (rec.GoodsDivCd == 3))   // 平均相場
                    {
                        row.AcceptAnOrderCntDisplay = row.ShipmentCntDisplay;
                        row.ShipmentCntDisplay = 0;
                        row.ShipmentCnt = 0;
                        row.AcceptAnOrderCnt = 0;
                        row.AcptAnOdrRemainCnt = 0;
                        acptFlg = true;
                    }
                }

                //>>>2011/02/01
                if ((this._dtlNumDic != null) &&
                    (this._dtlNumDic.Count != 0) &&
                    (this._dtlNumDic.ContainsKey(row.SalesRowNo)))
                {
                    string value = this._dtlNumDic[row.SalesRowNo];
                    string[] values = value.Split(',');
                    row.AcptAnOdrStatusSrc = TStrConv.StrToIntDef(values[0], 0);
                    row.SalesSlipDtlNumSrc = TStrConv.StrToIntDef(values[1], 0);
                }
                //<<<2011/02/01
            }

            //>>>2011/02/01
            this._dtlNumDic = new Dictionary<int, string>();
            //<<<2011/02/01
        }

        /// <summary>
        /// 受注データ(車両)ワークオブジェクトから車両管理マスタワークオブジェクトを取得
        /// </summary>
        /// <param name="sourceCarManagementWork"></param>
        /// <param name="sourceAcceptOdrCarWork"></param>
        private void SettingCarManagementWorkFromAcceptOdrCarWork(CarManagementWork sourceCarManagementWork, ref AcceptOdrCarWork sourceAcceptOdrCarWork)
        {
            sourceAcceptOdrCarWork.CreateDateTime = sourceCarManagementWork.CreateDateTime; // 作成日時
            sourceAcceptOdrCarWork.UpdateDateTime = sourceCarManagementWork.UpdateDateTime; // 更新日時
            sourceAcceptOdrCarWork.EnterpriseCode = sourceCarManagementWork.EnterpriseCode; // 企業コード
            sourceAcceptOdrCarWork.FileHeaderGuid = sourceCarManagementWork.FileHeaderGuid; // GUID
            sourceAcceptOdrCarWork.UpdEmployeeCode = sourceCarManagementWork.UpdEmployeeCode; // 更新従業員コード
            sourceAcceptOdrCarWork.UpdAssemblyId1 = sourceCarManagementWork.UpdAssemblyId1; // 更新アセンブリID1
            sourceAcceptOdrCarWork.UpdAssemblyId2 = sourceCarManagementWork.UpdAssemblyId2; // 更新アセンブリID2
            sourceAcceptOdrCarWork.LogicalDeleteCode = sourceCarManagementWork.LogicalDeleteCode; // 論理削除区分
            //sourceAcceptOdrCarWork.CustomerCode = sourceCarManagementWork.CustomerCode; // 得意先コード
            sourceAcceptOdrCarWork.CarMngNo = sourceCarManagementWork.CarMngNo; // 車両管理番号
            sourceAcceptOdrCarWork.CarMngCode = sourceCarManagementWork.CarMngCode; // 車両管理コード
            sourceAcceptOdrCarWork.NumberPlate1Code = sourceCarManagementWork.NumberPlate1Code; // 陸運事務所番号
            sourceAcceptOdrCarWork.NumberPlate1Name = sourceCarManagementWork.NumberPlate1Name; // 陸運事務局名称
            sourceAcceptOdrCarWork.NumberPlate2 = sourceCarManagementWork.NumberPlate2; // 車両登録番号（種別）
            sourceAcceptOdrCarWork.NumberPlate3 = sourceCarManagementWork.NumberPlate3; // 車両登録番号（カナ）
            sourceAcceptOdrCarWork.NumberPlate4 = sourceCarManagementWork.NumberPlate4; // 車両登録番号（プレート番号）
            //sourceAcceptOdrCarWork.EntryDate = sourceCarManagementWork.EntryDate; // 登録年月日
            sourceAcceptOdrCarWork.FirstEntryDate = sourceCarManagementWork.FirstEntryDate; // 初年度
            sourceAcceptOdrCarWork.MakerCode = sourceCarManagementWork.MakerCode; // メーカーコード
            sourceAcceptOdrCarWork.MakerFullName = sourceCarManagementWork.MakerFullName; // メーカー全角名称
            sourceAcceptOdrCarWork.MakerHalfName = sourceCarManagementWork.MakerHalfName; // メーカー半角名称
            sourceAcceptOdrCarWork.ModelCode = sourceCarManagementWork.ModelCode; // 車種コード
            sourceAcceptOdrCarWork.ModelSubCode = sourceCarManagementWork.ModelSubCode; // 車種サブコード
            sourceAcceptOdrCarWork.ModelFullName = sourceCarManagementWork.ModelFullName; // 車種全角名称
            sourceAcceptOdrCarWork.ModelHalfName = sourceCarManagementWork.ModelHalfName; // 車種半角名称
            //sourceAcceptOdrCarWork.SystematicCode = sourceCarManagementWork.SystematicCode; // 系統コード
            //sourceAcceptOdrCarWork.SystematicName = sourceCarManagementWork.SystematicName; // 系統名称
            //sourceAcceptOdrCarWork.ProduceTypeOfYearCd = sourceCarManagementWork.ProduceTypeOfYearCd; // 生産年式コード
            //sourceAcceptOdrCarWork.ProduceTypeOfYearNm = sourceCarManagementWork.ProduceTypeOfYearNm; // 生産年式名称
            //sourceAcceptOdrCarWork.StProduceTypeOfYear = sourceCarManagementWork.StProduceTypeOfYear; // 開始生産年式
            //sourceAcceptOdrCarWork.EdProduceTypeOfYear = sourceCarManagementWork.EdProduceTypeOfYear; // 終了生産年式
            //sourceAcceptOdrCarWork.DoorCount = sourceCarManagementWork.DoorCount; // ドア数
            //sourceAcceptOdrCarWork.BodyNameCode = sourceCarManagementWork.BodyNameCode; // ボディー名コード
            //sourceAcceptOdrCarWork.BodyName = sourceCarManagementWork.BodyName; // ボディー名称
            sourceAcceptOdrCarWork.ExhaustGasSign = sourceCarManagementWork.ExhaustGasSign; // 排ガス記号
            sourceAcceptOdrCarWork.SeriesModel = sourceCarManagementWork.SeriesModel; // シリーズ型式
            sourceAcceptOdrCarWork.CategorySignModel = sourceCarManagementWork.CategorySignModel; // 型式（類別記号）
            sourceAcceptOdrCarWork.FullModel = sourceCarManagementWork.FullModel; // 型式（フル型）
            sourceAcceptOdrCarWork.ModelDesignationNo = sourceCarManagementWork.ModelDesignationNo; // 型式指定番号
            sourceAcceptOdrCarWork.CategoryNo = sourceCarManagementWork.CategoryNo; // 類別番号
            sourceAcceptOdrCarWork.FrameModel = sourceCarManagementWork.FrameModel; // 車台型式
            sourceAcceptOdrCarWork.FrameNo = sourceCarManagementWork.FrameNo; // 車台番号
            sourceAcceptOdrCarWork.SearchFrameNo = sourceCarManagementWork.SearchFrameNo; // 車台番号（検索用）
            //sourceAcceptOdrCarWork.StProduceFrameNo = sourceCarManagementWork.StProduceFrameNo; // 生産車台番号開始
            //sourceAcceptOdrCarWork.EdProduceFrameNo = sourceCarManagementWork.EdProduceFrameNo; // 生産車台番号終了
            //sourceAcceptOdrCarWork.EngineModel = sourceCarManagementWork.EngineModel; // 原動機型式（エンジン）
            //sourceAcceptOdrCarWork.ModelGradeNm = sourceCarManagementWork.ModelGradeNm; // 型式グレード名称
            sourceAcceptOdrCarWork.EngineModelNm = sourceCarManagementWork.EngineModelNm; // エンジン型式名称
            //sourceAcceptOdrCarWork.EngineDisplaceNm = sourceCarManagementWork.EngineDisplaceNm; // 排気量名称
            //sourceAcceptOdrCarWork.EDivNm = sourceCarManagementWork.EDivNm; // E区分名称
            //sourceAcceptOdrCarWork.TransmissionNm = sourceCarManagementWork.TransmissionNm; // ミッション名称
            //sourceAcceptOdrCarWork.ShiftNm = sourceCarManagementWork.ShiftNm; // シフト名称
            //sourceAcceptOdrCarWork.WheelDriveMethodNm = sourceCarManagementWork.WheelDriveMethodNm; // 駆動方式名称
            //sourceAcceptOdrCarWork.AddiCarSpec1 = sourceCarManagementWork.AddiCarSpec1; // 追加諸元1
            //sourceAcceptOdrCarWork.AddiCarSpec2 = sourceCarManagementWork.AddiCarSpec2; // 追加諸元2
            //sourceAcceptOdrCarWork.AddiCarSpec3 = sourceCarManagementWork.AddiCarSpec3; // 追加諸元3
            //sourceAcceptOdrCarWork.AddiCarSpec4 = sourceCarManagementWork.AddiCarSpec4; // 追加諸元4
            //sourceAcceptOdrCarWork.AddiCarSpec5 = sourceCarManagementWork.AddiCarSpec5; // 追加諸元5
            //sourceAcceptOdrCarWork.AddiCarSpec6 = sourceCarManagementWork.AddiCarSpec6; // 追加諸元6
            //sourceAcceptOdrCarWork.AddiCarSpecTitle1 = sourceCarManagementWork.AddiCarSpecTitle1; // 追加諸元タイトル1
            //sourceAcceptOdrCarWork.AddiCarSpecTitle2 = sourceCarManagementWork.AddiCarSpecTitle2; // 追加諸元タイトル2
            //sourceAcceptOdrCarWork.AddiCarSpecTitle3 = sourceCarManagementWork.AddiCarSpecTitle3; // 追加諸元タイトル3
            //sourceAcceptOdrCarWork.AddiCarSpecTitle4 = sourceCarManagementWork.AddiCarSpecTitle4; // 追加諸元タイトル4
            //sourceAcceptOdrCarWork.AddiCarSpecTitle5 = sourceCarManagementWork.AddiCarSpecTitle5; // 追加諸元タイトル5
            //sourceAcceptOdrCarWork.AddiCarSpecTitle6 = sourceCarManagementWork.AddiCarSpecTitle6; // 追加諸元タイトル6
            sourceAcceptOdrCarWork.RelevanceModel = sourceCarManagementWork.RelevanceModel; // 関連型式
            sourceAcceptOdrCarWork.SubCarNmCd = sourceCarManagementWork.SubCarNmCd; // サブ車名コード
            sourceAcceptOdrCarWork.ModelGradeSname = sourceCarManagementWork.ModelGradeSname; // 型式グレード略称
            //sourceAcceptOdrCarWork.BlockIllustrationCd = sourceCarManagementWork.BlockIllustrationCd; // ブロックイラストコード
            //sourceAcceptOdrCarWork.ThreeDIllustNo = sourceCarManagementWork.ThreeDIllustNo; // 3DイラストNo
            //sourceAcceptOdrCarWork.PartsDataOfferFlag = sourceCarManagementWork.PartsDataOfferFlag; // 部品データ提供フラグ
            //sourceAcceptOdrCarWork.InspectMaturityDate = sourceCarManagementWork.InspectMaturityDate; // 車検満期日
            //sourceAcceptOdrCarWork.LTimeCiMatDate = sourceCarManagementWork.LTimeCiMatDate; // 前回車検満期日
            //sourceAcceptOdrCarWork.CarInspectYear = sourceCarManagementWork.CarInspectYear; // 車検期間
            sourceAcceptOdrCarWork.Mileage = sourceCarManagementWork.Mileage; // 車両走行距離
            //sourceAcceptOdrCarWork.CarNo = sourceCarManagementWork.CarNo; // 号車
            sourceAcceptOdrCarWork.ColorCode = sourceCarManagementWork.ColorCode; // カラーコード
            sourceAcceptOdrCarWork.ColorName1 = sourceCarManagementWork.ColorName1; // カラー名称1
            sourceAcceptOdrCarWork.TrimCode = sourceCarManagementWork.TrimCode; // トリムコード
            sourceAcceptOdrCarWork.TrimName = sourceCarManagementWork.TrimName; // トリム名称
            sourceAcceptOdrCarWork.FullModelFixedNoAry = sourceCarManagementWork.FullModelFixedNoAry; // フル型式固定番号配列
            sourceAcceptOdrCarWork.CategoryObjAry = sourceCarManagementWork.CategoryObjAry; // 装備オブジェクト配列
            // PMNS:国産/外車区分セット
            // --- ADD 2013/03/21 ---------->>>>>
            sourceAcceptOdrCarWork.DomesticForeignCode = sourceCarManagementWork.DomesticForeignCode; // 国産/外車区分
            this._handleInfoCode = sourceCarManagementWork.HandleInfoCode; // ハンドル位置情報
            // --- ADD 2013/03/21 ----------<<<<<
        }

        //>>>2010/02/26
        /// <summary>
        /// SCM読込処理
        /// </summary>
        /// <param name="logicalMode"></param>
        /// <param name="enterpriseCode"></param>
        /// <param name="inquiryNumber"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="inqOriginalEpCd"></param>
        /// <param name="inqOriginalSecCd"></param>
        /// <param name="inqOrdDivCd"></param>
        /// <param name="scmHeader"></param>
        /// <param name="scmCar"></param>
        /// <param name="scmDetailList"></param>
        /// <param name="scmAnswerList"></param>
        /// <returns></returns>
        //private int SCMReadDBDataProc(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList) // 2010/03/30
        // 2011/02/18 >>>
        //private int SCMReadDBDataProc(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, int answerDivCd, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList) // 2010/03/30
        private int SCMReadDBDataProc(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, short cancelDiv, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList) // 2010/03/30
        // 2011/02/18 <<<
        {
            // 2011/02/18 >>>
            ////return SCMReadDBDataProc(logicalMode, enterpriseCode, inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, 0, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
            //return SCMReadDBDataProc(logicalMode, enterpriseCode, inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, 0, answerDivCd, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);

            return SCMReadDBDataProc(logicalMode, enterpriseCode, inquiryNumber, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd.Trim(), inqOriginalSecCd, inqOrdDivCd, 0, cancelDiv, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);//@@@@20230303
            // 2011/02/18 <<<
        }
        //<<<2010/02/26

        /// <summary>
        /// SCM情報読込処理
        /// </summary>
        /// <param name="logicalMode"></param>
        /// <param name="enterpriseCode"></param>
        /// <param name="inquiryNumber"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="inqOriginalEpCd"></param>
        /// <param name="inqOriginalSecCd"></param>
        /// <param name="inqOrdDivCd"></param>
        /// <param name="inqOrdAnsDivCd"></param>
        /// <param name="scmHeader"></param>
        /// <param name="scmCar"></param>
        /// <param name="scmDetailList"></param>
        /// <param name="scmAnswerList"></param>
        /// <returns></returns>
        // 2011/02/18 >>>
        ////private int SCMReadDBDataProc(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList) // 2010/02/26
        ////private int SCMReadDBDataProc(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, int inqOrdAnsDivCd, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList) // 2010/02/26 // 2010/03/30
        //private int SCMReadDBDataProc(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, int inqOrdAnsDivCd, int answerDivCd, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList) // 2010/03/30

        private int SCMReadDBDataProc(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, long inquiryNumber, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, int inqOrdAnsDivCd, short cancelDiv, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList) // 2010/03/30
        // 2011/02/18 <<<
        {
            //-----------------------------------------------------------------------------
            // 初期処理
            //-----------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            scmHeader = null;
            scmCar = null;
            scmDetailList = new List<UserSCMOrderDetailRecord>();
            scmAnswerList = new List<UserSCMOrderAnswerRecord>();
            CustomSerializeArrayList paraList = new CustomSerializeArrayList();

            IOWriteSCMReadWork readPara = new IOWriteSCMReadWork();
            readPara.EnterpriseCode = this._enterpriseCode;
            //readPara.InqOtherSecCd = this.SalesSlip.ResultsAddUpSecCd; // 2011/03/14
            readPara.InquiryNumber = inquiryNumber;
            readPara.AcptAnOdrStatus = acptAnOdrStatus;
            readPara.SalesSlipNum = string.Empty;
            // 2011/02/18 >>>
            ////readPara.AnswerDivCds = null; // 2010/03/30
            //readPara.AnswerDivCds = new int[] { answerDivCd }; // 2010/03/30

            readPara.CancelDivs = new short[] { cancelDiv }; // 2010/03/30
            // 2011/02/18 <<<
            readPara.InqOriginalSecCd = inqOriginalSecCd;
            readPara.InqOriginalEpCd = inqOriginalEpCd.Trim();//@@@@20230303

            //>>>2011/02/01 一部回答判定対応
            ////----- UPD 2010/07/06 ------>>>>>
            ////readPara.InqOrdDivCd = inqOrdDivCd;
            //readPara.InqOrdDivCd = 0;
            ////----- UPD 2010/07/06 ------<<<<<
            readPara.InqOrdDivCd = inqOrdDivCd;
            //<<<2011/02/01 一部回答判定対応

            readPara.InqOrdAnsDivCd = inqOrdAnsDivCd; // 2010/02/26
            //paraList.Add(readPara);

            object paraObj = (object)paraList;
            //object retObj = new object();
            object retObj = new CustomSerializeArrayList();

            //-----------------------------------------------------------------------------
            // 読込処理
            //-----------------------------------------------------------------------------
            status = this._iIOWritScmDB.ScmRead(ref retObj, readPara);

            CustomSerializeArrayList retList = (CustomSerializeArrayList)retObj;

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                SCMAcOdrDataWork scmHeaderWork;
                SCMAcOdrDtCarWork scmCarWork;
                List<SCMAcOdrDtlIqWork> scmDetailWorkList = new List<SCMAcOdrDtlIqWork>();
                List<SCMAcOdrDtlAsWork> scmAnswerWorkList = new List<SCMAcOdrDtlAsWork>();

                //-----------------------------------------------------------------------------
                // データ分割
                //-----------------------------------------------------------------------------
                IOWriterUtil.ExpandSCMReadRet(retObj, out scmHeaderWork, out scmDetailWorkList, out scmAnswerWorkList, out scmCarWork);
                scmHeader = new UserSCMOrderHeaderRecord(scmHeaderWork);
                scmCar = new UserSCMOrderCarRecord(scmCarWork);
                // ---DEL 2011/09/19 ----------------->>> 
                //foreach (SCMAcOdrDtlIqWork iqWork in scmDetailWorkList) scmDetailList.Add(new UserSCMOrderDetailRecord(iqWork));
                //foreach (SCMAcOdrDtlAsWork asWork in scmAnswerWorkList) scmAnswerList.Add(new UserSCMOrderAnswerRecord(asWork));
                // ---DEL 2011/09/19 -----------------<<<
                // ---DEL 2011/09/21 ----------------->>>
                //// ---ADD 2011/09/19 ----------------->>>
                //int cnt = 1;
                //foreach (SCMAcOdrDtlIqWork iqWork in scmDetailWorkList)
                //{
                //    if (cnt <= _salesSlipInputConstructionAcs.DataInputCountValue)
                //    {
                //        scmDetailList.Add(new UserSCMOrderDetailRecord(iqWork));
                //    }
                //    else
                //    {
                //        break;
                //    }
                //    cnt++;
                //}

                //cnt = 1;

                //foreach (SCMAcOdrDtlAsWork asWork in scmAnswerWorkList)
                //{
                //    if (cnt <= _salesSlipInputConstructionAcs.DataInputCountValue)
                //    {
                //        scmAnswerList.Add(new UserSCMOrderAnswerRecord(asWork));
                //    }
                //    else
                //    {
                //        break;
                //    }
                //    cnt++;
                //}
                //// ---ADD 2011/09/19 -----------------<<<
                // ---DEL 2011/09/21 -----------------<<<
                // ---ADD 2011/09/21 ----------------->>> 
                foreach (SCMAcOdrDtlIqWork iqWork in scmDetailWorkList) scmDetailList.Add(new UserSCMOrderDetailRecord(iqWork));
                foreach (SCMAcOdrDtlAsWork asWork in scmAnswerWorkList) scmAnswerList.Add(new UserSCMOrderAnswerRecord(asWork));
                // ---ADD 2011/09/21 -----------------<<<
            }

            return status;

        }

        //>>>2010/04/20
        /// <summary>
        /// SCM受注データリスト取得処理
        /// </summary>
        /// <param name="logicalMode"></param>
        /// <param name="enterpriseCode"></param>
        /// <param name="inquiryNumber"></param>
        /// <param name="inqOriginalEpCd"></param>
        /// <param name="inqOriginalSecCd"></param>
        /// <param name="inqOtherEpCd"></param>
        /// <param name="inqOtherSecCd"></param>
        /// <param name="answerDivCd"></param>
        /// <param name="scmHeaderList"></param>
        /// <returns></returns>
        // 2011/02/18 >>>
        //private int ScmAcOdrDataSearchProc(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, long inquiryNumber, string inqOriginalEpCd, string inqOriginalSecCd, string inqOtherEpCd, string inqOtherSecCd, int answerDivCd, out List<UserSCMOrderHeaderRecord> scmHeaderList)
        private int ScmAcOdrDataSearchProc(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, long inquiryNumber, string inqOriginalEpCd, string inqOriginalSecCd, string inqOtherEpCd, string inqOtherSecCd, short cancelDiv, out List<UserSCMOrderHeaderRecord> scmHeaderList)
        // 2011/02/18 <<<
        {
            //-----------------------------------------------------------------------------
            // 初期処理
            //-----------------------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            scmHeaderList = new List<UserSCMOrderHeaderRecord>();
            CustomSerializeArrayList paraList = new CustomSerializeArrayList();

            SCMAcOdrDataWork readPara = new SCMAcOdrDataWork();
            readPara.EnterpriseCode = enterpriseCode;
            readPara.InquiryNumber = inquiryNumber;
            readPara.InqOriginalEpCd = inqOriginalEpCd.Trim();//@@@@20230303
            readPara.InqOriginalSecCd = inqOriginalSecCd;
            readPara.InqOtherEpCd = inqOtherEpCd;
            readPara.InqOtherSecCd = inqOtherSecCd;
            // 2011/02/18 >>>
            //readPara.AnswerDivCd = answerDivCd;
            readPara.CancelDiv = cancelDiv;
            // 2011/02/18 <<<

            object retObj = new CustomSerializeArrayList();

            //-----------------------------------------------------------------------------
            // 読込処理
            //-----------------------------------------------------------------------------
            status = this._iIOWritScmDB.ScmAcOdrDataSearch(out retObj, readPara);

            ArrayList retList = (ArrayList)retObj;

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                foreach (SCMAcOdrDataWork scmAcOdrDataWork in retList)
                {
                    scmHeaderList.Add(new UserSCMOrderHeaderRecord(scmAcOdrDataWork));
                }
            }

            return status;

        }
        //<<<2010/04/20
        #endregion

        #region SCM受注データ(車両情報)操作
        /// <summary>
        /// SCM受注データ(車両情報)オブジェクトを元にSCM受注データ(車両情報)テーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="scmCar"></param>
        /// <param name="scmAcOdrDtCarDataTable"></param>
        /// <returns></returns>
        private ScmDataSet.SCMAcOdrDtCarRow CreateSCMAcOdrDtCarRowFromUIData(UserSCMOrderCarRecord scmCar, ScmDataSet.SCMAcOdrDtCarDataTable scmAcOdrDtCarDataTable)
        {
            ScmDataSet.SCMAcOdrDtCarRow scmAcOdrDtCarRow = scmAcOdrDtCarDataTable.NewSCMAcOdrDtCarRow();

            this.DefaultSettingSCMAcOdrDtCarRow(ref scmAcOdrDtCarRow);

            this.SetRowFromUIData(ref scmAcOdrDtCarRow, scmCar);
            return scmAcOdrDtCarRow;
        }

        /// <summary>
        /// SCM受注データ(車両情報)ワークオブジェクトからSCM受注データ(車両情報)行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="scmAcOdrDtCarRow"></param>
        /// <param name="scmCar"></param>
        private void SetRowFromUIData(ref ScmDataSet.SCMAcOdrDtCarRow scmAcOdrDtCarRow, UserSCMOrderCarRecord scmCar)
        {
            #region 項目セット
            scmAcOdrDtCarRow.CreateDateTime = scmCar.CreateDateTime; // 作成日時
            scmAcOdrDtCarRow.UpdateDateTime = scmCar.UpdateDateTime; // 更新日時
            scmAcOdrDtCarRow.EnterpriseCode = scmCar.EnterpriseCode; // 企業コード
            scmAcOdrDtCarRow.FileHeaderGuid = scmCar.FileHeaderGuid; // GUID
            scmAcOdrDtCarRow.UpdEmployeeCode = scmCar.UpdEmployeeCode; // 更新従業員コード
            scmAcOdrDtCarRow.UpdAssemblyId1 = scmCar.UpdAssemblyId1; // 更新アセンブリID1
            scmAcOdrDtCarRow.UpdAssemblyId2 = scmCar.UpdAssemblyId2; // 更新アセンブリID2
            scmAcOdrDtCarRow.LogicalDeleteCode = scmCar.LogicalDeleteCode; // 論理削除区分
            scmAcOdrDtCarRow.InqOriginalEpCd = scmCar.InqOriginalEpCd.Trim(); // 問合せ元企業コード//@@@@20230303
            scmAcOdrDtCarRow.InqOriginalSecCd = scmCar.InqOriginalSecCd; // 問合せ元拠点コード
            scmAcOdrDtCarRow.InquiryNumber = scmCar.InquiryNumber; // 問合せ番号
            scmAcOdrDtCarRow.NumberPlate1Code = scmCar.NumberPlate1Code; // 陸運事務所番号
            scmAcOdrDtCarRow.NumberPlate1Name = scmCar.NumberPlate1Name; // 陸運事務局名称
            scmAcOdrDtCarRow.NumberPlate2 = scmCar.NumberPlate2; // 車両登録番号（種別）
            scmAcOdrDtCarRow.NumberPlate3 = scmCar.NumberPlate3; // 車両登録番号（カナ）
            scmAcOdrDtCarRow.NumberPlate4 = scmCar.NumberPlate4; // 車両登録番号（プレート番号）
            scmAcOdrDtCarRow.ModelDesignationNo = scmCar.ModelDesignationNo; // 型式指定番号
            scmAcOdrDtCarRow.CategoryNo = scmCar.CategoryNo; // 類別番号
            scmAcOdrDtCarRow.MakerCode = scmCar.MakerCode; // メーカーコード
            scmAcOdrDtCarRow.ModelCode = scmCar.ModelCode; // 車種コード
            scmAcOdrDtCarRow.ModelSubCode = scmCar.ModelSubCode; // 車種サブコード
            scmAcOdrDtCarRow.ModelName = scmCar.ModelName; // 車種名
            scmAcOdrDtCarRow.CarInspectCertModel = scmCar.CarInspectCertModel; // 車検証型式
            scmAcOdrDtCarRow.FullModel = scmCar.FullModel; // 型式（フル型）
            scmAcOdrDtCarRow.FrameNo = scmCar.FrameNo; // 車台番号
            scmAcOdrDtCarRow.FrameModel = scmCar.FrameModel; // 車台型式
            scmAcOdrDtCarRow.ChassisNo = scmCar.ChassisNo; // シャシーNo
            scmAcOdrDtCarRow.CarProperNo = scmCar.CarProperNo; // 車両固有番号
            scmAcOdrDtCarRow.ProduceTypeOfYearNum = scmCar.ProduceTypeOfYearNum; // 生産年式（NUMタイプ）
            scmAcOdrDtCarRow.Comment = scmCar.Comment; // コメント
            scmAcOdrDtCarRow.RpColorCode = scmCar.RpColorCode; // リペアカラーコード
            scmAcOdrDtCarRow.ColorName1 = scmCar.ColorName1; // カラー名称1
            scmAcOdrDtCarRow.TrimCode = scmCar.TrimCode; // トリムコード
            scmAcOdrDtCarRow.TrimName = scmCar.TrimName; // トリム名称
            scmAcOdrDtCarRow.Mileage = scmCar.Mileage; // 車両走行距離
            scmAcOdrDtCarRow.EquipObj = scmCar.EquipObj; // 装備オブジェクト配列
            scmAcOdrDtCarRow.AcptAnOdrStatus = this._salesSlip.AcptAnOdrStatus; // 受注ステータス
            scmAcOdrDtCarRow.SalesSlipNum = scmCar.SalesSlipNum; // 売上伝票入力
            // ----- ADD 2011/09/21 ----- >>>>>
            scmAcOdrDtCarRow.CarNo = scmCar.CarNo; // 号車
            scmAcOdrDtCarRow.MakerName = scmCar.MakerName; // メーカー名称
            scmAcOdrDtCarRow.GradeName = scmCar.GradeName; // グレード名称
            scmAcOdrDtCarRow.BodyName = scmCar.BodyName; // ボディー名称
            scmAcOdrDtCarRow.DoorCount = scmCar.DoorCount; // ドア数
            scmAcOdrDtCarRow.EngineModelNm = scmCar.EngineModelNm; // エンジン型式名称
            scmAcOdrDtCarRow.CmnNmEngineDisPlace = scmCar.CmnNmEngineDisPlace; // 通称排気量
            scmAcOdrDtCarRow.EngineModel = scmCar.EngineModel; // 原動機型式（エンジン）
            scmAcOdrDtCarRow.NumberOfGear = scmCar.NumberOfGear; // 変速段数
            scmAcOdrDtCarRow.GearNm = scmCar.GearNm; // 変速機名称
            scmAcOdrDtCarRow.EDivNm = scmCar.EDivNm; // E区分名称
            scmAcOdrDtCarRow.TransmissionNm = scmCar.TransmissionNm; // ミッション名称
            scmAcOdrDtCarRow.ShiftNm = scmCar.ShiftNm; // シフト名称
            // ----- ADD 2011/09/21 ----- <<<<<
            // ADD 2012/05/31 -------------------------------------------------->>>>>
            scmAcOdrDtCarRow.FirstEntryDateNumTyp = scmCar.FirstEntryDateNumTyp; // 初年度（NUMタイプ）
            scmAcOdrDtCarRow.CarAddInf = scmCar.CarAddInf; // 車両付加情報オブジェクト
            scmAcOdrDtCarRow.EquipPrtsObj = scmCar.EquipPrtsObj; // 装備部品オブジェクト
            // ADD 2012/05/31 --------------------------------------------------<<<<<
            // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------->>>>>
            scmAcOdrDtCarRow.CarMngCode = scmCar.CarMngCode; // 車両管理コード
            // ADD 2013/04/19 SCM障害№10521対応 -----------------------------------<<<<<
            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
            scmAcOdrDtCarRow.ExpectedCeDate = scmCar.ExpectedCeDate; // 入庫予定日
            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
            #endregion
        }

        /// <summary>
        /// SCM受注データ(車両情報)オブジェクトを元にSCM受注データ(車両情報)テーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="scmAcOdrDtCarRow"></param>
        /// <returns></returns>
        private ScmDataSet.SCMAcOdrDtCarRow CreateSCMAcOdrDtCarRowFromUIData(SalesSlip salesSlip, List<SalesDetail> salesDetailList, ScmDataSet.SCMAcOdrDtCarRow scmAcOdrDtCarRow)
        {
            //ScmDataSet.SCMAcOdrDtCarRow scmAcOdrDtCarRow = scmAcOdrDtCarDataTable.NewSCMAcOdrDtCarRow();

            // 車両情報が設定されている明細を取得
            SalesDetail salesDetail = salesDetailList.Find(
                delegate(SalesDetail sales)
                {
                    if (sales.CarRelationGuid != Guid.Empty)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                );
            if (salesDetail == null) return null;

            //this.DefaultSettingSCMAcOdrDtCarRow(ref scmAcOdrDtCarRow);

            this.SetRowFromUIData(ref scmAcOdrDtCarRow, salesSlip, salesDetail);
            return scmAcOdrDtCarRow;
        }

        /// <summary>
        /// SCM受注データ(車両情報)テーブル行オブジェクトに初期値をセットします。
        /// </summary>
        /// <param name="scmAcOdrDtCarRow"></param>
        private void DefaultSettingSCMAcOdrDtCarRow(ref ScmDataSet.SCMAcOdrDtCarRow scmAcOdrDtCarRow)
        {
            #region 項目セット
            scmAcOdrDtCarRow.CreateDateTime = DateTime.MinValue; // 作成日時
            scmAcOdrDtCarRow.UpdateDateTime = DateTime.MinValue; // 更新日時
            scmAcOdrDtCarRow.EnterpriseCode = string.Empty; // 企業コード
            scmAcOdrDtCarRow.FileHeaderGuid = Guid.Empty; // GUID
            scmAcOdrDtCarRow.UpdEmployeeCode = string.Empty; // 更新従業員コード
            scmAcOdrDtCarRow.UpdAssemblyId1 = string.Empty; // 更新アセンブリID1
            scmAcOdrDtCarRow.UpdAssemblyId2 = string.Empty; // 更新アセンブリID2
            scmAcOdrDtCarRow.LogicalDeleteCode = 0; // 論理削除区分
            scmAcOdrDtCarRow.InqOriginalEpCd = string.Empty; // 問合せ元企業コード
            scmAcOdrDtCarRow.InqOriginalSecCd = string.Empty; // 問合せ元拠点コード
            scmAcOdrDtCarRow.InquiryNumber = 0; // 問合せ番号
            scmAcOdrDtCarRow.NumberPlate1Code = 0; // 陸運事務所番号
            scmAcOdrDtCarRow.NumberPlate1Name = string.Empty; // 陸運事務局名称
            scmAcOdrDtCarRow.NumberPlate2 = string.Empty; // 車両登録番号（種別）
            scmAcOdrDtCarRow.NumberPlate3 = string.Empty; // 車両登録番号（カナ）
            scmAcOdrDtCarRow.NumberPlate4 = 0; // 車両登録番号（プレート番号）
            scmAcOdrDtCarRow.ModelDesignationNo = 0; // 型式指定番号
            scmAcOdrDtCarRow.CategoryNo = 0; // 類別番号
            scmAcOdrDtCarRow.MakerCode = 0; // メーカーコード
            scmAcOdrDtCarRow.ModelCode = 0; // 車種コード
            scmAcOdrDtCarRow.ModelSubCode = 0; // 車種サブコード
            scmAcOdrDtCarRow.ModelName = string.Empty; // 車種名
            scmAcOdrDtCarRow.CarInspectCertModel = string.Empty; // 車検証型式
            scmAcOdrDtCarRow.FullModel = string.Empty; // 型式（フル型）
            scmAcOdrDtCarRow.FrameNo = string.Empty; // 車台番号
            scmAcOdrDtCarRow.FrameModel = string.Empty; // 車台型式
            scmAcOdrDtCarRow.ChassisNo = string.Empty; // シャシーNo
            scmAcOdrDtCarRow.CarProperNo = 0; // 車両固有番号
            scmAcOdrDtCarRow.ProduceTypeOfYearNum = 0; // 生産年式（NUMタイプ）
            scmAcOdrDtCarRow.Comment = string.Empty; // コメント
            scmAcOdrDtCarRow.RpColorCode = string.Empty; // リペアカラーコード
            scmAcOdrDtCarRow.ColorName1 = string.Empty; // カラー名称1
            scmAcOdrDtCarRow.TrimCode = string.Empty; // トリムコード
            scmAcOdrDtCarRow.TrimName = string.Empty; // トリム名称
            scmAcOdrDtCarRow.Mileage = 0; // 車両走行距離
            // UPD 2012/05/31 -------------------------------------------------->>>>>
            //scmAcOdrDtCarRow.EquipObj = null; // 装備オブジェクト配列
            scmAcOdrDtCarRow.EquipObj = new Byte[0]; // 装備オブジェクト配列
            // UPD 2012/05/31 --------------------------------------------------<<<<<
            scmAcOdrDtCarRow.AcptAnOdrStatus = 0; // 受注ステータス
            scmAcOdrDtCarRow.SalesSlipNum = ctDefaultSalesSlipNum; // 売上伝票番号
            // ADD 2012/05/31 -------------------------------------------------->>>>>
            scmAcOdrDtCarRow.FirstEntryDateNumTyp = 0; // 初年度（NUMタイプ）
            scmAcOdrDtCarRow.CarAddInf = new Byte[0]; // 車両付加情報オブジェクト
            scmAcOdrDtCarRow.EquipPrtsObj = new Byte[0]; // 装備部品オブジェクト
            // ADD 2012/05/31 --------------------------------------------------<<<<<
            // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------->>>>>
            scmAcOdrDtCarRow.CarMngCode = string.Empty; // 車両管理コード
            // ADD 2013/04/19 SCM障害№10521対応 -----------------------------------<<<<<
            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
            scmAcOdrDtCarRow.ExpectedCeDate = 0; // 入庫予定日
            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
            #endregion
        }

        /// <summary>
        /// SCM受注データ(車両情報)ワークオブジェクトからSCM受注データ(車両情報)行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="scmAcOdrDtCarRow"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetail"></param>
        /// <remarks>
        /// <br>Update Note: 2015/12/04 斉勝</br>
        /// <br>管理番号   : 11170204-00 </br>
        /// <br>           : Redmine#47421 【№349】売上伝票入力の障害対応</br>
        /// <br>           : SCM受注データ(車両情報)の「車台番号」の設定に、車両情報の「車台型式-車台番号」が30桁超える場合、「車台番号」のみ設定する。(「車台型式」は設定しない)</br>
        /// </remarks>
        private void SetRowFromUIData(ref ScmDataSet.SCMAcOdrDtCarRow scmAcOdrDtCarRow, SalesSlip salesSlip, SalesDetail salesDetail)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this._carInfoDataTable.FindByCarRelationGuid(salesDetail.CarRelationGuid);
            if (carInfoRow == null) return;

            #region 項目セット
            //scmAcOdrDtCarRow.CreateDateTime = scmCar.CreateDateTime; // 作成日時
            //scmAcOdrDtCarRow.UpdateDateTime = scmCar.UpdateDateTime; // 更新日時
            //scmAcOdrDtCarRow.EnterpriseCode = scmCar.EnterpriseCode; // 企業コード
            //scmAcOdrDtCarRow.FileHeaderGuid = scmCar.FileHeaderGuid; // GUID
            //scmAcOdrDtCarRow.UpdEmployeeCode = scmCar.UpdEmployeeCode; // 更新従業員コード
            //scmAcOdrDtCarRow.UpdAssemblyId1 = scmCar.UpdAssemblyId1; // 更新アセンブリID1
            //scmAcOdrDtCarRow.UpdAssemblyId2 = scmCar.UpdAssemblyId2; // 更新アセンブリID2
            //scmAcOdrDtCarRow.LogicalDeleteCode = scmCar.LogicalDeleteCode; // 論理削除区分
            scmAcOdrDtCarRow.InqOriginalEpCd = salesSlip.InqOriginalEpCd.Trim(); // 問合せ元企業コード//@@@@20230303
            scmAcOdrDtCarRow.InqOriginalSecCd = salesSlip.InqOriginalSecCd; // 問合せ元拠点コード
            scmAcOdrDtCarRow.InquiryNumber = salesSlip.InquiryNumber; // 問合せ番号
            //scmAcOdrDtCarRow.NumberPlate1Code = scmCar.NumberPlate1Code; // 陸運事務所番号
            //scmAcOdrDtCarRow.NumberPlate1Name = scmCar.NumberPlate1Name; // 陸運事務局名称
            //scmAcOdrDtCarRow.NumberPlate2 = scmCar.NumberPlate2; // 車両登録番号（種別）
            //scmAcOdrDtCarRow.NumberPlate3 = scmCar.NumberPlate3; // 車両登録番号（カナ）
            //scmAcOdrDtCarRow.NumberPlate4 = scmCar.NumberPlate4; // 車両登録番号（プレート番号）
            scmAcOdrDtCarRow.ModelDesignationNo = carInfoRow.ModelDesignationNo; // 型式指定番号
            scmAcOdrDtCarRow.CategoryNo = carInfoRow.CategoryNo; // 類別番号
            scmAcOdrDtCarRow.MakerCode = carInfoRow.MakerCode; // メーカーコード

            scmAcOdrDtCarRow.ModelCode = carInfoRow.ModelCode; // 車種コード
            scmAcOdrDtCarRow.ModelSubCode = carInfoRow.ModelSubCode; // 車種サブコード
            scmAcOdrDtCarRow.ModelName = carInfoRow.ModelFullName; // 車種名
            //scmAcOdrDtCarRow.CarInspectCertModel = scmCar.CarInspectCertModel; // 車検証型式
            //>>>2011/03/09
            string carInspectCertModel = string.Empty;
            if (carInfoRow.ExhaustGasSign.Trim() != string.Empty)
            {
                carInspectCertModel = carInfoRow.ExhaustGasSign.Trim();
                if (carInfoRow.SeriesModel.Trim() != string.Empty) carInspectCertModel = carInspectCertModel + '-' + carInfoRow.SeriesModel.Trim();
            }
            else
            {
                if (carInfoRow.SeriesModel.Trim() != string.Empty) carInspectCertModel = carInfoRow.SeriesModel.Trim();
            }
            // UPD 2013/10/02 吉岡 配信日未定 SCM仕掛一覧№10577対応 ---------------------------------------->>>>>
            // scmAcOdrDtCarRow.CarInspectCertModel = carInspectCertModel; // 車検証型式
            if (!string.IsNullOrEmpty(carInspectCertModel))
            {
                scmAcOdrDtCarRow.CarInspectCertModel = carInspectCertModel; // 車検証型式
            }
            // UPD 2013/10/02 吉岡 配信日未定 SCM仕掛一覧№10577対応 ---------------------------------------->>>>>

            //<<<2011/03/09
            scmAcOdrDtCarRow.FullModel = carInfoRow.FullModel; // 型式（フル型）
            // DEL 2013/05/08 T.Yoshioka 2013/05/22配信 システムテスト障害№7、№9 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            #region 旧ソース
            //// ----- DEL 2011/10/14 --------------------------->>>>>
            ////scmAcOdrDtCarRow.FrameNo = carInfoRow.FrameNo; // 車台番号
            //// ----- DEL 2011/10/14 ---------------------------<<<<<
            //// ----- ADD 2011/10/14 --------------------------->>>>>
            //if (string.IsNullOrEmpty(carInfoRow.FrameModel))
            //{
            //    if (string.IsNullOrEmpty(carInfoRow.FrameNo))
            //    {
            //        scmAcOdrDtCarRow.FrameNo = string.Empty; // 車台番号
            //    }
            //    else
            //    {
            //        scmAcOdrDtCarRow.FrameNo = carInfoRow.FrameNo; // 車台番号
            //    }
            //}
            //else
            //{
            //    if (string.IsNullOrEmpty(carInfoRow.FrameNo))
            //    {
            //        scmAcOdrDtCarRow.FrameNo = carInfoRow.FrameModel; // 車台番号
            //    }
            //    else
            //    {
            //        scmAcOdrDtCarRow.FrameNo = carInfoRow.FrameModel + "-" + carInfoRow.FrameNo; // 車台番号
            //    }
            //}
            //// ----- ADD 2011/10/14 ---------------------------<<<<<
            #endregion
            // DEL 2013/05/08 T.Yoshioka 2013/05/22配信 システムテスト障害№7、№9 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // ADD 2013/05/08 T.Yoshioka 2013/05/22配信 システムテスト障害№7、№9 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            // 国産／外車区分による分岐　１：国産　２：外車
            if (carInfoRow.DomesticForeignCode == 2)
            {
                // SPK対応　外車の場合
                if (string.IsNullOrEmpty(carInfoRow.FrameNo))
                {
                    scmAcOdrDtCarRow.FrameNo = string.Empty; // 車台番号
                }
                else
                {
                    scmAcOdrDtCarRow.FrameNo = carInfoRow.FrameNo; // 車台番号
                }
            }
            else
            {
                // 外車ではない場合
                if (string.IsNullOrEmpty(carInfoRow.FrameModel))
                {
                    if (string.IsNullOrEmpty(carInfoRow.FrameNo))
                    {
                        scmAcOdrDtCarRow.FrameNo = string.Empty; // 車台番号
                    }
                    else
                    {
                        scmAcOdrDtCarRow.FrameNo = carInfoRow.FrameNo; // 車台番号
                    }
                }
                else
                {
                    if (string.IsNullOrEmpty(carInfoRow.FrameNo))
                    {
                        scmAcOdrDtCarRow.FrameNo = carInfoRow.FrameModel; // 車台番号
                    }
                    else
                    {
                        //scmAcOdrDtCarRow.FrameNo = carInfoRow.FrameModel + "-" + carInfoRow.FrameNo; // 車台番号//DEL 2015/12/04 斉勝 Redmine#47421 【№349】売上伝票入力の障害対応 
                        // ----- ADD 2015/12/04 斉勝 Redmine#47421 【№349】売上伝票入力の障害対応 ----->>>>>
                        // SCM受注データ(車両情報)の「車台番号」の設定に、車両情報の「車台型式-車台番号」が30桁超える場合、
						//「車台番号」のみ設定する。(「車台型式」は設定しない)
						string tempFrameNo = carInfoRow.FrameModel + "-" + carInfoRow.FrameNo;
						if (tempFrameNo.Length > 30)
                        {
                            scmAcOdrDtCarRow.FrameNo = carInfoRow.FrameNo;
                        }
                        else
                        {
							scmAcOdrDtCarRow.FrameNo = tempFrameNo;
                        }
                        // ----- ADD 2015/12/04 斉勝 Redmine#47421 【№349】売上伝票入力の障害対応 -----<<<<<
                    }
                }
            }
            // ADD 2013/05/08 T.Yoshioka 2013/05/22配信 システムテスト障害№7、№9 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

            scmAcOdrDtCarRow.FrameModel = carInfoRow.FrameModel; // 車台型式
            //scmAcOdrDtCarRow.ChassisNo = scmCar.ChassisNo; // シャシーNo
            //scmAcOdrDtCarRow.CarProperNo = scmCar.CarProperNo; // 車両固有番号
            //scmAcOdrDtCarRow.ProduceTypeOfYearNum = scmCar.ProduceTypeOfYearNum; // 生産年式（NUMタイプ）
            //>>>2011/03/07
            int yy = carInfoRow.ProduceTypeOfYearInput / 100;
            int mm = carInfoRow.ProduceTypeOfYearInput % 100;
            if ((yy != 0) && (mm != 0)) scmAcOdrDtCarRow.ProduceTypeOfYearNum = carInfoRow.ProduceTypeOfYearInput; // 生産年式（NUMタイプ）
            //<<<2011/03/07
            //scmAcOdrDtCarRow.Comment = scmCar.Comment; // コメント
            scmAcOdrDtCarRow.RpColorCode = carInfoRow.ColorCode; // リペアカラーコード
            scmAcOdrDtCarRow.ColorName1 = carInfoRow.ColorName1; // カラー名称1
            scmAcOdrDtCarRow.TrimCode = carInfoRow.TrimCode; // トリムコード
            scmAcOdrDtCarRow.TrimName = carInfoRow.TrimName; // トリム名称
            //scmAcOdrDtCarRow.Mileage = scmCar.Mileage; // 車両走行距離
            // DEL 2012/05/31 -------------------------------------------------->>>>>
            //scmAcOdrDtCarRow.EquipObj = this.GetEquipInfoRows(carInfoRow.CarRelationGuid); // 装備オブジェクト配列
            // DEL 2012/05/31 -------------------------------------------------->>>>>
            scmAcOdrDtCarRow.AcptAnOdrStatus = salesSlip.AcptAnOdrStatus; // 受注ステータス
            scmAcOdrDtCarRow.SalesSlipNum = salesSlip.SalesSlipNum; // 売上伝票番号

            // ----- ADD 2011/09/21 ----- >>>>>
            //>>>2012/06/24
            //scmAcOdrDtCarRow.CarNo = string.Empty; // 号車 
            //<<<2012/06/24
            scmAcOdrDtCarRow.MakerName = carInfoRow.MakerFullName; // メーカー名称
            scmAcOdrDtCarRow.GradeName = carInfoRow.ModelGradeNm; // グレード名称
            scmAcOdrDtCarRow.BodyName = carInfoRow.BodyName; // ボディー名称

            scmAcOdrDtCarRow.DoorCount = carInfoRow.DoorCount; // ドア数

            // --- ADD 三戸 2012/07/11 ---------->>>>>
            // "EngineModel"は"carInfoRow"としてキャッシュしていない為、ここでセットが出来ない
            // よって、"scmAcOdrDtCarRow.EngineModelNm(SFからきたデータ)とcarInfoRow.EngineModelNm(画面上のデータ)"に変更がない場合は、
            // SFからのデータをそのまま活かす
            if (!scmAcOdrDtCarRow.EngineModelNm.Trim().Equals(carInfoRow.EngineModelNm))
                scmAcOdrDtCarRow.EngineModel = string.Empty;
            // --- ADD 三戸 2012/07/11 ----------<<<<<

            scmAcOdrDtCarRow.EngineModelNm = carInfoRow.EngineModelNm; // エンジン型式名称

            // 通称排気量
            if (!string.IsNullOrEmpty(carInfoRow.EngineDisplaceNm))
            {
                int cmnNmEngineDisPlace = 0;

                try
                {
                    // 通称排気量取得
                    string strValue = carInfoRow.EngineDisplaceNm;

                    // NULLチェック
                    if (!String.IsNullOrEmpty(strValue))
                    {
                        cmnNmEngineDisPlace = Convert.ToInt32(strValue);
                    }
                }
                catch
                {
                    // 何もしない。
                }
                scmAcOdrDtCarRow.CmnNmEngineDisPlace = cmnNmEngineDisPlace; // 通称排気量
            }

            // --- DEL 三戸 2012/07/11 ---------->>>>>
            //scmAcOdrDtCarRow.EngineModel = string.Empty; // 原動機型式（エンジン）
            // --- DEL 三戸 2012/07/11 ----------<<<<<

            scmAcOdrDtCarRow.NumberOfGear = 0; // 変速段数
            scmAcOdrDtCarRow.GearNm = string.Empty; // 変速機名称
            scmAcOdrDtCarRow.EDivNm = carInfoRow.EDivNm; // E区分名称
            scmAcOdrDtCarRow.TransmissionNm = carInfoRow.TransmissionNm; // ミッション名称
            scmAcOdrDtCarRow.ShiftNm = carInfoRow.ShiftNm; // シフト名称
            // ----- ADD 2011/09/21 ----- <<<<<
            // --- ADD 高川 2012/05/31 №135 ---------->>>>>
            scmAcOdrDtCarRow.GradeFullName = carInfoRow.GradeFullName; // グレード名称（全角）
            // --- ADD 高川 2012/05/31 №135 ----------<<<<<

            // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------->>>>>
            scmAcOdrDtCarRow.CarMngCode = carInfoRow.CarMngCode; // 車両管理コード
            scmAcOdrDtCarRow.NumberPlate1Code = carInfoRow.NumberPlate1Code; // 陸運事務所番号
            scmAcOdrDtCarRow.NumberPlate1Name = carInfoRow.NumberPlate1Name; // 陸運事務局名称
            scmAcOdrDtCarRow.NumberPlate2 = carInfoRow.NumberPlate2; // 車両登録番号（種別）
            scmAcOdrDtCarRow.NumberPlate3 = carInfoRow.NumberPlate3; // 車両登録番号（カナ）
            scmAcOdrDtCarRow.NumberPlate4 = carInfoRow.NumberPlate4; // 車両登録番号（プレート番号）
            // ADD 2013/04/19 SCM障害№10521対応 -----------------------------------<<<<<
            #endregion
        }

        /// <summary>
        /// SCM受注データ(車両情報)ワークオブジェクトをSCM受注データ(車両情報)行オブジェクトより取得します。
        /// </summary>
        /// <param name="scmAcOdrDtCarRow"></param>
        /// <returns></returns>
        private SCMAcOdrDtCarWork GetParamDataFromSCMAcOdrDtCarRow(ScmDataSet.SCMAcOdrDtCarRow scmAcOdrDtCarRow)
        {
            SCMAcOdrDtCarWork scmAcOdrDtCarWork = new SCMAcOdrDtCarWork();

            #region 項目セット
            scmAcOdrDtCarWork.CreateDateTime = scmAcOdrDtCarRow.CreateDateTime; // 作成日時
            scmAcOdrDtCarWork.UpdateDateTime = scmAcOdrDtCarRow.UpdateDateTime; // 更新日時
            scmAcOdrDtCarWork.EnterpriseCode = this._enterpriseCode; // 企業コード
            scmAcOdrDtCarWork.FileHeaderGuid = scmAcOdrDtCarRow.FileHeaderGuid; // GUID
            scmAcOdrDtCarWork.UpdEmployeeCode = scmAcOdrDtCarRow.UpdEmployeeCode; // 更新従業員コード
            scmAcOdrDtCarWork.UpdAssemblyId1 = scmAcOdrDtCarRow.UpdAssemblyId1; // 更新アセンブリID1
            scmAcOdrDtCarWork.UpdAssemblyId2 = scmAcOdrDtCarRow.UpdAssemblyId2; // 更新アセンブリID2
            scmAcOdrDtCarWork.LogicalDeleteCode = scmAcOdrDtCarRow.LogicalDeleteCode; // 論理削除区分
            scmAcOdrDtCarWork.InqOriginalEpCd = scmAcOdrDtCarRow.InqOriginalEpCd.Trim(); // 問合せ元企業コード//@@@@20230303
            scmAcOdrDtCarWork.InqOriginalSecCd = scmAcOdrDtCarRow.InqOriginalSecCd; // 問合せ元拠点コード
            scmAcOdrDtCarWork.InquiryNumber = scmAcOdrDtCarRow.InquiryNumber; // 問合せ番号
            scmAcOdrDtCarWork.NumberPlate1Code = scmAcOdrDtCarRow.NumberPlate1Code; // 陸運事務所番号
            scmAcOdrDtCarWork.NumberPlate1Name = scmAcOdrDtCarRow.NumberPlate1Name; // 陸運事務局名称
            scmAcOdrDtCarWork.NumberPlate2 = scmAcOdrDtCarRow.NumberPlate2; // 車両登録番号（種別）
            scmAcOdrDtCarWork.NumberPlate3 = scmAcOdrDtCarRow.NumberPlate3; // 車両登録番号（カナ）
            scmAcOdrDtCarWork.NumberPlate4 = scmAcOdrDtCarRow.NumberPlate4; // 車両登録番号（プレート番号）
            scmAcOdrDtCarWork.ModelDesignationNo = scmAcOdrDtCarRow.ModelDesignationNo; // 型式指定番号
            scmAcOdrDtCarWork.CategoryNo = scmAcOdrDtCarRow.CategoryNo; // 類別番号
            scmAcOdrDtCarWork.MakerCode = scmAcOdrDtCarRow.MakerCode; // メーカーコード
            scmAcOdrDtCarWork.ModelCode = scmAcOdrDtCarRow.ModelCode; // 車種コード
            scmAcOdrDtCarWork.ModelSubCode = scmAcOdrDtCarRow.ModelSubCode; // 車種サブコード
            scmAcOdrDtCarWork.ModelName = scmAcOdrDtCarRow.ModelName; // 車種名
            scmAcOdrDtCarWork.CarInspectCertModel = scmAcOdrDtCarRow.CarInspectCertModel; // 車検証型式
            // ----- UPDATE 2012/06/12 ----->>>>>>>>>>>>>>>>>>> No.134修正漏れ
            // ----- UPDATE 2012/05/25 ----->>>>>>>>>>>>>>>>>>>
            //scmAcOdrDtCarWork.FullModel = scmAcOdrDtCarRow.FullModel; // 型式（フル型）
            // ---UPD 譚洪 2020/12/31 PMKOBETSU-4100の対応 ------>>>>
            //scmAcOdrDtCarWork.FullModel = this.GetFullModel(scmAcOdrDtCarRow); // 型式（フル型）
            scmAcOdrDtCarWork.FullModel = scmAcOdrDtCarRow.FullModel; // 型式（フル型）
            // ---UPD 譚洪 2020/12/31 PMKOBETSU-4100の対応 ------<<<<
            // ----- UPDATE 2012/05/25 -----<<<<<<<<<<<<<<<<<<<<<<<
            // ----- UPDATE 2012/06/12 -----<<<<<<<<<<<<<<<<<<<<<<<
            scmAcOdrDtCarWork.FrameNo = scmAcOdrDtCarRow.FrameNo; // 車台番号
            scmAcOdrDtCarWork.FrameModel = scmAcOdrDtCarRow.FrameModel; // 車台型式
            scmAcOdrDtCarWork.ChassisNo = scmAcOdrDtCarRow.ChassisNo; // シャシーNo
            scmAcOdrDtCarWork.CarProperNo = scmAcOdrDtCarRow.CarProperNo; // 車両固有番号
            scmAcOdrDtCarWork.ProduceTypeOfYearNum = scmAcOdrDtCarRow.ProduceTypeOfYearNum; // 生産年式（NUMタイプ）
            scmAcOdrDtCarWork.Comment = scmAcOdrDtCarRow.Comment; // コメント
            scmAcOdrDtCarWork.RpColorCode = scmAcOdrDtCarRow.RpColorCode; // リペアカラーコード
            scmAcOdrDtCarWork.ColorName1 = scmAcOdrDtCarRow.ColorName1; // カラー名称1
            scmAcOdrDtCarWork.TrimCode = scmAcOdrDtCarRow.TrimCode; // トリムコード
            scmAcOdrDtCarWork.TrimName = scmAcOdrDtCarRow.TrimName; // トリム名称
            scmAcOdrDtCarWork.Mileage = scmAcOdrDtCarRow.Mileage; // 車両走行距離
            scmAcOdrDtCarWork.EquipObj = scmAcOdrDtCarRow.EquipObj; // 装備オブジェクト
            scmAcOdrDtCarWork.AcptAnOdrStatus = scmAcOdrDtCarRow.AcptAnOdrStatus; // 受注ステータス
            scmAcOdrDtCarWork.SalesSlipNum = scmAcOdrDtCarRow.SalesSlipNum; // 売上伝票番号
            // ----- ADD 2011/09/21 ----- >>>>>
            scmAcOdrDtCarWork.CarNo = scmAcOdrDtCarRow.CarNo; // 号車
            scmAcOdrDtCarWork.MakerName = scmAcOdrDtCarRow.MakerName; // メーカー名称
            // --- UPD 高川 2012/05/31 №135 ---------->>>>>
            //scmAcOdrDtCarWork.GradeName = scmAcOdrDtCarRow.GradeName; // グレード名称
            scmAcOdrDtCarWork.GradeName = scmAcOdrDtCarRow.GradeFullName; // グレード名称（全角）
            // --- UPD 高川 2012/05/31 №135 ----------<<<<<
            scmAcOdrDtCarWork.BodyName = scmAcOdrDtCarRow.BodyName; // ボディー名称
            scmAcOdrDtCarWork.DoorCount = scmAcOdrDtCarRow.DoorCount; // ドア数
            scmAcOdrDtCarWork.EngineModelNm = scmAcOdrDtCarRow.EngineModelNm; // エンジン型式名称
            scmAcOdrDtCarWork.CmnNmEngineDisPlace = scmAcOdrDtCarRow.CmnNmEngineDisPlace; // 通称排気量
            scmAcOdrDtCarWork.EngineModel = scmAcOdrDtCarRow.EngineModel; // 原動機型式（エンジン）
            scmAcOdrDtCarWork.NumberOfGear = scmAcOdrDtCarRow.NumberOfGear; // 変速段数
            scmAcOdrDtCarWork.GearNm = scmAcOdrDtCarRow.GearNm; // 変速機名称
            scmAcOdrDtCarWork.EDivNm = scmAcOdrDtCarRow.EDivNm; // E区分名称
            scmAcOdrDtCarWork.TransmissionNm = scmAcOdrDtCarRow.TransmissionNm; // ミッション名称
            scmAcOdrDtCarWork.ShiftNm = scmAcOdrDtCarRow.ShiftNm; // シフト名称
            // ----- ADD 2011/09/21 ----- <<<<<
            // ADD 2012/05/31 -------------------------------------------------->>>>>
            scmAcOdrDtCarWork.FirstEntryDateNumTyp = scmAcOdrDtCarRow.FirstEntryDateNumTyp; // 初年度（NUMタイプ）
            scmAcOdrDtCarWork.CarAddInf = scmAcOdrDtCarRow.CarAddInf; // 車両付加情報オブジェクト
            scmAcOdrDtCarWork.EquipPrtsObj = scmAcOdrDtCarRow.EquipPrtsObj; // 装備部品オブジェクト
            // ADD 2012/05/31 --------------------------------------------------<<<<<

            // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------->>>>>
            scmAcOdrDtCarWork.CarMngCode = scmAcOdrDtCarRow.CarMngCode; // 車両管理コード
            // ADD 2013/04/19 SCM障害№10521対応 -----------------------------------<<<<<
            // ADD 2013/05/09 SCM障害№10384対応 ----------------------------------->>>>>
            scmAcOdrDtCarWork.ExpectedCeDate = scmAcOdrDtCarRow.ExpectedCeDate; // 入庫予定日
            // ADD 2013/05/09 SCM障害№10384対応 -----------------------------------<<<<<
            #endregion

            return scmAcOdrDtCarWork;
        }
        #endregion

        
        // ----- ADD 2012/05/25 ----->>>>>>>>>>>>>>>>>>>
        /* ---DEL 譚洪 2020/12/31 PMKOBETSU-4100の対応 ------>>>>
        /// <summary>
        /// 画面に入力されている型式が完全なフル型式かを判断し、
        /// 状態に応じて型式（フル型）に設定する値を返す
        /// </summary>
        /// <param name="scmAcOdrDtCarRow">対象車両情報</param>
        /// <returns> 型式が完全なフル型式の場合：無編集で完全なフル型式を返す
        /// 　　　　　型式が完全なフル型式ではない場合：空白を返す　　　　
        /// 　　　　　車両情報検索時エラー：無編集でフル型式を返す
        /// </returns>
        private string GetFullModel(ScmDataSet.SCMAcOdrDtCarRow scmAcOdrDtCarRow)
        {
            // 検索条件の設定
            CarSearchCondition condition = new CarSearchCondition();
            condition.Type = CarSearchType.csModel;
            condition.MakerCode = scmAcOdrDtCarRow.MakerCode;
            condition.ModelCode = scmAcOdrDtCarRow.ModelCode;
            condition.ModelSubCode = scmAcOdrDtCarRow.ModelSubCode;
            condition.CarModel.FullModel = scmAcOdrDtCarRow.FullModel;

            // 検索実行
            CarSearchResultReport ret;
            PMKEN01010E dat = new PMKEN01010E();
            // UPD 2013/12/24 SCM仕掛一覧№10619対応 ----------------------------->>>>>
            //ret = this.SearchCar(condition, ref dat);

            // 車両検索条件がない時、検索しない
            if (condition.ModelDesignationNo == 0 &&             // 型式指定番号
                condition.CategoryNo == 0 &&                     // 類別区分番号
                condition.CarModel.FullModel == string.Empty)    // 型式(フル型)
            {
                ret = CarSearchResultReport.retFailed;
            }
            else
            {
                ret = this.SearchCar(condition, ref dat);
            }
            // UPD 2013/12/24 SCM仕掛一覧№10619対応 -----------------------------<<<<<

            // 車両情報取得エラー時は編集無し
            if (ret == CarSearchResultReport.retFailed
                || ret == CarSearchResultReport.retError)
            {
                return scmAcOdrDtCarRow.FullModel;
            }

            // 型式が完全なフル型式として設定されている場合、編集無しでフル型式を返す
            foreach (PMKEN01010E.CarModelInfoRow row in dat.CarModelInfo)
            {
                if (scmAcOdrDtCarRow.FullModel.Trim().Equals(row.FullModel.Trim()))
                {
                    return scmAcOdrDtCarRow.FullModel;
                }
            }

            // 型式が完全なフル型式として設定されていない場合、空白を返す
            return string.Empty;
        }
        // ---DEL 譚洪 2020/12/31 PMKOBETSU-4100の対応 ------<<<< */
        // ----- ADD 2012/05/25 -----<<<<<<<<<<<<<<<<<<<<<<<

        #region SCM受注明細データ(問合せ・発注)操作
        /// <summary>
        /// SCM受注明細データ(問合せ・発注)オブジェクトを元にSCM受注明細データ(問合せ・発注)テーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="scmDetail"></param>
        /// <param name="scmAcOdrDtlIqDataTable"></param>
        /// <returns></returns>
        private ScmDataSet.SCMAcOdrDtlIqRow CreateSCMAcOdrDtlIqRowFromUIData(UserSCMOrderDetailRecord scmDetail, ScmDataSet.SCMAcOdrDtlIqDataTable scmAcOdrDtlIqDataTable)
        {
            ScmDataSet.SCMAcOdrDtlIqRow scmAcOdrDtlIqRow = scmAcOdrDtlIqDataTable.NewSCMAcOdrDtlIqRow();

            this.DefaultSettingSCMAcOdrDtlIqRow(ref scmAcOdrDtlIqRow);

            this.SetRowFromUIData(ref scmAcOdrDtlIqRow, scmDetail);
            return scmAcOdrDtlIqRow;
        }

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)オブジェクトからSCM受注明細データ(問合せ・発注)行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="scmAcOdrDtlIqRow"></param>
        /// <param name="scmDetail"></param>
        private void SetRowFromUIData(ref ScmDataSet.SCMAcOdrDtlIqRow scmAcOdrDtlIqRow, UserSCMOrderDetailRecord scmDetail)
        {
            #region 項目セット
            scmAcOdrDtlIqRow.CreateDateTime = scmDetail.CreateDateTime; // 作成日時
            scmAcOdrDtlIqRow.UpdateDateTime = scmDetail.UpdateDateTime; // 更新日時
            scmAcOdrDtlIqRow.EnterpriseCode = scmDetail.EnterpriseCode; // 企業コード
            scmAcOdrDtlIqRow.FileHeaderGuid = scmDetail.FileHeaderGuid; // GUID
            scmAcOdrDtlIqRow.UpdEmployeeCode = scmDetail.UpdEmployeeCode; // 更新従業員コード
            scmAcOdrDtlIqRow.UpdAssemblyId1 = scmDetail.UpdAssemblyId1; // 更新アセンブリID1
            scmAcOdrDtlIqRow.UpdAssemblyId2 = scmDetail.UpdAssemblyId2; // 更新アセンブリID2
            scmAcOdrDtlIqRow.LogicalDeleteCode = scmDetail.LogicalDeleteCode; // 論理削除区分
            scmAcOdrDtlIqRow.InqOriginalEpCd = scmDetail.InqOriginalEpCd.Trim(); // 問合せ元企業コード//@@@@20230303
            scmAcOdrDtlIqRow.InqOriginalSecCd = scmDetail.InqOriginalSecCd; // 問合せ元拠点コード
            scmAcOdrDtlIqRow.InqOtherEpCd = scmDetail.InqOtherEpCd; // 問合せ先企業コード
            scmAcOdrDtlIqRow.InqOtherSecCd = scmDetail.InqOtherSecCd; // 問合せ先拠点コード
            scmAcOdrDtlIqRow.InquiryNumber = scmDetail.InquiryNumber; // 問合せ番号
            scmAcOdrDtlIqRow.UpdateDate = scmDetail.UpdateDate; // 更新年月日
            scmAcOdrDtlIqRow.UpdateTime = scmDetail.UpdateTime; // 更新時間
            scmAcOdrDtlIqRow.InqRowNumber = scmDetail.InqRowNumber; // 問合せ行番号
            scmAcOdrDtlIqRow.InqRowNumDerivedNo = scmDetail.InqRowNumDerivedNo; // 問合せ行番号枝番
            scmAcOdrDtlIqRow.InqOrgDtlDiscGuid = scmDetail.InqOrgDtlDiscGuid; // 問合せ元明細識別GUID
            scmAcOdrDtlIqRow.InqOthDtlDiscGuid = scmDetail.InqOthDtlDiscGuid; // 問合せ先明細識別GUID
            scmAcOdrDtlIqRow.GoodsDivCd = scmDetail.GoodsDivCd; // 商品種別
            scmAcOdrDtlIqRow.RecyclePrtKindCode = scmDetail.RecyclePrtKindCode; // リサイクル部品種別
            scmAcOdrDtlIqRow.RecyclePrtKindName = scmDetail.RecyclePrtKindName; // リサイクル部品種別名称
            scmAcOdrDtlIqRow.DeliveredGoodsDiv = scmDetail.DeliveredGoodsDiv; // 納品区分
            scmAcOdrDtlIqRow.HandleDivCode = scmDetail.HandleDivCode; // 取扱区分
            scmAcOdrDtlIqRow.GoodsShape = scmDetail.GoodsShape; // 商品形態
            scmAcOdrDtlIqRow.DelivrdGdsConfCd = scmDetail.DelivrdGdsConfCd; // 納品確認区分
            scmAcOdrDtlIqRow.DeliGdsCmpltDueDate = scmDetail.DeliGdsCmpltDueDate; // 納品完了予定日
            scmAcOdrDtlIqRow.AnswerDeliveryDate = scmDetail.AnswerDeliveryDate; // 回答納期
            scmAcOdrDtlIqRow.BLGoodsCode = scmDetail.BLGoodsCode; // BL商品コード
            scmAcOdrDtlIqRow.BLGoodsDrCode = scmDetail.BLGoodsDrCode; // BL商品コード枝番
            scmAcOdrDtlIqRow.InqGoodsName = scmDetail.InqGoodsName; // 問発商品名
            scmAcOdrDtlIqRow.AnsGoodsName = scmDetail.AnsGoodsName; // 回答商品名
            scmAcOdrDtlIqRow.SalesOrderCount = scmDetail.SalesOrderCount; // 発注数
            scmAcOdrDtlIqRow.DeliveredGoodsCount = scmDetail.DeliveredGoodsCount; // 納品数
            scmAcOdrDtlIqRow.GoodsNo = scmDetail.GoodsNo; // 商品番号
            scmAcOdrDtlIqRow.GoodsMakerCd = scmDetail.GoodsMakerCd; // 商品メーカーコード
            scmAcOdrDtlIqRow.GoodsMakerNm = scmDetail.GoodsMakerNm; // 商品メーカー名称
            scmAcOdrDtlIqRow.PureGoodsMakerCd = scmDetail.PureGoodsMakerCd; // 純正商品メーカーコード
            scmAcOdrDtlIqRow.InqPureGoodsNo = scmDetail.InqPureGoodsNo; // 問発純正商品番号
            scmAcOdrDtlIqRow.AnsPureGoodsNo = scmDetail.AnsPureGoodsNo; // 回答純正商品番号
            scmAcOdrDtlIqRow.ListPrice = scmDetail.ListPrice; // 定価
            scmAcOdrDtlIqRow.UnitPrice = scmDetail.UnitPrice; // 単価
            scmAcOdrDtlIqRow.GoodsAddInfo = scmDetail.GoodsAddInfo; // 商品補足情報
            scmAcOdrDtlIqRow.RoughRrofit = scmDetail.RoughRrofit; // 粗利額
            scmAcOdrDtlIqRow.RoughRate = scmDetail.RoughRate; // 粗利率
            scmAcOdrDtlIqRow.AnswerLimitDate = scmDetail.AnswerLimitDate; // 回答期限
            scmAcOdrDtlIqRow.CommentDtl = scmDetail.CommentDtl; // 備考(明細)
            scmAcOdrDtlIqRow.AppendingFileDtl = scmDetail.AppendingFileDtl; // 添付ファイル(明細)
            scmAcOdrDtlIqRow.AppendingFileNmDtl = scmDetail.AppendingFileNmDtl; // 添付ファイル名(明細)
            scmAcOdrDtlIqRow.ShelfNo = scmDetail.ShelfNo; // 棚番
            scmAcOdrDtlIqRow.AdditionalDivCd = scmDetail.AdditionalDivCd; // 追加区分
            scmAcOdrDtlIqRow.CorrectDivCD = scmDetail.CorrectDivCD; // 訂正区分
            scmAcOdrDtlIqRow.InqOrdDivCd = scmDetail.InqOrdDivCd; // 問合せ・発注種別
            scmAcOdrDtlIqRow.DisplayOrder = scmDetail.DisplayOrder; // 表示順位
            //>>>2010/06/30
            scmAcOdrDtlIqRow.CancelCndtinDiv = scmDetail.CancelCndtinDiv; // キャンセル状態区分
            scmAcOdrDtlIqRow.SalesRowNo = scmDetail.SalesRowNo; // 売上行番号
            //<<<2010/06/30
            //>>>2011/05/25
            scmAcOdrDtlIqRow.WarehouseCode = scmDetail.PmWarehouseCd;
            scmAcOdrDtlIqRow.WarehouseName = scmDetail.PmWarehouseName;
            scmAcOdrDtlIqRow.WarehouseShelfNo = scmDetail.PmWarehouseName;
            //<<<2011/05/25

            scmAcOdrDtlIqRow.CampaignCode = scmDetail.CampaignCode;  // ADD 2011/10/10
            
            // 2012/01/16 Add >>>
            scmAcOdrDtlIqRow.GoodsSpecialNote = scmDetail.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<
            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
            scmAcOdrDtlIqRow.AutoEstimatePartsCd = scmDetail.AutoEstimatePartsCd; // 自動見積部品コード
            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlIqRow.SalesTotalTaxInc = scmDetail.SalesTotalTaxInc; // 売上伝票合計（税込）
            scmAcOdrDtlIqRow.SalesTotalTaxExc = scmDetail.SalesTotalTaxExc; // 売上伝票合計（税抜）
            scmAcOdrDtlIqRow.ScmConsTaxLayMethod = scmDetail.ScmConsTaxLayMethod; // SCM消費税転嫁方式
            scmAcOdrDtlIqRow.ConsTaxRate = scmDetail.ConsTaxRate; // 消費税税率
            scmAcOdrDtlIqRow.ScmFractionProcCd = scmDetail.ScmFractionProcCd; // SCM端数処理区分
            scmAcOdrDtlIqRow.AccRecConsTax = scmDetail.AccRecConsTax; // 売掛消費税
            scmAcOdrDtlIqRow.PMSalesDate = scmDetail.PMSalesDate; // PM売上日
            scmAcOdrDtlIqRow.SuppSlpPrtTime = scmDetail.SuppSlpPrtTime; // 仕入先伝票発行時刻
            scmAcOdrDtlIqRow.SalesMoneyTaxInc = scmDetail.SalesMoneyTaxInc; // 売上金額（税込み）
            scmAcOdrDtlIqRow.SalesMoneyTaxExc = scmDetail.SalesMoneyTaxExc; // 売上金額（税抜き）
            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlIqRow.DataInputSystem = scmDetail.DataInputSystem; // データ入力システム
            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
            scmAcOdrDtlIqRow.PrmSetDtlNo2 = scmDetail.PrmSetDtlNo2; // 優良設定詳細コード２
            scmAcOdrDtlIqRow.PrmSetDtlName2 = scmDetail.PrmSetDtlName2; // 優良設定詳細名称２
            scmAcOdrDtlIqRow.StockStatusDiv = scmDetail.StockStatusDiv; // 在庫状況区分
            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
            scmAcOdrDtlIqRow.RentDiv = scmDetail.RentDiv; // 貸出区分            
            scmAcOdrDtlIqRow.MkrSuggestRtPric = scmDetail.MkrSuggestRtPric; // メーカー希望小売価格
            scmAcOdrDtlIqRow.OpenPriceDiv = scmDetail.OpenPriceDiv; // オープン価格区分    
            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
            scmAcOdrDtlIqRow.BgnGoodsDiv = scmDetail.BgnGoodsDiv; // お買得商品選択区分
            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
            scmAcOdrDtlIqRow.ModelPrtsAdptYm = scmDetail.ModelPrtsAdptYm; // 型式別部品採用年月
            scmAcOdrDtlIqRow.ModelPrtsAblsYm = scmDetail.ModelPrtsAblsYm; // 型式別部品廃止年月
            scmAcOdrDtlIqRow.ModelPrtsAdptFrameNo = scmDetail.ModelPrtsAdptFrameNo; // 型式別部品採用車台番号
            scmAcOdrDtlIqRow.ModelPrtsAblsFrameNo = scmDetail.ModelPrtsAblsFrameNo; // 型式別部品廃止車台番号
            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlIqRow.AnsDeliDateDiv = scmDetail.AnsDeliDateDiv; // 回答納期区分
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ---------->>>>>>>>>>
            scmAcOdrDtlIqRow.GoodsSpecialNtForFac = scmDetail.GoodsSpecialNtForFac; // 商品規格・特記事項(工場向け)
            scmAcOdrDtlIqRow.GoodsSpecialNtForCOw = scmDetail.GoodsSpecialNtForCOw; // 商品規格・特記事項(カーオーナー向け)
            scmAcOdrDtlIqRow.PrmSetDtlName2ForFac = scmDetail.PrmSetDtlName2ForFac; // 優良設定詳細名称２(工場向け)
            scmAcOdrDtlIqRow.PrmSetDtlName2ForCOw = scmDetail.PrmSetDtlName2ForCOw; // 優良設定詳細名称２(カーオーナー向け)
            // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ----------<<<<<<<<<<
            #endregion
        }

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)オブジェクトを元にSCM受注明細データ(問合せ・発注)テーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetail"></param>
        /// <param name="scmAcOdrDtlIqDataTable"></param>
        /// <returns></returns>
        private ScmDataSet.SCMAcOdrDtlIqRow CreateSCMAcOdrDtlIqRowFromUIData(SalesSlip salesSlip, SalesDetail salesDetail, ScmDataSet.SCMAcOdrDtlIqDataTable scmAcOdrDtlIqDataTable)
        {
            ScmDataSet.SCMAcOdrDtlIqRow scmAcOdrDtlIqRow = scmAcOdrDtlIqDataTable.NewSCMAcOdrDtlIqRow();

            this.DefaultSettingSCMAcOdrDtlIqRow(ref scmAcOdrDtlIqRow);

            this.SetRowFromUIData(ref scmAcOdrDtlIqRow, salesSlip, salesDetail);
            return scmAcOdrDtlIqRow;
        }

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)テーブル行オブジェクトに初期値をセットします。
        /// </summary>
        /// <param name="scmAcOdrDtlIqRow"></param>
        /// <remarks>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SCM受注明細データ(問合せ・発注)テーブル行オブジェクトに新BLコード等初期値をセットする。</br>
        /// </remarks>
        private void DefaultSettingSCMAcOdrDtlIqRow(ref ScmDataSet.SCMAcOdrDtlIqRow scmAcOdrDtlIqRow)
        {
            #region 項目セット
            scmAcOdrDtlIqRow.CreateDateTime = DateTime.MinValue; // 作成日時
            scmAcOdrDtlIqRow.UpdateDateTime = DateTime.MinValue; // 更新日時
            scmAcOdrDtlIqRow.EnterpriseCode = string.Empty; // 企業コード
            scmAcOdrDtlIqRow.FileHeaderGuid = Guid.Empty; // GUID
            scmAcOdrDtlIqRow.UpdEmployeeCode = string.Empty; // 更新従業員コード
            scmAcOdrDtlIqRow.UpdAssemblyId1 = string.Empty; // 更新アセンブリID1
            scmAcOdrDtlIqRow.UpdAssemblyId2 = string.Empty; // 更新アセンブリID2
            scmAcOdrDtlIqRow.LogicalDeleteCode = 0; // 論理削除区分
            scmAcOdrDtlIqRow.InqOriginalEpCd = string.Empty; // 問合せ元企業コード
            scmAcOdrDtlIqRow.InqOriginalSecCd = string.Empty; // 問合せ元拠点コード
            scmAcOdrDtlIqRow.InqOtherEpCd = string.Empty; // 問合せ先企業コード
            scmAcOdrDtlIqRow.InqOtherSecCd = string.Empty; // 問合せ先拠点コード
            scmAcOdrDtlIqRow.InquiryNumber = 0; // 問合せ番号
            scmAcOdrDtlIqRow.UpdateDate = DateTime.MinValue; // 更新年月日
            scmAcOdrDtlIqRow.UpdateTime = 0; // 更新時間
            scmAcOdrDtlIqRow.InqRowNumber = 0; // 問合せ行番号
            scmAcOdrDtlIqRow.InqRowNumDerivedNo = 0; // 問合せ行番号枝番
            scmAcOdrDtlIqRow.InqOrgDtlDiscGuid = Guid.Empty; // 問合せ元明細識別GUID
            scmAcOdrDtlIqRow.InqOthDtlDiscGuid = Guid.Empty; // 問合せ先明細識別GUID
            scmAcOdrDtlIqRow.GoodsDivCd = 0; // 商品種別
            scmAcOdrDtlIqRow.RecyclePrtKindCode = 0; // リサイクル部品種別
            scmAcOdrDtlIqRow.RecyclePrtKindName = string.Empty; // リサイクル部品種別名称
            scmAcOdrDtlIqRow.DeliveredGoodsDiv = 0; // 納品区分
            scmAcOdrDtlIqRow.HandleDivCode = 0; // 取扱区分
            scmAcOdrDtlIqRow.GoodsShape = 0; // 商品形態
            scmAcOdrDtlIqRow.DelivrdGdsConfCd = 0; // 納品確認区分
            scmAcOdrDtlIqRow.DeliGdsCmpltDueDate = DateTime.MinValue; // 納品完了予定日
            scmAcOdrDtlIqRow.AnswerDeliveryDate = string.Empty; // 回答納期
            scmAcOdrDtlIqRow.BLGoodsCode = 0; // BL商品コード
            scmAcOdrDtlIqRow.BLGoodsDrCode = 0; // BL商品コード枝番
            scmAcOdrDtlIqRow.InqGoodsName = string.Empty; // 問発商品名
            scmAcOdrDtlIqRow.AnsGoodsName = string.Empty; // 回答商品名
            scmAcOdrDtlIqRow.SalesOrderCount = 0; // 発注数
            scmAcOdrDtlIqRow.DeliveredGoodsCount = 0; // 納品数
            scmAcOdrDtlIqRow.GoodsNo = string.Empty; // 商品番号
            scmAcOdrDtlIqRow.GoodsMakerCd = 0; // 商品メーカーコード
            scmAcOdrDtlIqRow.GoodsMakerNm = string.Empty; // 商品メーカー名称
            scmAcOdrDtlIqRow.PureGoodsMakerCd = 0; // 純正商品メーカーコード
            scmAcOdrDtlIqRow.InqPureGoodsNo = string.Empty; // 問発純正商品番号
            scmAcOdrDtlIqRow.AnsPureGoodsNo = string.Empty; // 回答純正商品番号
            scmAcOdrDtlIqRow.ListPrice = 0; // 定価
            scmAcOdrDtlIqRow.UnitPrice = 0; // 単価
            scmAcOdrDtlIqRow.GoodsAddInfo = string.Empty; // 商品補足情報
            scmAcOdrDtlIqRow.RoughRrofit = 0; // 粗利額
            scmAcOdrDtlIqRow.RoughRate = 0; // 粗利率
            scmAcOdrDtlIqRow.AnswerLimitDate = DateTime.MinValue; // 回答期限
            scmAcOdrDtlIqRow.CommentDtl = string.Empty; // 備考(明細)
            scmAcOdrDtlIqRow.AppendingFileDtl = new byte[0]; // 添付ファイル(明細)
            scmAcOdrDtlIqRow.AppendingFileNmDtl = string.Empty; // 添付ファイル名(明細)
            scmAcOdrDtlIqRow.ShelfNo = string.Empty; // 棚番
            scmAcOdrDtlIqRow.AdditionalDivCd = 0; // 追加区分
            scmAcOdrDtlIqRow.CorrectDivCD = 0; // 訂正区分
            scmAcOdrDtlIqRow.InqOrdDivCd = 0; // 問合せ・発注種別
            scmAcOdrDtlIqRow.DisplayOrder = 0; // 表示順位
            //>>>2010/06/30
            scmAcOdrDtlIqRow.CancelCndtinDiv = 0; // キャンセル状態区分
            scmAcOdrDtlIqRow.SalesRowNo = 0; // 売上行番号
            //<<<2010/06/30
            //>>>2011/05/25
            scmAcOdrDtlIqRow.WarehouseCode = string.Empty; // 倉庫コード
            scmAcOdrDtlIqRow.WarehouseName = string.Empty; // 倉庫名称
            scmAcOdrDtlIqRow.WarehouseShelfNo = string.Empty; // 棚番
            //<<<2011/05/25
            scmAcOdrDtlIqRow.CampaignCode = 0; // ADD 2011/10/10
            // 2012/01/16 Add >>>
            scmAcOdrDtlIqRow.GoodsSpecialNote = string.Empty; // 特記事項
            // 2012/01/16 Add <<<
            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
            scmAcOdrDtlIqRow.AutoEstimatePartsCd = string.Empty; // 自動見積部品コード
            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlIqRow.SalesTotalTaxInc = 0; // 売上伝票合計（税込）
            scmAcOdrDtlIqRow.SalesTotalTaxExc = 0; // 売上伝票合計（税抜）
            scmAcOdrDtlIqRow.ScmConsTaxLayMethod = 0; // SCM消費税転嫁方式
            scmAcOdrDtlIqRow.ConsTaxRate = 0; // 消費税税率
            scmAcOdrDtlIqRow.ScmFractionProcCd = 0; // SCM端数処理区分
            scmAcOdrDtlIqRow.AccRecConsTax = 0; // 売掛消費税
            scmAcOdrDtlIqRow.PMSalesDate = 0; // PM売上日
            scmAcOdrDtlIqRow.SuppSlpPrtTime = 0; // 仕入先伝票発行時刻
            scmAcOdrDtlIqRow.SalesMoneyTaxInc = 0; // 売上金額（税込み）
            scmAcOdrDtlIqRow.SalesMoneyTaxExc = 0; // 売上金額（税抜き）
            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlIqRow.DataInputSystem = 0; // データ入力システム
            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
            scmAcOdrDtlIqRow.PrmSetDtlNo2 = 0; // 優良設定詳細コード２
            scmAcOdrDtlIqRow.PrmSetDtlName2 = string.Empty; // 優良設定詳細名称２
            scmAcOdrDtlIqRow.StockStatusDiv = 0; // 在庫状況区分
            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
            scmAcOdrDtlIqRow.RentDiv = 0; // 貸出区分            
            scmAcOdrDtlIqRow.MkrSuggestRtPric = 0; // メーカー希望小売価格
            scmAcOdrDtlIqRow.OpenPriceDiv = 0; // オープン価格区分    
            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
            scmAcOdrDtlIqRow.BgnGoodsDiv = 0; // お買得商品選択区分
            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
            scmAcOdrDtlIqRow.ModelPrtsAdptYm = 0; // 型式別部品採用年月
            scmAcOdrDtlIqRow.ModelPrtsAblsYm = 0; // 型式別部品廃止年月
            scmAcOdrDtlIqRow.ModelPrtsAdptFrameNo = 0; // 型式別部品採用車台番号
            scmAcOdrDtlIqRow.ModelPrtsAblsFrameNo = 0; // 型式別部品廃止車台番号
            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlIqRow.AnsDeliDateDiv = 0; // 回答納期区分
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ---------->>>>>>>>>>
            scmAcOdrDtlIqRow.GoodsSpecialNtForFac = string.Empty;   // 商品規格・特記事項(工場向け)
            scmAcOdrDtlIqRow.GoodsSpecialNtForCOw = string.Empty;   // 商品規格・特記事項(カーオーナー向け)
            scmAcOdrDtlIqRow.PrmSetDtlName2ForFac = string.Empty;   // 優良設定詳細名称２(工場向け)
            scmAcOdrDtlIqRow.PrmSetDtlName2ForCOw = string.Empty;   // 優良設定詳細名称２(カーオーナー向け)
            // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ----------<<<<<<<<<<

            //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ---------->>>>>
            scmAcOdrDtlIqRow.InqBlUtyPtThCd = string.Empty; // 問発BL統一部品コード(スリーコード版)
            scmAcOdrDtlIqRow.InqBlUtyPtSbCd = 0;            // 問発BL統一部品サブコード
            scmAcOdrDtlIqRow.AnsBlUtyPtThCd = string.Empty; // 回答BL統一部品コード(スリーコード版)
            scmAcOdrDtlIqRow.AnsBlUtyPtSbCd = 0;            // 回答BL統一部品サブコード
            scmAcOdrDtlIqRow.AnsBLGoodsCode = 0;            // 回答BL商品コード
            scmAcOdrDtlIqRow.AnsBLGoodsDrCode = 0;          // 回答BL商品コード枝番
            //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ----------<<<<<

            #endregion
        }

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)オブジェクトからSCM受注明細データ(問合せ・発注)行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="scmAcOdrDtlIqRow"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetail"></param>
        private void SetRowFromUIData(ref ScmDataSet.SCMAcOdrDtlIqRow scmAcOdrDtlIqRow, SalesSlip salesSlip, SalesDetail salesDetail)
        {
            #region 項目セット
            ////scmAcOdrDtlIqRow.CreateDateTime = salesSlip.CreateDateTime; // 作成日時
            ////scmAcOdrDtlIqRow.UpdateDateTime = salesSlip.UpdateDateTime; // 更新日時
            ////scmAcOdrDtlIqRow.EnterpriseCode = salesSlip.EnterpriseCode; // 企業コード
            ////scmAcOdrDtlIqRow.FileHeaderGuid = salesSlip.FileHeaderGuid; // GUID
            ////scmAcOdrDtlIqRow.UpdEmployeeCode = salesSlip.UpdEmployeeCode; // 更新従業員コード
            ////scmAcOdrDtlIqRow.UpdAssemblyId1 = salesSlip.UpdAssemblyId1; // 更新アセンブリID1
            ////scmAcOdrDtlIqRow.UpdAssemblyId2 = salesSlip.UpdAssemblyId2; // 更新アセンブリID2
            ////scmAcOdrDtlIqRow.LogicalDeleteCode = salesSlip.LogicalDeleteCode; // 論理削除区分
            //scmAcOdrDtlIqRow.InqOriginalEpCd = salesSlip.InqOriginalEpCd; // 問合せ元企業コード
            //scmAcOdrDtlIqRow.InqOriginalSecCd = salesSlip.InqOriginalSecCd; // 問合せ元拠点コード
            //scmAcOdrDtlIqRow.InqOtherEpCd = this._enterpriseCode; // 問合せ先企業コード
            //scmAcOdrDtlIqRow.InqOtherSecCd = salesSlip.ResultsAddUpSecCd; // 問合せ先拠点コード
            ////scmAcOdrDtlIqRow.InquiryNumber = salesSlip.InquiryNumber; // 問合せ番号
            ////scmAcOdrDtlIqRow.UpdateDate = salesSlip.UpdateDate; // 更新年月日
            ////scmAcOdrDtlIqRow.UpdateTime = salesSlip.UpdateTime; // 更新時間
            //scmAcOdrDtlIqRow.InqRowNumber = salesDetail.SalesRowNo; // 問合せ行番号
            //scmAcOdrDtlIqRow.InqRowNumDerivedNo = salesDetail.SalesRowNo; // 問合せ行番号枝番
            ////scmAcOdrDtlIqRow.InqOrgDtlDiscGuid = scmAnswer.InqOrgDtlDiscGuid; // 問合せ元明細識別GUID
            ////scmAcOdrDtlIqRow.InqOthDtlDiscGuid = scmAnswer.InqOthDtlDiscGuid; // 問合せ先明細識別GUID
            ////scmAcOdrDtlIqRow.GoodsDivCd = scmAnswer.GoodsDivCd; // 商品種別

            //scmAcOdrDtlIqRow.RecyclePrtKindCode = salesDetail.RecycleDiv; // リサイクル部品種別
            //scmAcOdrDtlIqRow.RecyclePrtKindName = salesDetail.RecycleDivNm; // リサイクル部品種別名称
            ////scmAcOdrDtlIqRow.DeliveredGoodsDiv = scmAnswer.DeliveredGoodsDiv; // 納品区分
            ////scmAcOdrDtlIqRow.HandleDivCode = scmAnswer.HandleDivCode; // 取扱区分
            ////scmAcOdrDtlIqRow.GoodsShape = scmAnswer.GoodsShape; // 商品形態
            ////scmAcOdrDtlIqRow.DelivrdGdsConfCd = scmAnswer.DelivrdGdsConfCd; // 納品確認区分
            ////scmAcOdrDtlIqRow.DeliGdsCmpltDueDate = scmAnswer.DeliGdsCmpltDueDate; // 納品完了予定日

            //scmAcOdrDtlIqRow.AnswerDeliveryDate = salesDetail.AnswerDelivDate; // 回答納期
            //scmAcOdrDtlIqRow.BLGoodsCode = salesDetail.BLGoodsCode; // BL商品コード
            ////scmAcOdrDtlIqRow.BLGoodsDrCode = scmAnswer.BLGoodsDrCode; // BL商品コード枝番

            ////scmAcOdrDtlIqRow.InqGoodsName = salesSlip.InqGoodsName; // 問発商品名
            //scmAcOdrDtlIqRow.AnsGoodsName = salesDetail.GoodsName; // 回答商品名

            ////scmAcOdrDtlIqRow.SalesOrderCount = scmAnswer.SalesOrderCount; // 発注数
            //scmAcOdrDtlIqRow.DeliveredGoodsCount = salesDetail.ShipmentCnt; // 納品数
            //scmAcOdrDtlIqRow.GoodsNo = salesDetail.GoodsNo; // 商品番号
            //scmAcOdrDtlIqRow.GoodsMakerCd = salesDetail.GoodsMakerCd; // 商品メーカーコード　
            //scmAcOdrDtlIqRow.GoodsMakerNm = salesDetail.MakerName; // 商品メーカー名称

            ////scmAcOdrDtlIqRow.PureGoodsMakerCd = salesSlip.PureGoodsMakerCd; // 純正商品メーカーコード
            ////scmAcOdrDtlIqRow.InqPureGoodsNo = salesSlip.InqPureGoodsNo; // 問発純正商品番号
            ////scmAcOdrDtlIqRow.AnsPureGoodsNo = salesSlip.AnsPureGoodsNo; // 回答純正商品番号

            //scmAcOdrDtlIqRow.ListPrice = (long)salesDetail.ListPriceTaxExcFl; // 定価
            //scmAcOdrDtlIqRow.UnitPrice = (long)salesDetail.SalesUnPrcTaxExcFl; // 単価

            //scmAcOdrDtlIqRow.GoodsAddInfo = this.GetURL(salesDetail.GoodsMngNo); // 商品補足情報

            //scmAcOdrDtlIqRow.RoughRrofit = (long)(salesDetail.SalesUnPrcTaxExcFl - salesDetail.SalesUnitCost); // 粗利額
            //double totalGrossProfitRate;
            //this.GetRate((salesDetail.SalesUnPrcTaxExcFl - salesDetail.SalesUnitCost), salesDetail.SalesUnPrcTaxExcFl, out totalGrossProfitRate);
            //scmAcOdrDtlIqRow.RoughRate = totalGrossProfitRate; // 粗利率
            ////scmAcOdrDtlIqRow.AnswerLimitDate = salesDetail.AnswerDelivDate; // 回答期限1
            ////scmAcOdrDtlIqRow.CommentDtl = scmAnswer.CommentDtl; // 備考(明細)
            ////scmAcOdrDtlIqRow.AppendingFileDtl = scmAnswer.AppendingFileDtl; // 添付ファイル(明細)
            ////scmAcOdrDtlIqRow.AppendingFileNmDtl = scmAnswer.AppendingFileNmDtl; // 添付ファイル名(明細)
            //scmAcOdrDtlIqRow.ShelfNo = salesDetail.WarehouseShelfNo; // 棚番
            ////scmAcOdrDtlIqRow.AdditionalDivCd = scmAnswer.AdditionalDivCd; // 追加区分
            ////scmAcOdrDtlIqRow.CorrectDivCD = scmAnswer.CorrectDivCD; // 訂正区分
            //scmAcOdrDtlIqRow.AcptAnOdrStatus = salesSlip.AcptAnOdrStatus; // 受注ステータス
            ////scmAcOdrDtlIqRow.SalesSlipNum = scmAnswer.SalesSlipNum; // 売上伝票番号
            ////scmAcOdrDtlIqRow.SalesRowNo = scmAnswer.SalesRowNo; // 売上行番号
            ////scmAcOdrDtlIqRow.CampaignCode = scmAnswer.CampaignCode; // キャンペーンコード
            ////scmAcOdrDtlIqRow.StockDiv = scmAnswer.StockDiv; // 在庫区分
            //int InqOrdDivCd = ((salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.Sales) || (salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.AcceptAnOrder)) ? 1 : 2;
            //scmAcOdrDtlIqRow.InqOrdDivCd = InqOrdDivCd; // 問合せ・発注種別
            ////scmAcOdrDtlIqRow.DisplayOrder = scmAnswer.DisplayOrder; // 表示順位
            ////scmAcOdrDtlIqRow.GoodsMngNo = scmAnswer.GoodsMngNo; // 商品管理番号





            //scmAcOdrDtlIqRow.CreateDateTime = scmDetail.CreateDateTime; // 作成日時
            //scmAcOdrDtlIqRow.UpdateDateTime = scmDetail.UpdateDateTime; // 更新日時
            //scmAcOdrDtlIqRow.EnterpriseCode = scmDetail.EnterpriseCode; // 企業コード
            //scmAcOdrDtlIqRow.FileHeaderGuid = scmDetail.FileHeaderGuid; // GUID
            //scmAcOdrDtlIqRow.UpdEmployeeCode = scmDetail.UpdEmployeeCode; // 更新従業員コード
            //scmAcOdrDtlIqRow.UpdAssemblyId1 = scmDetail.UpdAssemblyId1; // 更新アセンブリID1
            //scmAcOdrDtlIqRow.UpdAssemblyId2 = scmDetail.UpdAssemblyId2; // 更新アセンブリID2
            //scmAcOdrDtlIqRow.LogicalDeleteCode = scmDetail.LogicalDeleteCode; // 論理削除区分
            //scmAcOdrDtlIqRow.InqOriginalEpCd = scmDetail.InqOriginalEpCd; // 問合せ元企業コード
            //scmAcOdrDtlIqRow.InqOriginalSecCd = scmDetail.InqOriginalSecCd; // 問合せ元拠点コード
            //scmAcOdrDtlIqRow.InqOtherEpCd = scmDetail.InqOtherEpCd; // 問合せ先企業コード
            //scmAcOdrDtlIqRow.InqOtherSecCd = scmDetail.InqOtherSecCd; // 問合せ先拠点コード
            //scmAcOdrDtlIqRow.InquiryNumber = scmDetail.InquiryNumber; // 問合せ番号
            //scmAcOdrDtlIqRow.UpdateDate = scmDetail.UpdateDate; // 更新年月日
            //scmAcOdrDtlIqRow.UpdateTime = scmDetail.UpdateTime; // 更新時間
            //scmAcOdrDtlIqRow.InqRowNumber = scmDetail.InqRowNumber; // 問合せ行番号
            //scmAcOdrDtlIqRow.InqRowNumDerivedNo = scmDetail.InqRowNumDerivedNo; // 問合せ行番号枝番
            //scmAcOdrDtlIqRow.InqOrgDtlDiscGuid = scmDetail.InqOrgDtlDiscGuid; // 問合せ元明細識別GUID
            //scmAcOdrDtlIqRow.InqOthDtlDiscGuid = scmDetail.InqOthDtlDiscGuid; // 問合せ先明細識別GUID
            //scmAcOdrDtlIqRow.GoodsDivCd = scmDetail.GoodsDivCd; // 商品種別
            //scmAcOdrDtlIqRow.RecyclePrtKindCode = scmDetail.RecyclePrtKindCode; // リサイクル部品種別
            //scmAcOdrDtlIqRow.RecyclePrtKindName = scmDetail.RecyclePrtKindName; // リサイクル部品種別名称
            //scmAcOdrDtlIqRow.DeliveredGoodsDiv = scmDetail.DeliveredGoodsDiv; // 納品区分
            //scmAcOdrDtlIqRow.HandleDivCode = scmDetail.HandleDivCode; // 取扱区分
            //scmAcOdrDtlIqRow.GoodsShape = scmDetail.GoodsShape; // 商品形態
            //scmAcOdrDtlIqRow.DelivrdGdsConfCd = scmDetail.DelivrdGdsConfCd; // 納品確認区分
            //scmAcOdrDtlIqRow.DeliGdsCmpltDueDate = scmDetail.DeliGdsCmpltDueDate; // 納品完了予定日
            //scmAcOdrDtlIqRow.AnswerDeliveryDate = scmDetail.AnswerDeliveryDate; // 回答納期
            //scmAcOdrDtlIqRow.BLGoodsCode = scmDetail.BLGoodsCode; // BL商品コード
            //scmAcOdrDtlIqRow.BLGoodsDrCode = scmDetail.BLGoodsDrCode; // BL商品コード枝番
            //scmAcOdrDtlIqRow.GoodsName = scmDetail.GoodsName; // 商品名称
            //scmAcOdrDtlIqRow.SalesOrderCount = scmDetail.SalesOrderCount; // 発注数
            //scmAcOdrDtlIqRow.DeliveredGoodsCount = scmDetail.DeliveredGoodsCount; // 納品数
            //scmAcOdrDtlIqRow.GoodsNo = scmDetail.GoodsNo; // 商品番号
            //scmAcOdrDtlIqRow.GoodsMakerCd = scmDetail.GoodsMakerCd; // 商品メーカーコード
            //scmAcOdrDtlIqRow.GoodsMakerNm = salesDetail.MakerName; // 商品メーカー名称
            //scmAcOdrDtlIqRow.PureGoodsMakerCd = scmDetail.PureGoodsMakerCd; // 純正商品メーカーコード
            //scmAcOdrDtlIqRow.PureGoodsNo = scmDetail.PureGoodsNo; // 純正商品番号
            //scmAcOdrDtlIqRow.ListPrice = scmDetail.ListPrice; // 定価
            //scmAcOdrDtlIqRow.UnitPrice = scmDetail.UnitPrice; // 単価
            //scmAcOdrDtlIqRow.GoodsAddInfo = scmDetail.GoodsAddInfo; // 商品補足情報
            //scmAcOdrDtlIqRow.RoughRrofit = scmDetail.RoughRrofit; // 粗利額
            //scmAcOdrDtlIqRow.RoughRate = scmDetail.RoughRate; // 粗利率
            //scmAcOdrDtlIqRow.AnswerLimitDate = scmDetail.AnswerLimitDate; // 回答期限
            //scmAcOdrDtlIqRow.CommentDtl = scmDetail.CommentDtl; // 備考(明細)
            //scmAcOdrDtlIqRow.AppendingFileDtl = scmDetail.AppendingFileDtl; // 添付ファイル(明細)
            //scmAcOdrDtlIqRow.AppendingFileNmDtl = scmDetail.AppendingFileNmDtl; // 添付ファイル名(明細)
            //scmAcOdrDtlIqRow.ShelfNo = scmDetail.ShelfNo; // 棚番
            //scmAcOdrDtlIqRow.AdditionalDivCd = scmDetail.AdditionalDivCd; // 追加区分
            //scmAcOdrDtlIqRow.CorrectDivCD = scmDetail.CorrectDivCD; // 訂正区分
            //scmAcOdrDtlIqRow.AcptAnOdrStatus = scmDetail.AcptAnOdrStatus; // 受注ステータス
            //scmAcOdrDtlIqRow.SalesSlipNum = scmDetail.SalesSlipNum; // 売上伝票番号
            //scmAcOdrDtlIqRow.InqOrdDivCd = scmDetail.InqOrdDivCd; // 問合せ・発注種別
            //scmAcOdrDtlIqRow.DisplayOrder = scmDetail.DisplayOrder; // 表示順位
            #endregion
        }

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)ワークオブジェクトをSCM受注明細データ(問合せ・発注)行オブジェクトより取得します。
        /// </summary>
        /// <param name="scmAcOdrDtlIqRow"></param>
        /// <returns></returns>
        private SCMAcOdrDtlIqWork GetParamDataFromSCMAcOdrDtlIqRow(ScmDataSet.SCMAcOdrDtlIqRow scmAcOdrDtlIqRow)
        {
            SCMAcOdrDtlIqWork scmAcOdrDtlIqWork = new SCMAcOdrDtlIqWork();

            #region 項目セット
            scmAcOdrDtlIqWork.CreateDateTime = scmAcOdrDtlIqRow.CreateDateTime; // 作成日時
            scmAcOdrDtlIqWork.UpdateDateTime = scmAcOdrDtlIqRow.UpdateDateTime; // 更新日時
            scmAcOdrDtlIqWork.EnterpriseCode = this._enterpriseCode; // 企業コード
            scmAcOdrDtlIqWork.FileHeaderGuid = scmAcOdrDtlIqRow.FileHeaderGuid; // GUID
            scmAcOdrDtlIqWork.UpdEmployeeCode = scmAcOdrDtlIqRow.UpdEmployeeCode; // 更新従業員コード
            scmAcOdrDtlIqWork.UpdAssemblyId1 = scmAcOdrDtlIqRow.UpdAssemblyId1; // 更新アセンブリID1
            scmAcOdrDtlIqWork.UpdAssemblyId2 = scmAcOdrDtlIqRow.UpdAssemblyId2; // 更新アセンブリID2
            scmAcOdrDtlIqWork.LogicalDeleteCode = scmAcOdrDtlIqRow.LogicalDeleteCode; // 論理削除区分
            scmAcOdrDtlIqWork.InqOriginalEpCd = scmAcOdrDtlIqRow.InqOriginalEpCd.Trim(); // 問合せ元企業コード//@@@@20230303
            scmAcOdrDtlIqWork.InqOriginalSecCd = scmAcOdrDtlIqRow.InqOriginalSecCd; // 問合せ元拠点コード
            scmAcOdrDtlIqWork.InqOtherEpCd = scmAcOdrDtlIqRow.InqOtherEpCd; // 問合せ先企業コード
            scmAcOdrDtlIqWork.InqOtherSecCd = scmAcOdrDtlIqRow.InqOtherSecCd; // 問合せ先拠点コード
            scmAcOdrDtlIqWork.InquiryNumber = scmAcOdrDtlIqRow.InquiryNumber; // 問合せ番号
            scmAcOdrDtlIqWork.UpdateDate = scmAcOdrDtlIqRow.UpdateDate; // 更新年月日
            scmAcOdrDtlIqWork.UpdateTime = scmAcOdrDtlIqRow.UpdateTime; // 更新時間
            scmAcOdrDtlIqWork.InqRowNumber = scmAcOdrDtlIqRow.InqRowNumber; // 問合せ行番号
            scmAcOdrDtlIqWork.InqRowNumDerivedNo = scmAcOdrDtlIqRow.InqRowNumDerivedNo; // 問合せ行番号枝番
            scmAcOdrDtlIqWork.InqOrgDtlDiscGuid = scmAcOdrDtlIqRow.InqOrgDtlDiscGuid; // 問合せ元明細識別GUID
            scmAcOdrDtlIqWork.InqOthDtlDiscGuid = scmAcOdrDtlIqRow.InqOthDtlDiscGuid; // 問合せ先明細識別GUID
            scmAcOdrDtlIqWork.GoodsDivCd = scmAcOdrDtlIqRow.GoodsDivCd; // 商品種別
            scmAcOdrDtlIqWork.RecyclePrtKindCode = scmAcOdrDtlIqRow.RecyclePrtKindCode; // リサイクル部品種別
            scmAcOdrDtlIqWork.RecyclePrtKindName = scmAcOdrDtlIqRow.RecyclePrtKindName; // リサイクル部品種別名称
            scmAcOdrDtlIqWork.DeliveredGoodsDiv = scmAcOdrDtlIqRow.DeliveredGoodsDiv; // 納品区分
            scmAcOdrDtlIqWork.HandleDivCode = scmAcOdrDtlIqRow.HandleDivCode; // 取扱区分
            scmAcOdrDtlIqWork.GoodsShape = scmAcOdrDtlIqRow.GoodsShape; // 商品形態
            scmAcOdrDtlIqWork.DelivrdGdsConfCd = scmAcOdrDtlIqRow.DelivrdGdsConfCd; // 納品確認区分
            scmAcOdrDtlIqWork.DeliGdsCmpltDueDate = scmAcOdrDtlIqRow.DeliGdsCmpltDueDate; // 納品完了予定日
            scmAcOdrDtlIqWork.AnswerDeliveryDate = scmAcOdrDtlIqRow.AnswerDeliveryDate; // 回答納期
            scmAcOdrDtlIqWork.BLGoodsCode = scmAcOdrDtlIqRow.BLGoodsCode; // BL商品コード
            scmAcOdrDtlIqWork.BLGoodsDrCode = scmAcOdrDtlIqRow.BLGoodsDrCode; // BL商品コード枝番
            //scmAcOdrDtlIqWork.InqGoodsName = scmAcOdrDtlIqRow.InqGoodsName; // 問発商品名
            //scmAcOdrDtlIqWork.AnsGoodsName = scmAcOdrDtlIqRow.AnsGoodsName; // 回答商品名
            scmAcOdrDtlIqWork.SalesOrderCount = scmAcOdrDtlIqRow.SalesOrderCount; // 発注数
            scmAcOdrDtlIqWork.DeliveredGoodsCount = scmAcOdrDtlIqRow.DeliveredGoodsCount; // 納品数
            scmAcOdrDtlIqWork.GoodsNo = scmAcOdrDtlIqRow.GoodsNo; // 商品番号
            scmAcOdrDtlIqWork.GoodsMakerCd = scmAcOdrDtlIqRow.GoodsMakerCd; // 商品メーカーコード
            scmAcOdrDtlIqWork.GoodsMakerNm = scmAcOdrDtlIqRow.GoodsMakerNm; // 商品メーカー名称
            scmAcOdrDtlIqWork.PureGoodsMakerCd = scmAcOdrDtlIqRow.PureGoodsMakerCd; // 純正商品メーカーコード
            //scmAcOdrDtlIqWork.InqPureGoodsNo = scmAcOdrDtlIqRow.InqPureGoodsNo; // 問発純正商品番号
            //scmAcOdrDtlIqWork.AnsPureGoodsNo = scmAcOdrDtlIqRow.AnsPureGoodsNo; // 回答純正商品番号
            scmAcOdrDtlIqWork.ListPrice = scmAcOdrDtlIqRow.ListPrice; // 定価
            scmAcOdrDtlIqWork.UnitPrice = scmAcOdrDtlIqRow.UnitPrice; // 単価
            scmAcOdrDtlIqWork.GoodsAddInfo = scmAcOdrDtlIqRow.GoodsAddInfo; // 商品補足情報
            scmAcOdrDtlIqWork.RoughRrofit = scmAcOdrDtlIqRow.RoughRrofit; // 粗利額
            scmAcOdrDtlIqWork.RoughRate = scmAcOdrDtlIqRow.RoughRate; // 粗利率
            scmAcOdrDtlIqWork.AnswerLimitDate = scmAcOdrDtlIqRow.AnswerLimitDate; // 回答期限
            scmAcOdrDtlIqWork.CommentDtl = scmAcOdrDtlIqRow.CommentDtl; // 備考(明細)
            scmAcOdrDtlIqWork.AppendingFileDtl = scmAcOdrDtlIqRow.AppendingFileDtl; // 添付ファイル(明細)
            scmAcOdrDtlIqWork.AppendingFileNmDtl = scmAcOdrDtlIqRow.AppendingFileNmDtl; // 添付ファイル名(明細)
            scmAcOdrDtlIqWork.ShelfNo = scmAcOdrDtlIqRow.ShelfNo; // 棚番
            scmAcOdrDtlIqWork.AdditionalDivCd = scmAcOdrDtlIqRow.AdditionalDivCd; // 追加区分
            scmAcOdrDtlIqWork.CorrectDivCD = scmAcOdrDtlIqRow.CorrectDivCD; // 訂正区分
            scmAcOdrDtlIqWork.InqOrdDivCd = scmAcOdrDtlIqRow.InqOrdDivCd; // 問合せ・発注種別
            scmAcOdrDtlIqWork.DisplayOrder = scmAcOdrDtlIqRow.DisplayOrder; // 表示順位
            //>>>2010/06/30
            scmAcOdrDtlIqWork.CancelCndtinDiv = scmAcOdrDtlIqRow.CancelCndtinDiv; // キャンセル状態区分
            scmAcOdrDtlIqWork.SalesRowNo = scmAcOdrDtlIqRow.SalesRowNo; // 売上行番号
            //<<<2010/06/30
            //>>>2011/05/25
            scmAcOdrDtlIqWork.WarehouseCode = scmAcOdrDtlIqRow.WarehouseCode; // 倉庫コード
            scmAcOdrDtlIqWork.WarehouseName = scmAcOdrDtlIqRow.WarehouseName; // 倉庫名称
            scmAcOdrDtlIqWork.WarehouseShelfNo = scmAcOdrDtlIqRow.WarehouseShelfNo; // 棚番
            //<<<2011/05/25
            scmAcOdrDtlIqWork.CampaignCode = scmAcOdrDtlIqRow.CampaignCode; // キャンペーンコード // ADD 2011/10/10
            // 2012/01/16 Add >>>
            scmAcOdrDtlIqWork.GoodsSpecialNote = scmAcOdrDtlIqRow.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<
            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
            scmAcOdrDtlIqWork.AutoEstimatePartsCd = scmAcOdrDtlIqRow.AutoEstimatePartsCd; // 自動見積部品コード
            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlIqWork.SalesTotalTaxInc = scmAcOdrDtlIqRow.SalesTotalTaxInc; // 売上伝票合計（税込）
            scmAcOdrDtlIqWork.SalesTotalTaxExc = scmAcOdrDtlIqRow.SalesTotalTaxExc; // 売上伝票合計（税抜）
            scmAcOdrDtlIqWork.ScmConsTaxLayMethod = scmAcOdrDtlIqRow.ScmConsTaxLayMethod; // SCM消費税転嫁方式
            scmAcOdrDtlIqWork.ConsTaxRate = scmAcOdrDtlIqRow.ConsTaxRate; // 消費税税率
            scmAcOdrDtlIqWork.ScmFractionProcCd = scmAcOdrDtlIqRow.ScmFractionProcCd; // SCM端数処理区分
            scmAcOdrDtlIqWork.AccRecConsTax = scmAcOdrDtlIqRow.AccRecConsTax; // 売掛消費税
            scmAcOdrDtlIqWork.PMSalesDate = scmAcOdrDtlIqRow.PMSalesDate; // PM売上日
            scmAcOdrDtlIqWork.SuppSlpPrtTime = scmAcOdrDtlIqRow.SuppSlpPrtTime; // 仕入先伝票発行時刻
            scmAcOdrDtlIqWork.SalesMoneyTaxInc = scmAcOdrDtlIqRow.SalesMoneyTaxInc; // 売上金額（税込み）
            scmAcOdrDtlIqWork.SalesMoneyTaxExc = scmAcOdrDtlIqRow.SalesMoneyTaxExc; // 売上金額（税抜き）
            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlIqWork.DataInputSystem = scmAcOdrDtlIqRow.DataInputSystem; // データ入力システム
            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            #endregion

            return scmAcOdrDtlIqWork;
        }
        #endregion

        #region SCM受注明細データ(回答)操作
        /// <summary>
        /// SCM受注明細データ(回答)オブジェクトを元にSCM受注明細データ(回答)テーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="scmAnswer"></param>
        /// <param name="scmAcOdrDtlAsDataTable"></param>
        /// <returns></returns>
        private ScmDataSet.SCMAcOdrDtlAsRow CreateSCMAcOdrDtlAsRowFromUIData(UserSCMOrderAnswerRecord scmAnswer, ScmDataSet.SCMAcOdrDtlAsDataTable scmAcOdrDtlAsDataTable)
        {
            ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow = scmAcOdrDtlAsDataTable.NewSCMAcOdrDtlAsRow();

            this.DefaultSettingSCMAcOdrDtlAsRow(ref scmAcOdrDtlAsRow);

            this.SetRowFromUIData(ref scmAcOdrDtlAsRow, scmAnswer);
            return scmAcOdrDtlAsRow;
        }

        /// <summary>
        /// SCM受注明細データ(回答)オブジェクトからSCM受注明細データ(回答)行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="scmAcOdrDtlAsRow"></param>
        /// <param name="scmAnswer"></param>
        /// <remarks>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFからの問い合わせデータに追加された新BLコード等をBLコード検索部品の検索パラメータに設定する。</br>
        /// </remarks>
        private void SetRowFromUIData(ref ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow, UserSCMOrderAnswerRecord scmAnswer)
        {
            #region 項目セット
            scmAcOdrDtlAsRow.CreateDateTime = scmAnswer.CreateDateTime; // 作成日時
            scmAcOdrDtlAsRow.UpdateDateTime = scmAnswer.UpdateDateTime; // 更新日時
            scmAcOdrDtlAsRow.EnterpriseCode = scmAnswer.EnterpriseCode; // 企業コード
            scmAcOdrDtlAsRow.FileHeaderGuid = scmAnswer.FileHeaderGuid; // GUID
            scmAcOdrDtlAsRow.UpdEmployeeCode = scmAnswer.UpdEmployeeCode; // 更新従業員コード
            scmAcOdrDtlAsRow.UpdAssemblyId1 = scmAnswer.UpdAssemblyId1; // 更新アセンブリID1
            scmAcOdrDtlAsRow.UpdAssemblyId2 = scmAnswer.UpdAssemblyId2; // 更新アセンブリID2
            scmAcOdrDtlAsRow.LogicalDeleteCode = scmAnswer.LogicalDeleteCode; // 論理削除区分
            scmAcOdrDtlAsRow.InqOriginalEpCd = scmAnswer.InqOriginalEpCd.Trim(); // 問合せ元企業コード//@@@@20230303
            scmAcOdrDtlAsRow.InqOriginalSecCd = scmAnswer.InqOriginalSecCd; // 問合せ元拠点コード
            scmAcOdrDtlAsRow.InqOtherEpCd = scmAnswer.InqOtherEpCd; // 問合せ先企業コード
            scmAcOdrDtlAsRow.InqOtherSecCd = scmAnswer.InqOtherSecCd; // 問合せ先拠点コード
            scmAcOdrDtlAsRow.InquiryNumber = scmAnswer.InquiryNumber; // 問合せ番号
            scmAcOdrDtlAsRow.UpdateDate = scmAnswer.UpdateDate; // 更新年月日
            scmAcOdrDtlAsRow.UpdateTime = scmAnswer.UpdateTime; // 更新時間
            scmAcOdrDtlAsRow.InqRowNumber = scmAnswer.InqRowNumber; // 問合せ行番号
            scmAcOdrDtlAsRow.InqRowNumDerivedNo = scmAnswer.InqRowNumDerivedNo; // 問合せ行番号枝番
            scmAcOdrDtlAsRow.InqOrgDtlDiscGuid = scmAnswer.InqOrgDtlDiscGuid; // 問合せ元明細識別GUID
            scmAcOdrDtlAsRow.InqOthDtlDiscGuid = scmAnswer.InqOthDtlDiscGuid; // 問合せ先明細識別GUID
            scmAcOdrDtlAsRow.GoodsDivCd = scmAnswer.GoodsDivCd; // 商品種別
            scmAcOdrDtlAsRow.RecyclePrtKindCode = scmAnswer.RecyclePrtKindCode; // リサイクル部品種別
            scmAcOdrDtlAsRow.RecyclePrtKindName = scmAnswer.RecyclePrtKindName; // リサイクル部品種別名称
            scmAcOdrDtlAsRow.DeliveredGoodsDiv = scmAnswer.DeliveredGoodsDiv; // 納品区分
            scmAcOdrDtlAsRow.HandleDivCode = scmAnswer.HandleDivCode; // 取扱区分
            scmAcOdrDtlAsRow.GoodsShape = scmAnswer.GoodsShape; // 商品形態
            scmAcOdrDtlAsRow.DelivrdGdsConfCd = scmAnswer.DelivrdGdsConfCd; // 納品確認区分
            scmAcOdrDtlAsRow.DeliGdsCmpltDueDate = scmAnswer.DeliGdsCmpltDueDate; // 納品完了予定日
            scmAcOdrDtlAsRow.AnswerDeliveryDate = scmAnswer.AnswerDeliveryDate; // 回答納期
            scmAcOdrDtlAsRow.BLGoodsCode = scmAnswer.BLGoodsCode; // BL商品コード
            scmAcOdrDtlAsRow.BLGoodsDrCode = scmAnswer.BLGoodsDrCode; // BL商品コード枝番
            scmAcOdrDtlAsRow.InqGoodsName = scmAnswer.InqGoodsName; // 問発商品名
            scmAcOdrDtlAsRow.AnsGoodsName = scmAnswer.AnsGoodsName; // 回答商品名
            scmAcOdrDtlAsRow.SalesOrderCount = scmAnswer.SalesOrderCount; // 発注数
            scmAcOdrDtlAsRow.DeliveredGoodsCount = scmAnswer.DeliveredGoodsCount; // 納品数
            scmAcOdrDtlAsRow.GoodsNo = scmAnswer.GoodsNo; // 商品番号
            scmAcOdrDtlAsRow.GoodsMakerCd = scmAnswer.GoodsMakerCd; // 商品メーカーコード
            scmAcOdrDtlAsRow.GoodsMakerNm = scmAnswer.GoodsMakerNm; // 商品メーカー名称
            scmAcOdrDtlAsRow.PureGoodsMakerCd = scmAnswer.PureGoodsMakerCd; // 純正商品メーカーコード
            scmAcOdrDtlAsRow.InqPureGoodsNo = scmAnswer.InqPureGoodsNo; // 問発純正商品番号
            scmAcOdrDtlAsRow.AnsPureGoodsNo = scmAnswer.AnsPureGoodsNo; // 回答純正商品番号
            scmAcOdrDtlAsRow.ListPrice = scmAnswer.ListPrice; // 定価
            scmAcOdrDtlAsRow.UnitPrice = scmAnswer.UnitPrice; // 単価
            scmAcOdrDtlAsRow.GoodsAddInfo = scmAnswer.GoodsAddInfo; // 商品補足情報
            scmAcOdrDtlAsRow.RoughRrofit = scmAnswer.RoughRrofit; // 粗利額
            scmAcOdrDtlAsRow.RoughRate = scmAnswer.RoughRate; // 粗利率
            scmAcOdrDtlAsRow.AnswerLimitDate = scmAnswer.AnswerLimitDate; // 回答期限
            scmAcOdrDtlAsRow.CommentDtl = scmAnswer.CommentDtl; // 備考(明細)
            scmAcOdrDtlAsRow.AppendingFileDtl = scmAnswer.AppendingFileDtl; // 添付ファイル(明細)
            scmAcOdrDtlAsRow.AppendingFileNmDtl = scmAnswer.AppendingFileNmDtl; // 添付ファイル名(明細)
            scmAcOdrDtlAsRow.ShelfNo = scmAnswer.ShelfNo; // 棚番
            scmAcOdrDtlAsRow.AdditionalDivCd = scmAnswer.AdditionalDivCd; // 追加区分
            scmAcOdrDtlAsRow.CorrectDivCD = scmAnswer.CorrectDivCD; // 訂正区分
            scmAcOdrDtlAsRow.AcptAnOdrStatus = scmAnswer.AcptAnOdrStatus; // 受注ステータス
            scmAcOdrDtlAsRow.SalesSlipNum = scmAnswer.SalesSlipNum; // 売上伝票番号
            scmAcOdrDtlAsRow.SalesRowNo = scmAnswer.SalesRowNo; // 売上行番号
            scmAcOdrDtlAsRow.CampaignCode = scmAnswer.CampaignCode; // キャンペーンコード
            scmAcOdrDtlAsRow.StockDiv = scmAnswer.StockDiv; // 在庫区分
            scmAcOdrDtlAsRow.InqOrdDivCd = scmAnswer.InqOrdDivCd; // 問合せ・発注種別
            scmAcOdrDtlAsRow.DisplayOrder = scmAnswer.DisplayOrder; // 表示順位
            scmAcOdrDtlAsRow.GoodsMngNo = scmAnswer.GoodsMngNo; // 商品管理番号
            scmAcOdrDtlAsRow.CancelCndtinDiv = scmAnswer.CancelCndtinDiv; // キャンセル状態区分 // 2010/06/30
            //>>>2011/05/25
            scmAcOdrDtlAsRow.WarehouseCode = scmAnswer.PmWarehouseCd; // 倉庫コード
            scmAcOdrDtlAsRow.WarehouseName = scmAnswer.PmWarehouseName; // 倉庫名称
            scmAcOdrDtlAsRow.WarehouseShelfNo = scmAnswer.PmShelfNo; // 棚番
            //<<<2011/05/25
            // 2012/01/16 Add >>>
            scmAcOdrDtlAsRow.GoodsSpecialNote = scmAnswer.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<
            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
            scmAcOdrDtlAsRow.AutoEstimatePartsCd = scmAnswer.AutoEstimatePartsCd; // 自動見積部品コード
            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlAsRow.SalesTotalTaxInc = scmAnswer.SalesTotalTaxInc; // 売上伝票合計（税込）
            scmAcOdrDtlAsRow.SalesTotalTaxExc = scmAnswer.SalesTotalTaxExc; // 売上伝票合計（税抜）
            scmAcOdrDtlAsRow.ScmConsTaxLayMethod = scmAnswer.ScmConsTaxLayMethod; // SCM消費税転嫁方式
            scmAcOdrDtlAsRow.ConsTaxRate = scmAnswer.ConsTaxRate; // 消費税税率
            scmAcOdrDtlAsRow.ScmFractionProcCd = scmAnswer.ScmFractionProcCd; // SCM端数処理区分
            scmAcOdrDtlAsRow.AccRecConsTax = scmAnswer.AccRecConsTax; // 売掛消費税
            scmAcOdrDtlAsRow.PMSalesDate = scmAnswer.PMSalesDate; // PM売上日
            scmAcOdrDtlAsRow.SuppSlpPrtTime = scmAnswer.SuppSlpPrtTime; // 仕入先伝票発行時刻
            scmAcOdrDtlAsRow.SalesMoneyTaxInc = scmAnswer.SalesMoneyTaxInc; // 売上金額（税込み）
            scmAcOdrDtlAsRow.SalesMoneyTaxExc = scmAnswer.SalesMoneyTaxExc; // 売上金額（税抜き）
            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlAsRow.DataInputSystem = scmAnswer.DataInputSystem; // データ入力システム
            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

            // ------------------ ADD qijh 2013/02/27 #34752 --------------- >>>>>
            scmAcOdrDtlAsRow.PmMainMngWarehouseCd = scmAnswer.PmMainMngWarehouseCd; // PM主管倉庫コード
            scmAcOdrDtlAsRow.PmMainMngWarehouseName = scmAnswer.PmMainMngWarehouseName; // PM主管倉庫名称
            scmAcOdrDtlAsRow.PmMainMngShelfNo = scmAnswer.PmMainMngShelfNo; // PM主管倉庫棚番
            scmAcOdrDtlAsRow.PmMainMngPrsntCount = scmAnswer.PmMainMngPrsntCount; // PM主管在庫数
            // ------------------ ADD qijh 2013/02/27 #34752 --------------- <<<<<
            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
            scmAcOdrDtlAsRow.PrmSetDtlNo2 = scmAnswer.PrmSetDtlNo2; // 優良設定詳細コード２
            scmAcOdrDtlAsRow.PrmSetDtlName2 = scmAnswer.PrmSetDtlName2; // 優良設定詳細名称２
            scmAcOdrDtlAsRow.StockStatusDiv = scmAnswer.StockStatusDiv; // 在庫状況区分
            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
            // ADD 2014/11/14 SCM仕掛一覧№10694対応 ---------------------------------------->>>>>
            scmAcOdrDtlAsRow.SetPartsMkrCd = scmAnswer.SetPartsMkrCd;         // セット部品メーカーコード 
            scmAcOdrDtlAsRow.SetPartsNumber = scmAnswer.SetPartsNumber;       // セット部品番号
            scmAcOdrDtlAsRow.SetPartsMainSubNo = scmAnswer.SetPartsMainSubNo; // セット部品親子番号
            // ADD 2014/11/14 SCM仕掛一覧№10694対応 ----------------------------------------<<<<<
            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
            scmAcOdrDtlAsRow.RentDiv = scmAnswer.RentDiv; // 貸出区分            
            scmAcOdrDtlAsRow.MkrSuggestRtPric = scmAnswer.MkrSuggestRtPric; // メーカー希望小売価格
            scmAcOdrDtlAsRow.OpenPriceDiv = scmAnswer.OpenPriceDiv; // オープン価格区分    
            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
            scmAcOdrDtlAsRow.BgnGoodsDiv = scmAnswer.BgnGoodsDiv; // お買得商品選択区分
            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
            scmAcOdrDtlAsRow.ModelPrtsAdptYm = scmAnswer.ModelPrtsAdptYm; // 型式別部品採用年月
            scmAcOdrDtlAsRow.ModelPrtsAblsYm = scmAnswer.ModelPrtsAblsYm; // 型式別部品廃止年月
            scmAcOdrDtlAsRow.ModelPrtsAdptFrameNo = scmAnswer.ModelPrtsAdptFrameNo; // 型式別部品採用車台番号
            scmAcOdrDtlAsRow.ModelPrtsAblsFrameNo = scmAnswer.ModelPrtsAblsFrameNo; // 型式別部品廃止車台番号
            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlAsRow.AnsDeliDateDiv = scmAnswer.AnsDeliDateDiv; // 回答納期区分
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ---------->>>>>>>>>>
            scmAcOdrDtlAsRow.GoodsSpecialNtForFac = scmAnswer.GoodsSpecialNtForFac; // 商品規格・特記事項(工場向け)
            scmAcOdrDtlAsRow.GoodsSpecialNtForCOw = scmAnswer.GoodsSpecialNtForCOw; // 商品規格・特記事項(カーオーナー向け)
            scmAcOdrDtlAsRow.PrmSetDtlName2ForFac = scmAnswer.PrmSetDtlName2ForFac; // 優良設定詳細名称２(工場向け)
            scmAcOdrDtlAsRow.PrmSetDtlName2ForCOw = scmAnswer.PrmSetDtlName2ForCOw; // 優良設定詳細名称２(カーオーナー向け)
            // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ----------<<<<<<<<<<

            //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ---------->>>>>
            scmAcOdrDtlAsRow.InqBlUtyPtThCd = scmAnswer.InqBlUtyPtThCd;     // 問発BL統一部品コード(スリーコード版)
            scmAcOdrDtlAsRow.InqBlUtyPtSbCd = scmAnswer.InqBlUtyPtSbCd;     // 問発BL統一部品サブコード
            scmAcOdrDtlAsRow.AnsBlUtyPtThCd = scmAnswer.AnsBlUtyPtThCd;     // 回答BL統一部品コード(スリーコード版)
            scmAcOdrDtlAsRow.AnsBlUtyPtSbCd = scmAnswer.AnsBlUtyPtSbCd;     // 回答BL統一部品サブコード
            scmAcOdrDtlAsRow.AnsBLGoodsCode = scmAnswer.AnsBLGoodsCode;     // 回答BL商品コード
            scmAcOdrDtlAsRow.AnsBLGoodsDrCode = scmAnswer.AnsBLGoodsDrCode; // 回答BL商品コード枝番
            //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ----------<<<<<

            #endregion
        }

        /// <summary>
        /// SCM受注明細データ(回答)オブジェクトを元にSCM受注明細データ(回答)テーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetail"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="scmAcOdrDtlAsRow"></param>
        /// <returns></returns>
        private ScmDataSet.SCMAcOdrDtlAsRow CreateSCMAcOdrDtlAsRowFromUIData(SalesSlip salesSlip, SalesDetail salesDetail, List<SalesDetail> salesDetailList, ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow)
        {
            ScmDataSet.SCMAcOdrDataRow scmAcOdrDataRow = null;
            if (this._scmAcOdrDataDataTable != null) scmAcOdrDataRow = this._scmAcOdrDataDataTable[0];

            this.SetRowFromUIData(ref scmAcOdrDtlAsRow, salesSlip, salesDetail, salesDetailList, scmAcOdrDataRow);
            return scmAcOdrDtlAsRow;
        }

        /// <summary>
        /// SCM受注明細データ(回答)オブジェクトを元にSCM受注明細データ(回答)テーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetail"></param>
        /// <param name="scmAcOdrDtlAsDataTable"></param>
        /// <returns></returns>
        private ScmDataSet.SCMAcOdrDtlAsRow CreateSCMAcOdrDtlAsRowFromUIData(SalesSlip salesSlip, SalesDetail salesDetail, ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow)
        {
            return this.CreateSCMAcOdrDtlAsRowFromUIData(salesSlip, salesDetail, null, scmAcOdrDtlAsRow);
        }

        /// <summary>
        /// SCM受注明細データ(回答)テーブル行オブジェクトに初期値をセットします。
        /// </summary>
        /// <param name="scmAcOdrDtlAsRow"></param>
        /// <remarks>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SCM受注明細データ(回答)テーブル行オブジェクトに新BLコード等の初期値をセットする。</br>
        /// </remarks>
        private void DefaultSettingSCMAcOdrDtlAsRow(ref ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow)
        {
            #region 項目セット
            scmAcOdrDtlAsRow.CreateDateTime = DateTime.MinValue; // 作成日時
            scmAcOdrDtlAsRow.UpdateDateTime = DateTime.MinValue; // 更新日時
            scmAcOdrDtlAsRow.EnterpriseCode = string.Empty; // 企業コード
            scmAcOdrDtlAsRow.FileHeaderGuid = Guid.Empty; // GUID
            scmAcOdrDtlAsRow.UpdEmployeeCode = string.Empty; // 更新従業員コード
            scmAcOdrDtlAsRow.UpdAssemblyId1 = string.Empty; // 更新アセンブリID1
            scmAcOdrDtlAsRow.UpdAssemblyId2 = string.Empty; // 更新アセンブリID2
            scmAcOdrDtlAsRow.LogicalDeleteCode = 0; // 論理削除区分
            scmAcOdrDtlAsRow.InqOriginalEpCd = string.Empty; // 問合せ元企業コード
            scmAcOdrDtlAsRow.InqOriginalSecCd = string.Empty; // 問合せ元拠点コード
            scmAcOdrDtlAsRow.InqOtherEpCd = string.Empty; // 問合せ先企業コード
            scmAcOdrDtlAsRow.InqOtherSecCd = string.Empty; // 問合せ先拠点コード
            scmAcOdrDtlAsRow.InquiryNumber = 0; // 問合せ番号
            scmAcOdrDtlAsRow.UpdateDate = DateTime.MinValue; // 更新年月日
            scmAcOdrDtlAsRow.UpdateTime = 0; // 更新時間
            scmAcOdrDtlAsRow.InqRowNumber = 0; // 問合せ行番号
            scmAcOdrDtlAsRow.InqRowNumDerivedNo = 0; // 問合せ行番号枝番
            scmAcOdrDtlAsRow.InqOrgDtlDiscGuid = Guid.Empty; // 問合せ元明細識別GUID
            scmAcOdrDtlAsRow.InqOthDtlDiscGuid = Guid.Empty; // 問合せ先明細識別GUID
            scmAcOdrDtlAsRow.GoodsDivCd = 0; // 商品種別
            scmAcOdrDtlAsRow.RecyclePrtKindCode = 0; // リサイクル部品種別
            scmAcOdrDtlAsRow.RecyclePrtKindName = string.Empty; // リサイクル部品種別名称
            scmAcOdrDtlAsRow.DeliveredGoodsDiv = 0; // 納品区分
            scmAcOdrDtlAsRow.HandleDivCode = 0; // 取扱区分
            scmAcOdrDtlAsRow.GoodsShape = 0; // 商品形態
            scmAcOdrDtlAsRow.DelivrdGdsConfCd = 0; // 納品確認区分
            scmAcOdrDtlAsRow.DeliGdsCmpltDueDate = DateTime.MinValue; // 納品完了予定日
            scmAcOdrDtlAsRow.AnswerDeliveryDate = string.Empty; // 回答納期
            scmAcOdrDtlAsRow.BLGoodsCode = 0; // BL商品コード
            scmAcOdrDtlAsRow.BLGoodsDrCode = 0; // BL商品コード枝番
            scmAcOdrDtlAsRow.InqGoodsName = string.Empty; // 問発商品名
            scmAcOdrDtlAsRow.AnsGoodsName = string.Empty; // 回答商品名
            scmAcOdrDtlAsRow.SalesOrderCount = 0; // 発注数
            scmAcOdrDtlAsRow.DeliveredGoodsCount = 0; // 納品数
            scmAcOdrDtlAsRow.GoodsNo = string.Empty; // 商品番号
            scmAcOdrDtlAsRow.GoodsMakerCd = 0; // 商品メーカーコード
            scmAcOdrDtlAsRow.GoodsMakerNm = string.Empty; // 商品メーカー名称
            scmAcOdrDtlAsRow.PureGoodsMakerCd = 0; // 純正商品メーカーコード
            scmAcOdrDtlAsRow.InqPureGoodsNo = string.Empty; // 問発純正商品番号
            scmAcOdrDtlAsRow.AnsPureGoodsNo = string.Empty; // 回答純正商品番号
            scmAcOdrDtlAsRow.ListPrice = 0; // 定価
            scmAcOdrDtlAsRow.UnitPrice = 0; // 単価
            scmAcOdrDtlAsRow.GoodsAddInfo = string.Empty; // 商品補足情報
            scmAcOdrDtlAsRow.RoughRrofit = 0; // 粗利額
            scmAcOdrDtlAsRow.RoughRate = 0; // 粗利率
            scmAcOdrDtlAsRow.AnswerLimitDate = DateTime.MinValue; // 回答期限
            scmAcOdrDtlAsRow.CommentDtl = string.Empty; // 備考(明細)
            scmAcOdrDtlAsRow.AppendingFileDtl = new byte[0]; // 添付ファイル(明細)
            scmAcOdrDtlAsRow.AppendingFileNmDtl = string.Empty; // 添付ファイル名(明細)
            scmAcOdrDtlAsRow.ShelfNo = string.Empty; // 棚番
            scmAcOdrDtlAsRow.AdditionalDivCd = 0; // 追加区分
            scmAcOdrDtlAsRow.CorrectDivCD = 0; // 訂正区分
            scmAcOdrDtlAsRow.AcptAnOdrStatus = 0; // 受注ステータス
            scmAcOdrDtlAsRow.SalesSlipNum = ctDefaultSalesSlipNum; // 売上伝票番号
            scmAcOdrDtlAsRow.SalesRowNo = 0; // 売上行番号
            scmAcOdrDtlAsRow.CampaignCode = 0; // キャンペーンコード
            scmAcOdrDtlAsRow.StockDiv = 0; // 在庫区分
            scmAcOdrDtlAsRow.InqOrdDivCd = 0; // 問合せ・発注種別
            scmAcOdrDtlAsRow.DisplayOrder = 0; // 表示順位
            scmAcOdrDtlAsRow.GoodsMngNo = 0; // 商品管理番号
            scmAcOdrDtlAsRow.CancelCndtinDiv = 0; // キャンセル状態区分 // 2010/06/30
            //>>>2011/05/25
            scmAcOdrDtlAsRow.WarehouseCode = string.Empty; // 倉庫コード
            scmAcOdrDtlAsRow.WarehouseName = string.Empty; // 倉庫名称
            scmAcOdrDtlAsRow.WarehouseShelfNo = string.Empty; // 棚番
            //<<<2011/05/25
            // 2012/01/16 Add >>>
            scmAcOdrDtlAsRow.GoodsSpecialNote = string.Empty; // 特記事項
            // 2012/01/16 Add <<<
            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
            scmAcOdrDtlAsRow.AutoEstimatePartsCd = string.Empty; // 自動見積部品コード
            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
            // ADD 2012/07/31 SCM障害№10356対応 -------------------------->>>>>
            scmAcOdrDtlAsRow.DtlRelationGuid = Guid.Empty;
            // ADD 2012/07/31 SCM障害№10356対応 --------------------------<<<<<
            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlAsRow.SalesTotalTaxInc = 0; // 売上伝票合計（税込）
            scmAcOdrDtlAsRow.SalesTotalTaxExc = 0; // 売上伝票合計（税抜）
            scmAcOdrDtlAsRow.ScmConsTaxLayMethod = 0; // SCM消費税転嫁方式
            scmAcOdrDtlAsRow.ConsTaxRate = 0; // 消費税税率
            scmAcOdrDtlAsRow.ScmFractionProcCd = 0; // SCM端数処理区分
            scmAcOdrDtlAsRow.AccRecConsTax = 0; // 売掛消費税
            scmAcOdrDtlAsRow.PMSalesDate = 0; // PM売上日
            scmAcOdrDtlAsRow.SuppSlpPrtTime = 0; // 仕入先伝票発行時刻
            scmAcOdrDtlAsRow.SalesMoneyTaxInc = 0; // 売上金額（税込み）
            scmAcOdrDtlAsRow.SalesMoneyTaxExc = 0; // 売上金額（税抜き）
            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlAsRow.DataInputSystem = 0; // データ入力システム
            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<            
            // ------------------ ADD qijh 2013/02/27 #34752 --------------- >>>>>
            scmAcOdrDtlAsRow.PmMainMngWarehouseCd = string.Empty; // PM主管倉庫コード
            scmAcOdrDtlAsRow.PmMainMngWarehouseName = string.Empty; // PM主管倉庫名称
            scmAcOdrDtlAsRow.PmMainMngShelfNo = string.Empty; // PM主管倉庫棚番
            scmAcOdrDtlAsRow.PmMainMngPrsntCount = 0; // PM主管在庫数
            // ------------------ ADD qijh 2013/02/27 #34752 --------------- <<<<<
            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
            scmAcOdrDtlAsRow.PrmSetDtlNo2 = 0; // 優良設定詳細コード２
            scmAcOdrDtlAsRow.PrmSetDtlName2 = string.Empty; // 優良設定詳細名称２
            scmAcOdrDtlAsRow.StockStatusDiv = 0; // 在庫状況区分
            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
            // ADD 2014/11/14 SCM仕掛一覧№10694対応 -------------------------------------------->>>>>
            scmAcOdrDtlAsRow.SetPartsMkrCd = 0;              // セット部品メーカーコード
            scmAcOdrDtlAsRow.SetPartsNumber = string.Empty;  // セット部品番号
            scmAcOdrDtlAsRow.SetPartsMainSubNo = 0;          // セット部品親子番号
            // ADD 2014/11/14 SCM仕掛一覧№10694対応 --------------------------------------------<<<<<
            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
            scmAcOdrDtlAsRow.RentDiv = 0; // 貸出区分            
            scmAcOdrDtlAsRow.MkrSuggestRtPric = 0; // メーカー希望小売価格
            scmAcOdrDtlAsRow.OpenPriceDiv = 0; // オープン価格区分    
            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
            scmAcOdrDtlAsRow.BgnGoodsDiv = 0; // お買得商品選択区分
            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
            scmAcOdrDtlAsRow.ModelPrtsAdptYm = 0; // 型式別部品採用年月
            scmAcOdrDtlAsRow.ModelPrtsAblsYm = 0; // 型式別部品廃止年月
            scmAcOdrDtlAsRow.ModelPrtsAdptFrameNo = 0; // 型式別部品採用車台番号
            scmAcOdrDtlAsRow.ModelPrtsAblsFrameNo = 0; // 型式別部品廃止車台番号
            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlAsRow.AnsDeliDateDiv = 0; // 回答納期区分
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ---------->>>>>>>>>>
            scmAcOdrDtlAsRow.GoodsSpecialNtForFac = string.Empty;   // 商品規格・特記事項(工場向け)
            scmAcOdrDtlAsRow.GoodsSpecialNtForCOw = string.Empty;   // 商品規格・特記事項(カーオーナー向け)
            scmAcOdrDtlAsRow.PrmSetDtlName2ForFac = string.Empty;   // 優良設定詳細名称２(工場向け)
            scmAcOdrDtlAsRow.PrmSetDtlName2ForCOw = string.Empty;   // 優良設定詳細名称２(カーオーナー向け)
            // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ----------<<<<<<<<<<

            //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ---------->>>>>
            scmAcOdrDtlAsRow.InqBlUtyPtThCd = string.Empty; // 問発BL統一部品コード(スリーコード版)
            scmAcOdrDtlAsRow.InqBlUtyPtSbCd = 0;            // 問発BL統一部品サブコード
            scmAcOdrDtlAsRow.AnsBlUtyPtThCd = string.Empty; // 回答BL統一部品コード(スリーコード版)
            scmAcOdrDtlAsRow.AnsBlUtyPtSbCd = 0;            // 回答BL統一部品サブコード
            scmAcOdrDtlAsRow.AnsBLGoodsCode = 0;            // 回答BL商品コード
            scmAcOdrDtlAsRow.AnsBLGoodsDrCode = 0;          // 回答BL商品コード枝番
            //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ----------<<<<<

            #endregion
        }

        /// <summary>
        /// SCM受注明細データ(回答)オブジェクトからSCM受注明細データ(回答)行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="scmAcOdrDtlAsRow"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetail"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="scmAcOdrDataRow"></param>
        /// <remarks>
        /// <br>UpdateNote : 2011/07/20 譚洪 Redmine#22833 SCM部品価格問合せに関しての対応</br>
        /// <br>UpdateNote : 2011/10/27 高峰 Redmine#26293 売上伝票入力／PMからいきなり回答する場合のＢＬコードの回答方法の対応</br>
        /// <br>UpdateNote : 2018/04/16 田建委</br>
        /// <br>管理番号   : 11470007-00</br>
        /// <br>           : SFへの回答データに問い合わせデータの回答BL商品コードを設定する。</br>
        /// </remarks>
        private void SetRowFromUIData(ref ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow, SalesSlip salesSlip, SalesDetail salesDetail, List<SalesDetail> salesDetailList, ScmDataSet.SCMAcOdrDataRow scmAcOdrDataRow)
        {
            #region 項目セット
            //scmAcOdrDtlAsRow.CreateDateTime = salesSlip.CreateDateTime; // 作成日時
            //scmAcOdrDtlAsRow.UpdateDateTime = salesSlip.UpdateDateTime; // 更新日時
            //scmAcOdrDtlAsRow.EnterpriseCode = salesSlip.EnterpriseCode; // 企業コード
            //scmAcOdrDtlAsRow.FileHeaderGuid = salesSlip.FileHeaderGuid; // GUID
            //scmAcOdrDtlAsRow.UpdEmployeeCode = salesSlip.UpdEmployeeCode; // 更新従業員コード
            //scmAcOdrDtlAsRow.UpdAssemblyId1 = salesSlip.UpdAssemblyId1; // 更新アセンブリID1
            //scmAcOdrDtlAsRow.UpdAssemblyId2 = salesSlip.UpdAssemblyId2; // 更新アセンブリID2
            //scmAcOdrDtlAsRow.LogicalDeleteCode = salesSlip.LogicalDeleteCode; // 論理削除区分
            scmAcOdrDtlAsRow.InqOriginalEpCd = salesSlip.InqOriginalEpCd.Trim(); // 問合せ元企業コード//@@@@20230303
            scmAcOdrDtlAsRow.InqOriginalSecCd = salesSlip.InqOriginalSecCd; // 問合せ元拠点コード
            if (salesSlip.InquiryNumber == 0)
            {
                scmAcOdrDtlAsRow.InqOtherEpCd = this._enterpriseCode; // 問合せ先企業コード
                //x_chenjm update sta for #25623 2011/10/12 >>>>>>>>>>>
                //scmAcOdrDtlAsRow.InqOtherSecCd = salesSlip.ResultsAddUpSecCd; // 問合せ先拠点コード
                scmAcOdrDtlAsRow.InqOtherSecCd = LoginInfoAcquisition.Employee.BelongSectionCode.Trim();
                //x_chenjm update end for #25623 2011/10/12 <<<<<<<<<<<
            }
            else
            {
                scmAcOdrDtlAsRow.InqOtherEpCd = scmAcOdrDataRow.InqOtherEpCd; // 問合せ先企業コード
                scmAcOdrDtlAsRow.InqOtherSecCd = scmAcOdrDataRow.InqOtherSecCd; // 問合せ先拠点コード
            }
            scmAcOdrDtlAsRow.InquiryNumber = salesSlip.InquiryNumber; // 問合せ番号
            //scmAcOdrDtlAsRow.UpdateDate = salesSlip.UpdateDate; // 更新年月日
            //scmAcOdrDtlAsRow.UpdateTime = salesSlip.UpdateTime; // 更新時間
            //scmAcOdrDtlAsRow.InqRowNumber = salesDetail.InqRowNumber; // 問合せ行番号
            if ((salesDetailList != null) && (salesDetail.InqRowNumber == 0))
            {
                scmAcOdrDtlAsRow.InqRowNumber = this.GetInqRowNumber(salesSlip, salesDetailList); // 問合せ行番号
            }
            scmAcOdrDtlAsRow.InqRowNumDerivedNo = scmAcOdrDtlAsRow.InqRowNumDerivedNo; // 問合せ行番号枝番
            //scmAcOdrDtlAsRow.InqOrgDtlDiscGuid = scmAnswer.InqOrgDtlDiscGuid; // 問合せ元明細識別GUID
            //scmAcOdrDtlAsRow.InqOthDtlDiscGuid = scmAnswer.InqOthDtlDiscGuid; // 問合せ先明細識別GUID
            //scmAcOdrDtlAsRow.GoodsDivCd = scmAnswer.GoodsDivCd; // 商品種別

            scmAcOdrDtlAsRow.RecyclePrtKindCode = salesDetail.RecycleDiv; // リサイクル部品種別
            scmAcOdrDtlAsRow.RecyclePrtKindName = salesDetail.RecycleDivNm; // リサイクル部品種別名称
            //scmAcOdrDtlAsRow.DeliveredGoodsDiv = scmAnswer.DeliveredGoodsDiv; // 納品区分
            //scmAcOdrDtlAsRow.HandleDivCode = scmAnswer.HandleDivCode; // 取扱区分
            //scmAcOdrDtlAsRow.GoodsShape = scmAnswer.GoodsShape; // 商品形態
            //scmAcOdrDtlAsRow.DelivrdGdsConfCd = scmAnswer.DelivrdGdsConfCd; // 納品確認区分
            //scmAcOdrDtlAsRow.DeliGdsCmpltDueDate = scmAnswer.DeliGdsCmpltDueDate; // 納品完了予定日

            scmAcOdrDtlAsRow.AnswerDeliveryDate = salesDetail.AnswerDelivDate; // 回答納期
            // ----- UPD 2011/10/27 ----- >>>>>
            //scmAcOdrDtlAsRow.BLGoodsCode = salesDetail.PrtBLGoodsCode; // BL商品コード
            // --- UPD 2013/10/17 Y.Wakita ---------->>>>>
            //if (this._originalBLGoodsCodeMap.ContainsKey(salesDetail.SalesRowNo))
            if (this._originalBLGoodsCodeMap.ContainsKey(salesDetail.InqRowNumber))
            // --- UPD 2013/10/17 Y.Wakita ----------<<<<<
            {
                // 入力BLコードをSFへ回答する
                // --- UPD 2013/10/17 Y.Wakita ---------->>>>>
                //scmAcOdrDtlAsRow.BLGoodsCode = this._originalBLGoodsCodeMap[salesDetail.SalesRowNo]; // BL商品コード
                // DEL 2015/07/08 豊沢 SCM高速化 Redmine4222対応 --------------------->>>>>
                //scmAcOdrDtlAsRow.BLGoodsCode = salesDetail.BLGoodsCode; // BL商品コード
                // DEL 2015/07/08 豊沢 SCM高速化 Redmine4222対応 ---------------------<<<<<
                // --- UPD 2013/10/17 Y.Wakita ----------<<<<<
                this._originalBLGoodsCodeMap.Remove(salesDetail.SalesRowNo);
            }
            // ADD 2013/03/27 T.Yoshioka SCM障害№10491 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            // UPD 2015/07/08 豊沢 SCM高速化 Redmine4222対応 --------------------->>>>>
            //// 品番検索の場合（手動回答、いきなり回答）
            //if (scmAcOdrDtlAsRow.BLGoodsCode.Equals(0))
            ///いきなり回答/いきなり返品問合せ番号が振られていない場合且つ、BLコード無し(品番検索)
            if (scmAcOdrDtlAsRow.BLGoodsCode.Equals(0) && scmAcOdrDtlAsRow.InqRowNumber <= 0)
            // UPD 2015/07/08 豊沢 SCM高速化 Redmine4222対応 ---------------------<<<<<
            {
                scmAcOdrDtlAsRow.BLGoodsCode = salesDetail.BLGoodsCode; // BL商品コード
            }
            // ADD 2013/03/27 T.Yoshioka SCM障害№10491 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // DEL 2013/02/22 T.Yoshioka 2013/03/06配信予定 SCM障害№108 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            //else
            //{
            //    scmAcOdrDtlAsRow.BLGoodsCode = salesDetail.PrtBLGoodsCode; // BL商品コード
            //}
            // DEL 2013/02/22 T.Yoshioka 2013/03/06配信予定 SCM障害№108 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

            // ----- UPD 2011/10/27 ----- <<<<<
            //scmAcOdrDtlAsRow.BLGoodsDrCode = scmAnswer.BLGoodsDrCode; // BL商品コード枝番

            //scmAcOdrDtlAsRow.InqGoodsName = salesSlip.InqGoodsName; // 問発商品名
            scmAcOdrDtlAsRow.AnsGoodsName = salesDetail.GoodsName; // 回答商品名

            //scmAcOdrDtlAsRow.SalesOrderCount = scmAnswer.SalesOrderCount; // 発注数
            //>>>2010/02/26
            //>>>2011/02/01
            //if ((salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) &&
            //    (scmAcOdrDtlAsRow.SalesOrderCount == 0))
            if (scmAcOdrDtlAsRow.SalesOrderCount == 0)
            //<<<2011/02/01
            {
                scmAcOdrDtlAsRow.SalesOrderCount = salesDetail.ShipmentCnt; // 発注数
            }
            //<<<2010/02/26
            scmAcOdrDtlAsRow.DeliveredGoodsCount = salesDetail.ShipmentCnt; // 納品数
            scmAcOdrDtlAsRow.GoodsNo = salesDetail.GoodsNo; // 商品番号
            scmAcOdrDtlAsRow.GoodsMakerCd = salesDetail.GoodsMakerCd; // 商品メーカーコード
            scmAcOdrDtlAsRow.GoodsMakerNm = salesDetail.MakerName; // 商品メーカー名称

            //scmAcOdrDtlAsRow.PureGoodsMakerCd = salesSlip.PureGoodsMakerCd; // 純正商品メーカーコード
            //scmAcOdrDtlAsRow.InqPureGoodsNo = salesSlip.InqPureGoodsNo; // 問発純正商品番号
            //scmAcOdrDtlAsRow.AnsPureGoodsNo = salesSlip.AnsPureGoodsNo; // 回答純正商品番号

            scmAcOdrDtlAsRow.ListPrice = (long)salesDetail.ListPriceTaxExcFl; // 定価
            // ----- UPD 2011/07/20 ------- >>>>>>>>>
            //scmAcOdrDtlAsRow.UnitPrice = (long)salesDetail.SalesUnPrcTaxExcFl; // 単価
            scmAcOdrDtlAsRow.UnitPrice = (long)Math.Round(salesDetail.SalesUnPrcTaxExcFl, 0, MidpointRounding.AwayFromZero); // 単価
            // ----- UPD 2011/07/20 ------- <<<<<<<<<
            //>>>2011/02/01 値引き回答対応
            if ((salesDetail.ShipmentCnt == 0) && (salesDetail.SalesUnPrcTaxExcFl == 0))
            {
                scmAcOdrDtlAsRow.UnitPrice = (long)salesDetail.SalesMoneyTaxExc; // 売上金額
            }
            //<<<2011/02/01 値引き回答対応

            string url = string.Empty;
            this.GetURL(salesDetail.GoodsMngNo, out url);
            scmAcOdrDtlAsRow.GoodsAddInfo = url; // 商品補足情報

            scmAcOdrDtlAsRow.RoughRrofit = (long)(salesDetail.SalesUnPrcTaxExcFl - salesDetail.SalesUnitCost); // 粗利額
            double totalGrossProfitRate;
            this.GetRate((salesDetail.SalesUnPrcTaxExcFl - salesDetail.SalesUnitCost), salesDetail.SalesUnPrcTaxExcFl, out totalGrossProfitRate);
            scmAcOdrDtlAsRow.RoughRate = totalGrossProfitRate; // 粗利率
            //scmAcOdrDtlAsRow.AnswerLimitDate = salesDetail.AnswerDelivDate; // 回答期限1
            scmAcOdrDtlAsRow.CommentDtl = salesDetail.DtlNote; // 備考(明細)
            //scmAcOdrDtlAsRow.AppendingFileDtl = scmAnswer.AppendingFileDtl; // 添付ファイル(明細)
            //scmAcOdrDtlAsRow.AppendingFileNmDtl = scmAnswer.AppendingFileNmDtl; // 添付ファイル名(明細)
            scmAcOdrDtlAsRow.ShelfNo = salesDetail.WarehouseShelfNo; // 棚番
            //scmAcOdrDtlAsRow.AdditionalDivCd = scmAnswer.AdditionalDivCd; // 追加区分
            //scmAcOdrDtlAsRow.CorrectDivCD = scmAnswer.CorrectDivCD; // 訂正区分
            scmAcOdrDtlAsRow.AcptAnOdrStatus = salesSlip.AcptAnOdrStatus; // 受注ステータス
            scmAcOdrDtlAsRow.SalesSlipNum = salesDetail.SalesSlipNum; // 売上伝票番号
            //ここ
            if (scmAcOdrDtlAsRow.SalesRowNo == 0) scmAcOdrDtlAsRow.SalesRowNo = salesDetail.SalesRowNo; // 売上行番号
            //scmAcOdrDtlAsRow.CampaignCode = scmAnswer.CampaignCode; // キャンペーンコード
            //scmAcOdrDtlAsRow.StockDiv = scmAnswer.StockDiv; // 在庫区分
            int InqOrdDivCd = ((salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.Sales) || (salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.AcceptAnOrder)) ? 1 : 2;
            scmAcOdrDtlAsRow.InqOrdDivCd = InqOrdDivCd; // 問合せ・発注種別
            //scmAcOdrDtlAsRow.DisplayOrder = scmAnswer.DisplayOrder; // 表示順位
            // ADD 2012/05/24 ------------------------------------------------------->>>>>
            // DEL 2013/12/11 SCM仕掛一覧№10613対応 -------------------------------------->>>>>
            //scmAcOdrDtlAsRow.DisplayOrder = salesDetail.InqRowNumber; // 表示順位
            // DEL 2013/12/11 SCM仕掛一覧№10613対応 --------------------------------------<<<<<
            // ADD 2012/05/24 -------------------------------------------------------<<<<<
            //scmAcOdrDtlAsRow.GoodsMngNo = scmAnswer.GoodsMngNo; // 商品管理番号
            //>>>2011/02/01 PS管理番号保持対応
            scmAcOdrDtlAsRow.GoodsMngNo = salesDetail.GoodsMngNo; // 商品管理番号
            //<<<2011/02/01 PS管理番号保持対応
            //>>>2011/02/01
            if (salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods)
            {
                scmAcOdrDtlAsRow.CancelCndtinDiv = 30;
            }
            //<<<2011/02/01
            scmAcOdrDtlAsRow.DtlRelationGuid = salesDetail.DtlRelationGuid;
            //>>>2011/05/25
            scmAcOdrDtlAsRow.WarehouseCode = salesDetail.WarehouseCode; // 倉庫コード
            scmAcOdrDtlAsRow.WarehouseName = salesDetail.WarehouseName; // 倉庫名称
            scmAcOdrDtlAsRow.WarehouseShelfNo = salesDetail.WarehouseShelfNo; // 棚番
            //<<<2011/05/25

            scmAcOdrDtlAsRow.CampaignCode = salesDetail.CampaignCode; // キャンペーンコード // ADD 2011/10/10
            
            // 2012/01/16 Add >>>
            // UPD 2015/02/04 豊沢 PM-SCM社内障害一覧No.72対応 ------------------------------------------>>>>>
            //scmAcOdrDtlAsRow.GoodsSpecialNote = salesDetail.GoodsSpecialNote; // 特記事項
            ScmDataSet.SCMAcOdrDtlAsRow[] scmAcOdrDtlAsRows;
            scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}={3}",
                this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, salesDetail.InqRowNumber,
                this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, salesDetail.InqRowNumDerivedNo));

            if (scmAcOdrDtlAsRows.Length != 0)
            {
                // 手動回答時、特記事項設定
                // 検索時の回答データから取得
                scmAcOdrDtlAsRow.GoodsSpecialNote = scmAcOdrDtlAsRows[0].GoodsSpecialNote;
            }
            else
            {
                // UPD 2015/02/10 SCM高速化Redmine#180対応 ------------------------------------------>>>>>  
                //// ダイレクト回答時、特記事項設定
                //// 商品検索結果から取得
                //GoodsUnitData goodsUnitData = null;
                //GoodsInfoKey goodsInfoKey = new GoodsInfoKey(salesDetail.GoodsNo, salesDetail.GoodsMakerCd);
                //if (this._goodsUnitDataInfo.ContainsKey(goodsInfoKey))
                //{
                //    goodsUnitData = this._goodsUnitDataInfo[goodsInfoKey];
                //    scmAcOdrDtlAsRow.GoodsSpecialNote = goodsUnitData.GoodsSpecialNote;
                //}
                // ダイレクト回答時、商品検索結果から取得
                if (salesDetail.AcptAnOdrStatus.Equals((int)AcptAnOdrStatus.Sales) && salesDetail.SalesSlipDtlNumSrc == 0)
                {
                    GoodsUnitData goodsUnitData = null;
                    GoodsInfoKey goodsInfoKey = new GoodsInfoKey(salesDetail.GoodsNo, salesDetail.GoodsMakerCd);
                    if (this._goodsUnitDataInfo.ContainsKey(goodsInfoKey))
                    {
                        goodsUnitData = this._goodsUnitDataInfo[goodsInfoKey];
                        scmAcOdrDtlAsRow.GoodsSpecialNote = goodsUnitData.GoodsSpecialNote;
                        // 商品検索結果に規格・特記事項の設定がなく、売上明細データに規格・特記事項が存在する時、伝票修正とみなして売上明細データより設定する
                        if (string.IsNullOrEmpty(goodsUnitData.GoodsSpecialNote) && !string.IsNullOrEmpty(salesDetail.GoodsSpecialNote))
                        {
                            scmAcOdrDtlAsRow.GoodsSpecialNote = salesDetail.GoodsSpecialNote; // 特記事項
                        }
                    }
                }
                // 売上明細データより設定
                else
                {
                    scmAcOdrDtlAsRow.GoodsSpecialNote = salesDetail.GoodsSpecialNote; // 特記事項
                }
                // UPD 2015/02/10 SCM高速化Redmine#180対応 ------------------------------------------<<<<<  
            }
            // UPD 2015/02/04 豊沢 PM-SCM社内障害一覧No.72対応 ------------------------------------------<<<<<

            // 2012/01/16 Add <<<

            //>>>2012/06/27
            //// 2012/06/15 ADD T.Yoshioka 90 ---------------->>>>>>>>>>>>>>>>>>>>>>>>> 
            //scmAcOdrDtlAsRow.AnsPureGoodsNo = salesDetail.AnsPureGoodsNo;       // 回答純正商品番号
            //scmAcOdrDtlAsRow.PureGoodsMakerCd = salesDetail.PureGoodsMakerCd;   // 純正商品メーカーコード
            //// 2012/06/15 ADD T.Yoshioka 90 ----------------<<<<<<<<<<<<<<<<<<<<<<<<
            if ((scmAcOdrDtlAsRow.AnsPureGoodsNo == string.Empty) ||
                (scmAcOdrDtlAsRow.PureGoodsMakerCd == 0))
            {
                scmAcOdrDtlAsRow.AnsPureGoodsNo = salesDetail.AnsPureGoodsNo;       // 回答純正商品番号
                scmAcOdrDtlAsRow.PureGoodsMakerCd = salesDetail.PureGoodsMakerCd;   // 純正商品メーカーコード
            }
            //<<<2012/06/27

            // ADD 2014/07/23 Redmine#43080の2の対応--------------------->>>>>
            // UPD 2015/03/06 SCM高速化Redmine#342対応 ------------------------------>>>>>
            //if (scmAcOdrDtlAsRow.InquiryNumber == 0 && salesDetail.GoodsSearchDivCd == 0 && this._goodsUnitDataInfo != null && this._goodsUnitDataInfo.Count != 0)
            // ダイレクト回答でBLコード検索を行い、売上伝票登録が初回の時、種別名称をセットする
            if (scmAcOdrDtlAsRow.InquiryNumber == 0 && salesDetail.GoodsSearchDivCd == 0 && this._goodsUnitDataInfo != null && this._goodsUnitDataInfo.Count != 0 &&
                 salesDetail.SalesSlipNum.Trim() == ctDefaultSalesSlipNum && salesDetail.SalesSlipDtlNumSrc == 0)
            // UPD 2015/03/06 SCM高速化Redmine#342対応 ------------------------------<<<<<
            {
                GoodsUnitData goodsUnitData = null;
                GoodsInfoKey goodsInfoKey = new GoodsInfoKey(salesDetail.GoodsNo, salesDetail.GoodsMakerCd);
                if (this._goodsUnitDataInfo.ContainsKey(goodsInfoKey))
                {
                    goodsUnitData = this._goodsUnitDataInfo[goodsInfoKey];
                    scmAcOdrDtlAsRow.PrmSetDtlNo2 = goodsUnitData.PrmSetDtlNo2;         // 優良設定詳細コード２
                    scmAcOdrDtlAsRow.PrmSetDtlName2 = goodsUnitData.PrmSetDtlName2;     // 優良設定詳細名称２
                    // 2015/02/23 ADD yugami SCM高速化 C向け種別・特記事項対応 ---------->>>>>
                    scmAcOdrDtlAsRow.PrmSetDtlName2ForFac = goodsUnitData.PrmSetDtlName2ForFac; // 優良設定詳細名称２(工場向け)
                    scmAcOdrDtlAsRow.PrmSetDtlName2ForCOw = goodsUnitData.PrmSetDtlName2ForCOw; // 優良設定詳細名称２(カーオーナー向け)
                    // 2015/02/23 ADD yugami SCM高速化 C向け種別・特記事項対応 ----------<<<<<
                }
            }
            // ADD 2014/07/23 Redmine#43080の2の対応---------------------<<<<<

            // ADD 2015/01/07 メーカー希望小売価格対応 --------------------->>>>>
            // UPD 2015/01/27 SCM高速化Redmine#33対応 ------------------------->>>>>
            //// ダイレクト回答 & 手入力以外 & 商品検索結果が存在する場合
            //if (scmAcOdrDtlAsRow.InquiryNumber == 0 && salesDetail.GoodsSearchDivCd != 2 && this._goodsUnitDataInfo != null && this._goodsUnitDataInfo.Count != 0)
            // UPD 2015/01/28 SCM高速化Redmine#61対応 --------------------------->>>>>
            //// 手入力以外 & 商品検索結果が存在する場合
            //if (salesDetail.GoodsSearchDivCd != 2 && this._goodsUnitDataInfo != null && this._goodsUnitDataInfo.Count != 0)
            // 商品検索結果が存在する場合
            // UPD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応 --------------------->>>>>
            //if (this._goodsUnitDataInfo != null && this._goodsUnitDataInfo.Count != 0)
            if (this._mkrSuggestRtPricList != null && this._mkrSuggestRtPricList.Count != 0)
            // UPD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応 ---------------------<<<<<
            // UPD 2015/01/28 SCM高速化Redmine#61対応 ---------------------------<<<<<
            // UPD 2015/01/27 SCM高速化Redmine#33対応 ------------------------->>>>>
            {
                // メーカー希望小売価格取得
                GoodsUnitData goodsUnitData = null;
                GoodsInfoKey goodsInfoKey = new GoodsInfoKey(salesDetail.GoodsNo, salesDetail.GoodsMakerCd);
                // UPD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応 --------------------->>>>>
                //if (this._goodsUnitDataInfo.ContainsKey(goodsInfoKey))
                if (this._mkrSuggestRtPricList.ContainsKey(goodsInfoKey))
                // UPD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応 ---------------------<<<<<
                {
                    // UPD 2015/03/30 全体配信システムテスト障害№59対応 --------------------------->>>>>
                    //goodsUnitData = this._goodsUnitDataInfo[goodsInfoKey];
                    if (this._goodsUnitDataInfo != null)
                    {
                        if (this._goodsUnitDataInfo.ContainsKey(goodsInfoKey))
                        {
                            goodsUnitData = this._goodsUnitDataInfo[goodsInfoKey];
                        }
                    }
                    // UPD 2015/03/30 全体配信システムテスト障害№59対応 ---------------------------<<<<<
                    // DEL 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応 --------------------->>>>>
                    //List<GoodsPrice> mkrSuggestRtPricList = new List<GoodsPrice>(); // メーカー希望小売価格リスト
                    //mkrSuggestRtPricList = goodsUnitData.MkrSuggestRtPricList;
                    // DEL 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応 ---------------------<<<<<
                    DateTime targetDate = new DateTime();                           // 基準日
                    long listPrice = 0;
                    switch ((SalesSlipInputAcs.AcptAnOdrStatusState)salesSlip.AcptAnOdrStatusDisplay)
                    {
                        case AcptAnOdrStatusState.Estimate:
                            targetDate = salesSlip.SalesDate; // 売上日
                            break;
                        case AcptAnOdrStatusState.UnitPriceEstimate:
                            targetDate = salesSlip.SalesDate; // 売上日
                            break;
                        case AcptAnOdrStatusState.AcceptAnOrder:
                            targetDate = salesSlip.SalesDate; // 売上日
                            break;
                        case AcptAnOdrStatusState.Sales:
                            targetDate = salesSlip.SalesDate; // 売上日
                            break;
                        case AcptAnOdrStatusState.Shipment:
                            targetDate = salesSlip.ShipmentDay; // 出荷日
                            break;
                    }
                    // UPD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応 --------------------->>>>>
                    #region 削除
                    //// UPD 2015/01/29 SCM高速化Redmine#87対応 ------------------------------->>>>>
                    ////// ADD 2015/01/28 SCM高速化Redmine#61対応 ------------------------------->>>>>
                    ////// 商品情報がユーザー登録の品番の時、品番検索を行い提供データのメーカー希望小売価格を取得する
                    ////if (IsUserRegistAtOfferKubun(goodsUnitData))
                    ////{
                    ////    GetOfferGoodsPrice(goodsUnitData, out mkrSuggestRtPricList);
                    ////}
                    ////// ADD 2015/01/28 SCM高速化Redmine#61対応 -------------------------------<<<<<
                    //////-----------------------------------------------------------------------
                    ////// メーカー希望小売価格情報が存在する場合は、メーカー希望小売価格情報から取得
                    //////-----------------------------------------------------------------------
                    ////if (mkrSuggestRtPricList != null && mkrSuggestRtPricList.Count != 0)
                    ////{
                    ////    object obj = this._salesSlipInputInitDataAcs.GetGoodsPrice(targetDate, mkrSuggestRtPricList);
                    ////    if ((obj != null) && (obj is GoodsPrice))
                    ////    {
                    ////        GoodsPrice goodsPrice = (GoodsPrice)obj;
                    ////        listPrice = (long)goodsPrice.ListPrice;
                    ////    }
                    ////}

                    //// 商品情報がユーザー登録の提供データ品番の時、品番検索を行い提供データのメーカー希望小売価格を取得する
                    //if (IsUserRegistAtOfferKubun(goodsUnitData))
                    //{
                    //    GetOfferGoodsPrice(goodsUnitData, out mkrSuggestRtPricList);
                    //    if (mkrSuggestRtPricList != null && mkrSuggestRtPricList.Count != 0)
                    //    {
                    //        object obj = this._salesSlipInputInitDataAcs.GetGoodsPrice(targetDate, mkrSuggestRtPricList);
                    //        if ((obj != null) && (obj is GoodsPrice))
                    //        {
                    //            GoodsPrice goodsPrice = (GoodsPrice)obj;
                    //            // 取得した価格情報がオープン価格以外の時、提供データの定価をメーカー希望小売価格とする
                    //            if (goodsPrice.OpenPriceDiv != 1)
                    //            {
                    //                listPrice = (long)goodsPrice.ListPrice;
                    //            }
                    //            else
                    //            {
                    //                // 取得した価格情報がオープン価格の時は元の価格情報から取得する
                    //                if (goodsUnitData.MkrSuggestRtPricList != null && goodsUnitData.MkrSuggestRtPricList.Count != 0)
                    //                {
                    //                    object obj2 = this._salesSlipInputInitDataAcs.GetGoodsPrice(targetDate, goodsUnitData.MkrSuggestRtPricList);
                    //                    if ((obj2 != null) && (obj2 is GoodsPrice))
                    //                    {
                    //                        GoodsPrice goodsPrice2 = (GoodsPrice)obj2;
                    //                        listPrice = (long)goodsPrice2.ListPrice;
                    //                    }
                    //                }

                    //            }
                    //        }
                    //    }
                    //}
                    //else
                    //{
                    //    // 商品情報が提供データ品番の時
                    //    if (mkrSuggestRtPricList != null && mkrSuggestRtPricList.Count != 0)
                    //    {
                    //        object obj = this._salesSlipInputInitDataAcs.GetGoodsPrice(targetDate, mkrSuggestRtPricList);
                    //        if ((obj != null) && (obj is GoodsPrice))
                    //        {
                    //            GoodsPrice goodsPrice = (GoodsPrice)obj;
                    //            listPrice = (long)goodsPrice.ListPrice;
                    //        }
                    //    }
                    //}
                    //// UPD 2015/01/29 SCM高速化Redmine#87対応 -------------------------------<<<<<
                    #endregion 

                    // メーカー希望小売価格リストより基準日に該当する価格情報取得
                    List<GoodsPrice> mkrSuggestRtPricList = this._mkrSuggestRtPricList[goodsInfoKey];
                    // 提供データの価格情報がなくユーザー登録品番の時、提供データを再取得する
                    if ((mkrSuggestRtPricList == null || mkrSuggestRtPricList.Count == 0) && IsUserRegistAtOfferKubun(goodsUnitData))
                    {
                        GetOfferGoodsPrice(goodsUnitData, out mkrSuggestRtPricList);
                    }
                    object obj = null;
                    if (mkrSuggestRtPricList != null && mkrSuggestRtPricList.Count != 0)
                    {
                        obj = this._salesSlipInputInitDataAcs.GetGoodsPrice(targetDate, mkrSuggestRtPricList);
                    }
                    if ((obj != null) && (obj is GoodsPrice))
                    {
                        GoodsPrice goodsPrice = (GoodsPrice)obj;
                        // 取得した価格情報がオープン価格の時、メーカー希望小売価格リスト（ユーザー登録分）の価格情報を取得する
                        if (goodsPrice.OpenPriceDiv == 1)
                        {
                            if (this._mkrSuggestRtPricUList.ContainsKey(goodsInfoKey))
                            {
                                mkrSuggestRtPricList = this._mkrSuggestRtPricUList[goodsInfoKey];
                                object objU = null;
                                if (mkrSuggestRtPricList != null && mkrSuggestRtPricList.Count != 0)
                                {
                                    objU = this._salesSlipInputInitDataAcs.GetGoodsPrice(targetDate, mkrSuggestRtPricList);
                                }
                                if ((objU != null) && (objU is GoodsPrice))
                                {
                                    GoodsPrice goodsPriceU = (GoodsPrice)objU;
                                    listPrice = (long)goodsPriceU.ListPrice;
                                }
                            }
                        }
                        else
                        {
                            listPrice = (long)goodsPrice.ListPrice;
                        }
                    }
                    // ユーザー登録のみの場合はメーカー希望小売価格リスト（ユーザー登録分）の価格情報から取得する
                    else
                    {
                        if (this._mkrSuggestRtPricUList.ContainsKey(goodsInfoKey))
                        {
                            mkrSuggestRtPricList = this._mkrSuggestRtPricUList[goodsInfoKey];
                            object objU = null;
                            if (mkrSuggestRtPricList != null && mkrSuggestRtPricList.Count != 0)
                            {
                                objU = this._salesSlipInputInitDataAcs.GetGoodsPrice(targetDate, mkrSuggestRtPricList);
                            }
                            if ((objU != null) && (objU is GoodsPrice))
                            {
                                GoodsPrice goodsPriceU = (GoodsPrice)objU;
                                listPrice = (long)goodsPriceU.ListPrice;
                            }
                        }
                    }
                    // UPD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応 ---------------------<<<<<
                    scmAcOdrDtlAsRow.MkrSuggestRtPric = listPrice; // メーカー希望小売価格
                }
            }
            // ADD 2015/01/07 メーカー希望小売価格対応 ---------------------<<<<<

            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            GoodsUnitData goodsUnitData2;
            // 回答納期区分の設定　返品、赤伝の場合は実行しない
            if (!this.SalesSlip.InputMode.Equals(SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Return))
            {
                bool isGetDiv = true;
                long salesSlipNum = 0;
                long.TryParse(scmAcOdrDtlAsRow.SalesSlipNum, out salesSlipNum);
                // ダイレクト回答か否かの判断
                if (salesSlipNum.Equals(0) && scmAcOdrDtlAsRow.InquiryNumber.Equals(0)
                    && !scmAcOdrDataRow.AcptAnOdrStatus.Equals((int)AcptAnOdrStatus.Order)
                    && this.SalesSlip.InputMode.Equals(SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal)
                    )
                {
                    // 受注計上か否かの判断
                    // UPD 2015/02/17 吉岡 SCM高速化 Redmine#231 ----------->>>>>>>>>>>
                    #region 旧ソース
                    //if (salesDetailList != null && salesDetailList.Count > 0)
                    //{
                    //    int rowno = scmAcOdrDtlAsRow.SalesRowNo;
                    //    if (!salesDetailList.Exists(delegate(SalesDetail dtl)
                    //        {
                    //            if (dtl.SalesRowNo.Equals(rowno))
                    //            {
                    //                return dtl.AcptAnOdrStatusSrc.Equals((int)AcptAnOdrStatus.Order);
                    //            }
                    //            else
                    //            {
                    //                return false;
                    //            }
                    //        }
                    //    ))
                    //    {
                    //        // 受注計上では無い場合
                    //        isGetDiv = false;
                    //    }
                    //}
                    #endregion
                    if (!this.IsMatchOdrStatusSrc(salesDetailList, scmAcOdrDtlAsRow.SalesRowNo, (int)AcptAnOdrStatus.Order))
                    {
                        // 受注計上では無い場合
                        isGetDiv = false;
                    }
                    // UPD 2015/02/17 吉岡 SCM高速化 Redmine#231 ----------->>>>>>>>>>>

                    if (!isGetDiv)
                    {
                        // 受注計上ではない場合
                        // ダイレクト回答の場合（売上伝票番号:0　問合せ番号:0）受注では無い場合　部品検索時に取得した回答納期区分を設定
                        SalesInputDataSet.SalesDetailRow retSalesDetail = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesDetail.SalesSlipNum, salesDetail.SalesRowNo);
                        if (retSalesDetail != null)
                        {
                            scmAcOdrDtlAsRow.AnsDeliDateDiv = retSalesDetail.AnsDeliDateDiv;
                        }
                    }
                }
                else if (salesSlipNum.Equals(0) && scmAcOdrDtlAsRow.InquiryNumber.Equals(0) && scmAcOdrDataRow.AcptAnOdrStatus.Equals((int)AcptAnOdrStatus.Order))
                {
                    isGetDiv = false;
                    // UOEの場合（売上伝票番号:0　問合せ番号:0）受注の場合　部品検索時に取得した回答納期区分を設定
                    SalesInputDataSet.SalesDetailAcceptAnOrderRow retOrderDetail = this._salesDetailAcceptAnOrderDataTableForOrder.FindByDtlRelationGuid(salesDetail.DtlRelationGuid);
                    if (retOrderDetail != null)
                    {
                        scmAcOdrDtlAsRow.AnsDeliDateDiv = retOrderDetail.AnsDeliDateDiv;
                    }
                }
                // ADD 2015/02/17 吉岡 SCM高速化 Redmine#231 ----------->>>>>>>>>>>
                else if (salesSlipNum.Equals(0) && !scmAcOdrDtlAsRow.InquiryNumber.Equals(0))
                {
                    // 見積計上時は回答納期区分を取得、それ以外は手動回答初回として回答納期区分の取得は行わない
                    if (!(!scmAcOdrDataRow.InquiryNumber.Equals(0) && salesDetail.AcptAnOdrStatusSrc.Equals((int)AcptAnOdrStatus.Estimate) && salesDetail.SalesSlipDtlNumSrc > 0))
                    {
                        // 手動回答初回
                        isGetDiv = false;
                    }
                }
                // ADD 2015/02/17 吉岡 SCM高速化 Redmine#231 -----------<<<<<<<<<<<<
                
                if(isGetDiv)
                {
                    // 回答納期区分を取得
                    if (this._goodsUnitDataInfo != null && this._goodsUnitDataInfo.Count != 0)
                    {
                        GoodsInfoKey goodsInfoKey = new GoodsInfoKey(salesDetail.GoodsNo, salesDetail.GoodsMakerCd);
                        if (this._goodsUnitDataInfo.ContainsKey(goodsInfoKey))
                        {
                            goodsUnitData2 = this._goodsUnitDataInfo[goodsInfoKey];
                            if (goodsUnitData2 != null)
                            {
                                // ADD 2015/02/17 吉岡 SCM高速化 Redmine#231 ----------->>>>>>>>>>>
                                List<Warehouse> wareListSv = new List<Warehouse>();
                                if (
                                    // 貸出計上の初回　では無い場合
                                    !(this.IsMatchOdrStatusSrc(salesDetailList, scmAcOdrDtlAsRow.SalesRowNo, (int)AcptAnOdrStatusState.Shipment) && salesSlipNum.Equals(0))
                                    // 受注計上の初回  では無い場合
                                    && !(this.IsMatchOdrStatusSrc(salesDetailList, scmAcOdrDtlAsRow.SalesRowNo, (int)AcptAnOdrStatus.Order) && salesSlipNum.Equals(0))
                                    // 売伝で伝票登録 未送信　⇒ 修正呼出しで回答送信 (見積、売上)　では無い場合
                                    && !(!salesSlipNum.Equals(0) && scmAcOdrDtlAsRow.InquiryNumber.Equals(0))
                                    // 見積時回答送信済で、見積計上時
                                    && (!scmAcOdrDataRow.InquiryNumber.Equals(0) && salesDetail.AcptAnOdrStatusSrc.Equals((int)AcptAnOdrStatus.Estimate) && salesDetail.SalesSlipDtlNumSrc > 0)
                                    )
                                {
                                    // 倉庫リストはBLP自社設定マスタのリストを使用する
                                    List<string> wareCodeList = this.CreatePriorWarehouseListForPccuoe(this.GetCustomerInfo().CustomerEpCode, this.GetCustomerInfo().CustomerSecCode, this._enterpriseCode, this._sectionCode);
                                    List<Warehouse> wareList = new List<Warehouse>();
                                    foreach (string code in wareCodeList)
                                    {
                                        Warehouse wk = new Warehouse();
                                        wk.WarehouseCode = code;
                                        wareList.Add(wk);
                                    }
                                    // 倉庫リストの保管
                                    _salesSlipInputInitDataAcs.GetWarehouseList(out wareListSv);
                                    // 今回用に倉庫リストを設定
                                    _salesSlipInputInitDataAcs.SetWarehouseList(wareList);
                                }
                                // ADD 2015/02/17 吉岡 SCM高速化 Redmine#231 -----------<<<<<<<<<<<<

                                Int16 ansDeliDateDiv;
                                Stock stock = this._salesSlipInputInitDataAcs.GetStockFromStockList(scmAcOdrDtlAsRow.WarehouseCode, scmAcOdrDtlAsRow.GoodsMakerCd, scmAcOdrDtlAsRow.GoodsNo, goodsUnitData2.StockList);
                                this.GetAnswerDeliveryDate(salesSlip, scmAcOdrDtlAsRow.WarehouseCode, scmAcOdrDtlAsRow.WarehouseName, scmAcOdrDtlAsRow.WarehouseShelfNo, stock, salesDetail.ShipmentCnt, out ansDeliDateDiv);
                                scmAcOdrDtlAsRow.AnsDeliDateDiv = ansDeliDateDiv;

                                // ADD 2015/02/17 吉岡 SCM高速化 Redmine#231 ----------->>>>>>>>>>>
                                // 倉庫リストの戻し
                                if (
                                    // 貸出計上の初回　では無い場合
                                    !(this.IsMatchOdrStatusSrc(salesDetailList, scmAcOdrDtlAsRow.SalesRowNo, (int)AcptAnOdrStatusState.Shipment) && salesSlipNum.Equals(0))
                                    // 受注計上の初回  では無い場合
                                    && !(this.IsMatchOdrStatusSrc(salesDetailList, scmAcOdrDtlAsRow.SalesRowNo, (int)AcptAnOdrStatus.Order) && salesSlipNum.Equals(0))
                                    // 売伝で伝票登録 未送信　⇒ 修正呼出しで回答送信 (見積、売上)　では無い場合
                                    && !(!salesSlipNum.Equals(0) && scmAcOdrDtlAsRow.InquiryNumber.Equals(0))
                                    // 見積時回答送信済で、見積計上時
                                    && (!scmAcOdrDataRow.InquiryNumber.Equals(0) && salesDetail.AcptAnOdrStatusSrc.Equals((int)AcptAnOdrStatus.Estimate) && salesDetail.SalesSlipDtlNumSrc > 0)
                                    )
                                {
                                    _salesSlipInputInitDataAcs.SetWarehouseList(wareListSv);
                                }
                                // ADD 2015/02/17 吉岡 SCM高速化 Redmine#231 -----------<<<<<<<<<<<<
                            }
                        }
                    }
                }
            }
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

            scmAcOdrDtlAsRow.AnsBLGoodsCode = salesDetail.BLGoodsCode; // 回答BL商品コード // ADD 2018/04/16 田建委 SCM新BLコード対応
            #endregion
        }

        // ADD 2015/02/17 吉岡 SCM高速化 Redmine#231 ----------->>>>>>>>>>>
        /// <summary>
        /// 売上明細リストの指定明細行の受注ステータス（元）と、受注ステータスが一致しているか否か
        /// </summary>
        /// <param name="salesDetailList">売上明細リスト</param>
        /// <param name="rowno">売上明細の指定明細行</param>
        /// <param name="order">比較受注ステータス</param>
        /// <returns>true：一致する　false：一致しない</returns>
        private bool IsMatchOdrStatusSrc(List<SalesDetail> salesDetailList, int rowno, int order)
        {
            bool rtn = true;

            if (salesDetailList != null && salesDetailList.Count > 0)
            {
                if (!salesDetailList.Exists(delegate(SalesDetail dtl)
                    {
                        if (dtl.SalesRowNo.Equals(rowno))
                        {
                            return dtl.AcptAnOdrStatusSrc.Equals(order);
                        }
                        else
                        {
                            return false;
                        }
                    }
                ))
                {
                    // 一致しない
                    rtn = false;
                }
            }

            return rtn;
        }
        // ADD 2015/02/17 吉岡 SCM高速化 Redmine#231 -----------<<<<<<<<<<<<

        // ADD 2015/01/28 SCM高速化Redmine#61対応 ------------------------------->>>>>
        /// <summary>
        ///  提供区分がユーザー登録の提供データか判定します
        /// </summary>
        /// <param name="goodsUnitData">商品情報</param>
        /// <returns>true:ユーザー登録の提供データ false:提供データ・ユーザー登録のみ</returns>
        private bool IsUserRegistAtOfferKubun(GoodsUnitData goodsUnitData)
        {
            if (goodsUnitData == null) return false;

            switch (goodsUnitData.OfferKubun)
            {
                case 0:                 // ユーザー登録
                    {
                        // 0:ユーザー登録
                        if (goodsUnitData.OfferDataDiv == 0)
                        {
                            return false;
                        }
                        // 1:提供データ
                        else if (goodsUnitData.OfferDataDiv == 1)
                        {
                            return true;
                        }
                        return false;
                    }
                case 1: return true;    // 1:提供純正編集
                case 2: return true;    // 2:提供優良編集
                case 3: return false;   // 3:提供純正
                case 4: return false;   // 4:提供優良
                case 5: return false;   // 5:TBO
                case 7: return false;   // 7:オリジナル部品
                default:
                    return false;
            }
        }

        /// <summary>
        ///  提供データの価格情報を取得します
        /// </summary>
        /// <param name="goodsUnitData"></param>
        /// <param name="mkrSuggestRtPricList"></param>
        private void GetOfferGoodsPrice(GoodsUnitData goodsUnitData, out List<GoodsPrice> mkrSuggestRtPricList)
        {
            mkrSuggestRtPricList = null;

            if (goodsUnitData == null) return;

            // メーカーコード、品番より提供データの価格情報を取得
            ArrayList goodsPriceUWorkList = new ArrayList();
            GoodsPriceUWork goodsPriceUWork = new GoodsPriceUWork();
            ArrayList lstCond = new ArrayList();
            ArrayList lstRst;
            ArrayList lstRstPrm;
            ArrayList lstPrmPrice;

            OfrPrtsSrchCndWork work = new OfrPrtsSrchCndWork();
            work.MakerCode = goodsUnitData.GoodsMakerCd;
            work.PrtsNo = goodsUnitData.GoodsNo;
            lstCond.Add(work);

            if (_iOfferPartsInfo == null) _iOfferPartsInfo = MediationOfferPartsInfo.GetOfferPartsInfo();
            int status = _iOfferPartsInfo.GetOfrPartsInf(lstCond, out lstRst, out lstRstPrm, out lstPrmPrice);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if ((lstPrmPrice != null) && (lstPrmPrice.Count != 0))
                {
                    // 優良価格
                    foreach (OfferJoinPriceRetWork retWork in lstPrmPrice)
                    {
                        goodsPriceUWork = new GoodsPriceUWork();
                        goodsPriceUWork.GoodsMakerCd = retWork.PartsMakerCd;
                        goodsPriceUWork.GoodsNo = retWork.PrimePartsNoWithH;
                        goodsPriceUWork.ListPrice = retWork.NewPrice;
                        goodsPriceUWork.OfferDate = retWork.OfferDate;
                        goodsPriceUWork.OpenPriceDiv = retWork.OpenPriceDiv;
                        goodsPriceUWork.PriceStartDate = retWork.PriceStartDate;

                        goodsPriceUWorkList.Add(goodsPriceUWork);
                    }
                }
                if ((lstRst != null) && (lstRst.Count != 0))
                {
                    // 純正価格
                    foreach (RetPartsInf retWork in lstRst)
                    {
                        goodsPriceUWork = new GoodsPriceUWork();
                        goodsPriceUWork.GoodsMakerCd = retWork.CatalogPartsMakerCd;
                        goodsPriceUWork.GoodsNo = retWork.ClgPrtsNoWithHyphen;
                        // UPD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
                        //goodsPriceUWork.ListPrice = retWork.PartsPrice;
                        double listPrice = retWork.PartsPrice;
                        this.ReflectIsolIsland(0, retWork.CatalogPartsMakerCd, 3, ref listPrice);
                        goodsPriceUWork.ListPrice = listPrice;
                        // UPD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<
                        goodsPriceUWork.OfferDate = retWork.OfferDate;
                        goodsPriceUWork.OpenPriceDiv = retWork.OpenPriceDiv;
                        goodsPriceUWork.PriceStartDate = retWork.PartsPriceStDate;

                        goodsPriceUWorkList.Add(goodsPriceUWork);
                    }
                }
            }

            if (goodsPriceUWorkList != null && goodsPriceUWorkList.Count != 0)
            {
                // 価格情報リスト(ArrayList)をGoodsPriceのリストに変換
                GetGoodsPriceListFromGoodsPriceUWorkList(goodsPriceUWorkList, out mkrSuggestRtPricList);
            }
        }

        /// <summary>
        /// 価格情報データオブジェクトリスト取得処理
        /// </summary>
        /// <param name="goodsPriceWorkList">価格情報データワークオブジェクトリスト</param>
        /// <param name="goodsPriceList">価格情報データオブジェクトリスト</param>
        private void GetGoodsPriceListFromGoodsPriceUWorkList(ArrayList goodsPriceWorkList, out List<GoodsPrice> goodsPriceList)
        {
            goodsPriceList = new List<GoodsPrice>();

            foreach (GoodsPriceUWork goodsPriceUWork in goodsPriceWorkList)
            {
                GoodsPrice goodsPrice = new GoodsPrice();

                goodsPrice.CreateDateTime = goodsPriceUWork.CreateDateTime; // 作成日時
                goodsPrice.UpdateDateTime = goodsPriceUWork.UpdateDateTime; // 更新日時
                goodsPrice.EnterpriseCode = goodsPriceUWork.EnterpriseCode; // 企業コード
                goodsPrice.FileHeaderGuid = goodsPriceUWork.FileHeaderGuid; // GUID
                goodsPrice.UpdEmployeeCode = goodsPriceUWork.UpdEmployeeCode; // 更新従業員コード
                goodsPrice.UpdAssemblyId1 = goodsPriceUWork.UpdAssemblyId1; // 更新アセンブリID1
                goodsPrice.UpdAssemblyId2 = goodsPriceUWork.UpdAssemblyId2; // 更新アセンブリID2
                goodsPrice.LogicalDeleteCode = goodsPriceUWork.LogicalDeleteCode; // 論理削除区分
                goodsPrice.GoodsMakerCd = goodsPriceUWork.GoodsMakerCd; // 商品メーカーコード
                goodsPrice.GoodsNo = goodsPriceUWork.GoodsNo; // 商品番号
                goodsPrice.PriceStartDate = goodsPriceUWork.PriceStartDate; // 価格開始日
                goodsPrice.ListPrice = goodsPriceUWork.ListPrice; // 定価（浮動）
                goodsPrice.SalesUnitCost = goodsPriceUWork.SalesUnitCost; // 原価単価
                goodsPrice.StockRate = goodsPriceUWork.StockRate; // 仕入率
                goodsPrice.OpenPriceDiv = goodsPriceUWork.OpenPriceDiv; // オープン価格区分
                goodsPrice.OfferDate = goodsPriceUWork.OfferDate; // 提供日付
                goodsPrice.UpdateDate = goodsPriceUWork.UpdateDate; // 更新年月日

                goodsPriceList.Add(goodsPrice);
            }
        }

        // ADD 2015/01/28 SCM高速化Redmine#61対応 -------------------------------<<<<<

        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 ------------------------------------->>>>>
        /// <summary>
        /// 離島価格反映処理（商品検索アクセスクラスMAKHN04112Aを元にしています）
        /// </summary>
        /// <param name="taxationCode"></param>
        /// <param name="goodsMakerCd"></param>
        /// <param name="offerKubun"></param>
        /// <param name="unitPrice"></param>
        private void ReflectIsolIsland(int taxationCode, int goodsMakerCd, int offerKubun, ref double unitPrice)
        {
            if (offerKubun >= 3) // 提供分のみ
            {
                // 離島価格反映
                IsolIslandPrcWork isolIslandPrc = this.GetIsolIslandPrc(this._sectionCode, goodsMakerCd, unitPrice);
                if (isolIslandPrc != null) unitPrice = this.GetIsolIslandPrice(taxationCode, isolIslandPrc, unitPrice);
            }
        }

        /// <summary>
        /// 離島価格情報取得処理
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <param name="goodsMakerCode"></param>
        /// <param name="unitPrice"></param>
        /// <returns></returns>
        private IsolIslandPrcWork GetIsolIslandPrc(string sectionCode, int goodsMakerCode, double unitPrice)
        {
            return this._salesSlipInputInitDataAcs.IsolIslandList.Find(
                delegate(IsolIslandPrcWork iso)
                {
                    if ((iso.UpperLimitPrice >= unitPrice) &&
                        (iso.MakerCode == goodsMakerCode) &&
                        (iso.SectionCode.Trim() == sectionCode.Trim()))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );
        }

        /// <summary>
        /// 離島価格取得処理
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <param name="taxationDivCd"></param>
        /// <param name="isolIslandPrc"></param>
        /// <param name="targetPrice"></param>
        /// <returns></returns>
        private double GetIsolIslandPrice(int taxationDivCd, IsolIslandPrcWork isolIslandPrc, double targetPrice)
        {
            double retPrice = targetPrice;

            this.CalclatePriceByRate(taxationDivCd, isolIslandPrc.UpRate, ref retPrice);

            return retPrice;
        }
        // ADD 2015/03/18 SCM高速化 メーカー希望小売価格対応 -------------------------------------<<<<<

        /// <summary>
        /// 問合せ行番号取得処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <returns></returns>
        private int GetInqRowNumber(SalesSlip salesSlip, List<SalesDetail> salesDetailList)
        {
            int inqRowNumber = 0;

            // 追加明細数取得(問合せ行番号＝０)
            List<SalesDetail> detailList = salesDetailList.FindAll(
                delegate(SalesDetail sd)
                {
                    if (sd.InqRowNumber == 0)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );

            // 追加明細問合せ行番号マイナスセット明細数取得(問合せ行番号＜０)
            ScmDataSet.SCMAcOdrDtlAsRow[] scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}<{1}",
                this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, 0));

            return inqRowNumber = (scmAcOdrDtlAsRows.Length + 1) * -1;
        }

        /// <summary>
        /// SCM受注明細データ(回答)ワークオブジェクトをSCM受注明細データ(回答)行オブジェクトより取得します。
        /// </summary>
        /// <param name="uoeOrderDtlRow"></param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFへの回答データに問い合わせデータの新BLコード等を設定する。</br>
        /// </remarks>
        //private SCMAcOdrDtlAsWork GetParamDataFromSCMAcOdrDtlAsRow(ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow)// DEL 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット
        private SCMAcOdrDtlAsWork GetParamDataFromSCMAcOdrDtlAsRow(ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow, SalesSlip salesSlip)// ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット
        {
            SCMAcOdrDtlAsWork scmAcOdrDtlAsWork = new SCMAcOdrDtlAsWork();

            #region 項目セット
            scmAcOdrDtlAsWork.CreateDateTime = scmAcOdrDtlAsRow.CreateDateTime; // 作成日時
            scmAcOdrDtlAsWork.UpdateDateTime = scmAcOdrDtlAsRow.UpdateDateTime; // 更新日時
            scmAcOdrDtlAsWork.EnterpriseCode = this._enterpriseCode; // 企業コード
            scmAcOdrDtlAsWork.FileHeaderGuid = scmAcOdrDtlAsRow.FileHeaderGuid; // GUID
            scmAcOdrDtlAsWork.UpdEmployeeCode = scmAcOdrDtlAsRow.UpdEmployeeCode; // 更新従業員コード
            scmAcOdrDtlAsWork.UpdAssemblyId1 = scmAcOdrDtlAsRow.UpdAssemblyId1; // 更新アセンブリID1
            scmAcOdrDtlAsWork.UpdAssemblyId2 = scmAcOdrDtlAsRow.UpdAssemblyId2; // 更新アセンブリID2
            scmAcOdrDtlAsWork.LogicalDeleteCode = scmAcOdrDtlAsRow.LogicalDeleteCode; // 論理削除区分
            scmAcOdrDtlAsWork.InqOriginalEpCd = scmAcOdrDtlAsRow.InqOriginalEpCd.Trim(); // 問合せ元企業コード//@@@@20230303
            scmAcOdrDtlAsWork.InqOriginalSecCd = scmAcOdrDtlAsRow.InqOriginalSecCd; // 問合せ元拠点コード
            scmAcOdrDtlAsWork.InqOtherEpCd = scmAcOdrDtlAsRow.InqOtherEpCd; // 問合せ先企業コード
            scmAcOdrDtlAsWork.InqOtherSecCd = scmAcOdrDtlAsRow.InqOtherSecCd; // 問合せ先拠点コード
            scmAcOdrDtlAsWork.InquiryNumber = scmAcOdrDtlAsRow.InquiryNumber; // 問合せ番号
            scmAcOdrDtlAsWork.UpdateDate = scmAcOdrDtlAsRow.UpdateDate; // 更新年月日
            scmAcOdrDtlAsWork.UpdateTime = scmAcOdrDtlAsRow.UpdateTime; // 更新時間
            scmAcOdrDtlAsWork.InqRowNumber = scmAcOdrDtlAsRow.InqRowNumber; // 問合せ行番号
            scmAcOdrDtlAsWork.InqRowNumDerivedNo = scmAcOdrDtlAsRow.InqRowNumDerivedNo; // 問合せ行番号枝番
            scmAcOdrDtlAsWork.InqOrgDtlDiscGuid = scmAcOdrDtlAsRow.InqOrgDtlDiscGuid; // 問合せ元明細識別GUID
            scmAcOdrDtlAsWork.InqOthDtlDiscGuid = scmAcOdrDtlAsRow.InqOthDtlDiscGuid; // 問合せ先明細識別GUID
            scmAcOdrDtlAsWork.GoodsDivCd = scmAcOdrDtlAsRow.GoodsDivCd; // 商品種別
            scmAcOdrDtlAsWork.RecyclePrtKindCode = scmAcOdrDtlAsRow.RecyclePrtKindCode; // リサイクル部品種別
            scmAcOdrDtlAsWork.RecyclePrtKindName = scmAcOdrDtlAsRow.RecyclePrtKindName; // リサイクル部品種別名称
            scmAcOdrDtlAsWork.DeliveredGoodsDiv = scmAcOdrDtlAsRow.DeliveredGoodsDiv; // 納品区分
            scmAcOdrDtlAsWork.HandleDivCode = scmAcOdrDtlAsRow.HandleDivCode; // 取扱区分
            scmAcOdrDtlAsWork.GoodsShape = scmAcOdrDtlAsRow.GoodsShape; // 商品形態
            scmAcOdrDtlAsWork.DelivrdGdsConfCd = scmAcOdrDtlAsRow.DelivrdGdsConfCd; // 納品確認区分
            scmAcOdrDtlAsWork.DeliGdsCmpltDueDate = scmAcOdrDtlAsRow.DeliGdsCmpltDueDate; // 納品完了予定日
            scmAcOdrDtlAsWork.AnswerDeliveryDate = scmAcOdrDtlAsRow.AnswerDeliveryDate; // 回答納期
            scmAcOdrDtlAsWork.BLGoodsCode = scmAcOdrDtlAsRow.BLGoodsCode; // BL商品コード
            scmAcOdrDtlAsWork.BLGoodsDrCode = scmAcOdrDtlAsRow.BLGoodsDrCode; // BL商品コード枝番
            scmAcOdrDtlAsWork.InqGoodsName = scmAcOdrDtlAsRow.InqGoodsName; // 問発商品名
            scmAcOdrDtlAsWork.AnsGoodsName = scmAcOdrDtlAsRow.AnsGoodsName; // 回答商品名
            scmAcOdrDtlAsWork.SalesOrderCount = scmAcOdrDtlAsRow.SalesOrderCount; // 発注数
            scmAcOdrDtlAsWork.DeliveredGoodsCount = scmAcOdrDtlAsRow.DeliveredGoodsCount; // 納品数
            scmAcOdrDtlAsWork.GoodsNo = scmAcOdrDtlAsRow.GoodsNo; // 商品番号
            scmAcOdrDtlAsWork.GoodsMakerCd = scmAcOdrDtlAsRow.GoodsMakerCd; // 商品メーカーコード
            scmAcOdrDtlAsWork.GoodsMakerNm = scmAcOdrDtlAsRow.GoodsMakerNm; // 商品メーカー名称
            scmAcOdrDtlAsWork.PureGoodsMakerCd = scmAcOdrDtlAsRow.PureGoodsMakerCd; // 純正商品メーカーコード
            scmAcOdrDtlAsWork.InqPureGoodsNo = scmAcOdrDtlAsRow.InqPureGoodsNo; // 問発純正商品番号
            // 2012/06/15 UPD T.Yoshioka 90 ---------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // --- UPD 高川 2012/05/24 №171 ---------->>>>>
            //scmAcOdrDtlAsWork.AnsPureGoodsNo = scmAcOdrDtlAsRow.AnsPureGoodsNo; // 回答純正商品番号
            //scmAcOdrDtlAsWork.AnsPureGoodsNo = scmAcOdrDtlAsRow.GoodsNo; // 回答純正商品番号 <-- 商品番号
            scmAcOdrDtlAsWork.AnsPureGoodsNo = scmAcOdrDtlAsRow.AnsPureGoodsNo; // 回答純正商品番号
            // --- UPD 高川 2012/05/24 №171 ----------<<<<<
            // 2012/06/15 UPD T.Yoshioka 90 ----------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            scmAcOdrDtlAsWork.ListPrice = scmAcOdrDtlAsRow.ListPrice; // 定価
            scmAcOdrDtlAsWork.UnitPrice = scmAcOdrDtlAsRow.UnitPrice; // 単価
            scmAcOdrDtlAsWork.GoodsAddInfo = scmAcOdrDtlAsRow.GoodsAddInfo; // 商品補足情報
            scmAcOdrDtlAsWork.RoughRrofit = scmAcOdrDtlAsRow.RoughRrofit; // 粗利額
            scmAcOdrDtlAsWork.RoughRate = scmAcOdrDtlAsRow.RoughRate; // 粗利率
            scmAcOdrDtlAsWork.AnswerLimitDate = scmAcOdrDtlAsRow.AnswerLimitDate; // 回答期限
            scmAcOdrDtlAsWork.CommentDtl = scmAcOdrDtlAsRow.CommentDtl; // 備考(明細)
            scmAcOdrDtlAsWork.AppendingFileDtl = scmAcOdrDtlAsRow.AppendingFileDtl; // 添付ファイル(明細)
            scmAcOdrDtlAsWork.AppendingFileNmDtl = scmAcOdrDtlAsRow.AppendingFileNmDtl; // 添付ファイル名(明細)
            scmAcOdrDtlAsWork.ShelfNo = scmAcOdrDtlAsRow.ShelfNo; // 棚番
            scmAcOdrDtlAsWork.AdditionalDivCd = scmAcOdrDtlAsRow.AdditionalDivCd; // 追加区分
            scmAcOdrDtlAsWork.CorrectDivCD = scmAcOdrDtlAsRow.CorrectDivCD; // 訂正区分
            scmAcOdrDtlAsWork.AcptAnOdrStatus = scmAcOdrDtlAsRow.AcptAnOdrStatus; // 受注ステータス
            scmAcOdrDtlAsWork.SalesSlipNum = scmAcOdrDtlAsRow.SalesSlipNum; // 売上伝票番号
            scmAcOdrDtlAsWork.SalesRowNo = scmAcOdrDtlAsRow.SalesRowNo; // 売上行番号
            scmAcOdrDtlAsWork.CampaignCode = scmAcOdrDtlAsRow.CampaignCode; // キャンペーンコード
            scmAcOdrDtlAsWork.StockDiv = scmAcOdrDtlAsRow.StockDiv; // 在庫区分
            scmAcOdrDtlAsWork.InqOrdDivCd = scmAcOdrDtlAsRow.InqOrdDivCd; // 問合せ・発注種別
            scmAcOdrDtlAsWork.DisplayOrder = scmAcOdrDtlAsRow.DisplayOrder; // 表示順位
            scmAcOdrDtlAsWork.GoodsMngNo = scmAcOdrDtlAsRow.GoodsMngNo; // 商品管理番号
            scmAcOdrDtlAsWork.CancelCndtinDiv = scmAcOdrDtlAsRow.CancelCndtinDiv; // キャンセル状態区分 // 2010/06/30
            //>>>2011/05/25
            scmAcOdrDtlAsWork.WarehouseCode = scmAcOdrDtlAsRow.WarehouseCode; // 倉庫コード
            scmAcOdrDtlAsWork.WarehouseName = scmAcOdrDtlAsRow.WarehouseName; // 倉庫名称
            scmAcOdrDtlAsWork.WarehouseShelfNo = scmAcOdrDtlAsRow.WarehouseShelfNo; // 棚番
            //<<<2011/05/25

            // 2012/01/16 Add >>>
            scmAcOdrDtlAsWork.GoodsSpecialNote = scmAcOdrDtlAsRow.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<
            // 2012/05/24 Add >>>>>>>>>>>>> 
            scmAcOdrDtlAsWork.PSMngNo = scmAcOdrDtlAsRow.GoodsMngNo; // PS管理番号
            // 2012/05/24 Add <<<<<<<<<<<<<
            // --- ADD T.Nishi 2012/05/30 ---------->>>>>
            scmAcOdrDtlAsWork.AutoEstimatePartsCd = scmAcOdrDtlAsRow.AutoEstimatePartsCd; // 自動見積部品コード
            // --- DEL T.Nishi 2012/06/19 ---------->>>>>
            //if (scmAcOdrDtlAsWork.AutoEstimatePartsCd == "" || scmAcOdrDtlAsWork.AutoEstimatePartsCd == null)
            //{
                //scmAcOdrDtlAsWork.AutoEstimatePartsCd = GetAutoEstimatePartsCd(scmAcOdrDtlAsRow.BLGoodsCode, 1, 0);
            //}
            // --- DEL T.Nishi 2012/06/19 ----------<<<<<
            // --- ADD T.Nishi 2012/05/30 ----------<<<<<
            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlAsWork.SalesTotalTaxInc = scmAcOdrDtlAsRow.SalesTotalTaxInc; // 売上伝票合計（税込）
            scmAcOdrDtlAsWork.SalesTotalTaxExc = scmAcOdrDtlAsRow.SalesTotalTaxExc; // 売上伝票合計（税抜）
            scmAcOdrDtlAsWork.ScmConsTaxLayMethod = scmAcOdrDtlAsRow.ScmConsTaxLayMethod; // SCM消費税転嫁方式
            scmAcOdrDtlAsWork.ConsTaxRate = scmAcOdrDtlAsRow.ConsTaxRate; // 消費税税率
            scmAcOdrDtlAsWork.ScmFractionProcCd = scmAcOdrDtlAsRow.ScmFractionProcCd; // SCM端数処理区分
            scmAcOdrDtlAsWork.AccRecConsTax = scmAcOdrDtlAsRow.AccRecConsTax; // 売掛消費税
            scmAcOdrDtlAsWork.PMSalesDate = scmAcOdrDtlAsRow.PMSalesDate; // PM売上日
            scmAcOdrDtlAsWork.SuppSlpPrtTime = scmAcOdrDtlAsRow.SuppSlpPrtTime; // 仕入先伝票発行時刻
            scmAcOdrDtlAsWork.SalesMoneyTaxInc = scmAcOdrDtlAsRow.SalesMoneyTaxInc; // 売上伝票合計（税込）
            scmAcOdrDtlAsWork.SalesMoneyTaxExc = scmAcOdrDtlAsRow.SalesMoneyTaxExc; // 売上伝票合計（税抜）
            // ADD 2013/05/08 吉岡 2013/06/18配信 SCM障害№10308,№10528 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlAsWork.DataInputSystem = scmAcOdrDtlAsRow.DataInputSystem; // データ入力システム
            // ADD 2013/05/15 吉岡 2013/06/18配信 SCM障害№10410 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

            // ------------------ ADD qijh 2013/02/27 #34752 --------------- >>>>>
            scmAcOdrDtlAsWork.PmMainMngWarehouseCd = scmAcOdrDtlAsRow.PmMainMngWarehouseCd; // PM主管倉庫コード
            scmAcOdrDtlAsWork.PmMainMngWarehouseName = scmAcOdrDtlAsRow.PmMainMngWarehouseName; // PM主管倉庫名称
            scmAcOdrDtlAsWork.PmMainMngShelfNo = scmAcOdrDtlAsRow.PmMainMngShelfNo; // PM主管棚番
            scmAcOdrDtlAsWork.PmMainMngPrsntCount = scmAcOdrDtlAsRow.PmMainMngPrsntCount; // PM主管現在個数
            // ------------------ ADD qijh 2013/02/27 #34752 --------------- <<<<<

            // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
            scmAcOdrDtlAsWork.PrmSetDtlNo2 = scmAcOdrDtlAsRow.PrmSetDtlNo2; // 優良設定詳細コード２
            scmAcOdrDtlAsWork.PrmSetDtlName2 = scmAcOdrDtlAsRow.PrmSetDtlName2; // 優良設定詳細名称２

            //scmAcOdrDtlAsWork.StockStatusDiv = GetStockStatusDiv(scmAcOdrDtlAsRow.WarehouseCode); // 在庫状況区分// DEL 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット
            // ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット----------------------->>>>> 
            if ((SalesSlip.SalesSlipCd == 1) || // 返品
                        (SalesSlip.DebitNoteDiv == 1))      // 赤伝
            {
                scmAcOdrDtlAsWork.StockStatusDiv = scmAcOdrDtlAsRow.StockStatusDiv;
            }
            else
            {
                SCMTtlSt scmTtlSt = this._salesSlipInputInitDataAcs.GetScmTtlSt();
                // 自動回答区分が「する」
                if (scmAcOdrDtlAsRow.GoodsNo.Length.Equals(0)
                    && !scmAcOdrDtlAsRow.BLGoodsCode.Equals(0) &&
                    scmTtlSt.FuwioutAutoAnsDiv.Equals((int)FuwioutAutoAnsDiv.Auto))
                {
                    scmAcOdrDtlAsWork.StockStatusDiv = 8;// 該当なし
                }
                else
                {
                    scmAcOdrDtlAsWork.StockStatusDiv = GetStockStatusDiv(scmAcOdrDtlAsRow); // 在庫状況区分
                }

            }
            // ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット -----------------------<<<<<
            // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
            // ADD 2014/11/14 SCM仕掛一覧№10694対応 ---------------------------------------->>>>>
            scmAcOdrDtlAsWork.SetPartsMkrCd = scmAcOdrDtlAsRow.SetPartsMkrCd;         // セット部品メーカーコード
            scmAcOdrDtlAsWork.SetPartsNumber = scmAcOdrDtlAsRow.SetPartsNumber;       // セット部品番号
            scmAcOdrDtlAsWork.SetPartsMainSubNo = scmAcOdrDtlAsRow.SetPartsMainSubNo; // セット部品親子番号
            // ADD 2014/11/14 SCM仕掛一覧№10694対応 ----------------------------------------<<<<<
            // ADD 2014/12/19 SCM高速化 PMNS対応 --------------------------------->>>>>
            scmAcOdrDtlAsWork.RentDiv = scmAcOdrDtlAsRow.RentDiv; // 貸出区分            
            scmAcOdrDtlAsWork.MkrSuggestRtPric = scmAcOdrDtlAsRow.MkrSuggestRtPric; // メーカー希望小売価格
            scmAcOdrDtlAsWork.OpenPriceDiv = scmAcOdrDtlAsRow.OpenPriceDiv; // オープン価格区分    
            // ADD 2014/12/19 SCM高速化 PMNS対応 ---------------------------------<<<<<
            // ADD 2015/01/19 豊沢 リコメンド対応 --------------------->>>>>
            scmAcOdrDtlAsWork.BgnGoodsDiv = scmAcOdrDtlAsRow.BgnGoodsDiv; // お買得商品選択区分
            // ADD 2015/01/19 豊沢 リコメンド対応 ---------------------<<<<<
            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 ----------------------------->>>>>
            scmAcOdrDtlAsWork.ModelPrtsAdptYm = scmAcOdrDtlAsRow.ModelPrtsAdptYm; // 型式別部品採用年月
            scmAcOdrDtlAsWork.ModelPrtsAblsYm = scmAcOdrDtlAsRow.ModelPrtsAblsYm; // 型式別部品廃止年月
            scmAcOdrDtlAsWork.ModelPrtsAdptFrameNo = scmAcOdrDtlAsRow.ModelPrtsAdptFrameNo; // 型式別部品採用車台番号
            scmAcOdrDtlAsWork.ModelPrtsAblsFrameNo = scmAcOdrDtlAsRow.ModelPrtsAblsFrameNo; // 型式別部品廃止車台番号
            // ADD 2015/01/30 SCM高速化 生産年式、車台番号対応 -----------------------------<<<<<
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            scmAcOdrDtlAsWork.AnsDeliDateDiv = scmAcOdrDtlAsRow.AnsDeliDateDiv; // 回答納期区分
            // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ---------->>>>>>>>>>
            scmAcOdrDtlAsWork.GoodsSpecialNtForFac = scmAcOdrDtlAsRow.GoodsSpecialNtForFac; // 商品規格・特記事項(工場向け)
            scmAcOdrDtlAsWork.GoodsSpecialNtForCOw = scmAcOdrDtlAsRow.GoodsSpecialNtForCOw; // 商品規格・特記事項(カーオーナー向け)
            scmAcOdrDtlAsWork.PrmSetDtlName2ForFac = scmAcOdrDtlAsRow.PrmSetDtlName2ForFac; // 優良設定詳細名称２(工場向け)
            scmAcOdrDtlAsWork.PrmSetDtlName2ForCOw = scmAcOdrDtlAsRow.PrmSetDtlName2ForCOw; // 優良設定詳細名称２(カーオーナー向け)
            // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ----------<<<<<<<<<<

            //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ---------->>>>>
            scmAcOdrDtlAsWork.InqBlUtyPtThCd = scmAcOdrDtlAsRow.InqBlUtyPtThCd;     // 問発BL統一部品コード(スリーコード版)
            scmAcOdrDtlAsWork.InqBlUtyPtSbCd = scmAcOdrDtlAsRow.InqBlUtyPtSbCd;     // 問発BL統一部品サブコード
            scmAcOdrDtlAsWork.AnsBlUtyPtThCd = scmAcOdrDtlAsRow.AnsBlUtyPtThCd;     // 回答BL統一部品コード(スリーコード版)
            scmAcOdrDtlAsWork.AnsBlUtyPtSbCd = scmAcOdrDtlAsRow.AnsBlUtyPtSbCd;     // 回答BL統一部品サブコード
            scmAcOdrDtlAsWork.AnsBLGoodsCode = scmAcOdrDtlAsRow.AnsBLGoodsCode;     // 回答BL商品コード
            scmAcOdrDtlAsWork.AnsBLGoodsDrCode = scmAcOdrDtlAsRow.AnsBLGoodsDrCode; // 回答BL商品コード枝番
            //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ----------<<<<<

            #endregion

            return scmAcOdrDtlAsWork;
        }

        //>>>2011/02/01 一部回答判定対応
        /// <summary>
        /// SCM受注明細データ(回答)テーブル比較処理
        /// </summary>
        /// <param name="scmAcOdrDtlAsWorkList"></param>
        /// <returns>0:同一 1:異なる</returns>
        private int CompareSCMAcOdrDtlAsDataTable(ArrayList scmAcOdrDtlAsWorkList)
        {
            //------------------------------------------------------------------------------------------
            // 比較方法
            //  存在レコードの比較を行い判定する(問合せ番号、問合せ行番号、問合せ行番号枝番)
            //  レコードの内の各項目内容の比較は行わない
            //------------------------------------------------------------------------------------------

            #region 初期処理
            int ret = 0;
            List<SCMAcOdrDtlAsWork> workList = new List<SCMAcOdrDtlAsWork>();
            #endregion

            #region 比較処理
            // リスト変換
            if (scmAcOdrDtlAsWorkList != null) workList = new List<SCMAcOdrDtlAsWork>((SCMAcOdrDtlAsWork[])scmAcOdrDtlAsWorkList.ToArray(typeof(SCMAcOdrDtlAsWork)));

            if ((workList == null) || (workList.Count == 0))
            {
                return ret;
            }

            foreach (ScmDataSet.SCMAcOdrDtlAsRow orgRow in this._scmAcOdrDtlAsDataTableSave)
            {
                // 比較処理
                foreach (ScmDataSet.SCMAcOdrDtlAsRow work in this._scmAcOdrDtlAsDataTable)
                {
                    if ((work.InquiryNumber == orgRow.InquiryNumber) &&
                        (work.InqRowNumber == orgRow.InqRowNumber) &&
                        (work.InqRowNumDerivedNo == orgRow.InqRowNumDerivedNo))
                    {
                        ret = 0;
                        break;
                    }
                    else
                    {
                        ret = 1;
                    }
                }
                if (ret == 1) break;
            }
            #endregion

            return ret;
        }
        //<<<2011/02/01 一部回答判定対応
        #endregion

        #region SCM情報キャッシャ
        /// <summary>
        /// SCM情報キャッシュ
        /// </summary>
        /// <param name="scmHeader"></param>
        /// <param name="scmCar"></param>
        /// <param name="scmDetailList"></param>
        /// <param name="scmAnswerList"></param>
        private void CacheSCMInfo(UserSCMOrderHeaderRecord scmHeader, UserSCMOrderCarRecord scmCar, List<UserSCMOrderDetailRecord> scmDetailList, List<UserSCMOrderAnswerRecord> scmAnswerList)
        {
            //if ((scmHeader == null) || (scmAnswerList == null) || (scmAnswerList.Count == 0)) return;
            if (scmHeader == null) return;

            // SCM受注データキャッシュ
            this.CacheSCMHeader(scmHeader);

            // SCM受注データ(車両情報)キャッシュ
            this.CacheSCMCar(scmCar);

            // SCM受注明細データ(問合せ・発注)キャッシュ
            this.CacheSCMDetail(scmDetailList);

            // SCM受注明細データ(回答)キャッシュ
            this.CacheSCMAnswer(scmAnswerList);
        }

        // ADD 2012/07/11 №35 T.Yoshioka ------------------------------>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// SCM受注明細データ(回答)返品用キャッシュ
        /// </summary>
        /// <param name="scmAnswerList"></param>
        public void CacheSCMAnswerListReturn(List<UserSCMOrderAnswerRecord> scmAnswerList)
        {
            this.CacheSCMAnswerReturn(scmAnswerList);
        }
        // ADD 2012/07/11 №35 T.Yoshioka ------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// SCM受注データキャッシュ
        /// </summary>
        /// <param name="scmHeader"></param>
        private void CacheSCMHeader(UserSCMOrderHeaderRecord scmHeader)
        {
            if (scmHeader == null) return;

            this.CacheSCMAcOdrDataDataTable(scmHeader, this._scmAcOdrDataDataTable);
        }
        // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------>>>>>
        /// <summary>
        /// 返品用SCM受注データキャッシュ
        /// </summary>
        /// <param name="scmHeader"></param>
        public void CacheSCMHeaderReturn(UserSCMOrderHeaderRecord scmHeader)
        {
            if (scmHeader == null) return;

            this._scmAcOdrDataDataTableReturn = new ScmDataSet.SCMAcOdrDataDataTable();
            this.CacheSCMAcOdrDataDataTable(scmHeader, this._scmAcOdrDataDataTableReturn);
        }
        // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------<<<<<

        /// <summary>
        /// SCM受注データキャッシュ
        /// </summary>
        /// <param name="scmHeader"></param>
        /// <param name="scmAcOdrDataDataTable"></param>
        private void CacheSCMAcOdrDataDataTable(UserSCMOrderHeaderRecord scmHeader, ScmDataSet.SCMAcOdrDataDataTable scmAcOdrDataDataTable)
        {
            try
            {
                scmAcOdrDataDataTable.AddSCMAcOdrDataRow(this.CreateSCMAcOdrRowFromUIData(scmHeader, scmAcOdrDataDataTable));
            }
            catch (ConstraintException)
            {
                ScmDataSet.SCMAcOdrDataRow scmAcOdrDataRow = scmAcOdrDataDataTable.FindByInquiryNumber(scmHeader.InquiryNumber);
                this.SetRowFromUIData(ref scmAcOdrDataRow, scmHeader);
            }
        }

        /// <summary>
        /// SCM受注データキャッシュ
        /// </summary>
        /// <param name="scmHeader"></param>
        private void CacheSCMHeader(SalesSlip salesSlip)
        {
            if (salesSlip == null) return;
            this.CacheSCMAcOdrDataDataTable(salesSlip, this._scmAcOdrDataDataTable);
        }

        /// <summary>
        /// SCM受注データキャッシュ
        /// </summary>
        /// <param name="scmHeader"></param>
        /// <param name="scmAcOdrDataDataTable"></param>
        private void CacheSCMAcOdrDataDataTable(SalesSlip salesSlip, ScmDataSet.SCMAcOdrDataDataTable scmAcOdrDataDataTable)
        {
            try
            {
                ScmDataSet.SCMAcOdrDataRow scmAcOdrDataRow;
                ScmDataSet.SCMAcOdrDataRow[] scmAcOdrDataRows = (ScmDataSet.SCMAcOdrDataRow[])scmAcOdrDataDataTable.Select(string.Format("{0}='{1}'",
                            scmAcOdrDataDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum));
                if (scmAcOdrDataRows.Length != 0)
                {
                    // SCM受注データが存在する場合
                    scmAcOdrDataRow = scmAcOdrDataRows[0];
                    scmAcOdrDataRow = this.CreateSCMAcOdrRowFromUIData(salesSlip, scmAcOdrDataRow);
                }
                else
                {
                    // SCM受注データが存在しない場合
                    scmAcOdrDataRow = scmAcOdrDataDataTable.NewSCMAcOdrDataRow();
                    this.DefaultSettingSCMAcOdrDataRow(ref scmAcOdrDataRow);
                    // ADD 2013/06/26 yugami SCM障害対応 ----------------------------------->>>>>
                    // タブレット使用区分を連結記号設定マスタより取得する
                    scmAcOdrDataRow.TabUseDiv = GetTabUseDiv(salesSlip);
                    // ADD 2013/06/26 yugami SCM障害対応 -----------------------------------<<<<<
                    scmAcOdrDataDataTable.AddSCMAcOdrDataRow(this.CreateSCMAcOdrRowFromUIData(salesSlip, scmAcOdrDataRow));
                }
            }
            catch (ConstraintException)
            {
            }
        }

        /// <summary>
        /// SCM受注データ(車両情報)キャッシュ
        /// </summary>
        /// <param name="scmCar"></param>
        private void CacheSCMCar(UserSCMOrderCarRecord scmCar)
        {
            if (scmCar == null) return;
            this.CacheSCMAcOdrDtCarDataTable(scmCar, this._scmAcOdrDtCarDataTable);
        }

        /// <summary>
        /// SCM受注データ(車両情報)キャッシュ
        /// </summary>
        /// <param name="scmCar"></param>
        /// <param name="scmAcOdrDtCarDataTable"></param>
        private void CacheSCMAcOdrDtCarDataTable(UserSCMOrderCarRecord scmCar, ScmDataSet.SCMAcOdrDtCarDataTable scmAcOdrDtCarDataTable)
        {
            try
            {
                scmAcOdrDtCarDataTable.AddSCMAcOdrDtCarRow(this.CreateSCMAcOdrDtCarRowFromUIData(scmCar, scmAcOdrDtCarDataTable));
            }
            catch (ConstraintException)
            {
                ScmDataSet.SCMAcOdrDtCarRow scmAcOdrDtCarRow = scmAcOdrDtCarDataTable.FindByInquiryNumber(scmCar.InquiryNumber);
                this.SetRowFromUIData(ref scmAcOdrDtCarRow, scmCar);
            }
        }

        /// <summary>
        /// SCM受注データ(車両情報)キャッシュ
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        private void CacheSCMCar(SalesSlip salesSlip, List<SalesDetail> salesDetailList)
        {
            if (salesSlip == null) return;
            this.CacheSCMAcOdrDtCarDataTable(salesSlip, salesDetailList, this._scmAcOdrDtCarDataTable);
        }

        /// <summary>
        /// SCM受注データ(車両情報)キャッシュ
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="scmAcOdrDtCarDataTable"></param>
        private void CacheSCMAcOdrDtCarDataTable(SalesSlip salesSlip, List<SalesDetail> salesDetailList, ScmDataSet.SCMAcOdrDtCarDataTable scmAcOdrDtCarDataTable)
        {
            try
            {
                ScmDataSet.SCMAcOdrDtCarRow scmAcOdrDtCarRow;
                ScmDataSet.SCMAcOdrDtCarRow[] scmAcOdrDtCarRows = (ScmDataSet.SCMAcOdrDtCarRow[])scmAcOdrDtCarDataTable.Select(string.Format("{0}='{1}'",
                            scmAcOdrDtCarDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum));
                if (scmAcOdrDtCarRows.Length != 0)
                {
                    // SCM受注データ(車両情報)が存在する場合
                    scmAcOdrDtCarRow = scmAcOdrDtCarRows[0];
                    scmAcOdrDtCarRow = this.CreateSCMAcOdrDtCarRowFromUIData(salesSlip, salesDetailList, scmAcOdrDtCarRow);
                }
                else
                {
                    // SCM受注データ(車両情報)が存在しない場合
                    scmAcOdrDtCarRow = scmAcOdrDtCarDataTable.NewSCMAcOdrDtCarRow();
                    this.DefaultSettingSCMAcOdrDtCarRow(ref scmAcOdrDtCarRow);
                    scmAcOdrDtCarDataTable.AddSCMAcOdrDtCarRow(this.CreateSCMAcOdrDtCarRowFromUIData(salesSlip, salesDetailList, scmAcOdrDtCarRow));
                }
            }
            catch (ConstraintException)
            {
            }
        }

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)キャッシュ
        /// </summary>
        /// <param name="scmDetailList"></param>
        private void CacheSCMDetail(List<UserSCMOrderDetailRecord> scmDetailList)
        {
            if ((scmDetailList == null) || (scmDetailList.Count == 0)) return;

            // ---DEL 2011/09/21 ----------------->>>
            //foreach (UserSCMOrderDetailRecord row in scmDetailList)
            //{
            //    this.CacheSCMAcOdrDtlIqDataTable(row, this._scmAcOdrDtlIqDataTable);
            //}
            // ---DEL 2011/09/21 -----------------<<<

            // ---ADD 2011/09/21 ----------------->>>
            int cnt = 1;
            foreach (UserSCMOrderDetailRecord row in scmDetailList)
            {
                if (cnt <= _salesSlipInputConstructionAcs.DataInputCountValue)
                {
                this.CacheSCMAcOdrDtlIqDataTable(row, this._scmAcOdrDtlIqDataTable);
            }
                else
                {
                    break;
                }
                cnt++;
            }
            // ---ADD 2011/09/21 -----------------<<<
        }

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)キャッシュ
        /// </summary>
        /// <param name="scmDetail"></param>
        /// <param name="scmAcOdrDtlIqDataTable"></param>
        private void CacheSCMAcOdrDtlIqDataTable(UserSCMOrderDetailRecord scmDetail, ScmDataSet.SCMAcOdrDtlIqDataTable scmAcOdrDtlIqDataTable)
        {
            try
            {
                scmAcOdrDtlIqDataTable.AddSCMAcOdrDtlIqRow(this.CreateSCMAcOdrDtlIqRowFromUIData(scmDetail, scmAcOdrDtlIqDataTable));
            }
            catch (ConstraintException)
            {
                // UPD 2015/06/25 商品保証課Redmine#4149対応② ------------------------------------------>>>>>
                //ScmDataSet.SCMAcOdrDtlIqRow scmAcOdrDtlIqRow = scmAcOdrDtlIqDataTable.FindByInquiryNumberInqRowNumber(scmDetail.InquiryNumber, scmDetail.InqRowNumber);
                // 1問合せ行番号に対し複数問合せ行番号枝番が存在するためSelectメソッドで対象データを取得します
                ScmDataSet.SCMAcOdrDtlIqRow[] scmAcOdrDtlIqRows = (ScmDataSet.SCMAcOdrDtlIqRow[])scmAcOdrDtlIqDataTable.Select(string.Format("{0}={1} AND {2}={3}",
                    scmAcOdrDtlIqDataTable.InqRowNumberColumn.ColumnName, scmDetail.InqRowNumber,
                    scmAcOdrDtlIqDataTable.InqRowNumDerivedNoColumn.ColumnName, scmDetail.InqRowNumDerivedNo));
                ScmDataSet.SCMAcOdrDtlIqRow scmAcOdrDtlIqRow = null;
                if (scmAcOdrDtlIqRows != null && scmAcOdrDtlIqRows.Length != 0)
                {
                    scmAcOdrDtlIqRow = scmAcOdrDtlIqRows[0];
                }
                // UPD 2015/06/25 商品保証課Redmine#4149対応② ------------------------------------------<<<<<
                this.SetRowFromUIData(ref scmAcOdrDtlIqRow, scmDetail);
            }
        }

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)キャッシュ
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        private void CacheSCMDetail(SalesSlip salesSlip, List<SalesDetail> salesDetailList)
        {
            if (salesSlip == null) return;

            foreach (SalesDetail salesDetail in salesDetailList)
            {
                this.CacheSCMAcOdrDtlIqDataTable(salesSlip, salesDetail, this._scmAcOdrDtlIqDataTable);
            }
        }

        /// <summary>
        /// SCM受注明細データ(問合せ・発注)キャッシュ
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetail"></param>
        /// <param name="scmAcOdrDtlIqDataTable"></param>
        private void CacheSCMAcOdrDtlIqDataTable(SalesSlip salesSlip, SalesDetail salesDetail, ScmDataSet.SCMAcOdrDtlIqDataTable scmAcOdrDtlIqDataTable)
        {
            try
            {
                scmAcOdrDtlIqDataTable.AddSCMAcOdrDtlIqRow(this.CreateSCMAcOdrDtlIqRowFromUIData(salesSlip, salesDetail, scmAcOdrDtlIqDataTable));
            }
            catch (ConstraintException)
            {
            }
        }

        /// <summary>
        /// SCM受注明細データ(回答)キャッシュ
        /// </summary>
        /// <param name="scmAnswerList"></param>
        private void CacheSCMAnswer(List<UserSCMOrderAnswerRecord> scmAnswerList)
        {
            if ((scmAnswerList == null) || (scmAnswerList.Count == 0)) return;

            // ---DEL 2011/09/21 ----------------->>>
            //foreach (UserSCMOrderAnswerRecord row in scmAnswerList)
            //{
            //    this.CacheSCMAcOdrDtlAsDataTable(row, this._scmAcOdrDtlAsDataTable);
            //}
            // ---DEL 2011/09/21 -----------------<<<

            // ---ADD 2011/09/21 ----------------->>>
            int cnt = 1;
            foreach (UserSCMOrderAnswerRecord row in scmAnswerList)
            {
                if (cnt <= _salesSlipInputConstructionAcs.DataInputCountValue)
                {
                    this.CacheSCMAcOdrDtlAsDataTable(row, this._scmAcOdrDtlAsDataTable);
                }
                else
                {
                    break;
                }
                cnt++;
            }
            // ---ADD 2011/09/21 -----------------<<<
        }

        // ADD 2012/07/11 №35 T.Yoshioka ------------------------------>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// SCM受注明細データ(回答)キャッシュ 返品用
        /// </summary>
        /// <param name="scmAnswerList"></param>
        private void CacheSCMAnswerReturn(List<UserSCMOrderAnswerRecord> scmAnswerList)
        {
            if ((scmAnswerList == null) || (scmAnswerList.Count == 0)) return;

            this._scmAcOdrDtlAsDataTableReturn = new ScmDataSet.SCMAcOdrDtlAsDataTable();
            int cnt = 1;
            foreach (UserSCMOrderAnswerRecord row in scmAnswerList)
            {
                if (cnt <= _salesSlipInputConstructionAcs.DataInputCountValue)
                {
                    this.CacheSCMAcOdrDtlAsDataTable(row, this._scmAcOdrDtlAsDataTableReturn);
                }
                else
                {
                    break;
                }
                cnt++;
            }
        }
        // ADD 2012/07/11 №35 T.Yoshioka ------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// SCM受注明細データ(回答)キャッシュ
        /// </summary>
        /// <param name="scmAnswer"></param>
        /// <param name="scmAcOdrDtlAsDataTable"></param>
        private void CacheSCMAcOdrDtlAsDataTable(UserSCMOrderAnswerRecord scmAnswer, ScmDataSet.SCMAcOdrDtlAsDataTable scmAcOdrDtlAsDataTable)
        {
            try
            {
                scmAcOdrDtlAsDataTable.AddSCMAcOdrDtlAsRow(this.CreateSCMAcOdrDtlAsRowFromUIData(scmAnswer, scmAcOdrDtlAsDataTable));
            }
            catch (ConstraintException)
            {
                //>>>2011/03/05
                //ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow = scmAcOdrDtlAsDataTable.FindBySalesSlipNumSalesRowNo(scmAnswer.SalesSlipNum, scmAnswer.SalesRowNo);

                ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow = null;
                ScmDataSet.SCMAcOdrDtlAsRow[] asRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} and {2}={3}",
                    this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, scmAnswer.SalesSlipNum,
                    this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, scmAnswer.SalesRowNo));

                if ((asRows != null) && (asRows.Length != 0)) scmAcOdrDtlAsRow = asRows[0];
                //<<<2011/03/05

                this.SetRowFromUIData(ref scmAcOdrDtlAsRow, scmAnswer);
            }
        }

        /// <summary>
        /// SCM受注明細データ(回答)キャッシュ
        /// </summary>
        /// <param name="iMode"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        private void CacheSCMAnswer(int iMode, SalesSlip salesSlip, List<SalesDetail> salesDetailList)
        {
            if (salesSlip == null) return;

            foreach (SalesDetail salesDetail in salesDetailList)
            {
                this.CacheSCMAcOdrDtlAsDataTable(iMode, salesSlip, salesDetail, salesDetailList, this._scmAcOdrDtlAsDataTable);
            }
        }

        /// <summary>
        /// SCM受注明細データ(回答)キャッシュ
        /// </summary>
        /// <param name="iMode"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetail"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="scmAcOdrDtlAsDataTable"></param>
        private void CacheSCMAcOdrDtlAsDataTable(int iMode, SalesSlip salesSlip, SalesDetail salesDetail, List<SalesDetail> salesDetailList, ScmDataSet.SCMAcOdrDtlAsDataTable scmAcOdrDtlAsDataTable)
        {
            try
            {
                int changeRowNo = 0; // 2011/02/01
                ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow;
                ScmDataSet.SCMAcOdrDtlAsRow[] scmAcOdrDtlAsRows = null;
                int salesRowNo = salesDetail.SalesRowNo;
                int acptAnOdrStatus = salesDetail.AcptAnOdrStatus;
                switch (iMode)
                {
                    case 0: // 売上
                        //>>>2011/03/05
                        #region 削除
                        //if ((this._salesDetailDBDataList != null) && (this._salesDetailDBDataList.Count != 0))
                        //{
                        //    List<SalesDetail> findSalesDetailList = this._salesDetailDBDataList.FindAll(
                        //        delegate(SalesDetail detail)
                        //        {
                        //            if (salesDetail.DtlRelationGuid == detail.DtlRelationGuid)
                        //            {
                        //                return true;
                        //            }
                        //            else
                        //            {
                        //                return false;
                        //            }
                        //        }
                        //    );

                        //    //>>>2011/02/01 追加回答対応
                        //    //salesRowNo = findSalesDetailList[0].SalesRowNo;
                        //    //acptAnOdrStatus = findSalesDetailList[0].AcptAnOdrStatus;
                        //    if ((findSalesDetailList != null) && (findSalesDetailList.Count != 0))
                        //    {
                        //        salesRowNo = findSalesDetailList[0].SalesRowNo;
                        //        acptAnOdrStatus = findSalesDetailList[0].AcptAnOdrStatus;

                        //        // 変換前売上行番号でチェック
                        //        if ((this._changeRowNoList != null) &&
                        //            (this._changeRowNoList.Count != 0) &&
                        //            (this._changeRowNoList.Count >= findSalesDetailList[0].SalesRowNo))
                        //        {
                        //            changeRowNo = findSalesDetailList[0].SalesRowNo;
                        //            salesRowNo = (int)this._changeRowNoList[findSalesDetailList[0].SalesRowNo - 1];
                        //        }
                        //    }
                        //    //<<<2011/02/01 追加回答対応
                        //    //>>>2011/02/01
                        //    else
                        //    {
                        //        SalesInputDataSet.SalesDetailRow[] salesDetailRows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}='{1}'",
                        //            this._salesDetailDataTable.DtlRelationGuidColumn.ColumnName, salesDetail.DtlRelationGuid));

                        //        SalesInputDataSet.SalesDetailRow orgDetail = salesDetailRows[0];

                        //        salesRowNo = orgDetail.SalesRowNo;
                        //        acptAnOdrStatus = orgDetail.AcptAnOdrStatus;
                        //    }
                        //    //<<<2011/02/01
                        //}
                        //else
                        //{
                        //    SalesInputDataSet.SalesDetailRow[] salesDetailRows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}='{1}'",
                        //        this._salesDetailDataTable.DtlRelationGuidColumn.ColumnName, salesDetail.DtlRelationGuid));

                        //    SalesInputDataSet.SalesDetailRow orgDetail = salesDetailRows[0];

                        //    salesRowNo = orgDetail.SalesRowNo;
                        //    acptAnOdrStatus = orgDetail.AcptAnOdrStatus;
                        //}


                        //scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                        //    this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, acptAnOdrStatus,
                        //    this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                        //    this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, salesRowNo));
                        //if (scmAcOdrDtlAsRows.Length == 0)
                        //{
                        //    scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                        //        this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, salesSlip.AcptAnOdrStatus,
                        //        this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                        //        this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, salesRowNo));
                        //}
                        ////>>>2011/02/01
                        //// 返品時、元データは受注
                        //if (salesSlip.SalesSlipCd == 1)
                        //{
                        //    scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                        //        this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder,
                        //        this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                        //        this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, salesRowNo));
                        //}
                        ////<<<2011/02/01

                        ////>>>2011/02/01
                        //if ((changeRowNo != 0) && (scmAcOdrDtlAsRows != null) && (scmAcOdrDtlAsRows.Length != 0))
                        //{
                        //    scmAcOdrDtlAsRows[0].SalesRowNo = changeRowNo;
                        //}
                        //<<<2011/02/01
                        #endregion

                        scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}={3}",
                            this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, salesDetail.InqRowNumber,
                            this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, salesDetail.InqRowNumDerivedNo));
                        //<<<2011/03/05
                        break;
                    case 1: // 受注
                        SalesInputDataSet.SalesDetailAcceptAnOrderRow[] salesAcptDetailRows = (SalesInputDataSet.SalesDetailAcceptAnOrderRow[])this._salesDetailAcceptAnOrderDataTable.Select(string.Format("{0}='{1}'",
                            this._salesDetailAcceptAnOrderDataTable.DtlRelationGuidColumn.ColumnName, salesDetail.DtlRelationGuid));

                        SalesInputDataSet.SalesDetailAcceptAnOrderRow orgAcptDetail = salesAcptDetailRows[0];
                        //>>>2011/03/08
                        #region 削除
                        //salesRowNo = orgAcptDetail.SalesRowNo;

                        //scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                        //    this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, orgAcptDetail.AcptAnOdrStatus,
                        //    this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                        //    this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, orgAcptDetail.SalesRowNo));
                        //if (scmAcOdrDtlAsRows.Length == 0)
                        //{
                        //    scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                        //        this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales,
                        //        this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                        //        this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, orgAcptDetail.SalesRowNo));
                        //}
                        #endregion

                        scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}={3}",
                            this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, orgAcptDetail.InqRowNumber,
                            this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, orgAcptDetail.InqRowNumDerivedNo));
                        //<<<2011/03/08
                        break;
                    case 2: // 受注(発注分)
                        SalesInputDataSet.SalesDetailAcceptAnOrderRow[] salesAcptOrderDetailRows = (SalesInputDataSet.SalesDetailAcceptAnOrderRow[])this._salesDetailAcceptAnOrderDataTableForOrder.Select(string.Format("{0}='{1}'",
                            this._salesDetailAcceptAnOrderDataTableForOrder.DtlRelationGuidColumn.ColumnName, salesDetail.DtlRelationGuid));

                        SalesInputDataSet.SalesDetailAcceptAnOrderRow orgAcptOrderDetail = salesAcptOrderDetailRows[0];
                        salesRowNo = orgAcptOrderDetail.SalesRowNo;

                        scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                            this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, orgAcptOrderDetail.AcptAnOdrStatus,
                            this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                            this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, orgAcptOrderDetail.SalesRowNo));
                        if (scmAcOdrDtlAsRows.Length == 0)
                        {
                            scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                                this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales,
                                this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                                this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, orgAcptOrderDetail.SalesRowNo));
                        }
                        break;
                }

                if (scmAcOdrDtlAsRows.Length != 0)
                {
                    // SCM受注明細データ(回答)が存在する場合
                    scmAcOdrDtlAsRow = scmAcOdrDtlAsRows[0];
                    scmAcOdrDtlAsRow = this.CreateSCMAcOdrDtlAsRowFromUIData(salesSlip, salesDetail, scmAcOdrDtlAsRow);
                }
                else
                {
                    // SCM受注明細データ(回答)が存在しない場合
                    scmAcOdrDtlAsRow = scmAcOdrDtlAsDataTable.NewSCMAcOdrDtlAsRow();
                    this.DefaultSettingSCMAcOdrDtlAsRow(ref scmAcOdrDtlAsRow);
                    int svRowNo = salesDetail.SalesRowNo;
                    salesDetail.SalesRowNo = salesRowNo;
                    scmAcOdrDtlAsDataTable.AddSCMAcOdrDtlAsRow(this.CreateSCMAcOdrDtlAsRowFromUIData(salesSlip, salesDetail, salesDetailList, scmAcOdrDtlAsRow));
                    salesDetail.SalesRowNo = svRowNo;
                }
            }
            catch (ConstraintException e)
            {
            }
        }

        //>>>2011/02/01 一部回答判定対応
        /// <summary>
        /// SCM受注明細データ(回答)退避用テーブルキャッシュ
        /// </summary>
        private void CacheSCMAcOdrDtlAsDataTableSave()
        {
            if (this._scmAcOdrDtlAsDataTable != null)
            {
                this._scmAcOdrDtlAsDataTableSave = (ScmDataSet.SCMAcOdrDtlAsDataTable)this._scmAcOdrDtlAsDataTable.Copy();
            }
        }

        /// <summary>
        /// SCM受注明細データ(問合せ)退避用リストキャッシュ(補正前)
        /// </summary>
        /// <param name="detailList"></param>
        private void CacheSCMDetailListSaveBefore(IList<ISCMOrderDetailRecord> detailList)
        {
            this._scmDetailIListSvBefore.Clear();
            this._scmDetailIListSvBefore = detailList;
        }
        //<<<2011/02/01 一部回答判定対応
        #endregion

        #region SCM情報保存用オブジェクト生成
        /// <summary>
        /// SCM情報保存用オブジェクト取得
        /// </summary>
        /// <param name="iMode">0:売上 1:受注 2:受注(発注分)</param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="scmAcOdrDataWork"></param>
        /// <param name="scmAcOdrDtCarWork"></param>
        /// <param name="scmAcOdrDtlIqWorkList"></param>
        /// <param name="scmAcOdrDtlAsWorkList"></param>
        private void GetCurrentSCM(int iMode, SalesSlip salesSlip, List<SalesDetail> salesDetailList, out SCMAcOdrDataWork scmAcOdrDataWork, out SCMAcOdrDtCarWork scmAcOdrDtCarWork, out ArrayList scmAcOdrDtlIqWorkList, out ArrayList scmAcOdrDtlAsWorkList)
        {
            scmAcOdrDataWork = null;
            scmAcOdrDtCarWork = null;
            scmAcOdrDtlAsWorkList = null;
            scmAcOdrDtlIqWorkList = null;

            if ((salesSlip == null) ||
                (salesDetailList == null) ||
                (salesDetailList.Count == 0) ||
                (salesSlip.OnlineKindDiv != (int)OnlineKindDiv.SCM)) return;

            // 各種SCMデータテーブル作成処理
            this.MakeSCMDataTable(iMode, salesSlip, salesDetailList);

            //>>>2011/03/05
            // 売上明細データへ問合せ行番号反映
            this.SettingInqRowNoSalesDetailList(ref salesDetailList);
            //<<<2011/03/05

            // SCM情報保存用オブジェクトを各種SCMデータテーブルより取得
            this.GetParamDataFromSCMDataTable(iMode, salesSlip, salesDetailList, out scmAcOdrDataWork, out scmAcOdrDtCarWork, out scmAcOdrDtlIqWorkList, out scmAcOdrDtlAsWorkList);

            //>>>2011/02/01
            // 回答不要明細削除
            scmAcOdrDtlAsWorkList = this.ReMakeScmAcOdrDtlAsList(scmAcOdrDtlAsWorkList);
            //<<<2011/02/01
            // ---------------------- ADD START 2011/08/23 zhubj ----------------->>>>>
            // SCM受注データの受発注種別更新
            if (_scmHeaderIListSvForWebCheck != null && _scmHeaderIListSvForWebCheck.Count > 0)
                scmAcOdrDataWork.AcceptOrOrderKind = _scmHeaderIListSvForWebCheck[0].AcceptOrOrderKind;

            //scmAcOdrDtCarWork.MakerName = salesSlip.

            // PMからSFへ送信
            //if (scmAcOdrDataWork.InquiryNumber == 0)  // DEL 2011/09/21
            //{// DEL 2011/09/21
                // SCM受注明細データ（回答）、SCM受注明細データ（問合せ・発注）のPM現在庫数設定
                // PM現在庫数→対象となる在庫マスタの出荷可能数
                // SCM受注明細データ（問合せ・発注）
                foreach (SCMAcOdrDtlIqWork scmAcOdrDtlIqWork in scmAcOdrDtlIqWorkList)
                {
                    Stock stock = GetGoodsUnitDataDicStock(scmAcOdrDtlIqWork.GoodsMakerCd, scmAcOdrDtlIqWork.GoodsNo.Trim(), scmAcOdrDtlIqWork.WarehouseCode.Trim());
                    if (stock != null)
                    {
                        scmAcOdrDtlIqWork.PmPrsntCount = stock.ShipmentPosCnt;
                    }
                }
                // SCM受注明細データ（回答）
                foreach (SCMAcOdrDtlAsWork sCMAcOdrDtlAsWork in scmAcOdrDtlAsWorkList)
                {
                    Stock stock = GetGoodsUnitDataDicStock(sCMAcOdrDtlAsWork.GoodsMakerCd, sCMAcOdrDtlAsWork.GoodsNo.Trim(), sCMAcOdrDtlAsWork.WarehouseCode.Trim());
                    if (stock != null)
                    {
                        sCMAcOdrDtlAsWork.PmPrsntCount = stock.ShipmentPosCnt;
                    }
                }
            //} // DEL 2011/09/21
            // ---------------------- ADD END   2011/08/23 zhubj -----------------<<<<<
        }

        //>>>2011/03/05
        /// <summary>
        /// 売上明細データへ問合せ行番号を反映
        /// SCM情報保存用オブジェクトを各種データテーブルより取得
        /// </summary>
        /// <param name="salesDetailList"></param>
        private void SettingInqRowNoSalesDetailList(ref List<SalesDetail> salesDetailList)
        {
            List<SalesDetail> retList = new List<SalesDetail>();

            try
            {
                foreach (SalesDetail salesDetail in salesDetailList)
                {
                    foreach (ScmDataSet.SCMAcOdrDtlAsRow row in this._scmAcOdrDtlAsDataTable)
                    {
                        // UPD 2012/07/31 SCM障害№10356対応 -------------------------->>>>>
                        //if (salesDetail.DtlRelationGuid == row.DtlRelationGuid)
                        if (row.DtlRelationGuid != Guid.Empty && salesDetail.DtlRelationGuid == row.DtlRelationGuid)
                        // UPD 2012/07/31 SCM障害№10356対応 --------------------------<<<<<
                        {
                            if (salesDetail.InqRowNumber == 0)
                            {
                                salesDetail.InqRowNumber = row.InqRowNumber;
                                salesDetail.InqRowNumDerivedNo = row.InqRowNumDerivedNo;
                            }
                            retList.Add(salesDetail);
                            break;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                return;
            }

            if (retList.Count != 0)
            {
                salesDetailList.Clear();
                salesDetailList.AddRange(retList);
            }
            return;
        }
        //<<<2011/03/05

        // ------------------ ADD qijh 2013/02/27 #34752 --------------- >>>>>
        /// <summary>
        /// バックアップされたSCM問合せ明細回答データを取得する
        /// </summary>
        /// <param name="updSCMAcOdrDtlAsRow">更新後のSCM問合せ明細回答データ</param>
        /// <returns>SCM問合せ明細回答データ</returns>
        private ScmDataSet.SCMAcOdrDtlAsRow GetSCMAcOdrDtlAsRowBackup(ScmDataSet.SCMAcOdrDtlAsRow updSCMAcOdrDtlAsRow)
        {
            if (null == this._scmAcOdrDtlAsDataTableBackup || null == updSCMAcOdrDtlAsRow)
                return null;

            ScmDataSet.SCMAcOdrDtlAsRow[] scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTableBackup.Select(string.Format("{0}={1} AND {2}={3}",
                this._scmAcOdrDtlAsDataTableBackup.InqRowNumberColumn.ColumnName, updSCMAcOdrDtlAsRow.InqRowNumber,
                this._scmAcOdrDtlAsDataTableBackup.InqRowNumDerivedNoColumn.ColumnName, updSCMAcOdrDtlAsRow.InqRowNumDerivedNo));

            if (null == scmAcOdrDtlAsRows || scmAcOdrDtlAsRows.Length <= 0)
                return null;
            else
                return scmAcOdrDtlAsRows[0];
        }

        /// <summary>
        /// 今回SCM問合せ明細回答が前回と変更したかをチェックする
        /// </summary>
        /// <param name="bakSCMAcOdrDtlAsRow">バックアップされたSCM問合せ明細回答データ</param>
        /// <param name="updSCMAcOdrDtlAsRow">更新後のSCM問合せ明細回答データ</param>
        /// <returns>true:変更あり false:変更なし</returns>
        private bool IsSCMAcOdrDtlAsRowChanged(ScmDataSet.SCMAcOdrDtlAsRow bakSCMAcOdrDtlAsRow, ScmDataSet.SCMAcOdrDtlAsRow updSCMAcOdrDtlAsRow)
        {
            if (null == bakSCMAcOdrDtlAsRow || null == updSCMAcOdrDtlAsRow)
                return true;


            if (!bakSCMAcOdrDtlAsRow.GoodsDivCd.Equals(updSCMAcOdrDtlAsRow.GoodsDivCd)
                || !bakSCMAcOdrDtlAsRow.RecyclePrtKindCode.Equals(updSCMAcOdrDtlAsRow.RecyclePrtKindCode)
                || !bakSCMAcOdrDtlAsRow.RecyclePrtKindName.Equals(updSCMAcOdrDtlAsRow.RecyclePrtKindName)
                || !bakSCMAcOdrDtlAsRow.DeliveredGoodsDiv.Equals(updSCMAcOdrDtlAsRow.DeliveredGoodsDiv)
                || !bakSCMAcOdrDtlAsRow.HandleDivCode.Equals(updSCMAcOdrDtlAsRow.HandleDivCode)
                || !bakSCMAcOdrDtlAsRow.GoodsShape.Equals(updSCMAcOdrDtlAsRow.GoodsShape)
                || !bakSCMAcOdrDtlAsRow.DelivrdGdsConfCd.Equals(updSCMAcOdrDtlAsRow.DelivrdGdsConfCd)
                || !bakSCMAcOdrDtlAsRow.DeliGdsCmpltDueDate.Equals(updSCMAcOdrDtlAsRow.DeliGdsCmpltDueDate)
                || !bakSCMAcOdrDtlAsRow.AnswerDeliveryDate.Equals(updSCMAcOdrDtlAsRow.AnswerDeliveryDate)
                || !bakSCMAcOdrDtlAsRow.BLGoodsCode.Equals(updSCMAcOdrDtlAsRow.BLGoodsCode)
                || !bakSCMAcOdrDtlAsRow.BLGoodsDrCode.Equals(updSCMAcOdrDtlAsRow.BLGoodsDrCode)
                || !bakSCMAcOdrDtlAsRow.InqGoodsName.Equals(updSCMAcOdrDtlAsRow.InqGoodsName)
                || !bakSCMAcOdrDtlAsRow.AnsGoodsName.Equals(updSCMAcOdrDtlAsRow.AnsGoodsName)
                || !bakSCMAcOdrDtlAsRow.SalesOrderCount.Equals(updSCMAcOdrDtlAsRow.SalesOrderCount)
                || !bakSCMAcOdrDtlAsRow.DeliveredGoodsCount.Equals(updSCMAcOdrDtlAsRow.DeliveredGoodsCount)
                || !bakSCMAcOdrDtlAsRow.GoodsNo.Equals(updSCMAcOdrDtlAsRow.GoodsNo)
                || !bakSCMAcOdrDtlAsRow.GoodsMakerCd.Equals(updSCMAcOdrDtlAsRow.GoodsMakerCd)
                || !bakSCMAcOdrDtlAsRow.GoodsMakerNm.Equals(updSCMAcOdrDtlAsRow.GoodsMakerNm)
                || !bakSCMAcOdrDtlAsRow.PureGoodsMakerCd.Equals(updSCMAcOdrDtlAsRow.PureGoodsMakerCd)
                || !bakSCMAcOdrDtlAsRow.InqPureGoodsNo.Equals(updSCMAcOdrDtlAsRow.InqPureGoodsNo)
                || !bakSCMAcOdrDtlAsRow.AnsPureGoodsNo.Equals(updSCMAcOdrDtlAsRow.AnsPureGoodsNo)
                || !bakSCMAcOdrDtlAsRow.ListPrice.Equals(updSCMAcOdrDtlAsRow.ListPrice)
                || !bakSCMAcOdrDtlAsRow.UnitPrice.Equals(updSCMAcOdrDtlAsRow.UnitPrice)
                || !bakSCMAcOdrDtlAsRow.GoodsAddInfo.Equals(updSCMAcOdrDtlAsRow.GoodsAddInfo)
                || !bakSCMAcOdrDtlAsRow.AnswerLimitDate.Equals(updSCMAcOdrDtlAsRow.AnswerLimitDate)
                || !bakSCMAcOdrDtlAsRow.CommentDtl.Equals(updSCMAcOdrDtlAsRow.CommentDtl)
                || !bakSCMAcOdrDtlAsRow.AppendingFileNmDtl.Equals(updSCMAcOdrDtlAsRow.AppendingFileNmDtl)
                || !bakSCMAcOdrDtlAsRow.AdditionalDivCd.Equals(updSCMAcOdrDtlAsRow.AdditionalDivCd)
                || !bakSCMAcOdrDtlAsRow.CorrectDivCD.Equals(updSCMAcOdrDtlAsRow.CorrectDivCD)
                || !bakSCMAcOdrDtlAsRow.AcptAnOdrStatus.Equals(updSCMAcOdrDtlAsRow.AcptAnOdrStatus)
                || !bakSCMAcOdrDtlAsRow.SalesSlipNum.Equals(updSCMAcOdrDtlAsRow.SalesSlipNum)
                || !bakSCMAcOdrDtlAsRow.SalesRowNo.Equals(updSCMAcOdrDtlAsRow.SalesRowNo)
                || !bakSCMAcOdrDtlAsRow.CampaignCode.Equals(updSCMAcOdrDtlAsRow.CampaignCode)
                || !bakSCMAcOdrDtlAsRow.StockDiv.Equals(updSCMAcOdrDtlAsRow.StockDiv)
                || !bakSCMAcOdrDtlAsRow.DisplayOrder.Equals(updSCMAcOdrDtlAsRow.DisplayOrder)
                || !bakSCMAcOdrDtlAsRow.GoodsMngNo.Equals(updSCMAcOdrDtlAsRow.GoodsMngNo)
                || !bakSCMAcOdrDtlAsRow.CancelCndtinDiv.Equals(updSCMAcOdrDtlAsRow.CancelCndtinDiv)
                || !bakSCMAcOdrDtlAsRow.GoodsSpecialNote.Equals(updSCMAcOdrDtlAsRow.GoodsSpecialNote)
                || !bakSCMAcOdrDtlAsRow.AutoEstimatePartsCd.Equals(updSCMAcOdrDtlAsRow.AutoEstimatePartsCd)
                )
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 倉庫情報の補正処理
        /// </summary>
        /// <param name="updSCMAcOdrDtlAsRow">今回作成したSCM問合せ明細回答</param>
        private void SetSCMAsWarehouseInfo(ScmDataSet.SCMAcOdrDtlAsRow updSCMAcOdrDtlAsRow)
        {
            if (string.IsNullOrEmpty(updSCMAcOdrDtlAsRow.PmMainMngWarehouseCd) || string.IsNullOrEmpty(updSCMAcOdrDtlAsRow.PmMainMngWarehouseCd.Trim()))
                return;

            ScmDataSet.SCMAcOdrDtlAsRow bakSCMAcOdrDtlAsRow = GetSCMAcOdrDtlAsRowBackup(updSCMAcOdrDtlAsRow); // 前回明細回答を取得
            if (IsSCMAcOdrDtlAsRowChanged(bakSCMAcOdrDtlAsRow, updSCMAcOdrDtlAsRow))
            {
                // 自動回答した後、手動回答の場合、明細回答が変わったら、手動回答仕様により、PM主管倉庫など情報をNULLにセット
                updSCMAcOdrDtlAsRow.PmMainMngWarehouseCd = string.Empty;
                updSCMAcOdrDtlAsRow.PmMainMngWarehouseName = string.Empty;
                updSCMAcOdrDtlAsRow.PmMainMngShelfNo = string.Empty;
                updSCMAcOdrDtlAsRow.PmMainMngPrsntCount = 0;
            }
            else
            {
                // 自動回答した後、手動回答の場合、明細回答が変わらなければ、前回自動回答作成された倉庫情報をそのまま今回作成した回答にセット
                updSCMAcOdrDtlAsRow.WarehouseCode = bakSCMAcOdrDtlAsRow.WarehouseCode;
                updSCMAcOdrDtlAsRow.WarehouseName = bakSCMAcOdrDtlAsRow.WarehouseName;
                updSCMAcOdrDtlAsRow.WarehouseShelfNo = bakSCMAcOdrDtlAsRow.WarehouseShelfNo;
                updSCMAcOdrDtlAsRow.PmMainMngWarehouseCd = bakSCMAcOdrDtlAsRow.PmMainMngWarehouseCd;
                updSCMAcOdrDtlAsRow.PmMainMngWarehouseName = bakSCMAcOdrDtlAsRow.PmMainMngWarehouseName;
                updSCMAcOdrDtlAsRow.PmMainMngShelfNo = bakSCMAcOdrDtlAsRow.PmMainMngShelfNo;
                updSCMAcOdrDtlAsRow.PmMainMngPrsntCount = bakSCMAcOdrDtlAsRow.PmMainMngPrsntCount;
            }
        }
        // ------------------ ADD qijh 2013/02/27 #34752 --------------- <<<<<

        /// <summary>
        /// SCM情報保存用オブジェクトを各種データテーブルより取得
        /// </summary>
        /// <param name="iMode">0:売上 1:受注</param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="scmAcOdrDataWork"></param>
        /// <param name="scmAcOdrDtCarWork"></param>
        /// <param name="scmAcOdrDtlIqWorkList"></param>
        /// <param name="scmAcOdrDtlAsWorkList"></param>
        /// <remarks>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFへの回答データに問い合わせデータの新BLコード等を設定する。</br>
        /// </remarks>
        private void GetParamDataFromSCMDataTable(int iMode, SalesSlip salesSlip, List<SalesDetail> salesDetailList, out SCMAcOdrDataWork scmAcOdrDataWork, out SCMAcOdrDtCarWork scmAcOdrDtCarWork, out ArrayList scmAcOdrDtlIqWorkList, out ArrayList scmAcOdrDtlAsWorkList)
        {
            DateTime today = DateTime.Today;
            int now = DateTime.Now.TimeOfDay.Hours * 10000000 + DateTime.Now.TimeOfDay.Minutes * 100000 + DateTime.Now.TimeOfDay.Seconds * 1000 + DateTime.Now.TimeOfDay.Milliseconds;
            scmAcOdrDataWork = null;
            scmAcOdrDtCarWork = null;
            scmAcOdrDtlIqWorkList = new ArrayList();
            scmAcOdrDtlAsWorkList = new ArrayList();

            //-----------------------------------------------------------------------------
            // SCM受注データ取得
            //-----------------------------------------------------------------------------
            ScmDataSet.SCMAcOdrDataRow[] scmAcOdrDataRows = (ScmDataSet.SCMAcOdrDataRow[])this._scmAcOdrDataDataTable.Select(string.Format("{0}={1} AND {2}='{3}'",
                this._scmAcOdrDataDataTable.AcptAnOdrStatusColumn.ColumnName, salesSlip.AcptAnOdrStatus,
                this._scmAcOdrDataDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum));
            if (scmAcOdrDataRows.Length == 0) return;
            scmAcOdrDataWork = this.GetParamDataFromSCMAcOdrDataRow(scmAcOdrDataRows[0]);
            // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------>>>>>
            // 返品時に元伝にSCM受注データが紐づく場合、受発注種別と問合せ従業員コード(※)を継承する
            // ※ダイレクト回答となるため問合せ従業員コードが無いと受発注種別が｢1:PCC-UOE｣に強制設定されるため必要
            if (_scmAcOdrDataDataTableReturn != null && _scmAcOdrDataDataTableReturn.Rows.Count > 0)
            {
                ScmDataSet.SCMAcOdrDataRow scmAcOdrDataRow = this._scmAcOdrDataDataTableReturn[0];
                scmAcOdrDataWork.AcceptOrOrderKind = scmAcOdrDataRow.AcceptOrOrderKind; //受発注種別
                scmAcOdrDataWork.InqEmployeeCd = scmAcOdrDataRow.InqEmployeeCd; //問合せ従業員コード
            }
            // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------<<<<<

            //-----------------------------------------------------------------------------
            // SCM受注データ(車両情報)取得
            //-----------------------------------------------------------------------------
            ScmDataSet.SCMAcOdrDtCarRow[] scmAcOdrDtCarRows = (ScmDataSet.SCMAcOdrDtCarRow[])this._scmAcOdrDtCarDataTable.Select(string.Format("{0}={1} AND {2}='{3}'",
                this._scmAcOdrDtCarDataTable.AcptAnOdrStatusColumn.ColumnName, salesSlip.AcptAnOdrStatus,
                this._scmAcOdrDtCarDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum));
            if (scmAcOdrDtCarRows.Length == 0)
            {
                scmAcOdrDtCarRows = (ScmDataSet.SCMAcOdrDtCarRow[])this._scmAcOdrDtCarDataTable.Select(string.Format("{0}={1} AND {2}='{3}'",
                    this._scmAcOdrDtCarDataTable.AcptAnOdrStatusColumn.ColumnName, (int)AcptAnOdrStatusState.Sales,
                    this._scmAcOdrDtCarDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum));
            }
            if (scmAcOdrDtCarRows.Length != 0)
            {
                scmAcOdrDtCarWork = this.GetParamDataFromSCMAcOdrDtCarRow(scmAcOdrDtCarRows[0]);
                this.AdjustScmAcOdrDtCarWork(ref scmAcOdrDtCarWork, today, now); // 補正処理
            }

            //-----------------------------------------------------------------------------
            // SCM受注明細データ(問合せ・発注)取得
            //-----------------------------------------------------------------------------
            ScmDataSet.SCMAcOdrDtlIqRow[] scmAcOdrDtlIqRows = (ScmDataSet.SCMAcOdrDtlIqRow[])this._scmAcOdrDtlIqDataTable.Select(string.Format("{0}={1} AND {2}='{3}'",
                this._scmAcOdrDtlIqDataTable.AcptAnOdrStatusColumn.ColumnName, salesSlip.AcptAnOdrStatus,
                this._scmAcOdrDtlIqDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum));
            if (scmAcOdrDtlIqRows.Length != 0)
            {
                foreach (ScmDataSet.SCMAcOdrDtlIqRow scmAcOdrDtlIqRow in scmAcOdrDtlIqRows)
                {
                    SCMAcOdrDtlIqWork work = this.GetParamDataFromSCMAcOdrDtlIqRow(scmAcOdrDtlIqRow);
                    scmAcOdrDtlIqWorkList.Add(work);
                }
            }

            //-----------------------------------------------------------------------------
            // SCM受注明細データ(回答)取得
            //-----------------------------------------------------------------------------
            foreach (SalesDetail detail in salesDetailList)
            {
                int changeRowNo = 0; // 2011/02/01
                ScmDataSet.SCMAcOdrDtlAsRow[] scmAcOdrDtlAsRows = null;
                int salesRowNo = detail.SalesRowNo;
                int acptAnOdrStatus = detail.AcptAnOdrStatus;

                switch (iMode)
                {
                    case 0:
                        //>>>2011/03/05
                        #region 削除
                        //if ((this._salesDetailDBDataList != null) && (this._salesDetailDBDataList.Count != 0))
                        //{
                        //    List<SalesDetail> findSalesDetailList = this._salesDetailDBDataList.FindAll(
                        //        delegate(SalesDetail salesDetail)
                        //        {
                        //            if (detail.DtlRelationGuid == salesDetail.DtlRelationGuid)
                        //            {
                        //                return true;
                        //            }
                        //            else
                        //            {
                        //                return false;
                        //            }
                        //        }
                        //    );
                        //    //>>>2011/02/01 追加回答対応
                        //    //salesRowNo = findSalesDetailList[0].SalesRowNo;
                        //    //acptAnOdrStatus = detail.AcptAnOdrStatus;
                        //    if ((findSalesDetailList != null) && (findSalesDetailList.Count != 0))
                        //    {
                        //        salesRowNo = findSalesDetailList[0].SalesRowNo;
                        //        acptAnOdrStatus = detail.AcptAnOdrStatus;
                        //    }
                        //    //<<<2011/02/01 追加回答対応
                        //    //>>>2011/02/01
                        //    else
                        //    {
                        //        SalesInputDataSet.SalesDetailRow[] salesDetailRows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}='{1}'",
                        //            this._salesDetailDataTable.DtlRelationGuidColumn.ColumnName, detail.DtlRelationGuid));

                        //        salesRowNo = salesDetailRows[0].SalesRowNo;
                        //        acptAnOdrStatus = salesDetailRows[0].AcptAnOdrStatus;
                        //    }
                        //    //<<<2011/02/01
                        //}
                        //else
                        //{
                        //    SalesInputDataSet.SalesDetailRow[] salesDetailRows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}='{1}'",
                        //        this._salesDetailDataTable.DtlRelationGuidColumn.ColumnName, detail.DtlRelationGuid));

                        //    salesRowNo = salesDetailRows[0].SalesRowNo;
                        //    acptAnOdrStatus = salesDetailRows[0].AcptAnOdrStatus;
                        //}

                        //scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                        //    this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, acptAnOdrStatus,
                        //    this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                        //    this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, salesRowNo));
                        //if (scmAcOdrDtlAsRows.Length == 0)
                        //{
                        //    scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                        //        //this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, acptAnOdrStatus,
                        //        this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, detail.AcptAnOdrStatus,
                        //        this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                        //        this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, salesRowNo));
                        //}
                        #endregion

                        scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}={3}",
                            this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, detail.InqRowNumber,
                            this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, detail.InqRowNumDerivedNo));
                        //<<<2011/03/05

                        break;
                    case 1:
                        SalesInputDataSet.SalesDetailAcceptAnOrderRow[] salesAcptDetailRows = (SalesInputDataSet.SalesDetailAcceptAnOrderRow[])this._salesDetailAcceptAnOrderDataTable.Select(string.Format("{0}='{1}'",
                            this._salesDetailAcceptAnOrderDataTable.DtlRelationGuidColumn.ColumnName, detail.DtlRelationGuid));

                        SalesInputDataSet.SalesDetailAcceptAnOrderRow orgAcptDetail = salesAcptDetailRows[0];

                        //>>>2011/03/08
                        #region 削除
                        //scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                        //    this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, orgAcptDetail.AcptAnOdrStatus,
                        //    this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                        //    this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, orgAcptDetail.SalesRowNo));
                        //if (scmAcOdrDtlAsRows.Length == 0)
                        //{
                        //    scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                        //        this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales,
                        //        this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                        //        this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, orgAcptDetail.SalesRowNo));
                        //}
                        #endregion

                        scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}={3}",
                            this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, orgAcptDetail.InqRowNumber,
                            this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, orgAcptDetail.InqRowNumDerivedNo));
                        //<<<2011/03/08
                        // ADD 2012/07/11 SCM障害№111 --------------------------------------------->>>>>
                        if (scmAcOdrDtlAsRows.Length == 0)
                        {
                            scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}={3}",
                                this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, detail.InqRowNumber,
                                this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, detail.InqRowNumDerivedNo));
                        }
                        // ADD 2012/07/11 SCM障害№111 ---------------------------------------------<<<<<

                        break;
                    case 2:
                        SalesInputDataSet.SalesDetailAcceptAnOrderRow[] salesAcptOrderDetailRows = (SalesInputDataSet.SalesDetailAcceptAnOrderRow[])this._salesDetailAcceptAnOrderDataTableForOrder.Select(string.Format("{0}='{1}'",
                            this._salesDetailAcceptAnOrderDataTableForOrder.DtlRelationGuidColumn.ColumnName, detail.DtlRelationGuid));

                        SalesInputDataSet.SalesDetailAcceptAnOrderRow orgAcptOrderDetail = salesAcptOrderDetailRows[0];

                        scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                            this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, orgAcptOrderDetail.AcptAnOdrStatus,
                            this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                            this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, orgAcptOrderDetail.SalesRowNo));
                        if (scmAcOdrDtlAsRows.Length == 0)
                        {
                            scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}='{3}' AND {4}={5}",
                                this._scmAcOdrDtlAsDataTable.AcptAnOdrStatusColumn.ColumnName, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales,
                                this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesSlip.SalesSlipNum,
                                this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, orgAcptOrderDetail.SalesRowNo));
                        }
                        break;
                }

                if ((scmAcOdrDtlAsRows != null) && (scmAcOdrDtlAsRows.Length != 0))
                {
                    foreach (ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow in scmAcOdrDtlAsRows)
                    {
                        SetSCMAsWarehouseInfo(scmAcOdrDtlAsRow); // 明細回答の倉庫情報をセット // ADD qijh 2013/02/27 #34752

                        //SCMAcOdrDtlAsWork work = this.GetParamDataFromSCMAcOdrDtlAsRow(scmAcOdrDtlAsRow);// DEL 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット
                        SCMAcOdrDtlAsWork work = this.GetParamDataFromSCMAcOdrDtlAsRow(scmAcOdrDtlAsRow, salesSlip);// ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット
                        this.AdjustScmAcOdrDtlAsWork(ref work, salesDetailList, today, now, detail); // 補正処理
                        scmAcOdrDtlAsWorkList.Add(work);
                    }
                }
            }

            // ADD 2012/07/11 №35 T.Yoshioka ------------------------------>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            // SCM受注明細データ(回答) 返品時の問合せ行番号、問合せ行番号枝番、問発商品名の編集
            if (_scmAcOdrDtlAsDataTableReturn != null && _scmAcOdrDtlAsDataTableReturn.Rows.Count > 0)
            {
                // SCM受注明細データ(回答) 返品用データのループ
                foreach (ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow in _scmAcOdrDtlAsDataTableReturn.Rows)
                {
                    //SCMAcOdrDtlAsWork work = this.GetParamDataFromSCMAcOdrDtlAsRow(scmAcOdrDtlAsRow);// DEL 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット
                    SCMAcOdrDtlAsWork work = this.GetParamDataFromSCMAcOdrDtlAsRow(scmAcOdrDtlAsRow, salesSlip);// ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット

                    // 保存処理の中で生成したSCM受注明細データ(回答) データのループ
                    foreach (SCMAcOdrDtlAsWork target in scmAcOdrDtlAsWorkList)
                    {
                        // 返品時は行削除等の編集ができない為、売上行番号で判断
                        if (target.SalesRowNo == work.SalesRowNo)
                        {
                            target.StockStatusDiv = work.StockStatusDiv;// ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット
                            target.BgnGoodsDiv = work.BgnGoodsDiv; // ADD 2015/03/13 SCM高速化 Redmine#365 返品時のお買い得選択区分内容不正

                            //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ---------->>>>>
                            target.InqBlUtyPtThCd = work.InqBlUtyPtThCd;     // 問発BL統一部品コード(スリーコード版)
                            target.InqBlUtyPtSbCd = work.InqBlUtyPtSbCd;     // 問発BL統一部品サブコード
                            target.AnsBlUtyPtThCd = work.AnsBlUtyPtThCd;     // 回答BL統一部品コード(スリーコード版)
                            target.AnsBlUtyPtSbCd = work.AnsBlUtyPtSbCd;     // 回答BL統一部品サブコード
                            target.AnsBLGoodsCode = work.AnsBLGoodsCode;     // 回答BL商品コード
                            target.AnsBLGoodsDrCode = work.AnsBLGoodsDrCode; // 回答BL商品コード枝番
                            //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ----------<<<<<

                            // 初回の返品の場合のみ
                            if (target.CancelCndtinDiv == (short)CancelCndtinDiv.Cancelled && target.UpdateDateTime == DateTime.MinValue)
                            {
                                // --- DEL 2012/09/20 三戸 №35の戻し --------->>>>>>>>>>>>>>>>>>>>>>>>
                                //target.InqRowNumber = work.InqRowNumber;
                                //target.InqRowNumDerivedNo = work.InqRowNumDerivedNo;
                                // --- DEL 2012/09/20 三戸 №35の戻し ---------<<<<<<<<<<<<<<<<<<<<<<<<
                                target.InqGoodsName = work.InqGoodsName;
                            }
                            break;
                        }
                    }
                }
            }
            // ADD 2012/07/11 №35 T.Yoshioka ------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // SCM受注明細データ(回答)
            this.AdjustScmAcOdrDtlAsWork(scmAcOdrDtlAsWorkList);

            // SCM受注データ補正処理
            // UPD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
            //this.AdjustScmAcOdrDataWork(ref scmAcOdrDataWork, today, now, salesSlip, salesDetailList, scmAcOdrDtlAsWorkList);
            this.AdjustScmAcOdrDataWork(ref scmAcOdrDataWork, today, now, salesSlip, salesDetailList, scmAcOdrDtlAsWorkList, scmAcOdrDtCarWork);
            // UPD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<

        }

        //>>>2010/03/30
        /// <summary>
        /// SCM情報保存用オブジェクトを各種データテーブルより取得
        /// </summary>
        /// <param name="iMode">0:売上 1:受注</param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="scmAcOdrDataWork"></param>
        /// <param name="scmAcOdrDtCarWork"></param>
        /// <param name="scmAcOdrDtlIqWorkList"></param>
        /// <param name="scmAcOdrDtlAsWorkList"></param>
        private void GetParamDataFromSCMDataTableForCancel(int iMode, SalesSlip salesSlip, List<SalesDetail> salesDetailList, out SCMAcOdrDataWork scmAcOdrDataWork, out SCMAcOdrDtCarWork scmAcOdrDtCarWork, out ArrayList scmAcOdrDtlIqWorkList, out ArrayList scmAcOdrDtlAsWorkList)
        {
            DateTime today = DateTime.Today;
            int now = DateTime.Now.TimeOfDay.Hours * 10000000 + DateTime.Now.TimeOfDay.Minutes * 100000 + DateTime.Now.TimeOfDay.Seconds * 1000 + DateTime.Now.TimeOfDay.Milliseconds;
            scmAcOdrDataWork = null;
            scmAcOdrDtCarWork = null;
            scmAcOdrDtlIqWorkList = new ArrayList();
            scmAcOdrDtlAsWorkList = new ArrayList();

            //-----------------------------------------------------------------------------
            // SCM受注データ取得
            //-----------------------------------------------------------------------------
            if ((this._scmAcOdrDataDataTable == null) || (this._scmAcOdrDataDataTable.Count == 0)) return;
            scmAcOdrDataWork = this.GetParamDataFromSCMAcOdrDataRow(this._scmAcOdrDataDataTable[0]);

            //-----------------------------------------------------------------------------
            // SCM受注データ(車両情報)取得
            //-----------------------------------------------------------------------------
            if ((this._scmAcOdrDtCarDataTable != null) && (this._scmAcOdrDtCarDataTable.Count != 0))
            {
                scmAcOdrDtCarWork = this.GetParamDataFromSCMAcOdrDtCarRow(this._scmAcOdrDtCarDataTable[0]);
                this.AdjustScmAcOdrDtCarWork(ref scmAcOdrDtCarWork, today, now); // 補正処理
            }

            //-----------------------------------------------------------------------------
            // SCM受注明細データ(回答)取得
            //-----------------------------------------------------------------------------
            if ((this._scmAcOdrDtlAsDataTable == null) || (this._scmAcOdrDtlAsDataTable.Count == 0)) return;
            foreach (ScmDataSet.SCMAcOdrDtlAsRow detailRow in this._scmAcOdrDtlAsDataTable)
            {
                // 2010/05/27 Add >>>
                if (detailRow.SalesRowNo != 0)
                {
                    int salesRowNo;
                    int acptAnOdrStatus;

                    //if (( this._salesDetailDBDataList != null ) && ( this._salesDetailDBDataList.Count != 0 ))
                    //{
                    //    List<SalesDetail> findSalesDetailList = this._salesDetailDBDataList.FindAll(
                    //        delegate(SalesDetail detail)
                    //        {
                    //            if (salesDetail.DtlRelationGuid == detailRow.DtlRelationGuid)
                    //            {
                    //                return true;
                    //            }
                    //            else
                    //            {
                    //                return false;
                    //            }
                    //        }
                    //    );

                    //    salesRowNo = findSalesDetailList[0].SalesRowNo;
                    //    acptAnOdrStatus = findSalesDetailList[0].AcptAnOdrStatus;
                    //}
                    //else
                    //{
                    //    SalesInputDataSet.SalesDetailRow[] salesDetailRows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}='{1}'",
                    //        this._salesDetailDataTable.DtlRelationGuidColumn.ColumnName, salesDetail.DtlRelationGuid));

                    //    SalesInputDataSet.SalesDetailRow orgDetail = salesDetailRows[0];

                    //    salesRowNo = orgDetail.SalesRowNo;
                    //    acptAnOdrStatus = orgDetail.AcptAnOdrStatus;
                    //}

                    SalesDetail salesDetail = salesDetailList.Find(
                        delegate(SalesDetail dtl)
                        {
                            // --- UPD 2013/06/19 Y.Wakita ---------->>>>>
                            //if (dtl.SalesRowNo == detailRow.SalesRowNo) return true;
                            // UPD 2015/06/25 商品保証課Redmine#4149③対応 -------------------->>>>>
                            //if (dtl.InqRowNumber == detailRow.InqRowNumber) return true;
                            // 問合せ行番号・問合せ行番号枝番が同一のデータを対象とする
                            if (dtl.InqRowNumber == detailRow.InqRowNumber && dtl.InqRowNumDerivedNo == detailRow.InqRowNumDerivedNo) return true;
                            // UPD 2015/06/25 商品保証課Redmine#4149③対応 --------------------<<<<<
                            // --- UPD 2013/06/19 Y.Wakita ----------<<<<<
                            return false;
                        });

                    // --- ADD 2013/06/19 Y.Wakita ---------->>>>>
                    if (salesDetail == null)
                        continue;
                    // --- ADD 2013/06/19 Y.Wakita ----------<<<<<

                    ScmDataSet.SCMAcOdrDtlAsRow row = detailRow;
                    int inqRowNumber = row.InqRowNumber;
                    this.SetRowFromUIData(ref row, salesSlip, salesDetail, salesDetailList, this._scmAcOdrDataDataTable[0]);
                    row.GoodsDivCd = (row.RecyclePrtKindCode != 0) ? 2 : salesDetail.GoodsKindCode;
                    //>>>2011/02/01 値引き回答対応
                    if (salesDetail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Discount)
                    {
                        row.GoodsDivCd = 99; // 値引き
                    }
                    //<<<2011/02/01 値引き回答対応
                    row.InqRowNumber = inqRowNumber;
                }
                // 2010/05/27 Add <<<
                //SCMAcOdrDtlAsWork work = this.GetParamDataFromSCMAcOdrDtlAsRow(detailRow);// DEL 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット
                SCMAcOdrDtlAsWork work = this.GetParamDataFromSCMAcOdrDtlAsRow(detailRow, salesSlip);// ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット
                work.UpdateDateTime = DateTime.MinValue;
                //>>>2011/02/01
                //work.UpdateDate = today;
                //work.UpdateTime = now;
                work.UpdateDate = DateTime.MinValue;
                work.UpdateTime = 0;
                //<<<2011/02/01
                work.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales;
                // 2010/05/27 Add >>>
                work.InqOrdDivCd = 2;
                // 2010/05/27 Add <<<
                scmAcOdrDtlAsWorkList.Add(work);
            }

            // ADD 2013/11/22 商品保証課Redmine#679対応 ------------------------------------------------------>>>>>
            // SCM受注明細データ（回答）、SCM受注明細データ（問合せ・発注）のPM現在庫数設定
            // PM現在庫数→対象となる在庫マスタの出荷可能数
            // SCM受注明細データ（回答）
            foreach (SCMAcOdrDtlAsWork sCMAcOdrDtlAsWork in scmAcOdrDtlAsWorkList)
            {
                Stock stock = GetGoodsUnitDataDicStock(sCMAcOdrDtlAsWork.GoodsMakerCd, sCMAcOdrDtlAsWork.GoodsNo.Trim(), sCMAcOdrDtlAsWork.WarehouseCode.Trim());
                if (stock != null)
                {
                    sCMAcOdrDtlAsWork.PmPrsntCount = stock.ShipmentPosCnt;
                }
            }
            // ADD 2013/11/22 商品保証課Redmine#679対応 ------------------------------------------------------<<<<<

            // SCM受注明細データ(回答)
            this.AdjustScmAcOdrDtlAsWork(scmAcOdrDtlAsWorkList);

            // SCM受注データ補正処理
            // UPD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
            //this.AdjustScmAcOdrDataWork(ref scmAcOdrDataWork, today, now, salesSlip, salesDetailList, scmAcOdrDtlAsWorkList);
            this.AdjustScmAcOdrDataWork(ref scmAcOdrDataWork, today, now, salesSlip, salesDetailList, scmAcOdrDtlAsWorkList, scmAcOdrDtCarWork);
            // UPD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
            scmAcOdrDataWork.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales;
            scmAcOdrDataWork.UpdateDateTime = DateTime.MinValue;
            //>>>2011/02/01
            //scmAcOdrDataWork.UpdateDate = today;
            //scmAcOdrDataWork.UpdateTime = now;
            scmAcOdrDataWork.UpdateDate = DateTime.MinValue;
            scmAcOdrDataWork.UpdateTime = 0;
            //<<<2011/02/01
        }
        //<<<2010/03/30

        /// <summary>
        /// SCM受注明細データ(回答)比較クラス(問合せ番号(昇順)、問合せ行番号(昇順))
        /// </summary>
        public class ScmAcOdrDtlAsComparer : Comparer<SCMAcOdrDtlAsWork>
        {
            /// <summary>
            /// 比較処理
            /// </summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <returns></returns>
            public override int Compare(SCMAcOdrDtlAsWork x, SCMAcOdrDtlAsWork y)
            {
                int result = x.InqRowNumber.CompareTo(y.InqRowNumber);
                if (result != 0) return result;

                result = x.InqRowNumDerivedNo.CompareTo(y.InqRowNumDerivedNo);
                return result;
            }
        }

        /// <summary>
        /// SCM受注データ(車両情報)補正処理
        /// </summary>
        /// <param name="scmAcOdrDtCarWork"></param>
        /// <param name="today"></param>
        /// <param name="now"></param>
        private void AdjustScmAcOdrDtCarWork(ref SCMAcOdrDtCarWork scmAcOdrDtCarWork, DateTime today, int now)
        {
            if (scmAcOdrDtCarWork.SalesSlipNum == ctDefaultSalesSlipNum)
            {
                scmAcOdrDtCarWork.UpdateDateTime = DateTime.MinValue;
            }
        }

        /// <summary>
        /// SCM受注データ補正処理
        /// </summary>
        /// <param name="scmAcOdrDataWork"></param>
        /// <param name="today"></param>
        /// <param name="now"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="scmAcOdrDtlAsWorkList"></param>
        // UPD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
        //private void AdjustScmAcOdrDataWork(ref SCMAcOdrDataWork scmAcOdrDataWork, DateTime today, int now, SalesSlip salesSlip, List<SalesDetail> salesDetailList, ArrayList scmAcOdrDtlAsWorkList)
        private void AdjustScmAcOdrDataWork(ref SCMAcOdrDataWork scmAcOdrDataWork, DateTime today, int now, SalesSlip salesSlip, List<SalesDetail> salesDetailList, ArrayList scmAcOdrDtlAsWorkList, SCMAcOdrDtCarWork scmAcOdrDtCarWork)
        // UPD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<
        {
            //// 送信対象となっていないデータのみ対象
            //// 送信対象となっているデータは変更なし(UPDATE)
            //if (scmAcOdrDataWork.UpdateDate != DateTime.MinValue)
            //{
            if (scmAcOdrDataWork.SalesSlipNum == ctDefaultSalesSlipNum)
            {
                // 新規登録
                if ((scmAcOdrDataWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                    (scmAcOdrDataWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                    (scmAcOdrDataWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate))
                {
                    // 売上
                    scmAcOdrDataWork.UpdateDate = DateTime.MinValue;
                    scmAcOdrDataWork.UpdateTime = 0;
                }
                else
                {
                    // その他
                    scmAcOdrDataWork.UpdateDateTime = DateTime.MinValue;
                    scmAcOdrDataWork.UpdateDate = today;
                    scmAcOdrDataWork.UpdateTime = now;
                }
            }
            else
            {
                // 既存更新
                if ((scmAcOdrDataWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                    (scmAcOdrDataWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                    (scmAcOdrDataWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate))
                {
                    // 売上
                    scmAcOdrDataWork.UpdateDateTime = DateTime.MinValue;
                    scmAcOdrDataWork.UpdateDate = DateTime.MinValue;
                    scmAcOdrDataWork.UpdateTime = 0;
                }
                else
                {
                    // その他
                    scmAcOdrDataWork.UpdateDateTime = DateTime.MinValue;
                    scmAcOdrDataWork.UpdateDate = today;
                    scmAcOdrDataWork.UpdateTime = now;
                }
            }
            //}

            //scmAcOdrDataWork.InqOtherEpCd = this._enterpriseCode;
            //scmAcOdrDataWork.InqOtherSecCd = this._salesSlip.ResultsAddUpSecCd;
            int inqOrdDivCd = 2;
            if ((this._salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                (this._salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate)) inqOrdDivCd = 1;
            scmAcOdrDataWork.InqOrdDivCd = inqOrdDivCd;
            scmAcOdrDataWork.InqOrdAnsDivCd = 2; // 問発・回答種別(1:問合せ・発注,2:回答)
            int answerDivCd = 10; // 回答区分 10:一部回答 20:回答完了
            //>>>2011/02/01 一部回答判定対応
            //if (salesSlip.AnswerDiv != 1) answerDivCd = 20;
            //if (((this.CompareSCMAcOdrDtlAsDataTable(scmAcOdrDtlAsWorkList) == 0) &&
            //     (this.CompareSCMDetailList(scmAcOdrDtlAsWorkList) == 0)) ||
            //    (this._salesSlip.InquiryNumber == 0))
            if ((this.CompareSCMAcOdrDtlAsDataTable(scmAcOdrDtlAsWorkList) == 0) ||
                (this._salesSlip.InquiryNumber == 0))
            {
                answerDivCd = 20;
            }
            //<<<2011/02/01 一部回答判定対応
            // 2011/02/18 Del >>>
            //if ((salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) && (scmAcOdrDataWork.AnswerDivCd == 99)) answerDivCd = 99; // 2010/03/30 // キャンセルデータを返品として登録する場合、キャンセルのままとする
            // 2011/02/18 Del <<<
            scmAcOdrDataWork.AnswerDivCd = answerDivCd;
            scmAcOdrDataWork.AnswerCreateDiv = 2; // 回答作成区分(0:自動, 1:手動(Web), 2:手動(その他))
            //>>>2011/02/01
            scmAcOdrDataWork.CMTCooprtDiv = 0; // CMT連携区分 0:連携なし
            if (this._cmtFlg) scmAcOdrDataWork.CMTCooprtDiv = 1; // CMT連携区分 1:連携あり
            //<<<2011/02/01

            //>>>2011/03/14
            // 返品回答時、キャンセル区分セット
            if (salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) scmAcOdrDataWork.CancelDiv = 1;
            //<<<2011/03/14

            // ADD 2013/05/24 SCM障害№10537対応 ---------------------------------->>>>>
            // SCM受注データに車両管理コードが設定されていない時、SCM受注データ（車両情報）の車両管理コードを設定する
            if (scmAcOdrDataWork.CarMngCode.Length == 0)
            {
                if (scmAcOdrDtCarWork != null)
                {
                    scmAcOdrDataWork.CarMngCode = scmAcOdrDtCarWork.CarMngCode; // 車両管理コード
                }
            }
            // ADD 2013/05/24 SCM障害№10537対応 ----------------------------------<<<<<

        }

        /// <summary>
        /// SCM受注明細データ(回答)補正処理
        /// </summary>
        /// <param name="scmAcOdrDtlAsWork"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="today"></param>
        /// <param name="now"></param>
        /// <param name="salesDetail"></param>
        private void AdjustScmAcOdrDtlAsWork(ref SCMAcOdrDtlAsWork scmAcOdrDtlAsWork, List<SalesDetail> salesDetailList, DateTime today, int now, SalesDetail salesDetail)
        {
            string salesSlipNum = scmAcOdrDtlAsWork.SalesSlipNum;
            int salesRowNo = scmAcOdrDtlAsWork.SalesRowNo;

            SalesDetail detail = salesDetailList.Find(
                delegate(SalesDetail sd)
                {
                    if ((sd.SalesSlipNum == salesSlipNum) &&
                        (sd.SalesRowNo == salesDetail.SalesRowNo))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );

            if (detail == null)
            {
                // 売上データが存在しない場合、送信対象としない
            }
            else
            {
                // 送信対象となっていないデータのみ対象
                // 送信対象となっているデータは変更なし(UPDATE)
                if (scmAcOdrDtlAsWork.UpdateDate != DateTime.MinValue)
                {
                    if (scmAcOdrDtlAsWork.SalesSlipNum == ctDefaultSalesSlipNum)
                    {
                        // 新規登録
                        if ((scmAcOdrDtlAsWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                            (scmAcOdrDtlAsWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                            (scmAcOdrDtlAsWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate))
                        {
                            // 売上、見積、単価見積
                            scmAcOdrDtlAsWork.UpdateDate = DateTime.MinValue;
                            scmAcOdrDtlAsWork.UpdateTime = 0;
                        }
                        else
                        {
                            // その他
                            scmAcOdrDtlAsWork.UpdateDateTime = DateTime.MinValue;
                            scmAcOdrDtlAsWork.UpdateDate = today;
                            scmAcOdrDtlAsWork.UpdateTime = now;
                        }
                    }
                    else
                    {
                        // 既存更新
                        if ((scmAcOdrDtlAsWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                            (scmAcOdrDtlAsWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                            (scmAcOdrDtlAsWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate))
                        {
                            // 売上、見積、単価見積
                            scmAcOdrDtlAsWork.UpdateDateTime = DateTime.MinValue;
                            scmAcOdrDtlAsWork.UpdateDate = DateTime.MinValue;
                            scmAcOdrDtlAsWork.UpdateTime = 0;
                        }
                        else
                        {
                            // その他
                            scmAcOdrDtlAsWork.UpdateDateTime = DateTime.MinValue;
                            scmAcOdrDtlAsWork.UpdateDate = today;
                            scmAcOdrDtlAsWork.UpdateTime = now;
                        }
                    }
                }
                else
                {
                    // 受注データは送信対象としない
                    if (scmAcOdrDtlAsWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
                    {
                        scmAcOdrDtlAsWork.UpdateDate = today;
                        scmAcOdrDtlAsWork.UpdateTime = now;
                    }
                }
            }

            int inqOrdDivCd = 2;
            if ((this._salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                (this._salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate)) inqOrdDivCd = 1;
            scmAcOdrDtlAsWork.InqOrdDivCd = inqOrdDivCd;
            scmAcOdrDtlAsWork.SalesRowNo = salesDetail.SalesRowNo;
            //>>>2010/4/20
            //scmAcOdrDtlAsWork.GoodsDivCd = (scmAcOdrDtlAsWork.RecyclePrtKindCode != 0) ? 2 : 0;
            scmAcOdrDtlAsWork.GoodsDivCd = (scmAcOdrDtlAsWork.RecyclePrtKindCode != 0) ? 2 : salesDetail.GoodsKindCode;
            //<<<2010/04/20
            //>>>2011/02/01 値引き回答対応
            if (salesDetail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Discount)
            {
                scmAcOdrDtlAsWork.GoodsDivCd = 99; // 値引き
            }
            //<<<2011/02/01 値引き回答対応
            //scmAcOdrDtlAsWork.InqOtherEpCd = this._enterpriseCode;
            //scmAcOdrDtlAsWork.InqOtherSecCd = this._salesSlip.ResultsAddUpSecCd;
            //>>>2011/02/01
            if (salesDetail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.RetGoods)
            {
                scmAcOdrDtlAsWork.CancelCndtinDiv = 30;
            }
            //<<<2011/02/01
            //>>>2011/03/22
            // 問合せ元明細識別GUID(セットされていない場合のみ)
            if ((scmAcOdrDtlAsWork.InqOrgDtlDiscGuid == null) ||
                (scmAcOdrDtlAsWork.InqOrgDtlDiscGuid == Guid.Empty) ||
                (scmAcOdrDtlAsWork.InqOrgDtlDiscGuid.ToString() == string.Empty))
            {
                scmAcOdrDtlAsWork.InqOrgDtlDiscGuid = Guid.NewGuid();
            }
            //<<<2011/03/22
            // ADD 2015/02/09 SCM連携マルチキャスト対応 ------------------------------------>>>>>
            // ダイレクト発注時
            if (detail.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales && detail.SalesSlipDtlNumSrc == 0)
            {
                if (scmAcOdrDtlAsWork.InqRowNumDerivedNo < 0)
                {
                    scmAcOdrDtlAsWork.InqRowNumber = this._lastRowNumber--;
                    scmAcOdrDtlAsWork.InqRowNumDerivedNo = -1;
                }
            }
            // ADD 2015/02/09 SCM連携マルチキャスト対応 ------------------------------------<<<<<
        }

        /// <summary>
        /// SCM受注明細データ(回答)補正処理
        /// </summary>
        /// <param name="scmAcOdrDtlAsWorkList"></param>
        /// <returns></returns>
        private ArrayList AdjustScmAcOdrDtlAsWork(ArrayList scmAcOdrDtlAsWorkList)
        {
            // DEL 2015/02/09 SCM連携マルチキャスト対応 ------------------------------------>>>>>
            #region 削除
            //// ADD 2014/11/10 k.toyosawa 20141126全体配信 障害対応 --->>>>>>
            //foreach (SCMAcOdrDtlAsWork work in scmAcOdrDtlAsWorkList)
            //{
            //    if (work.InqRowNumDerivedNo < 0)
            //    {
            //        work.InqRowNumber = this._lastRowNumber--;
            //        work.InqRowNumDerivedNo = 1;
            //    }
            //}
            //// ADD 2014/11/10 k.toyosawa 20141126全体配信 障害対応 ---<<<<<<
            #endregion
            // DEL 2015/02/09 SCM連携マルチキャスト対応 ------------------------------------<<<<<

            ArrayList retList = new ArrayList();
            SCMAcOdrDtlAsWork retWork = new SCMAcOdrDtlAsWork();
            scmAcOdrDtlAsWorkList.Sort(new ScmAcOdrDtlAsComparer());
            int svInqRowNumber = 0;
            int inqRowNumDerivedNo = 0;

            foreach (SCMAcOdrDtlAsWork work in scmAcOdrDtlAsWorkList)
            {
                if (work.InqRowNumber >= 0) continue;
                if (svInqRowNumber == 0) svInqRowNumber = work.InqRowNumber;

                if (work.InqRowNumber != svInqRowNumber)
                {
                    inqRowNumDerivedNo = 1;
                }
                else
                {
                    inqRowNumDerivedNo++;
                }

                retWork = work;
                // UPD 2015/02/09 SCM連携 マルチキャスト対応 --------------------------->>>>>
                //retWork.InqRowNumDerivedNo = inqRowNumDerivedNo;
                // 行番号設定のない問合せ行番号枝番はマイナス値で設定する
                retWork.InqRowNumDerivedNo = inqRowNumDerivedNo * (-1);
                // UPD 2015/02/09 SCM連携 マルチキャスト対応 ---------------------------<<<<<
                retList.Add(retWork);
                svInqRowNumber = work.InqRowNumber;
            }

            return retList;
        }

        /// <summary>
        /// SCM情報受注計上時補正処理
        /// </summary>
        public void AdjustScmInfoForAcceptAnOrderAddup()
        {
            if ((this._scmAcOdrDataDataTable != null) && (this._scmAcOdrDataDataTable.Count != 0))
            {
                ScmDataSet.SCMAcOdrDataRow scmHeader = this._scmAcOdrDataDataTable[0];
                scmHeader.CreateDateTime = DateTime.MinValue;
                scmHeader.UpdateDateTime = DateTime.MinValue;

                scmHeader.AcptAnOdrStatus = (int)AcptAnOdrStatusState.Sales;
                scmHeader.SalesSlipNum = ctDefaultSalesSlipNum;

                scmHeader.UpdateDate = DateTime.MinValue;
                scmHeader.UpdateTime = 0;
            }

            if ((this._scmAcOdrDtCarDataTable != null) && (this._scmAcOdrDtCarDataTable.Count != 0))
            {
                ScmDataSet.SCMAcOdrDtCarRow scmCar = this._scmAcOdrDtCarDataTable[0];
                scmCar.CreateDateTime = DateTime.MinValue;
                scmCar.UpdateDateTime = DateTime.MinValue;
                scmCar.AcptAnOdrStatus = (int)AcptAnOdrStatusState.Sales;
                scmCar.SalesSlipNum = ctDefaultSalesSlipNum;
            }

            if ((this._scmAcOdrDtlAsDataTable != null) && (this._scmAcOdrDtlAsDataTable.Count != 0))
            {
                foreach (ScmDataSet.SCMAcOdrDtlAsRow scmAs in this._scmAcOdrDtlAsDataTable)
                {
                    scmAs.CreateDateTime = DateTime.MinValue;
                    scmAs.UpdateDateTime = DateTime.MinValue;
                    scmAs.AcptAnOdrStatus = (int)AcptAnOdrStatusState.Sales;
                    scmAs.SalesSlipNum = ctDefaultSalesSlipNum;
                    scmAs.UpdateDate = DateTime.MinValue;
                    scmAs.UpdateTime = 0;
                }
            }
        }

        /// <summary>
        /// SCM情報見積計上時補正処理
        /// </summary>
        public void AdjustScmInfoForEstimateAddup()
        {
            if ((this._scmAcOdrDataDataTable == null) || (this._scmAcOdrDataDataTable.Count == 0)) return;

            ScmDataSet.SCMAcOdrDataRow scmHeader = this._scmAcOdrDataDataTable[0];
            scmHeader.CreateDateTime = DateTime.MinValue;
            scmHeader.UpdateDateTime = DateTime.MinValue;
            scmHeader.AcptAnOdrStatus = (int)AcptAnOdrStatusState.Sales;
            scmHeader.SalesSlipNum = ctDefaultSalesSlipNum;
            scmHeader.UpdateDate = DateTime.MinValue;
            scmHeader.UpdateTime = 0;

            ScmDataSet.SCMAcOdrDtCarRow scmCar = this._scmAcOdrDtCarDataTable[0];
            scmCar.CreateDateTime = DateTime.MinValue;
            scmCar.UpdateDateTime = DateTime.MinValue;
            scmCar.AcptAnOdrStatus = (int)AcptAnOdrStatusState.Sales;
            scmCar.SalesSlipNum = ctDefaultSalesSlipNum;

            foreach (ScmDataSet.SCMAcOdrDtlAsRow scmAs in this._scmAcOdrDtlAsDataTable)
            {
                scmAs.CreateDateTime = DateTime.MinValue;
                scmAs.UpdateDateTime = DateTime.MinValue;
                scmAs.AcptAnOdrStatus = (int)AcptAnOdrStatusState.Sales;
                scmAs.SalesSlipNum = ctDefaultSalesSlipNum;
                scmAs.UpdateDate = DateTime.MinValue;
                scmAs.UpdateTime = 0;
            }
        }
        #endregion

        #region SCM初期登録情報生成
        /// <summary>
        /// 各種SCMデータテーブル作成処理
        /// </summary>
        /// <param name="iMode"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        private void MakeSCMDataTable(int iMode, SalesSlip salesSlip, List<SalesDetail> salesDetailList)
        {
            if ((salesSlip == null) || (salesDetailList == null) || (salesDetailList.Count == 0)) return;

            //-----------------------------------------------------------------------------
            // SCM受注データキャッシュ
            //-----------------------------------------------------------------------------
            this.CacheSCMHeader(salesSlip);

            //-----------------------------------------------------------------------------
            // SCM受注データ(車両情報)キャッシュ
            //-----------------------------------------------------------------------------
            this.CacheSCMCar(salesSlip, salesDetailList);

            //-----------------------------------------------------------------------------
            // SCM受注明細データ(問合せ・発注)キャッシュ
            //-----------------------------------------------------------------------------
            this.CacheSCMDetail(salesSlip, salesDetailList);

            //-----------------------------------------------------------------------------
            // SCM受注明細データ(回答)キャッシュ
            //-----------------------------------------------------------------------------
            this.CacheSCMAnswer(iMode, salesSlip, salesDetailList);

            //-----------------------------------------------------------------------------
            // 問合せ行番号補正処理
            //-----------------------------------------------------------------------------
            // 　新規追加行のBLコードが既存行のBLコードと一致する１行が存在する場合、
            // 　新規追加行の問合せ行番号は既存行と同様とする。
            // 　複数存在する場合、通常処理同様新規追加行として処理する。
            //-----------------------------------------------------------------------------
            // 新規追加行存在チェック
            ScmDataSet.SCMAcOdrDtlAsRow[] scmAcOdrDtlAsNewRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}<{1}", this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, 0));
            if (scmAcOdrDtlAsNewRows.Length == 0) return;

            int inqRowNumDerivedNo = 1;
            ScmDataSet.SCMAcOdrDtlAsDataTable loopTable = (ScmDataSet.SCMAcOdrDtlAsDataTable)_scmAcOdrDtlAsDataTable.Copy();

            foreach (ScmDataSet.SCMAcOdrDtlAsRow newRow in scmAcOdrDtlAsNewRows)
            {
                //>>>2011/02/01
                SalesInputDataSet.SalesDetailRow[] rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}={1}", this._salesDetailDataTable.SalesRowNoColumn.ColumnName, newRow.SalesRowNo));

                if ((rows != null) && (rows.Length != 0) && (rows[0].SalesSlipCdDtl == 2)) continue;
                //<<<2011/02/01

                // 同BLコード全行取得
                ScmDataSet.SCMAcOdrDtlAsRow[] sameBLAllRows = (ScmDataSet.SCMAcOdrDtlAsRow[])loopTable.Select(string.Format("{0}={1}", this._scmAcOdrDtlAsDataTable.BLGoodsCodeColumn.ColumnName, newRow.BLGoodsCode));
                // 同BLコード既存行取得
                ScmDataSet.SCMAcOdrDtlAsRow[] sameBLExistRows = (ScmDataSet.SCMAcOdrDtlAsRow[])loopTable.Select(string.Format("{0}={1} AND {2}>{3}", this._scmAcOdrDtlAsDataTable.BLGoodsCodeColumn.ColumnName, newRow.BLGoodsCode,
                
                                                                                                                                                      this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, 0));

                // ---DEL 2011/07/15------------>>>>>
                //// 既存行が１行のみの場合、問合せ番号補正
                //if (sameBLExistRows.Length == 1)
                //{
                //    // 既存行の問合せ行番号とする
                //    newRow.InqRowNumber = sameBLExistRows[0].InqRowNumber;
                //}
                // ---DEL 2011/07/15------------<<<<<

                newRow.InqRowNumDerivedNo = inqRowNumDerivedNo * -1;
                inqRowNumDerivedNo++;
            }
        }
        #endregion

        #region SCM情報設定
        /// <summary>
        /// 売上明細データ行オブジェクトRC区分設定
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="code"></param>
        /// <param name="name"></param>
        public void SettingSalesDetailRowRecycleDiv(int salesRowNo, int code, string name)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            this.SettingSalesDetailRowRecycleDiv(ref row, code, name);
        }

        /// <summary>
        /// 売上明細データ行オブジェクトRC区分設定
        /// </summary>
        /// <param name="row"></param>
        /// <param name="code"></param>
        /// <param name="name"></param>
        public void SettingSalesDetailRowRecycleDiv(ref SalesInputDataSet.SalesDetailRow row, int code, string name)
        {
            row.RecycleDiv = code;
            row.RecycleDivNm = name;
            row.RecycleDivNmSave = name;
        }

        //>>>2010/05/30
        /// <summary>
        /// 売上明細データ行オブジェクトPS管理番号設定
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="code"></param>
        public void SettingSalesDetailRowGoodsMngNo(int salesRowNo, int code)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            this.SettingSalesDetailRowGoodsMngNo(ref row, code);
        }

        /// <summary>
        /// 売上明細データ行オブジェクトPS管理番号設定
        /// </summary>
        /// <param name="row"></param>
        /// <param name="code"></param>
        public void SettingSalesDetailRowGoodsMngNo(ref SalesInputDataSet.SalesDetailRow row, int code)
        {
            row.GoodsMngNo = code;
        }
        //<<<2010/05/30
        #endregion

        #region SCM情報操作
        //>>>2011/02/01
        /// <summary>
        /// 再問合せチェック処理
        /// </summary>
        /// <param name="scmDetailIList">問合せ明細リスト</param>
        /// <param name="scmAnswerIList">回答明細リスト</param>
        /// <returns>回答済み売上伝票番号リスト</returns>
        public ArrayList GetSalesSlipNumList(IList<ISCMOrderDetailRecord> scmDetailIList, IList<ISCMOrderAnswerRecord> scmAnswerIList)
        {
            ArrayList retList = new ArrayList();
            // DEL 2013/11/29 商品保証部Redmine#723対応 --------------------------------->>>>>
            //bool bset = false;
            // DEL 2013/11/29 商品保証部Redmine#723対応 ---------------------------------<<<<<
            foreach (ISCMOrderDetailRecord detailRec in scmDetailIList)
            {
                // DEL 2013/11/29 商品保証部Redmine#723対応 --------------------------------->>>>>
                //bset = false;
                // DEL 2013/11/29 商品保証部Redmine#723対応 ---------------------------------<<<<<
                if (detailRec.InqOrdDivCd == 2) continue; // 問合せのみ対象

                if (detailRec.GoodsDivCd != 3)
                {
                    foreach (ISCMOrderAnswerRecord ansRec in scmAnswerIList)
                    {
                        if ((ansRec.SalesSlipNum == string.Empty) || (ansRec.SalesSlipNum == ctDefaultSalesSlipNum)) continue;

                        if ((detailRec.InqOrdDivCd == ansRec.InqOrdDivCd) &&
                            (detailRec.InqRowNumber == ansRec.InqRowNumber) &&
                            (detailRec.InqRowNumDerivedNo == ansRec.InqRowNumDerivedNo))
                        {
                            if ((detailRec.UpdateDate.Ticks >= ansRec.UpdateDate.Ticks) &&
                                (detailRec.UpdateTime >= ansRec.UpdateTime))
                            {
                                // DEL 2013/11/29 商品保証部Redmine#723対応 --------------------------------->>>>>
                                //bset = true;
                                // DEL 2013/11/29 商品保証部Redmine#723対応 ---------------------------------<<<<<
                                if (!retList.Contains(ansRec.SalesSlipNum))
                                {
                                    retList.Add(ansRec.SalesSlipNum);
                                }
                                // DEL 2013/11/29 商品保証部Redmine#723対応 --------------------------------->>>>>
                                //break;
                                // DEL 2013/11/29 商品保証部Redmine#723対応 ---------------------------------<<<<<
                            }
                        }
                    }
                }

                // DEL 2013/11/29 商品保証部Redmine#723対応 --------------------------------->>>>>
                //if (!bset)
                //{
                //    if (!retList.Contains(SalesSlipInputAcs.ctDefaultSalesSlipNum))
                //    {
                //        retList.Add(SalesSlipInputAcs.ctDefaultSalesSlipNum);
                //        break;
                //    }
                //}
                // DEL 2013/11/29 商品保証部Redmine#723対応 ---------------------------------<<<<<

            }

            // ADD 2013/11/29 商品保証部Redmine#723対応 --------------------------------->>>>>
            if (!retList.Contains(SalesSlipInputAcs.ctDefaultSalesSlipNum))
            {
                retList.Add(SalesSlipInputAcs.ctDefaultSalesSlipNum);
            }
            // ADD 2013/11/29 商品保証部Redmine#723対応 ---------------------------------<<<<<

            return retList;
        }

        /// <summary>
        /// SCM受注明細データ(回答)テーブル比較処理
        /// </summary>
        /// <param name="scmAcOdrDtlAsWorkList"></param>
        /// <returns>0:同一 1:異なる</returns>
        private int CompareSCMDetailList(ArrayList scmAcOdrDtlAsWorkList)
        {
            //------------------------------------------------------------------------------------------
            // 比較方法
            //  存在レコードの比較を行い判定する(問合せ番号、問合せ行番号、問合せ行番号枝番)
            //  レコードの内の各項目内容の比較は行わない
            //------------------------------------------------------------------------------------------

            #region 初期処理
            int ret = 0;
            List<SCMAcOdrDtlAsWork> workList = new List<SCMAcOdrDtlAsWork>();
            #endregion

            #region 比較処理
            // リスト変換
            if (scmAcOdrDtlAsWorkList != null) workList = new List<SCMAcOdrDtlAsWork>((SCMAcOdrDtlAsWork[])scmAcOdrDtlAsWorkList.ToArray(typeof(SCMAcOdrDtlAsWork)));

            if ((workList == null) || (workList.Count == 0))
            {
                return ret;
            }

            foreach (ISCMOrderDetailRecord detailRec in this._scmDetailIListSvBefore)
            {
                // 比較処理
                List<SCMAcOdrDtlAsWork> scmAcOdrDtlAsWorkGetList = workList.FindAll(
                    delegate(SCMAcOdrDtlAsWork work)
                    {
                        if ((work.InquiryNumber == detailRec.InquiryNumber) &&
                            (work.InqRowNumber == detailRec.InqRowNumber) &&
                            (work.InqRowNumDerivedNo == detailRec.InqRowNumDerivedNo))
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                );

                if (scmAcOdrDtlAsWorkGetList.Count == 0)
                {
                    ret = 1;
                    break;
                }
                
            }
            #endregion

            return ret;
        }

        /// <summary>
        /// SCM受注データおよびSCM受注明細データ(回答)リスト退避処理
        /// </summary>
        /// <param name="scmHeaderIList"></param>
        /// <param name="tempScmDetailIList"></param>
        private void CacheHeaderAndDetailList(IList<ISCMOrderHeaderRecord> scmHeaderIList, IList<ISCMOrderDetailRecord> tempScmDetailIList)
        {
            this._scmHeaderIListSvForWebCheck.Clear();
            this._scmDetailIListSvForWebCheck.Clear();
            this._scmHeaderIListSvForWebCheck = scmHeaderIList;
            this._scmDetailIListSvForWebCheck = tempScmDetailIList;
        }

        //>>>2011/03/06
        ///// <summary>
        ///// SCM受注明細データ(回答)リスト退避処理
        ///// </summary>
        ///// <param name="scmAnswerIList"></param>
        //private void CacheDetailListForBeforeSave(IList<ISCMOrderAnswerRecord> scmAnswerIList, IList<ISCMOrderDetailRecord> scmDetailIAllList)
        //{
        //    this._scmAnswerIListSv.Clear();
        //    this._scmDetailIAllListSv.Clear();
        //    this._scmAnswerIListSv = new List<ISCMOrderAnswerRecord>(scmAnswerIList);
        //    this._scmDetailIAllListSv = new List<ISCMOrderDetailRecord>(scmDetailIAllList);
        //}

        /// <summary>
        /// SCM受注明細データ(回答)リスト退避処理
        /// </summary>
        /// <param name="scmAnswerIList"></param>
        private void CacheDetailListForBeforeSave(IList<ISCMOrderAnswerRecord> scmAnswerIList, IList<ISCMOrderDetailRecord> scmDetailIAllList, IList<ISCMOrderAnswerRecord> scmAnswerIListForCancelCheck)
        {
            this._scmAnswerIListSv.Clear();
            this._scmDetailIAllListSv.Clear();
            this._scmAnswerIListSvForCancelCheck.Clear();
            if (scmAnswerIList != null) this._scmAnswerIListSv = new List<ISCMOrderAnswerRecord>(scmAnswerIList);
            if (scmDetailIAllList != null) this._scmDetailIAllListSv = new List<ISCMOrderDetailRecord>(scmDetailIAllList);
            if (scmAnswerIListForCancelCheck != null) this._scmAnswerIListSvForCancelCheck = new List<ISCMOrderAnswerRecord>(scmAnswerIListForCancelCheck);
        }
        //<<<2011/03/06

        /// <summary>
        /// SCM関連リストクリア
        /// </summary>
        public void ClearDetailListForBeforeSave()
        {
            this._scmAnswerIListSv.Clear();
            this._scmAnswerIListSvForCancelCheck.Clear(); // 2011/03/06
            this._scmDetailIAllListSv.Clear();
        }

        //>>>2011/03/04
        /// <summary>
        /// SCM関連リストクリア
        /// </summary>
        public void ClearSCMInfo()
        {
            this._scmAcOdrDtlAsDataTableSave.Rows.Clear();
            if (this._scmHeaderIListSvForWebCheck != null) this._scmHeaderIListSvForWebCheck.Clear();
            if (this._scmDetailIListSvForWebCheck != null) this._scmDetailIListSvForWebCheck.Clear();
            if (this._scmDetailIAllListSv != null) this._scmDetailIAllListSv.Clear();
            if (this._scmAnswerIListSv != null) this._scmAnswerIListSv.Clear();
            if (this._scmAnswerIListSvForCancelCheck != null) this._scmAnswerIListSvForCancelCheck.Clear(); // 2011/03/06
            if (this._changeRowNoList != null) this._changeRowNoList = new ArrayList();
            if (this._dtlNumDic != null) this._dtlNumDic = new Dictionary<int, string>();
            if (this._scmDetailIAllList != null) this._scmDetailIAllList.Clear();
        }
        //<<<2011/03/04

        /// <summary>
        /// SCM受注明細データ(回答)対象行チェック
        /// </summary>
        /// <param name="scmAcOdrDtlAsDataTable"></param>
        /// <returns>0:SCM送信対象明細なし 1:SCM送信対象明細あり</returns>
        public int CheckAnswerList()
        {
            return this.CheckAnswerList(this._scmAcOdrDtlAsDataTable);
        }

        /// <summary>
        /// SCM受注明細データ(回答)対象行チェック
        /// </summary>
        /// <param name="scmAcOdrDtlAsDataTable"></param>
        /// <returns>0:SCM送信対象明細なし 1:SCM送信対象明細あり</returns>
        public int CheckAnswerList(ScmDataSet.SCMAcOdrDtlAsDataTable scmAcOdrDtlAsDataTable)
        {
            int recInt = 0;

            if ((scmAcOdrDtlAsDataTable == null) || (scmAcOdrDtlAsDataTable.Count == 0)) return 1;

            if (((this._scmDetailIAllListSv == null) || (this._scmDetailIAllListSv.Count == 0)) &&
                ((this._scmDetailIAllList == null) || (this._scmDetailIAllList.Count == 0))) return 1;

            ScmDataSet.SCMAcOdrDtlAsDataTable recTable = (ScmDataSet.SCMAcOdrDtlAsDataTable)scmAcOdrDtlAsDataTable.Clone();

            recTable = this.ReMakeScmAcOdrDtlAsDataTable(scmAcOdrDtlAsDataTable);

            // 送信対象明細がある場合「１」
            if (recTable.Count != 0) recInt = 1;

            return recInt;
        }

        /// <summary>
        /// SCM受注明細データ(回答)再生成処理
        /// </summary>
        /// <param name="scmAcOdrDtlAsDataTable"></param>
        /// <returns></returns>
        private ScmDataSet.SCMAcOdrDtlAsDataTable ReMakeScmAcOdrDtlAsDataTable(ScmDataSet.SCMAcOdrDtlAsDataTable scmAcOdrDtlAsDataTable)
        {
            ScmDataSet.SCMAcOdrDtlAsDataTable recTable = (ScmDataSet.SCMAcOdrDtlAsDataTable)scmAcOdrDtlAsDataTable.Clone();
            recTable.Clear();
            bool setFlg1 = false;
            bool setFlg2 = false;
            bool setFlg3 = false; // 2011/03/04
            bool setFlg4 = false; // 2011/03/06
            bool sameRecFlg = false;

            foreach (ScmDataSet.SCMAcOdrDtlAsRow answerRow in scmAcOdrDtlAsDataTable)
            {
                // 回答明細に発注が存在した場合、送信対象外
                sameRecFlg = false;
                if (this._scmAnswerIListSv != null)
                {
                    setFlg1 = false;
                    foreach (ISCMOrderAnswerRecord ansRec in this._scmAnswerIListSv)
                    {
                        if ((answerRow.InquiryNumber == ansRec.InquiryNumber) &&
                            (answerRow.InqRowNumber == ansRec.InqRowNumber) &&
                            (answerRow.InqRowNumDerivedNo == ansRec.InqRowNumDerivedNo))
                        {
                            sameRecFlg = true;
                            if (ansRec.InqOrdDivCd != 2) setFlg1 = true;
                            break;
                        }
                    }
                }
                if (!sameRecFlg) setFlg1 = true; // 同一レコードが１件もない場合、送信対象

                // 問合せ明細に発注が存在した場合、送信対象外
                sameRecFlg = false;
                if (this._scmDetailIAllListSv != null)
                {
                    setFlg2 = false;
                    foreach (ISCMOrderDetailRecord detailRec in this._scmDetailIAllListSv)
                    {
                        if ((answerRow.InquiryNumber == detailRec.InquiryNumber) &&
                            (answerRow.InqRowNumber == detailRec.InqRowNumber) &&
                            (answerRow.InqRowNumDerivedNo == detailRec.InqRowNumDerivedNo))
                        {
                            sameRecFlg = true;
                            if (detailRec.InqOrdDivCd != 2) setFlg2 = true;
                            break;
                        }
                    }
                }
                if (!sameRecFlg) setFlg2 = true; // 同一レコードが１件もない場合、送信対象

                //>>>2011/03/04
                // 取消明細、キャンセル明細は、送信対象外
                sameRecFlg = false;
                if (this._scmDetailIAllList != null)
                {
                    setFlg3 = false;
                    foreach (ISCMOrderDetailRecord detailRec in this._scmDetailIAllList)
                    {
                        if ((answerRow.InquiryNumber == detailRec.InquiryNumber) &&
                            (answerRow.InqRowNumber == detailRec.InqRowNumber) &&
                            (answerRow.InqRowNumDerivedNo == detailRec.InqRowNumDerivedNo))
                        {
                            sameRecFlg = true;
                            if (detailRec.CancelCndtinDiv != 30) setFlg3 = true;
                            break;
                        }
                    }
                }
                if (!sameRecFlg) setFlg3 = true; // 同一レコードが１件もない場合、送信対象
                //<<<2011/03/04

                //>>>2011/03/06
                // 回答明細に発注が存在した場合、送信対象外
                sameRecFlg = false;
                if (this._scmAnswerIListSvForCancelCheck != null)
                {
                    setFlg4 = true;
                    foreach (ISCMOrderAnswerRecord ansRec in this._scmAnswerIListSvForCancelCheck)
                    {
                        if ((answerRow.InquiryNumber == ansRec.InquiryNumber) &&
                            (answerRow.InqRowNumber == ansRec.InqRowNumber) &&
                            (answerRow.InqRowNumDerivedNo == ansRec.InqRowNumDerivedNo))
                        {
                            sameRecFlg = true;
                            if ((ansRec.CancelCndtinDiv == 30) || (ansRec.CancelCndtinDiv == 20))
                            {
                                setFlg4 = false;
                                break;
                            }
                            //break;
                        }
                    }
                }
                //<<<2011/03/06

                // 回答明細、問合せ明細のどちらにも存在しない場合、送信対象
                //>>>2011/03/06
                ////>>>2011/03/04
                //if ((setFlg1) && (setFlg2) && (setFlg3)) recTable.ImportRow(answerRow);
                ////<<<2011/03/04
                if ((setFlg1) && (setFlg2) && (setFlg3) && (setFlg4)) recTable.ImportRow(answerRow);
                //<<<2011/03/06

            }

            return recTable;
        }

        /// <summary>
        /// SCM受注明細データ(回答)リスト再生成処理
        /// </summary>
        /// <param name="scmAcOdrDtlAsWorkList"></param>
        private ArrayList ReMakeScmAcOdrDtlAsList(ArrayList scmAcOdrDtlAsWorkList)
        {
            ArrayList recList = new ArrayList();
            bool setFlg1 = false;
            bool setFlg2 = false;
            bool setFlg3 = false; // 2011/03/04
            bool setFlg4 = false; // 2011/03/06
            bool sameRecFlg = false;

            foreach (SCMAcOdrDtlAsWork answerRow in scmAcOdrDtlAsWorkList)
            {
                // 回答明細に発注が存在した場合、送信対象外
                sameRecFlg = false;
                if (this._scmAnswerIListSv != null)
                {
                    setFlg1 = false;
                    foreach (ISCMOrderAnswerRecord ansRec in this._scmAnswerIListSv)
                    {
                        if ((answerRow.InquiryNumber == ansRec.InquiryNumber) &&
                            (answerRow.InqRowNumber == ansRec.InqRowNumber) &&
                            (answerRow.InqRowNumDerivedNo == ansRec.InqRowNumDerivedNo))
                        {
                            sameRecFlg = true;
                            if (ansRec.InqOrdDivCd != 2) setFlg1 = true;
                            break;
                        }
                    }
                }
                if (!sameRecFlg) setFlg1 = true; // 同一レコードが１件もない場合、送信対象

                // 問合せ明細に発注が存在した場合、送信対象外
                sameRecFlg = false;
                if (this._scmDetailIAllListSv != null)
                {
                    setFlg2 = false;
                    foreach (ISCMOrderDetailRecord detailRec in this._scmDetailIAllListSv)
                    {
                        if ((answerRow.InquiryNumber == detailRec.InquiryNumber) &&
                            (answerRow.InqRowNumber == detailRec.InqRowNumber) &&
                            (answerRow.InqRowNumDerivedNo == detailRec.InqRowNumDerivedNo))
                        {
                            sameRecFlg = true;
                            if (detailRec.InqOrdDivCd != 2) setFlg2 = true;
                            break;
                        }
                    }
                }
                if (!sameRecFlg) setFlg2 = true; // 同一レコードが１件もない場合、送信対象

                //>>>2011/03/04
                // 取消明細、キャンセル明細は、送信対象外
                sameRecFlg = false;
                if (this._scmDetailIAllList != null)
                {
                    setFlg3 = false;
                    foreach (ISCMOrderDetailRecord detailRec in this._scmDetailIAllList)
                    {
                        if ((answerRow.InquiryNumber == detailRec.InquiryNumber) &&
                            (answerRow.InqRowNumber == detailRec.InqRowNumber) &&
                            (answerRow.InqRowNumDerivedNo == detailRec.InqRowNumDerivedNo))
                        {
                            sameRecFlg = true;
                            if (detailRec.CancelCndtinDiv != 30) setFlg3 = true;
                            break;
                        }
                    }
                }
                if (!sameRecFlg) setFlg3 = true; // 同一レコードが１件もない場合、送信対象
                //<<<2011/03/04

                //>>>2011/03/06
                // 回答明細に発注が存在した場合、送信対象外
                sameRecFlg = false;
                if (this._scmAnswerIListSvForCancelCheck != null)
                {
                    setFlg4 = true;
                    foreach (ISCMOrderAnswerRecord ansRec in this._scmAnswerIListSvForCancelCheck)
                    {
                        if ((answerRow.InquiryNumber == ansRec.InquiryNumber) &&
                            (answerRow.InqRowNumber == ansRec.InqRowNumber) &&
                            (answerRow.InqRowNumDerivedNo == ansRec.InqRowNumDerivedNo))
                        {
                            sameRecFlg = true;
                            if ((ansRec.CancelCndtinDiv == 30) || (ansRec.CancelCndtinDiv == 20))
                            {
                                setFlg4 = false;
                                break;
                            }
                            //break;
                        }
                    }
                }
                //<<<2011/03/06

                // 回答明細、問合せ明細のどちらにも存在しない場合、送信対象
                //>>>2011/03/06
                ////>>>2011/03/04
                ////if ((setFlg1) && (setFlg2)) recList.Add(answerRow);
                //if ((setFlg1) && (setFlg2) && (setFlg3)) recList.Add(answerRow);
                ////<<<2011/03/04
                if ((setFlg1) && (setFlg2) && (setFlg3) && (setFlg4)) recList.Add(answerRow);
                //<<<2011/03/06
            }

            return recList;
        }
        //<<<2011/02/01

        // ADD 2013/06/26 yugami SCM障害対応 ----------------------------------->>>>>
        #region ●PCC接続設定（企業・拠点連結設定）情報の取得
        /// <summary>
        /// PCC接続設定（企業・拠点連結設定）情報の取得
        /// </summary>
        /// <param name="sourceSalesSlip"></param>
        /// <returns>(0:タブレット使用しない, 1:タブレット使用する)</returns>
        private int GetTabUseDiv(SalesSlip sourceSalesSlip)
        {
            ScmEpScCnt scmEpScCnt = null;
            string customerEnterpriseCode;
            string customerSectionCode;
            int result = 0;
            int customerCode = sourceSalesSlip.CustomerCode;
            int status = -1;

            customerEnterpriseCode = sourceSalesSlip.InqOriginalEpCd.Trim();//@@@@20230303
            customerSectionCode = sourceSalesSlip.InqOriginalSecCd;
            // 得意先の企業・拠点コードが未設定ならば0:連結設定なしで返す。
            if (string.IsNullOrEmpty(customerEnterpriseCode) || string.IsNullOrEmpty(customerSectionCode))
            {
                return result;
            }

            bool msgDiv;
            string errMsg;
            ScmEpScCntAcs scmEpScCntAcs = new ScmEpScCntAcs();
            //ＰＣＣ接続情報の取得
            status = scmEpScCntAcs.ReadScmEpScCnt(customerEnterpriseCode, customerSectionCode, this._enterpriseCode, this._loginSectionCode, out scmEpScCnt, out msgDiv, out errMsg);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                result = scmEpScCnt.TabUseDiv;
            }
            else
            {
                //ＰＣＣ接続情報が取得されない場合、0:タブレット使用しない
                result = 0;
            }
            return result;
        }
        #endregion
        // ADD 2013/06/26 yugami SCM障害対応 -----------------------------------<<<<<

        #endregion
        #endregion

        #region ●BLコード枝番
        // ===================================================================================== //
        // プライベート変数
        // ===================================================================================== //
        # region Private Members
        private SalesInputDataSet.BLGoodsDrDataTable _blGoodsDrDataTable;
        # endregion

        // ===================================================================================== //
        // プロパティ
        // ===================================================================================== //
        # region Properties
        /// <summary>
        /// BLコード枝番選択データテーブルオブジェクト
        /// </summary>
        public SalesInputDataSet.BLGoodsDrDataTable BLGoodsDrDataTable
        {
            set { this._blGoodsDrDataTable = value; }
            get { return this._blGoodsDrDataTable; }
        }
        # endregion

        /// <summary>
        /// BLコード枝番データテーブル作成処理
        /// </summary>
        /// <param name="bLGoodsCode"></param>
        public void MakeBLGoodsDrDataTable(int bLGoodsCode)
        {
            // 初期化
            this._blGoodsDrDataTable.Rows.Clear();

            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().BLGoodsCdDerivNoDiv == 0) return;

            // 提供BLコード枝番ゼロレコード取得
            TbsPartsCodeWork tbsZeroWork = this._salesSlipInputInitDataAcs.GetOfrBLGoodsInfo_FromTbsPartsCodeWork(bLGoodsCode, 0);

            // 提供BLコード情報取得
            List<TbsPartsCodeWork> blList = this._salesSlipInputInitDataAcs.GetOfrBLGoodsInfo_FromTbsPartsCodeWork(bLGoodsCode);

            int rowNo = 1;
            foreach (TbsPartsCodeWork work in blList)
            {
                SalesInputDataSet.BLGoodsDrRow row = this._blGoodsDrDataTable.NewBLGoodsDrRow();
                row.RowNo = rowNo;
                row.BLGoodsCode = work.TbsPartsCode;
                row.BLGoodsDrCode = work.TbsPartsCdDerivedNo;
                row.GoodsName = work.TbsPartsFullName;
                if (work.TbsPartsCdDerivedNo != 0) row.GoodsName = tbsZeroWork.TbsPartsFullName + work.TbsPartsFullName;
                row.Checked = false;
                this._blGoodsDrDataTable.AddBLGoodsDrRow(row);
                rowNo++;
            }
        }

        /// <summary>
        /// 選択BLコード枝番情報取得処理
        /// </summary>
        /// <returns></returns>
        public int GetSelectBLGoodsDrCd()
        {
            foreach (SalesInputDataSet.BLGoodsDrRow row in this._blGoodsDrDataTable)
            {
                if (row.Checked == true) return row.BLGoodsDrCode;
            }
            return 0;
        }
        #endregion

        #region ●キャンペーン
        // ---UPD 2011/05/30------------>>>>>
        ///// <summary>
        ///// キャンペーン適用処理
        ///// </summary>
        ///// <param name="taxationCode"></param>
        ///// <param name="customerCode"></param>
        ///// <param name="goodsMGroup"></param>
        ///// <param name="blGoodsCode"></param>
        ///// <param name="goodsMakerCd"></param>
        ///// <param name="goodsNo"></param>
        ///// <param name="applyDate"></param>
        ///// <param name="price"></param>
        //public void ReflectCampaign(int taxationCode, int customerCode, int goodsMGroup, int blGoodsCode, int goodsMakerCd, string goodsNo, DateTime applyDate, ref double price)
        //{
        //    CampaignMngAcs campaignMngAcs = new CampaignMngAcs();
        //    CampaignMng campaignMng;
        //    campaignMngAcs.GetRatePriceOfCampaignMng(out campaignMng, this._enterpriseCode, this._loginSectionCode.Trim(), customerCode, goodsMakerCd, goodsMGroup, blGoodsCode, goodsNo, applyDate);
        //    if (campaignMng == null) return;

        //    // キャンペーン価格適用
        //    if (campaignMng.PriceFl != 0)
        //    {
        //        price = campaignMng.PriceFl;
        //    }

        //    // キャンペーン掛率適用
        //    if (campaignMng.RateVal != 0)
        //    {
        //        this.CalclatePriceByRate(taxationCode, campaignMng.RateVal, ref price);
        //    }
        //}

        /// <summary>
        /// キャンペーン適用処理
        /// </summary>
        /// <param name="taxationCode">課税区分</param>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="blGoodsCode">BLコード</param>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="blGroupCode"> BLグループコード</param>
        /// <param name="salesCode">販売区分</param>
        /// <param name="applyDate">価格適用日</param>
        /// <param name="price">対象金額</param>
        /// <br>UpdateNote :  2011/07/14 譚洪 Redmine#22876 売単価の端数処理に関しての修正</br>
        public void ReflectCampaign(int taxationCode, int customerCode, int blGoodsCode, int goodsMakerCd, string goodsNo, int blGroupCode, int salesCode, DateTime applyDate, ref double price)
        {
            if (this._campaignObjGoodsStAcs == null)
            {
                this._campaignObjGoodsStAcs = new CampaignObjGoodsStAcs();
            }
            CampaignObjGoodsSt campaignObjGoodsSt;
            this._campaignObjGoodsStAcs.GetRatePriceOfCampaignMng(out campaignObjGoodsSt, this._enterpriseCode, this._sectionCode.Trim(), customerCode, goodsMakerCd, blGroupCode, blGoodsCode, salesCode, goodsNo, applyDate);
            this._campaignObjGoodsSt = campaignObjGoodsSt;
            if (campaignObjGoodsSt == null) return;

            // ---DEL 2011/07/14------------>>>>>
            // キャンペーン掛率適用
            //if (campaignObjGoodsSt.RateVal != 0)
            //{
            //    this.CalclatePriceByRate(taxationCode, campaignObjGoodsSt.RateVal, ref price);
            //}

            //// キャンペーン値引率適用
            //if (campaignObjGoodsSt.DiscountRate != 0)
            //{
            //    this.CalclatePriceByRate(taxationCode, 100 - campaignObjGoodsSt.DiscountRate, ref price);
            //}
            // ---DEL 2011/07/14------------<<<<<
        }
        // ---UPD 2011/05/30------------<<<<<
        // ---ADD 2011/09/05------------>>>>>
        /// <summary>
        /// キャンペーン適用処理
        /// </summary>
        /// <param name="salesRowNo">salesRowNo</param>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="blGoodsCode">BLコード</param>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="blGroupCode"> BLグループコード</param>
        /// <param name="salesCode">販売区分</param>
        /// <param name="applyDate">価格適用日</param>
        /// <param name="price">対象金額</param>
        /// <returns>true:キャンペーンの売価率、値引き、売価額変更する</returns>
        public void CheckReflectCampaign(SalesInputDataSet.SalesDetailRow row, int salesCode)
        {
            double price = 0;

            if (row != null)
            {
                this.ReflectCampaign(row.TaxationDivCd, this._salesSlip.CustomerCode, row.BLGoodsCode, row.GoodsMakerCd, row.GoodsNo, row.BLGroupCode, salesCode, this._salesSlip.SalesDate, ref price);
            }
        }

        // ---UPD 2011/09/05------------<<<<<
        /// <summary>
        /// 自動連携値引き適用処理
        /// </summary>
        /// <param name="taxationCode"></param>
        /// <param name="customerCode"></param>
        /// <param name="goodsMGroup"></param>
        /// <param name="blGoodsCode"></param>
        /// <param name="goodsMakerCd"></param>
        /// <param name="goodsNo"></param>
        /// <param name="price"></param>
        public void ReflectAutoDiscount(int taxationCode, int customerCode, int goodsMGroup, int blGoodsCode, int goodsMakerCd, string goodsNo, ref double price)
        {
            SCMTtlSt scmTtlSt = this._salesSlipInputInitDataAcs.GetScmTtlSt();
            if (scmTtlSt == null) return;

            double autoCooperatDis = 100 - scmTtlSt.AutoCooperatDis;
            switch (scmTtlSt.DiscountApplyCd)
            {
                case 0: // しない
                    break;
                case 1: // 全て
                    this.CalclatePriceByRate(taxationCode, autoCooperatDis, ref price);
                    break;
                case 2: // 外装品以外
                    // 外装品チェック
                    if (!this.CheckOutEquipment(blGoodsCode))
                    {
                        this.CalclatePriceByRate(taxationCode, autoCooperatDis, ref price);
                    }
                    break;
                case 3: // 重点品目
                    // 重点品目チェック
                    if (this.GetImportantPrtSt(this._loginSectionCode, customerCode, goodsMakerCd, goodsMGroup, blGoodsCode, goodsNo) != null)
                    {
                        this.CalclatePriceByRate(taxationCode, autoCooperatDis, ref price);
                    }
                    break;
                default:
                    break;
            }
        }

        /// <summary>
        /// 掛率より金額取得
        /// </summary>
        /// <param name="taxationDivCd"></param>
        /// <param name="autoCooperatDis"></param>
        /// <param name="price"></param>
        private void CalclatePriceByRate(int taxationDivCd, double autoCooperatDis, ref double price)
        {
            double unitPriceTaxExc = 0;
            double unitPriceTaxInc = 0;

            // 消費税端数処理
            int salesCnsTaxFrcProcCd = this._customerInfoAcs.GetSalesFractionProcCd(this._enterpriseCode, this._salesSlip.CustomerCode, CustomerInfoAcs.FracProcMoneyDiv.CnsTaxFrcProcCd);
            int taxFracProcCd = 0;
            double taxFracProcUnit = 0;
            this._salesSlipInputInitDataAcs.GetSalesFractionProcInfo(SalesSlipInputInitDataAcs.ctFracProcMoneyDiv_Tax, salesCnsTaxFrcProcCd, 0, out taxFracProcUnit, out taxFracProcCd);

            // 売上単価端数処理
            int frcProcCd = this._customerInfoAcs.GetSalesFractionProcCd(this._enterpriseCode, this._salesSlip.CustomerCode, CustomerInfoAcs.FracProcMoneyDiv.UnPrcFrcProcCd);
            double fracProcUnit = 0;
            int fracProcDiv = 0;
            this._salesSlipInputInitDataAcs.GetSalesFractionProcInfo(SalesSlipInputInitDataAcs.ctFracProcMoneyDiv_SalesUnitPrice, salesCnsTaxFrcProcCd, 0, out fracProcUnit, out fracProcDiv);

            this._unitPriceCalculation.CalculateUnitPriceByRate(UnitPriceCalculation.UnitPriceKind.SalesUnitPrice,
                                            UnitPriceCalculation.UnitPrcCalcDiv.RateVal,
                                            this._salesSlip.TotalAmountDispWayCd,
                                            0,
                                            frcProcCd,
                                            taxationDivCd,
                                            price,
                                            this._salesSlip.ConsTaxRate,
                                            taxFracProcUnit,
                                            taxFracProcCd,
                                            autoCooperatDis,
                                            ref fracProcUnit,
                                            ref fracProcDiv,
                                            out unitPriceTaxExc,
                                            out unitPriceTaxInc);

            if (taxationDivCd == (int)CalculateTax.TaxationCode.TaxInc)
            {
                price = unitPriceTaxInc;
            }
            else
            {
                price = unitPriceTaxExc;
            }
        }
        # endregion

        #region ●重点品目
        /// <summary>
        /// 重点品目情報取得処理
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <param name="customerCode"></param>
        /// <param name="goodsMakerCd"></param>
        /// <param name="goodsMGroup"></param>
        /// <param name="blGoodsCode"></param>
        /// <param name="goodsNo"></param>
        /// <returns></returns>
        private ImportantPrtSt GetImportantPrtSt(string sectionCode, int customerCode, int goodsMakerCd, int goodsMGroup, int blGoodsCode, string goodsNo)
        {
            ImportantPrtSt importantPrtSt;
            ImportantPrtStAcs importantPrtStAcs = new ImportantPrtStAcs();
            int st = importantPrtStAcs.GetImportantPrtSt(out importantPrtSt, this._enterpriseCode, this._loginSectionCode, customerCode, goodsMakerCd, goodsMGroup, blGoodsCode, goodsNo);
            return importantPrtSt;
        }
        #endregion

        #region ●Ｗｅｂ
        /// <summary>
        /// URL取得処理
        /// </summary>
        /// <param name="goodsMngNo"></param>
        /// <param name="url"></param>
        /// <returns></returns>
        private int GetURL(int goodsMngNo, out string url)
        {
            int st = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            url = string.Empty;

            if (goodsMngNo == 0) return (int)ConstantManagement.DB_Status.ctDB_ERROR;
            try
            {
                PartsDetailURLService service = new PartsDetailURLService();
                GetURLResType res = new GetURLResType();
                GetURLReqType req = new GetURLReqType();
                req.UC = this._enterpriseCode;
                ArrayList al = new ArrayList();
                PSNoType ps = new PSNoType();
                ps.PSNo = goodsMngNo;
                al.Add(ps);
                PSNoType[] psNoType = (PSNoType[])al.ToArray(typeof(PSNoType));
                req.PSNoList = psNoType;

                res = service.GetURL(req);
                URLType[] urlList = new URLType[0];
                urlList = res.URLList;
                url = ((URLType)urlList[0]).URL;
            }
            catch (Exception)
            {
                st = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }

            return st;
        }

        /// <summary>
        /// 相場情報取得処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 相場情報の取得を行います。</br>
        /// <br></br>
        /// </remarks>
        //>>>2010/05/30
        //private void GetSobaInfo()
        public void GetSobaInfo()
        //<<<2010/05/30
        {
            // 相場価格種別の情報取得
            KindService kindService = new KindService();
            GetKindListReqType getKindListReqType = new GetKindListReqType();
            GetKindListResType getKindListResType;
            getKindListReqType.UC = this._enterpriseCode;

            getKindListResType = kindService.GetKindList(getKindListReqType);
            if (getKindListResType == null) getKindListResType = new GetKindListResType();

            foreach (KindType kindListType in getKindListResType.KindList)
            {
                this._kindList.Add(kindListType.KindCode, kindListType.KindName);
            }
        }

        /// <summary>
        /// 相場価格種別名称取得処理
        /// </summary>
        /// <param name="kindCode"></param>
        /// <returns></returns>
        public string GetKind_FromSobaInfo(int kindCode)
        {
            string retName = string.Empty;

            if (this._kindList.Contains(kindCode))
            {
                retName = (string)this._kindList[kindCode];
            }

            return retName;
        }
        
        //>>>2011/02/01
        /// <summary>
        /// Webサーバー更新処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <returns></returns>
        public int CheckWebServer(ArrayList salesDataList)
        {
            //return (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            //------------------------------------------------------------------
            // 保存前売上データ分解
            //------------------------------------------------------------------
            SalesSlip sourceSalesSlip = null;
            ArrayList sourceSCMAcOdrDtlAsWorkList = new ArrayList();
            foreach (CustomSerializeArrayList list in salesDataList)
            {
                foreach (object obj in list)
                {
                    if (obj is SalesSlip)
                    {
                        sourceSalesSlip = (SalesSlip)obj;
                    }
                    else if (obj is ArrayList)
                    {
                        ArrayList al = (ArrayList)obj;
                        //------------------------------------------------------------------
                        // 登録対象となるSCM受注明細データ(回答)を取得
                        //------------------------------------------------------------------
                        if (al[0] is SCMAcOdrDtlAsWork)
                        {
                            //sourceSCMAcOdrDtlAsWorkList = (ArrayList)obj;
                            sourceSCMAcOdrDtlAsWorkList.AddRange((ArrayList)obj);
                        }

                    }
                }
            }

            // いきなり回答の場合、ロックなし
            if (sourceSalesSlip.InquiryNumber == 0) return (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            // 問合せ明細が存在しない場合、ロックなし
            if ((this._scmDetailIListSvForWebCheck == null) || (this._scmDetailIListSvForWebCheck.Count == 0)) return (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            //------------------------------------------------------------------
            // SCM受注データ取得
            //------------------------------------------------------------------
            ISCMOrderHeaderRecord headerRec;
            if ((this._scmHeaderIListSvForWebCheck != null) && (this._scmHeaderIListSvForWebCheck.Count != 0))
            {
                headerRec = this._scmHeaderIListSvForWebCheck[0];
            }
            else
            {
                // ADD 2012/12/27 2013/03/13配信 SCM障害№10378対応 ------------------------------------>>>>>
                // エラー時ログ出力
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "CheckWebServer",
                                                "初期表示時のSCM受注データがありません。ステータス：" +
                                                ConstantManagement.DB_Status.ctDB_ERROR.ToString());
                // ADD 2012/12/27 2013/03/13配信 SCM障害№10378対応 ------------------------------------<<<<<
                return (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }

            //------------------------------------------------------------------
            // 登録対象となるSCM受注明細データ(問合せ・発注)
            //------------------------------------------------------------------
            List<ISCMOrderDetailRecord> detailList = new List<ISCMOrderDetailRecord>();
            foreach (UserSCMOrderDetailRecord detailRec in this._scmDetailIListSvForWebCheck)
            {
                foreach (SCMAcOdrDtlAsWork asWork in sourceSCMAcOdrDtlAsWorkList)
                {
                    if ((detailRec.InquiryNumber == asWork.InquiryNumber) &&
                        (detailRec.InqRowNumber == asWork.InqRowNumber) &&
                        (detailRec.InqRowNumDerivedNo == asWork.InqRowNumDerivedNo))
                    {
                        detailList.Add((ISCMOrderDetailRecord)detailRec);
                        break;
                    }
                }
            }
            if ((detailList == null) || (detailList.Count == 0))
            {
                return (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            }

            //------------------------------------------------------------------
            // 明細取込区分更新
            //------------------------------------------------------------------
            int status = SCMWebServer.Singleton.Instance.UpdateInqDtlTakeinDiv(headerRec, detailList);
            // ADD 2012/12/27 2013/03/13配信 SCM障害№10378対応 ------------------------------------>>>>>
            // エラー時ログ出力
            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "CheckWebServer",
                                                "明細取込区分更新時にエラーが発生しました。ステータス：" + status.ToString() +
                                                "  ===>回答送信処理のログを参照してください。");
            }
            // ADD 2012/12/27 2013/03/13配信 SCM障害№10378対応 ------------------------------------<<<<<

            return status;
        }
        //<<<2011/02/01

        //>>>2011/05/25
        /// <summary>
        /// 受発注データ確定済チェック処理
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="isFixed"></param>
        /// <returns></returns>
        /// <br>Update Note: 2011/09/21 Redmine#25217 登録、データ送信されることもあるが、いずれにしろ時間がかかりすぎるの対応 </br>
        public int CheckScmOdrDataFixed(ArrayList salesDataList, out bool isFixed)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            isFixed = false;

            #region 削除
            ////------------------------------------------------------------------
            //// 保存前売上データ分解
            ////------------------------------------------------------------------
            //SalesSlip sourceSalesSlip = null;
            //SCMAcOdrDataWork sourceScmAcOdrDataWork = null;
            //foreach (CustomSerializeArrayList list in salesDataList)
            //{
            //    foreach (object obj in list)
            //    {
            //        if (obj is SalesSlip)
            //        {
            //            sourceSalesSlip = (SalesSlip)obj;
            //        }
            //        else if (obj is SCMAcOdrDataWork)
            //        {
            //            scmAcOdrDataWork = (SCMAcOdrDataWork)obj;
            //        }
            //    }
            //}
            #endregion

            //------------------------------------------------------------------
            // SCM受注データ取得
            //------------------------------------------------------------------
            ISCMOrderHeaderRecord headerRec;
            if ((this._scmHeaderIListSvForWebCheck != null) && (this._scmHeaderIListSvForWebCheck.Count != 0))
            {
                headerRec = this._scmHeaderIListSvForWebCheck[0];
            }
            else
            {
                return (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }

            // --- ADD 2011/09/21 ---------->>>>>
            if (headerRec.InquiryNumber == 0)
            {
                SCMAcOdrDataWork scmAcOdrDataWork = null;
                foreach (CustomSerializeArrayList list in salesDataList)
                {
                    foreach (object obj in list)
                    {
                        if (obj is SCMAcOdrDataWork)
                        {
                            scmAcOdrDataWork = (SCMAcOdrDataWork)obj;
                        }
                    }
                }
                if (scmAcOdrDataWork != null)
                {
                    headerRec.InquiryNumber = scmAcOdrDataWork.InquiryNumber;
                    headerRec.InqOriginalEpCd = scmAcOdrDataWork.InqOriginalEpCd.Trim();//@@@@20230303
                    headerRec.InqOriginalSecCd = scmAcOdrDataWork.InqOriginalSecCd;
                    headerRec.InqOtherEpCd = scmAcOdrDataWork.InqOtherEpCd;
                    headerRec.InqOtherSecCd = scmAcOdrDataWork.InqOtherSecCd;
                }
            }
            if (headerRec.InquiryNumber == 0)
            {
                return (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }
            // --- ADD ADD 2011/09/21 ----------<<<<<

            status = SCMWebServer.Singleton.Instance.CheckScmOdrDataFixed(headerRec, out isFixed);

            return status;
        }

        /// <summary>
        /// 指示書番号制御区分取得処理
        /// </summary>
        /// <param name="orgEpCd"></param>
        /// <param name="orgSecCd"></param>
        public void GetPartySalesSlipNumCd(string orgEpCd, string orgSecCd)
        {
            short retPMInstNoHdlDivCd;
            int status = SCMWebServer2.Singleton.Instance.ReadScmCnctSet(orgEpCd, orgSecCd, out retPMInstNoHdlDivCd);

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this._pmInstNoHdlDivCd = retPMInstNoHdlDivCd;
            }
        }
        //<<<2011/05/25
        #endregion

        #region ●BLコード変換
        // ===================================================================================== //
        // プライベート変数
        // ===================================================================================== //
        # region Private Members
        private SalesInputDataSet.BLCodeChgDataTable _blCodeChgDataTable;
        # endregion

        // ===================================================================================== //
        // プロパティ
        // ===================================================================================== //
        # region Properties
        /// <summary>
        /// BLコード変換データテーブルオブジェクト
        /// </summary>
        public SalesInputDataSet.BLCodeChgDataTable BLCodeChgDataTable
        {
            set { this._blCodeChgDataTable = value; }
            get { return this._blCodeChgDataTable; }
        }
        # endregion

        //>>>2010/06/26
        ///// <summary>
        ///// BLコード変換データテーブル作成処理
        ///// </summary>
        ///// <param name="bLGoodsCode"></param>
        //public void MakeBLCodeChgDataTable(int bLGoodsCode)
        //{
        //    // 初期化
        //    this._blCodeChgDataTable.Rows.Clear();

        //    // BLコード変換リスト取得
        //    List<TbsPartsCdChgWork> blList = this._salesSlipInputInitDataAcs.GetBLPartsCdChgList(bLGoodsCode);

        //    int rowNo = 1;
        //    foreach (TbsPartsCdChgWork work in blList)
        //    {
        //        SalesInputDataSet.BLCodeChgRow row = this._blCodeChgDataTable.NewBLCodeChgRow();
        //        row.RowNo = rowNo;
        //        row.SfVersion = work.SfVersion;
        //        row.TbsPartsCode = work.TbsPartsCode;
        //        row.TbsPartsCdDerivedNo = work.TbsPartsCdDerivedNo;
        //        row.ChgTbsPartsCode = work.ChgTbsPartsCode;
        //        row.ChgTbsPartsCdDerivedNo = work.ChgTbsPartsCdDerivedNo;
        //        row.TbsPartsFullName = work.TbsPartsFullName;
        //        row.TbsPartsHalfName = work.TbsPartsHalfName;
        //        row.Checked = false;
        //        this._blCodeChgDataTable.AddBLCodeChgRow(row);
        //        rowNo++;
        //    }
        //}

        ///// <summary>
        ///// BLコード変換データテーブル件数取得
        ///// </summary>
        ///// <returns></returns>
        //public int GetBLCodeChgCount()
        //{
        //    if (this._blCodeChgDataTable != null) return this._blCodeChgDataTable.Count;
        //    return 0;
        //}

        ///// <summary>
        ///// 選択BLコード変換情報取得処理
        ///// </summary>
        ///// <returns></returns>
        //public int GetSelectBLCodeChg()
        //{
        //    foreach (SalesInputDataSet.BLCodeChgRow row in this._blCodeChgDataTable)
        //    {
        //        if (row.Checked == true) return row.ChgTbsPartsCode;
        //    }
        //    return 0;
        //}
        //<<<2010/06/26
        #endregion

        #region ●在庫判定処理
        /// <summary>
        /// 納期回答取得処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="warehouseCode"></param>
        /// <param name="warehouseName"></param>
        /// <param name="warehouseShelfNo"></param>
        /// <returns></returns>
        // 2012/08/30 UPD T.Yoshioka 2012/10月配信予定 SCM障害№10345 --------->>>>>>>>>>>>>>>>>>>>>>>>>
        // public string GetAnswerDeliveryDate(SalesSlip salesSlip, string warehouseCode, string warehouseName, string warehouseShelfNo)
        // public string GetAnswerDeliveryDate(SalesSlip salesSlip, string warehouseCode, string warehouseName, string warehouseShelfNo, Stock stock, double shipmentCnt)  // DEL 2015/02/10 吉岡 SCM高速化 回答納期区分対応
        public string GetAnswerDeliveryDate(SalesSlip salesSlip, string warehouseCode, string warehouseName, string warehouseShelfNo, Stock stock, double shipmentCnt, out Int16 ansDeliDateDiv)     // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
        // 2012/08/30 UPD T.Yoshioka 2012/10月配信予定 SCM障害№10345 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
        {

            // UPD 2015/02/18 SCM高速化Redmine#243対応 ------------------------->>>>>
            //Warehouse warehouse = this._salesSlipInputInitDataAcs.GetInfo_FromWarehouse(warehouseCode);
            Warehouse warehouse = this._salesSlipInputInitDataAcs.GetInfo_FromWarehouse(warehouseCode, this._enterpriseCode);
            // UPD 2015/02/18 SCM高速化Redmine#243対応 -------------------------<<<<<

            // 2011/01/31 >>>
            //// 委託在庫判定
            //if ((warehouse != null) && (warehouse.CustomerCode == salesSlip.CustomerCode))
            //{
            //    return warehouseShelfNo;
            //}

            //// 得意先優先倉庫
            //if (salesSlip.CustWarehouseCd.Trim() == warehouseCode.Trim())
            //{
            //    return "在庫有り";
            //}

            //// 自拠点在庫判定
            //if ((warehouse != null) && (warehouse.SectionCode == salesSlip.ResultsAddUpSecCd))
            //{
            //    return "在庫有り";
            //}

            //// 他拠点在庫判定
            //if (CheckSectWarehouse(this._salesSlipInputInitDataAcs.SectWarehouseCd, warehouseCode.Trim()))
            //{
            //    return warehouseName;
            //}

            //// 非在庫
            //return this.GetAnswerDeliveryDateForMst(salesSlip.ResultsAddUpSecCd, salesSlip.CustomerCode);


            // 2012/08/30 UPD T.Yoshioka 2012/10月配信予定 SCM障害№10345 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            bool isStock = false;
            bool isTrust = false;
            bool isPriority = false;
            // 在庫・非在庫、委託在庫の判定
            if (warehouse != null && !string.IsNullOrEmpty(warehouse.WarehouseCode.Trim()))
            {
                isStock = true;

                List<string> warehouseList = new List<string>();
                int commethod = GetCommethodDirect(this._salesSlip);

                // UPD 2012/12/12 2013/01/16配信 SCM改良№10423対応 ---------------------------------->>>>>
                //    // 委託、優先倉庫の取得
                //    if (commethod == 0)
                //    {
                //        // 通信方式：PCC for NS
                //        warehouseList = this.AddWarehouseList2(this._salesSlipInputInitDataAcs.GetSectWarehouseCd(this._salesSlip.ResultsAddUpSecCd), this._salesSlip.CustWarehouseCd);
                //    }
                //    else
                //    {
                //        // 通信方式：BLP
                //        warehouseList = this.CreatePriorWarehouseListForPccuoe(this.GetCustomerInfo().CustomerEpCode, this.GetCustomerInfo().CustomerSecCode, this._enterpriseCode, this._sectionCode);
                //    }

                //    // 委託倉庫判定
                //    if (commethod == 0)
                //    {
                //        // 通信方式：PCC for NS
                //        if (warehouse.CustomerCode == salesSlip.CustomerCode
                //            && warehouse.WarehouseCode.Trim() == this.GetCustomerInfo().CustWarehouseCd.Trim())
                //        {
                //            isTrust = true;
                //        }
                //    }
                //    else
                //    {
                //        // 通信方式：BLP
                //        if (warehouse.WarehouseCode.Trim() == warehouseList[0])
                //    {
                //        isTrust = true;
                //    }
                //}

                // 委託、優先倉庫の取得
                // 通信方式：BLP
                warehouseList = this.CreatePriorWarehouseListForPccuoe(this.GetCustomerInfo().CustomerEpCode, this.GetCustomerInfo().CustomerSecCode, this._enterpriseCode, this._sectionCode);

                // 委託倉庫判定
                // 通信方式：BLP
                // ADD 2012/12/20 2013/01/16配信 システムテスト障害№24対応 ------------------------->>>>>
                if (warehouseList != null && warehouseList.Count > 0)
                {
                    // ADD 2012/12/20 2013/01/16配信 システムテスト障害№24対応 -------------------------<<<<<
                    if (warehouse.WarehouseCode.Trim() == warehouseList[0])
                    {
                        isTrust = true;
                    }
                    // UPD 2012/12/12 2013/01/16配信 SCM改良№10423対応 ----------------------------------<<<<<
                // ADD 2012/12/20 2013/01/16配信 システムテスト障害№24対応 ------------------------->>>>>
                }
                // ADD 2012/12/20 2013/01/16配信 システムテスト障害№24対応 -------------------------<<<<<
                // 優先倉庫判定
                if (!isTrust)
                {
                    foreach (string wkCode in warehouseList)
                    {
                        // １件目は委託なので無視
                        if (warehouseList.IndexOf(wkCode).Equals(0))
                        {
                            continue;
                        }

                        if (warehouse.WarehouseCode.Trim().Equals(wkCode))
                        {
                            isPriority = true;
                            break;
                        }
                    }
                }
            }

            // 納期設定マスタより回答納期を取得する
            // return this.GetAnswerDeliveryDateForMst(salesSlip.ResultsAddUpSecCd, salesSlip.CustomerCode, isStock, isTrust, isPriority, warehouseShelfNo, stock, shipmentCnt); // DEL 2015/02/10 吉岡 SCM高速化 回答納期区分対応
            return this.GetAnswerDeliveryDateForMst(salesSlip.ResultsAddUpSecCd, salesSlip.CustomerCode, isStock, isTrust, isPriority, warehouseShelfNo, stock, shipmentCnt, out ansDeliDateDiv);    // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応

            #region 旧コード
            //bool isStock = false;
            //bool isTrust = false;

            //// 在庫・非在庫、委託在庫の判定
            //if (warehouse != null && !string.IsNullOrEmpty(warehouse.WarehouseCode.Trim()))
            //{
            //    isStock = true;

            //    if (warehouse.CustomerCode == salesSlip.CustomerCode)
            //    {
            //        isTrust = true;
            //    }
            //}

            //// 納期設定マスタより回答納期を取得する
            //return this.GetAnswerDeliveryDateForMst(salesSlip.ResultsAddUpSecCd, salesSlip.CustomerCode, isStock, isTrust, warehouseShelfNo);
            #endregion
            // 2012/08/30 UPD T.Yoshioka 2012/10月配信予定 SCM障害№10345 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
            // 2011/01/31 <<<
        }

        // ADD 2014/06/04 SCM仕掛一覧№10659対応 ------------------------------------------------------->>>>>
        /// <summary>
        /// 在庫状況区分取得処理
        /// </summary>
        /// <param name="warehouseCode"></param>
        /// <returns></returns>
        public short GetStockStatusDiv(ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow)
        {

            // DEL 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット----------------------->>>>>
            #region
            //Warehouse warehouse = this._salesSlipInputInitDataAcs.GetInfo_FromWarehouse(warehouseCode);

            //bool isStock = false;
            //bool isTrust = false;
            //bool isPriority = false;
            //// 在庫・非在庫、委託在庫の判定
            //if (warehouse != null && !string.IsNullOrEmpty(warehouse.WarehouseCode.Trim()))
            //{
            //    isStock = true;

            //    List<string> warehouseList = new List<string>();
            //    int commethod = GetCommethodDirect(this._salesSlip);

            //    // 委託、優先倉庫の取得
            //    // 通信方式：BLP
            //    warehouseList = this.CreatePriorWarehouseListForPccuoe(this.GetCustomerInfo().CustomerEpCode, this.GetCustomerInfo().CustomerSecCode, this._enterpriseCode, this._sectionCode);

            //    // 委託倉庫判定
            //    // 通信方式：BLP
            //    if (warehouseList != null && warehouseList.Count > 0)
            //    {
            //        if (warehouse.WarehouseCode.Trim() == warehouseList[0])
            //        {
            //            isTrust = true;
            //        }
            //    }
            //    // 優先倉庫判定
            //    if (!isTrust)
            //    {
            //        foreach (string wkCode in warehouseList)
            //        {
            //            // １件目は委託なので無視
            //            if (warehouseList.IndexOf(wkCode).Equals(0))
            //            {
            //                continue;
            //            }

            //            if (warehouse.WarehouseCode.Trim().Equals(wkCode))
            //            {
            //                isPriority = true;
            //                break;
            //            }
            //        }
            //    }
            //}

            //if (isTrust) return 2; // 委託倉庫
            //if (isStock) return 1; // 在庫あり
            //return 0; // 非在庫
            #endregion
            // DEL 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット-----------------------<<<<<

            // ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット----------------------->>>>>
            bool isTrust = false;
            List<string> warehouseList = new List<string>();
            // 在庫・非在庫、委託在庫の判定
            if (!string.IsNullOrEmpty(scmAcOdrDtlAsRow.WarehouseCode.Trim()))
            {
                // 委託、優先倉庫の取得
                // 通信方式：BLP
                warehouseList = this.CreatePriorWarehouseListForPccuoe(this.GetCustomerInfo().CustomerEpCode, this.GetCustomerInfo().CustomerSecCode, this._enterpriseCode, this._sectionCode);

                // 委託倉庫判定
                // 通信方式：BLP
                if (warehouseList != null && warehouseList.Count > 0)
                {
                    if (scmAcOdrDtlAsRow.WarehouseCode.Trim() == warehouseList[0])
                    {
                        isTrust = true;
                    }
                }
            }

            GoodsUnitData goodsUnitData = this.GetGoodsUnitDataDic(scmAcOdrDtlAsRow.GoodsMakerCd, scmAcOdrDtlAsRow.GoodsNo, null);

            bool retFlg = false;

            Stock stockCache = null;

            if (goodsUnitData != null)
            {
                // --- ADD 2014/09/04 T.Nishi ---------->>>>>
                if (goodsUnitData.StockList != null)
                {
                // --- ADD 2014/09/04 T.Nishi ----------<<<<<
                    // 在庫マスタ
                    foreach (Stock stock in goodsUnitData.StockList)
                    {
                        stockCache = stock;
                        if (stock.WarehouseCode.Trim() == scmAcOdrDtlAsRow.WarehouseCode.Trim())
                        {
                            retFlg = true;
                            break;
                        }
                    }
                // --- ADD 2014/09/04 T.Nishi ---------->>>>>
                }
                // --- ADD 2014/09/04 T.Nishi ----------<<<<<
            }

            if (!retFlg)
            {
                // 在庫マスタ無し
                if (isTrust)
                {
                    // 委託在庫の場合
                    return 4; // 4:[無し（委託在庫）]
                }
                else
                {
                    return 0; // 0:入荷待ち
                }
            }
            else
            {
                if (stockCache != null && stockCache.ShipmentPosCnt <= 0)
                {
                    // 現在庫数ゼロ
                    if (isTrust)
                    {
                        // 委託在庫の場合
                        return 4; // 4:[無し（委託在庫）]
                    }
                    else
                    {
                        return 0; // 0:入荷待ち
                    }
                }
                else if ((stockCache.ShipmentPosCnt - scmAcOdrDtlAsRow.SalesOrderCount) < 0)
                {
                    // (現在庫数 － 問合せ数) ＜ ０
                    if (isTrust)
                    {
                        // 委託在庫の場合
                        return 5; // 5:[不足（委託在庫）]
                    }
                    else
                    {
                        return 1; // 1:在庫不足
                    }
                }
                else
                {
                    //在庫マスタ 最低在庫数が設定されている場合
                    if (stockCache.MinimumStockCnt != 0)
                    {
                        // (現在庫数 － 問合せ数) ＜ 最低在庫数
                        if ((stockCache.ShipmentPosCnt - scmAcOdrDtlAsRow.SalesOrderCount) < stockCache.MinimumStockCnt)
                        {

                            if (isTrust)
                            {
                                // 委託在庫の場合
                                return 6; // 6:[在庫残少（委託在庫）]
                            }
                            else
                            {
                                return 2; // 2:在庫残少 

                            }
                        }
                        else
                        {
                            if (isTrust)
                            {
                                // 委託在庫の場合
                                return 7; //7:[在庫残多（委託在庫）]
                            }
                            else
                            {
                                return 3; // 3:在庫豊富
                            }
                        }
                    }
                    else
                    {
                        if (isTrust)
                        {
                            // 委託在庫の場合
                            return 7; //7:[在庫残多（委託在庫）]
                        }
                        else
                        {
                            return 3; // 3:在庫豊富
                        }
                    }
                }
            }
            // ADD 2014/07/23 Redmine#43080の3SCM受発注明細データに在庫状況区分のセット-----------------------<<<<<
        }
        // ADD 2014/06/04 SCM仕掛一覧№10659対応 -------------------------------------------------------<<<<<
        #endregion

        // 2012/08/30 ADD T.Yoshioka 2012/10月配信予定 SCM障害№10345 --------->>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 得意先情報の取得
        /// </summary>
        /// <returns></returns>
        private CustomerInfo GetCustomerInfo()
        {
            // 初回、または得意先が変更された場合
            if (this._customerInfo == null || this._customerCodeSave != this.SalesSlip.CustomerCode)
            {
                this._customerInfoAcs.ReadDBData(this._enterpriseCode, this.SalesSlip.CustomerCode, out this._customerInfo);
            }
            this._customerCodeSave = this.SalesSlip.CustomerCode;
            return _customerInfo;
        }
        // 2012/08/30 ADD T.Yoshioka 2012/10月配信予定 SCM障害№10345 ---------<<<<<<<<<<<<<<<<<<<<<<<<<



        #region ●納期設定取得処理
        /// <summary>
        /// 納期回答取得処理
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <param name="customerCode"></param>
        /// <returns></returns>
        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
        #region 旧ソース
        //// 2012/08/30 UPD T.Yoshioka 2012/10月配信予定 SCM障害№10345 --------->>>>>>>>>>>>>>>>>>>>>>>>>
        //// 2011/01/31 >>>
        ////public string GetAnswerDeliveryDateForMst(string sectionCode, int customerCode)
        //// public string GetAnswerDeliveryDateForMst(string sectionCode, int customerCode, bool isStock, bool isTrustStock, string shelfNo)
        //public string GetAnswerDeliveryDateForMst(string sectionCode, int customerCode, bool isStock, bool isTrustStock,bool isPriorityStock, string shelfNo, Stock stock, double shipmentCnt)
        //// 2011/01/31 <<<
        //// 2012/08/30 UPD T.Yoshioka 2012/10月配信予定 SCM障害№10345 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
        #endregion
        // ※ 当メソッド使用PGは売伝のみで他PGからの参照は無し
        public string GetAnswerDeliveryDateForMst(string sectionCode, int customerCode, bool isStock, bool isTrustStock, bool isPriorityStock, string shelfNo, Stock stock, double shipmentCnt
            , out Int16 ansDeliDateDiv
            )
        // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
        {
            ansDeliDateDiv = 0;  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応

            SCMDeliDateSt scmDeliDateSt = this._salesSlipInputInitDataAcs.GetSCMDeliDateSt(sectionCode, customerCode);
            if (scmDeliDateSt == null) return string.Empty;

            // 2011/01/31 >>>
            // 委託在庫の場合
            if (isTrustStock)
            {
                // 委託在庫回答納期区分を参照して決定
                switch (scmDeliDateSt.EntStckAnsDeliDtDiv)
                {
                    case 1:  // 1:棚番
                        return shelfNo;
                        break;
                    case 2:  // 2:委託用に設定
                        // 2012/08/30 UPD T.Yoshioka 2012/10月配信予定 SCM障害№10345 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                        // return scmDeliDateSt.EntStckAnsDeliDate;
                        // break;
                        if (stock.SupplierStock <= 0)
                        {
                            ansDeliDateDiv = scmDeliDateSt.EntAnsDelDtWioDiv; // ADD ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                            // 委託　在庫無し
                            return scmDeliDateSt.EntStcAnsDelDatWiout;
                        }
                        else if ((stock.SupplierStock - shipmentCnt) < 0)
                        {
                            ansDeliDateDiv = scmDeliDateSt.EntAnsDelDtShoDiv; // ADD ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                            // 委託　在庫不足
                            return scmDeliDateSt.EntStcAnsDelDatShort;
                        }
                        else
                        {
                            ansDeliDateDiv = scmDeliDateSt.EntAnsDelDtStcDiv; // ADD ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                            // 委託　在庫数有り
                            return scmDeliDateSt.EntStckAnsDeliDate;
                        }
                        // 2012/08/30 UPD T.Yoshioka 2012/10月配信予定 SCM障害№10345 ---------<<<<<<<<<<<<<<<<<<<<<<<<<
                    default: // 上記以外は通常の在庫と同じ回答納期を使用する
                        break;
                }
            }
            // 2011/01/31 <<<
            // 2012/08/30 ADD T.Yoshioka 2012/10月配信予定 SCM障害№10345 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            // 優先在庫の場合
            else if (isPriorityStock)
            {
                // 参照在庫回答納期区分を参照して決定
                switch (scmDeliDateSt.PriStckAnsDeliDtDiv)
                {
                    case 1:  // 1:優先用に設定
                        if (stock.SupplierStock <= 0)
                        {
                            ansDeliDateDiv = scmDeliDateSt.PriAnsDelDtWioDiv; // ADD ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                            // 優先　在庫無し
                            return scmDeliDateSt.PriStcAnsDelDatWiout;
                        }
                        else if ((stock.SupplierStock - shipmentCnt) < 0)
                        {
                            ansDeliDateDiv = scmDeliDateSt.PriAnsDelDtShoDiv; // ADD ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                            // 優先　在庫不足
                            return scmDeliDateSt.PriStcAnsDelDatShort;
                        }
                        else
                        {
                            ansDeliDateDiv = scmDeliDateSt.PriAnsDelDtStcDiv; // ADD ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                            // 優先　在庫数有り
                            return scmDeliDateSt.PriStckAnsDeliDate;
                        }
                    default: // 上記以外は通常の在庫と同じ回答納期を使用する
                        break;
                }
            }

            if (isStock)
            {
                if (stock.SupplierStock <= 0)
                {
                    ansDeliDateDiv = scmDeliDateSt.AnsDelDtWioStcDiv; // ADD ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                    // その他　在庫無し
                    return scmDeliDateSt.AnsDelDatWithoutStc;
                }
                else if ((stock.SupplierStock - shipmentCnt) < 0)
                {
                    ansDeliDateDiv = scmDeliDateSt.AnsDelDtShoStcDiv; // ADD ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                    // その他　在庫不足
                    return scmDeliDateSt.AnsDelDatShortOfStc;
                }
            }
            // 2012/08/30 ADD T.Yoshioka 2012/10月配信予定 SCM障害№10345 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

            // UPD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 --------->>>>>>>>>>>>>>>>>>>>>>>>>
            #region 旧ソース
            //// 回答納期のリスト…回答締切時刻でソート
            //// 2011/01/31 >>>
            ////SortedList<int, string> answerDelivDateList = CreateAnswerDelivDateList(scmDeliDateSt);
            //SortedList<int, string> answerDelivDateList = CreateAnswerDelivDateList(scmDeliDateSt, isStock);
            //// 2011/01/31 <<<

            //// 現在の時刻から回答納期を判定
            //int now = int.Parse(DateTime.Now.ToString("HHmmss"));
            //string answerDelivDate = string.Empty;
            //foreach (KeyValuePair<int, string> answerDelivPair in answerDelivDateList)
            //{
            //    if (string.IsNullOrEmpty(answerDelivDate)) answerDelivDate = answerDelivPair.Value;

            //    if (answerDelivPair.Key >= now)
            //    {
            //        answerDelivDate = answerDelivPair.Value;
            //        break;
            //    }
            //}
            #endregion
            // 回答納期のリスト…回答締切時刻でソート  string[]→2件のみ 1番目：回答納期  2番目：回答納期区分 Int16をstringにキャストした状態
            SortedList<int, string[]> answerDelivDateList = CreateAnswerDelivDateList(scmDeliDateSt, isStock);

            // 現在の時刻から回答納期を判定
            int now = int.Parse(DateTime.Now.ToString("HHmmss"));
            string answerDelivDate = string.Empty;
            foreach (KeyValuePair<int, string[]> answerDelivPair in answerDelivDateList)
            {
                if (string.IsNullOrEmpty(answerDelivDate))
                {
                    answerDelivDate = answerDelivPair.Value[0];
                    Int16.TryParse(answerDelivPair.Value[1], out ansDeliDateDiv);
                }

                if (answerDelivPair.Key >= now)
                {
                    answerDelivDate = answerDelivPair.Value[0];
                    Int16.TryParse(answerDelivPair.Value[1], out ansDeliDateDiv);
                    break;
                }
            }
            // UPD 2015/02/10 吉岡 SCM高速化 回答納期区分対応 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

            return answerDelivDate;
        }

        /// <summary>
        /// 回答締切時刻でソートされた回答納期リストを生成します。
        /// </summary>
        /// <param name="deriveryDateSetting">SCM納期設定</param>
        /// <returns>回答締切時刻でソートされた回答納期リスト</returns>
        // 2011/01/31 >>>
        //private static SortedList<int, string> CreateAnswerDelivDateList(SCMDeliDateSt deriveryDateSetting)
        // private static SortedList<int, string> CreateAnswerDelivDateList(SCMDeliDateSt deriveryDateSetting, bool isStock) // DEL 2015/02/10 吉岡 SCM高速化 回答納期区分対応
        private static SortedList<int, string[]> CreateAnswerDelivDateList(SCMDeliDateSt deriveryDateSetting, bool isStock)  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
        // 2011/01/31 <<<
        {
            // SortedList<int, string> answerDelivDateList = new SortedList<int, string>(); // DEL 2015/02/10 吉岡 SCM高速化 回答納期区分対応
            SortedList<int, string[]> answerDelivDateList = new SortedList<int, string[]>();
            {
                // 2011/01/31 >>>
                //// 回答締切時刻1/回答納期1
                //AddItem(
                //    answerDelivDateList,
                //    deriveryDateSetting.AnswerDeadTime1,
                //    deriveryDateSetting.AnswerDelivDate1
                //);
                //// 回答締切時刻2/回答納期2
                //AddItem(
                //    answerDelivDateList,
                //    deriveryDateSetting.AnswerDeadTime2,
                //    deriveryDateSetting.AnswerDelivDate2
                //);
                //// 回答締切時刻3/回答納期3
                //AddItem(
                //    answerDelivDateList,
                //    deriveryDateSetting.AnswerDeadTime3,
                //    deriveryDateSetting.AnswerDelivDate3
                //);
                //// 回答締切時刻4/回答納期4
                //AddItem(
                //    answerDelivDateList,
                //    deriveryDateSetting.AnswerDeadTime4,
                //    deriveryDateSetting.AnswerDelivDate4
                //);
                //// 回答締切時刻5/回答納期5
                //AddItem(
                //    answerDelivDateList,
                //    deriveryDateSetting.AnswerDeadTime5,
                //    deriveryDateSetting.AnswerDelivDate5
                //);
                //// 回答締切時刻6/回答納期6
                //AddItem(
                //    answerDelivDateList,
                //    deriveryDateSetting.AnswerDeadTime6,
                //    deriveryDateSetting.AnswerDelivDate6
                //);

                if (!isStock)
                {
                    // 回答締切時刻1/回答納期1
                    AddItem(
                        answerDelivDateList,
                        deriveryDateSetting.AnswerDeadTime1,
                        deriveryDateSetting.AnswerDelivDate1
                        , deriveryDateSetting.AnsDelDtDiv1  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応

                    );
                    // 回答締切時刻2/回答納期2
                    AddItem(
                        answerDelivDateList,
                        deriveryDateSetting.AnswerDeadTime2,
                        deriveryDateSetting.AnswerDelivDate2
                        , deriveryDateSetting.AnsDelDtDiv2  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応

                    );
                    // 回答締切時刻3/回答納期3
                    AddItem(
                        answerDelivDateList,
                        deriveryDateSetting.AnswerDeadTime3,
                        deriveryDateSetting.AnswerDelivDate3
                        , deriveryDateSetting.AnsDelDtDiv3  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                    );
                    // 回答締切時刻4/回答納期4
                    AddItem(
                        answerDelivDateList,
                        deriveryDateSetting.AnswerDeadTime4,
                        deriveryDateSetting.AnswerDelivDate4
                        , deriveryDateSetting.AnsDelDtDiv4  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                    );
                    // 回答締切時刻5/回答納期5
                    AddItem(
                        answerDelivDateList,
                        deriveryDateSetting.AnswerDeadTime5,
                        deriveryDateSetting.AnswerDelivDate5
                        , deriveryDateSetting.AnsDelDtDiv5  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                    );
                    // 回答締切時刻6/回答納期6
                    AddItem(
                        answerDelivDateList,
                        deriveryDateSetting.AnswerDeadTime6,
                        deriveryDateSetting.AnswerDelivDate6
                        , deriveryDateSetting.AnsDelDtDiv6  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                    );
                }
                else
                {
                    // 回答締切時刻1/回答納期1
                    AddItem(
                        answerDelivDateList,
                        deriveryDateSetting.AnswerDeadTime1Stc,
                        deriveryDateSetting.AnswerDelivDate1Stc
                        , deriveryDateSetting.AnsDelDtDiv1Stc  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                    );
                    // 回答締切時刻2/回答納期2
                    AddItem(
                        answerDelivDateList,
                        deriveryDateSetting.AnswerDeadTime2Stc,
                        deriveryDateSetting.AnswerDelivDate2Stc
                        , deriveryDateSetting.AnsDelDtDiv2Stc  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                    );
                    // 回答締切時刻3/回答納期3
                    AddItem(
                        answerDelivDateList,
                        deriveryDateSetting.AnswerDeadTime3Stc,
                        deriveryDateSetting.AnswerDelivDate3Stc
                        , deriveryDateSetting.AnsDelDtDiv3Stc  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                    );
                    // 回答締切時刻4/回答納期4
                    AddItem(
                        answerDelivDateList,
                        deriveryDateSetting.AnswerDeadTime4Stc,
                        deriveryDateSetting.AnswerDelivDate4Stc
                        , deriveryDateSetting.AnsDelDtDiv4Stc  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                    );
                    // 回答締切時刻5/回答納期5
                    AddItem(
                        answerDelivDateList,
                        deriveryDateSetting.AnswerDeadTime5Stc,
                        deriveryDateSetting.AnswerDelivDate5Stc
                        , deriveryDateSetting.AnsDelDtDiv5Stc  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                    );
                    // 回答締切時刻6/回答納期6
                    AddItem(
                        answerDelivDateList,
                        deriveryDateSetting.AnswerDeadTime6Stc,
                        deriveryDateSetting.AnswerDelivDate6Stc
                        , deriveryDateSetting.AnsDelDtDiv6Stc  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                    );
                }
                // 2011/01/31 <<<
            }
            return answerDelivDateList;
        }

        /// <summary>
        /// 回答納期のリストに項目を追加します。
        /// </summary>
        /// <remarks>
        /// <c>SortedList</c>のヘルパ関数
        /// </remarks>
        /// <param name="answerDelivDateList">回答納期のリスト</param>
        /// <param name="answerDeadTime">回答締切時刻</param>
        /// <param name="answerDelivDate">回答納期</param>
        /// <param name="ansDeliDateDiv">回答納期区分</param>
        private static void AddItem(
            // SortedList<int, string> answerDelivDateList, // DEL 2015/02/10 吉岡 SCM高速化 回答納期区分対応
            SortedList<int, string[]> answerDelivDateList,  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
            int answerDeadTime,
            string answerDelivDate
            , Int16 ansDeliDateDiv  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
        )
        {
            // 回答締切時刻が0の場合、無視
            if (answerDeadTime.Equals(0)) return;

            // 未登録の場合、回答締切時刻と回答納期を追加
            if (!answerDelivDateList.ContainsKey(answerDeadTime))
            {
                // answerDelivDateList.Add(answerDeadTime, answerDelivDate); // DEL 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                answerDelivDateList.Add(answerDeadTime, new string[] { answerDelivDate, ansDeliDateDiv.ToString() });  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                return;
            }

            // 登録済の場合
            // 回答納期が空の場合、無視
            if (string.IsNullOrEmpty(answerDelivDate)) return;

            // 登録済みの回答納期が空の場合、再登録
            // if (string.IsNullOrEmpty(answerDelivDateList[answerDeadTime])) // DEL 2015/02/10 吉岡 SCM高速化 回答納期区分対応
            if (string.IsNullOrEmpty(answerDelivDateList[answerDeadTime][0])) // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
            {
                answerDelivDateList.Remove(answerDeadTime);
                // answerDelivDateList.Add(answerDeadTime, answerDelivDate);  // DEL 2015/02/10 吉岡 SCM高速化 回答納期区分対応
                answerDelivDateList.Add(answerDeadTime, new string[] { answerDelivDate, ansDeliDateDiv.ToString() });  // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応
            }
        }
        #endregion

        #region ●外装品判定処理
        /// <summary>
        /// 外装品判定処理
        /// </summary>
        /// <param name="blCode">BLコード</param>
        /// <returns>true:外装品 false:外装品以外</returns>
        public bool CheckOutEquipment(int blCode)
        {
            bool ret = false;
            int[] outEquip = new int[] { 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1702, 2104, 2204, 3104, 3204, 4102, 4103, 4104, 4105, 4106, 4107, 4108 };
            ArrayList outEquipList = new ArrayList(outEquip);

            if (outEquipList.Contains(blCode)) ret = true;

            return ret;
        }
        #endregion

        #region ●従業員情報設定
        //>>>2011/03/04
        /// <summary>
        /// 従業員情報再設定処理
        /// </summary>
        /// <param name="salesSlip"></param>
        public void SettingEmpInfo()
        {
            #region 担当者
            int salesEmployeeCd = TStrConv.StrToIntDef(this._salesSlip.SalesEmployeeCd, 0);
            if (salesEmployeeCd == 0)
            {
                CustomerInfo customerInfo;
                int st = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, this._salesSlip.CustomerCode, true, false, out customerInfo);
                if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    Employee employee = this._salesSlipInputInitDataAcs.GetEmployee(customerInfo.CustomerAgentCd);
                    if (employee != null)
                    {
                        this._salesSlip.SalesEmployeeCd = customerInfo.CustomerAgentCd; // 担当者コード
                        if (this._salesSlip.SalesEmployeeNm.Length > 16) this._salesSlip.SalesEmployeeNm = this._salesSlip.SalesEmployeeNm.Substring(0, 16);
                    }
                    else
                    {
                        switch (this._salesSlipInputConstructionAcs.EmployeeCdDivValue)
                        {
                            // ログイン担当者
                            case 0:
                                employee = this._salesSlipInputInitDataAcs.GetEmployee(LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                                if (employee != null)
                                {
                                    this._salesSlip.SalesEmployeeCd = LoginInfoAcquisition.Employee.EmployeeCode.Trim();  // 担当者コード
                                    this._salesSlip.SalesEmployeeNm = employee.Name;  // 担当者名称
                                }
                                break;
                            // 空白
                            case 1:
                                this._salesSlip.SalesEmployeeCd = string.Empty;  // 担当者コード
                                this._salesSlip.SalesEmployeeNm = string.Empty;  // 担当者名称
                                break;
                            // 固定値(設定値)
                            case 2:
                                employee = this._salesSlipInputInitDataAcs.GetEmployee(this._salesSlipInputConstructionAcs.EmployeeCdValue.Trim());
                                if (employee != null)
                                {
                                    this._salesSlip.SalesEmployeeCd = this._salesSlipInputConstructionAcs.EmployeeCdValue.Trim();  // 担当者コード
                                    this._salesSlip.SalesEmployeeNm = employee.Name;  // 担当者名称
                                }
                                break;
                        }
                    }
                }
            }
            #endregion

            #region 受注者
            switch (this._salesSlipInputConstructionAcs.FrontEmployeeCdDivValue)
            {
                // ログイン担当者
                case 0:
                    Employee emp = this._salesSlipInputInitDataAcs.GetEmployee(LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                    if (emp != null)
                    {
                        this._salesSlip.FrontEmployeeCd = LoginInfoAcquisition.Employee.EmployeeCode.Trim();  // 担当者コード
                        this._salesSlip.FrontEmployeeNm = emp.Name;
                        if (this._salesSlip.FrontEmployeeNm.Length > 16) this._salesSlip.FrontEmployeeNm = this._salesSlip.FrontEmployeeNm.Substring(0, 16);
                    }
                    break;
                // 空白
                case 1:
                    this._salesSlip.FrontEmployeeCd = string.Empty;  // 担当者コード
                    this._salesSlip.FrontEmployeeNm = string.Empty;  // 担当者名称
                    break;
                // 固定値(設定値)
                case 2:
                    Employee empp = this._salesSlipInputInitDataAcs.GetEmployee(this._salesSlipInputConstructionAcs.FrontEmployeeCdValue.Trim());
                    if (empp != null)
                    {
                        this._salesSlip.FrontEmployeeCd = this._salesSlipInputConstructionAcs.FrontEmployeeCdValue.Trim();  // 担当者コード
                        this._salesSlip.FrontEmployeeNm = empp.Name;
                        if (this._salesSlip.FrontEmployeeNm.Length > 16) this._salesSlip.FrontEmployeeNm = this._salesSlip.FrontEmployeeNm.Substring(0, 16);
                    }
                    break;
            }
            #endregion

            #region 発行者
            // 発行者
            switch (this._salesSlipInputConstructionAcs.SalesInputCdDivValue)
            {
                // ログイン担当者
                case 0:
                    Employee emp = this._salesSlipInputInitDataAcs.GetEmployee(LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                    if (emp != null)
                    {
                        this._salesSlip.SalesInputCode = LoginInfoAcquisition.Employee.EmployeeCode.Trim();  // 担当者コード
                        this._salesSlip.SalesInputName = emp.Name;
                        if (this._salesSlip.SalesInputName.Length > 16) this._salesSlip.SalesInputName = this._salesSlip.SalesInputName.Substring(0, 16);
                    }
                    break;
                // 空白
                case 1:
                    this._salesSlip.SalesInputCode = string.Empty;  // 担当者コード
                    this._salesSlip.SalesInputName = string.Empty;  // 担当者名称
                    break;
                // 固定値(設定値)
                case 2:
                    Employee empp = this._salesSlipInputInitDataAcs.GetEmployee(this._salesSlipInputConstructionAcs.SalesInputCdValue.Trim());
                    if (empp != null)
                    {
                        this._salesSlip.SalesInputCode = this._salesSlipInputConstructionAcs.SalesInputCdValue.Trim();  // 担当者コード
                        this._salesSlip.SalesInputName = empp.Name;
                        if (this._salesSlip.SalesInputName.Length > 16) this._salesSlip.SalesInputName = this._salesSlip.SalesInputName.Substring(0, 16);
                    }
                    break;
            }
            #endregion
        }
        //<<<2011/03/04
        #endregion
        //<<<2010/02/26

        #region Delphi-Methods ---- lizc
        /// <summary>
        /// 車両検索処理
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public int CarSearch(CarSearchCondition condition, int salesRowNo, int conditionType)
        {
            //------------------------------------------------------
            // 初期処理
            //------------------------------------------------------
            int retStatus = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;

            //------------------------------------------------------
            // 西暦／和歴区分（年式）
            //------------------------------------------------------
            condition.EraNameDispCd1 = this._salesSlipInputInitDataAcs.GetAllDefSet().EraNameDispCd1;

            switch (conditionType)
            {
                case 0:
                    condition.Type = CarSearchType.csNone;
                    break;
                case 1:
                    condition.Type = CarSearchType.csCategory;
                    break;
                case 2:
                    condition.Type = CarSearchType.csModel;
                    break;
                case 3:
                    condition.Type = CarSearchType.csEngineModel;
                    break;
                case 4:
                    condition.Type = CarSearchType.csPlate;
                    break;
            }

            //------------------------------------------------------
            // 各種検索処理
            //------------------------------------------------------
            //  CarSearchCondition の検索タイプにより指定
            //------------------------------------------------------
            CarSearchResultReport ret;
            PMKEN01010E dat = new PMKEN01010E();
            ret = this.SearchCar(condition, ref dat);
            if (ret == CarSearchResultReport.retFailed)
            {
                return retStatus = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            }
            else if (ret == CarSearchResultReport.retError)
            {
                return retStatus = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }
            if (ret == CarSearchResultReport.retMultipleCarKind)
            {
                //------------------------------------------------------
                // 車種選択画面起動
                //------------------------------------------------------
                if (SelectionCarKind.ShowDialog(dat.CarKindInfo, condition) == DialogResult.OK)
                {
                    ret = this.SearchCar(condition, ref dat);
                }
                else
                {
                    return retStatus = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
                }
            }
            if (ret == CarSearchResultReport.retMultipleCarModel)
            {
                //------------------------------------------------------
                // 型式選択画面起動
                //------------------------------------------------------
                if (SelectionCarModel.ShowDialog(dat) == DialogResult.OK)
                {
                    ret = this.SearchCar(condition, ref dat);
                }
                else
                {
                    return retStatus = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
                }
            }

            if ((ret == CarSearchResultReport.retSingleCarModel) || (ret == CarSearchResultReport.retMultipleCarModel))
            {
                //------------------------------------------------------
                // 検索結果キャッシュ
                //------------------------------------------------------
                this.CacheCarInfo(salesRowNo, dat);

                return retStatus = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            }

            return retStatus;
        }

        /// <summary>
        /// 対象行の車両情報行オブジェクトを取得
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="getCarInfoMode">車両情報取得モード</param>
        /// <returns>車両情報行オブジェクト</returns>
        /// <br>Update Note: 2011/11/15   鄧潘ハン  管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
        /// <br>Update Note: 2011/11/17   鄧潘ハン  管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
        public int GetCarInfoRow(int salesRowNo, int getCarInfoMode, out CarInfo carInfo)
        {
                   
            int status = 0;
             carInfo = new CarInfo();

            SalesSlipInputAcs.GetCarInfoMode carInfoMode = new GetCarInfoMode();

            switch (getCarInfoMode)
            {
                case 0:
                    carInfoMode = GetCarInfoMode.NewInsertMode;
                    break;
                case 1:
                    carInfoMode = GetCarInfoMode.ExistGetMode;
                    break;
                case 2:
                    carInfoMode = GetCarInfoMode.CarInfoChangeMode;
                    break;
            }
            SalesInputDataSet.CarInfoRow carInfoRowCurrent = this.GetCarInfoRow(salesRowNo, carInfoMode);

            if (carInfoRowCurrent != null)
            {
                //---DEL 2011/11/17 ------------------------>>>>>
                //---ADD 2011/11/15 ------------------------>>>>>
                //if (_scmHeaderIListSvForWebCheck != null && _scmHeaderIListSvForWebCheck.Count > 0 && _scmHeaderIListSvForWebCheck[0].InqOrdDivCd != 0)// DEL 2011/11/17
                //if (_scmHeaderIListSvForWebCheck != null && _scmHeaderIListSvForWebCheck.Count > 0 && _scmHeaderIListSvForWebCheck[0].InqOrdDivCd != 0 && carInfoRowCurrent.CarMngCode != "") //ADD 2011/11/17
                //{
                //    carInfo.CarMngCode = carInfoRowCurrent.CarMngCode;
                //    return status;
                //}
                //---ADD 2011/11/15 ------------------------<<<<<
                //---DEL 2011/11/17 ------------------------<<<<<
                carInfo.CarRelationGuid = carInfoRowCurrent.CarRelationGuid.ToString();
                carInfo.CustomerCode = carInfoRowCurrent.CustomerCode;
                carInfo.CarMngNo = carInfoRowCurrent.CarMngNo;
                carInfo.CarMngCode = carInfoRowCurrent.CarMngCode;
                carInfo.NumberPlate1Code = carInfoRowCurrent.NumberPlate1Code;
                carInfo.NumberPlate1Name = carInfoRowCurrent.NumberPlate1Name;
                carInfo.NumberPlate2 = carInfoRowCurrent.NumberPlate2;
                carInfo.NumberPlate3 = carInfoRowCurrent.NumberPlate3;
                carInfo.NumberPlate4 = carInfoRowCurrent.NumberPlate4;
                carInfo.EntryDate = carInfoRowCurrent.EntryDate;
                carInfo.FirstEntryDate = carInfoRowCurrent.FirstEntryDate;
                carInfo.MakerCode = carInfoRowCurrent.MakerCode;
                carInfo.MakerFullName = carInfoRowCurrent.MakerFullName;
                carInfo.MakerHalfName = carInfoRowCurrent.MakerHalfName;
                carInfo.ModelCode = carInfoRowCurrent.ModelCode;
                carInfo.ModelSubCode = carInfoRowCurrent.ModelSubCode;
                carInfo.ModelFullName = carInfoRowCurrent.ModelFullName;
                carInfo.ModelHalfName = carInfoRowCurrent.ModelHalfName;
                carInfo.SystematicCode = carInfoRowCurrent.SystematicCode;
                carInfo.SystematicName = carInfoRowCurrent.SystematicName;
                carInfo.ProduceTypeOfYearCd = carInfoRowCurrent.ProduceTypeOfYearCd;
                carInfo.ProduceTypeOfYearNm = carInfoRowCurrent.ProduceTypeOfYearNm;
                carInfo.StProduceTypeOfYear = carInfoRowCurrent.StProduceTypeOfYear;
                carInfo.EdProduceTypeOfYear = carInfoRowCurrent.EdProduceTypeOfYear;
                carInfo.DoorCount = carInfoRowCurrent.DoorCount;
                carInfo.BodyNameCode = carInfoRowCurrent.BodyNameCode;
                carInfo.BodyName = carInfoRowCurrent.BodyName;
                carInfo.ExhaustGasSign = carInfoRowCurrent.ExhaustGasSign;
                carInfo.SeriesModel = carInfoRowCurrent.SeriesModel;
                carInfo.CategorySignModel = carInfoRowCurrent.CategorySignModel;
                carInfo.FullModel = carInfoRowCurrent.FullModel;
                carInfo.ModelDesignationNo = carInfoRowCurrent.ModelDesignationNo;
                carInfo.CategoryNo = carInfoRowCurrent.CategoryNo;
                carInfo.FrameModel = carInfoRowCurrent.FrameModel;
                carInfo.FrameNo = carInfoRowCurrent.FrameNo;
                carInfo.SearchFrameNo = carInfoRowCurrent.SearchFrameNo;
                carInfo.StProduceFrameNo = carInfoRowCurrent.StProduceFrameNo;
                carInfo.EdProduceFrameNo = carInfoRowCurrent.EdProduceFrameNo;
                carInfo.ModelGradeNm = carInfoRowCurrent.ModelGradeNm;
                carInfo.EngineModelNm = carInfoRowCurrent.EngineModelNm;
                carInfo.EngineDisplaceNm = carInfoRowCurrent.EngineDisplaceNm;
                carInfo.EDivNm = carInfoRowCurrent.EDivNm;
                carInfo.TransmissionNm = carInfoRowCurrent.TransmissionNm;
                carInfo.ShiftNm = carInfoRowCurrent.ShiftNm;
                carInfo.WheelDriveMethodNm = carInfoRowCurrent.WheelDriveMethodNm;
                carInfo.AddiCarSpec1 = carInfoRowCurrent.AddiCarSpec1;
                carInfo.AddiCarSpec2 = carInfoRowCurrent.AddiCarSpec2;
                carInfo.AddiCarSpec3 = carInfoRowCurrent.AddiCarSpec3;
                carInfo.AddiCarSpec4 = carInfoRowCurrent.AddiCarSpec4;
                carInfo.AddiCarSpec5 = carInfoRowCurrent.AddiCarSpec5;
                carInfo.AddiCarSpec6 = carInfoRowCurrent.AddiCarSpec6;
                carInfo.AddiCarSpecTitle1 = carInfoRowCurrent.AddiCarSpecTitle1;
                carInfo.AddiCarSpecTitle2 = carInfoRowCurrent.AddiCarSpecTitle2;
                carInfo.AddiCarSpecTitle3 = carInfoRowCurrent.AddiCarSpecTitle3;
                carInfo.AddiCarSpecTitle4 = carInfoRowCurrent.AddiCarSpecTitle4;
                carInfo.AddiCarSpecTitle5 = carInfoRowCurrent.AddiCarSpecTitle5;
                carInfo.AddiCarSpecTitle6 = carInfoRowCurrent.AddiCarSpecTitle6;
                carInfo.RelevanceModel = carInfoRowCurrent.RelevanceModel;
                carInfo.SubCarNmCd = carInfoRowCurrent.SubCarNmCd;
                carInfo.ModelGradeSname = carInfoRowCurrent.ModelGradeSname;
                carInfo.BlockIllustrationCd = carInfoRowCurrent.BlockIllustrationCd;
                carInfo.ThreeDIllustNo = carInfoRowCurrent.ThreeDIllustNo;
                carInfo.PartsDataOfferFlag = carInfoRowCurrent.PartsDataOfferFlag;
                carInfo.InspectMaturityDate = carInfoRowCurrent.InspectMaturityDate;
                carInfo.LTimeCiMatDate = carInfoRowCurrent.LTimeCiMatDate;
                carInfo.CarInspectYear = carInfoRowCurrent.CarInspectYear;
                carInfo.Mileage = carInfoRowCurrent.Mileage;
                carInfo.CarNo = carInfoRowCurrent.CarNo;
                carInfo.FullModelFixedNoAry = carInfoRowCurrent.FullModelFixedNoAry;
                carInfo.FreeSrchMdlFxdNoAry = carInfoRowCurrent.FreeSrchMdlFxdNoAry; // 自由検索型式固定番号配列 // 2010/05/30
                //carInfo.CategoryObjAry = carInfoRowCurrent.CategoryObjAry;
                carInfo.CategoryObjAry = "";
                carInfo.ProduceTypeOfYearInput = carInfoRowCurrent.ProduceTypeOfYearInput;
                carInfo.ColorCode = carInfoRowCurrent.ColorCode;
                carInfo.ColorName1 = carInfoRowCurrent.ColorName1;
                carInfo.TrimCode = carInfoRowCurrent.TrimCode;
                carInfo.TrimName = carInfoRowCurrent.TrimName;
                carInfo.AcceptAnOrderNo = carInfoRowCurrent.AcceptAnOrderNo;
                carInfo.CarNote = carInfoRowCurrent.CarNote;
                carInfo.CarNoteCode = carInfoRowCurrent.CarNoteCode; // ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218
                carInfo.CarAddInfo1 = carInfoRowCurrent.CarAddInfo1;
                carInfo.CarAddInfo2 = carInfoRowCurrent.CarAddInfo2;
                carInfo.EngineModel = carInfoRowCurrent.EngineModel;

                string stProduceTypeOfYear = this.GetProduceTypeOfYear(carInfoRowCurrent.StProduceTypeOfYear);
                string edProduceTypeOfYear = this.GetProduceTypeOfYear(carInfoRowCurrent.EdProduceTypeOfYear);

                stProduceTypeOfYear = stProduceTypeOfYear.PadRight(7, ' ');
                edProduceTypeOfYear = edProduceTypeOfYear.PadRight(7, ' ');
                if ((string.IsNullOrEmpty(stProduceTypeOfYear.Trim())) && (string.IsNullOrEmpty(edProduceTypeOfYear.Trim())))
                {
                    carInfo.ProduceTypeOfYearRange = string.Empty;
                }
                else
                {
                    carInfo.ProduceTypeOfYearRange = stProduceTypeOfYear + "-" + edProduceTypeOfYear;
                }

                string stProduceFrameNo = (carInfoRowCurrent.StProduceFrameNo != 0) ? string.Format("{0,8:########}", carInfoRowCurrent.StProduceFrameNo) : string.Empty;
                string edProduceFrameNo = (carInfoRowCurrent.EdProduceFrameNo != 0) ? string.Format("{0,8:########}", carInfoRowCurrent.EdProduceFrameNo) : string.Empty;

                stProduceFrameNo = stProduceFrameNo.PadLeft(8, ' ');
                edProduceFrameNo = edProduceFrameNo.PadLeft(8, ' ');
                if ((string.IsNullOrEmpty(stProduceFrameNo.Trim())) && (string.IsNullOrEmpty(edProduceFrameNo.Trim())))
                {
                    carInfo.ProduceFrameNoRange = string.Empty;
                }
                else
                {
                    carInfo.ProduceFrameNoRange = stProduceFrameNo + "-" + edProduceFrameNo;
                }

                // PMNS:国産/外車区分セット
                // --- ADD 2013/03/21 ---------->>>>>
                carInfo.DomesticForeignCode = carInfoRowCurrent.DomesticForeignCode;
                // --- ADD 2013/03/21 ----------<<<<<
            }

            return status;
        }

        /// <summary>
        /// カラー情報取得処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="colorInfoList">カラー情報</param>
        public void GetColorInfo(string carRelationGuid, out ArrayList colorInfoList)
        {
            Guid guid = new Guid(carRelationGuid);

            // カラー情報取得処理
            PMKEN01010E.ColorCdInfoDataTable colorCdInfoDataTable = this.GetColorInfo(guid);

            colorInfoList = new ArrayList();

            if (colorCdInfoDataTable == null) return; // 2010/09/24

            foreach (PMKEN01010E.ColorCdInfoRow row in colorCdInfoDataTable)
            {
                ColorInfo colorInfo = new ColorInfo();
                colorInfo.ColorCode = row.ColorCode;
                colorInfo.ColorName = row.ColorName1;
                colorInfo.MakerCode = row.MakerCode;
                colorInfo.ModelCode = row.ModelCode;
                colorInfo.ModelSubCode = row.ModelSubCode;
                colorInfo.SelectionState = row.SelectionState;

                colorInfoList.Add(colorInfo);
            }
        }

        /// <summary>
        /// 選択カラー情報取得処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        public void GetSelectColorInfo(string carRelationGuid, out ColorInfo colorInfo)
        {
            Guid guid = new Guid(carRelationGuid);

            // 選択カラー情報取得処理
            PMKEN01010E.ColorCdInfoRow colorInfoRow = this.GetSelectColorInfo(guid);

            colorInfo = new ColorInfo();
            if (colorInfoRow != null)
            {
                colorInfo.ColorCode = colorInfoRow.ColorCode;
                colorInfo.ColorName = colorInfoRow.ColorName1;
                colorInfo.MakerCode = colorInfoRow.MakerCode;
                colorInfo.ModelCode = colorInfoRow.ModelCode;
                colorInfo.ModelSubCode = colorInfoRow.ModelSubCode;
                colorInfo.SelectionState = colorInfoRow.SelectionState;
            }
        }

        /// <summary>
        /// トリム情報取得処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        public void GetTrimInfo(string carRelationGuid, out ArrayList trimInfoList)
        {
            Guid guid = new Guid(carRelationGuid);

            // トリム情報取得処理
            PMKEN01010E.TrimCdInfoDataTable trimCdInfoDataTable = this.GetTrimInfo(guid);
            trimInfoList = new ArrayList();

            if (trimCdInfoDataTable == null) return; // 2010/09/24

            foreach (PMKEN01010E.TrimCdInfoRow row in trimCdInfoDataTable)
            {
                TrimInfo trimInfo = new TrimInfo();

                trimInfo.MakerCode = row.MakerCode;
                trimInfo.ModelCode = row.ModelCode;
                trimInfo.ModelSubCode = row.ModelSubCode;
                trimInfo.TrimCode = row.TrimCode;
                trimInfo.TrimName = row.TrimName;
                trimInfo.SelectionState = row.SelectionState;

                trimInfoList.Add(trimInfo);
            }
        }

        /// <summary>
        /// 選択トリム情報取得処理
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void GetSelectTrimInfo(string carRelationGuid, out TrimInfo trimInfo)
        {
            Guid guid = new Guid(carRelationGuid);

            PMKEN01010E.TrimCdInfoRow trimInfoRow = this.GetSelectTrimInfo(guid);

            trimInfo = new TrimInfo();
            if (trimInfoRow != null)
            {
                trimInfo.MakerCode = trimInfoRow.MakerCode;
                trimInfo.ModelCode = trimInfoRow.ModelCode;
                trimInfo.ModelSubCode = trimInfoRow.ModelSubCode;
                trimInfo.TrimCode = trimInfoRow.TrimCode;
                trimInfo.TrimName = trimInfoRow.TrimName;
                trimInfo.SelectionState = trimInfoRow.SelectionState;
            }
        }

        /// <summary>
        /// 装備情報取得処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        public void GetEquipInfo(string carRelationGuid, out ArrayList cEqpDefDspInfoList)
        {
            Guid guid = new Guid(carRelationGuid);

            PMKEN01010E.CEqpDefDspInfoDataTable cEqpDefDspInfoDataTable = this.GetEquipInfo(guid);
            cEqpDefDspInfoList = new ArrayList();

            if (cEqpDefDspInfoDataTable == null) return; // 2010/09/24

            Dictionary<string, Infragistics.Win.ValueList> lst = cEqpDefDspInfoDataTable.GetEquipUIInfo();
            foreach (string key in lst.Keys)
            {
                Infragistics.Win.ValueList valueList = lst[key];

                foreach (Infragistics.Win.ValueListItem item in valueList.ValueListItems)
                {
                    CEqpDefDspInfo cEqpDefDspInfo = new CEqpDefDspInfo();
                    cEqpDefDspInfo.EquipmentGenreNm = key;
                    cEqpDefDspInfo.EquipmentName = item.ToString();
                    if (item == (Infragistics.Win.ValueListItem)valueList.SelectedItem)
                    {
                        cEqpDefDspInfo.SelectionState = true;
                    }
                    else
                    {
                        cEqpDefDspInfo.SelectionState = false;
                    }
                    
                    cEqpDefDspInfoList.Add(cEqpDefDspInfo);
                }
            }

            //foreach (PMKEN01010E.CEqpDefDspInfoRow row in cEqpDefDspInfoDataTable)
            //{
            //    CEqpDefDspInfo cEqpDefDspInfo = new CEqpDefDspInfo();
            //    cEqpDefDspInfo.EquipmentCode = row.EquipmentCode;
            //    cEqpDefDspInfo.EquipmentDispOrder = row.EquipmentDispOrder;
            //    cEqpDefDspInfo.EquipmentGenreCd = row.EquipmentGenreCd;
            //    cEqpDefDspInfo.EquipmentGenreNm = row.EquipmentGenreNm;
            //    cEqpDefDspInfo.EquipmentIconCode = row.EquipmentIconCode;
            //    cEqpDefDspInfo.EquipmentName = row.EquipmentName;
            //    cEqpDefDspInfo.EquipmentShortName = row.EquipmentShortName;
            //    cEqpDefDspInfo.MakerCode = row.MakerCode;
            //    cEqpDefDspInfo.ModelCode = row.ModelCode;
            //    cEqpDefDspInfo.ModelSubCode = row.ModelSubCode;
            //    cEqpDefDspInfo.SelectionState = row.SelectionState;
            //    cEqpDefDspInfo.SystematicCode = row.SystematicCode;

            //    cEqpDefDspInfoList.Add(cEqpDefDspInfo);
            //}
        }

        /// <summary>
        /// カラー情報
        /// </summary>
        public class ColorInfo
        {
            public ColorInfo()
            {
            }

            public string _colorCode;
            public string ColorCode
            {
                get { return _colorCode; }
                set { _colorCode = value; }
            }

            public string _colorName = "";
            public string ColorName
            {
                get { return _colorName; }
                set { _colorName = value; }
            }

            public int _makerCode;
            public int MakerCode
            {
                get { return _makerCode; }
                set { _makerCode = value; }
            }

            public int _modelCode;
            public int ModelCode
            {
                get { return _modelCode; }
                set { _modelCode = value; }
            }

            public int _modelSubCode;
            public int ModelSubCode
            {
                get { return _modelSubCode; }
                set { _modelSubCode = value; }
            }

            public bool _selectionState;
            public bool SelectionState
            {
                get { return _selectionState; }
                set { _selectionState = value; }
            }
        }

        /// <summary>
        /// トリム情報
        /// </summary>
        public class TrimInfo
        {
            public TrimInfo()
            {
            }

            public int _makerCode;
            public int MakerCode
            {
                get { return _makerCode; }
                set { _makerCode = value; }
            }

            public int _modelCode;
            public int ModelCode
            {
                get { return _modelCode; }
                set { _modelCode = value; }
            }

            public int _modelSubCode;
            public int ModelSubCode
            {
                get { return _modelSubCode; }
                set { _modelSubCode = value; }
            }

            public string _trimCode;
            public string TrimCode
            {
                get { return _trimCode; }
                set { _trimCode = value; }
            }

            public string _trimName;
            public string TrimName
            {
                get { return _trimName; }
                set { _trimName = value; }
            }

            public bool _selectionState;
            public bool SelectionState
            {
                get { return _selectionState; }
                set { _selectionState = value; }
            }
        }

        /// <summary>
        /// 装備情報
        /// </summary>
        public class CEqpDefDspInfo
        {
            public CEqpDefDspInfo()
            {
            }

            public int _equipmentCode;
            public int EquipmentCode
            {
                get { return _equipmentCode; }
                set { _equipmentCode = value; }
            }

            public int _equipmentDispOrder;
            public int EquipmentDispOrder
            {
                get { return _equipmentDispOrder; }
                set { _equipmentDispOrder = value; }
            }

            public int _equipmentGenreCd;
            public int EquipmentGenreCd
            {
                get { return _equipmentGenreCd; }
                set { _equipmentGenreCd = value; }
            }

            public string _equipmentGenreNm = "";
            public string EquipmentGenreNm
            {
                get { return _equipmentGenreNm; }
                set { _equipmentGenreNm = value; }
            }

            public int _equipmentIconCode;
            public int EquipmentIconCode
            {
                get { return _equipmentIconCode; }
                set { _equipmentIconCode = value; }
            }

            public string _equipmentName = "";
            public string EquipmentName
            {
                get { return _equipmentName; }
                set { _equipmentName = value; }
            }

            public string _equipmentShortName = "";
            public string EquipmentShortName
            {
                get { return _equipmentShortName; }
                set { _equipmentShortName = value; }
            }

            public int _makerCode;
            public int MakerCode
            {
                get { return _makerCode; }
                set { _makerCode = value; }
            }

            public int _modelCode;
            public int ModelCode
            {
                get { return _modelCode; }
                set { _modelCode = value; }
            }

            public int _modelSubCode;
            public int ModelSubCode
            {
                get { return _modelSubCode; }
                set { _modelSubCode = value; }
            }

            public bool _selectionState;
            public bool SelectionState
            {
                get { return _selectionState; }
                set { _selectionState = value; }
            }

            public int _systematicCode;
            public int SystematicCode
            {
                get { return _systematicCode; }
                set { _systematicCode = value; }
            }
        }

        /// <summary>
        /// 諸元情報
        /// </summary>
        public class CarSpecInfo
        {
            public CarSpecInfo()
            {
            }

            // グレード
            public string _modelGradeNm;
            public string ModelGradeNm
            {
                get { return _modelGradeNm; }
                set { _modelGradeNm = value; }
            }

            // ボディ
            public string _bodyName;
            public string BodyName
            {
                get { return _bodyName; }
                set { _bodyName = value; }
            }

            // ドア
            public int _doorCount;
            public int DoorCount
            {
                get { return _doorCount; }
                set { _doorCount = value; }
            }

            // Ｅ区分
            public string _eDivNm;
            public string EDivNm
            {
                get { return _eDivNm; }
                set { _eDivNm = value; }
            }

            // 排気量
            public string _engineDisplaceNm;
            public string EngineDisplaceNm
            {
                get { return _engineDisplaceNm; }
                set { _engineDisplaceNm = value; }
            }

            // エンジン
            public string _engineModelNm;
            public string EngineModelNm
            {
                get { return _engineModelNm; }
                set { _engineModelNm = value; }
            }

            // シフト
            public string _shiftNm;
            public string ShiftNm
            {
                get { return _shiftNm; }
                set { _shiftNm = value; }
            }

            // ミッション
            public string _transmissionNm;
            public string TransmissionNm
            {
                get { return _transmissionNm; }
                set { _transmissionNm = value; }
            }

            // 駆動方式
            public string _wheelDriveMethodNm;
            public string WheelDriveMethodNm
            {
                get { return _wheelDriveMethodNm; }
                set { _wheelDriveMethodNm = value; }
            }

            // 追加諸元１
            public string _addiCarSpec1;
            public string AddiCarSpec1
            {
                get { return _addiCarSpec1; }
                set { _addiCarSpec1 = value; }
            }

            // 追加諸元２
            public string _addiCarSpec2;
            public string AddiCarSpec2
            {
                get { return _addiCarSpec2; }
                set { _addiCarSpec2 = value; }
            }

            // 追加諸元３
            public string _addiCarSpec3;
            public string AddiCarSpec3
            {
                get { return _addiCarSpec3; }
                set { _addiCarSpec3 = value; }
            }

            // 追加諸元４
            public string _addiCarSpec4;
            public string AddiCarSpec4
            {
                get { return _addiCarSpec4; }
                set { _addiCarSpec4 = value; }
            }

            // 追加諸元５
            public string _addiCarSpec5;
            public string AddiCarSpec5
            {
                get { return _addiCarSpec5; }
                set { _addiCarSpec5 = value; }
            }

            // 追加諸元６
            public string _addiCarSpec6;
            public string AddiCarSpec6
            {
                get { return _addiCarSpec6; }
                set { _addiCarSpec6 = value; }
            }
        }

        /// <summary>
        /// 車両情報
        /// </summary>
        public class CarInfo
        {
            public CarInfo()
            {
            }

            private string _carRelationGuid = "";

            public string CarRelationGuid
            {
                get { return _carRelationGuid; }
                set { _carRelationGuid = value; }
            }

            private int _customerCode;

            public int CustomerCode
            {
                get { return _customerCode; }
                set { _customerCode = value; }
            }

            private int _carMngNo;

            public int CarMngNo
            {
                get { return _carMngNo; }
                set { _carMngNo = value; }
            }

            private string _carMngCode = "";

            public string CarMngCode
            {
                get { return _carMngCode; }
                set { _carMngCode = value; }
            }

            private int _numberPlate1Code;

            public int NumberPlate1Code
            {
                get { return _numberPlate1Code; }
                set { _numberPlate1Code = value; }
            }

            private string _numberPlate1Name = "";

            public string NumberPlate1Name
            {
                get { return _numberPlate1Name; }
                set { _numberPlate1Name = value; }
            }

            private string _numberPlate2 = "";

            public string NumberPlate2
            {
                get { return _numberPlate2; }
                set { _numberPlate2 = value; }
            }

            private string _numberPlate3 = "";

            public string NumberPlate3
            {
                get { return _numberPlate3; }
                set { _numberPlate3 = value; }
            }

            private int _numberPlate4;

            public int NumberPlate4
            {
                get { return _numberPlate4; }
                set { _numberPlate4 = value; }
            }

            private DateTime _entryDate;

            public DateTime EntryDate
            {
                get { return _entryDate; }
                set { _entryDate = value; }
            }

            private int _firstEntryDate;

            public int FirstEntryDate
            {
                get { return _firstEntryDate; }
                set { _firstEntryDate = value; }
            }

            private int _makerCode;

            public int MakerCode
            {
                get { return _makerCode; }
                set { _makerCode = value; }
            }

            private string _makerFullName = "";

            public string MakerFullName
            {
                get { return _makerFullName; }
                set { _makerFullName = value; }
            }

            private string _makerHalfName = "";

            public string MakerHalfName
            {
                get { return _makerHalfName; }
                set { _makerHalfName = value; }
            }

            private int _modelCode;

            public int ModelCode
            {
                get { return _modelCode; }
                set { _modelCode = value; }
            }

            private int _modelSubCode;

            public int ModelSubCode
            {
                get { return _modelSubCode; }
                set { _modelSubCode = value; }
            }

            private string _modelFullName = "";

            public string ModelFullName
            {
                get { return _modelFullName; }
                set { _modelFullName = value; }
            }

            private string _modelHalfName = "";

            public string ModelHalfName
            {
                get { return _modelHalfName; }
                set { _modelHalfName = value; }
            }

            private int _systematicCode;

            public int SystematicCode
            {
                get { return _systematicCode; }
                set { _systematicCode = value; }
            }

            private string _systematicName = "";

            public string SystematicName
            {
                get { return _systematicName; }
                set { _systematicName = value; }
            }

            private int _produceTypeOfYearCd;

            public int ProduceTypeOfYearCd
            {
                get { return _produceTypeOfYearCd; }
                set { _produceTypeOfYearCd = value; }
            }

            private string _produceTypeOfYearNm = "";

            public string ProduceTypeOfYearNm
            {
                get { return _produceTypeOfYearNm; }
                set { _produceTypeOfYearNm = value; }
            }

            private DateTime _stProduceTypeOfYear;

            public DateTime StProduceTypeOfYear
            {
                get { return _stProduceTypeOfYear; }
                set { _stProduceTypeOfYear = value; }
            }

            private DateTime _edProduceTypeOfYear;

            public DateTime EdProduceTypeOfYear
            {
                get { return _edProduceTypeOfYear; }
                set { _edProduceTypeOfYear = value; }
            }

            private int _doorCount;

            public int DoorCount
            {
                get { return _doorCount; }
                set { _doorCount = value; }
            }

            private int _bodyNameCode;

            public int BodyNameCode
            {
                get { return _bodyNameCode; }
                set { _bodyNameCode = value; }
            }

            private string _bodyName = "";

            public string BodyName
            {
                get { return _bodyName; }
                set { _bodyName = value; }
            }

            private string _exhaustGasSign;

            public string ExhaustGasSign
            {
                get { return _exhaustGasSign; }
                set { _exhaustGasSign = value; }
            }

            private string _seriesModel = "";

            public string SeriesModel
            {
                get { return _seriesModel; }
                set { _seriesModel = value; }
            }

            private string _categorySignModel = "";

            public string CategorySignModel
            {
                get { return _categorySignModel; }
                set { _categorySignModel = value; }
            }

            private string _fullModel = "";

            public string FullModel
            {
                get { return _fullModel; }
                set { _fullModel = value; }
            }

            private int _modelDesignationNo;

            public int ModelDesignationNo
            {
                get { return _modelDesignationNo; }
                set { _modelDesignationNo = value; }
            }

            private int _categoryNo;

            public int CategoryNo
            {
                get { return _categoryNo; }
                set { _categoryNo = value; }
            }

            private string _frameModel = "";

            public string FrameModel
            {
                get { return _frameModel; }
                set { _frameModel = value; }
            }

            private string _frameNo = "";

            public string FrameNo
            {
                get { return _frameNo; }
                set { _frameNo = value; }
            }

            private int _searchFrameNo;

            public int SearchFrameNo
            {
                get { return _searchFrameNo; }
                set { _searchFrameNo = value; }
            }

            private int _stProduceFrameNo;

            public int StProduceFrameNo
            {
                get { return _stProduceFrameNo; }
                set { _stProduceFrameNo = value; }
            }

            private int _edProduceFrameNo;

            public int EdProduceFrameNo
            {
                get { return _edProduceFrameNo; }
                set { _edProduceFrameNo = value; }
            }

            private string _modelGradeNm = "";

            public string ModelGradeNm
            {
                get { return _modelGradeNm; }
                set { _modelGradeNm = value; }
            }

            private string _engineModelNm = "";

            public string EngineModelNm
            {
                get { return _engineModelNm; }
                set { _engineModelNm = value; }
            }

            private string _engineDisplaceNm = "";

            public string EngineDisplaceNm
            {
                get { return _engineDisplaceNm; }
                set { _engineDisplaceNm = value; }
            }

            private string _eDivNm = "";

            public string EDivNm
            {
                get { return _eDivNm; }
                set { _eDivNm = value; }
            }

            private string _transmissionNm = "";

            public string TransmissionNm
            {
                get { return _transmissionNm; }
                set { _transmissionNm = value; }
            }

            private string _shiftNm = "";

            public string ShiftNm
            {
                get { return _shiftNm; }
                set { _shiftNm = value; }
            }

            private string _wheelDriveMethodNm = "";

            public string WheelDriveMethodNm
            {
                get { return _wheelDriveMethodNm; }
                set { _wheelDriveMethodNm = value; }
            }

            private string _addiCarSpec1 = "";

            public string AddiCarSpec1
            {
                get { return _addiCarSpec1; }
                set { _addiCarSpec1 = value; }
            }

            private string _addiCarSpec2 = "";

            public string AddiCarSpec2
            {
                get { return _addiCarSpec2; }
                set { _addiCarSpec2 = value; }
            }

            private string _addiCarSpec3 = "";

            public string AddiCarSpec3
            {
                get { return _addiCarSpec3; }
                set { _addiCarSpec3 = value; }
            }

            private string _addiCarSpec4 = "";

            public string AddiCarSpec4
            {
                get { return _addiCarSpec4; }
                set { _addiCarSpec4 = value; }
            }

            private string _addiCarSpec5 = "";

            public string AddiCarSpec5
            {
                get { return _addiCarSpec5; }
                set { _addiCarSpec5 = value; }
            }

            private string _addiCarSpec6 = "";

            public string AddiCarSpec6
            {
                get { return _addiCarSpec6; }
                set { _addiCarSpec6 = value; }
            }

            private string _addiCarSpecTitle1 = "";

            public string AddiCarSpecTitle1
            {
                get { return _addiCarSpecTitle1; }
                set { _addiCarSpecTitle1 = value; }
            }

            private string _addiCarSpecTitle2 = "";

            public string AddiCarSpecTitle2
            {
                get { return _addiCarSpecTitle2; }
                set { _addiCarSpecTitle2 = value; }
            }

            private string _addiCarSpecTitle3 = "";

            public string AddiCarSpecTitle3
            {
                get { return _addiCarSpecTitle3; }
                set { _addiCarSpecTitle3 = value; }
            }

            private string _addiCarSpecTitle4 = "";

            public string AddiCarSpecTitle4
            {
                get { return _addiCarSpecTitle4; }
                set { _addiCarSpecTitle4 = value; }
            }

            private string _addiCarSpecTitle5 = "";

            public string AddiCarSpecTitle5
            {
                get { return _addiCarSpecTitle5; }
                set { _addiCarSpecTitle5 = value; }
            }

            private string _addiCarSpecTitle6 = "";

            public string AddiCarSpecTitle6
            {
                get { return _addiCarSpecTitle6; }
                set { _addiCarSpecTitle6 = value; }
            }

            private string _relevanceModel = "";

            public string RelevanceModel
            {
                get { return _relevanceModel; }
                set { _relevanceModel = value; }
            }

            private int _subCarNmCd;

            public int SubCarNmCd
            {
                get { return _subCarNmCd; }
                set { _subCarNmCd = value; }
            }

            private string _modelGradeSname = "";

            public string ModelGradeSname
            {
                get { return _modelGradeSname; }
                set { _modelGradeSname = value; }
            }

            private int _blockIllustrationCd;

            public int BlockIllustrationCd
            {
                get { return _blockIllustrationCd; }
                set { _blockIllustrationCd = value; }
            }

            private int _threeDIllustNo;

            public int ThreeDIllustNo
            {
                get { return _threeDIllustNo; }
                set { _threeDIllustNo = value; }
            }

            private int _partsDataOfferFlag;

            public int PartsDataOfferFlag
            {
                get { return _partsDataOfferFlag; }
                set { _partsDataOfferFlag = value; }
            }

            private DateTime _inspectMaturityDate;

            public DateTime InspectMaturityDate
            {
                get { return _inspectMaturityDate; }
                set { _inspectMaturityDate = value; }
            }

            private DateTime _lTimeCiMatDate;

            public DateTime LTimeCiMatDate
            {
                get { return _lTimeCiMatDate; }
                set { _lTimeCiMatDate = value; }
            }

            private int _carInspectYear;

            public int CarInspectYear
            {
                get { return _carInspectYear; }
                set { _carInspectYear = value; }
            }

            private int _mileage;

            public int Mileage
            {
                get { return _mileage; }
                set { _mileage = value; }
            }

            private string _carNo = "";

            public string CarNo
            {
                get { return _carNo; }
                set { _carNo = value; }
            }

            private int[] _fullModelFixedNoAry;

            public int[] FullModelFixedNoAry
            {
                get { return _fullModelFixedNoAry; }
                set { _fullModelFixedNoAry = value; }
            }

            //>>>2010/05/30
            private string[] _freeSrchMdlFxdNoAry;

            public string[] FreeSrchMdlFxdNoAry
            {
                get { return _freeSrchMdlFxdNoAry; }
                set { _freeSrchMdlFxdNoAry = value; }
            }
            //<<<2010/05/30

            private string _categoryObjAry = "";

            public string CategoryObjAry
            {
                get { return _categoryObjAry; }
                set { _categoryObjAry = value; }
            }

            private int _produceTypeOfYearInput;

            public int ProduceTypeOfYearInput
            {
                get { return _produceTypeOfYearInput; }
                set { _produceTypeOfYearInput = value; }
            }

            private string _colorCode = "";

            public string ColorCode
            {
                get { return _colorCode; }
                set { _colorCode = value; }
            }

            private string _colorName1 = "";

            public string ColorName1
            {
                get { return _colorName1; }
                set { _colorName1 = value; }
            }

            private string _trimCode = "";

            public string TrimCode
            {
                get { return _trimCode; }
                set { _trimCode = value; }
            }

            private string _trimName = "";

            public string TrimName
            {
                get { return _trimName; }
                set { _trimName = value; }
            }

            private int _acceptAnOrderNo;

            public int AcceptAnOrderNo
            {
                get { return _acceptAnOrderNo; }
                set { _acceptAnOrderNo = value; }
            }

            private string _carNote = "";

            public string CarNote
            {
                get { return _carNote; }
                set { _carNote = value; }
            }

            private string _carAddInfo1 = "";

            public string CarAddInfo1
            {
                get { return _carAddInfo1; }
                set { _carAddInfo1 = value; }
            }

            private string _carAddInfo2 = "";

            public string CarAddInfo2
            {
                get { return _carAddInfo2; }
                set { _carAddInfo2 = value; }
            }

            private string _engineModel = "";

            public string EngineModel
            {
                get { return _engineModel; }
                set { _engineModel = value; }
            }

            public string _produceTypeOfYearRange = "";

            public string ProduceTypeOfYearRange
            {
                get { return _produceTypeOfYearRange; }
                set { _produceTypeOfYearRange = value; }
            }

            public string _produceFrameNoRange = "";

            public string ProduceFrameNoRange
            {
                get { return _produceFrameNoRange; }
                set { _produceFrameNoRange = value; }
            }

            // --- ADD 2013/03/21 ---------->>>>>
            public int _domesticForeignCode;

            public int DomesticForeignCode
            {
                get { return _domesticForeignCode; }
                set { _domesticForeignCode = value; }
            }
            // --- ADD 2013/03/21 ----------<<<<<

            // --- ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218 ------------------------------>>>>>
            private int _carNoteCode;

            public int CarNoteCode
            {
                get { return _carNoteCode; }
                set { _carNoteCode = value; }
            }
            // --- ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218 ------------------------------<<<<<
        }

        #region ---- guid ----
        /// <summary>
        /// カラー情報選択処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="colorCode">カラーコード</param>
        /// <returns>true:該当あり正常選択 false:該当なし</returns>
        public bool SelectColorInfo(string carRelationGuid, string colorCode)
        {
            return this.SelectColorInfo(new Guid(carRelationGuid), colorCode);
        }

        /// <summary>
        /// トリム情報選択処理
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="trimCode">トリムコード</param>
        /// <returns>true:該当あり正常選択 false:該当なし</returns>
        public bool SelectTrimInfo(string carRelationGuid, string trimCode)
        {
            return this.SelectTrimInfo(new Guid(carRelationGuid), trimCode);
        }

        /// <summary>
        /// 装備情報選択処理
        /// </summary>
        /// <param name="carRelationGuid"></param>
        /// <param name="equipmentGenreCd"></param>
        /// <param name="selectIndex"></param>
        /// <returns></returns>
        public bool SelectEquipInfo(string carRelationGuid, string equipmentGenreCd, string equipmentName)
        {
            int selectedIndex = 0;

            Guid guid = new Guid(carRelationGuid);

            PMKEN01010E.CEqpDefDspInfoDataTable cEqpDefDspInfoDataTable = this.GetEquipInfo(guid);
            Dictionary<string, Infragistics.Win.ValueList> lst = cEqpDefDspInfoDataTable.GetEquipUIInfo();

            Infragistics.Win.ValueList valueList = lst[equipmentGenreCd];

            foreach (Infragistics.Win.ValueListItem item in valueList.ValueListItems)
            {
                if (item.ToString() == equipmentName)
                {
                    valueList.SelectedItem = item;
                }
            }

            if (valueList != null) selectedIndex = valueList.SelectedIndex;

            return this.SelectEquipInfo(guid, equipmentGenreCd, selectedIndex);
        }

        /// <summary>
        /// 生産年式範囲チェック
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="firstEntryDate">年式</param>
        /// <returns>true:範囲内 false:範囲外</returns>
        public bool CheckProduceTypeOfYearRange(string carRelationGuid, int firstEntryDate)
        {
            return this.CheckProduceTypeOfYearRange(new Guid(carRelationGuid), firstEntryDate);
        }

        /// <summary>
        /// 車両検索データテーブル年式設定処理
        /// </summary>
        /// <param name="carRelationGuid"></param>
        /// <param name="firstEntryDate"></param>
        public void SettingCarModelUIDataFromFirstEntryDate(string carRelationGuid, int firstEntryDate)
        {
            this.SettingCarModelUIDataFromFirstEntryDate(new Guid(carRelationGuid), firstEntryDate);
        }

        /// <summary>
        /// 車台番号範囲チェック
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="inputFrameNo">車台番号入力文字列</param>
        /// <param name="searchFrameNo">車台番号</param>
        /// <returns>True:範囲内、False:範囲外</returns>
        public bool CheckProduceFrameNo(string carRelationGuid, string inputFrameNo, int searchFrameNo)
        {
            return this.CheckProduceFrameNo(new Guid(carRelationGuid), inputFrameNo, searchFrameNo);
        }

        /// <summary>
        /// 車両検索データテーブル車台番号設定処理
        /// </summary>
        /// <param name="carRelationGuid"></param>
        /// <param name="frameNo"></param>
        public void SettingCarModelUIDataFromProduceFrameNo(string carRelationGuid, string frameNo)
        {
            this.SettingCarModelUIDataFromProduceFrameNo(new Guid(carRelationGuid), frameNo);
        }

        /// <summary>
        /// 対象年式取得処理(車台番号より取得)
        /// </summary>
        /// <param name="carRelationGuid">車両情報共通キー</param>
        /// <param name="frameNo">車台番号</param>
        /// <returns>年式(int)</returns>
        public int GetProduceTypeOfYear(string carRelationGuid, int frameNo)
        {
            return this.GetProduceTypeOfYear(new Guid(carRelationGuid), frameNo);
        }
        #endregion

        /// <summary>
        /// 管理番号のフォーカス処理
        /// </summary>
        /// <param name="carMngCode">管理番号</param>
        /// <param name="customerCode">得意先コード</param>
        /// <br>Note       :連番895 画面の番号管理検索モードの処理を追加する。</br>
        /// <br>Programmer : wangf</br>
        /// <br>Date       : 2011/08/04</br>
        /// <br>Update Note: 2011/11/15   鄧潘ハン  管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
        /// <br>Update Note: 2011/11/17   鄧潘ハン  管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
        /// <br>Update Note: 2011/11/18   鄧潘ハン  管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
        /// <br>Update Note: 2011/11/21   鄧潘ハン  管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
        /// <br>Update Note: 2011/11/25   鄧潘ハン  車両管理情報についての仕様変更</br>
        /// <returns></returns>
        public int AfterCarMngCodeFocus(string carMngCode, int customerCode, string enterpriseCode, int salesRowNo, out CarMangInputExtraInfo selectedInfo, out bool returnFlag, out bool clearCarInfoFlag)
        {
            int status = 0;
            returnFlag = false;
            clearCarInfoFlag = false;
            int inputflag = 1;//管理番号　0:異なる　1:同じ
            selectedInfo = new CarMangInputExtraInfo();
            int statusCache = 0; //ADD 鄧潘ハン 2011/11/25 Redmine#8075

            SalesInputDataSet.CarInfoRow carInfoRowCurrent = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);

            // ------------------ UPD wangf 2011/08/04 ------------->>>>>
            //if ((carInfoRowCurrent != null) &&
            //    (carInfoRowCurrent.CarMngCode != carMngCode))
            if ((carInfoRowCurrent != null) &&
                ((carInfoRowCurrent.CarMngCode != carMngCode) || (carMngCode.Contains("*"))))
            // ------------------ UPD wangf 2011/08/04 -------------<<<<<
            {
                this.SettingCarInfoRowFromCarMngCode(salesRowNo, carMngCode.Trim());

                inputflag = 0;
            }
            // --- ADD 2010/07/16 ---------->>>>>
            else
            {
                status = 3;    //ADD wangf 2011/08/04
                return status;
            }
            // --- ADD 2010/07/16 ----------<<<<<

            //管理番号でのガイド表示設定
            if (this._salesSlipInputInitDataAcs.Opt_CarMng == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                if (!string.IsNullOrEmpty(carMngCode))
                {
                    CarMngGuideParamInfo paramInfo = new CarMngGuideParamInfo();

                    paramInfo.EnterpriseCode = enterpriseCode;
                    // ガイドイベントフラグ
                    paramInfo.IsGuideClick = false;
                    // 「新規登録」行表示有り
                    paramInfo.IsDispNewRow = true;
                    // 管理番号絞り込み前方一致
                    paramInfo.IsCheckCarMngCode = true;
                    // 管理コード
                    paramInfo.CarMngCode = carMngCode;
                    // 管理コードの前方
                    //paramInfo.CheckCarMngCodeType = 1;    // DEL wangf 2011/08/04
                    paramInfo.CheckCarMngCodeType = this.CarMngSearchModeCheck(carMngCode);   //ADD wangf 2011/08/04
                    paramInfo.CarMngCode = paramInfo.CarMngCode.Replace("*", "");             //ADD wangf 2011/08/04
                    // 車輌管理区分チェック有り
                    paramInfo.IsCheckCarMngDivCd = true;

                    if (customerCode != 0)
                    {
                        switch (this.SalesSlip.CarMngDivCd)
                        {
                            case 0: // しない
                                break;
                            case 1: // 登録(確認)
                            case 2: // 登録(自動)
                                // 得意先表示なし
                                paramInfo.IsDispCustomerInfo = false;
                                //得意先コード絞り込み有り
                                paramInfo.IsCheckCustomerCode = true;
                                //得意先コード
                                paramInfo.CustomerCode = this.SalesSlip.CustomerCode;
                                break;
                            case 3: // 登録無
                                //得意先コード絞り込み有り
                                paramInfo.IsCheckCustomerCode = true;
                                //得意先コード
                                paramInfo.CustomerCode = this.SalesSlip.CustomerCode;
                                break;
                        }
                    }
                    else
                    {
                        // 得意先表示有り
                        paramInfo.IsDispCustomerInfo = true;
                        //得意先コード絞り込み無し
                        paramInfo.IsCheckCustomerCode = false;
                    }

                    if (this.SalesSlip.CustomerCode == 0)
                    {
                        status = CarMngInputAcs.GetInstance().ExecuteGuid(paramInfo, out selectedInfo);
                        statusCache = status; //ADD 鄧潘ハン 2011/11/25 Redmine#8075

                        int flag = 0;
                        if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                        {
                            returnFlag = true;

                            //ガイド表示後のフォーカス制御
                            if ("新規登録".Equals(selectedInfo.CarMngCode))
                            {
                                flag = 0;
                                inputflag = 0;
                            }
                            else
                            {
                                SalesSlipHeaderCopyData salesSlipHeaderCopyData = this.CacheCarInfo(selectedInfo);

                                // 車輌検索
                                CopySlipHeaderCarSearch(salesSlipHeaderCopyData, salesRowNo);

                                //フル型式固定番号配列があり
                                if (salesSlipHeaderCopyData.FullModelFixedNoAry != null &&
                                    salesSlipHeaderCopyData.FullModelFixedNoAry.Length > 0)
                                {
                                    flag = 1;
                                }
                                else
                                {
                                    flag = 0;
                                    inputflag = 1;

                                }
                            }
                        }
                        else if (status == (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN && (string.IsNullOrEmpty(selectedInfo.CarMngCode)))
                        {
                            flag = 0;
                        }
                        else
                        {
                            //新規登録
                            flag = 2;
                        }

                        status = flag;
                        //車輌情報をクリア処理
                        //if (flag == 0 && inputflag == 0)//DEL 鄧潘ハン 2011/11/25 Redmine#8075
                        if (flag == 0 && inputflag == 0 && statusCache == 0)//ADD 鄧潘ハン 2011/11/25 Redmine#8075
                        {
                            clearCarInfoFlag = true;
                            string tempCarMngCode = carMngCode;
                            this.ClearCarInfo();

                            //管理番号の値をセットする
                            this.SettingCarInfoRowFromCarMngCode(salesRowNo, tempCarMngCode);
                        }
                    }
                    else
                    {
                     
                        //---ADD 2011/11/15 ------------------------>>>>>
                        if (_scmHeaderIListSvForWebCheck != null && _scmHeaderIListSvForWebCheck.Count > 0 && _scmHeaderIListSvForWebCheck[0].InqOrdDivCd != 0)
                        {
                            //---ADD 2011/11/21 ------------------------------------->>>>>
                            //車輌管理区分しない
                            if (this.SalesSlip.CarMngDivCd != 0)
                            {
                                status = CarMngInputAcs.GetInstance().ExecuteGuid(paramInfo, out selectedInfo);
                                if (status == 0)
                                {
                                    string cacheCarMngCode = selectedInfo.CarMngCode;

                                    // ADD 2014/09/22 SCM仕掛一覧No.10598対応------------------------------>>>>>
                                    if ("新規登録".Equals(selectedInfo.CarMngCode))
                                    {
                                        cacheCarMngCode = carMngCode;
                                    }
                                    // ADD 2014/09/22 SCM仕掛一覧No.10598対応------------------------------<<<<<

                                    int cacheCustomerCode = selectedInfo.CustomerCode;
                                    int cacheCarMngNo = selectedInfo.CarMngNo;
                                    Guid CarRelationGuid = selectedInfo.CarRelationGuid;

                                    // ADD 2013/04/19 SCM障害№10521対応 ---------------------------------->>>>>
                                    int cacheNumberPlate1Code = selectedInfo.NumberPlate1Code;
                                    string cacheNumberPlate1Name = selectedInfo.NumberPlate1Name;
                                    string cacheNumberPlate2 = selectedInfo.NumberPlate2;
                                    string cacheNumberPlate3 = selectedInfo.NumberPlate3;
                                    int cacheNumberPlate4 = selectedInfo.NumberPlate4;
                                    // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------<<<<<

                                    selectedInfo = new CarMangInputExtraInfo();

                                    selectedInfo.CarMngCode = cacheCarMngCode;
                                    selectedInfo.CarRelationGuid = CarRelationGuid;

                                    selectedInfo.CustomerCode = cacheCustomerCode;
                                    selectedInfo.CarMngNo = cacheCarMngNo;

                                    // ADD 2013/04/19 SCM障害№10521対応 ---------------------------------->>>>>
                                    selectedInfo.NumberPlate1Code = cacheNumberPlate1Code;
                                    selectedInfo.NumberPlate1Name = cacheNumberPlate1Name;
                                    selectedInfo.NumberPlate2 = cacheNumberPlate2;
                                    selectedInfo.NumberPlate3 = cacheNumberPlate3;
                                    selectedInfo.NumberPlate4 = cacheNumberPlate4;
                                    // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------<<<<<

                                    SalesInputDataSet.CarInfoDataTable detailtable = this.CarInfoDataTable;
                                    if (detailtable.Rows.Count > 0)
                                    {
                                        foreach (SalesInputDataSet.CarInfoRow sourceRow in detailtable)
                                        {
                                            SalesInputDataSet.CarInfoRow targetRow = detailtable.FindByCarRelationGuid(sourceRow.CarRelationGuid);
                                            targetRow.CarMngCode = cacheCarMngCode;

                                            targetRow.CustomerCode = cacheCustomerCode;
                                            targetRow.CarMngNo = cacheCarMngNo;

                                            // ADD 2013/04/19 SCM障害№10521対応 ---------------------------------->>>>>
                                            targetRow.NumberPlate1Code = cacheNumberPlate1Code;
                                            targetRow.NumberPlate1Name = cacheNumberPlate1Name;
                                            targetRow.NumberPlate2 = cacheNumberPlate2;
                                            targetRow.NumberPlate3 = cacheNumberPlate3;
                                            targetRow.NumberPlate4 = cacheNumberPlate4;
                                            // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------<<<<<
                                        }
                                    }
                                    else
                                    {
                                        SalesInputDataSet.CarInfoRow carInfoRow = detailtable.NewCarInfoRow();
                                        carInfoRow.CarMngCode = cacheCarMngCode;
                                        carInfoRow.CarRelationGuid = CarRelationGuid;
                                        carInfoRow.CustomerCode = cacheCustomerCode;
                                        carInfoRow.CarMngNo = cacheCarMngNo;
                                        // ADD 2013/04/19 SCM障害№10521対応 ---------------------------------->>>>>
                                        carInfoRow.NumberPlate1Code = cacheNumberPlate1Code;
                                        carInfoRow.NumberPlate1Name = cacheNumberPlate1Name;
                                        carInfoRow.NumberPlate2 = cacheNumberPlate2;
                                        carInfoRow.NumberPlate3 = cacheNumberPlate3;
                                        carInfoRow.NumberPlate4 = cacheNumberPlate4;
                                        // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------<<<<<

                                        detailtable.AddCarInfoRow(carInfoRow);
                                    }
                                
                                }
                            }
                            //---ADD 2011/11/21 -------------------------------------<<<<<

                            status = 10; // ADD 2011/11/18
                            return status;
                        }
                        else 
                        {
                        //---ADD 2011/11/15 ------------------------<<<<<
                            //車輌管理区分しない
                            if (this.SalesSlip.CarMngDivCd != 0)
                            {
                                status = CarMngInputAcs.GetInstance().ExecuteGuid(paramInfo, out selectedInfo);
                                statusCache = status; //ADD 鄧潘ハン 2011/11/25 Redmine#8075

                                int flag = 0;
                                if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                                {
                                    returnFlag = true;

                                    //ガイド表示後のフォーカス制御
                                    if ("新規登録".Equals(selectedInfo.CarMngCode))
                                    {
                                        flag = 0;
                                        inputflag = 0;
                                    }
                                    else
                                    {
                                        SalesSlipHeaderCopyData salesSlipHeaderCopyData = this.CacheCarInfo(selectedInfo);

                                        // 車輌検索
                                        CopySlipHeaderCarSearch(salesSlipHeaderCopyData, salesRowNo);

                                        //フル型式固定番号配列があり
                                        if (salesSlipHeaderCopyData.FullModelFixedNoAry != null &&
                                            salesSlipHeaderCopyData.FullModelFixedNoAry.Length > 0)
                                        {
                                            flag = 1;
                                        }
                                        else
                                        {
                                            flag = 0;
                                            inputflag = 1;

                                        }
                                    }
                                }
                                else if (status == (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN && (string.IsNullOrEmpty(selectedInfo.CarMngCode)))
                                {
                                    flag = 0;
                                }
                                else
                                {
                                    //新規登録
                                    flag = 2;
                                }

                                status = flag;

                                //車輌情報をクリア処理
                                //if (flag == 0 && inputflag == 0//DEL 鄧潘ハン 2011/11/25 Redmine#8075
                                if (flag == 0 && inputflag == 0 && statusCache == 0)//ADD 鄧潘ハン 2011/11/25 Redmine#8075
                                {
                                    clearCarInfoFlag = true;
                                    string tempCarMngCode = carMngCode;
                                    this.ClearCarInfo();

                                    //管理番号の値をセットする
                                    this.SettingCarInfoRowFromCarMngCode(salesRowNo, tempCarMngCode);
                                }
                                // --- ADD 2013/01/29 Y.Wakita ---------->>>>>
                                if (flag == 0 && inputflag == 0 && statusCache == 1)
                                {
                                    string tempCarMngCode = carMngCode;
                                    //車両管理番号の値をクリアする
                                    this.ClearCarInfoRowFromCarMngNo(salesRowNo, tempCarMngCode);
                                }
                                // --- ADD 2013/01/29 Y.Wakita ----------<<<<<
                            }

                        }// ADD 2011/11/15                   
                    }
                }
            }

            return status;
        }

        /// <summary>
        /// カーメーカーコードのフォーカス処理
        /// </summary>
        /// <param name="makerCode">カーメーカーコード</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns></returns>
        public void AfterMakerCodeFocus(int makerCode, int salesRowNo, out string makerName)
        {
            SalesInputDataSet.CarInfoRow carInfoRowCurrent = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            makerName = "";
            if (makerCode != 0)
            {
                string name = this._salesSlipInputInitDataAcs.GetName_FromMaker(makerCode);
                string hName = this._salesSlipInputInitDataAcs.GetKanaName_FromMaker(makerCode);
                makerName = name;
                if (string.IsNullOrEmpty(name))
                {
                    this.SettingCarInfoRowFromModelInfo(salesRowNo, carInfoRowCurrent.MakerCode, carInfoRowCurrent.MakerFullName, carInfoRowCurrent.MakerHalfName, carInfoRowCurrent.ModelCode, carInfoRowCurrent.ModelSubCode, carInfoRowCurrent.ModelFullName, carInfoRowCurrent.ModelHalfName);
                    return;
                }

                this.ClearCarInfoRow(salesRowNo);
                this.SettingCarInfoRowFromModelInfo(salesRowNo, 0, string.Empty, string.Empty, 0, 0, string.Empty, string.Empty);
                this.SettingCarInfoRowFromModelInfo(salesRowNo, makerCode, name, hName, 0, 0, string.Empty, string.Empty);
            }
            else
            {
                this.ClearCarInfoRow(salesRowNo);
                this.SettingCarInfoRowFromModelInfo(salesRowNo, 0, string.Empty, string.Empty, 0, 0, string.Empty, string.Empty);
            }
        }

        /// <summary>
        /// 車種コードのフォーカス処理
        /// </summary>
        /// <param name="makerCode">カーメーカーコード</param>
        /// <param name="modelCode">車種コード</param>
        /// <param name="modelSubCode">車種呼称コード</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns></returns>
        public void AfterModelCodeFocus(int makerCode, int modelCode, int modelSubCode, int salesRowNo, out string modelFullName)
        {
            SalesInputDataSet.CarInfoRow carInfoRowCurrent = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            modelFullName = "";

            // 車種コードを入力しない場合
            if (modelCode != 0)
            {
                string makerName = this._salesSlipInputInitDataAcs.GetName_FromMaker(makerCode);
                string makerHName = this._salesSlipInputInitDataAcs.GetKanaName_FromMaker(makerCode);
                string name = this.GetModelFullName(makerCode, modelCode, modelSubCode);
                string hName = this.GetModelHalfName(makerCode, modelCode, modelSubCode);

                modelFullName = name;
                if (string.IsNullOrEmpty(name))
                {
                    this.SettingCarInfoRowFromModelInfo(salesRowNo, carInfoRowCurrent.MakerCode, carInfoRowCurrent.MakerFullName, carInfoRowCurrent.MakerHalfName, carInfoRowCurrent.ModelCode, carInfoRowCurrent.ModelSubCode, carInfoRowCurrent.ModelFullName, carInfoRowCurrent.ModelHalfName);
                    return;
                }

                this.ClearCarInfoRow(salesRowNo);
                this.SettingCarInfoRowFromModelInfo(salesRowNo, makerCode, makerName, makerHName, modelCode, modelSubCode, name, hName);
            }
            else
            {
                makerCode = carInfoRowCurrent.MakerCode;
                string makerName = this._salesSlipInputInitDataAcs.GetName_FromMaker(makerCode);
                string makerHName = this._salesSlipInputInitDataAcs.GetKanaName_FromMaker(makerCode);
                modelCode = 0;
                modelSubCode = 0;
                string name = string.Empty;
                string hName = string.Empty;
                this.ClearCarInfoRow(salesRowNo);
                this.SettingCarInfoRowFromModelInfo(salesRowNo, makerCode, makerName, makerHName, modelCode, modelSubCode, name, hName);
            }
        }

        /// <summary>
        /// 車種呼称コードのフォーカス処理
        /// </summary>
        /// <param name="makerCode">カーメーカーコード</param>
        /// <param name="modelCode">車種コード</param>
        /// <param name="modelSubCode">車種呼称コード</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns></returns>
        public void AfterModelSubCodeFocus(int makerCode, int modelCode, int modelSubCode, int salesRowNo, out string modelFullName)
        {
            SalesInputDataSet.CarInfoRow carInfoRowCurrent = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            modelFullName = "";

            // 車種呼称コードを入力しない場合
            if (modelSubCode != 0)
            {
                string makerName = this._salesSlipInputInitDataAcs.GetName_FromMaker(makerCode);
                string makerHName = this._salesSlipInputInitDataAcs.GetKanaName_FromMaker(makerCode);
                string name = this.GetModelFullName(makerCode, modelCode, modelSubCode);
                string hName = this.GetModelHalfName(makerCode, modelCode, modelSubCode);

                modelFullName = name;
                if (string.IsNullOrEmpty(name))
                {
                    this.SettingCarInfoRowFromModelInfo(salesRowNo, carInfoRowCurrent.MakerCode, carInfoRowCurrent.MakerFullName, carInfoRowCurrent.MakerHalfName, carInfoRowCurrent.ModelCode, carInfoRowCurrent.ModelSubCode, carInfoRowCurrent.ModelFullName, carInfoRowCurrent.ModelHalfName);
                    return;
                }

                this.ClearCarInfoRow(salesRowNo);
                this.SettingCarInfoRowFromModelInfo(salesRowNo, makerCode, makerName, makerHName, modelCode, modelSubCode, name, hName);
            }
            else
            {
                makerCode = carInfoRowCurrent.MakerCode;
                string makerName = this._salesSlipInputInitDataAcs.GetName_FromMaker(makerCode);
                string makerHName = this._salesSlipInputInitDataAcs.GetKanaName_FromMaker(makerCode);
                modelCode = carInfoRowCurrent.ModelCode;
                modelSubCode = 0;
                string name = this.GetModelFullName(makerCode, modelCode, modelSubCode);
                string hName = this.GetModelHalfName(makerCode, modelCode, modelSubCode);
                this.ClearCarInfoRow(salesRowNo);
                this.SettingCarInfoRowFromModelInfo(salesRowNo, makerCode, makerName, makerHName, modelCode, modelSubCode, name, hName);
            }
        }

        /// <summary>
        /// 車種名称のフォーカス処理
        /// </summary>
        /// <param name="makerCode">カーメーカーコード</param>
        /// <param name="modelCode">車種コード</param>
        /// <param name="modelSubCode">車種呼称コード</param>
        /// <param name="modelFullName">車種名称</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns></returns>
        public void AfterModelFullNameFocus(int makerCode, int modelCode, int modelSubCode, string modelFullName, int salesRowNo)
        {
            SalesInputDataSet.CarInfoRow carInfoRowCurrent = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);

            string makerName = this._salesSlipInputInitDataAcs.GetName_FromMaker(makerCode);
            string makerHName = this._salesSlipInputInitDataAcs.GetKanaName_FromMaker(makerCode);

            if ((modelCode == 0) && (modelSubCode == 0))
            {
                this.SettingCarInfoRowFromModelInfo(salesRowNo, makerCode, modelFullName, string.Empty, modelCode, modelSubCode, string.Empty, string.Empty);
            }
            else
            {
                this.SettingCarInfoRowFromModelInfo(salesRowNo, makerCode, makerName, makerHName, modelCode, modelSubCode, modelFullName, string.Empty);
            }
        }

        /// <summary>
        /// 年式のフォーカス処理
        /// </summary>
        /// <param name="firstEntryDate">年式</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="boolRet">結果</param>
        /// <returns></returns>
        public void AfterFirstEntryDateFocus(int firstEntryDate, int salesRowNo, out bool boolRet)
        {
            boolRet = true;
            SalesInputDataSet.CarInfoRow carInfoRowCurrent = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);

            if (carInfoRowCurrent.ProduceTypeOfYearInput != (firstEntryDate / 100))
            {
                if (this.CheckProduceTypeOfYearRange(carInfoRowCurrent.CarRelationGuid, firstEntryDate))
                {
                    // 年式設定処理
                    this.SettingCarInfoRowFromFirstEntryDate(salesRowNo, firstEntryDate);
                    this.SettingCarModelUIDataFromFirstEntryDate(carInfoRowCurrent.CarRelationGuid, firstEntryDate);
                }
                else
                {
                    boolRet = false;
                }
            }
        }

        /// <summary>
        /// 車台番号のフォーカス処理
        /// </summary>
        /// <param name="produceFrameNo">車台番号</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="boolRet">結果</param>
        public void AfterProduceFrameNoFocus(string produceFrameNo, int salesRowNo, out bool boolRet, int mode)
        {
            boolRet = true;
            SalesInputDataSet.CarInfoRow carInfoRowCurrent = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            int newIntValue = TStrConv.StrToIntDef(produceFrameNo.Trim(), 0);

            if (this.CheckProduceFrameNo(carInfoRowCurrent.CarRelationGuid, produceFrameNo, newIntValue))
            {
                // 車台番号設定処理
                this.SettingCarInfoRowFromFrameNo(salesRowNo, produceFrameNo);
                this.SettingCarModelUIDataFromProduceFrameNo(carInfoRowCurrent.CarRelationGuid, produceFrameNo);

                // 年式取得処理
                int firstEntryDate = this.GetProduceTypeOfYear(carInfoRowCurrent.CarRelationGuid, newIntValue);

                if (mode == 1)
                {
                    // --- ADD 2013/02/14 Y.Wakita ---------->>>>>
                    if (firstEntryDate != 0)
                    {
                        AfterFirstEntryDateFocus(firstEntryDate, salesRowNo, out boolRet);
                        if (boolRet)
                        {
                    // --- ADD 2013/02/14 Y.Wakita ----------<<<<<
                    this.SettingCarInfoRowFromFirstEntryDate(salesRowNo, firstEntryDate);
                    this.SettingCarModelUIDataFromFirstEntryDate(carInfoRowCurrent.CarRelationGuid, firstEntryDate);
                    // --- ADD 2013/02/14 Y.Wakita ---------->>>>>
                        }
                    }
                    // --- ADD 2013/02/14 Y.Wakita ----------<<<<<
                }
                else
                {
                    // --- UPD 2013/02/14 Y.Wakita ---------->>>>>
                    //if (firstEntryDate != 0)
                    //{
                    //    this.SettingCarInfoRowFromFirstEntryDate(salesRowNo, firstEntryDate);
                    //    this.SettingCarModelUIDataFromFirstEntryDate(carInfoRowCurrent.CarRelationGuid, firstEntryDate);
                    //}
                    boolRet = true;
                    // --- UPD 2013/02/14 Y.Wakita ----------<<<<<
                }

                // --- DEL 2013/02/14 Y.Wakita ---------->>>>>
                //boolRet = true;
                // --- DEL 2013/02/14 Y.Wakita ----------<<<<<
            }
            else
            {
                boolRet = false;
            }
        }

        /// <summary>
        /// 拠点コードのフォーカス処理
        /// </summary>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="salesSlip">売上情報</param>
        /// <remarks>
        /// <br>Update Note: 2012/04/09 yangmj Redmine#29313 売上伝票入力 商品価格の再取得で販売区分が初期値に戻る</br>
        /// <br>Update Note: 2015/04/06 30757 佐々木 貴英</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br>             仕掛№2405 得意先変更時表示区分再取得対応（標準価格の再設定）</br>
        /// <br></br>
        /// </remarks>
        public int AfterSectionCodeFocus(string sectionCode, ref SalesSlip salesSlip)
        {
            int returnFlag = 0;

            SecInfoSet secInfoSet = this._salesSlipInputInitDataAcs.GetSecInfo(sectionCode);

            if (secInfoSet == null)
            {
                TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "拠点が存在しません。",
                    -1,
                    MessageBoxButtons.OK);

                returnFlag = -1;
            }
            else
            {
                DialogResult dialogResult = DialogResult.No;

                salesSlip.ResultsAddUpSecCd = sectionCode;
                salesSlip.ResultsAddUpSecNm = secInfoSet.SectionGuideNm;

                if ((salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) &&
                    (this.ExistSalesDetailCanGoodsPriceReSettingData()))
                {
                    dialogResult = TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        "拠点が変更されました。" + "\r\n" + "\r\n" +
                        "商品価格を再取得しますか？",
                        0,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button1);

                    if (dialogResult == DialogResult.Yes)
                    {
                        returnFlag = 1;
                        _salesCodeChgFlag = true;// ADD 2012/04/09 yangmj redmine#29313
                        //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ---------------->>>>>

                        if (null != salesSlip && 0 < salesSlip.CustomerCode)
                        {
                            // 得意先コードが設定されている場合、商品情報の再取得処理を行う

                            // 得意先情報の取得
                            CustomerInfo customerInfo = null;
                            int status = this._customerInfoAcs.ReadDBData(
                                ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, salesSlip.CustomerCode, true, false, out customerInfo);

                            // 商品情報 再取得処理
                            if (null != customerInfo && 0 == status)
                            {
                                changeDetailsFromCustomerCode(customerInfo, salesSlip);
                            }
                        }

                        //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ----------------<<<<<
                    }
                    else
                    {
                        returnFlag = 2;
                    }
                }

            }

            return returnFlag;
        }

        /// <summary>
        /// 部門名称取得処理
        /// </summary>
        /// <param name="subSectionCode">部門コード</param>
        /// <param name="subSectionNm">部門名称</param>
        public void GetNameFromSubSection(int subSectionCode, out string subSectionNm)
        {
            subSectionNm = string.Empty;
            subSectionNm = this._salesSlipInputInitDataAcs.GetName_FromSubSection(subSectionCode);
        }

        /// <summary>
        /// 追加情報タブ項目Visible設定
        /// </summary>
        /// <param name="customerCode">得意先</param>
        /// <param name="carMngCode">車輌管理番号</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="boolRet">結果</param>
        /// <br>Update Note:  2010/06/22 張凱 redmine#9942</br>
        /// <br>              売掛なしの得意先で得意先名称を変更後に、管理番号を入力して、車輌検索すると、得意先名称が元に戻る。</br>
        public void SettingAddInfoVisible(int customerCode, string carMngCode, int salesRowNo, out bool boolRet)
        {
            boolRet = false;

            if (customerCode != 0 && carMngCode != string.Empty)
            {
                //売上明細データ
                SalesInputDataSet.CarInfoDataTable detailtable = this.CarInfoDataTable;
                if (this.ExistCarInfo() || (detailtable == null || detailtable.Count == 1))
                {
                    CustomerInfo customerInfo = null;
                    SalesSlip salesSlip = this.SalesSlip;
                    int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    SalesSlipInputInitDataAcs.LogWrite("▼得意先マスタＲｅａｄ開始");
                    status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, salesSlip.CustomerCode, true, false, out customerInfo);
                    SalesSlipInputInitDataAcs.LogWrite("▲得意先マスタＲｅａｄ終了");

                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        // 得意先情報設定処理
                        string customerSnm = salesSlip.CustomerSnm; //ADD 2010/06/22
                        // --- ADD 2012/10/30 T.Nishi ---------->>>>>
                        string ResultsAddUpSecCd = salesSlip.ResultsAddUpSecCd; 
                        string ResultsAddUpSecNm = salesSlip.ResultsAddUpSecNm; 
                        // --- ADD 2012/10/30 T.Nishi ----------<<<<<
                        this.SettingSalesSlipFromCustomer(ref salesSlip, customerInfo);
                        salesSlip.CustomerSnm = customerSnm;  //ADD 2010/06/22
                        // --- ADD 2012/10/30 T.Nishi ---------->>>>>
                        salesSlip.ResultsAddUpSecCd = ResultsAddUpSecCd; 
                        salesSlip.ResultsAddUpSecNm = ResultsAddUpSecNm; 
                        // --- ADD 2012/10/30 T.Nishi ----------<<<<<
                    }
                    switch (salesSlip.CarMngDivCd)
                    {
                        case 0: // しない
                            boolRet = false;
                            break;
                        case 1: // 登録(確認)
                        case 2: // 登録(自動)
                        case 3: // 登録無
                            //車輌管理オプション
                            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt() != null
                                && this._salesSlipInputInitDataAcs.GetSalesTtlSt().CarMngNoDispDiv == 1)
                            {
                                if (this._salesSlipInputInitDataAcs.Opt_CarMng == (int)SalesSlipInputInitDataAcs.Option.ON)
                                {
                                    boolRet = true;
                                }
                            }
                            break;
                    }
                }
                else
                {
                    boolRet = false;
                }
            }
            else
            {
                boolRet = false;
            }

            if (!boolRet)
            {
                //車輌備考
                this.SettingCarInfoRowFromCarNoteCode(salesRowNo, 0, false); // ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218
                this.SettingCarInfoRowFromCarNote(salesRowNo, string.Empty);
                //車両走行距離
                this.SettingCarInfoRowFromMileage(salesRowNo, 0);
            }
        }

        /// <summary>
        /// 車種変更ボタンVisible
        /// </summary>
        /// <param name="customerCode">得意先</param>
        /// <param name="carMngCode">車輌管理番号</param>
        /// <param name="visibleFlag"></param>
        public void GetChangeCarInfoVisible(int customerCode, string carMngCode, out int visibleFlag)
        {
            visibleFlag = 1;

            if (customerCode != 0 && carMngCode != string.Empty)
            {
                switch (this.SalesSlip.CarMngDivCd)
                {
                    case 0: // しない
                        visibleFlag = 1;
                        break;
                    case 1: // 登録(確認)
                    case 2: // 登録(自動)
                    case 3: // 登録無
                        visibleFlag = 0;
                        break;
                }

                if (this._salesSlipInputInitDataAcs.Opt_CarMng == (int)SalesSlipInputInitDataAcs.Option.OFF)
                {
                    visibleFlag = 1;
                }
            }
            else
            {
                visibleFlag = 1;
            }
        }

        /// <summary>
        /// 生産年式取得処理(和歴／西暦)
        /// </summary>
        /// <br>UpdateNote  : 2019/01/08  譚洪</br>
        /// <br>修正内容    : 新元号の対応</br>
        /// <param name="produceTypeOfYear"></param>
        private string GetProduceTypeOfYear(DateTime produceTypeOfYear)
        {
            string retYear = string.Empty;
            if (produceTypeOfYear != DateTime.MinValue)
            {
                if (this._salesSlipInputInitDataAcs.GetAllDefSet().EraNameDispCd1 == 0)
                {
                    // 0:西暦
                    int iyy = produceTypeOfYear.Year;
                    int imm = produceTypeOfYear.Month;
                    retYear = (produceTypeOfYear != DateTime.MinValue) ? string.Format(@"{0:0000}{1:\.00}", iyy, imm) : string.Empty;
                }
                else
                {
                    // 1:和歴
                    //---- UPD 譚洪  2019/01/08 FOR 新元号の対応 ---->>>>>
                    //System.Globalization.DateTimeFormatInfo FormatInfo = null;
                    //System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo("ja-JP");
                    //System.Globalization.Calendar calendar = new System.Globalization.JapaneseCalendar();
                    //culture.DateTimeFormat.Calendar = calendar;
                    //FormatInfo = culture.DateTimeFormat;
                    //FormatInfo.Calendar = calendar;

                    //retYear = produceTypeOfYear.ToString("gyy/MM/dd", culture);

                    //int Era = FormatInfo.Calendar.GetEra(produceTypeOfYear);
                    //string eraString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                    //string eraName = string.Empty;
                    //string tempRetYear = string.Empty;
                    //tempRetYear = retYear.Substring(2, retYear.Length - 2);
                    //for (int eraCounter = 0; eraCounter < eraString.Length; eraCounter++)
                    //{
                    //    if (FormatInfo.GetEra(eraString[eraCounter].ToString()) == Era)
                    //    {
                    //        eraName = eraString[eraCounter].ToString();
                    //        break;
                    //    }
                    //}
                    //tempRetYear = eraName + tempRetYear;
                    //retYear = tempRetYear.Remove(tempRetYear.Length - 3);
                    //retYear = retYear.Replace('/', '.');

                    retYear = TDateTime.DateTimeToString("ggYY.MM", produceTypeOfYear);
                    //---- UPD 譚洪  2019/01/08 FOR 新元号の対応 ----<<<<<
                }
            }
            return retYear;
        }

        /// <summary>
        /// 担当者変更処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesSlipCurrent"></param>
        /// <param name="code"></param>
        /// <returns></returns>
        public void ChangeSalesEmployee(ref SalesSlip salesSlip, SalesSlip salesSlipCurrent, string code, ref bool canChangeFocus)
        {
            canChangeFocus = true;
            DialogResult dialogResult;

            #region 変更可能チェック
            switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SalesAgentChngDiv)
            {
                // 変更可能
                case 0:
                    break;
                // 変更時警告
                case 1:
                    dialogResult = TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        "担当者が変更されました。" + "\r\n" + "\r\n" +
                        "よろしいですか？",
                        0,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button1);

                    if (dialogResult == DialogResult.No) canChangeFocus = false;
                    break;
                // 変更不可
                case 2:
                    dialogResult = TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        "担当者の変更はできません。" + "\r\n",
                        0,
                        MessageBoxButtons.OK,
                        MessageBoxDefaultButton.Button1);
                    canChangeFocus = false;
                    break;
                default:
                    break;
            }
            #endregion

            if (canChangeFocus == true)
            {
                if (string.IsNullOrEmpty(code))
                {
                    this.SettingSalesSlipFromEmployeeInfo(ref salesSlip, code);
                }
                else
                {
                    string name = this._salesSlipInputInitDataAcs.GetName_FromEmployee(code);

                    if (string.IsNullOrEmpty(name.Trim()))
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "従業員が存在しません。",
                            -1,
                            MessageBoxButtons.OK);

                        canChangeFocus = false;
                    }
                    else
                    {
                        this.SettingSalesSlipFromEmployeeInfo(ref salesSlip, code);
                    }
                }
            }
        }

        /// <summary>
        /// 受注者変更処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesSlipCurrent"></param>
        /// <param name="code"></param>
        /// <returns></returns>
        public void ChangeFrontEmployee(ref SalesSlip salesSlip, SalesSlip salesSlipCurrent, string code, ref bool canChangeFocus)
        {
            canChangeFocus = true;

            if (string.IsNullOrEmpty(code))
            {
                salesSlip.FrontEmployeeCd = code;
                salesSlip.FrontEmployeeNm = string.Empty;
            }
            else
            {
                string name = this._salesSlipInputInitDataAcs.GetName_FromEmployee(code);

                if (string.IsNullOrEmpty(name.Trim()))
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        "従業員が存在しません。",
                        -1,
                        MessageBoxButtons.OK);

                    canChangeFocus = false;
                }
                else
                {
                    salesSlip.FrontEmployeeCd = code;
                    salesSlip.FrontEmployeeNm = name;
                    if (salesSlip.FrontEmployeeNm.Length > 16) salesSlip.FrontEmployeeNm = salesSlip.FrontEmployeeNm.Substring(0, 16);
                }
            }
        }

        /// <summary>
        /// 発行者変更処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesSlipCurrent"></param>
        /// <param name="code"></param>
        /// <returns></returns>
        public void ChangeSalesInput(ref SalesSlip salesSlip, SalesSlip salesSlipCurrent, string code, ref bool canChangeFocus)
        {
            canChangeFocus = true;

            if (salesSlipCurrent.SalesInputCode.Trim() != code)
            {

                if (string.IsNullOrEmpty(code))
                {
                    salesSlip.SalesInputCode = code;
                    salesSlip.SalesInputName = string.Empty;
                }
                else
                {
                    string name = this._salesSlipInputInitDataAcs.GetName_FromEmployee(code);

                    if (string.IsNullOrEmpty(name.Trim()))
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "従業員が存在しません。",
                            -1,
                            MessageBoxButtons.OK);

                        canChangeFocus = false;
                    }
                    else
                    {
                        // --- ADD 2010/05/04 ---------->>>>>
                        bool isReInputErr = false;
                        if (!code.Equals(LoginInfoAcquisition.Employee.EmployeeCode.Trim()))
                        {
                            // 発行者チェック区分 0:無視 1:再入力 2:警告
                            switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpAgentChkDiv)
                            {
                                case 0:
                                    break;
                                case 1:
                                    {
                                        TMsgDisp.Show(
                                        new Form(),
                                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                        "TODO",
                                        "不正な値が存在するため、登録できません。"
                                        + "\r\n"
                                        + "\r\n"
                                        + "発行者とログイン担当者が不一致です。",
                                        0,
                                        MessageBoxButtons.OK);

                                        canChangeFocus = false;
                                        isReInputErr = true;

                                        break;
                                    }
                                case 2:
                                    {
                                        TMsgDisp.Show(
                                        new Form(),
                                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                        "TODO",
                                        "発行者とログイン担当者が不一致です。",
                                        0,
                                        MessageBoxButtons.OK);

                                        canChangeFocus = true;

                                        break;
                                    }
                            }
                        }
                        if (!isReInputErr)
                        {
                            // --- ADD 2010/05/04 ----------<<<<<
                        salesSlip.SalesInputCode = code;
                        salesSlip.SalesInputName = name;
                        if (salesSlip.SalesInputName.Length > 16) salesSlip.SalesInputName = salesSlip.SalesInputName.Substring(0, 16);
                        Employee employee = this._salesSlipInputInitDataAcs.GetEmployee(code);
                        salesSlip.SalesInpSecCd = employee.BelongSectionCode; // 売上入力拠点コード
                        }// ADD 2010/05/04

                        //salesSlip.SalesInputCode = code;
                        //salesSlip.SalesInputName = name;
                        //if (salesSlip.SalesInputName.Length > 16) salesSlip.SalesInputName = salesSlip.SalesInputName.Substring(0, 16);
                        //Employee employee = this._salesSlipInputInitDataAcs.GetEmployee(code);
                        //salesSlip.SalesInpSecCd = employee.BelongSectionCode; // 売上入力拠点コード
                    }
                }

                // 売上データクラス→画面格納処理
                //this.SetDisplay(salesSlip);
            }
        }

        # region 伝票種別変更処理
        public void ChangeAcptAnOdrStatus(int code, ref SalesSlip salesSlip, int svCode)
        {
            // 受注ステータス、見積区分セット
            salesSlip.AcptAnOdrStatusDisplay = code;
            SalesSlipInputAcs.SetAcptAnOdrStatusAndEstimateDivideFromDisplay(ref salesSlip);

            // 商品区分
            salesSlip.SalesGoodsCd = 0;

            switch ((SalesSlipInputAcs.AcptAnOdrStatusState)code)
            {
                // 売上形式が「見積」の場合
                case SalesSlipInputAcs.AcptAnOdrStatusState.Estimate:
                    {
                        salesSlip.AddUpADate = DateTime.MinValue;		                                            // 計上日クリア
                        switch ((SalesSlipInputAcs.AcptAnOdrStatusState)svCode)
                        {
                            case SalesSlipInputAcs.AcptAnOdrStatusState.Sales:
                            case SalesSlipInputAcs.AcptAnOdrStatusState.Shipment:
                            // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                            //case SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder: // ADD 2013/02/05 T.Miyamoto
                            // --- DEL 2013/04/18 T.Nishi ----------<<<<<
                                this.SettingClearCount(1);
                                break;
                            default:
                                break;
                        }
                        break;
                    }
                // 売上形式が「単価見積」の場合
                case SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate:
                    {
                        salesSlip.AddUpADate = DateTime.MinValue;		                                            // 計上日をクリアする
                        this.SettingClearCount(0);
                        break;
                    }
                // 売上形式が「売上」の場合
                case SalesSlipInputAcs.AcptAnOdrStatusState.Sales:
                    {
                        this.SettingSalesSlipAddUpDate(ref salesSlip);
                        break;
                    }
                // 売上形式が「出荷」の場合
                case SalesSlipInputAcs.AcptAnOdrStatusState.Shipment:
                    {
                        break;
                    }
                // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                //// ADD 2013/02/05 T.Miyamoto ------------------------------>>>>>
                //// 売上形式が「受注」の場合
                //case SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder:
                //    {
                //        salesSlip.AddUpADate = DateTime.MinValue; // 計上日クリア
                //        switch ((SalesSlipInputAcs.AcptAnOdrStatusState)svCode)
                //        {
                //            case SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate:
                //                break;
                //            default:
                //                this.SettingClearCount(2); // 出荷数クリア
                //                break;
                //        }
                //        break;
                //    }
                //// ADD 2013/02/05 T.Miyamoto ------------------------------<<<<<
                // --- DEL 2013/04/18 T.Nishi ----------<<<<<
            }
        }
        /// <summary>
        /// 品名、品番のいずれかが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public void ExistSalesDetail(out bool exist)
        {
            exist = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if ((row.EditStatus == ctEDITSTATUS_RowDiscount) ||
                    (row.EditStatus == ctEDITSTATUS_Annotation) ||
                    (!string.IsNullOrEmpty(row.GoodsName)) ||
                    (!string.IsNullOrEmpty(row.GoodsNo)))
                {
                    exist = true;
                    break;
                }
            }
        }

        /// <summary>
        /// 売上形式変更可能チェック処理
        /// </summary>
        /// <param name="code"></param>
        /// <param name="salesSlip"></param>
        /// <returns></returns>
        public void ChangeCheckAcptAnOdrStatus(int code, SalesSlip salesSlip, out bool clearDisplayCarInfo, out bool clearAddUpInfo, out bool result)
        {
            clearDisplayCarInfo = false;
            clearAddUpInfo = false;
            result = true;
            bool ret = false;

            SalesSlipInputAcs.AcptAnOdrStatusState acptAnOdrStatusStateAfter = (SalesSlipInputAcs.AcptAnOdrStatusState)code;
            SalesSlipInputAcs.SalesGoodsCd salesGoodsCd = (SalesSlipInputAcs.SalesGoodsCd)salesSlip.SalesGoodsCd;
            SalesSlipInputAcs.SalesSlipDisplay salesSlipDisplay = (SalesSlipInputAcs.SalesSlipDisplay)salesSlip.SalesSlipDisplay;

            // 伝票区分
            Dictionary<SalesSlipInputAcs.AcptAnOdrStatusState, List<SalesSlipInputAcs.SalesSlipDisplay>> salesSlipDisplayDic = new Dictionary<SalesSlipInputAcs.AcptAnOdrStatusState, List<SalesSlipInputAcs.SalesSlipDisplay>>();
            salesSlipDisplayDic[SalesSlipInputAcs.AcptAnOdrStatusState.Estimate] = MakeSalesSlipDisplayList(SalesSlipInputAcs.AcptAnOdrStatusState.Estimate);
            salesSlipDisplayDic[SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate] = MakeSalesSlipDisplayList(SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate);
            salesSlipDisplayDic[SalesSlipInputAcs.AcptAnOdrStatusState.Sales] = MakeSalesSlipDisplayList(SalesSlipInputAcs.AcptAnOdrStatusState.Sales);
            salesSlipDisplayDic[SalesSlipInputAcs.AcptAnOdrStatusState.Shipment] = MakeSalesSlipDisplayList(SalesSlipInputAcs.AcptAnOdrStatusState.Shipment);
            // --- DEL 2013/04/18 T.Nishi ---------->>>>>
            //// ADD 2013/02/05 T.Miyamoto ------------------------------>>>>>
            //salesSlipDisplayDic[SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder] = MakeSalesSlipDisplayList(SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder);
            //// ADD 2013/02/05 T.Miyamoto ------------------------------<<<<<
            // --- DEL 2013/04/18 T.Nishi ----------<<<<<
            List<SalesSlipInputAcs.SalesSlipDisplay> salesSlipDisplayList = new List<SalesSlipInputAcs.SalesSlipDisplay>();
            salesSlipDisplayList = salesSlipDisplayDic[acptAnOdrStatusStateAfter];
            ret = SalesSlipInputAcs.diverge<bool>(salesSlipDisplayList.Contains(salesSlipDisplay), true, false);
            if (ret == false)
            {
                DialogResult dialogResult = TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "",
                    "伝票区分が有効ではない為、変更できません。",
                    0,
                    MessageBoxButtons.OK,
                    MessageBoxDefaultButton.Button1);

                result =  false;
                return;
            }

            // 商品区分
            Dictionary<SalesSlipInputAcs.AcptAnOdrStatusState, List<SalesSlipInputAcs.SalesGoodsCd>> salesGoodsCdDic = new Dictionary<SalesSlipInputAcs.AcptAnOdrStatusState, List<SalesSlipInputAcs.SalesGoodsCd>>();
            salesGoodsCdDic[SalesSlipInputAcs.AcptAnOdrStatusState.Estimate] = MakeSalesGoodsCdList(SalesSlipInputAcs.AcptAnOdrStatusState.Estimate);
            salesGoodsCdDic[SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate] = MakeSalesGoodsCdList(SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate);
            salesGoodsCdDic[SalesSlipInputAcs.AcptAnOdrStatusState.Sales] = MakeSalesGoodsCdList(SalesSlipInputAcs.AcptAnOdrStatusState.Sales);
            salesGoodsCdDic[SalesSlipInputAcs.AcptAnOdrStatusState.Shipment] = MakeSalesGoodsCdList(SalesSlipInputAcs.AcptAnOdrStatusState.Shipment);
            // --- DEL 2013/04/18 T.Nishi ---------->>>>>
            //// ADD 2013/02/05 T.Miyamoto ------------------------------>>>>>
            //salesGoodsCdDic[SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder] = MakeSalesGoodsCdList(SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder);
            //// ADD 2013/02/05 T.Miyamoto ------------------------------<<<<<
            // --- DEL 2013/04/18 T.Nishi ----------<<<<<
            List<SalesSlipInputAcs.SalesGoodsCd> salesGoodsCdList = new List<SalesSlipInputAcs.SalesGoodsCd>();
            salesGoodsCdList = salesGoodsCdDic[acptAnOdrStatusStateAfter];
            ret = SalesSlipInputAcs.diverge<bool>(salesGoodsCdList.Contains(salesGoodsCd), true, false);
            if (ret == false)
            {
                DialogResult dialogResult = TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "",
                    "商品区分が有効ではない為、変更できません。",
                    0,
                    MessageBoxButtons.OK,
                    MessageBoxDefaultButton.Button1);

                result = false;
                return;
            }

            // 商品以外、行値引き、出荷数マイナス入力行、仕入情報入力行、発注情報入力行があった場合はクリアする
            if ((salesSlip.SalesGoodsCd != 0) ||
                (this.ExistSalesDetailDiscountData()) ||
                (this.ExistSalesDetailMinusCount()) ||
                (this.ExistStockTemp()))
            {
                // --- UPD 2013/11/13 Y.Wakita ---------->>>>>
                //DialogResult dialogResult = TMsgDisp.Show(
                //    new Form(),
                //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                //    "",
                //    this.GetAcptAnOdrStatusName(this.SalesSlip) + "明細情報がクリアされます。" + "\r\n" + "\r\n" +
                //    "よろしいですか？",
                //    0,
                //    MessageBoxButtons.YesNo,
                //    MessageBoxDefaultButton.Button1);

                //if (dialogResult == DialogResult.Yes)
                //{
                //    //this._salesSlipDetailInput.Clear();
                //    this.ClearCarInfo();
                //    clearDisplayCarInfo = true;
                //    result = true;
                //    return;
                //}
                //else
                //{
                //    result = false;
                //    return;
                //}
                DialogResult dialogResult;
                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)code)
                {
                    case AcptAnOdrStatusState.Estimate:             // 見積

                        // --- UPD 2013/11/15 Y.Wakita ---------->>>>>
                        //if (this.ExistStockTemp())
                        if (this.ExistStockTemp() ||
                            this.ExistSalesDetailMinusCount_Estimate())
                        // --- UPD 2013/11/15 Y.Wakita ----------<<<<<
                        {
                            dialogResult = TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                this.GetAcptAnOdrStatusName(this.SalesSlip) + "明細情報がクリアされます。" + "\r\n" + "\r\n" +
                                "よろしいですか？",
                                0,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button1);

                            if (dialogResult == DialogResult.Yes)
                            {
                                //this._salesSlipDetailInput.Clear();
                                this.ClearCarInfo();
                                clearDisplayCarInfo = true;
                                result = true;
                                return;
                            }
                            else
                            {
                                result = false;
                                return;
                            }
                        }
                        break;

                    case AcptAnOdrStatusState.UnitPriceEstimate:    // 単価見積
                        if (this.ExistStockTemp() ||
                            this.ExistSalesDetailMinusCount())
                        {
                            dialogResult = TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                this.GetAcptAnOdrStatusName(this.SalesSlip) + "明細情報がクリアされます。" + "\r\n" + "\r\n" +
                                "よろしいですか？",
                                0,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button1);

                            if (dialogResult == DialogResult.Yes)
                            {
                                //this._salesSlipDetailInput.Clear();
                                this.ClearCarInfo();
                                clearDisplayCarInfo = true;
                                result = true;
                                return;
                            }
                            else
                            {
                                result = false;
                                return;
                            }
                        }
                        break;

                    case AcptAnOdrStatusState.Shipment:             // 貸出
                        dialogResult = TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "",
                    this.GetAcptAnOdrStatusName(this.SalesSlip) + "明細情報がクリアされます。" + "\r\n" + "\r\n" +
                    "よろしいですか？",
                    0,
                    MessageBoxButtons.YesNo,
                    MessageBoxDefaultButton.Button1);

                if (dialogResult == DialogResult.Yes)
                {
                    //this._salesSlipDetailInput.Clear();
                    this.ClearCarInfo();
                    clearDisplayCarInfo = true;
                    result = true;
                    return;
                }
                else
                {
                    result = false;
                    return;
                }
                        break;
                }
                // --- UPD 2013/11/13 Y.Wakita ----------<<<<<
            }
            else if ((this.SalesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal) &&
                     (this.ExistSalesDetailAddUpSrcData()))
            {
                DialogResult dialogResult = TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "",
                    this.GetAcptAnOdrStatusName(this.SalesSlip) + "計上情報がクリアされます。" + "\r\n" + "\r\n" +
                    "よろしいですか？",
                    0,
                    MessageBoxButtons.YesNo,
                    MessageBoxDefaultButton.Button1);

                if (dialogResult == DialogResult.Yes)
                {
                    this.ClearAddUpInfo();
                    clearAddUpInfo = true;
                    result = true;
                    return;
                }
                else
                {
                    result = false;
                    return;
                }
            }
        }

        /// <summary>
        /// 伝票区分設定リスト作成処理
        /// </summary>
        /// <param name="acptAnOdrStatusState"></param>
        /// <returns></returns>
        private List<SalesSlipInputAcs.SalesSlipDisplay> MakeSalesSlipDisplayList(SalesSlipInputAcs.AcptAnOdrStatusState acptAnOdrStatusState)
        {
            List<SalesSlipInputAcs.SalesSlipDisplay> salesSlipDisplayList = new List<SalesSlipInputAcs.SalesSlipDisplay>();

            switch (acptAnOdrStatusState)
            {
                case SalesSlipInputAcs.AcptAnOdrStatusState.Estimate:
                    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.AccRec);
                    //>>>2010/12/16
                    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.Cash);
                    //<<<2010/12/16
                    break;
                case SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate:
                    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.AccRec);
                    //>>>2010/12/16
                    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.Cash);
                    //<<<2010/12/16
                    break;
                case SalesSlipInputAcs.AcptAnOdrStatusState.Sales:
                    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.AccRec);
                    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.AccRecRetGoods);
                    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.Cash);
                    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.CashRetGoods);
                    break;
                case SalesSlipInputAcs.AcptAnOdrStatusState.Shipment:
                    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.AccRec);
                    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.AccRecRetGoods);
                    //>>>2010/12/16
                    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.Cash);
                    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.CashRetGoods);
                    //<<<2010/12/16
                    break;
                // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                //// ADD 2013/02/05 T.Miyamoto ------------------------------>>>>>
                //case SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder:
                //    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.AccRec);
                //    salesSlipDisplayList.Add(SalesSlipInputAcs.SalesSlipDisplay.Cash);
                //    break;
                //// ADD 2013/02/05 T.Miyamoto ------------------------------<<<<<
                // --- DEL 2013/04/18 T.Nishi ----------<<<<<
            }
            return salesSlipDisplayList;
        }

        /// <summary>
        /// 商品区分設定リスト作成処理
        /// </summary>
        /// <param name="acptAnOdrStatusState"></param>
        /// <returns></returns>
        private List<SalesSlipInputAcs.SalesGoodsCd> MakeSalesGoodsCdList(SalesSlipInputAcs.AcptAnOdrStatusState acptAnOdrStatusState)
        {
            List<SalesSlipInputAcs.SalesGoodsCd> salesGoodsCdList = new List<SalesSlipInputAcs.SalesGoodsCd>();
            switch (acptAnOdrStatusState)
            {
                case SalesSlipInputAcs.AcptAnOdrStatusState.Estimate:
                    salesGoodsCdList.Add(SalesSlipInputAcs.SalesGoodsCd.Goods);
                    break;
                case SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate:
                    salesGoodsCdList.Add(SalesSlipInputAcs.SalesGoodsCd.Goods);
                    break;
                case SalesSlipInputAcs.AcptAnOdrStatusState.Sales:
                    salesGoodsCdList.Add(SalesSlipInputAcs.SalesGoodsCd.Goods);
                    salesGoodsCdList.Add(SalesSlipInputAcs.SalesGoodsCd.ConsTaxAdjust);
                    salesGoodsCdList.Add(SalesSlipInputAcs.SalesGoodsCd.BalanceAdjust);
                    salesGoodsCdList.Add(SalesSlipInputAcs.SalesGoodsCd.AccRecConsTaxAdjust);
                    salesGoodsCdList.Add(SalesSlipInputAcs.SalesGoodsCd.AccRecBalanceAdjust);
                    break;
                case SalesSlipInputAcs.AcptAnOdrStatusState.Shipment:
                    salesGoodsCdList.Add(SalesSlipInputAcs.SalesGoodsCd.Goods);
                    break;
                // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                //// ADD 2013/02/05 T.Miyamoto ------------------------------>>>>>
                //case SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder:
                //    salesGoodsCdList.Add(SalesSlipInputAcs.SalesGoodsCd.Goods);
                //    break;
                //// ADD 2013/02/05 T.Miyamoto ------------------------------<<<<<
                // --- DEL 2013/04/18 T.Nishi ----------<<<<<
            }
            return salesGoodsCdList;
        }
# endregion 伝票種別変更処理

        #region 伝票区分変更処理
        /// <summary>
        /// 伝票区分変更処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="isCache"></param>
        public void ChangeSalesSlip(ref SalesSlip salesSlip, bool isCache, int code, ref bool changeSalesSlipDisplay,out bool clearDetailInput, out bool clearCarInfo)
        {
            changeSalesSlipDisplay = false;
            clearCarInfo = false;
            clearDetailInput = false;

            if (code == salesSlip.SalesSlipDisplay) return;

            if ((!ChangeCheckSalesSlipDisplay(code, salesSlip)) &&    // 伝票区分変更不可
                (this.ExistSalesDetail())) // 明細入力あり
            {
                if (salesSlip.SalesSlipDisplay != code)
                {
                    if (code != -1)
                    {
                        if ((!this.EqualsSalesGoodsCdType(salesSlip.SalesSlipDisplay, code)) && (this.ExistSalesDetail()))
                        {
                            DialogResult dialogResult = TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                this.GetAcptAnOdrStatusName(this.SalesSlip) + "明細情報がクリアされます。" + "\r\n" + "\r\n" +
                                "よろしいですか？",
                                0,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button1);

                            if (dialogResult == DialogResult.Yes)
                            {
                                clearDetailInput = true;
                                this.ClearCarInfo();
                                clearCarInfo = true;
                                changeSalesSlipDisplay = true;
                            }
                        }
                        else
                        {
                            this.ClearCarInfo();
                            clearCarInfo = true;
                            changeSalesSlipDisplay = true;
                        }
                    }
                }
            }
            else
            {
                changeSalesSlipDisplay = true;
            }

            if (changeSalesSlipDisplay)
            {

                if (code != -1)
                {
                    salesSlip.SalesSlipDisplay = code;

                    // 伝票区分、売掛区分のセット
                    SalesSlipInputAcs.SetSlipCdAndAccRecDivCdFromDisplay(ref salesSlip);

                    // 売上データキャッシュ処理
                    if (isCache) this.Cache(salesSlip);
                }
            }
        }

        private bool ChangeCheckSalesSlipDisplay(int code, SalesSlip salesSlip)
        {

            bool ret = false;

            SalesSlipInputAcs.SalesSlipDisplay salesSlipDisplayBefore = (SalesSlipInputAcs.SalesSlipDisplay)salesSlip.SalesSlipDisplay;
            SalesSlipInputAcs.SalesSlipDisplay salesSlipDisplayAfter = (SalesSlipInputAcs.SalesSlipDisplay)code;

            List<SalesSlipInputAcs.SalesSlipDisplay> salesSlipDisplaySalesList = new List<SalesSlipInputAcs.SalesSlipDisplay>();
            salesSlipDisplaySalesList.Add(SalesSlipInputAcs.SalesSlipDisplay.AccRec);
            salesSlipDisplaySalesList.Add(SalesSlipInputAcs.SalesSlipDisplay.Cash);
            List<SalesSlipInputAcs.SalesSlipDisplay> salesSlipDisplayRetGoodsList = new List<SalesSlipInputAcs.SalesSlipDisplay>();
            salesSlipDisplayRetGoodsList.Add(SalesSlipInputAcs.SalesSlipDisplay.AccRecRetGoods);
            salesSlipDisplayRetGoodsList.Add(SalesSlipInputAcs.SalesSlipDisplay.CashRetGoods);

            if ((salesSlipDisplaySalesList.Contains(salesSlipDisplayBefore)) &&
                (salesSlipDisplaySalesList.Contains(salesSlipDisplayAfter)))
            {
                ret = true;
            }

            if ((salesSlipDisplayRetGoodsList.Contains(salesSlipDisplayBefore)) &&
                (salesSlipDisplayRetGoodsList.Contains(salesSlipDisplayAfter)))
            {
                ret = true;
            }

            return ret;

        }

        /// <summary>
        /// 商品区分タイプ比較処理
        /// </summary>
        /// <param name="stockGoodsCd1">商品区分1</param>
        /// <param name="stockGoodsCd2">商品区分2</param>
        /// <returns>true:同一タイプ false:異なるタイプ</returns>
        private bool EqualsSalesGoodsCdType(int salesGoodsCd1, int salesGoodsCd2)
        {
            bool equals = false;

            if (salesGoodsCd1 == salesGoodsCd2)
            {
                equals = true;
            }
            else
            {
                equals = false;
            }

            return equals;
        }
        #endregion

        /// <summary>
        /// 商品区分変更処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="isCache"></param>
        public void ChangeSalesGoodsCd(SalesSlip salesSlipCurrent, int code, ref bool changeSalesGoodsCd, out bool clearDetailInput, out bool clearCarInfo)
        {
            clearDetailInput = false;
            clearCarInfo = false;

            if ((!this.EqualsSalesGoodsCdType(salesSlipCurrent.SalesGoodsCd, code)) && (this.ExistSalesDetail()))
            {
                DialogResult dialogResult = TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "",
                    this.GetAcptAnOdrStatusName(this.SalesSlip) + "明細情報がクリアされます。" + "\r\n" + "\r\n" +
                    "よろしいですか？",
                    0,
                    MessageBoxButtons.YesNo,
                    MessageBoxDefaultButton.Button1);

                if (dialogResult == DialogResult.Yes)
                {
                    clearDetailInput = true;
                    this.ClearCarInfo();
                    clearCarInfo = true;
                    changeSalesGoodsCd = true;
                }
            }
            else
            {
                this.ClearCarInfo();
                clearCarInfo = true;
                changeSalesGoodsCd = true;
            }
        }

        /// <summary>
        /// 得意先コードのフォーカス処理
        /// </summary>
        /// <param name="sectionCode">拠点コード</param>
        /// <param name="salesSlip">売上情報</param>
        /// <remarks>
        /// <br>Update Note: 2010/06/02 呉元嘯 PM.NS障害・改良対応（７月リリース案件）</br>
        /// <br>             以下オペレーションでエラーが発生するので、エラー発生しないように修正する。</br>
        /// <br>Update Note: 2012/04/09 yangmj Redmine#29313 売上伝票入力 商品価格の再取得で販売区分が初期値に戻る</br>
        /// <br></br>
        /// <br>Update Note: 2015/04/06 30757 佐々木 貴英</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br>             仕掛№2405 得意先変更時表示区分再取得対応（標準価格の再設定）</br>
        /// <br>Update Note: K2018/12/07 陳艶丹</br>
        /// <br>管理番号   : 11475134-00</br>
        /// <br>             RedMine#49789 前橋京和商会個別　得意先メモ障害の対応</br>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        /// <br></br>
        /// </remarks>
        public void AfterCustomerCodeFocus(ref SalesSlip salesSlip, int code, ref CustomerInfo customerInfo, out bool clearAddCarInfo, ref bool canChangeFocus,
            ref bool reCalcSalesPrice, ref bool guideStart, out bool clearDetailInput, out bool clearCarInfo, ref bool reCalcSalesUnitPrice, ref bool clearRateInfo)
        {
            clearAddCarInfo = false;
            clearDetailInput = false;
            clearCarInfo = false;
            bool messageFlag = false;//  ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について①

            // --- ADD 2010/06/21 ---------->>>>>
            this._employeeFlag = true;
            // --- ADD 2010/06/21 ----------<<<<<

            // 車輌管理オプション有りの場合
            if (this._salesSlipInputInitDataAcs.Opt_CarMng == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                //得意先を変更した場合は、管理番号の値をクリアする
                clearAddCarInfo = true; ;
            }

            if (code == 0)
            {
                #region コードゼロ入力時
                if (this.ExistSalesDetail())
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        this.GetAcptAnOdrStatusName(this.SalesSlip) + "明細情報が入力されているため、得意先のクリアは行えません。",
                        -1,
                        MessageBoxButtons.OK);

                    canChangeFocus = false;
                }
                else
                {
                    try
                    {
                        // 得意先情報設定処理
                        this.SettingSalesSlipFromCustomer(ref salesSlip, null);

                        // 得意先掛率グループ再セット
                        this.SettingSalesDetailCustRateGrpCode();

                        // 売上明細データセッティング処理（課税区分設定）
                        this.SettingSalesDetailTaxationCode(salesSlip.ConsTaxLayMethod, salesSlip.TotalAmountDispWayCd);

                        reCalcSalesPrice = true;
                    }
                    catch (Exception ex)
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            ex.Message,
                            -1,
                            MessageBoxButtons.OK);

                        canChangeFocus = false;
                    }
                }
                #endregion
            }
            else
            {
                bool changeFlg = false;
                DialogResult dialogResult = DialogResult.No;
                SalesSlipInputInitDataAcs.LogWrite("▼得意先マスタＲｅａｄ開始");
                int status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, code, true, false, out customerInfo);
                SalesSlipInputInitDataAcs.LogWrite("▲得意先マスタＲｅａｄ終了");

                if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                {
                    #region マスタ未登録
                    //-----------------------------------------------------------------------------
                    // マスタ未登録
                    //-----------------------------------------------------------------------------
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        "得意先が存在しません。",
                        -1,
                        MessageBoxButtons.OK);
                    //this.tNedit_CustomerCode.SetInt(salesSlip.CustomerCode);
                    guideStart = false;
                    messageFlag = true;//  ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について①
                    #endregion
                }
                else if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 変更チェック
                    if (salesSlip.CustomerCode != customerInfo.CustomerCode)
                    {
                        if (customerInfo.IsCustomer != true)
                        {
                            #region 納入先入力
                            //-----------------------------------------------------------------------------
                            // 納入先入力
                            //-----------------------------------------------------------------------------
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_INFO,
                                "",
                                "納入先は入力できません。",
                                -1,
                                MessageBoxButtons.OK);
                            //this.tNedit_CustomerCode.SetInt(salesSlip.CustomerCode);
                            guideStart = false;
                            messageFlag = true;//  ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について①
                            #endregion
                        }
                        else if (!this.CheckTransStopDate(customerInfo.TransStopDate))
                        {
                            #region 取引中止チェック
                            //-----------------------------------------------------------------------------
                            // 取引中止チェック
                            //-----------------------------------------------------------------------------
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_INFO,
                                "",
                                "取引中止中により設定できません。",
                                -1,
                                MessageBoxButtons.OK);
                            //this.tNedit_CustomerCode.SetInt(salesSlip.CustomerCode);
                            guideStart = false;
                            messageFlag = true;//  ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について①
                            #endregion
                        }
                        else
                        {
                            bool settingFlg = false;
                            if ((this.ExistSalesDetail()) &&
                                (salesSlip.CustomerCode != 0) &&
                                (customerInfo.AccRecDivCd != salesSlip.AccRecDivCd))
                            {
                                #region 売掛／現金間のコード変更
                                //-----------------------------------------------------------------------------
                                // 売掛／現金間のコード変更
                                //-----------------------------------------------------------------------------
                                dialogResult = TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    "",
                                    "売掛得意先と現金得意先間のコード変更です。" + "\r\n" + "\r\n" +
                                    this.GetAcptAnOdrStatusName(this.SalesSlip) + "明細情報がクリアされます。" + "\r\n" + "\r\n" +
                                    "よろしいですか？",
                                    0,
                                    MessageBoxButtons.YesNo,
                                    MessageBoxDefaultButton.Button1);

                                if (dialogResult == DialogResult.Yes)
                                {
                                    settingFlg = true;
                                    clearDetailInput = true;
                                    this.ClearCarInfo();
                                    clearCarInfo = true;
                                }
                                // -----------ADD 2010/09/07------------->>>>>>
                                else
                                {
                                    guideStart = false;
                                    messageFlag = true;//  ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について①
                                }
                                // -----------ADD 2010/09/07-------------<<<<<
                                #endregion
                            }
                            else
                            {
                                settingFlg = true;
                            }

                            if (settingFlg)
                            {
                                #region 各種設定
                                reCalcSalesPrice = true;

                                // 得意先情報設定処理
                                this.SettingSalesSlipFromCustomer(ref salesSlip, customerInfo);

                                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                                //　得意先コード変更の場合、消費税再設定
                                if (salesSlip.ConsTaxLayMethod == 0)
                                {
                                    // 0:伝票転嫁
                                    this._salesSlipInputInitDataAcs.ConsTaxLayMethod = 0;
                                    // 得意先コード変更の場合、税率区分を設定する
                                    this._salesSlipInputInitDataAcs.TaxRateDiv = 2;
                                    // 税率再設定処理
                                    this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate);
                                }
                                else
                                {
                                    this._salesSlipInputInitDataAcs.ConsTaxLayMethod = salesSlip.ConsTaxLayMethod;
                                    // 得意先コード変更の場合、税率区分を設定する
                                    this._salesSlipInputInitDataAcs.TaxRateDiv = 0;
                                    // 税率再設定処理
                                    this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate);
                                }
                                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<

                                // 得意先掛率グループ再セット
                                this.SettingSalesDetailCustRateGrpCode();

                                // 計上日の再セット
                                this.SettingSalesSlipAddUpDate(ref salesSlip); // 計上日再設定

                                // 担当者情報設定処理
                                this.SettingSalesSlipFromEmployeeInfo(ref salesSlip, salesSlip.SalesEmployeeCd);

                                // 納入先情報設定処理
                                this.SettingSalesSlipAddressee(ref salesSlip, customerInfo);

                                // 売上明細データセッティング処理（課税区分設定）
                                this.SettingSalesDetailTaxationCode(salesSlip.ConsTaxLayMethod, salesSlip.TotalAmountDispWayCd);

                                if ((salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) &&
                                    (this.ExistSalesDetailCanGoodsPriceReSettingData()))
                                {
                                    dialogResult = TMsgDisp.Show(
                                        new Form(),
                                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                        "",
                                        "得意先が変更されました。" + "\r\n" + "\r\n" +
                                        "商品価格を再取得しますか？",
                                        0,
                                        MessageBoxButtons.YesNo,
                                        MessageBoxDefaultButton.Button1);

                                    if (dialogResult == DialogResult.Yes)
                                    {
                                        reCalcSalesUnitPrice = true;
                                        salesSlip.StockUpdateFlag = true;  //ADD 2010/01/27
                                        _salesCodeChgFlag = true;// ADD 2012/04/09 yangmj redmine#29313
                                    }
                                    else
                                    {
                                        clearRateInfo = true;
                                    }
                                }

                                //>>>2010/05/30
                                // 売上データキャッシュ処理
                                this.Cache(salesSlip);
                                //<<<201/05/30
                                //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ---------------->>>>>
                                if (reCalcSalesUnitPrice)
                                {
                                    changeDetailsFromCustomerCode(customerInfo, salesSlip);
                                }
                                //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ----------------<<<<<

                                #endregion
                            }

                        }
                        // --- DEL zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 ------->>>>>
                        //// --- ADD yangyi K2014/02/09 ------->>>>>>>>>>>
                        ////オプション判定
                        //if (showEnable())
                        //{
                        //    if (guideStart || reCalcSalesPrice)
                        //    {
                        //        if (!string.IsNullOrEmpty(customerInfo.NoteInfo.Trim()))
                        //        {
                        //            noteInfoStart(code, customerInfo.NoteInfo);
                        //        }
                        //        else
                        //        {
                        //            noteInfoClose();
                        //        }
                        //    }
                        //}
                        //// --- ADD yangyi K2014/02/09 -------<<<<<<<<<<<
                        // --- DEL zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 -------<<<<<

                        // --- ADD zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 ------->>>>>
                        if (showEnable())
                        {
                            //if (guideStart && !clearRateInfo) //  DEL zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について①
                            // --- ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について① ------->>>>>
                            if (_preCustomCd == customerInfo.CustomerCode) messageFlag = true;
                            // --- UPD 陳艶丹 K2018/12/07 RedMine#49789 前橋京和商会個別　得意先メモ障害の対応------->>>>>
                            //if ((!messageFlag && canChangeFocus && !clearRateInfo && guideStart) ||
                            //    (!messageFlag && canChangeFocus && clearRateInfo) ||
                            //    (!messageFlag && !canChangeFocus && !clearRateInfo && !guideStart && reCalcSalesPrice))
                            if (!messageFlag)
                            // --- UPD 陳艶丹 K2018/12/07 RedMine#49789 前橋京和商会個別　得意先メモ障害の対応-------<<<<<
                            // --- ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について① -------<<<<<
                            {
                                if (customerInfo != null)
                                {
                                    MarutokuInfoStart(customerInfo);
                                }
                                else
                                {
                                    noteInfoClose();
                                }
                            }
                        }
                        // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
                        else if (showCustomerGuid(customerInfo))
                        {
                            if (_preCustomCd == customerInfo.CustomerCode) messageFlag = true;
                            // 得意先変更する場合
                            if (!messageFlag)
                            {
                                if (customerInfo != null)
                                {
                                    MarutokuInfoStart(customerInfo);
                                }
                                else
                                {
                                    noteInfoClose();
                                }
                            }
                        }
                        else
                        {
                            if (_preCustomCd == customerInfo.CustomerCode) messageFlag = true;
                            // 得意先変更する場合
                            if (!messageFlag)
                            {
                                noteInfoClose();
                            }
                        }
                        // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
                        // --- ADD zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 -------<<<<<
                    }
                }
                else
                {
                    #region 取得失敗
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_STOPDISP,
                        "",
                        "得意先の取得に失敗しました。",
                        status,
                        MessageBoxButtons.OK);

                    canChangeFocus = false;
                    #endregion
                }
            }

            // --- ADD 2010/06/21 ---------->>>>>
            this._employeeFlag = false;
            // --- ADD 2010/06/21 ----------<<<<<

        }

        //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ---------------->>>>>
        #region 得意先コード、拠点コード、売上日変更時の標準価格再設定処理メソッド群

        /// <summary>
        /// 部品価格更新内容格納クラス
        /// </summary>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        internal class UnitListPriceUpdateData
        {
            #region private field
            /// <summary>
            /// 対象の標準価格を更新するか否か
            /// </summary>
            private bool doUpateListPrice = false;

            /// <summary>
            /// 単価算出価格情報リスト
            /// </summary>
            private List<UnitPriceCalcRet> unitPriceCalcRetList = null;

            /// <summary>
            /// 標準価格
            /// </summary>
            private double listPrice = 0;

            /// <summary>
            /// 印刷品番を更新するか否か
            /// </summary>
            private bool doChangePrtGoodsNo = false;

            /// <summary>
            /// 印刷品番
            /// </summary>
            private string prtGoodsNo = null;

            /// <summary>
            /// 印刷メーカーコード
            /// </summary>
            private int prtMakerCode = 0;

            /// <summary>
            /// 印刷メーカー名
            /// </summary>
            private string prtMakerName = null;

            #endregion //private field

            #region public property
            /// <summary>
            /// 対象の標準価格を更新するか否かの取得
            /// </summary>
            public bool DoUpdateListPrice
            {
                get { return this.doUpateListPrice; }
            }

            /// <summary>
            /// 単価算出価格情報リストの取得
            /// </summary>
            public List<UnitPriceCalcRet> UnitPriceCalcRetList
            {
                get { return this.unitPriceCalcRetList; }
            }

            /// <summary>
            /// 標準価格の取得
            /// </summary>
            public double ListPrice
            {
                get { return this.listPrice; }
            }

            /// <summary>
            /// 印刷品番を更新するか否かの取得
            /// </summary>
            public bool DoChangePrtGoodsNo
            {
                get { return this.doChangePrtGoodsNo; }
            }

            /// <summary>
            /// 印刷品番の取得
            /// </summary>
            public string PrtGoodsNo
            {
                get
                {
                    if (!this.doChangePrtGoodsNo)
                    {
                        return null;
                    }
                    else if (null == this.prtGoodsNo)
                    {
                        return string.Empty;
                    }
                    return this.prtGoodsNo;
                }
            }

            /// <summary>
            /// 印刷メーカーコードの取得
            /// </summary>
            public int PrtMakerCode
            {
                get
                {
                    if (!this.doChangePrtGoodsNo)
                    {
                        return 0;
                    }
                    return this.prtMakerCode;
                }
            }

            /// <summary>
            /// 印刷メーカー名の取得
            /// </summary>
            public string PrtMakerName
            {
                get
                {
                    if (!this.doChangePrtGoodsNo)
                    {
                        return null;
                    }
                    else if (null == this.prtMakerName)
                    {
                        return string.Empty;
                    }
                    return this.prtMakerName;
                }
            }

            #endregion //public property

            #region constructor

            /// <summary>
            /// デフォルトコンストラクタ
            /// </summary>
            public UnitListPriceUpdateData()
            {
                this.initializeFieldProc();
            }

            #endregion //constructor

            #region private method
            /// <summary>
            /// 各フィールドの初期化
            /// </summary>
            /// <remarks>
            /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
            /// <br>Programmer : 30757 佐々木 貴英</br>
            /// <br>Date       : 2015/04/06</br>
            /// <br>管理番号   : 11070149-00</br>
            /// <br></br>
            /// <br>Update Note: </br>
            /// <br>           : </br>
            /// <br></br>
            /// </remarks>
            private void initializeFieldProc()
            {
                this.doUpateListPrice = false;
                this.unitPriceCalcRetList = null;
                this.listPrice = 0;
                this.doChangePrtGoodsNo = false;
                this.prtGoodsNo = null;
                this.prtMakerCode = 0;
                this.prtMakerName = null;
            }

            #endregion //private method

            #region public method

            /// <summary>
            /// このインスタンスの各メンバーを初期化する
            /// </summary>
            /// <remarks>
            /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
            /// <br>Programmer : 30757 佐々木 貴英</br>
            /// <br>Date       : 2015/04/06</br>
            /// <br>管理番号   : 11070149-00</br>
            /// <br></br>
            /// <br>Update Note: </br>
            /// <br>           : </br>
            /// <br></br>
            /// </remarks>
            public void Clear()
            {
                this.initializeFieldProc();
            }

            /// <summary>
            /// 標準価格を設定
            /// </summary>
            /// <param name="paramListPrice">標準価格</param>
            /// <remarks>
            /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
            /// <br>Programmer : 30757 佐々木 貴英</br>
            /// <br>Date       : 2015/04/06</br>
            /// <br>管理番号   : 11070149-00</br>
            /// <br></br>
            /// <br>Update Note: </br>
            /// <br>           : </br>
            /// <br></br>
            /// </remarks>
            public void SetListPrice(double paramListPrice)
            {
                this.listPrice = paramListPrice;
                this.doUpateListPrice = true;
                this.unitPriceCalcRetList = null;
            }

            /// <summary>
            /// 単価算出価格情報リストを設定
            /// </summary>
            /// <param name="paramDoUpateListPrice">対象の標準価格を更新するか否かを指定</param>
            /// <param name="paramUnitPriceCalcRetList">単価算出価格情報リスト</param>
            /// <remarks>
            /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
            /// <br>Programmer : 30757 佐々木 貴英</br>
            /// <br>Date       : 2015/04/06</br>
            /// <br>管理番号   : 11070149-00</br>
            /// <br></br>
            /// <br>Update Note: </br>
            /// <br>           : </br>
            /// <br></br>
            /// </remarks>
            public void SetUnitPriceCalcRetList(bool paramDoUpateListPrice, List<UnitPriceCalcRet> paramUnitPriceCalcRetList)
            {
                this.listPrice = 0;
                this.doUpateListPrice = paramDoUpateListPrice;
                this.unitPriceCalcRetList = paramUnitPriceCalcRetList;
            }

            /// <summary>
            /// 標準価格が有効か否かを判定
            /// </summary>
            /// <returns>標準価格が有効の場合trueを、無効の場合falseを返す</returns>
            /// <remarks>
            /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
            /// <br>Programmer : 30757 佐々木 貴英</br>
            /// <br>Date       : 2015/04/06</br>
            /// <br>管理番号   : 11070149-00</br>
            /// <br></br>
            /// <br>Update Note: </br>
            /// <br>           : </br>
            /// <br></br>
            /// </remarks>
            public bool ListPriceEnabled()
            {
                if (!this.doUpateListPrice)
                {
                    return false;
                }
                if (null != this.unitPriceCalcRetList && 0 < this.unitPriceCalcRetList.Count)
                {
                    return false;
                }

                return true;
            }

            /// <summary>
            /// 単価算出価格情報リストが有効か否かを判定
            /// </summary>
            /// <returns>単価算出価格情報リストが有効の場合trueを、無効の場合falseを返す</returns>
            /// <remarks>
            /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
            /// <br>Programmer : 30757 佐々木 貴英</br>
            /// <br>Date       : 2015/04/06</br>
            /// <br>管理番号   : 11070149-00</br>
            /// <br></br>
            /// <br>Update Note: </br>
            /// <br>           : </br>
            /// <br></br>
            /// </remarks>
            public bool UnitPriceCalcRetListEnabled()
            {
                if (!this.doUpateListPrice)
                {
                    return false;
                }
                if (null == this.unitPriceCalcRetList || 0 >= this.unitPriceCalcRetList.Count)
                {
                    return false;
                }

                return true;
            }

            /// <summary>
            /// 印刷品番を設定
            /// </summary>
            /// <param name="doChangePrtGoodsNo">印刷品番を更新するか否かを指定</param>
            /// <param name="paramPrtGoodsNo">印刷品番</param>
            /// <param name="paramPrtMakerCode">印刷メーカーコード</param>
            /// <param name="paramPrtMakerName">印刷メーカー名</param>
            /// <remarks>
            /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
            /// <br>Programmer : 30757 佐々木 貴英</br>
            /// <br>Date       : 2015/04/06</br>
            /// <br>管理番号   : 11070149-00</br>
            /// <br></br>
            /// <br>Update Note: </br>
            /// <br>           : </br>
            /// <br></br>
            /// </remarks>
            public void SetPrtField(bool doChangePrtGoodsNo, string paramPrtGoodsNo, int paramPrtMakerCode, string paramPrtMakerName)
            {
                this.doChangePrtGoodsNo = doChangePrtGoodsNo;
                if (this.doChangePrtGoodsNo)
                {
                    this.prtGoodsNo = paramPrtGoodsNo;
                    this.prtMakerCode = paramPrtMakerCode;
                    this.prtMakerName = paramPrtMakerName;
                }
                else
                {
                    this.prtGoodsNo = null;
                    this.prtMakerCode = 0;
                    this.prtMakerName = null;
                }
            }

            #endregion //public method
        }

        /// <summary>
        /// 明細行毎の部品価格更新内容格納オブジェクト保持フィールド
        /// </summary>
        private Dictionary<int, UnitListPriceUpdateData> unitListPriceUpdateDataList = new Dictionary<int, UnitListPriceUpdateData>();

        /// <summary>
        /// 明細行毎の部品価格更新内容格納オブジェクト保持フィールドに格納された情報に従って標準価格情報を更新
        /// </summary>
        /// <returns>処理結果（0:成功、0以外失敗）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        public int SetListPriceDisplayByUpdateDataList()
        {
            return this.setListPriceDisplayByUpdateDataListProc();
        }


        /// <summary>
        /// 明細行毎の部品価格更新内容格納オブジェクト保持フィールドに格納された情報に従って標準価格情報を更新(実体)
        /// </summary>
        /// <returns>処理結果（0:成功、0以外失敗）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int setListPriceDisplayByUpdateDataListProc()
        {
            int resultInt = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

            if (null == this.unitListPriceUpdateDataList || 0 >= this.unitListPriceUpdateDataList.Count)
            {
                return (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
            }

            int rowCount = this._salesDetailDataTable.Rows.Count;

            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++)
            {
                int rowResult = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

                // 対象データ行
                SalesInputDataSet.SalesDetailRow detailRow = _salesDetailDataTable[rowIndex];

                // 商品情報
                int blGoodsCode = detailRow.BLGoodsCode;
                string goodsNo = detailRow.GoodsNo;

                // 商品が設定されていない行は処理対象外
                if (string.IsNullOrEmpty(goodsNo) && blGoodsCode == 0)
                {
                    //非商品行
                    continue;
                }

                // 対象行の部品価格更新内容が存在しない場合、更新対象外
                if (!this.unitListPriceUpdateDataList.ContainsKey(rowIndex))
                {
                    // 部品価格更新内容なし
                    continue;
                }

                // 対象行の部品価格更新内容取得
                UnitListPriceUpdateData updateData = this.unitListPriceUpdateDataList[rowIndex];
                if (null == updateData)
                {
                    // 対象行の部品価格更新内容にnullが設定されている場合、実装エラー
                    throw new ApplicationException("対象行の部品価格更新内容を取得できませんでした(Index = " + rowIndex + ")。");
                }

                // 印刷品番変更
                if (updateData.DoChangePrtGoodsNo)
                {
                    detailRow.SelectedGoodsNoDiv = 1; // 印刷用品番有効区分
                    detailRow.PrtGoodsNo = updateData.PrtGoodsNo;
                    detailRow.PrtMakerCode = updateData.PrtMakerCode;
                    detailRow.PrtMakerName = updateData.PrtMakerName;
                }

                // 標準価格変更
                if (updateData.ListPriceEnabled())
                {
                    // 標準価格が有効の場合、標準価格設定する
                    rowResult = salesDetailRowSalesUnitPriceReSettingProc(detailRow.SalesRowNo, updateData.ListPrice);
                }

                // 受注情報の再設定
                if ((int)ConstantManagement.MethodResult.ctFNC_NORMAL == rowResult)
                {
                    SalesInputDataSet.SalesDetailAcceptAnOrderRow orderRow = this.GetSalesDetailAcceptAnOrderRow(detailRow.SalesRowNo);

                    if ( null != orderRow )
                    {
                        // 対象行の受注明細データが取得できた場合、受注明細データを売上明細データの値で上書きする
                        this.CopyAcceptAnOrderFromSalesDetail(detailRow, orderRow);
                    }
                }

                if ((int)ConstantManagement.MethodResult.ctFNC_NORMAL != rowResult)
                {
                    if ((int)ConstantManagement.MethodResult.ctFNC_NORMAL == resultInt)
                    {
                        resultInt = rowResult;
                    }
                }
            }

            return resultInt;
        }


        /// <summary>
        /// 得意先コード変更時の商品情報再取得処理
        /// </summary>
        /// <param name="customerInfo">変更後の得意先マスタ情報</param>
        /// <param name="targetSlip">処理対象売上データ</param>
        /// <returns>処理結果（0:成功、0以外失敗）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        public int ChangeDetailsFromCustomerCode(CustomerInfo customerInfo, SalesSlip targetSlip)
        {
            return this.changeDetailsFromCustomerCode(customerInfo, targetSlip);
        }
        
        /// <summary>
        /// 得意先コード変更時の商品情報再取得処理
        /// </summary>
        /// <param name="customerInfo">変更後の得意先マスタ情報</param>
        /// <param name="targetSlip">処理対象売上データ</param>
        /// <returns>処理結果（0:成功、0以外失敗）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int changeDetailsFromCustomerCode(CustomerInfo customerInfo, SalesSlip targetSlip)
        {
            int resultInt = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            bool existResultNormal = false;
            int rowCount = this._salesDetailDataTable.Rows.Count;

            //明細行毎の部品価格更新内容格納オブジェクト保持フィールドの初期化
            if ( null != this.unitListPriceUpdateDataList )
            {
                this.unitListPriceUpdateDataList.Clear();
            }
            else
            {
                this.unitListPriceUpdateDataList = new Dictionary<int,UnitListPriceUpdateData>();
            }

            for (int rowIndex = 0; rowIndex < rowCount; rowIndex++)
            {
                int rowResult = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

                // 対象データ行
                SalesInputDataSet.SalesDetailRow detailRow = _salesDetailDataTable[rowIndex];

                // 商品情報
                int blGoodsCode = detailRow.BLGoodsCode;
                string goodsNo = detailRow.GoodsNo;
                int salesRowNo = detailRow.SalesRowNo;
                string cmpltGoodsNo = detailRow.CmpltGoodsName;

                // 選択部品情報
                GoodsUnitData goodsUnitData;

                // 売上全体設定＞表示区分プロセス＝[0:しない]の場合、
                if (0 == this._salesSlipInputInitDataAcs.GetSalesTtlSt().PriceSelectDispDiv)
                {
                    //対象行の表示区分に-1を設定
                    detailRow.PriceSelectDiv = (int)PriceSelectDivValues.None;

                    continue;
                }

                // 商品が設定されていない行は処理対象外
                if (string.IsNullOrEmpty(goodsNo) && blGoodsCode == 0)
                {
                    //非商品行
                    continue;
                }

                //結合元(優良)品番が設定されていない場合処理対象外
                if (string.IsNullOrEmpty(cmpltGoodsNo))
                {
                    //品番検索もしくは純正商品選択行
                    continue;
                }

                //該当行の部品価格更新内容の生成と保持フィールドへの格納
                UnitListPriceUpdateData updateData = new UnitListPriceUpdateData();
                this.unitListPriceUpdateDataList.Add(rowIndex, updateData);
                
                //標準価格選択画面でキャンセルされた場合、変更前の値に差し戻す為に
                //変更前の値を格納する。
                updateData.SetListPrice(detailRow.ListPriceDisplay);
                if (1 == detailRow.SelectedGoodsNoDiv)
                {
                    updateData.SetPrtField(true, detailRow.PrtGoodsNo, detailRow.PrtMakerCode, detailRow.PrtMakerName);
                }

                //表示区分に応じた部品情報選択処理を行う
                rowResult = GetGoodsUnitDataFromPriceSelectDiv(customerInfo.CustomerCode, targetSlip, detailRow, out goodsUnitData, ref updateData);

                if ((int)ConstantManagement.MethodResult.ctFNC_NORMAL == rowResult)
                {
                    // 1明細でも部品情報選択処理に成功したら成功とする
                    existResultNormal = true;
                }
                else if ( (int)ConstantManagement.MethodResult.ctFNC_NORMAL == resultInt)
                {
                    // 全て失敗した場合、最初の処理結果を返す為、戻り値が成功のままだった
                    // 時のみ、戻り値に処理結果をセットする
                    resultInt = rowResult;
                }
            }
            if (existResultNormal)
            {
                // 1明細でも部品情報選択処理に成功したら戻り値に成功の値をセットする
                resultInt = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            }
            return resultInt;
        }

        /// <summary>
        /// 部品情報選択処理
        /// </summary>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="targetSlip">処理対象売上データ</param>
        /// <param name="detailRow">処理対象明細データ</param>
        /// <param name="goodsUnitData">選択部品データ</param>
        /// <param name="updateData">部品価格更新内容</param>
        /// <returns>処理結果（0:成功、0以外失敗）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int GetGoodsUnitDataFromPriceSelectDiv(int customerCode, SalesSlip targetSlip, SalesInputDataSet.SalesDetailRow detailRow, out GoodsUnitData goodsUnitData, ref UnitListPriceUpdateData updateData)
        {
            int resultInt = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

            //表示区分の取得
            int priceSelectDiv = GetDisplayDivFromSalesDetailRow(customerCode, detailRow);

            //パラメータ初期化
            goodsUnitData = null;

            //表示区分に応じた部品情報選択処理を行う
            GoodsUnitData goodsSrcUnitData = null;
            PartsInfoDataSet partsInfoDataSet = null;
            PartsInfoDataSet srcPartsInfoDataSet = null;
            List<UnitPriceCalcRet> unitPriceCalcRetList = null;
            List<UnitPriceCalcRet> unitSrcPriceCalcRetList = null;

            // 優良部品情報を取得する
            // ※優良品のユーザー定価を固定表示する判定が必要なため
            resultInt = this.SearchGoodsUnitData(this._enterpriseCode, targetSlip, detailRow, out partsInfoDataSet, out goodsUnitData, out unitPriceCalcRetList);
            if ((int)ConstantManagement.MethodResult.ctFNC_NORMAL != resultInt)
            {
                // 優良品を取得できなかった場合、処理中断
                return (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
            }
            if (null != unitPriceCalcRetList)
            {
                // 算出価格情報リストがnullではない場合、ユーザー定価確定

                // 部品価格更新内容をクリア
                updateData.Clear();

                // 部品価格更新内容に算出価格情報リストをセット
                updateData.SetUnitPriceCalcRetList(false, unitPriceCalcRetList);

                // ユーザー定価確定なので処理終了（但し処理自体は成功）
                return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            }

            // 戻り値初期化
            resultInt = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

            switch (priceSelectDiv)
            {
                case (int)PriceSelectDivValues.PrimeGoods://優良
                    {
                        //
                        //優良部品の標準価格を使用
                        //

                        goodsUnitData.SelectedListPriceDiv = 1;
                        if (null != unitPriceCalcRetList)
                        {
                            //算出価格情報リストがnullではない場合、部品価格更新内容に算出価格情報リストをセット
                            updateData.SetUnitPriceCalcRetList(false, unitPriceCalcRetList);
                        }
                        else
                        {
                            //算出価格情報リストがnullの場合、部品価格更新内容に標準価格をセット
                            updateData.SetListPrice(goodsUnitData.SelectedListPrice);
                        }

                        break;
                    }
                case (int)PriceSelectDivValues.PureGoods://純正
                    {
                        //
                        //純正部品の標準価格を使用
                        //

                        // ユーザー価格判定で使用したローカル変数をクリア
                        partsInfoDataSet = null;
                        goodsUnitData = null;
                        unitPriceCalcRetList = null;

                        //純正部品情報を取得する
                        resultInt = this.SearchSrcGoodsUnitData(this._enterpriseCode, targetSlip, detailRow, out partsInfoDataSet, out goodsUnitData, out unitPriceCalcRetList);
                        if ( (int)ConstantManagement.MethodResult.ctFNC_NORMAL == resultInt )
                        {
                            //印刷品番選択画面
                            DialogResult showResult = ShowSelectionPrtGoodsNoDialog(this._owner, detailRow, ref partsInfoDataSet, ref goodsUnitData);
                            if ( DialogResult.OK == showResult )
                            {
                                //印刷品番選択画面で印刷品番を選択した場合、部品価格更新内容に印刷品番をセット
                                updateData.SetPrtField(true, goodsUnitData.PrtGoodsNo, goodsUnitData.PrtMakerCode, goodsUnitData.PrtMakerName);
                            }

                            goodsUnitData.SelectedListPriceDiv = 1;
                            //純正固定なので、部品価格更新内容に標準価格をセット
                            updateData.SetListPrice(goodsUnitData.SelectedListPrice);
                        }

                        break;
                    }
                case (int)PriceSelectDivValues.HigherPureMultiple://高い方(1:N)
                case (int)PriceSelectDivValues.HigherPureSingle://高い方(1:1)
                    {
                        //
                        //優良部品と純正部品を比較し高い方の標準価格を使用
                        //

                        //純正部品を取得する
                        resultInt = this.SearchSrcGoodsUnitData(this._enterpriseCode, targetSlip, detailRow, out srcPartsInfoDataSet, out goodsSrcUnitData, out unitSrcPriceCalcRetList);

                        //標準価格の高い方を選択
                        if ( (int)ConstantManagement.MethodResult.ctFNC_NORMAL == resultInt )
                        {
                            if ( goodsSrcUnitData.SelectedListPrice > goodsUnitData.SelectedListPrice )
                            {
                                // 純正部品.標準価格 ＞ 優良部品.標準価格の場合、処理対象部品データに純正部品の部品データをセット
                                goodsUnitData = goodsSrcUnitData.Clone();
                                unitPriceCalcRetList = null;
                            }
                        }
                        if ((int)ConstantManagement.MethodResult.ctFNC_NORMAL == resultInt)
                        {
                            //印刷品番選択画面
                            DialogResult showResult = ShowSelectionPrtGoodsNoDialog(this._owner, detailRow, ref partsInfoDataSet, ref goodsUnitData);
                            if ( DialogResult.OK == showResult )
                            {
                                //印刷品番選択画面で印刷品番を選択した場合、部品価格更新内容に印刷品番をセット
                                updateData.SetPrtField(true, goodsUnitData.PrtGoodsNo, goodsUnitData.PrtMakerCode, goodsUnitData.PrtMakerName);
                            }

                            goodsUnitData.SelectedListPriceDiv = 1;
                            if (null != unitPriceCalcRetList)
                            {
                                //算出価格情報リストがnullではない場合、部品価格更新内容に算出価格情報リストをセット
                                updateData.SetUnitPriceCalcRetList(false, unitPriceCalcRetList);
                            }
                            else
                            {
                                //算出価格情報リストがnullの場合、部品価格更新内容に標準価格をセット
                                updateData.SetListPrice(goodsUnitData.SelectedListPrice);
                            }
                        }

                        break;
                    }
                case (int)PriceSelectDivValues.None://設定なし
                default:
                    {
                        //
                        //標準価格選択画面で選択した標準価格を使用
                        //

                        bool doChangePrtGoodsNo = false;
                        bool srcPriceSelected = false;

                        //優良部品検索条件生成
                        //※標準価格選択処理用情報設定で必要になる為ここで作成
                        GoodsCndtn cndtn;
                        CreateGoodsSearchCndtnProc(this._enterpriseCode, targetSlip, detailRow, false ,out cndtn);

                        //純正部品を取得する
                        resultInt = this.SearchSrcGoodsUnitData(this._enterpriseCode, targetSlip, detailRow, out srcPartsInfoDataSet, out goodsSrcUnitData, out unitSrcPriceCalcRetList);

                        //優良部品検索結果の結合元検索情報に純正部品検索結果をセットする
                        if ( (int)ConstantManagement.MethodResult.ctFNC_NORMAL == resultInt )
                        {
                            resultInt = SetPartsInfoDataSetSrcParts(detailRow, srcPartsInfoDataSet, goodsSrcUnitData, ref partsInfoDataSet);
                        }

                        //標準価格選択画面を表示する
                        if ( (int)ConstantManagement.MethodResult.ctFNC_NORMAL == resultInt )
                        {
                            //標準価格選択処理用情報設定
                            SetAttributeForSelectListPriceDisplay(cndtn, customerCode, targetSlip ,ref partsInfoDataSet);

                            //標準価格選択処理
                            resultInt = SelectListPriceDisplay(detailRow, priceSelectDiv, ref partsInfoDataSet, out goodsUnitData, out srcPriceSelected, out doChangePrtGoodsNo);
                        }

                        // 結果格納
                        if ( (int)ConstantManagement.MethodResult.ctFNC_NORMAL == resultInt)
                        {
                            if ( doChangePrtGoodsNo )
                            {
                                //印刷品番選択画面で印刷品番を選択した場合、部品価格更新内容に印刷品番をセット
                                updateData.SetPrtField(true, goodsUnitData.PrtGoodsNo, goodsUnitData.PrtMakerCode, goodsUnitData.PrtMakerName);
                            }

                            if (srcPriceSelected)
                            {
                                // 標準価格選択画面で結合元(純正)品が選択された場合、算出価格情報リストにnullを採用
                                unitPriceCalcRetList = null;
                            }

                            goodsUnitData.SelectedListPriceDiv = 1;
                            if (null != unitPriceCalcRetList)
                            {
                                //算出価格情報リストがnullではない場合、部品価格更新内容に算出価格情報リストをセット
                                updateData.SetUnitPriceCalcRetList(false, unitPriceCalcRetList);
                            }
                            else
                            {
                                //算出価格情報リストがnullの場合、部品価格更新内容に標準価格をセット
                                updateData.SetListPrice(goodsUnitData.SelectedListPrice);
                            }
                        }

                        break;
                    }
            }
            return resultInt;
        }
  
        /// <summary>
        /// 対象明細行の表示区分を取得する
        /// </summary>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="detailRow">処理対象明細データ</param>
        /// <returns>表示区分</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int GetDisplayDivFromSalesDetailRow(int customerCode, SalesInputDataSet.SalesDetailRow detailRow)
        {
            //表示区分
            int priceSelectDiv = (int)PriceSelectDivValues.None;

            //表示区分リスト
            List<PriceSelectSet> displayDivList = this._salesSlipInputInitDataAcs.GetDisplayDivList();

            //表示区分リストから表示区分を取得
            this._priceSelectSetAcs.GetDisplayDiv(displayDivList, detailRow.GoodsMakerCd, detailRow.BLGoodsCode, customerCode , detailRow.CustRateGrpCode, out priceSelectDiv);

            return priceSelectDiv;
        }

        #region 部品検索
        /// <summary>
        /// 選択部品情報取得処理(優良)
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="targetSlip">処理対象売上データ</param>
        /// <param name="detailRow">処理対象明細データ</param>
        /// <param name="partsInfoDataSet">検索結果</param>
        /// <param name="goodsUnitData">取得部品データ</param>
        /// <param name="unitPriceCalcRetList">算出価格情報リスト</param>
        /// <returns>処理結果（0:成功、0以外失敗）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int SearchGoodsUnitData(string enterpriseCode, SalesSlip targetSlip, SalesInputDataSet.SalesDetailRow detailRow, out PartsInfoDataSet partsInfoDataSet, out GoodsUnitData goodsUnitData, out List<UnitPriceCalcRet> unitPriceCalcRetList)
        {
            return SearchGoodsUnitData(enterpriseCode, targetSlip, detailRow, false, out partsInfoDataSet, out goodsUnitData, out unitPriceCalcRetList);
        }

        /// <summary>
        /// 検索元部品情報取得処理(純正)
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="targetSlip">処理対象売上データ</param>
        /// <param name="detailRow">処理対象明細データ</param>
        /// <param name="partsInfoDataSet">検索結果</param>
        /// <param name="goodsUnitData">取得部品データ</param>
        /// <param name="unitPriceCalcRetList">算出価格情報リスト</param>
        /// <returns>処理結果（0:成功、0以外失敗）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int SearchSrcGoodsUnitData(string enterpriseCode, SalesSlip targetSlip, SalesInputDataSet.SalesDetailRow detailRow, out PartsInfoDataSet partsInfoDataSet, out GoodsUnitData goodsUnitData, out List<UnitPriceCalcRet> unitPriceCalcRetList)
        {
            return SearchGoodsUnitData(enterpriseCode, targetSlip, detailRow, true, out partsInfoDataSet, out goodsUnitData, out unitPriceCalcRetList);
        }

        /// <summary>
        /// 部品情報検索処理
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="targetSlip">処理対象売上データ</param>
        /// <param name="detailRow">処理対象明細データ</param>
        /// <param name="doSrcGoodsSearch">検索対象を結合元部品とするか否かを指定</param>
        /// <param name="partsInfoDataSet">検索結果</param>
        /// <param name="goodsUnitData">取得部品データ</param>
        /// <param name="unitPriceCalcRetList">算出価格情報リスト</param>
        /// <returns>処理結果（0:成功、0以外失敗）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int SearchGoodsUnitData(string enterpriseCode, SalesSlip targetSlip, SalesInputDataSet.SalesDetailRow detailRow, bool doSrcGoodsSearch, out PartsInfoDataSet partsInfoDataSet, out GoodsUnitData goodsUnitData, out List<UnitPriceCalcRet> unitPriceCalcRetList)
        {
            int resultInt = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            GoodsCndtn cndtn;

            partsInfoDataSet = null;
            goodsUnitData = null;
            unitPriceCalcRetList = null;


            // 検索条件の生成
            resultInt = CreateGoodsSearchCndtnProc(enterpriseCode, targetSlip, detailRow, doSrcGoodsSearch ,out cndtn);

            // 部品情報の検索を行う
            if ( (int)ConstantManagement.MethodResult.ctFNC_NORMAL == resultInt )
            {
                //検索条件の生成に成功した場合、部品情報検索処理（実体）を実行する
                resultInt = SearchGoodsUnitDataProc(cndtn, targetSlip, detailRow, out partsInfoDataSet, out goodsUnitData, out unitPriceCalcRetList);
            }

            return resultInt;
        }

        /// <summary>
        /// 検索条件生成処理
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="targetSlip">処理対象売上データ</param>
        /// <param name="detailRow">処理対象明細データ</param>
        /// <param name="doSrcGoodsCndtn">検索対象を結合元部品とするか否かを指定</param>
        /// <param name="cndtn">検索条件生成結果</param>
        /// <returns>処理結果（0:成功、0以外失敗）※現在は0のみ</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int CreateGoodsSearchCndtnProc(string enterpriseCode, SalesSlip targetSlip, SalesInputDataSet.SalesDetailRow detailRow, bool doSrcGoodsCndtn ,out GoodsCndtn cndtn)
        {
            int resultInt = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

            //売上全体設定マスタ取得
            SalesTtlSt salesTtlStMaster = this._salesSlipInputInitDataAcs.GetSalesTtlSt();

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "CreateGoodsSearchCndtnProc", "●抽出条件設定　開始");

            //検索条件インスタンスを生成
            cndtn = new GoodsCndtn();

            //検索部品情報
            if ( doSrcGoodsCndtn )
            {
                //結合元純正品の検索条件を作成
                cndtn.GoodsMakerCd = detailRow.CmpltGoodsMakerCd;
                cndtn.GoodsNo = detailRow.CmpltGoodsName;
                cndtn.MakerName = detailRow.CmpltMakerName;
            }
            else
            {
                //選択部品の検索条件を作成
                cndtn.GoodsMakerCd = detailRow.GoodsMakerCd;
                cndtn.GoodsNo = detailRow.GoodsNo;
                cndtn.MakerName = detailRow.MakerName;
            }

            //売上データ情報
            cndtn.EnterpriseCode = enterpriseCode;
            cndtn.SectionCode = targetSlip.ResultsAddUpSecCd;
            cndtn.PriceApplyDate = targetSlip.SalesDate;


            //売上全体設定マスタ参照情報
            cndtn.SubstCondDivCd = salesTtlStMaster.SubstCondDivCd;
            cndtn.PrmSubstCondDivCd = salesTtlStMaster.PrmSubstCondDivCd;
            cndtn.SubstApplyDivCd = salesTtlStMaster.SubstApplyDivCd;
            cndtn.PartsSearchPriDivCd = salesTtlStMaster.PartsSearchPriDivCd;
            cndtn.JoinInitDispDiv = salesTtlStMaster.JoinInitDispDiv;

            //売上伝票入力ユーザー設定参照情報
            cndtn.SearchUICntDivCd = this._salesSlipInputConstructionAcs.SearchUICntDivCdValue;//※2010/06/15現在0固定
            cndtn.EnterProcDivCd = this._salesSlipInputConstructionAcs.EnterProcDivCdValue;//※2010/06/15現在0固定
            cndtn.PartsNoSearchDivCd = this._salesSlipInputConstructionAcs.PartsNoSearchDivCdValue;//※2010/06/15現在0固定
            cndtn.PartsJoinCntDivCd = this._salesSlipInputConstructionAcs.PartsJoinCntDivCdValue;//品番結合制御区分

            //全体設定初期値マスタ参照情報
            cndtn.EraNameDispCd1 = this._salesSlipInputInitDataAcs.GetAllDefSet().EraNameDispCd1;

            //固定値
            cndtn.IsSettingSupplier = 1;

            //車輛情報
            if ((null != detailRow) && (Guid.Empty != detailRow.CarRelationGuid))
            {
                cndtn.SearchCarInfo = this.GetCarInfoNew(detailRow.CarRelationGuid);
            }
            else
            {
                cndtn.SearchCarInfo = this.GetCarInfoNew(this._beforeCarRelationGuid);
            }

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "CreateGoodsSearchCndtnProc", "○抽出条件設定　終了");
            return resultInt;
        }

        /// <summary>
        /// 部品情報検索処理（実体）
        /// </summary>
        /// <param name="cndtn">部品検索条件</param>
        /// <param name="targetSlip">処理対象売上データ</param>
        /// <param name="detailRow">処理対象明細データ</param>
        /// <param name="partsInfoDataSet">検索結果</param>
        /// <param name="goodsUnitData">取得部品データ</param>
        /// <param name="unitPriceCalcRetList">算出価格情報リスト</param>
        /// <returns>処理結果（0:成功、0以外失敗）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int SearchGoodsUnitDataProc(GoodsCndtn cndtn, SalesSlip targetSlip, SalesInputDataSet.SalesDetailRow detailRow, out PartsInfoDataSet partsInfoDataSet, out GoodsUnitData goodsUnitData, out List < UnitPriceCalcRet > unitPriceCalcRetList)
        {
            int resultInt = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            string msg;
            List<GoodsUnitData> goodsUnitDataList = null;

            partsInfoDataSet = null;
            goodsUnitData = null;
            unitPriceCalcRetList = null;

            // 部品情報の検索を行う
            if (null != cndtn)
            {
                GoodsAcs goodsAcs = new GoodsAcs(cndtn.SectionCode);
                resultInt = goodsAcs.SearchPartsFromGoodsNo(cndtn, out partsInfoDataSet, out goodsUnitDataList, out msg);
            }
            else
            {
                resultInt = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }

            //検索対象の部品情報を抽出
            if ((int)ConstantManagement.MethodResult.ctFNC_NORMAL == resultInt)
            {
                //部品情報の検索に成功した場合、商品連結データオブジェクトリストから検索対象の部品情報を抽出する。
                if (null != goodsUnitDataList && 0 < goodsUnitDataList.Count)
                {
                    foreach (GoodsUnitData nowData in goodsUnitDataList)
                    {
                        if (0 == string.Compare(nowData.GoodsNo, cndtn.GoodsNo) && nowData.GoodsMakerCd == cndtn.GoodsMakerCd)
                        {
                            goodsUnitData = nowData.Clone();
                            goodsUnitData.MakerName = this._salesSlipInputInitDataAcs.GetName_FromMaker(goodsUnitData.GoodsMakerCd);

                            // 標準価格の算出
                            int calcResult = this.GetListPriceCalcRet(cndtn.EnterpriseCode, targetSlip, detailRow, goodsUnitData, out unitPriceCalcRetList);
                            bool doSetUnitPriceCalcRet = false;
                            if ((int)ConstantManagement.MethodResult.ctFNC_NORMAL == calcResult)
                            {
                                //ユーザー定価を取得する必要がある場合、表示標準価格を再設定する。
                                doSetUnitPriceCalcRet = !string.IsNullOrEmpty(unitPriceCalcRetList[0].RateSettingDivide);
                                if ( doSetUnitPriceCalcRet )
                                {
                                    goodsUnitData.SelectedListPrice = unitPriceCalcRetList[0].UnitPriceTaxExcFl;
                                }

                            }
                            if (!doSetUnitPriceCalcRet)
                            {
                                unitPriceCalcRetList = null;

                                // 価格適用日の価格情報データを取得する
                                GoodsPrice selectedPrice = this._salesSlipInputInitDataAcs.GetGoodsPrice(cndtn.PriceApplyDate, goodsUnitData.GoodsPriceList);
                                //価格情報データを取得できた場合、標準価格に設定する
                                if (null != selectedPrice)
                                {
                                    goodsUnitData.SelectedListPrice = selectedPrice.ListPrice;
                                }
                            }

                            // 検索結果の部品情報に対象データのメーカー名及び標準価格（税抜）を設定する。
                            foreach ( PartsInfoDataSet.UsrGoodsInfoRow usrGoodsInfoRow in partsInfoDataSet.UsrGoodsInfo )
                            {
                                if (0 == string.Compare(usrGoodsInfoRow.GoodsNo, cndtn.GoodsNo) && usrGoodsInfoRow.GoodsMakerCd == cndtn.GoodsMakerCd)
                                {
                                    usrGoodsInfoRow.GoodsMakerNm = goodsUnitData.MakerName;
                                    usrGoodsInfoRow.PriceTaxExc = goodsUnitData.SelectedListPrice;
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }
                if (null == goodsUnitData)
                {
                    resultInt = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
                }
            }

            return resultInt;
        }
        #endregion //部品検索

        #region 部品価格算出

        /// <summary>
        /// 標準価格取得
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="targetSlip">処理対象売上データ</param>
        /// <param name="detailRow">算出対象明細データ</param>
        /// <param name="goodsUnitData">算出対象部品データ</param>
        /// <param name="unitPriceCalcRetList">算出価格情報リスト</param>
        /// <returns>処理結果（0:成功、-1:取得結果0件、　0,-1以外:失敗）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int GetListPriceCalcRet(string enterpriseCode, SalesSlip targetSlip, SalesInputDataSet.SalesDetailRow detailRow, GoodsUnitData goodsUnitData, out List<UnitPriceCalcRet> unitPriceCalcRetList)
        {
            int resultInt = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            double shipmentCnt = detailRow.ShipmentCntDisplay; // 出荷数（ロット判定用）

            // OUT結果格納パラメータ初期化
            unitPriceCalcRetList = null;

            // 出荷数絶対値取得
            if ( 0 > shipmentCnt )
            {
                shipmentCnt *= (double)-1;
            }

            //単価算出
            List<UnitPriceCalcRet> wkList = new List<UnitPriceCalcRet>();
            if (0 != goodsUnitData.GoodsMakerCd)
            {
                // 算出パラメータの生成
                UnitPriceCalcParam unitPriceCalcParam = new UnitPriceCalcParam();

                // 算出対象部品データから取得
                // ※算出対象が結合元(純正)品の可能性があるので、
                //   商品情報も算出対象部品データから取得
                unitPriceCalcParam.GoodsMakerCd = goodsUnitData.GoodsMakerCd;                   // メーカーコード
                unitPriceCalcParam.GoodsNo = goodsUnitData.GoodsNo;                             // 品番
                unitPriceCalcParam.SectionCode = targetSlip.ResultsAddUpSecCd;                  // 拠点コード

                //売上データから取得
                unitPriceCalcParam.CustomerCode = targetSlip.CustomerCode;                      // 得意先コード
                unitPriceCalcParam.PriceApplyDate = targetSlip.SalesDate; 　　　　　            // 適用日
                unitPriceCalcParam.TaxRate = targetSlip.ConsTaxRate;                            // 税率
                unitPriceCalcParam.TotalAmountDispWayCd = targetSlip.TotalAmountDispWayCd;      // 総額表示方法区分
                unitPriceCalcParam.TtlAmntDspRateDivCd = targetSlip.TtlAmntDispRateApy;         // 総額表示掛率適用区分 0:(税込金額×掛率) 1:(税抜金額×掛率)から消費税を求め合算(消費税算出時消費税の端数処理が動作)
                unitPriceCalcParam.ConsTaxLayMethod = targetSlip.ConsTaxLayMethod;              // 消費税転嫁方式
                int salesCnsTaxFrcProcCd = this._customerInfoAcs.GetSalesFractionProcCd(enterpriseCode, targetSlip.CustomerCode, CustomerInfoAcs.FracProcMoneyDiv.CnsTaxFrcProcCd); // 売上消費税端数処理コード(得意先マスタより取得)
                unitPriceCalcParam.SalesCnsTaxFrcProcCd = salesCnsTaxFrcProcCd;                 // 売上消費税端数処理コード
                int salesUnPrcFrcProcCd = this._customerInfoAcs.GetSalesFractionProcCd(enterpriseCode, targetSlip.CustomerCode, CustomerInfoAcs.FracProcMoneyDiv.UnPrcFrcProcCd); // 売上単価端数処理コード(得意先マスタより取得)
                unitPriceCalcParam.SalesUnPrcFrcProcCd = salesUnPrcFrcProcCd;                   // 売上単価端数処理コード

                //明細データから取得
                unitPriceCalcParam.BLGoodsCode = detailRow.RateBLGoodsCode;                     // BLコード
                unitPriceCalcParam.BLGoodsName = detailRow.RateBLGoodsName;                     // BLコード名称
                unitPriceCalcParam.BLGroupCode = detailRow.RateBLGroupCode;                     // BLグループコード
                unitPriceCalcParam.CountFl = detailRow.ShipmentCntDisplay;                      // 数量
                // 出荷数=0かつ受注数>0の場合は受注数で算出
                if ((detailRow.ShipmentCntDisplay == 0) && (detailRow.AcceptAnOrderCntDisplay > 0))
                {
                    unitPriceCalcParam.CountFl = detailRow.AcceptAnOrderCntDisplay;
                }
                unitPriceCalcParam.CustRateGrpCode = detailRow.CustRateGrpCode;                 // 得意先掛率グループコード
                unitPriceCalcParam.TaxationDivCd = detailRow.TaxationDivCd;                     // 課税区分
                int stockCnsTaxFrcProcCd = this._supplierAcs.GetStockFractionProcCd(enterpriseCode, detailRow.SupplierCd, SupplierAcs.StockFracProcMoneyDiv.CnsTaxFrcProcCd); // 仕入消費税端数処理コード(仕入先マスタより取得)
                unitPriceCalcParam.StockCnsTaxFrcProcCd = stockCnsTaxFrcProcCd;                 // 仕入消費税端数処理コード
                unitPriceCalcParam.GoodsRateGrpCode = detailRow.RateGoodsRateGrpCd;             // 商品掛率グループコード
                unitPriceCalcParam.GoodsRateRank = detailRow.GoodsRateRank;                     // 商品掛率ランク
                unitPriceCalcParam.SupplierCd = detailRow.SupplierCd;                           // 仕入先コード

                //単価算出モジュールにより、単価を算出
                this._unitPriceCalculation.CalculateSalesRelevanceUnitPrice(unitPriceCalcParam, goodsUnitData, out wkList);
            }

            if ( null == wkList || 0 >= wkList.Count )
            {
                //単価算出結果リストが空の場合、キャンセル扱いとする。
                resultInt = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
            }
            else
            {
                // 標準価格のみ抽出
                unitPriceCalcRetList = new List<UnitPriceCalcRet>(
                    wkList.FindAll(
                        delegate(UnitPriceCalcRet calcRet)
                        {
                            if ( 0 != string.Compare(UnitPriceCalculation.ctUnitPriceKind_ListPrice, calcRet.UnitPriceKind) )
                            {
                                // 対象の単価算出結果が標準価格以外の場合、対象外
                                return false;
                            }

                            if ( calcRet.LotSt > shipmentCnt || calcRet.LotEd < shipmentCnt )
                            {
                                //対象明細の出荷数が対象単価算出結果のロット範囲外の場合、対象外
                                return false;
                            }

                            // 上記以外の場合、対象
                            return true;
                        }
                    ));

                if ( null == unitPriceCalcRetList || 0 >= unitPriceCalcRetList.Count )
                {
                    //抽出結果リストが空の場合、キャンセル扱いとする。
                    resultInt = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
                }
            }

            return resultInt;
        }


        #endregion //部品価格算出

        #region 標準価格選択
        /// <summary>
        /// 処理対象（優良）部品検索結果の結合元検索情報として結合元（純正）部品検索結果をセット
        /// </summary>
        /// <param name="partsInfoDataSet">処理対象（優良）部品検索結果</param>
        /// <param name="detailRow">処理対象明細明細データ</param>
        /// <param name="srcPartsInfoDataSet">結合元（純正）部品検索結果</param>
        /// <param name="srcGoodsUnitData">結合元（純正）部品データ</param>
        /// <returns>処理結果（0:成功、0以外失敗）※現在は0のみ</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int SetPartsInfoDataSetSrcParts(SalesInputDataSet.SalesDetailRow detailRow, PartsInfoDataSet srcPartsInfoDataSet, GoodsUnitData srcGoodsUnitData, ref PartsInfoDataSet partsInfoDataSet)
        {
            int resultInt = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

            // 結合元（純正）部品検索結果から結合元（純正）部品以外を削除
            if ((null != srcPartsInfoDataSet.UsrGoodsInfo) && (0 < srcPartsInfoDataSet.UsrGoodsInfo.Count))
            {
                for (int pos = 0; pos < srcPartsInfoDataSet.UsrGoodsInfo.Count; )
                {
                    PartsInfoDataSet.UsrGoodsInfoRow nowInfoRow = srcPartsInfoDataSet.UsrGoodsInfo[pos];

                    if ( null == nowInfoRow || (0 != string.Compare(detailRow.CmpltGoodsName, nowInfoRow.GoodsNo) && detailRow.CmpltGoodsMakerCd != nowInfoRow.GoodsMakerCd ) )
                    {
                        //対象レコードがnull、もしくは、抽出対象部品情報以外の場合、対象レコードを削除
                        srcPartsInfoDataSet.UsrGoodsInfo.RemoveUsrGoodsInfoRow(nowInfoRow);

                        continue;
                    }

                    // 対象レコードが削除対象外だった場合、結合元（純正）部品データのの標準価格を設定する。
                    nowInfoRow.PriceTaxExc = srcGoodsUnitData.SelectedListPrice;
                    
                    pos++;
                }
            }
            // 処理対象（優良）部品検索結果の結合元検索情報として結合元（純正）部品検索結果をセット
            partsInfoDataSet.PartsInfoDataSetSrcParts = srcPartsInfoDataSet;

            return resultInt;
        }

        /// <summary>
        /// 処理対象（優良）部品検索結果に標準価格選択処理で必要となる情報を設定
        /// </summary>
        /// <param name="cndtn">処理対象（優良）部品の検索条件</param>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="salesSlip">処理対象売上データ</param>
        /// <param name="partsInfoDataSet">処理対象（優良）部品検索結果</param>
        /// <returns>処理結果（0:成功、0以外失敗）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int SetAttributeForSelectListPriceDisplay(GoodsCndtn cndtn,int customerCode, SalesSlip salesSlip ,ref PartsInfoDataSet partsInfoDataSet)
        {
            int resultInt = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

            //得意先コード
            partsInfoDataSet.CustomerCode = customerCode;

            //価格適用日
            partsInfoDataSet.PriceApplyDate = salesSlip.SalesDate;

            //品名表示区分
            partsInfoDataSet.SetPartsNameDisplayPattern(this._salesSlipInputInitDataAcs.GetSalesTtlSt());

            //表示区分プロセス
            partsInfoDataSet.PriceSelectDispDiv = this._salesSlipInputInitDataAcs.GetSalesTtlSt().PriceSelectDispDiv;

            //得意先掛率グループコードリスト
            partsInfoDataSet.CustRateGrpCodeList = this._salesSlipInputInitDataAcs.GetGetCustRateGrpAll();

            //表示区分リスト
            partsInfoDataSet.PriceSelectDivList = this._salesSlipInputInitDataAcs.GetDisplayDivList();

            // 売価未設定時区分
            partsInfoDataSet.UnPrcNonSettingDiv = this._salesSlipInputInitDataAcs.GetSalesTtlSt().UnPrcNonSettingDiv;

            // デリゲートの設定
            if (null == partsInfoDataSet.CalculateGoodsPrice)
            {
                // 単価算出デリゲートにハンドラを設定
                partsInfoDataSet.CalculateGoodsPrice += new PartsInfoDataSet.CalculateGoodsPriceCallback(this.CalculateUnitPrice);
            }
            if (null == partsInfoDataSet.CalculatePrice)
            {
                // 価格計算デリゲートにハンドラを設定
                partsInfoDataSet.CalculatePrice += new PartsInfoDataSet.CalculatePriceCallback(this.CalcPrice);
            }
            if (null == partsInfoDataSet.ReflectCampaign)
            {
                // キャンペーン価格デリゲートにハンドラを設定
                partsInfoDataSet.ReflectCampaign += new PartsInfoDataSet.ReflectCampaignCallback(this.ReflectCampaign);
            }
            if (null == partsInfoDataSet.SearchPartsForSrcParts)
            {
                // 結合元検索デリゲートにハンドラを設定
                partsInfoDataSet.SearchPartsForSrcParts += new PartsInfoDataSet.SearchPartsForSrcPartsCallBack(this.SearchPartsForSrcPartsPrc);
            }
            if (null == partsInfoDataSet.GetCustRateGrp)
            {
                // 得意先掛率グループ取得デリゲートにハンドラを設定
                partsInfoDataSet.GetCustRateGrp += new PartsInfoDataSet.GetCustRateGrpCallBack(this.GetCustRateGrpCode);
            }
            if (null == partsInfoDataSet.GetDisplayDiv)
            {
                // 標準価格選択区分取得デリゲートにハンドラを設定
                partsInfoDataSet.GetDisplayDiv += new PartsInfoDataSet.GetDisplayDivCallBack(this.GetDisplayDiv);
            }
            if (null == partsInfoDataSet.GetBLGoodsInfo)
            {
                // BL商品情報取得デリゲートにハンドラを設定
                partsInfoDataSet.GetBLGoodsInfo += new PartsInfoDataSet.GetBLGoodsInfoCallBack(this.GetBLGoodsInfo);
            }

            // 親ウィンドウの車輛情報
            this.SetCarInfoToThread(cndtn);

            // 標準価格選択画面で必要な検索条件の設定
            partsInfoDataSet.SearchCarInfo = cndtn.SearchCarInfo;
            partsInfoDataSet.SearchCondition.SectionCode = cndtn.SectionCode;

            // 標準価格選択画面で処理対象となる部品情報の設定
            for (int index = 0; index < partsInfoDataSet.UsrGoodsInfo.Count; index++)
            {
                PartsInfoDataSet.UsrGoodsInfoRow nowRow = partsInfoDataSet.UsrGoodsInfo[index];
                if (null == nowRow)
                {
                    // 現在のレコードがnullの場合、処理対象外
                    continue;
                }
                if (string.IsNullOrEmpty(nowRow.GoodsNo))
                {
                    // 現在のレコードの部品情報に商品コードが設定されていない場合、処理対象外
                    continue;
                }
                if (0 != String.Compare(nowRow.GoodsNo, cndtn.GoodsNo) || nowRow.GoodsMakerCd != cndtn.GoodsMakerCd)
                {
                    // 現在のレコードの部品情報が処理対象（優良）部品のものではない場合、処理対象外
                    continue;
                }

                //選択部品情報インスタンスを作成
                SelectionInfo selInfo = new SelectionInfo();
                selInfo.Key = index;
                selInfo.Selected = true;

                //選択部品情報に現在のレコードの部品情報をセット
                selInfo.RowGoods = partsInfoDataSet.UsrGoodsInfo[index];

                //選択部品情報を選択部品リスト（処理対象部品リスト）にセット
                partsInfoDataSet.AddSelectionInfo(partsInfoDataSet.ListSelectionInfo, selInfo.Key, ref selInfo);
            }

            // 検索方法設定
            // 標準価格選択画面表示前に、検索元（純正）部品を取得する為、0固定とする。
            partsInfoDataSet.SearchMethod = 0;// BL検索・TBO検索・オリジナル検索

            return resultInt;
        }

        /// <summary>
        /// 標準価格選択処理
        /// </summary>
        /// <param name="detailRow">処理対象明細データ</param>
        /// <param name="priceSelectDiv">処理対象明細の変更後表示区分</param>
        /// <param name="partsInfoDataSet">処理対象（優良）部品検索結果</param>
        /// <param name="goodsUnitData">選択部品情報（選択結果）</param>
        /// <param name="srcPriceSelected">結合元(純正)品選択フラグ</param>
        /// <param name="doChangePrtGoodsNo">印刷品番変更フラグ</param>
        /// <returns>処理結果（0:成功、0以外失敗）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int SelectListPriceDisplay(SalesInputDataSet.SalesDetailRow detailRow, int priceSelectDiv, ref PartsInfoDataSet partsInfoDataSet, out GoodsUnitData goodsUnitData, out bool srcPriceSelected , out bool doChangePrtGoodsNo)
        {
            int resultInt = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

            bool isGoodSearch = false; //結合元設定済なのでfalse固定

            goodsUnitData = null;
            doChangePrtGoodsNo = false;
            srcPriceSelected = false;


            //標準価格選択画面実行
            foreach (PartsInfoDataSet.UsrGoodsInfoRow usrGoodsRow in partsInfoDataSet.UsrGoodsInfo)
            {
                if (0 != String.Compare(usrGoodsRow.GoodsNo, detailRow.GoodsNo) || usrGoodsRow.GoodsMakerCd != detailRow.GoodsMakerCd)
                {
                    //現在の部品情報が処理対象（優良）部品のものではない場合、処理対象外
                    //※処理対象（優良）部品検索結果には、処理対象部品以外も含まれている為判定が必要
                    continue;
                }

                //標準価格選択UIの実行
                DialogResult retDialog = DialogResult.Abort;
                using (SelectionListPrice frmSetPrice = new SelectionListPrice(detailRow.GoodsMakerCd, detailRow.GoodsNo, partsInfoDataSet.SearchCarInfo, partsInfoDataSet, priceSelectDiv))
                {
                    //タイトル追加文字列の生成と設定
                    frmSetPrice.AddTitleCaption = "(" + detailRow.SalesRowNo + "行目)";

                    retDialog = frmSetPrice.ShowDialog(this._owner);
                    
                    //標準価格選択UI.選択純正品番に値が設定されている場合、フラグを設定
                    if (!string.IsNullOrEmpty(frmSetPrice.SrcGoodsNo))
                    {
                        // 結合元(純正)品選択フラグにtrueを設定
                        srcPriceSelected = true;

                        //標準価格選択UIの実行結果がOKの場合、印刷品番変更フラグにtrueを設定する
                        if (DialogResult.OK == retDialog || DialogResult.Yes == retDialog)
                        {
                            doChangePrtGoodsNo = true;
                        }
                    }
                }

                if (DialogResult.OK == retDialog || DialogResult.Yes == retDialog)
                {
                    // 部品検索データセットから選択情報の商品連結データオブジェクトを取得

                    // 処理対象（優良）部品検索結果から、部品リストを作成
                    ArrayList goodsUnitDataArray = partsInfoDataSet.GetGoodsListWithSrc(true, this._salesSlipInputInitDataAcs.GetSalesTtlSt().PartsNameDspDivCd, false);

                    foreach( object nowObject in goodsUnitDataArray )
                    {
                        GoodsUnitData nowGoodsUnitData = nowObject as GoodsUnitData;
                        // 現在の要素がGoodsUnitDataではない場合、処理対象外
                        if ( null == nowGoodsUnitData )
                        {
                            continue;
                        }
                        if ( 0 != string.Compare(nowGoodsUnitData.GoodsNo, detailRow.GoodsNo) || nowGoodsUnitData.GoodsMakerCd != detailRow.GoodsMakerCd ) 
                        {
                            //現在の部品情報が処理対象（優良）部品のものではない場合、処理対象外
                            continue;
                        }

                        //現在の部品情報を選択部品情報（選択結果）にセット
                        goodsUnitData = nowGoodsUnitData.Clone();
                        break;
                    }
                }
                else if (DialogResult.Abort == retDialog || DialogResult.Cancel == retDialog)
                {
                    resultInt = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
                }
                else
                {
                    resultInt = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
                }
                break;
            }



            return resultInt;
        }
        #endregion 標準価格選択

        #region 印刷品番選択
        /// <summary>
        /// 印刷品番選択ダイアログ制御
        /// </summary>
        /// <param name="owner">親ウィンドウインスタンス</param>
        /// <param name="detailRow">処理対象明細データ</param>
        /// <param name="partsInfo">処理対象検索結果情報</param>
        /// <param name="goodsUnitData">処理対象部品情報</param>
        /// <returns>ダイアログボックスの戻り値</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private DialogResult ShowSelectionPrtGoodsNoDialog(IWin32Window owner, SalesInputDataSet.SalesDetailRow detailRow, ref PartsInfoDataSet partsInfo, ref GoodsUnitData goodsUnitData)
        {
            DialogResult retResult = DialogResult.OK;

            int goodsMakerCd = detailRow.GoodsMakerCd; // メーカーコード
            string goodsMakerNm = detailRow.MakerName; // メーカー名
            string goodsNo =  detailRow.GoodsNo;      // 品番

            int goodsMakerCd2 = detailRow.CmpltGoodsMakerCd;　//純正品メーカーコード
            string goodsMakerNM2 = detailRow.CmpltMakerName;  //純正品メーカー名
            string goodsNo2 =  detailRow.CmpltGoodsName;      //純正品番

            // 売上全体設定マスタ取得 
            SalesTtlSt salesTtlSt = null;
            int status = GetSalesTtlSt(false, out salesTtlSt);
            if ((int)ConstantManagement.DB_Status.ctDB_NORMAL != status)
            {
                this._salesSlipInputInitDataAcs.GetSalesTtlSt(out salesTtlSt);
            }

            //印刷品番選択画面表示用に処理対象検索結果情報を加工
            if ((int)ConstantManagement.DB_Status.ctDB_NORMAL == status)
            {
                //partsInfoDataSetに印刷品番選択画面で使用される優良品情報を検索する
                PartsInfoDataSet.UsrGoodsInfoRow nowRow = partsInfo.UsrGoodsInfo.FindByGoodsMakerCdGoodsNo(
                    detailRow.GoodsMakerCd, detailRow.GoodsNo);

                if (null == nowRow)
                {
                    // 優良品情報を検索した結果、商品連結データセットに優良品情報が設定されていなかった場合
                    // 対象レコードを新規に追加

                    //新規商品連結データレコードを生成
                    PartsInfoDataSet.UsrGoodsInfoRow newRow = partsInfo.UsrGoodsInfo.NewUsrGoodsInfoRow();

                    //最小限の値のみ設定
                    newRow.GoodsNo = detailRow.GoodsNo;
                    newRow.GoodsMakerCd = detailRow.GoodsMakerCd;
                    newRow.GoodsMakerNm = detailRow.MakerName;

                    //商品連結データセットに追加
                    partsInfo.UsrGoodsInfo.AddUsrGoodsInfoRow(newRow);

                    //商品連結データセットをコミット
                    partsInfo.UsrGoodsInfo.AcceptChanges();
                }
            }

            // 【印刷品番選択】画面表示
            int epPartsNoPrtCd = 0;
            int printGoodsNoDef = 0;
            if (null != salesTtlSt)
            {
                epPartsNoPrtCd = salesTtlSt.EpPartsNoPrtCd;
                printGoodsNoDef = salesTtlSt.PrintGoodsNoDef;
                if (1 == epPartsNoPrtCd)
                {
                    goodsNo2 += salesTtlSt.EpPartsNoAddChar;
                }
            }

            using (SelectionPrtGoodsNo printForm = new SelectionPrtGoodsNo(goodsMakerCd, goodsMakerNm, goodsNo, partsInfo, goodsMakerCd2, goodsMakerNM2, goodsNo2, epPartsNoPrtCd, printGoodsNoDef))
            {
                printForm.Text += "(" + detailRow.SalesRowNo + "行目)";
                retResult = printForm.ShowDialog(owner);
            }

            if ( DialogResult.OK == retResult )
            {
                PartsInfoDataSet.UsrGoodsInfoRow row = partsInfo.UsrGoodsInfo.FindByGoodsMakerCdGoodsNo(goodsMakerCd, goodsNo);
                if ( null == row )
                {
                    retResult = DialogResult.Abort;
                }
                else
                {
                    goodsUnitData.PrtGoodsNo = row.PrtGoodsNo;
                    goodsUnitData.PrtMakerCode = row.PrtMakerCode;
                    goodsUnitData.PrtMakerName = row.PrtMakerName;
                }
            }

            return retResult;
        }

        /// <summary>拠点コード(全体)</summary>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private const string ctSectionCode = "00";

        /// <summary>
        /// 売上全体設定取得
        /// </summary>
        /// <param name="ctIsLocalDBRead">取得先がローカルDBか否かを指定</param>
        /// <param name="resultSalesTtlSt">売上全体設定(取得結果)</param>
        /// <returns>処理結果（リモート取得処理結果）</returns>
        /// <remarks>
        /// <br>Note       : 仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/06</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        internal int GetSalesTtlSt(bool ctIsLocalDBRead, out SalesTtlSt resultSalesTtlSt)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            string enterpriseCode = LoginInfoAcquisition.EnterpriseCode;
            string sectionCode = LoginInfoAcquisition.Employee.BelongSectionCode;

            resultSalesTtlSt = null;

            ArrayList salesTtlStList;
            SalesTtlStAcs salesTtlStAcs = new SalesTtlStAcs();     // 売上全体設定マスタ
            salesTtlStAcs.IsLocalDBRead = ctIsLocalDBRead;
            status = salesTtlStAcs.SearchOnlySalesTtlInfo(out salesTtlStList, enterpriseCode);

            if ( status != (int)ConstantManagement.DB_Status.ctDB_NORMAL )
            {
                return status;
            }
            else if ( null == salesTtlStList || 0 >= salesTtlStList.Count)
            {
                return (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            }

            List<SalesTtlSt> list = new List<SalesTtlSt>((SalesTtlSt[])salesTtlStList.ToArray(typeof(SalesTtlSt)));

            resultSalesTtlSt = list.Find(
                delegate(SalesTtlSt salesttl)
                {
                    if ((salesttl.SectionCode.Trim() == sectionCode.Trim()) &&
                        (salesttl.EnterpriseCode.Trim() == enterpriseCode.Trim()))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );

            if (null != resultSalesTtlSt)
            {
                return status;
            }

            resultSalesTtlSt = list.Find(
                delegate(SalesTtlSt salesttl)
                {
                    if ((salesttl.SectionCode.Trim() == ctSectionCode.Trim()) &&
                        (salesttl.EnterpriseCode.Trim() == enterpriseCode.Trim()))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );

            if (null == resultSalesTtlSt)
            {
                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            }
            return status;
        }
        #endregion //印刷品番選択

        #endregion //得意先コード、拠点コード、売上日変更時の標準価格再設定処理メソッド群
        //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ----------------<<<<<

        // --- ADD yangyi K2014/02/09 ------->>>>>>>>>>>
        // --- DEL zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 ------->>>>>
        //private const string startExe = "PMKHN02830UC.exe";
        //private const string startExeName = "PMKHN02830UC";
        // --- DEL zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 -------<<<<<
        private const string BLANKALL = "b2#_%";   //全角スペース
        private const string BLANKHALF = "b1#_%";  //半角スペース
        public int _startExeId;   //processIDを設定

        // --- DEL zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 ------->>>>>
        ///// <summary>
        ///// 画面起動
        ///// </summary>
        ///// <param name="code">得意先コード</param>
        ///// <param name="noteInfo">得意先ガイド情報</param>
        //private void noteInfoStart(int code, string noteInfo)
        //{
        //    noteInfoClose();
        //    noteInfoShow(code, noteInfo);
        //}

        ///// <summary>
        /////画面表示
        ///// </summary>
        ///// <param name="code">得意先コード</param>
        ///// <param name="noteInfo">得意先ガイド情報</param>
        //private void noteInfoShow(int code,string noteInfo)
        //{
        //    //Processの新規
        //    ProcessStartInfo info = new ProcessStartInfo();
        //    info.FileName = System.Environment.CurrentDirectory+ "\\" + startExe;
        //    string noteInfo2 = noteInfo.Replace(" ", BLANKHALF);
        //    string noteInfo3 = noteInfo2.Replace("　", BLANKALL);

        //    info.Arguments = code.ToString() + " " + noteInfo3;
        //    info.WindowStyle = ProcessWindowStyle.Normal;
        //    Process pro = Process.Start(info);
        //    _startExeId = pro.Id;
        //}
        // --- DEL zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 -------<<<<<

        /// <summary>
        /// 画面閉じる
        /// </summary>
        /// <remarks>
        /// <br>Update Note : 2021/06/21 譚洪</br>
        /// <br>管理番号    : 11770021-00</br>
        /// <br>            : PMKOBETSU-4136 得意先ガイド表示不正の対応</br>
        /// </remarks>
        private void noteInfoClose()
        {
            _preCustomCd = 0;//ADD 2021/06/21 譚洪 FOR PMKOBETSU-4136 得意先ガイド表示不正の対応
            Process[] allProgresse = System.Diagnostics.Process.GetProcessesByName(startExeName);
            foreach (Process closeProgress in allProgresse)
            {
                if (closeProgress.ProcessName.Equals(startExeName) && closeProgress.Id == _startExeId)
                {
                    closeProgress.Kill();
                    closeProgress.WaitForExit();
                    //_preCustomCd = 0;//  ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について① //DEL 2021/06/21 譚洪 FOR PMKOBETSU-4136 得意先ガイド表示不正の対応
                    break;
                }
            }
        }

        /// <summary>
        /// 前橋京和商会個別オプション判定
        /// </summary>
        private bool showEnable()
        {
            Broadleaf.Application.Remoting.ParamData.PurchaseStatus ps;
            ps = LoginInfoAcquisition.SoftwarePurchasedCheckForUSB(ConstantManagement_SF_PRO.SoftwareCode_OPT_CPM_MaehashiKyowaGuideCtl);

            if (ps == Broadleaf.Application.Remoting.ParamData.PurchaseStatus.Contract)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        // --- ADD yangyi K2014/02/09 -------<<<<<<<<<<<

        // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
        /// <summary>
        /// 得意先ガイド表示判定
        /// </summary>
        /// <param name="customerInfo">得意先情報</param>
        /// <remarks>
        /// <br>Update Note: 2021/04/12 陳艶丹</br>
        /// <br>管理番号   : 11770021-00</br>
        /// <br>           : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
        /// </remarks>
        private bool showCustomerGuid(CustomerInfo customerInfo)
        {
            //売上伝票設定得意先情報ガイド表示=有り、且つ、得意先マスタ.得意先情報ガイド表示=有りの場合、得意先ガイドを表示する
            if ((_salesSlipInputConstructionAcs.CustomerGuidDisplayValue == CtDisplayCd) &&
                 (customerInfo.DisplayDivCode == CtDisplayCd))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<

        #region ●丸徳商会-得意先ガイドの改良対応
        // --- ADD zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 ------->>>>>
        // --- DEL zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について② ------->>>>>
        //private const string startExe = "PMKHN02840UC.exe";
        //private const string startExeName = "PMKHN02840UC";
        // --- DEL zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について② -------<<<<<
        // --- ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について② ------->>>>>
        private const string startExe = "PMKHN02830UC.exe";
        private const string startExeName = "PMKHN02830UC";
        private int _preCustomCd = 0;
        // --- ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について② -------<<<<<

        private const string BLANKDOUBLEQUOTE = "b3#_%";  //ダブルクォーテーションマーク

        /// <summary>
        /// 画面起動
        /// </summary>
        /// <param name="customerInfo">得意先ガイド情報</param>
        private void MarutokuInfoStart(CustomerInfo customerInfo)
        {
            noteInfoClose();
            MarutokuInfoShow(customerInfo);
        }

        /// <summary>
        ///画面表示
        /// </summary>
        /// <param name="customerInfo">得意先ガイド情報</param>
        private void MarutokuInfoShow(CustomerInfo customerInfo)
        {
            //Processの新規
            ProcessStartInfo info = new ProcessStartInfo();
            info.FileName = System.Environment.CurrentDirectory + "\\" + startExe;

            info.Arguments = SetParameterMember(customerInfo);
            info.WindowStyle = ProcessWindowStyle.Normal;
            Process pro = Process.Start(info);
            _startExeId = pro.Id;
            _preCustomCd = customerInfo.CustomerCode;//  ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について①
        }

        /// <summary>
        /// Arguments用stringを作成
        /// </summary>
        /// <param name="customerInfo">得意先ガイド情報</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Note		: 金額種別設定マスタを取得します。</br>
        /// <br>Programmer	: zhujw</br>
        /// <br>Date		: K2014/05/08</br>
        /// <br>Update Note : 2021/04/12 陳艶丹</br>
        /// <br>管理番号    : 11770021-00</br>
        /// <br>            : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
        /// <br>Update Note : 2021/06/21 譚洪</br>
        /// <br>管理番号    : 11770021-00</br>
        /// <br>            : PMKOBETSU-4136 得意先ガイド掛率グループ表示不正の対応</br>
        /// </remarks>
        private string SetParameterMember(CustomerInfo customerInfo)
        {
            string parameterString = string.Empty;

            // 得意先(コード) 
            if (string.IsNullOrEmpty(customerInfo.CustomerCode.ToString()))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.CustomerCode.ToString().PadLeft(8, '0'), 8) + " ";
            }

            // 得意先(名称)
            if (string.IsNullOrEmpty(customerInfo.CustomerSnm))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.CustomerSnm, 20) + " ";
            }

            // 請求先(コード)
            if (string.IsNullOrEmpty(customerInfo.ClaimCode.ToString()))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.ClaimCode.ToString().PadLeft(8, '0'), 8) + " ";
            }

            // 請求先(名称)
            if (string.IsNullOrEmpty(customerInfo.ClaimSnm))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.ClaimSnm, 20) + " ";
            }

            // 郵便番号 
            if (string.IsNullOrEmpty(customerInfo.PostNo))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + "〒" + customerInfo.PostNo + " ";
            }

            // 住所１
            if (string.IsNullOrEmpty(customerInfo.Address1))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.Address1, 20) + " ";
            }

            // 住所２
            if (string.IsNullOrEmpty(customerInfo.Address3))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.Address3, 20) + " ";
            }

            // 住所３
            if (string.IsNullOrEmpty(customerInfo.Address4))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.Address4, 20) + " ";
            }

            // 自宅電話
            if (string.IsNullOrEmpty(customerInfo.HomeTelNo))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.HomeTelNo, 16) + " ";
            }

            // 自宅FAX
            if (string.IsNullOrEmpty(customerInfo.HomeFaxNo))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.HomeFaxNo, 16) + " ";
            }

            // 勤務先電話
            if (string.IsNullOrEmpty(customerInfo.OfficeTelNo))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.OfficeTelNo, 16) + " ";
            }

            // 勤務先FAX
            if (string.IsNullOrEmpty(customerInfo.OfficeFaxNo))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.OfficeFaxNo, 16) + " ";
            }

            // 携帯電話
            if (string.IsNullOrEmpty(customerInfo.PortableTelNo))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.PortableTelNo, 16) + " ";
            }

            string pureCode = string.Empty;
            string excellentCode = string.Empty;
            CustRateGroupAcs custRateGroupAcs = new CustRateGroupAcs();
            ArrayList custRategrouList = new ArrayList();
            custRateGroupAcs.Search(out custRategrouList, this._enterpriseCode, customerInfo.CustomerCode, ConstantManagement.LogicalMode.GetData0);

            if (custRategrouList.Count != 0)
            {
                foreach (CustRateGroup custRateGroup in custRategrouList)
                {
                    // ------ UPD 2021/06/21 譚洪 PMKOBETSU-4136 得意先ガイド掛率グループ表示不正の対応-------->>>>>
                    //if (custRateGroup.PureCode == 0 && custRateGroup.GoodsMakerCd == 0)
                    if (custRateGroup.PureCode == 0 && custRateGroup.GoodsMakerCd == 0 && custRateGroup.CustRateGrpCode != RateGroupNoSet)
                    // ------ UPD 2021/06/21 譚洪 PMKOBETSU-4136 得意先ガイド掛率グループ表示不正の対応--------<<<<<
                    {
                        pureCode = custRateGroup.CustRateGrpCode.ToString("0000");
                    }
                    // ------ UPD 2021/06/21 譚洪 PMKOBETSU-4136 得意先ガイド掛率グループ表示不正の対応-------->>>>>
                    //if (custRateGroup.PureCode == 1)
                    if (custRateGroup.PureCode == 1 && custRateGroup.CustRateGrpCode != RateGroupNoSet)
                    // ------ UPD 2021/06/21 譚洪 PMKOBETSU-4136 得意先ガイド掛率グループ表示不正の対応--------<<<<<
                    {
                        excellentCode = custRateGroup.CustRateGrpCode.ToString("0000");
                    }
                }
            }
            // 純正ALL
            if (string.IsNullOrEmpty(pureCode))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(pureCode, 4) + " ";
            }

            // 優良ALL
            if (string.IsNullOrEmpty(excellentCode))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(excellentCode, 4) + " ";
            }

            // 得意先担当者
            if (string.IsNullOrEmpty(customerInfo.CustomerAgent))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.CustomerAgent, 20) + " ";
            }

            // 担当者(コード)
            if (string.IsNullOrEmpty(customerInfo.CustomerAgentCd))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.CustomerAgentCd.PadLeft(4, '0'), 4) + " ";
            }

            // 担当者名
            if (string.IsNullOrEmpty(customerInfo.CustomerAgentNm))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.CustomerAgentNm, 20) + " ";
            }

            // 業種(コード)
            if (string.IsNullOrEmpty(customerInfo.BusinessTypeCode.ToString()))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.BusinessTypeCode.ToString().PadLeft(4, '0'), 4) + " ";
            }

            // 業種名
            if (string.IsNullOrEmpty(customerInfo.BusinessTypeName))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.BusinessTypeName, 10) + " ";
            }

            // 地区(コード)
            if (string.IsNullOrEmpty(customerInfo.SalesAreaCode.ToString()))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.SalesAreaCode.ToString().PadLeft(4, '0'), 4) + " ";
            }

            // 地区(名称)
            if (string.IsNullOrEmpty(customerInfo.SalesAreaName))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.SalesAreaName, 10) + " ";
            }

            // 売掛区分
            if (customerInfo.AccRecDivCd == 0)
            {
                parameterString = parameterString + "売掛なし" + " ";
            }
            else
            {
                parameterString = parameterString + "売掛" + " ";
            }

            // 締日
            if (string.IsNullOrEmpty(customerInfo.TotalDay.ToString()))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.TotalDay.ToString(), 2) + " ";
            }

            // 集金月
            if (string.IsNullOrEmpty(customerInfo.CollectMoneyName))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.CollectMoneyName, 4) + " ";
            }

            // 集金日
            if (string.IsNullOrEmpty(customerInfo.CollectMoneyDay.ToString()))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.CollectMoneyDay.ToString(), 2) + " ";
            }

            // 回収条件
            Dictionary<int, string> moneyKindDic = new Dictionary<int, string>();
            ReadMoneyKind(out moneyKindDic);
            if (!string.IsNullOrEmpty(customerInfo.CollectCond.ToString()) && moneyKindDic.ContainsKey(customerInfo.CollectCond) && !string.IsNullOrEmpty(moneyKindDic[customerInfo.CollectCond]))
            {
                parameterString = parameterString + StringFormat(moneyKindDic[customerInfo.CollectCond], 10) + " ";
            }
            else
            {
                parameterString = parameterString + BLANKALL + " ";
            }

            // メモ
            if (string.IsNullOrEmpty(customerInfo.NoteInfo))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + StringFormat(customerInfo.NoteInfo, 1000) + " ";
            }

            AlItmDspNmAcs alItmDspNmAcs = new AlItmDspNmAcs();
            string homeTelNoDspName = alItmDspNmAcs.GetMainContactDspName(0);
            string officeTelNoDspName = alItmDspNmAcs.GetMainContactDspName(1);
            string mobileTelNoDspName = alItmDspNmAcs.GetMainContactDspName(2);
            string homeFaxNoDspName = alItmDspNmAcs.GetMainContactDspName(3);
            string officeFaxNoDspName = alItmDspNmAcs.GetMainContactDspName(4);

            // 自宅電話
            if (string.IsNullOrEmpty(homeTelNoDspName))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + homeTelNoDspName + " ";
            }

            // 勤務先電話
            if (string.IsNullOrEmpty(officeTelNoDspName))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + officeTelNoDspName + " ";
            }

            // 携帯電話
            if (string.IsNullOrEmpty(mobileTelNoDspName))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + mobileTelNoDspName + " ";
            }

            // 自宅FAX
            if (string.IsNullOrEmpty(homeFaxNoDspName))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + homeFaxNoDspName + " ";
            }

            // 勤務先FAX
            if (string.IsNullOrEmpty(officeFaxNoDspName))
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            else
            {
                parameterString = parameterString + officeFaxNoDspName + " ";
            }

            // PID
            int id = System.Diagnostics.Process.GetCurrentProcess().Id;
            if (id != 0)
            {
                parameterString = parameterString + id.ToString() + " ";
            }
            else
            {
                parameterString = parameterString + BLANKALL + " ";
            }
            // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
            // タイトル
            string title = Process.GetCurrentProcess().MainWindowTitle;
            string titleNo = title.Substring(title.LastIndexOf(CtTitleNoSt));
            if (string.IsNullOrEmpty(titleNo))
            {
                parameterString = parameterString + BLANKALL + CtSpace;
            }
            else
            {
                parameterString = parameterString + titleNo + CtSpace;
            }
            // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
            return parameterString;

        }

        /// <summary>
        /// 金額種別名前を取得処理
        /// </summary>
        /// <remarks>
        /// <br>Note		: 金額種別設定マスタを取得します。</br>
        /// <br>Programmer	: zhujw</br>
        /// <br>Date		: K2014/05/08</br>
        /// </remarks>
        private void ReadMoneyKind(out Dictionary<int, string> moneyKindDis)
        {
            Dictionary<int, string> moneyKindDic = new Dictionary<int, string>();

            int status;
            ArrayList retList = new ArrayList();

            MoneyKindAcs moneyKindAcs = new MoneyKindAcs();

            status = moneyKindAcs.SearchAll(out retList, this._enterpriseCode);
            if (status == 0)
            {
                foreach (MoneyKind moneyKind in retList)
                {
                    // 金額設定区分が「0:入金」を使用
                    if ((moneyKind.LogicalDeleteCode == 0) && (moneyKind.PriceStCode == 0))
                    {
                        moneyKindDic.Add(moneyKind.MoneyKindCode, moneyKind.MoneyKindName);
                    }
                }
            }
            moneyKindDis = moneyKindDic;

        }

        /// <summary>
        /// 文字列のフォーマット
        /// </summary>
        /// <param name="stringValue">文字列</param>
        /// <param name="length">桁数</param>
        /// <returns>文字列</returns>
        /// <remarks>
        /// <br>Note		: 文字列フォーマットを行う</br>
        /// <br>Programmer	: zhujw</br>
        /// <br>Date		: K2014/05/08</br>
        /// </remarks>
        private string StringFormat(string stringValue, int length)
        {
            if (stringValue.Length > length)
            {
                stringValue = stringValue.Substring(0, length);
            }
            string note = stringValue.Replace(" ", BLANKHALF);
            string note2 = note.Replace("　", BLANKALL);
            string note3 = note2.Replace("\"", BLANKDOUBLEQUOTE);

            return note3;
        }

        // --- ADD zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 -------<<<<<
        #endregion  ●丸徳商会-得意先ガイドの改良対応

        //---DEL 2010/07/13---------->>>>>
        ///// <summary>
        ///// 売上伝票番号のフォーカス処理
        ///// </summary>
        ///// <param name="sectionCode">売上伝票番号</param>
        ///// <param name="salesSlip">売上情報</param>
        //// --- UPD 2010/07/01 --------->>>>>
        ////public void AfterSalesSlipNumFocus(ref SalesSlip salesSlip, ref SalesSlip salesSlipCurrent, string code, string enterpriseCode, out bool equelFlag,
        ////        out int readDBDatStatus, ref bool reCalcSalesPrice, out bool deleteEmptyRow)
        //public void AfterSalesSlipNumFocus(ref SalesSlip salesSlip, ref SalesSlip salesSlipCurrent, string code, string enterpriseCode, out bool equelFlag,
        //        out int readDBDatStatus, ref bool reCalcSalesPrice, out bool deleteEmptyRow, out bool findDataFlg)
        //// --- UPD 2010/07/01 ----------<<<<<
        //{
        //    readDBDatStatus = -2;
        //    equelFlag = true;
        //    deleteEmptyRow = false;
        //    bool read = false;
        //    findDataFlg = true;  // ADD 2010/07/01

        //    code = code.PadLeft(9, '0');

        //    if (salesSlipCurrent.SalesSlipNum.PadLeft(9, '0') != code)
        //    {
        //        equelFlag = false;

        //        DialogResult dialogResult = DialogResult.Yes;

        //        if (this.IsDataChanged)
        //        {
        //            dialogResult = TMsgDisp.Show(
        //                new Form(),
        //                emErrorLevel.ERR_LEVEL_EXCLAMATION,
        //                "",
        //                "入力中の" + this.GetAcptAnOdrStatusName(this.SalesSlip) + "情報がクリアされます。" + "\r\n" + "\r\n" +
        //                "よろしいですか？",
        //                0,
        //                MessageBoxButtons.YesNo,
        //                MessageBoxDefaultButton.Button1);
        //        }

        //        if (dialogResult == DialogResult.Yes)
        //        {
        //            SalesSlip baseSalesSlip;

        //            // データリード処理
        //            //this.Cursor = Cursors.WaitCursor;
        //            int status = this.ReadDBData(enterpriseCode, this.SalesSlip.AcptAnOdrStatus, code, out baseSalesSlip);

        //            //this.Cursor = Cursors.Default;

        //            if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
        //            {
        //                int acptAnOdrStatus = this.SalesSlip.AcptAnOdrStatusDisplay;

        //                foreach (SalesSlipInputAcs.AcptAnOdrStatusState state in _stateList)
        //                {
        //                    if ((int)state == acptAnOdrStatus) continue;

        //                    // データが存在しない場合は売上形式を変更して再度読み込み
        //                    //this.Cursor = Cursors.WaitCursor;
        //                    status = this.ReadDBData(this._enterpriseCode, (int)state, code, out baseSalesSlip);
        //                    //this.Cursor = Cursors.Default;

        //                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL) break;
        //                }
        //            }

        //            readDBDatStatus = status;

        //            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //            {

        //                // 前回情報再セット
        //                //carInfoRowCurrent = this._salesSlipInputAcs.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
        //                //inputSalesSlipNum = true;

        //                // 売上伝票番号を再設定
        //                //this.tNedit_SalesSlipNum.SetInt(TStrConv.StrToIntDef(code, 0));

        //                // 売上or出荷の場合、受注データ再読込
        //                if ((this.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
        //                    (this.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment))
        //                {
        //                    SalesSlip saveSalesSlip = baseSalesSlip;
        //                    //this.Cursor = Cursors.WaitCursor;
        //                    status = this.ReadDBData(enterpriseCode, (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder, this.SalesSlip.SalesSlipNum, out baseSalesSlip);
        //                    //this.Cursor = Cursors.Default;

        //                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //                    {
        //                        //>>>2010/06/07
        //                        //string statusName = (salesSlipCurrent.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ? "売上伝票" : "貸出伝票";
        //                        string statusName = (saveSalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ? "売上伝票" : "貸出伝票";
        //                        //<<<2010/06/07

        //                        dialogResult = TMsgDisp.Show(
        //                            new Form(),
        //                            emErrorLevel.ERR_LEVEL_INFO,
        //                            "",
        //                            "同伝票番号で" + statusName + "と受注伝票が存在します。　" + Environment.NewLine + Environment.NewLine +
        //                            statusName + "を表示してよろしいですか？" + Environment.NewLine + Environment.NewLine +
        //                            "はい：" + statusName + Environment.NewLine +
        //                            "いいえ：受注伝票" + Environment.NewLine,
        //                            -1,
        //                            MessageBoxButtons.YesNo);
        //                        if (dialogResult == DialogResult.Yes)
        //                        {
        //                            //this.Cursor = Cursors.WaitCursor;
        //                            //status = this.ReadDBData(enterpriseCode, salesSlipCurrent.AcptAnOdrStatus, code, out baseSalesSlip);
        //                            //>>>2010/06/07
        //                            //status = this.ReadDBData(this._enterpriseCode, salesSlipCurrent.AcptAnOdrStatus, code, out baseSalesSlip);
        //                            status = this.ReadDBData(this._enterpriseCode, saveSalesSlip.AcptAnOdrStatus, code, out baseSalesSlip);
        //                            //<<<2010/06/07

        //                            //this.Cursor = Cursors.Default;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        baseSalesSlip = saveSalesSlip;
        //                    }
        //                }

        //                salesSlipCurrent = this.SalesSlip;
        //                salesSlip = salesSlipCurrent.Clone();

        //                //// 2010/06/08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //                //carInfoRowCurrent = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
        //                //// 2010/06/08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        //                // 売上データ入力モード設定処理
        //                //this.SettingStockSlipInputMode(ref salesSlip);

        //                // 表示用受注ステータスのS設定
        //                SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

        //                // 表示用伝票区分の設定
        //                SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

        //                // 伝票区分コンボエディタアイテム設定処理
        //                //this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, false);

        //                // フッタタブ位置セット
        //                //uTabControl_Footer.SelectedTab = uTabControl_Footer.Tabs[0];

        //                if (baseSalesSlip.ConsTaxLayMethod != this.SalesSlip.ConsTaxLayMethod)
        //                {
        //                    reCalcSalesPrice = true;
        //                }
        //                read = true;

        //                //伝票備考、伝票備考２、伝票備考３の入力桁数を制御する
        //                this.GetNoteCharCnt();
        //                //SetNoteCharCnt();

        //                // --- ADD 2010/05/04 ---------->>>>>
        //                this._readSlipFlg = true;
        //                // --- ADD 2010/05/04 ----------<<<<<
        //            }
        //            else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
        //            {
        //                TMsgDisp.Show(
        //                    new  Form(),
        //                    emErrorLevel.ERR_LEVEL_INFO,
        //                    "",
        //                    "該当するデータが存在しません。",
        //                    -1,
        //                    MessageBoxButtons.OK);
        //                findDataFlg = false;  // ADD 2010/07/01
        //            }
        //            else
        //            {
        //                TMsgDisp.Show(
        //                    new Form(),
        //                    emErrorLevel.ERR_LEVEL_STOPDISP,
        //                    "",
        //                    "売上・出荷データの取得に失敗しました。",
        //                    status,
        //                    MessageBoxButtons.OK);
        //            }
        //        }

        //        // 売上データキャッシュ処理
        //        this.Cache(salesSlip);

        //        // 計上時は空白行を削除する(出荷計上 受注計上 見積計上)
        //        if ((salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp) ||
        //            (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
        //            (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp))
        //        {
        //            //this._salesSlipDetailInput.DeleteEmptyRow(true);
        //            deleteEmptyRow = true;
        //        }

        //        // 売上データクラス→画面格納処理
        //        //this.SetDisplay(salesSlip);

        //        salesSlipCurrent = salesSlip.Clone();

        //        // 明細グリッド設定処理
        //        //this._salesSlipDetailInput.SettingGrid();

        //        // 明細行数制限
        //        // -------UPD 2010/06/02-------->>>>>
        //        //this.SettingSalesDetailRowInputRowCount(salesSlip.DetailRowCountForReadSlip);
        //        if (readDBDatStatus == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
        //        {
        //            this.SettingSalesDetailRowInputRowCount(salesSlip.DetailRowCountForReadSlip);
        //        }
        //        // -------UPD 2010/06/02--------<<<<<

        //        //this.SettingVisible();

        //        if (read)
        //        {
        //            if (salesSlip.DepositAllowanceTtl != 0)
        //            {
        //                TMsgDisp.Show(
        //                new Form(),
        //                emErrorLevel.ERR_LEVEL_INFO,
        //                "",
        //                "入金済み伝票です。" + "\r\n" + "\r\n" +
        //                "削除する場合は、入金伝票入力より　" + "\r\n" +
        //                "対象の入金伝票を赤伝処理後、　" + "\r\n" +
        //                "削除することができます。　",
        //                -1,
        //                MessageBoxButtons.OK);
        //            }
        //        }

        //        //追加情報タブ項目Visible設定
        //        //SettingAddInfoVisible();
        //    }

        //}

        //---DEL 2010/07/13----------<<<<<

        /// <summary>
        /// 売上日のフォーカス処理
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <param name="salesSlip">売上情報</param>
        /// <remarks>
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        /// <br>Update Note: 2012/04/09 yangmj Redmine#29313 売上伝票入力 商品価格の再取得で販売区分が初期値に戻る</br>
        /// <br>Update Note: 2013/12/19 陳健</br>
        /// <br>             Redmine#41550 売上伝票入力消費税8%増税対応。</br> 
        /// <br>Update Note: 2015/04/06 30757 佐々木 貴英</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br>             仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// <br>Update Note: K2016/12/14 時シン</br>
        /// <br>管理番号   : 11202330-00</br>
        /// <br>             山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応</br>
        /// <br>Update Note: K2021/05/19 陳艶丹</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>作成内容   : PMKOBETSU-4140 No.34 過去日付の伝票が登録されてしまった対応</br>
        /// </remarks>
        //public void AfterSalesDateFocus(ref SalesSlip salesSlip, SalesSlip salesSlipCurrent, DateTime salesDate, string salesDateText, ref bool reCalcSalesUnitPrice, ref bool reCalcSalesPrice, ref double taxRate) // DEL K2011/08/12
        public void AfterSalesDateFocus(ref SalesSlip salesSlip, SalesSlip salesSlipCurrent, DateTime salesDate, string salesDateText, ref bool reCalcSalesUnitPrice, ref bool reCalcSalesPrice, ref double taxRate, ref bool canChangeFocus) // ADD K2011/08/12
        {
            // ----- ADD K2011/08/12 --------------------------->>>>>
            // ----- ADD K2011/12/09 --------------------------->>>>>
            // --- UPD T.Miyamoto 2012/11/13 ---------->>>>>
            //if (this._enterpriseCode == login_EnterpriseCode)
            if ((this._salesSlipInputInitDataAcs.Opt_DateCtrl == (int)SalesSlipInputInitDataAcs.Option.ON) ||
                (this._enterpriseCode == login_EnterpriseCode))
            // --- UPD T.Miyamoto 2012/11/13 ----------<<<<<
        {
            // ----- ADD K2011/12/09 ---------------------------<<<<<
                canChangeFocus = true;
                if (salesSlipCurrent.AcptAnOdrStatus == 30)
                {
                    // ----- DEL K2011/12/09 --------------------------->>>>>
                    //this._iGetServerTime = (IGetServerTime)MediationGetServerTimeDB.GetServerTimeDB();
                    //DateTime serverTime = _iGetServerTime.GetServerNowTime();
                    // ----- DEL K2011/12/09 ---------------------------<<<<<
                    // --- UPD K2021/05/19 陳艶丹 PMKOBETSU-4140 No.34 過去日付の伝票が登録されてしまった対応 ---->>>>>
                    //DateTime serverTime = this._getServerNowTime;// ADD K2011/12/09
                    DateTime serverTime = this.GetServerNowTime;
                    // --- UPD K2021/05/19 陳艶丹 PMKOBETSU-4140 No.34 過去日付の伝票が登録されてしまった対応 ----<<<<<
                    if (_employeeAcs == null)
                    {
                        _employeeAcs = new EmployeeAcs();
                    }
                    Employee employee = new Employee();
                    int status = _employeeAcs.Read(out employee, LoginInfoAcquisition.EnterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);
                    if (employee.AuthorityLevel1 != 99 || employee.AuthorityLevel2 != 99)
                    {
                        if (TDateTime.DateTimeToLongDate(salesDate) < TDateTime.DateTimeToLongDate(serverTime))
                        {
                            TMsgDisp.Show(
                              new Form(),
                              emErrorLevel.ERR_LEVEL_EXCLAMATION,
                              "",
                              "当日以前の伝票日付は入力できません。",
                              -1,
                              MessageBoxButtons.OK);
                            canChangeFocus = false;
                            return;
                        }
                        else
                        {
                            canChangeFocus = true;
                        }
                    }
                }
            }// ADD K2011/12/09
            // ----- ADD K2011/08/12 ---------------------------<<<<<

            string strSalesDate = salesDate.ToString("yyyy/MM/dd");
            salesDate = Convert.ToDateTime(strSalesDate);
            
            if (salesSlipCurrent.SalesDate != salesDate)
            {
                // ---------------------------- UPD 陳健 2013/12/19 Redmine#41550 ----------------------------------->>>>>
                if ((salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.Shipment) &&
                (salesSlip.ShipmentDay != DateTime.MinValue)) salesSlip.ShipmentDay = salesDate;    // 出荷日再設定
                // ---------------------------- UPD 陳健 2013/12/19 Redmine#41550 -----------------------------------<<<<<

                salesSlip.SalesDate = salesDate;
                this.SettingSalesSlipAddUpDate(ref salesSlip); // 計上日再設定

                salesSlip.SalesDate = salesDate;

                if (salesSlip.SalesDate != DateTime.MinValue)
                {
                    this.SettingSalesSlipAddUpDate(ref salesSlip); // 計上日再設定

                    if (this.ExistSalesDetailCanGoodsPriceReSettingData())
                    {
                        // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ---------->>>>>
                        if (this.CheckWhetherSalesPriceChange())
                        {
                        // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ----------<<<<<
                            DialogResult dialogResult = TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                salesDateText + "が変更されました。" + "\r\n" + "\r\n" +
                                "商品価格を再取得しますか？",
                                0,
                                MessageBoxButtons.YesNo,
                                // --- UPD m.suzuki 2011/02/10 ---------->>>>>
                                //MessageBoxDefaultButton.Button1);
                                MessageBoxDefaultButton.Button2);
                                // --- UPD m.suzuki 2011/02/10 ----------<<<<<

                            if (dialogResult == DialogResult.Yes)
                            {
                                reCalcSalesUnitPrice = true;
                                reCalcSalesPrice = true;
                                salesSlip.StockUpdateFlag = true;
                                _salesCodeChgFlag = true;// ADD 2012/04/09 yangmj redmine#29313

                                //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ---------------->>>>>
                                if (null != salesSlip && 0 < salesSlip.CustomerCode)
                                {
                                    // 得意先コードが設定されている場合、商品情報の再取得処理を行う

                                    // 得意先情報の取得
                                    CustomerInfo customerInfo = null;
                                    int status = this._customerInfoAcs.ReadDBData(
                                        ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, salesSlip.CustomerCode, true, false, out customerInfo);

                                    // 商品情報 再取得処理
                                    if (null != customerInfo && 0 == status)
                                    {
                                        this._salesSlip.SalesDate = salesSlip.SalesDate;
                                        changeDetailsFromCustomerCode(customerInfo, salesSlip);
                                    }
                                }
                                //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ----------------<<<<<
                            }
                        } // ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応
                    }
                }
                // ---------------------------- UPD 陳健 2013/12/19 Redmine#41550 No.9 ----------------------------------->>>>>
                // 消費税再設定
                //taxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate);
                //this.SettingSalesSlipConsTaxRate(ref salesSlip, taxRate);

                // 売上伝票は貸出、赤伝、返品(売上＆貸出)以外の場合、消費税再設定する。
                // 赤伝、返品の場合、元の売上データの消費税を同じにする
                if (!( salesSlip.DebitNoteDiv == 1  // 赤伝
                    || (salesSlip.SalesSlipCd == 1 // 返品
                        && ((this._salesDetailDataTable[0].AcptAnOdrStatusSrc == 30 || this._salesDetailDataTable[0].AcptAnOdrStatusSrc == 40)　// 30：返品-売上　40：返品-貸出 
                            && this._salesDetailDataTable[0].SalesSlipDtlNumSrc != 0))))
                {
                    // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                    if (salesSlip.ConsTaxLayMethod == 0 && (this._salesSlipInputInitDataAcs.TaxRateInput ==0.0 ||
                        this._salesSlipInputInitDataAcs.RentSyncSupFlg || (!this._salesSlipInputInitDataAcs.SlipSrcTaxFlg &&
                        salesSlip.SalesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum)))
                    {
                        taxRate = this._salesSlipInputInitDataAcs.GetTaxRateMst(salesSlip.SalesDate);
                        this.SettingSalesSlipConsTaxRate(ref salesSlip, taxRate);
                        this.TotalPriceSetting(ref salesSlip);
                        this._salesSlipInputInitDataAcs.TaxRateDiv = 2;
                        this._salesSlipInputInitDataAcs.TaxRate = taxRate;
                    }
                    else
                    {
                     // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                        // 消費税再設定
                        taxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate);
                        this.SettingSalesSlipConsTaxRate(ref salesSlip, taxRate);
                        this.TotalPriceSetting(ref salesSlip);
                    } // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応
                }
                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                else
                {
                    if(salesSlip.ConsTaxLayMethod == 0)
                    {
                        this._salesSlipInputInitDataAcs.GetTaxRateMst(salesSlip.SalesDate);
                        this._salesSlipInputInitDataAcs.TaxRateDiv = 2;
                    }
                }
                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                // ---------------------------- UPD 陳健 2013/12/19 Redmine#41550 No.9 -----------------------------------<<<<<
            }
            
        }

        /// <summary>
        /// 納入先コードのフォーカス処理
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <param name="salesSlip">売上情報</param>
        public void AfterAddresseeCodeFocue(ref SalesSlip salesSlip, int code, string enterpriseCode, ref bool reCalcSalesPrice)
        {
            if (code == 0)
            {
                try
                {
                    // 納入先情報設定処理
                    this.SettingSalesSlipAddressee(ref salesSlip, null);

                    reCalcSalesPrice = true;
                }
                catch (Exception ex)
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        ex.Message,
                        -1,
                        MessageBoxButtons.OK);
                }
            }
            else
            {
                CustomerInfo customerInfo;
                //this.Cursor = Cursors.WaitCursor;
                int status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, enterpriseCode, code, true, false, out customerInfo);
                // 得意先チェック
                if (customerInfo != null)
                {
                    if ((customerInfo.IsCustomer != true) && (customerInfo.IsReceiver != true))
                    {
                        status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    }
                }
                //this.Cursor = Cursors.Default;

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    reCalcSalesPrice = true;

                    // 納入先情報設定処理
                    this.SettingSalesSlipAddressee(ref salesSlip, customerInfo);
                }
                else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        "得意先が存在しません。",
                        -1,
                        MessageBoxButtons.OK);
                }
                else
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_STOPDISP,
                        "",
                        "得意先の取得に失敗しました。",
                        status,
                        MessageBoxButtons.OK);
                }
            }
        }

        /// <summary>
        /// 備考１コードのフォーカス処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="value"></param>
        public void AfterSlipNoteCodeFocus(ref SalesSlip salesSlip, int value)
        {
            string noteGuideName = string.Empty;

            if (value == 0)
            {
                salesSlip.SlipNote = noteGuideName;

                salesSlip.SlipNoteCode = 0;
            }
            else
            {
                int status = this._salesSlipInputInitDataAcs.GetName_NoteGuidBd(SalesSlipInputInitDataAcs.ctDIVCODE_NoteGuideDivCd_1,
                    value, out noteGuideName);

                if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                {
                    if (this._salesSlipInputInitDataAcs.SlipNoteCharCnt != 0
                        && this._salesSlipInputInitDataAcs.SlipNoteCharCnt < noteGuideName.Length)
                    {
                        salesSlip.SlipNote = noteGuideName.Substring(0, this._salesSlipInputInitDataAcs.SlipNoteCharCnt);
                    }
                    else
                    {
                        salesSlip.SlipNote = noteGuideName;
                    }

                    salesSlip.SlipNoteCode = value;
                }
                else
                {
                    TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "伝票備考コードが存在しません。",
                    -1,
                    MessageBoxButtons.OK);
                }
            }

            // 売上データクラス→画面格納処理
            //this.SetDisplay(salesSlip);

            // 売上データキャッシュ処理
            this.Cache(salesSlip);
        }

        /// <summary>
        /// 備考２コードのフォーカス処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="value"></param>
        /// <br>Update Note: 2010/06/02 譚洪 PM.NS障害・改良対応（７月リリース案件）</br>
        /// <br>                        No.27備考コードの取得変更対応</br>
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        public void AfterSlipNote2CodeFocus(ref SalesSlip salesSlip, int value, ref bool canChangeFocus) // UPD K2011/08/12
        {
            string noteGuideName = string.Empty;

            if (value == 0)
            {
                salesSlip.SlipNote2 = noteGuideName;

                salesSlip.SlipNote2Code = 0;
            }
            else
            {
                // -------ADD 2010/06/02------->>>>>
                //int status = this._salesSlipInputInitDataAcs.GetName_NoteGuidBd(SalesSlipInputInitDataAcs.ctDIVCODE_NoteGuideDivCd_2,
                int status = this._salesSlipInputInitDataAcs.GetName_NoteGuidBd(SalesSlipInputInitDataAcs.ctDIVCODE_NoteGuideDivCd_1,
                    value, out noteGuideName);
                // -------ADD 2010/06/02-------<<<<<

                if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                {
                    if (this._salesSlipInputInitDataAcs.SlipNote2CharCnt != 0
                        && this._salesSlipInputInitDataAcs.SlipNote2CharCnt < noteGuideName.Length)
                    {
                        salesSlip.SlipNote2 = noteGuideName.Substring(0, this._salesSlipInputInitDataAcs.SlipNote2CharCnt);
                    }
                    else
                    {
                        salesSlip.SlipNote2 = noteGuideName;
                    }

                    salesSlip.SlipNote2Code = value;
                    // ----- ADD K2011/08/12 --------------------------->>>>>
                    // ----- ADD K2011/12/09 --------------------------->>>>>
                    if (this._enterpriseCode == login_EnterpriseCode)
                    {
                    // ----- ADD K2011/12/09 ---------------------------<<<<<
                        // 備考２
                        int countNum = 0;
                        string PaperId = this.GetSlipPrtSetPaperId(salesSlip);
                        if (PaperId != null && (PaperId == "A995" || PaperId == "A998") && (salesSlip.AcptAnOdrStatus == 30))
                        {
                            if (string.IsNullOrEmpty(noteGuideName))
                            {
                                TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                "ドットを２つ以上入力して下さい。",
                                -1,
                                MessageBoxButtons.OK);
                                canChangeFocus = false;
                            }
                            else
                            {
                                foreach (char car in noteGuideName)
                                {
                                    if (car == '.')
                                    {
                                        ++countNum;
                                    }
                                }
                                if (countNum < 2)
                                {
                                    TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    "",
                                    "ドットを２つ以上入力して下さい。",
                                    -1,
                                    MessageBoxButtons.OK);
                                    canChangeFocus = false;
                                }
                                else
                                {
                                    canChangeFocus = true;
                                }
                            }
                        }
                        else
                        {
                            canChangeFocus = true;
                        }
                    }// ADD K2011/12/09 
                    // ----- ADD K2011/08/12 ---------------------------<<<<<
                }
                else
                {
                    TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "伝票備考２コードが存在しません。",
                    -1,
                    MessageBoxButtons.OK);
                }
            }

            // 売上データクラス→画面格納処理
            //this.SetDisplay(salesSlip);

            // 売上データキャッシュ処理
            this.Cache(salesSlip);
        }

        /// <summary>
        /// 備考２のフォーカス処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="value"></param>
        /// <br>Update Note: K2011/08/12 yangyi イスコ個別対応</br>
        public void AfterSlipNote2Focus(SalesSlip salesSlip, string slipNote2, ref bool canChangeFocus)
        {
            // 備考２
            int countNum = 0;
            string PaperId = this.GetSlipPrtSetPaperId(salesSlip);
            if (PaperId != null && (PaperId == "A995" || PaperId == "A998") && (salesSlip.AcptAnOdrStatus == 30))
            {
                if (string.IsNullOrEmpty(slipNote2))
                {
                    TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "",
                    "ドットを２つ以上入力して下さい。",
                    -1,
                    MessageBoxButtons.OK);
                    canChangeFocus = false;
                }
                else
                {
                    foreach (char car in slipNote2)
                    {
                        if (car == '.')
                        {
                            ++countNum;
                        }
                    }
                    if (countNum < 2)
                    {
                        TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        "ドットを２つ以上入力して下さい。",
                        -1,
                        MessageBoxButtons.OK);
                        canChangeFocus = false;
                    }
                    else
                    {
                        canChangeFocus = true;
                    }
                }
            }
            else
            {
                canChangeFocus = true;
            }
        }

        /// <summary>
        /// 備考３コードのフォーカス処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="value"></param>
        /// <br>Update Note: 2010/06/02 譚洪 PM.NS障害・改良対応（７月リリース案件）</br>
        /// <br>                        No.27備考コードの取得変更対応</br>
        public void AfterSlipNote3CodeFocus(ref SalesSlip salesSlip, int value)
        {
            string noteGuideName = string.Empty;

            if (value == 0)
            {
                salesSlip.SlipNote3 = noteGuideName;

                salesSlip.SlipNote3Code = 0;
            }
            else
            {
                // -------ADD 2010/06/02------->>>>>
                //int status = this._salesSlipInputInitDataAcs.GetName_NoteGuidBd(SalesSlipInputInitDataAcs.ctDIVCODE_NoteGuideDivCd_3,
                int status = this._salesSlipInputInitDataAcs.GetName_NoteGuidBd(SalesSlipInputInitDataAcs.ctDIVCODE_NoteGuideDivCd_1,
                // -------ADD 2010/06/02-------<<<<<
                value, out noteGuideName);

                if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
                {
                    if (this._salesSlipInputInitDataAcs.SlipNote3CharCnt != 0
                        && this._salesSlipInputInitDataAcs.SlipNote3CharCnt < noteGuideName.Length)
                    {
                        salesSlip.SlipNote3 = noteGuideName.Substring(0, this._salesSlipInputInitDataAcs.SlipNote3CharCnt);
                    }
                    else
                    {
                        salesSlip.SlipNote3 = noteGuideName;
                    }

                    salesSlip.SlipNote3Code = value;
                }
                else
                {
                    TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "伝票備考３コードが存在しません。",
                    -1,
                    MessageBoxButtons.OK);
                }
            }

            // 売上データクラス→画面格納処理
            //this.SetDisplay(salesSlip);

            // 売上データキャッシュ処理
            this.Cache(salesSlip);
        }

        /// <summary>
        /// 請求先確認ボタンクリック
        /// </summary>
        /// <param name="salesDate"></param>
        /// <param name="focus"></param>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/08/19 宋剛</br> 
        /// <br>管理番号   : 11170129-00 障害報告Redmine#47004対応</br>
        /// <br>             売上伝票入力の請求先情報画面閉じる時、請求先情報をキャッシュに更新しないように修正</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        public void CustomerClaimConfirmationClick(DateTime salesDate, out string focus)
        {
            focus = "";

            SalesSlip salesSlip = this.SalesSlip;
            SalesSlip salesSlipCurrent = this.SalesSlip.Clone();

            if (salesSlip.CustomerCode == 0)
            {
                TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "得意先が入力されていません。",
                    -1,
                    MessageBoxButtons.OK);
                focus = "CustomerCode";
                return;
            }
            if (salesDate == DateTime.MinValue)
            {
                TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "売上日が入力されていません。",
                    -1,
                    MessageBoxButtons.OK);
                focus = "SalesDate";
                return;
            }

            DCKOU01050UA CustomerClaimConfirmation = new DCKOU01050UA();
            CustomerClaimConfirmation.IsLocalDBRead = SalesSlipInputInitDataAcs.ctIsLocalDBRead;

            // DEL BY 宋剛 2015/08/19 Redmine47004 売上伝票入力の請求先情報画面閉じる時、請求先情報をキャッシュに更新しないように修正 ---->>>>>
            //// ウインドウ起動
            //CustomerClaimConfirmation.ShowDialog(new Form(), salesSlip.ClaimCode, salesSlip.DemandAddUpSecCd, salesDate, salesSlip.AddUpADate, salesSlip.DelayPaymentDiv, CustomerClaimConfAcs.GuideType.Claim);

            //salesSlip.ClaimCode = CustomerClaimConfirmation.CustomerClaimConf.CustomerCode;                     // 請求先コード
            //salesSlip.AddUpADate = CustomerClaimConfirmation.CustomerClaimConf.AddUpADate;                      // 計上日
            //salesSlip.ClaimSnm = CustomerClaimConfirmation.CustomerClaimConf.CustomerSnm;                       // 略称
            //salesSlip.TotalAmountDispWayCd = CustomerClaimConfirmation.CustomerClaimConf.TotalAmountDispWayCd;  // 総額表示方法区分
            //salesSlip.ConsTaxLayMethod = CustomerClaimConfirmation.CustomerClaimConf.ConsTaxLayMethod;          // 消費税転嫁方式
            //salesSlip.DemandAddUpSecCd = CustomerClaimConfirmation.CustomerClaimConf.AddUpSectionCode;          // 実績計上拠点
            //salesSlip.DelayPaymentDiv = CustomerClaimConfirmation.CustomerClaimConf.CollectMoneyCode;           // 来勘区分
            //salesSlip.ClaimName = CustomerClaimConfirmation.CustomerClaimConf.Name;                             // 名称１
            //salesSlip.ClaimName2 = CustomerClaimConfirmation.CustomerClaimConf.Name2;                           // 名称２
            //salesSlip.CreditMngCode = CustomerClaimConfirmation.CustomerClaimConf.CreditMngCode;                // 与信管理区分
            //salesSlip.TotalDay = CustomerClaimConfirmation.CustomerClaimConf.TotalDay;				            // 締日
            //salesSlip.NTimeCalcStDate = CustomerClaimConfirmation.CustomerClaimConf.NTimeCalcStDate;	        // 次回勘定開始日

            //// 売上データキャッシュ処理

            //this.Cache(salesSlip);
            // DEL BY 宋剛 2015/08/19 Redmine47004 売上伝票入力の請求先情報画面閉じる時、請求先情報をキャッシュに更新しないように修正 ----<<<<<

            // ADD BY 宋剛 2015/08/19 Redmine47004 売上伝票入力の請求先情報画面閉じる時、請求先情報をキャッシュに更新しないように修正 ---->>>>>
            // ウインドウ起動
            //DialogResult dr = CustomerClaimConfirmation.ShowDialog(new Form(), salesSlip.ClaimCode, salesSlip.DemandAddUpSecCd, salesDate, salesSlip.AddUpADate, salesSlip.DelayPaymentDiv, CustomerClaimConfAcs.GuideType.Claim);// DEL イン晶晶 2015/05/12 for Redmine#45799
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            // ウィンドの表示位置をセットする
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dr = new DialogResult();
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dr = CustomerClaimConfirmation.ShowDialog(wrp, salesSlip.ClaimCode, salesSlip.DemandAddUpSecCd, salesDate, salesSlip.AddUpADate, salesSlip.DelayPaymentDiv, CustomerClaimConfAcs.GuideType.Claim);
            //}
            //else
            //{
            //    dr = CustomerClaimConfirmation.ShowDialog(this.Owner, salesSlip.ClaimCode, salesSlip.DemandAddUpSecCd, salesDate, salesSlip.AddUpADate, salesSlip.DelayPaymentDiv, CustomerClaimConfAcs.GuideType.Claim);
            //}
            ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            CustomerClaimConfirmation.StartPosition = FormStartPosition.CenterParent;
            DialogResult dr = CustomerClaimConfirmation.ShowDialog(this.Owner, salesSlip.ClaimCode, salesSlip.DemandAddUpSecCd, salesDate, salesSlip.AddUpADate, salesSlip.DelayPaymentDiv, CustomerClaimConfAcs.GuideType.Claim);
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

            if (dr == DialogResult.OK)
            {
                salesSlip.ClaimCode = CustomerClaimConfirmation.CustomerClaimConf.CustomerCode;                     // 請求先コード
                salesSlip.AddUpADate = CustomerClaimConfirmation.CustomerClaimConf.AddUpADate;                      // 計上日
                salesSlip.ClaimSnm = CustomerClaimConfirmation.CustomerClaimConf.CustomerSnm;                       // 略称
                salesSlip.TotalAmountDispWayCd = CustomerClaimConfirmation.CustomerClaimConf.TotalAmountDispWayCd;  // 総額表示方法区分
                salesSlip.ConsTaxLayMethod = CustomerClaimConfirmation.CustomerClaimConf.ConsTaxLayMethod;          // 消費税転嫁方式
                salesSlip.DemandAddUpSecCd = CustomerClaimConfirmation.CustomerClaimConf.AddUpSectionCode;          // 実績計上拠点
                salesSlip.DelayPaymentDiv = CustomerClaimConfirmation.CustomerClaimConf.CollectMoneyCode;           // 来勘区分
                salesSlip.ClaimName = CustomerClaimConfirmation.CustomerClaimConf.Name;                             // 名称１
                salesSlip.ClaimName2 = CustomerClaimConfirmation.CustomerClaimConf.Name2;                           // 名称２
                salesSlip.CreditMngCode = CustomerClaimConfirmation.CustomerClaimConf.CreditMngCode;                // 与信管理区分
                salesSlip.TotalDay = CustomerClaimConfirmation.CustomerClaimConf.TotalDay;				            // 締日
                salesSlip.NTimeCalcStDate = CustomerClaimConfirmation.CustomerClaimConf.NTimeCalcStDate;	        // 次回勘定開始日

                // 売上データキャッシュ処理
                this.Cache(salesSlip);
            }
            // ADD BY 宋剛 2015/08/19 Redmine47004 売上伝票入力の請求先情報画面閉じる時、請求先情報をキャッシュに更新しないように修正 ----<<<<<
        }

        /// <summary>
        /// 納入先確認ボタンクリック
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        public void AddresseeConfirmationClick(out SalesSlip salesSlip)
        {
            salesSlip = this.SalesSlip;

            if (salesSlip.AddresseeCode == 0)
            {
                TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "納入先が入力されていません。",
                    -1,
                    MessageBoxButtons.OK);

                return;
            }

            DCHNB01050UA AddresseeConfirmation = new DCHNB01050UA();
            AddresseeConfirmation.IsLocalDBRead = SalesSlipInputInitDataAcs.ctIsLocalDBRead;
            Addressee addressee = new Addressee();
            addressee.AddresseeCode = salesSlip.AddresseeCode;
            addressee.AddresseeName = salesSlip.AddresseeName;
            addressee.AddresseeName2 = salesSlip.AddresseeName2;
            addressee.AddresseeAddr1 = salesSlip.AddresseeAddr1;
            addressee.AddresseeAddr3 = salesSlip.AddresseeAddr3;
            addressee.AddresseeAddr4 = salesSlip.AddresseeAddr4;
            addressee.AddresseeTelNo = salesSlip.AddresseeTelNo;
            addressee.AddresseePostNo = salesSlip.AddresseePostNo;

            // ウインドウ起動
            //AddresseeConfirmation.ShowDialog(new Form(), addressee, salesSlip.AddresseeCode, salesSlip.CustomerCode, salesSlip.ClaimCode, AddresseeConfirmation.GuideMode); // DEL  イン晶晶 2015/05/12 for Redmine#45799
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            //// ウィンドの表示位置をセットする
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}

            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    AddresseeConfirmation.ShowDialog(wrp, addressee, salesSlip.AddresseeCode, salesSlip.CustomerCode, salesSlip.ClaimCode, AddresseeConfirmation.GuideMode);
            //}
            //else
            //{
            //    AddresseeConfirmation.ShowDialog(this.Owner, addressee, salesSlip.AddresseeCode, salesSlip.CustomerCode, salesSlip.ClaimCode, AddresseeConfirmation.GuideMode);
            //}
            ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            AddresseeConfirmation.StartPosition = FormStartPosition.CenterParent;
            AddresseeConfirmation.ShowDialog(this.Owner, addressee, salesSlip.AddresseeCode, salesSlip.CustomerCode, salesSlip.ClaimCode, AddresseeConfirmation.GuideMode);
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

            // 名称、アドレス、区分変更
            salesSlip.AddresseeName = AddresseeConfirmation.Addressee.AddresseeName;
            salesSlip.AddresseeName2 = AddresseeConfirmation.Addressee.AddresseeName2;
            salesSlip.AddresseeAddr1 = AddresseeConfirmation.Addressee.AddresseeAddr1;
            salesSlip.AddresseeAddr3 = AddresseeConfirmation.Addressee.AddresseeAddr3;
            salesSlip.AddresseeAddr4 = AddresseeConfirmation.Addressee.AddresseeAddr4;
            salesSlip.SlipAddressDiv = AddresseeConfirmation.Addressee.SlipAddressDiv;
            salesSlip.AddresseePostNo = AddresseeConfirmation.Addressee.AddresseePostNo;    //ADD 2013/04/17 Y.Wakita

            // 売上データキャッシュ処理
            this.Cache(salesSlip);

            // 売上データクラス→画面格納処理
            //this.SetDisplay(salesSlip);
        }

        /// <summary>
        /// 車両検索処理
        /// </summary>
        /// <param name="salesSlipHeaderCopyData">見出貼付情報クラス</param>
        /// <param name="salesRowNo">行番号</param>
        /// <returns></returns>
        public int CopySlipHeaderCarSearch(SalesSlipHeaderCopyData salesSlipHeaderCopyData, int salesRowNo)
        {
            //------------------------------------------------------
            // 初期処理
            //------------------------------------------------------
            int retStatus = (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;

            //------------------------------------------------------
            // 各種検索処理
            //------------------------------------------------------
            //  CarSearchCondition の検索タイプにより指定
            //------------------------------------------------------
            CarSearchResultReport ret;
            PMKEN01010E dat = new PMKEN01010E();
            int[] fullModelFixedNo = salesSlipHeaderCopyData.FullModelFixedNoAry;
            // 2010/05/30
            string[] freeSrchMdlFxdNo = salesSlipHeaderCopyData.FreeSrchMdlFxdNoAry;
            // 2010/05/30

            // 2010/05/30
            //if (fullModelFixedNo != null && fullModelFixedNo.Length > 0)
            if ((fullModelFixedNo != null && fullModelFixedNo.Length > 0) ||
                 (freeSrchMdlFxdNo != null && freeSrchMdlFxdNo.Length > 0))
            // 2010/05/30
            {
                CarSearchCondition carSearchCond = new CarSearchCondition();

                carSearchCond.CarModel.FullModel = salesSlipHeaderCopyData.FullModel;
                carSearchCond.MakerCode = salesSlipHeaderCopyData.MakerCode;
                carSearchCond.ModelCode = salesSlipHeaderCopyData.ModelCode;
                carSearchCond.ModelSubCode = salesSlipHeaderCopyData.ModelSubCode;
                carSearchCond.ModelDesignationNo = salesSlipHeaderCopyData.ModelDesignationNo;
                carSearchCond.CategoryNo = salesSlipHeaderCopyData.CategoryNo;

                // >>>2010/05/30
                //ret = this.SearchCar(fullModelFixedNo, carSearchCond, ref dat);
                ret = this.SearchCar(fullModelFixedNo, freeSrchMdlFxdNo, carSearchCond, ref dat);
                // <<<2010/05/30

                if ((ret != CarSearchResultReport.retError) && (ret != CarSearchResultReport.retFailed))
                {
                    // 検索済みにする
                    this.SearchCarDiv = false;
                }
                else
                {
                    // 後で検索が必要
                    this.SearchCarDiv = true;
                }
                // 検索結果キャッシュ
                this.CacheCarInfoForSlipHeaderCopy(salesRowNo, dat, salesSlipHeaderCopyData);
            }
            else
            {
                // 検索結果キャッシュ
                this.CacheCarInfoForSlipHeaderCopy(salesRowNo, dat, salesSlipHeaderCopyData);

                // 後で検索が必要
                this.SearchCarDiv = true;
            }
            return retStatus;
        }

        private List<SalesSlipInputAcs.AcptAnOdrStatusState> _stateList;
        public void SetStateList()
        {            
            // 受注ステータスリスト作成
            this._stateList = new List<SalesSlipInputAcs.AcptAnOdrStatusState>();
            this._stateList.AddRange(new SalesSlipInputAcs.AcptAnOdrStatusState[] {
                                            SalesSlipInputAcs.AcptAnOdrStatusState.Sales,
                                            SalesSlipInputAcs.AcptAnOdrStatusState.Shipment,
                                            SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder,
                                            SalesSlipInputAcs.AcptAnOdrStatusState.Estimate,
                                            SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate});

        }

        /// <summary>
        /// メモリ上の内容と比較
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesSlipCurrent"></param>
        /// <param name="compareRes"></param>
        public void CompareSalesSlip(SalesSlip salesSlip, SalesSlip salesSlipCurrent, out bool compareRes)
        {
            compareRes = false;

            ArrayList arRetList = salesSlip.Compare(salesSlipCurrent);

            if (arRetList.Count > 0)
            {
                compareRes = true;

                // データ変更フラグプロパティをTrueにする
                this.IsDataChanged = true;
            }
        }

        /// <summary>
        /// 売上データ取り込処理
        /// </summary>
        /// <param name="salesSlip"></param>
        public void GetSalesSlip(out SalesSlip salesSlip)
        {
            // UPD 2010/09/06 --- >>>>>
            //salesSlip = this.SalesSlip.Clone();
            salesSlip = this._salesSlip.Clone();
            // UPD 2010/09/06 --- <<<<<
        }

        /// <summary>
        /// 売上単価再計算
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <remarks>
        /// <br>Update Note: 2015/04/06 30757 佐々木 貴英</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br>             仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// </remarks>
        public void ReCalcSalesUnitPrice(ref SalesSlip salesSlip)
        {
            List<List<GoodsUnitData>> goodsUnitDataListList;
            string msg;
            this.SearchPartsFromGoodsNoNonVariousSearchWholeWord(out goodsUnitDataListList, out msg);

            this.SalesSlip.StockUpdateFlag = false;
            salesSlip.StockUpdateFlag = false;

            // 消費税再設定
            double taxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate);
            this.SettingSalesSlipConsTaxRate(ref salesSlip, taxRate);

            // 商品価格の再設定を行います。（売上情報）
            this.SalesDetailRowGoodsPriceReSetting(goodsUnitDataListList);

            // 商品価格の再設定を行います。（受注情報）
            this.AcptAnOdrDetailRowGoodsPriceReSetting(goodsUnitDataListList);

            //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ---------------->>>>>

            //明細行毎の部品価格更新内容格納オブジェクト保持フィールドに格納された情報に従って標準価格情報を更新
            this.setListPriceDisplayByUpdateDataListProc();

            //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ----------------<<<<<

            // --- ADD 2015/09/03 Y.Wakita 社内障害№707 ---------->>>>>
            // 在庫調整
            if (this._salesSlipInputInitDataAcs.GetAllDefSet().DtlCalcStckCntDsp == 0)
            {
                // 在庫調整
                this.SalesDetailStockInfoAdjust();
            }
            else
            {
                //なし。
            }
            // --- ADD 2015/09/03 Y.Wakita 社内障害№707 ----------<<<<<
        }

        // --- ADD 2010/05/31 ---------->>>>>
        /// <summary>
        /// 売上金額計算処理
        /// </summary>
        public void CalculationSalesPrice()
        {
            // 描画が必要な明細件数を取得する。
            int cnt = this._salesDetailDataTable.Count;

            for (int i = 0; i < cnt; i++)
            {
                if (!this.ExistSalesDetailComp(this.SalesDetailDataTable[i].SalesRowNo)) continue;
                this.CalculationSalesMoney(i);
                this.CalculationCost(i);
                this.SettingSalesDetailRowGrossProfitRateByIndex(i);
            }
        }
            // --- ADD 2010/05/31 ----------<<<<<

        /// <summary>
        /// データ変更フラグの設定処理
        /// </summary>
        /// <param name="flag"></param>
        /// <param name="isDataChanged"></param>
        public void SetGetIsDataChanged(int flag, ref bool refIsDataChanged)
        {
            if (flag == 1)
            {
                this.IsDataChanged = refIsDataChanged;
            }
            else if (flag == 2)
            {
                refIsDataChanged = this.IsDataChanged; 
            }
        }

        public void GetHeaderFocusConstructionListValue(out ArrayList headerFocusConstructionArrayList, out ArrayList footerFocusConstructionArrayList)
        {
            headerFocusConstructionArrayList = new ArrayList();
            footerFocusConstructionArrayList = new ArrayList();

            HeaderFocusConstructionList headerFocusConstructionList = this._salesSlipInputConstructionAcs.HeaderFocusConstructionListValue;
            FooterFocusConstructionList footerFocusConstructionList = this._salesSlipInputConstructionAcs.FooterFocusConstructionListValue;

            foreach (HeaderFocusConstruction headerFocusConstruction in headerFocusConstructionList.headerFocusConstruction)
            {
                headerFocusConstructionArrayList.Add(headerFocusConstruction);
            }

            foreach (FooterFocusConstruction footerFocusConstruction in footerFocusConstructionList.footerFocusConstruction)
            {
                footerFocusConstructionArrayList.Add(footerFocusConstruction);
            }
        }

        public void GetFocusConstructionValue(out string  headerList, out string footerList)
        {
            headerList = "";
            footerList = "";

            HeaderFocusConstructionList headerFocusConstructionList = this._salesSlipInputConstructionAcs.HeaderFocusConstructionListValue;
            FooterFocusConstructionList footerFocusConstructionList = this._salesSlipInputConstructionAcs.FooterFocusConstructionListValue;

            foreach (HeaderFocusConstruction headerFocusConstruction in headerFocusConstructionList.headerFocusConstruction)
            {
                headerList = headerList + headerFocusConstruction.Key + "-" + headerFocusConstruction.Caption + "-" + headerFocusConstruction.EnterStop.ToString() + ",";
            }

            foreach (FooterFocusConstruction footerFocusConstruction in footerFocusConstructionList.footerFocusConstruction)
            {
                footerList = footerList + footerFocusConstruction.Key + "-" + footerFocusConstruction.Caption + "-" + footerFocusConstruction.EnterStop.ToString() + ",";
            }
        }

        /// <summary>
        /// 拠点名称の取込処理
        /// </summary>
        /// <param name="section">拠点コード</param>
        /// <param name="sectionName">拠点名称</param>
        public void GetSectionNm(string section, out string sectionName)
        {
            sectionName = string.Empty;
            SecInfoSet secInfoSet = this._salesSlipInputInitDataAcs.GetSecInfo(section.Trim());
            if (secInfoSet != null) sectionName = secInfoSet.SectionGuideNm;
            else sectionName = string.Empty;
        }

        // --- ADD 2010/07/16 ---------->>>>>
        public void SetGetSearchCarDiv(int flag, ref bool refSearchCarDiv)
        {
            if (flag == 1)
            {
                this.SearchCarDiv = refSearchCarDiv;
            }
            else if (flag == 2)
            {
                refSearchCarDiv = this.SearchCarDiv;
            }
        }
        // --- ADD 2010/07/16 ----------<<<<<

        //---------- ADD wangf 2011/08/04 ------------->>>>>
        /// <summary>
        /// 画面の番号管理検索モードの処理
        /// </summary>
        /// <param name="carMngCode">管理コード</param>
        /// <returns>1:前方一致　2:含み　3:後方一致</returns>
        /// <remarks>
        /// <br>Note       :画面の番号管理検索モードの処理を行う。</br>
        /// <br>Programmer : wangf</br>
        /// <br>Date       : 2011/08/04</br>
        /// </remarks>
        private int CarMngSearchModeCheck(string carMngCd)
        {
            int res = 0;
            // 前方一致の場合
            string regexStringFront = "^[^*].*\\*$";
            // 含みの場合
            string regexStringContain = "^\\*.*\\*$";
            // 後方一致の場合
            string regexStringBack = "^\\*.*";
            if (System.Text.RegularExpressions.Regex.IsMatch(carMngCd, regexStringFront))
            {
                res = 1;
            }
            else if (System.Text.RegularExpressions.Regex.IsMatch(carMngCd, regexStringContain))
            {
                res = 2;
            }
            else if (System.Text.RegularExpressions.Regex.IsMatch(carMngCd, regexStringBack))
            {
                res = 3;
            }
            return res;
        }
        //---------- ADD wangf 2011/08/04 -------------<<<<<
        #endregion
        // --- ADD T.Nishi 2012/05/30 ---------->>>>>
        #region 自動見積部品コード取得処理
        /// <summary>
        /// 自動見積部品コード取得処理
        /// </summary>
        /// <returns>AutoEstimatePartsCd</returns>
        private string GetAutoEstimatePartsCd(int TbsPartsCode, int CompoMainFlag, int PartsPosMainFlag)
        {
            string AutoEstimatePartsCd = "";  //自動見積部品コード
            PartsSearchController _PartsSearchController = new PartsSearchController();
            int status = _PartsSearchController.GetAutoEstimatePartsCd(out AutoEstimatePartsCd, TbsPartsCode, CompoMainFlag, PartsPosMainFlag);

            if (status == 0) { AutoEstimatePartsCd.Trim(); }
            else { AutoEstimatePartsCd = ""; }

            return AutoEstimatePartsCd;
        }
        #endregion
        // --- ADD T.Nishi 2012/05/30 ----------<<<<<

        #region Delphi-Methods ---- wuyx


        public void GetSettingOptionInfo(out int optCarMng, out int optStockingPayment)
        {
            optCarMng = this._salesSlipInputInitDataAcs.Opt_CarMng;
            optStockingPayment = this._salesSlipInputInitDataAcs.Opt_StockingPayment;
        }
        #endregion---- wuyx

        // --- ADD 2012/09/04 Y.Wakita ---------->>>>>
        /// <summary>
        /// 車輌情報取得
        /// </summary>
        /// <param name="carInfoRow">車両情報行オブジェクト</param>
        /// <param name="selectedInfo">イベントパラメータクラス</param>
        public int SearchCarManagement(SalesInputDataSet.CarInfoRow carInfoRow, out CarMangInputExtraInfo selectedInfo)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
            selectedInfo = new CarMangInputExtraInfo();
            try
            {
                string errMsg = string.Empty;

                // 得意先コード
                selectedInfo.CustomerCode = carInfoRow.CustomerCode;
                // 車輌管理番号
                selectedInfo.CarMngNo = carInfoRow.CarMngNo;
                // 管理番号
                selectedInfo.CarMngCode = carInfoRow.CarMngCode;
                // 車輌備考
                selectedInfo.CarNote = carInfoRow.CarNote;

                // 車輌管理マスタの検索
                status = CarMngInputAcs.GetInstance().ReadDB(ref selectedInfo, 0, out errMsg);
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_CANCEL;
            }
            return status;
        }
        // --- ADD 2012/09/04 Y.Wakita ----------<<<<<
        // --- ADD 2013/01/29 Y.Wakita ---------->>>>>
        /// <summary>
        /// 車両情報テーブル行の車両管理番号クリア
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="carMngCode">管理番号</param>
        public void ClearCarInfoRowFromCarMngNo(int salesRowNo, string carMngCode)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
            if (carInfoRow != null)
            {
                carInfoRow.CarMngNo = 0; // 車両管理番号
            }
        }
        // --- ADD 2013/01/29 Y.Wakita ----------<<<<<
    }

}
