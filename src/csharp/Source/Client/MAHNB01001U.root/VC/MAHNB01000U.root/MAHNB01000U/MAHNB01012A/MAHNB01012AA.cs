using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Collections;
using System.Windows.Forms;
using System.Threading;

using Broadleaf.Application.UIData;
using Broadleaf.Library.Resources;
using Broadleaf.Application.Resources;
using Broadleaf.Application.Common;
using Broadleaf.Application.Remoting.Adapter;
using Broadleaf.Application.Remoting;
using Broadleaf.Application.Remoting.ParamData;
using Broadleaf.Library.Collections;
using Broadleaf.Windows.Forms;
using Broadleaf.Library.Globarization;
using Broadleaf.Library.Text;
using Broadleaf.Library.Windows.Forms;

using System.Xml;
using System.Xml.Serialization;
using Broadleaf.Xml.Serialization;
using System.Reflection;// ADD 陳艶丹 2021/07/16 PMKOBETSU-4154の対応
using System.Diagnostics;// ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応
using System.IO;//ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応
// --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
using Broadleaf.Drawing.Printing;
using System.Runtime.InteropServices;
using System.ComponentModel;
using Broadleaf.Library.Diagnostics;
// --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<

namespace Broadleaf.Application.Controller
{
    /// <summary>
    /// 売上伝票入力アクセスクラス
    /// </summary>
    /// <remarks>
    /// <br>Note       : 売上伝票入力の制御全般を行います。</br>
    /// <br>Programmer : 20056 對馬 大輔</br>
    /// <br>Date       : 2007.09.10</br>
    /// <br></br>
    /// <br>UpDate</br>
    /// <br>2007.09.10 20056 對馬 大輔 新規作成</br>
    /// <br>2009.06.17 21024 佐々木 健 MANTIS[0013531] 粗利チェック上限・下限チェックの修正</br>
    /// <br>2009.06.23 21024 佐々木 健 MANTIS[0013598] 商品種別はPMKEN01020Eの定義を参照するように修正</br>
    /// <br>2009.07.15 22018 鈴木 正臣 MANTIS[0013801] ＢＬコードガイドの初期表示モードを設定可能に変更。</br>
    /// <br>2009.08.10 22018 鈴木 正臣 不要なリモートオブジェクトの取得を削除。</br>
    /// <br>2009/09/09 20056 對馬 大輔 MANTIS[0013653] 単価情報画面コール時の拠点コードを掛率設定拠点をセットするように変更</br>
    /// <br>2009/09/10 20056 對馬 大輔 MANTIS[0013830] 新規ボタンクリック時、得意先コードも初期化するように変更</br>
    /// <br>Update Note : 2009/10/19 張凱</br>
    /// <br>              PM.NS-3-A・PM.NS保守依頼②</br>
    /// <br>              PM.NS保守依頼②を追加</br>
    /// <br>Update Note : 2009/11/13 李占川</br>
    /// <br>              PM.NS-4-A・PM.NS保守依頼③</br>
    /// <br>              担当者、受注者、発行者の初期表示内容の変更</br>
    /// <br>Update Note : 2009/11/24 張凱 保守依頼③対応</br>
    /// <br>             伝票呼出時、伝票発行を行わず、伝票の更新のみ行える機能を追加する</br>
    /// <br>Update Note : 2009/12/17 對馬 大輔 保守依頼③対応</br>
    /// <br>             MANTIS[14785] BLコードガイドから標準価格選択を行った場合も選択した標準価格を有効にする</br>
    /// <br>             MANTIS[14756] 既存修正時、伝票タイプの明細数に従い明細数を制限する</br>
    /// <br>             MANTIS[14755] 伝票修正時でも、追加明細は印刷用品番をセットするように変更</br>
    /// <br>             MANTIS[14717] 標準価格選択で選択した価格を売価へ反映するように変更</br>
    /// <br>Update Note : 2009/12/23 張凱</br>
    /// <br>              PM.NS-5-A・PM.NS保守依頼④</br>
    /// <br>              PM.NS保守依頼④を追加</br>
    /// <br>Update Note : 2010/01/27 張凱 ４次改良対応</br>
    /// <br>              PM.NS保守依頼４次改良対応を追加</br>
    /// <br>Update Note : 2010/02/09 鈴木 正臣</br>
    /// <br>             MANTIS[14979] 得意先マスタの各種「伝票出力区分」を参照するよう変更</br>
    /// <br>Update Note : 2010/02/26 對馬 大輔 </br>
    /// <br>              SCM対応</br>
    /// <br>Update Note : 2010/03/01 李占川 PM.NS保守依頼５次改良対応</br>
    /// <br>              ①単価モジュールの掛率優先管理マスタキャッシュ処理を使用するように変更</br>
    /// <br>              ②計上残区分の仕様変更</br>
    /// <br>Update Note : 2010/03/16 張凱 障害対応</br>
    /// <br>             redmin#3851 返品不可設定の機能追加(４次改良)　仕様追加</br>
    /// <br>Update Note : 2010/03/22 李侠 障害対応</br>
    /// <br>             redmin#4075 原価計算処理の不具合対応</br>
    /// <br>Update Note: 2010/03/26 李侠 障害対応</br>
    /// <br>             redmin#4277 検索見積データ読込フラグの変更対応</br>
    /// <br>Update Note : 2010/03/30 對馬 大輔 </br>
    /// <br>              SCM対応</br>
    /// <br>              ①SCMオプションが無効の場合、リサイクル関連項目の読込を行わない</br>
    /// <br>              ②回答送信後、回答処理ボタンの押下を不可とする</br>
    /// <br>              ③回答処理ボタン入力制御を追加</br>
    /// <br>Update Note : 2010/04/08 對馬 大輔 </br>
    /// <br>              SCM対応</br>
    /// <br>Update Note : 2010/04/21 對馬 大輔 </br>
    /// <br>              SCM対応</br>
    /// <br>              ①受注数のみ入力された明細を含む場合、回答処理不可とする。</br>
    /// <br>Update Note : 2010/04/27 對馬 大輔 </br>
    /// <br>              差分組込対応</br>
    /// <br>Update Note : 2010/04/28 對馬 大輔 </br>
    /// <br>              検索速度アップ対応</br>
    /// <br>Update Note : 2010/05/04 王海立 PM1007・6次改良</br>
    /// <br>              発行者チェック、入力倉庫チェック等処理を追加</br>
    /// <br>Update Note : 2010/05/13 鈴木 正臣</br>
    /// <br>              自由検索部品自動登録対応</br>   
    /// <br>Update Note : 2010/05/18 gaoyh #7774</br>
    /// <br>              ６次改良　売上伝票入力の修正</br>
    /// <br>Update Note : 2010/05/21 gaoyh #7831</br>
    /// <br>              新規(F9)押下時の売上日クリア処理の不具合対応（６次改良）</br>
    /// <br>Update Note: 2010/05/24 21024 佐々木 健</br>
    /// <br>             携帯メール対応</br>
    /// <br>Update Note : 2010/05/25 長内 数馬</br>
    /// <br>             オフライン対応（オフライン時は品番入力のみとする）</br>
    /// <br>Update Note:  2010/05/27 20056 對馬 大輔</br>
    /// <br>           :  MANTIS[15529]正呼出後に保存実行時、発行者チェックでエラーとなり登録出来ない件の対応</br>
    /// <br>           :  MANTIS[15530]倉庫チェックで発行者チェックの区分を参照している件の対応</br>
    /// <br>Update Note : 2010/05/30 20056 對馬 大輔 </br>
    /// <br>              成果物統合(６次改良＋７次改良＋自由検索＋SCM)</br>
    /// <br>Update Note:  2010/06/02 譚洪 PM.NS障害・改良対応（７月リリース案件）</br>
    /// <br>Update Note: 2010/06/12 22018 鈴木 正臣</br>
    /// <br>             成果物統合　携帯メール対応 2010/05/24 の組み込み</br>
    /// <br>Update Note: 2010/06/16 22018 鈴木 正臣</br>
    /// <br>             成果物統合　オフライン対応 2010/05/25 の組み込み</br>
    /// <br>Update Note : 2010/06/15　99020 山路 芳郎</br>
    /// <br>              RC連動対応</br>
    /// <br>Update Note: 2010/07/14 呉元嘯 伝票種別が”単価見積”の場合は入力粗利チェック（上限・下限）を実施しない。</br>
    /// <br>Update Note: 2010/07/21 20056 對馬 大輔 </br>
    /// <br>             用品入力で品名・メーカー変更時の明細情報クリア処理変更(一部内容をクリアしない)</br>
    /// <br>Update Note:  2010/07/26  20056 對馬 大輔</br>
    /// <br>                UOE送信処理で作成された売上伝票を削除時にエラーとなる不具合の修正</br>
    /// <br>Update Note: 2010/08/06 20056 對馬 大輔 </br>
    /// <br>             担当者、受注者、発行者の表示制御を変更</br>
    /// <br>Update Note: 2010/08/23 20056 對馬 大輔 </br>
    /// <br>             ①得意先コードをクリアした場合の売掛区分の初期化デフォルト値を変更</br>
    /// <br>             ②得意先ガイドをキャンセルした場合の初期化方法修正</br>
    /// <br>Update Note: 2010/09/14 20056 對馬 大輔 </br>
    /// <br>             品名再表示区分の表示仕様変更(再表示するの場合でも、BLコードが未入力時は再表示しない)</br>
    /// <br>Update Note: 2010/09/19 譚洪 </br>
    /// <br>             PM.NS障害・改良対応（９月リリース案件）</br>
    /// <br>Update Note: 2010/09/24 20056 對馬 大輔 </br>
    /// <br>             MANTIS[0016080] 売仕入同時入力で特定入力を行うとエラーになる件の対応</br>
    /// <br>Update Note: 2010/09/27 20056 對馬 大輔</br>
    /// <br>             ①売仕入同時入力データの仕入情報を更新した場合、正常に登録できるように修正</br>
    /// <br>             ②メーカー未入力でも「一括複写」「前行複写」を可能とする</br>
    /// <br>Update Note: 2010/10/01 20056 對馬 大輔</br>
    /// <br>             用品入力明細で掛率算出を可能とする</br>
    /// <br>Update Note: 2010/10/05 20056 對馬 大輔</br>
    /// <br>             入金済み伝票を通常伝票として扱う(修正を可能とする)</br>
    /// <br>Update Note: 2010/10/11 20056 對馬 大輔</br>
    /// <br>             売上の元伝票が売上の場合のチェック方法変更(得意先電子元帳より作成可能)</br>
    /// <br>Update Note: 2011/02/01 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)一部回答判定対応：SCM回答時、回答明細から判定し、回答区分に一部回答をセットするように変更する</br>
    /// <br>              2)PS管理番号保持対応：PS管理番号を正常にデータ登録／読込するように修正する</br>
    /// <br>              3)追加回答対応：SCM回答時、明細を追加して回答可能とする</br>
    /// <br>              4)値引き回答対応：SCM回答時、行値引き／商品値引き行を含んでいても回答可能とする</br>
    /// <br>              5)SCM問合せ／発注の回答時、行削除は常に可能とする(計上元明細が存在していても削除可能とする(再度回答が可能な為))</br>
    /// <br>Update Note: 2011/02/16 22018 鈴木 正臣</br>
    /// <br>             ①数量変更時の処理を別途実装（標準価格ゼロで数量変更時に元の標準価格を再セットしない）</br>
    /// <br>             ②単価情報UIの基準価格の表示を変更（売価率・原価率・標準価格のいずれかが変更されても表示する）</br>
    /// <br>             ③数量変更時は、掛率の数量範囲が変わる場合のみ売価率や売単価を取得するように変更。(PM7準拠)</br>
    /// <br>Update Note: 2011/02/18 21024 佐々木 健</br>
    /// <br>             SCM対応</br>
    /// <br>              1)キャンセル区分の対応</br>
    /// <br>Update Note: 2011/02/11 曹文傑</br>
    /// <br>             伝票内容が差し替わってしまう件の対応</br>
    /// <br>Update Note: 2011/03/04 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)CTIによる得意先情報表示時、担当者、受注者、発行者コードがゼロの場合、設定情報を参照しセットを行うように修正</br>
    /// <br>              2)CITからの起動時、初期フォーカス位置を型式指定番号とする</br>
    /// <br>              3)見積伝票呼出時、ＳＣＭデータが存在する場合、全明細を画面表示し、取消明細は送信しないように変更する</br>
    /// <br>                ※既存処理の売上伝票呼出時と同様とする</br>
    /// <br>Update Note: 2011/03/06 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)発注回答後に返品確定し、元伝票を修正呼出しし、再送信した場合、返品明細を送信しないように修正</br>
    /// <br>Update Note: 2011/03/07 曹文傑</br>
    /// <br>             Redmine #19637の対応</br>
    /// <br>Update Note: 2011/03/08 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)発注回答時の受注伝票に対応するSCM情報の枝番不正対応</br>
    /// <br>Update Note: 2011/04/13 曹文傑</br>
    /// <br>             明細複数選択行を削除可能とする</br>
    /// <br>Update Note:  2011/04/21  22018 鈴木 正臣</br>
    /// <br>                ・計上して登録した売上伝票を更新時にエラー発生する件の対応。</br>
    /// <br>Update Note:  2011/05/18 譚洪</br>
    /// <br>              空白行を2行選択して削除すると、「対象行が存在しません」として行削除処理を動作させない</br>
    /// <br>Update Note: 2011/05/25 20056 對馬 大輔</br>
    /// <br>             SCM改良</br>
    /// <br>              1)送信確認画面に指示書番号の入力を追加</br>
    /// <br>              2)フッタ部に指示書番号の入力を追加</br>
    /// <br>              3)販売区分の入力を販売区分表示区分で制御</br>
    /// <br>UpdateNote : 2011/07/06 譚洪 Redmine#22774 キャンペーンにヒットして売価が算出された場合(売価≠0)、色が変わるの対応</br>
    /// <br>Update Note: 2011/07/14 20056 對馬 大輔</br>
    /// <br>              伝票印刷設定用帳票ＩＤ取得処理で見積書ではなく、見積伝票を取得するように修正</br>
    /// <br>UpdateNote : 2011/07/20 譚洪 Redmine#22829「掛率マスタ/売価率」と「キャンペーン/売価率」が両方ヒットする場合、明細部も水色になりますの対応</br>
    /// <br>UpdateNote : 2011/07/18 朱宝軍 回答区分の追加</br>
    /// <br>Update Note: 2011/07/20 連番1028,Redmine#22936 許雁波</br>
    /// <br>             仕入・出荷後数表示区分(明細算出後在庫数表示区分)について修正</br>
    /// <br>Update Note: 2011/07/25 譚洪 連番No.16 掛率設定に関して、00全社共通 と 拠点の掛率の優先順位の同等化（WAN運用）の対応</br>
    /// <br>UpdateNote : K2011/08/12 yangyi</br>
    /// <br>管理番号   : 10703874-00</br>
    /// <br>作成内容   : イスコ個別対応</br>    
    /// <br>UpdateNote : 2011/08/15 譚洪 Redmine#23554 キャンペーンの売価「売価率、値引率、売価額」が設定されている場合は、掛率マスタの売価の設定をクリアするように仕様変更の対応</br>
    /// <br>Update Note: 2011/08/20 連番882 徐錦山 10704766-00 </br>
    /// <br>             元定価が表示のを追加</br>
    /// <br>Update Note: 2011/08/24 20056 對馬 大輔</br>
    /// <br>             改良暫定対応</br>
    /// <br>              1)販売区分変更時、再計算確認画面表示せずに再計算を行うように修正</br>
    /// <br>              2)用品入力時、出荷数１を表示するように修正</br>
    /// <br>              3)売単価ゼロの場合、粗利チェックを行わないように修正</br>
    /// <br>UpdateNote : 2011/08/23 朱宝軍 Redmine#23645 PCCUOE_テーブルレイアウト変更対応</br>
    /// <br>Update Note: 2011/09/01 連番681 yangmj 10704766-00 </br>
    /// <br>             Redmine#23723 提供定価とユーザー定価が一致しない場合、文字色の改修</br>
    /// <br>UpdateNote : K2011/09/01 yangyi</br>
    /// <br>管理番号   : 10703874-00</br>
    /// <br>作成内容   : Redmine24294対応</br>
    /// <br>Update Note: 2011/09/15 周正雨</br>
    /// <br>             Redmine#24942</br>
    /// <br>             PM側からの伝票発行する時、
    ///                 「売上全体設定.売上伝票発行区分=しない」の時にSF側リモート伝票を発行する</br>
    /// <br>Update Note  : 2010/09/17  周正雨</br>
    /// <br>             : Redmine#25225 </br>
    /// <br>             : 赤伝発行時はリモ伝の発行はしない</br>
    /// <br>Update Note  : 2010/09/19  周正雨</br>
    /// <br>             : Redmine#25264 </br>
    /// <br>             : SF側からの発注ではなく、PM側からいきなり回答送信した場合、</br>
    /// <br>             : SCM受注データ、売上明細データ、売上履歴明細データの受発注種別(AcceptOrOrderKind)を下記の仕様でセットするよう変更して下さい。</br>
    /// <br>             :・PCC接続設定（企業・拠点連結設定）の通信方式「BLﾊﾟｰﾂｵｰｻｰｼｽﾃﾑ」にチェックが付いている場合 ⇒ 1:PCC-UOE をセット</br>
    /// <br>             :・「BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑ」にチェックが付いていない場合　⇒　0:通常</br>
    /// <br>             :※「部品問合・発注」と「BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑ」の両方にチェックが付いている場合も1:PCC-UOE</br>
    /// <br>Update Note  : 2011/09/21 Redmine#25210 返品時は回答納期をセットしないの対応 </br>
    /// <br>Update Note: 2011/09/27 20056 對馬 大輔</br>
    /// <br>             在庫数表示区分を参照し、現在庫数の表示制御を行う</br>
    /// <br>Update Note  : 2010/09/29  高峰</br>
    /// <br>             : Redmine#25654 </br>
    /// <br>             : PM側でいきなり売上入力　→　SF側へ回答送信時に、通信方式は不正</br>
    /// <br>Update Note: 2011/09/30 20056 對馬 大輔</br>
    /// <br>             PCC接続設定（企業・拠点連結設定）情報の取得方法を変更</br>    
    /// <br>Update Note: 2011/10/12 yangyi</br>
    /// <br>             ReadMine#25893 保存前の以下のチェック方法を変更する
    /// <br>Update Note: 2011/10/20 22018  鈴木 正臣</br>
    /// <br>             得意先マスタに企業コード・拠点コードが未設定のとき、</br>
    /// <br>             PCC接続設定を参照しないよう修正。(本番環境で見積伝票が印刷出来ない件の対応)</br>
    /// <br>Update Note: 2011/10/26   鄧潘ハン Redmine#26224</br>
    /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
    /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
    /// <br>             2)F12発注選択後に販売区分を入力し登録すると、受注データ上の販売区分がセットされないので、</br>
    /// <br>             発注選択後に販売区分を入力しても受注データ上の販売区分をセットする様に変更</br>
    /// <br>Update Note: 2011/10/29 鄧潘ハン</br>
    /// <br>             ReadMine#26251 全体初期値設定の明細算出後在庫数表示区分を「行移動時反映」に設定した状態で、</br>
    /// <br>             売上伝票入力で明細を入力して倉庫をガイドから選択、</br>
    /// <br>             又はF8で倉庫切替を行うと、最初から在庫数が変更された状態で表示されるため、</br>
    /// <br>             ガイドからの選択直後は在庫数を変更しないように修正</br>
    /// <br>Update Note: 2011/10/29 20056 對馬 大輔</br>
    /// <br>             障害対応</br>
    /// <br>               1)受注伝票を修正呼出した場合、金額情報が再計算される</br>
    /// <br>                 →受注伝票修正呼出時、価格の再計算を行わないように修正</br>
    /// <br>               2)原単価、原価率、売単価、売価率を変更しても発注受注に反映されない</br>
    /// <br>                 →受注データ分割時、価格再計算を行わないように修正</br>
    /// <br>                 →発注数入力時、受注情報の価格再計算を行わないように修正</br>
    /// <br>                 →発注数入力時、売上情報の価格再計算を行わないように修正</br>
    /// <br>               3)発注受注に販売区分が反映されない</br>
    /// <br>                 →販売区分入力時に受注情報を更新</br>
    /// <br>Update Note: 2011/11/01 鄧潘ハン</br>
    /// <br>             ReadMine#26251 全体初期値設定の明細算出後在庫数表示区分を「行移動時反映」に設定した状態で、</br>
    /// <br>             売上伝票入力で明細を入力して倉庫をガイドから選択、</br>
    /// <br>             又はF8で倉庫切替を行うと、最初から在庫数が変更された状態で表示されるため、</br>
    /// <br>             ガイドからの選択直後は在庫数を変更しないように修正</br>
    /// <br>UpdateNote : 2011/11/01 yangmj Redmine#26224 販売区分の対応</br>
    /// <br>Update Note: 2011/11/01 yangmj Redmine#26224</br>
    /// <br>Update Note: 2011/11/10 yangmj redmine#26413 計上残区分による伝票削除の変更</br>
    /// <br>Update Note: 2011/11/12 李占川 redmine#26532</br>
    /// <br>             ①手動回答時、受発注種別(AcceptOrOrderKind 0:通常 1:PCC-UOE)が正常にセットされない件の対応</br>
    /// <br>             ②BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑの在庫確認で作成された見積伝票を修正呼出しした場合、</br>
    /// <br>                メッセージを表示し、参照モードで画面に表示して下さい。</br>
    /// <br>Update Note: 2011/11/11 20056 對馬 大輔</br>
    /// <br>             障害対応</br>
    /// <br>               1)BO区分に「*」入力時、出荷数←発注数、受注数クリア、発注数クリアする</br>
    /// <br>               2)BO区分が「*」の場合、発注数の入力を不可とする</br>
    /// <br>Update Note: 2011/12/01   許培珠 Redmine#8273 売上伝票入力/BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑ</br>
    /// <br>Update Note: 2011/12/01   liusy Redmine#8379 売上伝票入力の粗利チェックの修正</br>
    /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
    /// <br>Update Note: 2011/12/16   liusy Redmine#26917 売上伝票入力の粗利チェックの修正</br>
    /// <br>Update Note: 2012/01/18   liusy Redmine#26917 ソースマージ</br>
    /// <br>管理番号   : 10703874-00</br>
    /// <br>作成内容   : イスコ個別対応</br>
    /// <br>Update Note: 2012/01/18 tianjw Redmine#26893</br>
    /// <br>作成内容   : SFからの問い合わせを手動回答するために売伝に展開すると、明細追加分に掛率がヒットしない</br>
    /// <br>Update Note: 2012/01/19 譚洪 Redmine#28098</br>
    /// <br>作成内容   : 拠点管理／送信済みエラーの対応</br>
    /// <br>管理番号   : 10707327-00 作成担当 : 鄧潘ハン</br>
    /// <br>修 正 日   : K2011/12/22 修正内容 : 2012/01/25配信分NAC個別対応、Redmine#27446</br>
    /// <br>                                PMSF連携／PCCforNS BLﾊﾟｰﾂｵｰﾀﾞｰ 障害対応の修正</br>
    /// <br>Update Note: 2012/01/12 鄧潘ハン</br>
    /// <br>管理番号   : 10707327-00 2012/01/18配信分</br>
    /// <br>             Redmine#27954 PMSF連携／PCCforNS BLﾊﾟｰﾂｵｰﾀﾞｰ 障害対応の修正</br>
    /// <br>Update Note: 2011/12/22   李小路</br>
    /// <br>管理番号   : 10707327-00 2012/01/25配信分</br>
    /// <br>             Redmine#27451 売上伝票入力/標準価格の色の修正</br>
    /// <br>Update Note: 2012/01/05 譚洪</br>
    /// <br>管理番号   : 10707327-00 2012/01/25配信分</br>
    /// <br>             Redmine#27526 売上伝票入力/在庫切れのチェック</br>
    /// <br>Update Note: 2012/01/16 duzg</br>
    /// <br>管理番号   : 10707327-00 2012/01/25配信分</br>
    /// <br>             Redmine#28011 赤伝発行時に印刷されない</br>
    /// <br>Update Note: 2012/01/16 30517 夏野 駿希</br>
    /// <br>             SCM改良・特記事項対応</br>
    /// <br>Update Note: 2012/01/20 20056 對馬 大輔</br>
    /// <br>             障害対応</br>
    /// <br>               送信済みエラーとならない条件で、売仕入同時入力を既に存在する仕入伝票情報を</br>
    /// <br>               入力して登録を行った時、送信済みエラーとなってしまう 件の対応</br>
    /// <br>Update Note: 2012/02/07 鄧潘ハン</br>
    /// <br>管理番号   : 10707327-00 2012/03/28配信分</br>
    /// <br>             Redmine#28292 UOE売上伝票保存時エラーの変更</br>
    /// <br>Update Note: 2012/02/08 李占川</br>
    /// <br>管理番号   : 10707327-00 2012/03/28配信分</br>
    /// <br>             Redmine#28281 伝発発注した場合の受注データ作成時は受注伝票の印刷を行わないように修正する</br>
    /// <br>Update Note: 2012/02/09 李占川</br>
    /// <br>管理番号   : 10707327-00 2012/03/28配信分</br>
    /// <br>             Redmine#28289 アプリケーション終了処理前に、印刷中フラグの判断を追加する</br>
    /// <br>Update Note: 2012/02/06 丁建雄</br>
    /// <br>管理番号   : 10707327-00 2012/03/28配信分</br>
    /// <br>             Redmine#28336 得意先伝票番号採番の不具合の対応</br>
    /// <br>Update Note: 2012/02/28 鄧潘ハン</br>
    /// <br>管理番号   : 10707327-00 2012/03/28配信分</br>
    /// <br>             Redmine#27385 原価の金額が不正についての対応</br>
    /// <br>Update Note: 2012/03/05 20056 對馬 大輔</br>
    /// <br>管理番号   : 10707327-00 障害対応</br>
    /// <br>             得意先電子元帳の赤伝で作成されるPMSF連携伝票の返品手数料明細は</br>
    /// <br>             車両複数チェックを行わないように変更する</br>
    /// <br>Update Note: 2012/04/06 鄧潘ハン</br>
    /// <br>管理番号   : 10801804-00 2012/05/24配信分</br>
    /// <br>Update Note: 2012/04/23 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             粗利条件チェック（警告）に該当した時の挙動修正</br>
    /// <br>             Redmine#29216   F9/Esc押下時の得意先掛率情報のクリアについての修正</br>
    /// <br>Update Note: 2012/04/09 杜志剛</br>
    /// <br>管理番号   : 10801804-00 2012/05/24配信分</br>
    /// <br>             Redmine#29284   売上伝票入力 伝票呼び出し時の担当者の表示について</br>
    /// <br>Update Note: 2012/04/09 yangmj</br>
    /// <br>管理番号   : 10801804-00 2012/05/24配信分</br>
    /// <br>             Redmine#29313   売上伝票入力 商品価格の再取得で販売区分が初期値に戻る</br>
    /// <br>Update Note: 2012/04/25 許培珠</br>
    /// <br>管理番号   : 10801804-00 2012/05/24配信分</br>
    /// <br>             Redmine#29613   伝票呼び出し後、担当者を変更すると部門がクリアされる</br>
    /// <br>Update Note: 2012/04/26 杜志剛 </br>
    /// <br>管理番号   : 10801804-00 2012/05/24配信分</br>
    /// <br>Update Note: 2012/05/02 20056 對馬 大輔</br>
    /// <br>管理番号   : 10801804-00 障害対応</br>
    /// <br>             改良：貸出仕入同時入力対応</br>
    /// <br>             Redmine#29284   ニ回目対応</br>
    /// <br>Update Note: 2012/05/14 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             粗利条件チェックのメッセージ、挙動修正</br>
    /// <br>Update Note: 2012/05/16 20056 對馬 大輔</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             貸出仕入同時伝票を修正呼出しした場合、仕入情報が表示されない件の対応</br>
    /// <br>Update Note: 2012/05/24 No.317 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             注釈行のみの売上伝票を保存できないように修正</br>
    /// <br>Update Note: 2012/06/15 吉岡 孝憲</br>
    /// <br>             障害対応 №90</br>
    /// <br>             SCM障害№171修正時のバグ対応。</br>
    /// <br>Update Note: 2012/06/28 No.317 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             No.317を一時削除</br>
    /// <br>Update Note: 2012/06/26 No.628 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             行値引の品名が未入力の場合、エラーチェックをするように修正</br>
    /// <br>Update Note: 2012/06/26 No.636 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             赤伝を作成しようとすると売上日付を締日以降に変更しても計上日が締日以前の為、
    /// <br>             赤伝作成が行えない件の修正</br>
    /// <br>Update Note: 2012/06/26 No.964 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             売上全体設定の伝票作成区分「入力順」で、倉庫違いのデータが混在している伝票を作成後、</br>
    /// <br>             伝票作成区分「出力先順」へ変更して、伝票呼出してデータを保存すると排他メッセージが表示され</br>
    /// <br>             更新出来ない件の対応</br>
    /// <br>Update Note: 2012/07/03 No.964 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             ①ソート条件追加</br>
    /// <br>             ②伝票分割の条件を新規且つ入力モード（通常）に変更</br>
    /// <br>Update Note: 2012/07/03 No.628 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             行値引の品名をトリムして未入力チェックをするように修正</br>
    /// <br>Update Note: 2012/07/03 No.635 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             赤伝発行の場合、売上日に入力日を設定するように修正</br>
    /// <br>Update Note: 2012/07/19 No.1044 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             入金伝票入力で売上引当後に、対象となる売上伝票を売上伝票入力で修正呼び出しを行い、</br>
    /// <br>             修正すると入金と売上の連携が外れてしまい、売上が未入金一覧で上がってきてしまう件の修正</br>
    /// <br>Update Note: 2012/07/11 No.35 吉岡 孝憲</br>
    /// <br>管理番号   : </br>
    /// <br>             返品時に問合せ番号、問合せ行番号を設定する</br>
    /// <br>Update Note: 2012/08/17 湯上 千加子</br>
    /// <br>           : SCM障害№154</br>
    /// <br>             連結設定のチェックがない時送信しないようにする対応</br>
    /// <br>Update Note: 2012/08/21 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             伝票分割の条件を修正（新規時は分割）</br>
    /// <br>Update Note: 2012/08/22 30744 湯上 千加子</br>
    /// <br>管理番号   : </br>
    /// <br>             2012/09/12配信システムテスト障害№12対応 </br>
    /// <br>Update Note: 2012/08/23 30744 湯上 千加子</br>
    /// <br>管理番号   : </br>
    /// <br>             2012/09/12配信システムテスト障害№14対応 </br>
    /// <br>Update Note: 2012/08/29 30744 湯上 千加子</br>
    /// <br>管理番号   : </br>
    /// <br>             2012/09/12配信システムテスト障害№22対応 </br>
    /// <br>Update Note: 2012/08/30 30745 吉岡 孝憲</br>
    /// <br>             2012/10月配信予定SCM障害№10345対応 </br>
    /// <br>Update Note: 2012/09/05 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00 2012/09/12配信分</br>
    /// <br>             空商品情報特定項目再設定を品番が変更された場合は行わないように修正</br>
    /// <br>Update Note: 2012/09/20 三戸　伸悟</br>
    /// <br>管理番号   : </br>
    /// <br>             №35の戻し</br>
    /// <br>Update Note: 2012/09/11 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             "前行複写"、"一括複写"で仕入先コードが複写されるように修正</br>
    /// <br>Update Note: 2012/10/04 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             伝票種別が貸出の場合の"前行複写"、"一括複写"の障害を修正</br>
    /// <br>Update Note: 2012/10/22 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             2012/08/21の対応のマージが不正の為、修正</br>
    /// <br>Update Note: 2012/10/17 30744 湯上 千加子之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害対応 回答送信処理にてパラメータに売上伝票番号リスト追加 №10414</br>
    /// <br>Update Note: 2012/10/20 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             車輌管理番号を入力してカラーからトリムへ遷移すると拠点コードが</br>
    /// <br>             得意先に紐づくコードが設定される障害の対応</br>
    /// <br>Update Note: 2012/10/23 脇田 靖之</br>
    /// <br>管理番号   : </br>
    /// <br>             売仕入同時入力で仕入データの重複が発生してしまう件の修正</br>
    /// <br>Update Note: 2012/10/30 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             2012/10/20障害修正による2次障害の修正</br>
    /// <br>             （得意先マスタを変更した時に、拠点コードが変更されない）</br>
    /// <br>Update Note: 2012/10/31 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             伝票印刷設定用帳票ID未登録時のエラーメッセージが分かりずらいので文言変更</br>
    /// <br>Update Note: 2012/11/13 宮本 利明</br>
    /// <br>管理番号   : 10801804-00 №1668</br>
    /// <br>             売上過去日付制御を個別オプション化（イスコまたはオプションありで日付制御）</br>
    /// <br>Update Note: 2012/11/13 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             売上仕入同時入力で仕入情報を設定した明細を削除すると仕入データの重複が発生する件の修正</br>
    /// <br>Update Note: 2012/11/14 No.1558 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             伝票複写時に元伝票の入金引当合計額と入金引当残高の値をクリア</br>
    /// <br>Update Note: 2012/11/27 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             売上仕入同時入力で仕入情報を設定した明細を削除すると仕入データの重複が発生する件の修正</br>
    /// <br>Update Note: 2012/12/06 30744 湯上 千加子</br>
    /// <br>管理番号   : 10806791-00</br>
    /// <br>             2012/12/12配信予定 SCM障害№10447対応</br>
    /// <br>Update Note: 2012/11/30 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             売上仕入同時入力で売上伝票を別々で入力し仕入伝票番号を同一で作成し、</br>
    /// <br>             作成した売上伝票の片方を伝票削除した場合、仕入伝票が呼び出せなくなる件の修正</br>
    /// <br>Update Note: 2012/12/20 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             売上仕入同時入力、伝票削除のソースを一部修正</br>
    /// <br>Update Note: 2013/01/15 脇田 靖之</br>
    /// <br>管理番号   : 10806793-00</br>
    /// <br>             見積計上時のＵＯＥ発注対応</br>
    /// <br>Update Note: 2013/01/18 田建委</br>
    /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
    /// <br>           : Redmine#33797 自動入金備考区分の追加</br>
    /// <br>Update Note: 2013/02/05 脇田 靖之</br>
    /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
    /// <br>           : BLコード０対応</br>
    /// <br>Update Note: 2013/02/08 脇田 靖之</br>
    /// <br>管理番号   : 10806793-00</br>
    /// <br>             見積計上時のＵＯＥ発注対応　対応漏れ</br>
    /// <br>Update Note: 2013/02/19 脇田 靖之</br>
    /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
    /// <br>           : BLコード０対応　対応漏れ</br>
    /// <br>Update Note: 2013/02/23 西 毅</br>
    /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
    /// <br>           : 仕掛一覧№1797 担当者チェック修正</br>
    /// <br>Update Note: 2013/01/24 鄧潘ハン</br>
    /// <br>管理番号   : 10900690-00 2013/03/13配信分</br>
    /// <br>           : Redmine#34605 売上画面の価格ｶﾞｲﾄﾞ表示に『拠点』や『表示区分』の追加</br>
    /// <br>Update Note: 2013/02/26 脇田 靖之</br>
    /// <br>管理番号   : 10806793-00</br>
    /// <br>             見積計上時のＵＯＥ発注対応</br>
    /// <br>             単価見積（在庫有り）計上時のＵＯＥ発注障害対応</br>
    /// <br>Update Note: 2013/04/06 20056 對馬 大輔</br>
    /// <br>             SCM障害№10504対応によるデグレ対応</br>
    /// <br>               1.品番検索にて部品情報が取得できなかった場合も商品情報クラスを参照する為、不正な動作となる</br>
    /// <br>               2.部品情報入力後、BLコードを変更すると変更後のBLコードで回答されない件の対応</br>
    /// <br>               3.部品情報入力後、行操作を行うと正常にBLコードが回答されない件の対応</br>
    /// <br>Update Note: 2013/04/09 30744 湯上 千加子</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害№10507,10508対応</br>
    /// <br>Update Note: 2013/04/09 脇田 靖之</br>
    /// <br>管理番号   : 10806793-00</br>
    /// <br>             与信額チェック不具合対応</br>
    /// <br>Update Note: 2013/04/02 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             ③数量マイナス入力明細は仕入情報の入力不可(未入力チェックも無し)</br>
    /// <br>Update Note: 2013/04/09 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             伝票返品時は仕入情報の入力チェック無し</br>
    /// <br>Update Note: 2013/03/27 No.1854 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             BLコード情報未設定データ障害の対応</br>
    /// <br>Update Note: 2013/03/18 zhaimm </br>
    /// <br>管理番号   : 10800003-00 2013/05/15配信分</br>
    /// <br>           : Redmine#34808 №858 売上伝票入力の対応</br>
    /// <br>           : 新規を押したら納入先が残ってしまう</br>
    /// <br>Update Note: 2013/02/05 宮本 利明</br>
    /// <br>管理番号   : 10801804-00 受注対応</br>
    /// <br>             伝票種別に「受注」を追加</br>
    /// <br>Update Note: 2013/04/11 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00 受注対応で以下の障害の修正</br>
    /// <br>             ①先頭行以外の行の車輌情報が登録されない</br>
    /// <br>             ②受注数にマイナスを入力するとアラートが出て画面上は元の値に戻るが</br>
    /// <br>               登録するとマイナスで登録される</br>
    /// <br>             ③伝票種別が「売上」で受注伝票を登録した後、続けて入力すると</br>
    /// <br>               伝票種別が「受注」になる</br>
    /// <br>             ④伝票種別が「受注」で受注数が未設定の場合、エラーにする</br>
    /// <br>             ⑤受注伝票を呼出し「挿入」「削除」等を行うと登録明細の順番が変わる</br>
    /// <br>Update Note: 2013/04/12 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             伝票複写の機能の受注対応</br>
    /// <br>Update Note: 2013/04/15 西 毅</br>
    /// <br>管理番号   : 10801804-00 伝票分割する受注伝票を作成した場合、前回伝票番号が分割した</br>
    /// <br>             若い伝票番号になってしまう障害の修正</br>
    /// <br>Update Note: 2013/04/16 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             受注伝票を複写した場合、伝票種別を売上に設定する処理を削除</br>
    /// <br>Update Note: 2013/04/18 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             受注対応削除</br>
    /// <br>Update Note: 2013/04/16 30744 湯上 千加子</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害№10515対応</br>
    /// <br>Update Note: 2013/04/19 30744 湯上 千加子</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害№10522対応</br>
    /// <br>Update Note: 2013/03/21 FSI今野 利裕</br>
    /// <br>管理番号   : 10900269-00</br>
    /// <br>             SPK車台番号文字列対応</br>   
    /// <br>Update Note: 2013/05/15 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             在庫チェックありの場合に貸出計上・受注計上での数量変更時にエラーになる障害を修正</br>
    /// <br>管理番号   : 10900690-00 配信日なし分</br>
    /// <br>           : Redmine#34752 「PMSCMのNo.10385」BLPの対応</br>
    /// <br>Update Note: 2012/12/04 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             受注伝票を修正呼び出しすると入力した数量が現在庫数に加算される障害を修正</br>
    /// <br>Update Note: 2013/06/11 30745 吉岡 孝憲</br>
    /// <br>             2013/06/18配信システムテスト障害№38</br>
    /// <br>Update Note: 2013/06/17 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00</br>
    /// <br>             新規登録ログ出力対応</br>
    /// <br>Update Note: 2013/06/18 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00</br>
    /// <br>             返品の回答を行うと受発注種別が「BLﾊﾟｰﾂｵｰﾀﾞｰ」から「PCCforNS」に変わる障害を修正</br>
    /// <br>Update Note: 2013/06/19 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00</br>
    /// <br>             返品伝票修正時に入力モードタイトルが「返品」にならない障害を修正</br>
    /// <br>Update Note: 2013/07/29 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00 SCM仕掛一覧 №10555</br>
    /// <br>           : 行追加した再問合せを画面表示する際に新規明細が追加されるように修正</br>     
    /// <br>Update Note: 2013/08/05 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00 SCM仕掛一覧 №10555</br>
    /// <br>           : 既存選択時に受注ステータス(表示用)を補正するように修正</br>     
    /// <br>Update Note: K2013/10/11 宮本 利明</br>
    /// <br>             ㈱フタバ個別 登録時の全明細チェックに本社管理倉庫該当チェックを追加</br>
    /// <br>Update Note: 2013/11/05 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : 仕掛一覧 №2119</br>
    /// <br>           : 見積時に値引行が入力できない。入力できるようにする。</br>
    /// <br>Update Note: 2013/10/18 宮本 利明</br>
    /// <br>管理番号   : 10902175-00 システムテスト障害 №83</br>
    /// <br>           : 明細削除時の売上明細データ問合せ行番号再付番を修正</br>     
    /// <br>Update Note: 2013/10/21 宮本 利明</br>
    /// <br>管理番号   : 10902175-00 システムテスト障害 №62</br>
    /// <br>           : 受注明細の切取・貼付時に受注情報テーブルに貼付元明細のレコードを追加するように修正</br>
    /// <br>Update Note: 2013/10/31 宮本 利明</br>
    /// <br>管理番号   : 10904597-00 2013/11 配信分 システムテスト障害 №17</br>
    /// <br>           : 行貼付時に既存行の受注情報を削除するように修正</br>
    /// <br>Update Note: 2013/11/12 吉岡</br>
    /// <br>管理番号   : VSS[019] システムテスト障害 №38対応</br>
    /// <br>Update Note: 2013/11/13 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : システムテスト一覧№33対応（仕掛一覧 №2119）</br>
    /// <br>Update Note: 2013/11/14 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : システムテスト一覧№36対応（仕掛一覧 №2119）</br>
    /// <br>Update Note: 2013/11/15 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : システムテスト一覧№39対応（仕掛一覧 №2119）</br>
    /// <br>Update Note: 2013/11/18 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : システムテスト一覧№44対応（仕掛一覧 №2119）</br>
    /// <br>Update Note: 2013/11/18 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : システムテスト一覧№40、41対応（仕掛一覧 №2119）</br>
    /// <br>Update Note: 2013/11/25 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : システムテスト一覧№24対応</br>
    /// <br>           : 2013/06/18「返品の回答を行うと受発注種別が・・・」のデグレ</br>
    /// <br>Update Note: 2013/11/29 30744 湯上 千加子</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : 商品保証課Redmine#723対応</br>
    /// <br>Update Note: 2013/12/05 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : 2013/06/19対応のデグレ</br>
    /// <br>Update Note: 2013/12/18 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : 仕掛一覧 №2119のデグレ (仕掛一覧№10616)</br>
    /// <br>Update Note: 2013/12/19 30744 湯上 千加子</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : SCM仕掛一覧№10615対応</br>
    /// <br>Update Note: 2013/12/19 陳健</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : Redmine#41550 売上伝票入力消費税8%増税対応</br>
    /// <br>Update Note: 2013/12/30 譚洪</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : Redmine#41771 売上伝票入力消費税8%増税対応</br>
    /// <br>Update Note: 2014/01/23 陳健</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : Redmine#41771 売上伝票入力消費税8%増税対応。</br>
    /// <br>Update Note: 2013/12/10 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>             純正定価印字対応</br>
    /// <br>Update Note: 2014/01/15 宮本 利明</br>
    /// <br>管理番号   : 10904597-00　純正定価印字対応</br>
    /// <br>             純正情報取得処理を修正</br>
    /// <br>Update Note: K2014/01/14 脇田 靖之</br>
    /// <br>             ㈱フタバ個別 伝票印刷機能追加対応</br>
    /// <br>Update Note: K2014/02/06 脇田 靖之</br>
    /// <br>             ㈱フタバ個別 伝票印刷機能追加対応</br>
    /// <br>             値引き明細の在庫情報をチェックしないように修正</br>
    /// <br>Update Note: K2014/02/09 yangyi</br>
    /// <br>管理番号   : 10970681-00 前橋京和商会個別個別対応</br>
    /// <br>           : 売上伝票入力の改良対応</br>
    /// <br>Update Note: 2014/05/01 宮本 利明</br>
    /// <br>管理番号   : 11070071-00　仕掛一覧 №2257</br>
    /// <br>             計上を含む貸出データの伝票削除を可能にする</br>
    /// <br>Update Note: 2014/05/19 宮本 利明</br>
    /// <br>管理番号   : 11070071-00</br>
    /// <br>           : 仕掛一覧№2218 車輌備考欄にコード入力項目を追加</br>
    /// <br>Update Note: 鄧潘ハン 2014/07/23</br>
    /// <br>管理番号   : 11070147-00</br>
    /// <br>           : SCM仕掛一覧№10659の2の対応</br>
    /// <br>Update Note: 2014/08/05 田建委</br>
    /// <br>管理番号   : 11070148-00　仕掛 №10667　RedMine#43049の対応</br>
    /// <br>           : 受注データが消えない対応</br>
    /// <br>Update Note: 2014/08/13 宮本 利明</br>
    /// <br>管理番号   : 11070148-00 SCM仕掛一覧 №10643</br>
    /// <br>             返品時にSCM問合せデータを取得して受発注種別を引き継ぐように修正</br>
    /// <br>Update Note: 2014/08/11 duzg</br>
    /// <br>管理番号   : </br>
    /// <br>             検証／総合テスト障害No.5</br>
    /// <br>Update Note: 2014/08/13 30744 湯上 千加子</br>
    /// <br>管理番号   : </br>
    /// <br>             検証／総合テスト障害No.5</br>
    /// <br>Update Note: 2014/08/21 Redmine#43270 xuyb</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>             貸出の返品を行った場合に消費税転嫁方式障害解除</br>
    /// <br>Update Note: 2014/09/18 湯上 千加子</br>
    /// <br>管理番号   : 11000127-00 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応</br>
    /// <br>         　: ・受注計上での回答送信後、部品問合せ・回答に対する回答送信であっても</br>
    /// <br>         　:   通信方式(SF)、連携対象区分(PM)が「BLパーツオーダー」になる障害の対応</br>
    /// <br>Update Note: 2014/09/19 湯上 千加子</br>
    /// <br>管理番号   : 11000127-00 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応</br>
    /// <br>         　: ・受注計上での回答送信後、部品問合せ・回答に対する回答送信であっても</br>
    /// <br>         　:   通信方式(SF)、連携対象区分(PM)が「BLパーツオーダー」になる障害の対応</br>
    /// <br>Update Note: 2014/09/30 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00　SCM仕掛 №10667　RedMine#43049</br>
    /// <br>　　         2014/10/16配信システムテスト障害№5対応</br>
    /// <br>             SF側で数量を変更し再問合せした場合、SF側に回答される数量が変更前の値で表示される障害対応</br>
    /// <br>Update Note: K2014/06/12 脇田 靖之</br>
    /// <br>管理番号   : 11001634-00</br>
    /// <br>             ㈱フタバ個別 赤伝･返品･削除時在庫引当処理対応</br>
    /// <br>Update Note: 2014/07/15 宮本 利明</br>
    /// <br>管理番号   : 11070100-00</br>
    /// <br>             仕掛一覧 №1912</br>
    /// <br>Update Note: 2014/08/21 脇田 靖之</br>
    /// <br>管理番号   : 11001634-00</br>
    /// <br>             ㈱フタバ個別 赤伝･返品･削除時在庫引当処理対応</br>
    /// <br>             システムテスト障害№12、17対応</br>
    /// <br>Update Note: 2014/11/06 陳艶丹</br>
    /// <br>管理番号   : 11070184-00　PM-SCM仕掛一覧No.85　RedMine#43046</br>
    /// <br>             2014/11/26配信システムテスト障害№4対応</br>
    /// <br>             新規回答時、多重回答防止チェック追加(多重回答防止)</br>
    /// <br>Update Note: 2014/11/10 31065 豊沢 憲弘</br>
    /// <br>管理番号   : 11070221-00　20141126全体配信 システムテスト障害№8対応</br>
    /// <br>         　: SFで即発注時、PM側でセット品子を複数選択後に登録した場合、</br>
    /// <br>         　: PM側売伝の売上金額と、SF側の金額に差異あるの対応</br>
    /// <br>Update Note: 2014/11/25 宮本 利明</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>           : 仕掛一覧 №2521</br>
    /// <br>           : 計上時の受注ステータス(元)の補正処理を削除</br>
    /// <br>Update Note: 2014/12/24 脇田 靖之</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>           : 仕掛一覧 №2521 システムテスト障害対応</br>
    /// <br>           : №6：SCMで「手動回答モード」時、SF側に回答すると受注数が出荷数と</br>
    /// <br>                  同数だが相殺されず在庫マスタの受注数が増加する</br>
    /// <br>Update Note: 2015/01/30  30744 湯上 千加子</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化 生産年式、車台番号対応</br>
    /// <br>Update Note: 2015/02/10  30745 吉岡</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化 回答納期区分対応</br>
    /// <br>Update Note: 2015/02/23  30746 高川 悟</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化 C向け種別・特記事項対応</br>
    /// <br>Update Note: 2015/02/09  30744 湯上 千加子</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>           : SCM連携マルチキャスト対応</br>
    /// <br>Update Note: 2015/03/18  31065 豊沢</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化 メーカー希望小売価格対応</br>
    /// <br>Update Note: 2015/06/18  31065 豊沢</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化 Redmine3941対応</br>
    //  <br>           : Carpodtabで問合せをした際に高速化自動回答データの特記事項が消える障害対応</br>
    /// <br>Update Note: 2015/06/25  30744 湯上</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : 商品保証課Redmine#4149対応</br>
    //  <br>           : ①再問合せ時のSCM受注明細データ（回答）の発注数設定時、SCM受注明細データ（問合せ・発注）を検索する条件に問合せ行番号枝番を追加</br>
    /// <br>Update Note: 2015/06/30  30146 松本</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : SCM高速化 Redmine3941対応</br>
    //  <br>           : 売り伝などで品番を変更した際に、メーカー希望小売価格などが変更されない不具合対応</br>
    /// <br>Update Note: 2015/07/08  31065 豊沢</br>
    /// <br>管理番号   : 11070266-00</br>
    /// <br>           : 商品保証課Redmine#4222対応</br>
    /// <br>           : 手動回答時、問合せ明細.行番号、枝番に結びつくBLコードを【商品の情報に関わらず】同一BLコードで回答するように修正</br>
    /// <br>Update Note: 2015/07/28  宋剛</br>
    /// <br>管理番号   : 11175111-00</br>
    /// <br>           : Redmine#46997対応</br>
    /// <br>           : 福田部品 2伝票に分かれるはずのUOE伝票が１伝票で作成された件の改修依頼</br>
    /// <br>Update Note: 2015/08/07  陳艶丹</br>
    /// <br>管理番号   : 11170129-00</br>
    /// <br>           : Redmine#47021 SCM手動回答時、売伝の発注ボタン押下し、UOE発注先情報表示不正の対応</br>
    /// <br>Update Note: 2015/08/22 黄興貴</br>
    /// <br>管理番号   : 11170129-00 №836 Redmine#47045 保存時の重複エラー処理の障害対応</br>
    /// <br>Update Note: 2015/08/25 李侠</br>
    /// <br>管理番号   : 11170129-00 伝票複写の障害対応</br>
    /// <br>           : Redmine#47000 ①明細行から受注伝票を伝票複写する場合、「受注数」と「出荷数」の対応</br>
    /// <br>           : 　　　　　　  ②ヘッダー部から受注伝票を伝票複写する場合、「受注数」の対応</br>
    /// <br>Update Note: 2015/08/28  宮本 利明</br>
    /// <br>管理番号   : 11170129-00(PM.NS障害修正)</br>
    /// <br>           : システムテスト障害№6</br>
    /// <br>           : 見積計上時に見積残数が更新されない障害を修正</br>
    /// <br>Update Note: 2015/09/01  陳艶丹</br>
    /// <br>管理番号   : 11170170-00</br>
    /// <br>           : Redmine#47025 BLPで自動回答後に発注した場合、ＰＭ側で手動回答時に受注数を変更できないの対応</br>
    /// <br>Update Note: 2015/09/08 黄興貴</br>
    /// <br>管理番号   : 11170129-00 №836 Redmine#47045 連絡した後のソース指摘対応</br>
    /// <br>Update Note: 2015/09/08 zhangll</br>
    /// <br>管理番号   : 11170129-00 売上伝票入力の障害対応</br>
    /// <br>           : Redmine#47003 ログイン拠点と違う拠点の売上伝票を呼出後、</br>
    /// <br>           : 新規ボタンにて自動入金ありの売上を上げると更新拠点が前回修正した拠点になってしまい入金データが不正に作成される障害の対応</br>
    /// <br>Update Note: 2016/01/21 脇田 靖之</br>
    /// <br>管理番号   : 11270007-00 仕掛一覧№2808 貸出受注対応</br>
    /// <br>           : ①貸出/受注伝票の修正呼出時に計上状況(未計上・一部計上・計上済)を画面表示する</br>
    /// <br>           : ②貸出/受注伝票の修正呼出時に数量情報(貸出/受注数・計上数・未計上数)をバルーン表示する</br>
    /// <br>           : ③計上済みの受注伝票を伝票削除できるようにする</br>
    /// <br>Update Note: 2016/02/26 脇田 靖之</br>
    /// <br>管理番号   : 11270007-00 仕掛一覧№2808 貸出受注対応</br>
    /// <br>           : システムテスト障害一覧_先行配信分№256</br>
    /// <br>           : 受注数を変更後の数量情報が変更した数量と一致しない障害対応</br>
    /// <br>Update Note: 2016/09/18 譚洪</br>
    /// <br>管理番号   : 11275134-00 売上伝票入力の障害対応</br>
    /// <br>           : Redmine#48851 売上全体設定の在庫チェック区分が「再入力・警告」で、</br>
    /// <br>           : 且つ、在庫管理全体設定の現在庫表示区分が「受注分含まない」の場合に、売伝にて受注数量を入力しても、在庫チェックがかからないようにするの対応</br>
    /// <br>Update Note: 2016/12/07 西 毅</br>
    /// <br>管理番号   : 11275273-00 仕掛一覧№2852
    /// <br>           : 発注伝票登録時に、一つ前に登録した内容が印刷されてしまう障害の修正</br>
    /// <br>Update Note: K2016/12/14  時シン</br>
    /// <br>管理番号   : 11202330-00</br>
    /// <br>           : 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応</br>
    /// <br>Update Note: 2018/04/16 田建委</br>
    /// <br>管理番号   : 11470007-00</br>
    /// <br>           : ①SFからの問い合わせデータに追加された新BLコード等をBLコード検索部品の検索パラメータに設定する。</br>
    /// <br>           : ②SFへの回答データに問い合わせデータの新BLコード等を設定する。</br>
    /// <br>Update Note: 2019/05/16 陳艶丹</br>
    /// <br>管理番号   : 11575089-00</br>
    /// <br>           : Redmine#49768在庫切れのチェック対応</br>
    /// <br>Update Note: 2020/02/24 譚洪</br>
    /// <br>管理番号   : 11570208-00</br>
    /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
    /// <br>Update Note: 2020/09/01 陳艶丹</br>
    /// <br>管理番号   : 11600006-00</br>
    /// <br>           : PMKOBETSU-4076得意先伝票番号不具合対応</br>
    /// <br>Update Note: 2020/11/20 陳艶丹</br>
    /// <br>管理番号   : 11670305-00</br>
    /// <br>           : PMKOBETSU-4097 TSPインライン機能追加対応</br>
    /// <br>Update Note: 2020/12/21 呉元嘯</br>
    /// <br>管理番号   : 11670305-00</br>
    /// <br>           : PMKOBETSU-4097 TSPインライン機能追加対応</br> 
    /// <br>Update Note: K2020/12/29 陳艶丹</br>
    /// <br>管理番号   : 11600006-00</br>
    /// <br>           : PMKOBETSU-3786 納品書印刷スレッド順次実行対応</br>
    /// <br>Update Note: 2021/03/16 陳艶丹</br>
    /// <br>管理番号   : 11770032-00</br>
    /// <br>           : PMKOBETSU-4133 売上伝票入力原価0円障害の対応</br>
    /// <br>Update Note: K2021/05/19 陳艶丹</br>
    /// <br>管理番号   : 11601223-00</br>
    /// <br>           : PMKOBETSU-4140 No.34 過去日付の伝票が登録されてしまった対応</br>
    /// <br>Update Note: 2021/05/20 陳艶丹</br>
    /// <br>管理番号   : 11770032-00</br>
    /// <br>           : BLINCIDENT-2978 受注伝票明細金額が0の対応</br>  
    /// <br>Update Note: 2021/05/20 陳永康</br>
    /// <br>管理番号   : 11770032-00</br>
    /// <br>           : BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応</br> 
    /// <br>Update Note: 2021/07/16 陳艶丹</br>
    /// <br>管理番号   : 11770021-00</br>
    /// <br>           : PMKOBETSU-4154 売上伝票印刷エラー対応</br>
    /// <br>Update Note: 2021/08/23 陳艶丹</br>
    /// <br>管理番号   : 11601223-00</br>
    /// <br>           : PMKOBETSU-4178 税率のログ追加</br> 
    /// <br>Update Note: 2021/09/10 呉元嘯</br>
    /// <br>管理番号   : 11770032-00</br>
    /// <br>           : PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応</br> 
    /// <br>Update Note: 2021/10/09 田建委</br>
    /// <br>管理番号   : 11601223-00</br>
    /// <br>           : PMKOBETSU-4192 伝票入力後の処理が遅い件の調査</br> 
    /// <br>Update Note: 2022/04/26 陳艶丹</br>
    /// <br>管理番号   : 11870080-00</br>
    /// <br>           : PMKOBETSU-4208 電子帳簿対応</br> 
    /// <br>Update Note: K2024/08/15 陳艶丹</br>
    /// <br>管理番号   : 12000031-00</br>
    /// <br>           : PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応）</br> 
    /// </remarks>
    public partial class SalesSlipInputAcs
    {
        // ===================================================================================== //
        // コンストラクタ
        // ===================================================================================== //
        # region Constructor
        /// <summary>
        /// デフォルトコンストラクタ（Singletonデザインパターンを採用している為、privateとする）
        /// </summary>
        private SalesSlipInputAcs()
        {
            // 変数初期化
            this._dataSet = new SalesInputDataSet();
            this._dataSetCompute = new SalesInputDataSet();
            this._salesSlipInputInitDataAcs = SalesSlipInputInitDataAcs.GetInstance();
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.08.10 DEL
            //this._iIOWriteMAHNBDB = (IIOWriteMAHNBDB)MediationIOWriteMAHNBDB.GetIOWriteMAHNBDB();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.08.10 DEL
            this._iIOWriteControlDB = (IIOWriteControlDB)MediationIOWriteControlDB.GetIOWriteControlDB();
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.08.10 DEL
            //this._iSalesSlipDB = (ISalesSlipDB)MediationSalesSlipDB.GetSalesSlipDB();
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.08.10 DEL
            this._iStockSlipDB = (IStockSlipDB)MediationStockSlipDB.GetStockSlipDB();
            //>>>2010/02/26
            this._iIOWritScmDB = (IIOWriteScmDB)MediationIOWriteScmDB.GetIOWriteScmDB();
            this._scmDataSet = new ScmDataSet();
            //<<<2010/02/26
            this._enterpriseCode = LoginInfoAcquisition.EnterpriseCode;
            this._loginSectionCode = LoginInfoAcquisition.Employee.BelongSectionCode;
            this._customerInfoAcs = new CustomerInfoAcs();
            this._custRateGroupAcs = new CustRateGroupAcs();
            this._supplierAcs = new SupplierAcs();
            this._uoeSupplierAcs = new UOESupplierAcs();
            this._customerInfoAcs.IsLocalDBRead = SalesSlipInputInitDataAcs.ctIsLocalDBRead;
            this._modelNameUAcs = new ModelNameUAcs();
            this._inputDepositNormalTypeAcs = new InputDepositNormalTypeAcs();
            this._salesDetailDataTable = this._dataSet.SalesDetail;
            this._salesDetailDataTableBeforeAddUp = (SalesInputDataSet.SalesDetailDataTable)this._salesDetailDataTable;
            this._salesDetailAcceptAnOrderDataTable = this._dataSet.SalesDetailAcceptAnOrder;
            this._salesDetailAcceptAnOrderDataTableForOrder = (SalesInputDataSet.SalesDetailAcceptAnOrderDataTable)this._salesDetailAcceptAnOrderDataTable.Copy();
            this._salesDetailAcceptAnOrderDataTableForAdd = (SalesInputDataSet.SalesDetailAcceptAnOrderDataTable)this._salesDetailAcceptAnOrderDataTable.Copy();
            this._completeInfoDataTable = this._dataSet.CompleteInfo;
            this._autoEntryGoodsDataTable = this._dataSet.AutoEntryGoods;
            this._addUpSrcDetailDataTable = this._dataSet.AddUpSrcDetail;
            this._stockTempDataTable = this._dataSet.StockTemp;
            this._stockTempDataTableForSet = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTable.Copy();
            this._stockTempDataTableSave = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTable.Copy();
            this._stockTempDataTableSaveForRevision = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTable.Copy();
            this._stockTempDataTableDelete = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTable.Copy(); // ADD 2012/11/27 Y.Wakita
            this._stockSlipDataTable = this._dataSet.StockSlip;
            this._stockDetailDataTable = this._dataSet.StockDetail;
            this._stockSlipForReadDataTable = this._dataSet.StockSlipForRead;
            this._stockDetailForReadDataTable = this._dataSet.StockDetailForRead;
            this._addUpOrgStockDetailDataTable = this._dataSet.AddUpOrgStockDetail;
            this._paymentSlpDataTable = this._dataSet.PaymentSlp;
            this._stockInfoDataTable = this._dataSet.StockInfo;
            this._uoeOrderDtlDataTable = this._dataSet.UOEOrderDtl;
            this._uoeOrderDtlDataTableCalc = (SalesInputDataSet.UOEOrderDtlDataTable)this._uoeOrderDtlDataTable.Copy();
            this._uoeOrderDtlDataTableSave = (SalesInputDataSet.UOEOrderDtlDataTable)this._uoeOrderDtlDataTable.Copy();
            //>>>2010/02/26
            this._blGoodsDrDataTable = this._dataSet.BLGoodsDr;
            this._blCodeChgDataTable = this._dataSet.BLCodeChg;
            this._scmAcOdrDataDataTable = this._scmDataSet.SCMAcOdrData;
            this._scmAcOdrDtCarDataTable = this._scmDataSet.SCMAcOdrDtCar;
            this._scmAcOdrDtlAsDataTable = this._scmDataSet.SCMAcOdrDtlAs;
            this._scmAcOdrDtlIqDataTable = this._scmDataSet.SCMAcOdrDtlIq;
            //<<<2010/02/26
            //>>>2011/02/01 一部回答判定対応
            this._scmAcOdrDtlAsDataTableSave = this._scmDataSet.SCMAcOdrDtlAs;
            this._scmDetailIListSvBefore = new List<ISCMOrderDetailRecord>();
            this._scmHeaderIListSvForWebCheck = new List<ISCMOrderHeaderRecord>();
            this._scmDetailIListSvForWebCheck = new List<ISCMOrderDetailRecord>();
            this._scmDetailIAllList = new List<ISCMOrderDetailRecord>();
            this._scmDetailIAllListSv = new List<ISCMOrderDetailRecord>();
            this._scmAnswerIListSv = new List<ISCMOrderAnswerRecord>();
            this._scmAnswerIListSvForCancelCheck = new List<ISCMOrderAnswerRecord>(); // 2011/03/06
            this._changeRowNoList = new ArrayList();
            this._dtlNumDic = new Dictionary<int, string>();
            //<<<2011/02/01 一部回答判定対応
            this._salesSlip = new SalesSlip();
            this._salesSlipAcptAnOdr = new SalesSlip();
            this._salesSlipDBData = new SalesSlip();
            this._salesSlipBeforeAddUp = new SalesSlip();
            this._depsitMain = new SearchDepsitMain();
            this._salesDetailDBDataList = new List<SalesDetail>();
            this._salesPriceCalculate = new SalesPriceCalculate();
            this._stockPriceCalculate = new StockPriceCalculate();
            this._unitPriceCalculation = new UnitPriceCalculation();
            this._totalDayCalculator = TotalDayCalculator.GetInstance();
            this._dateGetAcs = DateGetAcs.GetInstance(); // 2010/11/30
            this._salesSlipInputInitDataAcs.CacheSalesProcMoneyList += new SalesSlipInputInitDataAcs.CacheSalesProcMoneyListEventHandler(this._salesPriceCalculate.CacheSalesProcMoneyList);
            this._salesSlipInputInitDataAcs.CacheStockProcMoneyList += new SalesSlipInputInitDataAcs.CacheStockProcMoneyListEventHandler(this._stockPriceCalculate.CacheStockProcMoneyList);
            this._salesSlipInputInitDataAcs.CacheSalesProcMoneyList += new SalesSlipInputInitDataAcs.CacheSalesProcMoneyListEventHandler(this._unitPriceCalculation.CacheSalesProcMoneyList);
            this._salesSlipInputInitDataAcs.CacheStockProcMoneyList += new SalesSlipInputInitDataAcs.CacheStockProcMoneyListEventHandler(this._unitPriceCalculation.CacheStockProcMoneyList);
            this._salesSlipInputInitDataAcs.CacheRateProtyMngList += new SalesSlipInputInitDataAcs.CacheRateProtyMngListEventHandler(this._unitPriceCalculation.CacheRateProtyMngAllList); // ADD 2010/03/01
            this._salesSlipStockInfoInputAcs = SalesSlipStockInfoInputAcs.GetInstance();
            this._salesSlipStockInfoInputAcs.CacheStockTemp += new SalesSlipStockInfoInputAcs.CacheStockTempEventHandler(this.CacheStockTemp);
            this._printSalesKeyInfo = new Dictionary<string, SlipPrintInfoValue>();
            this._printAcptKeyInfo = new Dictionary<string, SlipPrintInfoValue>();

            this._carInfoDataTable = new SalesInputDataSet.CarInfoDataTable();
            this._carInfoDataTableForCheck = new SalesInputDataSet.CarInfoDataTable(); // 2012/03/05
            this._colorInfoDic = new Dictionary<Guid, PMKEN01010E.ColorCdInfoDataTable>();
            this._trimInfoDic = new Dictionary<Guid, PMKEN01010E.TrimCdInfoDataTable>();
            this._cEqpDspInfoDic = new Dictionary<Guid, PMKEN01010E.CEqpDefDspInfoDataTable>();
            //>>>2010/04/08
            this._colorInfoDicSave = new Dictionary<Guid, PMKEN01010E.ColorCdInfoDataTable>();
            this._trimInfoDicSave = new Dictionary<Guid, PMKEN01010E.TrimCdInfoDataTable>();
            this._cEqpDspInfoDicSave = new Dictionary<Guid, PMKEN01010E.CEqpDefDspInfoDataTable>();
            //<<<2010/04/08
            this._beforeCarRelationGuid = new Guid();
            this._goodsUnitDataInfo = new Dictionary<GoodsInfoKey, GoodsUnitData>();
            this._mkrSuggestRtPricList = new Dictionary<GoodsInfoKey, List<GoodsPrice>>();  // ADD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応
            this._mkrSuggestRtPricUList = new Dictionary<GoodsInfoKey, List<GoodsPrice>>();  // ADD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応
            this._carInfo = new Dictionary<Guid, PMKEN01010E>();
            this._carSearchController = new CarSearchController();
            this._carRelationDic = new Dictionary<int, Guid>();

            this._salesDetailDataView = new DataView(this._salesDetailDataTable);
            this._acptAnOdrDetailDataView = new DataView(this._salesDetailAcceptAnOrderDataTable);

            this._salesSlipInputConstructionAcs = SalesSlipInputConstructionAcs.GetInstance();

            this._salesSlipStockInfoInputAcs.GoodsUnitDataInfo = this._goodsUnitDataInfo;

            this._custRateGroupList = new List<CustRateGroup>();

            this._costDisplay = true;
            this._svAcceptOdrCar = null;

            //--- ADD 2009/10/19 ---------->>>>>
            _priceSelectSetAcs = new PriceSelectSetAcs();
            //--- ADD 2009/10/19 ----------<<<<<

            //--- ADD 2010/01/27 ---------->>>>>
            _goodsNotReturnAcs = GoodsNotReturnAcs.GetInstance();
            //--- ADD 2010/01/27 ----------<<<<<

            //>>>2010/02/26
            this._kindList = new Hashtable();

            //>>>2010/03/30
            //this.GetSobaInfo();
            if (this._salesSlipInputInitDataAcs.Opt_SCM == (int)SalesSlipInputInitDataAcs.Option.ON) this.GetSobaInfo();
            //<<<2010/03/30
            //<<<2010/02/26

            stockSlipWorkTempList = new List<StockSlipWork>();  // ADD 2012/01/19 Redmine28098
            stockSlipWorkTempListForExist = new List<StockSlipWork>(); // 2012/01/20
            GetFileDialogDisplay();// ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応

        }

        /// <summary>
        /// 売上伝票入力アクセスクラス インスタンス取得処理
        /// </summary>
        /// <returns>売上伝票入力アクセスクラス インスタンス</returns>
        public static SalesSlipInputAcs GetInstance()
        {
            if (_salesSlipInputAcs == null)
            {
                _salesSlipInputAcs = new SalesSlipInputAcs();
            }

            return _salesSlipInputAcs;
        }
        # endregion

        // ===================================================================================== //
        // プライベート変数
        // ===================================================================================== //
        # region Private Members
        private static SalesSlipInputAcs _salesSlipInputAcs;
        private SalesSlipInputInitDataAcs _salesSlipInputInitDataAcs;
        private SalesSlipStockInfoInputAcs _salesSlipStockInfoInputAcs;
        private SalesInputDataSet _dataSet;
        private SalesInputDataSet _dataSetCompute;
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.08.10 DEL
        //private IIOWriteMAHNBDB _iIOWriteMAHNBDB;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.08.10 DEL
        private IIOWriteControlDB _iIOWriteControlDB;
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.08.10 DEL
        //private ISalesSlipDB _iSalesSlipDB;
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.08.10 DEL
        private IStockSlipDB _iStockSlipDB;
        //>>>2010/02/26
        private ScmDataSet _scmDataSet;
        private IIOWriteScmDB _iIOWritScmDB;
        //<<<2010/02/26
        private string _enterpriseCode;
        private bool _isMakeQRFlg;       // ADD 2010/07/12
        private string _loginSectionCode;
        private bool _isDataCanged = false;
        private CustomerInfoAcs _customerInfoAcs;
        private CustRateGroupAcs _custRateGroupAcs;
        private SupplierAcs _supplierAcs;
        private UOESupplierAcs _uoeSupplierAcs;
        private ModelNameUAcs _modelNameUAcs;
        private InputDepositNormalTypeAcs _inputDepositNormalTypeAcs;

        // --- ADD 2009/10/19 ---------->>>>>
        private PriceSelectSetAcs _priceSelectSetAcs;
        // --- ADD 2009/10/19 ----------<<<<<
        private string _currentSalesSlipNum = ctDefaultSalesSlipNum;
        private SalesInputDataSet.SalesDetailDataTable _salesDetailDataTable;
        private SalesInputDataSet.SalesDetailDataTable _salesDetailDataTableBeforeAddUp;
        private SalesInputDataSet.SalesDetailDataTable _salesDetailDataTableSave;
        private SalesInputDataSet.SalesDetailDataTable _salesDetailDataTableForCalc;
        private SalesInputDataSet.SalesDetailRow _currentSalesDetailRow;
        private SalesInputDataSet.SalesDetailAcceptAnOrderDataTable _salesDetailAcceptAnOrderDataTable;
        private SalesInputDataSet.SalesDetailAcceptAnOrderDataTable _salesDetailAcceptAnOrderDataTableSave;
        private SalesInputDataSet.SalesDetailAcceptAnOrderDataTable _salesDetailAcceptAnOrderDataTableForCalc;
        private SalesInputDataSet.SalesDetailAcceptAnOrderDataTable _salesDetailAcceptAnOrderDataTableForOrder;
        private SalesInputDataSet.SalesDetailAcceptAnOrderDataTable _salesDetailAcceptAnOrderDataTableForAdd;
        private SalesInputDataSet.AddUpSrcDetailDataTable _addUpSrcDetailDataTable;
        private SalesInputDataSet.StockTempDataTable _stockTempDataTable;
        private SalesInputDataSet.StockTempDataTable _stockTempDataTableSave;
        private SalesInputDataSet.StockTempDataTable _stockTempDataTableSaveForRevision; // 2010/09/27
        private SalesInputDataSet.StockTempDataTable _stockTempDataTableForSet;
        private SalesInputDataSet.StockTempDataTable _stockTempDataTableDelete; // ADD 2012/11/27 Y.Wakita
        private SalesInputDataSet.StockSlipDataTable _stockSlipDataTable;
        private SalesInputDataSet.StockDetailDataTable _stockDetailDataTable;
        private SalesInputDataSet.StockSlipForReadDataTable _stockSlipForReadDataTable;
        private SalesInputDataSet.StockDetailForReadDataTable _stockDetailForReadDataTable;
        private SalesInputDataSet.AddUpOrgStockDetailDataTable _addUpOrgStockDetailDataTable;
        private SalesInputDataSet.PaymentSlpDataTable _paymentSlpDataTable;
        private SalesInputDataSet.StockInfoDataTable _stockInfoDataTable;
        private SalesInputDataSet.UOEOrderDtlDataTable _uoeOrderDtlDataTable;
        private SalesInputDataSet.UOEOrderDtlDataTable _uoeOrderDtlDataTableCalc;
        private SalesInputDataSet.UOEOrderDtlDataTable _uoeOrderDtlDataTableSave;
        //>>>2010/02/26
        private ScmDataSet.SCMAcOdrDataDataTable _scmAcOdrDataDataTable;
        private ScmDataSet.SCMAcOdrDtCarDataTable _scmAcOdrDtCarDataTable;
        private ScmDataSet.SCMAcOdrDtlAsDataTable _scmAcOdrDtlAsDataTable;
        private ScmDataSet.SCMAcOdrDtlAsDataTable _scmAcOdrDtlAsDataTableBackup; // ADD qijh 2013/02/27 #34752
        // ADD 2012/07/11 №35 T.Yoshioka ------------------------------>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        private ScmDataSet.SCMAcOdrDtlAsDataTable _scmAcOdrDtlAsDataTableReturn = new ScmDataSet.SCMAcOdrDtlAsDataTable();
        // ADD 2012/07/11 №35 T.Yoshioka ------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------>>>>>
        private ScmDataSet.SCMAcOdrDataDataTable _scmAcOdrDataDataTableReturn;
        // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------<<<<<
        private ScmDataSet.SCMAcOdrDtlIqDataTable _scmAcOdrDtlIqDataTable;
        //<<<2010/02/26
        //>>>2011/02/01 一部回答判定対応
        private ScmDataSet.SCMAcOdrDtlAsDataTable _scmAcOdrDtlAsDataTableSave;
        //<<<2011/02/01 一部回答判定対応
        // ADD 2013/12/19 SCM仕掛一覧№10615対応 -------------------------------------------------->>>>>
        private ScmDataSet.SCMAcOdrDataDataTable _scmAcOdrDataDataTableInputSave;
        private ScmDataSet.SCMAcOdrDtCarDataTable _scmAcOdrDtCarDataTableInputSave;
        private ScmDataSet.SCMAcOdrDtlIqDataTable _scmAcOdrDtlIqDataTableInputSave;
        private ScmDataSet.SCMAcOdrDtlAsDataTable _scmAcOdrDtlAsDataTableInputSave;
        // ADD 2013/12/19 SCM仕掛一覧№10615対応 --------------------------------------------------<<<<<
        private SalesSlip _salesSlip;
        private SalesSlip _salesSlipAcptAnOdr;
        private SalesSlip _salesSlipDBData;
        private SalesSlip _salesSlipBeforeAddUp;
        private SearchDepsitMain _depsitMain;
        private SearchDepositAlw _depositAlw;
        private List<SalesDetail> _salesDetailDBDataList;
        private SalesPriceCalculate _salesPriceCalculate;
        private StockPriceCalculate _stockPriceCalculate;
        private UnitPriceCalculation _unitPriceCalculation;
        private TotalDayCalculator _totalDayCalculator;
        private DateGetAcs _dateGetAcs; // 2010/11/30
        private int _partySaleSlipDiv;
        private readonly string cRelation_Detail_LnkDetail = "AddUpSrcDetail_SalesDetail";
        private int _supplierSlipDelDiv;
        private Dictionary<string, SlipPrintInfoValue> _printSalesKeyInfo; // 売上伝票印刷キー情報(key:伝票番号 value:受注ステータス,保存前伝票番号)
        private Dictionary<string, SlipPrintInfoValue> _printAcptKeyInfo;  // 受注伝票印刷キー情報(key:伝票番号 value:受注ステータス,保存前伝票番号)

        // 2010/06/12 Add >>>
        private SalesQRSendCtrlCndtn _qrMakeCndtn; // QR生成条件
        // 2010/06/12 Add <<<

        private CarSearchController _carSearchController;
        private SalesInputDataSet.CarInfoDataTable _carInfoDataTable;                   // 車両情報テーブル
        private SalesInputDataSet.CarInfoDataTable _carInfoDataTableSave;               // 車両情報テーブル // 2010/02/26
        private SalesInputDataSet.CarInfoDataTable _carInfoDataTableForCheck;           // 車両情報テーブル // 2012/03/05
        private Dictionary<Guid, PMKEN01010E.ColorCdInfoDataTable> _colorInfoDic;       // カラー情報
        private Dictionary<Guid, PMKEN01010E.TrimCdInfoDataTable> _trimInfoDic;         // トリム情報
        private Dictionary<Guid, PMKEN01010E.CEqpDefDspInfoDataTable> _cEqpDspInfoDic;  // 装備情報
        //>>>2010/04/08
        private Dictionary<Guid, PMKEN01010E.ColorCdInfoDataTable> _colorInfoDicSave;       // カラー情報
        private Dictionary<Guid, PMKEN01010E.TrimCdInfoDataTable> _trimInfoDicSave;         // トリム情報
        private Dictionary<Guid, PMKEN01010E.CEqpDefDspInfoDataTable> _cEqpDspInfoDicSave;  // 装備情報
        //<<<2010/04/08
        private Guid _beforeCarRelationGuid;                                            // 前回車両情報共通キー
        private Dictionary<int, Guid> _carRelationDic;                                  // 車両連結情報

        private SalesSlipInputAcs.SearchPartsMode _searchPartsMode;                     // 部品検索モード
        private SalesSlipInputAcs.SearchCarMode _searchCarMode;                         // 車両検索モード
        private bool _searchCarDiv;                                                     // 車両検索区分(true:検索する,false:検索しない)

        private Dictionary<SalesSlipInputAcs.GoodsInfoKey, GoodsUnitData> _goodsUnitDataInfo;             // 商品連結情報
        // ADD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応 --------------------->>>>>
        private Dictionary<SalesSlipInputAcs.GoodsInfoKey, List<GoodsPrice>> _mkrSuggestRtPricList; // メーカー希望小売価格情報
        private Dictionary<SalesSlipInputAcs.GoodsInfoKey, List<GoodsPrice>> _mkrSuggestRtPricUList; // メーカー希望小売価格情報（ユーザー登録分）
        // ADD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応 ---------------------<<<<<

        private Dictionary<Guid, PMKEN01010E> _carInfo;                                 // 車両情報

        private DataView _salesDetailDataView;                                          // 売上明細データビュー
        private DataView _acptAnOdrDetailDataView;                                      // 受注明細データビュー

        private SalesSlipInputConstructionAcs _salesSlipInputConstructionAcs;           // 設定画面アクセスクラス

        private IOperationAuthority _operationAuthority;    // 操作権限の制御オブジェクト

        private Thread _printSlipThread; // 伝票印刷スレッド

        private List<CustRateGroup> _custRateGroupList;

        private bool _costDisplay;                          // 原価関係表示有無区分(HOMEキーによる操作)(true:表示 false:非表示)

        private AcceptOdrCar _svAcceptOdrCar; // 前回情報表示用受注マスタ(車両)退避変数

        // --- ADD 2009/11/24 ---------->>>>>
        private bool _printSlipFlag = true;         // 伝票印刷変数
        // --- ADD 2009/11/24 ----------<<<<<

        // --- ADD 2010/01/27 ---------->>>>>
        private GoodsNotReturnAcs _goodsNotReturnAcs; //返品不可設定
        // --- ADD 2010/01/27 ----------<<<<<
        // --- ADD K2021/08/23 陳艶丹 PMKOBETSU-4178 税率のログ追加--->>>>
        // アセンブリ名
        //private const string CtAssemblyName = "MAHNB01001U";//DEL 2021/10/09 田建委 PMKOBETSU-4192 伝票入力後の処理が遅い件の調査
        private const string CtRateLogSetting = "MAHNB01001URateLog";//ADD 2021/10/09 田建委 PMKOBETSU-4192 伝票入力後の処理が遅い件の調査
        // 売上日付
        private const string CtSalesDateStr = "売上日付={0},";
        // 入力モード
        private const string CtInputMode = "入力モード={0},";
        // 売上伝票の消費税転嫁方式
        private const string CtConsTaxLayMethod = "転嫁方式={0},";
        // 計上時点の消費税率画面に入力した税率
        private const string CtTaxRateInput = "入力税率={0},";
        // 計上時点の税率設定マスタから取得した税率
        private const string CtMasterRate = "税率設定マスタの税率={0},";
        // 計上元伝票の税率
        private const string CtConsTaxRate = "計上元伝票の税率={0},";
        // 判断用税率
        private const string CtTaxRate = "判断用税率={0},";
        // ログ内容
        private const string CtLogString = "プロセスハンドル={0},{1}";
        // 日付フォマード
        private const string CtDateFormate = "yyyy/MM/dd";
        // 元伝票番号
        private const string CtBfSalesSlipNo = "元伝票番号={0},";
        // 貸出同時仕入区分
        private const string CtRentSyncSupFlg = "貸出同時仕入区分={0},";
        // 税率設定マスタ
        private const string CtTaxRateSet = "税率設定 1ST={0},1ED={1},税率1={2},2ST={3},2ED={4},税率2={5},3ST={6},3ED={7},税率3={8}";
        // 税率設定マスタがNULL
        private const string CtTaxRateNull = "税率設定Null";

        // 元伝票情報
        public SalesSlip GetSalesSlipBeforeAddUp
        {
            get
            {
                return this._salesSlipBeforeAddUp;
            }
        }
        // --- ADD K2021/08/23 陳艶丹 PMKOBETSU-4178 税率のログ追加--- <<<<
        // --- ADD ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
        private const string CT_PORTNAME = "\\{0}_{1}_{2}_{3}.pdf";
        private const string CT_LOCALPORT = ",XcvMonitor Local Port";
        private const string CT_ZERO = "\0";
        private const string CT_ADDPORT = "AddPort";
        private const string CT_DELETEPORT = "DeletePort";
        private const string CT_PRINTER = "Microsoft Print to PDF";
        private const string CT_DEFALUT_PORTNAME = "PORTPROMPT:";
        private const string CT_XMLEBOOKSFILEFOLDERXMLINFO = "MAKAU03000U_EBooksLinkSetting.XML";
        private const string CT_EBOOKSFOLDER = "\\eBooks\\eBooks";
        private const string CT_CUSTOMERFOLDER = "\\eBooks\\Customer";
        private const string CT_TEMPFOLDER = "\\Temp\\salesEBooks";
        private const string CT_RENAMEOLDER = "\\Rename";
        private const string CT_LOGFOLDER = "\\Log\\eBooks";
        private const string CT_LOGFILENM = "\\{0}_salesEBooks_{1}.txt";
        private const string CT_FOLDERSPLIT = "\\";
        private const string CT_STRSPLIT = "\"";
        private const string CT_EBOOKSFLPATH = "\\nN2_{0}_{1}.csv";
        private const string CT_CUSTOMERFLPATH = "\\nN7_CustomerRF_Diff_{0}.csv";
        private const string CT_DATETIMEFOMART = "yyyyMMddHHmmss";
        private const string CT_YMDFOMART = "yyyyMMdd";
        private const string CT_LOGDATETIMEFOMART = "yyyy/MM/dd HH:mm:ss";
        private const string CT_LOGCOUNT = "{0}件";
        private const string CT_OPLOGMSG = "{0}件を同期　Log：{1}";
        private const string PGNAME_STR = "売上伝票入力";
        private const string ASSID_MAHNB01000U = "MAHNB01000U";
        private const string PGID_VIRTUALPRINTER = "VirtualPrinterController.exe";
        private const string CT_NAME_SALE = "売上";
        private const string CT_NAME_ESTIMATE = "見積";
        private const string CT_NAME_EBOOK = "Partsman_DenchoDX_VirtualPrinterMutex";
        private const string CT_MODE_SALE = "1";
        private const int MODE_PORT_CHANGE = 1;
        private const int MODE_PORT_RECOVERY = 2;
        private const int STATUS_NORMAL = 0;
        private const int COMMAND_THREE = 3;
        private const int COMMAND_ZERO = 0;
        private const int LEVEL_TWO = 2;
        private const int LEVEL_ZERO = 0;
        private const int CBBUF_ZERO = 0;
        private const int DESIREDACCESS_ONE = 1;
        private const int CT_INT_TWO = 2;
        private const int CT_INT_ZERO = 0;
        private const int CT_MUTEX_WAIT_MAX = 360; // 仮想プリンタ出力排他獲得最大待ち時間（6分）
        private const string CT_CUSTOMERCDFOMART = "00000000";
        private const string CT_SPLITSTR = "_";
        private const char CT_SPLITCHAR = '_';
        private const double RATE10 = 0.1;
        private const double RATE8 = 0.08;
        //今回の電子帳簿対応ではダイアログ表示を使用しない
        private const string XML_PDFPRINTERSETTINGENABLE = "MAHNB01001U_PDFPrinterSettingEnable.xml";
        private const string MESS_PRINTERPORT_ERR = "PDFプリンタポートの設定に失敗しました({0})";
        private const string MESS_PRINTERMUTEX_ERR = "PDFプリンタへの出力に失敗しました（排他取得エラー）";
        // 禁止文字
        private char[] badChars = new char[] { '\\', '/', ':', '*', '?', '\"', '<', '>', '|', '_' };
        // ファイル保存ダイアログ表示
        private bool _fileDialogDisplay = false;
        // ポート名
        private string _portName = string.Empty;
        //インデクスファイル出力用
        // 売上データ
        private Dictionary<string, SalesSlipWork> _svSalesSlipWorkDic = new Dictionary<string, SalesSlipWork>();
        // 売上明細データ
        private Dictionary<string, ArrayList> _svSalesDetailWorkDic = new Dictionary<string, ArrayList>();
        // --- ADD ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<

        private IWin32Window _owner;

        private Dictionary<string, List<int>> CustSlipNoDic = new Dictionary<string, List<int>>();// ADD 陳艶丹 2020/09/01 PMKOBETSU-4076の対応

        //>>>2010/02/26
        private Hashtable _kindList = new Hashtable();                                   // 相場価格種別リスト
        //<<<2010/02/26

        List<AddUpOrgSalesDetailWork> _addUpOrgSalesDetailWorkList;　// ADD 2010/03/01

        # region Private Members ---- zhangkai
        private bool _cannotGoodsRead = false;
        private bool _cannotGoodsMakerRead = false;
        private bool _cannotSupplierInfoRead = false;
        private bool _cannotBLGoodsRead = false;
        private bool _cannotListPrice = false;
        private bool _cannotSalesUnitCost = false;
        private bool _cannotCostRate = false;
        private bool _cannotSalesUnitPrice = false;
        private bool _cannotSalesRate = false;
        private bool _isOverFlow = false;
        private bool _cannotSalesCode = false;
        private bool _cannotBoCode = false;
        private bool _cannotUOESupplierCd = false;
        private bool _cannotUOEDeliGoodsDiv = false;
        private bool _cannotFollowDeligoodsDiv = false;
        private bool _cannotUOEResvdSection = false;
        # endregion

        // --- ADD 2010/05/04 ---------->>>>>
        private bool _readSlipFlg = false;
        // --- ADD 2010/05/04 ----------<<<<<


        // --- ADD 2010/06/21 ---------->>>>>
        private bool _employeeFlag = false;
        // --- ADD 2010/06/21 ----------<<<<<

        public bool _grossProfitRateFlg = false; // --- ADD 2010/07/16 

        public bool _homeKeyFlg = false; // --- ADD 2010/09/14 

        public bool _clearFlgForMaker = false;  // --- ADD 2010/09/19 

        private string _errorMessage = string.Empty; // ADD 2010/11/25

        public IList<ISCMOrderDetailRecord> _scmDetailIListSvBefore; // 2011/02/01
        public IList<ISCMOrderHeaderRecord> _scmHeaderIListSvForWebCheck; // 2011/02/01
        public IList<ISCMOrderDetailRecord> _scmDetailIListSvForWebCheck; // 2011/02/01
        private IList<ISCMOrderDetailRecord> _scmDetailIAllList; // 2011/02/01  
        private IList<ISCMOrderDetailRecord> _scmDetailIAllListSv; // 2011/02/01  
        private IList<ISCMOrderAnswerRecord> _scmAnswerIListSv = new List<ISCMOrderAnswerRecord>(); // 2011/02/01
        private IList<ISCMOrderAnswerRecord> _scmAnswerIListSvForCancelCheck = new List<ISCMOrderAnswerRecord>(); // 2011/03/06
        private ArrayList _changeRowNoList = new ArrayList(); // 2011/02/01
        private Dictionary<int, string> _dtlNumDic = new Dictionary<int, string>(); // 2011/02/01 [key:salesRowNo, value:acptAnOdrSrc,dtlNumSrc]
        private bool _cmtFlg = false; // 2011/02/01

        public List<StockSlipWork> stockSlipWorkTempList; // ADD 2012/01/19 Redmine28098
        public List<StockSlipWork> stockSlipWorkTempListForExist; // 2012/01/20
        // ---ADD 2011/02/11------------->>>>
        // ログ出力用
        public SurveyUseLogOutputAcs _surveyUseLogOutputAcs = null;

        // ログ出力用
        public bool _isCanSaveFlg = true;
        public string _txtFileName = string.Empty;
        // ---ADD 2011/02/11-------------<<<<

        // ---ADD 2011/07/20-------------->>>>>
        private bool _shipmentCntOnChange = false;

        private bool _hasStockInfo = false;

        // ---ADD 2011/07/20--------------<<<<<

        //>>>2011/05/25
        private int _pmInstNoHdlDivCd = 0; // PM指示書番号取扱区分
        //<<<2011/05/25
        public bool _salesSlipCanEditDivCd; // ADD K2011/08/12

        // zhouzy add 20110919 begin
        // 得意先テープル
        private Dictionary<int, PccCmpnySt> _customerHTable = null;
        private PccCmpnyStAcs _pccCmpnyStAcs = null;
        int _commethod = 0;//通信方式
        private bool _scmFlg;//SCM送信フラグ
        // zhouzy add 20110919 end

        // --- ADD 2011/10/29 ---------->>>>>
        private bool _warehouseBtnClickFlag = false;
        private int _warehouseRow = -1;

        public bool WarehouseBtnClickFlag
        {
            set { this._warehouseBtnClickFlag = value; }
            get { return this._warehouseBtnClickFlag; }
        }

        public int WarehouseRow
        {
            set { this._warehouseRow = value; }
            get { return this._warehouseRow; }
        }
        // --- ADD 2011/10/29 ----------<<<<<

        // --- ADD K2011/12/09 ---------->>>>>
        private DateTime _getServerNowTime = DateTime.Now;

        public DateTime GetServerNowTime
        {
            get
            {
                this._getServerNowTime = _iIOWriteControlDB.GetServerNowTime();
                return this._getServerNowTime;
            }
        }
        // --- ADD K2011/12/09 ----------<<<<<

        // ADD 2012/02/09 李占川 Redmine#28289 --- >>>>>
        private bool _printThreadOverFlag = true; // 印刷中フラグ
        private bool _addUpOperationFlag = false; // ADD 陳健 2014/01/23 for Redmine#41550のNo.1＆No.2

        public void GetPrintThreadOverFlag(out bool printThreadOverFlag)
        {
            printThreadOverFlag =  this._printThreadOverFlag;
        }
        // ADD 2012/02/09 李占川 Redmine#28289 --- <<<<

        // ADD 2012/10/17 湯上 SCM障害対応 №10414------------------------>>>>>
        private List<string> _salesSlipNumList = null;
        // ADD 2012/10/17 湯上 SCM障害対応 №10414------------------------<<<<<

        // --- ADD 2013/03/21 ---------->>>>>
        private int _handleInfoCode = 0; // ハンドル位置情報キャッシュ
        // --- ADD 2013/03/21 ----------<<<<<

        private SalesSlip _baseSalesSlip; // 2013/04/09 Y.Wakita

        private ArrayList _extrData = new ArrayList();  // K2014/01/14 Y.Wakita

        // ADD 2014/09/18 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応 --------------------------------->>>>>
        // 受注計上フラグ
        private bool _acceptAnOrderAddupFlag = false;
        public bool AcceptAnOrderAddupFlag
        {
            set { this._acceptAnOrderAddupFlag = value; }
            get { return this._acceptAnOrderAddupFlag; }
        }
        // 受注計上時退避用SCM受注データ
        private UserSCMOrderHeaderRecord _acptSCMHeader = null;
        public UserSCMOrderHeaderRecord AcptSCMHeader
        {
            set { this._acptSCMHeader = value; }
            get { return this._acptSCMHeader; }
        }
        // ADD 2014/09/18 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応 ---------------------------------<<<<<

        // ADD 2014/11/06 chenyd For PM-SCM仕掛一覧№85 ｼｽﾃﾑﾃｽﾄ障害№4対応 ---------------->>>>>>>>>>
        // 回答区分
        private int _answerDivCode = -1;
        public int AnswerDivCode
        {
            set { this._answerDivCode = value; }
            get { return this._answerDivCode; }
        }
        // ADD 2014/11/06 chenyd For PM-SCM仕掛一覧№85 ｼｽﾃﾑﾃｽﾄ障害№4対応 ----------------<<<<<<<<<<


        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
        // 軽減税率Flg
        private bool _taxRateFlg = false;
        public bool TaxRateFlg
        {
            set { this._taxRateFlg = value; }
            get { return this._taxRateFlg; }
        }
        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<

        // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------>>>>
        private ArrayList TspCprtStWorkList = new ArrayList();// TSP連携マスタ設定
        private string Parameter = string.Empty; // 起動パラメータ

        /// <summary>
        /// TSP連携マスタ設定
        /// </summary>
        public ArrayList TspCprtStList
        {
            get { return this.TspCprtStWorkList; }
            set { this.TspCprtStWorkList = value; }
        }

        /// <summary>
        /// 起動パラメータ
        /// </summary>
        public string LoginParameter
        {
            get { return this.Parameter; }
            set { this.Parameter = value; }
        }
        // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------<<<<<
        // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 ----->>>>>
        // 排他ロック対象
        public object _printLocker = new object();
        // 帳票印刷スレッドリスト
        public List<PringThreadInfo> _pringThreadList = new List<PringThreadInfo>();
        // 印刷中フラグ
        public bool PrintThreadOverFlag
        {
            set { this._printThreadOverFlag = value; }
        }
        // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 -----<<<<<
        # endregion

        // ===================================================================================== //
        // 外部に提供する定数群
        // ===================================================================================== //
        # region Public Readonly Members
        /// <summary>行ステータス（通常行）</summary>
        public static readonly int ctROWSTATUS_NORMAL = 0;

        /// <summary>行ステータス（コピー行）</summary>
        public static readonly int ctROWSTATUS_COPY = 1;

        /// <summary>行ステータス（カット行）</summary>
        public static readonly int ctROWSTATUS_CUT = 2;

        /// <summary>行編集ステータス（全項目編集可能）</summary>
        public static readonly int ctEDITSTATUS_AllOK = 0;

        /// <summary>行編集ステータス（数量のみ編集可能）</summary>
        public static readonly int ctEDITSTATUS_ShipmentCountOnly = 1;

        /// <summary>行編集ステータス（全項目無効）</summary>
        public static readonly int ctEDITSTATUS_AllDisable = 2;

        /// <summary>行編集ステータス（全項目参照のみ）</summary>
        public static readonly int ctEDITSTATUS_AllReadOnly = 3;

        /// <summary>行編集ステータス（計上新規／数量、単価のみ編集可能）</summary>
        public static readonly int ctEDITSTATUS_AddUpNew = 4;

        /// <summary>行編集ステータス（計上編集／単価のみ編集可能）</summary>
        public static readonly int ctEDITSTATUS_AddUpEdit = 5;

        /// <summary>行編集ステータス（行値引き／売上金額のみ編集可能）</summary>
        public static readonly int ctEDITSTATUS_RowDiscount = 6;

        /// <summary>行編集ステータス（注釈／商品名称のみ編集可能）</summary>
        public static readonly int ctEDITSTATUS_Annotation = 7;

        /// <summary>行編集ステータス（商品値引き）</summary>
        public static readonly int ctEDITSTATUS_GoodsDiscount = 8;

        /// <summary>行編集ステータス（通常修正）</summary>
        public static readonly int ctEDITSTATUS_ExistSlip = 9;

        /// <summary>入力モード（通常）</summary>
        public static readonly int ctINPUTMODE_SalesSlip_Normal = 0;

        /// <summary>入力モード（返品）</summary>
        public static readonly int ctINPUTMODE_SalesSlip_Return = 1;

        /// <summary>入力モード（赤伝）</summary>
        public static readonly int ctINPUTMODE_SalesSlip_Red = 2;

        /// <summary>入力モード（出荷計上）</summary>
        public static readonly int ctINPUTMODE_SalesSlip_ShipmentAddUp = 3;

        /// <summary>入力モード（受注計上）</summary>
        public static readonly int ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp = 4;

        /// <summary>入力モード（見積計上）</summary>
        public static readonly int ctINPUTMODE_SalesSlip_EstimateAddUp = 5;

        /// <summary>入力モード（締め済み）</summary>
        public static readonly int ctINPUTMODE_SalesSlip_AddUp = 6;

        /// <summary>入力モード（読み取り専用）</summary>
        public static readonly int ctINPUTMODE_SalesSlip_ReadOnly = 7;

        /// <summary>最大数量</summary>
        public static readonly double ctMAXVALUE_Count = 9999999.99;
        /// <summary>最大数量(明細)</summary>
        public static readonly double ctMAXVALUE_CountDetail = 9999999.99;
        /// <summary>最大金額</summary>
        public static readonly long ctMAXVALUE_SalesMoney = 9999999999;
        /// <summary>最大金額(明細)</summary>
        public static readonly long ctMAXVALUE_SalesMoneyDetail = 999999999;
        /// <summary>最大単価</summary>
        public static readonly double ctMAXVALUE_SalesUnitPrice = 99999999.99;

        /// <summary>売上伝票番号初期値</summary>
        public static readonly string ctDefaultSalesSlipNum = string.Empty.PadLeft(9, '0');
        /// <summary>仕入伝票番号初期値</summary>
        public static readonly Int32 ctDefaultSupplierSlipNo = 1000000000;
        /// <summary>最大明細行数</summary>
        public static readonly int ctMaxRowCount = 9999;
        /// <summary>ＢＯ区分初期値</summary>
        //public static readonly string ctDefaultBoCode = "*"; // DEL 2011/10/26
        //public static readonly string ctDefaultBoCode = ""; // ADD 2011/10/26 // DEL 2011/11/01
        public static readonly string ctDefaultBoCode = "*";// ADD 2011/11/01
        // --- UPD 2009/12/23 ---------->>>>>
        /// <summary>純正メーカー最大コード</summary>
        //public static readonly Int32 ctPureGoodsMakerCode = 1000;
        public static readonly Int32 ctPureGoodsMakerCode = 999;
        // --- UPD 2009/12/23 ----------<<<<<

        // 2011/01/31 Add >>>
        /// <summary>起動モード：SCM</summary>
        public const string ctStartMode_SCM = "/INQ";
        /// <summary>起動モード：コミュニケーションツールＣＴＩ</summary>
        public const string ctStartMode_CTI = "/CTI";
        /// <summary>起動モード：コミュニケーションツール連携</summary>
        public const string ctStartMode_CMT = "/SCM";
        // 2011/01/31 Add <<<
        // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133-------->>>>>
        private const string CtMethodNm = "SetSalesDetailBLGoodsInfo";
        // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133--------<<<<<
        private const string CtPropertyNm = "RetryFlg"; // ADD 2021/07/16 陳艶丹 FOR PMKOBETSU-4154
        // ---ADD 陳艶丹 2021/05/20 BLINCIDENT-2978 受注伝票明細金額が0の対応 ------>>>>>
        //出荷数ゼロ
        private const int CtShipmentCntZero = 0;
        // ---ADD 陳艶丹 2021/05/20 BLINCIDENT-2978 受注伝票明細金額が0の対応 ------<<<<<
        // ---ADD 陳永康 2021/05/20 BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応 ------>>>>>
        private const string MonPaymentSupplierDelMsg = "仕入日が前回月次更新日以前になっている為、仕入伝票が削除できません、売上伝票のみを削除します。";
        private const string PaymentSupplierDelMsg = "仕入日が前回支払締日以前になっている為、仕入伝票が削除できません、売上伝票のみを削除します。";
        private const string MonPaymentDateFormatStr = "　前回月次更新日 ： {0}";
        private const string PaymentDateFormatStr = "　前回支払締日 ： {0}";
        private const string PaymentDateFormat = "yyyy年MM月dd日";
        private const string AbnormalProcessMsg = "処理異常が発生しました。伝票削除できませんでした。";// ---MOD 2021/10/05 田村顕成 BLINCIDENT-2425
        // ---ADD 陳永康 2021/05/20 BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応 ------<<<<<
        # endregion

        // ===================================================================================== //
        // イベント
        // ===================================================================================== //
        # region Events
        /// <summary>データ変更後発生イベント</summary>
        public event EventHandler DataChanged;
        //>>>2010/02/26
        /// <summary>データ変更後発生イベント</summary>
        public event EventHandler RefreshMainDisplay;
        //<<<2010/02/26
        # endregion

        // ===================================================================================== //
        // 列挙体
        // ===================================================================================== //
        # region Enums
        /// <summary>
        /// 売上単価入力モード列挙型
        /// </summary>
        public enum SalesUnitPriceInputType : int
        {
            /// <summary>売上単価（税抜き）入力</summary>
            SalesUnitPrice = 0,
            /// <summary>売上単価（税込み）入力</summary>
            SalesUnitTaxPrice = 1,
            /// <summary>売上単価（表示用）入力</summary>
            SalesUnitPriceDisplay = 2,
        }

        /// <summary>
        /// 受注ステータス
        /// </summary>
        public enum AcptAnOdrStatusState : int
        {
            /// <summary>見積</summary>
            Estimate = 10,
            /// <summary>単価見積</summary>
            UnitPriceEstimate = 15,
            /// <summary>検索見積</summary>
            SearchEstimate = 16,
            /// <summary>受注</summary>
            AcceptAnOrder = 20,
            /// <summary>売上</summary>
            Sales = 30,
            /// <summary>貸出</summary>
            Shipment = 40,
        }

        /// <summary>
        /// 商品区分
        /// </summary>
        public enum SalesGoodsCd : int
        {
            /// <summary>商品</summary>
            Goods = 0,
            /// <summary>商品外</summary>
            NonGoods = 1,
            /// <summary>消費税調整</summary>
            ConsTaxAdjust = 2,
            /// <summary>残高調整</summary>
            BalanceAdjust = 3,
            /// <summary>売掛用消費税調整</summary>
            AccRecConsTaxAdjust = 4,
            /// <summary>売掛用残高調整</summary>
            AccRecBalanceAdjust = 5,
        }

        /// <summary>
        /// 売掛区分
        /// </summary>
        public enum AccRecDivCd : int
        {
            /// <summary>売掛なし</summary>
            NonAccRec = 0,
            /// <summary>売掛</summary>
            AccRec = 1,
        }

        /// <summary>
        /// 売上伝票区分
        /// </summary>
        public enum SalesSlipCd : int
        {
            /// <summary>売上</summary>
            Sales = 0,
            /// <summary>返品</summary>
            RetGoods = 1,
        }

        /// <summary>
        /// フォーカス移動方法(通常コントロール)
        /// </summary>
        public enum MoveMethod : int
        {
            /// <summary>上から下へ</summary>
            NextMove = 0,
            /// <summary>下から上へ</summary>
            PrevMove = 1,
        }

        /// <summary>
        /// 表示用伝票区分
        /// </summary>
        public enum SalesSlipDisplay : int
        {
            /// <summary> 掛売上</summary>
            AccRec = 10,
            /// <summary> 掛返品</summary>
            AccRecRetGoods = 20,
            /// <summary> 現金売上</summary>
            Cash = 30,
            /// <summary> 現金返品</summary>
            CashRetGoods = 40,
        }

        /// <summary>
        /// 合計金額算出タイプ
        /// </summary>
        public enum MoneyType : int
        {
            /// <summary>売上金額</summary>
            SalesMoney = 1,
            /// <summary>原価金額</summary>
            Cost = 2,
        }

        /// <summary>
        /// 伝票印刷チェックタイプ
        /// </summary>
        public enum PrintCheckType : int
        {
            /// <summary>キャンセル</summary>
            Cancel = 0,
            /// <summary>印刷のみ</summary>
            Print = 1,
            /// <summary>保存＆印刷</summary>
            SaveAndPrint = 2,
        }

        /// <summary>
        /// 伝票発行区分
        /// </summary>
        public enum SlipPrintDivCd : int
        {
            /// <summary>印刷する</summary>
            Print = 1,
            /// <summary>印刷しない</summary>
            None = 0,
        }

        /// <summary>
        /// メモ複写区分（履歴からコピー、計上する際にメモを複写するか設定）
        /// </summary>
        public enum MemoMoveDiv : int
        {
            /// <summary>全て</summary>
            All = 0,
            /// <summary>社外メモのみ</summary>
            SlipMemoOnly = 1,
            /// <summary>しない</summary>
            None = 2,
        }

        /// <summary>
        /// 残数自動表示区分（商品検索後、残が存在する場合、残検索を動作させる設定）
        /// </summary>
        public enum RemCntAutoDspDiv : int
        {
            /// <summary>しない</summary>
            None = 0,
            /// <summary>出入荷残のみ</summary>
            ShipmentAndArrivalOnly = 1,
            /// <summary>受発注残のみ</summary>
            AcptAnOrderAndOrderOnly = 2,
            /// <summary>出入荷残→受発注残</summary>
            ShipmentAndArrivalNextAcptAnOrderAndOrder = 3,
            /// <summary>受発注残→出入荷残</summary>
            AcptAnOrderAndOrderNextShipmentAndArrival = 4,
        }

        /// <summary>
        /// 見積区分
        /// </summary>
        public enum EstimateDivide : int
        {
            /// <summary>見積／単価見積以外</summary>
            None = 0,
            /// <summary>通常見積</summary>
            Estimate = 1,
            /// <summary>単価見積</summary>
            UnitPriceEstimate = 2,
            /// <summary>検索見積</summary>
            SearchEstimate = 3,
        }

        /// <summary>
        /// リモート参照用パラメータ設定処理
        /// </summary>
        public enum OptWorkSettingType : int
        {
            /// <summary>登録</summary>
            Write = 0,
            /// <summary>読込</summary>
            Read = 1,
            /// <summary>削除</summary>
            Delete = 2,
        }

        /// <summary>
        /// 明細データ展開方法（各種履歴からの明細展開時に使用）
        /// </summary>
        public enum WayToDetailExpand : int
        {
            /// <summary>通常（明細のコピー）</summary>
            Normal = 0,
            /// <summary>計上（同時入力は対象外）</summary>
            AddUp = 1,
            /// <summary>計上＋同時入力分も計上するデータを作成</summary>
            AddUpAndSync = 2,
            /// <summary>計上（残検索）</summary>
            AddUpRemainder = 3,
        }

        /// <summary>
        /// 原単価入力タイプ（原価連動）
        /// </summary>
        public enum UnitCostInputType : int
        {
            /// <summary>売上情報入力</summary>
            SalesInfo = 0,
            /// <summary>仕入情報入力</summary>
            StockInfo = 1,
        }

        /// <summary>
        /// 売上伝票区分（明細）
        /// </summary>
        public enum SalesSlipCdDtl : int
        {
            /// <summary>売上</summary>
            Sales = 0,
            /// <summary>返品</summary>
            RetGoods = 1,
            /// <summary>値引</summary>
            Discount = 2,
            /// <summary>注釈</summary>
            Annotation = 3,
            /// <summary>小計</summary>
            Subtotal = 4,
            /// <summary>作業</summary>
            Work = 5,
        }

        /// <summary>
        /// 車両情報取得モード
        /// </summary>
        public enum GetCarInfoMode : int
        {
            /// <summary>新規追加モード</summary>
            NewInsertMode = 0,
            /// <summary>既存取得モード</summary>
            ExistGetMode = 1,
            /// <summary>車種変更モード</summary>
            CarInfoChangeMode = 2,
        }

        /// <summary>
        /// 部品検索モード
        /// </summary>
        public enum SearchPartsMode : int
        {
            /// <summary>BLコード検索</summary>
            BLCodeSearch = 1,
            /// <summary>品番検索</summary>
            GoodsNoSearch = 2,
        }

        /// <summary>
        /// 車両検索モード
        /// </summary>
        public enum SearchCarMode : int
        {
            /// <summary>型式検索</summary>
            FullModelSearch = 1,
            /// <summary>モデルプレート検索</summary>
            ModelPlateSearch = 2,
        }

        /// <summary>
        /// 部品検索状態
        /// </summary>
        public enum SearchPartsModeState : int
        {
            /// <summary>検索無し</summary>
            NonSearch = 0,
            /// <summary>BLコード検索</summary>
            BLCodeSearch = 1,
            /// <summary>品番検索</summary>
            GoodsNoSearch = 2,
        }

        /// <summary>
        /// 総額表示方法区分
        /// </summary>
        public enum TotalAmountDispWayCd : int
        {
            /// <summary>総額表示しない</summary>
            NoTotalAmount = 0,
            /// <summary>総額表示する</summary>
            TotalAmount = 1,
        }

        /// <summary>
        /// 伝票日付クリア区分
        /// </summary>
        public enum SlipDateClrDivCd : int
        {
            /// <summary>システム日付</summary>
            SystemDate = 0,
            /// <summary>入力日付</summary>
            InputDate = 1,
        }

        /// <summary>
        /// 商品自動登録区分
        /// </summary>
        public enum AutoEntryGoodsDivCd : int
        {
            /// <summary>登録しない</summary>
            None = 0,
            /// <summary>登録する</summary>
            Write = 1,
        }

        /// <summary>
        /// 自動入金区分
        /// </summary>
        public enum AutoDepositCd : int
        {
            /// <summary>登録しない</summary>
            None = 0,
            /// <summary>登録する</summary>
            Write = 1,
        }

        // --- ADD m.suzuki 2010/05/13 自由検索---------->>>>>
        /// <summary>
        /// 自由検索部品自動登録区分
        /// </summary>
        public enum FrSrchPrtAutoEntDiv : int
        {
            /// <summary>登録しない</summary>
            None = 0,
            /// <summary>登録する</summary>
            Write = 1,
        }
        // --- ADD m.suzuki 2010/05/13 自由検索----------<<<<<

        // 2009.06.23 Del >>>
        ///// <summary>
        ///// 商品種別
        ///// </summary>
        //public enum GoodsKind : int
        //{
        //    /// <summary>親</summary>
        //    Parent = 1,
        //    /// <summary>結合</summary>
        //    Join = 2,
        //    /// <summary>セット</summary>
        //    Set = 4,
        //    /// <summary>代替</summary>
        //    Subst = 6,
        //    /// <summary>複数互換</summary>
        //    PluralSubst = 12,
        //}
        // 2009.06.23 Del <<<

        /// <summary>
        /// 商品属性
        /// </summary>
        public enum GoodsKindCode : int
        {
            /// <summary>純正</summary>
            PureGoods = 0,
            /// <summary>優良</summary>
            PrimeGoods = 1,
        }

        /// <summary>
        /// チェック戻り値
        /// </summary>
        public enum CheckResult : int
        {
            /// <summary>OK</summary>
            Ok = 0,
            /// <summary>エラー</summary>
            Error = 1,
            /// <summary>警告</summary>
            Warning = 2,
            /// <summary>確認</summary>
            Confirm = 4,
        }

        /// <summary>
        /// 売上在庫取寄区分
        /// </summary>
        public enum SalesOrderDivCd : int
        {
            /// <summary>取寄</summary>
            NonStock = 0,
            /// <summary>在庫</summary>
            Stock = 1,
        }

        /// <summary>
        /// 売上金額手入力区分
        /// </summary>
        public enum SalesMoneyInputDiv : int
        {
            /// <summary>通常算出</summary>
            Calculate = 0,
            /// <summary>手入力</summary>
            Input = 1,
        }

        /// <summary>
        /// ログ出力モード
        /// </summary>
        public enum OutPutLogMode : int
        {
            /// <summary>例外</summary>
            Abort = -1,
            /// <summary>赤伝発行</summary>
            RedSlip = 1,
            /// <summary>伝票修正</summary>
            SlipRevision = 2,
            /// <summary>伝票削除</summary>
            SlipDelete = 3,
            /// <summary>単価修正</summary>
            UnitPriceChange = 4,
            /// <summary>原価修正</summary>
            UnitCostChange = 5,
            /// <summary>数量修正</summary>
            CountChange = 6,
            // ADD 2013/03/27 T.Miyamoto ------------------------------>>>>>
            /// <summary>BL情報再設定</summary>
            BLInfoReset = 7,
            // ADD 2013/03/27 T.Miyamoto ------------------------------<<<<<
            // --- ADD 2013/06/17 Y.Wakita ---------->>>>>
            /// <summary>伝票登録</summary>
            SlipEntry = 8,
            // --- ADD 2013/06/17 Y.Wakita ----------<<<<<        
        }

        /// <summary>
        /// オペレーションコード
        /// </summary>
        public enum OperationCode : int
        {
            /// <summary>赤伝</summary>
            RedSlip = 10,
            /// <summary>伝票修正</summary>
            Revision = 11,
            /// <summary>伝票削除</summary>
            Delete = 12,
            /// <summary>単価変更</summary>
            UnitPriceChange = 13,
            /// <summary>原価変更</summary>
            UnitCostChange = 14,
            /// <summary>数量変更</summary>
            CountChange = 15,
            // --- ADD 2010/05/04 ---------->>>>>

            /// <summary>伝票値引</summary>
            SlipDiscount = 16,
            /// <summary>再発行</summary>
            RePrint = 17,
            /// <summary>数量マイナス</summary>
            CountMinus = 18,
            /// <summary>金額マイナス</summary>
            MoneyMinus = 19,

            // --- ADD 2010/05/04 ----------<<<<<

            // --- ADD 2010/07/13 ---------->>>>>
            /// <summary>その他伝票削除</summary>
            OtherTypeDelete = 20,
            // --- ADD 2010/07/13 ----------<<<<<
            // --- ADD 2014/07/15 T.Miyamoto 仕掛一覧 №1912 ---------->>>>>
            /// <summary>伝票修正(行削除)</summary>
            RowDelete = 21,
            // --- ADD 2014/07/15 T.Miyamoto 仕掛一覧 №1912 ----------<<<<<
            // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
            EBooks = 22,
            // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<
       }

        /// <summary>
        /// ＵＯＥガイド区分
        /// </summary>
        public enum UOEGuideDivCd : int
        {
            /// <summary>ＢＯ区分</summary>
            BoCode = 1,
            /// <summary>納品区分</summary>
            DeliveredGoodsDiv = 2,
            /// <summary>指定拠点</summary>
            UOEResvdSection = 3,
        }

        /// <summary>
        /// 消費税転嫁方式
        /// </summary>
        public enum ConsTaxLayMethod : int
        {
            /// <summary>伝票転嫁</summary>
            SlipLay = 0,
            /// <summary>明細転嫁</summary>
            DetailLay = 1,
            /// <summary>請求親</summary>
            DemandParentLay = 2,
            /// <summary>請求子</summary>
            DemandChildLay = 3,
            /// <summary>非課税</summary>
            TaxExempt = 9,
        }

        //>>>2010/02/26
        /// <summary>
        /// オンライン種別区分
        /// </summary>
        public enum OnlineKindDiv : int
        {
            /// <summary>なし</summary>
            None = 0,
            /// <summary>SCM</summary>
            SCM = 10,
            /// <summary>TSP.NS</summary>
            TSPNS = 20,
            /// <summary>TSP.NSインライン</summary>
            TSPINLINE = 30,
            /// <summary>TSPメール</summary>
            TSPMAIL = 40,
        }
        //<<<2010/02/26

        // ---ADD 陳永康 2021/05/20 BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応 ------>>>>>
        /// <summary>
        /// 仕入伝票削除区分
        /// </summary>
        public enum SupplierSlipDelDivEnum : int
        {
            /// <summary>しない</summary>
            NotDel = 0,
            /// <summary>確認</summary>
            DelQst = 1,
            /// <summary>する</summary>
            Del = 2,
        }

        // ---MOD 2021/10/05 田村顕成 BLINCIDENT-2425 ------>>>>> 
        /// <summary>
        /// 仕入伝票締め状態チェック結果区分
        /// </summary>
        public enum CheckResultDivEnum : int
        {
            /// <summary>締め無し</summary>
            noAddUp = 0,
            /// <summary>締め済み</summary>
            AddUp = 1,
            /// <summary>異常</summary>
            Abnormal = 2,
        }
        // ---MOD 2021/10/05 田村顕成 BLINCIDENT-2425 ------<<<<< 

        // ---ADD 陳永康 2021/05/20 BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応 ------<<<
        //----- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応------->>>>>
        /// <summary>
        /// 伝票PDF出力
        /// </summary>
        public enum OutputMode : int
        {
            /// <summary>しない</summary>
            PDFPrintUnable = 0,
            /// <summary>する</summary>
            PDFPrintEnable = 1,
            /// <summary>電子帳簿出力に従う</summary>
            PDFPrintCustom = 2,
        }
        /// <summary>
        /// 電子帳簿出力
        /// </summary>
        public enum DmOutCode : int
        {
            /// <summary>する</summary>
            YES = 0,
            /// <summary>しない</summary>
            NO = 1,
        }
        /// <summary>
        /// 電子帳簿出力
        /// </summary>
        public enum PDFPrint : int
        {
            /// <summary>通常印刷</summary>
            Usually = 0,
            /// <summary>電子帳簿出力</summary>
            EBook = 1,
        }
        //----- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応-------<<<<<
        #endregion

        // ===================================================================================== //
        // 構造体
        // ===================================================================================== //
        #region Struct
        /// <summary>
        /// 売上データ作成ブレイクキー構造体
        /// </summary>
        internal struct SlipKey
        {
            /// <summary> 在庫・取寄区分 </summary>
            int _salesOrderDivCd;
            /// <summary> 倉庫コード </summary>
            string _warehouseCode;
            /// <summary>
            /// コンストラクタ
            /// </summary>
            /// <param name="salesOrderDivCd">在庫・取寄区分</param>
            /// <param name="warehouseCode">倉庫コード</param>
            internal SlipKey(int salesOrderDivCd, string warehouseCode)
            {
                this._salesOrderDivCd = salesOrderDivCd;
                this._warehouseCode = warehouseCode;
            }
            /// <summary>
            /// 在庫・取寄区分
            /// </summary>
            internal int SalesOrderDivCd
            {
                get { return this._salesOrderDivCd; }
                set { this._salesOrderDivCd = value; }
            }
            /// <summary>
            /// 倉庫コード
            /// </summary>
            internal string WarehouseCode
            {
                get { return this._warehouseCode; }
                set { this._warehouseCode = value; }
            }
        }

        /// <summary>
        /// 仕入データ作成ブレイクキー構造体
        /// </summary>
        internal struct StockSlipKey
        {
            /// <summary>企業コード</summary>
            string _enterpriseCode;
            /// <summary>仕入先コード</summary>
            int _supplierCd;
            /// <summary>仕入日</summary>
            DateTime _stockDate;
            /// <summary>仕入伝票番号</summary>
            string _partySaleSlipNum;

            /// <summary>
            /// コンストラクタ
            /// </summary>
            /// <param name="enterpriseCode">企業コード</param>
            /// <param name="supplierCd">仕入先コード</param>
            /// <param name="stockDate">仕入日</param>
            /// <param name="partySaleSlipNum">仕入伝票番号</param>
            internal StockSlipKey(string enterpriseCode, int supplierCd, DateTime stockDate, string partySaleSlipNum)
            {
                this._enterpriseCode = enterpriseCode;
                this._supplierCd = supplierCd;
                this._stockDate = stockDate;
                this._partySaleSlipNum = partySaleSlipNum;
            }
            /// <summary>
            /// 企業コード
            /// </summary>
            internal string EnterpriseCode
            {
                get { return this._enterpriseCode; }
                set { this._enterpriseCode = value; }
            }
            /// <summary>
            /// 仕入先コード
            /// </summary>
            internal int SupplierCd
            {
                get { return this._supplierCd; }
                set { this._supplierCd = value; }
            }
            /// <summary>
            /// 仕入日
            /// </summary>
            internal DateTime StockDate
            {
                get { return this._stockDate; }
                set { this._stockDate = value; }
            }
            /// <summary>
            /// 仕入伝票番号
            /// </summary>
            internal string PartySaleSlipNum
            {
                get { return this._partySaleSlipNum; }
                set { this._partySaleSlipNum = value; }
            }
        }

        /// <summary>
        /// 在庫キー情報
        /// </summary>
        private struct StockInfoKey
        {
            /// <summary>倉庫コード</summary>
            private string _warehouseCode;
            /// <summary>商品コード</summary>
            private string _goodsNo;
            /// <summary>メーカーコード</summary>
            private int _goodsMakerCd;
            /// <summary>
            /// 倉庫コード
            /// </summary>
            public string WarehouseCode
            {
                get { return _warehouseCode; }
                set { _warehouseCode = value; }
            }
            /// <summary>
            /// 商品コード
            /// </summary>
            public string GoodsNo
            {
                get { return _goodsNo; }
                set { _goodsNo = value; }
            }
            /// <summary>
            /// メーカーコード
            /// </summary>
            public int GoodsMakerCd
            {
                get { return _goodsMakerCd; }
                set { _goodsMakerCd = value; }
            }
            /// <summary>
            /// コンストラクタ
            /// </summary>
            /// <param name="warehouseCode">倉庫コード</param>
            /// <param name="goodsNo">商品コード</param>
            /// <param name="goodsMakerCd">メーカーコード</param>
            public StockInfoKey(string warehouseCode, string goodsNo, int goodsMakerCd)
            {
                _warehouseCode = warehouseCode;
                _goodsNo = goodsNo;
                _goodsMakerCd = goodsMakerCd;
            }
        }

        /// <summary>
        /// 商品自動登録データキー構造体
        /// </summary>
        public struct GoodsInfoKey
        {
            string _goodsNo;
            int _goodsMakerCd;

            /// <summary>
            /// 商品自動登録データキー構造体コンストラクタ
            /// </summary>
            /// <param name="goodsNo"></param>
            /// <param name="goodsMakeCd"></param>
            internal GoodsInfoKey(string goodsNo, int goodsMakeCd)
            {
                this._goodsNo = goodsNo;
                this._goodsMakerCd = goodsMakeCd;
            }

            /// <summary>品番プロパティ</summary>
            internal string GoodsNo
            {
                get { return this._goodsNo; }
                set { this._goodsNo = value; }
            }

            /// <summary>メーカープロパティ</summary>
            internal int GoodsMakerCd
            {
                get { return this._goodsMakerCd; }
                set { this._goodsMakerCd = value; }
            }
        }

        /// <summary>
        /// 伝票印刷情報データ構造体
        /// </summary>
        public struct SlipPrintInfoValue
        {
            int _acptAnOdrStatus;
            string _salesSlipNum;
            //zhouzy add 2011.09.15 add begin
            //普通帳票（リモート伝票以外）印刷用フラグ（0：印刷、1：印刷しない）
            int _nomalSalesSlipPrintFlag;
            //zhouzy add 2011.09.15 add end

            //zhouzy add 2011.09.15 add begin
            /// <summary>
            /// 伝票印刷情報データ構造体コンストラクタ
            /// </summary>
            /// <param name="acptAnOdrStatus"></param>
            /// <param name="salesSlipNum"></param>
            internal SlipPrintInfoValue(int acptAnOdrStatus, string salesSlipNum, int nomalPrintFlag)
            {
                this._acptAnOdrStatus = acptAnOdrStatus;
                this._salesSlipNum = salesSlipNum;
                this._nomalSalesSlipPrintFlag = nomalPrintFlag;
            }
            //zhouzy add 2011.09.15 add end

            /// <summary>受注ステータスプロパティ</summary>
            internal int AcptAnOdrStatus
            {
                get { return this._acptAnOdrStatus; }
                set { this._acptAnOdrStatus = value; }
            }

            /// <summary>伝票番号プロパティ</summary>
            internal string SalesSlipNum
            {
                get { return this._salesSlipNum; }
                set { this._salesSlipNum = value; }
            }

            //zhouzy add 2011.09.15 add begin
            /// <summary>普通帳票（リモート伝票以外）印刷用フラグプロパティ</summary>
            internal int NomalSalesSlipPrintFlag
            {
                get { return this._nomalSalesSlipPrintFlag; }
                set { this._nomalSalesSlipPrintFlag = value; }
            }
            //zhouzy add 2011.09.15 add end

        }

        /// <summary>
        /// 売仕入同時入力データキー構造体
        /// </summary>
        public struct StockSyncInfoKey
        {
            string _enterpriseCode;         // 企業コード
            Int32 _supplierFormalSync;      // 仕入形式
            Int32 _supplierSlipNo;          // 仕入伝票番号
            DateTime _updateDateTime;       // 更新日時
            Int32 _debitNoteDiv;            // 赤伝区分
            Int64 _stockSlipDtlNumSync;     // 仕入明細通番

            /// <summary>
            /// 売仕入同時入力データキー構造体コンストラクタ
            /// </summary>
            /// <param name="enterpriseCode"></param>
            /// <param name="supplierFormalSync"></param>
            /// <param name="supplierSlipNo"></param>
            /// <param name="updateDateTime"></param>
            /// <param name="debitNoteDiv"></param>
            /// <param name="stockSlipDtlNumSync"></param>
            internal StockSyncInfoKey(string enterpriseCode, Int32 supplierFormalSync, Int32 supplierSlipNo, DateTime updateDateTime, Int32 debitNoteDiv, Int64 stockSlipDtlNumSync)
            {
                this._enterpriseCode = enterpriseCode;
                this._supplierFormalSync = supplierFormalSync;
                this._supplierSlipNo = supplierSlipNo;
                this._updateDateTime = updateDateTime;
                this._debitNoteDiv = debitNoteDiv;
                this._stockSlipDtlNumSync = stockSlipDtlNumSync;
            }

            /// <summary>企業コードプロパティ</summary>
            internal string EnterpriseCode
            {
                get { return this._enterpriseCode; }
                set { this._enterpriseCode = value; }
            }
            /// <summary>仕入形式プロパティ</summary>
            internal Int32 SupplierFormalSync
            {
                get { return this._supplierFormalSync; }
                set { this._supplierFormalSync = value; }
            }
            /// <summary>仕入伝票番号プロパティ</summary>
            internal Int32 SupplierSlipNo
            {
                get { return this._supplierSlipNo; }
                set { this._supplierSlipNo = value; }
            }
            /// <summary>更新日時プロパティ</summary>
            internal DateTime UpdateDateTime
            {
                get { return this._updateDateTime; }
                set { this._updateDateTime = value; }
            }
            /// <summary>赤伝区分プロパティ</summary>
            internal Int32 DebitNoteDiv
            {
                get { return this._debitNoteDiv; }
                set { this._debitNoteDiv = value; }
            }
            /// <summary>仕入明細通番プロパティ</summary>
            internal Int64 StockSlipDtlNumSync
            {
                get { return this._stockSlipDtlNumSync; }
                set { this._stockSlipDtlNumSync = value; }
            }
        }
        # endregion

        // ===================================================================================== //
        // プロパティ
        // ===================================================================================== //
        # region Properties
        //---------- ADD 2011/07/20 ------------>>>>>
        // zhouzy add 20110919 begin
        /// <summary>
        /// 接続方式
        /// </summary>
        public int Commethod
        {
            get { return _commethod; }
            set { this._commethod = value; }
        }

        /// <summary>
        ///SCM送信フラグ 
        /// </summary>
        public bool ScmFlg
        {
            get { return this._scmFlg; }
            set { this._scmFlg = value; }
        }
        // zhouzy add 20110919 end
        /// <summary>
        /// 在庫情報存在フラグ
        /// </summary>
        public bool HasStockInfo
        {
            get { return _hasStockInfo; }
            set { _hasStockInfo = value; }
        }
        //---------- ADD 2011/07/20 ------------<<<<<
        // ADD 陳健 2014/01/23 for Redmine#41550のNo.1＆No.2------------------->>>>>
        /// <summary>
        /// 計上操作フラグ
        /// </summary>
        public bool AddUpOperationFlag
        {
            get { return _addUpOperationFlag; }
            set { _addUpOperationFlag = value; }
        }
        // ADD 陳健 2014/01/23 for Redmine#41550のNo.1＆No.2-------------------<<<<<
        // --- ADD 2011/11/12---------->>>>>
        /// <summary>
        /// ＤＢから取得した売上明細データオブジェクトを取得します。
        /// </summary>
        public List<SalesDetail> SalesDetailList
        {
            get { return _salesDetailDBDataList; }
        }
        // --- ADD 2011/11/12----------<<<<<

        /// <summary>売上明細データテーブルオブジェクトを取得します。</summary>
        public SalesInputDataSet.SalesDetailDataTable SalesDetailDataTable
        {
            get { return _salesDetailDataTable; }
        }

        /// <summary>売上明細データテーブルオブジェクト(保存)を取得します。</summary>
        public SalesInputDataSet.SalesDetailDataTable SalesDetailDataTableSave
        {
            get { return _salesDetailDataTableSave; }
        }

        /// <summary>受注明細データテーブルオブジェクトを取得します。</summary>
        public SalesInputDataSet.SalesDetailAcceptAnOrderDataTable AcptDetailDataTable
        {
            get { return _salesDetailAcceptAnOrderDataTable; }
        }

        /// <summary>受注明細データテーブルオブジェクト(保存)を取得します。</summary>
        public SalesInputDataSet.SalesDetailAcceptAnOrderDataTable AcptDetailDataTableSave
        {
            get { return _salesDetailAcceptAnOrderDataTableSave; }
        }

        /// <summary>前回売上明細データ行オブジェクトを取得、設定します。</summary>
        public SalesInputDataSet.SalesDetailRow CurrentSalesDetailRow
        {
            get { return this._currentSalesDetailRow; }
            set { this._currentSalesDetailRow = value; }
        }

        /// <summary>データ変更フラグの取得、設定を行います。（true:変更あり false:変更なし）</summary>
        public bool IsDataChanged
        {
            get
            {
                return this._isDataCanged;
            }
            set
            {
                this._isDataCanged = value;

                if (this.DataChanged != null)
                {
                    this.DataChanged(this, new EventArgs());
                }
            }
        }

        /// <summary>現在の売上データオブジェクトの取得を行います。</summary>
        public SalesSlip SalesSlip
        {
            get { return this._salesSlip; }
            set { this._salesSlip = value; } // ADD 2010/11/02
        }

        /// <summary>初期の売上データオブジェクトの取得を行います。</summary>
        public SalesSlip SalesSlipDBData
        {
            get { return this._salesSlipDBData; }
        }

        /// <summary>現在の入金データオブジェクトの取得を行います。</summary>
        public SearchDepsitMain DepsitMain
        {
            get { return this._depsitMain; }
        }

        /// <summary>現在の入金引当データオブジェクトの取得を行います。</summary>
        public SearchDepositAlw DepositAlw
        {
            get { return this._depositAlw; }
        }

        /// <summary>現在の受注データオブジェクトの取得を行います。</summary>
        public SalesSlip SalesSlipAcptAnOdr
        {
            get { return this._salesSlipAcptAnOdr; }
        }

        /// <summary>仕入情報データテーブルを取得します。</summary>
        public SalesInputDataSet.StockTempDataTable StockTempDataTable
        {
            get { return _stockTempDataTable; }
        }

        /// <summary>仕入データテーブル(読込用)を取得します。</summary>
        public SalesInputDataSet.StockSlipForReadDataTable StockSlipForReadDataTable
        {
            get { return _stockSlipForReadDataTable; }
        }

        /// <summary>仕入明細データテーブル(読込用)を取得します。</summary>
        public SalesInputDataSet.StockDetailForReadDataTable StockDetailForReadDataTable
        {
            get { return _stockDetailForReadDataTable; }
        }

        /// <summary>現在の支払データオブジェクトの取得を行います。</summary>
        public SalesInputDataSet.PaymentSlpDataTable PaymentSlpDataTable
        {
            get { return this._paymentSlpDataTable; }
        }

        /// <summary>UOE発注データテーブルを取得します。</summary>
        public SalesInputDataSet.UOEOrderDtlDataTable UOEOrderDtlDataTable
        {
            get { return this._uoeOrderDtlDataTable; }
        }

        /// <summary>得意先注番明細展開</summary>
        public int PartySaleSlipDiv
        {
            set { this._partySaleSlipDiv = value; }
            get { return this._partySaleSlipDiv; }
        }

        /// <summary>仕入伝票削除区分</summary>
        public int SupplierSlipDelDiv
        {
            set { this._supplierSlipDelDiv = value; }
            get { return this._supplierSlipDelDiv; }
        }

        /// <summary>車両情報データテーブル</summary>
        public SalesInputDataSet.CarInfoDataTable CarInfoDataTable
        {
            set { this._carInfoDataTable = value; }
            get { return this._carInfoDataTable; }
        }

        /// <summary>車両情報データテーブル</summary>
        public Guid BeforeCarRelationGuid
        {
            set { this._beforeCarRelationGuid = value; }
            get { return this._beforeCarRelationGuid; }
        }

        /// <summary>部品検索モード</summary>
        public SalesSlipInputAcs.SearchPartsMode SearchPartsModeProperty
        {
            // -- UPD 2010/05/25 ----------------->>>
            //set { this._searchPartsMode = value; }
            set
            {
                if (LoginInfoAcquisition.OnlineFlag)
                {
                    this._searchPartsMode = value;
                }
                else
                {
                    //オフラインモードは強制的に品番入力とする
                    this._searchPartsMode = SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch;
                }
            }
            // -- UPD 2010/05/25 -----------------<<<
            get { return this._searchPartsMode; }
        }

        /// <summary>車両検索モード</summary>
        public SalesSlipInputAcs.SearchCarMode SearchCarModeProperty
        {
            set { this._searchCarMode = value; }
            get { return this._searchCarMode; }
        }

        /// <summary>車両検索区分(true:検索する,false:検索しない)</summary>
        public bool SearchCarDiv
        {
            set { this._searchCarDiv = value; }
            get { return this._searchCarDiv; }
        }

        /// <summary>操作権限の制御オブジェクト</summary>
        public IOperationAuthority MyOpeCtrl
        {
            set { this._operationAuthority = value; }
            get { return this._operationAuthority; }
        }

        /// <summary>原価表示制御区分</summary>
        public bool CostDisplay
        {
            set { this._costDisplay = value; }
            get { return _costDisplay; }
        }

        /// <summary>オーナーフォーム</summary>
        public IWin32Window Owner
        {
            set { this._owner = value; }
            get { return this._owner; }
        }

        /// <summary>画面表示用受注マスタ(車両)退避変数</summary>
        public AcceptOdrCar SvAcceptOdrCar
        {
            set { this._svAcceptOdrCar = value; }
            get { return this._svAcceptOdrCar; }
        }

        // --- ADD 2009/11/24 ---------->>>>>
        /// <summary>伝票印刷変数</summary>
        public bool PrintSlipFlag
        {
            set { this._printSlipFlag = value; }
            get { return _printSlipFlag; }
        }
        // --- ADD 2009/11/24 ----------<<<<<
        // --- ADD 2010/05/04 ---------->>>>>
        public bool ReadSlipFlg
        {
            set { this._readSlipFlg = value; }
            get { return this._readSlipFlg; }
        }
        // --- ADD 2010/05/04 ----------<<<<<

        //>>>2010/04/08
        /// <summary>売上伝票番号</summary>
        public string CurrentSalesSlipNum
        {
            set { this._currentSalesSlipNum = value; }
            get { return _currentSalesSlipNum; }
        }
        //<<<2010/04/08

        // 2010/06/12 Add >>>
        /// <summary>
        /// QRコード生成用伝票情報（直近に保存された売上データの情報が入ります）
        /// </summary>
        /// <remarks>
        /// 保存後のタイミング以外は参照不可
        /// </remarks>
        public SalesQRSendCtrlCndtn JustBeforeSavedQRMakeCndtn
        {
            get { return this._qrMakeCndtn; }
        }
        // 2010/06/12 Add <<<


        // --- ADD 2010/06/21 ---------->>>>>
        /// <summary>担当者オブジェクトを取得します。</summary>
        public bool EmployeeFlag
        {
            set { this._employeeFlag = value; }
            get { return _employeeFlag; }
        }
        // --- ADD 2010/06/21 ----------<<<<<

        //>>>2011/02/01
        /// <summary>SCM受注明細データ(問合せ・発注)</summary>
        public IList<ISCMOrderDetailRecord> SCMDetailIAllList
        {
            set { this._scmDetailIAllList = value; }
            get { return this._scmDetailIAllList; }
        }

        /// <summary>CMT接続フラグ</summary>
        public bool CmtFlg
        {
            set { this._cmtFlg = value; }
            get { return this._cmtFlg; }
        }
        //<<<2011/02/01

        //>>>2011/05/25
        /// <summary>PM指示書番号取扱区分</summary>
        public int PMInstNoHdlDivCd
        {
            set { this._pmInstNoHdlDivCd = value; }
            get { return this._pmInstNoHdlDivCd; }
        }
        //<<<2011/05/25

        // ----- ADD K2011/08/12 --------------------------->>>>>
        /// <summary>当日以前の伝票修正可否区分（true：可、false：不可）</summary>
        public bool SalesSlipCanEditDivCd
        {
            set { this._salesSlipCanEditDivCd = value; }
            get { return this._salesSlipCanEditDivCd; }
        }
        // ----- ADD K2011/08/12 ---------------------------<<<<<

        // ADD 2012/10/17 湯上 SCM障害対応 №10414------------------------>>>>>
        /// <summary>SCM送信処理用売上伝票番号リスト</summary>
        public List<string> SalesSlipNumList
        {
            set { this._salesSlipNumList = value; }
            get { return this._salesSlipNumList; }
        }
        // ADD 2012/10/17 湯上 SCM障害対応 №10414------------------------<<<<<

        // --- ADD K2014/01/14 Y.Wakita ---------->>>>>
        public ArrayList ExtrData
        {
            get { return this._extrData; }
            set { this._extrData = value; }
        }
        // --- ADD K2014/01/14 Y.Wakita ----------<<<<<

        //----- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応------->>>>>
        private int PDFPrintStatus = 0;
        public int PDFPrinterStatus_EXT
        {
            get { return PDFPrintStatus; }
        }
        //----- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応-------<<<<<
        # endregion

        // ===================================================================================== //
        // DBデータアクセス処理
        // ===================================================================================== //
        # region DataBase Access Methods
        #region ●売上データ保存
        /// <summary>
        /// 売上データの保存を行います。
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="retMessage"></param>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        /// <param name="stockSyncInfoKeyList"></param>
        /// <returns></returns>
        //>>>2010/02/26
        //public int SaveDBData(string enterpriseCode, string salesSlipNum, out string retMessage, ArrayList salesDataList, ArrayList acptDataList, List<StockSyncInfoKey> stockSyncInfoKeyList)
        public int SaveDBData(string enterpriseCode, string salesSlipNum, out string retMessage, ArrayList salesDataList, ArrayList acptDataList, List<StockSyncInfoKey> stockSyncInfoKeyList, bool scmFlg, bool isMakeQR)
        //<<<2010/02/26
        {
            this._isMakeQRFlg = isMakeQR;    // ADD 2010/07/12

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "GetCurrentStockInfo", "●仕入情報取得　開始");
            #region ●仕入情報取得
            ArrayList stockSlipInfoList = null;
            ArrayList deleteStockSlipInfoList = null;
            if ((this._salesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) &&
                (this._salesSlip.SalesGoodsCd == (int)SalesSlipInputAcs.SalesGoodsCd.Goods))
            {
                ArrayList dataList = new ArrayList();
                dataList = acptDataList;

                this.GetCurrentStockInfo(out stockSlipInfoList, out deleteStockSlipInfoList, stockSyncInfoKeyList, dataList);
            }
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "GetCurrentStockInfo", "○仕入情報取得　終了");

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "GetCurrentCarManagementWorkList", "●車輌情報取得　開始");
            #region ●車両情報取得
            ArrayList carManagementWorkList = null;
            if (this._salesSlip.SalesGoodsCd == (int)SalesSlipInputAcs.SalesGoodsCd.Goods) this.GetCurrentCarManagementWorkList(out carManagementWorkList);
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "GetCurrentCarManagementWorkList", "○車輌情報取得　終了");

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "GetCurrentCarManagementWorkList", "●発注情報取得　開始");
            #region ●発注情報取得
            ArrayList uoeOrderDataList = null;
            if ((this._salesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) &&
                (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.Sales) &&
                (this._salesSlip.SalesGoodsCd == (int)SalesSlipInputAcs.SalesGoodsCd.Goods))
            {
                this.GetCurrentUOEOrderDtlWorkList(acptDataList, out uoeOrderDataList);
            }
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "GetCurrentCarManagementWorkList", "○発注情報取得　終了");

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "●データ保存処理　開始");
            #region ●データ保存処理
            //>>>2010/02/26
            //int st = this.SaveDBData(salesDataList,
            //                         acptDataList,
            //                         stockSlipInfoList,
            //                         carManagementWorkList,
            //                         uoeOrderDataList,
            //                         deleteStockSlipInfoList,
            //                         out retMessage);
            int st = this.SaveDBData(salesDataList,
                                     acptDataList,
                                     stockSlipInfoList,
                                     carManagementWorkList,
                                     uoeOrderDataList,
                                     deleteStockSlipInfoList,
                                     scmFlg,
                                     out retMessage);
            //<<<2010/02/26
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "○データ保存処理　終了");

            return st;

        }

        /// <summary>
        /// 売上データの保存を行います
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        /// <param name="stockSlipInfoList"></param>
        /// <param name="carManagementWorkList"></param>
        /// <param name="uoeOrderDataList"></param>
        /// <param name="deleteStockSlipInfoList"></param>
        /// <param name="retMessage"></param>
        /// <returns></returns>
        /// <br>Update Note: 2011/02/11 曹文傑</br>
        /// <br>                        伝票内容が差し替わってしまう件の対応</br>
        /// <br>Update Note: 2011/03/07 曹文傑</br>
        /// <br>                        Redmine #19637の対応</br>
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        /// <br>Update Note: 2012/01/12 鄧潘ハン</br>
        /// <br>管理番号   : 10707327-00 2012/01/18配信分</br>
        /// <br>             Redmine#27954 PMSF連携／PCCforNS BLﾊﾟｰﾂｵｰﾀﾞｰ 障害対応の修正</br>
        /// <br>Update Note: 2012/02/08 李占川</br>
        /// <br>管理番号   : 10707327-00 2012/03/28配信分</br>
        /// <br>             Redmine#28281 伝発発注した場合の受注データ作成時は受注伝票の印刷を行わないように修正する</br>
        /// <br>Update Note: 2014/01/23 陳健</br>
        /// <br>管理番号   : 10904597-00</br>
        /// <br>             Redmine#41771 売上伝票入力消費税8%増税対応。</br>
        /// <br>Update Note: 2014/08/05 田建委</br>
        /// <br>管理番号   : 11070148-00　仕掛 №10667　RedMine#43049の対応</br>
        /// <br>           : 受注データが消えない対応</br>
        /// <br>Update Note: 2015/08/22 黄興貴</br>
        /// <br>管理番号   : 11170129-00 №836 Redmine#47045 保存時のエラー処理がないの障害対応</br>
        /// <br>Update Note: 2015/09/08 黄興貴</br>
        /// <br>管理番号   : 11170129-00 №836 Redmine#47045 連絡した後のソース指摘対応</br>
        /// <br>Update Note: 2020/09/01 陳艶丹</br>
        /// <br>管理番号   : 11600006-00</br>
        /// <br>           : PMKOBETSU-4076得意先伝票番号不具合対応</br>
        /// <br>Update Note: 2020/11/20 陳艶丹</br>
        /// <br>管理番号    : 11670305-00</br>
        /// <br>           : PMKOBETSU-4097 TSPインライン機能追加対応</br>
        /// <br>Update Note: 2020/12/21 呉元嘯</br>
        /// <br>管理番号   : 11670305-00</br>
        /// <br>           : PMKOBETSU-4097 TSPインライン機能追加対応</br>
        /// <br>Update Note: 2022/04/26 陳艶丹</br>
        /// <br>管理番号   : 11870080-00</br>
        /// <br>           : PMKOBETSU-4208 電子帳簿対応</br> 
        //>>>2010/02/26
        //private int SaveDBData(ArrayList salesDataList, ArrayList acptDataList, ArrayList stockSlipInfoList, ArrayList carManagementWorkList, ArrayList uoeOrderDataList, ArrayList deleteStockSlipInfoList, out string retMessage)
        private int SaveDBData(ArrayList salesDataList, ArrayList acptDataList, ArrayList stockSlipInfoList, ArrayList carManagementWorkList, ArrayList uoeOrderDataList, ArrayList deleteStockSlipInfoList, bool scmFlg, out string retMessage)
        //<<<2010/02/26
        {
            //------------------------------------------------------------------------------------
            // データセット方法
            //------------------------------------------------------------------------------------
            //  CustomSerializeArrayList            統合リスト
            //      --CustomSerializeArrayList      売上リスト
            //          --SalesSlipWork             売上データオブジェクト
            //          --ArrayList                 売上明細リスト
            //              --SalesDetailWork       売上明細データオブジェクト
            //          --DepsitMainWork            入金データオブジェクト
            //          --DepositAlwWork            入金引当データオブジェクト
            //          --CarManagementWork         車両管理データオブジェクト
            //      --CustomSerializeArrayList      受注リスト
            //          --SalesSlipWork             受注データオブジェクト
            //          --ArrayList                 受注明細リスト
            //              --SalesDetailWork       受注明細データオブジェクト
            //          --CarManagementWork         車両管理データオブジェクト
            //      --CustomSerializeArrayList      仕入リスト
            //          --StockSlipWork             仕入データオブジェクト
            //          --ArrayList                 仕入明細リスト
            //              --StockDetailWork       仕入明細データオブジェクト
            //          --PaymentSlpWork            支払データオブジェクト
            //      --CustomSerializeArrayList      発注リスト
            //          --StockSlipWork             発注データオブジェクト(※リモート参照用。実データは作成されません。)
            //          --ArrayList                 発注明細リスト
            //              --StockDetailWork       発注明細データオブジェクト
            //------------------------------------------------------------------------------------

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●保存前初期処理　開始");
            #region ●初期処理
            Dictionary<OutPutLogKey, int> rowNoDic = new Dictionary<OutPutLogKey, int>();// ログ出力対象情報
            CustomSerializeArrayList paraList = new CustomSerializeArrayList();         // 統合リスト
            CustomSerializeArrayList originDataList = new CustomSerializeArrayList();   // 元黒データ格納用リスト
            List<string> salesSlipNumBeforeSaveList = new List<string>();               // 保存前伝票番号リスト(伝票印刷の再発行区分出力判断で使用)
            List<string> acptSlipNumBeforeSaveList = new List<string>();                // 保存前伝票番号リスト(伝票印刷の再発行区分出力判断で使用)
            int debitNoteDiv = 0;                                                       // 赤伝区分(0:黒伝 1:赤伝 2:元黒)
            bool originSalesSlipDiv = true;// 取得した元黒の売上データ区分『true:ＰＣＣ－ＵＯＥ,false:PM.NS』// Add 2012/01/16 duzg for Redmine#28011
            int acceptOrOrderKind = 0;  // ADD 2013/06/18 Y.Wakita
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○保存前初期処理　終了");

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●セキュリティログ出力対象情報取得　開始");
            #region ●ログ出力対象情報取得
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽赤伝発行情報取得開始");
            this.GetRedSlipInfo(salesDataList, ref rowNoDic);                           // 赤伝発行
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽伝票修正情報取得開始");
            this.GetSlipRevisionInfo(salesDataList, acptDataList, ref rowNoDic);        // 伝票修正
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽単価修正情報取得開始");
            this.GetUnitPriceChangeInfo(salesDataList, acptDataList, ref rowNoDic);     // 単価修正
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽原単価修正情報取得開始");
            this.GetUnitCostChangeInfo(salesDataList, acptDataList, ref rowNoDic);      // 原単価修正
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽数量修正情報取得開始");
            this.GetCountChangeInfo(salesDataList, acptDataList, ref rowNoDic);         // 数量修正
            // ADD 2013/03/27 T.Miyamoto ------------------------------>>>>>
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽BLコード情報取得開始");
            this.GetBLCodeInfo(salesDataList, acptDataList, ref rowNoDic);              // BL情報再設定
            // ADD 2013/03/27 T.Miyamoto ------------------------------<<<<<
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○セキュリティログ出力対象情報取得　終了");

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●売上情報設定　開始");
            #region ●売上情報
            //------------------------------------------------------
            // 売上情報
            //------------------------------------------------------
            // zhouzy add 20110919 begin
            //SFから問合せるかフラグ
            //bool isSFaskFlg = false; // DEL 2011/09/29
            bool isSFaskFlg = false;  // ADD 2011/11/12
            // zhouzy add 20110919 end
            foreach (CustomSerializeArrayList list in salesDataList)
            {
                #region 元データ用変数
                SalesSlip sourceSalesSlip = new SalesSlip();
                List<SalesDetail> sourceSalesDetailList = new List<SalesDetail>();
                SearchDepsitMain sourceDepsitMain = null;
                SearchDepositAlw sourceDepositAlw = null;
                List<SlipDetailAddInfoWork> sourceSlipDetailAddInfoWorkList = new List<SlipDetailAddInfoWork>();
                //>>>2010/02/26
                SCMAcOdrDataWork sourceSCMAcOdrDataWork = null;
                SCMAcOdrDtCarWork sourceSCMAcOdrDtCarWork = null;
                ArrayList sourceSCMAcOdrDtlIqWorkList = null;
                ArrayList sourceSCMAcOdrDtlAsWorkList = null;
                //<<<2010/02/26
                #endregion

                #region データ格納用変数
                CustomSerializeArrayList salesSlipDataList = new CustomSerializeArrayList();    // データ格納用リスト
                ArrayList salesDetailArrayList = new ArrayList();                               // 明細データ格納用リスト
                ArrayList carManagementWorkListForSave = new ArrayList();                      // 車両情報構成情報リスト
                ArrayList slipDetailAddInfoWorkList = new ArrayList();                          // 伝票明細追加情報リスト
                #endregion

                #region 元データ分解
                //------------------------------------------------------
                // 元データ分解
                //------------------------------------------------------
                foreach (object obj in list)
                {
                    if (obj is SalesSlip)
                    {
                        sourceSalesSlip = (SalesSlip)obj;
                        salesSlipNumBeforeSaveList.Add(sourceSalesSlip.SalesSlipNum);
                    }
                    else if (obj is List<SalesDetail>)
                    {
                        sourceSalesDetailList = (List<SalesDetail>)obj;
                    }
                    else if (obj is SearchDepsitMain)
                    {
                        sourceDepsitMain = (SearchDepsitMain)obj;
                    }
                    else if (obj is SearchDepositAlw)
                    {
                        sourceDepositAlw = (SearchDepositAlw)obj;
                    }
                    else if (obj is List<SlipDetailAddInfoWork>)
                    {
                        sourceSlipDetailAddInfoWorkList = (List<SlipDetailAddInfoWork>)obj;
                    }
                    //>>>2010/02/26
                    else if (obj is SCMAcOdrDataWork)
                    {
                        sourceSCMAcOdrDataWork = (SCMAcOdrDataWork)obj;
                    }
                    else if (obj is SCMAcOdrDtCarWork)
                    {
                        sourceSCMAcOdrDtCarWork = (SCMAcOdrDtCarWork)obj;
                    }
                    else if (obj is ArrayList)
                    {
                        ArrayList al = (ArrayList)obj;
                        if (al[0] is SCMAcOdrDtlIqWork)
                        {
                            sourceSCMAcOdrDtlIqWorkList = (ArrayList)obj;
                        }
                        else if (al[0] is SCMAcOdrDtlAsWork)
                        {
                            sourceSCMAcOdrDtlAsWorkList = (ArrayList)obj;
                        }
                    }
                    //<<<2010/02/26
                }
                #endregion

                // 赤伝区分取得
                debitNoteDiv = sourceSalesSlip.DebitNoteDiv;

                if (sourceSalesDetailList.Count != 0)
                {
                    // zhouzy add 20110919 begin
                    _commethod = GetCommethod(sourceSalesSlip);
                    // zhouzy add 20110919 end

                    acceptOrOrderKind = 0;  // ADD 2013/06/18 Y.Wakita

                    #region 売上データ内容補正
                    //------------------------------------------------------
                    // 売上データ内容補正
                    //------------------------------------------------------

                    // --- ADD m.suzuki 2010/02/09 ---------->>>>>
                    // 得意先取得
                    CustomerInfo customer;
                    int custStatus = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, sourceSalesSlip.EnterpriseCode, sourceSalesSlip.CustomerCode, true, false, out customer);
                    if (custStatus != (int)ConstantManagement.DB_Status.ctDB_NORMAL) customer = new CustomerInfo();
                    // --- ADD m.suzuki 2010/02/09 ----------<<<<<

                    sourceSalesSlip.EnterpriseCode = this._enterpriseCode;
                    sourceSalesSlip.SectionCode = LoginInfoAcquisition.Employee.BelongSectionCode;
                    sourceSalesSlip.DetailRowCount = sourceSalesDetailList.Count;
                    switch ((SalesSlipInputAcs.AcptAnOdrStatusState)sourceSalesSlip.AcptAnOdrStatusDisplay)
                    {
                        case AcptAnOdrStatusState.Estimate:
                            sourceSalesSlip.AddUpADate = DateTime.MinValue;
                            sourceSalesSlip.DelayPaymentDiv = 0;
                            sourceSalesSlip.EstimateDivide = (int)SalesSlipInputAcs.EstimateDivide.Estimate;
                            // --- UPD m.suzuki 2010/02/09 ---------->>>>>
                            //sourceSalesSlip.SlipPrintDivCd = this._salesSlipInputInitDataAcs.GetEstimateDefSet().EstimatePrtDiv + 1 % 2;
                            switch (customer.EstimatePrtDiv)
                            {
                                // 0:標準 ← 見積全体設定
                                default:
                                case 0:
                                    sourceSalesSlip.SlipPrintDivCd = this._salesSlipInputInitDataAcs.GetEstimateDefSet().EstimatePrtDiv + 1 % 2;
                                    break;
                                // 1:未使用 ← 0:しない
                                case 1:
                                    sourceSalesSlip.SlipPrintDivCd = 0;
                                    break;
                                // 2:使用 ← 1:する
                                case 2:
                                    sourceSalesSlip.SlipPrintDivCd = 1;
                                    break;
                            }
                            // --- UPD m.suzuki 2010/02/09 ----------<<<<<
                            break;
                        case AcptAnOdrStatusState.UnitPriceEstimate:
                            sourceSalesSlip.AddUpADate = DateTime.MinValue;
                            sourceSalesSlip.DelayPaymentDiv = 0;
                            sourceSalesSlip.EstimateDivide = (int)SalesSlipInputAcs.EstimateDivide.UnitPriceEstimate;
                            // --- UPD m.suzuki 2010/02/09 ---------->>>>>
                            //sourceSalesSlip.SlipPrintDivCd = this._salesSlipInputInitDataAcs.GetEstimateDefSet().EstimatePrtDiv + 1 % 2;
                            switch (customer.EstimatePrtDiv)
                            {
                                // 0:標準 ← 見積全体設定
                                default:
                                case 0:
                                    sourceSalesSlip.SlipPrintDivCd = this._salesSlipInputInitDataAcs.GetEstimateDefSet().EstimatePrtDiv + 1 % 2;
                                    break;
                                // 1:未使用 ← 0:しない
                                case 1:
                                    sourceSalesSlip.SlipPrintDivCd = 0;
                                    break;
                                // 2:使用 ← 1:する
                                case 2:
                                    sourceSalesSlip.SlipPrintDivCd = 1;
                                    break;
                            }
                            // --- UPD m.suzuki 2010/02/09 ----------<<<<<
                            break;
                        case AcptAnOdrStatusState.AcceptAnOrder:
                            sourceSalesSlip.AddUpADate = DateTime.MinValue;
                            sourceSalesSlip.DelayPaymentDiv = 0;
                            sourceSalesSlip.EstimateDivide = (int)SalesSlipInputAcs.EstimateDivide.None;
                            // --- UPD m.suzuki 2010/02/09 ---------->>>>>
                            //sourceSalesSlip.SlipPrintDivCd = this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt().AcpOdrrSlipPrtDiv;
                            switch (customer.AcpOdrrSlipPrtDiv)
                            {
                                // 0:標準 ← 受注全体設定
                                default:
                                case 0:
                                    sourceSalesSlip.SlipPrintDivCd = this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt().AcpOdrrSlipPrtDiv;
                                    break;
                                // 1:未使用 ← 0:しない
                                case 1:
                                    sourceSalesSlip.SlipPrintDivCd = 0;
                                    break;
                                // 2:使用 ← 1:する
                                case 2:
                                    sourceSalesSlip.SlipPrintDivCd = 1;
                                    break;
                            }
                            // --- UPD m.suzuki 2010/02/09 ----------<<<<<
                            break;
                        case AcptAnOdrStatusState.Sales:
                            sourceSalesSlip.ShipmentDay = sourceSalesSlip.SalesDate;
                            sourceSalesSlip.EstimateDivide = (int)SalesSlipInputAcs.EstimateDivide.None;
                            // --- UPD m.suzuki 2010/02/09 ---------->>>>>
                            //sourceSalesSlip.SlipPrintDivCd = this._salesSlipInputInitDataAcs.GetSalesTtlSt().SalesSlipPrtDiv + 1 % 2;
                            switch (customer.SalesSlipPrtDiv)
                            {
                                // 0:標準 ← 売上全体設定
                                default:
                                case 0:
                                    sourceSalesSlip.SlipPrintDivCd = this._salesSlipInputInitDataAcs.GetSalesTtlSt().SalesSlipPrtDiv + 1 % 2;
                                    break;
                                // 1:未使用 ← 0:しない
                                case 1:
                                    sourceSalesSlip.SlipPrintDivCd = 0;
                                    break;
                                // 2:使用 ← 1:する
                                case 2:
                                    sourceSalesSlip.SlipPrintDivCd = 1;
                                    break;
                            }
                            // --- UPD m.suzuki 2010/02/09 ----------<<<<<
                            break;
                        case AcptAnOdrStatusState.Shipment:
                            sourceSalesSlip.ShipmentDay = sourceSalesSlip.SalesDate;
                            sourceSalesSlip.SalesDate = DateTime.MinValue;
                            sourceSalesSlip.AddUpADate = DateTime.MinValue;
                            sourceSalesSlip.DelayPaymentDiv = 0;
                            sourceSalesSlip.EstimateDivide = (int)SalesSlipInputAcs.EstimateDivide.None;
                            // --- UPD m.suzuki 2010/02/09 ---------->>>>>
                            //sourceSalesSlip.SlipPrintDivCd = this._salesSlipInputInitDataAcs.GetSalesTtlSt().ShipmSlipPrtDiv + 1 % 2;
                            switch (customer.ShipmSlipPrtDiv)
                            {
                                // 0:標準 ← 売上全体設定
                                default:
                                case 0:
                                    sourceSalesSlip.SlipPrintDivCd = this._salesSlipInputInitDataAcs.GetSalesTtlSt().ShipmSlipPrtDiv + 1 % 2;
                                    break;
                                // 1:未使用 ← 0:しない
                                case 1:
                                    sourceSalesSlip.SlipPrintDivCd = 0;
                                    break;
                                // 2:使用 ← 1:する
                                case 2:
                                    sourceSalesSlip.SlipPrintDivCd = 1;
                                    break;
                            }
                            // --- UPD m.suzuki 2010/02/09 ----------<<<<<
                            break;
                        default:
                            break;
                    }
                    sourceSalesSlip.SlipPrtSetPaperId = this.GetSlipPrtSetPaperId(sourceSalesSlip); // 伝票印刷設定用帳票ＩＤ
                    sourceSalesSlip.SlipPrintFinishCd = sourceSalesSlip.SlipPrintDivCd; // 伝票発行済区分
                    sourceSalesSlip.SalesSlipPrintDate = (sourceSalesSlip.SlipPrintDivCd == (int)SlipPrintDivCd.Print) ? DateTime.Today : DateTime.MinValue; // 売上伝票発行日
                    if (sourceSalesSlip.SalesSlipNum != ctDefaultSalesSlipNum) sourceSalesSlip.SalesSlipUpdateCd = 1; // 売上伝票更新区分(0:未更新 1:更新あり)

                    // --- ADD 陳健 2014/01/23 Redmine#41771 No.5------------ >>>>>>
                    // sourceSalesSlip.SalesSlipCd が 1:返品の場合、sourceSalesSlip.DebitNoteDiv が 1:赤伝の場合、
                    if ((sourceSalesSlip.DebitNoteDiv == 1  // 赤伝
                    || (sourceSalesSlip.SalesSlipCd == 1 // 返品
                        && ((this._salesDetailDataTable[0].AcptAnOdrStatusSrc == 30 || this._salesDetailDataTable[0].AcptAnOdrStatusSrc == 40)　// 30：返品-売上　40：返品-貸出 
                            && this._salesDetailDataTable[0].SalesSlipDtlNumSrc != 0))))
                    {
                        // 消費税転嫁方式編集判断メソッドの返値がtrueの場合、
                        if (CheckConsTaxLayMethod(sourceSalesSlip))
                        {
                            // 売上データ(SalesSlipRf).消費税転嫁方式(ConsTaxLayMethodRF)＝０：伝票単位
                            sourceSalesSlip.ConsTaxLayMethod = 0;
                        }
                    }
                    // --- ADD 陳健 2014/01/23 Redmine#41771 No.5------------ <<<<<<
                    #endregion

                    #region 売上明細データ内容補正
                    //------------------------------------------------------
                    // 売上明細データ内容補正
                    //------------------------------------------------------
                    foreach (SalesDetail salesDetail in sourceSalesDetailList)
                    {
                        salesDetail.EnterpriseCode = this._enterpriseCode;              // 企業コード
                        salesDetail.SectionCode = sourceSalesSlip.SectionCode;          // 拠点コード
                        salesDetail.AcptAnOdrStatus = sourceSalesSlip.AcptAnOdrStatus;  // 受注ステータス
                        salesDetail.SalesSlipNum = sourceSalesSlip.SalesSlipNum;        // 売上伝票番号
                        salesDetail.SalesDate = sourceSalesSlip.SalesDate;              // 売上日付
                        salesDetail.DeliGdsCmpltDueDate = DateTime.MinValue;            // 納品完了予定日
                        salesDetail.AutoAnswerDivSCM = sourceSalesSlip.AutoAnswerDivSCM;// 自動回答区分// add 2011/07/18 朱宝軍
                        // ---------------------- ADD START 2011/08/23  ----------------->>>>>
                        if (_scmHeaderIListSvForWebCheck != null && _scmHeaderIListSvForWebCheck.Count > 0)
                            salesDetail.AcceptOrOrderKind = _scmHeaderIListSvForWebCheck[0].AcceptOrOrderKind;
                        
                        // ADD 2014/09/18 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応 --------------------------------->>>>>
                        // 受注計上でSCM受注データ存在時、受発注種別はSCM受注データの受発注種別を設定する
                        if (this._acceptAnOrderAddupFlag && this._acptSCMHeader != null)
                        {
                            salesDetail.AcceptOrOrderKind = this._acptSCMHeader.AcceptOrOrderKind;
                        }
                        // ADD 2014/09/18 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応 ---------------------------------<<<<<

                        acceptOrOrderKind = salesDetail.AcceptOrOrderKind;  // ADD 2013/06/18 Y.Wakita

                        salesDetail.InquiryNumber = sourceSalesSlip.InquiryNumber;
                        // ----- DEL 2011/09/29 ----- >>>>>
                        //// zhouzy add 20110919 begin
                        //if (salesDetail.InquiryNumber == 0)
                        //{
                        //    //問合せ番号はゼロの場合はPMで直接売上を作成する
                        //    isSFaskFlg = false;
                        //}
                        //else
                        //{
                        //    //問合せ番号はゼロの場合はSFから問合せをする
                        //    isSFaskFlg = true;
                        //}
                        //// zhouzy add 20110919 end
                        // ----- DEL 2011/09/29 ----- <<<<<

                        // ----- ADD 2011/11/12 ----- >>>>>
                        // UPD 2014/09/18 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応 --------------------------------->>>>>
                        //if (_scmHeaderIListSvForWebCheck != null && _scmHeaderIListSvForWebCheck.Count > 0 && _scmHeaderIListSvForWebCheck[0].InqOrdDivCd != 0)
                        if ((_scmHeaderIListSvForWebCheck != null && _scmHeaderIListSvForWebCheck.Count > 0 && _scmHeaderIListSvForWebCheck[0].InqOrdDivCd != 0) ||
                            this.AcceptAnOrderAddupFlag)
                        // UPD 2014/09/18 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応 ---------------------------------<<<<<
                        {
                            //問合せ番号はゼロの場合はPMで直接売上を作成する
                            isSFaskFlg = true;
                        }
                        else
                        {
                            //問合せ番号はゼロの場合はSFから問合せをする
                            // --- UPD 2012/09/20 三戸 №35の戻し --------->>>>>>>>>>>>>>>>>>>>>>>>
                            //// UPD 2012/08/22 2012/09/12配信システムテスト障害№12 --------------->>>>>
                            ////isSFaskFlg = false;
                            //// 返品回答時はＳＦからの問合せありと見なす
                            //if (sourceSalesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods)
                            //{
                            //    isSFaskFlg = true;
                            //    // ADD 2012/08/23 2012/09/12配信システムテスト障害№14対応 --------------->>>>>
                            //    if (this._salesDetailDataTable != null && this._salesDetailDataTable.Count > 0)
                            //    {
                            //        salesDetail.AcceptOrOrderKind = (short)this._salesDetailDataTable[0].AcceptOrOrderKind;
                            //        // UPD 2012/08/29 2012/09/12配信システムテスト障害№22対応 --------------->>>>>
                            //        //sourceSCMAcOdrDataWork.AcceptOrOrderKind = (short)this._salesDetailDataTable[0].AcceptOrOrderKind;
                            //        if (sourceSCMAcOdrDataWork != null)
                            //        {
                            //            sourceSCMAcOdrDataWork.AcceptOrOrderKind = (short)this._salesDetailDataTable[0].AcceptOrOrderKind;
                            //        }
                            //        // UPD 2012/08/29 2012/09/12配信システムテスト障害№22対応 ---------------<<<<<
                            //    }
                            //    // ADD 2012/08/23 2012/09/12配信システムテスト障害№14対応 ---------------<<<<<
                            //}
                            //else
                            //{
                            //    isSFaskFlg = false;
                            //}
                            //// UPD 2012/08/22 2012/09/12配信システムテスト障害№12 ---------------<<<<<
                            isSFaskFlg = false;
                            // --- UPD 2012/09/20 三戸 №35の戻し ---------<<<<<<<<<<<<<<<<<<<<<<<<
                        }
                        // ----- ADD 2011/11/12 ----- <<<<<

                        // ---------------------- ADD END   2011/08/23  -----------------<<<<<
                        // 売上在庫取寄せ区分
                        if (!string.IsNullOrEmpty(salesDetail.WarehouseCode))
                            salesDetail.SalesOrderDivCd = (int)SalesOrderDivCd.Stock;
                        else
                            salesDetail.SalesOrderDivCd = (int)SalesOrderDivCd.NonStock;

                        if (salesDetail.SalesSlipDtlNum == 0) salesDetail.AcceptAnOrderCnt = salesDetail.ShipmentCnt;

                        // --- UPD 2009/10/19 ---------->>>>>
                        if (salesDetail.SelectedGoodsNoDiv == 0)
                        {

                            // 2009/12/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                            //if (sourceSalesSlip.SalesSlipNum != ctDefaultSalesSlipNum
                            //    || salesDetail.SalesSlipDtlNumSrc != 0 || sourceSalesSlip.DebitNoteDiv == 1)
                            if (salesDetail.SalesSlipDtlNum != 0 ||
                                salesDetail.SalesSlipDtlNumSrc != 0 ||
                                sourceSalesSlip.DebitNoteDiv == 1)
                            // 2009/12/17 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                            {
                                //
                            }
                            else
                            {
                                salesDetail.PrtGoodsNo = salesDetail.GoodsNo;                   // 印刷用品番
                                salesDetail.PrtMakerCode = salesDetail.GoodsMakerCd;            // 印刷用メーカーコード
                                salesDetail.PrtMakerName = salesDetail.MakerName;               // 印刷用メーカー名称
                            }
                        }
                        // --- UPD 2009/10/19 ----------<<<<<

                        // ----- UPD 2011/11/12 ----->>>>>
                        // ----- UPD 2009/10/19 ----->>>>>
                        //// zhouzy add 20110919 begin
                        ////受発注種別
                        if (isSFaskFlg == false)
                        {
                            salesDetail.AcceptOrOrderKind = (short)_commethod;
                        }
                        //---ADD  鄧潘ハン 2012/01/12   Redmine#27954------------->>>>>
                        if (salesDetail.AutoAnswerDivSCM == 0)
                        {
                            salesDetail.AcceptOrOrderKind = 0;
                        }
                        if (salesDetail.InquiryNumber == 0)
                        {
                            salesDetail.InqRowNumber = 0;
                        }
                        //---ADD  鄧潘ハン 2012/01/12   Redmine#27954-------------<<<<<
                        //// zhouzy add 20110919 end
                        //salesDetail.AcceptOrOrderKind = (short)_commethod;
                        // ----- UPD 2009/10/19 -----<<<<<
                        // ----- UPD 2011/11/12 -----<<<<<
                        // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------>>>>>
                        // 返品時に元伝にSCM受注データが紐づく場合、受発注種別を継承する
                        if (_scmAcOdrDataDataTableReturn != null && _scmAcOdrDataDataTableReturn.Rows.Count > 0)
                        {
                            salesDetail.AcceptOrOrderKind = this._scmAcOdrDataDataTableReturn[0].AcceptOrOrderKind;
                        }
                        // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------<<<<<

                        // --- ADD 2013/02/19 Y.Wakita ---------->>>>>
                        //---------------------------------------------
                        // 注釈、行値引きはチェック対象外
                        //---------------------------------------------
                        int _editStatus = this._salesDetailDataTable[salesDetail.SalesRowNo - 1].EditStatus;
                        if (!(_editStatus == SalesSlipInputAcs.ctEDITSTATUS_Annotation ||
                              _editStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount))
                        {
                            // --- ADD 2013/02/19 Y.Wakita ----------<<<<<
                            // --- ADD 2013/02/05 Y.Wakita ---------->>>>>
                            // BLコード０対応
                            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().BLGoodsCdZeroSuprt == 1)
                            {
                                if (salesDetail.BLGoodsCode == 0)
                                {
                                    // BL商品コード、BL商品コード（印刷）に変換コードを設定
                                    salesDetail.BLGoodsCode = this._salesSlipInputInitDataAcs.GetSalesTtlSt().BLGoodsCdChange;
                                    salesDetail.PrtBLGoodsCode = this._salesSlipInputInitDataAcs.GetSalesTtlSt().BLGoodsCdChange;
                                }
                            }
                            // --- ADD 2013/02/05 Y.Wakita ----------<<<<<
                            // --- ADD 2013/02/19 Y.Wakita ---------->>>>>
                        }
                        // --- ADD 2013/02/19 Y.Wakita ----------<<<<<

                        // ADD 2013/03/27 T.Miyamoto ------------------------------>>>>>
                        if ((salesDetail.BLGoodsCode != 0) && (salesDetail.BLGroupCode == 0))
                        {
                            //BLコード情報再設定
                            this.SettingSalesDetailListBLGoodsInfo(salesDetail);
                        }
                        // ADD 2013/03/27 T.Miyamoto ------------------------------<<<<<

                        salesDetailArrayList.Add(ConvertSalesSlip.ParamDataFromUIData(salesDetail)); // 明細情報

                        if ((carManagementWorkList != null) && (carManagementWorkList.Count != 0))
                        {
                            CarManagementWork carManagementWork;
                            this.GetCarManagementWorkFromCarManagementWorkList(out carManagementWork, salesDetail.CarRelationGuid, carManagementWorkList);
                            if (carManagementWork != null)
                            {
                                carManagementWork.EnterpriseCode = this._enterpriseCode;
                                carManagementWork.CustomerCode = sourceSalesSlip.CustomerCode;
                                carManagementWorkListForSave.Add(carManagementWork);
                            }
                        }

                        // DEL 2014/08/13 11070147-00 システムテスト障害№5対応 ----------------------->>>>>                        
                        // Add 2014/08/11 duzg For 検証／総合テスト障害No.5 -------------------->>>>>>>>>>>>>>>>>>>>>
                        //if (sourceSCMAcOdrDtlAsWorkList != null && salesDetail.GoodsSearchDivCd == 1)
                        //{
                        //    foreach (SCMAcOdrDtlAsWork work in sourceSCMAcOdrDtlAsWorkList)
                        //    {
                        //        if (work.GoodsNo == salesDetail.GoodsNo && work.SalesRowNo == salesDetail.SalesRowNo)
                        //        {
                        //            work.PrmSetDtlNo2 = 0;
                        //            work.PrmSetDtlName2 = string.Empty;
                        //        }
                        //    }
                        //}
                        // Add 2014/08/11 duzg For 検証／総合テスト障害No.5 --------------------<<<<<<<<<<<<<<<<<<<<<
                        // DEL 2014/08/13 11070147-00 システムテスト障害№5対応 -----------------------<<<<<                        
                    }
                    #endregion

                    #region 伝票明細追加情報
                    slipDetailAddInfoWorkList.AddRange(sourceSlipDetailAddInfoWorkList);
                    #endregion

                    #region 赤伝の場合、元黒データ読込
                    if (debitNoteDiv == 1) // 赤伝区分(0:黒伝 1:赤伝 2:元黒)
                    {
                        #region 赤伝
                        //------------------------------------------------------
                        // 赤伝の場合、元黒のデータを取得する
                        //------------------------------------------------------
                        SalesSlip nLnkSalesSlip;
                        SalesSlip nLnkBaseSalesSlip;
                        List<SalesDetail> nLnkSalesDetailList;
                        List<SalesDetail> nLnkaddUpSrcDetailList;
                        SearchDepsitMain nLnkDepsitMain;
                        SearchDepositAlw nLnkDepositAlw;
                        List<StockWork> stockWorkList;
                        List<StockSlipWork> stockSlipWorkList;
                        List<StockDetailWork> stockDetailWorkList;
                        List<AddUpOrgStockDetailWork> addUpSrcStockDetailList;
                        List<AcceptOdrCar> acceptOdrCarList;
                        List<UOEOrderDtlWork> uoeOrderDtlWorkList;
                        //>>>2010/02/26
                        UserSCMOrderHeaderRecord scmHeader;
                        UserSCMOrderCarRecord scmCar;
                        List<UserSCMOrderDetailRecord> scmDetailList;
                        List<UserSCMOrderAnswerRecord> scmAnswerList;
                        //<<<2010/02/26

                        //>>>2010/02/26
                        //int st = this.ReadDBData(sourceSalesSlip.EnterpriseCode, sourceSalesSlip.AcptAnOdrStatus, sourceSalesSlip.DebitNLnkSalesSlNum.ToString().PadLeft(9, '0'), false, out nLnkSalesSlip, out nLnkBaseSalesSlip, out nLnkSalesDetailList, out nLnkaddUpSrcDetailList, out nLnkDepsitMain, out nLnkDepositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList);
                        int st = this.ReadDBData(sourceSalesSlip.EnterpriseCode, sourceSalesSlip.AcptAnOdrStatus, sourceSalesSlip.DebitNLnkSalesSlNum.ToString().PadLeft(9, '0'), false, out nLnkSalesSlip, out nLnkBaseSalesSlip, out nLnkSalesDetailList, out nLnkaddUpSrcDetailList, out nLnkDepsitMain, out nLnkDepositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
                        //<<<2010/02/26

                        if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            // --- Add 2012/01/16 duzg for Redmine#28011 --->>>
                            if (nLnkSalesSlip != null && nLnkSalesSlip.InquiryNumber != 0)
                                originSalesSlipDiv = false;
                            // --- Add 2012/01/16 duzg for Redmine#28011 ---<<<
                            originDataList.Add(ConvertSalesSlip.ParamDataFromUIData(nLnkSalesSlip));
                        }
                        #endregion
                    }
                    #endregion
                    // --- DEL 陳健 2014/01/23 Redmine#41771 No.5------------ >>>>>>
                    //// --- ADD 譚洪 2013/12/30 ------------ >>>>>>
                    //// sourceSalesSlip.SalesSlipCd が 1:返品の場合、sourceSalesSlip.DebitNoteDiv が 1:赤伝の場合、
                    //if (sourceSalesSlip.DebitNoteDiv == 1 || (sourceSalesSlip.SalesSlipCd == 1 && sourceSalesDetailList[0].AcptAnOdrStatusSrc == 30 && sourceSalesDetailList[0].SalesSlipDtlNumSrc != 0))
                    //{
                    //    // 消費税転嫁方式編集判断メソッドの返値がtrueの場合、
                    //    if (CheckConsTaxLayMethod(sourceSalesSlip))
                    //    {
                    //        // 売上データ(SalesSlipRf).消費税転嫁方式(ConsTaxLayMethodRF)＝０：伝票単位
                    //        sourceSalesSlip.ConsTaxLayMethod = 0;
                    //    }
                    //}
                    //// --- ADD 譚洪 2013/12/30 ------------ <<<<<<
                    // --- DEL 陳健 2014/01/23 Redmine#41771 No.5------------ <<<<<<

                    #region データセット
                    // 売上データ情報セット(CustomSerializeArrayList)
                    salesSlipDataList.Add(ConvertSalesSlip.ParamDataFromUIData(sourceSalesSlip));
                    // 売上明細データ情報セット(CustomSerializeArrayList)
                    if (salesDetailArrayList.Count > 0) salesSlipDataList.Add(salesDetailArrayList);
                    // 車両管理ワークオブジェクトリストセット
                    if (carManagementWorkListForSave.Count > 0) salesSlipDataList.Add(carManagementWorkListForSave);
                    // 伝票明細追加情報リストセット
                    if (slipDetailAddInfoWorkList.Count > 0) salesSlipDataList.Add(slipDetailAddInfoWorkList);
                    //>>>2010/02/26
                    // SCM情報
                    if (sourceSCMAcOdrDataWork != null)
                    {
                        // --- DEL 2013/11/25 Y.Wakita ---------->>>>>
                        //// --- UPD 2013/06/18 Y.Wakita ---------->>>>>
                        ////// ----- UPD 2011/11/12 ----->>>>>
                        ////// ----- UPD 2009/10/19 ----->>>>>
                        //////// zhouzy add 20110919 begin
                        ////if (isSFaskFlg == false)
                        ////{
                        ////    sourceSCMAcOdrDataWork.AcceptOrOrderKind = (short)_commethod;
                        ////}
                        //////// zhouzy add 20110919 end
                        //////sourceSCMAcOdrDataWork.AcceptOrOrderKind = (short)_commethod;
                        ////// ----- UPD 2009/10/19 -----<<<<<
                        ////// ----- UPD 2011/11/12 -----<<<<<
                        //sourceSCMAcOdrDataWork.AcceptOrOrderKind = (short)acceptOrOrderKind;
                        //// --- UPD 2013/06/18 Y.Wakita ----------<<<<<
                        // --- DEL 2013/11/25 Y.Wakita ----------<<<<<
                        // --- ADD 2013/11/25 Y.Wakita ---------->>>>>
                        if (isSFaskFlg == false)
                        {
                            sourceSCMAcOdrDataWork.AcceptOrOrderKind = (short)_commethod;
                        }
                        else
                        {
                            sourceSCMAcOdrDataWork.AcceptOrOrderKind = (short)acceptOrOrderKind;
                        }
                        // --- ADD 2013/11/25 Y.Wakita ----------<<<<<
                        // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------>>>>>
                        // 返品時に元伝にSCM受注データが紐づく場合、受発注種別を継承する
                        if (_scmAcOdrDataDataTableReturn != null && _scmAcOdrDataDataTableReturn.Rows.Count > 0)
                        {
                            sourceSCMAcOdrDataWork.AcceptOrOrderKind = this._scmAcOdrDataDataTableReturn[0].AcceptOrOrderKind;
                        }
                        // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------<<<<<
                        if (sourceSCMAcOdrDataWork != null) salesSlipDataList.Add(sourceSCMAcOdrDataWork);
                        if ((sourceSCMAcOdrDtCarWork != null) && (carManagementWorkListForSave.Count > 0)) salesSlipDataList.Add(sourceSCMAcOdrDtCarWork);
                        if (sourceSCMAcOdrDtlIqWorkList != null) salesSlipDataList.Add(sourceSCMAcOdrDtlIqWorkList);
                        if (sourceSCMAcOdrDtlAsWorkList != null) salesSlipDataList.Add(sourceSCMAcOdrDtlAsWorkList);
                    }
                    //<<<2010/02/26
                    #endregion

                    #region 入金データ情報セット
                    //------------------------------------------------------
                    // 入金データ情報セット
                    //------------------------------------------------------
                    if (sourceDepsitMain != null)
                    {
                        //salesSlipDataList.Add((DepsitMainWork)DBAndXMLDataMergeParts.CopyPropertyInClass(sourceDepsitMain, typeof(DepsitMainWork)));
                        salesSlipDataList.Add(ConvertSalesSlip.ParamDataFromUIData(sourceDepsitMain));
                        salesSlipDataList.Add((DepositAlwWork)DBAndXMLDataMergeParts.CopyPropertyInClass(sourceDepositAlw, typeof(DepositAlwWork)));
                    }
                    #endregion

                    #region 売上構成リストセット
                    //------------------------------------------------------
                    // 売上構成リストセット
                    //------------------------------------------------------
                    paraList.Add(salesSlipDataList);
                    #endregion
                }
            }
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○売上情報設定　終了");

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●受注情報設定　開始");
            #region ●受注情報
            bool isEstimateFlag = false;    // 見積フラグ  ADD 2013/01/15 Y.Wakita
            //------------------------------------------------------
            // 受注情報
            //------------------------------------------------------
            foreach (CustomSerializeArrayList list in acptDataList)
            {
                #region 元データ用変数
                SalesSlip sourceAcptSlip = new SalesSlip();
                List<SalesDetail> sourceAcptDetailList = new List<SalesDetail>();
                List<SlipDetailAddInfoWork> sourceSlipDetailAddInfoWorkList = new List<SlipDetailAddInfoWork>();
                //>>>2010/02/26
                SCMAcOdrDataWork sourceSCMAcOdrDataWork = null;
                SCMAcOdrDtCarWork sourceSCMAcOdrDtCarWork = null;
                ArrayList sourceSCMAcOdrDtlIqWorkList = null;
                ArrayList sourceSCMAcOdrDtlAsWorkList = null;
                //<<<2010/02/26
                #endregion

                #region データ格納用変数
                CustomSerializeArrayList acceptAnOrderDataList = new CustomSerializeArrayList();
                ArrayList acceptAnOrderDetailArrayList = new ArrayList();
                ArrayList carManagementWorkListForSave = new ArrayList();
                ArrayList slipDetailAddInfoWorkList = new ArrayList();
                #endregion

                #region 元データ分解
                //------------------------------------------------------
                // 元データ分解
                //------------------------------------------------------
                foreach (object obj in list)
                {
                    if (obj is SalesSlip)
                    {
                        sourceAcptSlip = (SalesSlip)obj;
                        acptSlipNumBeforeSaveList.Add(sourceAcptSlip.SalesSlipNum);
                    }
                    else if (obj is List<SalesDetail>)
                    {
                        sourceAcptDetailList = (List<SalesDetail>)obj;
                    }
                    else if (obj is List<SlipDetailAddInfoWork>)
                    {
                        sourceSlipDetailAddInfoWorkList = (List<SlipDetailAddInfoWork>)obj;
                    }
                    //>>>2010/02/26
                    else if (obj is SCMAcOdrDataWork)
                    {
                        sourceSCMAcOdrDataWork = (SCMAcOdrDataWork)obj;
                    }
                    else if (obj is SCMAcOdrDtCarWork)
                    {
                        sourceSCMAcOdrDtCarWork = (SCMAcOdrDtCarWork)obj;
                    }
                    else if (obj is ArrayList)
                    {
                        ArrayList al = (ArrayList)obj;
                        if (al[0] is SCMAcOdrDtlIqWork)
                        {
                            sourceSCMAcOdrDtlIqWorkList = (ArrayList)obj;
                        }
                        else if (al[0] is SCMAcOdrDtlAsWork)
                        {
                            sourceSCMAcOdrDtlAsWorkList = (ArrayList)obj;
                        }
                    }
                    //<<<2010/02/26
                }
                #endregion

                if (sourceAcptDetailList.Count != 0)
                {

                    // ADD 2012/12/06 2012/12/12配信予定 SCM障害№10447対応 ----------------------------------->>>>>
                    _commethod = GetCommethod(sourceAcptSlip);
                    // ADD 2012/12/06 2012/12/12配信予定 SCM障害№10447対応 -----------------------------------<<<<<
                    
                    acceptOrOrderKind = 0;  // ADD 2013/06/18 Y.Wakita

                    #region 受注データ内容補正
                    switch ((SalesSlipInputAcs.AcptAnOdrStatusState)sourceAcptSlip.AcptAnOdrStatus)
                    {
                        case AcptAnOdrStatusState.Estimate:
                        case AcptAnOdrStatusState.UnitPriceEstimate:
                        case AcptAnOdrStatusState.AcceptAnOrder:
                            break;
                        case AcptAnOdrStatusState.Sales:
                            sourceAcptSlip.SalesSlipNum = ctDefaultSalesSlipNum;
                            break;
                        case AcptAnOdrStatusState.Shipment:
                            sourceAcptSlip.SalesSlipNum = ctDefaultSalesSlipNum;
                            break;
                    }

                    sourceAcptSlip.EnterpriseCode = this._enterpriseCode;
                    sourceAcptSlip.AcptAnOdrStatus = (int)AcptAnOdrStatusState.AcceptAnOrder;
                    sourceAcptSlip.SectionCode = LoginInfoAcquisition.Employee.BelongSectionCode;
                    sourceAcptSlip.DetailRowCount = sourceAcptDetailList.Count;
                    sourceAcptSlip.AddUpADate = DateTime.MinValue;
                    sourceAcptSlip.ShipmentDay = sourceAcptSlip.SalesDate;
                    sourceAcptSlip.DelayPaymentDiv = 0;
                    sourceAcptSlip.SlipPrintDivCd = this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt().AcpOdrrSlipPrtDiv;
                    sourceAcptSlip.SlipPrtSetPaperId = this.GetSlipPrtSetPaperId(sourceAcptSlip); // 伝票印刷設定用帳票ＩＤ
                    sourceAcptSlip.SlipPrintFinishCd = sourceAcptSlip.SlipPrintDivCd; // 伝票発行済区分
                    sourceAcptSlip.SalesSlipPrintDate = (sourceAcptSlip.SlipPrintDivCd == (int)SlipPrintDivCd.Print) ? DateTime.Today : DateTime.MinValue; // 売上伝票発行日
                    if (sourceAcptSlip.SalesSlipNum != ctDefaultSalesSlipNum) sourceAcptSlip.SalesSlipUpdateCd = 1; // 売上伝票更新区分(0:未更新 1:更新あり)
                    // --- ADD 2013/01/15 Y.Wakita ---------->>>>>
                    if (sourceAcptSlip.EstimateDivide != (int)SalesSlipInputAcs.EstimateDivide.None)
                    {
                        sourceAcptSlip.EstimateDivide = (int)SalesSlipInputAcs.EstimateDivide.None; // 見積区分
                        sourceAcptSlip.DepositAlwcBlnce = 0;    // 入金引当残高
                        isEstimateFlag = true;  // 見積フラグ
                    }
                    // --- ADD 2013/01/15 Y.Wakita ----------<<<<<
                    #endregion

                    #region 受注明細データ内容補正
                    // 受注明細データワーククラスリスト生成
                    foreach (SalesDetail salesDetailAcptAnOdr in sourceAcptDetailList)
                    {
                        if (salesDetailAcptAnOdr != null)
                        {
                            salesDetailAcptAnOdr.EnterpriseCode = this._enterpriseCode;                 // 企業コード
                            salesDetailAcptAnOdr.SectionCode = sourceAcptSlip.SectionCode;              // 拠点コード
                            salesDetailAcptAnOdr.AcptAnOdrStatus = sourceAcptSlip.AcptAnOdrStatus;      // 受注ステータス
                            salesDetailAcptAnOdr.SalesSlipNum = sourceAcptSlip.SalesSlipNum;            // 売上伝票番号
                            salesDetailAcptAnOdr.SalesDate = sourceAcptSlip.SalesDate;                  // 売上日付

                            // 売上在庫取寄せ区分
                            if (!string.IsNullOrEmpty(salesDetailAcptAnOdr.WarehouseCode))
                                salesDetailAcptAnOdr.SalesOrderDivCd = (int)SalesOrderDivCd.Stock;      // 在庫
                            else
                                salesDetailAcptAnOdr.SalesOrderDivCd = (int)SalesOrderDivCd.NonStock;   // 取寄

                            // --- ADD 2013/01/15 Y.Wakita ---------->>>>>
                            if (isEstimateFlag == true)
                            {
                                salesDetailAcptAnOdr.WarehouseCode = string.Empty;
                                salesDetailAcptAnOdr.WarehouseName = string.Empty;
                                salesDetailAcptAnOdr.WarehouseShelfNo = string.Empty;
                                salesDetailAcptAnOdr.SalesOrderDivCd = (int)SalesOrderDivCd.NonStock; // 売上在庫取寄区分(0:取寄 1:在庫)
                            }
                            // --- ADD 2013/01/15 Y.Wakita ----------<<<<<

                            // --- UPD 2009/10/19 ---------->>>>>
                            if (salesDetailAcptAnOdr.SelectedGoodsNoDiv == 0)
                            {
                                // 2009/12/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                //if (sourceAcptSlip.SalesSlipNum != ctDefaultSalesSlipNum
                                //|| salesDetailAcptAnOdr.SalesSlipDtlNumSrc != 0 || sourceAcptSlip.DebitNoteDiv == 1)
                                if (salesDetailAcptAnOdr.SalesSlipDtlNum != 0 ||
                                    salesDetailAcptAnOdr.SalesSlipDtlNumSrc != 0 ||
                                    sourceAcptSlip.DebitNoteDiv == 1)
                                // 2009/12/17 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                {
                                    //
                                }
                                else
                                {
                                    salesDetailAcptAnOdr.PrtGoodsNo = salesDetailAcptAnOdr.GoodsNo;             // 印刷用品番
                                    salesDetailAcptAnOdr.PrtMakerCode = salesDetailAcptAnOdr.GoodsMakerCd;      // 印刷用メーカーコード
                                    salesDetailAcptAnOdr.PrtMakerName = salesDetailAcptAnOdr.MakerName;         // 印刷用メーカー名称
                                }
                            }
                            // --- UPD 2009/10/19 ----------<<<<<

                            // ADD 2012/12/06 2012/12/12配信予定 SCM障害№10447対応 ----------------------------------->>>>>
                            if (_scmHeaderIListSvForWebCheck != null && _scmHeaderIListSvForWebCheck.Count > 0)
                                salesDetailAcptAnOdr.AcceptOrOrderKind = _scmHeaderIListSvForWebCheck[0].AcceptOrOrderKind;

                            acceptOrOrderKind = salesDetailAcptAnOdr.AcceptOrOrderKind;  // ADD 2013/06/18 Y.Wakita


                            if (_scmHeaderIListSvForWebCheck != null && _scmHeaderIListSvForWebCheck.Count > 0 && _scmHeaderIListSvForWebCheck[0].InqOrdDivCd != 0)
                            {
                                //問合せ番号はゼロの場合はPMで直接売上を作成する
                                isSFaskFlg = true;
                            }
                            else
                            {
                                isSFaskFlg = false;
                            }

                            //受発注種別
                            if (isSFaskFlg == false)
                            {
                                salesDetailAcptAnOdr.AcceptOrOrderKind = (short)_commethod;
                            }

                            // ADD 2012/12/06 2012/12/12配信予定 SCM障害№10447対応 -----------------------------------<<<<<

                            // --- ADD 2013/02/19 Y.Wakita ---------->>>>>
                            // BLコード０対応
                            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().BLGoodsCdZeroSuprt == 1)
                            {
                                if (salesDetailAcptAnOdr.BLGoodsCode == 0)
                                {
                                    // BL商品コード、BL商品コード（印刷）に変換コードを設定
                                    salesDetailAcptAnOdr.BLGoodsCode = this._salesSlipInputInitDataAcs.GetSalesTtlSt().BLGoodsCdChange;
                                    salesDetailAcptAnOdr.PrtBLGoodsCode = this._salesSlipInputInitDataAcs.GetSalesTtlSt().BLGoodsCdChange;
                                }
                            }
                            // --- ADD 2013/02/19 Y.Wakita ----------<<<<<

                            // ADD 2013/03/27 T.Miyamoto ------------------------------>>>>>
                            if ((salesDetailAcptAnOdr.BLGoodsCode != 0) && (salesDetailAcptAnOdr.BLGroupCode == 0))
                            {
                                //BLコード情報再設定
                                this.SettingSalesDetailListBLGoodsInfo(salesDetailAcptAnOdr);
                            }
                            // ADD 2013/03/27 T.Miyamoto ------------------------------<<<<<

                            acceptAnOrderDetailArrayList.Add(ConvertSalesSlip.ParamDataFromUIData(salesDetailAcptAnOdr));// 明細情報


                            if ((carManagementWorkList != null) && (carManagementWorkList.Count != 0))
                            {
                                CarManagementWork carManagementWork;
                                this.GetCarManagementWorkFromCarManagementWorkList(out carManagementWork, salesDetailAcptAnOdr.CarRelationGuid, carManagementWorkList);
                                if (carManagementWork != null)
                                {
                                    carManagementWork.EnterpriseCode = this._enterpriseCode;
                                    carManagementWork.CustomerCode = sourceAcptSlip.CustomerCode;
                                    carManagementWorkListForSave.Add(carManagementWork);
                                }
                            }
                        }
                        else
                        {
                            acceptAnOrderDetailArrayList.Add(null);
                        }
                    }
                    #endregion

                    #region 伝票明細追加情報
                    slipDetailAddInfoWorkList.AddRange(sourceSlipDetailAddInfoWorkList);
                    #endregion

                    #region データセット
                    // 受注データ情報セット(CustomSerializeArrayList)
                    acceptAnOrderDataList.Add(ConvertSalesSlip.ParamDataFromUIData(sourceAcptSlip));
                    // 受注明細データ情報セット(CustomSerializeArrayList)
                    if (acceptAnOrderDetailArrayList.Count > 0) acceptAnOrderDataList.Add(acceptAnOrderDetailArrayList);
                    // 車両管理ワークオブジェクトリストセット
                    if (carManagementWorkListForSave.Count > 0) acceptAnOrderDataList.Add(carManagementWorkListForSave);
                    // 伝票明細追加情報リストセット
                    if (slipDetailAddInfoWorkList.Count > 0) acceptAnOrderDataList.Add(slipDetailAddInfoWorkList);
                    //>>>2010/02/26
                    // SCM情報
                    if (sourceSCMAcOdrDataWork != null)
                    {
                        // --- DEL 2013/11/25 Y.Wakita ---------->>>>>
                        //// --- UPD 2013/06/18 Y.Wakita ---------->>>>>
                        ////// ----- UPD 2011/11/12 ----->>>>>
                        ////// ----- UPD 2009/10/19 ----->>>>>
                        //////// zhouzy add 20110919 begin
                        ////if (isSFaskFlg == false)
                        ////{
                        ////    sourceSCMAcOdrDataWork.AcceptOrOrderKind = (short)_commethod;
                        ////}
                        //////// zhouzy add 20110919 end
                        //////sourceSCMAcOdrDataWork.AcceptOrOrderKind = (short)_commethod;
                        ////// ----- UPD 2009/10/19 -----<<<<<
                        ////// ----- UPD 2011/11/12 -----<<<<<
                        //sourceSCMAcOdrDataWork.AcceptOrOrderKind = (short)acceptOrOrderKind;
                        //// --- UPD 2013/06/18 Y.Wakita ----------<<<<<
                        // --- DEL 2013/11/25 Y.Wakita ----------<<<<<
                        // --- ADD 2013/11/25 Y.Wakita ---------->>>>>
                        if (isSFaskFlg == false)
                        {
                            sourceSCMAcOdrDataWork.AcceptOrOrderKind = (short)_commethod;
                        }
                        else
                        {
                            sourceSCMAcOdrDataWork.AcceptOrOrderKind = (short)acceptOrOrderKind;
                        }
                        // --- ADD 2013/11/25 Y.Wakita ----------<<<<<
                        if (sourceSCMAcOdrDataWork != null) acceptAnOrderDataList.Add(sourceSCMAcOdrDataWork);
                        if ((sourceSCMAcOdrDtCarWork != null) && (carManagementWorkListForSave.Count > 0)) acceptAnOrderDataList.Add(sourceSCMAcOdrDtCarWork);
                        if (sourceSCMAcOdrDtlIqWorkList != null) acceptAnOrderDataList.Add(sourceSCMAcOdrDtlIqWorkList);
                        if (sourceSCMAcOdrDtlAsWorkList != null) acceptAnOrderDataList.Add(sourceSCMAcOdrDtlAsWorkList);
                    }
                    //<<<2010/02/26
                    #endregion

                    #region 結合リストセット
                    paraList.Add(acceptAnOrderDataList);
                    #endregion
                }
            }
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○受注情報設定　終了");

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●仕入情報設定　開始");
            #region ●仕入情報
            //------------------------------------------------------
            // 仕入情報
            //------------------------------------------------------
            if ((stockSlipInfoList != null) && (stockSlipInfoList.Count != 0))
            {
                foreach (CustomSerializeArrayList list in stockSlipInfoList)
                {
                    paraList.Add(list);
                }
            }
            //------------------------------------------------------
            // 削除仕入情報
            //------------------------------------------------------
            if ((deleteStockSlipInfoList != null) && (deleteStockSlipInfoList.Count != 0))
            {
                foreach (object obj in deleteStockSlipInfoList)
                {
                    if (obj is IOWriteMASIRDeleteWork)
                    {
                        paraList.Add((IOWriteMASIRDeleteWork)obj);
                    }
                }
            }
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○仕入情報設定　終了");

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●UOE発注情報設定　開始");
            #region ●UOE発注情報
            //------------------------------------------------------
            // UOE発注情報
            //------------------------------------------------------
            if (uoeOrderDataList != null)
            {
                foreach (CustomSerializeArrayList list in uoeOrderDataList)
                {
                    paraList.Add(list);
                }
            }
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○UOE発注情報設定　終了");

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●リモート参照用パラメータ設定　開始");
            #region ●リモート参照用パラメータ
            //------------------------------------------------------
            // リモート参照用パラメータ
            //------------------------------------------------------
            IOWriteCtrlOptWork iOWriteCtrlOptWork = new IOWriteCtrlOptWork();                   // リモート参照用パラメータ
            this.SettingIOWriteCtrlOptWork(SalesSlipInputAcs.OptWorkSettingType.Write, out iOWriteCtrlOptWork); // リモート参照用パラメータ設定処理
            paraList.Add(iOWriteCtrlOptWork);
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○リモート参照用パラメータ設定　終了");

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●データ登録処理　開始");
            #region ●保存処理
            // ---ADD 2011/02/11--------------------->>>>
            //------------------------------------------------------
            // 登録前チェック(伝票印刷設定用帳票IDが空白チェック)
            //------------------------------------------------------
            SalesSlipWork slipWork = new SalesSlipWork();
            // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------>>>>
            // TSPデータ作成FLG
            bool tspSalesWriteFlg = false;
            // 1:新規、2:更新
            int tspMode = 0;
            // 得意先コード
            int customerCode = 0;
            // 指示書№
            string partySaleSlipNum = string.Empty;
            // TSP用売上伝票データ
            SalesSlipWork slipWorkTsp = new SalesSlipWork();
            // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------<<<<
            if (paraList.Count > 0)
            {
                for (int i = 0; i < paraList.Count; i++)
                {
                    if ((object)paraList[i] is CustomSerializeArrayList)
                    {
                        CustomSerializeArrayList list = (CustomSerializeArrayList)paraList[i];
                        foreach (object obj in list)
                        {
                            if (obj is SalesSlipWork)
                            {
                                slipWork = (SalesSlipWork)obj;
                                // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------>>>>
                                if(slipWork.AcptAnOdrStatus == 30)
                                {
                                    slipWorkTsp = (SalesSlipWork)obj;
                                }
                                // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------<<<<
                                if (slipWork.SlipPrtSetPaperId == string.Empty)
                                {
                                    this._isCanSaveFlg = false;
                                    // ログを内部保持するログリストに追加
                                    // ----- ADD K2011/12/09 --------------------------->>>>>
                                    if (this._enterpriseCode == login_EnterpriseCode)
                                    {
                                        if (this._surveyUseLogOutputAcs == null) this._surveyUseLogOutputAcs = new SurveyUseLogOutputAcs();
                                    }
                                    // ----- ADD K2011/12/09 ---------------------------<<<<<
                                    //if (this._surveyUseLogOutputAcs == null) this._surveyUseLogOutputAcs = new SurveyUseLogOutputAcs(); // ADD K2011/08/12 // DEL K2011/12/09
                                    //this._surveyUseLogOutputAcs.AddLine(42, Convert.ToInt32(slipWork.SalesSlipNum), slipWork.AcptAnOdrStatus);
                                    // ログファイルとエラーデータファイルを出力
                                    //this._surveyUseLogOutputAcs.WriteErrorLog(list);// DEL 2011/03/07
                                    this._surveyUseLogOutputAcs.WriteErrorLog(paraList);// ADD 2011/03/07

                                    DateTime dt = this._surveyUseLogOutputAcs.GetDateTime();
                                    this._txtFileName = "ErrorLog_MAHNB01001U_" + dt.ToString("yyyyMMddHHmmss") + ".csv";
                                    DialogResult dialogResult = TMsgDisp.Show(
                                        new Form(),
                                        emErrorLevel.ERR_LEVEL_INFO,
                                        string.Empty,
                                        "売上データの登録に失敗しました。\r\n" +
　　　　　　　　　　　　　              // --- ADD 2012/10/31 T.Nishi ---------->>>>>
                                        "伝票印刷設定用帳票IDが登録されていません。\r\n" +
                                        "伝票印刷設定用帳票IDを登録した後、\r\n" +
　　　　　　　　　　　　　              // --- ADD 2012/10/31 T.Nishi ----------<<<<<
                                        "メニューから売上伝票入力を起動して、登録し直して下さい。\r\n\r\n" +
                                        //"（詳細：C:\\program files\\partsman\\log\\" + this._txtFileName + "）\r\n", // DEL 2011/03/07
                                        "（詳細：" + System.IO.Path.GetFullPath(System.IO.Path.Combine("log", this._txtFileName)) + "）\r\n", // ADD 2011/03/07
                                        0,
                                        MessageBoxButtons.OK,
                                        MessageBoxDefaultButton.Button1);

                                    this._surveyUseLogOutputAcs._isErrorFlag = true;
                                    retMessage = string.Empty;
                                    return -1;
                                }

                                // ---ADD 陳艶丹 2020/09/01 PMKOBETSU-4076の対応 ------>>>>
                                // 伝票新規登録＆売上伝票のみの場合
                                if (slipWork.SalesSlipNum == ctDefaultSalesSlipNum && slipWork.AcptAnOdrStatus == 30)
                                {
                                    // キー：得意先コード+売上日
                                    string key = slipWork.CustomerCode.ToString() + TDateTime.DateTimeToLongDate(slipWork.SalesDate).ToString();
                                    if (CustSlipNoDic.Count > 0)
                                    {
                                        // 得意先コードまたは売上日を変わる場合
                                        if (!this.CustSlipNoDic.ContainsKey(key))
                                        {
                                            this.CustSlipNoDic.Clear();
                                        }
                                        // 得意先コードまたは売上日を変わらない場合、前回採番した得意先伝票番号を使用する
                                        else
                                        {
                                            if (this.CustSlipNoDic[key].Count > i)
                                            {
                                                slipWork.CustSlipNo = this.CustSlipNoDic[key][i];
                                            }
                                        }
                                    }
                                }
                                // ---ADD 陳艶丹 2020/09/01 PMKOBETSU-4076の対応 ------<<<<
                            }
                        }
                    }
                }
                this.CustSlipNoDic.Clear();// ADD 陳艶丹 2020/09/01 PMKOBETSU-4076の対応
            }
            // ---ADD 2011/02/11---------------------<<<<
            // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------>>>>
            // 返品伝票以外の場合
            if (slipWorkTsp.AcptAnOdrStatus == 30 && slipWorkTsp.SalesSlipCd != (int)SalesSlipCd.RetGoods &&
                (this._salesSlipInputInitDataAcs.Opt_TSP == (int)SalesSlipInputInitDataAcs.Option.ON))
            {
                // 得意先コード
                customerCode = slipWorkTsp.CustomerCode;
                // 指示書№
                partySaleSlipNum = slipWorkTsp.PartySaleSlipNum;
                tspSalesWriteFlg = true;
                //新規の場合
                if (slipWorkTsp.SalesSlipNum == ctDefaultSalesSlipNum)
                {
                    // 新規
                    tspMode = 1;
                }
                // 更新の場合
                else
                {
                    // 更新
                    tspMode = 2;
                }
            }
            // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------<<<<

            // ADD 2015/06/18 豊沢 SCM高速化 Redmine3941対応 --------------------->>>>>
            // 売上データ補正
            this.AdjustSCMAnswerData(paraList);
            // ADD 2015/06/18 豊沢 SCM高速化 Redmine3941対応 ---------------------<<<<<

            //------------------------------------------------------
            // 保存処理
            //------------------------------------------------------
            // 保存用変数初期化
            retMessage = string.Empty;
            string retItemInfo = string.Empty;
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            object paraObj = (object)paraList;

            if (debitNoteDiv == 1) // 赤伝区分(0:黒伝 1:赤伝 2:元黒)
            {
                SalesSlipInputInitDataAcs.LogWrite("IIOWriteControlDB", "RedWrite", "●データ登録赤伝　開始");
                #region 赤伝
                //------------------------------------------------------
                // 赤伝
                //------------------------------------------------------
                if (originDataList.Count != 0)
                {
                    object originDataObj =
                        (object)originDataList;

                    // 元黒:既存更新 赤伝:新規作成
                    status = this._iIOWriteControlDB.RedWrite(ref originDataObj, ref paraObj, out retMessage, out retItemInfo);
                }
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("IIOWriteControlDB", "RedWrite", "○データ登録赤伝　終了");
            }
            else
            {
                // ADD 2014/11/06 chenyd For PM-SCM仕掛一覧№85 ｼｽﾃﾑﾃｽﾄ障害№4対応 ---------------->>>>>>>>>>
                // 新規の場合、SCM回答排他チェック処理
                if ((ScmFlg && this._salesSlip.InquiryNumber != 0) && this._answerDivCode.Equals((int)AnswerDivCd.NoAction))
                {
                    // 回答排他チェックを行う
                    if (!CheckAnswerExclusion(paraObj))
                    {
                        return -1;
                    }
                    this._answerDivCode = -1;
                }
                // ADD 2014/11/06 chenyd For PM-SCM仕掛一覧№85 ｼｽﾃﾑﾃｽﾄ障害№4対応 ----------------<<<<<<<<<<

                SalesSlipInputInitDataAcs.LogWrite("IIOWriteControlDB", "Write", "●データ登録黒伝　開始");
                #region 黒伝
                //------------------------------------------------------
                // 黒伝
                //------------------------------------------------------
                status = this._iIOWriteControlDB.Write(ref paraObj, out retMessage, out retItemInfo);
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("IIOWriteControlDB", "Write", "○データ登録黒伝　終了");
            }
            // ---ADD 陳艶丹 2020/09/01 PMKOBETSU-4076の対応 ------>>>>
            // 売上伝票登録した際に例外が発生した場合
            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                CustomSerializeArrayList salesData = paraObj as CustomSerializeArrayList;
                List<int> dicKeyList = new List<int>();
                string key = string.Empty;
                // 登録データがある場合
                if (salesData != null && salesData.Count > 0)
                {
                    foreach (object obj in salesData)
                    {
                        // 売上データリスト
                        if (obj is ArrayList)
                        {
                            ArrayList list = obj as ArrayList;
                            foreach (object tmpObj in list)
                            {
                                // 売上データワーク
                                if (tmpObj is SalesSlipWork)
                                {
                                    SalesSlipWork salesSlipWork = (SalesSlipWork)tmpObj;

                                    if (!dicKeyList.Contains(salesSlipWork.CustSlipNo) && salesSlipWork.CustSlipNo != 0)
                                    {
                                        dicKeyList.Add(salesSlipWork.CustSlipNo);
                                    }

                                    // キー：得意先コード+売上日
                                    key = salesSlipWork.CustomerCode.ToString() + TDateTime.DateTimeToLongDate(salesSlipWork.SalesDate).ToString();
                                }
                            }
                        }
                    }
                }

                // 採番した得意先伝票番号をグローバル変数に持つ
                if (!key.Equals(string.Empty))
                {
                    if (!this.CustSlipNoDic.ContainsKey(key))
                    {
                        this.CustSlipNoDic.Add(key, dicKeyList);
                    }
                }
            }
            // 売上データ登録成功の場合
            else
            {
                // 採番した得意先伝票番号を持つグローバル変数を初期化
                this.CustSlipNoDic.Clear();
            }
            // ---ADD 陳艶丹 2020/09/01 PMKOBETSU-4076の対応 ------<<<<

            // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------>>>>
            // TSPインラインオプションが立っている時、且つ、ＴＳＰインラインの得意先の時
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && debitNoteDiv != 1
                && tspSalesWriteFlg && customerCode != 0 && !partySaleSlipNum.Equals(string.Empty) &&
                (this._salesSlipInputInitDataAcs.Opt_TSP == (int)SalesSlipInputInitDataAcs.Option.ON))
            {
                if (this.TspCprtStWorkList != null && this.TspCprtStWorkList.Count == 0)
                {
                    // TSP連携マスタ設定情報
                    TspCprtStAcs tspCprtStAcs = new TspCprtStAcs();
                    TspCprtStWork tspCprtStWork = new TspCprtStWork();
                    try
                    {
                        // 企業コード
                        tspCprtStWork.EnterpriseCode = this._enterpriseCode;
                        // TSP連携マスタ設定情報取得
                        int statusTsp = tspCprtStAcs.Search(tspCprtStWork, out this.TspCprtStWorkList);
                        if (statusTsp != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "TSP連携マスタ設定情報取得に失敗しました。");
                        }
                    }
                    catch (Exception ex)
                    {
                        SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "TSP連携マスタ設定情報取得に失敗しました、" + ex.Message.ToString());
                    }
                }
                // TSP連携マスタ設定情報設定ある場合
                if (TspCprtStWorkList != null && TspCprtStWorkList.Count > 0)
                {
                    bool tspCustomerCode = false;
                    int sendCode = -1;
                    // 得意先コードが設定するの判断
                    foreach (TspCprtStWork tspWork in this.TspCprtStWorkList)
                    {
                        if (tspWork.CustomerCode == customerCode)
                        {
                            sendCode = tspWork.SendCode;
                            tspCustomerCode = true;
                            break;
                        }
                    }
                    // 得意先コードが設定する
                    if (tspCustomerCode)
                    {
                        // TSP.NSデータ作成部品
                        WriteTspSdRvDataAcs tspAcs = new WriteTspSdRvDataAcs();
                        try
                        {
                            // ---UPD 呉元嘯 2020/12/21 PMKOBETSU-4097の対応 ------>>>>
                            //bool tspFlg = tspAcs.GetTspSdRvData((CustomSerializeArrayList)paraObj, tspMode, this.TspCprtStWorkList);
                            bool dataFlg = false;
                            bool tspFlg = tspAcs.GetTspSdRvData((CustomSerializeArrayList)paraObj, tspMode, this.TspCprtStWorkList, out dataFlg);
                            // ---UPD 呉元嘯 2020/12/21 PMKOBETSU-4097の対応 ------<<<<

                            // TSP.NSデータ作成部品作成失敗の場合、ログを作成する。
                            if (!tspFlg)
                            {
                                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "TSP送信データ作成に失敗しました、\\Log\\TSP送信データ作成\\PMTSP01201A.Logを確認してください。");
                            }
                            else
                            {
                                // ---ADD 呉元嘯 2020/12/21 PMKOBETSU-4097の対応 ------>>>>
                                if (!dataFlg)
                                {
                                    SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "TSP送信対象ではない。");
                                }
                                else
                                {
                                // ---ADD 呉元嘯 2020/12/21 PMKOBETSU-4097の対応 ------<<<<
                                    SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "TSP送信データを作成しました。");
                                    // 送信処理:0自動
                                    if (sendCode == 0)
                                    {
                                        // TSP.NS自動送信処理
                                        Process.Start("PMTSP01100U.EXE", this.Parameter + " /A");
                                    }
                                }// ADD 呉元嘯 2020/12/21 PMKOBETSU-4097の対応
                            }
                        }
                        catch (Exception ex)
                        {
                            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "TSP送信データ作成に失敗しました、" + ex.Message.ToString());
                        }
                    }
                }
            }
            // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------<<<<
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○データ登録処理　終了");

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●データ登録後処理　開始");
            #region ●保存後処理
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●データ登録後戻りデータ分割処理　開始");
            #region データ分割
            //------------------------------------------------------
            // 保存後戻りデータ分割
            //------------------------------------------------------
            CustomSerializeArrayList salesList = new CustomSerializeArrayList(); // 売上データ(伝票単位情報)
            CustomSerializeArrayList acptList = new CustomSerializeArrayList(); // 受注データ(伝票単位情報)

            // --- ADD　2014/08/05 田建委 仕掛№10667---------->>>>>
            CustomSerializeArrayList salesListForDel = new CustomSerializeArrayList(); // 売上データ(伝票単位情報)
            CustomSerializeArrayList acptListForDel = new CustomSerializeArrayList(); // 受注データ(伝票単位情報)
            CustomSerializeArrayList salesSlipDataListForDel = new CustomSerializeArrayList();
            // --- ADD　2014/08/05 田建委 仕掛№10667----------<<<<<

            salesDataList = new ArrayList(); // 売上データ(伝票リスト情報)
            acptDataList = new ArrayList(); // 受注データ(伝票リスト情報)
            ArrayList retStockSlipInfoList = new ArrayList();
            ArrayList retUOEOrderDataList = new ArrayList();
            DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForWriting((CustomSerializeArrayList)paraObj, out salesDataList, out acptDataList, out retStockSlipInfoList, out retUOEOrderDataList);
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○データ登録後戻りデータ分割処理　終了");

            //------------------------------------------------------
            // 正常処理
            //------------------------------------------------------
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                stockSlipWorkTempList = new List<StockSlipWork>(); // ADD 2012/01/19 Redmine28098
                stockSlipWorkTempListForExist = new List<StockSlipWork>(); // 2012/01/20

                // 2010/06/12 Add >>>
                this._qrMakeCndtn = new SalesQRSendCtrlCndtn();
                this._qrMakeCndtn.EnterpriseCode = this._enterpriseCode;
                // 2010/06/12 Add <<<

                #region ●ログ出力
                SortedDictionary<string, ArrayList> logInfoDic = new SortedDictionary<string, ArrayList>();
                this.MakeLogInfoForSlipRevision(salesDataList, acptDataList, rowNoDic, ref logInfoDic);
                this.OutPutLogInfo(logInfoDic);
                #endregion

                #region データ格納用変数
                CustomSerializeArrayList salesSlipDataList = new CustomSerializeArrayList();
                ArrayList salesDetailArrayList = new ArrayList();
                CustomSerializeArrayList acceptAnOrderDataList = new CustomSerializeArrayList();
                ArrayList acceptAnOrderDetailArrayList = new ArrayList();
                #endregion

                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●印刷用売上キー取得　開始");
                #region 売上データ取得
                //------------------------------------------------------
                // 売上データ取得
                //------------------------------------------------------
                if (salesDataList.Count != 0)
                {
                    CustomSerializeArrayList list = new CustomSerializeArrayList();
                    this._printSalesKeyInfo = new Dictionary<string, SlipPrintInfoValue>();
                    // --- ADD ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
                    this._svSalesSlipWorkDic = new Dictionary<string, SalesSlipWork>();
                    this._svSalesDetailWorkDic = new Dictionary<string, ArrayList>();
                    // --- ADD ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<
                    for (int i = 0; i < salesDataList.Count; i++)
                    {
                        list = (CustomSerializeArrayList)salesDataList[i];

                        salesListForDel.Add(list); // ADD　2014/08/05 田建委 仕掛№10667

                        salesList = list;
                        string prtOutputKey = string.Empty;// ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応

                        foreach (object obj in list)
                        {
                            if (obj is SalesSlipWork)
                            {
                                SalesSlipWork salesSlipWork = (SalesSlipWork)obj;
                                //zhouzy update 2011.09.15 add begin
                                //SlipPrintInfoValue slipPrintInfoValue = new SlipPrintInfoValue(salesSlipWork.AcptAnOdrStatus, salesSlipNumBeforeSaveList[i]);
                                SlipPrintInfoValue slipPrintInfoValue = new SlipPrintInfoValue(salesSlipWork.AcptAnOdrStatus, salesSlipNumBeforeSaveList[i], 0);
                                //zhouzy update 2011.09.15 add end

                                // --- ADD m.suzuki 2010/02/09 ---------->>>>>
                                // 得意先取得
                                CustomerInfo customer;
                                int custStatus = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, salesSlipWork.EnterpriseCode, salesSlipWork.CustomerCode, true, false, out customer);
                                if (custStatus != (int)ConstantManagement.DB_Status.ctDB_NORMAL) customer = new CustomerInfo();
                                bool printKeyAddFlag = false;
                                // --- ADD m.suzuki 2010/02/09 ----------<<<<<
                                prtOutputKey = salesSlipWork.SalesSlipNum + salesSlipWork.AcptAnOdrStatus.ToString();// ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応

                                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)salesSlipWork.AcptAnOdrStatus)
                                {
                                    case SalesSlipInputAcs.AcptAnOdrStatusState.Estimate:
                                    case SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate:
                                        // --- UPD m.suzuki 2010/02/09 ---------->>>>>
                                        //if (this._salesSlipInputInitDataAcs.GetEstimateDefSet().EstimatePrtDiv == 0) this._printSalesKeyInfo.Add(salesSlipWork.SalesSlipNum, slipPrintInfoValue);
                                        switch (customer.EstimatePrtDiv)
                                        {
                                            // 0:標準 ← 見積全体設定
                                            default:
                                            case 0:
                                                printKeyAddFlag = (this._salesSlipInputInitDataAcs.GetEstimateDefSet().EstimatePrtDiv == 0);
                                                break;
                                            // 1:未使用 ← 0:しない
                                            case 1:
                                                printKeyAddFlag = false;
                                                break;
                                            // 2:使用 ← 1:する
                                            case 2:
                                                printKeyAddFlag = true;
                                                break;
                                        }
                                        if (printKeyAddFlag) this._printSalesKeyInfo.Add(salesSlipWork.SalesSlipNum, slipPrintInfoValue);
                                        // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
                                        if (!this._svSalesSlipWorkDic.ContainsKey(salesSlipWork.SalesSlipNum))
                                        {
                                            this._svSalesSlipWorkDic.Add(prtOutputKey, salesSlipWork);
                                        }
                                        // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<
                                        // --- UPD m.suzuki 2010/02/09 ----------<<<<<
                                        break;
                                    case SalesSlipInputAcs.AcptAnOdrStatusState.Sales:
                                        // 2010/06/12 Add >>>
                                        this._qrMakeCndtn.SalesSlipKeyList.Add(new SalesQRSendCtrlCndtn.QRSendCtrlSalesSlipKey(salesSlipWork.AcptAnOdrStatus, salesSlipWork.SalesSlipNum));
                                        if (salesSlipNumBeforeSaveList[i] != ctDefaultSalesSlipNum) this._qrMakeCndtn.ReissueDiv = true;
                                        // 2010/06/12 Add <<<
                                        // --- UPD m.suzuki 2010/02/09 ---------->>>>>
                                        //if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SalesSlipPrtDiv == 0) this._printSalesKeyInfo.Add(salesSlipWork.SalesSlipNum, slipPrintInfoValue);
                                        switch (customer.SalesSlipPrtDiv)
                                        {
                                            // 0:標準 ← 売上全体設定
                                            default:
                                            case 0:
                                                printKeyAddFlag = (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SalesSlipPrtDiv == 0);
                                                break;
                                            // 1:未使用 ← 0:しない
                                            case 1:
                                                printKeyAddFlag = false;
                                                break;
                                            // 2:使用 ← 1:する
                                            case 2:
                                                printKeyAddFlag = true;
                                                break;
                                        }
                                        //zhouzy update 2011.09.15 add begin
                                        //if (printKeyAddFlag) this._printSalesKeyInfo.Add(salesSlipWork.SalesSlipNum, slipPrintInfoValue);
                                        if (printKeyAddFlag)
                                        {
                                            //印刷する
                                            slipPrintInfoValue.NomalSalesSlipPrintFlag = 0;
                                        }
                                        else
                                        {
                                            //印刷しない
                                            slipPrintInfoValue.NomalSalesSlipPrintFlag = 1;
                                        }
                                        // update by zhouzy 20110917  begin
                                        //if (debitNoteDiv != 1) // 赤伝区分(0:黒伝 1:赤伝 2:元黒)// Del 2012/01/16 duzg for Redmine#28011
                                        if (debitNoteDiv != 1 || (debitNoteDiv == 1 && originSalesSlipDiv)) // 赤伝区分(0:黒伝 1:赤伝 2:元黒)// Add 2012/01/16 duzg for Redmine#28011
                                        {
                                            this._printSalesKeyInfo.Add(salesSlipWork.SalesSlipNum, slipPrintInfoValue);
                                        }
                                        // update by zhouzy 20110917 end
                                        //zhouzy update 2011.09.15 add end
                                        // --- UPD m.suzuki 2010/02/09 ----------<<<<<
                                        // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
                                        if (!this._svSalesSlipWorkDic.ContainsKey(salesSlipWork.SalesSlipNum))
                                        {
                                            this._svSalesSlipWorkDic.Add(prtOutputKey, salesSlipWork);
                                        }
                                        // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<
                                        break;
                                    case SalesSlipInputAcs.AcptAnOdrStatusState.Shipment:
                                        // --- UPD m.suzuki 2010/02/09 ---------->>>>>
                                        //if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().ShipmSlipPrtDiv == 0) this._printSalesKeyInfo.Add(salesSlipWork.SalesSlipNum, slipPrintInfoValue);
                                        switch (customer.ShipmSlipPrtDiv)
                                        {
                                            // 0:標準 ← 売上全体設定
                                            default:
                                            case 0:
                                                printKeyAddFlag = (this._salesSlipInputInitDataAcs.GetSalesTtlSt().ShipmSlipPrtDiv == 0);
                                                break;
                                            // 1:未使用 ← 0:しない
                                            case 1:
                                                printKeyAddFlag = false;
                                                break;
                                            // 2:使用 ← 1:する
                                            case 2:
                                                printKeyAddFlag = true;
                                                break;
                                        }
                                        if (printKeyAddFlag) this._printSalesKeyInfo.Add(salesSlipWork.SalesSlipNum, slipPrintInfoValue);
                                        // --- UPD m.suzuki 2010/02/09 ----------<<<<<
                                        break;
                                    case SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder:
                                        // --- UPD m.suzuki 2010/02/09 ---------->>>>>
                                        //if (this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt().AcpOdrrSlipPrtDiv == 1) this._printSalesKeyInfo.Add(salesSlipWork.SalesSlipNum, slipPrintInfoValue);
                                        switch (customer.AcpOdrrSlipPrtDiv)
                                        {
                                            // 0:標準 ← 受注全体設定
                                            default:
                                            case 0:
                                                printKeyAddFlag = (this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt().AcpOdrrSlipPrtDiv == 1);
                                                break;
                                            // 1:未使用 ← 0:しない
                                            case 1:
                                                printKeyAddFlag = false;
                                                break;
                                            // 2:使用 ← 1:する
                                            case 2:
                                                printKeyAddFlag = true;
                                                break;
                                        }
                                        if (printKeyAddFlag) this._printSalesKeyInfo.Add(salesSlipWork.SalesSlipNum, slipPrintInfoValue);
                                        // --- UPD m.suzuki 2010/02/09 ----------<<<<<
                                        break;
                                    default:
                                        break;
                                }
                            }
                            // --- ADD ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
                            if (_svSalesSlipWorkDic.ContainsKey(prtOutputKey) && obj is ArrayList && ((ArrayList)obj).Count > 0)
                            {
                                ArrayList al = (ArrayList)obj;
                                if (al[0].GetType() == typeof(SalesDetailWork))
                                {
                                    _svSalesDetailWorkDic.Add(prtOutputKey, al);
                                }                            
                            }
                            // --- ADD ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<
                        }
                    }
                }
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○印刷用売上キー取得　終了");

                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●印刷用受注キー取得　開始");
                #region 受注データ取得
                //------------------------------------------------------
                // 受注データ取得
                //------------------------------------------------------
                if (acptDataList.Count != 0)
                {
                    CustomSerializeArrayList list = new CustomSerializeArrayList();
                    this._printAcptKeyInfo = new Dictionary<string, SlipPrintInfoValue>();
                    for (int i = 0; i < acptDataList.Count; i++)
                    {
                        list = (CustomSerializeArrayList)acptDataList[i];

                        // --- DEL 2013/04/18 T.Nishi ---------->>>>>
  　　　　              //// --- ADD 2013/04/15 T.Nishi ---------->>>>>
                        //if (this._printAcptKeyInfo.Count == 0)
                        //{
  　　　　              //// --- ADD 2013/04/15 T.Nishi ----------<<<<<
                        // --- DEL 2013/04/18 T.Nishi ----------<<<<<
                            acptList = list;
                        // --- DEL 2013/04/18 T.Nishi ---------->>>>>
  　　　　              //// --- ADD 2013/04/15 T.Nishi ---------->>>>>
                        //}
  　　　　              //// --- ADD 2013/04/15 T.Nishi ----------<<<<<
                        // --- DEL 2013/04/18 T.Nishi ----------<<<<<

                        acptListForDel.Add(list); // ADD　2014/08/05 田建委 仕掛№10667

                        // ADD 2012/02/08 李占川 Redmine#28281 --- >>>>>
                        ArrayList SalesDetailWorkList = list[1] as ArrayList;
                        SalesDetailWork salesDetailWork = null;
                        foreach (SalesDetailWork detailWork in SalesDetailWorkList)
                        {
                            salesDetailWork = detailWork;
                            if (detailWork.WayToOrder != 2)
                            {                                
                                break;
                            }
                            else
                            {
                                continue;
                            }
                        }
                        // ADD 2012/02/08 李占川 Redmine#28281 --- <<<<

                        foreach (object obj in list)
                        {
                            if (obj is SalesSlipWork)
                            {
                                SalesSlipWork acptSlipWork = (SalesSlipWork)obj;
                                //zhouzy update 2011.09.15 add begin
                                //SlipPrintInfoValue slipPrintInfoValue = new SlipPrintInfoValue(acptSlipWork.AcptAnOdrStatus, acptSlipNumBeforeSaveList[i]);
                                SlipPrintInfoValue slipPrintInfoValue = new SlipPrintInfoValue(acptSlipWork.AcptAnOdrStatus, acptSlipNumBeforeSaveList[i], 0);
                                //zhouzy update 2011.09.15 add end

                                // --- ADD m.suzuki 2010/02/09 ---------->>>>>
                                // 得意先取得
                                CustomerInfo customer;
                                int custStatus = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, acptSlipWork.EnterpriseCode, acptSlipWork.CustomerCode, true, false, out customer);
                                if (custStatus != (int)ConstantManagement.DB_Status.ctDB_NORMAL) customer = new CustomerInfo();
                                bool printKeyAddFlag = false;
                                // --- ADD m.suzuki 2010/02/09 ----------<<<<<

                                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)acptSlipWork.AcptAnOdrStatus)
                                {
                                    case SalesSlipInputAcs.AcptAnOdrStatusState.Estimate:
                                    case SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate:
                                    case SalesSlipInputAcs.AcptAnOdrStatusState.Sales:
                                    case SalesSlipInputAcs.AcptAnOdrStatusState.Shipment:
                                        break;
                                    case SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder:
                                        // --- UPD m.suzuki 2010/02/09 ---------->>>>>
                                        //if ( this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt().AcpOdrrSlipPrtDiv == 1 ) this._printAcptKeyInfo.Add( acptSlipWork.SalesSlipNum, slipPrintInfoValue );
                                        switch (customer.AcpOdrrSlipPrtDiv)
                                        {
                                            // 0:標準 ← 受注全体設定
                                            default:
                                            case 0:
                                                printKeyAddFlag = (this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt().AcpOdrrSlipPrtDiv == 1);
                                                break;
                                            // 1:未使用 ← 0:しない
                                            case 1:
                                                printKeyAddFlag = false;
                                                break;
                                            // 2:使用 ← 1:する
                                            case 2:
                                                printKeyAddFlag = true;
                                                break;
                                        }
                                        // UPD 2012/02/08 李占川 Redmine#28281 --- >>>>>
                                        //if (printKeyAddFlag) this._printAcptKeyInfo.Add(acptSlipWork.SalesSlipNum, slipPrintInfoValue);
                                        // 伝発発注した場合の受注データ作成時は受注伝票の印刷を行わないように修正する。
                                        if (salesDetailWork.WayToOrder != 2)
                                        {
                                            if (printKeyAddFlag) this._printAcptKeyInfo.Add(acptSlipWork.SalesSlipNum, slipPrintInfoValue);
                                        }
                                        // UPD 2012/02/08 李占川 Redmine#28281 --- <<<<
                                        // --- UPD m.suzuki 2010/02/09 ----------<<<<<
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                }
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○印刷用受注キー取得　終了");

                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●メイン情報キャッシュ　開始");
                #region 売上情報
                //------------------------------------------------------
                // 売上情報
                //------------------------------------------------------
                if (salesList.Count == 0)
                {
                    salesSlipDataList = acptList;
                }
                else
                {
                    salesSlipDataList = salesList;
                }
                if (salesSlipDataList.Count != 0)
                {
                    //>>>2010/02/26
                    //SalesSlipWork salesSlipWork;
                    //SalesDetailWork[] salesDetailWorkArray;
                    //AddUpOrgSalesDetailWork[] addUpOrgSalesDetailWorkArray;
                    //DepsitDataWork depsitDataWork;
                    //DepositAlwWork depositAlwWork;
                    //StockWork[] stockWorkArray;
                    //AcceptOdrCarWork[] acceptOdrCarWorkArray;

                    //// CustomSerializeArrayList分割処理
                    //DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForWriting(salesSlipDataList, out salesSlipWork, out salesDetailWorkArray, out addUpOrgSalesDetailWorkArray, out depsitDataWork, out depositAlwWork, out stockWorkArray, out acceptOdrCarWorkArray);

                    //// --- ADD 2010/03/01 ---------->>>>>
                    //if (this._addUpOrgSalesDetailWorkList == null)
                    //{
                    //    this._addUpOrgSalesDetailWorkList = new List<AddUpOrgSalesDetailWork>();
                    //}
                    //else
                    //{
                    //    this._addUpOrgSalesDetailWorkList.Clear();
                    //}

                    //if (addUpOrgSalesDetailWorkArray != null && addUpOrgSalesDetailWorkArray.Length > 0)
                    //{
                    //    foreach(AddUpOrgSalesDetailWork work in addUpOrgSalesDetailWorkArray)
                    //    {
                    //        this._addUpOrgSalesDetailWorkList.Add(work);
                    //    }
                    //}
                    //// --- ADD 2010/03/01 ----------<<<<<

                    //// 売上データワークオブジェクト→売上データオブジェクト
                    //SalesSlip salesSlip = ConvertSalesSlip.UIDataFromParamData(salesSlipWork);

                    //// 売上明細データワークオブジェクトリスト→売上明細データオブジェクトリスト
                    //List<SalesDetail> salesDetailList = ConvertSalesSlip.UIDataFromParamData(salesDetailWorkArray);

                    //// 売上明細データテーブルクリア処理
                    //this.ClearData();

                    //// 読込用売上データ調整処理
                    //this.AdjustSalesReadDBData(ref salesSlip, ref salesDetailList);

                    //// 売上データキャッシュ処理
                    //this.Cache(salesSlip);

                    //// 売上データキャッシュ処理（DB読込データ）
                    //this.CacheDBData(salesSlip);

                    //// 受注データクリア
                    //this.ClearAcptAnOrderData();

                    //// 受注マスタ(車両)ワークオブジェクト配列→受注マスタ(車両)オブジェクトリスト
                    //List<AcceptOdrCar> acceptOdrCarList = ConvertSalesSlip.UIDataFromParamData(acceptOdrCarWorkArray);

                    //// 最終行の車両情報を保持
                    //if (acceptOdrCarList != null) this.SaveLastCarInfo(salesDetailList, acceptOdrCarList);

#if false // データ再読込
                    SalesSlipWork salesSlipWork;
                    SalesDetailWork[] salesDetailWorkArray;
                    AddUpOrgSalesDetailWork[] addUpOrgSalesDetailWorkArray;
                    DepsitDataWork depsitDataWork;
                    DepositAlwWork depositAlwWork;
                    StockWork[] stockWorkArray;
                    AcceptOdrCarWork[] acceptOdrCarWorkArray;

                    // CustomSerializeArrayList分割処理
                    DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForWriting(salesSlipDataList, out salesSlipWork, out salesDetailWorkArray, out addUpOrgSalesDetailWorkArray, out depsitDataWork, out depositAlwWork, out stockWorkArray, out acceptOdrCarWorkArray);

                    // 売上データワークオブジェクト→売上データオブジェクト
                    SalesSlip salesSlip = ConvertSalesSlip.UIDataFromParamData(salesSlipWork);

                    // 売上明細データワークオブジェクトリスト→売上明細データオブジェクトリスト
                    List<SalesDetail> salesDetailList = ConvertSalesSlip.UIDataFromParamData(salesDetailWorkArray);

                    // 計上元売上明細データワークオブジェクトリスト→計上元売上明細データオブジェクトリスト
                    List<SalesDetail> addUpSrcDetailList = ConvertSalesSlip.UIDataFromParamData(addUpOrgSalesDetailWorkArray);

                    // 受注マスタ(車両)ワークオブジェクト配列→受注マスタ(車両)オブジェクトリスト
                    List<AcceptOdrCar> acceptOdrCarList = ConvertSalesSlip.UIDataFromParamData(acceptOdrCarWorkArray);

                    // 売上明細データテーブルクリア処理
                    this.ClearData();

                    // 入力モード設定処理
                    this.SettingInputMode(salesSlip);

                    // 読込用売上データ調整処理
                    this.AdjustSalesReadDBData(ref salesSlip, ref salesDetailList);

                    // 売上データキャッシュ処理
                    this.Cache(salesSlip);

                    // 入金データキャッシュ処理
                    if (depsitDataWork != null)
                    {
                        SearchDepsitMain depsitMain = ConvertSalesSlip.UIDataFromParamData(depsitDataWork);
                        SearchDepositAlw depositAlw = (SearchDepositAlw)DBAndXMLDataMergeParts.CopyPropertyInClass(depositAlwWork, typeof(SearchDepositAlw));
                        this.Cache(depsitMain, depositAlw);
                    }

                    // 売上データキャッシュ処理（DB読込データ）
                    this.CacheDBData(salesSlip);

                    // 売上明細データキャッシュ処理
                    this.CacheSalesDetail(salesSlip, salesSlip, salesDetailList, addUpSrcDetailList, this._salesDetailDataTable);

                    // 在庫調整
                    List<StockWork> stockWorkList = null;
                    if ((stockWorkArray != null) && (stockWorkArray.Length > 0))
                    {
                        if (stockWorkList == null) stockWorkList = new List<StockWork>();
                        stockWorkList.AddRange(stockWorkArray);
                    }

                    // 在庫データキャッシュ処理
                    this.CacheStockInfo(stockWorkList);

                    // 現在庫数調整
                    this.SalesDetailStockInfoAdjust();

                    // 売上明細データキャッシュ処理（DB読込データ）
                    this.CacheSalesDetailDBData(salesDetailList);

                    // 車両情報キャッシュ処理
                    this.CacheCarInfo(salesSlip, salesDetailList, acceptOdrCarList);

                    // 売上明細行初期行数追加処理
                    this.AddSalesDetailRowInitialRowCount();

                    // 売上金額計算処理
                    this.CalculationSalesMoney(salesDetailList);

                    // 原価金額計算処理
                    this.CalculationCost(salesDetailList);

                    // 明細粗利率設定処理
                    this.SettingSalesDetailRowGrossProfitRate(salesDetailList);

                    // 受注データクリア
                    this.ClearAcptAnOrderData();

                    if (salesList.Count == 0)
                    {
                    //#region 受注情報
                        //------------------------------------------------------
                        // 受注情報
                        //------------------------------------------------------
                        // 親データが受注の場合のみキャッシュします。
                        //------------------------------------------------------
                        acceptAnOrderDataList = acptList;
                        if (acceptAnOrderDataList.Count != 0)
                        {
                            SalesSlipWork acptAnOdrSlipWork;
                            SalesDetailWork[] acptAnOdrDetailWorkArray;
                            AddUpOrgSalesDetailWork[] tempAddUpOrgSalesDetailWorkArray;
                            DepsitDataWork tempDepsitDataWork;
                            DepositAlwWork tempDepositAlwWork;
                            StockWork[] tempStockWorkArray;
                            AcceptOdrCarWork[] tempAcceptOdrCarWorkArray;

                            // CustomSerializeArrayList分割処理
                            DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForWriting(acceptAnOrderDataList, out acptAnOdrSlipWork, out acptAnOdrDetailWorkArray, out tempAddUpOrgSalesDetailWorkArray, out tempDepsitDataWork, out tempDepositAlwWork, out tempStockWorkArray, out tempAcceptOdrCarWorkArray);

                            // 受注データワーククラス→受注データクラス
                            SalesSlip salesSlipAcptAnOdr = ConvertSalesSlip.UIDataFromParamData(acptAnOdrSlipWork);

                            // 受注データキャッシュ処理
                            this.CacheAcptAnOdrSlip(salesSlipAcptAnOdr);

                            // 受注明細データワーク配列→受注明細データワーククラスリスト
                            List<SalesDetail> salesDetailAcptAnOdrList = ConvertSalesSlip.UIDataFromParamData(acptAnOdrDetailWorkArray);

                            // 受注明細データキャッシュ処理
                            this.CacheAcptAnOdrDetail(salesDetailAcptAnOdrList);

                            // 現在庫数調整
                            this.AcptAnOdrDetailStockInfoAdjust();
                        }
                        //#endregion
                    }
#endif

                    if (!scmFlg)
                    {
                        SalesSlipWork salesSlipWork;
                        SalesDetailWork[] salesDetailWorkArray;
                        AddUpOrgSalesDetailWork[] addUpOrgSalesDetailWorkArray;
                        DepsitDataWork depsitDataWork;
                        DepositAlwWork depositAlwWork;
                        StockWork[] stockWorkArray;
                        AcceptOdrCarWork[] acceptOdrCarWorkArray;

                        SCMAcOdrDataWork scmAcOdrDataWork;
                        SCMAcOdrDtlIqWork[] scmAcOdrDtlIqWorkArray;
                        SCMAcOdrDtlAsWork[] scmAcOdrDtlAsWorkArray;
                        SCMAcOdrDtCarWork scmAcOdrDtCarWork;

                        // CustomSerializeArrayList分割処理
                        DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForWriting(salesSlipDataList, out salesSlipWork, out salesDetailWorkArray, out addUpOrgSalesDetailWorkArray, out depsitDataWork, out depositAlwWork, out stockWorkArray, out acceptOdrCarWorkArray, out scmAcOdrDataWork, out scmAcOdrDtlIqWorkArray, out scmAcOdrDtlAsWorkArray, out scmAcOdrDtCarWork);

                        // --- ADD　2014/08/05 田建委 仕掛№10667---------->>>>>
                        List<AddUpOrgSalesDetailWork> addUpOrgSalesDetailWorkList = new List<AddUpOrgSalesDetailWork>();
                        if (salesListForDel.Count == 0)
                        {
                            salesSlipDataListForDel = acptListForDel;
                        }
                        else
                        {
                            salesSlipDataListForDel = salesListForDel;
                        }

                        foreach (CustomSerializeArrayList paramList in salesSlipDataListForDel)
                        {
                            AddUpOrgSalesDetailWork[] addUpOrgSalesDetailWorkArr;
                            DivisionCustomSerializeArrayListForDel(paramList, out addUpOrgSalesDetailWorkArr);

                            if (addUpOrgSalesDetailWorkArr != null && addUpOrgSalesDetailWorkArr.Length > 0)
                            {
                                foreach (AddUpOrgSalesDetailWork work in addUpOrgSalesDetailWorkArr)
                                {
                                    addUpOrgSalesDetailWorkList.Add(work);
                                }
                            }

                        }
                        // --- ADD　2014/08/05 田建委 仕掛№10667----------<<<<<

                        // --- ADD 2010/03/01 ---------->>>>>
                        if (this._addUpOrgSalesDetailWorkList == null)
                        {
                            this._addUpOrgSalesDetailWorkList = new List<AddUpOrgSalesDetailWork>();
                        }
                        else
                        {
                            this._addUpOrgSalesDetailWorkList.Clear();
                        }

                        // --- DEL　2014/08/05 田建委 仕掛№10667---------->>>>>
                        //if (addUpOrgSalesDetailWorkArray != null && addUpOrgSalesDetailWorkArray.Length > 0)
                        //{
                        //    foreach (AddUpOrgSalesDetailWork work in addUpOrgSalesDetailWorkArray)
                        //    {
                        //        this._addUpOrgSalesDetailWorkList.Add(work);
                        //    }
                        //}
                        // --- DEL　2014/08/05 田建委 仕掛№10667----------<<<<<

                        this._addUpOrgSalesDetailWorkList = addUpOrgSalesDetailWorkList; // ADD　2014/08/05 田建委 仕掛№10667
                        // --- ADD 2010/03/01 ----------<<<<<

                        // 売上データワークオブジェクト→売上データオブジェクト
                        SalesSlip salesSlip = ConvertSalesSlip.UIDataFromParamData(salesSlipWork);

                        // 売上明細データワークオブジェクトリスト→売上明細データオブジェクトリスト
                        List<SalesDetail> salesDetailList = ConvertSalesSlip.UIDataFromParamData(salesDetailWorkArray);

                        // 売上明細データテーブルクリア処理
                        this.ClearData();

                        // 読込用売上データ調整処理
                        this.AdjustSalesReadDBData(ref salesSlip, ref salesDetailList);

                        // 売上データキャッシュ処理
                        this.Cache(salesSlip);

                        // 売上データキャッシュ処理（DB読込データ）
                        this.CacheDBData(salesSlip);

                        // 受注データクリア
                        this.ClearAcptAnOrderData();

                        // 受注マスタ(車両)ワークオブジェクト配列→受注マスタ(車両)オブジェクトリスト
                        List<AcceptOdrCar> acceptOdrCarList = ConvertSalesSlip.UIDataFromParamData(acceptOdrCarWorkArray);

                        // 最終行の車両情報を保持
                        if (acceptOdrCarList != null) this.SaveLastCarInfo(salesDetailList, acceptOdrCarList);
                    }
                    else
                    {
                        SalesSlipWork salesSlipWork;
                        SalesDetailWork[] salesDetailWorkArray;
                        AddUpOrgSalesDetailWork[] addUpOrgSalesDetailWorkArray;
                        DepsitDataWork depsitDataWork;
                        DepositAlwWork depositAlwWork;
                        StockWork[] stockWorkArray;
                        AcceptOdrCarWork[] acceptOdrCarWorkArray;

                        SCMAcOdrDataWork scmAcOdrDataWork;
                        SCMAcOdrDtlIqWork[] scmAcOdrDtlIqWorkArray;
                        SCMAcOdrDtlAsWork[] scmAcOdrDtlAsWorkArray;
                        SCMAcOdrDtCarWork scmAcOdrDtCarWork;

                        // CustomSerializeArrayList分割処理
                        DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForWriting(salesSlipDataList, out salesSlipWork, out salesDetailWorkArray, out addUpOrgSalesDetailWorkArray, out depsitDataWork, out depositAlwWork, out stockWorkArray, out acceptOdrCarWorkArray, out scmAcOdrDataWork, out scmAcOdrDtlIqWorkArray, out scmAcOdrDtlAsWorkArray, out scmAcOdrDtCarWork);

                        // 売上データワークオブジェクト→売上データオブジェクト
                        SalesSlip salesSlip = ConvertSalesSlip.UIDataFromParamData(salesSlipWork);

                        salesSlip.InquiryNumber = scmAcOdrDataWork.InquiryNumber;
                        if (scmAcOdrDataWork.AnswerDivCd == 10) // 一部回答
                        {
                            salesSlip.AnswerDiv = 1;
                        }
                        else
                        {
                            salesSlip.AnswerDiv = 0;
                        }
                        //>>>2010/04/08
                        salesSlip.InqOrdDivCd = scmAcOdrDataWork.InqOrdDivCd;
                        //<<<2010/04/08

                        // 売上明細データワークオブジェクトリスト→売上明細データオブジェクトリスト
                        List<SalesDetail> salesDetailList = ConvertSalesSlip.UIDataFromParamData(salesDetailWorkArray);

                        // 計上元売上明細データワークオブジェクトリスト→計上元売上明細データオブジェクトリスト
                        List<SalesDetail> addUpSrcDetailList = ConvertSalesSlip.UIDataFromParamData(addUpOrgSalesDetailWorkArray);

                        // 受注マスタ(車両)ワークオブジェクト配列→受注マスタ(車両)オブジェクトリスト
                        List<AcceptOdrCar> acceptOdrCarList = ConvertSalesSlip.UIDataFromParamData(acceptOdrCarWorkArray);

                        // 最終行の車両情報を保持
                        //if (acceptOdrCarList != null) this.SaveLastCarInfo(salesDetailList, acceptOdrCarList);

                        // 売上明細データテーブルクリア処理
                        this.ClearData();

                        // 入力モード設定処理
                        this.SettingInputMode(salesSlip);

                        // 読込用売上データ調整処理
                        this.AdjustSalesReadDBData(ref salesSlip, ref salesDetailList);

                        // 売上データキャッシュ処理
                        this.Cache(salesSlip);

                        // 入金データキャッシュ処理
                        if (depsitDataWork != null)
                        {
                            SearchDepsitMain depsitMain = ConvertSalesSlip.UIDataFromParamData(depsitDataWork);
                            SearchDepositAlw depositAlw = (SearchDepositAlw)DBAndXMLDataMergeParts.CopyPropertyInClass(depositAlwWork, typeof(SearchDepositAlw));
                            this.Cache(depsitMain, depositAlw);
                        }

                        // 売上データキャッシュ処理（DB読込データ）
                        this.CacheDBData(salesSlip);

                        // 売上明細データキャッシュ処理
                        this.CacheSalesDetail(salesSlip, salesSlip, salesDetailList, addUpSrcDetailList, this._salesDetailDataTable);

                        // 在庫調整
                        List<StockWork> stockWorkList = null;
                        if ((stockWorkArray != null) && (stockWorkArray.Length > 0))
                        {
                            if (stockWorkList == null) stockWorkList = new List<StockWork>();
                            stockWorkList.AddRange(stockWorkArray);
                        }

                        // 在庫データキャッシュ処理
                        this.CacheStockInfo(stockWorkList);

                        // 現在庫数調整
                        this.SalesDetailStockInfoAdjust();

                        // 売上明細データキャッシュ処理（DB読込データ）
                        this.CacheSalesDetailDBData(salesDetailList);

                        // 車両情報キャッシュ処理
                        this.CacheCarInfo(salesSlip, salesDetailList, acceptOdrCarList);

                        // 売上明細行初期行数追加処理
                        this.AddSalesDetailRowInitialRowCount();

                        // 売上金額計算処理
                        this.CalculationSalesMoney(salesDetailList);

                        // 原価金額計算処理
                        this.CalculationCost(salesDetailList);

                        // 明細粗利率設定処理
                        this.SettingSalesDetailRowGrossProfitRate(salesDetailList);

                        // 受注データクリア
                        this.ClearAcptAnOrderData();

                        if (salesList.Count == 0)
                        {
                            #region 受注情報
                            //------------------------------------------------------
                            // 受注情報
                            //------------------------------------------------------
                            // 親データが受注の場合のみキャッシュします。
                            //------------------------------------------------------
                            acceptAnOrderDataList = acptList;
                            if (acceptAnOrderDataList.Count != 0)
                            {
                                SalesSlipWork acptAnOdrSlipWork;
                                SalesDetailWork[] acptAnOdrDetailWorkArray;
                                AddUpOrgSalesDetailWork[] tempAddUpOrgSalesDetailWorkArray;
                                DepsitDataWork tempDepsitDataWork;
                                DepositAlwWork tempDepositAlwWork;
                                StockWork[] tempStockWorkArray;
                                AcceptOdrCarWork[] tempAcceptOdrCarWorkArray;

                                // CustomSerializeArrayList分割処理
                                DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForWriting(acceptAnOrderDataList, out acptAnOdrSlipWork, out acptAnOdrDetailWorkArray, out tempAddUpOrgSalesDetailWorkArray, out tempDepsitDataWork, out tempDepositAlwWork, out tempStockWorkArray, out tempAcceptOdrCarWorkArray);

                                // 受注データワーククラス→受注データクラス
                                SalesSlip salesSlipAcptAnOdr = ConvertSalesSlip.UIDataFromParamData(acptAnOdrSlipWork);

                                // 受注データキャッシュ処理
                                this.CacheAcptAnOdrSlip(salesSlipAcptAnOdr);

                                // 受注明細データワーク配列→受注明細データワーククラスリスト
                                List<SalesDetail> salesDetailAcptAnOdrList = ConvertSalesSlip.UIDataFromParamData(acptAnOdrDetailWorkArray);

                                // 受注明細データキャッシュ処理
                                this.CacheAcptAnOdrDetail(salesDetailAcptAnOdrList);

                                // 現在庫数調整
                                this.AcptAnOdrDetailStockInfoAdjust();
                            }
                            #endregion
                        }
                    }
                    //<<<2010/02/26

                    // データ変更フラグプロパティをfalseにする
                    this.IsDataChanged = false;
                }
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○メイン情報キャッシュ　終了");

#if false // 仕入、発注キャッシュ
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●仕入情報キャッシュ　開始");
                #region 仕入情報
                //------------------------------------------------------
                // 仕入情報
                //------------------------------------------------------
                if (retStockSlipInfoList.Count != 0)
                {
                    // 仕入情報キャッシュ処理
                    this.CacheStockSlipInfo(retStockSlipInfoList);
                }
                // 売上明細データテーブル仕入情報設定処理
                this.SettingSalesDetailRowStockTempInfo();
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○仕入情報キャッシュ　終了");

                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "●UOE発注情報キャッシュ　開始");
                #region UOE発注情報
                //------------------------------------------------------
                // UOE発注情報
                //------------------------------------------------------
                if ((retUOEOrderDataList.Count != 0) &&
                    (this._salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)) // 親データが受注の場合のみ
                {
                    // UOE発注情報キャッシュ処理
                    this.CacheUOEOrderInfo(retUOEOrderDataList);
                }
                // 売上明細データテーブルUOE発注情報設定処理
                this.SettingSalesDetailRowUOEOrderDtl();
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○UOE発注情報キャッシュ　終了");
#endif
                // zhouzy add 20110919 begin
                //SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "PrintSlip", "●印刷処理　開始");
                //// --- ADD 2009/11/24 ---------->>>>>
                //if (_printSlipFlag == true)
                //{
                //    #region 印刷処理
                //    //------------------------------------------------------
                //    // 伝票印刷処理
                //    //------------------------------------------------------
                //    this._printSlipThread = new Thread(this.PrintSlipThread);
                //    SalesSlipInputInitDataAcs.LogWrite("MAHNB01012AA", "SaveDBData", "PrintSlipThread 開始");
                //    this._printSlipThread.Start();

                //    #endregion
                //}
                //else
                //{
                //    _printSlipFlag = true;
                //}
                //// --- ADD 2009/11/24 ----------<<<<<
                //SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "PrintSlip", "○印刷処理　終了");
                // zhouzy add 20110919 end

                // ADD 2012/10/17 湯上 SCM障害対応 №10414------------------------>>>>>
                this._salesSlipNumList = new List<string>();
                // ADD 2012/10/17 湯上 SCM障害対応 №10414------------------------<<<<<

                // ---ADD 2011/02/11-------------->>>>
                if (salesDataList.Count != 0)
                {
                    CustomSerializeArrayList list = new CustomSerializeArrayList();
                    for (int i = 0; i < salesDataList.Count; i++)
                    {
                        list = (CustomSerializeArrayList)salesDataList[i];
                        this._surveyUseLogOutputAcs.Succeed(list);
                        // ADD 2012/10/17 湯上 SCM障害対応 №10414------------------------>>>>>
                        for (int index = 0; index < list.Count; index++)
                        {
                            if (list[index] is SalesSlipWork)
                            {
                                SalesSlipWork tempSalesSlipWork = (SalesSlipWork)list[index];
                                this._salesSlipNumList.Add(tempSalesSlipWork.SalesSlipNum);
                            }
                        }
                        // ADD 2012/10/17 湯上 SCM障害対応 №10414------------------------<<<<<
                    }
                }
                // ---ADD 2011/02/11--------------<<<<
            }
            //------------------------------------------------------
            // 重複
            //------------------------------------------------------
            else if (status == (int)ConstantManagement.DB_Status.ctDB_DUPLICATE)
            {
                // --- 2015/09/08 黄興貴 Redmine#47045 レビュー指摘対応 ---------->>>>>
                try
                {
                // --- 2015/09/08 黄興貴 Redmine#47045 レビュー指摘対応 ----------<<<<<

                    // --- ADD 2015/08/22 黄興貴 Redmine#47045 ---------->>>>>
                    bool logFlg = false;

                    // 上記保存の結果によって、伝票番号を取得した後、ログに記入します。
                    if (salesDataList != null && salesDataList.Count != 0)
                    {
                        CustomSerializeArrayList list = new CustomSerializeArrayList();

                        for (int i = 0; i < salesDataList.Count; i++)
                        {
                            list = (CustomSerializeArrayList)salesDataList[i];

                            foreach (object obj in list)
                            {
                                if (obj is SalesSlipWork)
                                {
                                    SalesSlipWork logForSlipWork = (SalesSlipWork)obj;
                                    SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "重複エラーが発生しました。（伝票番号：" + logForSlipWork.SalesSlipNum + "）");
                                    logFlg = true;
                                }
                            }
                        }
                    }

                    // 上記保存の結果によって、伝票番号を取得しない場合、
                    if (!logFlg)
                    {
                        SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "重複エラーが発生しました。（伝票番号：不明）");
                    }
                    // --- ADD 2015/08/22 黄興貴 Redmine#47045 ----------<<<<<

                    CustomSerializeArrayList salesSlipDataList = salesList;
                    SalesSlipWork salesSlipWork;
                    SalesDetailWork[] salesDetailWorkArray;
                    AddUpOrgSalesDetailWork[] addUpOrgSalesDetailWorkArray;
                    DepsitDataWork depsitDataWork;
                    DepositAlwWork depositAlwWork;
                    StockWork[] stockWorkArray;
                    AcceptOdrCarWork[] acceptOdrCarWorkArray;

                    // CustomSerializeArrayList分割処理
                    DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForWriting(salesSlipDataList, out salesSlipWork, out salesDetailWorkArray, out addUpOrgSalesDetailWorkArray, out depsitDataWork, out depositAlwWork, out stockWorkArray, out acceptOdrCarWorkArray);

                    // 売上データワーククラス→売上データクラス
                    SalesSlip salesSlip = ConvertSalesSlip.UIDataFromParamData(salesSlipWork);

                    // 売上明細データワーククラス→売上明細データクラス
                    List<SalesDetail> salesDetailList = ConvertSalesSlip.UIDataFromParamData(salesDetailWorkArray);

                    // 売上明細行初期行数追加処理
                    this.AddSalesDetailRowInitialRowCount();

                // --- 2015/09/08 黄興貴 Redmine#47045 レビュー指摘対応 ---------->>>>>
                }
                catch
                {
                    return status;
                }
                // --- 2015/09/08 黄興貴 Redmine#47045 レビュー指摘対応 ----------<<<<<
            }
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "○データ登録後処理　終了");

            return status;
        }

        // ADD 2014/11/06 chenyd For PM-SCM仕掛一覧№85 ｼｽﾃﾑﾃｽﾄ障害№4対応 ---------------->>>>>>>>>>
        /// <summary>リモートDB </summary>
        private readonly SCMInquiryDBAgent _scmInquiryDB = new SCMInquiryDBAgent();

        /// <summary>リモートDBを取得します。</summary>
        private SCMInquiryDBAgent SCMInquiryDB { get { return _scmInquiryDB; } }

        /// <summary>
        ///  回答排他チェック
        /// </summary>
        /// <param name="paraObj"></param>
        /// <returns></returns>
        private bool CheckAnswerExclusion(object paraObj)
        {
            bool result = true;

            if (paraObj != null && paraObj is CustomSerializeArrayList)
            {
                SalesSlipInputInitDataAcs.LogWrite("IIOWriteControlDB", "Write", "●回答排他チェック開始");

                CustomSerializeArrayList salesData = paraObj as CustomSerializeArrayList;
                if (salesData != null && salesData.Count > 0)
                {
                    SCMAcOdrDtlAsWork work = null;
                    foreach (object obj in salesData)
                    {
                        if (obj != null && obj is ArrayList)
                        {
                            ArrayList list = obj as ArrayList;
                            foreach (object midObj in list)
                            {
                                if (midObj is ArrayList)
                                {
                                    ArrayList midList = midObj as ArrayList;
                                    if (midList.Count > 0 && midList[0] is SCMAcOdrDtlAsWork)
                                    {
                                        work = midList[0] as SCMAcOdrDtlAsWork;
                                        break;
                                    }
                                }
                            }
                        }
                        if (work != null)
                            break;
                    }
                    // 他端末で回答の判断
                    if (work != null && work.InquiryNumber != 0)
                    {
                        if (!IsOrNotAnswerFinshed(work))
                        {
                            // 既に他端末で回答済みのためエラー
                            result = false;

                            // 排他エラーの時メッセージ表示
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_INFO,
                                "",
                                "現在、編集中の問合せ番号は既に回答されています。",
                                -1,
                                MessageBoxButtons.OK);

                            SalesSlipInputInitDataAcs.LogWrite("IIOWriteControlDB", "Write", "●現在、編集中の問合せ番号は既に回答されています。");
                            SalesSlipInputInitDataAcs.LogWrite("IIOWriteControlDB", "Write", "●回答排他チェック終了");
                        }
                    }
                }
                SalesSlipInputInitDataAcs.LogWrite("IIOWriteControlDB", "Write", "●回答排他チェック終了");
            }
            return result;
        }

        /// <summary>
        /// 別端末で回答完了するかどうか
        /// </summary>
        /// <param name="dtlAsWork">回答データ</param>
        /// <returns>状態</returns>
        /// <remarks>
        /// <br>Note       : 別端末で回答完了するかどうかを行う。</br>
        /// <br>Programmer : chenyd</br>
        /// <br>Date       : 2014/11/06</br>
        /// </remarks>
        private bool IsOrNotAnswerFinshed(SCMAcOdrDtlAsWork dtlAsWork)
        {

            SCMInquiryOrderWork scmInquiryOrder = new SCMInquiryOrderWork();
            //検索条件
            this.SetSCMInquiryOrderWork(dtlAsWork, out scmInquiryOrder);

            // 検索実行
            Object retArray;
            int status = this.ExecuteSearch(scmInquiryOrder, out retArray);
            bool isAnswer = false;
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL
                && ((CustomSerializeArrayList)retArray).Count != 0)
            {
                CustomSerializeArrayList list = (CustomSerializeArrayList)retArray;

                foreach (ArrayList salesSlipList in list)
                {
                    for (int i = 0; i < salesSlipList.Count; i++)
                    {
                        // 回答状況区分より、回答するかどうかを判断します
                        SCMInquiryResultWork scmInquiryResultWork = (SCMInquiryResultWork)salesSlipList[i];
                        if (scmInquiryResultWork.AcptAnOdrStatus == 0)
                        {
                            isAnswer = true;
                            break;
                        }
                    }
                    if (isAnswer)
                        break;
                }
            }
            return isAnswer;
        }

        /// <summary>
        /// 検索条件作成
        /// </summary>
        /// <param name="dtlAsWork">回答部品</param>
        /// <param name="scmInquiryOrder">検索条件オブジェクト</param>
        /// <remarks>
        /// <br>Note       : 検索条件作成を行う。</br>
        /// <br>Programmer : chenyd</br>
        /// <br>Date       : 2014/11/06</br>
        /// </remarks>
        private void SetSCMInquiryOrderWork(SCMAcOdrDtlAsWork dtlAsWork, out SCMInquiryOrderWork scmInquiryOrder)
        {
            scmInquiryOrder = new SCMInquiryOrderWork();
            // 共通ヘッダの企業コード
            scmInquiryOrder.EnterpriseCode = dtlAsWork.EnterpriseCode;
            // 問合せ先企業コード
            scmInquiryOrder.InqOtherEpCd = dtlAsWork.InqOtherEpCd;
            // 問合せ先拠点コード
            scmInquiryOrder.InqOtherSecCd = dtlAsWork.InqOtherSecCd;

            // 回答区分
            List<Int32> answerDivList = new List<int>();
            // 未回答
            answerDivList.Add((int)SCMInquiryOrder.AnswerDivState.Non);
            // 一部回答
            answerDivList.Add((int)SCMInquiryOrder.AnswerDivState.Part);
            // キャンセル
            answerDivList.Add((int)SCMInquiryOrder.AnswerDivState.Cancel);
            //　回答完了
            answerDivList.Add((int)SCMInquiryOrder.AnswerDivState.Complete);
            scmInquiryOrder.AnswerDivCd = answerDivList.ToArray();

            // 問合せ番号(開始)
            scmInquiryOrder.St_InquiryNumber = dtlAsWork.InquiryNumber;
            // 問合せ番号(終了)
            scmInquiryOrder.Ed_InquiryNumber = dtlAsWork.InquiryNumber;
            // 回答方法
            List<Int32> answerMethodList = new List<int>();
            answerMethodList.AddRange(new Int32[] {(int)SCMInquiryOrder.AnswerMethodState.Auto ,
                                                        (int)SCMInquiryOrder.AnswerMethodState.ManualWeb ,
                                                        (int)SCMInquiryOrder.AnswerMethodState.ManualOther});

            scmInquiryOrder.AwnserMethod = answerMethodList.ToArray();
            // 連携対象区分
            List<Int16> cooperationOptionDivList = new List<Int16>();
            cooperationOptionDivList.AddRange(new Int16[] {(int)SCMInquiryOrder.CooperationOptionDivState.PCCNS ,
                                                        (int)SCMInquiryOrder.CooperationOptionDivState.BL});
            scmInquiryOrder.CooperationOptionDiv = cooperationOptionDivList.ToArray();
        }

        /// <summary>
        /// 検索
        /// </summary>
        /// <param name="scmInquiryOrderWork">検索条件オブジェクト</param>
        /// <param name="retArray">検索結果</param>
        /// <remarks>
        /// <br>Note       : 検索を行う。</br>
        /// <br>Programmer : chenyd</br>
        /// <br>Date       : 2014/11/06</br>
        /// </remarks>
        private int ExecuteSearch(SCMInquiryOrderWork scmInquiryOrderWork, out object retArray)
        {
            retArray = new CustomSerializeArrayList();

            int status;

            try
            {
                // 伝票リスト情報抽出結果
                status = this.SCMInquiryDB.Search(out retArray, scmInquiryOrderWork, 0, ConstantManagement.LogicalMode.GetData0);
            }
            catch
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }

            return status;
        }
        // ADD 2014/11/06 chenyd For PM-SCM仕掛一覧№85 ｼｽﾃﾑﾃｽﾄ障害№4対応 ----------------<<<<<<<<<<
        #endregion

        // --- ADD　2014/08/05 田建委 仕掛№10667---------->>>>>
        /// <summary>
        /// 伝票毎より計上元明細データの取得
        /// </summary>
        /// <param name="paraList">伝票情報</param>
        /// <param name="addUpOrgSalesDetailWorkArray">計上元明細データ</param>
        /// <remarks>
        /// <br>Update Note: 2014/08/05 田建委</br>
        /// <br>管理番号   : 11070148-00　仕掛 №10667　RedMine#43049の対応</br>
        /// <br>           : 受注データが消えない対応</br>
        /// </remarks>
        private void DivisionCustomSerializeArrayListForDel(CustomSerializeArrayList paraList, out AddUpOrgSalesDetailWork[] addUpOrgSalesDetailWorkArray)
        {
            addUpOrgSalesDetailWorkArray = null;

            for (int i = 0; i < paraList.Count; i++)
            {
                if (paraList[i] is ArrayList)
                {
                    ArrayList list = (ArrayList)paraList[i];

                    if (list.Count == 0) continue;

                    if (list[0].GetType() == typeof(AddUpOrgSalesDetailWork))
                    {
                        addUpOrgSalesDetailWorkArray = (AddUpOrgSalesDetailWork[])list.ToArray(typeof(AddUpOrgSalesDetailWork));
                    }
                }
            }
        }
        // --- ADD　2014/08/05 田建委 仕掛№10667----------<<<<<

        // --- ADD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） ----->>>>>
        static int StartDocCounter = 0; //StartDocCounterの呼出し回数
        static int EndDocCounter = 0;   //EndDocHookの呼出し回数
        static bool checkCancelFlg = false;　//キャンセルボタンフラグ

        /// <summary>
        /// StartDocWのDelegate型
        /// </summary>
        /// <param name="hwd">印刷ジョブのデバイス コンテキストへのハンドル</param>
        /// <param name="lpdi">ドキュメント ファイルの名前と出力ファイルの名前を含む DOCINFO 構造体へのポインター</param>
        /// <returns>ドキュメントの印刷ジョブ識別子</returns>
        /// <remarks>
        /// <br>Note         : StartDocWのDelegate型</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : K2024/08/15</br>
        /// </remarks>
        [UnmanagedFunctionPointer(CallingConvention.StdCall, SetLastError = true)]
        delegate int StartDocWDelegate(IntPtr hwd, IntPtr lpdi);

        /// <summary>
        /// StartDocWの定義
        /// </summary>
        /// <param name="hwd">印刷ジョブのデバイス コンテキストへのハンドル</param>
        /// <param name="lpdi">ドキュメント ファイルの名前と出力ファイルの名前を含む DOCINFO 構造体へのポインター</param>
        /// <returns>ドキュメントの印刷ジョブ識別子</returns>
        /// <remarks>
        /// <br>Note         : StartDocWの定義</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : K2024/08/15</br>
        /// </remarks>
        [DllImport("gdi32.dll", CharSet = CharSet.Unicode, ExactSpelling = true)]
        static extern int StartDocW(IntPtr hwd, IntPtr lpdi);


        [DllImport("kernel32.dll")]
        static extern uint GetLastError();

        /// <summary>
        /// 印刷ジョブの開始処理
        /// </summary>
        /// <param name="hwd">印刷ジョブのデバイス コンテキストへのハンドル</param>
        /// <param name="lpdi">ドキュメント ファイルの名前と出力ファイルの名前を含む DOCINFO 構造体へのポインター</param>
        /// <returns>ドキュメントの印刷ジョブ識別子</returns>
        /// <remarks>
        /// <br>Note         : 印刷ジョブを開始します</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : K2024/08/15</br>
        /// </remarks>
        static private int StartDocWHook(IntPtr hwd, IntPtr lpdi)
        {
            CLCLogTextOut cLCLogTextOut = new CLCLogTextOut();
            int retryCntSta = 0;
            int result = 0;
            string msg = string.Empty;
            bool flg_exception = false;
            StartDocCounter++;

            // リトライ回数まで
            while (result <= 0 && retryCntSta < 5)
            {
                try
                {
                    //本来のAPIの呼び出し
                    result = StartDocW(hwd, lpdi);
                    uint errCode = GetLastError();
                    if (result > 0) break;
                    //キャンセルボタン押すの場合
                    if (result == -1 && errCode == 0x4c7)
                    {
                        checkCancelFlg = true;
                        break;
                    }
                }
                catch (Exception ex)
                {
                    result = 0;
                    flg_exception = true;
                    msg = ex.Message;
                }
                retryCntSta++;
                Thread.Sleep(2000);
            }

            if (retryCntSta > 0)
            {
                if (flg_exception == true)
                {
                    // CLCログ出力部品を実行  
                    if (result <= 0)
                        cLCLogTextOut.OutputClcLog("MAHNB01012A", "Partsman", "StartDocW失敗 ex:" + msg, result, null);
                    else
                        cLCLogTextOut.OutputClcLog("MAHNB01012A", "Partsman", "StartDocW成功 リトライ回数：" + retryCntSta, retryCntSta, null);
                }
                else
                {
                    // CLCログ出力部品を実行  
                    if (result <= 0)
                        cLCLogTextOut.OutputClcLog("MAHNB01012A", "Partsman", "StartDocW失敗 Ret：" + result, result, null);
                    else
                        cLCLogTextOut.OutputClcLog("MAHNB01012A", "Partsman", "StartDocW成功 リトライ回数：" + retryCntSta, retryCntSta, null);
                }
            }
            return result;
        }

        /// <summary>
        /// EndDocのDelegate型
        /// </summary>
        /// <param name="hdc">印刷ジョブのデバイス コンテキストを処理します</param>
        /// <returns>ドキュメントの印刷ジョブ識別子</returns>
        /// <remarks>
        /// <br>Note         : EndDocのDelegate型</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : K2024/08/15</br>
        /// </remarks>
        [UnmanagedFunctionPointer(CallingConvention.StdCall, SetLastError = true)]
        delegate int EndDocDelegate(IntPtr hdc);

        /// <summary>
        /// EndDocの定義
        /// </summary>
        /// <param name="hdc">印刷ジョブのデバイス コンテキストを処理します</param>
        /// <returns>ドキュメントの印刷ジョブ識別子</returns>
        /// <remarks>
        /// <br>Note         : EndDocのDelegate型</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : K2024/08/15</br>
        /// </remarks>
        [DllImport("gdi32.dll", ExactSpelling = true)]
        static extern int EndDoc(IntPtr hdc);

        /// <summary>
        /// 印刷ジョブの終了処理
        /// </summary>
        /// <param name="hwd">印刷ジョブのデバイス コンテキストを処理します</param>
        /// <returns>ドキュメントの印刷ジョブ識別子</returns>
        /// <remarks>
        /// <br>Note         : 印刷ジョブを終了します</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : K2024/08/15</br>
        /// </remarks>
        static private int EndDocHook(IntPtr hwd)
        {
            CLCLogTextOut cLCLogTextOut = new CLCLogTextOut();
            int retryCntEnd = 0;
            int result = 0;
            string msg = string.Empty;
            bool flg_exception = false;
            EndDocCounter++;

            // リトライ回数まで
            while (result <= 0 && retryCntEnd < 5)
            {
                try
                {
                    //本来のAPIの呼び出し
                    result = EndDoc(hwd);
                    if (result > 0) break;
                }
                catch (Exception ex)
                {
                    result = 0;
                    flg_exception = true;
                    msg = ex.Message;
                }
                retryCntEnd++;
                Thread.Sleep(2000);
            }

            if (retryCntEnd > 0)
            {
                if (flg_exception == true)
                {
                    // CLCログ出力部品を実行  
                    if (result <= 0)
                        cLCLogTextOut.OutputClcLog("MAHNB01012A", "Partsman", "EndDoc失敗 ex:" + msg, result, null);
                    else
                        cLCLogTextOut.OutputClcLog("MAHNB01012A", "Partsman", "EndDoc成功 リトライ回数：" + retryCntEnd, retryCntEnd, null);
                }
                else
                {
                    // CLCログ出力部品を実行  
                    if (result <= 0)
                        cLCLogTextOut.OutputClcLog("MAHNB01012A", "Partsman", "EndDoc失敗 Ret：" + result, result, null);
                    else
                        cLCLogTextOut.OutputClcLog("MAHNB01012A", "Partsman", "EndDoc成功 リトライ回数：" + retryCntEnd, retryCntEnd, null);
                }
            }
            return result;

        }
        // --- ADD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） -----<<<<<

        #region ●伝票印刷処理
        /// <summary>
        /// 伝票印刷処理
        /// </summary>
        /// <remarks>
        /// <br>Date         : 2021/07/16</br>
        /// <br>Update Note  : PMKOBETSU-4154 売上伝票印刷エラー対応</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Update Note: 2022/04/26 陳艶丹</br>
        /// <br>管理番号   : 11870080-00</br>
        /// <br>           : PMKOBETSU-4208 電子帳簿対応</br> 
        /// <br>Update Note: K2024/08/15 陳艶丹</br>
        /// <br>管理番号   : 12000031-00</br>
        /// <br>           : PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応）</br> 
        /// <br>Update Note: 2024/10/29 田村顕成</br>
        /// <br>管理番号   : 12000031-00</br>
        /// <br>           : PMKOBETSU-4367 伝票が出ない（印刷APIフックリリース後障害対応）</br> 
        /// </remarks>
        // --- UPD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----->>>>>
        //public void PrintSlip(bool printWithoutDialog)
        public void PrintSlip(bool printWithoutDialog, bool retryFlg)
        // --- UPD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 -----<<<<<
        {
            #region ●初期処理
            DCCMN02000UA printDisp = new DCCMN02000UA(); // 伝票印刷情報設定画面インスタンス生成
            SalesSlipPrintCndtn.SalesSlipKey key = new SalesSlipPrintCndtn.SalesSlipKey(); // 伝票印刷用Keyインスタンス生成
            List<SalesSlipPrintCndtn.SalesSlipKey> keyList = new List<SalesSlipPrintCndtn.SalesSlipKey>(); // 伝票印刷用KeyListインスタンス生成
            bool reissueDiv = false;
            //zhouzy add 2011.09.15 add begin
            int nomalSalesSlipPrintFlag = 0;
            //zhouzy add 2011.09.15 add end
            #endregion

            // --- ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----->>>>>
            SalesSlipPrintCndtn salesSlipPrintCndtn = new SalesSlipPrintCndtn();
            if (!retryFlg)
            {
            // --- ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 -----<<<<<
                #region ●売上伝票Key情報セット
                foreach (string salesSlipNum in this._printSalesKeyInfo.Keys)
                {
                    SlipPrintInfoValue slipPrintInfoValue = this._printSalesKeyInfo[salesSlipNum];
                    if (slipPrintInfoValue.AcptAnOdrStatus != (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
                    {
                        key = new SalesSlipPrintCndtn.SalesSlipKey();
                        key.AcptAnOdrStatus = slipPrintInfoValue.AcptAnOdrStatus;
                        key.SalesSlipNum = salesSlipNum;
                        keyList.Add(key);
                        nomalSalesSlipPrintFlag = slipPrintInfoValue.NomalSalesSlipPrintFlag;
                    }
                    if (slipPrintInfoValue.SalesSlipNum != ctDefaultSalesSlipNum) reissueDiv = true;
                }
                this._printSalesKeyInfo.Clear();
                #endregion

                #region ●受注伝票Key情報セット
                foreach (string salesSlipNum in this._printAcptKeyInfo.Keys)
                {
                    SlipPrintInfoValue slipPrintInfoValue = this._printAcptKeyInfo[salesSlipNum];
                    if (slipPrintInfoValue.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
                    {
                        key = new SalesSlipPrintCndtn.SalesSlipKey();
                        key.AcptAnOdrStatus = slipPrintInfoValue.AcptAnOdrStatus;
                        key.SalesSlipNum = salesSlipNum;
                        keyList.Add(key);
                    }
                    if (slipPrintInfoValue.SalesSlipNum != ctDefaultSalesSlipNum) reissueDiv = true;
                }
                this._printAcptKeyInfo.Clear();
                #endregion

                #region ●印刷情報パラメータセット
                //SalesSlipPrintCndtn salesSlipPrintCndtn = new SalesSlipPrintCndtn();// DEL 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応
                salesSlipPrintCndtn.EnterpriseCode = this._enterpriseCode;
                salesSlipPrintCndtn.SalesSlipKeyList = keyList;
                salesSlipPrintCndtn.ReissueDiv = reissueDiv;
                salesSlipPrintCndtn.MakeQRDiv = this._isMakeQRFlg;    // ADD 2010/07/12
                //zhouzy add 2011.09.15 add begin
                salesSlipPrintCndtn.NomalSalesSlipPrintFlag = nomalSalesSlipPrintFlag;
                salesSlipPrintCndtn.ScmFlg = _scmFlg;
                //zhouzy add 2011.09.15 add end
                // --- ADD K2014/01/14 Y.Wakita ---------->>>>>
                #region フタバ個別対応
                if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaSlipPrtCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    salesSlipPrintCndtn.ExtrData = _extrData;
                }
                // --- ADD K2014/01/14 Y.Wakita ----------<<<<<
                #endregion
                #endregion
            }// ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応

            #region ●印刷処理
            // --- UPD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 ----->>>>>
            //if (salesSlipPrintCndtn.SalesSlipKeyList.Count != 0) printDisp.ShowDialog(salesSlipPrintCndtn, printWithoutDialog);

            //指定したオブジェクトの排他ロック
            lock (_printLocker)
            {
                // --- UPD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----->>>>>
                //// スレッド開始時間
                //_pringThreadList[_pringThreadList.Count - 1].StartTime = DateTime.Now.Ticks;
                //// 印刷帳票情報
                //_pringThreadList[_pringThreadList.Count - 1].SalesSlipKeyList = salesSlipPrintCndtn.SalesSlipKeyList;
                //// 伝票印刷実行
                //if (salesSlipPrintCndtn.SalesSlipKeyList.Count != 0) printDisp.ShowDialog(salesSlipPrintCndtn, printWithoutDialog);
                //// 印刷完了後伝票印刷リストから除く
                //_pringThreadList.RemoveAt(0);
                //タイマーをウエート
                do
                {
                    Thread.Sleep(1000);
                } while (_pringThreadList[0].StartTime != 0);

                // スレッド開始時間-初期値セット
                _pringThreadList[0].StartTime = DateTime.Now.Ticks;
                //リトライフラグ-初期値セット
                _pringThreadList[0].PrintRetryFlg = false;
                // --- ADD ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
                Dictionary<string, SalesSlipWork> salesSlipWorkDic = new Dictionary<string, SalesSlipWork>();
                Dictionary<string, ArrayList> salesDetailWorkDic = new Dictionary<string, ArrayList>();
                bool pdfPrintFlg = false;
                // --- ADD ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<
                if (retryFlg)
                {
                    // リトライの場合、前回パラメータ再設定
                    salesSlipPrintCndtn = _pringThreadList[0].SalesSlipPrintCndtn;
                    // 印刷帳票情報
                    _pringThreadList[0].SalesSlipKeyList = salesSlipPrintCndtn.SalesSlipKeyList;
                    // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
                    // 売上データ
                    salesSlipWorkDic = _pringThreadList[0].SalesSlipWorkDic;
                    // 売上明細データ
                    salesDetailWorkDic = _pringThreadList[0].SalesDetailWorkDic;
                    pdfPrintFlg = _pringThreadList[0].PdfPrintFlg;
                    // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<
                }
                else
                {
                    // １回目印刷の場合、パラメータをスレッド情報リストに保持
                    _pringThreadList[0].SalesSlipPrintCndtn = salesSlipPrintCndtn;
                    // 印刷帳票情報
                    _pringThreadList[0].SalesSlipKeyList = salesSlipPrintCndtn.SalesSlipKeyList;
                    // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
                    // 売上データ
                    _pringThreadList[0].SalesSlipWorkDic = new Dictionary<string, SalesSlipWork>();
                    foreach (KeyValuePair<string, SalesSlipWork> pair in _svSalesSlipWorkDic)
                    {
                        salesSlipWorkDic.Add(pair.Key, pair.Value);
                        _pringThreadList[0].SalesSlipWorkDic.Add(pair.Key, pair.Value);
                    }
                    // 売上明細データ
                    _pringThreadList[0].SalesDetailWorkDic = new Dictionary<string, ArrayList>();
                    foreach (KeyValuePair<string, ArrayList> pair in _svSalesDetailWorkDic)
                    {
                        salesDetailWorkDic.Add(pair.Key, pair.Value);
                        _pringThreadList[0].SalesDetailWorkDic.Add(pair.Key, pair.Value);
                    }

                    _pringThreadList[0].PdfPrintFlg = false;
                    // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<
                }
                // --- DEL 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応 --->>>>>
                //// 伝票印刷実行
                //if (salesSlipPrintCndtn.SalesSlipKeyList.Count != 0) printDisp.ShowDialog(salesSlipPrintCndtn, printWithoutDialog);

                //PropertyInfo propertyRetryFlg = null;
                ////RetryFlg有無判断
                //foreach (PropertyInfo p in printDisp.GetType().GetProperties())
                //{
                //    if (p.Name == CtPropertyNm)
                //    {
                //        propertyRetryFlg = p;
                //    }
                //}
                ////RetryFlg有且つの場合
                //if (propertyRetryFlg != null && (bool)propertyRetryFlg.GetValue(printDisp, null))
                //{
                //    //リトライフラグ
                //    _pringThreadList[0].PrintRetryFlg = true;
                //}
                //else
                //{
                //    // 印刷完了後伝票印刷リストから除く
                //    _pringThreadList.RemoveAt(0);
                //}
                // --- DEL 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応 ---<<<<<
                // --- UPD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 -----<<<<<

                // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応 --->>>>>
                PDFPrintStatus = (int)PDFPrint.Usually;
                //プリンタ設定フラグ：プリンタ設定に対して通常動作するか仮想プリンタ動作するかを指定
                int PDFPrintEnable = this._salesSlipInputConstructionAcs.OutputMode;
                // --- ADD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） ----->>>>>
                CLCLogTextOut cLCLogTextOut = new CLCLogTextOut();
                StartDocCounter = 0;
                EndDocCounter = 0;
                // --- ADD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） -----<<<<<
                //伝票PDF出力(0:しない)
                if (PDFPrintEnable == (int)OutputMode.PDFPrintUnable)
                {

                    // --- UPD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） ----->>>>>
                    //// 伝票印刷実行
                    //if (salesSlipPrintCndtn.SalesSlipKeyList.Count != 0) printDisp.ShowDialog(salesSlipPrintCndtn, printWithoutDialog);
                    using (EasyHook.LocalHook hook_start = EasyHook.LocalHook.Create(
                       EasyHook.LocalHook.GetProcAddress("gdi32.dll", "StartDocW"),
                       new StartDocWDelegate(StartDocWHook),
                       null),
                       hook_end = EasyHook.LocalHook.Create(
                       EasyHook.LocalHook.GetProcAddress("gdi32.dll", "EndDoc"),
                       new EndDocDelegate(EndDocHook),
                       null))
                    {
                        // このhookを生成したスレッドからの呼び出しのみをフックします
                        hook_start.ThreadACL.SetInclusiveACL(new int[] { 0 });
                        hook_end.ThreadACL.SetInclusiveACL(new int[] { 0 });
                        // 伝票印刷実行
                        if (salesSlipPrintCndtn.SalesSlipKeyList.Count != 0)
                        {
                            printDisp.ShowDialog(salesSlipPrintCndtn, printWithoutDialog);
                        }
                        else
                        {
                            //売伝起動直後の伝票登録でSalesSlipKeyList.Count=0になる既存不具合があることが分かったため
                            //不具合時はリトライチェックを行わないように対応（既存不具合は修正していない）
                            checkCancelFlg = true;
                        }

                        // このスレッドでもフックも一時的に無効にすることもできます
                        hook_start.ThreadACL.SetExclusiveACL(new int[] { 0 });
                        hook_end.ThreadACL.SetExclusiveACL(new int[] { 0 });
                    }
                    // --- UPD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） -----<<<<<

                    PropertyInfo propertyRetryFlg = null;
                    //RetryFlg有無判断
                    foreach (PropertyInfo p in printDisp.GetType().GetProperties())
                    {
                        if (p.Name == CtPropertyNm)
                        {
                            propertyRetryFlg = p;
                        }
                    }
                    // --- ADD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） ----->>>>>
                    // PKGアセンブリで対応するため、SFMIT01290UAにプレビュー判定用のフラグを実装する（SFMIT01290UA.isPrtFlg）。このフラグの値によって印刷プレビュー画面が
                    // 表示されたかどうか、印刷まで実行されたか、キャンセルされたかを判断する
                    bool retryFlag = false;
                    // プレビュー無しとプレビュー画面で「印刷」ボタンを押すの場合、StartDocWHookとEndDocHookの呼出し回数が一致することを確認する（ただし、カウンタが1以上）
                    if ((StartDocCounter != EndDocCounter) || (StartDocCounter == 0 && EndDocCounter == 0 && (SFMIT01290UA.isPrtFlg == 0 || SFMIT01290UA.isPrtFlg  == 2)))
                    {
                        //プレビューキャンセルとPrint to PDFで印刷してキャンセル場合は確認不要
                        //if (!checkCancelFlg)// --- DEL 2024/10/29 田村顕成 PMKOBETSU-4367 伝票が出ない（印刷APIフックリリース後障害対応）
                        // --- ADD 2024/10/29 田村顕成 PMKOBETSU-4367 伝票が出ない（印刷APIフックリリース後障害対応 ----->>>>>
                        // 売上全体設定または得意先マスタの伝票出力設定が「なし」の場合に印刷リトライになってしまう障害の対応 
                        if (!checkCancelFlg && salesSlipPrintCndtn.NomalSalesSlipPrintFlag != 1)
                        // --- ADD 2024/10/29 田村顕成 PMKOBETSU-4367 伝票が出ない（印刷APIフックリリース後障害対応 -----<<<<<
                        {
                            retryFlag = true;
                            cLCLogTextOut.OutputClcLog("MAHNB01012A", "Partsman", "StartDocWHookが呼ばれた回数: " + StartDocCounter + " EndDocHookが呼ばれた回数：" + EndDocCounter, -1, null);
                        }
                    }
                    checkCancelFlg = false;
                    SFMIT01290UA.isPrtFlg = 0;
                    // --- ADD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） -----<<<<<
                    // --- UPD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） ----->>>>>
                    //RetryFlg有且つの場合
                    //if (propertyRetryFlg != null && (bool)propertyRetryFlg.GetValue(printDisp, null))
                    //RetryFlg有且つの場合またはStartDocWHookとEndDocHookの呼出し回数の不一致の場合
                    if ((propertyRetryFlg != null && (bool)propertyRetryFlg.GetValue(printDisp, null)) || retryFlag)
                    // --- UPD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） -----<<<<<
                    {
                        //リトライフラグ
                        _pringThreadList[0].PrintRetryFlg = true;
                    }
                    else
                    {
                        // 印刷完了後伝票印刷リストから除く
                        _pringThreadList.RemoveAt(0);
                    }
                }
                //伝票PDF出力(1:する/2:電子帳簿出力に従う)
                else if (PDFPrintEnable == (int)OutputMode.PDFPrintEnable || PDFPrintEnable == (int)OutputMode.PDFPrintCustom)
                {
                    // 実行伝票キー退避
                    List<SalesSlipPrintCndtn.SalesSlipKey> bfKeyList = new List<SalesSlipPrintCndtn.SalesSlipKey>();
                    SalesSlipWork salesSlipWork = new SalesSlipWork();
                    foreach (SalesSlipPrintCndtn.SalesSlipKey bfkey in salesSlipPrintCndtn.SalesSlipKeyList)
                    {
                        bfKeyList.Add(bfkey);
                        // 売上データ
                        string dicKey = bfkey.SalesSlipNum + bfkey.AcptAnOdrStatus.ToString();
                        if (salesSlipWorkDic.ContainsKey(dicKey)) salesSlipWork = salesSlipWorkDic[dicKey];
                    }

                    // 伝票印刷実行(PDFエラーの時、PDFリトライ処理のみ行う)
                    if (!pdfPrintFlg)
                    {

                        // --- UPD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） ----->>>>>
                        //if (salesSlipPrintCndtn.SalesSlipKeyList.Count != 0) printDisp.ShowDialog(salesSlipPrintCndtn, printWithoutDialog);
                        // hookのインスタンスをアプリ開始時に初期化
                        using (EasyHook.LocalHook hook_start = EasyHook.LocalHook.Create(
                           EasyHook.LocalHook.GetProcAddress("gdi32.dll", "StartDocW"),
                           new StartDocWDelegate(StartDocWHook),
                           null),
                           hook_end = EasyHook.LocalHook.Create(
                           EasyHook.LocalHook.GetProcAddress("gdi32.dll", "EndDoc"),
                           new EndDocDelegate(EndDocHook),
                           null))
                        {
                            // このhookを生成したスレッドからの呼び出しのみをフックします
                            hook_start.ThreadACL.SetInclusiveACL(new int[] { 0 });
                            hook_end.ThreadACL.SetInclusiveACL(new int[] { 0 });
                            if (salesSlipPrintCndtn.SalesSlipKeyList.Count != 0)
                            {
                                printDisp.ShowDialog(salesSlipPrintCndtn, printWithoutDialog);
                            }
                            else
                            {
                                //売伝起動直後の伝票登録でSalesSlipKeyList.Count=0になる既存不具合があることが分かったため
                                //不具合時はリトライチェックを行わないように対応（既存不具合は修正していない）
                                checkCancelFlg = true;
                            }

                            // このスレッドでもフックも一時的に無効にすることもできます
                            hook_start.ThreadACL.SetExclusiveACL(new int[] { 0 });
                            hook_end.ThreadACL.SetExclusiveACL(new int[] { 0 });
                        }
                        // --- UPD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） -----<<<<<
                    }
                    PropertyInfo propertyRetryFlg = null;
                    //RetryFlg有無判断
                    foreach (PropertyInfo p in printDisp.GetType().GetProperties())
                    {
                        if (p.Name == CtPropertyNm)
                        {
                            propertyRetryFlg = p;
                        }
                    }
                    // --- ADD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） ----->>>>>
                    bool retryFlag = false;
                    // プレビュー無しとプレビュー画面で「印刷」ボタンを押すの場合、StartDocWHookとEndDocHookの呼出し回数が一致することを確認する（ただし、カウンタが1以上）
                    if ((StartDocCounter != EndDocCounter) || (StartDocCounter == 0 && EndDocCounter == 0 && (SFMIT01290UA.isPrtFlg == 0 || SFMIT01290UA.isPrtFlg == 2)))
                    {
                        //プレビューキャンセルとPrint to PDFで印刷してキャンセル場合は確認不要
                        //if (!checkCancelFlg)// --- DEL 2024/10/29 田村顕成 PMKOBETSU-4367 伝票が出ない（印刷APIフックリリース後障害対応）
                        // --- ADD 2024/10/29 田村顕成 PMKOBETSU-4367 伝票が出ない（印刷APIフックリリース後障害対応 ----->>>>>
                        // 売上全体設定または得意先マスタの伝票出力設定が「なし」の場合に印刷リトライになってしまう障害の対応 
                        if (!checkCancelFlg && salesSlipPrintCndtn.NomalSalesSlipPrintFlag != 1)
                        // --- ADD 2024/10/29 田村顕成 PMKOBETSU-4367 伝票が出ない（印刷APIフックリリース後障害対応 -----<<<<<
                        {
                            retryFlag = true;
                            cLCLogTextOut.OutputClcLog("MAHNB01012A", "Partsman", "StartDocWHookが呼ばれた回数: " + StartDocCounter + " EndDocHookが呼ばれた回数：" + EndDocCounter, -1, null);
                        }
                    }
                    checkCancelFlg = false;
                    SFMIT01290UA.isPrtFlg = 0;
                    // --- ADD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） -----<<<<<
                    // --- UPD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） ----->>>>>
                    ////RetryFlg有且つの場合
                    //if (propertyRetryFlg != null && (bool)propertyRetryFlg.GetValue(printDisp, null))
                    //RetryFlg有且つの場合またはStartDocWHookとEndDocHookの呼出し回数の不一致の場合
                    if ((propertyRetryFlg != null && (bool)propertyRetryFlg.GetValue(printDisp, null)) || retryFlag)
                    // --- UPD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） -----<<<<<
                    {
                        //リトライフラグ
                        _pringThreadList[0].PrintRetryFlg = true;
                    }
                    else
                    {
                        _pringThreadList[0].PdfPrintFlg = true;
                        // 電帳.DXオプション無しの時、PDF出力しない
                        if (this._salesSlipInputInitDataAcs.Opt_PM_EBooks == (int)SalesSlipInputInitDataAcs.Option.OFF)
                        {
                            // 印刷完了後伝票印刷リストから除く
                            _pringThreadList.RemoveAt(0);
                            return;
                        }
                        // --- ADD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） ----->>>>>
                        //売上・見積以外は処理しない
                        if (_pringThreadList[0].SalesSlipKeyList.Count == 0 || (_pringThreadList[0].SalesSlipKeyList[0].AcptAnOdrStatus != 30 && _pringThreadList[0].SalesSlipKeyList[0].AcptAnOdrStatus != 10))
                        {
                            // 印刷完了後伝票印刷リストから除く
                            _pringThreadList.RemoveAt(0);
                            return;
                        }
                        // --- ADD K2024/08/15 陳艶丹 PMKOBETSU-4367 伝票が出ない（印刷APIフック追加対応） -----<<<<<

                        // 電子帳簿出力に従う
                        this._customerInfoAcs.ReadDBData(this._enterpriseCode, salesSlipWork.CustomerCode, out this._customerInfo);
                        if (PDFPrintEnable == (int)OutputMode.PDFPrintCustom && this._customerInfo.DmOutCode == (int)DmOutCode.NO)
                        {
                            // 印刷完了後伝票印刷リストから除く
                            _pringThreadList.RemoveAt(0);
                            return;
                        }

                        //排他対象
                        System.Threading.Mutex mutex = new System.Threading.Mutex(false, CT_NAME_EBOOK);
                        #region 電子帳簿出力
                        //電子帳簿出力制御(売上伝票入力/得意先電子元帳/BLP自動回答を排他)
                        int count = 0;
                        while (!mutex.WaitOne(0, false))
                        {
                            if (count++ >= CT_MUTEX_WAIT_MAX)
                            {
                                Form form = new Form();
                                form.TopMost = true;
                                DialogResult dialogResult = TMsgDisp.Show(
                                    form,
                                    emErrorLevel.ERR_LEVEL_STOPDISP,
                                    "",
                                    MESS_PRINTERMUTEX_ERR,
                                    0,
                                    MessageBoxButtons.OK,
                                    MessageBoxDefaultButton.Button1);
                                form.TopMost = false;
                                return;
                            }
                            Thread.Sleep(1000);
                        }

                        try
                        {
                            #region tempフォルダ初期化
                            // 電帳処理の場合、tempフォルダ初期化
                            if (!Directory.Exists(System.Environment.CurrentDirectory + CT_TEMPFOLDER))
                            {
                                Directory.CreateDirectory(System.Environment.CurrentDirectory + CT_TEMPFOLDER);
                            }
                            else
                            {
                                foreach (string strFile in Directory.GetFiles(System.Environment.CurrentDirectory + CT_TEMPFOLDER))
                                {
                                    File.Delete(strFile);
                                }
                            }
                            // ファイル保存ダイアログが表示しない時、作業フォルダ\Renameを初期化
                            if (!this._fileDialogDisplay)
                            {
                                string folderName = System.Environment.CurrentDirectory + CT_TEMPFOLDER + CT_RENAMEOLDER;
                                if (!Directory.Exists(folderName))
                                {
                                    Directory.CreateDirectory(folderName);
                                }
                                else
                                {
                                    foreach (string strFile in Directory.GetFiles(folderName))
                                    {
                                        File.Delete(strFile);
                                    }
                                }
                            }
                            #endregion tempフォルダ初期化

                            // 電子帳簿出力フラグ:1(電子帳簿出力する)
                            PDFPrintStatus = (int)PDFPrint.EBook;
                            bool pdfOutFlg = false;
                            bool pdfRetryFlg = false;

                            #region PDFファイル生成
                            List<SalesSlipPrintCndtn.SalesSlipKey> outputSlipKey = new List<SalesSlipPrintCndtn.SalesSlipKey>();
                            foreach (SalesSlipPrintCndtn.SalesSlipKey slipKey in salesSlipPrintCndtn.SalesSlipKeyList)
                            {
                                _portName = string.Empty;
                                if ((slipKey.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales
                                     && this._salesSlipInputConstructionAcs.SalesOutputDiv == 1) ||
                                    (slipKey.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate
                                     && this._salesSlipInputConstructionAcs.EstimateOutputDiv == 1))
                                {
                                    pdfOutFlg = true;

                                    Process WindowController = new Process();
                                    ProcessStartInfo startInfo = new ProcessStartInfo();

                                    outputSlipKey.Add(slipKey);

                                    //PDF出力
                                    startInfo.FileName = System.Environment.CurrentDirectory + CT_FOLDERSPLIT + PGID_VIRTUALPRINTER;
                                    {
                                        // パス
                                        string filePath = CT_STRSPLIT + System.Environment.CurrentDirectory + CT_TEMPFOLDER + CT_STRSPLIT;
                                        // 得意先コード
                                        string customerCd = salesSlipWork.CustomerCode.ToString(CT_CUSTOMERCDFOMART);
                                        // 得意先名
                                        string cuntomerNm = CT_STRSPLIT + BadCharRemove(salesSlipWork.CustomerSnm.Trim()) + CT_STRSPLIT;
                                        // 伝票区分
                                        string acptAnOdrStatusNm = string.Empty;
                                        if (slipKey.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales)
                                        {
                                            acptAnOdrStatusNm = CT_NAME_SALE;
                                        }
                                        else
                                        {
                                            acptAnOdrStatusNm = CT_NAME_ESTIMATE;
                                        }
                                        // 伝票番号
                                        string salesSlipNo = slipKey.SalesSlipNum;
                                        // 待機時間
                                        string waitTime = this._salesSlipInputConstructionAcs.PdfPrinterWait.ToString();
                                        // 起動元
                                        string startFrom = CT_MODE_SALE;

                                        startInfo.Arguments = filePath + " " + customerCd + " "
                                                            + cuntomerNm + " " + acptAnOdrStatusNm + " " + salesSlipNo + " "
                                                            + waitTime + " " + startFrom;
                                        WindowController.StartInfo = startInfo;
                                        //ファイル保存ダイアログが表示しない時、仮想プリンタのポート名を生成
                                        if (!this._fileDialogDisplay)
                                        {
                                            // PDFファイル名「<得意先コード>_<得意先名称>_<伝票区分名>_<伝票番号>_<出力日時>.pdf」
                                            _portName = string.Format(CT_PORTNAME, customerCd, BadCharRemove(salesSlipWork.CustomerSnm.Trim()), acptAnOdrStatusNm, salesSlipNo);
                                        }
                                        // PDF出力監視処理起動
                                        WindowController.Start();
                                    }
                                    try
                                    {
                                        //ファイル保存ダイアログが表示しない時、仮想プリンタのポート名を変更
                                        if (!this._fileDialogDisplay) PrinterPortNameChange();

                                        List<SalesSlipPrintCndtn.SalesSlipKey> subKeysList = new List<SalesSlipPrintCndtn.SalesSlipKey>();
                                        subKeysList.Add(slipKey);
                                        salesSlipPrintCndtn.SalesSlipKeyList = subKeysList;
                                        salesSlipPrintCndtn.RemoteSalesSlipPrintFlag = 1;// リモート伝票発行しない
                                        // 伝票印刷実行
                                        printDisp.ShowDialog(salesSlipPrintCndtn, printWithoutDialog);

                                        // PDF出力監視処理終了後、続け
                                        WindowController.WaitForExit();
                                    }
                                    finally
                                    {
                                        //ファイル保存ダイアログが表示しない時、仮想プリンタのポート元に戻す
                                        if (!this._fileDialogDisplay) PrinterPortNameRecovery();
                                    }

                                    PropertyInfo prePropertyRetryFlg = null;
                                    //RetryFlg有無判断
                                    foreach (PropertyInfo p in printDisp.GetType().GetProperties())
                                    {
                                        if (p.Name == CtPropertyNm)
                                        {
                                            prePropertyRetryFlg = p;
                                        }
                                    }
                                    //RetryFlg有且つの場合
                                    if (prePropertyRetryFlg != null && (bool)prePropertyRetryFlg.GetValue(printDisp, null))
                                    {
                                        //リトライフラグ
                                        pdfRetryFlg = true;
                                        //実行伝票キー再設定
                                        salesSlipPrintCndtn.SalesSlipKeyList = bfKeyList;
                                        PDFPrintStatus = (int)PDFPrint.Usually;
                                        break;
                                    }
                                }
                            }
                            #endregion PDFファイル生成

                            //PDF出力しない
                            if (!pdfOutFlg)
                            {
                                // 印刷完了後伝票印刷リストから除く
                                _pringThreadList.RemoveAt(0);
                                return;
                            }

                            //RetryFlg有且つの場合
                            if (pdfRetryFlg)
                            {
                                //リトライフラグ
                                _pringThreadList[0].PrintRetryFlg = true;
                            }
                            else
                            {
                                // 電子帳簿受け渡し用フォルダ取得
                                EBooksLinkSetInfo eBooksFileFolderXmlInfo = GetEBooksFileFolderXmlInfo();

                                // インデックスファイル
                                List<DenchoDXIndexCSVEntity> denchoDXIndexCSVEntityList;
                                MakeIndexFile(outputSlipKey, salesSlipWorkDic, salesDetailWorkDic, eBooksFileFolderXmlInfo, out denchoDXIndexCSVEntityList);

                                // 取引先リスト作成
                                DenchoDXCustomerExportAcs denchoDXCustomerExportAcs = new DenchoDXCustomerExportAcs();
                                denchoDXCustomerExportAcs.MakeCustomerCSVDifference(LoginInfoAcquisition.EnterpriseCode, eBooksFileFolderXmlInfo.CustomFolder + string.Format(CT_CUSTOMERFLPATH, DateTime.Now.ToString(CT_DATETIMEFOMART)));

                                // ログ出力
                                OutEBooksLog(DateTime.Now, denchoDXIndexCSVEntityList);

                                // 印刷完了後伝票印刷リストから除く
                                _pringThreadList.RemoveAt(0);
                            }
                            #endregion
                        }
                        finally
                        {
                            // 電子帳簿出力フラグ:0(通常納品書出力)
                            PDFPrintStatus = (int)PDFPrint.Usually;
                            //ミューテックスを解放する
                            mutex.ReleaseMutex();
                        }
                        
                    }
                }
                // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応 ---<<<<<
            }
            // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 -----<<<<<
            #endregion
        }

        // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応 --->>>>>
        /// <summary>
        /// 仮想プリンタのポート元に戻す
        /// </summary>
        /// <remarks>
        /// <br>Note         : 仮想プリンタのポート元に戻す</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : 2022/04/26</br>
        /// </remarks>
        private void PrinterPortNameRecovery()
        {
            IntPtr hPrinter = IntPtr.Zero;
            IntPtr pPrinterInfo = IntPtr.Zero;
            PRINTER_INFO_2 pi = new PRINTER_INFO_2();
            PRINTER_DEFAULTS def;
            try
            {
                int needed2;
                int temp;
                //プリンターのデータ型、環境、初期化データ、およびアクセス権を指定
                def = new PRINTER_DEFAULTS();
                def.pDatatype = null;
                def.pDevMode = IntPtr.Zero;
                def.DesiredAccess = 0xf000C;// PRINTER_ALL_ACCESS

                //仮想プリンタのハンドルを取得する
                int n = OpenPrinter(CT_PRINTER, ref hPrinter, def);
                if (n == STATUS_NORMAL) return;
                //バッファに必要なバイト数を取得する
                GetPrinter(hPrinter, LEVEL_TWO, IntPtr.Zero, CBBUF_ZERO, out needed2);
                //メモリを割り当てる
                pPrinterInfo = Marshal.AllocHGlobal(needed2);
                //詳細なプリンタ情報を取得
                bool result = GetPrinter(hPrinter, LEVEL_TWO, (IntPtr)pPrinterInfo, needed2, out temp);
                if (!result) return; 
                //PRINTER_INFO_2型にマーシャリングする
                pi = (PRINTER_INFO_2)Marshal.PtrToStructure(pPrinterInfo, typeof(PRINTER_INFO_2));

                //プリンタ設定：デフォルトポートに戻す
                pi.pPortName = CT_DEFALUT_PORTNAME;
                Marshal.StructureToPtr(pi, pPrinterInfo, true);
                //プリンタ設定情報を反映
                result = SetPrinter(hPrinter, LEVEL_TWO, pPrinterInfo, COMMAND_ZERO);
                if (!result) return; 
                //プリンタを閉じる
                ClosePrinter(hPrinter);
                Marshal.FreeHGlobal(pPrinterInfo);

                // 追加のローカルポート名
                string portName = System.Environment.CurrentDirectory + CT_TEMPFOLDER + _portName;
                def = new PRINTER_DEFAULTS();
                def.pDatatype = null;
                def.pDevMode = IntPtr.Zero;
                def.DesiredAccess = DESIREDACCESS_ONE;
                hPrinter = IntPtr.Zero;
                pPrinterInfo = IntPtr.Zero;

                //追加のローカルポートのハンドルを取得する
                n = OpenPrinter(CT_LOCALPORT, ref hPrinter, def);
                if (n == 0) return;
                if (!portName.EndsWith(CT_ZERO)) portName += CT_ZERO;
                uint size = (uint)(portName.Length * CT_INT_TWO);
                pPrinterInfo = Marshal.AllocHGlobal((int)size);
                Marshal.Copy(portName.ToCharArray(), CT_INT_ZERO, pPrinterInfo, portName.Length);

                uint needed;
                uint xcvResult;
                //追加のローカルポートを削除
                result = XcvData(hPrinter, CT_DELETEPORT, pPrinterInfo, size, IntPtr.Zero, CT_INT_ZERO, out needed, out xcvResult);
                if (!result) return; 
                Marshal.FreeHGlobal(pPrinterInfo);
                ClosePrinter(hPrinter);
            }
            catch
            {
                Marshal.FreeHGlobal(pPrinterInfo);
                ClosePrinter(hPrinter);
                // 警告メッセージを出す
                Form form = new Form();
                form.TopMost = true;
                DialogResult dialogResult = TMsgDisp.Show(
                    form,
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "todo",
                    string.Format(MESS_PRINTERPORT_ERR, MODE_PORT_RECOVERY),
                    0,
                    MessageBoxButtons.OK,
                    MessageBoxDefaultButton.Button1);
                form.TopMost = false; 

            }
            
        }

        /// <summary>
        /// 禁止文字を削除する(「\」「/」「:」「*」「?」「"」「<」「>」「|」「_」)
        /// </summary>
        /// <param name="customNm">得意先名</param>
        /// <returns>置換後の得意先名</returns>
        /// <remarks>
        /// <br>Note         : 禁止文字を削除する</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : 2022/04/26</br>
        /// </remarks>
        private string BadCharRemove(string customNm)
        {
            StringBuilder claimSnmStr = new StringBuilder();
            string[] result = customNm.Split(badChars, StringSplitOptions.RemoveEmptyEntries);
            foreach (string str in result)
            {
                claimSnmStr.Append(str);
            }
            return claimSnmStr.ToString();
        }
        /// <summary>
        /// 仮想プリンタのポート変更
        /// </summary>
        /// <remarks>
        /// <br>Note         : 仮想プリンタのポート変更</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : 2022/04/26</br>
        /// </remarks>
        private void PrinterPortNameChange()
        {
            // ポート名
            string portName = string.Empty;
            IntPtr hPrinter = IntPtr.Zero;
            IntPtr pPrinterInfo = IntPtr.Zero;
            PRINTER_DEFAULTS def;
            PRINTER_INFO_2 pi;
            try
            {
                // ポート名
                portName = System.Environment.CurrentDirectory + CT_TEMPFOLDER + _portName;
                //ローカルポートのデータ型、環境、初期化データ、およびアクセス権を指定
                def = new PRINTER_DEFAULTS();
                def.pDatatype = null;
                def.pDevMode = IntPtr.Zero;
                def.DesiredAccess = DESIREDACCESS_ONE;

                //ローカルポートのハンドルを取得する
                int n = OpenPrinter(CT_LOCALPORT, ref hPrinter, def);
                if (n == STATUS_NORMAL) return;

                if (!portName.EndsWith(CT_ZERO)) portName += CT_ZERO;
                uint size = (uint)(portName.Length * CT_INT_TWO);
                pPrinterInfo = Marshal.AllocHGlobal((int)size);
                Marshal.Copy(portName.ToCharArray(), CT_INT_ZERO, pPrinterInfo, portName.Length);

                uint needed;
                uint xcvResult;
                // ローカルポートを追加
                bool result = XcvData(hPrinter, CT_ADDPORT, pPrinterInfo, size, IntPtr.Zero, CT_INT_ZERO, out needed, out xcvResult);
                if (!result) return;
                Marshal.FreeHGlobal(pPrinterInfo);
                ClosePrinter(hPrinter);

                pi = new PRINTER_INFO_2();
                hPrinter = IntPtr.Zero;
                pPrinterInfo = IntPtr.Zero;
                int needed2;
                int temp;

                //プリンターのデータ型、環境、初期化データ、およびアクセス権を指定
                def = new PRINTER_DEFAULTS();
                def.pDatatype = null;
                def.pDevMode = IntPtr.Zero;
                def.DesiredAccess = 0xf000C;// PRINTER_ALL_ACCESS


                //仮想プリンタのハンドルを取得する
                n = OpenPrinter(CT_PRINTER, ref hPrinter, def);
                if (n == STATUS_NORMAL) return;
                //バッファに必要なバイト数を取得する
                GetPrinter(hPrinter, LEVEL_TWO, IntPtr.Zero, CBBUF_ZERO, out needed2);
                //メモリを割り当てる
                pPrinterInfo = Marshal.AllocHGlobal(needed2);
                //詳細なプリンタ情報を取得
                result = GetPrinter(hPrinter, LEVEL_TWO, (IntPtr)pPrinterInfo, needed2, out temp);
                if (!result) return;
                //PRINTER_INFO_2型にマーシャリングする
                pi = (PRINTER_INFO_2)Marshal.PtrToStructure(pPrinterInfo, typeof(PRINTER_INFO_2));

                //プリンタ設定：ポート名
                pi.pPortName = portName;
                Marshal.StructureToPtr(pi, pPrinterInfo, true);
                //仮想プリンタのポート変更時、ポート変更対象のプリンタのジョブをクリアする
                result = SetPrinter(hPrinter, LEVEL_ZERO, IntPtr.Zero, COMMAND_THREE);
                if (!result) return;
                //プリンタ設定情報を反映
                result = SetPrinter(hPrinter, LEVEL_TWO, pPrinterInfo, COMMAND_ZERO);
                if (!result) return;
            }
            catch
            {
                Marshal.FreeHGlobal(pPrinterInfo);
                ClosePrinter(hPrinter);
                // 警告メッセージを出す
                Form form = new Form();
                form.TopMost = true;
                DialogResult dialogResult = TMsgDisp.Show(
                    form,
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "todo",
                    string.Format(MESS_PRINTERPORT_ERR, MODE_PORT_CHANGE),
                    0,
                    MessageBoxButtons.OK,
                    MessageBoxDefaultButton.Button1);
                form.TopMost = false; 
            }   
        }
        /// <summary>
        /// ファイル保存ダイアログ表示を制御 ※今回の電子帳簿対応ではダイアログ表示を使用しない
        /// </summary>
        /// <remarks>
        /// <br>Note         : ファイル保存ダイアログ表示を制御する</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : 2022/04/26</br>
        /// </remarks>
        private void GetFileDialogDisplay()
        {
            try
            {
                // ファイル保存ダイアログ表示を制御
                if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, XML_PDFPRINTERSETTINGENABLE)))
                {
                    this._fileDialogDisplay = true;
                }
                else
                {
                    this._fileDialogDisplay = false;
                }
            }
            catch
            {
                this._fileDialogDisplay = false;
            }
        }
        /// <summary>
        /// 電子帳簿ログ出力
        /// </summary>
        /// <param name="stDateTime">システム時間</param>
        /// <param name="denchoDXIndexCSVEntityList">インデックスcsvファイルリスト</param>
        /// <remarks>
        /// <br>Note        : 電子帳簿ログ出力を行います。
        /// <br>Programmer  : 陳艶丹</br>
        /// <br>Date        : 2022/04/26</br>
        /// </remarks>
        private void OutEBooksLog(DateTime stDateTime, List<DenchoDXIndexCSVEntity> denchoDXIndexCSVEntityList)
        {
            System.IO.StreamWriter writer = null;
            try
            {
                // 端末番号取得
                PosTerminalMgAcs posTerminalMgAcs = new PosTerminalMgAcs();
                int cashRegisterNo;
                posTerminalMgAcs.GetCashRegisterNo(out cashRegisterNo, LoginInfoAcquisition.EnterpriseCode);

                string path = System.Environment.CurrentDirectory + CT_LOGFOLDER;
                // フォルダ作成
                if (!Directory.Exists(path))
                {
                    DirectoryInfo di = Directory.CreateDirectory(path);
                }

                string logPath = System.Environment.CurrentDirectory + CT_LOGFOLDER + string.Format(CT_LOGFILENM, DateTime.Now.ToString(CT_YMDFOMART), cashRegisterNo.ToString());
                writer = new System.IO.StreamWriter(logPath, true, System.Text.Encoding.Default);

                // 出力日時
                writer.Write(stDateTime.ToString(CT_LOGDATETIMEFOMART));
                writer.Write(Environment.NewLine);

                // 件数
                writer.Write(string.Format(CT_LOGCOUNT, denchoDXIndexCSVEntityList.Count.ToString()));
                writer.Write(Environment.NewLine);

                // ファイル名
                foreach (DenchoDXIndexCSVEntity work in denchoDXIndexCSVEntityList)
                {
                    writer.Write(work.Filename);
                    writer.Write(Environment.NewLine);
                }

                OperationHistoryLog operationHistoryLog = new OperationHistoryLog();
                string opLogMsg = string.Format(CT_OPLOGMSG, denchoDXIndexCSVEntityList.Count.ToString(), logPath);
                operationHistoryLog.WriteOperationLog(this, LogDataKind.OperationLog, ASSID_MAHNB01000U, PGNAME_STR, string.Empty, (int)OperationCode.EBooks, 0, opLogMsg, string.Empty);
            }
            catch
            {
            }
            finally
            {
                if (writer != null)
                {
                    writer.Close();
                }
            }
        }

        /// <summary>
        /// インデックスファイル作成
        /// </summary>
        /// <param name="denchoDXIndexCSVEntityList">インデックスcsvファイルリスト</param>
        /// <param name="eBooksFileFolderXmlInfo">XMLファイル</param>
        /// <param name="keyList">伝票リスト</param>
        /// <param name="salesDetailWorkDic">明細データDic</param>
        /// <param name="salesSlipWorkDic">伝票データDic</param>
        /// <remarks>
        /// <br>Note        : インデックスファイル作成処理を行う</br>
        /// <br>Programmer  : 陳艶丹</br>
        /// <br>Date        : 2022/04/26</br>
        /// </remarks>
        private void MakeIndexFile(List<SalesSlipPrintCndtn.SalesSlipKey> keyList, Dictionary<string, SalesSlipWork> salesSlipWorkDic,
            Dictionary<string, ArrayList> salesDetailWorkDic, EBooksLinkSetInfo eBooksFileFolderXmlInfo, out List<DenchoDXIndexCSVEntity> denchoDXIndexCSVEntityList)
        {

            denchoDXIndexCSVEntityList = new List<DenchoDXIndexCSVEntity>();
            try
            {
                //ファイル名リスト
                Dictionary<string, ArrayList> pdfFileNmList = new Dictionary<string, ArrayList>();

                // PDF受け渡し
                //ファイルコピー
                DirectoryInfo dir;
                if (this._fileDialogDisplay)
                {
                    // 作業フォルダから取得
                    dir = new DirectoryInfo(System.Environment.CurrentDirectory + CT_TEMPFOLDER);
                }
                else
                {
                    // 作業フォルダ\Renameから取得
                    dir = new DirectoryInfo(System.Environment.CurrentDirectory + CT_TEMPFOLDER + CT_RENAMEOLDER);
                }
                FileSystemInfo[] fileinfo = dir.GetFileSystemInfos();
                foreach (FileSystemInfo i in fileinfo)
                {
                    if (i is DirectoryInfo)
                    {
                        continue;
                    }
                    else
                    {
                        string[] subFlNm = i.FullName.Split(CT_SPLITCHAR);
                        if (pdfFileNmList.ContainsKey(subFlNm[3]))
                        {
                            pdfFileNmList[subFlNm[3]].Add(i.Name);
                        }
                        else
                        {
                            ArrayList al = new ArrayList();
                            al.Add(i.Name);
                            pdfFileNmList.Add(subFlNm[3], al);
                        }                       
                    }
                }
                if (pdfFileNmList.Count == 0) return;
                foreach (SalesSlipPrintCndtn.SalesSlipKey key in keyList)
                {
                    // 売上データ
                    string dicKey = key.SalesSlipNum + key.AcptAnOdrStatus.ToString();
                    SalesSlipWork salesSlipWork = salesSlipWorkDic[dicKey];

                    // インデックスファイル作成用エンティティ
                    DenchoDXIndexCSVEntity denchoDXIndexCSVEntity = new DenchoDXIndexCSVEntity();

                    //システム区分
                    denchoDXIndexCSVEntity.Mcd = DenchoDXIndexCSVEntity.EMcdType.PMNS;
                    //取引先コード(自社)	
                    denchoDXIndexCSVEntity.Blcustomercd = LoginInfoAcquisition.EnterpriseCode;

                    //書類分類	
                    if (key.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales)
                    {
                        //納品書
                        denchoDXIndexCSVEntity.Doctype = DenchoDXIndexCSVEntity.EDocType.DeliverySlip;
                    }
                    else
                    {
                        //見積書
                        denchoDXIndexCSVEntity.Doctype = DenchoDXIndexCSVEntity.EDocType.Quotation;
                    }
                    //取引先コード	
                    denchoDXIndexCSVEntity.Customercd = salesSlipWork.CustomerCode.ToString(CT_CUSTOMERCDFOMART);
                    //取引先名称	
                    denchoDXIndexCSVEntity.Customername = BadCharRemove(salesSlipWork.CustomerSnm.Trim());
                    //書類番号	
                    denchoDXIndexCSVEntity.Docnumber = key.SalesSlipNum;
                    //得意先の転嫁方式：請求先/請求子の時
                    if (salesSlipWork.ConsTaxLayMethod == (int)ConsTaxLayMethod.DemandParentLay ||
                        salesSlipWork.ConsTaxLayMethod == (int)ConsTaxLayMethod.DemandChildLay)
                    {
                        //取引金額合計(税抜き)	
                        denchoDXIndexCSVEntity.Price_tax_excluded = (decimal)salesSlipWork.SalesTotalTaxExc;
                        //取引金額合計(税込み)	
                        denchoDXIndexCSVEntity.Price_tax_included = (decimal)salesSlipWork.SalesTotalTaxExc;
                        //消費税金額合計	
                        denchoDXIndexCSVEntity.Total_tax = 0;
                    }
                    else
                    {
                        //取引金額合計(税込み)	
                        denchoDXIndexCSVEntity.Price_tax_included = (decimal)salesSlipWork.SalesTotalTaxInc;
                        //取引金額合計(税抜き)	
                        denchoDXIndexCSVEntity.Price_tax_excluded = (decimal)salesSlipWork.SalesTotalTaxExc;
                        //消費税金額合計	
                        denchoDXIndexCSVEntity.Total_tax = (decimal)(salesSlipWork.SalesTotalTaxInc - salesSlipWork.SalesTotalTaxExc);
                    }
                    // 備考
                    denchoDXIndexCSVEntity.Memo = salesSlipWork.SlipNote;
                    // 登録番号(発行者)
                    denchoDXIndexCSVEntity.Aojcorporatenumber = string.Empty;
                    if (this._salesSlipInputInitDataAcs.GetCompanyInf() != null)
                    {
                        // 発行者名称
                        denchoDXIndexCSVEntity.Companyname = this._salesSlipInputInitDataAcs.GetCompanyInf().CompanyName1.Trim();
                    }
                    // 発行拠点コード
                    denchoDXIndexCSVEntity.Sectioncd = Convert.ToUInt64(salesSlipWork.ResultsAddUpSecCd);
                    // 発行拠点名称
                    SecInfoSet secInfoSet = this._salesSlipInputInitDataAcs.GetSecInfo(salesSlipWork.ResultsAddUpSecCd.Trim());
                    if (secInfoSet != null)
                    {
                        denchoDXIndexCSVEntity.Sectionname = secInfoSet.SectionGuideNm;
                    }
                    //通貨単位
                    denchoDXIndexCSVEntity.Currencyunit = DenchoDXIndexCSVEntity.ECurrencyUnitType.JPY;

                    // 税率分金額取得
                    decimal price_taxrate1_excluded = decimal.Zero;
                    decimal price_taxrate1_included = decimal.Zero;
                    decimal tax1 = decimal.Zero;
                    decimal price_taxrate2_excluded = decimal.Zero;
                    decimal price_taxrate2_included = decimal.Zero;
                    decimal tax2 = decimal.Zero;
                    decimal price_taxrate3_excluded = decimal.Zero;
                    decimal price_taxrate3_included = decimal.Zero;
                    decimal tax3 = decimal.Zero;
                    GetPriceByRate(salesSlipWork, salesDetailWorkDic[dicKey],
                        out price_taxrate1_excluded, out price_taxrate1_included, out tax1,
                        out price_taxrate2_excluded, out price_taxrate2_included, out tax2,
                        out price_taxrate3_excluded, out price_taxrate3_included, out tax3);

                    // 税率(1)	
                    denchoDXIndexCSVEntity.Taxrate1 = 100;
                    // 税率(1)対象金額合計(税抜き)
                    denchoDXIndexCSVEntity.Price_taxrate1_excluded = price_taxrate1_excluded;
                    // 税率(1)対象金額合計(税込み)
                    denchoDXIndexCSVEntity.Price_taxrate1_included = price_taxrate1_included;
                    // 税額(1)
                    denchoDXIndexCSVEntity.Tax1 = tax1;
                    // 税率(2)	
                    denchoDXIndexCSVEntity.Taxrate2 = 80;
                    // 税率(2)対象金額合計(税抜き)
                    denchoDXIndexCSVEntity.Price_taxrate2_excluded = price_taxrate2_excluded;
                    // 税率(2)対象金額合計(税込み)
                    denchoDXIndexCSVEntity.Price_taxrate2_included = price_taxrate2_included;
                    // 税額(2)
                    denchoDXIndexCSVEntity.Tax2 = tax2;
                    // 税率(3)	
                    denchoDXIndexCSVEntity.Taxrate3 = 0;
                    // 税率(3)対象金額合計(税抜き)
                    denchoDXIndexCSVEntity.Price_taxrate3_excluded = price_taxrate3_excluded;
                    // 税率(3)対象金額合計(税込み)
                    denchoDXIndexCSVEntity.Price_taxrate3_included = price_taxrate3_included;
                    // 税額(3)
                    denchoDXIndexCSVEntity.Tax3 = tax3;
                    if (pdfFileNmList.Count > 0)
                    {
                        ArrayList al = pdfFileNmList[key.SalesSlipNum];
                        if (al.Count == 1)
                        {
                            //同一伝票が1件PDF生成のみ
                            //ファイル名	 
                            denchoDXIndexCSVEntity.Filename = (string)al[0];
                            //取引年月日
                            int idx = ((string)al[0]).LastIndexOf(CT_SPLITSTR);
                            string dateStr = ((string)al[0]).Substring(idx + 1, 14);
                            DateTime dateTime = DateTime.ParseExact(dateStr, CT_DATETIMEFOMART, System.Globalization.CultureInfo.CurrentCulture);
                            denchoDXIndexCSVEntity.Transactiondate = dateTime;
                            //取引時間	
                            denchoDXIndexCSVEntity.Transactiontime = dateTime;
                            denchoDXIndexCSVEntityList.Add(denchoDXIndexCSVEntity);
                        }
                        else
                        {
                            //同一伝票が複数件PDF生成
                            foreach(string fileName in al)
                            {
                                DenchoDXIndexCSVEntity csvEntity = DenchoDXIndexCSVEntityClone(denchoDXIndexCSVEntity);
                                //ファイル名
                                csvEntity.Filename = fileName;
                                //取引年月日
                                int idx = fileName.LastIndexOf(CT_SPLITSTR);
                                string dateStr = fileName.Substring(idx + 1, 14);
                                DateTime dateTime = DateTime.ParseExact(dateStr, CT_DATETIMEFOMART, System.Globalization.CultureInfo.CurrentCulture);
                                csvEntity.Transactiondate = dateTime;
                                //取引時間	
                                csvEntity.Transactiontime = dateTime;
                                denchoDXIndexCSVEntityList.Add(csvEntity);
                            }
                        }
                    }
                }

                DenchoDXIndexCSV denchoDXIndexCSV = new DenchoDXIndexCSV(denchoDXIndexCSVEntityList);
                string pathCSV = dir + string.Format(CT_EBOOKSFLPATH, LoginInfoAcquisition.EnterpriseCode, DateTime.Now.ToString(CT_DATETIMEFOMART));
                denchoDXIndexCSV.MakeIndexCSV(pathCSV);

                //ファイルコピー
                fileinfo = dir.GetFileSystemInfos();
                foreach (FileSystemInfo i in fileinfo)
                {
                    if (i is DirectoryInfo)
                    {
                        continue;
                    }
                    else
                    {
                        File.Copy(i.FullName, eBooksFileFolderXmlInfo.EBooksFolder + CT_FOLDERSPLIT + i.Name);
                    }
                }
            }
            catch
            {
                //既存処理影響なし
            }
        }
        /// <summary>
        /// Clone処理
        /// </summary>
        /// <param name="denchoDXIndexCSVEntity">インデックスcsvファイル</param>
        /// <remarks>
        /// <br>Note        : Clone処理を行う</br>
        /// <br>Programmer  : 陳艶丹</br>
        /// <br>Date        : 2022/04/26</br>
        /// </remarks>
        private DenchoDXIndexCSVEntity DenchoDXIndexCSVEntityClone(DenchoDXIndexCSVEntity denchoDXIndexCSVEntity)
        {
            DenchoDXIndexCSVEntity csvEntity = new DenchoDXIndexCSVEntity();
            //システム区分
            csvEntity.Mcd = denchoDXIndexCSVEntity.Mcd;
            //取引先コード(自社)	
            csvEntity.Blcustomercd = denchoDXIndexCSVEntity.Blcustomercd;
            //ファイル名	
            csvEntity.Filename = denchoDXIndexCSVEntity.Filename;
            //書類分類	
            csvEntity.Doctype = denchoDXIndexCSVEntity.Doctype;
            //取引先コード	
            csvEntity.Customercd = denchoDXIndexCSVEntity.Customercd;
            //取引先名称	
            csvEntity.Customername = denchoDXIndexCSVEntity.Customername;
            //書類番号	
            csvEntity.Docnumber = denchoDXIndexCSVEntity.Docnumber;
            //取引年月日	
            csvEntity.Transactiondate = denchoDXIndexCSVEntity.Transactiondate;
            //取引時間
            csvEntity.Transactiontime = denchoDXIndexCSVEntity.Transactiontime;
            //取引金額合計(税込み)	
            csvEntity.Price_tax_included = denchoDXIndexCSVEntity.Price_tax_included;
            //取引金額合計(税抜き)	
            csvEntity.Price_tax_excluded = denchoDXIndexCSVEntity.Price_tax_excluded;
            //消費税金額合計	
            csvEntity.Total_tax = denchoDXIndexCSVEntity.Total_tax;
            // 備考
            csvEntity.Memo = denchoDXIndexCSVEntity.Memo;
            // 登録番号(発行者)
            csvEntity.Aojcorporatenumber = denchoDXIndexCSVEntity.Aojcorporatenumber;
            // 発行者名称
            csvEntity.Companyname = denchoDXIndexCSVEntity.Companyname;
            // 発行拠点コード
            csvEntity.Sectioncd = denchoDXIndexCSVEntity.Sectioncd;
            // 発行拠点名称
            csvEntity.Sectionname = denchoDXIndexCSVEntity.Sectionname;
            //通貨単位
            csvEntity.Currencyunit = denchoDXIndexCSVEntity.Currencyunit;
            // 税率(1)	
            csvEntity.Taxrate1 = denchoDXIndexCSVEntity.Taxrate1;
            // 税率(1)対象金額合計(税抜き)
            csvEntity.Price_taxrate1_excluded = denchoDXIndexCSVEntity.Price_taxrate1_excluded;
            // 税率(1)対象金額合計(税込み)
            csvEntity.Price_taxrate1_included = denchoDXIndexCSVEntity.Price_taxrate1_included;
            // 税額(1)
            csvEntity.Tax1 = denchoDXIndexCSVEntity.Tax1;
            // 税率(2)	
            csvEntity.Taxrate2 = denchoDXIndexCSVEntity.Taxrate2;
            // 税率(2)対象金額合計(税抜き)
            csvEntity.Price_taxrate2_excluded = denchoDXIndexCSVEntity.Price_taxrate2_excluded;
            // 税率(2)対象金額合計(税込み)
            csvEntity.Price_taxrate2_included = denchoDXIndexCSVEntity.Price_taxrate2_included;
            // 税額(2)
            csvEntity.Tax2 = denchoDXIndexCSVEntity.Tax2;
            // 税率(3)	
            csvEntity.Taxrate3 = denchoDXIndexCSVEntity.Taxrate3;
            // 税率(3)対象金額合計(税抜き)
            csvEntity.Price_taxrate3_excluded = denchoDXIndexCSVEntity.Price_taxrate3_excluded;
            // 税率(3)対象金額合計(税込み)
            csvEntity.Price_taxrate3_included = denchoDXIndexCSVEntity.Price_taxrate3_included;
            // 税額(3)
            csvEntity.Tax3 = denchoDXIndexCSVEntity.Tax3;
            return csvEntity;

        }

        /// <summary>
        /// 税率１～税率３の金額を算出
        /// </summary>
        /// <param name="salesDetailWorkList">売上明細データリスト</param>
        /// <param name="salesSlipWork">売上伝票データリスト</param>
        /// <param name="price_taxrate1_excluded">税率(1)対象金額合計(税抜き)</param>
        /// <param name="price_taxrate1_included">税率(1)対象金額合計(税込み)</param>
        /// <param name="tax1">税額(1)</param>
        /// <param name="price_taxrate2_excluded">税率(2)対象金額合計(税抜き)</param>
        /// <param name="price_taxrate2_included">税率(2)対象金額合計(税込み)</param>
        /// <param name="tax2">税額(2)</param>
        /// <param name="price_taxrate3_excluded">税率(3)対象金額合計(税抜き)</param>
        /// <param name="price_taxrate3_included">税率(3)対象金額合計(税込み)</param>
        /// <param name="tax3">税額(3)</param>
        /// <remarks>
        /// <br>Note        : 税率１～税率３の金額を算出する</br>
        /// <br>Programmer  : 陳艶丹</br>
        /// <br>Date        : 2022/04/26</br>
        /// </remarks>
        private void GetPriceByRate(SalesSlipWork salesSlipWork, ArrayList salesDetailWorkList,
                        out decimal price_taxrate1_excluded, out decimal price_taxrate1_included, out decimal tax1,
                        out decimal price_taxrate2_excluded, out decimal price_taxrate2_included, out decimal tax2,
                        out decimal price_taxrate3_excluded, out decimal price_taxrate3_included, out decimal tax3)
        {
            // 初期化
            price_taxrate1_excluded = decimal.Zero;
            price_taxrate1_included = decimal.Zero;
            tax1 = 0;
            price_taxrate2_excluded = decimal.Zero;
            price_taxrate2_included = decimal.Zero;
            tax2 = 0;
            price_taxrate3_excluded = decimal.Zero;
            price_taxrate3_included = decimal.Zero;
            tax3 = 0;

            // 非課税の場合
            if (salesSlipWork.ConsTaxLayMethod == (int)ConsTaxLayMethod.TaxExempt)
            {
                price_taxrate3_excluded = (decimal)salesSlipWork.SalesTotalTaxExc;
                price_taxrate3_included = (decimal)salesSlipWork.SalesTotalTaxInc;
            }
            else
            {
                decimal price_excluded = (decimal)salesSlipWork.SalesTotalTaxExc;
                decimal price_included = (decimal)salesSlipWork.SalesTotalTaxInc;
                decimal tax = (decimal)salesSlipWork.SalesSubtotalTax;
                decimal price_taxNone = decimal.Zero;
                foreach (SalesDetailWork detailWork in salesDetailWorkList)
                {
                    if (detailWork.TaxationDivCd == (int)CalculateTax.TaxationCode.TaxNone)
                    {
                        // 非課税金額算出
                        price_taxNone = price_taxNone + detailWork.SalesMoneyTaxExc;
                    }
                }
                if (salesSlipWork.ConsTaxRate == RATE10)
                {
                    //得意先の転嫁方式：請求先/請求子の時
                    if (salesSlipWork.ConsTaxLayMethod == (int)ConsTaxLayMethod.DemandParentLay ||
                        salesSlipWork.ConsTaxLayMethod == (int)ConsTaxLayMethod.DemandChildLay)
                    {
                        price_taxrate1_excluded = price_excluded - price_taxNone;
                        price_taxrate1_included = price_taxrate1_excluded;
                        tax1 = 0;
                    }
                    else
                    {
                        price_taxrate1_excluded = price_excluded - price_taxNone;
                        price_taxrate1_included = price_included - price_taxNone;
                        tax1 = tax;
                    }

                }
                if (salesSlipWork.ConsTaxRate == RATE8)
                {
                    //得意先の転嫁方式：請求先/請求子の時
                    if (salesSlipWork.ConsTaxLayMethod == (int)ConsTaxLayMethod.DemandParentLay ||
                        salesSlipWork.ConsTaxLayMethod == (int)ConsTaxLayMethod.DemandChildLay)
                    {
                        price_taxrate2_excluded = price_excluded - price_taxNone;
                        price_taxrate2_included = price_taxrate2_excluded;
                        tax2 = 0;
                    }
                    else
                    {
                        price_taxrate2_excluded = price_excluded - price_taxNone;
                        price_taxrate2_included = price_included - price_taxNone;
                        tax2 = tax;
                    }
                }
                price_taxrate3_excluded = price_taxNone;
                price_taxrate3_included = price_taxNone;
            }
        }

        /// <summary>
        /// 電子帳簿受け渡し用フォルダ取得
        /// </summary>
        /// <remarks>
        /// <br>Note        : 電子帳簿受け渡し用フォルダ取得処理を行う</br>
        /// <br>Programmer  : 陳艶丹</br>
        /// <br>Date        : 2022/04/26</br>
        /// </remarks>
        private EBooksLinkSetInfo GetEBooksFileFolderXmlInfo()
        {
            EBooksLinkSetInfo eBooksFileFolderXmlInfo = new EBooksLinkSetInfo();
            try
            {
                if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, CT_XMLEBOOKSFILEFOLDERXMLINFO)))
                {
                    // XMLからチェック区分を取得する
                    eBooksFileFolderXmlInfo = UserSettingController.DeserializeUserSetting<EBooksLinkSetInfo>(Path.Combine(ConstantManagement_ClientDirectory.UISettings, CT_XMLEBOOKSFILEFOLDERXMLINFO));
                }
                else
                {
                    // デフォルトフォルダ
                    eBooksFileFolderXmlInfo.EBooksFolder = System.Environment.CurrentDirectory + CT_EBOOKSFOLDER;
                    eBooksFileFolderXmlInfo.CustomFolder = System.Environment.CurrentDirectory + CT_CUSTOMERFOLDER;
                }
            }
            catch
            {
                // デフォルトフォルダ
                eBooksFileFolderXmlInfo.EBooksFolder = System.Environment.CurrentDirectory + CT_EBOOKSFOLDER;
                eBooksFileFolderXmlInfo.CustomFolder = System.Environment.CurrentDirectory + CT_CUSTOMERFOLDER;
            }
            finally
            {
                // フォルダ作成
                if (!Directory.Exists(eBooksFileFolderXmlInfo.EBooksFolder))
                {
                    DirectoryInfo di = Directory.CreateDirectory(eBooksFileFolderXmlInfo.EBooksFolder);
                }
                if (!Directory.Exists(eBooksFileFolderXmlInfo.CustomFolder))
                {
                    DirectoryInfo di = Directory.CreateDirectory(eBooksFileFolderXmlInfo.CustomFolder);
                }
            }
            return eBooksFileFolderXmlInfo;
        }
        [StructLayout(LayoutKind.Sequential)]
        private class PRINTER_DEFAULTS
        {
            public string pDatatype;
            public IntPtr pDevMode;
            public int DesiredAccess;
        }
        [StructLayout(LayoutKind.Sequential)]
        private struct PRINTER_INFO_2
        {
            [MarshalAs(UnmanagedType.LPStr)]
            public string pServerName;
            [MarshalAs(UnmanagedType.LPStr)]
            public string pPrinterName;
            [MarshalAs(UnmanagedType.LPStr)]
            public string pShareName;
            [MarshalAs(UnmanagedType.LPStr)]
            public string pPortName;
            [MarshalAs(UnmanagedType.LPStr)]
            public string pDriverName;
            [MarshalAs(UnmanagedType.LPStr)]
            public string pComment;
            [MarshalAs(UnmanagedType.LPStr)]
            public string pLocation;
            public IntPtr pDevMode;
            [MarshalAs(UnmanagedType.LPStr)]
            public string pSepFile;
            [MarshalAs(UnmanagedType.LPStr)]
            public string pPrintProcessor;
            [MarshalAs(UnmanagedType.LPStr)]
            public string pDatatype;
            [MarshalAs(UnmanagedType.LPStr)]
            public string pParameters;
            public IntPtr pSecurityDescriptor;
            public Int32 Attributes;
            public Int32 Priority;
            public Int32 DefaultPriority;
            public Int32 StartTime;
            public Int32 UntilTime;
            public Int32 Status;
            public Int32 cJobs;
            public Int32 AveragePPM;
        }
        [DllImport("winspool.drv", SetLastError = true)]
        private static extern bool GetPrinter(IntPtr hPrinter,
            int dwLevel, IntPtr pPrinter, int cbBuf, out int pcbNeeded);
        [DllImport("winspool.drv", SetLastError = true)]
        private static extern bool ClosePrinter(IntPtr hPrinter);
        [DllImport("winspool.drv", CharSet = CharSet.Ansi, SetLastError = true)]
        private static extern bool SetPrinter(IntPtr hPrinter, int Level, IntPtr
        pPrinter, int Command);
        [DllImport("winspool.drv", EntryPoint = "XcvDataW", SetLastError = true)]
        private static extern bool XcvData(
            IntPtr hXcv,
            [MarshalAs(UnmanagedType.LPWStr)] string pszDataName,
            IntPtr pInputData,
            uint cbInputData,
            IntPtr pOutputData,
            uint cbOutputData,
            out uint pcbOutputNeeded,
            out uint pwdStatus);
        [DllImport("winspool.drv", EntryPoint = "OpenPrinterA", SetLastError = true)]
        private static extern int OpenPrinter(
            string pPrinterName,
            ref IntPtr phPrinter,
            PRINTER_DEFAULTS pDefault);
        // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応 ---<<<<<
        #endregion

        #region ●売上データ削除
        /// <summary>
        /// 売上データの削除を行います。
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailDataTable"></param>
        /// <param name="depositMain"></param>
        /// <param name="depositAlw"></param>
        /// <param name="stockSlipForReadDataTable"></param>
        /// <param name="stockDetailForReadDataTable"></param>
        /// <param name="paymentSlpDataTable"></param>
        /// <param name="retMessage"></param>
        /// <returns></returns>
        public int DeleteDBData(SalesSlip salesSlip, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable, SearchDepsitMain depositMain, SearchDepositAlw depositAlw, SalesInputDataSet.StockSlipForReadDataTable stockSlipForReadDataTable, SalesInputDataSet.StockDetailForReadDataTable stockDetailForReadDataTable, SalesInputDataSet.PaymentSlpDataTable paymentSlpDataTable, out string retMessage)
        {
            //-----------------------------------------------------------------------------------------------------------------------
            // ParaList構成
            //-----------------------------------------------------------------------------------------------------------------------
            //  CustomSerializeArrayList                統合リスト
            //      --CustomSerializeArrayList          売上情報リスト
            //          --IOWriteMAHNBDeleteWork        売上データ                              
            //          --DepsitMainWork                入金データ                              
            //          --DepositAlwWork                入金引当データ                          
            //------------------------------------------------------
            //      --CustomSerializeArrayList          仕入情報リスト
            //          --IOWriteMASIRDeleteWork        仕入データ                              
            //          --PaymentSlpWork                支払データ                              
            //------------------------------------------------------
            //      --CustomSerializeArrayList          出荷情報リスト
            //          --IOWriteMASIRDeleteWork        出荷データ                              
            //------------------------------------------------------
            //      --CustomSerializeArrayList          発注情報リスト
            //          --StockDetailWork               発注明細データ
            //-----------------------------------------------------------------------------------------------------------------------

            // 統合リスト
            CustomSerializeArrayList paraList = new CustomSerializeArrayList();

            #region ●売上情報
            //------------------------------------------------------
            // 売上情報
            //------------------------------------------------------
            CustomSerializeArrayList dataSalesList = new CustomSerializeArrayList();
            IOWriteMAHNBDeleteWork deleteWork = new IOWriteMAHNBDeleteWork();
            deleteWork.EnterpriseCode = salesSlip.EnterpriseCode; // 企業コード
            deleteWork.UpdateDateTime = salesSlip.UpdateDateTime; // 更新日時
            deleteWork.AcptAnOdrStatus = salesSlip.AcptAnOdrStatus; // 受注ステータス
            deleteWork.SalesSlipNum = salesSlip.SalesSlipNum.PadLeft(9, '0');
            deleteWork.DebitNoteDiv = salesSlip.DebitNoteDiv; // 赤伝区分
            dataSalesList.Add(deleteWork);       // 売上データ

            CustomSerializeArrayList salesDetailWorkList = new CustomSerializeArrayList();
            foreach (SalesDetail salesDetail in this._salesDetailDBDataList)
            {
                SalesDetailWork salesDetailWork = new SalesDetailWork();
                salesDetailWork = ConvertSalesSlip.ParamDataFromUIData(salesDetail); // 明細情報
                salesDetailWorkList.Add(salesDetailWork);
            }
            dataSalesList.Add(salesDetailWorkList); // 売上明細データ

            // --- ADD K2014/06/12 Y.Wakita ---------->>>>>
            #region フタバ個別対応
            if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaSlipPrtCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                this._deleteFlg = true; // 削除フラグ
                this._deleteAcptAnOdrStatus = deleteWork.AcptAnOdrStatus; // 受注ステータス

                ArrayList salesDataList = new ArrayList();  // 売上データリスト
                ArrayList acptDataList = new ArrayList();   // 受注データリスト
                CustomSerializeArrayList salesData = new CustomSerializeArrayList();                    // 伝票情報クリア

                salesData.Add(this._salesSlip);
                salesData.Add(this._salesDetailDBDataList);

                salesDataList.Add(salesData);

                #region ●伝票明細追加情報
                //---------------------------------------------------------------
                // 伝票明細追加情報
                //---------------------------------------------------------------
                this.SettingSlipDetailAddInfoForSalesData(ref salesDataList, ref acptDataList);
                #endregion

                #region ●売上情報
                //------------------------------------------------------
                // 売上情報
                //------------------------------------------------------
                foreach (CustomSerializeArrayList list in salesDataList)
                {
                    #region 元データ用変数
                    List<SlipDetailAddInfoWork> sourceSlipDetailAddInfoWorkList = new List<SlipDetailAddInfoWork>();
                    #endregion

                    #region データ格納用変数
                    ArrayList slipDetailAddInfoWorkList = new ArrayList();                          // 伝票明細追加情報リスト
                    #endregion

                    #region 元データ分解
                    //------------------------------------------------------
                    // 元データ分解
                    //------------------------------------------------------
                    foreach (object obj in list)
                    {
                        if (obj is List<SlipDetailAddInfoWork>)
                        {
                            sourceSlipDetailAddInfoWorkList = (List<SlipDetailAddInfoWork>)obj;
                        }
                    }
                    #endregion

                    if (sourceSlipDetailAddInfoWorkList.Count != 0)
                    {
                        #region 伝票明細追加情報
                        slipDetailAddInfoWorkList.AddRange(sourceSlipDetailAddInfoWorkList);
                        #endregion

                        #region データセット
                        // 伝票明細追加情報リストセット
                        if (slipDetailAddInfoWorkList.Count > 0) dataSalesList.Add(slipDetailAddInfoWorkList);
                        #endregion

                    }
                }
                #endregion
            }
            #endregion
            
            this._deleteFlg = false; // 削除フラグ
            // --- ADD K2014/06/12 Y.Wakita ----------<<<<<

            // 入金情報
            if (depositMain.DepositSlipNo != 0)
            {
                DepsitDataWork depositWork = ConvertSalesSlip.ParamDataFromUIData(depositMain);
                dataSalesList.Add(depositWork);      // 入金データ
                DepositAlwWork depositAlwWork = (DepositAlwWork)DBAndXMLDataMergeParts.CopyPropertyInClass(depositAlw, typeof(DepositAlwWork));
                dataSalesList.Add(depositAlwWork);   // 入金引当データ
            }
            paraList.Add(dataSalesList);
            #endregion

            #region ●仕入情報
            // --- UPD 2010/07/26 ---------->>>>>
            //paraList.AddRange(this.GetStockInfoForDelete(stockSlipForReadDataTable, stockDetailForReadDataTable, paymentSlpDataTable));
            paraList.AddRange(this.GetStockInfoForDelete(stockSlipForReadDataTable, stockDetailForReadDataTable, paymentSlpDataTable, salesSlip, _salesDetailDBDataList));
            // --- UPD 2010/07/26 ----------<<<<<
            #endregion

            #region ●リモート参照用パラメータ
            //------------------------------------------------------
            // リモート参照用パラメータ
            //------------------------------------------------------
            IOWriteCtrlOptWork iOWriteCtrlOptWork = new IOWriteCtrlOptWork();                   // リモート参照用パラメータ
            this.SettingIOWriteCtrlOptWork(SalesSlipInputAcs.OptWorkSettingType.Delete, out iOWriteCtrlOptWork);                             // リモート参照用パラメータ設定処理
            paraList.Add(iOWriteCtrlOptWork);
            #endregion

            object dataObj = (object)paraList;

            retMessage = string.Empty;
            string retItemInfo;
            int status = this._iIOWriteControlDB.Delete(ref dataObj, out retMessage, out retItemInfo);

            // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------>>>>
            // TSPインラインオプションが立っている時、且つ、ＴＳＰインラインの得意先の時、指示書№入力した
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL && !salesSlip.PartySaleSlipNum.Equals(string.Empty) &&
                (this._salesSlipInputInitDataAcs.Opt_TSP == (int)SalesSlipInputInitDataAcs.Option.ON) && salesSlip.AcptAnOdrStatus == 30
                && salesSlip.SalesSlipCd != (int)SalesSlipCd.RetGoods && salesSlip.DebitNoteDiv != 1)
            {
                if (this.TspCprtStWorkList != null && this.TspCprtStWorkList.Count == 0)
                {
                    // TSP連携マスタ設定情報
                    TspCprtStAcs tspCprtStAcs = new TspCprtStAcs();
                    TspCprtStWork tspCprtStWork = new TspCprtStWork();
                    try
                    {
                        // 企業コード
                        tspCprtStWork.EnterpriseCode = this._enterpriseCode;
                        // TSP連携マスタ設定情報取得
                        int statusTsp = tspCprtStAcs.Search(tspCprtStWork, out this.TspCprtStWorkList);
                        if (statusTsp != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "DeleteDBData", "TSP連携マスタ設定情報取得に失敗しました。");
                        }
                    }
                    catch (Exception ex)
                    {
                        SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "DeleteDBData", "TSP連携マスタ設定情報取得に失敗しました、" + ex.Message.ToString());
                    }
                }
                // TSP連携マスタ設定情報設定ある場合
                if (TspCprtStWorkList != null && TspCprtStWorkList.Count > 0)
                {
                    bool tspCustomerCode = false;
                    int sendCode = -1;
                    // 得意先コードが設定するの判断
                    foreach (TspCprtStWork tspWork in this.TspCprtStWorkList)
                    {
                        if (tspWork.CustomerCode == salesSlip.CustomerCode)
                        {
                            sendCode = tspWork.SendCode;
                            tspCustomerCode = true;
                            break;
                        }
                    }
                    // 得意先コードが設定する
                    if (tspCustomerCode)
                    {
                        WriteTspSdRvDataAcs tspAcs = new WriteTspSdRvDataAcs();
                        try
                        {
                            bool tspFlg = tspAcs.MoveTspSdRvData(salesSlip.CustomerCode, salesSlip.SalesSlipNum);
                            // TSP.NSデータ作成部品作成失敗の場合、ログを作成する。
                            if (!tspFlg)
                            {
                                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "DeleteDBData", "TSP送信データ削除に失敗しました、\\Log\\TSP送信データ作成\\PMTSP01201A.Logを確認してください。");
                            }
                            else
                            {
                                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "DeleteDBData", "TSP送信データを削除しました。");
                                // 送信処理:0自動
                                if (sendCode == 0)
                                {
                                    // TSP.NS自動送信処理
                                    Process.Start("PMTSP01100U.EXE", this.Parameter + " /A");
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "DeleteDBData", "TSP送信データ削除に失敗しました、" + ex.Message.ToString());
                        }
                    }
                }
            }
            // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------<<<<

            return status;

        }

        // --- ADD 2012/11/30 Y.Wakita ---------->>>>>
        /// <summary>
        /// 売上データの削除を行います。
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailDataTable"></param>
        /// <param name="depositMain"></param>
        /// <param name="depositAlw"></param>
        /// <param name="stockSlipForReadDataTable"></param>
        /// <param name="stockDetailForReadDataTable"></param>
        /// <param name="paymentSlpDataTable"></param>
        /// <param name="retMessage"></param>
        /// <returns></returns>
        public int DeleteDBData(SalesSlip salesSlip, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable, SearchDepsitMain depositMain, SearchDepositAlw depositAlw, SalesInputDataSet.StockSlipForReadDataTable stockSlipForReadDataTable, SalesInputDataSet.StockDetailForReadDataTable stockDetailForReadDataTable, SalesInputDataSet.PaymentSlpDataTable paymentSlpDataTable, ArrayList acptDataList, List<StockSyncInfoKey> stockSyncInfoKeyList, out string retMessage)
        {
            //-----------------------------------------------------------------------------------------------------------------------
            // ParaList構成
            //-----------------------------------------------------------------------------------------------------------------------
            //  CustomSerializeArrayList                統合リスト
            //      --CustomSerializeArrayList          売上情報リスト
            //          --IOWriteMAHNBDeleteWork        売上データ                              
            //          --DepsitMainWork                入金データ                              
            //          --DepositAlwWork                入金引当データ                          
            //------------------------------------------------------
            //      --CustomSerializeArrayList          仕入情報リスト
            //          --IOWriteMASIRDeleteWork        仕入データ                              
            //          --PaymentSlpWork                支払データ                              
            //------------------------------------------------------
            //      --CustomSerializeArrayList          出荷情報リスト
            //          --IOWriteMASIRDeleteWork        出荷データ                              
            //------------------------------------------------------
            //      --CustomSerializeArrayList          発注情報リスト
            //          --StockDetailWork               発注明細データ
            //-----------------------------------------------------------------------------------------------------------------------

            // 統合リスト
            CustomSerializeArrayList paraList = new CustomSerializeArrayList();

            #region ●売上情報
            //------------------------------------------------------
            // 売上情報
            //------------------------------------------------------
            CustomSerializeArrayList dataSalesList = new CustomSerializeArrayList();
            IOWriteMAHNBDeleteWork deleteWork = new IOWriteMAHNBDeleteWork();
            deleteWork.EnterpriseCode = salesSlip.EnterpriseCode; // 企業コード
            deleteWork.UpdateDateTime = salesSlip.UpdateDateTime; // 更新日時
            deleteWork.AcptAnOdrStatus = salesSlip.AcptAnOdrStatus; // 受注ステータス
            deleteWork.SalesSlipNum = salesSlip.SalesSlipNum.PadLeft(9, '0');
            deleteWork.DebitNoteDiv = salesSlip.DebitNoteDiv; // 赤伝区分
            dataSalesList.Add(deleteWork);       // 売上データ

            CustomSerializeArrayList salesDetailWorkList = new CustomSerializeArrayList();
            foreach (SalesDetail salesDetail in this._salesDetailDBDataList)
            {
                SalesDetailWork salesDetailWork = new SalesDetailWork();
                salesDetailWork = ConvertSalesSlip.ParamDataFromUIData(salesDetail); // 明細情報
                salesDetailWorkList.Add(salesDetailWork);
            }
            dataSalesList.Add(salesDetailWorkList); // 売上明細データ

            // --- ADD K2014/06/12 Y.Wakita ---------->>>>>
            #region フタバ個別対応
            if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaSlipPrtCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                this._deleteFlg = true; // 削除フラグ
                this._deleteAcptAnOdrStatus = deleteWork.AcptAnOdrStatus; // 受注ステータス

                ArrayList salesDataList = new ArrayList();  // 売上データリスト
                //ArrayList acptDataList = new ArrayList();   // 受注データリスト
                CustomSerializeArrayList salesData = new CustomSerializeArrayList();                    // 伝票情報クリア

                salesData.Add(this._salesSlip);
                salesData.Add(this._salesDetailDBDataList);

                salesDataList.Add(salesData);

                #region ●伝票明細追加情報
                //---------------------------------------------------------------
                // 伝票明細追加情報
                //---------------------------------------------------------------
                this.SettingSlipDetailAddInfoForSalesData(ref salesDataList, ref acptDataList);
                #endregion

                #region ●売上情報
                //------------------------------------------------------
                // 売上情報
                //------------------------------------------------------
                foreach (CustomSerializeArrayList list in salesDataList)
                {
                    #region 元データ用変数
                    List<SlipDetailAddInfoWork> sourceSlipDetailAddInfoWorkList = new List<SlipDetailAddInfoWork>();
                    #endregion

                    #region データ格納用変数
                    ArrayList slipDetailAddInfoWorkList = new ArrayList();                          // 伝票明細追加情報リスト
                    #endregion

                    #region 元データ分解
                    //------------------------------------------------------
                    // 元データ分解
                    //------------------------------------------------------
                    foreach (object obj in list)
                    {
                        if (obj is List<SlipDetailAddInfoWork>)
                        {
                            sourceSlipDetailAddInfoWorkList = (List<SlipDetailAddInfoWork>)obj;
                        }
                    }
                    #endregion

                    if (sourceSlipDetailAddInfoWorkList.Count != 0)
                    {
                        #region 伝票明細追加情報
                        slipDetailAddInfoWorkList.AddRange(sourceSlipDetailAddInfoWorkList);
                        #endregion

                        #region データセット
                        // 伝票明細追加情報リストセット
                        if (slipDetailAddInfoWorkList.Count > 0) dataSalesList.Add(slipDetailAddInfoWorkList);
                        #endregion

                    }
                }
                #endregion
            }
            #endregion

            this._deleteFlg = false; // 削除フラグ
            // --- ADD K2014/06/12 Y.Wakita ----------<<<<<

            // 入金情報
            if (depositMain.DepositSlipNo != 0)
            {
                DepsitDataWork depositWork = ConvertSalesSlip.ParamDataFromUIData(depositMain);
                dataSalesList.Add(depositWork);      // 入金データ
                DepositAlwWork depositAlwWork = (DepositAlwWork)DBAndXMLDataMergeParts.CopyPropertyInClass(depositAlw, typeof(DepositAlwWork));
                dataSalesList.Add(depositAlwWork);   // 入金引当データ
            }
            paraList.Add(dataSalesList);
            #endregion

            #region ●仕入情報
            // --- UPD 2010/07/26 ---------->>>>>
            //paraList.AddRange(this.GetStockInfoForDelete(stockSlipForReadDataTable, stockDetailForReadDataTable, paymentSlpDataTable));
            paraList.AddRange(this.GetStockInfoForDelete(stockSlipForReadDataTable, stockDetailForReadDataTable, paymentSlpDataTable, salesSlip, _salesDetailDBDataList));
            // --- UPD 2010/07/26 ----------<<<<<
            #endregion

            #region ●リモート参照用パラメータ
            //------------------------------------------------------
            // リモート参照用パラメータ
            //------------------------------------------------------
            IOWriteCtrlOptWork iOWriteCtrlOptWork = new IOWriteCtrlOptWork();                   // リモート参照用パラメータ
            this.SettingIOWriteCtrlOptWork(SalesSlipInputAcs.OptWorkSettingType.Delete, out iOWriteCtrlOptWork);                             // リモート参照用パラメータ設定処理
            paraList.Add(iOWriteCtrlOptWork);
            #endregion

            #region ●仕入情報取得
            ArrayList stockSlipInfoList = null;
            ArrayList deleteStockSlipInfoList = null;
            ArrayList dataList = new ArrayList();

            dataList = acptDataList;
            this.GetCurrentStockInfo(out stockSlipInfoList, out deleteStockSlipInfoList, stockSyncInfoKeyList, dataList);
            #endregion

            #region ●仕入情報
            // --- DEL 2012/12/20 T.Nishi ---------->>>>>
            //bool stockFlag = false;
            // --- DEL 2012/12/20 T.Nishi ----------<<<<<
            //------------------------------------------------------
            // 仕入情報
            //------------------------------------------------------
            if ((stockSlipInfoList != null) && (stockSlipInfoList.Count != 0))
            {
                foreach (CustomSerializeArrayList list in stockSlipInfoList)
                {
                    paraList.Add(list);
                }
                // --- DEL 2012/12/20 T.Nishi ---------->>>>>
                //stockFlag = true;
                // --- DEL 2012/12/20 T.Nishi ----------<<<<<
            }
            //------------------------------------------------------
            // 削除仕入情報
            //------------------------------------------------------
            if ((deleteStockSlipInfoList != null) && (deleteStockSlipInfoList.Count != 0))
            {
                foreach (object obj in deleteStockSlipInfoList)
                {
                    if (obj is IOWriteMASIRDeleteWork)
                    {
                        paraList.Add((IOWriteMASIRDeleteWork)obj);
                    }
                }
                // --- DEL 2012/12/20 T.Nishi ---------->>>>>
                //stockFlag = true;
                // --- DEL 2012/12/20 T.Nishi ----------<<<<<
            }
            #endregion

            object dataObj = (object)paraList;

            retMessage = string.Empty;
            string retItemInfo;
            int status;
            // --- DEL 2012/12/20 T.Nishi ---------->>>>>
            //if (stockFlag == true)
            //{
            // --- DEL 2012/12/20 T.Nishi ----------<<<<<
                // 仕入情報有り
                status = this._iIOWriteControlDB.DeleteA(ref dataObj, out retMessage, out retItemInfo);
            // --- DEL 2012/12/20 T.Nishi ---------->>>>>
            //}
            //else
            //{
            //    // 仕入情報無し
            //    status = this._iIOWriteControlDB.Delete(ref dataObj, out retMessage, out retItemInfo);
            //}
            // --- DEL 2012/12/20 T.Nishi ----------<<<<<
            return status;

        }
        // --- ADD 2012/11/30 Y.Wakita ----------<<<<<

        #endregion

        #region ●売上データ読込
        /// <summary>
        /// 売上データのリードを行います。
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="baseSalesSlip"></param>
        /// <returns></returns>
        public int ReadDBData(string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, out SalesSlip baseSalesSlip)
        {
            SalesSlip salesSlip;
            List<SalesDetail> salesDetailList;
            List<SalesDetail> addUpSrcDetailList;
            SearchDepsitMain depsitMain;
            SearchDepositAlw depositAlw;
            List<StockWork> stockWorkList;
            List<StockSlipWork> stockSlipWorkList;
            List<StockDetailWork> stockDetailWorkList;
            List<AddUpOrgStockDetailWork> addUpOrgStockDetailList;
            List<AcceptOdrCar> acceptOdrCarList;
            List<UOEOrderDtlWork> uoeOrderDtlWorkList;
            //>>>2010/02/26
            UserSCMOrderHeaderRecord scmHeader;
            UserSCMOrderCarRecord scmCar;
            List<UserSCMOrderDetailRecord> scmDetailList;
            List<UserSCMOrderAnswerRecord> scmAnswerList;
            //<<<2010/02/26

            //>>>2010/02/26
            //return this.ReadDBData(enterpriseCode, acptAnOdrStatus, salesSlipNum, true, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpOrgStockDetailList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList);
            return this.ReadDBData(enterpriseCode, acptAnOdrStatus, salesSlipNum, true, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpOrgStockDetailList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
            //<<<2010/02/26
        }

        /// <summary>
        /// 売上データのリードを行います。（オーバーロード）
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="isCache"></param>
        /// <param name="salesSlip"></param>
        /// <param name="baseSalesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="addUpSrcDetailList"></param>
        /// <param name="depsitMain"></param>
        /// <param name="depositAlw"></param>
        /// <param name="stockSlipWorkList"></param>
        /// <param name="stockDetailWorkList"></param>
        /// <param name="addUpSrcStockDetailList"></param>
        /// <param name="stockWorkList"></param>
        /// <param name="acceptOdrCarList"></param>
        /// <param name="uoeOrderDtlWorkList"></param>
        /// <returns></returns>
        //>>>2010/02/26
        //public int ReadDBData(string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, bool isCache, out SalesSlip salesSlip, out SalesSlip baseSalesSlip, out List<SalesDetail> salesDetailList, out List<SalesDetail> addUpSrcDetailList, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw, out List<StockSlipWork> stockSlipWorkList, out List<StockDetailWork> stockDetailWorkList, out List<AddUpOrgStockDetailWork> addUpSrcStockDetailList, out List<StockWork> stockWorkList, out List<AcceptOdrCar> acceptOdrCarList, out List<UOEOrderDtlWork> uoeOrderDtlWorkList)
        public int ReadDBData(string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, bool isCache, out SalesSlip salesSlip, out SalesSlip baseSalesSlip, out List<SalesDetail> salesDetailList, out List<SalesDetail> addUpSrcDetailList, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw, out List<StockSlipWork> stockSlipWorkList, out List<StockDetailWork> stockDetailWorkList, out List<AddUpOrgStockDetailWork> addUpSrcStockDetailList, out List<StockWork> stockWorkList, out List<AcceptOdrCar> acceptOdrCarList, out List<UOEOrderDtlWork> uoeOrderDtlWorkList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList)
        //<<<2010/02/26
        {
            //>>>2010/02/26
            //return this.ReadDBData(enterpriseCode, acptAnOdrStatus, salesSlipNum, isCache, false, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList);
            return this.ReadDBData(enterpriseCode, acptAnOdrStatus, salesSlipNum, isCache, false, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
            //<<<2010/02/26
        }

        /// <summary>
        /// 売上データのリードを行います。
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="isCache"></param>
        /// <param name="searchEstimate"></param>
        /// <param name="salesSlip"></param>
        /// <param name="baseSalesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="addUpSrcDetailList"></param>
        /// <param name="depsitMain"></param>
        /// <param name="depositAlw"></param>
        /// <param name="stockSlipWorkList"></param>
        /// <param name="stockDetailWorkList"></param>
        /// <param name="addUpSrcStockDetailList"></param>
        /// <param name="stockWorkList"></param>
        /// <param name="acceptOdrCarList"></param>
        /// <param name="uoeOrderDtlWorkList"></param>
        /// <returns></returns>
        //>>>2010/02/26
        //public int ReadDBData(string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, bool isCache, bool searchEstimate, out SalesSlip salesSlip, out SalesSlip baseSalesSlip, out List<SalesDetail> salesDetailList, out List<SalesDetail> addUpSrcDetailList, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw, out List<StockSlipWork> stockSlipWorkList, out List<StockDetailWork> stockDetailWorkList, out List<AddUpOrgStockDetailWork> addUpSrcStockDetailList, out List<StockWork> stockWorkList, out List<AcceptOdrCar> acceptOdrCarList, out List<UOEOrderDtlWork> uoeOrderDtlWorkList)
        public int ReadDBData(string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, bool isCache, bool searchEstimate, out SalesSlip salesSlip, out SalesSlip baseSalesSlip, out List<SalesDetail> salesDetailList, out List<SalesDetail> addUpSrcDetailList, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw, out List<StockSlipWork> stockSlipWorkList, out List<StockDetailWork> stockDetailWorkList, out List<AddUpOrgStockDetailWork> addUpSrcStockDetailList, out List<StockWork> stockWorkList, out List<AcceptOdrCar> acceptOdrCarList, out List<UOEOrderDtlWork> uoeOrderDtlWorkList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList)
        //<<<2010/02/26
        {
            //>>>2010/02/26
            //    int status = this.ReadDBDataProc(ConstantManagement.LogicalMode.GetData0, enterpriseCode, acptAnOdrStatus, salesSlipNum, searchEstimate, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList);
            int status = this.ReadDBDataProc(ConstantManagement.LogicalMode.GetData0, enterpriseCode, acptAnOdrStatus, salesSlipNum, searchEstimate, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
            //<<<2010/02/26

            if ((isCache) && (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL))
            {
                //>>>2011/02/01
                if (scmHeader != null)
                {
                    List<UserSCMOrderDetailRecord> scmDetailListNew = new List<UserSCMOrderDetailRecord>();
                    IList<ISCMOrderHeaderRecord> scmHeaderIList = new List<ISCMOrderHeaderRecord>();
                    IList<ISCMOrderCarRecord> scmCarIList = new List<ISCMOrderCarRecord>();
                    IList<ISCMOrderDetailRecord> scmDetailIList = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderDetailRecord> scmDetailIListSv = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderDetailRecord> scmDetailIAllList = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderAnswerRecord> scmAnswerIList = new List<ISCMOrderAnswerRecord>();
                    short svCancelDiv;

                    //-----------------------------------------------------------------------
                    // SCM情報読込
                    //-----------------------------------------------------------------------
                    this.SCMReadDBDataPProc(scmHeader.InquiryNumber, 0, salesSlip.SalesSlipNum, scmHeader.InqOriginalEpCd.Trim(), scmHeader.InqOriginalSecCd, scmHeader.InqOrdDivCd, scmHeader.CancelDiv, out scmHeaderIList, out scmCarIList, out scmDetailIList, out scmDetailIAllList, out scmAnswerIList, out scmDetailListNew, out svCancelDiv);//@@@@20230303
                    scmDetailIListSv = new List<ISCMOrderDetailRecord>(scmDetailIList);
                    this._scmDetailIAllList = new List<ISCMOrderDetailRecord>(scmDetailIAllList);

                    // ADD 2013/06/11 吉岡 2013/06/18配信 システムテスト障害№38 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    // SF側で設定された入庫予定日をセット
                    if (scmCar != null
                        && scmCarIList != null && scmCarIList.Count > 0)
                    {
                        if (scmCarIList[0].AcptAnOdrStatus == 0)
                        {
                            scmCar.ExpectedCeDate = scmCarIList[0].ExpectedCeDate;
                        }
                    }
                    // ADD 2013/06/11 吉岡 2013/06/18配信 システムテスト障害№38 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                    //-----------------------------------------------------------------------
                    // SCM情報読込(発注情報)
                    //-----------------------------------------------------------------------
                    List<UserSCMOrderDetailRecord> oscmDetailListNew = new List<UserSCMOrderDetailRecord>();
                    IList<ISCMOrderHeaderRecord> oscmHeaderIList = new List<ISCMOrderHeaderRecord>();
                    IList<ISCMOrderCarRecord> oscmCarIList = new List<ISCMOrderCarRecord>();
                    IList<ISCMOrderDetailRecord> oscmDetailIList = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderDetailRecord> oscmDetailIAllList = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderAnswerRecord> oscmAnswerIList = new List<ISCMOrderAnswerRecord>();
                    if (scmHeader.InqOrdDivCd == 1)
                    {
                        short osvCancelDiv;
                        int st = this.SCMReadDBDataPProc(scmHeader.InquiryNumber, 0, salesSlip.SalesSlipNum, scmHeader.InqOriginalEpCd.Trim(), scmHeader.InqOriginalSecCd, 2, scmHeader.CancelDiv, out oscmHeaderIList, out oscmCarIList, out oscmDetailIList, out oscmDetailIAllList, out oscmAnswerIList, out oscmDetailListNew, out osvCancelDiv);//@@@@20230303

                        if (st == 0)
                        {
                            // 保存前対象明細判定チェックの為、退避
                            //>>>2011/03/06
                            //this.CacheDetailListForBeforeSave(oscmAnswerIList, oscmDetailIAllList);
                            this.CacheDetailListForBeforeSave(oscmAnswerIList, oscmDetailIAllList, null);
                            //<<<2011/03/06
                        }
                    }

                    //>>>2011/03/06
                    List<UserSCMOrderDetailRecord> ooscmDetailListNew = new List<UserSCMOrderDetailRecord>();
                    IList<ISCMOrderHeaderRecord> ooscmHeaderIList = new List<ISCMOrderHeaderRecord>();
                    IList<ISCMOrderCarRecord> ooscmCarIList = new List<ISCMOrderCarRecord>();
                    IList<ISCMOrderDetailRecord> ooscmDetailIList = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderDetailRecord> ooscmDetailIAllList = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderAnswerRecord> ooscmAnswerIList = new List<ISCMOrderAnswerRecord>();
                    short oosvCancelDiv;
                    int ist = this.SCMReadDBDataPProc(scmHeader.InquiryNumber, 0, salesSlip.SalesSlipNum, scmHeader.InqOriginalEpCd.Trim(), scmHeader.InqOriginalSecCd, 2, 1, out ooscmHeaderIList, out ooscmCarIList, out ooscmDetailIList, out ooscmDetailIAllList, out ooscmAnswerIList, out ooscmDetailListNew, out oosvCancelDiv);//@@@@20230303

                    if (ist == 0)
                    {
                        this.CacheDetailListForBeforeSave(oscmAnswerIList, oscmDetailIAllList, ooscmAnswerIList);
                    }
                    //<<<2011/03/06

                    #region 取消明細削除
                    //this._scmDetailIAllList = new List<ISCMOrderDetailRecord>(scmDetailIAllList);

                    //bool isCancel = false;
                    //int i = 1;
                    //bool isSet = false;
                    //List<SalesDetail> tempSalesDetailList = new List<SalesDetail>();
                    //List<UserSCMOrderAnswerRecord> tempScmAnswerList = new List<UserSCMOrderAnswerRecord>();

                    //foreach (UserSCMOrderAnswerRecord answerRec in scmAnswerList)
                    //{
                    //    isSet = false;
                    //    foreach (UserSCMOrderDetailRecord detailRec in this._scmDetailIAllList)
                    //    {
                    //        if ((answerRec.InquiryNumber == detailRec.InquiryNumber) &&
                    //            (answerRec.InqRowNumber == detailRec.InqRowNumber) &&
                    //            (answerRec.InqRowNumDerivedNo == detailRec.InqRowNumDerivedNo))
                    //            //(answerRec.SalesRowNo == detailRec.SalesRowNo) &&
                    //            //(answerRec.AcptAnOdrStatus == detailRec.AcptAnOdrStatus))
                    //        {
                    //            if (detailRec.CancelCndtinDiv != 30) // キャンセル確定以外の場合、処理対象
                    //            {
                    //                #region 売上明細取得
                    //                SalesDetail sdetail = salesDetailList.Find(
                    //                    delegate(SalesDetail detail)
                    //                    {
                    //                        if ((answerRec.SalesSlipNum == detail.SalesSlipNum) &&
                    //                            (answerRec.SalesRowNo == detail.SalesRowNo))
                    //                        {
                    //                            return true;
                    //                        }
                    //                        else
                    //                        {
                    //                            return false;
                    //                        }
                    //                    }
                    //                );
                    //                #endregion

                    //                // 処理対象情報セット
                    //                if (sdetail != null)
                    //                {
                    //                    this._changeRowNoList.Add(sdetail.SalesRowNo); // 変換売上行番号リスト
                    //                    sdetail.SalesRowNo = i;
                    //                    tempSalesDetailList.Add(sdetail);
                    //                }
                    //                tempScmAnswerList.Add(answerRec);
                    //                i++;
                    //            }
                    //            isSet = true;
                    //            break;
                    //        }
                    //    }
                    //    if (!isSet)
                    //    {
                    //        #region 売上明細取得
                    //        SalesDetail sdetail = salesDetailList.Find(
                    //            delegate(SalesDetail detail)
                    //            {
                    //                if ((answerRec.SalesSlipNum == detail.SalesSlipNum) &&
                    //                    (answerRec.SalesRowNo == detail.SalesRowNo))
                    //                {
                    //                    return true;
                    //                }
                    //                else
                    //                {
                    //                    return false;
                    //                }
                    //            }
                    //        );
                    //        #endregion

                    //        // 処理対象情報セット
                    //        if (sdetail != null)
                    //        {
                    //            this._changeRowNoList.Add(sdetail.SalesRowNo); // 変換売上行番号リスト
                    //            sdetail.SalesRowNo = i;
                    //            tempSalesDetailList.Add(sdetail);
                    //        }
                    //        tempScmAnswerList.Add(answerRec);
                    //        i++; // 2011/03/04
                    //    }
                    //}

                    //this._scmDetailIAllList.Clear();

                    //// 売上明細データ、SCM受注明細データ(回答)再セット
                    //if ((tempSalesDetailList.Count != 0) &&
                    //    (salesDetailList.Count != tempSalesDetailList.Count))
                    //{
                    //    isCancel = true;
                    //    salesDetailList.Clear();
                    //    salesDetailList = tempSalesDetailList;
                    //}
                    //if ((tempScmAnswerList.Count != 0) &&
                    //    (scmAnswerList.Count != tempScmAnswerList.Count))
                    //{
                    //    isCancel = true;
                    //    scmAnswerList.Clear();
                    //    scmAnswerList = tempScmAnswerList;
                    //}

                    #endregion

                    // Webサーバー更新チェックの為、退避
                    this.CacheHeaderAndDetailList(scmHeaderIList, scmDetailIAllList);

                    #region 数量補正
                    // 数量補正(再問合せの場合、既存伝票の数量ではなく、問合せ明細の数量をセットする)
                    if (scmHeader.InqOrdDivCd == 1)
                    {
                        List<SalesDetail> tempList = new List<SalesDetail>();
                        tempList = this.ResettingCount(salesDetailList, scmDetailIListSv);
                        if ((tempList != null) && (tempList.Count != 0)) salesDetailList = tempList;

                        // --- ADD 2014/09/30 Y.Wakita 仕掛№10667 システムテスト障害№5---------->>>>>
                        if (scmHeader.SalesSlipNum != ctDefaultSalesSlipNum)
                            this.ResettingOrderCount(scmAnswerList, scmDetailIListSv);
                        // --- ADD 2014/09/30 Y.Wakita 仕掛№10667 システムテスト障害№5----------<<<<<
                    }
                    #endregion
                }
                //<<<2011/02/01

                // 入力モード設定処理
                this.SettingInputMode(salesSlip);

                // 売上データキャッシュ処理
                //>>>2010/02/26
                //this.Cache(salesSlip, salesSlip, salesDetailList, addUpSrcDetailList, depsitMain, depositAlw, stockSlipWorkList, stockDetailWorkList, addUpSrcStockDetailList, stockWorkList, acceptOdrCarList, uoeOrderDtlWorkList);
                this.Cache(salesSlip, salesSlip, salesDetailList, addUpSrcDetailList, depsitMain, depositAlw, stockSlipWorkList, stockDetailWorkList, addUpSrcStockDetailList, stockWorkList, acceptOdrCarList, uoeOrderDtlWorkList, scmHeader, scmCar, scmDetailList, scmAnswerList);
                //<<<2010/02/26

                // ------------------ ADD qijh 2013/02/27 #34752 --------------- >>>>>
                if (null != this._scmAcOdrDtlAsDataTable)
                    this._scmAcOdrDtlAsDataTableBackup = this._scmAcOdrDtlAsDataTable.Copy() as ScmDataSet.SCMAcOdrDtlAsDataTable;
                // ------------------ ADD qijh 2013/02/27 #34752 --------------- <<<<<

                //>>>2010/09/27
                this._stockTempDataTableSaveForRevision = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTable.Copy();
                //<<<2010/09/27

                //>>>2011/02/01 一部回答判定対応
                // SCM受注明細データ(回答)退避用テーブルキャッシュ
                this.CacheSCMAcOdrDtlAsDataTableSave();
                //<<<2011/02/01 一部回答判定対応

                // 受注データReadの場合
                if (salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
                {
                    //>>>2011/10/29
                    //// 数量設定処理
                    //this.SettingAcptAnOdrDetailRowShipmentCnt(salesDetailList);
                    //this.SettingSalesDetailShipmentCnt(salesDetailList);
                    // 数量設定処理
                    this.SettingAcptAnOdrDetailRowShipmentCnt2(salesDetailList);
                    this.SettingSalesDetailShipmentCnt2(salesDetailList);
                    //<<<2011/10/29

                    // 売上金額計算処理
                    this.CalculationSalesMoney(salesDetailList);

                    // 原価金額計算処理
                    this.CalculationCost(salesDetailList);

                    // 売上データ金額集計
                    SalesSlip tempSalesSlip;
                    this.CollectSalesSlipUnit(salesSlip, this._salesDetailDataTable, out tempSalesSlip);    // 売上データ集計
                    salesSlip = tempSalesSlip;

                    this.Cache(salesSlip);
                }

                // 明細粗利率設定処理
                this.SettingSalesDetailRowGrossProfitRate(salesDetailList);
            }
            return status;
        }

        // --- ADD 2013/07/29 Y.Wakita ---------->>>>>
        /// <summary>
        /// 売上データのリードを行います。（オーバーロード）
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="isCache"></param>
        /// <param name="salesDetailListNew"></param>
        /// <param name="scmAnswerListNew"></param>
        /// <param name="salesSlip"></param>
        /// <param name="baseSalesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="addUpSrcDetailList"></param>
        /// <param name="depsitMain"></param>
        /// <param name="depositAlw"></param>
        /// <param name="stockSlipWorkList"></param>
        /// <param name="stockDetailWorkList"></param>
        /// <param name="addUpSrcStockDetailList"></param>
        /// <param name="stockWorkList"></param>
        /// <param name="acceptOdrCarList"></param>
        /// <param name="uoeOrderDtlWorkList"></param>
        /// <param name="scmHeader"></param>
        /// <param name="scmCar"></param>
        /// <param name="scmDetailList"></param>
        /// <param name="scmAnswerList"></param>
        /// <returns></returns>
        public int ReadDBDataNew(string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, bool isCache, List<SalesDetail> salesDetailListNew, List<UserSCMOrderAnswerRecord> scmAnswerListNew, out SalesSlip salesSlip, out SalesSlip baseSalesSlip, out List<SalesDetail> salesDetailList, out List<SalesDetail> addUpSrcDetailList, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw, out List<StockSlipWork> stockSlipWorkList, out List<StockDetailWork> stockDetailWorkList, out List<AddUpOrgStockDetailWork> addUpSrcStockDetailList, out List<StockWork> stockWorkList, out List<AcceptOdrCar> acceptOdrCarList, out List<UOEOrderDtlWork> uoeOrderDtlWorkList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList)
        {
            return this.ReadDBDataNew(enterpriseCode, acptAnOdrStatus, salesSlipNum, isCache, false, salesDetailListNew, scmAnswerListNew, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
        }

        /// <summary>
        /// 売上データのリードを行います。
        /// </summary>
        /// <param name="enterpriseCode"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="isCache"></param>
        /// <param name="searchEstimate"></param>
        /// <param name="salesDetailListNew"></param>
        /// <param name="scmAnswerListNew"></param>
        /// <param name="salesSlip"></param>
        /// <param name="baseSalesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="addUpSrcDetailList"></param>
        /// <param name="depsitMain"></param>
        /// <param name="depositAlw"></param>
        /// <param name="stockSlipWorkList"></param>
        /// <param name="stockDetailWorkList"></param>
        /// <param name="addUpSrcStockDetailList"></param>
        /// <param name="stockWorkList"></param>
        /// <param name="acceptOdrCarList"></param>
        /// <param name="uoeOrderDtlWorkList"></param>
        /// <param name="scmHeader"></param>
        /// <param name="scmCar"></param>
        /// <param name="scmDetailList"></param>
        /// <param name="scmAnswerList"></param>
        /// <returns></returns>
        public int ReadDBDataNew(string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, bool isCache, bool searchEstimate, List<SalesDetail> salesDetailListNew, List<UserSCMOrderAnswerRecord> scmAnswerListNew, out SalesSlip salesSlip, out SalesSlip baseSalesSlip, out List<SalesDetail> salesDetailList, out List<SalesDetail> addUpSrcDetailList, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw, out List<StockSlipWork> stockSlipWorkList, out List<StockDetailWork> stockDetailWorkList, out List<AddUpOrgStockDetailWork> addUpSrcStockDetailList, out List<StockWork> stockWorkList, out List<AcceptOdrCar> acceptOdrCarList, out List<UOEOrderDtlWork> uoeOrderDtlWorkList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList)
        {
            int status = this.ReadDBDataProc(ConstantManagement.LogicalMode.GetData0, enterpriseCode, acptAnOdrStatus, salesSlipNum, searchEstimate, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);

            if ((isCache) && (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL))
            {
                if (scmHeader != null)
                {
                    List<UserSCMOrderDetailRecord> scmDetailListNew = new List<UserSCMOrderDetailRecord>();
                    IList<ISCMOrderHeaderRecord> scmHeaderIList = new List<ISCMOrderHeaderRecord>();
                    IList<ISCMOrderCarRecord> scmCarIList = new List<ISCMOrderCarRecord>();
                    IList<ISCMOrderDetailRecord> scmDetailIList = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderDetailRecord> scmDetailIListSv = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderDetailRecord> scmDetailIAllList = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderAnswerRecord> scmAnswerIList = new List<ISCMOrderAnswerRecord>();
                    short svCancelDiv;

                    //-----------------------------------------------------------------------
                    // SCM情報読込
                    //-----------------------------------------------------------------------
                    this.SCMReadDBDataPProc(scmHeader.InquiryNumber, 0, salesSlip.SalesSlipNum, scmHeader.InqOriginalEpCd.Trim(), scmHeader.InqOriginalSecCd, scmHeader.InqOrdDivCd, scmHeader.CancelDiv, out scmHeaderIList, out scmCarIList, out scmDetailIList, out scmDetailIAllList, out scmAnswerIList, out scmDetailListNew, out svCancelDiv);//@@@@20230303
                    scmDetailIListSv = new List<ISCMOrderDetailRecord>(scmDetailIList);
                    this._scmDetailIAllList = new List<ISCMOrderDetailRecord>(scmDetailIAllList);

                    // ADD 2013/11/12 吉岡 VSS[019] システムテスト障害№38 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                    // SF側で設定された入庫予定日をセット
                    if (scmCar != null
                        && scmCarIList != null && scmCarIList.Count > 0)
                    {
                        if (scmCarIList[0].AcptAnOdrStatus == 0)
                        {
                            scmCar.ExpectedCeDate = scmCarIList[0].ExpectedCeDate;
                        }
                    }
                    // ADD 2013/11/12 吉岡 VSS[019] システムテスト障害№38  ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                    //-----------------------------------------------------------------------
                    // SCM情報読込(発注情報)
                    //-----------------------------------------------------------------------
                    List<UserSCMOrderDetailRecord> oscmDetailListNew = new List<UserSCMOrderDetailRecord>();
                    IList<ISCMOrderHeaderRecord> oscmHeaderIList = new List<ISCMOrderHeaderRecord>();
                    IList<ISCMOrderCarRecord> oscmCarIList = new List<ISCMOrderCarRecord>();
                    IList<ISCMOrderDetailRecord> oscmDetailIList = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderDetailRecord> oscmDetailIAllList = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderAnswerRecord> oscmAnswerIList = new List<ISCMOrderAnswerRecord>();
                    if (scmHeader.InqOrdDivCd == 1)
                    {
                        short osvCancelDiv;
                        int st = this.SCMReadDBDataPProc(scmHeader.InquiryNumber, 0, salesSlip.SalesSlipNum, scmHeader.InqOriginalEpCd.Trim(), scmHeader.InqOriginalSecCd, 2, scmHeader.CancelDiv, out oscmHeaderIList, out oscmCarIList, out oscmDetailIList, out oscmDetailIAllList, out oscmAnswerIList, out oscmDetailListNew, out osvCancelDiv);//@@@@20230303

                        if (st == 0)
                        {
                            // 保存前対象明細判定チェックの為、退避
                            this.CacheDetailListForBeforeSave(oscmAnswerIList, oscmDetailIAllList, null);
                        }
                    }

                    List<UserSCMOrderDetailRecord> ooscmDetailListNew = new List<UserSCMOrderDetailRecord>();
                    IList<ISCMOrderHeaderRecord> ooscmHeaderIList = new List<ISCMOrderHeaderRecord>();
                    IList<ISCMOrderCarRecord> ooscmCarIList = new List<ISCMOrderCarRecord>();
                    IList<ISCMOrderDetailRecord> ooscmDetailIList = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderDetailRecord> ooscmDetailIAllList = new List<ISCMOrderDetailRecord>();
                    IList<ISCMOrderAnswerRecord> ooscmAnswerIList = new List<ISCMOrderAnswerRecord>();
                    short oosvCancelDiv;
                    int ist = this.SCMReadDBDataPProc(scmHeader.InquiryNumber, 0, salesSlip.SalesSlipNum, scmHeader.InqOriginalEpCd.Trim(), scmHeader.InqOriginalSecCd, 2, 1, out ooscmHeaderIList, out ooscmCarIList, out ooscmDetailIList, out ooscmDetailIAllList, out ooscmAnswerIList, out ooscmDetailListNew, out oosvCancelDiv);//@@@@20230303

                    if (ist == 0)
                    {
                        this.CacheDetailListForBeforeSave(oscmAnswerIList, oscmDetailIAllList, ooscmAnswerIList);
                    }

                    // Webサーバー更新チェックの為、退避
                    this.CacheHeaderAndDetailList(scmHeaderIList, scmDetailIAllList);

                    #region 数量補正
                    // 数量補正(再問合せの場合、既存伝票の数量ではなく、問合せ明細の数量をセットする)
                    if (scmHeader.InqOrdDivCd == 1)
                    {
                        List<SalesDetail> tempList = new List<SalesDetail>();
                        tempList = this.ResettingCount(salesDetailList, scmDetailIListSv);
                        if ((tempList != null) && (tempList.Count != 0)) salesDetailList = tempList;

                        // --- ADD 2014/09/30 Y.Wakita 仕掛№10667 システムテスト障害№5---------->>>>>
                        if (scmHeader.SalesSlipNum != ctDefaultSalesSlipNum)
                            this.ResettingOrderCount(scmAnswerList, scmDetailIListSv);
                        // --- ADD 2014/09/30 Y.Wakita 仕掛№10667 システムテスト障害№5----------<<<<<
                    }
                    #endregion
                }

                // 入力モード設定処理
                this.SettingInputMode(salesSlip);

                // --- ADD 2013/08/05 Y.Wakita ---------->>>>>
                salesSlip.AcptAnOdrStatusDisplay = salesSlip.AcptAnOdrStatus; // 受注ステータス
                // --- ADD 2013/08/05 Y.Wakita ----------<<<<<

                bool addNewFlg = false;
                int salesDetailListCnt = salesDetailList.Count;

                if ((salesDetailListNew != null) && (salesDetailListNew.Count != 0))
                {
                    // 有効明細行チェック
                    int salesDetailListNewCnt = salesDetailListNew.Count;
                    if (salesSlip.DetailRowCountForReadSlip < (salesDetailListCnt + salesDetailListNewCnt))
                    {
                        TMsgDisp.Show(new Form()
                                    , emErrorLevel.ERR_LEVEL_EXCLAMATION
                                    , ""
                                    , "登録可能行数を超えるため新規明細行を追加することができません。\r\n" +
                                     "既存明細のみを表示します。"
                                    , -1
                                    , MessageBoxButtons.OK);
                    }
                    else
                    {
                        addNewFlg = true;
                    }
                }

                if (addNewFlg)
                {
                    if ((salesDetailListNew != null) && (salesDetailListNew.Count != 0))
                    {

                        for (int i = 0; i < salesDetailListNew.Count; i++)
                        {
                            salesDetailListNew[i].SalesSlipNum = salesDetailList[0].SalesSlipNum;
                            salesDetailListNew[i].CarRelationGuid = salesDetailList[0].CarRelationGuid;
                            salesDetailList.Add(salesDetailListNew[i]);
                        }

                        for (int i = 0; i < salesDetailList.Count; i++)
                        {
                            salesDetailList[i].SalesRowNo = i + 1;
                        }
                    }

                    if ((scmAnswerListNew != null) && (scmAnswerListNew.Count != 0))
                    {
                        for (int i = 0; i < scmAnswerListNew.Count; i++)
                        {
                            scmAnswerListNew[i].SalesSlipNum = scmAnswerList[0].SalesSlipNum;
                            scmAnswerList.Add(scmAnswerListNew[i]);
                        }

                        for (int i = 0; i < salesDetailList.Count; i++)
                        {
                            scmAnswerList[i].SalesRowNo = i + 1;
                            // UPD 2013/11/29 商品保証課Redmine#723対応 ----------------------->>>>>
                            //scmAnswerList[i].InqRowNumber = i + 1;
                            // 問合せ番号未設定時のみ問合せ行番号のカウントを行う
                            if (scmAnswerList[i].InquiryNumber == 0)
                            {
                                scmAnswerList[i].InqRowNumber = i + 1;
                            }
                            // UPD 2013/11/29 商品保証課Redmine#723対応 -----------------------<<<<<
                        }
                    }
                }

                // 売上データキャッシュ処理
                this.Cache(salesSlip, salesSlip, salesDetailList, addUpSrcDetailList, depsitMain, depositAlw, stockSlipWorkList, stockDetailWorkList, addUpSrcStockDetailList, stockWorkList, acceptOdrCarList, uoeOrderDtlWorkList, scmHeader, scmCar, scmDetailList, scmAnswerList);

                // エディットステータス変更
                if (addNewFlg)
                {
                    for (int i = salesDetailListCnt; i < salesDetailList.Count; i++)
                    {
                        SalesInputDataSet.SalesDetailRow row = this.SalesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesDetailList[i].SalesSlipNum.PadLeft(9, '0'), salesDetailList[i].SalesRowNo);
                        row.EditStatus = ctEDITSTATUS_AllOK; // エディットステータス
                    }
                }

                this._stockTempDataTableSaveForRevision = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTable.Copy();

                // SCM受注明細データ(回答)退避用テーブルキャッシュ
                this.CacheSCMAcOdrDtlAsDataTableSave();

                // 受注データReadの場合
                if (salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
                {
                    // 数量設定処理
                    this.SettingAcptAnOdrDetailRowShipmentCnt2(salesDetailList);
                    this.SettingSalesDetailShipmentCnt2(salesDetailList);

                    // 売上金額計算処理
                    this.CalculationSalesMoney(salesDetailList);

                    // 原価金額計算処理
                    this.CalculationCost(salesDetailList);

                    // 売上データ金額集計
                    SalesSlip tempSalesSlip;
                    this.CollectSalesSlipUnit(salesSlip, this._salesDetailDataTable, out tempSalesSlip);    // 売上データ集計
                    salesSlip = tempSalesSlip;

                    this.Cache(salesSlip);
                }

                // 明細粗利率設定処理
                this.SettingSalesDetailRowGrossProfitRate(salesDetailList);
            }
            return status;
        }
        // --- ADD 2013/07/29 Y.Wakita ----------<<<<<

        //>>>2011/02/01
        /// <summary>
        /// 数量再設定処理(再問合せ用)
        /// </summary>
        /// <param name="salesDetailList"></param>
        /// <param name="scmDetailIList"></param>
        private List<SalesDetail> ResettingCount(List<SalesDetail> salesDetailList, IList<ISCMOrderDetailRecord> scmDetailIList)
        {
            List<SalesDetail> tempSalesDetailList = new List<SalesDetail>();
            bool setFlg = false;

            foreach (SalesDetail salesDetail in salesDetailList)
            {
                setFlg = false;
                foreach (ISCMOrderDetailRecord rec in scmDetailIList)
                {
                    if ((salesDetail.SalesSlipNum == rec.SalesSlipNum) &&
                        (salesDetail.SalesRowNo == rec.SalesRowNo))
                    {
                        setFlg = true;
                        salesDetail.AcceptAnOrderCnt = rec.SalesOrderCount;
                        salesDetail.AcptAnOdrRemainCnt = rec.SalesOrderCount;
                        salesDetail.ShipmentCnt = rec.SalesOrderCount;
                        tempSalesDetailList.Add(salesDetail);
                        break;
                    }
                }
                if (!setFlg) tempSalesDetailList.Add(salesDetail);
            }

            return tempSalesDetailList;
        }
        //<<<2011/02/01

        /// <summary>
        /// 売上データのリードを行います。（オーバーロード）
        /// </summary>
        /// <param name="logicalMode"></param>
        /// <param name="enterpriseCode"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="salesSlip"></param>
        /// <param name="baseSalesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="addUpSrcDetailList"></param>
        /// <param name="stockWorkList"></param>
        /// <param name="acceptOdrCarList"></param>
        /// <returns></returns>
        public int ReadDBData(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, out SalesSlip salesSlip, out SalesSlip baseSalesSlip, out List<SalesDetail> salesDetailList, out List<SalesDetail> addUpSrcDetailList, out List<StockWork> stockWorkList, out List<AcceptOdrCar> acceptOdrCarList)
        {
            SearchDepsitMain depsitMain;
            SearchDepositAlw depositAlw;
            List<StockSlipWork> stockSlipWorkList;
            List<StockDetailWork> stockDetailWorkList;
            List<AddUpOrgStockDetailWork> addUpSrcStockDetailWorkList;
            List<UOEOrderDtlWork> uoeOrderDtlWorkList;
            //>>>2010/02/26
            UserSCMOrderHeaderRecord scmHeader;
            UserSCMOrderCarRecord scmCar;
            List<UserSCMOrderDetailRecord> scmDetailList;
            List<UserSCMOrderAnswerRecord> scmAnswerList;
            //<<<2010/02/26

            //>>>2010/02/26
            //return this.ReadDBDataProc(logicalMode, enterpriseCode, acptAnOdrStatus, salesSlipNum, false, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailWorkList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList);
            return this.ReadDBDataProc(logicalMode, enterpriseCode, acptAnOdrStatus, salesSlipNum, false, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailWorkList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
            //<<<2010/02/26
        }

        //>>>2010/02/26
        /// <summary>
        /// 売上データのリードを行います。（オーバーロード）
        /// </summary>
        /// <param name="logicalMode"></param>
        /// <param name="enterpriseCode"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="salesSlip"></param>
        /// <param name="baseSalesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="addUpSrcDetailList"></param>
        /// <param name="depsitMain"></param>
        /// <param name="depositAlw"></param>
        /// <param name="stockSlipWorkList"></param>
        /// <param name="stockDetailWorkList"></param>
        /// <param name="addUpSrcStockDetailWorkList"></param>
        /// <param name="stockWorkList"></param>
        /// <param name="acceptOdrCarList"></param>
        /// <param name="uoeOrderDtlWorkList"></param>
        /// <returns></returns>
        public int ReadDBData(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, out SalesSlip salesSlip, out SalesSlip baseSalesSlip, out List<SalesDetail> salesDetailList, out List<SalesDetail> addUpSrcDetailList, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw, out List<StockSlipWork> stockSlipWorkList, out List<StockDetailWork> stockDetailWorkList, out List<AddUpOrgStockDetailWork> addUpSrcStockDetailWorkList, out List<StockWork> stockWorkList, out List<AcceptOdrCar> acceptOdrCarList, out List<UOEOrderDtlWork> uoeOrderDtlWorkList)
        {
            UserSCMOrderHeaderRecord scmHeader;
            UserSCMOrderCarRecord scmCar;
            List<UserSCMOrderDetailRecord> scmDetailList;
            List<UserSCMOrderAnswerRecord> scmAnswerList;
            return this.ReadDBDataProc(logicalMode, enterpriseCode, acptAnOdrStatus, salesSlipNum, false, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailWorkList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
        }
        //<<<2010/02/26

        //>>>2010/02/26
        ///// <summary>
        ///// 売上データのリードを行います。（オーバーロード）
        ///// </summary>
        ///// <param name="logicalMode"></param>
        ///// <param name="enterpriseCode"></param>
        ///// <param name="acptAnOdrStatus"></param>
        ///// <param name="salesSlipNum"></param>
        ///// <param name="salesSlip"></param>
        ///// <param name="baseSalesSlip"></param>
        ///// <param name="salesDetailList"></param>
        ///// <param name="addUpSrcDetailList"></param>
        ///// <param name="depsitMain"></param>
        ///// <param name="depositAlw"></param>
        ///// <param name="stockSlipWorkList"></param>
        ///// <param name="stockDetailWorkList"></param>
        ///// <param name="addUpSrcStockDetailWorkList"></param>
        ///// <param name="stockWorkList"></param>
        ///// <param name="acceptOdrCarList"></param>
        ///// <param name="uoeOrderDtlWorkList"></param>
        ///// <returns></returns>
        //public int ReadDBData(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, out SalesSlip salesSlip, out SalesSlip baseSalesSlip, out List<SalesDetail> salesDetailList, out List<SalesDetail> addUpSrcDetailList, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw, out List<StockSlipWork> stockSlipWorkList, out List<StockDetailWork> stockDetailWorkList, out List<AddUpOrgStockDetailWork> addUpSrcStockDetailWorkList, out List<StockWork> stockWorkList, out List<AcceptOdrCar> acceptOdrCarList, out List<UOEOrderDtlWork> uoeOrderDtlWorkList)
        //{
        //    return this.ReadDBDataProc(logicalMode, enterpriseCode, acptAnOdrStatus, salesSlipNum, false, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailWorkList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList);
        //}

        /// <summary>
        /// 売上データのリードを行います。（オーバーロード）
        /// </summary>
        /// <param name="logicalMode"></param>
        /// <param name="enterpriseCode"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="salesSlip"></param>
        /// <param name="baseSalesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="addUpSrcDetailList"></param>
        /// <param name="depsitMain"></param>
        /// <param name="depositAlw"></param>
        /// <param name="stockSlipWorkList"></param>
        /// <param name="stockDetailWorkList"></param>
        /// <param name="addUpSrcStockDetailWorkList"></param>
        /// <param name="stockWorkList"></param>
        /// <param name="acceptOdrCarList"></param>
        /// <param name="uoeOrderDtlWorkList"></param>
        /// <param name="scmHeader"></param>
        /// <param name="scmCar"></param>
        /// <param name="scmDetailList"></param>
        /// <param name="scmAnswerList"></param>
        /// <returns></returns>
        public int ReadDBData(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, out SalesSlip salesSlip, out SalesSlip baseSalesSlip, out List<SalesDetail> salesDetailList, out List<SalesDetail> addUpSrcDetailList, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw, out List<StockSlipWork> stockSlipWorkList, out List<StockDetailWork> stockDetailWorkList, out List<AddUpOrgStockDetailWork> addUpSrcStockDetailWorkList, out List<StockWork> stockWorkList, out List<AcceptOdrCar> acceptOdrCarList, out List<UOEOrderDtlWork> uoeOrderDtlWorkList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList)
        {
            return this.ReadDBDataProc(logicalMode, enterpriseCode, acptAnOdrStatus, salesSlipNum, false, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailWorkList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
        }
        //<<<2010/02/26

        /// <summary>
        /// 売上データのリードを行います。
        /// </summary>
        /// <param name="logicalMode"></param>
        /// <param name="enterpriseCode"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="searchEstimate"></param>
        /// <param name="salesSlip"></param>
        /// <param name="baseSalesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="addUpSrcDetailList"></param>
        /// <param name="depsitMain"></param>
        /// <param name="depositAlw"></param>
        /// <param name="stockSlipWorkList"></param>
        /// <param name="stockDetailWorkList"></param>
        /// <param name="addUpSrcStockDetailWorkList"></param>
        /// <param name="stockWorkList"></param>
        /// <param name="acceptOdrCarList"></param>
        /// <param name="uoeOrderDtlWorkList"></param>
        /// <returns></returns>
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        /// <br>Update Note: K2021/05/19 陳艶丹</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>作成内容   : PMKOBETSU-4140 No.34 過去日付の伝票が登録されてしまった対応</br>
        //>>>2010/02/26
        //private int ReadDBDataProc(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, bool searchEstimate, out SalesSlip salesSlip, out SalesSlip baseSalesSlip, out List<SalesDetail> salesDetailList, out List<SalesDetail> addUpSrcDetailList, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw, out List<StockSlipWork> stockSlipWorkList, out List<StockDetailWork> stockDetailWorkList, out List<AddUpOrgStockDetailWork> addUpSrcStockDetailWorkList, out List<StockWork> stockWorkList, out List<AcceptOdrCar> acceptOdrCarList, out List<UOEOrderDtlWork> uoeOrderDtlWorkList)
        private int ReadDBDataProc(ConstantManagement.LogicalMode logicalMode, string enterpriseCode, int acptAnOdrStatus, string salesSlipNum, bool searchEstimate, out SalesSlip salesSlip, out SalesSlip baseSalesSlip, out List<SalesDetail> salesDetailList, out List<SalesDetail> addUpSrcDetailList, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw, out List<StockSlipWork> stockSlipWorkList, out List<StockDetailWork> stockDetailWorkList, out List<AddUpOrgStockDetailWork> addUpSrcStockDetailWorkList, out List<StockWork> stockWorkList, out List<AcceptOdrCar> acceptOdrCarList, out List<UOEOrderDtlWork> uoeOrderDtlWorkList, out UserSCMOrderHeaderRecord scmHeader, out UserSCMOrderCarRecord scmCar, out List<UserSCMOrderDetailRecord> scmDetailList, out List<UserSCMOrderAnswerRecord> scmAnswerList)
        //<<<2010/02/26
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            salesSlip = null;
            baseSalesSlip = null;
            salesDetailList = null;
            addUpSrcDetailList = null;
            depsitMain = null;
            depositAlw = null;
            stockSlipWorkList = null;
            stockDetailWorkList = null;
            addUpSrcStockDetailWorkList = null;
            stockWorkList = null;
            acceptOdrCarList = null;
            uoeOrderDtlWorkList = null;
            //>>>2010/02/26
            scmHeader = null;
            scmCar = null;
            scmDetailList = null;
            scmAnswerList = null;
            //<<<2010/02/26
            CustomSerializeArrayList paraList = new CustomSerializeArrayList();

            IOWriteMAHNBReadWork readPara = new IOWriteMAHNBReadWork();
            readPara.EnterpriseCode = enterpriseCode;
            readPara.AcptAnOdrStatus = acptAnOdrStatus;
            readPara.SalesSlipNum = salesSlipNum;
            paraList.Add(readPara);

            #region ●リモート参照用パラメータ
            //------------------------------------------------------
            // リモート参照用パラメータ
            //------------------------------------------------------
            IOWriteCtrlOptWork iOWriteCtrlOptWork = new IOWriteCtrlOptWork();                   // リモート参照用パラメータ
            this.SettingIOWriteCtrlOptWork(SalesSlipInputAcs.OptWorkSettingType.Read, out iOWriteCtrlOptWork); // リモート参照用パラメータ設定処理
            paraList.Add(iOWriteCtrlOptWork);
            #endregion

            object paraObj = (object)paraList;
            object retObj1;
            object retObj2;
            status = this._iIOWriteControlDB.Read(ref paraObj, out retObj1, out retObj2);

            CustomSerializeArrayList retList1 = (CustomSerializeArrayList)retObj1;
            CustomSerializeArrayList retList2 = (CustomSerializeArrayList)retObj2;

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                SalesSlipWork salesSlipWork;                                // 売上データワークオブジェクト
                SalesDetailWork[] salesDetailWorkArray;                     // 売上明細データワークオブジェクト配列
                AddUpOrgSalesDetailWork[] addUpOrgSalesDetailWorkArray;     // 計上元明細データワークオブジェクト配列
                DepsitDataWork depsitDataWork;                              // 入金データワークオブジェクト
                DepositAlwWork depositAlwWork;                              // 入金引当データワークオブジェクト
                StockWork[] stockWorkArray;                                 // 在庫ワークデータオブジェクト配列
                AcceptOdrCarWork[] acceptOdrCarWorkArray;                   // 受注マスタ（車両）ワークオブジェクト配列
                UOEOrderDtlWork[] uoeOrderDtlWorkArray;                     // UOE発注データワークオブジェクト配列
                //>>>2010/02/26
                UserSCMOrderDetailRecord[] scmDetailArray;                  // SCM受注明細データ(問合せ・発注)ワークオブジェクト配列
                UserSCMOrderAnswerRecord[] scmAnswerArray;                  // SCM受注明細データ(回答)ワークオブジェクト配列
                //<<<2010/02/26

                // CustomSerializeArrayList分割処理
                //>>>2010/02/26
                //DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForReading(retList1, retList2, out salesSlipWork, out salesDetailWorkArray, out addUpOrgSalesDetailWorkArray, out depsitDataWork, out depositAlwWork, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailWorkList, out stockWorkArray, out acceptOdrCarWorkArray, out uoeOrderDtlWorkArray);
                DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForReading(retList1, retList2, out salesSlipWork, out salesDetailWorkArray, out addUpOrgSalesDetailWorkArray, out depsitDataWork, out depositAlwWork, out stockSlipWorkList, out stockDetailWorkList, out addUpSrcStockDetailWorkList, out stockWorkArray, out acceptOdrCarWorkArray, out uoeOrderDtlWorkArray, out scmHeader, out scmCar, out scmDetailArray, out scmAnswerArray);
                //<<<2010/02/26


                // ADD 2012/01/19 Redmine28098 --- >>>>
                stockSlipWorkTempList = new List<StockSlipWork>();
                stockSlipWorkTempListForExist = new List<StockSlipWork>(); // 2012/01/20
                foreach (StockSlipWork stockSlipWork in stockSlipWorkList)
                {
                    StockSlipWork stockSlipTempWork = new StockSlipWork();
                    //>>>2012/01/20
                    //stockSlipTempWork.SupplierSlipNo = stockSlipWork.SupplierSlipNo;
                    //stockSlipTempWork.SupplierFormal = stockSlipWork.SupplierFormal;
                    //stockSlipTempWork.StockDate = stockSlipWork.StockDate;
                    //stockSlipWorkTempList.Add(stockSlipTempWork);

                    stockSlipTempWork.SupplierCd = stockSlipWork.SupplierCd;
                    stockSlipTempWork.PartySaleSlipNum = stockSlipWork.PartySaleSlipNum;
                    stockSlipTempWork.SupplierFormal = stockSlipWork.SupplierFormal;
                    stockSlipTempWork.StockDate = stockSlipWork.StockDate;
                    if (!stockSlipWorkTempList.Contains(stockSlipTempWork)) stockSlipWorkTempList.Add(stockSlipTempWork);
                    //<<<2012/01/20
                }
                // ADD 2012/01/19 Redmine28098 --- <<<<

                if ((!searchEstimate) &&
                    (salesSlipWork.EstimateDivide == (int)EstimateDivide.SearchEstimate))
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    return status;
                }
                // ----- ADD K2011/12/09 --------------------------->>>>>
                if (this._enterpriseCode == login_EnterpriseCode)
                {
                    if (this._surveyUseLogOutputAcs == null) this._surveyUseLogOutputAcs = new SurveyUseLogOutputAcs();
                }
                // ----- ADD K2011/12/09 ---------------------------<<<<<
                //if (this._surveyUseLogOutputAcs == null) this._surveyUseLogOutputAcs = new SurveyUseLogOutputAcs(); // ADD K2011/08/12 // DEL K2011/12/09
                this._surveyUseLogOutputAcs.AddLine(40, Convert.ToInt32(salesSlipWork.SalesSlipNum), salesSlipWork.AcptAnOdrStatus); // ADD 2011/02/11
                // ----- ADD K2011/08/12 --------------------------->>>>>
                // ----- ADD K2011/12/09 --------------------------->>>>>
                // --- UPD T.Miyamoto 2012/11/13 ---------->>>>>
                //if (this._enterpriseCode == login_EnterpriseCode)
                if ((this._salesSlipInputInitDataAcs.Opt_DateCtrl == (int)SalesSlipInputInitDataAcs.Option.ON) ||
                    (this._enterpriseCode == login_EnterpriseCode))
                // --- UPD T.Miyamoto 2012/11/13 ----------<<<<<
                {
                    // ----- ADD K2011/12/09 ---------------------------<<<<<
                    SalesSlip tmpSalesSlip = new SalesSlip();
                    tmpSalesSlip = ConvertSalesSlip.UIDataFromParamData(salesSlipWork);
                    if (tmpSalesSlip.AcptAnOdrStatus == 30)
                    {
                        // ----- DEL K2011/12/09 --------------------------->>>>>
                        //this._iGetServerTime = (IGetServerTime)MediationGetServerTimeDB.GetServerTimeDB();
                        //DateTime serverTime = _iGetServerTime.GetServerNowTime();
                        // ----- DEL K2011/12/09 ---------------------------<<<<<
                        // --- UPD K2021/05/19 陳艶丹 PMKOBETSU-4140 No.34 過去日付の伝票が登録されてしまった対応 ---->>>>>
                        //DateTime serverTime = this._getServerNowTime;// ADD K2011/12/09
                        DateTime serverTime = this.GetServerNowTime;
                        // --- UPD K2021/05/19 陳艶丹 PMKOBETSU-4140 No.34 過去日付の伝票が登録されてしまった対応 ----<<<<<
                        if (_employeeAcs == null)
                        {
                            _employeeAcs = new EmployeeAcs();
                        }
                        Employee employee = new Employee();
                        status = _employeeAcs.Read(out employee, LoginInfoAcquisition.EnterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);
                        if (employee.AuthorityLevel1 != 99 || employee.AuthorityLevel2 != 99)
                        {
                            if (TDateTime.DateTimeToLongDate(tmpSalesSlip.SalesDate) < TDateTime.DateTimeToLongDate(serverTime))
                            {
                                TMsgDisp.Show(
                                 new Form(),
                                 emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                 "",
                                 "当日以前の伝票は修正できません。",
                                 -1,
                                 MessageBoxButtons.OK);
                                status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                this._salesSlipCanEditDivCd = false;
                                return status;
                            }
                            else
                            {
                                this._salesSlipCanEditDivCd = true;
                            }
                        }
                        else
                        {
                            this._salesSlipCanEditDivCd = true;
                        }
                    }
                    salesSlip = tmpSalesSlip;
                }//ADD K2011/12/09
                // ----- ADD K2011/08/12 ---------------------------<<<<<
                // ----- ADD K2011/12/09 --------------------------->>>>>
                if (this._enterpriseCode != login_EnterpriseCode)
                {
                    salesSlip = ConvertSalesSlip.UIDataFromParamData(salesSlipWork);
                }
                // ----- ADD K2011/12/09 ---------------------------<<<<<
                //salesSlip = ConvertSalesSlip.UIDataFromParamData(salesSlipWork); // DEL K2011/08/12
                baseSalesSlip = ConvertSalesSlip.UIDataFromParamData(salesSlipWork);
                // --- ADD 2013/04/09 Y.Wakita ---------->>>>>
                this._baseSalesSlip = new SalesSlip();
                this._baseSalesSlip = baseSalesSlip;
                // --- ADD 2013/04/09 Y.Wakita ----------<<<<<
                salesDetailList = ConvertSalesSlip.UIDataFromParamData(salesDetailWorkArray);
                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34605---- >>>>>
                //表示区分ﾘｽﾄ
                List<PriceSelectSet> displayDivList = this._salesSlipInputInitDataAcs.GetDisplayDivList();
                Int32 priceSelectDiv = -1;
                foreach (SalesDetail salesDetail in salesDetailList)
                {
                    priceSelectDiv = -1;
                    //売上全体設定で、表示区分プロセスはしない場合、またこの商品の商品属性は純正である場合、価格表示区分は空白を表示
                    if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().PriceSelectDispDiv == 0 || salesDetail.GoodsMakerCd < 1000)
                    {
                        priceSelectDiv = -1;
                    }
                    else
                    {
                        // 定価手入力ではない場合、表示区分マスタから表示区分を取得する
                        if (salesDetail.ListPriceChngCd == 0)
                        {
                            //表示区分取得ﾃﾞﾘｹﾞｰﾄ
                            this._priceSelectSetAcs.GetDisplayDiv(displayDivList, salesDetail.GoodsMakerCd, salesDetail.BLGoodsCode, salesSlip.CustomerCode, salesDetail.CustRateGrpCode, out priceSelectDiv);
                        }
                    }
                    
                    salesDetail.PriceSelectDiv = priceSelectDiv;
                }
                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34605---- <<<<<
                salesDetailList.Sort(new SalesDetail.SalesDetailComparer());
                addUpSrcDetailList = ConvertSalesSlip.UIDataFromParamData(addUpOrgSalesDetailWorkArray);
                depsitMain = ConvertSalesSlip.UIDataFromParamData(depsitDataWork);
                depositAlw = (depositAlwWork != null) ? (SearchDepositAlw)DBAndXMLDataMergeParts.CopyPropertyInClass(depositAlwWork, typeof(SearchDepositAlw)) : new SearchDepositAlw();
                acceptOdrCarList = ConvertSalesSlip.UIDataFromParamData(acceptOdrCarWorkArray);
                if ((stockWorkArray != null) && (stockWorkArray.Length > 0))
                {
                    if (stockWorkList == null) stockWorkList = new List<StockWork>();
                    stockWorkList.AddRange(stockWorkArray);
                }
                if ((uoeOrderDtlWorkArray != null) && (uoeOrderDtlWorkArray.Length > 0))
                {
                    if (uoeOrderDtlWorkList == null) uoeOrderDtlWorkList = new List<UOEOrderDtlWork>();
                    uoeOrderDtlWorkList.AddRange(uoeOrderDtlWorkArray);
                }
                //>>>2010/02/26
                if (scmDetailArray != null) scmDetailList = new List<UserSCMOrderDetailRecord>((UserSCMOrderDetailRecord[])scmDetailArray);
                if (scmAnswerArray != null) scmAnswerList = new List<UserSCMOrderAnswerRecord>((UserSCMOrderAnswerRecord[])scmAnswerArray);
                //<<<2010/02/26

#if DEBUG
                try
                {
                XmlByteSerializer.Serialize(salesSlip, @"d:\SalesSlip.xml"); // ここ
                XmlByteSerializer.Serialize(salesDetailList[0], @"d:\SalesDetail.xml"); // ここ
                }
                catch
                {
                }
#endif

                if (stockSlipWorkList == null) stockSlipWorkList = new List<StockSlipWork>();
                if (stockDetailWorkList == null) stockDetailWorkList = new List<StockDetailWork>();
                if (addUpSrcStockDetailWorkList == null) addUpSrcStockDetailWorkList = new List<AddUpOrgStockDetailWork>();

                this.SettingSalesSlipEstimateDef(ref salesSlip, this._salesSlipInputInitDataAcs.GetEstimateDefSet());

                this.SettingCompleteInfoFromSalesDetailList(salesDetailList);                           // 一式情報セット
                // ----- ADD 2011/12/01 xupz redmine#8273 ---------->>>>>
                CustomerInfo customerInfo = null;
                int cusStatus = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                SalesSlipInputInitDataAcs.LogWrite("▼得意先マスタＲｅａｄ開始");
                cusStatus = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, salesSlip.CustomerCode, true, false, out customerInfo);
                SalesSlipInputInitDataAcs.LogWrite("▲得意先マスタＲｅａｄ終了");
                if (cusStatus == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    string customerSnm = salesSlip.CustomerSnm; // ADD 2012/01/18 tianjw
                    this.SettingSalesSlipFromCustomer(ref salesSlip, customerInfo);
                    salesSlip.CustomerSnm = customerSnm; // ADD 2012/01/18 tianjw
                }
                // ----- ADD 2011/12/01 xupz redmine#8273 ----------<<<<<
            }

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                // 読込用売上データ調整処理
                this.AdjustSalesReadDBData(ref salesSlip, ref salesDetailList);
            }

            return status;

        }

        /// <summary>
        /// ＤＢから取得したデータをデータテーブルにキャッシュします。（オーバーロード）
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="baseSalesSlip">処理元売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        /// <param name="addUpSrcDetailList">計上元売上明細データオブジェクトリスト</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）オブジェクトリスト</param>
        public void Cache(SalesSlip salesSlip, SalesSlip baseSalesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, List<AcceptOdrCar> acceptOdrCarList)
        {
            this.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, null, null, null, acceptOdrCarList);
        }

        //>>>2010/02/26
        /// <summary>
        /// ＤＢから取得したデータをデータテーブルにキャッシュします。（オーバーロード）
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="baseSalesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="addUpSrcDetailList"></param>
        /// <param name="acceptOdrCarList"></param>
        /// <param name="scmHeader"></param>
        /// <param name="scmCar"></param>
        /// <param name="scmDetailList"></param>
        /// <param name="scmAnswerList"></param>
        public void Cache(SalesSlip salesSlip, SalesSlip baseSalesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, List<AcceptOdrCar> acceptOdrCarList, UserSCMOrderHeaderRecord scmHeader, UserSCMOrderCarRecord scmCar, List<UserSCMOrderDetailRecord> scmDetailList, List<UserSCMOrderAnswerRecord> scmAnswerList)
        {
            this.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, null, null, null, null, null, null, acceptOdrCarList, null, scmHeader, scmCar, scmDetailList, scmAnswerList);
        }
        //<<<2010/02/26

        /// <summary>
        /// ＤＢから取得したデータをデータテーブルにキャッシュします。（オーバーロード）
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="baseSalesSlip">処理元売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        /// <param name="addUpSrcDetailList">計上元売上明細データオブジェクトリスト</param>
        /// <param name="stockWorkList">在庫ワークオブジェクトリスト</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）オブジェクトリスト</param>
        public void Cache(SalesSlip salesSlip, SalesSlip baseSalesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, List<StockWork> stockWorkList, List<AcceptOdrCar> acceptOdrCarList)
        {
            this.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, null, null, stockWorkList, acceptOdrCarList);
        }

        /// <summary>
        /// ＤＢから取得したデータをデータテーブルにキャッシュします。（オーバーロード）
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="baseSalesSlip">処理元売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        /// <param name="addUpSrcDetailList">計上元売上明細データオブジェクトリスト</param>
        /// <param name="depsitMain">入金データオブジェクト</param>
        /// <param name="depositAlw">入金引当データオブジェクト</param>
        /// <param name="stockWorkList">在庫ワークオブジェクトリスト</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）オブジェクトリスト</param>
        public void Cache(SalesSlip salesSlip, SalesSlip baseSalesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, SearchDepsitMain depsitMain, SearchDepositAlw depositAlw, List<StockWork> stockWorkList, List<AcceptOdrCar> acceptOdrCarList)
        {
            //this.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, depsitMain, depositAlw, null, null, null, stockWorkList, acceptOdrCarList, null); // 2010/02/26
            this.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, depsitMain, depositAlw, null, null, null, stockWorkList, acceptOdrCarList, null, null, null, null, null); // 2010/02/26
        }

        /// <summary>
        /// ＤＢから取得したデータをデータテーブルにキャッシュします。（オーバーロード）
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="baseSalesSlip">処理元売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        /// <param name="addUpSrcDetailList">計上元売上明細データオブジェクトリスト</param>
        /// <param name="depsitMain">入金データオブジェクト</param>
        /// <param name="depositAlw">入金引当データオブジェクト</param>
        /// <param name="stockSlipWorkList">仕入データワークオブジェクトリスト</param>
        /// <param name="stockDetailWorkList">仕入明細データワークオブジェクトリスト</param>
        /// <param name="addUpSrcStockDetailWorkList">計上元仕入明細データワークオブジェクトリスト</param>
        /// <param name="stockWorkList">在庫ワークオブジェクトリスト</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）オブジェクトリスト</param>
        /// <param name="uoeOrderDtlWorkList">UOE発注データオブジェクトリスト</param>
        //>>>2010/02/26
        //public void Cache(SalesSlip salesSlip, SalesSlip baseSalesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, SearchDepsitMain depsitMain, SearchDepositAlw depositAlw, List<StockSlipWork> stockSlipWorkList, List<StockDetailWork> stockDetailWorkList, List<AddUpOrgStockDetailWork> addUpSrcStockDetailWorkList, List<StockWork> stockWorkList, List<AcceptOdrCar> acceptOdrCarList, List<UOEOrderDtlWork> uoeOrderDtlWorkList)
        public void Cache(SalesSlip salesSlip, SalesSlip baseSalesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, SearchDepsitMain depsitMain, SearchDepositAlw depositAlw, List<StockSlipWork> stockSlipWorkList, List<StockDetailWork> stockDetailWorkList, List<AddUpOrgStockDetailWork> addUpSrcStockDetailWorkList, List<StockWork> stockWorkList, List<AcceptOdrCar> acceptOdrCarList, List<UOEOrderDtlWork> uoeOrderDtlWorkList, UserSCMOrderHeaderRecord scmHeader, UserSCMOrderCarRecord scmCar, List<UserSCMOrderDetailRecord> scmDetailList, List<UserSCMOrderAnswerRecord> scmAnswerList)
        //<<<2010/02/26
        {
            // 売上明細データテーブルクリア処理
            this.ClearData();
            this.ClearAcptAnOrderData();

            //>>>2010/04/08
            ////>>>2010/02/26
            //// SCM補正
            //if (scmHeader != null) salesSlip.InquiryNumber = scmHeader.InquiryNumber;
            ////<<<2010/02/26
            // SCM補正
            if (scmHeader != null)
            {
                salesSlip.InquiryNumber = scmHeader.InquiryNumber;
                salesSlip.InqOrdDivCd = scmHeader.InqOrdDivCd;
            }
            //<<<2010/04/08

            // 売上データキャッシュ処理
            this.Cache(salesSlip);

            // 売上データキャッシュ処理（DB読込データ）
            this.CacheDBData(salesSlip);

            // 売上明細データキャッシュ処理
            this.CacheSalesDetail(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, this._salesDetailDataTable);
            this._salesDetailDataTableBeforeAddUp = (SalesInputDataSet.SalesDetailDataTable)this._salesDetailDataTable.Copy();

            // 在庫データキャッシュ処理
            this.CacheStockInfo(stockWorkList);

            // 現在庫数調整
            this.SalesDetailStockInfoAdjust();

            // 売上明細データキャッシュ処理（DB読込データ）
            this.CacheSalesDetailDBData(salesDetailList);

            // 売上明細行初期行数追加処理
            this.AddSalesDetailRowInitialRowCount();

            // 親データが受注の場合、受注データキャッシュ
            if (salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
            {
                this.CacheAcptAnOdrSlip(salesSlip);
                this.CacheAcptAnOdrDetail(salesDetailList);
            }

            // 入金データキャッシュ処理
            this.Cache((depsitMain == null) ? new SearchDepsitMain() : depsitMain,
                       (depositAlw == null) ? new SearchDepositAlw() : depositAlw);

            // 仕入データキャッシュ処理
            this.CacheStockSlipForRead(stockSlipWorkList);

            // 仕入明細データキャッシュ処理
            this.CacheStockDetailForRead(stockDetailWorkList);

            // 仕入情報データキャッシュ処理
            this.CacheStockTemp();

            // 計上元仕入明細データキャッシュ処理
            this.CacheAddUppOrgStockDetail(addUpSrcStockDetailWorkList);

            // UOE発注データキャッシュ処理
            if ((uoeOrderDtlWorkList != null) &&
                (uoeOrderDtlWorkList.Count != 0) &&
                (this._salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)) // 親データが受注の場合のみ
            {
                this.CacheUOEOrderInfo(uoeOrderDtlWorkList);
            }

            // 車両情報キャッシュ処理
            this.CacheCarInfo(baseSalesSlip, salesDetailList, acceptOdrCarList);

            //>>>2010/02/26
            // SCM情報キャッシュ処理
            this.CacheSCMInfo(scmHeader, scmCar, scmDetailList, scmAnswerList);
            //<<<2010/02/26

            // ADD 2013/04/19 SCM障害№10522対応 ----------------------------------->>>>>
            // SCM回答用BLコードリスト設定
            if (scmAnswerList != null && scmAnswerList.Count != 0)
            {
                // SCM連携データが存在する時はSCM受注明細データ（回答）よりセット
                SettingOriginalBLGoodsCodeMapKey(scmAnswerList);
            }
            // SCM連携データが存在しない時は売上明細データよりセット
            else if (salesDetailList != null && salesDetailList.Count != 0)
            {
                SettingOriginalBLGoodsCodeMapKey(salesDetailList);
            }
            else
            {
                // どちらにもデータが存在しない時はクリア
                this._originalBLGoodsCodeMap.Clear();
            }
            // ADD 2013/04/19 SCM障害№10522対応 -----------------------------------<<<<<

            //>>>2011/05/25
            // 売上データSCM受注情報設定処理
            this.SettingSalesSlipSCMAcOdrData();
            //<<<2011/05/25

            //>>>2011/02/01 PS管理番号保持対応
            // 売上明細データテーブルSCM受注明細情報設定処理
            this.SettingSalesDetailRowSCMAcOdrDtlAs();
            //<<<2011/02/01 PS管理番号保持対応

            //>>>2011/03/08
            // 親データが受注の場合、受注データキャッシュ
            if (salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
            {
                // 受注明細データテーブルSCM受注明細情報設定処理
                this.SettingAcptAnOdrDetailRowSCMAcOdrDtlAs();
            }
            //<<<2011/03/08

            // 売上明細データテーブル仕入情報設定処理
            this.SettingSalesDetailRowStockTempInfo();

            // 売上明細データテーブルUOE発注情報設定処理
            this.SettingSalesDetailRowUOEOrderDtl();

            // データ変更フラグプロパティをfalseにする
            this.IsDataChanged = false;
        }

        /// <summary>
        /// 計上初期値セット前情報キャッシュ
        /// </summary>
        /// <param name="salesSlip"></param>
        public void CacheSalesSlipBeforeAddUp(SalesSlip salesSlip)
        {
            this._salesSlipBeforeAddUp = salesSlip.Clone(); ;
        }

        /// <summary>
        /// 在庫情報をキャッシュします。
        /// </summary>
        /// <param name="goodsUnitDataList"></param>
        private void CacheStockInfo(List<GoodsUnitData> goodsUnitDataList)
        {
            foreach (GoodsUnitData goodsUnitData in goodsUnitDataList)
            {
                this.CacheStockInfo(goodsUnitData.StockList);
            }
        }

        /// <summary>
        /// 在庫情報をキャッシュします。
        /// </summary>
        /// <param name="stockWorkList">在庫ワークオブジェクトリスト</param>
        private void CacheStockInfo(List<Stock> stockList)
        {
            if ((stockList != null) && (stockList.Count > 0))
            {
                foreach (Stock stock in stockList)
                {
                    bool isNew = false;
                    SalesInputDataSet.StockInfoRow row = this._stockInfoDataTable.FindByWarehouseCodeGoodsNoGoodsMakerCd(stock.WarehouseCode.Trim(), stock.GoodsNo.Trim(), stock.GoodsMakerCd);
                    if (row == null)
                    {
                        row = this._stockInfoDataTable.NewStockInfoRow();
                        row.WarehouseCode = stock.WarehouseCode.Trim();
                        row.GoodsNo = stock.GoodsNo.Trim();
                        row.GoodsMakerCd = stock.GoodsMakerCd;
                        isNew = true;
                    }
                    row.WarehouseName = stock.WarehouseName;
                    row.WarehouseShelfNo = stock.WarehouseShelfNo.Trim();
                    row.ShipmentPosCnt = stock.ShipmentPosCnt;

                    if (isNew)
                    {
                        this._stockInfoDataTable.AddStockInfoRow(row);
                    }
                }
            }
        }

        /// <summary>
        /// 在庫情報をキャッシュします。
        /// </summary>
        /// <param name="stockWorkList">在庫ワークオブジェクトリスト</param>
        private void CacheStockInfo(List<StockWork> stockWorkList)
        {
            if ((stockWorkList != null) && (stockWorkList.Count > 0))
            {
                foreach (StockWork stockWork in stockWorkList)
                {
                    bool isNew = false;
                    SalesInputDataSet.StockInfoRow row = this._stockInfoDataTable.FindByWarehouseCodeGoodsNoGoodsMakerCd(stockWork.WarehouseCode.Trim(), stockWork.GoodsNo.Trim(), stockWork.GoodsMakerCd);
                    if (row == null)
                    {
                        row = this._stockInfoDataTable.NewStockInfoRow();
                        row.WarehouseCode = stockWork.WarehouseCode.Trim();
                        row.GoodsNo = stockWork.GoodsNo.Trim();
                        row.GoodsMakerCd = stockWork.GoodsMakerCd;
                        isNew = true;
                    }
                    row.WarehouseName = stockWork.WarehouseName;
                    row.WarehouseShelfNo = stockWork.WarehouseShelfNo.Trim();
                    row.ShipmentPosCnt = stockWork.ShipmentPosCnt;

                    if (isNew)
                    {
                        this._stockInfoDataTable.AddStockInfoRow(row);
                    }
                }
            }
        }

        /// <summary>
        /// 在庫情報をキャッシュします。
        /// </summary>
        /// <param name="stock">在庫情報オブジェクト</param>
        private void CacheStockInfo(Stock stock)
        {
            if (stock != null)
            {
                SalesInputDataSet.StockInfoRow row = this._stockInfoDataTable.FindByWarehouseCodeGoodsNoGoodsMakerCd(stock.WarehouseCode.Trim(), stock.GoodsNo.Trim(), stock.GoodsMakerCd);
                if (row == null)
                {
                    row = this._stockInfoDataTable.NewStockInfoRow();
                    row.WarehouseCode = stock.WarehouseCode.Trim();
                    row.GoodsNo = stock.GoodsNo.Trim();
                    row.GoodsMakerCd = stock.GoodsMakerCd;
                    this._stockInfoDataTable.AddStockInfoRow(row);
                }
                row.WarehouseName = stock.WarehouseName;
                row.WarehouseShelfNo = stock.WarehouseShelfNo.Trim();
                row.ShipmentPosCnt = stock.ShipmentPosCnt;
            }
        }

        /// <summary>
        /// 在庫情報に調整数をセットします。
        /// </summary>
        /// <param name="warehouseCode">倉庫コード</param>
        /// <param name="goodsNo">商品コード</param>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="adjustCount">調整数</param>
        private void StockInfoAdjustCountSetting(string warehouseCode, string goodsNo, int goodsMakerCd, double adjustCount)
        {
            SalesInputDataSet.StockInfoRow row = this._stockInfoDataTable.FindByWarehouseCodeGoodsNoGoodsMakerCd(warehouseCode, goodsNo, goodsMakerCd);

            if (row != null)
            {
                row.AdjustCnt += adjustCount;
            }
        }

        /// <summary>
        /// 売上明細データオブジェクトリストの現在庫数を調整します。
        /// </summary>
        public void SalesDetailStockInfoAdjust()
        {
            if (this._stockInfoDataTable.Rows.Count > 0)
            {
                try
                {
                    this._salesDetailDataTable.AcceptChanges();
                    this._salesDetailDataTable.BeginLoadData();

                    List<StockInfoKey> stockKeyInfoList = new List<StockInfoKey>();

                    foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this._salesDetailDataTable)
                    {
                        if (!string.IsNullOrEmpty(salesDetailRow.WarehouseCode.Trim()))
                        {
                            StockInfoKey stockKeyInfo = new StockInfoKey(salesDetailRow.WarehouseCode.Trim(), salesDetailRow.GoodsNo, salesDetailRow.GoodsMakerCd);

                            if (!stockKeyInfoList.Contains(stockKeyInfo))
                            {
                                this.SalesDetailStockInfoAdjust(salesDetailRow.WarehouseCode, salesDetailRow.GoodsNo, salesDetailRow.GoodsMakerCd);
                                stockKeyInfoList.Add(stockKeyInfo);
                            }
                        }
                    }
                }
                finally
                {
                    this._salesDetailDataTable.EndLoadData();
                }
            }
        }

        /// <summary>
        /// 売上明細データオブジェクトリストの現在庫数を調整します。
        /// </summary>
        /// <param name="warehouseCode">倉庫コード</param>
        /// <param name="goodsNo">商品コード</param>
        /// <param name="goodsMakerCode">メーカーコード</param>
        /// <br>Update Note: 2011/10/29 鄧潘ハン</br>
        /// <br>             ReadMine#26251 全体初期値設定の明細算出後在庫数表示区分を「行移動時反映」に設定した状態で、</br>
        /// <br>             売上伝票入力で明細を入力して倉庫をガイドから選択、</br>
        /// <br>             又はF8で倉庫切替を行うと、最初から在庫数が変更された状態で表示されるため、</br>
        /// <br>             ガイドからの選択直後は在庫数を変更しないように修正</br>
        /// <br>Update Note: 2011/11/01 鄧潘ハン</br>
        /// <br>             ReadMine#26251 全体初期値設定の明細算出後在庫数表示区分を「行移動時反映」に設定した状態で、</br>
        /// <br>             売上伝票入力で明細を入力して倉庫をガイドから選択、</br>
        /// <br>             又はF8で倉庫切替を行うと、最初から在庫数が変更された状態で表示されるため、</br>
        /// <br>             ガイドからの選択直後は在庫数を変更しないように修正</br>
        public void SalesDetailStockInfoAdjust(string warehouseCode, string goodsNo, int goodsMakerCode)
        {
            int dataViewCount = 0; // ADD 2011/10/29
            if ((string.IsNullOrEmpty(warehouseCode)) || (string.IsNullOrEmpty(goodsNo)) || (goodsMakerCode == 0)) return;

            SalesInputDataSet.StockInfoRow stockInfoRow = this._stockInfoDataTable.FindByWarehouseCodeGoodsNoGoodsMakerCd(warehouseCode, goodsNo, goodsMakerCode);

            if (stockInfoRow != null)
            {
                string defaultRowFilter = this._salesDetailDataView.RowFilter;
                string defaultSort = this._salesDetailDataView.Sort;

                try
                {
                    SalesInputDataSet.SalesDetailRow salesDetailRow;
                    // 在庫マスタ上の現在庫を取得する
                    double shipmentPosCnt = stockInfoRow.ShipmentPosCnt - stockInfoRow.AdjustCnt;

                    string selectString = string.Format("{0}='{1}' AND {2}='{3}' AND {4}={5}",
                                                this._salesDetailDataTable.WarehouseCodeColumn.ColumnName,
                                                stockInfoRow.WarehouseCode.Trim(),
                                                this._salesDetailDataTable.GoodsNoColumn.ColumnName,
                                                stockInfoRow.GoodsNo,
                                                this._salesDetailDataTable.GoodsMakerCdColumn.ColumnName,
                                                stockInfoRow.GoodsMakerCd);

                    this._salesDetailDataView.Sort = string.Format("{0}", this._salesDetailDataTable.SalesRowNoColumn);

                    // 一旦、修正分の数量を差し引いた現在庫数を計算する(全明細が削除された場合の現在庫数を算出)
                    this._salesDetailDataView.RowFilter = string.Format("{0} AND {1} <> 0", selectString, this._salesDetailDataTable.SalesSlipDtlNumColumn.ColumnName);

                    if (this._salesDetailDataView.Count > 0)
                    {
                        foreach (DataRowView drv in this._salesDetailDataView)
                        {
                            salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo((string)drv[this._salesDetailDataTable.SalesSlipNumColumn.ColumnName], (int)drv[this._salesDetailDataTable.SalesRowNoColumn.ColumnName]);
                            bool shipmentCntChange = this.SupplierStockCountChangeCheck(salesDetailRow);

                            // 現在庫数が変わる場合は元の数量分差し引く
                            if (shipmentCntChange == true)
                            {
                                if (salesDetailRow.ShipmentCntDefault != 0)
                                {
                                    shipmentPosCnt = (double)((decimal)shipmentPosCnt + (decimal)salesDetailRow.ShipmentCntDefault);
                                }
                                // --- DEL 2012/12/04 Y.Wakita ---------->>>>>
                                //else
                                //{
                                //    shipmentPosCnt = (salesDetailRow.AcceptAnOrderCntDisplay != 0) ? (double)((decimal)shipmentPosCnt + (decimal)salesDetailRow.AcceptAnOrderCntDisplay) : (double)((decimal)shipmentPosCnt + (decimal)salesDetailRow.ShipmentCnt);
                                //}
                                // --- UPD 2012/12/04 Y.Wakita ----------<<<<<
                            }
                        }
                    }

                    // 先頭明細から現在庫数を再計算する
                    this._salesDetailDataView.RowFilter = selectString;

                    foreach (DataRowView drv in this._salesDetailDataView)
                    {
                        dataViewCount++;// ADD 2011/10/29
                        salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo((string)drv[this._salesDetailDataTable.SalesSlipNumColumn.ColumnName], (int)drv[this._salesDetailDataTable.SalesRowNoColumn.ColumnName]);
                        bool shipmentCntChange = this.SupplierStockCountChangeCheck(salesDetailRow);

                        salesDetailRow.SupplierStock = shipmentPosCnt;
                        // ---UPD 2011/07/20---------->>>>>
                        // 現在庫数が変わる場合は加算
                        //if (shipmentCntChange == true)
                        //{
                        //    shipmentPosCnt = (salesDetailRow.AcceptAnOrderCntDisplay != 0) ? (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.AcceptAnOrderCntDisplay) : (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.ShipmentCnt);
                        //}
                        if (this._salesSlipInputInitDataAcs.GetAllDefSet().DtlCalcStckCntDsp == 0)
                        {
                            // 現在庫数が変わる場合は加算
                            if (shipmentCntChange == true)
                            {
                                //>>>2011/09/27
                                //shipmentPosCnt = (salesDetailRow.AcceptAnOrderCntDisplay != 0) ? (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.AcceptAnOrderCntDisplay) : (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.ShipmentCnt);
                                if (salesDetailRow.AcceptAnOrderCntDisplay != 0)
                                {
                                    if (this._salesSlipInputInitDataAcs.GetStockMngTtlSt().PreStckCntDspDiv == 0) // 0:受注分含む 1:受注分含まない
                                    {
                                        //---ADD 2011/11/01 ------------------------->>>>>
                                        if (salesDetailRow.BoCode != "*" && salesDetailRow.AcceptAnOrderCntForOrder != 0)
                                        {
                                            shipmentPosCnt = (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.ShipmentCnt);
                                        }
                                        else
                                        {
                                            shipmentPosCnt = (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.AcceptAnOrderCntDisplay);
                                        }
                                        //---ADD 2011/11/01 -------------------------<<<<<
                                        //shipmentPosCnt = (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.AcceptAnOrderCntDisplay);// DEL 2011/11/01

                                    }
                                    else
                                    {
                                        shipmentPosCnt = (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.ShipmentCnt);
                                    }
                                }
                                else
                                {
                                    shipmentPosCnt = (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.ShipmentCnt);
                                }
                                //<<<2011/09/27
                            }
                            //---ADD 2011/11/01 ----->>>>>
                            salesDetailRow.SupplierStockDisplay = shipmentPosCnt;
                            salesDetailRow.WarehouseShelfNo = stockInfoRow.WarehouseShelfNo;
                            //---ADD 2011/11/01 -----<<<<<
                        }
                        else
                        {
                            if (this.HasStockInfo == false)
                            {
                                // 現在庫数が変わる場合は加算
                                if (shipmentCntChange == true)
                                {
                                    //>>>2011/09/27
                                    //shipmentPosCnt = (salesDetailRow.AcceptAnOrderCntDisplay != 0) ? (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.AcceptAnOrderCntDisplay) : (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.ShipmentCnt);

                                    if (salesDetailRow.AcceptAnOrderCntDisplay != 0)
                                    {
                                        if (_salesSlipInputAcs.WarehouseBtnClickFlag != true) // ADD 2011/11/01
                                        { // ADD 2011/11/01
                                            if (this._salesSlipInputInitDataAcs.GetStockMngTtlSt().PreStckCntDspDiv == 0) // 0:受注分含む 1:受注分含まない
                                            {
                                                //---ADD 2011/11/01 ------------------------->>>>>
                                                if (salesDetailRow.BoCode != "*" && salesDetailRow.AcceptAnOrderCntForOrder != 0)
                                                {
                                                    shipmentPosCnt = (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.ShipmentCnt);
                                                }
                                                else
                                                {
                                                    shipmentPosCnt = (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.AcceptAnOrderCntDisplay);
                                                }
                                                //---ADD 2011/11/01 -------------------------<<<<<
                                                //shipmentPosCnt = (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.AcceptAnOrderCntDisplay); // DEL 2011/11/01
                                            }
                                            else
                                            {
                                                shipmentPosCnt = (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.ShipmentCnt);
                                            }
                                        } // ADD 2011/11/01
                                    }
                                    else
                                    {
                                        //shipmentPosCnt = (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.ShipmentCnt);// DEL 2011/10/29
                                        //---ADD 2011/10/29 ---------------------------->>>>>
                                        if (_salesSlipInputAcs.WarehouseBtnClickFlag != true)
                                        {
                                            shipmentPosCnt = (double)((decimal)shipmentPosCnt - (decimal)salesDetailRow.ShipmentCnt);
                                        }
                                        // --- DEL 2011/11/01 ---->>>>>
                                        //if (drv.Row.ItemArray[3].ToString() == _salesSlipInputAcs.WarehouseRow.ToString())
                                        //{
                                        //    salesDetailRow.SupplierStockDisplay = shipmentPosCnt;
                                        //    salesDetailRow.WarehouseShelfNo = stockInfoRow.WarehouseShelfNo;
                                        //}
                                        // --- DEL 2011/11/01 ----<<<<<
                                        //---ADD 2011/10/29 ----------------------------<<<<<
                                    }
                                    // --- ADD 2011/11/01 ---->>>>>
                                    if (drv.Row.ItemArray[3].ToString() == _salesSlipInputAcs.WarehouseRow.ToString())
                                    {
                                        salesDetailRow.SupplierStockDisplay = shipmentPosCnt;
                                        salesDetailRow.WarehouseShelfNo = stockInfoRow.WarehouseShelfNo;
                                    }
                                    // --- ADD 2011/11/01 ----<<<<<
                                    //<<<2011/09/27
                                }
                            }
                            else
                            {
                                this.HasStockInfo = false;
                            }
                        }
                        // ---UPD 2011/07/20----------<<<<<

                        // 保留
                        //// 出荷or受注計上、計上残区分＝1:残さない　の場合、残分加算
                        //if ((((this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) && (this._salesSlipInputInitDataAcs.GetSalesTtlSt().AcpOdrrAddUpRemDiv == 1)) ||
                        //     ((this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_ShipmentAddUp) && (this._salesSlipInputInitDataAcs.GetSalesTtlSt().ShipmAddUpRemDiv == 1))) &&
                        //    (salesDetailRow.EditStatus == ctEDITSTATUS_AddUpNew))
                        //{
                        //    shipmentPosCnt += (double)((decimal)salesDetailRow.AddUpEnableCnt - ((salesDetailRow.AcceptAnOrderCntDisplay != 0) ? (decimal)salesDetailRow.AcceptAnOrderCntDisplay : (decimal)salesDetailRow.ShipmentCnt));
                        //}
                        //---ADD 2011/10/29 ---------------------------->>>>>
                        if (_salesSlipInputAcs.WarehouseBtnClickFlag != true)
                        {
                            salesDetailRow.SupplierStockDisplay = shipmentPosCnt;
                            salesDetailRow.WarehouseShelfNo = stockInfoRow.WarehouseShelfNo;
                        }
                        if (this._salesDetailDataView.Count == dataViewCount)
                        {
                            _salesSlipInputAcs.WarehouseBtnClickFlag = false;
                        }
                        //---ADD 2011/10/29 ----------------------------<<<<<

                        //---DEL 2011/10/29 ---------------------------->>>>>
                        //salesDetailRow.SupplierStockDisplay = shipmentPosCnt;
                        //salesDetailRow.WarehouseShelfNo = stockInfoRow.WarehouseShelfNo;
                        //---DEL 2011/10/29 ----------------------------<<<<<
                    }

                }
                finally
                {
                    this._salesDetailDataView.RowFilter = defaultRowFilter;
                    this._salesDetailDataView.Sort = defaultSort;
                }
            }
        }
        #endregion
        #endregion

        // ===================================================================================== //
        // パブリックメソッド
        // ===================================================================================== //
        # region Public Methods
        #region ●各種チェック処理
        /// <summary>
        /// 保存用データのチェックを行います。
        /// </summary>
        /// <param name="mainMessage">メッセージ</param>
        /// <param name="itemNameList">項目名称リスト</param>
        /// <param name="itemList">項目リスト</param>
        /// <param name="errorRowNoList"></param>
        /// <param name="salesSlip">売上データクラス</param>
        /// <param name="salesDetailDataTable">売上明細データテーブル</param>
        /// <returns>true:保存可 false:保存不可</returns>
        /// <br>Update Note: 2010/05/04 王海立 発行者チェック、入力倉庫チェック処理の追加</br>
        /// <br>Update Note: 2010/07/14 呉元嘯 伝票種別が”単価見積”の場合は入力粗利チェック（上限・下限）を実施しない。</br>
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        /// <br>Update Note: 2019/05/16 陳艶丹</br>
        /// <br>管理番号   : 11575089-00</br>
        /// <br>作成内容   : Redmine#49768在庫切れのチェック対応</br>
        /// <br>Update Note: K2021/05/19 陳艶丹</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>作成内容   : PMKOBETSU-4140 No.34 過去日付の伝票が登録されてしまった対応</br>
        public bool CheckSaveData(out string mainMessage, out List<string> itemNameList, out List<string> itemList, out List<int> errorRowNoList, SalesSlip salesSlip, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            mainMessage = string.Empty;
            itemNameList = new List<string>();
            itemList = new List<string>();
            errorRowNoList = new List<int>();
            bool insufficiency = false;
            bool overFlow = false;
            bool stockCountError = false;
            bool dishonestValue = false;
            string retMessage;
            bool isAddUp;
            this._errorMessage = string.Empty; // ADD 2010/11/25

            // 拠点
            if (string.IsNullOrEmpty(salesSlip.ResultsAddUpSecCd))
            {
                itemNameList.Add("拠点");
                itemList.Add("ResultsAddUpSecCd");
                insufficiency = true;
            }

            // 得意先
            if (salesSlip.CustomerCode == 0)
            {
                itemNameList.Add("得意先");
                itemList.Add("CustomerCode");
                insufficiency = true;
            }

            // 担当者
            // ---- UPD 2010/06/26 ------>>>>
            //if (string.IsNullOrEmpty(salesSlip.SalesEmployeeCd))
            if (string.IsNullOrEmpty(salesSlip.SalesEmployeeCd.Trim()))
            // ---- UPD 2010/06/26 ------<<<<
            {
                itemNameList.Add("担当者");
                itemList.Add("SalesEmployeeCd");
                insufficiency = true;
            }

            // 受注者
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().AcpOdrAgentDispDiv == 2)
            {
                // ---- UPD 2010/06/26 ------>>>>
                //if (string.IsNullOrEmpty(salesSlip.FrontEmployeeCd))
                if (string.IsNullOrEmpty(salesSlip.FrontEmployeeCd.Trim()))
                // ---- UPD 2010/06/26 ------<<<<
                {
                    itemNameList.Add("受注者");
                    itemList.Add("FrontEmployeeCd");
                    insufficiency = true;
                }
            }

            // 発行者
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpAgentDispDiv == 2)
            {
                // ---- UPD 2010/06/26 ------>>>>
                //if (string.IsNullOrEmpty(salesSlip.SalesInputCode))
                if (string.IsNullOrEmpty(salesSlip.SalesInputCode.Trim()))
                // ---- UPD 2010/06/26 ------<<<<
                {
                    itemNameList.Add("発行者");
                    itemList.Add("SalesInputCode");
                    insufficiency = true;
                }
            }

            switch ((SalesSlipInputAcs.AcptAnOdrStatusState)salesSlip.AcptAnOdrStatusDisplay)
            {
                case AcptAnOdrStatusState.Estimate:
                case AcptAnOdrStatusState.UnitPriceEstimate:
                    // 見積日
                    if (salesSlip.SalesDate == DateTime.MinValue)
                    {
                        itemNameList.Add("見積日");
                        itemList.Add("SalesDate");
                        insufficiency = true;
                    }
                    break;
                case AcptAnOdrStatusState.Sales:
                    // 売上日
                    if (salesSlip.SalesDate == DateTime.MinValue)
                    {
                        itemNameList.Add("売上日");
                        itemList.Add("SalesDate");
                        insufficiency = true;
                    }
                    else
                    {
                        // 計上日(請求計上日)
                        if (salesSlip.AddUpADate == DateTime.MinValue)
                        {
                            itemNameList.Add("計上日");
                            itemList.Add("AddUpADate");
                            insufficiency = true;
                        }
                    }
                    break;
                case AcptAnOdrStatusState.Shipment:
                    // 売上日
                    if (salesSlip.SalesDate == DateTime.MinValue)
                    {
                        itemNameList.Add("売上日");
                        itemList.Add("SalesDate");
                        insufficiency = true;
                    }
                    break;
            }

            // --- ADD 2010/05/04 ---------->>>>>
            // 発行者チェック処理
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpAgentChkDiv == 1)
            {
                if (!string.IsNullOrEmpty(salesSlip.SalesInputCode) && !string.IsNullOrEmpty(LoginInfoAcquisition.Employee.EmployeeCode))
                {
                    //>>>2010/05/27
                    //if (!salesSlip.SalesInputCode.Equals(LoginInfoAcquisition.Employee.EmployeeCode.Trim()))
                    if (!salesSlip.SalesInputCode.Trim().Equals(LoginInfoAcquisition.Employee.EmployeeCode.Trim()))
                    //<<<2010/05/27
                    {
                        itemNameList.Add("発行者とログイン担当者が不一致です。"); // ADD 2010/05/18
                        itemList.Add("SalesInputCode");
                        //inpAgentChk = true; // DEL 2010/05/18
                        dishonestValue = true;
                    }
                }
            }
            // --- ADD 2010/05/04 ----------<<<<<

            // 明細部
            // --- UPD 2012/06/28 No.317 T.Nishi ---------->>>>>
            //if (!this.ExistSalesDetail())
            if (!this.ExistSalesDetailOtherAnnotation())
            // --- UPD 2012/06/28 No.317 T.Nishi ----------<<<<<
            {
                itemNameList.Add("売上明細");
                itemList.Add("SalesDetail");
                insufficiency = true;
            }

            int sumShipmentCnt = 0;
            int sumAcceptAnOrderCnt = 0;
            int rowNo = 0;
            foreach (SalesInputDataSet.SalesDetailRow row in salesDetailDataTable)
            {
                SalesInputDataSet.StockTempRow stockTempRow = this._stockTempDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);

                // 表示現在行取得
                SalesInputDataSet.SalesDetailRow[] rows = this.SelectSalesDetailRows(string.Format("{0}='{1}'", this._salesDetailDataTableSave.DtlRelationGuidColumn.ColumnName, row.DtlRelationGuid.ToString()), this._salesDetailDataTableSave);
                rowNo = rows[0].SalesRowNo;

                if ((row.EditStatus != ctEDITSTATUS_Annotation) &&
                    (row.EditStatus != ctEDITSTATUS_RowDiscount))
                {
                    #region ●品名
                    if ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods)) // 商品or商品外
                    {
                        if (string.IsNullOrEmpty(row.GoodsName))
                        {
                            itemNameList.Add(string.Format("{0}行目の品名", rowNo));
                            itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.GoodsNameColumn.ColumnName));
                            if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                            insufficiency = true;
                        }
                    }
                    #endregion

                    #region ●出荷数＆受注数
                    switch ((SalesSlipInputAcs.AcptAnOdrStatusState)salesSlip.AcptAnOdrStatusDisplay)
                    {
                        case AcptAnOdrStatusState.Estimate:
                            if ((!string.IsNullOrEmpty(row.GoodsName)) && ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods))) // 商品or商品外
                            {
                                #region 見積数未入力チェック
                                if (row.ShipmentCntDisplay == 0)
                                {
                                    itemNameList.Add(string.Format("{0}行目の出荷数", rowNo));
                                    itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName));
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                    break;
                                }
                                #endregion

                                #region 見積数MAXチェック
                                if (Math.Abs(row.ShipmentCntDisplay) > ctMAXVALUE_CountDetail)
                                {
                                    if (salesSlip.SalesSlipCd == 10)
                                    {
                                        itemNameList.Add(string.Format("{0}行目の出荷数が{1:###,##0.00}を超えています。", rowNo, ctMAXVALUE_CountDetail));
                                    }
                                    else
                                    {
                                        itemNameList.Add(string.Format("{0}行目の出荷数が{1:###,##0}以下になっています。", rowNo, ctMAXVALUE_CountDetail + 0.01));
                                    }
                                    itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName));
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    overFlow = true;
                                    break;
                                }
                                #endregion

                                #region 在庫切れチェック
                                bool setInputError;
                                bool showMessage;
                                //if (!this.CheckStockCount(row.WarehouseCode, row.SupplierStock, row.ShipmentCntDisplay, out setInputError, out showMessage))    // DEL 2016/09/18 Redmine#48851 譚洪
                                if (!this.CheckStockCount(false, row.WarehouseCode, row.SupplierStock, row.ShipmentCntDisplay, out setInputError, out showMessage))  // ADD 2016/09/18 Redmine#48851 譚洪
                                {
                                    if (setInputError)
                                    {
                                        itemNameList.Add(string.Format("{0}行目の出荷数が在庫数を上回っています。", rowNo));
                                        itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName));
                                        if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                        stockCountError = true;
                                    }
                                }
                                #endregion
                            }
                            break;
                        case AcptAnOdrStatusState.UnitPriceEstimate:
                            break;
                        case AcptAnOdrStatusState.Sales:
                        case AcptAnOdrStatusState.Shipment:
                            if ((!string.IsNullOrEmpty(row.GoodsName)) && ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods))) // 商品or商品外
                            {
                                #region 出荷数・受注数未入力チェック
                                if ((row.ShipmentCntDisplay == 0) && (row.AcceptAnOrderCntDisplay == 0))
                                {
                                    itemNameList.Add(string.Format("{0}行目の出荷数", rowNo));
                                    itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName));
                                    itemNameList.Add(string.Format("{0}行目の受注数", rowNo));
                                    itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.AcceptAnOrderCntDisplayColumn.ColumnName));
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                    break;
                                }
                                #endregion

                                #region 出荷数MAXチェック
                                if (Math.Abs(row.ShipmentCntDisplay) > ctMAXVALUE_CountDetail)
                                {
                                    if (salesSlip.SalesSlipCd == 10)
                                    {
                                        itemNameList.Add(string.Format("{0}行目の出荷数が{1:###,##0.00}を超えています。", rowNo, ctMAXVALUE_CountDetail));
                                    }
                                    else
                                    {
                                        itemNameList.Add(string.Format("{0}行目の出荷数が{1:###,##0}以下になっています。", rowNo, ctMAXVALUE_CountDetail + 0.01));
                                    }
                                    itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName));
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    overFlow = true;
                                    break;
                                }
                                #endregion

                                #region 受注数MAXチェック
                                if (Math.Abs(row.AcceptAnOrderCntDisplay) > ctMAXVALUE_CountDetail)
                                {
                                    if (salesSlip.SalesSlipCd == 10)
                                    {
                                        itemNameList.Add(string.Format("{0}行目の受注数が{1:###,##0.00}を超えています。", rowNo, ctMAXVALUE_CountDetail));
                                    }
                                    else
                                    {
                                        itemNameList.Add(string.Format("{0}行目の受注数が{1:###,##0}以下になっています。", rowNo, ctMAXVALUE_CountDetail + 0.01));
                                    }
                                    itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.AcceptAnOrderCntDisplayColumn.ColumnName));
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    overFlow = true;
                                    break;
                                }
                                #endregion

                                #region 在庫切れチェック
                                if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().RetGoodsStockEtyDiv == 0) &&   // 返品時在庫登録区分(0:する 1:しない)
                                    (salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) &&       // 返品
                                    (row.SalesSlipDtlNumSrc != 0) &&                                                // 元データあり
                                    (salesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum))            // 新規登録
                                {
                                    // 元あり返品時は、非在庫品の倉庫コードの入力を可能にする為、在庫切れチェックはなし
                                }
                                //>>>2010/06/07
                                else if ((salesSlip.InputMode == ctINPUTMODE_SalesSlip_ShipmentAddUp) ||
                                        //----- UPD 2019/05/16 陳艶丹 Redmine#49768在庫切れのチェック対応 ---------->>>>>
                                        //(salesSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp))
                                        ((salesSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) &&
                                        (this._salesSlipInputInitDataAcs.GetStockMngTtlSt().PreStckCntDspDiv == 0)))
                                        //----- UPD 2019/05/16 陳艶丹 Redmine#49768在庫切れのチェック対応 ----------<<<<<
                                {
                                    // 貸出／受注計上時は、貸出／受注入力時に在庫マスタを更新する為、在庫切れチェックなし
                                }
                                //<<<2010/06/07
                                //----- ADD 2019/05/16 陳艶丹 Redmine#49768在庫切れのチェック対応 ---------->>>>>
                                else if ((salesSlip.SalesSlipNum != ctDefaultSalesSlipNum) &&                  // 売上伝票番号≠"000000000":既存伝票
                                        (row.SalesSlipDtlNum != 0) &&                                          //売上明細通番≠0:既存明細
                                        (row.ShipmentCnt <= row.ShipmentCntDefForChk))
                                {
                                    // 修正モードで既存明細の在庫数量を増加しない場合、在庫切れチェックなし
                                }
                                //----- ADD 2019/05/16 陳艶丹 Redmine#49768在庫切れのチェック対応 ----------<<<<<
                                else
                                {
                                    bool setInputError;
                                    bool showMessage;
                                    //if (!this.CheckStockCount(row.WarehouseCode, row.SupplierStock, row.ShipmentCntDisplay, out setInputError, out showMessage)) // DEL 2016/09/18 Redmine#48851 譚洪
                                    if (!this.CheckStockCount(false, row.WarehouseCode, row.SupplierStock, row.ShipmentCntDisplay, out setInputError, out showMessage))  // ADD 2016/09/18 Redmine#48851 譚洪
                                    {
                                        if (setInputError)
                                        {
                                            itemNameList.Add(string.Format("{0}行目の出荷数が在庫数を上回っています。", rowNo));
                                            itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName));
                                            if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                            stockCountError = true;
                                        }
                                    }
                                    //if (!this.CheckStockCount(row.WarehouseCode, row.SupplierStock, row.AcceptAnOrderCntDisplay, out setInputError, out showMessage))  // DEL 2016/09/18 Redmine#48851 譚洪
                                    if (!this.CheckStockCount(true, row.WarehouseCode, row.SupplierStock, row.AcceptAnOrderCntDisplay, out setInputError, out showMessage))  // ADD 2016/09/18 Redmine#48851 譚洪
                                    {
                                        if (setInputError)
                                        {
                                            itemNameList.Add(string.Format("{0}行目の受注数が在庫数を上回っています。", rowNo));
                                            itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.AcceptAnOrderCntDisplayColumn.ColumnName));
                                            if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                            stockCountError = true;
                                        }
                                    }
                                }
                                #endregion
                            }
                            break;
                    }
                    #endregion

                    #region ●BLコード
                    switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().BLGoodsCdInpDiv)
                    {
                        // 入力任意
                        case 0:
                            break;
                        // 入力必須
                        case 1:
                            if ((!string.IsNullOrEmpty(row.GoodsName)) && ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods))) // 商品or商品外
                            {
                                if (row.BLGoodsCode == 0)
                                {
                                    itemNameList.Add(string.Format("{0}行目のBLコード", rowNo));
                                    itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.BLGoodsCodeColumn.ColumnName));
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                    break;
                                }
                            }
                            break;
                        default:
                            break;
                    }
                    #endregion

                    #region ●メーカー
                    switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().MakerInpDiv)
                    {
                        // 入力任意
                        case 0:
                            break;
                        // 入力必須
                        case 1:
                            if ((!string.IsNullOrEmpty(row.GoodsName)) && ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods))) // 商品or商品外
                            {
                                if (row.GoodsMakerCd == 0)
                                {
                                    itemNameList.Add(string.Format("{0}行目のメーカー", rowNo));
                                    itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.GoodsMakerCdColumn.ColumnName));
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                    break;
                                }
                            }
                            break;
                        default:
                            break;
                    }
                    #endregion

                    #region ●仕入先
                    switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierInpDiv)
                    {
                        // 入力任意
                        case 0:
                            break;
                        // 入力必須
                        case 1:
                            if ((!string.IsNullOrEmpty(row.GoodsName)) && ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods))) // 商品or商品外
                            {
                                if (row.SupplierCd == 0)
                                {
                                    itemNameList.Add(string.Format("{0}行目の仕入先", rowNo));
                                    itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.SupplierCdColumn.ColumnName));
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                    break;
                                }
                            }
                            break;
                        default:
                            break;
                    }
                    #endregion

                    #region ●売単価
                    // 売単価チェック
                    if (Math.Abs(row.SalesUnPrcDisplay) > ctMAXVALUE_SalesUnitPrice)
                    {
                        itemNameList.Add(string.Format("{0}行目の{1}が{2:###,##0.00}を超えています。", rowNo, this._salesDetailDataTable.SalesUnPrcDisplayColumn.Caption, ctMAXVALUE_SalesUnitPrice));
                        itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.SalesUnPrcDisplayColumn.ColumnName));
                        if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                        overFlow = true;
                        break;
                    }

                    // 売単価＜原単価 → ＮＧ
                    if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().CostCheckDivCd == 1)
                    {
                        if (row.SalesUnPrcDisplay < row.SalesUnitCost)
                        {
                            itemNameList.Add(string.Format("{0}行目の{1}が{2}を超えています。", rowNo, this._salesDetailDataTable.SalesUnitCostColumn.Caption, this._salesDetailDataTable.SalesUnPrcDisplayColumn.Caption));
                            itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.SalesUnPrcDisplayColumn.ColumnName));
                            if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                            dishonestValue = true;
                        }
                    }
                    #endregion

                    #region ●明細売上金額
                    // 明細売上金額チェック
                    if (Math.Abs(row.SalesMoneyDisplay) > ctMAXVALUE_SalesMoneyDetail)
                    {
                        itemNameList.Add(string.Format("{0}行目の売上金額が{1:###,##0}を超えています。", rowNo, ctMAXVALUE_SalesMoneyDetail));
                        itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.SalesMoneyDisplayColumn.ColumnName));
                        if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                        overFlow = true;
                        break;
                    }
                    #endregion

                    #region ●明細原価金額
                    // 明細原価金額チェック
                    if (Math.Abs(row.Cost) > ctMAXVALUE_SalesMoneyDetail)
                    {
                        itemNameList.Add(string.Format("{0}行目の原価金額が{1:###,##0}を超えています。", rowNo, ctMAXVALUE_SalesMoneyDetail));
                        itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.CostColumn.ColumnName));
                        if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                        overFlow = true;
                        break;
                    }
                    #endregion

                    #region ●粗利率
                    if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().GrsProfitDspCd == 0) && // 粗利表示区分(0:する 1:しない)
                        (this._salesSlipInputInitDataAcs.GetSalesTtlSt().CostDspDivCd == 1) && // 原価表示区分(0:しない 1:する)
                        (((salesSlip.SalesSlipCd != (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) && (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipChngDivCost != 2)) || // 伝票修正区分(原価)(2:未使用)
                        ((salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) && (this._salesSlipInputInitDataAcs.GetSalesTtlSt().RetSlipChngDivCost != 2))) && // 返品伝票修正区分(原価)(2:未使用)
                        // ------UPD 2010/07/14------>>>>>
                        //(this._costDisplay == true)) //&&
                        (this._costDisplay == true) &&
                        (salesSlip.AcptAnOdrStatusDisplay != (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate))
                    // ------UPD 2010/07/14------<<<<<
                    {
                        // 粗利率算出
                        double grossProfitRate = this.CalcGrossProfitRate(row.SalesMoneyTaxExc, row.CostTaxExc);
                        // --- UPD 2009/11/24 ---------->>>>>
                        //if (grossProfitRate != 0)
                        //{
                        double grossProfitRateLower = this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpGrsProfChkLower;
                        double grossProfitRateUpper = this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpGrsProfChkUpper;
                        //if ((grossProfitRateLower != 0) &&
                        //    (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpGrsProfChkLowDiv == 0))
                        if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpGrsProfChkLowDiv == 0)
                        {
                            // 粗利率下限＞明細粗利率 → ＮＧ
                            if (grossProfitRateLower > grossProfitRate)
                            {
                                itemNameList.Add(string.Format("{0}行目の粗利率が下限値を下回っています。", rowNo) + string.Format("下限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateLower, grossProfitRate));
                                itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.SalesRateColumn.ColumnName));
                                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                dishonestValue = true;
                            }
                        }
                        //if ((grossProfitRateUpper != 0) &&
                        //    (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpGrsProfChkUppDiv == 0))
                        if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpGrsProfChkUppDiv == 0)
                        {
                            // 粗利率上限＜明細粗利率 → ＮＧ
                            if (grossProfitRateUpper < grossProfitRate)
                            {
                                itemNameList.Add(string.Format("{0}行目の粗利率が上限値を超えています。", rowNo) + string.Format("上限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateUpper, grossProfitRate));
                                itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.SalesRateColumn.ColumnName));
                                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                dishonestValue = true;
                            }
                        }
                        //}
                        // --- UPD 2009/11/24 ----------<<<<<
                    }

                    #endregion

                    #region ●仕入情報
                    // チェック対象：通常売上、新規返品　※赤伝、元あり返品は対象外
                    if ((salesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) &&
                        (((salesSlip.SalesSlipCd == (int)SalesSlipCd.Sales) ||
                          ((salesSlip.SalesSlipCd == (int)SalesSlipCd.RetGoods) && (row.SalesSlipDtlNumSrc == 0)))) &&
                        (salesSlip.DebitNoteDiv == 0))
                    {
                        // 仕入情報
                        if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SalesStockDiv == 2) // 売上全体設定マスタ 売上仕入区分 0:しない 1:する 2:必須入力
                        {
                            if ((this.ExistOrderInfo(row.DtlRelationGuid)) ||
                                (this.ExistSalesDetailWarehouseCode(row.SalesRowNo, salesDetailDataTable)) ||
                                //(!this.ExistSalesDetailGoodsNoAndGoodsMakerCd(row.SalesRowNo, salesDetailDataTable)) || // 2010/09/27
                                (!this.ExistSalesDetail(row.SalesRowNo, salesDetailDataTable)) || // 2010/09/27
                                // ADD 2013/04/02③ T.Miyamoto ------------------------------>>>>>
                                ((this._salesSlipInputInitDataAcs.Opt_StockEntCtrl == (int)SalesSlipInputInitDataAcs.Option.ON) &&
                                 (this.ExistSalesDetailShipmentCntMinus(row.SalesRowNo))) ||
                                // ADD 2013/04/02③ T.Miyamoto ------------------------------<<<<<
                                // ADD 2013/04/09 T.Miyamoto ------------------------------>>>>>
                                ((this._salesSlipInputInitDataAcs.Opt_StockEntCtrl == (int)SalesSlipInputInitDataAcs.Option.ON) &&
                                 (salesSlip.SalesSlipCd == (int)SalesSlipCd.RetGoods)) ||
                                // ADD 2013/04/09 T.Miyamoto ------------------------------<<<<<
                                (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount))
                            {
                            }
                            else
                            {
                                if (!this.ExistStockTemp(stockTempRow))
                                {
                                    itemNameList.Add(string.Format("{0}行目の仕入情報", rowNo));
                                    itemList.Add("StockTemp");
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                }
                            }
                        }
                    }

                    //>>>2012/05/02
                    // チェック対象：貸出、新規返品　※赤伝、元あり返品は対象外
                    if ((salesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment) &&
                        (((salesSlip.SalesSlipCd == (int)SalesSlipCd.Sales) ||
                          ((salesSlip.SalesSlipCd == (int)SalesSlipCd.RetGoods) && (row.SalesSlipDtlNumSrc == 0)))) &&
                        (salesSlip.DebitNoteDiv == 0))
                    {
                        // 仕入情報
                        if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().RentStockDiv == 2) // 売上全体設定マスタ 貸出仕入区分 0:しない 1:する 2:必須入力
                        {
                            if ((this.ExistOrderInfo(row.DtlRelationGuid)) ||
                                (this.ExistSalesDetailWarehouseCode(row.SalesRowNo, salesDetailDataTable)) ||
                                (!this.ExistSalesDetail(row.SalesRowNo, salesDetailDataTable)) ||
                                (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount))
                            {
                            }
                            else
                            {
                                if (!this.ExistStockTemp(stockTempRow))
                                {
                                    itemNameList.Add(string.Format("{0}行目の仕入情報", rowNo));
                                    itemList.Add("StockTemp");
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                }
                            }
                        }
                    }
                    //<<<2012/05/02
                    #endregion

                    #region ●発注情報
                    if (ExistOrderInfo(row.DtlRelationGuid))
                    {
                        // 納品区分
                        if (this.CheckEnabledDeliveredGoodsDiv(row.DtlRelationGuid))
                        {
                            if (row.DeliveredGoodsDivNm == string.Empty)
                            {
                                itemNameList.Add(string.Format("{0}行目の納品区分", rowNo));
                                itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.DeliveredGoodsDivNmColumn.ColumnName));
                                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                insufficiency = true;
                                break;
                            }
                        }
                        // Ｈ納品区分
                        if (this.CheckEnabledFollowDeliGoodsDiv(row.DtlRelationGuid))
                        {
                            if (row.FollowDeliGoodsDivNm == string.Empty)
                            {
                                itemNameList.Add(string.Format("{0}行目のＨ納品区分", rowNo));
                                itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.FollowDeliGoodsDivNmColumn.ColumnName));
                                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                insufficiency = true;
                                break;
                            }
                        }
                        // 指定拠点
                        if (this.CheckEnabledUOEResvdSection(row.DtlRelationGuid))
                        {
                            if (row.UOEResvdSectionNm == string.Empty)
                            {
                                itemNameList.Add(string.Format("{0}行目の指定拠点", rowNo));
                                itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.UOEResvdSectionNmColumn.ColumnName));
                                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                insufficiency = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    // --- ADD 2010/05/04 ---------->>>>>
                    // --- UPD 2010/05/27 ---------->>>>>
                    #region ●倉庫
                    // --- ADD 2013/10/11 T.Miyamoto ------------------------------>>>>>
                    if ((this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaWarehAlloc == (int)SalesSlipInputInitDataAcs.Option.ON) &&
                        (!this._salesSlipInputInitDataAcs.CheckMainSection(this._enterpriseCode, salesSlip.ResultsAddUpSecCd)) &&
                        (!string.IsNullOrEmpty(row.WarehouseCode.Trim())) &&
                        (!this.CheckPriorWarehouse(row.WarehouseCode)))
                    {
                        // 営業所での入力時は本社倉庫・自拠点倉庫以外の入力は不可
                        itemNameList.Add(string.Format("{0}行目の倉庫は入力できません。", rowNo));
                        itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.WarehouseCodeColumn.ColumnName));
                        if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                        dishonestValue = true;
                    } else 
                    // --- ADD 2013/10/11 T.Miyamoto ------------------------------<<<<<
                    //if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpAgentChkDiv == 1)
                    if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpWarehChkDiv == 1)
                    // --- UPD 2010/05/27 ----------<<<<<
                    {
                        GoodsUnitData goodsUnitData = new GoodsUnitData();
                        Stock stock = new Stock();

                        // 商品情報取得
                        //>>>2010/10/01
                        //goodsUnitData = this.GetGoodsUnitDataDic(row.GoodsMakerCd, row.GoodsNo);
                        goodsUnitData = this.GetGoodsUnitDataDic(row.GoodsMakerCd, row.GoodsNo, row);
                        //<<<2010/10/01
                        // 在庫情報取得
                        stock = this.GetStock(goodsUnitData, row.WarehouseCode);

                        if (stock != null)
                        {
                            if (!stock.SectionCode.Trim().Equals(LoginInfoAcquisition.Employee.BelongSectionCode.Trim()))
                            {
                                itemNameList.Add(string.Format("{0}行目の在庫管理拠点とログイン拠点が不一致です。", rowNo)); // ADD 2010/05/18
                                itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.WarehouseCodeColumn.ColumnName));
                                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                //inpWarehChk = true; // DEL 2010/05/18
                                dishonestValue = true;
                            }
                        }
                    }
                    #endregion

                    #region ●数量
                    if (MyOpeCtrl.Disabled((int)OperationCode.CountMinus)
                        && MyOpeCtrl.Enabled((int)OperationCode.CountChange) // ADD 2010/05/21 #7774
                        && salesSlip.InputMode != ctINPUTMODE_SalesSlip_Red && row.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount) // ADD 2010/07/13
                    {
                        //if (row.ShipmentCnt < 0) // DEL 2010/05/18
                        if (row.ShipmentCntDisplay < 0) // ADD 2010/05/18
                        {
                            itemNameList.Add(string.Format("{0}行目の数量がマイナスです。", rowNo)); // ADD 2010/05/18
                            itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.ShipmentCntColumn.ColumnName));
                            if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                            //isCntMinus = true; // DEL 2010/05/18
                            dishonestValue = true;
                        }
                    }
                    #endregion

                    #region ●金額
                    if (MyOpeCtrl.Disabled((int)OperationCode.MoneyMinus)
                        && MyOpeCtrl.Enabled((int)OperationCode.UnitPriceChange) // ADD 2010/05/21 #7774
                         && salesSlip.InputMode != ctINPUTMODE_SalesSlip_Red && row.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount && row.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_RowDiscount) // ADD 2010/07/13
                    {
                        if (row.SalesMoneyDisplay < 0)
                        {
                            itemNameList.Add(string.Format("{0}行目の金額がマイナスです。", rowNo)); // ADD 2010/05/18
                            itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.SalesMoneyDisplayColumn.ColumnName));
                            if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                            //isMoneyMinus = true; // DEL 2010/05/18
                            dishonestValue = true;
                        }
                    }
                    #endregion
                    // --- ADD 2010/05/04 ----------<<<<<

                    // --- ADD 2010/11/25 ---------->>>>>
                    #region ●受注伝票でマイナス金額チェック
                    if (row.AcceptAnOrderCntDisplay != 0 && row.SalesMoneyDisplay < 0)
                    {
                        this._errorMessage = "受注数が入力されていて、" + "\n売上金額がマイナスの明細が含まれています。" + "\n\n受注伝票で売上金額がマイナスとなる入力はできません。";
                    }
                    #endregion

                    #region ●出荷数と売上金額の符号チェック
                    if ((row.ShipmentCntDisplay > 0 && row.SalesMoneyDisplay < 0) ||
                        (row.ShipmentCntDisplay < 0 && row.SalesMoneyDisplay > 0))
                    {
                        if (string.IsNullOrEmpty(this._errorMessage))
                        {
                            this._errorMessage = "出荷数と売上金額の符号が異なる明細が含まれています。" + "\n\n符号が異なる入力はできません。";
                        }
                    }
                    #endregion
                    // --- ADD 2010/11/25 ----------<<<<<

                    #region ●販売区分
                    //>>>2011/05/25
                    switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SalesCdDspDivCd)
                    {
                        case 0: // する
                        case 1: // しない
                            break;
                        case 2: // 必須
                            if (!string.IsNullOrEmpty(row.GoodsName))
                            {
                                if (row.SalesCode == 0)
                                {
                                    itemNameList.Add(string.Format("{0}行目の販売区分", rowNo));
                                    itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.SalesCodeColumn.ColumnName));
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                    break;
                                }
                            }
                            break;
                        default:
                            break;
                    }
                    //<<<2011/05/25
                    #endregion
                }
                // --- ADD 2012/06/26 No.628 Y.Wakita ---------->>>>>
                if (row.EditStatus == ctEDITSTATUS_RowDiscount)
                {
                    #region ●品名(行値引)
                    if ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods)) // 商品or商品外
                    {
                        // --- UPD 2012/07/03 No.628 Y.Wakita ---------->>>>>
                        //if (string.IsNullOrEmpty(row.GoodsName))
                        if (string.IsNullOrEmpty(row.GoodsName.Trim()))
                        // --- UPD 2012/07/03 No.628 Y.Wakita ----------<<<<<
                        {
                            itemNameList.Add(string.Format("{0}行目の品名(行値引)", rowNo));
                            itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.GoodsNameColumn.ColumnName));
                            if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                            insufficiency = true;
                        }
                    }
                    #endregion
                }

                // --- ADD 2012/06/26 No.628 Y.Wakita ----------<<<<<

                // --- ADD 2013/12/18 Y.Wakita ---------->>>>>
                if (this._salesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate)
                {
                    // --- ADD 2013/12/18 Y.Wakita ----------<<<<<
                    // --- ADD 2013/11/05 Y.Wakita ---------->>>>>
                    if ((ScmFlg) || (this._salesSlip.InquiryNumber != 0))
                    {
                        // 商品値引、行値引の場合
                        if ((row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount ||
                             row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount))
                        {
                            // --- ADD 2013/12/18 Y.Wakita ---------->>>>>
                            //this._errorMessage = "値引の明細が含まれています。" + "\n\nSCM得意先で値引の入力はできません。";
                            this._errorMessage = "値引の明細が含まれています。" + "\n\n連携得意先で値引の入力はできません。";
                            // --- ADD 2013/12/18 Y.Wakita ---------->>>>>
                        }
                    }
                    // --- ADD 2013/11/05 Y.Wakita ----------<<<<<
                    // --- ADD 2013/12/18 Y.Wakita ---------->>>>>
                }
                // --- ADD 2013/12/18 Y.Wakita ----------<<<<<

                sumShipmentCnt += (int)row.ShipmentCntDisplay;
                sumAcceptAnOrderCnt += (int)row.AcceptAnOrderCntDisplay;
            }
            // --- UPD 2010/05/18 ---------->>>>>
            // --- UPD 2010/05/04 ---------->>>>>
            if (itemNameList.Count > 0)
            //if (itemNameList.Count > 0 || inpAgentChk || inpWarehChk || isCntMinus || isMoneyMinus)
            // --- UPD 2010/05/04 ----------<<<<<
            // --- UPD 2010/05/18 ----------<<<<<
            {
                if (insufficiency)
                {
                    mainMessage = "未入力の項目";
                }

                if (overFlow)
                {
                    if (!string.IsNullOrEmpty(mainMessage)) mainMessage += "、";
                    mainMessage += "有効桁数を超える項目";
                }

                if (stockCountError)
                {
                    if (!string.IsNullOrEmpty(mainMessage)) mainMessage += "、";
                    mainMessage += "数量が現在庫を上回る行";
                }

                if (dishonestValue)
                {
                    if (!string.IsNullOrEmpty(mainMessage)) mainMessage += "、";
                    mainMessage += "不正な値";
                }
                mainMessage += "が存在するため、登録できません。" + "\r\n" + "\r\n";
                return false;
            }
            else if (sumShipmentCnt > ctMAXVALUE_Count)
            {
                mainMessage = string.Format("出荷数合計が{0:###,##0.00}を超えている為、登録できません。", ctMAXVALUE_Count) + "\r\n" + "\r\n";
                itemNameList.Add("売上明細");
                itemList.Add("SalesDetail");
                return false;
            }
            else if (sumAcceptAnOrderCnt > ctMAXVALUE_Count)
            {
                mainMessage = string.Format("受注数合計が{0:###,##0.00}を超えている為、登録できません。", ctMAXVALUE_Count) + "\r\n" + "\r\n";
                itemNameList.Add("売上明細");
                itemList.Add("SalesDetail");
                return false;
            }
            else if (salesSlip.SalesTotalTaxInc > ctMAXVALUE_SalesMoney)
            {
                mainMessage = string.Format("売上金額合計が{0:###,##0}を超えている為、登録できません。", ctMAXVALUE_SalesMoney) + "\r\n" + "\r\n";
                itemNameList.Add("売上金額");
                itemList.Add("SalesDetail");
                return false;
            }

            // 締次／月次チェック
            if (salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) // 売上
            {
                isAddUp = this.CheckAddUp(this._salesSlip, 0, 0, out retMessage);

                if (isAddUp)
                {
                    itemList.Add("AddUpADate");
                    mainMessage = retMessage;
                    return false;
                }
                if ((salesSlip.SalesSlipNum != ctDefaultSalesSlipNum) && (this._salesSlipDBData != null))
                {
                    isAddUp = this.CheckAddUp(this._salesSlipDBData, 2, 0, out retMessage);

                    if (isAddUp)
                    {
                        itemList.Add("AddUpADate");
                        mainMessage = retMessage;
                        return false;
                    }
                }
                else if ((this._salesSlip.DebitNoteDiv == 1) && (this._salesSlipDBData != null))
                {
                    isAddUp = this.CheckAddUp(this._salesSlipDBData, 3, 0, out retMessage);

                    if (isAddUp)
                    {
                        itemList.Add("AddUpADate");
                        mainMessage = retMessage;
                        return false;
                    }
                }

                if ((this._stockTempDataTable != null) &&
                    (this._stockTempDataTable.Count != 0))
                {
                    if (this.CheckAddUpForStock(this._stockTempDataTable, 0, out retMessage))
                    {
                        itemList.Add("AddUpADate");
                        mainMessage = retMessage;
                        return false;
                    }
                    if (salesSlip.SalesSlipNum != ctDefaultSalesSlipNum)
                    {
                        if (this.CheckAddUpForStock(this._stockTempDataTableForSet, 2, out retMessage))
                        {
                            itemList.Add("AddUpADate");
                            mainMessage = retMessage;
                            return false;
                        }
                    }

                }
            }

            // 取引中止日チェック
            if (!CheckTransStopDate(salesSlip.TransStopDate, salesSlip.SalesDate))
            {
                mainMessage = "取引中止中の為、登録できません。";
                return false;
            }
            // ----- ADD K2011/09/01 --------------------------->>>>>
            // ----- ADD K2011/12/09 --------------------------->>>>>
            // --- UPD T.Miyamoto 2012/11/13 ---------->>>>>
            //if (this._enterpriseCode == login_EnterpriseCode)
            if ((this._salesSlipInputInitDataAcs.Opt_DateCtrl == (int)SalesSlipInputInitDataAcs.Option.ON) ||
                (this._enterpriseCode == login_EnterpriseCode))
            // --- UPD T.Miyamoto 2012/11/13 ----------<<<<<
            {
                #region 売上日付チェック
                if (salesSlip.AcptAnOdrStatus == 30)
                {
                    // ----- DEL K2011/12/09 --------------------------->>>>>
                    //this._iGetServerTime = (IGetServerTime)MediationGetServerTimeDB.GetServerTimeDB();
                    //DateTime serverTime = _iGetServerTime.GetServerNowTime();
                    // ----- DEL K2011/12/09 ---------------------------<<<<<
                    // --- UPD K2021/05/19 陳艶丹 PMKOBETSU-4140 No.34 過去日付の伝票が登録されてしまった対応 ---->>>>>
                    //DateTime serverTime = this._getServerNowTime;// ADD K2011/12/09
                    DateTime serverTime = this.GetServerNowTime;
                    // --- UPD K2021/05/19 陳艶丹 PMKOBETSU-4140 No.34 過去日付の伝票が登録されてしまった対応 ----<<<<<
                    if (_employeeAcs == null)
                    {
                        _employeeAcs = new EmployeeAcs();
                    }
                    Employee employee = new Employee();
                    int status = _employeeAcs.Read(out employee, LoginInfoAcquisition.EnterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);
                    if (employee.AuthorityLevel1 != 99 || employee.AuthorityLevel2 != 99)
                    {
                        if (TDateTime.DateTimeToLongDate(salesSlip.SalesDate) < TDateTime.DateTimeToLongDate(serverTime))
                        {
                            itemList.Add("SalesDate");
                            mainMessage = "当日以前の伝票日付は入力できません。";
                            this.SalesDateErrFlag = true;
                            return false;
                        }
                        else
                        {
                            this.SalesDateErrFlag = false;
                        }
                    }
                }
                #endregion
            }// ADD K2011/12/09 
            // ----- ADD K2011/09/01 ---------------------------<<<<<
            // ----- ADD K2011/08/12 --------------------------->>>>>
            // ----- ADD K2011/12/09 --------------------------->>>>>
            if (this._enterpriseCode == login_EnterpriseCode)
            {
                // ----- ADD K2011/12/09 ---------------------------<<<<<
                // 備考２
                int countNum = 0;
                string comment2 = salesSlip.SlipNote2;
                string PaperId = this.GetSlipPrtSetPaperId(salesSlip);
                if (PaperId != null && (PaperId == "A995" || PaperId == "A998") && (salesSlip.AcptAnOdrStatus == 30))
                {
                    if (string.IsNullOrEmpty(comment2))
                    {
                        itemList.Add("SlipNote2");
                        mainMessage = "ドットを２つ以上入力して下さい。";
                        this.SlipNote2ErrFlag = true;
                        return false;
                    }
                    else
                    {
                        foreach (char car in comment2)
                        {
                            if (car == '.')
                            {
                                ++countNum;
                            }
                        }
                        if (countNum < 2)
                        {
                            itemList.Add("SlipNote2");
                            mainMessage = "ドットを２つ以上入力して下さい。";
                            this.SlipNote2ErrFlag = true;
                            return false;
                        }
                        else
                        {
                            this.SlipNote2ErrFlag = false;
                        }
                    }
                }

            }// ADD K2011/12/09
            // ----- ADD K2011/08/12 ---------------------------<<<<<

            return true;
        }

        // --- ADD 2012/01/05 Redmine#27526 ------------- >>>>>>>>>
        /// <summary>
        /// 保存用データのチェックを行います。
        /// </summary>
        /// <returns>true:保存可 false:保存不可</returns>
        /// <br>Update Note: 2012/01/05 譚洪 </br>
        /// <br>管理番号 :   10707327-00 2012/01/25配信分 </br>
        /// <br>Redmine#27526 売上伝票入力/在庫切れのチェック</br>
        public bool CheckSaveDataForStock()
        {
            string mainMessage = string.Empty;
            List<string> itemNameList = new List<string>();
            List<string> itemList = new List<string>();
            List<int> errorRowNoList = new List<int>();

            this._errorMessage = string.Empty;

            int rowNo = 0;
            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                // 表示現在行取得
                SalesInputDataSet.SalesDetailRow[] rows = this.SelectSalesDetailRows(string.Format("{0}='{1}'", this._salesDetailDataTable.DtlRelationGuidColumn.ColumnName, row.DtlRelationGuid.ToString()), this._salesDetailDataTable);
                rowNo = rows[0].SalesRowNo;

                #region ●出荷数＆受注数
                if (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp)
                {
                    if ((!string.IsNullOrEmpty(row.GoodsName)) && ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods))) // 商品or商品外
                    {
                        #region 在庫切れチェック
                        if ((this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_EstimateAddUp)
                            && (this._salesSlipInputInitDataAcs.GetSalesTtlSt().WarehouseChkDiv == 2))
                        {
                            // 倉庫入力済みで、在庫切れになる場合はエラー
                            if ((!(string.IsNullOrEmpty(row.WarehouseCode.Trim()))) &&
                                ((row.SupplierStock - row.ShipmentCntDisplay) < 0) &&
                                (row.ShipmentCntDisplay != 0))
                            {
                                itemNameList.Add(string.Format("{0}行目の出荷数が在庫数を上回ります。", rowNo));
                                itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName));
                                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                            }

                            // 倉庫入力済みで、在庫切れになる場合はエラー
                            if ((!(string.IsNullOrEmpty(row.WarehouseCode.Trim()))) &&
                                ((row.SupplierStock - row.AcceptAnOrderCntDisplay) < 0) &&
                                (row.AcceptAnOrderCntDisplay != 0))
                            {
                                itemNameList.Add(string.Format("{0}行目の受注数が在庫数を上回ります。", rowNo));
                                itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName));
                                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                            }
                        }
                        #endregion
                    }
                }
                #endregion
            }

            StringBuilder message = new StringBuilder();
            message.Append(mainMessage);

            foreach (string s in itemNameList)
            {
                message.Append(s + "\r\n");
            }

            if (!string.IsNullOrEmpty(message.ToString()))
            {
                TMsgDisp.Show(
                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                "todo",
                message.ToString(),
                0,
                MessageBoxButtons.OK);
            }

            return true;
        }
        // --- ADD 2012/01/05 Redmine#27526 ------------- <<<<<<<<<

        /// <summary>
        /// 保存用データのチェックを行います。（受注データ）
        /// </summary>
        /// <param name="mainMessage">メッセージ</param>
        /// <param name="itemNameList">項目名称リスト</param>
        /// <param name="itemList">項目リスト</param>
        /// <param name="errorRowNoList"></param>
        /// <param name="salesSlip">受注データクラス</param>
        /// <param name="salesDetailDataTable">受注明細データテーブル</param>
        /// <returns>true:保存可 false:保存不可</returns>
        /// <br>Update Note: 2010/05/04 王海立 発行者チェック、入力倉庫チェック処理の追加</br>               
        /// <br>UpdateNote : 2011/11/01 yangmj Redmine#26224 販売区分の対応</br>
        public bool CheckSaveDataForAcptAnOdr(out string mainMessage, out List<string> itemNameList, out List<string> itemList, out List<int> errorRowNoList, SalesSlip salesSlip, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable salesDetailAcceptAnOrderDataTable)
        {
            mainMessage = string.Empty;
            itemNameList = new List<string>();
            itemList = new List<string>();
            errorRowNoList = new List<int>();
            bool insufficiency = false;
            bool overFlow = false;
            bool stockCountError = false;
            bool dishonestValue = false;
            // --- ADD 2010/05/04 ---------->>>>>
            bool inpAgentChk = false;
            bool inpWarehChk = false;
            bool isCntMinus = false;
            bool isMoneyMinus = false;
            // --- ADD 2010/05/04 ----------<<<<<

            this._errorMessage = string.Empty; // ADD 2010/11/25

            // 拠点
            if (string.IsNullOrEmpty(salesSlip.ResultsAddUpSecCd))
            {
                itemNameList.Add("拠点");
                itemList.Add("ResultsAddUpSecCd");
                insufficiency = true;
            }

            // 得意先
            if (salesSlip.CustomerCode == 0)
            {
                itemNameList.Add("得意先");
                itemList.Add("CustomerCode");
                insufficiency = true;
            }

            // 担当者
            // --- UPD 2013/02/23 T.Nishi ---------->>>>>
            //if (string.IsNullOrEmpty(salesSlip.SalesEmployeeCd))
            if (string.IsNullOrEmpty(salesSlip.SalesEmployeeCd.Trim()))
            // --- UPD 2013/02/23 T.Nishi ----------<<<<<
            {
                itemNameList.Add("担当者");
                itemList.Add("SalesEmployeeCd");
                insufficiency = true;
            }

            // 受注者
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().AcpOdrAgentDispDiv == 2)
            {
                if (string.IsNullOrEmpty(salesSlip.FrontEmployeeCd))
                {
                    itemNameList.Add("受注者");
                    itemList.Add("FrontEmployeeCd");
                    insufficiency = true;
                }
            }

            // 発行者
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpAgentDispDiv == 2)
            {
                if (string.IsNullOrEmpty(salesSlip.SalesInputCode))
                {
                    itemNameList.Add("発行者");
                    itemList.Add("SalesInputCode");
                    insufficiency = true;
                }
            }

            // --- ADD 2010/05/04 ---------->>>>>
            // 発行者チェック処理
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpAgentChkDiv == 1)
            {
                if (!string.IsNullOrEmpty(salesSlip.SalesInputCode) && !string.IsNullOrEmpty(LoginInfoAcquisition.Employee.EmployeeCode))
                {
                    //>>>2010/05/27
                    //if (!salesSlip.SalesInputCode.Equals(LoginInfoAcquisition.Employee.EmployeeCode.Trim()))
                    if (!salesSlip.SalesInputCode.Trim().Equals(LoginInfoAcquisition.Employee.EmployeeCode.Trim()))
                    //<<<2010/05/27
                    {
                        itemList.Add("SalesInputCode");
                        inpAgentChk = true;
                        dishonestValue = true;
                    }
                }
            }
            // --- ADD 2010/05/04 ----------<<<<<

            switch ((SalesSlipInputAcs.AcptAnOdrStatusState)salesSlip.AcptAnOdrStatusDisplay)
            {
                case AcptAnOdrStatusState.Estimate:
                case AcptAnOdrStatusState.UnitPriceEstimate:
                    break;
                case AcptAnOdrStatusState.Sales:
                case AcptAnOdrStatusState.Shipment:
                    if (salesSlip.SalesDate == DateTime.MinValue)
                    {
                        itemNameList.Add("売上日");
                        itemList.Add("SalesDate");
                        insufficiency = true;
                    }
                    break;
            }

            int sumShipmentCnt = 0;
            int sumAcceptAnOrderCnt = 0;
            int rowNo = 0;
            foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow row in salesDetailAcceptAnOrderDataTable)
            {
                SalesInputDataSet.StockTempRow stockTempRow = this._stockTempDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);

                // 表示現在行取得
                SalesInputDataSet.SalesDetailAcceptAnOrderRow[] rows = this.SelectSalesDetailAcptAnOdrRows(string.Format("{0}='{1}'", this._salesDetailAcceptAnOrderDataTable.DtlRelationGuidColumn.ColumnName, row.DtlRelationGuid.ToString()), this._salesDetailAcceptAnOrderDataTable);
                if (rows.Length == 0) rows = this.SelectSalesDetailAcptAnOdrRows(string.Format("{0}='{1}'", this._salesDetailAcceptAnOrderDataTableForOrder.DtlRelationGuidColumn.ColumnName, row.DtlRelationGuid.ToString()), this._salesDetailAcceptAnOrderDataTableForOrder);
                if (rows.Length == 0) rows = this.SelectSalesDetailAcptAnOdrRows(string.Format("{0}='{1}'", this._salesDetailAcceptAnOrderDataTableForOrder.DtlRelationGuidColumn.ColumnName, row.DtlRelationGuid.ToString()), this._salesDetailAcceptAnOrderDataTableForAdd);
                rowNo = rows[0].SalesRowNo;

                if ((row.EditStatus != ctEDITSTATUS_Annotation) &&
                    (row.EditStatus != ctEDITSTATUS_RowDiscount))
                {
                    #region ●出荷数＆受注数
                    switch ((SalesSlipInputAcs.AcptAnOdrStatusState)salesSlip.AcptAnOdrStatusDisplay)
                    {
                        case AcptAnOdrStatusState.Estimate:
                        case AcptAnOdrStatusState.UnitPriceEstimate:
                            break;
                        case AcptAnOdrStatusState.Sales:
                        case AcptAnOdrStatusState.Shipment:
                            if ((!string.IsNullOrEmpty(row.GoodsName)) && ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods))) // 商品or商品外
                            {
                                if ((row.ShipmentCntDisplay == 0) && (row.AcceptAnOrderCntDisplay == 0))
                                {
                                    itemNameList.Add(string.Format("{0}行目の出荷数", rowNo));
                                    itemList.Add("SalesDetail.ShipmentCntDisplay");
                                    itemNameList.Add(string.Format("{0}行目の受注数", rowNo));
                                    itemList.Add("SalesDetail.AcceptAnOrderCntDisplay");
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                    break;
                                }
                                if (Math.Abs(row.AcceptAnOrderCntDisplay) > ctMAXVALUE_CountDetail)
                                {
                                    if (salesSlip.SalesSlipCd == 10)
                                    {
                                        itemNameList.Add(string.Format("{0}行目の受注数が{1:###,##0.00}を超えています。", rowNo, ctMAXVALUE_CountDetail));
                                    }
                                    else
                                    {
                                        itemNameList.Add(string.Format("{0}行目の受注数が{1:###,##0}以下になっています。", rowNo, ctMAXVALUE_CountDetail + 0.01));
                                    }

                                    itemList.Add("SalesDetail.AcceptAnOrderCntDisplay");
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    overFlow = true;
                                    break;
                                }

                                bool setInputError;
                                bool showMessage;
                                //if (!this.CheckStockCount(row.WarehouseCode, row.SupplierStock, row.AcceptAnOrderCntDisplay, out setInputError, out showMessage))  // DEL 2016/09/18 Redmine#48851 譚洪
                                if (!this.CheckStockCount(true, row.WarehouseCode, row.SupplierStock, row.AcceptAnOrderCntDisplay, out setInputError, out showMessage))  // ADD 2016/09/18 Redmine#48851 譚洪
                                {
                                    if (setInputError)
                                    {
                                        itemNameList.Add(string.Format("{0}行目の受注数が在庫数を上回っています。", rowNo));
                                        itemList.Add("StockDetail.AcceptAnOrderCntDisplay");
                                        if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                        stockCountError = true;
                                    }
                                }
                            }
                            break;
                        // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                        //// --- ADD 2013/04/11 Y.Wakita ④ ---------->>>>>
                        //case  AcptAnOdrStatusState.AcceptAnOrder:
                        //    if ((!string.IsNullOrEmpty(row.GoodsName)) && ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods))) // 商品or商品外
                        //    {
                        //        if (row.AcceptAnOrderCntDisplay == 0)
                        //        {
                        //            itemNameList.Add(string.Format("{0}行目の受注数", rowNo));
                        //            itemList.Add("SalesDetail.AcceptAnOrderCntDisplay");
                        //            if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                        //            insufficiency = true;
                        //            break;
                        //        }
                        //        if (Math.Abs(row.AcceptAnOrderCntDisplay) > ctMAXVALUE_CountDetail)
                        //        {
                        //            if (salesSlip.SalesSlipCd == 10)
                        //            {
                        //                itemNameList.Add(string.Format("{0}行目の受注数が{1:###,##0.00}を超えています。", rowNo, ctMAXVALUE_CountDetail));
                        //            }
                        //            else
                        //            {
                        //                itemNameList.Add(string.Format("{0}行目の受注数が{1:###,##0}以下になっています。", rowNo, ctMAXVALUE_CountDetail + 0.01));
                        //            }
                        //
                        //            itemList.Add("SalesDetail.AcceptAnOrderCntDisplay");
                        //            if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                        //            overFlow = true;
                        //            break;
                        //        }
                        //
                        //        bool setInputError;
                        //        bool showMessage;
                        //        if (!this.CheckStockCount(row.WarehouseCode, row.SupplierStock, row.AcceptAnOrderCntDisplay, out setInputError, out showMessage))
                        //        {
                        //            if (setInputError)
                        //            {
                        //                itemNameList.Add(string.Format("{0}行目の受注数が在庫数を上回っています。", rowNo));
                        //                itemList.Add("StockDetail.AcceptAnOrderCntDisplay");
                        //                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                        //                stockCountError = true;
                        //            }
                        //        }
                        //    }
                        //    break;
                        //// --- ADD 2013/04/11 Y.Wakita ④ ----------<<<<<
                        // --- DEL 2013/04/18 T.Nishi ----------<<<<<
                    }
                    #endregion

                    #region ●BLコード
                    switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().BLGoodsCdInpDiv)
                    {
                        // 入力任意
                        case 0:
                            break;
                        // 入力必須
                        case 1:
                            if ((!string.IsNullOrEmpty(row.GoodsName)) && ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods))) // 商品or商品外
                            {
                                if (row.BLGoodsCode == 0)
                                {
                                    itemNameList.Add(string.Format("{0}行目のBLコード", rowNo));
                                    itemList.Add("SalesDetail.BLGoodsCode");
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                    break;
                                }
                            }
                            break;
                        default:
                            break;
                    }
                    #endregion

                    #region ●メーカー
                    switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().MakerInpDiv)
                    {
                        // 入力任意
                        case 0:
                            break;
                        // 入力必須
                        case 1:
                            if ((!string.IsNullOrEmpty(row.GoodsName)) && ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods))) // 商品or商品外
                            {
                                if (row.GoodsMakerCd == 0)
                                {
                                    itemNameList.Add(string.Format("{0}行目のメーカー", rowNo));
                                    itemList.Add("SalesDetail.GoodsMakerCd");
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                    break;
                                }
                            }
                            break;
                        default:
                            break;
                    }
                    #endregion

                    #region ●仕入先
                    switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierInpDiv)
                    {
                        // 入力任意
                        case 0:
                            break;
                        // 入力必須
                        case 1:
                            if ((!string.IsNullOrEmpty(row.GoodsName)) && ((row.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (row.SalesGoodsCd == (int)SalesGoodsCd.NonGoods))) // 商品or商品外
                            {
                                if (row.SupplierCd == 0)
                                {
                                    itemNameList.Add(string.Format("{0}行目の仕入先", rowNo));
                                    itemList.Add("SalesDetail.SupplierCd");
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                    break;
                                }
                            }
                            break;
                        default:
                            break;
                    }
                    #endregion

                    #region ●単価
                    // 単価チェック
                    if (Math.Abs(row.SalesUnPrcDisplay) > ctMAXVALUE_SalesUnitPrice)
                    {
                        itemNameList.Add(string.Format("{0}行目の単価が{1:###,##0.00}を超えています。", rowNo, ctMAXVALUE_SalesUnitPrice));
                        if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                        itemList.Add("SalesDetail.ctMAXVALUE_SalesUnitPrice");
                        overFlow = true;
                        break;
                    }
                    #endregion

                    #region ●明細金額
                    // 明細金額チェック
                    if (Math.Abs(row.SalesMoneyDisplay) > ctMAXVALUE_SalesMoneyDetail)
                    {
                        itemNameList.Add(string.Format("{0}行目の金額が{1:###,##0}を超えています。", rowNo, ctMAXVALUE_SalesMoneyDetail));
                        itemList.Add("SalesDetail.ctMAXVALUE_SalesMoneyDetail");
                        if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                        overFlow = true;
                        break;
                    }
                    #endregion

                    #region ●発注情報
                    if (ExistOrderInfo(row.DtlRelationGuid))
                    {
                        // 納品区分
                        if (this.CheckEnabledDeliveredGoodsDiv(row.DtlRelationGuid))
                        {
                            if (row.DeliveredGoodsDivNm == string.Empty)
                            {
                                itemNameList.Add(string.Format("{0}行目の納品区分", rowNo));
                                itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.DeliveredGoodsDivNmColumn.ColumnName));
                                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                insufficiency = true;
                                break;
                            }
                        }
                        // Ｈ納品区分
                        if (this.CheckEnabledFollowDeliGoodsDiv(row.DtlRelationGuid))
                        {
                            if (row.FollowDeliGoodsDivNm == string.Empty)
                            {
                                itemNameList.Add(string.Format("{0}行目のＨ納品区分", rowNo));
                                itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.FollowDeliGoodsDivNmColumn.ColumnName));
                                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                insufficiency = true;
                                break;
                            }
                        }
                        // 指定拠点
                        if (this.CheckEnabledUOEResvdSection(row.DtlRelationGuid))
                        {
                            if (row.UOEResvdSectionNm == string.Empty)
                            {
                                itemNameList.Add(string.Format("{0}行目の指定拠点", rowNo));
                                itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.UOEResvdSectionNmColumn.ColumnName));
                                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                insufficiency = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    // --- ADD 2010/05/04 ---------->>>>>
                    // --- UPD 2010/05/27 ---------->>>>>
                    #region ●倉庫
                    //if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpAgentChkDiv == 1)
                    if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpWarehChkDiv == 1)
                    // --- UPD 2010/05/27 ----------<<<<<
                    {
                        GoodsUnitData goodsUnitData = new GoodsUnitData();
                        Stock stock = new Stock();

                        // 商品情報取得
                        //>>>2010/10/01
                        //goodsUnitData = this.GetGoodsUnitDataDic(row.GoodsMakerCd, row.GoodsNo);
                        SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.NewSalesDetailRow();
                        this.CopySalesDetailFromAcceptAnOrder(row, salesDetailRow); // 受注→売上
                        goodsUnitData = this.GetGoodsUnitDataDic(row.GoodsMakerCd, row.GoodsNo, salesDetailRow);
                        //<<<2010/10/01
                        // 在庫情報取得
                        stock = this.GetStock(goodsUnitData, row.WarehouseCode);

                        if (stock != null)
                        {
                            if (!stock.SectionCode.Trim().Equals(LoginInfoAcquisition.Employee.BelongSectionCode.Trim()))
                            {
                                itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.WarehouseCodeColumn.ColumnName));
                                if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                inpWarehChk = true;
                                dishonestValue = true;
                            }
                        }
                    }
                    #endregion

                    #region ●数量
                    if (MyOpeCtrl.Disabled((int)OperationCode.CountMinus))
                    {
                        if (row.ShipmentCnt < 0)
                        {
                            itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.ShipmentCntColumn.ColumnName));
                            if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                            isCntMinus = true;
                            dishonestValue = true;
                        }
                    }
                    #endregion

                    #region ●金額
                    if (MyOpeCtrl.Disabled((int)OperationCode.MoneyMinus))
                    {
                        if (row.SalesMoneyDisplay < 0)
                        {
                            itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.SalesMoneyDisplayColumn.ColumnName));
                            if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                            isMoneyMinus = true;
                            dishonestValue = true;
                        }
                    }
                    #endregion
                    // --- ADD 2010/05/04 ----------<<<<<

                    // --- ADD 2010/11/25 ---------->>>>>
                    #region ●受注伝票でマイナス金額チェック
                    if (row.AcceptAnOrderCntDisplay != 0 && row.SalesMoneyTaxExc < 0)
                    {
                        this._errorMessage = "受注数が入力されていて、" + "\n売上金額がマイナスの明細が含まれています。" + "\n\n受注伝票で売上金額がマイナスとなる入力はできません。";
                    }
                    #endregion
                    // --- ADD 2010/11/25 ----------<<<<<

                    // --- ADD 2011/11/01 ---------->>>>>
                    #region ●販売区分
                    switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SalesCdDspDivCd)
                    {
                        case 0: // する
                        case 1: // しない
                            break;
                        case 2: // 必須
                            if (!string.IsNullOrEmpty(row.GoodsName))
                            {
                                if (row.SalesCode == 0)
                                {
                                    itemNameList.Add(string.Format("{0}行目の販売区分", rowNo));
                                    itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.SalesCodeColumn.ColumnName));
                                    if (!errorRowNoList.Contains(rowNo)) errorRowNoList.Add(rowNo);
                                    insufficiency = true;
                                    break;
                                }
                            }
                            break;
                        default:
                            break;
                    }
                    #endregion
                    // --- ADD 2011/11/01 ----------<<<<<
                }
                sumShipmentCnt += (int)row.ShipmentCntDisplay;
                sumAcceptAnOrderCnt += (int)row.AcceptAnOrderCntDisplay;
            }

            // --- UPD 2010/05/04 ---------->>>>>
            //if (itemNameList.Count > 0)
            if (itemNameList.Count > 0 || inpAgentChk || inpWarehChk || isCntMinus || isMoneyMinus)
            // --- UPD 2010/05/04 ----------<<<<<
            {
                if (insufficiency)
                {
                    mainMessage = "未入力の項目";
                }

                if (overFlow)
                {
                    if (!string.IsNullOrEmpty(mainMessage)) mainMessage += "、";
                    mainMessage += "有効桁数を超える項目";
                }

                if (stockCountError)
                {
                    if (!string.IsNullOrEmpty(mainMessage)) mainMessage += "、";
                    mainMessage += "数量が現在庫を上回る行";
                }

                if (dishonestValue)
                {
                    if (!string.IsNullOrEmpty(mainMessage)) mainMessage += "、";
                    mainMessage += "不正な値";
                }
                mainMessage += "が存在するため、登録できません。" + "\r\n" + "\r\n";

                // --- ADD 2010/05/04 ---------->>>>>
                if (inpAgentChk)
                {
                    mainMessage += "発行者とログイン担当者が不一致です。" + "\r\n" + "\r\n";
                }
                if (inpWarehChk)
                {
                    mainMessage += rowNo + "行目の在庫管理拠点とログイン拠点が不一致です。" + "\r\n" + "\r\n";
                }
                if (isCntMinus)
                {
                    mainMessage += rowNo + "行目の数量がマイナスです。" + "\r\n" + "\r\n";
                }
                if (isMoneyMinus)
                {
                    mainMessage += rowNo + "行目の金額がマイナスです。" + "\r\n" + "\r\n";
                }
                // --- ADD 2010/05/04 ----------<<<<<

                return false;
            }
            else if (sumAcceptAnOrderCnt > ctMAXVALUE_Count)
            {
                mainMessage = string.Format("受注数合計が{0:###,##0.00}を超えている為、登録できません。", ctMAXVALUE_Count) + "\r\n" + "\r\n";
                itemNameList.Add("売上明細");
                itemList.Add("SalesDetail");
                return false;
            }
            else if (salesSlip.SalesTotalTaxInc > ctMAXVALUE_SalesMoney)
            {
                mainMessage = string.Format("売上金額合計が{0:###,##0}を超えている為、登録できません。", ctMAXVALUE_SalesMoney) + "\r\n" + "\r\n";
                itemNameList.Add("売上金額");
                itemList.Add("SalesDetail");
                return false;
            }

            return true;

        }

        //>>>2010/02/26
        /// <summary>
        /// 保存用データチェックを行います。(SCM)
        /// </summary>
        /// <param name="mainMessage"></param>
        /// <param name="itemNameList"></param>
        /// <param name="itemList"></param>
        /// <param name="errorRowNoList"></param>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="salesDetailDataTable"></param>
        /// <returns></returns>
        /// <br>Update Note: 2011/10/12 yangyi</br>
        /// <br>             ReadMine#25893 保存前の以下のチェック方法を変更する
        public bool CheckSaveDataScm(out string mainMessage, out List<string> itemNameList, out List<string> itemList, out List<int> errorRowNoList, SalesSlip salesSlip, List<SalesDetail> salesDetailList, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            mainMessage = string.Empty;
            itemNameList = new List<string>();
            itemList = new List<string>();
            errorRowNoList = new List<int>();
            //bool insufficiency = false;
            //bool overFlow = false;
            //bool stockCountError = false;
            //bool dishonestValue = false;
            //string retMessage;
            //bool isAddUp;

            //ArrayList carManagementWorkList = null;
            //this.GetCurrentCarManagementWorkList(out carManagementWorkList);
            //if ((carManagementWorkList != null) && (carManagementWorkList.Count > 1))

            // ----- DEL K2011/10/12 --------------------------->>>>>
            //if ((this._carInfoDataTable != null) && (this._carInfoDataTable.Count > 1))
            //{
            //    mainMessage = "複数の車両情報が使用されている為、回答処理できません。";
            //    return false;
            //}
            // ----- DEL K2011/10/12 ---------------------------<<<<<
            // ----- ADD K2011/10/12 --------------------------->>>>>
            ArrayList carRelationList = new ArrayList();
            foreach (SalesDetail detail in salesDetailList)
            {
                //>>>2012/03/05
                //if (!carRelationList.Contains(detail.CarRelationGuid))
                //{
                //    carRelationList.Add(detail.CarRelationGuid);
                //}

                // 行値引きで車両情報がクリア状態の場合、チェック対象外とする
                if ((detail.SalesRowNo != 1) &&
                    (detail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Discount))
                {
                    SalesInputDataSet.CarInfoRow[] carInfoRows =
                        (SalesInputDataSet.CarInfoRow[])this._carInfoDataTable.Select(string.Format("{0}='{1}'",
                        this._carInfoDataTable.CarRelationGuidColumn.ColumnName, detail.CarRelationGuid));

                    if ((carInfoRows != null) && (carInfoRows.Length != 0))
                    {
                        this._carInfoDataTableForCheck = new SalesInputDataSet.CarInfoDataTable();
                        SalesInputDataSet.CarInfoRow clearCarRow = this._carInfoDataTableForCheck.NewCarInfoRow();
                        ArrayList diffList = this.CompareCarInfo(carInfoRows[0], clearCarRow);
                        if ((diffList != null) && (diffList.Count >= 1))
                        {
                            if (!carRelationList.Contains(detail.CarRelationGuid))
                            {
                                carRelationList.Add(detail.CarRelationGuid);
                            }
                        }
                    }
                }
                else
                {
                    if (!carRelationList.Contains(detail.CarRelationGuid))
                    {
                        carRelationList.Add(detail.CarRelationGuid);
                    }
                }
                //<<<2012/03/05

            }
            if ((carRelationList != null) && (carRelationList.Count > 1))
            {
                mainMessage = "複数の車両情報が使用されている為、回答処理できません。";
                return false;
            }
            // ----- ADD K2011/10/12 ---------------------------<<<<<

            //>>>2011/02/01 値引き回答対応
            //if (this.ExistSalesDiscountData())
            //{
            //    mainMessage = "値引き行を含む為、回答処理できません。";
            //    return false;
            //}
            //<<<2011/02/01 値引き回答対応

            // ここ
            //List<SalesDetail> detailList = salesDetailList.FindAll(
            //    delegate(SalesDetail detail)
            //    {
            //        // 新規登録で売上受注同時入力
            //        if ((detail.SalesSlipDtlNumSrc == 0) && (detail.AcptAnOdrStatusSrc != 0))
            //        {
            //            return true;
            //        }
            //        else
            //        {
            //            return false;
            //        }

            //    }
            //);
            //if (detailList.Count != 0)
            //{
            //    mainMessage = "売上と受注の同時入力時は、回答処理できません。";
            //    return false;
            //}


            //foreach (SalesInputDataSet.SalesDetailRow row in salesDetailDataTable)
            //{
            //    if (ExistOrderInfo(row.DtlRelationGuid))
            //    {
            //        mainMessage = "UOE発注入力時は、回答処理できません。";
            //        return false;
            //    }
            //}

            //>>>2011/05/25
            string errmsg1;
            string errmsg2;
            // 指示書番号入力チェック
            if (!CheckInputPartySalesSlipNum(out errmsg1, out errmsg2, salesSlip))
            {
                mainMessage = errmsg1 + "\r\n" + errmsg2;
                return false;
            }
            //<<<2011/05/25

            return true;
        }
        //<<<2010/02/26

        //>>>2011/05/25
        /// <summary>
        /// 指示書番号入力チェック
        /// </summary>
        /// <param name="errmsg1"></param>
        /// <param name="errmsg2"></param>
        /// <param name="salesSlip"></param>
        /// <returns>true:OK false:NG</returns>
        public bool CheckInputPartySalesSlipNum(out string errmsg1, out string errmsg2, SalesSlip salesSlip)
        {
            bool ret = false;
            errmsg1 = string.Empty;
            errmsg2 = string.Empty;
            string targetStr = salesSlip.PartySaleSlipNum;

            switch (this._pmInstNoHdlDivCd)
            {
                // 伝票番号(半角9桁　数値　ゼロ詰め)　→　ただしゼロ詰めじゃない場合は、ゼロ補正する
                case 0:
                    if (CheckNum(targetStr) && CheckHalfWidth(targetStr) && CheckLength(targetStr, 9))
                    {
                        ret = true;
                    }
                    else
                    {
                        ret = false;
                        errmsg1 = "指示書番号の入力内容に誤りがあります。\r\n以下の入力方法に従って下さい。";
                        errmsg2 = "[最大半角9桁　数値のみ]";
                    }
                    break;
                // 受注番号(半角9桁　数値)
                case 1:
                    if (CheckNum(targetStr) && CheckHalfWidth(targetStr) && CheckLength(targetStr, 9))
                    {
                        ret = true;
                    }
                    else
                    {
                        errmsg1 = "指示書番号の入力内容に誤りがあります。\r\n以下の入力方法に従って下さい。";
                        errmsg2 = "[最大半角9桁　数値のみ]";
                    }
                    break;
                // プレート番号(半角4桁　数値)
                case 2:
                    if (CheckNum(targetStr) && CheckHalfWidth(targetStr) && CheckLength(targetStr, 4))
                    {
                        ret = true;
                    }
                    else
                    {
                        errmsg1 = "指示書番号の入力内容に誤りがあります。\r\n以下の入力方法に従って下さい。";
                        errmsg2 = "[最大半角4桁　数値のみ]";
                    }
                    break;
                // 追加情報、検索補助(半角全角12桁　数値、文字)
                case 3:
                case 4:
                    if (CheckLength(targetStr, 12))
                    {
                        ret = true;
                    }
                    else
                    {
                        errmsg1 = "指示書番号の入力内容に誤りがあります。\r\n以下の入力方法に従って下さい。";
                        errmsg2 = "[最大半角/全角12桁　数値、文字可能]";
                    }
                    break;
                default:
                    break;
            }

            return ret;
        }

        /// <summary>
        /// 数値チェック
        /// </summary>
        /// <param name="targetStr"></param>
        /// <returns>true:数値のみ false:文字含む</returns>
        public bool CheckNum(string targetStr)
        {
            if (System.Text.RegularExpressions.Regex.IsMatch(targetStr, @"^[0-9]{0,}$"))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 半角チェック
        /// </summary>
        /// <param name="targetStr"></param>
        /// <returns>true:半角のみ false:全角含む</returns>
        public bool CheckHalfWidth(string targetStr)
        {
            byte[] byte_data = System.Text.Encoding.GetEncoding(932).GetBytes(targetStr);
            if (byte_data.Length == targetStr.Length)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 桁数チェック
        /// </summary>
        /// <param name="targetStr"></param>
        /// <param name="targetLength"></param>
        /// <returns>true:指定桁数以下 false:指定桁数より大きい</returns>
        public bool CheckLength(string targetStr, int targetLength)
        {
            if (targetLength >= targetStr.Length)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        //<<<2011/05/25

        /// <summary>
        /// 伝票印刷が可能かどうかをチェックします。
        /// </summary>
        /// <returns></returns>
        public bool CheckPrintData()
        {
            bool ret = false;

            if ((!string.IsNullOrEmpty(this._salesSlip.SalesSlipNum)) &&
                (this._salesSlip.SalesSlipNum != ctDefaultSalesSlipNum))
            {
                ret = true;
            }

            return ret;
        }

        /// <summary>
        /// 該当する売上伝票が締め済みかどうかをチェックします。
        /// </summary>
        /// <param name="salesSlip">売上伝票オブジェクト</param>
        /// <param name="mode">0:登録時モード 1:呼出時モード</param>
        /// <param name="dateMode">0:請求計上日 1:売上日</param>
        /// <param name="message">メッセージ</param>
        /// <returns>true:締め済み false:未締め</returns>
        public bool CheckAddUp(SalesSlip salesSlip, int mode, int dateMode, out string message)
        {
            message = string.Empty;
            DateTime totalDate;
            switch (dateMode)
            {
                //-----------------------------------------------------------------------------
                // 請求計上日
                //-----------------------------------------------------------------------------
                case 0:
                    if (salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales)
                    {
                        if (salesSlip.AddUpADate != DateTime.MinValue)
                        {
                            bool checkPaymentAddUpHis = this.CheckDmdC(salesSlip.ResultsAddUpSecCd, salesSlip.CustomerCode, salesSlip.AddUpADate, out totalDate);

                            if (checkPaymentAddUpHis)
                            {
                                switch (mode)
                                {
                                    case 0:
                                        message = "計上日が前回請求締日以前になっている為、登録できません。" + Environment.NewLine + Environment.NewLine +
                                                  string.Format("　前回請求締日：{0}", totalDate.ToString("yyyy年MM月dd日")) + Environment.NewLine + Environment.NewLine +
                                                  "※計上日は、請求先より変更が可能です。";
                                        break;
                                    case 1:
                                        message = "計上日が前回請求締日以前になっている為、編集できません。" + Environment.NewLine + Environment.NewLine +
                                                  string.Format("　前回請求締日：{0}", totalDate.ToString("yyyy年MM月dd日")) + Environment.NewLine + Environment.NewLine +
                                                  "※計上日は、請求先より変更が可能です。";
                                        break;
                                    case 2:
                                        message = "修正前の伝票が締次集計処理済みの為、登録できません。" + Environment.NewLine + Environment.NewLine +
                                            string.Format("　修正前計上日 ： {0}", salesSlip.AddUpADate.ToString("yyyy年MM月dd日")) +
                                            string.Format("　前回請求締日 ： {0}", totalDate.ToString("yyyy年MM月dd日"));
                                        break;
                                    case 3:
                                        // ---UPD 2012/06/26 No.636 Y.Wakita ---------->>>>>
                                        //message = "元伝票が締次集計処理済みの為、登録できません。" + Environment.NewLine + Environment.NewLine +
                                        //    string.Format("　元伝票計上日 ： {0}", salesSlip.AddUpADate.ToString("yyyy年MM月dd日")) + Environment.NewLine +
                                        //    string.Format("　前回請求締日 ： {0}", totalDate.ToString("yyyy年MM月dd日"));
                                        //break;
                                        return false;
                                        // --- UPD 2012/06/26 No.636 Y.Wakita ----------<<<<<
                                }
                                return true;
                            }

                            bool checkMonthlyAddUpHis = this.CheckMonthlyAddUpHis(salesSlip.ResultsAddUpSecCd, salesSlip.CustomerCode, salesSlip.AddUpADate, out totalDate);

                            if (checkMonthlyAddUpHis)
                            {
                                switch (mode)
                                {
                                    case 0:
                                        message = "計上日が前回月次更新日以前になっている為、登録できません。" + Environment.NewLine + Environment.NewLine +
                                                  string.Format("　前回月次更新日：{0}", totalDate.ToString("yyyy年MM月dd日")) + Environment.NewLine + Environment.NewLine +
                                                  "※計上日は、請求先より変更が可能です。";
                                        break;
                                    case 1:
                                        message = "計上日が前回月次更新日以前になっている為、編集できません。" + Environment.NewLine + Environment.NewLine +
                                                  string.Format("　前回月次更新日：{0}", totalDate.ToString("yyyy年MM月dd日")) + Environment.NewLine + Environment.NewLine +
                                                  "※計上日は、請求先より変更が可能です。";
                                        break;
                                    case 2:
                                        message = "修正前の伝票が月次更新処理済みの為、登録できません。" + Environment.NewLine + Environment.NewLine +
                                            string.Format("　修正前計上日 　： {0}", salesSlip.AddUpADate.ToString("yyyy年MM月dd日")) + Environment.NewLine +
                                            string.Format("　前回月次更新日 ： {0}", totalDate.ToString("yyyy年MM月dd日"));
                                        break;
                                    case 3:
                                        // ---UPD 2012/06/26 No.636 Y.Wakita ---------->>>>>
                                        //message = "元伝票が月次更新処理済みの為、登録できません。" + Environment.NewLine + Environment.NewLine +
                                        //    string.Format("　元伝票計上日 　： {0}", salesSlip.AddUpADate.ToString("yyyy年MM月dd日")) + Environment.NewLine +
                                        //    string.Format("　前回月次更新日 ： {0}", totalDate.ToString("yyyy年MM月dd日"));
                                        //  break;
                                        return false;
                                        // ---UPD 2012/06/26 No.636 Y.Wakita ---------->>>>>
                                }
                                return true;
                            }
                        }
                    }
                    break;
            }
            return false;
        }

        /// <summary>
        /// 月次更新チェック
        /// </summary>
        /// <param name="sectionCode"></param>
        /// <param name="customerCode"></param>
        /// <param name="targetDate"></param>
        /// <param name="totalDay"></param>
        /// <returns></returns>
        public bool CheckMonthlyAddUpHis(string sectionCode, int customerCode, DateTime targetDate, out DateTime totalDay)
        {
            bool check = false;

            check = this._totalDayCalculator.CheckMonthlyAccRec(sectionCode, customerCode, targetDate, out totalDay);

            return check;
        }

        /// <summary>
        /// 締次更新チェック
        /// </summary>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="targetDate">対象日付</param>
        /// <param name="totalDay">基準日</param>
        /// <returns></returns>
        public bool CheckDmdC(string sectionCode, int customerCode, DateTime targetDate, out DateTime totalDay)
        {
            bool check = false;

            check = this._totalDayCalculator.CheckDmdC(sectionCode, customerCode, targetDate, out totalDay);

            return check;
        }

        /// <summary>
        /// 該当する仕入伝票が締め済みかどうかをチェックします。
        /// </summary>
        /// <param name="stockTempDataTable">仕入情報データテーブルオブジェクト</param>
        /// <param name="mode">0:登録時モード 1:呼出時モード</param>
        /// <param name="message">メッセージ</param>
        /// <returns></returns>
        private bool CheckAddUpForStock(SalesInputDataSet.StockTempDataTable stockTempDataTable, int mode, out string message)
        {
            message = string.Empty;
            foreach (SalesInputDataSet.StockTempRow stockTempRow in stockTempDataTable)
            {
                if (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order) continue; // 発注データは対象外
                if (this.ExistStockTemp(stockTempRow))
                {
                    if (this.CheckAddUpForStock(stockTempRow, mode, out message)) return true;
                }
            }
            return false;
        }

        /// <summary>
        /// 該当する仕入伝票が締め済みかどうかをチェックします。
        /// </summary>
        /// <param name="stockTempRow">仕入情報データテーブル行オブジェクト</param>
        /// <param name="mode">0:登録時モード 1:呼出時モード</param>
        /// <param name="message">メッセージ</param>
        /// <returns>true:締め済み false:未締め</returns>
        private bool CheckAddUpForStock(SalesInputDataSet.StockTempRow stockTempRow, int mode, out string message)
        {
            message = string.Empty;
            if (stockTempRow.SupplierFormal == 0)
            {
                DateTime prevTotalDay;
                if (!this.CheckMonthlyAccPayment(stockTempRow.StockSectionCd, stockTempRow.PayeeCode, stockTempRow.StockAddUpADate, out prevTotalDay))
                {
                    if (mode == 0)
                    {
                        message = "仕入日が前回月次更新日以前になっている為、登録できません。" + Environment.NewLine + Environment.NewLine +
                            string.Format("　前回月次更新日 ： {0}", prevTotalDay.ToString("yyyy年MM月dd日"));
                    }
                    else if (mode == 2)
                    {
                        message = "修正前の仕入伝票が月次更新処理済みの為、登録できません。" + Environment.NewLine + Environment.NewLine +
                            string.Format("　修正前計上日 　： {0}", stockTempRow.StockAddUpADate.ToString("yyyy年MM月dd日")) + Environment.NewLine +
                            string.Format("　前回月次更新日 ： {0}", prevTotalDay.ToString("yyyy年MM月dd日"));
                    }
                    else
                    {
                        message = "仕入日が前回月次更新日以前になっている為、編集できません。" + Environment.NewLine + Environment.NewLine +
                            string.Format("　前回月次更新日 ： {0}", prevTotalDay.ToString("yyyy年MM月dd日"));
                    }
                    return true;
                }

                if (!this.CheckPayment(stockTempRow.StockSectionCd, stockTempRow.PayeeCode, stockTempRow.StockAddUpADate, out prevTotalDay))
                {
                    if (mode == 0)
                    {
                        message = "仕入日が前回支払締日以前になっている為、登録できません。" + Environment.NewLine + Environment.NewLine +
                            string.Format("　前回支払締日 ： {0}", prevTotalDay.ToString("yyyy年MM月dd日"));
                    }
                    else if (mode == 2)
                    {
                        message = "修正前の仕入伝票が締次集計処理済みの為、登録できません。" + Environment.NewLine + Environment.NewLine +
                            string.Format("　修正前計上日 ： {0}", stockTempRow.StockAddUpADate.ToString("yyyy年MM月dd日")) +
                            string.Format("　前回支払締日 ： {0}", prevTotalDay.ToString("yyyy年MM月dd日"));
                    }
                    else
                    {
                        message = "仕入日が前回支払締日以前になっている為、編集できません。" + Environment.NewLine + Environment.NewLine +
                            string.Format("　前回支払締日 ： {0}", prevTotalDay.ToString("yyyy年MM月dd日"));
                    }
                    return true;
                }
            }

            return false;
        }

        // ---ADD 陳永康 2021/05/20 BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応 ------>>>>>
        /// <summary>
        /// 該当する仕入伝票が締め済みかどうかをチェックします。
        /// </summary>
        /// <param name="stockTempDataTable">仕入情報データテーブルオブジェクト</param>
        /// <param name="message">メッセージ</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Note       : 該当する仕入伝票が締め済みかどうかをチェックします。</br>
        /// <br>Programmer : 陳永康</br>
        /// <br>Date       : 2021/05/20</br>
        /// </remarks>
        public int CheckAddUpForStock(SalesInputDataSet.StockTempDataTable stockTempDataTable, out string message)
        {
            message = string.Empty;
            try
            {
                foreach (SalesInputDataSet.StockTempRow stockTempRow in stockTempDataTable)
                {
                    // 発注データは対象外
                    if (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order) continue;
                    // 仕入情報存在の場合
                    if (this.ExistStockTemp(stockTempRow))
                    {
                        if (this.CheckAddUpForStock(stockTempRow, out message)) return (int)CheckResultDivEnum.AddUp;// ---MOD 2021/10/05 田村顕成 BLINCIDENT-2425
                    }
                }
            }
            catch (Exception ex)
            {
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "CheckAddUpForStock", ex.Message);
                message = AbnormalProcessMsg;
                return (int)CheckResultDivEnum.Abnormal;// ---MOD 2021/10/05 田村顕成 BLINCIDENT-2425
            }
            return (int)CheckResultDivEnum.noAddUp;// ---MOD 2021/10/05 田村顕成 BLINCIDENT-2425
        }

        /// <summary>
        /// 該当する仕入伝票が締め済みかどうかをチェックします。
        /// </summary>
        /// <param name="stockTempRow">仕入情報データテーブル行オブジェクト</param>
        /// <param name="message">メッセージ</param>
        /// <returns>true:締め済み false:未締め</returns>
        /// <remarks>
        /// <br>Note       : 該当する仕入伝票が締め済みかどうかをチェックします。</br>
        /// <br>Programmer : 陳永康</br>
        /// <br>Date       : 2021/05/20</br>
        /// </remarks>
        private bool CheckAddUpForStock(SalesInputDataSet.StockTempRow stockTempRow, out string message)
        {
            message = string.Empty;
            if (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock)
            {
                DateTime prevTotalDay;
                // 対象日が仕入月次更新済みの場合
                if (!this.CheckMonthlyAccPayment(stockTempRow.StockSectionCd, stockTempRow.PayeeCode, stockTempRow.StockAddUpADate, out prevTotalDay))
                {
                    message = MonPaymentSupplierDelMsg + Environment.NewLine + Environment.NewLine +
                             string.Format(MonPaymentDateFormatStr, prevTotalDay.ToString(PaymentDateFormat));
                    return true;
                }
                // 対象日が仕入締次更新済み
                if (!this.CheckPayment(stockTempRow.StockSectionCd, stockTempRow.PayeeCode, stockTempRow.StockAddUpADate, out prevTotalDay))
                {
                    message = PaymentSupplierDelMsg + Environment.NewLine + Environment.NewLine +
                            string.Format(PaymentDateFormatStr, prevTotalDay.ToString(PaymentDateFormat));
                    return true;
                }
            }

            return false;
        }
        // ---ADD 陳永康 2021/05/20 BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応 ------<<<<<

        /// <summary>
        /// 対象日が仕入締次更新済みかチェックします。
        /// </summary>
        /// <param name="sectionCd">拠点</param>
        /// <param name="supplierCd">仕入先</param>
        /// <param name="stockAddUpDate">計上日</param>
        /// <param name="prevTotalDay">前回締日</param>
        /// <returns></returns>
        public bool CheckPayment(string sectionCd, int supplierCd, DateTime stockAddUpDate, out DateTime prevTotalDay)
        {
            return !this._totalDayCalculator.CheckPayment(sectionCd, supplierCd, stockAddUpDate, out prevTotalDay);
        }

        /// <summary>
        /// 対象日が仕入月次更新済みかチェックします。
        /// </summary>
        /// <param name="sectionCd">拠点</param>
        /// <param name="supplierCd">支払先</param>
        /// <param name="stockAddUpDate">計上日</param>
        /// <param name="prevTotalDay">前回締日</param>
        /// <returns></returns>
        public bool CheckMonthlyAccPayment(string sectionCd, int supplierCd, DateTime stockAddUpDate, out DateTime prevTotalDay)
        {
            return !this._totalDayCalculator.CheckMonthlyAccPay(sectionCd, supplierCd, stockAddUpDate, out prevTotalDay);
        }

        // --- ADD 2014/05/01 T.Miyamoto 仕掛一覧№2257 ------------------------------>>>>>
        /// <summary>
        /// 削除明細に対して返品されているかチェックを行います。
        /// </summary>
        /// <param name="row">明細データ</param>
        /// <returns>true:あり false:なし</returns>
        private bool CheckDeleteReturn(SalesInputDataSet.SalesDetailRow row)
        {
            List<SalesDetail> findSalesDetailList = this._salesDetailDBDataList.FindAll(
                delegate(SalesDetail detail)
                {
                    if (row.DtlRelationGuid == detail.DtlRelationGuid)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );

            CustomSerializeArrayList salesDetailWorkList = new CustomSerializeArrayList();
            foreach (SalesDetail salesDetail in findSalesDetailList)
            {
                SalesDetailWork salesDetailWork = new SalesDetailWork();
                salesDetailWork = ConvertSalesSlip.ParamDataFromUIData(salesDetail); // 明細情報
                salesDetailWorkList.Add(salesDetailWork);
            }
            object paraObj = (object)salesDetailWorkList;


            bool chkRet = this._iIOWriteControlDB.CheckReturnData(paraObj);

            return chkRet;
        }
        // --- ADD 2014/05/01 T.Miyamoto 仕掛一覧№2257 ------------------------------<<<<<

        /// <summary>
        /// 売上データの削除チェックを行います。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="mainMessage">メインメッセージ（out）</param>
        /// <param name="itemNameList">項目名称リスト（out）</param>
        /// <param name="itemList">項目リスト（out）</param>
        /// <returns>true:削除可 false:削除不可</returns>
        public bool CheckDeleteData(SalesSlip salesSlip, out string mainMessage, out List<string> itemNameList, out List<string> itemList)
        {
            itemList = new List<string>();
            itemNameList = new List<string>();
            mainMessage = string.Empty;
            bool canDelete = true;

            if (canDelete)
            {
                if (salesSlip.DebitNoteDiv == 0) // 黒伝
                {
                    foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
                    {
                        if ((row.EditStatus == ctEDITSTATUS_AllReadOnly) || (row.EditStatus == ctEDITSTATUS_AllDisable))
                        {
                            mainMessage = "編集不可能な明細行が存在する為、削除できません。";
                            canDelete = false;
                            break;
                        }
                        // --- ADD 2014/05/01 T.Miyamoto 仕掛一覧№2257 ------------------------------>>>>>
                        else if (row.AcptAnOdrStatus == (int)AcptAnOdrStatusState.Shipment)
                        {
                            // 貸出伝票は計上されているデータが含まれていても削除可能
                            if (row.AlreadyAddUpCnt != 0)
                            {
                                bool chkRet = CheckDeleteReturn(row); // 削除明細に対して返品されているかチェック
                                if (chkRet)
                                {
                                    //返品されている貸出データの削除は不可
                                    mainMessage = "該当する売上データは「返品」が発生している為、削除できません。";
                                    canDelete = false;
                                    break;
                                }
                            }
                        }
                        // --- ADD 2014/05/01 T.Miyamoto 仕掛一覧№2257 ------------------------------<<<<<
                        // --- ADD 2016/01/21 Y.Wakita ---------->>>>>
                        else if (row.AcptAnOdrStatus == (int)AcptAnOdrStatusState.AcceptAnOrder)
                        {
                            // 受注伝票に計上されているデータが含まれていても削除可能
                            break;
                        }
                        // --- ADD 2016/01/21 Y.Wakita ----------<<<<<
                        else if (row.AlreadyAddUpCnt != 0)
                        {
                            mainMessage = "該当する売上データは「返品」もしくは「計上」が発生している為、削除できません。";
                            canDelete = false;
                            break;
                        }
                    }
                }
                else if (salesSlip.DebitNoteDiv == 1) // 赤伝
                {
                }
                else if (salesSlip.DebitNoteDiv == 2) // 元黒
                {
                    mainMessage = "該当する売上データは「元黒伝票」の為、削除できません。";
                    canDelete = false;
                }
            }

            return canDelete;
        }

        /// <summary>
        /// 在庫切れチェック（在庫管理全体設定の在庫切れ出荷区分を参照)
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="setInputError">入力エラー設定表示有無</param>
        /// <param name="showMessage">警告メッセージ表示有無</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Update Note: 2019/05/16 陳艶丹</br>
        /// <br>管理番号   : 11575089-00</br>
        /// <br>作成内容   : Redmine#49768在庫切れのチェック対応</br>
        /// </remarks>
        public bool CheckStockCountForShipmentCnt(int salesRowNo, out bool setInputError, out bool showMessage)
        {
            setInputError = false;
            showMessage = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row == null) return true;

　　　　　　//----- ADD 2019/05/16 陳艶丹 Redmine#49768在庫切れのチェック対応 ---------->>>>>
            if ((this.SalesSlip.SalesSlipNum != ctDefaultSalesSlipNum) &&   // 売上伝票番号≠"000000000":既存伝票
               (row.SalesSlipDtlNum != 0) &&                                // 売上明細通番≠0:既存明細
               (row.ShipmentCntDisplay <= row.ShipmentCntDefForChk))
            {
                // 修正モードで既存明細の在庫数量を増加しない場合、在庫切れチェックなし
                return true;
            }
            //----- ADD 2019/05/16 陳艶丹 Redmine#49768在庫切れのチェック対応 ----------<<<<<
            // --- UPD 2013/05/15 T.Miyamoto ---------->>>>>
            //return this.CheckStockCount(row.WarehouseCode, row.SupplierStock, row.ShipmentCntDisplay, out setInputError, out showMessage);
            double supplierStock = row.SupplierStock;
            
            //----- UPD 2019/05/16 陳艶丹 Redmine#49768在庫切れのチェック対応 ---------->>>>>
            // 受注計上、計上残区分＝0:残す、 現在庫表示区分＝1:受注分含まないの場合
            if ((this.SalesSlip.SalesSlipNum != ctDefaultSalesSlipNum) &&   // 売上伝票番号≠"000000000":既存伝票
                (row.AcptAnOdrStatusSrc == (int)AcptAnOdrStatusState.AcceptAnOrder) &&
                (this._salesSlipInputInitDataAcs.GetSalesTtlSt().AcpOdrrAddUpRemDiv == 0) && 
                (this._salesSlipInputInitDataAcs.GetStockMngTtlSt().PreStckCntDspDiv == 1))
            {
                supplierStock = row.SupplierStock + row.ShipmentCntDefForChk;
            }
            // 受注計上時は現在庫表示区分＝1:受注分含まないの場合
            else if ((this.SalesSlip.SalesSlipNum == ctDefaultSalesSlipNum) &&   // 売上伝票番号＝＝"000000000"
                (row.AcptAnOdrStatusSrc == (int)AcptAnOdrStatusState.AcceptAnOrder) &&  // 受注計上
                (this._salesSlipInputInitDataAcs.GetStockMngTtlSt().PreStckCntDspDiv == 1)) // 現在庫表示区分＝1:受注分含まないの場合
            {
                supplierStock = row.SupplierStock;
            }
            //if ((row.AcptAnOdrStatusSrc == (int)AcptAnOdrStatusState.Shipment) ||
            //----- UPD 2019/05/16 陳艶丹 Redmine#49768在庫切れのチェック対応 ----------<<<<<
            else if((row.AcptAnOdrStatusSrc == (int)AcptAnOdrStatusState.Shipment) ||
                (row.AcptAnOdrStatusSrc == (int)AcptAnOdrStatusState.AcceptAnOrder))
            {
                supplierStock = row.SupplierStock + row.AddUpEnableCnt;
            }

            //return this.CheckStockCount(row.WarehouseCode, supplierStock, row.ShipmentCntDisplay, out setInputError, out showMessage);  // DEL 2016/09/18 Redmine#48851 譚洪
            return this.CheckStockCount(false, row.WarehouseCode, supplierStock, row.ShipmentCntDisplay, out setInputError, out showMessage);  // ADD 2016/09/18 Redmine#48851 譚洪
            // --- UPD 2013/05/15 T.Miyamoto ----------<<<<<
        }

        /// <summary>
        /// 在庫切れチェック（在庫管理全体設定の在庫切れ出荷区分を参照)
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="setInputError">入力エラー設定表示有無</param>
        /// <param name="showMessage">警告メッセージ表示有無</param>
        /// <returns></returns>
        public bool CheckStockCountForAcceptAnOrderCnt(int salesRowNo, out bool setInputError, out bool showMessage)
        {
            setInputError = false;
            showMessage = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row == null) return true;

            //return this.CheckStockCount(row.WarehouseCode, row.SupplierStock, row.AcceptAnOrderCntDisplay, out setInputError, out showMessage);  // DEL 2016/09/18 Redmine#48851 譚洪
            return this.CheckStockCount(true, row.WarehouseCode, row.SupplierStock, row.AcceptAnOrderCntDisplay, out setInputError, out showMessage);  // ADD 2016/09/18 Redmine#48851 譚洪
        }

        /// <summary>
        /// 在庫切れチェック（在庫管理全体設定の在庫切れ出荷区分を参照)
        /// </summary>
        /// <param name="acptanodrFlag">TRUE:受注数の場合 FALSE:受注数以外の場合</param>
        /// <param name="warehouseCode"></param>
        /// <param name="supplierStock"></param>
        /// <param name="targetCount"></param>
        /// <param name="setInputError"></param>
        /// <param name="showMessage"></param>
        /// <returns></returns>
        /// <br>Update Note: 2016/09/18 譚洪</br>
        /// <br>管理番号   : 11275134-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#48851 売上全体設定の在庫チェック区分が「再入力・警告」で、</br>
        /// <br>           : 且つ、在庫管理全体設定の現在庫表示区分が「受注分含まない」の場合に、売伝にて受注数量を入力しても、在庫チェックがかからないようにするの対応</br>
        //public bool CheckStockCount(string warehouseCode, double supplierStock, double targetCount, out bool setInputError, out bool showMessage)  // DEL 2016/09/18 Redmine#48851 譚洪
        public bool CheckStockCount(bool acptanodrFlag, string warehouseCode, double supplierStock, double targetCount, out bool setInputError, out bool showMessage)  // ADD 2016/09/18 Redmine#48851 譚洪
        {
            bool ret = true;
            setInputError = false;
            showMessage = false;

            if ((this._salesSlip.AcptAnOdrStatusDisplay == (int)AcptAnOdrStatusState.Estimate) ||
                (this._salesSlip.AcptAnOdrStatusDisplay == (int)AcptAnOdrStatusState.UnitPriceEstimate)) return ret;

            if (this._salesSlip.SalesSlipCd == (int)SalesSlipCd.RetGoods) targetCount *= -1;

            // 在庫切れ出荷区分による在庫数チェック
            switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().WarehouseChkDiv)
            {
                // 警告
                case 2:
                    {
                        showMessage = true;
                        break;
                    }
                // 警告+再入力
                case 3:
                    {
                        setInputError = true;
                        showMessage = true;
                        break;
                    }
                // 再入力
                case 1:
                    {
                        setInputError = true;
                        showMessage = true;  // ADD 2012/01/05 Redmine#27526
                        break;
                    }
            }
            if ((setInputError) || (showMessage))
            {
                // DEL 2016/09/18 Redmine#48851 譚洪 ------------------ >>>>
                //// 倉庫入力済みで、在庫切れになる場合はエラー
                //if ((!(string.IsNullOrEmpty(warehouseCode.Trim()))) &&
                //    ((supplierStock - targetCount) < 0) &&
                //    (targetCount != 0))
                //{
                //    ret = false;
                //}
                // DEL 2016/09/18 Redmine#48851 譚洪 ------------------ <<<<
                // ADD 2016/09/18 Redmine#48851 譚洪 ------------------ >>>>
                // 受注数の場合、受注分含む 1:受注分含まないの判断
                if (acptanodrFlag)
                {
                    // 倉庫入力済みで、在庫切れになる場合はエラー
                    if ((!(string.IsNullOrEmpty(warehouseCode.Trim()))) &&
                        (this._salesSlipInputInitDataAcs.GetStockMngTtlSt().PreStckCntDspDiv == 0) && // 0:受注分含む 1:受注分含まない
                        ((supplierStock - targetCount) < 0) &&
                        (targetCount != 0))
                    {
                        ret = false;
                    }
                }
                else
                {
                    // 倉庫入力済みで、在庫切れになる場合はエラー
                    if ((!(string.IsNullOrEmpty(warehouseCode.Trim()))) &&
                        ((supplierStock - targetCount) < 0) &&
                        (targetCount != 0))
                    {
                        ret = false;
                    }
                }
                // ADD 2016/09/18 Redmine#48851 譚洪 ------------------ <<<<
            }

            return ret;
        }

        /// <summary>
        /// 与信額チェック
        /// </summary>
        /// <param name="creditMoney">与信額</param>
        /// <param name="totalMoney">対象額</param>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <returns>0:正常 1:警告 2:中止</returns>
        public int CheckCredit(out long creditMoney, out long totalMoney, SalesSlip salesSlip)
        {
            CustomerChange customerChange;
            CustomerChangeAcs customerChangeAcs = new CustomerChangeAcs();
            int st = customerChangeAcs.Read(out customerChange, this._enterpriseCode, salesSlip.ClaimCode);

            int ret = 0;
            creditMoney = 0;
            totalMoney = 0;

            if ((customerChange != null) &&
                (customerChange.CustomerCode != 0) &&
                (salesSlip.CreditMngCode != 0))
            {
                // 合計金額 + 現在売掛残高
                long salesTotalTaxInc = 0;
                if (salesSlip.SalesSlipNum == ctDefaultSalesSlipNum)
                {
                    salesTotalTaxInc = salesSlip.SalesTotalTaxInc + customerChange.PrsntAccRecBalance;
                }
                else
                {
                    // --- UPD 2013/04/09 Y.Wakita ---------->>>>>
                    //salesTotalTaxInc = customerChange.PrsntAccRecBalance;
                    // 合計金額 + 現在売掛残高 - 合計金額（元） 
                    salesTotalTaxInc = salesSlip.SalesTotalTaxInc + customerChange.PrsntAccRecBalance - this._baseSalesSlip.SalesTotalTaxInc;
                    // --- UPD 2013/04/09 Y.Wakita ----------<<<<<
                }

                totalMoney = salesTotalTaxInc;

                // 与信限度額チェック
                if ((salesTotalTaxInc > customerChange.CreditMoney) &&
                    (customerChange.CreditMoney != 0))
                {
                    creditMoney = customerChange.CreditMoney;
                    ret = 2;
                }
                // 警告与信額チェック
                else if ((salesTotalTaxInc > customerChange.WarningCreditMoney) &&
                         (customerChange.WarningCreditMoney != 0))
                {
                    creditMoney = customerChange.WarningCreditMoney;
                    ret = 1;
                }
            }

            return ret;
        }

        /// <summary>
        /// 取引中止日チェック
        /// </summary>
        /// <param name="transStopDate">取引中止日</param>
        /// <returns>True:取引中 False:取引中止</returns>
        public bool CheckTransStopDate(DateTime transStopDate)
        {
            return this.CheckTransStopDate(transStopDate, DateTime.Today);
        }

        /// <summary>
        /// 取引中止日チェック
        /// </summary>
        /// <param name="transStopDate">取引中止日</param>
        /// <param name="targetDate">対象日</param>
        /// <returns>True:取引中 False:取引中止</returns>
        public bool CheckTransStopDate(DateTime transStopDate, DateTime targetDate)
        {
            bool ret = true;

            if (transStopDate == DateTime.MinValue) return ret;

            if (targetDate >= transStopDate) ret = false;

            return ret;
        }

        /// <summary>
        /// 原単価チェック
        /// </summary>
        /// <param name="stockRowNo">行番号</param>
        /// <param name="checkType">判定タイプ（0:原単価、1:原価率）</param>
        /// <param name="message">エラーメッセージ</param>
        /// <param name="CheckGrossFlag">粗利率チェック(0:チェックなし、1:チェックする)</param>
        /// <returns>判定結果</returns>
        public CheckResult CheckSalesUnitCost(int salesRowNo, int checkType, out string message, int CheckGrossFlag)
        {
            CheckResult checkResult = CheckResult.Ok;

            message = string.Empty;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                // --- UPD 2009/10/19 ---------->>>>>
                double salesUnitCost = row.SalesUnitCost;

                // 判定タイプ：原価率
                if (checkType == 1)
                {
                    double salesUnitCostTaxExc;
                    double salesUnitCostTaxInc;
                    double fracProcUnitUnCst = row.FracProcUnitUnCst; // 端数処理単位(原価単価)
                    int fracProcUnCst = row.FracProcUnCst; // 端数処理区分(原価単価)
                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.UnitCost, ref fracProcUnCst, ref fracProcUnitUnCst, out salesUnitCostTaxInc, out salesUnitCostTaxExc, out salesUnitCost);
                }

                double salesUnPrcTaxExcFl = row.SalesUnPrcTaxExcFl;
                double salesUnPrcTaxIncFl = row.SalesUnPrcTaxIncFl;
                double salesUnPrcDisplay = row.SalesUnPrcDisplay;
                // 売価率が設定されている場合
                if ((row.SalesRate != 0) || (row.CostUpRate != 0) || (row.GrossProfitSecureRate != 0))
                {
                    double fracProcUnitSalUnPrc = row.FracProcUnitSalUnPrc; // 端数処理単位(売上単価)
                    int fracProcSalUnPrc = row.FracProcSalUnPrc; // 端数処理区分(売上単価)

                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.SalesUnitPrice, ref fracProcSalUnPrc, ref fracProcUnitSalUnPrc, out salesUnPrcTaxIncFl, out salesUnPrcTaxExcFl, out salesUnPrcDisplay);
                }

                if (CheckGrossFlag == 0)
                {
                    // 売単価＜原単価チェック
                    string overCheckMsg = string.Empty;
                    CheckResult overCheckRes = this.CheckCostOver(salesUnitCost, row.SalesUnPrcDisplay, row.SalesMoneyInputDiv, out overCheckMsg);

                    // 売単価＜原単価エラー
                    if (overCheckRes == CheckResult.Error)
                    {
                        checkResult = overCheckRes;
                        message = overCheckMsg;
                    }
                    // 売単価＜原単価警告
                    else if (overCheckRes == CheckResult.Warning)
                    {
                        checkResult = overCheckRes;
                        message = overCheckMsg;
                    }
                    else
                    {
                        // 原価金額チェック
                        string priceOvrChkMsg;
                        CheckResult priceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.ShipmentCnt, salesUnitCost, row.TaxationDivCd, MoneyType.Cost, out priceOvrChkMsg);
                        if ((priceOvrChkRes == CheckResult.Error) || (priceOvrChkRes == CheckResult.Warning))
                        {
                            message = priceOvrChkMsg;
                            return priceOvrChkRes;
                        }

                        // --- UPD 2010/09/06 ---------->>>>
                        // 粗利率チェック
                        string grossProfitRateMsg;
                        //CheckResult grossProfitRateChkRes = this.CheckGrossProfitRate(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, salesUnitCost, row.TaxationDivCd, out grossProfitRateMsg, false); //del 2012/01/18 liusy #26917 ソースマージ
                        CheckResult grossProfitRateChkRes = this.CheckGrossProfitRate(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, salesUnitCost, row.TaxationDivCd, out grossProfitRateMsg); //add 2012/01/18 liusy #26917 ソースマージ
                        if ((grossProfitRateChkRes == CheckResult.Error) || (grossProfitRateChkRes == CheckResult.Warning))
                        {
                            message = grossProfitRateMsg;
                            return grossProfitRateChkRes;
                        }
                    }
                }
                else
                {
                    // 粗利率チェック
                    //string grossProfitRateMsg;
                    //CheckResult grossProfitRateChkRes = this.CheckGrossProfitRate(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, salesUnitCost, row.TaxationDivCd, out grossProfitRateMsg);
                    //if ((grossProfitRateChkRes == CheckResult.Error) || (grossProfitRateChkRes == CheckResult.Warning))
                    //{
                    //    message = grossProfitRateMsg;
                    //    return grossProfitRateChkRes;
                    //}
                    // --- UPD 2010/09/06 ----------<<<<
                }
                // --- UPD 2009/10/19 ----------<<<<<
            }

            return checkResult;
        }

        /// <summary>
        /// 売単価チェック
        /// </summary>
        /// <param name="stockRowNo">行番号</param>
        /// <param name="checkType">判定タイプ（0:売単価、1:売価率）</param>
        /// <param name="message">エラーメッセージ</param>
        /// <returns>判定結果</returns>
        public CheckResult CheckSalesUnitPrice(int salesRowNo, int checkType, out string message)
        {
            CheckResult checkResult = CheckResult.Ok;

            message = string.Empty;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                // --- UPD 2009/10/19 ---------->>>>>
                double salesUnPrcDisplay = row.SalesUnPrcDisplay;

                double salesUnitCostTaxExc = row.SalesUnitCostTaxExc;
                double salesUnitCostTaxInc = row.SalesUnitCostTaxInc;
                double salesUnitCost = row.SalesUnitCost;
                // 原価率が設定されている場合
                if (row.CostRate != 0)
                {
                    double fracProcUnitUnCst = row.FracProcUnitUnCst; // 端数処理単位(原価単価)
                    int fracProcUnCst = row.FracProcUnCst; // 端数処理区分(原価単価)
                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.UnitCost, ref fracProcUnCst, ref fracProcUnitUnCst, out salesUnitCostTaxInc, out salesUnitCostTaxExc, out salesUnitCost);
                }

                // 判定タイプ：売価率
                if (checkType == 1)
                {
                    double salesUnPrcTaxExcFl;
                    double salesUnPrcTaxIncFl;
                    double fracProcUnitSalUnPrc = row.FracProcUnitSalUnPrc; // 端数処理単位(売上単価)
                    int fracProcSalUnPrc = row.FracProcSalUnPrc; // 端数処理区分(売上単価)

                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.SalesUnitPrice, ref fracProcSalUnPrc, ref fracProcUnitSalUnPrc, out salesUnPrcTaxIncFl, out salesUnPrcTaxExcFl, out salesUnPrcDisplay);
                }

                // 売単価＜原単価チェック
                string overCheckMsg = string.Empty;
                CheckResult overCheckRes = this.CheckCostOver(row.SalesUnitCost, salesUnPrcDisplay, row.SalesMoneyInputDiv, out overCheckMsg);

                // 売単価＜原単価エラー
                if (overCheckRes == CheckResult.Error)
                {
                    checkResult = overCheckRes;
                    message = overCheckMsg;
                }
                // 売単価＜原単価警告
                else if (overCheckRes == CheckResult.Warning)
                {
                    checkResult = overCheckRes;
                    message = overCheckMsg;
                }
                else
                {
                    // 売上金額チェック
                    string priceOvrChkMsg;
                    CheckResult priceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, row.TaxationDivCd, MoneyType.SalesMoney, out priceOvrChkMsg);
                    if ((priceOvrChkRes == CheckResult.Error) || (priceOvrChkRes == CheckResult.Warning))
                    {
                        message = priceOvrChkMsg;
                        return priceOvrChkRes;
                    }

                    //// 粗利率チェック
                    //string grossProfitRateMsg;
                    //CheckResult grossProfitRateChkRes = this.CheckGrossProfitRate(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, salesUnitCost, row.TaxationDivCd, out grossProfitRateMsg);
                    //if ((grossProfitRateChkRes == CheckResult.Error) || (grossProfitRateChkRes == CheckResult.Warning))
                    //{
                    //    message = grossProfitRateMsg;
                    //    return grossProfitRateChkRes;
                    //}
                }

                // --- UPD 2009/10/19 ----------<<<<<
            }
            return checkResult;
        }

        /// <summary>
        /// 原単価チェック
        /// </summary>
        /// <param name="stockRowNo">行番号</param>
        /// <param name="checkType">判定タイプ（0:原単価、1:原価率）</param>
        /// <param name="message">エラーメッセージ</param>
        /// <param name="CheckGrossFlag">粗利率チェック(0:チェックなし、1:チェックする)</param>
        /// <returns>判定結果</returns>
        //public int CheckSalesUnitCost1(int salesRowNo, int checkType, out string message, int CheckGrossFlag, bool F10Flag) //del 2012/01/18 liusy #26917 ソースマージ
        public int CheckSalesUnitCost1(int salesRowNo, int checkType, out string message, int CheckGrossFlag) //add 2012/01/18 liusy #26917 ソースマージ
        {
            int checkResult = 0;

            message = string.Empty;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                // --- UPD 2009/10/19 ---------->>>>>
                double salesUnitCost = row.SalesUnitCost;

                // 判定タイプ：原価率
                if (checkType == 1)
                {
                    double salesUnitCostTaxExc;
                    double salesUnitCostTaxInc;
                    double fracProcUnitUnCst = row.FracProcUnitUnCst; // 端数処理単位(原価単価)
                    int fracProcUnCst = row.FracProcUnCst; // 端数処理区分(原価単価)
                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.UnitCost, ref fracProcUnCst, ref fracProcUnitUnCst, out salesUnitCostTaxInc, out salesUnitCostTaxExc, out salesUnitCost);
                }

                double salesUnPrcTaxExcFl = row.SalesUnPrcTaxExcFl;
                double salesUnPrcTaxIncFl = row.SalesUnPrcTaxIncFl;
                double salesUnPrcDisplay = row.SalesUnPrcDisplay;
                // 売価率が設定されている場合
                if ((row.SalesRate != 0) || (row.CostUpRate != 0) || (row.GrossProfitSecureRate != 0))
                {
                    double fracProcUnitSalUnPrc = row.FracProcUnitSalUnPrc; // 端数処理単位(売上単価)
                    int fracProcSalUnPrc = row.FracProcSalUnPrc; // 端数処理区分(売上単価)

                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.SalesUnitPrice, ref fracProcSalUnPrc, ref fracProcUnitSalUnPrc, out salesUnPrcTaxIncFl, out salesUnPrcTaxExcFl, out salesUnPrcDisplay);
                }

                if (CheckGrossFlag == 0)
                {
                    // UPD 2010/09/14 --- >>>>
                    if (!this._homeKeyFlg)
                    {
                        // 売単価＜原単価チェック
                        string overCheckMsg = string.Empty;
                        CheckResult overCheckRes = this.CheckCostOver(salesUnitCost, row.SalesUnPrcDisplay, row.SalesMoneyInputDiv, out overCheckMsg);

                        // 売単価＜原単価エラー
                        if (overCheckRes == CheckResult.Error)
                        {
                            checkResult = 3;
                            message = overCheckMsg;
                        }
                        // 売単価＜原単価警告
                        else if (overCheckRes == CheckResult.Warning)
                        {
                            checkResult = 2;
                            message = overCheckMsg;
                        }
                        else
                        {
                            // 原価金額チェック
                            string priceOvrChkMsg;
                            CheckResult priceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.ShipmentCnt, salesUnitCost, row.TaxationDivCd, MoneyType.Cost, out priceOvrChkMsg);
                            if (priceOvrChkRes == CheckResult.Error)
                            {
                                message = priceOvrChkMsg;
                                return 1;
                            }
                            else if (priceOvrChkRes == CheckResult.Warning)
                            {
                                message = priceOvrChkMsg;
                                return 2;
                            }

                            // --- UPD 2010/09/06 ---------->>>>
                            // 粗利率チェック
                            string grossProfitRateMsg;
                            //CheckResult grossProfitRateChkRes = this.CheckGrossProfitRate(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, salesUnitCost, row.TaxationDivCd, out grossProfitRateMsg, F10Flag); //del 2012/01/18 liusy #26917 ソースマージ
                            CheckResult grossProfitRateChkRes = this.CheckGrossProfitRate(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, salesUnitCost, row.TaxationDivCd, out grossProfitRateMsg); //add 2012/01/18 liusy #26917 ソースマージ
                            //del by  liusy 2012/01/18 #26917 ソースマージ----->>>>>>
                            /*
                            //add 2011/12/01 liusy Redmine#8379  ----->>>>>>
                            if (F10Flag && grossProfitRateChkRes == CheckResult.Error)
                            {
                                message = grossProfitRateMsg;
                                return 9;
                            }
                            //else if (F10Flag && grossProfitRateChkRes == CheckResult.Warning)  // del by liusy #26917
                            else if (grossProfitRateChkRes == CheckResult.Warning)               // add by liusy #26917
                            {
                                message = grossProfitRateMsg;
                                return 8;
                            }
                            // add 2011/12/01 liusy Redmine#8379 -----<<<<<<
                            */
                            //del by  liusy 2012/01/18 #26917 ソースマージ-----<<<<<<
                            if (grossProfitRateChkRes == CheckResult.Error)
                            {
                                message = grossProfitRateMsg;
                                return 1;
                            }
                            else if (grossProfitRateChkRes == CheckResult.Warning)
                            {
                                message = grossProfitRateMsg;
                                return 2;
                            }
                        }
                    }
                    else
                    {

                    }
                    // UPD 2010/09/14 --- <<<<
                }
                else
                {
                    // 粗利率チェック
                    //string grossProfitRateMsg;
                    //CheckResult grossProfitRateChkRes = this.CheckGrossProfitRate(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, salesUnitCost, row.TaxationDivCd, out grossProfitRateMsg);
                    //if ((grossProfitRateChkRes == CheckResult.Error) || (grossProfitRateChkRes == CheckResult.Warning))
                    //{
                    //    message = grossProfitRateMsg;
                    //    return grossProfitRateChkRes;
                    //}
                    // --- UPD 2010/09/06 ----------<<<<
                }
                // --- UPD 2009/10/19 ----------<<<<<
            }

            return checkResult;
        }

        /// <summary>
        /// 原単価チェック
        /// </summary>
        /// <param name="stockRowNo">行番号</param>
        /// <param name="checkType">判定タイプ（0:原単価、1:原価率）</param>
        /// <param name="message">エラーメッセージ</param>
        /// <param name="CheckGrossFlag">粗利率チェック(0:チェックなし、1:チェックする)</param>
        /// <returns>判定結果</returns>
        public int CheckSalesUnitCost2(int salesRowNo, int checkType, out string message, int CheckGrossFlag) //add 2012/01/18 liusy #26917 ソースマージ
        {
            int checkResult = 0;

            message = string.Empty;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                // --- UPD 2009/10/19 ---------->>>>>
                double salesUnitCost = row.SalesUnitCost;

                // 判定タイプ：原価率
                if (checkType == 1)
                {
                    double salesUnitCostTaxExc;
                    double salesUnitCostTaxInc;
                    double fracProcUnitUnCst = row.FracProcUnitUnCst; // 端数処理単位(原価単価)
                    int fracProcUnCst = row.FracProcUnCst; // 端数処理区分(原価単価)
                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.UnitCost, ref fracProcUnCst, ref fracProcUnitUnCst, out salesUnitCostTaxInc, out salesUnitCostTaxExc, out salesUnitCost);
                }

                double salesUnPrcTaxExcFl = row.SalesUnPrcTaxExcFl;
                double salesUnPrcTaxIncFl = row.SalesUnPrcTaxIncFl;
                double salesUnPrcDisplay = row.SalesUnPrcDisplay;
                // 売価率が設定されている場合
                if ((row.SalesRate != 0) || (row.CostUpRate != 0) || (row.GrossProfitSecureRate != 0))
                {
                    double fracProcUnitSalUnPrc = row.FracProcUnitSalUnPrc; // 端数処理単位(売上単価)
                    int fracProcSalUnPrc = row.FracProcSalUnPrc; // 端数処理区分(売上単価)

                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.SalesUnitPrice, ref fracProcSalUnPrc, ref fracProcUnitSalUnPrc, out salesUnPrcTaxIncFl, out salesUnPrcTaxExcFl, out salesUnPrcDisplay);
                }

                if (CheckGrossFlag == 0)
                {
                    // UPD 2010/09/14 --- >>>>
                    if (!this._homeKeyFlg)
                    {
                        // 売単価＜原単価チェック
                        string overCheckMsg = string.Empty;
                        CheckResult overCheckRes = this.CheckCostOver(salesUnitCost, row.SalesUnPrcDisplay, row.SalesMoneyInputDiv, out overCheckMsg);

                        // 売単価＜原単価エラー
                        if (overCheckRes == CheckResult.Error)
                        {
                            checkResult = 3;
                            message = overCheckMsg;
                        }
                        // 売単価＜原単価警告
                        else if (overCheckRes == CheckResult.Warning)
                        {
                            checkResult = 2;
                            message = overCheckMsg;
                        }
                        else
                        {
                            // 原価金額チェック
                            string priceOvrChkMsg;
                            CheckResult priceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.ShipmentCnt, salesUnitCost, row.TaxationDivCd, MoneyType.Cost, out priceOvrChkMsg);
                            if (priceOvrChkRes == CheckResult.Error)
                            {
                                message = priceOvrChkMsg;
                                return 1;
                            }
                            else if (priceOvrChkRes == CheckResult.Warning)
                            {
                                message = priceOvrChkMsg;
                                return 2;
                            }

                            // --- UPD 2010/09/06 ---------->>>>
                            // 粗利率チェック
                            string grossProfitRateMsg;
                            //CheckResult grossProfitRateChkRes = this.CheckGrossProfitRate(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, salesUnitCost, row.TaxationDivCd, out grossProfitRateMsg, F10Flag); //del 2012/01/18 liusy #26917 ソースマージ
                            CheckResult grossProfitRateChkRes = this.CheckGrossProfitRate(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, salesUnitCost, row.TaxationDivCd, out grossProfitRateMsg); //add 2012/01/18 liusy #26917 ソースマージ
                            //del by  liusy 2012/01/18 #26917 ソースマージ----->>>>>>
                            /*
                            //add 2011/12/01 liusy Redmine#8379  ----->>>>>>
                            if (F10Flag && grossProfitRateChkRes == CheckResult.Error)
                            {
                                message = grossProfitRateMsg;
                                return 9;
                            }
                            //else if (F10Flag && grossProfitRateChkRes == CheckResult.Warning)  // del by liusy #26917
                            else if (grossProfitRateChkRes == CheckResult.Warning)               // add by liusy #26917
                            {
                                message = grossProfitRateMsg;
                                return 8;
                            }
                            // add 2011/12/01 liusy Redmine#8379 -----<<<<<<
                            */
                            //del by  liusy 2012/01/18 #26917 ソースマージ-----<<<<<<
                            if (grossProfitRateChkRes == CheckResult.Error)
                            {
                                message = grossProfitRateMsg;
                                return 1;
                            }
                            else if (grossProfitRateChkRes == CheckResult.Warning)
                            {
                                message = grossProfitRateMsg;
                                return 2;
                            }
                        }
                    }
                    else
                    {

                    }
                }
                else
                {
                }
            }

            return checkResult;
        }

        /// <summary>
        /// 売単価チェック
        /// </summary>
        /// <param name="stockRowNo">行番号</param>
        /// <param name="checkType">判定タイプ（0:売単価、1:売価率）</param>
        /// <param name="message">エラーメッセージ</param>
        /// <returns>判定結果</returns>
        public int CheckSalesUnitPrice1(int salesRowNo, int checkType, out string message)
        {
            int checkResult = 0;

            message = string.Empty;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                // --- UPD 2009/10/19 ---------->>>>>
                double salesUnPrcDisplay = row.SalesUnPrcDisplay;

                double salesUnitCostTaxExc = row.SalesUnitCostTaxExc;
                double salesUnitCostTaxInc = row.SalesUnitCostTaxInc;
                double salesUnitCost = row.SalesUnitCost;
                // 原価率が設定されている場合
                if (row.CostRate != 0)
                {
                    double fracProcUnitUnCst = row.FracProcUnitUnCst; // 端数処理単位(原価単価)
                    int fracProcUnCst = row.FracProcUnCst; // 端数処理区分(原価単価)
                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.UnitCost, ref fracProcUnCst, ref fracProcUnitUnCst, out salesUnitCostTaxInc, out salesUnitCostTaxExc, out salesUnitCost);
                }

                // 判定タイプ：売価率
                if (checkType == 1)
                {
                    double salesUnPrcTaxExcFl;
                    double salesUnPrcTaxIncFl;
                    double fracProcUnitSalUnPrc = row.FracProcUnitSalUnPrc; // 端数処理単位(売上単価)
                    int fracProcSalUnPrc = row.FracProcSalUnPrc; // 端数処理区分(売上単価)

                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.SalesUnitPrice, ref fracProcSalUnPrc, ref fracProcUnitSalUnPrc, out salesUnPrcTaxIncFl, out salesUnPrcTaxExcFl, out salesUnPrcDisplay);
                }

                // UPD 2010/09/14 --- >>>>
                if (!this._homeKeyFlg)
                {
                    // 売単価＜原単価チェック
                    string overCheckMsg = string.Empty;
                    CheckResult overCheckRes = this.CheckCostOver(row.SalesUnitCost, salesUnPrcDisplay, row.SalesMoneyInputDiv, out overCheckMsg);

                    // 売単価＜原単価エラー
                    if (overCheckRes == CheckResult.Error)
                    {
                        checkResult = 3;
                        message = overCheckMsg;
                    }
                    // 売単価＜原単価警告
                    else if (overCheckRes == CheckResult.Warning)
                    {
                        checkResult = 2;
                        message = overCheckMsg;
                    }
                    else
                    {
                        // 売上金額チェック
                        string priceOvrChkMsg;
                        CheckResult priceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, row.TaxationDivCd, MoneyType.SalesMoney, out priceOvrChkMsg);
                        if (priceOvrChkRes == CheckResult.Error)
                        {
                            message = priceOvrChkMsg;
                            return 1;
                        }
                        else if (priceOvrChkRes == CheckResult.Warning)
                        {
                            message = priceOvrChkMsg;
                            return 2;
                        }
                    }
                }
                else
                {

                }
                // UPD 2010/09/14 --- <<<<
            }
            return checkResult;
        }

        /// <summary>
        /// 定価チェック
        /// </summary>
        /// <param name="stockRowNo">行番号</param>
        /// <param name="message">エラーメッセージ</param>
        /// <returns>判定結果</returns>
        public int CheckListPrice1(int salesRowNo, out string message)
        {
            int checkResult = 0;

            message = string.Empty;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                double salesUnitCostTaxExc = row.SalesUnitCostTaxExc;
                double salesUnitCostTaxInc = row.SalesUnitCostTaxInc;
                double salesUnitCost = row.SalesUnitCost;
                // 原価率が設定されている場合
                if (row.CostRate != 0)
                {
                    double fracProcUnitUnCst = row.FracProcUnitUnCst; // 端数処理単位(原価単価)
                    int fracProcUnCst = row.FracProcUnCst; // 端数処理区分(原価単価)
                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.UnitCost, ref fracProcUnCst, ref fracProcUnitUnCst, out salesUnitCostTaxInc, out salesUnitCostTaxExc, out salesUnitCost);
                }

                double salesUnPrcTaxExcFl = row.SalesUnPrcTaxExcFl;
                double salesUnPrcTaxIncFl = row.SalesUnPrcTaxIncFl;
                double salesUnPrcDisplay = row.SalesUnPrcDisplay;
                // 売価率が設定されている場合
                if ((row.SalesRate != 0) || (row.CostUpRate != 0) || (row.GrossProfitSecureRate != 0))
                {
                    double fracProcUnitSalUnPrc = row.FracProcUnitSalUnPrc; // 端数処理単位(売上単価)
                    int fracProcSalUnPrc = row.FracProcSalUnPrc; // 端数処理区分(売上単価)
                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.SalesUnitPrice, ref fracProcSalUnPrc, ref fracProcUnitSalUnPrc, out salesUnPrcTaxIncFl, out salesUnPrcTaxExcFl, out salesUnPrcDisplay);
                }

                // UPD 2010/09/14 --- >>>>
                if (!this._homeKeyFlg)
                {

                    // 売単価＜原単価チェック
                    string overCheckMsg = string.Empty;
                    CheckResult overCheckRes = this.CheckCostOver(salesUnitCost, salesUnPrcDisplay, row.SalesMoneyInputDiv, out overCheckMsg);

                    // 売単価＜原単価エラー
                    if (overCheckRes == CheckResult.Error)
                    {
                        checkResult = 3;
                        message = overCheckMsg;
                    }
                    // 売単価＜原単価警告
                    else if (overCheckRes == CheckResult.Warning)
                    {
                        checkResult = 2;
                        message = overCheckMsg;
                    }
                    else
                    {
                        // 売上金額チェック
                        string salesPriceOvrChkMsg;
                        CheckResult salesPriceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, row.TaxationDivCd, MoneyType.SalesMoney, out salesPriceOvrChkMsg);
                        if (salesPriceOvrChkRes == CheckResult.Error)
                        {
                            message = salesPriceOvrChkMsg;
                            return 1;
                        }
                        else if (salesPriceOvrChkRes == CheckResult.Warning)
                        {
                            message = salesPriceOvrChkMsg;
                            return 2;
                        }


                        // 原価金額チェック
                        string costPriceOvrChkMsg;
                        CheckResult costPriceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.ShipmentCnt, salesUnitCost, row.TaxationDivCd, MoneyType.Cost, out costPriceOvrChkMsg);
                        if (costPriceOvrChkRes == CheckResult.Error)
                        {
                            message = costPriceOvrChkMsg;
                            return 1;
                        }
                        else if (costPriceOvrChkRes == CheckResult.Warning)
                        {
                            message = costPriceOvrChkMsg;
                            return 2;
                        }
                    }
                }
                else
                {

                }
                // UPD 2010/09/14 --- <<<<
            }

            return checkResult;
        }

        /// <summary>
        /// 定価チェック
        /// </summary>
        /// <param name="stockRowNo">行番号</param>
        /// <param name="message">エラーメッセージ</param>
        /// <returns>判定結果</returns>
        public CheckResult CheckListPrice(int salesRowNo, out string message)
        {
            CheckResult checkResult = CheckResult.Ok;

            message = string.Empty;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                // --- UPD 2009/10/19 ---------->>>>>
                double salesUnitCostTaxExc = row.SalesUnitCostTaxExc;
                double salesUnitCostTaxInc = row.SalesUnitCostTaxInc;
                double salesUnitCost = row.SalesUnitCost;
                // 原価率が設定されている場合
                if (row.CostRate != 0)
                {
                    double fracProcUnitUnCst = row.FracProcUnitUnCst; // 端数処理単位(原価単価)
                    int fracProcUnCst = row.FracProcUnCst; // 端数処理区分(原価単価)
                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.UnitCost, ref fracProcUnCst, ref fracProcUnitUnCst, out salesUnitCostTaxInc, out salesUnitCostTaxExc, out salesUnitCost);
                }

                double salesUnPrcTaxExcFl = row.SalesUnPrcTaxExcFl;
                double salesUnPrcTaxIncFl = row.SalesUnPrcTaxIncFl;
                double salesUnPrcDisplay = row.SalesUnPrcDisplay;
                // 売価率が設定されている場合
                if ((row.SalesRate != 0) || (row.CostUpRate != 0) || (row.GrossProfitSecureRate != 0))
                {
                    double fracProcUnitSalUnPrc = row.FracProcUnitSalUnPrc; // 端数処理単位(売上単価)
                    int fracProcSalUnPrc = row.FracProcSalUnPrc; // 端数処理区分(売上単価)
                    this.CalculateUnitPriceByRate(row, UnitPriceCalculation.UnitPriceKind.SalesUnitPrice, ref fracProcSalUnPrc, ref fracProcUnitSalUnPrc, out salesUnPrcTaxIncFl, out salesUnPrcTaxExcFl, out salesUnPrcDisplay);
                }

                // 売単価＜原単価チェック
                string overCheckMsg = string.Empty;
                CheckResult overCheckRes = this.CheckCostOver(salesUnitCost, salesUnPrcDisplay, row.SalesMoneyInputDiv, out overCheckMsg);

                // 売単価＜原単価エラー
                if (overCheckRes == CheckResult.Error)
                {
                    checkResult = overCheckRes;
                    message = overCheckMsg;
                }
                // 売単価＜原単価警告
                else if (overCheckRes == CheckResult.Warning)
                {
                    checkResult = overCheckRes;
                    message = overCheckMsg;
                }
                else
                {
                    // 売上金額チェック
                    string salesPriceOvrChkMsg;
                    CheckResult salesPriceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, row.TaxationDivCd, MoneyType.SalesMoney, out salesPriceOvrChkMsg);
                    if ((salesPriceOvrChkRes == CheckResult.Error) || (salesPriceOvrChkRes == CheckResult.Warning))
                    {
                        message = salesPriceOvrChkMsg;
                        return salesPriceOvrChkRes;
                    }

                    // 原価金額チェック
                    string costPriceOvrChkMsg;
                    CheckResult costPriceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.ShipmentCnt, salesUnitCost, row.TaxationDivCd, MoneyType.Cost, out costPriceOvrChkMsg);
                    if ((costPriceOvrChkRes == CheckResult.Error) || (costPriceOvrChkRes == CheckResult.Warning))
                    {
                        message = costPriceOvrChkMsg;
                        return costPriceOvrChkRes;
                    }

                    //// 粗利率チェック
                    //string grossProfitRateMsg;
                    //CheckResult grossProfitRateChkRes = this.CheckGrossProfitRate(salesRowNo, row.ShipmentCnt, salesUnPrcDisplay, salesUnitCost, row.TaxationDivCd, out grossProfitRateMsg);
                    //if ((grossProfitRateChkRes == CheckResult.Error) || (grossProfitRateChkRes == CheckResult.Warning))
                    //{
                    //    message = grossProfitRateMsg;
                    //    return grossProfitRateChkRes;
                    //}
                }
                // --- UPD 2009/10/19 ----------<<<<<
            }

            return checkResult;
        }

        /// <summary>
        /// 出荷数チェック
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public CheckResult CheckShipmentCnt(int salesRowNo, out string message)
        {
            try
            {
                CheckResult checkReslt = CheckResult.Ok;

                message = string.Empty;

                this._salesDetailDataTable.AcceptChanges();
                this._salesDetailDataTableForCalc = (SalesInputDataSet.SalesDetailDataTable)this._salesDetailDataTable.Copy();
                SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTableForCalc.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

                if (row != null)
                {
                    // --- UPD 2009/10/19 ---------->>>>>

                    // 単価再計算
                    this.SalesDetailRowGoodsPriceSetting(ref row);

                    // 数量チェック
                    string stkCntBscChkMsg = string.Empty;
                    CheckResult stkCntBscChkRes = CheckResult.Ok;
                    stkCntBscChkRes = this.CheckShipmentCntBasic(row, out stkCntBscChkMsg);
                    if (stkCntBscChkRes != CheckResult.Ok)
                    {
                        message = stkCntBscChkMsg;
                        return stkCntBscChkRes;
                    }

                    // 売上金額チェック
                    string salesPriceOvrChkMsg;
                    CheckResult salesPriceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.ShipmentCntDisplay, row.SalesUnPrcDisplay, row.TaxationDivCd, MoneyType.SalesMoney, out salesPriceOvrChkMsg);
                    if (salesPriceOvrChkRes == CheckResult.Error)
                    {
                        message = salesPriceOvrChkMsg;
                        return salesPriceOvrChkRes;
                    }

                    // 原価金額チェック
                    string costPriceOvrChkMsg;
                    CheckResult costPriceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.ShipmentCntDisplay, row.SalesUnitCost, row.TaxationDivCd, MoneyType.Cost, out costPriceOvrChkMsg);
                    if (costPriceOvrChkRes == CheckResult.Error)
                    {
                        message = costPriceOvrChkMsg;
                        return costPriceOvrChkRes;
                    }

                    //// 粗利率チェック
                    //string grossProfitRateMsg;
                    //CheckResult grossProfitRateChkRes = this.CheckGrossProfitRate(salesRowNo, row.ShipmentCntDisplay, row.SalesUnPrcDisplay, row.SalesUnitCost, row.TaxationDivCd, out grossProfitRateMsg);
                    //if ((grossProfitRateChkRes == CheckResult.Error) || (grossProfitRateChkRes == CheckResult.Warning))
                    //{
                    //    message = grossProfitRateMsg;
                    //    return grossProfitRateChkRes;
                    //}
                    // --- UPD 2009/10/19 ----------<<<<<
                }
                return checkReslt;
            }
            finally
            {
                this._salesDetailDataTableForCalc.Clear();
            }

        }

        /// <summary>
        /// 受注数チェック
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public CheckResult CheckAcptAnOdrCntCnt(int salesRowNo, out string message)
        {
            try
            {
                CheckResult checkReslt = CheckResult.Ok;

                message = string.Empty;

                SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
                this._salesDetailAcceptAnOrderDataTable.AcceptChanges();
                this._salesDetailAcceptAnOrderDataTableForCalc = (SalesInputDataSet.SalesDetailAcceptAnOrderDataTable)this._salesDetailAcceptAnOrderDataTable.Copy();
                SalesInputDataSet.SalesDetailAcceptAnOrderRow row = this._salesDetailAcceptAnOrderDataTableForCalc.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);

                if (row != null)
                {
                    // 単価再計算
                    this.SalesDetailRowGoodsPriceSetting(ref row);

                    // 数量チェック
                    string stkCntBscChkMsg = string.Empty;
                    CheckResult stkCntBscChkRes = CheckResult.Ok;
                    stkCntBscChkRes = this.CheckAcptAnOdrCntBasic(row, out stkCntBscChkMsg);

                    if (stkCntBscChkRes != CheckResult.Ok)
                    {
                        message = stkCntBscChkMsg;
                        return stkCntBscChkRes;
                    }

                    // 売上金額チェック
                    string salesPriceOvrChkMsg;
                    CheckResult salesPriceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.AcceptAnOrderCntDisplay, row.SalesUnPrcDisplay, row.TaxationDivCd, MoneyType.SalesMoney, out salesPriceOvrChkMsg);
                    if (salesPriceOvrChkRes == CheckResult.Error)
                    {
                        message = salesPriceOvrChkMsg;
                        return salesPriceOvrChkRes;
                    }

                    // 原価金額チェック
                    string costPriceOvrChkMsg;
                    CheckResult costPriceOvrChkRes = this.CheckPriceOverFlow(salesRowNo, row.AcceptAnOrderCntDisplay, row.SalesUnitCost, row.TaxationDivCd, MoneyType.Cost, out costPriceOvrChkMsg);
                    if (costPriceOvrChkRes == CheckResult.Error)
                    {
                        message = costPriceOvrChkMsg;
                        return costPriceOvrChkRes;
                    }
                }
                return checkReslt;
            }
            finally
            {
                this._salesDetailAcceptAnOrderDataTableForCalc.Clear();
            }
        }

        /// <summary>
        /// 発注数チェック
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        public CheckResult CheckAcptAnOdrCntCntForOrder(int salesRowNo, out string message)
        {
            CheckResult checkReslt = CheckResult.Ok;

            message = string.Empty;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row != null)
            {
                // 数量チェック
                string stkCntBscChkMsg = string.Empty;
                CheckResult stkCntBscChkRes = CheckResult.Ok;
                stkCntBscChkRes = this.CheckAcptAnOdrCntForOrderBasic(row, out stkCntBscChkMsg);

                if (stkCntBscChkRes != CheckResult.Ok)
                {
                    message = stkCntBscChkMsg;
                    return stkCntBscChkRes;
                }
            }
            return checkReslt;
        }

        /// <summary>
        /// 原単価・売単価チェック（売上全体設定マスタの原価チェック区分を参照)
        /// </summary>
        /// <param name="SalesUnitCostDisplay"></param>
        /// <param name="SalesUnPrcDisplay"></param>
        /// <param name="salesMoneyInputDiv"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        private CheckResult CheckCostOver(double SalesUnitCostDisplay, double SalesUnPrcDisplay, int salesMoneyInputDiv, out string message)
        {
            message = string.Empty;
            // UPD 2010/08/13 --- >>>
            //if (SalesUnitCostDisplay == 0) return CheckResult.Ok;
            if (SalesUnitCostDisplay == 0 || SalesUnPrcDisplay == 0) return CheckResult.Ok;
            // UPD 2010/08/13 --- <<<
            CheckResult checkReturn = CheckResult.Ok;

            // 原価チェック区分による原単価・売単価チェック
            switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().CostCheckDivCd)
            {
                // 無視
                case 0:
                    {
                        break;
                    }
                // 再入力
                case 1:
                    {
                        checkReturn = CheckResult.Error;
                        break;
                    }
                // 警告
                case 2:
                    {
                        checkReturn = CheckResult.Warning;
                        break;
                    }
            }

            // チェック無しか、売単価≧原単価であればOK
            if ((checkReturn == CheckResult.Ok) || (SalesUnPrcDisplay >= SalesUnitCostDisplay) || (salesMoneyInputDiv == (int)SalesMoneyInputDiv.Input))
            {
                checkReturn = CheckResult.Ok;
            }

            message = (checkReturn == CheckResult.Ok) ? string.Empty : string.Format("{0}が{1}を超えています。", this._salesDetailDataTable.SalesUnitCostColumn.Caption, this._salesDetailDataTable.SalesUnPrcDisplayColumn.Caption);

            return checkReturn;
        }

        // ADD 2010/11/25 ---------------->>>>>
        /// <summary>
        /// 数量と金額の符号が異のチェック
        /// </summary>
        /// <param name="stockRowNo">行番号</param>
        /// <param name="checkType">判定タイプ（1:出荷数、2:受注数）</param>
        /// <param name="message">エラーメッセージ</param>
        /// <returns>判定結果</returns>
        public int CheckCntPrice(int salesRowNo, int checkType, out string message)
        {
            int checkResult = 0;

            message = string.Empty;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                //
                if (checkType == 1)
                {
                    // 出荷数が設定されている場合
                    if (((row.ShipmentCntDisplay > 0) && (row.SalesMoneyDisplay < 0)) || ((row.ShipmentCntDisplay < 0) && (row.SalesMoneyDisplay > 0)))
                    {
                        message = "出荷数と売上金額の符号が異なります。" + "\r\n" + "\r\n" +
                                  "符号が異なる入力はできません。";

                        checkResult = -1;
                    }
                }
                else if (checkType == 2)
                {
                    // 受注数が設定されている場合
                    if ((row.AcceptAnOrderCntDisplay != 0) && (row.SalesMoneyDisplay < 0))
                    {
                        message = "受注数が入力されている為、" + "\r\n" + "\r\n" +
                                  "売上金額がマイナスとなる入力はできません。";

                        checkResult = -1;
                    }
                }
            }

            return checkResult;
        }
        // ADD 2010/11/25 ----------------<<<<<

        /// <summary>
        /// 金額桁あふれチェック
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="count">数量</param>
        /// <param name="unitPriceDisplay">単価</param>
        /// <param name="taxationDivCd">課税区分</param>
        /// <param name="moneyType">合計金額算出タイプ</param>
        /// <param name="message">メッセージ</param>
        /// <returns>CheckResult</returns>
        private CheckResult CheckPriceOverFlow(int salesRowNo, double count, double unitPriceDisplay, int taxationDivCd, MoneyType moneyType, out string message)
        {
            message = string.Empty;
            // 金額を算定
            long priceTaxInc;
            long priceTaxExc;
            long priceDisplay;

            double unitPrice = unitPriceDisplay;

            // 転嫁方式「非課税」時は税抜きで計算
            if (this._salesSlip.ConsTaxLayMethod == (int)ConsTaxLayMethod.TaxExempt)
            {
                taxationDivCd = (int)CalculateTax.TaxationCode.TaxNone;
            }
            // 総額表示時は内税で計算する
            else if ((taxationDivCd != (int)CalculateTax.TaxationCode.TaxNone) && (this._salesSlip.TotalAmountDispWayCd == (int)TotalAmountDispWayCd.TotalAmount))
            {
                taxationDivCd = (int)CalculateTax.TaxationCode.TaxInc;
            }

            if (moneyType == MoneyType.SalesMoney)
            {
                this.CalculationSalesMoney(count, unitPriceDisplay, taxationDivCd, out priceTaxInc, out priceTaxExc, out priceDisplay);

                if (Math.Abs(priceDisplay) > Math.Abs(ctMAXVALUE_SalesMoneyDetail))
                {
                    message = "売上金額が最大桁数を超える為、入力できません。" + Environment.NewLine + string.Format("売上金額が「{0} ～ {1}」の範囲内になるように入力して下さい。", Math.Abs(ctMAXVALUE_SalesMoneyDetail) * -1, Math.Abs(ctMAXVALUE_SalesMoneyDetail));
                    return CheckResult.Error;
                }
            }
            else
            {
                this.CalculationCost(salesRowNo, count, unitPriceDisplay, taxationDivCd, this._salesSlip.ConsTaxRate, out priceTaxInc, out priceTaxExc, out priceDisplay);

                if (Math.Abs(priceDisplay) > Math.Abs(ctMAXVALUE_SalesMoneyDetail))
                {
                    message = "原価金額が最大桁数を超える為、入力できません。" + Environment.NewLine + string.Format("原価金額が「{0} ～ {1}」の範囲内になるように入力して下さい。", Math.Abs(ctMAXVALUE_SalesMoneyDetail) * -1, Math.Abs(ctMAXVALUE_SalesMoneyDetail));
                    return CheckResult.Error;
                }
            }
            return CheckResult.Ok;
        }

        /// <summary>
        /// 出荷数の基本チェック
        /// </summary>
        /// <param name="row"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        /// <br>Update Note: 2010/05/04 王海立 セキュリティの操作権限で「数量変更」が「許可する」設定の場合、数量マイナスチェック</br>        
        private CheckResult CheckShipmentCntBasic(SalesInputDataSet.SalesDetailRow row, out string message)
        {
            message = string.Empty;

            double acceptAnOrderCnt = row.AcceptAnOrderCntDisplay;
            double beforeShipmentCnt = row.ShipmentCntDefault;
            double addUpEnableCnt = row.AddUpEnableCnt;
            double alreadyAddUpCnt = row.AlreadyAddUpCnt;
            double shipmentCnt = 0;
            double shipmentCntRealValue = 0;
            shipmentCnt = row.ShipmentCntDisplay;
            shipmentCntRealValue = shipmentCnt;
            if (this._salesSlip.SalesSlipCd == (int)SalesSlipCd.RetGoods)
            {
                shipmentCntRealValue *= -1;
                beforeShipmentCnt *= -1;
            }

            // 桁あふれチェック
            if (Math.Abs(shipmentCnt) > Math.Abs(ctMAXVALUE_CountDetail))
            {
                message = "出荷数が最大桁数を超える為、入力できません。" + Environment.NewLine + string.Format("「{0} ～ {1}」の値を入力して下さい。", Math.Abs(SalesSlipInputAcs.ctMAXVALUE_CountDetail) * -1, Math.Abs(SalesSlipInputAcs.ctMAXVALUE_CountDetail));
                return CheckResult.Error;
            }

            // --- DEL 2013/11/14 Y.Wakita ---------->>>>>
            // --- UPD 2010/05/04 ---------->>>>>
            //if (this._salesSlip.AcptAnOdrStatusDisplay != (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales)
            // セキュリティの操作権限で「数量変更」が「許可する」設定の場合
            //if (MyOpeCtrl.Disabled((int)OperationCode.CountMinus) || this._salesSlip.AcptAnOdrStatusDisplay != (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) // DEL 2010/07/13
            // --- UPD 2013/11/05 Y.Wakita ---------->>>>>
            //if ((MyOpeCtrl.Disabled((int)OperationCode.CountMinus) && row.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount) || this._salesSlip.AcptAnOdrStatusDisplay != (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales)
            //if (((MyOpeCtrl.Disabled((int)OperationCode.CountMinus) && row.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount) || this._salesSlip.AcptAnOdrStatusDisplay != (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) &&
            //    ((MyOpeCtrl.Disabled((int)OperationCode.CountMinus) && row.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount) || this._salesSlip.AcptAnOdrStatusDisplay != (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate))
            //// --- UPD 2013/11/05 Y.Wakita ----------<<<<<
            //// --- UPD 2010/05/04 ----------<<<<<            
            //{
            //    // 売上以外は、マイナス入力不可
            //    if (shipmentCnt < 0)
            //    {
            //        message = "マイナス値の入力はできません。";
            //        return CheckResult.Error;
            //    }
            //}
            // --- DEL 2013/11/14 Y.Wakita ----------<<<<<
            // --- ADD 2013/11/14 Y.Wakita ---------->>>>>
            if ((MyOpeCtrl.Disabled((int)OperationCode.CountMinus) && row.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount) || this._salesSlip.AcptAnOdrStatusDisplay != (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales)
            {
                bool error = true;
                if (this._salesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate)
                {
                    // 見積
                    if (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount)
                        error = false;
                }

                if (error)
                {
                    // 売上以外は、マイナス入力不可
                    if (shipmentCnt < 0)
                    {
                        message = "マイナス値の入力はできません。";
                        return CheckResult.Error;
                    }
                }
            }
            // --- ADD 2013/11/14 Y.Wakita ----------<<<<<
            // --- ADD 2014/07/15 T.Miyamoto 仕掛一覧 №1912 ---------->>>>>
            // システムロール設定で伝票修正(行削除)の操作権限が無効の場合、修正明細の数量を０にする事は不可
            // --- UPD 2014/08/21 Y.Wakita 仕掛一覧 №1912 システムテスト障害対応 ---------->>>>>
            //if ((MyOpeCtrl.Disabled((int)OperationCode.RowDelete) && row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_ExistSlip))
            if ((MyOpeCtrl.Disabled((int)OperationCode.RowDelete) && row.SalesSlipDtlNum != 0))
            // --- UPD 2014/08/21 Y.Wakita 仕掛一覧 №1912 システムテスト障害対応 ----------<<<<<
            {
                if (shipmentCnt == 0)
                {
                    message = "修正明細行の数量を０にする事はできません。";
                    return CheckResult.Error;
                }
            }
            // --- ADD 2014/07/15 T.Miyamoto 仕掛一覧 №1912 ----------<<<<<

            // 受注数チェック
            if (acceptAnOrderCnt != 0)
            {
                if (shipmentCnt > acceptAnOrderCnt)
                {
                    message = "出荷数が受注数を上回る為、入力できません。";
                    return CheckResult.Error;
                }
            }

            // --- ADD m.suzuki 2011/04/21 ---------->>>>>
            ReflectAddupEnableCnt(ref addUpEnableCnt, row);
            // --- ADD m.suzuki 2011/04/21 ----------<<<<<

            if (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.Sales)
            {
                // 計上伝票の場合は、マイナス入力不可
                //>>>2010/10/11
                //if ((addUpEnableCnt != 0) && (shipmentCntRealValue < 0))
                //{
                //    message = "元伝票がある為、マイナス値の入力はできません。";
                //    return CheckResult.Error;
                //}
                if ((addUpEnableCnt != 0) && (beforeShipmentCnt < 0) && (shipmentCntRealValue > 0))
                {
                    message = "元伝票の数量がマイナスの為、プラス値の入力はできません。";
                    return CheckResult.Error;
                }
                else if ((addUpEnableCnt != 0) && (beforeShipmentCnt > 0) && (shipmentCntRealValue < 0))
                {
                    message = "元伝票の数量がプラスの為、マイナス値の入力はできません。";
                    return CheckResult.Error;
                }
                //<<<2010/10/11
                // 計上済み数量がある場合はチェック
                else if ((alreadyAddUpCnt != 0) && (Math.Abs(shipmentCnt) < Math.Abs(alreadyAddUpCnt)))
                {
                    message = "数量が引当済みの数量を下回る為、入力できません。" + Environment.NewLine + string.Format("{0} 以上の値を入力して下さい。", alreadyAddUpCnt);
                    return CheckResult.Error;
                }
                // 計上明細の場合は残数チェック
                else if ((row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_AddUpNew) ||
                         (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_AddUpEdit))
                {
                    //>>>2011/02/01
                    ////if (Math.Abs(addUpEnableCnt) < (Math.Abs(shipmentCnt) + Math.Abs(acceptAnOrderCnt)))
                    //if (Math.Abs(addUpEnableCnt) < Math.Abs(shipmentCnt))
                    //{
                    //    message = "数量が残数量を上回る為、入力できません。" + Environment.NewLine + string.Format("{0} 以下の値を入力して下さい。", addUpEnableCnt);
                    //    return CheckResult.Error;
                    //}

                    if ((row.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) &&
                        (this._salesSlip.InquiryNumber != 0) &&
                        (this._salesSlip.OnlineKindDiv == (int)SalesSlipInputAcs.OnlineKindDiv.SCM))
                    {
                        // ＳＣＭ：問合せが存在する発注回答時は、残数チェックを行わない。
                    }
                    else
                    {
                        if (Math.Abs(addUpEnableCnt) < Math.Abs(shipmentCnt))
                        {
                            message = "数量が残数量を上回る為、入力できません。" + Environment.NewLine + string.Format("{0} 以下の値を入力して下さい。", addUpEnableCnt);
                            return CheckResult.Error;
                        }
                    }
                    //<<<2011/02/01
                }
            }
            else
            {
                if ((addUpEnableCnt != 0) && (shipmentCntRealValue == 0))
                {
                    message = "数量が入力されていません。";
                    return CheckResult.Error;
                }
                else if ((addUpEnableCnt != 0) && (beforeShipmentCnt < 0) && (shipmentCntRealValue < 0))
                {
                    message = "元伝票の数量がマイナスの為、プラス値の入力はできません。";
                    return CheckResult.Error;
                }
                else if ((addUpEnableCnt != 0) && (beforeShipmentCnt > 0) && (shipmentCntRealValue > 0))
                {
                    message = "元伝票の数量がプラスの為、マイナス値の入力はできません。";
                    return CheckResult.Error;
                }
                else if ((addUpEnableCnt != 0) && (beforeShipmentCnt < 0) && (Math.Abs(addUpEnableCnt) < Math.Abs(shipmentCntRealValue)))
                {
                    message = "返品数量が元伝票の数量を下回る為、入力できません。" + Environment.NewLine + string.Format("{0} 以上の値を入力して下さい。", addUpEnableCnt * -1);
                    return CheckResult.Error;
                }
                else if ((addUpEnableCnt != 0) && (beforeShipmentCnt > 0) && (Math.Abs(addUpEnableCnt) < Math.Abs(shipmentCntRealValue)))
                {
                    message = "返品数量が元伝票の数量を上回る為、入力できません。" + Environment.NewLine + string.Format("{0} 以下の値を入力して下さい。", addUpEnableCnt * -1);
                    return CheckResult.Error;
                }
            }

            return CheckResult.Ok;
        }

        /// <summary>
        /// 受注数の基本チェック
        /// </summary>
        /// <param name="row"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        private CheckResult CheckAcptAnOdrCntBasic(SalesInputDataSet.SalesDetailAcceptAnOrderRow row, out string message)
        {
            message = string.Empty;

            double acceptAnOrderCnt = row.AcceptAnOrderCntDisplay;
            double beforeShipmentCnt = row.ShipmentCntDefault;
            double addUpEnableCnt = row.AddUpEnableCnt;
            double alreadyAddUpCnt = row.AlreadyAddUpCnt;
            double shipmentCnt = 0;
            shipmentCnt = row.ShipmentCntDisplay;

            // 桁あふれチェック
            if (Math.Abs(acceptAnOrderCnt) > Math.Abs(ctMAXVALUE_CountDetail))
            {
                message = "受注数が最大桁数を超える為、入力できません。" + Environment.NewLine + string.Format("「{0} ～ {1}」の値を入力して下さい。", Math.Abs(SalesSlipInputAcs.ctMAXVALUE_CountDetail) * -1, Math.Abs(SalesSlipInputAcs.ctMAXVALUE_CountDetail));
                return CheckResult.Error;
            }

            // 受注数は、マイナス入力不可
            if (acceptAnOrderCnt < 0)
            {
                message = "マイナス値の入力はできません。";
                return CheckResult.Error;
            }
            // --- ADD 2014/07/15 T.Miyamoto 仕掛一覧 №1912 ---------->>>>>
            // システムロール設定で伝票修正(行削除)の操作権限が無効の場合、修正明細の数量を０にする事は不可
            // --- UPD 2014/08/21 Y.Wakita 仕掛一覧 №1912 システムテスト障害対応 ---------->>>>>
            //if ((MyOpeCtrl.Disabled((int)OperationCode.RowDelete) && row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_ExistSlip))
            if ((MyOpeCtrl.Disabled((int)OperationCode.RowDelete) && row.SalesSlipDtlNum != 0))
            // --- UPD 2014/08/21 Y.Wakita 仕掛一覧 №1912 システムテスト障害対応 ----------<<<<<
            {
                // --- UPD 2014/08/21 Y.Wakita 仕掛一覧 №1912 システムテスト障害対応 ---------->>>>>
                //if (shipmentCnt == 0)
                if (acceptAnOrderCnt == 0)
                // --- UPD 2014/08/21 Y.Wakita 仕掛一覧 №1912 システムテスト障害対応 ---------->>>>>
                {
                    message = "修正明細行の数量を０にする事はできません。";
                    return CheckResult.Error;
                }
            }
            // --- ADD 2014/07/15 T.Miyamoto 仕掛一覧 №1912 ----------<<<<<

            // 受注数チェック
            if (acceptAnOrderCnt != 0)
            {
                if (shipmentCnt > acceptAnOrderCnt)
                {
                    message = "受注数が出荷数を下回る為、入力できません。";
                    return CheckResult.Error;
                }
            }

            // --- ADD m.suzuki 2011/04/21 ---------->>>>>
            ReflectAddupEnableCnt(ref addUpEnableCnt, row);
            // --- ADD m.suzuki 2011/04/21 ----------<<<<<

            if (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.Sales)
            {
                // 計上伝票の場合は、マイナス入力不可
                if ((addUpEnableCnt != 0) && (acceptAnOrderCnt < 0))
                {
                    message = "元伝票がある為、マイナス値の入力はできません。";
                    return CheckResult.Error;
                }
                // 計上済み数量がある場合はチェック
                else if ((alreadyAddUpCnt != 0) && (Math.Abs(acceptAnOrderCnt) < Math.Abs(alreadyAddUpCnt)))
                {
                    message = "数量が引当済みの数量を下回る為、入力できません。" + Environment.NewLine + string.Format("{0} 以上の値を入力して下さい。", alreadyAddUpCnt);
                    return CheckResult.Error;
                }
                // 計上明細の場合は残数チェック
                else if ((row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_AddUpNew) ||
                    (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_AddUpEdit))
                {
                    //>>>2011/02/01
                    //if (Math.Abs(addUpEnableCnt) < Math.Abs(acceptAnOrderCnt))
                    //{
                    //    message = "数量が残数量を上回る為、入力できません。" + Environment.NewLine + string.Format("{0} 以下の値を入力して下さい。", addUpEnableCnt);
                    //    return CheckResult.Error;
                    //}

                    // DEL 2015/09/01 陳艶丹 For Redmine #47025---------------------->>>>>>
                    //if ((row.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) &&
                    //    (this._salesSlip.InquiryNumber != 0) &&
                    //    (this._salesSlip.OnlineKindDiv == (int)SalesSlipInputAcs.OnlineKindDiv.SCM))
                    //{
                    //    // ＳＣＭ：問合せが存在する発注回答時は、残数チェックを行わない。
                    //}
                    //else
                    //{
                    // DEL 2015/09/01 陳艶丹 For Redmine #47025----------------------<<<<<<
                        if (Math.Abs(addUpEnableCnt) < Math.Abs(acceptAnOrderCnt))
                        {
                            message = "数量が残数量を上回る為、入力できません。" + Environment.NewLine + string.Format("{0} 以下の値を入力して下さい。", addUpEnableCnt);
                            return CheckResult.Error;
                        }
                        //}// DEL 2015/09/01 陳艶丹 For Redmine #47025
                    //<<<2011/02/01
                }
            }

            return CheckResult.Ok;
        }

        /// <summary>
        /// 発注数の基本チェック
        /// </summary>
        /// <param name="row"></param>
        /// <param name="message"></param>
        /// <returns></returns>
        /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
        private CheckResult CheckAcptAnOdrCntForOrderBasic(SalesInputDataSet.SalesDetailRow row, out string message)
        {
            message = string.Empty;
            double acceptAnOrderCnt = row.AcceptAnOrderCntDisplay;
            double shipmentCnt = row.ShipmentCntDisplay;
            double orderCnt = row.AcceptAnOrderCntForOrder;
            double beforeShipmentCnt = row.ShipmentCntDefault;
            double addUpEnableCnt = row.AddUpEnableCnt;
            double alreadyAddUpCnt = row.AlreadyAddUpCnt;
            double shipmentCntRealValue = 0;
            shipmentCntRealValue = shipmentCnt;
            if (this._salesSlip.SalesSlipCd == (int)SalesSlipCd.RetGoods) shipmentCntRealValue *= -1;

            // 桁あふれチェック
            if (Math.Abs(orderCnt) > Math.Abs(ctMAXVALUE_CountDetail))
            {
                message = "発注数が最大桁数を超える為、入力できません。" + Environment.NewLine + string.Format("「{0} ～ {1}」の値を入力して下さい。", Math.Abs(SalesSlipInputAcs.ctMAXVALUE_CountDetail) * -1, Math.Abs(SalesSlipInputAcs.ctMAXVALUE_CountDetail));
                return CheckResult.Error;
            }

            // 発注数は、マイナス入力不可
            if (orderCnt < 0)
            {
                message = "マイナス値の入力はできません。";
                return CheckResult.Error;
            }

            //// 発注数、受注数チェック
            //if ((acceptAnOrderCnt != 0) &&
            //    (acceptAnOrderCnt < orderCnt) &&
            //    (row.EditStatus == ctEDITSTATUS_AddUpNew) &&
            //    (this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum))
            //{
            //    message = "発注数が受注数を超える為、入力できません。";
            //    return CheckResult.Error;
            //}

            //-----ADD 2011/11/01----->>>>>
            // 発注数、受注数チェック
            if ((acceptAnOrderCnt != 0) &&
                (0 > acceptAnOrderCnt - orderCnt))
            {
                message = "発注数が受注数を超える為、入力できません。";
                return CheckResult.Error;
            }
            //-----ADD 2011/11/01-----<<<<<

            if (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.Sales)
            {
                // 計上伝票の場合は、マイナス入力不可
                if ((addUpEnableCnt != 0) && (shipmentCntRealValue < 0))
                {
                    message = "元伝票がある為、マイナス値の入力はできません。";
                    return CheckResult.Error;
                }
                // 計上済み数量がある場合はチェック
                else if ((alreadyAddUpCnt != 0) && ((Math.Abs(shipmentCnt) + Math.Abs(orderCnt)) < Math.Abs(alreadyAddUpCnt)))
                {
                    message = "数量が引当済みの数量を下回る為、入力できません。" + Environment.NewLine + string.Format("{0} 以上の値を入力して下さい。", alreadyAddUpCnt);
                    return CheckResult.Error;
                }
                // 計上明細の場合は残数チェック
                else if ((row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_AddUpNew) ||
                         (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_AddUpEdit))
                {
                    // DEL 2015/08/07 陳艶丹 For Redmine #47021---------------------->>>>>>
                    //if (Math.Abs(addUpEnableCnt) < (Math.Abs(shipmentCnt) + Math.Abs(orderCnt)))
                    //{
                    //    message = "数量が残数量を上回る為、入力できません。" + Environment.NewLine + string.Format("{0} 以下の値を入力して下さい。", addUpEnableCnt);
                    //    return CheckResult.Error;
                    //}
                    // DEL 2015/08/07 陳艶丹 For Redmine #47021----------------------<<<<<<
                    // ADD 2015/08/07 陳艶丹 For Redmine #47021---------------------->>>>>>
                    if ((row.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) &&
                       (this._salesSlip.InquiryNumber != 0) &&
                       (this._salesSlip.OnlineKindDiv == (int)SalesSlipInputAcs.OnlineKindDiv.SCM))
                    {
                        // ＳＣＭ：問合せが存在する発注回答時は、残数チェックを行わない。
                    }
                    else
                    {
                        if (Math.Abs(addUpEnableCnt) < (Math.Abs(shipmentCnt) + Math.Abs(orderCnt)))
                        {
                            message = "数量が残数量を上回る為、入力できません。" + Environment.NewLine + string.Format("{0} 以下の値を入力して下さい。", addUpEnableCnt);
                            return CheckResult.Error;
                        }
                    }
                    // ADD 2015/08/07 陳艶丹 For Redmine #47021----------------------<<<<<<
                }
            }
            else
            {
                // 元伝有りの返品伝票で、数量がプラスの場合
                if ((addUpEnableCnt != 0) && (shipmentCntRealValue > 0))
                {
                    message = "元伝票がある為、マイナス値の入力はできません。"; // 表示上マイナスの為
                    return CheckResult.Error;
                }
                else if ((addUpEnableCnt != 0) && (Math.Abs(addUpEnableCnt) < Math.Abs(shipmentCntRealValue)))
                {
                    message = "返品数量が元伝票の数量を上回る為、入力できません。" + Environment.NewLine + string.Format("{0} 以下の値を入力して下さい。", addUpEnableCnt);
                    return CheckResult.Error;
                }
            }

            return CheckResult.Ok;
        }

        // --- ADD m.suzuki 2011/04/21 ---------->>>>>
        /// <summary>
        /// 計上可能数の取得処理（計上元明細が取得できる時は、計上元明細の数量を使用する。）
        /// </summary>
        /// <param name="addUpEnableCnt"></param>
        /// <param name="row"></param>
        public void ReflectAddupEnableCnt(ref double addUpEnableCnt, SalesInputDataSet.SalesDetailRow row)
        {
            // 計上元明細を取得
            SalesInputDataSet.AddUpSrcDetailRow addUpSrcDetailRow = this.GetAddUpSrcDataRow(row);
            if (addUpSrcDetailRow != null && addUpSrcDetailRow.LogicalDeleteCode != (int)ConstantManagement.LogicalMode.GetData0)
            {
                if (addUpSrcDetailRow.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment)
                {
                    // 貸出
                    addUpEnableCnt = addUpSrcDetailRow.ShipmentCnt;
                }
                else
                {
                    // 受注・見積
                    addUpEnableCnt = addUpSrcDetailRow.AcceptAnOrderCnt;
                }
            }
        }
        /// <summary>
        /// 計上可能数の取得処理（計上元明細が取得できる時は、計上元明細の数量を使用する。）受注明細用
        /// </summary>
        /// <param name="addUpEnableCnt"></param>
        /// <param name="row"></param>
        public void ReflectAddupEnableCnt(ref double addUpEnableCnt, SalesInputDataSet.SalesDetailAcceptAnOrderRow row)
        {
            // 計上元明細を取得
            SalesInputDataSet.AddUpSrcDetailRow addUpSrcDetailRow = this.GetAddUpSrcDataRow(row);
            if (addUpSrcDetailRow != null && addUpSrcDetailRow.LogicalDeleteCode != (int)ConstantManagement.LogicalMode.GetData0)
            {
                // 見積
                addUpEnableCnt = addUpSrcDetailRow.AcceptAnOrderCnt;
            }
        }
        /// <summary>
        /// 売上明細行オブジェクトに連結する計上元売上明細行オブジェクトを取得します。
        /// </summary>
        /// <param name="salesDetailRow">売上明細行オブジェクト</param>
        private SalesInputDataSet.AddUpSrcDetailRow GetAddUpSrcDataRow(SalesInputDataSet.SalesDetailAcceptAnOrderRow acceptAnOrderRow)
        {
            SalesInputDataSet.AddUpSrcDetailRow row = this._addUpSrcDetailDataTable.FindByAcptAnOdrStatusSalesSlipDtlNum(acceptAnOrderRow.AcptAnOdrStatusSrc, acceptAnOrderRow.SalesSlipDtlNumSrc);

            return row;
        }
        // --- ADD m.suzuki 2011/04/21 ----------<<<<<
        /// <summary>
        /// 粗利率チェック（売上全体設定マスタの入力粗利チェック項目を参照）
        /// </summary>
        /// <param name="salesRowno">売上行番号</param>
        /// <param name="count">数量</param>
        /// <param name="unitPriceDisplay">売上単価</param>
        /// <param name="unitCostDisplay">原価単価</param>
        /// <param name="taxationDivCd">課税区分</param>
        /// <param name="message">メッセージ</param>
        /// <returns></returns>
        //private CheckResult CheckGrossProfitRate(int salesRowNo, double count, double unitPriceDisplay, double unitCostDisplay, int taxationDivCd, out string message, bool F10Flag) //del 2012/01/18 liusy #26917 ソースマージ
        private CheckResult CheckGrossProfitRate(int salesRowNo, double count, double unitPriceDisplay, double unitCostDisplay, int taxationDivCd, out string message) //add 2012/01/18 liusy #26917 ソースマージ
        {
            message = string.Empty;

            // 2009.06.17 >>>
            //if (( count == 0 ) || ( unitPriceDisplay == 0 ) || ( unitCostDisplay == 0 )) return CheckResult.Ok;
            if (count == 0) return CheckResult.Ok;
            // 2009.06.17 <<<

            //>>>2011/08/24
            // 売単価が０の場合、粗利チェックしない
            if (unitPriceDisplay == 0) return CheckResult.Ok;
            //<<<2011/08/24

            long priceTaxInc;
            long priceTaxExc;
            long priceDisplay;
            long costTaxInc;
            long costTaxExc;
            long costDisplay;

            // 非課税
            if (this._salesSlip.ConsTaxLayMethod == (int)ConsTaxLayMethod.TaxExempt)
            {
                taxationDivCd = (int)CalculateTax.TaxationCode.TaxNone;
            }
            // 内税
            else if ((taxationDivCd != (int)CalculateTax.TaxationCode.TaxNone) &&
                (this._salesSlip.TotalAmountDispWayCd == (int)TotalAmountDispWayCd.TotalAmount))
            {
                taxationDivCd = (int)CalculateTax.TaxationCode.TaxInc;
            }

            // 売上金額算出
            this.CalculationSalesMoney(count, unitPriceDisplay, taxationDivCd, out priceTaxInc, out priceTaxExc, out priceDisplay);

            // 原価金額算出
            this.CalculationCost(salesRowNo, count, unitCostDisplay, taxationDivCd, this._salesSlip.ConsTaxRate, out costTaxInc, out costTaxExc, out costDisplay);

            // 粗利率算出(常に税抜きで算出)
            double grossProfitRate = this.CalcGrossProfitRate(priceTaxExc, costDisplay);

            //if (grossProfitRate == 0) return CheckResult.Ok;    // 2009.06.17 Del

            CheckResult checkReturn = CheckResult.Ok;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().GrsProfitDspCd == 0) && // 粗利表示区分(0:する 1:しない)
                (this._salesSlipInputInitDataAcs.GetSalesTtlSt().CostDspDivCd == 1) && // 原価表示区分(0:しない 1:する)
                (((this._salesSlip.SalesSlipCd != (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) && (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipChngDivCost != 2)) || // 伝票修正区分(原価)(2:未使用)
                 ((this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) && (this._salesSlipInputInitDataAcs.GetSalesTtlSt().RetSlipChngDivCost != 2))) && // 返品伝票修正区分(原価)(2:未使用)
                (this._costDisplay == true)) //&&
            //(row.SalesSlipCdDtl != (int)SalesSlipCdDtl.Discount)) // 行値引き 商品値引き
            {
                double grossProfitRateLower = this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpGrsProfChkLower;
                double grossProfitRateUpper = this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpGrsProfChkUpper;

                #region 粗利率下限チェック
                if (grossProfitRateLower != 0)
                {
                    switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpGrsProfChkLowDiv)
                    {
                        // 再入力
                        case 0:
                            {
                                checkReturn = CheckResult.Error;
                                break;
                            }
                        // 警告
                        case 1:
                            {
                                // UPD 2012/05/14 --- >>>>
                                //// UPD 2012/04/23 --- >>>>
                                ////checkReturn = CheckResult.Warning;
                                //checkReturn = CheckResult.Error;
                                //// UPD 2012/04/23 --- <<<<
                                checkReturn = CheckResult.Warning;
                                // UPD 2012/05/14 --- <<<<
                                break;
                            }
                        // 無視
                        case 2:
                            {
                                break;
                            }
                    }

                    // チェック無しか、粗利率下限≦明細粗利率であればOK
                    if ((checkReturn == CheckResult.Ok) || (grossProfitRateLower <= grossProfitRate))
                    {
                        checkReturn = CheckResult.Ok;
                    }
                    // --- ADD 2012/05/14 ---------->>>>>
                    else
                    {
                        if (checkReturn == CheckResult.Error)
                        {
                            message = (checkReturn == CheckResult.Ok) ? string.Empty : "粗利率が下限値を下回っています。" + Environment.NewLine + Environment.NewLine +
                                                                        string.Format("下限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateLower, grossProfitRate) + Environment.NewLine + Environment.NewLine;
                            _grossProfitRateFlg = true;
                        }
                        else
                        {
                            // --- ADD 2012/05/14 ----------<<<<<
                    // --- UPD 2012/04/23 ---------->>>>>
                    //message = (checkReturn == CheckResult.Ok) ? string.Empty : "粗利率が下限値を下回っています。" + Environment.NewLine + Environment.NewLine +
                    //                                                 string.Format("下限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateLower, grossProfitRate); // 2012/01/18 liusy #26917 ソースマージ
                    message = (checkReturn == CheckResult.Ok) ? string.Empty : "粗利率が下限値を下回っています。" + Environment.NewLine + Environment.NewLine +
                                                                string.Format("下限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateLower, grossProfitRate) + Environment.NewLine + Environment.NewLine +
                                                                "よろしいですか？";
                    // --- UPD 2012/04/23 ----------<<<<<
                            // --- ADD 2012/05/14 ---------->>>>>
                            _grossProfitRateFlg = true;
                        }
                        return checkReturn;
                    }
                    // --- ADD 2012/05/14 ----------<<<<<
                    //del by  liusy 2012/01/18 #26917 ソースマージ----->>>>>>
                    /*
                    //add 2011/12/01 liusy Redmine#8379  ----->>>>>>

                    //if (F10Flag && checkReturn == CheckResult.Warning)  // del by liusy #26917
                    if (checkReturn == CheckResult.Warning)               // add by liusy #26917
                    {
                        message = (checkReturn == CheckResult.Ok) ? string.Empty : "粗利率が下限値を下回っています。" + "よろしいですか？" + Environment.NewLine + Environment.NewLine +
                                                                         string.Format("下限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateLower, grossProfitRate);
                        checkReturn = CheckResult.Warning; // add by liusy #26917
                    }
                    else
                    {
                        message = (checkReturn == CheckResult.Ok) ? string.Empty : "粗利率が下限値を下回っています。" + Environment.NewLine + Environment.NewLine +
                                                                         string.Format("下限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateLower, grossProfitRate);
                    }
                    //add 2011/12/01 liusy Redmine#8379  -----<<<<<<
                    */
                    //del by  liusy 2012/01/18 #26917 ソースマージ-----<<<<<<
                    // --- DEL 2012/05/14 ---------->>>>>
                    //// UPD 2010/07/16 --- >>>>
                    ////if (checkReturn != CheckResult.Ok) return checkReturn;
                    //if (checkReturn != CheckResult.Ok)
                    //{
                    //    if (checkReturn == CheckResult.Error)
                    //    {
                    //        _grossProfitRateFlg = true;
                    //    }
                    //    else
                    //    {
                    //        _grossProfitRateFlg = false;
                    //    }

                    //    return checkReturn;
                    //}
                    //// UPD 2010/07/16 --- <<<<
                    // --- DEL 2012/05/14 ----------<<<<<
                }
                #endregion

                #region 粗利率上限チェック
                if (grossProfitRateUpper != 0)
                {
                    switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpGrsProfChkUppDiv)
                    {
                        // 再入力
                        case 0:
                            {
                                checkReturn = CheckResult.Error;
                                break;
                            }
                        // 警告
                        case 1:
                            {
                                // UPD 2012/05/14 --- >>>>
                                //// UPD 2012/04/23 --- >>>>
                                ////checkReturn = CheckResult.Warning;
                                //checkReturn = CheckResult.Error;
                                //// UPD 2012/04/23 --- <<<<
                                checkReturn = CheckResult.Warning;
                                // UPD 2012/05/14 --- <<<<
                                break;
                            }
                        // 無視
                        case 2:
                            {
                                break;
                            }
                    }

                    // チェック無しか、粗利率上限≧明細粗利率であればOK
                    if ((checkReturn == CheckResult.Ok) || (grossProfitRateUpper >= grossProfitRate))
                    {
                        checkReturn = CheckResult.Ok;
                    }
                    // ADD 2010/07/16 ---->>>> 
                    else
                    {
                        if (checkReturn == CheckResult.Error)
                        {
                            // --- ADD 2012/05/14 ---------->>>>>
                            message = (checkReturn == CheckResult.Ok) ? string.Empty : "粗利率が上限値を超えています。" + Environment.NewLine + Environment.NewLine +
                                                                        string.Format("上限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateUpper, grossProfitRate) + Environment.NewLine + Environment.NewLine;
                            // --- ADD 2012/05/14 ----------<<<<<
                            _grossProfitRateFlg = true;
                        }
                        else
                        {
                            // --- ADD 2012/05/14 ---------->>>>>
                            message = (checkReturn == CheckResult.Ok) ? string.Empty : "粗利率が上限値を超えています。" + Environment.NewLine + Environment.NewLine +
                                                                        string.Format("上限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateUpper, grossProfitRate) + Environment.NewLine + Environment.NewLine +
                                                                        "よろしいですか？";
                            // --- ADD 2012/05/14 ----------<<<<<
                            // --- UPD 2012/05/14 ---------->>>>>
                            //_grossProfitRateFlg = false;
                            _grossProfitRateFlg = true;
                            // --- UPD 2012/05/14 ----------<<<<<
                        }
                    }
                    // ADD 2010/07/16 ----<<<<
                    // --- DEL 2012/05/14 ---------->>>>>
                    //// --- UPD 2012/04/23 ---------->>>>>
                    ////message = (checkReturn == CheckResult.Ok) ? string.Empty : "粗利率が上限値を超えています。" + Environment.NewLine + Environment.NewLine +
                    ////                                                 string.Format("上限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateUpper, grossProfitRate); // 2012/01/18 liusy #26917 ソースマージ
                    //message = (checkReturn == CheckResult.Ok) ? string.Empty : "粗利率が上限値を超えています。" + Environment.NewLine + Environment.NewLine +
                    //                                            string.Format("上限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateUpper, grossProfitRate) + Environment.NewLine + Environment.NewLine + 
                    //                                            "よろしいですか？";
                    //// --- UPD 2012/04/23 ----------<<<<<
                    // --- DEL 2012/05/14 ----------<<<<<
                    //del by  liusy 2012/01/18 #26917 ソースマージ----->>>>>>
                    /*
                    //add 2011/12/01 liusy Redmine#8379  ----->>>>>>
                    //if (F10Flag && checkReturn == CheckResult.Warning) // del by liusy #26917
                    if (checkReturn == CheckResult.Warning)              // add by liusy #26917
                    {

                        message = (checkReturn == CheckResult.Ok) ? string.Empty : "粗利率が上限値を超えています。" + "よろしいですか？" + Environment.NewLine + Environment.NewLine +
                                                                         //string.Format("上限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateLower, grossProfitRate); //del 2011/12/15 liusy Redmine#26917
                                                                         string.Format("上限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateUpper, grossProfitRate);   //add 2011/12/15 liusy Redmine#26917 
                        checkReturn = CheckResult.Warning; // add by liusy #26917
                    }
                    else
                    {
                        message = (checkReturn == CheckResult.Ok) ? string.Empty : "粗利率が上限値を超えています。" + Environment.NewLine + Environment.NewLine +
                                                                         //string.Format("上限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateLower, grossProfitRate); //del 2011/12/15 liusy Redmine#26917
                                                                         string.Format("上限値：{0:0.00}%　明細粗利率：{1:0.00}%   ", grossProfitRateUpper, grossProfitRate);   //add 2011/12/15 liusy Redmine#26917
                    }
                    //add 2011/12/01 liusy Redmine#8379  -----<<<<<<
                    */
                    //del by  liusy 2012/01/18 #26917 ソースマージ-----<<<<<<
                }
                #endregion
            }
            return checkReturn;
        }

        /// <summary>
        /// 行値引行チェック
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        public bool CheckRowDiscount(int salesRowNo)
        {
            bool ret = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row != null)
            {
                if ((row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount) ||
                    (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount)) ret = true;
            }

            return ret;
        }

        /// <summary>
        /// 原単価カラー変更チェック
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        public bool CheckChangeColorForSalesUnitCost(int salesRowNo)
        {
            bool ret = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if ((row != null) && (row.SalesUnitCostTaxExc != 0))
            {
                if (row.SalesUnitCostTaxExc != row.BfUnitCost) ret = true;
            }

            return ret;
        }

        /// <summary>
        /// 売単価カラー変更チェック
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        /// <br>UpdateNote : 2011/07/20 譚洪 Redmine#22829「掛率マスタ/売価率」と「キャンペーン/売価率」が両方ヒットする場合、明細部も水色になりますの対応</br>
        public bool CheckChangeColorForSalesUnitPrice(int salesRowNo)
        {
            bool ret = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if ((row != null) && (row.SalesUnPrcTaxExcFl != 0))
            {
                if (row.SalesUnPrcTaxExcFl != row.BfSalesUnitPrice
                    || row.CampaignCode != 0                          // ADD 2011/07/20
                    || this._campaignObjGoodsSt != null) ret = true;  // ADD 2011/07/20
            }

            return ret;
        }

        // ----- ADD 2011/07/06 ------- >>>>>>>>>
        /// <summary>
        /// 売単価カラー変更チェック（キャンペーン用）
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        /// <br>UpdateNote : 2011/07/06 譚洪 Redmine#22774 キャンペーンにヒットして売価が算出された場合(売価≠0)、色が変わるの対応</br>
        public bool CheckChangeColorForSalesUnitPriceForCampaign(int salesRowNo)
        {
            bool ret = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if ((row != null) && (row.SalesUnPrcTaxExcFl != 0))
            {
                if (row.SalesUnPrcTaxExcFl != row.BfSalesUnitPrice
                    || this._campaignObjGoodsSt != null) ret = true;
            }

            return ret;
        }
        // ----- ADD 2011/07/06 ------- <<<<<<<<<

        /// <summary>
        /// 定価カラー変更チェック
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        public bool CheckChangeColorForListPrice(int salesRowNo)
        {
            bool ret = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if ((row != null) && (row.ListPriceTaxExcFl != 0))
            {
                if (row.ListPriceTaxExcFl != row.BfListPrice) ret = true;
            }

            return ret;
        }

        // --- ADD 2016/01/21 Y.Wakita ---------->>>>>
        /// <summary>
        /// 計上状況チェック処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        public int CheckAlreadyAddUp(int salesRowNo)
        {
            //計上済表示モード
            const int ctAddUpInfo_Def = 0;
            const int ctAddUpInfo_Non = 1;     // 未計上
            const int ctAddUpInfo_Part = 2;    // 一部計上
            const int ctAddUpInfo_Already = 3; // 計上済

            int retAddUpDsp = ctAddUpInfo_Def;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row != null)
            {
                if ((row.SalesSlipNum != ctDefaultSalesSlipNum) &&                          // 売上伝票番号≠"000000000":既存伝票
                    (row.SalesSlipDtlNum != 0) &&                                           // 売上明細通番≠0:既存明細
                    (row.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Sales))    // 売上伝票区分(明細)＝0:売上
                {
                    if (row.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment)
                    {
                        // 受注ステータス＝40:貸出
                        if (row.AlreadyAddUpCnt == 0)
                        {
                            // 計上済数が０の場合→未計上
                            retAddUpDsp = ctAddUpInfo_Non;
                        }
                        else if (row.ShipmentCnt == row.AlreadyAddUpCnt)
                        {
                            // 出荷数＝計上済数の場合→計上済
                            retAddUpDsp = ctAddUpInfo_Already;
                        }
                        else
                        {
                            // 上記以外→一部計上
                            retAddUpDsp = ctAddUpInfo_Part;
                        }
                    }
                    else if (row.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
                    {
                        // 受注ステータス＝20:受注
                        if (row.AlreadyAddUpCnt == 0)
                        {
                            // 計上済数が０の場合→未計上
                            retAddUpDsp = ctAddUpInfo_Non;
                        }
                        else if (row.AcceptAnOrderCnt == row.AlreadyAddUpCnt)
                        {
                            // 受注数＝計上済数の場合→計上済
                            retAddUpDsp = ctAddUpInfo_Already;
                        }
                        else
                        {
                            // 上記以外→一部計上
                            retAddUpDsp = ctAddUpInfo_Part;
                        }
                    }
                }
            }
            return retAddUpDsp;
        }
        // --- ADD 2016/01/21 Y.Wakita ----------<<<<<
        #endregion

        /// <summary>
        /// 売上データの初期インスタンスを生成します。
        /// </summary>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="accRecDivCd"></param>
        /// <param name="salesGoodsCd"></param>
        /// <param name="keepDate"></param>
        /// <param name="keepFooterInfo"></param>
        /// <br>Update Note     : 2009/11/13 李占川</br>
        /// <br>                担当者、受注者、発行者の初期表示内容の変更</br>
        /// <br>Update Note    : 2020/02/24 譚洪</br>
        /// <br>管理番号       : 11570208-00</br>
        /// <br>               : PMKOBETSU-2912消費税税率機能追加対応</br>
        public void CreateSalesSlipInitialData(int acptAnOdrStatus, int accRecDivCd, int salesGoodsCd, bool keepDate, bool keepFooterInfo)
        {
            //------------------------------------------------
            // 売上データ
            //------------------------------------------------
            SalesSlip salesSlip = new SalesSlip();

            // 拠点コード
            salesSlip.SectionCode = this._salesSlipInputInitDataAcs.OwnSectionCode.Trim();
            salesSlip.SectionName = this._salesSlipInputInitDataAcs.OwnSectionName;
            // 売上入力拠点コード
            salesSlip.SalesInpSecCd = this._salesSlipInputInitDataAcs.OwnSectionCode.Trim();
            // 実績計上拠点コード
            salesSlip.ResultsAddUpSecCd = this._salesSlipInputInitDataAcs.OwnSectionCode.Trim();
            salesSlip.ResultsAddUpSecNm = this._salesSlipInputInitDataAcs.OwnSectionName;
            // 更新拠点コード
            salesSlip.UpdateSecCd = this._salesSlipInputInitDataAcs.OwnSectionCode.Trim();

            // 受注ステータス
            salesSlip.AcptAnOdrStatusDisplay = acptAnOdrStatus;

            // 入力担当者(ログイン担当者)
            salesSlip.InputAgenCd = LoginInfoAcquisition.Employee.EmployeeCode.Trim(); ;
            salesSlip.InputAgenNm = this._salesSlipInputInitDataAcs.GetName_FromEmployee(salesSlip.InputAgenCd);
            if (salesSlip.InputAgenNm.Length > 16) salesSlip.InputAgenNm = salesSlip.InputAgenNm.Substring(0, 16);

            // --- DEL 2010/06/02 ---------->>>>> 
            // 担当者(ログイン担当者)
            //this.SettingSalesSlipFromEmployeeInfo(ref salesSlip, LoginInfoAcquisition.Employee.EmployeeCode.Trim());
            // --- DEL 2010/06/02 ----------<<<<<

            //>>>2010/08/06
            //// 受注者
            //if ((this._salesSlipInputConstructionAcs.FrontEmployeeCdValue != null) &&
            //    (!string.IsNullOrEmpty(this._salesSlipInputConstructionAcs.FrontEmployeeCdValue.Trim())) &&
            //    (this._salesSlipInputInitDataAcs.GetEmployee(this._salesSlipInputConstructionAcs.FrontEmployeeCdValue.Trim()) != null))
            //{
            //    salesSlip.FrontEmployeeCd = this._salesSlipInputConstructionAcs.FrontEmployeeCdValue.Trim();
            //}
            //else
            //{
            //    //salesSlip.FrontEmployeeCd = LoginInfoAcquisition.Employee.EmployeeCode.Trim(); // DEL 2009/11/13
            //    salesSlip.FrontEmployeeCd = string.Empty; // ADD 2009/11/13
            //}
            //salesSlip.FrontEmployeeNm = this._salesSlipInputInitDataAcs.GetName_FromEmployee(salesSlip.FrontEmployeeCd);
            //if (salesSlip.FrontEmployeeNm.Length > 16) salesSlip.FrontEmployeeNm = salesSlip.FrontEmployeeNm.Substring(0, 16);

            //// 発行者
            //if ((this._salesSlipInputConstructionAcs.SalesInputCdValue != null) &&
            //    (!string.IsNullOrEmpty(this._salesSlipInputConstructionAcs.SalesInputCdValue.Trim())) &&
            //    (this._salesSlipInputInitDataAcs.GetEmployee(this._salesSlipInputConstructionAcs.SalesInputCdValue.Trim()) != null))

            //{
            //    salesSlip.SalesInputCode = this._salesSlipInputConstructionAcs.SalesInputCdValue.Trim();
            //}
            //else
            //{
            //    //salesSlip.SalesInputCode = LoginInfoAcquisition.Employee.EmployeeCode.Trim();  // DEL 2009/11/13
            //    salesSlip.SalesInputCode = string.Empty; // ADD 2009/11/13
            //}
            //salesSlip.SalesInputName = this._salesSlipInputInitDataAcs.GetName_FromEmployee(salesSlip.SalesInputCode);
            //if (salesSlip.SalesInputName.Length > 16) salesSlip.SalesInputName = salesSlip.SalesInputName.Substring(0, 16);

            // 担当者
            switch (this._salesSlipInputConstructionAcs.EmployeeCdDivValue)
            {
                // ログイン担当者
                case 0:
                    this.SettingSalesSlipFromEmployeeInfo(ref salesSlip, LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                    break;
                // 空白
                case 1:
                    this.SettingSalesSlipFromEmployeeInfo(ref salesSlip, string.Empty);
                    break;
                // 固定値(設定値)
                case 2:
                    this.SettingSalesSlipFromEmployeeInfo(ref salesSlip, this._salesSlipInputConstructionAcs.EmployeeCdValue.Trim());
                    break;
            }

            // 受注者
            switch (this._salesSlipInputConstructionAcs.FrontEmployeeCdDivValue)
            {
                // ログイン担当者
                case 0:
                    Employee emp = this._salesSlipInputInitDataAcs.GetEmployee(LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                    if (emp != null)
                    {
                        salesSlip.FrontEmployeeCd = LoginInfoAcquisition.Employee.EmployeeCode.Trim();  // 担当者コード
                        salesSlip.FrontEmployeeNm = emp.Name;
                        if (salesSlip.FrontEmployeeNm.Length > 16) salesSlip.FrontEmployeeNm = salesSlip.FrontEmployeeNm.Substring(0, 16);
                    }
                    break;
                // 空白
                case 1:
                    salesSlip.FrontEmployeeCd = string.Empty;  // 担当者コード
                    salesSlip.FrontEmployeeNm = string.Empty;  // 担当者名称
                    break;
                // 固定値(設定値)
                case 2:
                    Employee empp = this._salesSlipInputInitDataAcs.GetEmployee(this._salesSlipInputConstructionAcs.FrontEmployeeCdValue.Trim());
                    if (empp != null)
                    {
                        salesSlip.FrontEmployeeCd = this._salesSlipInputConstructionAcs.FrontEmployeeCdValue.Trim();  // 担当者コード
                        salesSlip.FrontEmployeeNm = empp.Name;
                        if (salesSlip.FrontEmployeeNm.Length > 16) salesSlip.FrontEmployeeNm = salesSlip.FrontEmployeeNm.Substring(0, 16);
                    }
                    break;
            }


            // 発行者
            switch (this._salesSlipInputConstructionAcs.SalesInputCdDivValue)
            {
                // ログイン担当者
                case 0:
                    Employee emp = this._salesSlipInputInitDataAcs.GetEmployee(LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                    if (emp != null)
                    {
                        salesSlip.SalesInputCode = LoginInfoAcquisition.Employee.EmployeeCode.Trim();  // 担当者コード
                        salesSlip.SalesInputName = emp.Name;
                        if (salesSlip.SalesInputName.Length > 16) salesSlip.SalesInputName = salesSlip.SalesInputName.Substring(0, 16);
                    }
                    break;
                // 空白
                case 1:
                    salesSlip.SalesInputCode = string.Empty;  // 担当者コード
                    salesSlip.SalesInputName = string.Empty;  // 担当者名称
                    break;
                // 固定値(設定値)
                case 2:
                    Employee empp = this._salesSlipInputInitDataAcs.GetEmployee(this._salesSlipInputConstructionAcs.SalesInputCdValue.Trim());
                    if (empp != null)
                    {
                        salesSlip.SalesInputCode = this._salesSlipInputConstructionAcs.SalesInputCdValue.Trim();  // 担当者コード
                        salesSlip.SalesInputName = empp.Name;
                        if (salesSlip.SalesInputName.Length > 16) salesSlip.SalesInputName = salesSlip.SalesInputName.Substring(0, 16);
                    }
                    break;
            }
            //<<<2010/08/06

            // 売上入力拠点コード
            Employee employee = this._salesSlipInputInitDataAcs.GetEmployee(salesSlip.SalesInputCode);
            if (employee != null) salesSlip.SalesInpSecCd = employee.BelongSectionCode;

            if (!keepDate)
            {
                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)salesSlip.AcptAnOdrStatusDisplay)
                {
                    case SalesSlipInputAcs.AcptAnOdrStatusState.Estimate: // 見積
                    case SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate: // 単価見積
                        {
                            // 売上日
                            salesSlip.SalesDate = DateTime.Today;
                            // 計上日
                            salesSlip.AddUpADate = DateTime.MinValue;
                            // 商品区分(0:商品)
                            salesSlip.SalesGoodsCd = (int)SalesGoodsCd.Goods;
                            break;
                        }
                    case SalesSlipInputAcs.AcptAnOdrStatusState.Sales: // 売上
                        {
                            // 売上日
                            salesSlip.SalesDate = DateTime.Today;
                            // 計上日
                            salesSlip.AddUpADate = DateTime.Today;
                            // 商品区分
                            salesSlip.SalesGoodsCd = salesGoodsCd;
                            break;
                        }
                    case SalesSlipInputAcs.AcptAnOdrStatusState.Shipment: // 出荷
                        {
                            // 売上日
                            salesSlip.SalesDate = DateTime.Today;
                            // 計上日
                            salesSlip.AddUpADate = DateTime.Today;
                            // 商品区分(0:商品)
                            salesSlip.SalesGoodsCd = (int)SalesGoodsCd.Goods;
                            break;
                        }
                }
            }
            else
            {
                salesSlip.SalesDate = (this._salesSlip.SalesDate != DateTime.MinValue) ? this._salesSlip.SalesDate : DateTime.Today;
            }
            this._salesSlipInputInitDataAcs.ConsTaxLayMethod = -1;// ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応
            // 消費税再設定
            double taxRate = 0;
            taxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate);
            this.SettingSalesSlipConsTaxRate(ref salesSlip, taxRate);

            // 伝票検索日
            salesSlip.SearchSlipDate = DateTime.Today;

            // 受注ステータス、見積区分のセット
            SalesSlipInputAcs.SetAcptAnOdrStatusAndEstimateDivideFromDisplay(ref salesSlip);
            // 受注ステータス(表示用)の再設定
            SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

            // 伝票区分表示用(10:掛売上 20:掛返品 30:現金売上 40:現金返品)
            salesSlip.SalesSlipDisplay = 10;

            // 伝票区分、売掛区分のセット
            SalesSlipInputAcs.SetSlipCdAndAccRecDivCdFromDisplay(ref salesSlip);
            // 画面用伝票区分再設定
            SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

            // 総額表示方法区分(0:総額表示しない 1:総額表示する)
            salesSlip.TotalAmountDispWayCd = this._salesSlipInputInitDataAcs.GetAllDefSet().TotalAmountDispWayCd;

            // 消費税転嫁方式(0:伝票単位 1:明細単位 2:請求親 3:請求子 9:非課税)
            salesSlip.ConsTaxLayMethod = this._salesSlipInputInitDataAcs.GetTaxRateSet().ConsTaxLayMethod;

            if (keepFooterInfo)
            {
                salesSlip.SlipNote = this._salesSlip.SlipNote;
                salesSlip.SlipNote2 = this._salesSlip.SlipNote2;
                salesSlip.SlipNote3 = this._salesSlip.SlipNote3;
                salesSlip.RetGoodsReason = this._salesSlip.RetGoodsReason;
                salesSlip.RetGoodsReasonDiv = this._salesSlip.RetGoodsReasonDiv;
                salesSlip.PartySaleSlipNum = this._salesSlip.PartySaleSlipNum;

                salesSlip.AddresseeCode = this._salesSlip.AddresseeCode;
                salesSlip.AddresseeName = this._salesSlip.AddresseeName;
                salesSlip.AddresseeName2 = this._salesSlip.AddresseeName2;
                salesSlip.AddresseePostNo = this._salesSlip.AddresseePostNo;
                salesSlip.AddresseeAddr1 = this._salesSlip.AddresseeAddr1;
                salesSlip.AddresseeAddr3 = this._salesSlip.AddresseeAddr3;
                salesSlip.AddresseeAddr4 = this._salesSlip.AddresseeAddr4;
                salesSlip.AddresseeTelNo = this._salesSlip.AddresseeTelNo;
                salesSlip.AddresseeFaxNo = this._salesSlip.AddresseeFaxNo;

                // 納品区分
                salesSlip.DeliveredGoodsDiv = this._salesSlip.DeliveredGoodsDiv;
                salesSlip.DeliveredGoodsDivNm = this._salesSlipInputInitDataAcs.GetName_FromUserGdBd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_DeliveredGoodsDiv, salesSlip.DeliveredGoodsDiv);
                if (salesSlip.DeliveredGoodsDivNm.Length > 10) salesSlip.DeliveredGoodsDivNm = salesSlip.DeliveredGoodsDivNm.Substring(0, 10);
            }
            else
            {
                // 納品区分
                salesSlip.DeliveredGoodsDiv = this._salesSlipInputInitDataAcs.GetMinCode_FormUserCd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_DeliveredGoodsDiv);
                salesSlip.DeliveredGoodsDivNm = this._salesSlipInputInitDataAcs.GetName_FromUserGdBd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_DeliveredGoodsDiv, salesSlip.DeliveredGoodsDiv);
                if (salesSlip.DeliveredGoodsDivNm.Length > 10) salesSlip.DeliveredGoodsDivNm = salesSlip.DeliveredGoodsDivNm.Substring(0, 10);
            }

            // 売上データキャッシュ処理
            this.Cache(salesSlip);

            // 入金データキャッシュ処理(初期化)
            this.Cache(new SearchDepsitMain(), new SearchDepositAlw());

            // DB読込時売上データキャッシュ処理
            this.CacheDBData(salesSlip);

        }

        /// <summary>
        /// ヘッダ項目戻し処理
        /// </summary>
        /// <param name="srcSalesSlip"></param>
        /// <param name="keepFooterInfo"></param>
        /// <param name="keepCustomer"></param>
        // 2009/09/10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        //public void RevivalHeader(SalesSlip srcSalesSlip, bool keepFooterInfo)
        //public void RevivalHeader(SalesSlip srcSalesSlip, bool keepFooterInfo, bool keepCustomer) // DEL 2010/05/21
        //public void RevivalHeader(SalesSlip srcSalesSlip, bool keepFooterInfo, bool keepCustomer, bool keepSalesDate) //ADD 2010/05/21 // 2010/02/26
        public void RevivalHeader(SalesSlip srcSalesSlip, bool keepFooterInfo, bool keepCustomer, bool keepSalesDate, int customerCode) // 2010/02/26
        // 2009/09/10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        {
            // 拠点コード
            this._salesSlip.SectionCode = srcSalesSlip.SectionCode;
            this._salesSlip.SectionName = srcSalesSlip.SectionName;
            // 売上入力拠点コード
            this._salesSlip.SalesInpSecCd = srcSalesSlip.SalesInpSecCd;
            // 実績計上拠点コード
            this._salesSlip.ResultsAddUpSecCd = srcSalesSlip.ResultsAddUpSecCd;
            this._salesSlip.ResultsAddUpSecNm = srcSalesSlip.ResultsAddUpSecNm;
            // DEL 2015/09/08 zhangll For Redmine #47003---------------------->>>>>>
            //// 更新拠点コード
            //this._salesSlip.UpdateSecCd = srcSalesSlip.UpdateSecCd;
            // DEL 2015/09/08 zhangll For Redmine #47003----------------------<<<<<<

            // 受注ステータス
            this._salesSlip.AcptAnOdrStatusDisplay = srcSalesSlip.AcptAnOdrStatusDisplay;

            // 伝票区分
            this._salesSlip.SalesSlipCd = srcSalesSlip.SalesSlipCd;
            this._salesSlip.AccRecDivCd = srcSalesSlip.AccRecDivCd;
            this._salesSlip.SalesSlipDisplay = srcSalesSlip.SalesSlipDisplay;

            // 入力担当者(ログイン担当者)
            this._salesSlip.InputAgenCd = srcSalesSlip.InputAgenCd;
            this._salesSlip.InputAgenNm = srcSalesSlip.InputAgenNm;

            // 担当者(ログイン担当者)
            //this.SettingSalesSlipFromEmployeeInfo(ref this._salesSlip, srcSalesSlip.SalesEmployeeCd);  // DEL 2010/08/13

            // 受注者
            this._salesSlip.FrontEmployeeCd = srcSalesSlip.FrontEmployeeCd;
            this._salesSlip.FrontEmployeeNm = srcSalesSlip.FrontEmployeeNm;

            // 発行者
            this._salesSlip.SalesInputCode = srcSalesSlip.SalesInputCode;
            this._salesSlip.SalesInputName = srcSalesSlip.SalesInputName;

            // 売上日
            // ----- UPD 2010/05/20 ------------>>>>>
            // ----- UPD 2010/05/21 ------------>>>>>
            //// 伝票日付クリア区分 == 0:システム日付
            //if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipDateClrDivCd == 0)
            //{
            //    this._salesSlip.SalesDate = DateTime.Today;
            //}
            //else
            //{
            //    this._salesSlip.SalesDate = srcSalesSlip.SalesDate;
            //}


            if (keepSalesDate)
            {
                // 伝票日付クリア区分 == 0:システム日付
                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipDateClrDivCd == 0)
                {
                    this._salesSlip.SalesDate = DateTime.Today;
                }
                else
                {
                    this._salesSlip.SalesDate = srcSalesSlip.SalesDate;
                }
            }
            // ----- UPD 2010/05/21 ------------<<<<<

            // ----- UPD 2010/05/20 ------------<<<<<
            // 計上日
            this._salesSlip.AddUpADate = srcSalesSlip.AddUpADate;
            // 商品区分(0:商品)
            this._salesSlip.SalesGoodsCd = srcSalesSlip.SalesGoodsCd;


            CustomerInfo customerInfo = null;
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            SalesSlipInputInitDataAcs.LogWrite("▼得意先マスタＲｅａｄ開始");
            //>>>2010/02/26
            //status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, srcSalesSlip.CustomerCode, true, false, out customerInfo);
            if (customerCode != 0)
            {
                status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, customerCode, true, false, out customerInfo);
            }
            else
            {
                status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, srcSalesSlip.CustomerCode, true, false, out customerInfo);
            }
            //<<<2010/02/26 
            SalesSlipInputInitDataAcs.LogWrite("▲得意先マスタＲｅａｄ終了");

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                // 2009/09/10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //// 得意先情報設定処理
                //this.SettingSalesSlipFromCustomer(ref this._salesSlip, customerInfo);
                //ddd
                if (keepCustomer)
                {
                    // 得意先情報設定処理
                    this.SettingSalesSlipFromCustomer(ref this._salesSlip, customerInfo);
                }
                // 2009/09/10 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                if (!keepFooterInfo)
                {
                    // 納入先情報設定処理
                    //this.SettingSalesSlipAddressee(ref this._salesSlip, customerInfo); // DEL zhaimm 2013/03/18 Redmine#34808
                    this.SettingSalesSlipAddressee(ref this._salesSlip, null); // ADD zhaimm 2013/03/18 Redmine#34808
                }
            }

            // ADD 2010/08/13 --- >>>>
            if (this._salesSlip.CustomerCode == 0)
            {
                this._salesSlip.SalesEmployeeCd = string.Empty;
                this._salesSlip.SalesEmployeeNm = string.Empty;
            }
            else
            {
                // 担当者(ログイン担当者)
                this.SettingSalesSlipFromEmployeeInfo(ref this._salesSlip, srcSalesSlip.SalesEmployeeCd);
            }
            // ADD 2010/08/13 --- <<<<
        }

        #region ●返品関係
        /// <summary>
        /// 返品用の売上データオブジェクトを生成します。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト（ref）</param>
        public void CreateReturnSlipInfo(ref SalesSlip salesSlip)
        {
            if (salesSlip == null) return;

            salesSlip.CreateDateTime = DateTime.MinValue;
            salesSlip.UpdateDateTime = DateTime.MinValue;
            salesSlip.SalesSlipCd = 1;										    // 売上伝票区分 ← 0:売上 1:返品
            salesSlip.InputMode = ctINPUTMODE_SalesSlip_Return;					// 入力モード ← 返品入力モード
            salesSlip.SalesSlipNum = ctDefaultSalesSlipNum;         // 売上伝票番号
            salesSlip.CustSlipNo = 0;   //得意先伝票番号    // ADD 丁建雄 2012/02/06 Redmine#28336
        }

        //>>>2011/02/01
        /// <summary>
        /// 返品用の売上明細データテーブルを生成します。
        /// </summary>
        public void CreateReturnSlipDetailInfo()
        {
            this.CreateReturnSlipDetailInfo(null, this._salesDetailDataTable);
        }
        //<<<2011/02/01

        /// <summary>
        /// 返品用の売上明細データテーブルを生成します。
        /// </summary>
        public void CreateReturnSlipDetailInfo(List<StockWork> stockWorkList)
        {
            this.CreateReturnSlipDetailInfo(stockWorkList, this._salesDetailDataTable);
        }

        /// <summary>
        /// 返品用の売上明細データテーブルを生成します。（オーバーロード）
        /// </summary>
        /// <param name="stockWorkList"></param>
        /// <param name="salesDetailDataTable"></param>
        /// <br>Update Note: 2010/01/27 張凱 返品不可設定の機能追加(４次改良)対応</br>
        public void CreateReturnSlipDetailInfo(List<StockWork> stockWorkList, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            //返品上限数マスタリスト
            ArrayList returnUpperStList; //ADD 2010/01/27
            //返品上限数マスタ
            GoodsNotReturnWork returnUpperSt;//ADD 2010/01/27

            for (int i = 0; i < salesDetailDataTable.Count; i++)
            {
                int sign = -1;
                SalesInputDataSet.SalesDetailRow row = salesDetailDataTable[i];

                // --- ADD 2010/01/27 -------------->>>>>
                double shipmentCnt = 0;
                //返品上限数マスタリスト取得
                GetReturnUpperStList(this._enterpriseCode, row.SalesSlipNum, out returnUpperStList);
                //返品上限数マスタ
                GetReturnUpperSt(row.SalesSlipDtlNum, returnUpperStList, out returnUpperSt);
                if (returnUpperSt != null && returnUpperSt.UpdateDateTime != DateTime.MinValue)
                {
                    if (row.AcptAnOdrRemainCnt < (returnUpperSt.RetUpperCnt - (row.ShipmentCnt - row.AcptAnOdrRemainCnt)))
                    {
                        shipmentCnt = row.AcptAnOdrRemainCnt;
                    }
                    else
                    {
                        if ((returnUpperSt.RetUpperCnt - (row.ShipmentCnt - row.AcptAnOdrRemainCnt)) < 0)
                        {
                            shipmentCnt = 0;
                        }
                        else
                        {
                            shipmentCnt = returnUpperSt.RetUpperCnt - (row.ShipmentCnt - row.AcptAnOdrRemainCnt);
                        }
                    }
                }
                // --- ADD 2010/01/27 --------------<<<<<

                row.AcptAnOdrStatusSrc = row.AcptAnOdrStatus;   // 受注ステータス(元) ← 呼出伝票の受注ステータス
                row.SalesSlipDtlNumSrc = row.SalesSlipDtlNum;   // 明細通番(元) ← 呼出伝票の明細通番
                row.SalesSlipNum = ctDefaultSalesSlipNum;         // 売上伝票番号
                row.CommonSeqNo = 0;							// 共通通番 ← 0
                row.SalesSlipDtlNum = 0;                        // 明細通番
                row.SupplierFormalSync = -1;                     // 仕入形式(同時)
                row.StockSlipDtlNumSync = 0;                    // 明細通番(同時)

                row.AddUpEnableCnt = 0;
                row.AlreadyAddUpCnt = 0;

                if (row.ShipmentCnt != 0)
                {
                    // --- UPD 2010/01/27 -------------->>>>>
                    //row.ShipmentCnt = row.AcptAnOdrRemainCnt * -1; // 出荷数←残
                    ////row.ShipmentCntDefault = Math.Abs(row.ShipmentCnt); // 出荷数(初期値)
                    //row.ShipmentCntDefault = row.ShipmentCnt; // 出荷数(初期値)
                    //row.ShipmentCntDisplay = row.ShipmentCnt * sign; // 出荷数(表示)←残
                    //row.AddUpEnableCnt = row.ShipmentCnt; // 計上可能数←残

                    if (returnUpperSt != null && returnUpperSt.UpdateDateTime != DateTime.MinValue)
                    {
                        row.ShipmentCnt = shipmentCnt * -1; // 出荷数←残
                        row.ShipmentCntDefault = shipmentCnt * -1; // 出荷数(初期値)
                        row.ShipmentCntDisplay = shipmentCnt; // 出荷数(表示)←残
                        row.AddUpEnableCnt = shipmentCnt * -1; // 計上可能数←残
                    }
                    else
                    {
                        row.ShipmentCnt = row.AcptAnOdrRemainCnt * -1; // 出荷数←残
                        //row.ShipmentCntDefault = Math.Abs(row.ShipmentCnt); // 出荷数(初期値)
                        row.ShipmentCntDefault = row.ShipmentCnt; // 出荷数(初期値)
                        row.ShipmentCntDisplay = row.ShipmentCnt * sign; // 出荷数(表示)←残
                        row.AddUpEnableCnt = row.ShipmentCnt; // 計上可能数←残
                    }
                    // --- UPD 2010/01/27 --------------<<<<<

                    row.AcceptAnOrderCntDisplay = 0; // 受注数←0
                    row.AcceptAnOrderCnt = 0; // 受注数←0
                    row.AcceptAnOrderCntDefault = 0;
                    row.AcptAnOdrAdjustCnt = 0; // 受注調整数←0
                    row.AcptAnOdrRemainCnt = 0; // 受注残数←0

                    row.EditStatus = ctEDITSTATUS_ShipmentCountOnly;

                    row.CanTaxDivChange = false;
                }
                else
                {
                    // 行値引きの場合、金額補正
                    if (row.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount)
                    {
                        row.SalesMoneyTaxExc = row.SalesMoneyTaxExc * sign;
                        row.SalesMoneyTaxInc = row.SalesMoneyTaxInc * sign;
                    }
                }

                // メモ制御
                this.MemoInfoAdjust(ref row);
            }

            // 現在庫数調整
            this.SalesDetailStockInfoAdjust();

        }

        /// <summary>
        /// 返品上限数マスタリストを取得します。
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="salesSlipNum">売上伝票番号</param>
        /// <param name="returnUpperStList">返品上限数データクラスリスト</param>
        /// <remarks>
        /// <br>Note       : 返品上限数マスタリストを取得します。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2010/01/27</br> 
        /// </remarks>
        public void GetReturnUpperStList(string enterpriseCode, string salesSlipNum, out ArrayList returnUpperStList)
        {
            returnUpperStList = null;
            string retMessage = string.Empty;

            _goodsNotReturnAcs.ReadDBData(enterpriseCode, salesSlipNum, out returnUpperStList, out retMessage);
        }

        /// <summary>
        /// 返品上限数マスタを取得します。
        /// </summary>
        /// <param name="salesSlipDtlNum">売上明細通番</param>
        /// <param name="returnUpperStList">返品上限数データクラスリスト</param>
        /// <param name="returnUpperSt">返品上限数データクラス</param>
        /// <remarks>
        /// <br>Note       : 返品上限数マスタを取得します。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2010/01/27</br> 
        /// </remarks>
        public void GetReturnUpperSt(Int64 salesSlipDtlNum, ArrayList returnUpperStList, out GoodsNotReturnWork returnUpperSt)
        {
            returnUpperSt = null;
            if (returnUpperStList == null) return;
            foreach (GoodsNotReturnWork goodsNotReturnWork in returnUpperStList)
            {
                if (goodsNotReturnWork.SalesSlipDtlNum == salesSlipDtlNum)
                {
                    returnUpperSt = goodsNotReturnWork;
                    return;
                }
            }
        }

        /// <summary>
        /// 指定された売上データに対して返品を行うことが出来るかどうかをチェックします。
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailList"></param>
        /// <param name="message"></param>
        /// <returns>true:返品伝票情報生成可 false:返品伝票情報生成不可</returns>
        /// <br>Update Note: 2010/01/27 張凱 返品不可設定の機能追加(４次改良)対応</br>
        public bool CanCreateReturnSlipInfo(SalesSlip salesSlip, List<SalesDetail> salesDetailList, out string message)
        {
            message = string.Empty;

            if (salesSlip.SalesSlipCd == 1) // 売上伝票区分が「1:返品」の場合
            {
                message = "該当する売上データは「返品伝票」の為、選択できません。";
                return false;
            }

            if (salesSlip.DebitNoteDiv == 1) // 赤伝
            {
                message = "該当する売上データは「赤伝」の為、返品処理を行えません。";
                return false;
            }
            else if (salesSlip.DebitNoteDiv == 2) // 元黒
            {
                message = "該当する売上データはすでに「赤伝」が発行されている為、返品処理を行えません。";
                return false;
            }
            else if (!CheckTransStopDate(salesSlip.TransStopDate, salesSlip.SalesDate))
            {
                message = "取引中止中の為、返品処理を行えません。";
                return false;
            }

            switch ((SalesGoodsCd)salesSlip.SalesGoodsCd)
            {
                case SalesGoodsCd.ConsTaxAdjust:
                case SalesGoodsCd.AccRecConsTaxAdjust:
                    message = "該当する売上データは「消費税調整伝票」の為、返品処理を行えません。";
                    return false;
                case SalesGoodsCd.BalanceAdjust:
                case SalesGoodsCd.AccRecBalanceAdjust:
                    message = "該当する売上データは「残高調整伝票」の為、返品処理を行えません。";
                    return false;
                default:
                    break;
            }

            if (salesDetailList != null)
            {
                if (salesDetailList.Count == 0)
                {
                    message = "返品対象となる明細が存在しない為、選択できません。";
                    return false;
                }

                bool isTrust = false;
                bool isTarget = false;
                // --- ADD 2010/01/27 -------------->>>>>
                //返品上限数マスタリスト
                ArrayList returnUpperStList;
                //返品上限数マスタ
                GoodsNotReturnWork returnUpperSt;
                //返品上限数マスタリスト取得
                GetReturnUpperStList(this._enterpriseCode, salesSlip.SalesSlipNum, out returnUpperStList);
                // --- ADD 2010/01/27 --------------<<<<<

                foreach (SalesDetail salesDetail in salesDetailList)
                {
                    if ((salesDetail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Work) ||
                        (salesDetail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Subtotal) ||
                        (salesDetail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Annotation) ||
                        ((salesDetail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Discount) &&
                         (salesDetail.ShipmentCnt == 0)))
                    {
                    }
                    else
                    {
                        isTarget = true;
                    }

                    // --- UPD 2010/01/27 -------------->>>>>
                    //if (salesDetail.AcptAnOdrRemainCnt != 0)
                    //{
                    //    isTrust = true;
                    //}

                    double shipmentCnt = 0;
                    //返品上限数マスタ
                    GetReturnUpperSt(salesDetail.SalesSlipDtlNum, returnUpperStList, out returnUpperSt);
                    if (returnUpperSt != null && returnUpperSt.UpdateDateTime != DateTime.MinValue)
                    {
                        if (salesDetail.AcptAnOdrRemainCnt < (returnUpperSt.RetUpperCnt - (salesDetail.ShipmentCnt - salesDetail.AcptAnOdrRemainCnt)))
                        {
                            shipmentCnt = salesDetail.AcptAnOdrRemainCnt;
                        }
                        else
                        {
                            if ((returnUpperSt.RetUpperCnt - (salesDetail.ShipmentCnt - salesDetail.AcptAnOdrRemainCnt)) < 0)
                            {
                                shipmentCnt = 0;
                            }
                            else
                            {
                                shipmentCnt = returnUpperSt.RetUpperCnt - (salesDetail.ShipmentCnt - salesDetail.AcptAnOdrRemainCnt);
                            }
                        }

                        if (shipmentCnt != 0)
                        {
                            isTrust = true;
                        }
                    }
                    else
                    {
                        if (salesDetail.AcptAnOdrRemainCnt != 0)
                        {
                            isTrust = true;
                        }
                    }
                    // --- UPD 2010/01/27 --------------<<<<<
                }
                if (!isTarget)
                {
                    message = "返品対象外となる明細を含む為、選択できません。";
                    return false;
                }
                if (!isTrust)
                {
                    message = "該当する売上データは全て「返品」もしくは「計上」が発生している為、選択できません。";
                    return false;
                }
            }


            return true;
        }
        #endregion

        #region ●赤伝関係
        /// <summary>
        /// 赤伝用の売上データオブジェクトを生成します。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト（ref）</param>
        public void CreateRedSlipInfo(ref SalesSlip salesSlip)
        {
            if (salesSlip == null) return;

            salesSlip.CreateDateTime = DateTime.MinValue;
            salesSlip.UpdateDateTime = DateTime.MinValue;

            // --- ADD 2012/07/03 No.635 Y.Wakita ---------->>>>>
            salesSlip.SalesDate = DateTime.Today;                               // 売上日 ← 入力日
            // --- ADD 2012/07/03 No.635 Y.Wakita ----------<<<<<
            salesSlip.SalesSlipCd = 0;										    // 売上伝票区分 ← 0:売上
            salesSlip.InputMode = ctINPUTMODE_SalesSlip_Red;					// 入力モード ← 赤伝入力モード
            salesSlip.DebitNLnkSalesSlNum = salesSlip.SalesSlipNum;             // 赤黒連結売上伝票番号 ← 元黒の売上伝票番号 
            salesSlip.SalesSlipNum = ctDefaultSalesSlipNum;	    				// 売上伝票番号 ← 0
            salesSlip.DebitNoteDiv = 1;											// 赤伝区分 ← 赤伝
            salesSlip.CustSlipNo = 0;   //得意先伝票番号    // ADD 丁建雄 2012/02/06 Redmine#28336
        }

        /// <summary>
        /// 赤伝用の仕入明細データテーブルを生成します。
        /// </summary>
        public void CreateRedSlipDetailInfo(List<StockWork> stockWorkList)
        {
            this.CreateRedSlipDetailInfo(stockWorkList, this._salesDetailDataTable);
        }

        /// <summary>
        /// 赤伝用の売上明細データテーブルを生成します。（オーバーロード）
        /// </summary>
        /// <param name="stockWorkList"></param>
        /// <param name="salesDetailDataTable"></param>
        public void CreateRedSlipDetailInfo(List<StockWork> stockWorkList, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            for (int i = 0; i < salesDetailDataTable.Count; i++)
            {
                int sign = -1;
                SalesInputDataSet.SalesDetailRow row = salesDetailDataTable[i];
                row.AcptAnOdrStatusSrc = row.AcptAnOdrStatus;   // 受注ステータス(元) ← 呼出伝票の受注ステータス
                row.SalesSlipDtlNumSrc = row.SalesSlipDtlNum;   // 明細通番(元) ← 呼出伝票の明細通番
                row.SalesSlipNum = ctDefaultSalesSlipNum;         // 売上伝票番号
                row.SalesSlipDtlNum = 0;                        // 明細通番
                row.SupplierFormalSync = -1;                     // 仕入形式(同時)
                row.StockSlipDtlNumSync = 0;                    // 明細通番(同時)

                row.AlreadyAddUpCnt = 0; // 計上済数量

                if (row.ShipmentCnt != 0)
                {
                    row.ShipmentCnt = row.ShipmentCnt * sign;		// 出荷数×-1
                    row.AddUpEnableCnt = row.ShipmentCnt; // 計上可能数
                    row.ShipmentCntDisplay = row.ShipmentCnt;
                    row.ShipmentCntDefault = row.ShipmentCnt;

                    row.AcceptAnOrderCntDisplay = 0;
                    row.AcceptAnOrderCnt = 0; // 受注数
                    row.AcceptAnOrderCntDefault = 0;
                    row.AcptAnOdrAdjustCnt = 0; // 受注調整数
                    row.AcptAnOdrRemainCnt = 0; // 受注残数

                    row.EditStatus = ctEDITSTATUS_AllDisable;
                    row.CanTaxDivChange = false;
                }
                else
                {
                    // 行値引きの場合、金額補正
                    if (row.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount)
                    {
                        row.SalesMoneyTaxExc = row.SalesMoneyTaxExc * sign;
                        row.SalesMoneyTaxInc = row.SalesMoneyTaxInc * sign;
                    }
                }

                // メモ制御
                this.MemoInfoAdjust(ref row);
            }

            // 現在庫数調整
            this.SalesDetailStockInfoAdjust();

        }

        /// <summary>
        /// 指定された売上データに対して赤伝を行うことが出来るかどうかをチェックします。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データクラスリスト</param>
        /// <param name="message">メッセージ（out）</param>
        /// <returns>true:赤伝票情報生成可 false:赤伝票情報生成不可</returns>
        public bool CanCreateRedSlipInfo(SalesSlip salesSlip, List<SalesDetail> salesDetailList, out string message)
        {
            message = string.Empty;

            if (salesSlip.SalesSlipCd == 1) // 売上伝票区分が「1:返品」の場合
            {
                message = "該当する売上データは「返品伝票」の為、選択できません。";
                return false;
            }

            if (salesSlip.DebitNoteDiv == 1) // 赤伝
            {
                message = "該当する売上データは「赤伝」の為、返品処理を行えません。";
                return false;
            }
            else if (salesSlip.DebitNoteDiv == 2) // 元黒
            {
                message = "該当する売上データはすでに「赤伝」が発行されている為、返品処理を行えません。";
                return false;
            }
            else if (!CheckTransStopDate(salesSlip.TransStopDate, salesSlip.SalesDate))
            {
                message = "取引中止中の為、赤伝処理を行えません。";
                return false;
            }

            switch ((SalesGoodsCd)salesSlip.SalesGoodsCd)
            {
                case SalesGoodsCd.ConsTaxAdjust:
                case SalesGoodsCd.AccRecConsTaxAdjust:
                    message = "該当する売上データは「消費税調整伝票」の為、返品処理を行えません。";
                    return false;
                case SalesGoodsCd.BalanceAdjust:
                case SalesGoodsCd.AccRecBalanceAdjust:
                    message = "該当する売上データは「残高調整伝票」の為、返品処理を行えません。";
                    return false;
                default:
                    break;
            }

            switch ((SalesSlipInputAcs.AcptAnOdrStatusState)salesSlip.AcptAnOdrStatus)
            {
                case AcptAnOdrStatusState.Estimate:
                    message = "該当する売上データは「見積伝票」の為、赤伝処理を行えません。";
                    return false;
                case AcptAnOdrStatusState.UnitPriceEstimate:
                    message = "該当する売上データは「見積伝票」の為、赤伝処理を行えません。";
                    return false;
                case AcptAnOdrStatusState.AcceptAnOrder:
                    message = "該当する売上データは「受注伝票」の為、赤伝処理を行えません。";
                    return false;
                case AcptAnOdrStatusState.Sales:
                    break;
                case AcptAnOdrStatusState.Shipment:
                    message = "該当する売上データは「出荷伝票」の為、赤伝処理を行えません。";
                    return false;
            }

            if (salesDetailList != null)
            {
                bool isTrust = false;
                bool isTarget = false;

                foreach (SalesDetail salesDetail in salesDetailList)
                {
                    if ((salesDetail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Work) ||
                        (salesDetail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Subtotal) ||
                        (salesDetail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Annotation) ||
                        ((salesDetail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Discount) &&
                         (salesDetail.ShipmentCnt == 0)))
                    {
                    }
                    else
                    {
                        isTarget = true;
                    }

                    if (salesDetail.ShipmentCnt != salesDetail.AcptAnOdrRemainCnt)
                    {
                        isTrust = true;
                    }
                }

                if (isTrust)
                {
                    message = "赤伝対象となる明細が存在しない為、選択できません。";
                    return false;
                }
                if (!isTarget)
                {
                    message = "赤伝対象となる明細が存在しない為、選択できません。";
                    return false;
                }
            }

            return true;
        }
        #endregion

        #region ●出荷計上関係
        /// <summary>
        /// 出荷計上用の売上データオブジェクトを生成します。
        /// </summary>
        /// <param name="stockSlip">仕入データオブジェクト</param>
        public void CreateShipmentAddUpInfo(ref SalesSlip salesSlip)
        {
            if (salesSlip == null) return;

            salesSlip.CreateDateTime = DateTime.MinValue;
            salesSlip.UpdateDateTime = DateTime.MinValue;
            salesSlip.SalesSlipNum = ctDefaultSalesSlipNum;// 売上伝票番号
            salesSlip.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales;// 受注ステータス(30:売上)
            salesSlip.SalesDate = DateTime.Today;// 売上日
            salesSlip.AddUpADate = DateTime.Today;// 計上日
            salesSlip.InputMode = ctINPUTMODE_SalesSlip_ShipmentAddUp;			// 入力モード ← 出荷計上入力モード
        }

        /// <summary>
        /// 出荷計上用の売上明細データテーブルを生成します。
        /// </summary>
        public void CreateShipmentAddUpDetailInfo(List<StockWork> stockWorkList)
        {
            this.CreateShipmentAddUpDetailInfo(stockWorkList, this._salesDetailDataTable);
        }

        /// <summary>
        /// 出荷計上用の売上明細データテーブルを生成します。（オーバーロード）
        /// </summary>
        /// <param name="stockWorkList"></param>
        /// <param name="salesDetailDataTable"></param>
        public void CreateShipmentAddUpDetailInfo(List<StockWork> stockWorkList, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            for (int i = 0; i < salesDetailDataTable.Count; i++)
            {
                SalesInputDataSet.SalesDetailRow row = salesDetailDataTable[i];

                row.AcptAnOdrStatusSrc = row.AcptAnOdrStatus; // 受注ステータス(元)←元伝票受注ステータス
                row.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales; // 受注ステータス
                row.SalesSlipDtlNumSrc = row.SalesSlipDtlNum; // 明細通番(元)←元伝票明細通番
                row.SalesSlipNum = ctDefaultSalesSlipNum;
                row.SalesSlipDtlNum = 0; // 売上明細通番
                row.SupplierFormalSync = -1; // 仕入形式(同時)
                row.StockSlipDtlNumSync = 0; // 仕入明細通番(同時)

                if (row.ShipmentCntDisplay != 0)
                {
                    row.ShipmentCnt = row.AcptAnOdrRemainCnt;		// 出荷数 ← 受注残数
                    row.ShipmentCntDisplay = row.ShipmentCnt;		// 数量 ← 受注残数
                    row.ShipmentCntDefault = row.ShipmentCnt;		// 数量初期値 ← 受注残数
                    row.AddUpEnableCnt = row.ShipmentCnt;			// 計上可能数 ← 受注残数
                    row.AlreadyAddUpCnt = 0;						// 計上済み数量 ← 0

                    row.AcceptAnOrderCntDisplay = 0;    // 受注数
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;    // 受注数
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;    // 受注数
                    row.AcptAnOdrAdjustCnt = 0;						// 受注調整数
                    row.AcptAnOdrRemainCnt = 0;						// 受注残数

                    row.EditStatus = ctEDITSTATUS_AddUpNew;

                    //>>>2012/05/02
                    row.SupplierCdForStock = row.RentSyncSupplier;
                    row.StockDate = row.RentSyncStockDate;
                    row.PartySalesSlipNum = row.RentSyncSupSlipNo;

                    #region ●仕入情報設定
                    this.SettingStockTempInfo(row.SalesRowNo);
                    StockTemp stockTemp = new StockTemp();
                    if (this._salesSlipStockInfoInputAcs.StockTemp != null)
                    {
                        stockTemp = this._salesSlipStockInfoInputAcs.StockTemp.Clone();
                    }

                    Supplier supplier;
                    int status = this._supplierAcs.Read(out supplier, this._enterpriseCode, row.RentSyncSupplier);
                    // 仕入先情報設定
                    this.SettingSalesDetailSupplierInfo(row.SalesRowNo, supplier);
                    // 仕入先情報設定(仕入情報)
                    this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplier(ref stockTemp, supplier);

                    stockTemp.StockDate = row.RentSyncStockDate;
                    // 計上日の再セット
                    this._salesSlipStockInfoInputAcs.SettingAddUpDate(ref stockTemp);

                    stockTemp.PartySaleSlipNum = row.RentSyncSupSlipNo;

                    this._salesSlipStockInfoInputAcs.Cache(stockTemp);
                    #endregion
                    //<<<2012/05/02
                }


                // メモ制御
                this.MemoInfoAdjust(ref row);
            }

            // 現在庫数調整
            this.SalesDetailStockInfoAdjust();

        }

        /// <summary>
        /// 指定された出荷データに対して出荷計上を行うことが出来るかどうかをチェックします。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データリスト</param>
        /// <param name="message">メッセージ（out）</param>
        /// <returns>true:出荷計上情報生成可 false:出荷計上生成不可</returns>
        public bool CanCreateShipmentAddUpInfo(SalesSlip salesSlip, List<SalesDetail> salesDetailList, out string message)
        {
            message = string.Empty;

            if (salesSlip.SalesSlipCd == 1) // 売上伝票区分が「1:返品」の場合
            {
                message = "該当するデータは「返品伝票」の為、貸出計上処理を行えません。";
                return false;
            }

            if (salesSlip.DebitNoteDiv == 1)
            {
                message = "該当するデータは「赤伝」の為、貸出計上処理を行えません。";
                return false;
            }
            else if (salesSlip.DebitNoteDiv == 2)
            {
                message = "該当するデータはすでに「赤伝」が発行されている為、貸出計上処理を行えません。";
                return false;
            }
            else if (!CheckTransStopDate(salesSlip.TransStopDate, salesSlip.ShipmentDay))
            {
                message = "取引中止中の為、貸出計上処理を行えません。";
                return false;
            }

            if (salesDetailList != null)
            {
                bool isTrust = false;

                foreach (SalesDetail salesDetail in salesDetailList)
                {
                    if (salesDetail.AcptAnOdrRemainCnt != 0)
                    {
                        isTrust = true;
                        break;
                    }
                }

                if (!isTrust)
                {
                    message = "該当する売上データは全て「返品」もしくは「貸出計上」されている為、選択できません。";
                    return false;
                }
            }

            return true;

        }
        #endregion

        #region ●受注計上関係
        /// <summary>
        /// 受注計上用の売上データオブジェクトを生成します。
        /// </summary>
        /// <param name="stockSlip">仕入データオブジェクト</param>
        public void CreateAcceptAnOrderAddUpInfo(ref SalesSlip salesSlip)
        {
            if (salesSlip == null) return;

            salesSlip.CreateDateTime = DateTime.MinValue;
            salesSlip.UpdateDateTime = DateTime.MinValue;
            salesSlip.SalesSlipNum = ctDefaultSalesSlipNum;// 売上伝票番号
            salesSlip.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales;// 受注ステータス(30:売上)
            salesSlip.SalesDate = DateTime.Today;// 売上日
            salesSlip.AddUpADate = DateTime.Today;// 計上日
            salesSlip.InputMode = ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp;			// 入力モード ← 受注計上入力モード
        }

        /// <summary>
        /// 受注計上用の売上明細データテーブルを生成します。
        /// </summary>
        public void CreateAcceptAnOrderAddUpDetailInfo(List<StockWork> stockWorkList)
        {
            this.CreateAcceptAnOrderAddUpDetailInfo(stockWorkList, this._salesDetailDataTable, this.StockTempDataTable);
        }

        /// <summary>
        /// 受注計上用の売上明細データテーブルを生成します。（オーバーロード）
        /// </summary>
        /// <param name="stockWorkList"></param>
        /// <param name="salesDetailDataTable"></param>
        /// <param name="stockTempDataTable"></param>
        public void CreateAcceptAnOrderAddUpDetailInfo(List<StockWork> stockWorkList, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable, SalesInputDataSet.StockTempDataTable stockTempDataTable)
        {
            for (int i = 0; i < salesDetailDataTable.Count; i++)
            {
                SalesInputDataSet.SalesDetailRow row = salesDetailDataTable[i];

                row.AcptAnOdrStatusSrc = row.AcptAnOdrStatus; // 受注ステータス(元)←元伝票受注ステータス
                row.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales; // 受注ステータス
                row.SalesSlipDtlNumSrc = row.SalesSlipDtlNum; // 明細通番(元)←元伝票明細通番
                row.SalesSlipNum = ctDefaultSalesSlipNum;
                row.SalesSlipDtlNum = 0; // 売上明細通番
                row.SupplierFormalSync = -1; // 仕入形式(同時)
                row.StockSlipDtlNumSync = 0; // 仕入明細通番(同時)

                if (row.AcceptAnOrderCntDisplay != 0)
                {
                    row.ShipmentCnt = row.AcptAnOdrRemainCnt;		// 出荷数 ← 受注残数
                    row.ShipmentCntDisplay = row.ShipmentCnt;		// 数量 ← 受注残数
                    row.ShipmentCntDefault = row.ShipmentCnt;		// 数量初期値 ← 受注残数
                    row.AddUpEnableCnt = row.ShipmentCnt;			// 計上可能数 ← 受注残数
                    row.AlreadyAddUpCnt = 0;						// 計上済み数量 ← 0

                    row.AcceptAnOrderCntDisplay = 0;    // 受注数
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;    // 受注数
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;    // 受注数
                    row.AcptAnOdrAdjustCnt = 0;						// 受注調整数
                    row.AcptAnOdrRemainCnt = 0;						// 受注残数

                    row.EditStatus = ctEDITSTATUS_AddUpNew;

                    if (stockTempDataTable.Count != 0)
                    {
                        SalesInputDataSet.StockTempRow stockTempRow = stockTempDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);
                        if (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order)
                        {
                            stockTempRow.SupplierFormalSrc = stockTempRow.SupplierFormal;
                            stockTempRow.StockSlipDtlNumSrc = stockTempRow.StockSlipDtlNum;
                            stockTempRow.SupplierSlipNo = ctDefaultSupplierSlipNo;
                            stockTempRow.StockSlipDtlNum = 0;
                            stockTempRow.AcptAnOdrStatusSync = 0;
                            stockTempRow.SalesSlipDtlNumSync = 0;

                            stockTempRow.StockDate = stockTempRow.OrderDataCreateDate;
                            stockTempRow.ArrivalGoodsDay = stockTempRow.OrderDataCreateDate;
                            stockTempRow.EditStatus = ctEDITSTATUS_AddUpNew;
                        }
                    }

                    // メモ制御
                    this.MemoInfoAdjust(ref row);
                }
            }

            // 現在庫数調整
            this.SalesDetailStockInfoAdjust();

        }

        /// <summary>
        /// 指定された受注データに対して受注計上を行うことが出来るかどうかをチェックします。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データリスト</param>
        /// <param name="uoeOrderDtlWorkList">UOE発注データワークオブジェクトリスト</param>
        /// <param name="message">メッセージ</param>
        /// <returns>true:受注計上情報生成可 false:受注計上生成不可</returns>
        public bool CanCreateAcceptAnOrderAddUpInfo(SalesSlip salesSlip, List<SalesDetail> salesDetailList, List<UOEOrderDtlWork> uoeOrderDtlWorkList, out string message)
        {
            message = string.Empty;

            if (salesSlip.SalesSlipCd == 1) // 売上伝票区分が「1:返品」の場合
            {
                message = "該当するデータは「返品伝票」の為、受注計上処理を行えません。";
                return false;
            }

            if (salesSlip.DebitNoteDiv == 1)
            {
                message = "該当するデータは「赤伝」の為、受注計上処理を行えません。";
                return false;
            }
            else if (salesSlip.DebitNoteDiv == 2)
            {
                message = "該当するデータはすでに「赤伝」が発行されている為、受注計上処理を行えません。";
                return false;
            }
            else if (!CheckTransStopDate(salesSlip.TransStopDate, salesSlip.SalesDate))
            {
                message = "取引中止中の為、受注計上処理を行えません。";
                return false;
            }

            if (salesDetailList != null)
            {
                bool isTrust = false;

                foreach (SalesDetail salesDetail in salesDetailList)
                {
                    if (salesDetail.AcptAnOdrRemainCnt != 0)
                    {
                        isTrust = true;
                        break;
                    }
                }

                if (!isTrust)
                {
                    message = "該当する売上データは全て「返品」もしくは「受注計上」されている為、選択できません。";
                    return false;
                }
            }

            if ((salesDetailList != null) && (uoeOrderDtlWorkList != null))
            {
                bool isTrust = false;

                foreach (SalesDetail salesDetail in salesDetailList)
                {
                    UOEOrderDtlWork retUOEOrderDtlWork = uoeOrderDtlWorkList.Find(
                        delegate(UOEOrderDtlWork uoeOrderDtlWork)
                        {
                            if ((uoeOrderDtlWork.AcptAnOdrStatus == salesDetail.AcptAnOdrStatus) &&
                                (uoeOrderDtlWork.SalesSlipDtlNum == salesDetail.SalesSlipDtlNum))
                            {
                                return true;
                            }
                            else
                            {
                                return false;
                            }
                        }
                    );

                    if ((retUOEOrderDtlWork == null) ||
                        (retUOEOrderDtlWork != null) && (retUOEOrderDtlWork.DataSendCode == 9))
                    {
                        isTrust = true;
                        break;
                    }
                }

                if (!isTrust)
                {
                    message = "該当する売上データは全て「発注選択」されている為、選択できません。";
                    return false;
                }
            }

            return true;

        }
        #endregion

        #region ●見積計上関係
        /// <summary>
        /// 見積計上用の売上データオブジェクトを生成します。
        /// </summary>
        /// <param name="stockSlip">仕入データオブジェクト</param>
        public void CreateEstimateAddUpInfo(ref SalesSlip salesSlip)
        {
            if (salesSlip == null) return;

            salesSlip.CreateDateTime = DateTime.MinValue;
            salesSlip.UpdateDateTime = DateTime.MinValue;
            salesSlip.SalesSlipNum = ctDefaultSalesSlipNum;// 売上伝票番号
            salesSlip.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales;// 受注ステータス(30:売上)
            salesSlip.SalesDate = DateTime.Today;// 売上日
            salesSlip.AddUpADate = DateTime.Today;// 計上日
            salesSlip.InputMode = ctINPUTMODE_SalesSlip_EstimateAddUp;			// 入力モード ← 見積計上入力モード
        }

        /// <summary>
        /// 見積計上用の売上明細データテーブルを生成します。
        /// </summary>
        public void CreateEstimateAddUpDetailInfo(List<StockWork> stockWorkList)
        {
            this.CreateEstimateAddUpDetailInfo(stockWorkList, this._salesDetailDataTable);
        }

        /// <summary>
        /// 見積計上用の売上明細データテーブルを生成します。（オーバーロード）
        /// </summary>
        /// <param name="stockWorkList"></param>
        /// <param name="salesDetailDataTable"></param>
        public void CreateEstimateAddUpDetailInfo(List<StockWork> stockWorkList, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            for (int i = 0; i < salesDetailDataTable.Count; i++)
            {
                SalesInputDataSet.SalesDetailRow row = salesDetailDataTable[i];

                row.AcptAnOdrStatusSrc = row.AcptAnOdrStatus; // 受注ステータス(元)←元伝票受注ステータス
                row.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales; // 受注ステータス
                row.SalesSlipDtlNumSrc = row.SalesSlipDtlNum; // 明細通番(元)←元伝票明細通番
                row.SalesSlipNum = ctDefaultSalesSlipNum;
                row.SalesSlipDtlNum = 0; // 売上明細通番
                row.SupplierFormalSync = -1; // 仕入形式(同時)
                row.StockSlipDtlNumSync = 0; // 仕入明細通番(同時)

                if (row.ShipmentCntDisplay != 0)
                {
                    row.EditStatus = ctEDITSTATUS_AddUpNew;
                    // --- UPD 2013/11/18 Y.Wakita ---------->>>>>
                    //if (this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt().EstmCountReflectDiv == 0)
                    if ((this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt().EstmCountReflectDiv == 0) ||
                        (row.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Discount))
                    // --- UPD 2013/11/18 Y.Wakita ----------<<<<<
                    {
                        row.ShipmentCnt = row.AcptAnOdrRemainCnt;		    // 出荷数 ← 受注残数
                        row.ShipmentCntDisplay = row.ShipmentCnt;		    // 出荷数表示 ← 受注残数
                        row.ShipmentCntDefault = row.ShipmentCnt;		    // 数量初期値 ← 受注残数
                        row.AddUpEnableCnt = row.ShipmentCnt;			    // 計上可能数 ← 受注残数
                        row.AlreadyAddUpCnt = 0;						    // 計上済み数量 ← 0

                        row.AcceptAnOrderCntDisplay = 0;                    // 受注数表示 ← 0
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;        // 受注数 
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt; // 受注数初期
                        row.AcptAnOdrAdjustCnt = 0;					        // 受注調整数 ← 0
                        row.AcptAnOdrRemainCnt = 0;						    // 受注残数 ← 0
                    }
                    else
                    {
                        row.ShipmentCnt = 0;                    		    // 出荷数 ← 0
                        row.ShipmentCntDisplay = 0;		                    // 数量 ← 0
                        row.ShipmentCntDefault = 0;		                    // 数量初期値 ← 0
                        row.AddUpEnableCnt = row.AcptAnOdrRemainCnt;	    // 計上可能数 ← 受注残数
                        row.AlreadyAddUpCnt = 0;						    // 計上済み数量 ← 0

                        row.AcceptAnOrderCntDisplay = row.AcptAnOdrRemainCnt;// 受注数 ← 受注数(データ項目上は出荷数)
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;        // 受注数 ← 受注数(データ項目上は出荷数)
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt; // 受注数 ← 受注数(データ項目上は出荷数)
                        row.AcptAnOdrAdjustCnt = 0;						    // 受注調整数 ← 0
                        row.AcptAnOdrRemainCnt = 0;						    // 受注残数 ← 0

                        // 受注情報設定
                        this.SettingSalesDetailAcceptAnOrder(row.SalesRowNo);

                    }
                }

                // メモ制御
                this.MemoInfoAdjust(ref row);
            }

            // 現在庫数調整
            this.SalesDetailStockInfoAdjust();

        }

        /// <summary>
        /// 指定された見積データに対して見積計上を行うことが出来るかどうかをチェックします。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データリスト</param>
        /// <param name="message">メッセージ（out）</param>
        /// <returns>true:見積計上情報生成可 false:見積計上生成不可</returns>
        public bool CanCreateEstimateAddUpInfo(SalesSlip salesSlip, List<SalesDetail> salesDetailList, out string message)
        {
            message = string.Empty;

            if (salesSlip.SalesSlipCd == 1) // 売上伝票区分が「1:返品」の場合
            {
                message = "該当するデータは「返品伝票」の為、見積計上処理を行えません。";
                return false;
            }

            if (salesSlip.DebitNoteDiv == 1)
            {
                message = "該当するデータは「赤伝」の為、見積計上処理を行えません。";
                return false;
            }
            else if (salesSlip.DebitNoteDiv == 2)
            {
                message = "該当するデータはすでに「赤伝」が発行されている為、見積計上処理を行えません。";
                return false;
            }
            else if (!CheckTransStopDate(salesSlip.TransStopDate, salesSlip.SalesDate))
            {
                message = "取引中止中の為、見積計上処理を行えません。";
                return false;
            }

            if (salesSlip.EstimateDivide != (int)SalesSlipInputAcs.EstimateDivide.UnitPriceEstimate)
            {
                if (salesDetailList != null)
                {
                    bool isTrust = false;

                    // --- ADD 2013/11/18 Y.Wakita ---------->>>>>
                    if (salesSlip.EstimateDivide == (int)SalesSlipInputAcs.EstimateDivide.Estimate)
                    {
                        foreach (SalesDetail salesDetail in salesDetailList)
                        {
                            if ((salesDetail.AcptAnOdrRemainCnt != 0) ||
                               ((salesDetail.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount) && (salesDetail.ShipmentCnt == 0)))
                            {
                                isTrust = true;
                                break;
                            }
                        }
                    }
                    else
                    {
                        // --- ADD 2013/11/18 Y.Wakita ----------<<<<<

                        foreach (SalesDetail salesDetail in salesDetailList)
                        {
                            if (salesDetail.AcptAnOdrRemainCnt != 0)
                            {
                                isTrust = true;
                                break;
                            }
                        }
                        // --- ADD 2013/11/18 Y.Wakita ---------->>>>>
                    }
                    // --- ADD 2013/11/18 Y.Wakita ----------<<<<<

                    if (!isTrust)
                    {
                        message = "該当する売上データは全て「返品」もしくは「見積計上」されている為、選択できません。";
                        return false;
                    }
                }
            }
            return true;

        }
        #endregion

        #region ●計上共通処理
        /// <summary>
        /// 計上情報クリア処理
        /// </summary>
        public void ClearAddUpInfo()
        {
            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this._salesDetailDataTable.Rows)
            {
                // 受注ステータス(元)が受注、見積、出荷、売上明細通番(元)がセットされているデータのみ対象
                if (((salesDetailRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder) ||
                     (salesDetailRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                     (salesDetailRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment)) &&
                    (salesDetailRow.SalesSlipDtlNumSrc != 0))
                {
                    DataRow[] dataRows = salesDetailRow.GetChildRows(cRelation_Detail_LnkDetail);

                    if ((dataRows != null) && (dataRows.Length > 0))
                    {
                        foreach (SalesInputDataSet.AddUpSrcDetailRow addUpSrcDetailRow in dataRows)
                        {
                            this._addUpSrcDetailDataTable.RemoveAddUpSrcDetailRow(addUpSrcDetailRow);
                        }
                    }
                    salesDetailRow.AcptAnOdrStatusSrc = 0;
                    salesDetailRow.SalesSlipDtlNumSrc = 0;
                    salesDetailRow.AcceptAnOrderCnt = 0;
                    salesDetailRow.AcceptAnOrderCntDefault = 0;
                    salesDetailRow.AlreadyAddUpCnt = 0;
                    salesDetailRow.AddUpEnableCnt = 0;
                    salesDetailRow.ShipmentCntDefault = 0;
                    salesDetailRow.EditStatus = ctEDITSTATUS_AllOK;
                }
            }

            // 現在庫数調整
            this.SalesDetailStockInfoAdjust();

        }
        #endregion

        #region ●複写関係
        /// <summary>
        /// 複写伝票の売上データオブジェクトを生成します。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト（ref）</param>
        /// <br>Update Note: 2013/12/19 陳健</br>
        /// <br>             Redmine#41550 No.1 売上伝票入力消費税8%増税対応。</br> 
        public void CreateSlipCopyInfo(ref SalesSlip salesSlip)
        {
            if (salesSlip == null) return;

            salesSlip.CreateDateTime = DateTime.MinValue;
            salesSlip.UpdateDateTime = DateTime.MinValue;
            salesSlip.InputMode = ctINPUTMODE_SalesSlip_Normal;				// 入力モード ← 通常モード
            salesSlip.DebitNLnkSalesSlNum = string.Empty;
            salesSlip.DebitNoteDiv = 0; // 赤伝区分(0:黒伝 1:赤伝 2:元黒)
            salesSlip.SalesSlipNum = ctDefaultSalesSlipNum;					// 売上伝票番号 ← 0
            salesSlip.SectionCode = this._loginSectionCode;
            salesSlip.UpdateSecCd = this._loginSectionCode;
            salesSlip.CustSlipNo = 0;   //得意先伝票番号    // ADD 丁建雄 2012/02/06 Redmine#28336
            // --- ADD T.Miyamoto 2012/11/14 ---------->>>>>
            salesSlip.DepositAllowanceTtl = 0; // 入金引当合計額 ← 0
            salesSlip.DepositAlwcBlnce = 0;    // 入金引当残高   ← 0
            // --- ADD T.Miyamoto 2012/11/14 ----------<<<<<
            salesSlip.ConsTaxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate.Date);  // ADD 陳健 2013/12/19 Redmine#41550 No.1
        }

        /// <summary>
        /// 複写伝票の売上明細データテーブルを生成します。
        /// </summary>
        public void CreateSlipCopyDetailInfo()
        {
            this.CreateSlipCopyDetailInfo(this._salesDetailDataTable);
        }

        /// <summary>
        /// 複写伝票用の車輌情報テーブルを生成します。
        /// </summary>
        /// <remarks>
        /// <br>Note       : 複写伝票用の車輌情報テーブルを生成します。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/09/08②</br>
        /// </remarks>
        public void CreateSlipCopyCarInfo()
        {
            bool clearflag = false;
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt() != null &&
                    this._salesSlipInputInitDataAcs.GetSalesTtlSt().CarMngNoDispDiv == 1)
            {
                if (this._salesSlipInputInitDataAcs.Opt_CarMng == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    clearflag = false;
                }
                else
                {
                    clearflag = true;
                }
            }
            else
            {
                clearflag = true;
            }
            foreach (SalesInputDataSet.CarInfoRow row in this._carInfoDataTable)
            {
                if (clearflag == true)
                {
                    // 車両管理番号
                    row.CarMngNo = 0;
                    // 車両走行距離
                    row.Mileage = 0;
                    // 車輌備考
                    row.CarNote = string.Empty;
                    row.CarNoteCode = 0; // ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218
                    // 陸運事務所番号
                    row.NumberPlate1Code = 0;
                    // 陸運事務局名称
                    row.NumberPlate1Name = string.Empty;
                    // 車両登録番号（種別）
                    row.NumberPlate2 = string.Empty;
                    // 車両登録番号（カナ）
                    row.NumberPlate3 = string.Empty;
                    // 車両登録番号（プレート番号）
                    row.NumberPlate4 = 0;

                    if (this._salesSlipInputInitDataAcs.GetSalesTtlSt() == null ||
                        this._salesSlipInputInitDataAcs.GetSalesTtlSt().CarMngNoDispDiv == 0)
                    {
                        row.CarMngCode = string.Empty;
                    }
                }
            }
        }

        /// <summary>
        /// 複写伝票の売上明細データテーブルを生成します。（オーバーロード）
        /// </summary>
        /// <param name="salesDetailDataTable">売上明細データテーブルオブジェクト</param>
        /// <remarks>
        /// <br>Update Note: 2015/08/25 李侠</br>
        /// <br>管理番号   : 11170129-00 伝票複写の障害対応</br>
        /// <br>           : Redmine#47000 ②ヘッダー部から受注伝票を伝票複写する場合、「受注数」の対応</br>
        /// </remarks>
        public void CreateSlipCopyDetailInfo(SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            int sign = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;
            for (int i = 0; i < salesDetailDataTable.Count; i++)
            {
                SalesInputDataSet.SalesDetailRow row = salesDetailDataTable[i];
                row.SalesSlipNum = ctDefaultSalesSlipNum;	// 売上伝票番号 ← 0
                row.AcceptAnOrderNo = 0;                    // 受注番号 ← 0
                row.CommonSeqNo = 0;						// 共通通番 ← 0
                row.SalesSlipDtlNum = 0;					// 売上明細通番 ← 0
                row.AcptAnOdrStatusSrc = 0;					// 受注ステータス(元) ← 0
                row.SalesSlipDtlNumSrc = 0;					// 売上明細通番(元) ← 0
                row.SupplierFormalSync = -1;				// 仕入形式(同時) ← 0
                row.StockSlipDtlNumSync = 0;				// 仕入明細通番(同時) ← 0

                row.ShipmentCntDisplay = (this._salesSlip.AcptAnOdrStatus != (int)AcptAnOdrStatusState.AcceptAnOrder) ? row.ShipmentCnt * sign : 0;
                //----- ADD 2015/08/25 李侠 Redmine#47000 ②ヘッダー部から受注伝票を伝票複写する場合、「受注数」の対応 ---------->>>>>
                // 複写伝票が「受注伝票」以外の場合、画面の受注数に「0」をセットします。
                // 複写伝票が「受注伝票」の場合、画面の受注数に「出荷数」をセットします。
                row.AcceptAnOrderCntDisplay = (this._salesSlip.AcptAnOdrStatus != (int)AcptAnOdrStatusState.AcceptAnOrder) ? 0 : row.ShipmentCnt * sign;
                //----- ADD 2015/08/25 李侠 Redmine#47000 ②ヘッダー部から受注伝票を伝票複写する場合、「受注数」の対応 ----------<<<<<
                row.ShipmentCnt = (this._salesSlip.AcptAnOdrStatus != (int)AcptAnOdrStatusState.AcceptAnOrder) ? row.ShipmentCnt : 0;
                row.ShipmentCntDefault = 0;
                row.ShipmentCntDefForChk = 0;
                row.AcceptAnOrderCnt = 0;
                //row.AcceptAnOrderCntDisplay = (this._salesSlip.AcptAnOdrStatus != (int)AcptAnOdrStatusState.AcceptAnOrder) ? 0 : row.AcceptAnOrderCntDisplay * sign;// DEL 2015/08/25 李侠 Redmine#47000 ②ヘッダー部から受注伝票を伝票複写する場合、「受注数」の対応
                row.AcceptAnOrderCntDefault = 0;
                row.AcptAnOdrAdjustCnt = 0;
                row.AcptAnOdrRemainCnt = 0;
                row.AddUpEnableCnt = 0;
                row.AlreadyAddUpCnt = 0;

                if (row.ShipmentCntDisplay != 0)
                {
                    if (row.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount) // 行値引
                    {
                        row.EditStatus = (row.ShipmentCntDisplay == 0) ? ctEDITSTATUS_RowDiscount : ctEDITSTATUS_GoodsDiscount;
                        row.CanTaxDivChange = false;
                    }
                    else if (row.SalesSlipCdDtl == (int)SalesSlipCdDtl.Annotation) // 注釈
                    {
                        row.EditStatus = ctEDITSTATUS_Annotation;
                        row.CanTaxDivChange = false;
                    }
                    else
                    {
                        row.EditStatus = ctEDITSTATUS_AllOK;
                        row.CanTaxDivChange = false;
                    }
                }

                this.MemoInfoAdjust(ref row);
            }

            // --- UPD 2013/04/18 T.Nishi ---------->>>>>
            ////if (this._salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.AcceptAnOrder) this._salesSlip.AcptAnOdrStatus = (int)AcptAnOdrStatusState.Sales; //DEL 2013/04/16 №38 T.Miyamoto
            if (this._salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.AcceptAnOrder) this._salesSlip.AcptAnOdrStatus = (int)AcptAnOdrStatusState.Sales;
            // --- UPD 2013/04/18 T.Nishi ----------<<<<<

            // 現在庫数調整
            this.SalesDetailStockInfoAdjust();

        }

        /// <summary>
        /// 指定されたデータに対して伝票複写を行うことが出来るかどうかをチェックします。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データリスト</param>
        /// <param name="message">メッセージ（out）</param>
        /// <returns>true:複写情報生成可 false:複写生成不可</returns>
        public bool CanCreateCopySlipInfo(SalesSlip salesSlip, List<SalesDetail> salesDetailList, out string message)
        {
            message = string.Empty;

            DateTime targetDate = (salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.Shipment) ? salesSlip.ShipmentDay : salesSlip.SalesDate;
            if (!CheckTransStopDate(salesSlip.TransStopDate, targetDate))
            {
                message = "取引中止中の為、伝票複写処理を行えません。";
                return false;
            }

            return true;

        }
        #endregion

        #region ●各種照会(明細選択関係)
        /// <summary>
        /// 売上履歴照会ワークオブジェクトリストを元に、売上明細データ行オブジェクトを設定します。（明細選択）
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="salHisRefResultParamWorkList">ワークオブジェクトリスト</param>
        /// <param name="wayToDetailExpand">明細展開方法</param>
        /// <returns></returns>
        public int SalesDetailRowSettingFromSalHisRefResultParamWorkList(int salesRowNo, List<SalHisRefResultParamWork> salHisRefResultParamWorkList, WayToDetailExpand wayToDetailExpand)
        {
            //---------------------------------------------------
            // 売上データ読込パラメータセット
            //---------------------------------------------------
            CustomSerializeArrayList paraList = new CustomSerializeArrayList();
            foreach (SalHisRefResultParamWork salHisRefResultParamWork in salHisRefResultParamWorkList)
            {
                SalesDetailWork salesDetailWork = new SalesDetailWork();
                salesDetailWork.EnterpriseCode = salHisRefResultParamWork.EnterpriseCode;
                salesDetailWork.AcptAnOdrStatus = salHisRefResultParamWork.AcptAnOdrStatus;
                salesDetailWork.SalesSlipDtlNum = salHisRefResultParamWork.SalesSlipDtlNum;
                paraList.Add(salesDetailWork);
            }

            #region ●リモート参照用パラメータ
            //------------------------------------------------------
            // リモート参照用パラメータ
            //------------------------------------------------------
            IOWriteCtrlOptWork iOWriteCtrlOptWork = new IOWriteCtrlOptWork();                                   // リモート参照用パラメータ
            this.SettingIOWriteCtrlOptWork(SalesSlipInputAcs.OptWorkSettingType.Read, out iOWriteCtrlOptWork); // リモート参照用パラメータ設定処理
            paraList.Add(iOWriteCtrlOptWork);
            #endregion

            object paraObj = (object)paraList;
            object retObj = null;
            object retObj2 = null;

            //---------------------------------------------------
            // 売上データ再読込
            //---------------------------------------------------
            int status = this._iIOWriteControlDB.ReadDetail(ref paraObj, out retObj, out retObj2);

            CustomSerializeArrayList retList = (CustomSerializeArrayList)retObj;
            CustomSerializeArrayList retList2 = (CustomSerializeArrayList)retObj2;
            int retSt = 0;

            if (retList != null) status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                //---------------------------------------------------
                // データリスト分割
                //---------------------------------------------------
                SalesDetailWork[] salesDetailWorkArray;
                AcceptOdrCarWork[] acceptOdrCarWorkArray;
                StockSlipWork[] stockSlipWorkArray;
                StockDetailWork[] stockDetailWorkArray;
                UOEOrderDtlWork[] uoeOrderDtlWorkArray;
                DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForDetailsReading(retList, retList2, out salesDetailWorkArray, out acceptOdrCarWorkArray, out stockSlipWorkArray, out stockDetailWorkArray, out uoeOrderDtlWorkArray);

                //---------------------------------------------------
                // 売上明細データワークオブジェクト→売上明細データオブジェクト
                //---------------------------------------------------
                retSt = this.SalesDetailRowSettingFromSalesDetailWorkArray(salesRowNo, salesDetailWorkArray, acceptOdrCarWorkArray, stockSlipWorkArray, stockDetailWorkArray, wayToDetailExpand);
            }

            return retSt;
        }

        /// <summary>
        /// 受注照会ワークオブジェクトリストを元に、売上明細データオブジェクトを設定します。（明細選択）
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="acptAnOdrRemainRefDataList"></param>
        /// <param name="wayToDetailExpand"></param>
        /// <returns></returns>
        public int SalesDetailRowSettingFromAcptAnOdrRemainRefList(int salesRowNo, List<AcptAnOdrRemainRefData> acptAnOdrRemainRefDataList, WayToDetailExpand wayToDetailExpand)
        {
            int retSt = 0;

            //---------------------------------------------------
            // 売上データ読込パラメータセット
            //---------------------------------------------------
            CustomSerializeArrayList paraList = new CustomSerializeArrayList();
            foreach (AcptAnOdrRemainRefData acptAnOdrRemainRefData in acptAnOdrRemainRefDataList)
            {
                SalesDetailWork salesDetailWork = new SalesDetailWork();
                salesDetailWork.EnterpriseCode = acptAnOdrRemainRefData.EnterpriseCode;
                salesDetailWork.AcptAnOdrStatus = acptAnOdrRemainRefData.AcptAnOdrStatus;
                salesDetailWork.SalesSlipDtlNum = acptAnOdrRemainRefData.SalesSlipDtlNum;
                paraList.Add(salesDetailWork);
            }

            #region ●リモート参照用パラメータ
            //------------------------------------------------------
            // リモート参照用パラメータ
            //------------------------------------------------------
            IOWriteCtrlOptWork iOWriteCtrlOptWork = new IOWriteCtrlOptWork();                                   // リモート参照用パラメータ
            this.SettingIOWriteCtrlOptWork(SalesSlipInputAcs.OptWorkSettingType.Read, out iOWriteCtrlOptWork); // リモート参照用パラメータ設定処理
            paraList.Add(iOWriteCtrlOptWork);
            #endregion

            object paraObj = (object)paraList;
            object retObj = null;
            object retObj2 = null;

            //---------------------------------------------------
            // 売上データ再読込
            //---------------------------------------------------
            int status = this._iIOWriteControlDB.ReadDetail(ref paraObj, out retObj, out retObj2);

            CustomSerializeArrayList retList = (CustomSerializeArrayList)retObj;
            CustomSerializeArrayList retList2 = (CustomSerializeArrayList)retObj2;

            if (retList != null) status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {

                //---------------------------------------------------
                // データリスト分割
                //---------------------------------------------------
                SalesDetailWork[] salesDetailWorkArray;
                AcceptOdrCarWork[] acceptOdrCarWorkArray;
                StockSlipWork[] stockSlipWorkArray;
                StockDetailWork[] stockDetailWorkArray;
                UOEOrderDtlWork[] uoeOrderDtlWorkArray;
                DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForDetailsReading(retList, retList2, out salesDetailWorkArray, out acceptOdrCarWorkArray, out stockSlipWorkArray, out stockDetailWorkArray, out uoeOrderDtlWorkArray);

                List<UOEOrderDtlWork> uoeOrderDtlWorkList = new List<UOEOrderDtlWork>();
                if ((uoeOrderDtlWorkArray != null) && (uoeOrderDtlWorkArray.Length != 0)) uoeOrderDtlWorkList.AddRange(uoeOrderDtlWorkArray);

                //---------------------------------------------------
                // 受注残＝０明細除外　発注選択明細除外
                //---------------------------------------------------
                List<SalesDetailWork> list = new List<SalesDetailWork>();
                foreach (SalesDetailWork salesDetailWork in salesDetailWorkArray)
                {
                    UOEOrderDtlWork retUOEOrderDtlWork = new UOEOrderDtlWork();
                    if (uoeOrderDtlWorkList != null)
                    {
                        retUOEOrderDtlWork = uoeOrderDtlWorkList.Find(
                            delegate(UOEOrderDtlWork uoeOrderDtlWork)
                            {
                                if ((uoeOrderDtlWork.AcptAnOdrStatus == salesDetailWork.AcptAnOdrStatus) &&
                                    (uoeOrderDtlWork.SalesSlipDtlNum == salesDetailWork.SalesSlipDtlNum))
                                {
                                    return true;
                                }
                                else
                                {
                                    return false;
                                }
                            }
                            );
                    }

                    if ((salesDetailWork.AcptAnOdrRemainCnt != 0) &&
                        ((retUOEOrderDtlWork == null) ||
                         (retUOEOrderDtlWork != null) && (retUOEOrderDtlWork.DataSendCode == 9))
                        )
                    //(salesDetailWork.SupplierFormalSync != (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order))
                    {
                        list.Add(salesDetailWork);
                    }
                }
                SalesDetailWork[] retSalesDetailWorkArray = list.ToArray();

                if (list.Count == 0)
                {
                    retSt = -1;
                }
                else
                {
                    //---------------------------------------------------
                    // 売上明細データワークオブジェクト→売上明細データオブジェクト
                    //---------------------------------------------------
                    this.SalesDetailRowSettingFromSalesDetailWorkArray(salesRowNo, retSalesDetailWorkArray, acceptOdrCarWorkArray, stockSlipWorkArray, stockDetailWorkArray, wayToDetailExpand);
                }
            }

            return retSt;

        }

        /// <summary>
        /// 売上履歴照会ワークオブジェクトリストを元に、売上明細データ行オブジェクトを設定します。（明細選択／出荷計上・見積計上）
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="salHisRefResultParamWorkList"></param>
        /// <param name="wayToDetailExpand"></param>
        /// <returns></returns>
        public int SalesDetailRowSettingFromSalHisRefResultParamWorkListForAddUp(int salesRowNo, List<SalHisRefResultParamWork> salHisRefResultParamWorkList, WayToDetailExpand wayToDetailExpand)
        {
            int retSt = 0;

            //---------------------------------------------------
            // 売上データ読込パラメータセット
            //---------------------------------------------------
            CustomSerializeArrayList paraList = new CustomSerializeArrayList();
            foreach (SalHisRefResultParamWork salHisRefResultParamWork in salHisRefResultParamWorkList)
            {
                SalesDetailWork salesDetailWork = new SalesDetailWork();
                salesDetailWork.EnterpriseCode = salHisRefResultParamWork.EnterpriseCode;
                salesDetailWork.AcptAnOdrStatus = salHisRefResultParamWork.AcptAnOdrStatus;
                salesDetailWork.SalesSlipDtlNum = salHisRefResultParamWork.SalesSlipDtlNum;
                paraList.Add(salesDetailWork);
            }

            #region ●リモート参照用パラメータ
            //------------------------------------------------------
            // リモート参照用パラメータ
            //------------------------------------------------------
            IOWriteCtrlOptWork iOWriteCtrlOptWork = new IOWriteCtrlOptWork();                                   // リモート参照用パラメータ
            this.SettingIOWriteCtrlOptWork(SalesSlipInputAcs.OptWorkSettingType.Read, out iOWriteCtrlOptWork); // リモート参照用パラメータ設定処理
            paraList.Add(iOWriteCtrlOptWork);
            #endregion

            object paraObj = (object)paraList;
            object retObj = null;
            object retObj2 = null;

            //---------------------------------------------------
            // 売上データ再読込
            //---------------------------------------------------
            int status = this._iIOWriteControlDB.ReadDetail(ref paraObj, out retObj, out retObj2);

            CustomSerializeArrayList retList = (CustomSerializeArrayList)retObj;
            CustomSerializeArrayList retList2 = (CustomSerializeArrayList)retObj2;

            if (retList != null) status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                //---------------------------------------------------
                // データリスト分割
                //---------------------------------------------------
                SalesDetailWork[] salesDetailWorkArray;
                AcceptOdrCarWork[] acceptOdrCarWorkArray;
                StockSlipWork[] stockSlipWorkArray;
                StockDetailWork[] stockDetailWorkArray;
                UOEOrderDtlWork[] uoeOrderDtlWorkArray;
                DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForDetailsReading(retList, retList2, out salesDetailWorkArray, out acceptOdrCarWorkArray, out stockSlipWorkArray, out stockDetailWorkArray, out uoeOrderDtlWorkArray);
                this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag = false;// ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応
                //---------------------------------------------------
                // 受注残＝０明細除外(見積の場合は残管理しない為、除外しない)
                //---------------------------------------------------
                List<SalesDetailWork> list = new List<SalesDetailWork>();
                foreach (SalesDetailWork salesDetailWork in salesDetailWorkArray)
                {
                    if (salesDetailWork.AcptAnOdrStatus != (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate)
                    {

                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                        if (salesDetailWork.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment &&
                            !string.IsNullOrEmpty(salesDetailWork.RentSyncSupSlipNo) &&
                            this._taxRateFlg)
                        {
                            this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag = true;
                            continue;
                        }
                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                        if (salesDetailWork.AcptAnOdrRemainCnt != 0) list.Add(salesDetailWork);
                    }
                    else
                    {
                        list.Add(salesDetailWork);
                    }
                }
                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                if (this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag)
                {
                    TMsgDisp.Show(
                     emErrorLevel.ERR_LEVEL_EXCLAMATION,
                     string.Empty,
                     "税率設定されているため、仕入同時計上の貸出伝票は計上できません。",
                     0,
                     MessageBoxButtons.OK);
                }
                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                SalesDetailWork[] retSalesDetailWorkArray = list.ToArray();
                
                if (list.Count == 0)
                {
                    retSt = -1;
                }
                else
                {
                    //---------------------------------------------------
                    // 売上明細データワークオブジェクト→売上明細データオブジェクト
                    //---------------------------------------------------
                    this.SalesDetailRowSettingFromSalesDetailWorkArray(salesRowNo, retSalesDetailWorkArray, acceptOdrCarWorkArray, stockSlipWorkArray, stockDetailWorkArray, wayToDetailExpand);
                }
            }

            return retSt;

        }

        /// <summary>
        /// コピー元売上明細ワークオブジェクト配列を元に、売上明細データ行オブジェクトを設定します。（明細選択）
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="salesDetailWorkArray">売上明細データワークオブジェクト配列</param>
        /// <param name="acceptOdrCarWorkArray">受注マスタ（車両）ワークオブジェクト配列</param>
        /// <param name="stockSlipWorkArray">仕入データワークオブジェクト配列</param>
        /// <param name="stockDetailWorkArray">仕入明細データワークオブジェクト配列</param>
        /// <param name="wayToDetailExpand">明細展開方法</param>
        /// <returns></returns>
        public int SalesDetailRowSettingFromSalesDetailWorkArray(int salesRowNo, SalesDetailWork[] salesDetailWorkArray, AcceptOdrCarWork[] acceptOdrCarWorkArray, StockSlipWork[] stockSlipWorkArray, StockDetailWork[] stockDetailWorkArray, WayToDetailExpand wayToDetailExpand)
        {
            //-----------------------------------------------------------------------------
            // 初期処理
            //-----------------------------------------------------------------------------
            List<int> settingSalesRowNoList = new List<int>();
            List<int> deletingSalesRowNoList = new List<int>();
            List<SalesDetail> salesDetailList = ConvertSalesSlip.UIDataFromParamData(salesDetailWorkArray);
            List<AcceptOdrCar> acceptOdrCarList = ConvertSalesSlip.UIDataFromParamData(acceptOdrCarWorkArray);
            bool isAddUp = (wayToDetailExpand != WayToDetailExpand.Normal);
            int retSt = 0;
            retSt = this.MakeSalesDetailList(ref salesDetailList);

            //-----------------------------------------------------------------------------
            // 対象行リスト、削除行リスト取得
            //-----------------------------------------------------------------------------
            for (int i = 0; i < salesDetailList.Count + this.GetAlreadyInputRowCount(); i++)
            {
                SalesInputDataSet.SalesDetailRow row = null;
                if (wayToDetailExpand != WayToDetailExpand.AddUpRemainder)
                {
                    row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, i + 1);
                }
                else
                {
                    row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo + i);
                }

                if (row != null)
                {
                    // 入力済み行は設定対象外
                    if (!string.IsNullOrEmpty(row.GoodsName))
                    {
                        continue;
                    }
                    else
                    {
                        settingSalesRowNoList.Add(row.SalesRowNo);
                    }
                }
                else
                {
                    break;
                }

                if (salesDetailList.Count <= settingSalesRowNoList.Count) break;

                deletingSalesRowNoList.Add(row.SalesRowNo);

                row.AcceptChanges(); // 変更内容コミット
            }

            //-----------------------------------------------------------------------------
            // 売上明細行削除処理
            //-----------------------------------------------------------------------------
            this.ClearSalesDetailRow(deletingSalesRowNoList);

            //-----------------------------------------------------------------------------
            // 商品情報キャッシュ
            //-----------------------------------------------------------------------------
            List<List<GoodsUnitData>> goodsUnitDataListList;
            string msg;
            this.SearchPartsFromGoodsNoNonVariousSearchWholeWord(this._salesSlip, salesDetailList, out goodsUnitDataListList, out msg);

            //-----------------------------------------------------------------------------
            // 在庫情報キャッシュ
            //-----------------------------------------------------------------------------
            List<GoodsUnitData> goodsUnitDataList;
            this._salesSlipInputInitDataAcs.GetGoodsUnitDataListFromListList(goodsUnitDataListList, out goodsUnitDataList);
            this.CacheStockInfo(goodsUnitDataList);

            GoodsUnitData goodsUnitData = new GoodsUnitData();
            Stock stock = new Stock();

            //-----------------------------------------------------------------------------
            // 売上明細情報、仕入情報設定
            //-----------------------------------------------------------------------------
            for (int i = 0; i < settingSalesRowNoList.Count; i++)
            {
                // 商品情報取得
                goodsUnitData = this.GetGoodsUnitDataDic(salesDetailList[i].GoodsMakerCd, salesDetailList[i].GoodsNo);

                // 在庫情報取得
                stock = this.GetStock(goodsUnitData, salesDetailList[i].WarehouseCode);

                // 対象行番号取得
                int targetSalesRowNo = settingSalesRowNoList[i];

                // 明細情報設定処理
                this.SalesDetailRowSettingFromSalesDetail(targetSalesRowNo, salesDetailList[i], stock, isAddUp);

                // 車両情報キャッシュ
                this.CacheCarInfo(targetSalesRowNo, salesDetailList[i], acceptOdrCarList);

                #region 同時入力データの展開
                if (wayToDetailExpand == WayToDetailExpand.AddUpAndSync)
                {
                    if (((salesDetailList[i].StockSlipDtlNumSync != 0) && (salesDetailList[i].SupplierFormalSync != -1)) &&
                        (stockDetailWorkArray != null))
                    {
                        StockSlipWork addUpOrgStockSlipWork = null;
                        StockDetailWork addUpOrgStockDetailWork = null;

                        // 仕入明細データ取得
                        foreach (StockDetailWork stockDetailWork in stockDetailWorkArray)
                        {
                            if ((stockDetailWork.StockSlipDtlNumSrc != 0) || (stockDetailWork.OrderFormIssuedDiv != 0)) continue; // 未計上、発注書未発行は対象外

                            // 仕入形式(同時),仕入明細通番(同時)が同じデータを抽出する
                            if ((salesDetailList[i].SupplierFormalSync == stockDetailWork.SupplierFormal) &&
                                (salesDetailList[i].StockSlipDtlNumSync == stockDetailWork.StockSlipDtlNum))
                            {
                                addUpOrgStockDetailWork = stockDetailWork;
                                break;
                            }
                        }

                        // 仕入データ取得
                        if (addUpOrgStockDetailWork != null)
                        {
                            foreach (StockSlipWork stockSlipWork in stockSlipWorkArray)
                            {
                                if ((addUpOrgStockDetailWork.SupplierSlipNo == stockSlipWork.SupplierSlipNo) &&
                                    (addUpOrgStockDetailWork.SupplierFormal == stockSlipWork.SupplierFormal))
                                {
                                    addUpOrgStockSlipWork = stockSlipWork;
                                    break;
                                }
                            }
                        }

                        if (addUpOrgStockDetailWork != null)
                        {
                            this.SyncStockInfoSetting(targetSalesRowNo, addUpOrgStockSlipWork, addUpOrgStockDetailWork);
                        }
                    }
                }
                #endregion
            }

            return retSt;
        }

        /// <summary>
        /// 売上明細データクラスリスト作成処理
        /// </summary>
        /// <param name="salesDetailList"></param>
        /// <returns></returns>
        private int MakeSalesDetailList(ref List<SalesDetail> salesDetailList)
        {
            List<SalesDetail> retSalesDetailList = new List<SalesDetail>();
            int retSt = 0;

            foreach (SalesDetail salesDetail in salesDetailList)
            {
                // 注釈および行値引き、商品値引き対象外
                // --- UPD 2013/11/13 Y.Wakita ---------->>>>>
                //if ((this._salesSlip.AcptAnOdrStatusDisplay != (int)AcptAnOdrStatusState.Sales) &&
                //    ((salesDetail.SalesSlipCdDtl == (int)SalesSlipCdDtl.Annotation) || // 注釈
                //     (salesDetail.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount))) // 行値引き 商品値引き
                //{
                //    retSt = -1;
                //    continue;
                //}

                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlip.AcptAnOdrStatusDisplay)
                {
                    case AcptAnOdrStatusState.Estimate:             // 見積
                        if (salesDetail.SalesSlipCdDtl == (int)SalesSlipCdDtl.Annotation)  // 注釈
                {
                    retSt = -1;
                    continue;
                }
                        break;
                    case AcptAnOdrStatusState.UnitPriceEstimate:    // 単価見積
                        if ((salesDetail.SalesSlipCdDtl == (int)SalesSlipCdDtl.Annotation) || // 注釈
                            ((salesDetail.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount) && 
                             (salesDetail.ShipmentCnt != 0))) // 商品値引き
                        {
                            retSt = -1;
                            continue;
                        }
                        break;
                    case AcptAnOdrStatusState.Sales:                // 売上

                        if ((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlip.AcptAnOdrStatus == AcptAnOdrStatusState.AcceptAnOrder)
                        {
                            // 受注
                            if ((salesDetail.SalesSlipCdDtl == (int)SalesSlipCdDtl.Annotation) || // 注釈
                                (salesDetail.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount)) // 行値引き 商品値引き
                            {
                                retSt = -1;
                                continue;
                            }
                        }
                        break;

                    case AcptAnOdrStatusState.Shipment:             // 貸出
                        if ((salesDetail.SalesSlipCdDtl == (int)SalesSlipCdDtl.Annotation) || // 注釈
                            (salesDetail.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount)) // 行値引き 商品値引き
                        {
                            retSt = -1;
                            continue;
                        }
                        break;
                }
                // --- UPD 2013/11/13 Y.Wakita ----------<<<<<
                retSalesDetailList.Add(salesDetail.Clone());
            }
            salesDetailList = retSalesDetailList;

            return retSt;
        }

        /// <summary>
        /// 同時仕入情報設定処理
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="stockSlipWork">仕入データワークオブジェクト</param>
        /// <param name="stockDetailWork">仕入明細ワークオブジェクト</param>
        private void SyncStockInfoSetting(int salesRowNo, StockSlipWork stockSlipWork, StockDetailWork stockDetailWork)
        {
            // 受注残がゼロのデータは無条件で対象外
            if (stockDetailWork.OrderRemainCnt == 0) return;

            if (stockSlipWork == null) stockSlipWork = new StockSlipWork();

            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (salesDetailRow != null)
            {
                StockTemp stockTemp = ConvertSalesSlip.UIDataFromParamData(stockSlipWork, stockDetailWork);

                stockTemp.CreateDateTime = DateTime.MinValue;                                   // 作成日時
                stockTemp.UpdateDateTime = DateTime.MinValue;                                   // 更新日時
                stockTemp.FileHeaderGuid = Guid.Empty;                                          // GUID
                stockTemp.LogicalDeleteCode = 0;                                                // 論理削除区分

                stockTemp.SupplierFormal = this.GetSupplierFormal(salesDetailRow);              // 仕入形式
                stockTemp.StockSlipDtlNum = 0;                                                  // 仕入伝票番号

                stockTemp.SectionCode = LoginInfoAcquisition.Employee.BelongSectionCode.Trim(); // 拠点コード
                stockTemp.SubSectionCode = this._salesSlip.SubSectionCode;                      // 部門コード

                stockTemp.DebitNoteDiv = this._salesSlip.DebitNoteDiv;                          // 赤伝区分
                stockTemp.DebitNLnkSuppSlipNo = 0;                                              // 赤黒連結仕入伝票番号
                stockTemp.SupplierSlipCd = (this._salesSlip.SalesSlipCd == 0) ? 10 : 20;        // 仕入伝票区分
                stockTemp.AccPayDivCd = this._salesSlip.AccRecDivCd;                            // 買掛区分

                stockTemp.StockSectionCd = this._salesSlip.SalesInpSecCd;                       // 仕入拠点コード
                stockTemp.StockAddUpSectionCd = this._salesSlip.DemandAddUpSecCd;               // 仕入計上拠点コード

                stockTemp.ArrivalGoodsDay = this._salesSlip.SalesDate;                          // 入荷日
                stockTemp.StockDate = this._salesSlip.SalesDate;                                // 仕入日
                stockTemp.StockAddUpADate = this._salesSlip.SalesDate;                          // 仕入計上日付
                stockTemp.SupplierConsTaxRate = this._salesSlipInputInitDataAcs.GetTaxRate(this._salesSlip.SalesDate); // 仕入先消費税税率

                stockTemp.AcptAnOdrStatusSync = 0;                                              // 受注ステータス（同時）
                stockTemp.SalesSlipDtlNumSync = 0;                                              // 売上明細通番（同時）
                stockTemp.SupplierFormalSrc = stockDetailWork.SupplierFormal;                   // 仕入形式（元）
                stockTemp.StockSlipDtlNumSrc = stockDetailWork.StockSlipDtlNum;                 // 仕入明細通番（元）

                stockTemp.DelayPaymentDiv = 0;                                                  // 来勘区分
                stockTemp.StockInputCode = this._salesSlip.SalesInputCode;                      // 仕入入力者コード
                stockTemp.StockInputName = this._salesSlip.SalesInputName;                      // 仕入入力者名称
                stockTemp.StockAgentCode = this._salesSlip.SalesEmployeeCd;                     // 仕入担当者コード
                stockTemp.StockAgentName = this._salesSlip.SalesEmployeeNm;                     // 仕入担当者名称

                stockTemp.AutoPayment = 0;                                                      // 自動支払区分
                stockTemp.SupplierSlipNote1 = string.Empty;                                               // 仕入伝票備考１
                stockTemp.SupplierSlipNote2 = string.Empty;                                               // 仕入伝票備考２

                stockTemp.StockCount = stockDetailWork.OrderRemainCnt;                          // 仕入数
                stockTemp.OrderRemainCnt = stockDetailWork.OrderRemainCnt;                      // 発注残数
                stockTemp.PartySaleSlipNum = string.Empty;                                                // 相手先伝票番号

                stockTemp.EditStatus = salesDetailRow.EditStatus;

                // 発注データ補正
                if (stockDetailWork.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order)
                {
                    stockTemp.InputDay = DateTime.Today;
                    stockTemp.SupplierFormal = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock;
                    stockTemp.SupplierCd = stockDetailWork.SupplierCd;
                    stockTemp.SupplierSnm = stockDetailWork.SupplierSnm;

                    // 仕入先情報
                    Supplier supplier;
                    int status = this._supplierAcs.Read(out supplier, this._enterpriseCode, stockDetailWork.SupplierCd);
                    if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) supplier = new Supplier();

                    // 支払先情報取得
                    Supplier payeeSupplier;
                    status = this._supplierAcs.Read(out payeeSupplier, this._enterpriseCode, supplier.PayeeCode);
                    if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) payeeSupplier = new Supplier();

                    stockTemp.SuppTtlAmntDspWayCd = supplier.SuppTtlAmntDspWayCd;

                    // 仕入先マスタの仕入先消費税転嫁方式参照区分が
                    // 「1:仕入先参照」の場合は得意先仕入情報マスタの「仕入先消費税転嫁方式コード」を設定する
                    // 「0:全体設定参照」の場合は税率設定マスタの「消費税転嫁方式コード」を設定する
                    stockTemp.SuppCTaxLayCd = (payeeSupplier.SuppCTaxLayRefCd == 1) ? payeeSupplier.SuppCTaxLayCd : this._salesSlipInputInitDataAcs.GetConsTaxLayMethod(0);

                    stockTemp.SupplierConsTaxRate = this._salesSlipInputInitDataAcs.GetTaxRate(stockDetailWork.OrderDataCreateDate); // 仕入先消費税税率
                    int stockFractionProcCd = this._supplierAcs.GetStockFractionProcCd(this._enterpriseCode, stockDetailWork.SupplierCd, SupplierAcs.StockFracProcMoneyDiv.CnsTaxFrcProcCd);
                    int taxFracProcCd = 0;
                    double taxFracProcUnit = 0;
                    this._salesSlipInputInitDataAcs.GetSalesFractionProcInfo(SalesSlipInputInitDataAcs.ctFracProcMoneyDiv_Tax, stockFractionProcCd, 0, out taxFracProcUnit, out taxFracProcCd);
                    stockTemp.StockFractionProcCd = taxFracProcCd;

                }

                // 仕入金額再計算
                this._salesSlipStockInfoInputAcs.CalculationStockPrice(ref stockTemp);

                // キャッシュ
                this.CacheStockTemp(salesRowNo, stockTemp);

            }


        }

        /// <summary>
        /// コピー元売上明細行オブジェクトを元に売上明細行オブジェクトを設定します。（明細選択）
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="salesDetail">コピー元明細オブジェクト</param>
        /// <param name="stock">在庫情報オブジェクト</param>
        /// <param name="isAddUp">true:明細計上 false:明細コピー</param>
        /// <remarks>
        /// <br>Update Note: 2015/08/25 李侠</br>
        /// <br>管理番号   : 11170129-00 伝票複写の障害対応</br>
        /// <br>           : Redmine#47000 ①明細行から受注伝票を伝票複写する場合、「受注数」と「出荷数」の対応</br>
        /// </remarks>
        public void SalesDetailRowSettingFromSalesDetail(int salesRowNo, SalesDetail salesDetail, Stock stock, bool isAddUp)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                this.ClearSalesDetailRow(row);

                if (salesDetail != null)
                {
                    //row.CreateDateTime = salesDetail.CreateDateTime; // 作成日時
                    //row.UpdateDateTime = salesDetail.UpdateDateTime; // 更新日時
                    //row.EnterpriseCode = salesDetail.EnterpriseCode; // 企業コード
                    //row.FileHeaderGuid = salesDetail.FileHeaderGuid; // GUID
                    //row.UpdEmployeeCode = salesDetail.UpdEmployeeCode; // 更新従業員コード
                    //row.UpdAssemblyId1 = salesDetail.UpdAssemblyId1; // 更新アセンブリID1
                    //row.UpdAssemblyId2 = salesDetail.UpdAssemblyId2; // 更新アセンブリID2
                    //row.LogicalDeleteCode = salesDetail.LogicalDeleteCode; // 論理削除区分

                    // --- UPD 2009/10/19 ---------->>>>>
                    row.AcceptAnOrderNo = salesDetail.AcceptAnOrderNo; // 受注番号
                    // --- UPD 2009/10/19 ----------<<<<<
                    //row.AcptAnOdrStatus = salesDetail.AcptAnOdrStatus; // 受注ステータス
                    //row.SalesSlipNum = salesDetail.SalesSlipNum; // 売上伝票番号
                    //row.SalesRowNo = salesDetail.SalesRowNo; // 売上行番号
                    //row.SalesRowDerivNo = salesDetail.SalesRowDerivNo; // 売上行番号枝番
                    row.SectionCode = salesDetail.SectionCode; // 拠点コード
                    row.SubSectionCode = salesDetail.SubSectionCode; // 部門コード
                    row.SalesDate = salesDetail.SalesDate; // 売上日付
                    //row.CommonSeqNo = salesDetail.CommonSeqNo; // 共通通番
                    //row.SalesSlipDtlNum = salesDetail.SalesSlipDtlNum; // 売上明細通番
                    //row.AcptAnOdrStatusSrc = salesDetail.AcptAnOdrStatusSrc; // 受注ステータス（元）
                    //row.SalesSlipDtlNumSrc = salesDetail.SalesSlipDtlNumSrc; // 売上明細通番（元）
                    //row.SupplierFormalSync = salesDetail.SupplierFormalSync; // 仕入形式（同時）
                    //row.StockSlipDtlNumSync = salesDetail.StockSlipDtlNumSync; // 仕入明細通番（同時）
                    row.SalesSlipCdDtl = salesDetail.SalesSlipCdDtl; // 売上伝票区分（明細）
                    //>>>2010/02/26
                    //row.DeliGdsCmpltDueDate = salesDetail.DeliGdsCmpltDueDate; // 納品完了予定日
                    row.DeliGdsCmpltDueDate = salesDetail.AnswerDelivDate; // 納品完了予定日
                    //<<<2010/02/26
                    row.GoodsKindCode = salesDetail.GoodsKindCode; // 商品属性
                    row.GoodsSearchDivCd = salesDetail.GoodsSearchDivCd; // 商品検索区分
                    row.GoodsMakerCd = salesDetail.GoodsMakerCd; // 商品メーカーコード
                    row.MakerName = salesDetail.MakerName; // メーカー名称
                    row.MakerKanaName = salesDetail.MakerKanaName; // メーカーカナ名称
                    row.GoodsNo = salesDetail.GoodsNo; // 商品番号
                    row.GoodsName = salesDetail.GoodsName; // 商品名称
                    row.GoodsNameKana = salesDetail.GoodsNameKana; // 商品名称カナ
                    row.GoodsLGroup = salesDetail.GoodsLGroup; // 商品大分類コード
                    row.GoodsLGroupName = salesDetail.GoodsLGroupName; // 商品大分類名称
                    row.GoodsMGroup = salesDetail.GoodsMGroup; // 商品中分類コード
                    row.GoodsMGroupName = salesDetail.GoodsMGroupName; // 商品中分類名称
                    row.BLGroupCode = salesDetail.BLGroupCode; // BLグループコード
                    row.BLGroupName = salesDetail.BLGroupName; // BLグループコード名称
                    row.BLGoodsCode = salesDetail.BLGoodsCode; // BL商品コード
                    row.BLGoodsFullName = salesDetail.BLGoodsFullName; // BL商品コード名称（全角）
                    row.EnterpriseGanreCode = salesDetail.EnterpriseGanreCode; // 自社分類コード
                    row.EnterpriseGanreName = salesDetail.EnterpriseGanreName; // 自社分類名称
                    row.WarehouseCode = salesDetail.WarehouseCode; // 倉庫コード
                    row.WarehouseName = salesDetail.WarehouseName; // 倉庫名称
                    row.WarehouseShelfNo = salesDetail.WarehouseShelfNo; // 倉庫棚番
                    row.SalesOrderDivCd = salesDetail.SalesOrderDivCd; // 売上在庫取寄せ区分
                    row.OpenPriceDiv = salesDetail.OpenPriceDiv; // オープン価格区分
                    row.GoodsRateRank = salesDetail.GoodsRateRank; // 商品掛率ランク
                    row.CustRateGrpCode = salesDetail.CustRateGrpCode; // 得意先掛率グループコード
                    row.ListPriceRate = salesDetail.ListPriceRate; // 定価率
                    row.RateSectPriceUnPrc = salesDetail.RateSectPriceUnPrc; // 掛率設定拠点（定価）
                    row.RateDivLPrice = salesDetail.RateDivLPrice; // 掛率設定区分（定価）
                    row.PriceSelectDiv = salesDetail.PriceSelectDiv; // 標準価格選択区分（定価）// ADD 2013/01/24 鄧潘ハン REDMINE#34605
                    row.UnPrcCalcCdLPrice = salesDetail.UnPrcCalcCdLPrice; // 単価算出区分（定価）
                    row.PriceCdLPrice = salesDetail.PriceCdLPrice; // 価格区分（定価）
                    row.StdUnPrcLPrice = salesDetail.StdUnPrcLPrice; // 基準単価（定価）
                    row.FracProcUnitLPrice = salesDetail.FracProcUnitLPrice; // 端数処理単位（定価）
                    row.FracProcLPrice = salesDetail.FracProcLPrice; // 端数処理（定価）
                    row.ListPriceTaxIncFl = salesDetail.ListPriceTaxIncFl; // 定価（税込，浮動）
                    row.ListPriceTaxExcFl = salesDetail.ListPriceTaxExcFl; // 定価（税抜，浮動）
                    row.ListPriceChngCd = salesDetail.ListPriceChngCd; // 定価変更区分
                    row.SalesRate = salesDetail.SalesRate; // 売価率
                    row.RateSectSalUnPrc = salesDetail.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
                    row.RateDivSalUnPrc = salesDetail.RateDivSalUnPrc; // 掛率設定区分（売上単価）
                    row.UnPrcCalcCdSalUnPrc = salesDetail.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
                    row.PriceCdSalUnPrc = salesDetail.PriceCdSalUnPrc; // 価格区分（売上単価）
                    row.StdUnPrcSalUnPrc = salesDetail.StdUnPrcSalUnPrc; // 基準単価（売上単価）
                    row.FracProcUnitSalUnPrc = salesDetail.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
                    row.FracProcSalUnPrc = salesDetail.FracProcSalUnPrc; // 端数処理（売上単価）
                    row.SalesUnPrcTaxIncFl = salesDetail.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
                    row.SalesUnPrcTaxExcFl = salesDetail.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
                    row.SalesUnPrcChngCd = salesDetail.SalesUnPrcChngCd; // 売上単価変更区分
                    row.CostRate = salesDetail.CostRate; // 原価率
                    row.RateSectCstUnPrc = salesDetail.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
                    row.RateDivUnCst = salesDetail.RateDivUnCst; // 掛率設定区分（原価単価）
                    row.UnPrcCalcCdUnCst = salesDetail.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
                    row.PriceCdUnCst = salesDetail.PriceCdUnCst; // 価格区分（原価単価）
                    row.StdUnPrcUnCst = salesDetail.StdUnPrcUnCst; // 基準単価（原価単価）
                    row.FracProcUnitUnCst = salesDetail.FracProcUnitUnCst; // 端数処理単位（原価単価）
                    row.FracProcUnCst = salesDetail.FracProcUnCst; // 端数処理（原価単価）
                    row.SalesUnitCost = salesDetail.SalesUnitCost; // 原価単価
                    row.SalesUnitCostChngDiv = salesDetail.SalesUnitCostChngDiv; // 原価単価変更区分
                    row.RateBLGoodsCode = salesDetail.RateBLGoodsCode; // BL商品コード（掛率）
                    row.RateBLGoodsName = salesDetail.RateBLGoodsName; // BL商品コード名称（掛率）
                    row.RateGoodsRateGrpCd = salesDetail.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
                    row.RateGoodsRateGrpNm = salesDetail.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
                    row.RateBLGroupCode = salesDetail.RateBLGroupCode; // BLグループコード（掛率）
                    row.RateBLGroupName = salesDetail.RateBLGroupName; // BLグループ名称（掛率）
                    row.PrtBLGoodsCode = salesDetail.PrtBLGoodsCode; // BL商品コード（印刷）
                    row.PrtBLGoodsName = salesDetail.PrtBLGoodsName; // BL商品コード名称（印刷）
                    row.SalesCode = salesDetail.SalesCode; // 販売区分コード
                    row.SalesCdNm = salesDetail.SalesCdNm; // 販売区分名称
                    row.WorkManHour = salesDetail.WorkManHour; // 作業工数
                    row.RemainCntUpdDate = salesDetail.RemainCntUpdDate; // 残数更新日
                    row.SalesMoneyTaxInc = salesDetail.SalesMoneyTaxInc; // 売上金額（税込み）
                    row.SalesMoneyTaxExc = salesDetail.SalesMoneyTaxExc; // 売上金額（税抜き）
                    row.Cost = salesDetail.Cost; // 原価
                    row.GrsProfitChkDiv = salesDetail.GrsProfitChkDiv; // 粗利チェック区分
                    row.SalesGoodsCd = salesDetail.SalesGoodsCd; // 売上商品区分
                    row.SalesPriceConsTax = salesDetail.SalesPriceConsTax; // 売上金額消費税額
                    row.TaxationDivCd = salesDetail.TaxationDivCd; // 課税区分
                    row.PartySlipNumDtl = salesDetail.PartySlipNumDtl; // 相手先伝票番号（明細）
                    row.DtlNote = salesDetail.DtlNote; // 明細備考
                    row.SupplierCd = salesDetail.SupplierCd; // 仕入先コード
                    row.SupplierSnm = salesDetail.SupplierSnm; // 仕入先略称
                    row.OrderNumber = salesDetail.OrderNumber; // 発注番号
                    row.WayToOrder = salesDetail.WayToOrder; // 注文方法
                    row.SlipMemo1 = salesDetail.SlipMemo1; // 伝票メモ１
                    row.SlipMemo2 = salesDetail.SlipMemo2; // 伝票メモ２
                    row.SlipMemo3 = salesDetail.SlipMemo3; // 伝票メモ３
                    row.InsideMemo1 = salesDetail.InsideMemo1; // 社内メモ１
                    row.InsideMemo2 = salesDetail.InsideMemo2; // 社内メモ２
                    row.InsideMemo3 = salesDetail.InsideMemo3; // 社内メモ３
                    row.BfListPrice = salesDetail.BfListPrice; // 変更前定価
                    row.BfSalesUnitPrice = salesDetail.BfSalesUnitPrice; // 変更前売価
                    row.BfUnitCost = salesDetail.BfUnitCost; // 変更前原価
                    row.CmpltSalesRowNo = salesDetail.CmpltSalesRowNo; // 一式明細番号
                    row.CmpltGoodsMakerCd = salesDetail.CmpltGoodsMakerCd; // メーカーコード（一式）
                    row.CmpltMakerName = salesDetail.CmpltMakerName; // メーカー名称（一式）
                    row.CmpltMakerKanaName = salesDetail.CmpltMakerKanaName; // メーカーカナ名称（一式）
                    row.CmpltGoodsName = salesDetail.CmpltGoodsName; // 商品名称（一式）
                    row.CmpltShipmentCnt = salesDetail.CmpltShipmentCnt; // 数量（一式）
                    row.CmpltSalesUnPrcFl = salesDetail.CmpltSalesUnPrcFl; // 売上単価（一式）
                    row.CmpltSalesMoney = salesDetail.CmpltSalesMoney; // 売上金額（一式）
                    row.CmpltSalesUnitCost = salesDetail.CmpltSalesUnitCost; // 原価単価（一式）
                    row.CmpltCost = salesDetail.CmpltCost; // 原価金額（一式）
                    row.CmpltPartySalSlNum = salesDetail.CmpltPartySalSlNum; // 相手先伝票番号（一式）
                    row.CmpltNote = salesDetail.CmpltNote; // 一式備考
                    // --- ADD 2009/10/19 ---------->>>>>
                    row.SelectedGoodsNoDiv = salesDetail.SelectedGoodsNoDiv; // 印刷用品番有効区分
                    // --- ADD 2009/10/19 ----------<<<<<
                    row.PrtGoodsNo = salesDetail.PrtGoodsNo; // 印刷用品番
                    row.PrtMakerCode = salesDetail.PrtMakerCode; // 印刷用メーカーコード
                    row.PrtMakerName = salesDetail.PrtMakerName; // 印刷用メーカー名称

                    // ここ
                    //row.DtlRelationGuid = salesDetail.DtlRelationGuid; // 共通キー
                    row.CarRelationGuid = salesDetail.CarRelationGuid; // 車両情報共通キー

                    //row.SalesRowNoDisplay = salesDetail.SalesRowNoDisplay; // 行番号（表示用）
                    //row.SupplierStock = salesDetail.SupplierStock; // 現在庫数
                    //row.SupplierStockDisplay = salesDetail.SupplierStockDisplay; // 現在庫数（表示用）
                    //row.OpenPriceDivDisplay = salesDetail.OpenPriceDivDisplay; // オープン価格区分（表示用）
                    //row.ListPriceDisplay = salesDetail.ListPriceDisplay; // 定価（表示用）
                    //row.SalesUnPrcDisplay = salesDetail.SalesUnPrcDisplay; // 売上単価（表示用）
                    //row.AddUpEnableCnt = salesDetail.AddUpEnableCnt; // 計上可能数
                    //row.AlreadyAddUpCnt = salesDetail.AlreadyAddUpCnt; // 計上済数
                    //row.SalesMoneyDisplay = salesDetail.SalesMoneyDisplay; // 売上金額（表示用）
                    //row.TaxDiv = salesDetail.TaxDiv; // 課税区分（UI用）
                    //row.CanTaxDivChange = salesDetail.CanTaxDivChange; // 課税非課税区分変更可能フラグ
                    //row.RowStatus = salesDetail.RowStatus; // 行ステータス
                    //row.EditStatus = salesDetail.EditStatus; // エディットステータス
                    //row.SlipMemoExist = salesDetail.SlipMemoExist; // メモ存在フラグ
                    //row.SupplierSlipExist = salesDetail.SupplierSlipExist; // 仕入情報存在フラグ
                    //row.DetailGrossProfitRate = salesDetail.DetailGrossProfitRate; // 明細粗利率
                    //row.CostUpRate = salesDetail.CostUpRate; // 原価アップ率
                    //row.GrossProfitSecureRate = salesDetail.GrossProfitSecureRate; // 粗利確保率
                    //row.SupplierCdForStock = salesDetail.SupplierCdForStock; // 仕入先コード
                    //row.StockDate = salesDetail.StockDate; // 仕入日
                    //row.PartySalesSlipNum = salesDetail.PartySalesSlipNum; // 仕入伝票番号
                    //row.BoCode = salesDetail.BoCode; // BO区分
                    //row.SupplierCdForOrder = salesDetail.SupplierCdForOrder; // 発注先
                    //row.AcceptAnOrderCntForOrder = salesDetail.AcceptAnOrderCntForOrder; // 発注数
                    //row.SupplierSnmForOrder = salesDetail.SupplierSnmForOrder; // 発注先名称
                    //row.DeliveredGoodsDiv = salesDetail.DeliveredGoodsDiv; // 納品区分
                    //row.DeliveredGoodsDivNm = salesDetail.DeliveredGoodsDivNm; // 納品区分名称
                    //row.DeliveredGoodsDivNmSave = salesDetail.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
                    //row.FollowDeliGoodsDiv = salesDetail.FollowDeliGoodsDiv; // H納品区分
                    //row.FollowDeliGoodsDivNm = salesDetail.FollowDeliGoodsDivNm; // H納品区分名称
                    //row.FollowDeliGoodsDivNmSave = salesDetail.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
                    //row.UOEResvdSection = salesDetail.UOEResvdSection; // 指定拠点
                    //row.UOEResvdSectionNm = salesDetail.UOEResvdSectionNm; // 指定拠点名称
                    //row.UOEResvdSectionNmSave = salesDetail.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
                    //row.PriceStartDate = salesDetail.PriceStartDate; // 新定価適用日
                    //row.Dummy = salesDetail.Dummy; // ダミー（空欄表示用）
                    //row.SearchPartsModeState = salesDetail.SearchPartsModeState; // 部品検索状態

                    //-----------------------------------------------------------------------------
                    // 原価、原価金額再計算(テーブル上に税込、税抜項目が無い為)
                    //-----------------------------------------------------------------------------
                    double costTaxExc = 0;
                    double costTaxInc = 0;
                    double salesUnitCostTaxExc = 0;
                    double salesUnitCostTaxInc = 0;
                    this.CalcTaxExcAndTaxIncForStock(row.TaxationDivCd, row.SupplierCd, SalesSlip.ConsTaxRate, SalesSlip.TotalAmountDispWayCd, salesDetail.Cost, out costTaxExc, out costTaxInc);
                    this.CalcTaxExcAndTaxIncForStock(row.TaxationDivCd, row.SupplierCd, SalesSlip.ConsTaxRate, SalesSlip.TotalAmountDispWayCd, salesDetail.SalesUnitCost, out salesUnitCostTaxExc, out salesUnitCostTaxInc);
                    row.CostTaxExc = (long)costTaxExc;
                    row.CostTaxInc = (long)costTaxInc;
                    row.SalesUnitCostTaxExc = salesUnitCostTaxExc;
                    row.SalesUnitCostTaxInc = salesUnitCostTaxInc;

                    //-----------------------------------------------------------------------------
                    // 表示用定価、売単価、売上金額
                    //-----------------------------------------------------------------------------
                    if (this._salesSlip.ConsTaxLayMethod == (int)ConsTaxLayMethod.TaxExempt)
                    {
                        row.ListPriceDisplay = salesDetail.ListPriceTaxExcFl;
                        row.SalesUnPrcDisplay = salesDetail.SalesUnPrcTaxExcFl;
                        row.SalesMoneyDisplay = salesDetail.SalesMoneyTaxExc;
                    }
                    else if (this._salesSlip.TotalAmountDispWayCd == (int)TotalAmountDispWayCd.TotalAmount)
                    {
                        row.ListPriceDisplay = salesDetail.ListPriceTaxIncFl;
                        row.SalesUnPrcDisplay = salesDetail.SalesUnPrcTaxIncFl;
                        row.SalesMoneyDisplay = salesDetail.SalesMoneyTaxInc;
                    }
                    else
                    {
                        // 課税方式により分岐
                        switch ((CalculateTax.TaxationCode)salesDetail.TaxationDivCd)
                        {
                            case CalculateTax.TaxationCode.TaxExc:
                            case CalculateTax.TaxationCode.TaxNone:
                                row.ListPriceDisplay = salesDetail.ListPriceTaxExcFl;
                                row.SalesUnPrcDisplay = salesDetail.SalesUnPrcTaxExcFl;
                                row.SalesMoneyDisplay = salesDetail.SalesMoneyTaxExc;
                                break;
                            case CalculateTax.TaxationCode.TaxInc:
                                row.ListPriceDisplay = salesDetail.ListPriceTaxIncFl;
                                row.SalesUnPrcDisplay = salesDetail.SalesUnPrcTaxIncFl;
                                row.SalesMoneyDisplay = salesDetail.SalesMoneyTaxInc;
                                break;
                        }
                        //row.TaxationDivCd = salesDetail.TaxationDivCd;
                    }

                    //-----------------------------------------------------------------------------
                    // 数量関係
                    //-----------------------------------------------------------------------------
                    int sign = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;
                    switch ((SalesSlipInputAcs.AcptAnOdrStatusState)salesDetail.AcptAnOdrStatus)
                    {
                        case AcptAnOdrStatusState.Estimate:
                        case AcptAnOdrStatusState.UnitPriceEstimate:
                        case AcptAnOdrStatusState.Sales:
                        case AcptAnOdrStatusState.Shipment:
                            row.ShipmentCnt = salesDetail.ShipmentCnt; // 出荷数
                            row.ShipmentCntDefault = salesDetail.ShipmentCnt;
                            row.ShipmentCntDisplay = salesDetail.ShipmentCnt * sign;
                            row.AcceptAnOrderCnt = salesDetail.AcceptAnOrderCnt; // 受注数量
                            row.AcceptAnOrderCntDefault = salesDetail.AcceptAnOrderCnt; // 受注数量
                            row.AcceptAnOrderCntDisplay = 0;
                            row.AcptAnOdrAdjustCnt = salesDetail.AcptAnOdrAdjustCnt; // 受注調整数
                            row.AcptAnOdrRemainCnt = salesDetail.AcptAnOdrRemainCnt; // 受注残数

                            break;
                        case AcptAnOdrStatusState.AcceptAnOrder:
                            //----- DEL 2015/08/25 李侠 Redmine#47000 ①明細行から受注伝票を伝票複写する場合、「受注数」と「出荷数」の対応 ---------->>>>>
                            //row.ShipmentCnt = salesDetail.ShipmentCnt; // 出荷数
                            //row.ShipmentCntDefault = salesDetail.ShipmentCnt;
                            //row.ShipmentCntDisplay = salesDetail.ShipmentCnt * sign;
                            //----- DEL 2015/08/25 李侠 Redmine#47000 ①明細行から受注伝票を伝票複写する場合、「受注数」と「出荷数」の対応 ----------<<<<<
                            // --- UPD 2013/04/18 T.Nishi ---------->>>>>
                            //// UPD 2013/02/05 T.Miyamoto ------------------------------>>>>>
                            ////row.AcceptAnOrderCnt = salesDetail.ShipmentCnt; // 受注数量
                            ////row.AcceptAnOrderCntDefault = salesDetail.ShipmentCnt; // 受注数量
                            ////row.AcceptAnOrderCntDisplay = 0;
                            //row.AcceptAnOrderCnt = salesDetail.AcceptAnOrderCnt; // 受注数量
                            //row.AcceptAnOrderCntDefault = salesDetail.AcceptAnOrderCnt;
                            //row.AcceptAnOrderCntDisplay = salesDetail.AcceptAnOrderCnt * sign;
                            //// UPD 2013/02/05 T.Miyamoto ------------------------------<<<<<
                            row.AcceptAnOrderCnt = salesDetail.ShipmentCnt; // 受注数量
                            row.AcceptAnOrderCntDefault = salesDetail.ShipmentCnt; // 受注数量
                            //row.AcceptAnOrderCntDisplay = 0;// DEL 2015/08/25 李侠 Redmine#47000 ①明細行から受注伝票を伝票複写する場合、「受注数」と「出荷数」の対応
                            // --- UPD 2013/04/18 T.Nishi ----------<<<<<
                            row.AcptAnOdrAdjustCnt = salesDetail.AcptAnOdrAdjustCnt; // 受注調整数
                            row.AcptAnOdrRemainCnt = salesDetail.AcptAnOdrRemainCnt; // 受注残数
                            //----- ADD 2015/08/25 李侠 Redmine#47000 ①明細行から受注伝票を伝票複写する場合、「受注数」と「出荷数」の対応 ---------->>>>>
                            // 売上伝票種別が「売上」以外の場合、受注データの出荷数が「出荷数」に設定します。
                            // 売上伝票種別が「売上」場合、伝票区分が「返品」または売上全体設定の受注区分が「しない」の場合、「出荷数」と「出荷数」両方「0」をセットします。
                            // 売上伝票種別が「売上」場合、伝票区分が「売上」、且つ売上全体設定の受注区分が「する」の場合、受注データの出荷数が「受注数」に設定します。
                            if (SalesSlip.AcptAnOdrStatusDisplay != (int)AcptAnOdrStatusState.Sales)
                            {
                                row.ShipmentCnt = salesDetail.ShipmentCnt; // 出荷数
                                row.ShipmentCntDefault = salesDetail.ShipmentCnt;
                                row.ShipmentCntDisplay = salesDetail.ShipmentCnt * sign;
                                row.AcceptAnOrderCntDisplay = 0; // 受注数(表示用)
                            }
                            else if ((this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) //伝票区分が「返品」 
                                     || (this._salesSlipInputInitDataAcs.GetSalesTtlSt().AcpOdrInputDiv == 0))    //売上全体設定の受注区分が「しない」の場合
                            {
                                row.ShipmentCnt = 0; // 出荷数
                                row.ShipmentCntDefault = 0;
                                row.ShipmentCntDisplay = 0;
                                row.AcceptAnOrderCntDisplay = 0; // 受注数(表示用)
                            }
                            else
                            {
                                row.ShipmentCnt = 0; // 出荷数
                                row.ShipmentCntDefault = 0;
                                row.ShipmentCntDisplay = 0;
                                row.AcceptAnOrderCntDisplay = salesDetail.ShipmentCnt; // 受注数(表示用)
                            }
                            //----- ADD 2015/08/25 李侠 Redmine#47000 ①明細行から受注伝票を伝票複写する場合、「受注数」と「出荷数」の対応 ----------<<<<<
                            break;
                    }
                    // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                    //// ADD 2013/04/12 T.Miyamoto ------------------------------>>>>>
                    //if (SalesSlip.AcptAnOdrStatusDisplay == (int)AcptAnOdrStatusState.AcceptAnOrder) // 受注の場合
                    //{
                    //    row.AcceptAnOrderCntDisplay = salesDetail.AcceptAnOrderCnt * sign; // 受注数(画面表示)
                    //    row.ShipmentCntDisplay = 0; //出荷数(画面表示)
                    //    row.ShipmentCnt = 0; //出荷数
                    //}
                    //// ADD 2013/04/12 T.Miyamoto ------------------------------<<<<<
                    // --- DEL 2013/04/18 T.Nishi ----------<<<<<
                    if (SalesSlip.AcptAnOdrStatusDisplay == (int)AcptAnOdrStatusState.UnitPriceEstimate) // 単価見積の場合、各種数量ゼロ
                    {
                        row.ShipmentCnt = 0; // 出荷数
                        row.ShipmentCntDefault = 0;
                        row.ShipmentCntDisplay = 0;
                        row.AcceptAnOrderCnt = 0; // 受注数量
                        row.AcceptAnOrderCntDefault = 0; // 受注数量
                        row.AcceptAnOrderCntDisplay = 0;
                        row.AcptAnOdrAdjustCnt = 0; // 受注調整数
                        row.AcptAnOdrRemainCnt = 0; // 受注残数
                    }

                    //-----------------------------------------------------------------------------
                    // その他補正
                    //-----------------------------------------------------------------------------
                    // 課税区分
                    if (row.TaxationDivCd == (int)CalculateTax.TaxationCode.TaxNone)
                    {
                        row.TaxDiv = 1;												// 課税区分←非課税
                    }
                    else
                    {
                        row.TaxDiv = 0;												// 課税区分←課税
                    }

                    // 課税非課税区分変更可能フラグ
                    row.CanTaxDivChange = false;

                    // EditStatus
                    if (salesDetail.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount) // 行値引き
                    {
                        if (salesDetail.ShipmentCnt != 0)
                        {
                            row.EditStatus = SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount;
                        }
                        else
                        {
                            row.SalesUnPrcDisplay = 0;	// 単価は非表示
                            row.EditStatus = SalesSlipInputAcs.ctEDITSTATUS_RowDiscount;
                        }
                    }
                    else if (salesDetail.SalesSlipCdDtl == (int)SalesSlipCdDtl.Annotation) // 注釈
                    {
                        row.EditStatus = SalesSlipInputAcs.ctEDITSTATUS_Annotation;
                    }
                    else
                    {
                        row.EditStatus = SalesSlipInputAcs.ctEDITSTATUS_AllOK;
                    }

                    // 部品検索状態
                    switch (salesDetail.GoodsSearchDivCd)
                    {
                        case 0: // BLコード検索
                            row.SearchPartsModeState = (int)SearchPartsModeState.BLCodeSearch;
                            break;
                        case 1: // 品番検索
                            row.SearchPartsModeState = (int)SearchPartsModeState.GoodsNoSearch;
                            break;
                        case 2: //手入力
                            row.SearchPartsModeState = (int)SearchPartsModeState.NonSearch;
                            break;
                    }

                    // 売上金額手入力区分
                    if ((row.SalesUnPrcDisplay == 0) && (row.SalesMoneyDisplay != 0))
                    {
                        row.SalesMoneyInputDiv = (int)SalesMoneyInputDiv.Input;
                    }
                    else
                    {
                        row.SalesMoneyInputDiv = (int)SalesMoneyInputDiv.Calculate;
                    }

                    // メモ
                    this.MemoInfoAdjust(ref row);

                    #region 計上補正
                    //-----------------------------------------------------------------------------
                    // 計上補正
                    //-----------------------------------------------------------------------------
                    if (isAddUp)
                    {
                        row.EditStatus = ctEDITSTATUS_AddUpNew;
                        row.AcptAnOdrStatusSrc = salesDetail.AcptAnOdrStatus;		// 計上元受注ステータス
                        row.SalesSlipDtlNumSrc = salesDetail.SalesSlipDtlNum;		// 計上元明細通番

                        switch ((SalesSlipInputAcs.AcptAnOdrStatusState)row.AcptAnOdrStatus)
                        {
                            case AcptAnOdrStatusState.Estimate:
                            case AcptAnOdrStatusState.UnitPriceEstimate:

                                if (this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt().EstmCountReflectDiv == 0)
                                {
                                    row.ShipmentCnt = row.AcptAnOdrRemainCnt;		    // 出荷数
                                    row.ShipmentCntDisplay = row.AcptAnOdrRemainCnt;	// 出荷数(表示)
                                    row.ShipmentCntDefault = row.AcptAnOdrRemainCnt;	// 出荷数初期値
                                    row.AddUpEnableCnt = row.AcptAnOdrRemainCnt;		// 計上可能数
                                    row.AlreadyAddUpCnt = 0;						    // 計上済数量

                                    row.AcceptAnOrderCntDisplay = 0;                    // 受注数(表示)
                                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                                    row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;        // 受注数
                                    row.AcptAnOdrAdjustCnt = 0;						    // 受注調整数
                                    row.AcptAnOdrRemainCnt = 0;						    // 受注残数
                                }
                                else
                                {
                                    row.ShipmentCnt = 0;		    // 出荷数
                                    row.ShipmentCntDisplay = 0;	// 出荷数(表示)
                                    row.ShipmentCntDefault = 0;	// 出荷数初期値
                                    row.AddUpEnableCnt = row.AcptAnOdrRemainCnt;		// 計上可能数
                                    row.AlreadyAddUpCnt = 0;						    // 計上済数量

                                    row.AcceptAnOrderCntDisplay = row.AcptAnOdrRemainCnt; // 受注数(表示)
                                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                                    row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;        // 受注数
                                    row.AcptAnOdrAdjustCnt = 0;						    // 受注調整数
                                    row.AcptAnOdrRemainCnt = 0;						    // 受注残数

                                    // 受注情報設定
                                    this.SettingSalesDetailAcceptAnOrder(row.SalesRowNo);
                                }
                                break;
                            case AcptAnOdrStatusState.Sales:
                            case AcptAnOdrStatusState.Shipment:
                            case AcptAnOdrStatusState.AcceptAnOrder:
                                row.ShipmentCnt = row.AcptAnOdrRemainCnt;		    // 出荷数
                                row.ShipmentCntDisplay = row.AcptAnOdrRemainCnt;	// 出荷数(表示)
                                row.ShipmentCntDefault = row.AcptAnOdrRemainCnt;	// 出荷数初期値
                                row.AddUpEnableCnt = row.AcptAnOdrRemainCnt;		// 計上可能数
                                row.AlreadyAddUpCnt = 0;						    // 計上済数量

                                row.AcceptAnOrderCntDisplay = 0;                    // 受注数(表示)
                                row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                                row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;        // 受注数
                                row.AcptAnOdrAdjustCnt = 0;						    // 受注調整数
                                row.AcptAnOdrRemainCnt = 0;						    // 受注残数
                                break;
                        }

                        //>>>2012/05/02
                        // 貸出計上
                        if (row.AcptAnOdrStatusSrc == (int)AcptAnOdrStatusState.Shipment)
                        {
                            row.SupplierCdForStock = salesDetail.RentSyncSupplier;
                            row.StockDate = salesDetail.RentSyncStockDate;
                            row.PartySalesSlipNum = salesDetail.RentSyncSupSlipNo;

                            #region ●仕入情報設定
                            this.SettingStockTempInfo(row.SalesRowNo);
                            StockTemp stockTemp = new StockTemp();
                            if (this._salesSlipStockInfoInputAcs.StockTemp != null)
                            {
                                stockTemp = this._salesSlipStockInfoInputAcs.StockTemp.Clone();
                            }

                            Supplier supplier;
                            int status = this._supplierAcs.Read(out supplier, this._enterpriseCode, salesDetail.RentSyncSupplier);
                            // 仕入先情報設定
                            this.SettingSalesDetailSupplierInfo(row.SalesRowNo, supplier);
                            // 仕入先情報設定(仕入情報)
                            this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplier(ref stockTemp, supplier);

                            stockTemp.StockDate = salesDetail.RentSyncStockDate;
                            // 計上日の再セット
                            this._salesSlipStockInfoInputAcs.SettingAddUpDate(ref stockTemp);

                            stockTemp.PartySaleSlipNum = salesDetail.RentSyncSupSlipNo;

                            this._salesSlipStockInfoInputAcs.Cache(stockTemp);
                            #endregion
                        }
                        //<<<2012/05/02

                        this.LnkSalesDetailRowSettingFromSalesDetail(salesDetail);
                    }
                    #endregion

                    #region 在庫情報
                    //-------------------------------------------------
                    // 在庫情報
                    //-------------------------------------------------
                    if (stock != null)
                    {
                        this.CacheStockInfo(stock);

                        row.WarehouseCode = stock.WarehouseCode;
                        row.WarehouseName = stock.WarehouseName;
                        row.WarehouseShelfNo = stock.WarehouseShelfNo;
                        row.SupplierStock = stock.ShipmentPosCnt;

                        row.SupplierStockDisplay = stock.ShipmentPosCnt;
                        if (this.SupplierStockCountChangeCheck(row))
                        {
                            if (Math.Abs(row.AcceptAnOrderCntDisplay) != 0)
                            {
                                row.SupplierStockDisplay -= (Math.Abs(row.AcceptAnOrderCntDisplay));
                            }
                            else
                            {
                                row.SupplierStockDisplay -= (Math.Abs(row.ShipmentCntDisplay));
                            }
                        }
                    }
                    #endregion

                    // 売上明細データテーブル仕入情報設定処理
                    // --- UPD 2012/10/04 Y.Wakita ---------->>>>>
                    //this.SettingSalesDetailRowStockTempInfo(row);
                    this.SettingSalesDetailRowStockTempInfo(row, false);
                    // --- UPD 2012/10/04 Y.Wakita ----------<<<<<

                    // 売上明細データテーブルUOE発注情報設定処理
                    this.SettingSalesDetailRowUOEOrderDtl(row);

                    // 売単価、原単価初期値設定
                    row.SalesUnitCostTaxExcDefault = row.SalesUnitCostTaxExc;
                    row.SalesUnitCostTaxIncDefault = row.SalesUnitCostTaxInc;
                    row.SalesUnPrcTaxExcFlDefault = row.SalesUnPrcTaxExcFl;
                    row.SalesUnPrcTaxIncFlDefault = row.SalesUnPrcTaxIncFl;

                    // 数量初期値
                    row.ShipmentCntDefForChk = row.ShipmentCnt;
                    row.AcceptAnOrderCntDefForChk = row.AcceptAnOrderCnt;

                    // 2012/01/16 Add >>>
                    row.GoodsSpecialNote = salesDetail.GoodsSpecialNote; // 特記事項
                    // 2012/01/16 Add <<<

                    // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                    //// ADD 2013/04/12 T.Miyamoto ------------------------------>>>>>
                    //if (SalesSlip.AcptAnOdrStatusDisplay == (int)AcptAnOdrStatusState.AcceptAnOrder) // 受注の場合
                    //{
                    //    // 受注情報設定
                    //    this.SettingSalesDetailAcceptAnOrder(row.SalesRowNo);
                    //}
                    //// ADD 2013/04/12 T.Miyamoto ------------------------------<<<<<
                    // --- DEL 2013/04/18 T.Nishi ----------<<<<<
                    //----- ADD 2015/08/25 李侠 Redmine#47000 ①明細行から受注伝票を伝票複写する場合、「受注数」と「出荷数」の対応 ---------->>>>>
                    // 明細複写の場合(isAddUpフラグ：false）
                    // 受注数(表示用)の値がある場合、受注情報設定を行います。
                    if (!isAddUp && row.AcceptAnOrderCntDisplay!=0)
                    {
                        // 受注情報設定
                        this.SettingSalesDetailAcceptAnOrder(row.SalesRowNo);
                    }
                    //----- ADD 2015/08/25 李侠 Redmine#47000 ①明細行から受注伝票を伝票複写する場合、「受注数」と「出荷数」の対応 ----------<<<<<
                }
            }
        }

        /// <summary>
        /// 元明細読込処理
        /// </summary>
        /// <param name="salesDetailList"></param>
        /// <returns></returns>
        /// <br>UpdateNote  : 2010/12/01 yangmj 障害改良対応</br>
        public List<SalesDetail> ReadDetailSrc(List<SalesDetail> salesDetailList)
        {
            //---------------------------------------------------
            // 売上データ読込パラメータセット
            //---------------------------------------------------
            CustomSerializeArrayList paraList = new CustomSerializeArrayList();
            foreach (SalesDetail detail in salesDetailList)
            {
                SalesDetailWork salesDetailWork = new SalesDetailWork();
                salesDetailWork.EnterpriseCode = detail.EnterpriseCode;
                salesDetailWork.AcptAnOdrStatus = detail.AcptAnOdrStatusSrc;
                salesDetailWork.SalesSlipDtlNum = detail.SalesSlipDtlNumSrc;
                // -----UPD 2010/12/01----->>>>>
                if (detail.SalesSlipDtlNumSrc != 0)
                {
                    paraList.Add(salesDetailWork);
                }
                //paraList.Add(salesDetailWork);
                // -----UPD 2010/12/01-----<<<<<
            }

            #region ●リモート参照用パラメータ
            //------------------------------------------------------
            // リモート参照用パラメータ
            //------------------------------------------------------
            IOWriteCtrlOptWork iOWriteCtrlOptWork = new IOWriteCtrlOptWork();                                   // リモート参照用パラメータ
            this.SettingIOWriteCtrlOptWork(SalesSlipInputAcs.OptWorkSettingType.Read, out iOWriteCtrlOptWork); // リモート参照用パラメータ設定処理
            paraList.Add(iOWriteCtrlOptWork);
            #endregion

            object paraObj = (object)paraList;
            object retObj = null;
            object retObj2 = null;

            //---------------------------------------------------
            // 売上データ再読込
            //---------------------------------------------------
            int status = this._iIOWriteControlDB.ReadDetail(ref paraObj, out retObj, out retObj2);

            CustomSerializeArrayList retList = (CustomSerializeArrayList)retObj;
            CustomSerializeArrayList retList2 = (CustomSerializeArrayList)retObj2;

            if (retList != null) status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            List<SalesDetail> retSalesDetailList = null;
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                //---------------------------------------------------
                // データリスト分割
                //---------------------------------------------------
                SalesDetailWork[] salesDetailWorkArray;
                AcceptOdrCarWork[] acceptOdrCarWorkArray;
                StockSlipWork[] stockSlipWorkArray;
                StockDetailWork[] stockDetailWorkArray;
                UOEOrderDtlWork[] uoeOrderDtlWorkArray;
                DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForDetailsReading(retList, retList2, out salesDetailWorkArray, out acceptOdrCarWorkArray, out stockSlipWorkArray, out stockDetailWorkArray, out uoeOrderDtlWorkArray);

                retSalesDetailList = ConvertSalesSlip.UIDataFromParamData(salesDetailWorkArray);
            }

            return retSalesDetailList;
        }

        /// <summary>
        /// 元明細読込処理
        /// </summary>
        /// <returns></returns>
        public List<SalesDetail> ReadDetailSrc()
        {
            //---------------------------------------------------
            // 売上データ読込パラメータセット
            //---------------------------------------------------
            CustomSerializeArrayList paraList = new CustomSerializeArrayList();
            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this._salesDetailDataTable)
            {
                SalesDetailWork salesDetailWork = new SalesDetailWork();
                salesDetailWork.EnterpriseCode = this._salesSlip.EnterpriseCode;
                salesDetailWork.AcptAnOdrStatus = salesDetailRow.AcptAnOdrStatusSrc;
                salesDetailWork.SalesSlipDtlNum = salesDetailRow.SalesSlipDtlNumSrc;
                // -----UPD 2010/11/25----->>>>>
                if (salesDetailWork.SalesSlipDtlNum != 0)
                {
                    paraList.Add(salesDetailWork);
                }
                //paraList.Add(salesDetailWork);
                // -----UPD 2010/11/25-----<<<<<
            }

            #region ●リモート参照用パラメータ
            //------------------------------------------------------
            // リモート参照用パラメータ
            //------------------------------------------------------
            IOWriteCtrlOptWork iOWriteCtrlOptWork = new IOWriteCtrlOptWork();                                   // リモート参照用パラメータ
            this.SettingIOWriteCtrlOptWork(SalesSlipInputAcs.OptWorkSettingType.Read, out iOWriteCtrlOptWork); // リモート参照用パラメータ設定処理
            paraList.Add(iOWriteCtrlOptWork);
            #endregion

            object paraObj = (object)paraList;
            object retObj = null;
            object retObj2 = null;

            //---------------------------------------------------
            // 売上データ再読込
            //---------------------------------------------------
            int status = this._iIOWriteControlDB.ReadDetail(ref paraObj, out retObj, out retObj2);

            CustomSerializeArrayList retList = (CustomSerializeArrayList)retObj;
            CustomSerializeArrayList retList2 = (CustomSerializeArrayList)retObj2;

            if (retList != null) status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            List<SalesDetail> retSalesDetailList = null;
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                //---------------------------------------------------
                // データリスト分割
                //---------------------------------------------------
                SalesDetailWork[] salesDetailWorkArray;
                AcceptOdrCarWork[] acceptOdrCarWorkArray;
                StockSlipWork[] stockSlipWorkArray;
                StockDetailWork[] stockDetailWorkArray;
                UOEOrderDtlWork[] uoeOrderDtlWorkArray;
                DivisionSalesSlipCustomSerializeArrayList.DivisionCustomSerializeArrayListForDetailsReading(retList, retList2, out salesDetailWorkArray, out acceptOdrCarWorkArray, out stockSlipWorkArray, out stockDetailWorkArray, out uoeOrderDtlWorkArray);

                retSalesDetailList = ConvertSalesSlip.UIDataFromParamData(salesDetailWorkArray);
            }

            return retSalesDetailList;
        }

        /// <summary>
        /// 出力文字列生成処理(計上元データ存在時メッセージ)
        /// </summary>
        /// <param name="salesDetailList"></param>
        /// <param name="salesDetailListSrc"></param>
        /// <returns></returns>
        public string MakeAddTextSrc(List<SalesDetail> salesDetailList, List<SalesDetail> salesDetailListSrc)
        {
            string retText = string.Empty;

            foreach (SalesDetail salesDetail in salesDetailList)
            {
                SalesDetail salesDetailSrc = salesDetailListSrc.Find(
                    delegate(SalesDetail src)
                    {
                        if ((salesDetail.AcptAnOdrStatusSrc == src.AcptAnOdrStatus) &&
                            (salesDetail.SalesSlipDtlNumSrc == src.SalesSlipDtlNum))
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                );

                if ((salesDetailListSrc == null) || (salesDetailSrc == null)) continue;

                retText = retText + string.Format("  {0}行目：伝票番号", salesDetail.SalesRowNo) + salesDetailSrc.SalesSlipNum + " " + GetAcptAnOdrStatusName(salesDetailSrc.AcptAnOdrStatus) + "伝票    \r\n";
            }

            return retText;
        }

        /// <summary>
        /// 出力文字列生成処理(計上元データ存在時メッセージ)
        /// </summary>
        /// <param name="salesDetailListSrc"></param>
        /// <returns></returns>
        public string MakeAddTextSrc(List<SalesDetail> salesDetailListSrc)
        {
            string retText = string.Empty;

            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this._salesDetailDataTable)
            {
                SalesDetail salesDetailSrc = salesDetailListSrc.Find(
                    delegate(SalesDetail src)
                    {
                        if ((salesDetailRow.AcptAnOdrStatusSrc == src.AcptAnOdrStatus) &&
                            (salesDetailRow.SalesSlipDtlNumSrc == src.SalesSlipDtlNum))
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                );

                if ((salesDetailListSrc == null) || (salesDetailSrc == null)) continue;

                retText = retText + string.Format("  {0}行目：伝票番号", salesDetailRow.SalesRowNo) + salesDetailSrc.SalesSlipNum + " " + GetAcptAnOdrStatusName(salesDetailSrc.AcptAnOdrStatus) + "伝票    \r\n";
            }

            return retText;
        }
        #endregion

        /// <summary>
        /// 受注ステータスより、受注ステータス名称を取得します。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <returns>受注ステータス名称</returns>
        public string GetAcptAnOdrStatusName(SalesSlip salesSlip)
        {
            return this.GetAcptAnOdrStatusName(salesSlip.AcptAnOdrStatus);
        }

        /// <summary>
        /// 受注ステータスより、受注ステータス名称を取得します。
        /// </summary>
        /// <param name="acptAnOdrStatus"></param>
        /// <returns></returns>
        public string GetAcptAnOdrStatusName(int acptAnOdrStatus)
        {
            string AcptAnOdrStatusName = string.Empty;

            switch ((SalesSlipInputAcs.AcptAnOdrStatusState)acptAnOdrStatus)
            {
                case SalesSlipInputAcs.AcptAnOdrStatusState.Estimate:
                    {
                        AcptAnOdrStatusName = "見積";
                        break;
                    }
                case SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate:
                    {
                        AcptAnOdrStatusName = "単価見積";
                        break;
                    }
                case SalesSlipInputAcs.AcptAnOdrStatusState.Sales:
                    {
                        AcptAnOdrStatusName = "売上";
                        break;
                    }
                case SalesSlipInputAcs.AcptAnOdrStatusState.Shipment:
                    {
                        AcptAnOdrStatusName = "貸出";
                        break;
                    }
                case SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder:
                    {
                        AcptAnOdrStatusName = "受注";
                        break;
                    }
            }

            return AcptAnOdrStatusName;

        }
        #region ●各種キャッシュ
        /// <summary>
        /// 売上データオブジェクトをインスタンス変数にキャッシュします。
        /// </summary>
        /// <param name="source">売上データオブジェクト</param>
        public void Cache(SalesSlip salesSlip)
        {
            this._salesSlip = salesSlip.Clone();
            this._currentSalesSlipNum = salesSlip.SalesSlipNum.PadLeft(9, '0');
            if ((salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.Shipment) &&
                (this._salesSlip.ShipmentDay != DateTime.MinValue)) this._salesSlip.SalesDate = this._salesSlip.ShipmentDay;
            if (this._salesSlip.AddUpADate == DateTime.MinValue)
            {
                this._salesSlip.AddUpADate = this._salesSlip.SalesDate;
            }

            if (this._salesSlip.DeliveredGoodsDiv == 0)
            {
                // 納品区分
                this._salesSlip.DeliveredGoodsDiv = this._salesSlipInputInitDataAcs.GetMinCode_FormUserCd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_DeliveredGoodsDiv);
                this._salesSlip.DeliveredGoodsDivNm = this._salesSlipInputInitDataAcs.GetName_FromUserGdBd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_DeliveredGoodsDiv, this._salesSlip.DeliveredGoodsDiv);
                if (this._salesSlip.DeliveredGoodsDivNm.Length > 10) this._salesSlip.DeliveredGoodsDivNm = this._salesSlip.DeliveredGoodsDivNm.Substring(0, 10);
            }
        }

        /// <summary>
        /// 売上データオブジェクトをインスタンス変数にキャッシュします。
        /// </summary>
        /// <param name="source">売上データオブジェクト</param>
        public void CacheForChange(SalesSlip salesSlip)
        {
            this._salesSlip = salesSlip.Clone();
            this._currentSalesSlipNum = salesSlip.SalesSlipNum.PadLeft(9, '0');
            if (this._salesSlip.AddUpADate == DateTime.MinValue)
            {
                this._salesSlip.AddUpADate = this._salesSlip.SalesDate;
            }

            if (this._salesSlip.DeliveredGoodsDiv == 0)
            {
                // 納品区分
                this._salesSlip.DeliveredGoodsDiv = this._salesSlipInputInitDataAcs.GetMinCode_FormUserCd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_DeliveredGoodsDiv);
                this._salesSlip.DeliveredGoodsDivNm = this._salesSlipInputInitDataAcs.GetName_FromUserGdBd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_DeliveredGoodsDiv, this._salesSlip.DeliveredGoodsDiv);
                if (this._salesSlip.DeliveredGoodsDivNm.Length > 10) this._salesSlip.DeliveredGoodsDivNm = this._salesSlip.DeliveredGoodsDivNm.Substring(0, 10);
            }
        }

        /// <summary>
        /// 売上／受注データオブジェクトをインスタンス変数にキャッシュします。
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesSlipAcptAnOdr"></param>
        public void Cache(SalesSlip salesSlip, SalesSlip salesSlipAcptAnOdr)
        {
            this._salesSlip = salesSlip.Clone();
            this._salesSlipAcptAnOdr = salesSlipAcptAnOdr.Clone();
            this._currentSalesSlipNum = salesSlip.SalesSlipNum.PadLeft(9, '0');
        }

        /// <summary>
        /// 入金データオブジェクトをインスタンス変数にキャッシュします。
        /// </summary>
        /// <param name="depsitMain"></param>
        public void Cache(SearchDepsitMain depsitMain, SearchDepositAlw depositAlw)
        {
            if (depsitMain != null) this._depsitMain = depsitMain.Clone();
            if (depositAlw != null) this._depositAlw = depositAlw.Clone();
        }

        /// <summary>
        /// 売単価、原単価のデフォルト値を退避します。
        /// </summary>
        public void CacheDefaultValue()
        {
            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                row.SalesUnitCostTaxExcDefault = row.SalesUnitCostTaxExc;
                row.SalesUnitCostTaxIncDefault = row.SalesUnitCostTaxInc;
                row.SalesUnPrcTaxExcFlDefault = row.SalesUnPrcTaxExcFlDefault;
                row.SalesUnPrcTaxIncFlDefault = row.SalesUnPrcTaxIncFlDefault;

                row.ShipmentCntDefForChk = row.ShipmentCnt;
                row.AcceptAnOrderCntDefForChk = row.ShipmentCnt;
            }
        }
        #endregion

        // --- ADD K2021/08/23 陳艶丹 PMKOBETSU-4178 税率のログ追加--->>>>
        /// <summary>
        /// ログ内容を設定します。
        /// </summary>
        /// <param name="salesSlip">売上データ</param>
        /// <param name="masterRate">税率設定マスタ</param>
        /// <remarks>
        /// <br>Note       : ログ内容を設定します。</br>
        /// <br>Programmer : 陳艶丹</br>
        /// <br>Date       : K2021/08/23</br> 
        /// </remarks>
        private string AddUpLogInfo(SalesSlip salesSlip, double masterRate)
        {
            StringBuilder logMsg = new StringBuilder();
            try
            {
                // ログ内容を作成
                // 元伝票番号
                logMsg.Append(string.Format(CtBfSalesSlipNo, this._salesSlipBeforeAddUp.SalesSlipNum));
                // 売上日付
                logMsg.Append(string.Format(CtSalesDateStr, salesSlip.SalesDate.ToString(CtDateFormate)));
                // 入力モード
                logMsg.Append(string.Format(CtInputMode, salesSlip.InputMode));
                // 売上伝票の消費税転嫁方式
                logMsg.Append(string.Format(CtConsTaxLayMethod, salesSlip.ConsTaxLayMethod));
                // 計上時点の消費税率画面に入力した税率
                logMsg.Append(string.Format(CtTaxRateInput, this._salesSlipInputInitDataAcs.TaxRateInput));
                // 計上時点の税率設定マスタから取得した税率
                logMsg.Append(string.Format(CtMasterRate, masterRate));
                // 計上元伝票の税率
                logMsg.Append(string.Format(CtConsTaxRate, salesSlip.ConsTaxRate));
                // 判断用税率
                logMsg.Append(string.Format(CtTaxRate, this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate)));
                // 貸出同時仕入伝票Flg
                logMsg.Append(string.Format(CtRentSyncSupFlg, _salesSlipInputInitDataAcs.RentSyncSupFlg));
                // 税率設定マスタ
                TaxRateSet taxRateSet = this._salesSlipInputInitDataAcs.GetTaxRateSet();
                if (taxRateSet == null)
                {
                    logMsg.Append(CtTaxRateNull);
                }
                else
                {
                    logMsg.Append(string.Format(CtTaxRateSet, taxRateSet.TaxRateStartDate.ToString(CtDateFormate), taxRateSet.TaxRateEndDate.ToString(CtDateFormate), taxRateSet.TaxRate,
                                                              taxRateSet.TaxRateStartDate2.ToString(CtDateFormate), taxRateSet.TaxRateEndDate2.ToString(CtDateFormate), taxRateSet.TaxRate2,
                                                              taxRateSet.TaxRateStartDate3.ToString(CtDateFormate), taxRateSet.TaxRateEndDate3.ToString(CtDateFormate), taxRateSet.TaxRate3));
                }
            }
            catch
            {
                // 既存ロジックに影響無し
            }
            return logMsg.ToString();
        }
        /// <summary>
        /// ログファイルを出力します。
        /// </summary>
        /// <param name="logMsg">ログメッセージ</param>
        /// <remarks>
        /// <br>Note       : ログファイルを出力します。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : K2021/08/23</br>
        /// <br>Note       : PMKOBETSU-4192 伝票入力後の処理が遅い件の調査</br> 
        /// <br>Date       : 2021/10/09 田建委</br>
        /// </remarks>
        public void OutLog(string logMsg)
        {
            try
            {
                if (LogCommon == null)
                {
                    LogCommon = new OutLogCommon();
                }
                // プロセスハンドル
                IntPtr handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
                // ログ内容
                logMsg = string.Format(CtLogString, handle.ToString(), logMsg);
                // ログ出力
                //LogCommon.OutputClientLog(CtAssemblyName, logMsg, this._enterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);//DEL 2021/10/09 田建委 PMKOBETSU-4192 伝票入力後の処理が遅い件の調査
                LogCommon.OutputClientLog(CtRateLogSetting, logMsg, this._enterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);//ADD 2021/10/09 田建委 PMKOBETSU-4192 伝票入力後の処理が遅い件の調査
            }
            catch
            {
                // 既存ロジックに影響無し
            }
        }
        // --- ADD K2021/08/23 陳艶丹 PMKOBETSU-4178 税率のログ追加--- <<<<

        #region ●売上データオブジェクト設定
        /// <summary>
        /// 売上データに得意先の情報を設定します。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト（ref）</param>
        /// <param name="customerInfo">得意先マスタオブジェクト</param>
        /// <br>Update Note: 2010/06/02 楊明俊 PM.NS障害・改良対応（７月リリース案件）</br>
        /// <br>             No.8得意先マスタの担当者が未設定の場合、得意先コード入力後に担当者を空白表示とする。</br>
        /// <br>Update Note: 2013/12/19 陳健</br>
        /// <br>             Redmine#41550 売上伝票入力消費税8%増税対応。</br>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        /// <br>Update Note: 2021/08/23 陳艶丹</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>           : PMKOBETSU-4178 税率のログ追加</br> 
        public void SettingSalesSlipFromCustomer(ref SalesSlip salesSlip, CustomerInfo customerInfo)
        {
            if (salesSlip == null)
            {
                salesSlip.CustomerCode = 0;                     // 得意先コード
                salesSlip.CustomerName = string.Empty;          // 得意先名称１
                salesSlip.CustomerName2 = string.Empty;         // 得意先名称２
                salesSlip.CustomerSnm = string.Empty;           // 略称
                salesSlip.HonorificTitle = string.Empty;        // 敬称
                salesSlip.OutputNameCode = 0;                   // 諸口コード
                salesSlip.BusinessTypeCode = 0;                 // 業種コード
                salesSlip.BusinessTypeName = string.Empty;      // 業種名称
                salesSlip.SalesAreaCode = 0;                    // 販売エリアコード
                salesSlip.SalesAreaName = string.Empty;         // 販売エリア名称
                salesSlip.CustRateGrpCode = 0;                  // 得意先掛率グループコード
                salesSlip.ConsTaxLayMethod = 0;                 // 消費税転嫁方式
                salesSlip.ConsTaxRate = 0;                      // 消費税税率
                salesSlip.ClaimCode = 0;                        // 請求先コード
                salesSlip.ClaimSnm = string.Empty;              // 請求先略称
                salesSlip.ClaimName = string.Empty;             // 請求先名称
                salesSlip.ClaimName2 = string.Empty;            // 請求先名称２
                salesSlip.TotalAmountDispWayCd = 0;             // 総額表示方法区分
                salesSlip.DemandAddUpSecCd = string.Empty;      // 請求計上拠点コード
                SalesSlip.CreditMngCode = 0;                    // 与信管理区分
                salesSlip.TotalDay = 0;				            // 締日
                salesSlip.NTimeCalcStDate = 0;  	            // 次回勘定開始日
                salesSlip.TotalAmountDispWayCd = 0;             // 総額表示方法区分
                salesSlip.TtlAmntDispRateApy = 0;               // 総額表示掛率適用区分
                salesSlip.CarMngDivCd = 0;                      // 車両管理区分
                salesSlip.CustOrderNoDispDiv = 1;               // 得意先注番表示区分(0:しない 1:する)
                salesSlip.CustWarehouseCd = string.Empty;       // 得意先優先倉庫コード
                //>>>2010/08/23
                //salesSlip.AccRecDivCd = 0;                      // 売掛区分
                salesSlip.AccRecDivCd = 1;                      // 売掛区分
                //<<<2010/08/23
                SalesSlip.TransStopDate = DateTime.MinValue;    // 取引中止日
                salesSlip.DetailRowCountForReadSlip = this._salesSlipInputConstructionAcs.DataInputCountValue; // 明細行数(既存修正時の設定明細行数) // ADD 2009/12/17
                //>>>2010/02/26
                salesSlip.OnlineKindDiv = (int)OnlineKindDiv.None;   // オンライン種別区分
                salesSlip.InqOriginalEpCd = string.Empty;       // 問合せ元企業コード
                salesSlip.InqOriginalSecCd = string.Empty;      // 問合せ元拠点コード
                //<<<2010/02/26
            }
            else
            {

                if (customerInfo == null) customerInfo = new CustomerInfo();

                //-----------------------------------------------------
                // 請求先情報取得
                //-----------------------------------------------------
                CustomerInfo claim;
                SalesSlipInputInitDataAcs.LogWrite("▼得意先マスタＲｅａｄ開始");
                int status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, customerInfo.EnterpriseCode, customerInfo.ClaimCode, true, false, out claim);
                SalesSlipInputInitDataAcs.LogWrite("▲得意先マスタＲｅａｄ終了");
                if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    claim = new CustomerInfo();
                }

                //-----------------------------------------------------
                // 得意先情報
                //-----------------------------------------------------
                salesSlip.CustomerCode = customerInfo.CustomerCode; // 得意先コード
                salesSlip.CustomerName = customerInfo.Name; // 得意先名称１
                salesSlip.CustomerName2 = customerInfo.Name2; // 得意先名称２
                salesSlip.CustomerSnm = customerInfo.CustomerSnm; // 略称
                salesSlip.HonorificTitle = customerInfo.HonorificTitle; // 敬称
                salesSlip.BusinessTypeCode = customerInfo.BusinessTypeCode; // 業種コード
                salesSlip.BusinessTypeName = customerInfo.BusinessTypeName; // 業種名称
                salesSlip.SalesAreaCode = customerInfo.SalesAreaCode; // 販売エリアコード
                salesSlip.SalesAreaName = customerInfo.SalesAreaName; // 販売エリア名称
                salesSlip.CarMngDivCd = customerInfo.CarMngDivCd; // 車両管理区分(0:しない 1:登録(確認) 2:登録(自動) 3:登録無)
                salesSlip.CustOrderNoDispDiv = (customerInfo.CustSlipNoMngCd == 0) ? this._salesSlipInputInitDataAcs.GetSalesTtlSt().CustOrderNoDispDiv : (customerInfo.CustSlipNoMngCd == 1) ? 0 : 1; // 得意先注番表示区分(0:しない 1:する)
                salesSlip.CustWarehouseCd = customerInfo.CustWarehouseCd; // 得意先優先倉庫コード
                //>>>2010/08/23
                //salesSlip.AccRecDivCd = customerInfo.AccRecDivCd; // 売掛区分
                if (customerInfo.CustomerCode != 0)
                {
                    salesSlip.AccRecDivCd = customerInfo.AccRecDivCd; // 売掛区分
                }
                //<<<2010/08/23
                salesSlip.TransStopDate = customerInfo.TransStopDate; // 取引中止日
                //>>>2010/02/26
                salesSlip.OnlineKindDiv = customerInfo.OnlineKindDiv; // オンライン種別区分
                salesSlip.InqOriginalEpCd = customerInfo.CustomerEpCode.Trim(); // 問合せ元企業コード//@@@@20230303
                salesSlip.InqOriginalSecCd = customerInfo.CustomerSecCode; // 問合せ元拠点コード
                //<<<2010/02/26
                this._salesSlipInputInitDataAcs.ConsTaxLayMethod = (customerInfo.CustCTaXLayRefCd == 0) ? this._salesSlipInputInitDataAcs.GetConsTaxLayMethod(0) : customerInfo.ConsTaxLayMethod; // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応
                if (!string.IsNullOrEmpty(customerInfo.CustomerAgentCd))
                {
                    Employee employee = this._salesSlipInputInitDataAcs.GetEmployee(customerInfo.CustomerAgentCd);
                    //if (employee != null) // Del 杜志剛 2012/04/09 Redmine#29284
                    //if (employee != null && (string.IsNullOrEmpty(salesSlip.SalesEmployeeCd) || salesSlip.SalesEmployeeCd.Equals(customerInfo.CustomerAgentCd)))// Add 杜志剛 2012/04/09 Redmine#29284　// Del 杜志剛 2012/04/26 Redmine#29284
                    if ((employee != null) && (salesSlip.InputMode == ctINPUTMODE_SalesSlip_Normal) && (salesSlip.SalesSlipNum == ctDefaultSalesSlipNum))　// Add 杜志剛 2012/04/26 Redmine#29284
                    {
                        salesSlip.SalesEmployeeCd = customerInfo.CustomerAgentCd; // 担当者コード
                        salesSlip.SalesEmployeeNm = customerInfo.CustomerAgentNm; // 担当者名称
                        if (salesSlip.SalesEmployeeNm.Length > 16) salesSlip.SalesEmployeeNm = salesSlip.SalesEmployeeNm.Substring(0, 16);
                    }
                }
                // --- ADD 2010/06/02 ---------->>>>>
                else
                {
                    // --- UPD 2010/06/21 ---------->>>>>
                    if (_employeeFlag)
                    {
                        //>>>2010/08/06
                        //salesSlip.SalesEmployeeCd = string.Empty;  // 担当者コード
                        //salesSlip.SalesEmployeeNm = string.Empty;  // 担当者名称
                        switch (this._salesSlipInputConstructionAcs.EmployeeCdDivValue)
                        {
                            // ログイン担当者
                            case 0:
                                Employee employee = this._salesSlipInputInitDataAcs.GetEmployee(LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                                if (employee != null)
                                {
                                    salesSlip.SalesEmployeeCd = LoginInfoAcquisition.Employee.EmployeeCode.Trim();  // 担当者コード
                                    salesSlip.SalesEmployeeNm = employee.Name;  // 担当者名称
                                }
                                break;
                            // 空白
                            case 1:
                                salesSlip.SalesEmployeeCd = string.Empty;  // 担当者コード
                                salesSlip.SalesEmployeeNm = string.Empty;  // 担当者名称
                                break;
                            // 固定値(設定値)
                            case 2:
                                Employee employeee = this._salesSlipInputInitDataAcs.GetEmployee(this._salesSlipInputConstructionAcs.EmployeeCdValue.Trim());
                                if (employeee != null)
                                {
                                    salesSlip.SalesEmployeeCd = this._salesSlipInputConstructionAcs.EmployeeCdValue.Trim();  // 担当者コード
                                    salesSlip.SalesEmployeeNm = employeee.Name;  // 担当者名称
                                }
                                break;
                        }
                        //<<<2010/08/06
                    }
                    // --- UPD 2010/06/21 ---------->>>>>
                }
                // --- ADD 2010/06/02 ----------<<<<<

                // --- UPD 2012/10/30 T.Nishi ---------->>>>>
                //// --- UPD 2012/10/20 Y.Wakita ---------->>>>>
                ////// 拠点表示区分が「0:標準」、「2:表示無し」の場合は、得意先の管理拠点をセット
                ////if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().SectDspDivCd == 0) || (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SectDspDivCd == 2))
                //// 拠点表示区分が「2:表示無し」の場合は、得意先の管理拠点をセット
                //if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SectDspDivCd == 2)
                //// --- UPD 2012/10/20 Y.Wakita ----------<<<<<
                if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().SectDspDivCd == 0) || (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SectDspDivCd == 2))
                //※↑元に戻しました。
                // --- UPD 2012/10/30 T.Nishi ----------<<<<<
                {
                    if (!string.IsNullOrEmpty(customerInfo.MngSectionCode.Trim()))
                    {
                        /*--- Del 杜志剛 2012/04/09 Redmine#29284 ----->>>>>
                        salesSlip.ResultsAddUpSecCd = customerInfo.MngSectionCode.Trim();
                        salesSlip.ResultsAddUpSecNm = customerInfo.MngSectionName.Trim();
                        //--- Del 杜志剛 2012/04/09 Redmine#29284 -----<<<<<*/
                        //--- Add 杜志剛 2012/04/09 Redmine#29284 ----->>>>>
                        //if (salesSlip.SalesSlipNum.Equals(ctDefaultSupplierSlipNo))  // DEL 2012/04/26 杜志剛 for redmine#29284
                        if ((salesSlip.InputMode == ctINPUTMODE_SalesSlip_Normal) && (salesSlip.SalesSlipNum == ctDefaultSalesSlipNum)) // ADD 2012/04/26 杜志剛 for redmine#29284
                        {
                            salesSlip.ResultsAddUpSecCd = customerInfo.MngSectionCode.Trim();
                            salesSlip.ResultsAddUpSecNm = customerInfo.MngSectionName.Trim();
                        }
                        //--- Add 杜志剛 2012/04/09 Redmine#29284 -----<<<<<
                        //salesSlip.ResultsAddUpSecNm = this._salesSlipInputInitDataAcs.GetSecInfo(customerInfo.MngSectionCode.Trim());
                    }
                    else
                    {
                        salesSlip.ResultsAddUpSecCd = this._salesSlipInputInitDataAcs.OwnSectionCode.Trim();
                        salesSlip.ResultsAddUpSecNm = this._salesSlipInputInitDataAcs.OwnSectionName;
                    }
                }

                // UPD 陳健 2013/12/19 for Redmine#41550のNo.1＆No.2 ----------------->>>>>>
                // salesSlip.ConsTaxRate = _salesSlipInputInitDataAcs.TaxRate; // 税率

                // ----------------------------------------------------------------
                // 計上の場合、画面上の売上日(計上日)に対しての税率を使う
                // 計上以外の呼び出し、赤伝、返品などの処理は元伝票の税率を使う
                // ----------------------------------------------------------------
                // 計上処理の判定
                if(this._addUpOperationFlag == true)
                {
                    // UPD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                    //salesSlip.ConsTaxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate); // 税率
                    double taxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate); // 税率
                    double masterRate = this._salesSlipInputInitDataAcs.GetTaxRateMst(salesSlip.SalesDate);
                    if (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp &&
                        salesSlip.ConsTaxLayMethod == 0 && this._salesSlipInputInitDataAcs.TaxRateInput != 0 && masterRate != this._salesSlipInputInitDataAcs.TaxRateInput &&
                        this._salesSlipInputInitDataAcs.RentSyncSupFlg)
                    {
                        // 税率マスタの税率を利用する
                        this._salesSlipInputInitDataAcs.TaxRate = masterRate; // 税率
                        this._salesSlipInputInitDataAcs.TaxRateDiv = 2;
                        salesSlip.ConsTaxRate = this._salesSlipInputInitDataAcs.TaxRate;

                    }
                    else if (salesSlip.ConsTaxLayMethod == 0 && taxRate != salesSlip.ConsTaxRate)
                    {
                        // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応--->>>>>
                        if (_salesSlipInputInitDataAcs.ProcessControlSetting.RateLogOutFlg == (int)SalesSlipInputInitDataAcs.OutFlgType.Output)
                        {
                        // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応---<<<<<
                            // --- ADD K2021/08/23 陳艶丹 PMKOBETSU-4178 税率のログ追加--->>>>
                            //メッセージ情報を生成する
                            string logMsg = AddUpLogInfo(salesSlip, masterRate);
                            //ログファイルを出力する
                            OutLog(logMsg);
                            // --- ADD K2021/08/23 陳艶丹 PMKOBETSU-4178 税率のログ追加--- <<<<
                        }// ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応
                        string msg = string.Format(("計上元伝票に税率({0}%)が設定されています。" + "\r\n" + "税率({0}%)で伝票を作成してもよろしいですか？"), (salesSlip.ConsTaxRate * 100));
                        DialogResult dialogResult = TMsgDisp.Show(
                                       new Form(),
                                       emErrorLevel.ERR_LEVEL_QUESTION,
                                       string.Empty,
                                       msg,
                                       0,
                                       MessageBoxButtons.YesNo,
                                       MessageBoxDefaultButton.Button2);
                        if (dialogResult == DialogResult.Yes)
                        {
                            // 元伝票の税率を利用する
                            this._salesSlipInputInitDataAcs.TaxRate = salesSlip.ConsTaxRate;
                            this._salesSlipInputInitDataAcs.TaxRateDiv = 2;
                            this._salesSlipInputInitDataAcs.TaxRateInput = salesSlip.ConsTaxRate;
                        }
                        else
                        {
                            // 計上時点の税率を利用する
                            salesSlip.ConsTaxRate = this._salesSlipInputInitDataAcs.TaxRate;
                            if (this._salesSlipInputInitDataAcs.TaxRateInput == 0.0)
                            {
                                this._salesSlipInputInitDataAcs.TaxRateDiv = 0;
                            }
                            else
                            {
                                this._salesSlipInputInitDataAcs.TaxRateDiv = 1;
                            }
                        }
                    }
                    else
                    {
                        salesSlip.ConsTaxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate); // 税率
                    }
                    // UPD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                    this._addUpOperationFlag = false;
                }
                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                else
                {
                    // 新規伝票の判定
                    if ((salesSlip.SalesSlipNum == ctDefaultSalesSlipNum ||
                        string.IsNullOrEmpty(salesSlip.SalesSlipNum)) &&
                         salesSlip.InputMode != ctINPUTMODE_SalesSlip_Red &&
                         salesSlip.InputMode != ctINPUTMODE_SalesSlip_Return)
                    {
                        // 消費税転嫁方式
                        this._salesSlipInputInitDataAcs.ConsTaxLayMethod = (claim.CustCTaXLayRefCd == 0) ? this._salesSlipInputInitDataAcs.GetConsTaxLayMethod(0) : claim.ConsTaxLayMethod;
                        salesSlip.ConsTaxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate); // 税率
                    }
                    else
                    {
                        if (salesSlip.ConsTaxLayMethod == 0)
                        {
                            // 元伝票の税率を利用する
                            this._salesSlipInputInitDataAcs.TaxRate = salesSlip.ConsTaxRate;
                            this._salesSlipInputInitDataAcs.TaxRateDiv = 2;
                            // 税率設定マスタ再取得
                            this._salesSlipInputInitDataAcs.GetTaxRateMst(salesSlip.SalesDate);
                        }
                        else
                        {
                            this._salesSlipInputInitDataAcs.ConsTaxLayMethod = salesSlip.ConsTaxLayMethod;
                            this._salesSlipInputInitDataAcs.TaxRateDiv = 0;
                        }
                    }
                    // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<
                }
                // UPD 陳健 2013/12/19 for Redmine#41550のNo.1＆No.2 -----------------<<<<<<

                string sectionCode;
                string sectionName;
                this._salesSlipInputInitDataAcs.GetOwnSeCtrlCode(customerInfo.ClaimSectionCode, out sectionCode, out sectionName);
                salesSlip.DemandAddUpSecCd = sectionCode; // 請求計上拠点コード

                // 2009/12/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                int maxRowCount = 0;
                maxRowCount = this.GetMaxRowCount(salesSlip);
                if (maxRowCount == 0) maxRowCount = this._salesSlipInputConstructionAcs.DataInputCountValue;
                salesSlip.DetailRowCountForReadSlip = maxRowCount;
                // 2009/12/17 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                //-----------------------------------------------------
                // 得意先掛率グループ情報
                //-----------------------------------------------------
                ArrayList custRateGroupList;
                this._custRateGroupList.Clear();
                if (customerInfo.CustomerCode != 0)
                {
                    this._custRateGroupAcs.Search(out custRateGroupList, this._enterpriseCode, customerInfo.CustomerCode, ConstantManagement.LogicalMode.GetData0);
                    if ((custRateGroupList != null) && (custRateGroupList.Count != 0))
                    {
                        this._custRateGroupList = new List<CustRateGroup>((CustRateGroup[])custRateGroupList.ToArray(typeof(CustRateGroup)));
                    }
                }

                //-----------------------------------------------------
                // 請求先情報
                //-----------------------------------------------------
                salesSlip.TotalAmountDispWayCd = claim.TotalAmountDispWayCd;

                // 消費税転嫁方式
                salesSlip.ConsTaxLayMethod = (claim.CustCTaXLayRefCd == 0) ? this._salesSlipInputInitDataAcs.GetConsTaxLayMethod(0) : claim.ConsTaxLayMethod;

                // 総額表示掛率適用区分
                salesSlip.TtlAmntDispRateApy = this._salesSlipInputInitDataAcs.GetAllDefSet().TtlAmntDspRateDivCd;

                salesSlip.ClaimCode = claim.CustomerCode;           // 請求先コード
                salesSlip.ClaimSnm = claim.CustomerSnm;             // 略称
                salesSlip.ClaimName = claim.Name;                   // 請求先名称
                salesSlip.ClaimName2 = claim.Name2;                 // 請求先名称２
                salesSlip.CreditMngCode = claim.CreditMngCode;      // 与信管理区分
                salesSlip.TotalDay = claim.TotalDay;				// 締日
                salesSlip.NTimeCalcStDate = claim.NTimeCalcStDate;	// 次回勘定開始日

                // 計上日の再セット
                this.SettingSalesSlipAddUpDate(ref salesSlip);
            }
        }

        /// <summary>
        /// 売上データに納品先の情報を設定します。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト（ref）</param>
        /// <param name="customerInfo">得意先マスタオブジェクト</param>
        public void SettingSalesSlipAddressee(ref SalesSlip salesSlip, CustomerInfo customerInfo)
        {
            if (customerInfo == null)
            {
                salesSlip.AddresseeCode = 0; // 納品先コード
                salesSlip.AddresseeName = string.Empty; // 納品先名称
                salesSlip.AddresseeName2 = string.Empty; // 納品先名称２
                salesSlip.AddresseeAddr1 = string.Empty; // 納品先住所１
                salesSlip.AddresseeAddr3 = string.Empty; // 納品先住所３
                salesSlip.AddresseeAddr4 = string.Empty; // 納品先住所４
                salesSlip.AddresseeTelNo = string.Empty; // 納品先電話番号
                salesSlip.AddresseeFaxNo = string.Empty; // 納品先FAX番号;
                salesSlip.AddresseePostNo = string.Empty; // 納品先郵便番号;
                salesSlip.SlipAddressDiv = 1; // 伝票住所区分(1:得意先 2:納品先 3:請求先)
            }
            else
            {
                salesSlip.AddresseeCode = customerInfo.CustomerCode;  // 納品先コード
                salesSlip.AddresseeName = customerInfo.Name;  // 納品先名称
                salesSlip.AddresseeName2 = customerInfo.Name2; // 納品先名称２
                salesSlip.AddresseeAddr1 = customerInfo.Address1;// 納品先住所１
                salesSlip.AddresseeAddr3 = customerInfo.Address3;// 納品先住所３
                salesSlip.AddresseeAddr4 = customerInfo.Address4;// 納品先住所４
                salesSlip.AddresseeTelNo = customerInfo.OfficeTelNo;// 納品先電話番号
                salesSlip.AddresseeFaxNo = customerInfo.OfficeFaxNo; // 納品先FAX番号;
                salesSlip.AddresseePostNo = customerInfo.PostNo; // 納品先郵便番号;
                salesSlip.SlipAddressDiv = 2; // 伝票住所区分(1:得意先 2:納品先 3:請求先)
            }
        }

        /// <summary>
        /// 指定された売上データの状態を元に入力モードの設定を行います。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        private void SettingInputMode(SalesSlip salesSlip)
        {

            bool isAddUp = false;
            if (salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) // 受注ステータス(10:見積 20:受注 30:売上 40:出荷)
            {
                string message;
                isAddUp = this.CheckAddUp(salesSlip, 1, 0, out message); // 締チェック

                if (isAddUp) salesSlip.InputMode = SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AddUp; // 締め済みモード
            }

            if (!isAddUp)
            {
                if (salesSlip.DebitNoteDiv == 1)
                {
                    // 赤伝
                    salesSlip.InputMode = ctINPUTMODE_SalesSlip_Red;
                }
                else if (salesSlip.DebitNoteDiv == 2)
                {
                    // 元黒
                    salesSlip.InputMode = ctINPUTMODE_SalesSlip_ReadOnly;
                }
                else if (salesSlip.DepositAllowanceTtl != 0)
                {
                    // 入金済み伝票
                    //>>>2010/10/05
                    //salesSlip.InputMode = ctINPUTMODE_SalesSlip_ReadOnly;
                    salesSlip.InputMode = ctINPUTMODE_SalesSlip_Normal;
                    //<<<2010/10/05
                }
                else if (!this.CheckTransStopDate(salesSlip.TransStopDate, salesSlip.SalesDate))
                {
                    // 取引中止
                    salesSlip.InputMode = ctINPUTMODE_SalesSlip_ReadOnly;
                }
                else
                {
                    // 黒伝
                    salesSlip.InputMode = ctINPUTMODE_SalesSlip_Normal;

                    // --- DEL 2013/12/05 Y.Wakita ---------->>>>>
                    //// --- ADD 2013/06/19 Y.Wakita ---------->>>>>
                    //// 売上伝票区分が返品の場合
                    //if (salesSlip.SalesSlipCd == 1)										    
                    //    salesSlip.InputMode = ctINPUTMODE_SalesSlip_Return; // 入力モード ← 返品入力モード
                    //// --- ADD 2013/06/19 Y.Wakita ----------<<<<<
                    // --- DEL 2013/12/05 Y.Wakita ----------<<<<<
                }
            }

        }

        /// <summary>
        /// 見積初期値設定情報設定処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="estimateDefSet"></param>
        public void SettingSalesSlipEstimateDef(ref SalesSlip salesSlip, EstimateDefSet estimateDefSet)
        {
            if (estimateDefSet == null) return;

            salesSlip.ListPricePrintDiv = estimateDefSet.ListPricePrintDiv;     // 定価印刷
            salesSlip.EstimaTaxDivCd = estimateDefSet.ConsTaxPrintDiv;          // 税表示区分
            salesSlip.PartsNoPrtCd = estimateDefSet.PartsNoPrtCd;               // 品番印刷
            salesSlip.EstimateValidityDate = DateTime.Today;                    // 見積有効期限

            salesSlip.EstimateNote1 = estimateDefSet.EstimateNote1;             // 見積書備考１
            salesSlip.EstimateNote2 = estimateDefSet.EstimateNote2;             // 見積書備考２
            salesSlip.EstimateNote3 = estimateDefSet.EstimateNote3;             // 見積書備考３
            salesSlip.EstimateTitle1 = estimateDefSet.EstimateTitle1;           // 見積タイトル１
        }

        /// <summary>
        /// 見積情報を設定します。（見積データ→売上データ）
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="estimateSlip"></param>
        private void SettingSalesSlipEstimateInfo(ref SalesSlip salesSlip, SalesSlip estimateSlip)
        {
            salesSlip.ListPricePrintDiv = estimateSlip.ListPricePrintDiv;
            salesSlip.EraNameDispCd1 = estimateSlip.EraNameDispCd1;
            salesSlip.EstimaTaxDivCd = estimateSlip.EstimaTaxDivCd;
            salesSlip.EstimateFormPrtCd = estimateSlip.EstimateFormPrtCd;
            salesSlip.EstimateSubject = estimateSlip.EstimateSubject;
            salesSlip.Footnotes1 = estimateSlip.Footnotes1;
            salesSlip.Footnotes2 = estimateSlip.Footnotes2;
            salesSlip.EstimateTitle1 = estimateSlip.EstimateTitle1;
            salesSlip.EstimateTitle2 = estimateSlip.EstimateTitle2;
            salesSlip.EstimateTitle3 = estimateSlip.EstimateTitle3;
            salesSlip.EstimateTitle4 = estimateSlip.EstimateTitle4;
            salesSlip.EstimateTitle5 = estimateSlip.EstimateTitle5;
            salesSlip.EstimateNote1 = estimateSlip.EstimateNote1;
            salesSlip.EstimateNote2 = estimateSlip.EstimateNote2;
            salesSlip.EstimateNote3 = estimateSlip.EstimateNote3;
            salesSlip.EstimateNote4 = estimateSlip.EstimateNote4;
            salesSlip.EstimateNote5 = estimateSlip.EstimateNote5;
            salesSlip.PartsNoPrtCd = estimateSlip.PartsNoPrtCd;
            salesSlip.EstimateValidityDate = estimateSlip.EstimateValidityDate;
        }

        /// <summary>
        /// 課税区分設定
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="taxDiv"></param>
        public void SettingSalesSlipTaxDivInfo(int salesRowNo, int taxDiv)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            row.TaxDiv = taxDiv;
        }

        /// <summary>
        /// 計上日を設定します。
        /// </summary>
        /// <param name="salesTemp"></param>
        public void SettingSalesSlipAddUpDate(ref SalesSlip salesSlip)
        {
            DateTime addUpDate;
            int delayPaymentDiv;
            SalesSlipInputAcs.CalcAddUpDate(salesSlip.SalesDate, salesSlip.TotalDay, salesSlip.NTimeCalcStDate, out addUpDate, out delayPaymentDiv);

            salesSlip.AddUpADate = addUpDate;
            salesSlip.DelayPaymentDiv = delayPaymentDiv;
        }

        /// <summary>
        /// 税率を設定します。
        /// </summary>
        /// <param name="?"></param>
        /// <param name="consTaxRate"></param>
        public void SettingSalesSlipConsTaxRate(ref SalesSlip salesSlip, double consTaxRate)
        {
            salesSlip.ConsTaxRate = consTaxRate;
        }

        /// <summary>
        /// 担当者情報セット処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="employee"></param>
        public void SettingSalesSlipFromEmployeeInfo(ref SalesSlip salesSlip, string code)
        {
            Employee employee = this._salesSlipInputInitDataAcs.GetEmployee(code);
            if (employee != null)
            {
                salesSlip.SalesEmployeeCd = employee.EmployeeCode;   // 販売従業員コード
                salesSlip.SalesEmployeeNm = employee.Name;           // 販売従業員名称

                if (salesSlip.SalesEmployeeNm.Length > 16) salesSlip.SalesEmployeeNm = salesSlip.SalesEmployeeNm.Substring(0, 16);

                // ----- ADD 2012/04/25 xupz for redmine#29613---------->>>>>
                //redmine#29613 伝票呼び出し後、担当者を変更しても部門は変更しない
                if ((salesSlip.InputMode == ctINPUTMODE_SalesSlip_Normal) && (salesSlip.SalesSlipNum == ctDefaultSalesSlipNum))
                {
                // ----- ADD 2012/04/25 xupz for redmine#29613----------<<<<<
                    int subSectionCode;
                    this._salesSlipInputInitDataAcs.GetSubSection_FromEmployeeDtl(code, out subSectionCode);
                    salesSlip.SubSectionCode = subSectionCode;              // 部門コード
                    salesSlip.SubSectionName = this._salesSlipInputInitDataAcs.GetName_FromSubSection(subSectionCode);
                }　// ----- ADD 2012/04/25 xupz for redmine#29613----------<<<<<
            }
            else
            {
                salesSlip.SalesEmployeeCd = string.Empty;
                salesSlip.SalesEmployeeNm = string.Empty;
                salesSlip.SubSectionCode = 0;
                salesSlip.SubSectionName = string.Empty;
            }
        }

        /// <summary>
        /// 担当者情報セット処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="employee"></param>
        public void SettingSalesSlipFromEmployeeInfo(ref SalesSlip salesSlip, Employee employee)
        {
            if (employee != null)
            {
                salesSlip.SalesEmployeeCd = employee.EmployeeCode;      // 販売従業員コード
                salesSlip.SalesEmployeeNm = employee.Name;              // 販売従業員名称
                if (salesSlip.SalesEmployeeNm.Length > 16) salesSlip.SalesEmployeeNm = salesSlip.SalesEmployeeNm.Substring(0, 16);

                // ----- ADD 2012/04/25 xupz for redmine#29613---------->>>>>
                //redmine#29613 伝票呼び出し後、担当者を変更しても部門は変更しない
                if ((salesSlip.InputMode == ctINPUTMODE_SalesSlip_Normal) && (salesSlip.SalesSlipNum == ctDefaultSalesSlipNum)) 
                {
                // ----- ADD 2012/04/25 xupz for redmine#29613----------<<<<<
                    int subSectionCode;
                    this._salesSlipInputInitDataAcs.GetSubSection_FromEmployeeDtl(employee.EmployeeCode, out subSectionCode);
                    salesSlip.SubSectionCode = subSectionCode;              // 部門コード
                    salesSlip.SubSectionName = this._salesSlipInputInitDataAcs.GetName_FromSubSection(subSectionCode);
                }　// ----- ADD 2012/04/25 xupz for redmine#29613----------<<<<<
            }
        }

        /// <summary>
        /// 担当者所属拠点コード
        /// </summary>
        /// <param name="employeeCode"></param>
        /// <returns></returns>
        public string GetBelongSectionCode(string employeeCode)
        {
            string retSecCode = string.Empty;

            Employee employee = this._salesSlipInputInitDataAcs.GetEmployee(employeeCode);
            if (employee != null)
            {
                retSecCode = employee.BelongSectionCode;
            }

            return retSecCode;
        }

        //>>>2011/05/25
        /// <summary>
        /// 売上データSCM受注情報設定処理
        /// </summary>
        private void SettingSalesSlipSCMAcOdrData()
        {
            if ((this._scmAcOdrDataDataTable != null) && (this._scmAcOdrDataDataTable.Count != 0))
            {
                this._salesSlip.PartySaleSlipNum = this._scmAcOdrDataDataTable[0].SfPmCprtInstSlipNo;
            }
        }
        //<<<2011/05/25
        #endregion

        #region ●入金データオブジェクト取得
        /// <summary>
        /// 現在の売上データオブジェクトから入金データオブジェクトを取得します。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="depsitMain">入金データオブジェクト</param>
        /// <param name="depositAlw">入金引当データオブジェクト</param>
        public void GetCurrentDepsitMain(ref SalesSlip salesSlip, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw)
        {
            depsitMain = new SearchDepsitMain();

            //-----------------------------------------------------------------------------
            // 対象金額算出
            //-----------------------------------------------------------------------------
            long totalPrice = salesSlip.SalesTotalTaxInc;
            if (salesSlip.TotalAmountDispWayCd == (int)SalesSlipInputAcs.TotalAmountDispWayCd.NoTotalAmount)
            {
                // 総額表示しない
                switch (salesSlip.ConsTaxLayMethod)
                {
                    case 0: // 伝票転嫁
                    case 1: // 明細転嫁
                        break;
                    case 2: // 請求親
                    case 3: // 請求子
                    case 9: // 非課税
                        // 総合計
                        totalPrice = salesSlip.ItdedSalesInTax + salesSlip.ItdedSalesOutTax + salesSlip.SalSubttlSubToTaxFre +
                                     salesSlip.ItdedSalesDisOutTax + salesSlip.ItdedSalesDisInTax + salesSlip.ItdedSalesDisTaxFre +
                                     salesSlip.SalAmntConsTaxInclu + salesSlip.SalesDisTtlTaxInclu;
                        break;
                }
            }

            //-----------------------------------------------------------------------------
            // 売上形式「売上荷」、「売掛無し」、商品区分「商品」、自動入金区分「する」の場合は自動入金作成
            //-----------------------------------------------------------------------------
            if ((salesSlip.AcptAnOdrStatusDisplay == (int)AcptAnOdrStatusState.Sales) &&
                (salesSlip.AccRecDivCd == (int)AccRecDivCd.NonAccRec) &&
                (salesSlip.SalesGoodsCd == (int)SalesGoodsCd.Goods) &&
                (this._salesSlipInputInitDataAcs.GetSalesTtlSt().AutoDepositCd == (int)SalesSlipInputAcs.AutoDepositCd.Write))
            {
                // 修正伝票の場合はキャッシュしているデータから取得する
                if (salesSlip.SalesSlipNum.PadLeft(9, '0') != ctDefaultSalesSlipNum)
                {
                    // 自動入金データ作成分の売上データは修正不可。
                    // 既存
                    depsitMain = this._depsitMain.Clone();
                    depositAlw = this._depositAlw.Clone();

                    salesSlip.AutoDepositNoteDiv = this._salesSlipInputInitDataAcs.GetSalesTtlSt().AutoDepositNoteDiv; // 自動入金備考区分(0:売上伝票番号 1:売上伝票備考 2:無し) // ADD 2013/01/18 田建委 Redmine#33797
                }
                else
                {
                    // 新規
                    depsitMain = new SearchDepsitMain();
                    depositAlw = new SearchDepositAlw();

                    depsitMain.DepositRowNo[0] = 1; // 入金行番号
                    depsitMain.MoneyKindCode[0] = this._salesSlipInputInitDataAcs.GetSalesTtlSt().AutoDepoKindCode; // 入金金種コード
                    depsitMain.MoneyKindName[0] = this._salesSlipInputInitDataAcs.GetSalesTtlSt().AutoDepoKindName; // 入金金種名称
                    depsitMain.MoneyKindDiv[0] = this._salesSlipInputInitDataAcs.GetSalesTtlSt().AutoDepoKindDivCd; // 入金金種区分

                    depsitMain.ClaimName = salesSlip.ClaimName; // 請求先名称
                    depsitMain.ClaimName2 = salesSlip.ClaimName2; // 請求先名称２
                    salesSlip.AutoDepositCd = 1; // 自動入金区分(1:自動入金)
                    salesSlip.AutoDepositNoteDiv = this._salesSlipInputInitDataAcs.GetSalesTtlSt().AutoDepositNoteDiv; // 自動入金備考区分(0:売上伝票番号 1:売上伝票備考 2:無し) // ADD 2013/01/18 田建委 Redmine#33797
                    salesSlip.DepositAlwcBlnce = totalPrice; // 入金引当残高
                    salesSlip.DepositAllowanceTtl = 0; // 入金引当合計額
                }
            }
            else
            {
                depsitMain = new SearchDepsitMain();
                depositAlw = new SearchDepositAlw();

                // --- UPD 2012/07/19 No.1044 Y.Wakita ---------->>>>>
                //salesSlip.DepositAlwcBlnce = totalPrice; // 入金引当残高
                //salesSlip.DepositAllowanceTtl = 0; // 入金引当合計額
                salesSlip.DepositAlwcBlnce = totalPrice - salesSlip.DepositAllowanceTtl; // 入金引当残高:売上伝票合計（税込み） - 入金引当合計額
                // --- UPD 2012/07/19 No.1044 Y.Wakita ----------<<<<<
            }

        }
        #endregion

        /// <summary>
        /// 売上データリストおよび受注データリストを生成します。
        /// </summary>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        /// <param name="stockSyncInfoKeyList"></param>
        //>>>2010/02/26
        //public void GetCurrentSalesDetailList(out ArrayList salesDataList, out ArrayList acptDataList, out List<StockSyncInfoKey> stockSyncInfoKeyList)
        public void GetCurrentSalesDetailList(out ArrayList salesDataList, out ArrayList acptDataList, out List<StockSyncInfoKey> stockSyncInfoKeyList, bool scmFlg)
        //<<<2010/02/26
        {
            //------------------------------------------------------------------------------------
            // DataList の構成(分割方法に従い、入力情報を１伝票単位に分割保持)
            //------------------------------------------------------------------------------------
            //  CustomSerializeArrayList
            //      --SalesSlip
            //      --List<SalesDetail>
            //  CustomSerializeArrayList
            //      --SalesSlip
            //      --List<SalesDetail>
            //  CustomSerializeArrayList
            //      --SalesSlip
            //      --List<SalesDetail>
            //------------------------------------------------------------------------------------
            //>>>2010/02/26
            //this.GetUIDataFromTable(this._salesSlip, this._salesDetailDataTable, 
            //                        this._salesSlipAcptAnOdr, this._salesDetailAcceptAnOrderDataTable, 
            //                        this._salesDetailAcceptAnOrderDataTableForOrder, this._salesDetailAcceptAnOrderDataTableForAdd,
            //                        this._salesSlipBeforeAddUp,
            //                        out salesDataList, out acptDataList, out stockSyncInfoKeyList);
            this.GetUIDataFromTable(this._salesSlip, this._salesDetailDataTable,
                                    this._salesSlipAcptAnOdr, this._salesDetailAcceptAnOrderDataTable,
                                    this._salesDetailAcceptAnOrderDataTableForOrder, this._salesDetailAcceptAnOrderDataTableForAdd,
                                    this._salesSlipBeforeAddUp,
                                    out salesDataList, out acptDataList, out stockSyncInfoKeyList, scmFlg);
            //<<<2010/02/26
        }

        /// <summary>
        /// 売上明細データテーブルの初期設定を行います。
        /// </summary>
        /// <param name="defaultRowCount">初期行数</param>
        public void SalesDetailRowInitialSetting(int defaultRowCount)
        {
            this._salesDetailDataTable.BeginLoadData();
            this._salesDetailDataTable.Rows.Clear();
            this._salesDetailDataTableBeforeAddUp.Rows.Clear();
            this._salesDetailDBDataList.Clear();

            for (int i = 1; i <= defaultRowCount; i++)
            {
                SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.NewSalesDetailRow();
                row.SalesSlipNum = this._currentSalesSlipNum;
                row.SalesRowNo = i;

                row.SalesDate = this._salesSlip.SalesDate;
                row.StockDate = this._salesSlip.SalesDate;
                row.BoCode = ctDefaultBoCode;

                #region 共通キー
                //-----------------------------------------------------------------------------------
                // 共通キー
                //-----------------------------------------------------------------------------------
                // 目的：各種明細情報データセットのキーとして使用(リモートでも使用)
                //       UIとリモート間でのみ使用する為、新規作成時およびデータ呼出時に生成が必要
                //       売上明細、受注明細、仕入情報、仕入明細、メモ
                //-----------------------------------------------------------------------------------
                this.SettingSalesDetailRowDtlRelationGuid(ref row);
                #endregion

                #region 車両情報共通キー
                //-----------------------------------------------------------------------------------
                // 車両情報共通キー
                //-----------------------------------------------------------------------------------
                // 目的：売上明細データおよび車両情報のキーとして使用(リモートでも使用)
                //       UIとリモート間でのみ使用する為、新規作成時およびデータ呼出時に生成が必要
                //       売上明細、車両情報
                //-----------------------------------------------------------------------------------
                row.CarRelationGuid = Guid.Empty;
                #endregion

                this._salesDetailDataTable.AddSalesDetailRow(row);
            }
            this._salesDetailDataTable.EndLoadData();
        }

        /// <summary>
        /// 課税区分変更チェック
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="taxDiv"></param>
        /// <returns></returns>
        public bool TaxDivChangeCheck(int salesRowNo, int taxDiv)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (taxDiv != row.TaxDiv)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// ＤＢに保存する売上データを調整します。
        /// </summary>
        /// <param name="salesDetailDataTable">売上明細データテーブル</param>
        public void AdjustSalesSaveData(SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            #region ●不要明細削除
            List<int> deleteSalesRowNoList = new List<int>();
            //----------------------------------------
            // メーカー、品番、品名なし明細削除
            //----------------------------------------
            foreach (SalesInputDataSet.SalesDetailRow row in salesDetailDataTable)
            {
                if ((string.IsNullOrEmpty(row.GoodsName)) &&
                    (string.IsNullOrEmpty(row.GoodsNo)) &&
                    (row.GoodsMakerCd == 0))
                {
                    // --- UPD 2012/06/26 No.628 Y.Wakita ---------->>>>>
                    //deleteSalesRowNoList.Add(row.SalesRowNo);
                    if (row.EditStatus == ctEDITSTATUS_RowDiscount)
                    {
                        // 行値引
                        if (row.SalesMoneyDisplay == 0)
                        {
                            // 値引金額なし
                            deleteSalesRowNoList.Add(row.SalesRowNo);
                        }
                    }
                    else
                    {
                        // 行値引以外
                        deleteSalesRowNoList.Add(row.SalesRowNo);
                    }
                    // --- UPD 2012/06/26 No.628 Y.Wakita ----------<<<<<
                }
            }
            // 売上明細行削除処理
            this.DeleteSalesDetailRow(deleteSalesRowNoList, true, ref salesDetailDataTable);

            //>>>2013/04/06
            // SCM回答用BLコードリストの更新
            this.OperateOriginalBLGoodsCodeMap(deleteSalesRowNoList, "DEL");
            //<<<2013/04/06

            //----------------------------------------
            // 共通キーなし明細削除
            //----------------------------------------
            deleteSalesRowNoList = new List<int>();
            foreach (SalesInputDataSet.SalesDetailRow row in salesDetailDataTable)
            {
                if (row.DtlRelationGuid == Guid.Empty)
                {
                    deleteSalesRowNoList.Add(row.SalesRowNo);
                }
            }
            // 売上明細行削除処理
            this.DeleteSalesDetailRow(deleteSalesRowNoList, true, ref salesDetailDataTable);

            //>>>2013/04/06
            // SCM回答用BLコードリストの更新
            this.OperateOriginalBLGoodsCodeMap(deleteSalesRowNoList, "DEL");
            //<<<2013/04/06

            //----------------------------------------
            // 出荷数なし明細削除
            //----------------------------------------
            if ((int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate != this._salesSlip.AcptAnOdrStatusDisplay)
            {
                deleteSalesRowNoList = new List<int>();
                foreach (SalesInputDataSet.SalesDetailRow row in salesDetailDataTable)
                {
                    if ((row.ShipmentCnt == 0) && ((row.EditStatus != ctEDITSTATUS_Annotation) && (row.EditStatus != ctEDITSTATUS_RowDiscount)))
                    {
                        deleteSalesRowNoList.Add(row.SalesRowNo);
                    }
                }
                // 売上明細行削除処理
                this.DeleteSalesDetailRowOnlySalesDetail(deleteSalesRowNoList, true, ref salesDetailDataTable);

                //>>>2013/04/06
                // SCM回答用BLコードリストの更新
                this.OperateOriginalBLGoodsCodeMap(deleteSalesRowNoList, "DEL");
                //<<<2013/04/06
            }
            #endregion
        }

        /// <summary>
        /// 売上金額補正処理
        /// </summary>
        /// <param name="salesSlip">売上データクラス</param>
        /// <param name="salesDetailDataTable">売上明細データテーブル</param>
        public void CorrectSalesMoney(ref SalesSlip salesSlip, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            #region ●金額補正(売上情報)
            //----------------------------------------
            // 金額補正
            //----------------------------------------
            long salesTotalTaxInc = 0;      // 売上伝票合計（税込）
            long salesTotalTaxExc = 0;      // 売上伝票合計（税抜）
            long salesSubtotalTax = 0;      // 売上小計（税）
            long itdedSalesOutTax = 0;      // 売上外税対象額
            long itdedSalesInTax = 0;       // 売上内税対象額
            long salSubttlSubToTaxFre = 0;  // 売上小計非課税対象額
            long salesOutTax = 0;           // 売上金額消費税額（外税）
            long salAmntConsTaxInclu = 0;   // 売上金額消費税額（内税）
            long salesDisTtlTaxExc = 0;     // 売上値引金額計（税抜）
            long itdedSalesDisOutTax = 0;   // 売上値引外税対象額合計
            long itdedSalesDisInTax = 0;    // 売上値引内税対象額合計
            long itdedSalesDisTaxFre = 0;   // 売上値引非課税対象額合計
            long salesDisOutTax = 0;        // 売上値引消費税額（外税）
            long salesDisTtlTaxInclu = 0;   // 売上値引消費税額（内税）
            long totalCost = 0;             // 原価金額計
            long stockGoodsTtlTaxExc = 0;   // 在庫商品合計金額（税抜）
            long pureGoodsTtlTaxExc = 0;    // 純正商品合計金額（税抜）
            long taxAdjust = 0;             // 消費税調整額
            long balanceAdjust = 0;         // 残高調整額
            long salesPrtTotalTaxInc = 0;   // 売上部品合計（税込）
            long salesPrtTotalTaxExc = 0;   // 売上部品合計（税抜）
            long salesPrtSubttlInc = 0;     // 売上部品小計（税込）
            long salesPrtSubttlExc = 0;     // 売上部品小計（税抜）
            long salesWorkSubttlInc = 0;    // 売上作業小計（税込）
            long salesWorkSubttlExc = 0;    // 売上作業小計（税抜）
            long itdedPartsDisInTax = 0;    // 部品値引対象額合計（税込）
            long itdedPartsDisOutTax = 0;   // 部品値引対象額合計（税抜）
            long itdedWorkDisInTax = 0;     // 作業値引対象額合計（税込）
            long itdedWorkDisOutTax = 0;    // 作業値引対象額合計（税抜）
            long grossProfitTotalMoney = 0; // 粗利合計金額

            // 総額表示の場合、伝票合計消費税と明細の消費税合計の差異を調整する
            if ((salesSlip.TotalAmountDispWayCd == (int)TotalAmountDispWayCd.TotalAmount) && ((salesSlip.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (salesSlip.SalesGoodsCd == (int)SalesGoodsCd.NonGoods)))
            {
                int salesTaxFrcProcCd = this._customerInfoAcs.GetSalesFractionProcCd(this._enterpriseCode, salesSlip.CustomerCode, CustomerInfoAcs.FracProcMoneyDiv.CnsTaxFrcProcCd);		// 消費税端数処理コード

                this.CalculationSalesTotalPrice(
                    salesDetailDataTable,
                    salesSlip.ConsTaxRate,
                    salesTaxFrcProcCd,
                    salesSlip.TotalAmountDispWayCd,
                    salesSlip.ConsTaxLayMethod,
                    out salesTotalTaxInc,
                    out salesTotalTaxExc,
                    out salesSubtotalTax,
                    out itdedSalesOutTax,
                    out itdedSalesInTax,
                    out salSubttlSubToTaxFre,
                    out salesOutTax,
                    out salAmntConsTaxInclu,
                    out salesDisTtlTaxExc,
                    out itdedSalesDisOutTax,
                    out itdedSalesDisInTax,
                    out itdedSalesDisTaxFre,
                    out salesDisOutTax,
                    out salesDisTtlTaxInclu,
                    out totalCost,
                    out stockGoodsTtlTaxExc,
                    out pureGoodsTtlTaxExc,
                    out balanceAdjust,
                    out taxAdjust,
                    out salesPrtSubttlInc,
                    out salesPrtSubttlExc,
                    out salesWorkSubttlInc,
                    out salesWorkSubttlExc,
                    out itdedPartsDisInTax,
                    out itdedPartsDisOutTax,
                    out itdedWorkDisInTax,
                    out itdedWorkDisOutTax,
                    out grossProfitTotalMoney,
                    out salesPrtTotalTaxInc,
                    out salesPrtTotalTaxExc);

                // 消費税の差異を計算：売上金額消費税額（外税）+ 売上金額消費税額（内税）+ 売上値引消費税額（外税）+ 売上値引消費税額（内税）- 売上小計（税）
                long differenceTax = salesOutTax + salAmntConsTaxInclu + salesDisOutTax + salesDisTtlTaxInclu - salesSubtotalTax;

                if (differenceTax != 0)
                {
                    int targetRowCount = this.SelectSalesDetailRows(string.Format("{0}<>{1}", salesDetailDataTable.TaxationDivCdColumn.ColumnName, (int)CalculateTax.TaxationCode.TaxNone), salesDetailDataTable).Length;
                    if (targetRowCount == 0) return;

                    // 平均して振り分ける分
                    long av = differenceTax / targetRowCount;

                    // 先頭行から1円ずつ振り分ける行
                    long adjustCount = Math.Abs(differenceTax % targetRowCount);

                    int sign = (differenceTax > 0) ? 1 : -1;

                    foreach (SalesInputDataSet.SalesDetailRow row in salesDetailDataTable)
                    {
                        if (row.TaxationDivCd != (int)CalculateTax.TaxationCode.TaxNone)
                        {
                            row.SalesPriceConsTax -= (av + ((adjustCount > 0) ? sign : 0));
                            row.SalesMoneyTaxExc += (av + ((adjustCount > 0) ? sign : 0));
                            adjustCount--;
                        }
                    }
                    // 合計金額の再設定
                    this.TotalPriceSetting(ref salesSlip);
                }
            }
            #endregion
        }

        /// <summary>
        /// 受注金額補正処理
        /// </summary>
        /// <param name="salesSlip">受注データクラス</param>
        /// <param name="acptDetailDataTable">受注明細データテーブル</param>
        public void CorrectAcptMoney(ref SalesSlip acptSlip, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTable)
        {
            #region ●金額補正(受注情報)
            //----------------------------------------
            // 金額補正
            //----------------------------------------
            long salesTotalTaxInc = 0;      // 売上伝票合計（税込）
            long salesTotalTaxExc = 0;      // 売上伝票合計（税抜）
            long salesSubtotalTax = 0;      // 売上小計（税）
            long itdedSalesOutTax = 0;      // 売上外税対象額
            long itdedSalesInTax = 0;       // 売上内税対象額
            long salSubttlSubToTaxFre = 0;  // 売上小計非課税対象額
            long salesOutTax = 0;           // 売上金額消費税額（外税）
            long salAmntConsTaxInclu = 0;   // 売上金額消費税額（内税）
            long salesDisTtlTaxExc = 0;     // 売上値引金額計（税抜）
            long itdedSalesDisOutTax = 0;   // 売上値引外税対象額合計
            long itdedSalesDisInTax = 0;    // 売上値引内税対象額合計
            long itdedSalesDisTaxFre = 0;   // 売上値引非課税対象額合計
            long salesDisOutTax = 0;        // 売上値引消費税額（外税）
            long salesDisTtlTaxInclu = 0;   // 売上値引消費税額（内税）
            long totalCost = 0;             // 原価金額計
            long stockGoodsTtlTaxExc = 0;   // 在庫商品合計金額（税抜）
            long pureGoodsTtlTaxExc = 0;    // 純正商品合計金額（税抜）
            long taxAdjust = 0;             // 消費税調整額
            long balanceAdjust = 0;         // 残高調整額
            long salesPrtTotalTaxInc = 0;   // 売上部品合計（税込）
            long salesPrtTotalTaxExc = 0;   // 売上部品合計（税抜）
            long salesPrtSubttlInc = 0;     // 売上部品小計（税込）
            long salesPrtSubttlExc = 0;     // 売上部品小計（税抜）
            long salesWorkSubttlInc = 0;    // 売上作業小計（税込）
            long salesWorkSubttlExc = 0;    // 売上作業小計（税抜）
            long itdedPartsDisInTax = 0;    // 部品値引対象額合計（税込）
            long itdedPartsDisOutTax = 0;   // 部品値引対象額合計（税抜）
            long itdedWorkDisInTax = 0;     // 作業値引対象額合計（税込）
            long itdedWorkDisOutTax = 0;    // 作業値引対象額合計（税抜）
            long grossProfitTotalMoney = 0; // 粗利合計金額

            // 総額表示の場合、伝票合計消費税と明細の消費税合計の差異を調整する
            if ((acptSlip.TotalAmountDispWayCd == (int)TotalAmountDispWayCd.TotalAmount) && ((acptSlip.SalesGoodsCd == (int)SalesGoodsCd.Goods) || (acptSlip.SalesGoodsCd == (int)SalesGoodsCd.NonGoods)))
            {
                int salesTaxFrcProcCd = this._customerInfoAcs.GetSalesFractionProcCd(this._enterpriseCode, acptSlip.CustomerCode, CustomerInfoAcs.FracProcMoneyDiv.CnsTaxFrcProcCd);		// 消費税端数処理コード

                this.CalculationSalesTotalPriceForAcptAnOdr(
                    this._salesDetailAcceptAnOrderDataTable,
                    this._salesSlip.ConsTaxRate,
                    salesTaxFrcProcCd,
                    this._salesSlip.TotalAmountDispWayCd,
                    this._salesSlip.ConsTaxLayMethod,
                    out salesTotalTaxInc,
                    out salesTotalTaxExc,
                    out salesSubtotalTax,
                    out itdedSalesOutTax,
                    out itdedSalesInTax,
                    out salSubttlSubToTaxFre,
                    out salesOutTax,
                    out salAmntConsTaxInclu,
                    out salesDisTtlTaxExc,
                    out itdedSalesDisOutTax,
                    out itdedSalesDisInTax,
                    out itdedSalesDisTaxFre,
                    out salesDisOutTax,
                    out salesDisTtlTaxInclu,
                    out totalCost,
                    out stockGoodsTtlTaxExc,
                    out pureGoodsTtlTaxExc,
                    out balanceAdjust,
                    out taxAdjust,
                    out salesPrtSubttlInc,
                    out salesPrtSubttlExc,
                    out salesWorkSubttlInc,
                    out salesWorkSubttlExc,
                    out itdedPartsDisInTax,
                    out itdedPartsDisOutTax,
                    out itdedWorkDisInTax,
                    out itdedWorkDisOutTax,
                    out grossProfitTotalMoney,
                    out salesPrtTotalTaxInc,
                    out salesPrtTotalTaxExc);

                // 消費税の差異を計算：売上金額消費税額（外税）+ 売上金額消費税額（内税）+ 売上値引消費税額（外税）+ 売上値引消費税額（内税）- 売上小計（税）
                long differenceTax = salesOutTax + salAmntConsTaxInclu + salesDisOutTax + salesDisTtlTaxInclu - salesSubtotalTax;

                if (differenceTax != 0)
                {
                    int targetRowCount = this.SelectSalesDetailAcptAnOdrRows(string.Format("{0}<>{1}", acptDetailDataTable.TaxationDivCdColumn.ColumnName, (int)CalculateTax.TaxationCode.TaxNone), acptDetailDataTable).Length;
                    if (targetRowCount == 0) return;

                    // 平均して振り分ける分
                    long av = differenceTax / targetRowCount;

                    // 先頭行から1円ずつ振り分ける行
                    long adjustCount = Math.Abs(differenceTax % targetRowCount);

                    int sign = (differenceTax > 0) ? 1 : -1;

                    foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow row in acptDetailDataTable)
                    {
                        if (row.TaxationDivCd != (int)CalculateTax.TaxationCode.TaxNone)
                        {
                            row.SalesPriceConsTax -= (av + ((adjustCount > 0) ? sign : 0));
                            row.SalesMoneyTaxExc += (av + ((adjustCount > 0) ? sign : 0));
                            adjustCount--;
                        }
                    }
                    // 合計金額の再設定
                    this.TotalPriceSettingForAcptAnOdr(ref acptSlip);
                }
            }
            #endregion
        }

        #region ●空明細情報
        /// <summary>
        /// 空商品情報設定（オーバーロード）
        /// </summary>
        /// <param name="goodsNo">商品コード</param>
        public GoodsUnitData CreateEmptyGoods(string goodsNo)
        {
            return this.CreateEmptyGoods(goodsNo, string.Empty, 0, 0);
        }

        /// <summary>
        /// 空商品情報設定（オーバーロード）
        /// </summary>
        /// <param name="bLGoodsCode">BLコード</param>
        /// <returns></returns>
        public GoodsUnitData CreateEmptyGoods(int bLGoodsCode)
        {
            return this.CreateEmptyGoods(string.Empty, string.Empty, 0, bLGoodsCode);
        }

        /// <summary>
        /// 空商品情報設定
        /// </summary>
        /// <param name="goodsNo">品番</param>
        /// <param name="goodsName">品名</param>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="bLGoodsCode">BLコード</param>
        /// <returns></returns>
        public GoodsUnitData CreateEmptyGoods(string goodsNo, string goodsName, int goodsMakerCd, int bLGoodsCode)
        {
            GoodsUnitData retGoodsUnitData = new GoodsUnitData();
            retGoodsUnitData.GoodsNo = goodsNo;
            retGoodsUnitData.GoodsName = goodsName;
            retGoodsUnitData.GoodsMakerCd = goodsMakerCd;
            retGoodsUnitData.MakerName = this._salesSlipInputInitDataAcs.GetName_FromMaker(goodsMakerCd);
            retGoodsUnitData.BLGoodsCode = bLGoodsCode;

            return retGoodsUnitData;
        }
        #endregion

        #region ●明細項目情報設定
        /// <summary>
        /// 売上明細データ行オブジェクトに行値引情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingSalesDetailRowLineDiscount(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                this.ClearSalesDetailRow(row);

                row.EditStatus = ctEDITSTATUS_RowDiscount;      // 行値引ステータス
                row.GoodsName = this._salesSlipInputInitDataAcs.GetSalesTtlSt().DiscountName;
                row.GoodsNameKana = this._salesSlipInputInitDataAcs.GetSalesTtlSt().DiscountName;
                row.SalesSlipCdDtl = (int)SalesSlipCdDtl.Discount;                         // 売上伝票区分(明細)
                if (this._salesSlip.TotalAmountDispWayCd == (int)TotalAmountDispWayCd.NoTotalAmount)
                {
                    row.TaxationDivCd = (int)CalculateTax.TaxationCode.TaxExc; // 外税
                }
                else
                {
                    row.TaxationDivCd = (int)CalculateTax.TaxationCode.TaxInc; // 内税
                }

                if (row.TaxationDivCd == (int)CalculateTax.TaxationCode.TaxNone)
                {
                    row.TaxDiv = 1; // 非課税
                }
                else
                {
                    row.TaxDiv = 0; // 課税
                }

                row.SalesMoneyTaxExc = row.SalesMoneyDisplay;   // 売上金額(税抜き)
                row.SalesMoneyTaxInc = row.SalesMoneyDisplay;   // 売上金額(税込み)
                row.SalesUnPrcTaxExcFl = row.SalesUnPrcDisplay;// 売単価(税抜き)
                row.SalesUnPrcTaxIncFl = row.SalesUnPrcDisplay;// 売単価(税込み)

                row.AcceptChanges();
            }
        }

        /// <summary>
        /// 売上明細データ行オブジェクトに商品値引情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingSalesDetailRowGoodsDiscount(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                this.ClearSalesDetailRow(row);

                row.EditStatus = ctEDITSTATUS_GoodsDiscount;      // 商品値引ステータス
                row.SalesSlipCdDtl = (int)SalesSlipCdDtl.Discount;                         // 売上伝票区分(明細)
                row.ShipmentCntDisplay = -1 * row.ShipmentCntDisplay;
                row.ShipmentCnt = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;

                if (this._salesSlip.ConsTaxLayMethod == (int)ConsTaxLayMethod.TaxExempt)
                {
                    row.TaxationDivCd = (int)CalculateTax.TaxationCode.TaxNone; // 非課税
                }
                else if (this._salesSlip.TotalAmountDispWayCd == (int)TotalAmountDispWayCd.NoTotalAmount)
                {
                    row.TaxationDivCd = (int)CalculateTax.TaxationCode.TaxExc; // 外税
                }
                else
                {
                    row.TaxationDivCd = (int)CalculateTax.TaxationCode.TaxInc; // 内税
                }

                if (row.TaxationDivCd == (int)CalculateTax.TaxationCode.TaxNone)
                {
                    row.TaxDiv = 1; // 非課税
                }
                else
                {
                    row.TaxDiv = 0; // 課税
                }
                row.SalesMoneyTaxExc = row.SalesMoneyDisplay;   // 売上金額(税抜き)
                row.SalesMoneyTaxInc = row.SalesMoneyDisplay;   // 売上金額(税込み)
                row.SalesUnPrcTaxExcFl = row.SalesUnPrcDisplay;// 売単価(税抜き)
                row.SalesUnPrcTaxIncFl = row.SalesUnPrcDisplay;// 売単価(税込み)
            }
        }

        /// <summary>
        /// 売上明細データ行オブジェクトに注釈情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingSalesDetailRowAnnotation(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                this.ClearSalesDetailRow(row);

                row.EditStatus = ctEDITSTATUS_Annotation;       // 行値引ステータス
                row.GoodsName = "注釈";
                row.GoodsNameKana = "注釈";
                row.SalesSlipCdDtl = (int)SalesSlipCdDtl.Annotation;                         // 売上伝票区分(明細)
                row.TaxDiv = 1;
                if (this._salesSlip.TotalAmountDispWayCd == 0)
                {
                    // 0:総額表示しない
                    row.TaxationDivCd = 0; // 外税
                }
                else
                {
                    // 1:総額表示する
                    row.TaxationDivCd = 2; // 内税
                }
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトに倉庫名称と倉庫コードを設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <param name="warehouseCode">倉庫コード</param>
        /// <param name="warehouseName">倉庫名称</param>
        public void SettingSalesDetailWarehouseInfo(int salesRowNo, string warehouseCode, string warehouseName)
        {

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row == null) return;

            row.WarehouseCode = warehouseCode.Trim();
            row.WarehouseName = warehouseName;
            if (String.IsNullOrEmpty(warehouseCode.Trim()))
            {
                row.WarehouseShelfNo = string.Empty;
                row.SupplierStock = 0;
                row.SupplierStockDisplay = 0;
            }

            row.AcceptChanges();

        }

        /// <summary>
        /// 売上明細行オブジェクトに在庫情報を設定します。
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="stock"></param>
        public void SettingSalesDetailStockInfo(int salesRowNo, Stock stock)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row != null) this.SettingSalesDetailStockInfo(row, stock);
        }

        /// <summary>
        /// 売上明細行オブジェクトに在庫情報を設定します。
        /// </summary>
        /// <param name="row"></param>
        /// <param name="stock"></param>
        public void SettingSalesDetailStockInfo(SalesInputDataSet.SalesDetailRow row, Stock stock)
        {
            if (row == null) return;

            if (stock != null)
            {
                this.SettingGoodsUnitDataDicStockList(stock); // 商品連結データ

                this.CacheStockInfo(stock); // 在庫テーブルキャッシュ

                row.WarehouseCode = stock.WarehouseCode.Trim();
                row.WarehouseName = stock.WarehouseName.Trim();
                row.WarehouseShelfNo = stock.WarehouseShelfNo.Trim();
                row.SalesOrderDivCd = (int)SalesOrderDivCd.Stock; // 売上在庫取寄区分(0:取寄 1:在庫)

                // 現在庫数調整
                this.SalesDetailStockInfoAdjust(row.WarehouseCode, row.GoodsNo, row.GoodsMakerCd);
            }
            else
            {
                row.WarehouseCode = string.Empty;
                row.WarehouseName = string.Empty;
                row.WarehouseShelfNo = string.Empty;
                row.SupplierStock = 0;
                row.SupplierStockDisplay = 0;
                row.SalesOrderDivCd = (int)SalesOrderDivCd.NonStock; // 売上在庫取寄区分(0:取寄 1:在庫)
            }
        }

        /// <summary>
        /// 指定した行の在庫情報をクリアします。
        /// </summary>
        /// <param name="stockRowNo">行番号</param>
        public void ClearSalesDetailStockInfo(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            this.ClearSalesDetailStockInfo(row);
        }

        /// <summary>
        /// 指定した行の在庫情報をクリアします。
        /// </summary>
        /// <param name="row">売上明細行オブジェクト</param>
        public void ClearSalesDetailStockInfo(SalesInputDataSet.SalesDetailRow row)
        {
            if (row != null)
            {
                string goodsNo = row.GoodsNo;
                string warehouseCode = row.WarehouseCode.Trim();
                int goodsmakerCode = row.GoodsMakerCd;

                row.WarehouseCode = string.Empty;
                row.WarehouseName = string.Empty;
                row.WarehouseShelfNo = string.Empty;
                row.SupplierStock = 0;
                row.SupplierStockDisplay = 0;
                row.SalesOrderDivCd = (int)SalesOrderDivCd.NonStock;

                row.AcceptChanges();
                if ((!string.IsNullOrEmpty(warehouseCode)) && (!string.IsNullOrEmpty(goodsNo)) && (goodsmakerCode != 0))
                {
                    this.SalesDetailStockInfoAdjust(warehouseCode, goodsNo, goodsmakerCode);
                }
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトにメーカーコードとメーカー名称を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="makerName">メーカー名称</param>
        /// <returns>データ変更有無</returns>
        public bool SettingSalesDetailMakerInfo(int salesRowNo, int goodsMakerCd, string makerName)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            bool retbool = (row.GoodsMakerCd != goodsMakerCd);
            row.GoodsMakerCd = goodsMakerCd;
            row.MakerName = makerName;
            return retbool;
        }

        //>>>2010/07/21
        /// <summary>
        /// 売上明細行オブジェクトにメーカーコードとメーカー名称を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="makerName">メーカー名称</param>
        /// <param name="makerKanaName"></param>
        /// <returns>データ変更有無</returns>
        public bool SettingSalesDetailMakerInfo(int salesRowNo, int goodsMakerCd, string makerName, string makerKanaName)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            bool retbool = (row.GoodsMakerCd != goodsMakerCd);
            row.GoodsMakerCd = goodsMakerCd;
            row.MakerName = makerName;
            row.MakerKanaName = makerKanaName;

            //>>>2010/10/04
            GoodsUnitData tempGoodsUnitData = new GoodsUnitData();
            GoodsInfoKey goodsInfoKey = new GoodsInfoKey(row.GoodsNo, goodsMakerCd);
            tempGoodsUnitData.GoodsMakerCd = goodsMakerCd;
            tempGoodsUnitData.GoodsNo = row.GoodsNo;
            if (!this._goodsUnitDataInfo.ContainsKey(goodsInfoKey))
            {
                this._goodsUnitDataInfo.Add(goodsInfoKey, tempGoodsUnitData);
            }
            //<<<2010/10/04

            return retbool;
        }
        //<<<2010/07/21

        //>>>2010/09/14
        /// <summary>
        /// 売上明細行オブジェクトにBLコード関連の情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <param name="blCode">BLコード</param>
        /// <returns>False:BLコードマスタ取得失敗</returns>
        public bool SettingSalesDetailBLGoodsInfo(int salesRowNo, int blCode)
        {
            return this.SettingSalesDetailBLGoodsInfo(salesRowNo, blCode, blCode);
        }
        //<<<2010/09/14

        /// <summary>
        /// 売上明細行オブジェクトにBLコード関連の情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <param name="blCode">BLコード</param>
        /// <param name="beforeBlCode">変更前Bコード</param>
        /// <returns>False:BLコードマスタ取得失敗</returns>
        //>>>2010/09/14
        //public bool SettingSalesDetailBLGoodsInfo(int salesRowNo, int blCode)
        public bool SettingSalesDetailBLGoodsInfo(int salesRowNo, int blCode, int beforeBlCode)
        //<<<2010/09/14
        {
            BLGoodsCdUMnt bLGoodsCdUMnt = new BLGoodsCdUMnt();
            BLGroupU bLGroupU = new BLGroupU();
            GoodsGroupU goodsGroupU = new GoodsGroupU();
            UserGdBdU userGdBdU = new UserGdBdU();

            if (blCode != 0)
            {
                // BLグループ、中分類、大分類情報を取得
                if (!this._salesSlipInputInitDataAcs.GetBLGoodsRelation(blCode, out bLGoodsCdUMnt, out bLGroupU, out goodsGroupU, out userGdBdU))
                {
                    // 失敗時は
                    return false;
                }
            }

            SalesInputDataSet.SalesDetailRow salesDetailRow = this.GetSalesDetailRow(salesRowNo);

            bool changeGoodsName = false;
            if (blCode != 0)
            {
                if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().GoodsNmReDispDivCd == 1) ||
                    ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().GoodsNmReDispDivCd == 0) &&
                     (string.IsNullOrEmpty(salesDetailRow.GoodsName)))) changeGoodsName = true; // 品名再表示区分 0:しない 1:する

                //>>>2010/09/14
                if ((!string.IsNullOrEmpty(salesDetailRow.GoodsName)) &&
                    (beforeBlCode == 0)) changeGoodsName = false;
                //<<<2010/09/14
            }
            this.SettingSalesDetailBLGoodsInfo(salesRowNo, bLGoodsCdUMnt, bLGroupU, goodsGroupU, userGdBdU, changeGoodsName);

            return true;
        }

        // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133-------->>>>
        /// <summary>
        /// 売上明細データ行オブジェクトに商品価格情報（原単価）を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <remarks>
        /// <br>Note       : 売上明細データ行オブジェクトに商品価格情報（原単価）を設定します。</br>
        /// <br>Programmer : 陳艶丹</br>
        /// <br>Date       : 2021/03/16</br>
        /// </remarks>
        public void SetSalesDetailBLGoodsInfo(int salesRowNo)
        {
            try
            {
                // 初期値データ取得処理
                this._salesSlipInputInitDataAcs.SearchBLGoodsInfo(this._enterpriseCode);
                SalesInputDataSet.SalesDetailRow salesDetailRow = this.GetSalesDetailRow(salesRowNo);
                // goodsUnitDataを取得
                GoodsUnitData goodsUnitData = null;
                GoodsInfoKey goodsInfoKey = new GoodsInfoKey(salesDetailRow.GoodsNo, salesDetailRow.GoodsMakerCd);
                if (this._goodsUnitDataInfo.ContainsKey(goodsInfoKey))
                {
                    goodsUnitData = this._goodsUnitDataInfo[goodsInfoKey];
                }

                if (goodsUnitData != null)
                {
                    // 商品連結データ不足情報設定
                    this._salesSlipInputInitDataAcs.SettingGoodsUnitDataListFromVariousMst(ref goodsUnitData, true);
                    // BLコード関連の情報を設定する
                    if (this.SetBLGoodsInfo(salesRowNo, goodsUnitData))
                    {
                        // 単価算出部品より商品価格を取得
                        List<UnitPriceCalcRet> unitPriceCalcRetList = this.CalclationUnitPrice(salesDetailRow, goodsUnitData);
                        List<UnitPriceCalcRet> tempUnitPriceCalcRetList = new List<UnitPriceCalcRet>();
                        foreach (UnitPriceCalcRet unitPriceCalcRet in unitPriceCalcRetList)
                        {
                            // 原価データ取得
                            if (unitPriceCalcRet.UnitPriceKind == UnitPriceCalculation.ctUnitPriceKind_UnitCost)
                            {
                                tempUnitPriceCalcRetList.Add(unitPriceCalcRet);
                            }
                        }
                        unitPriceCalcRetList = tempUnitPriceCalcRetList;

                        // 原価データあるの場合、価格再設定
                        if (unitPriceCalcRetList != null && unitPriceCalcRetList.Count > CtZero)
                        {
                            // 価格再設定
                            _noneResettingUnitCostFlag = true;
                            this.SalesDetailRowGoodsPriceSetting(ref salesDetailRow, goodsUnitData, false, unitPriceCalcRetList);
                            _noneResettingUnitCostFlag = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // ログ出力
                if (LogCommon == null)
                {
                    LogCommon = new OutLogCommon();
                }
                LogCommon.OutputClientLog(PGID_XML, CtMethodNm, this._enterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode, ex);
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトにBLコード関連の情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <param name="goodsUnitData">商品情報</param>
        /// <returns>False:BLコードマスタ取得失敗</returns>
        /// <remarks>
        /// <br>Note       : 売上明細行オブジェクトにBLコード関連の情報を設定します。</br>
        /// <br>Programmer : 陳艶丹</br>
        /// <br>Date       : 2021/03/16</br>
        /// </remarks>
        private bool SetBLGoodsInfo(int salesRowNo, GoodsUnitData goodsUnitData)
        {
            BLGoodsCdUMnt bLGoodsCdUMnt = new BLGoodsCdUMnt();
            BLGroupU bLGroupU = new BLGroupU();
            GoodsGroupU goodsGroupU = new GoodsGroupU();
            UserGdBdU userGdBdU = new UserGdBdU();

            // BLコード取得する
            if (goodsUnitData.BLGoodsCode != CtZero)
            {
                // BLグループ、中分類、大分類情報を取得
                if (!this._salesSlipInputInitDataAcs.GetBLGoodsRelation(goodsUnitData.BLGoodsCode, out bLGoodsCdUMnt, out bLGroupU, out goodsGroupU, out userGdBdU))
                {
                    // 失敗時は
                    return false;
                }
            }
            // BLコード取得しない
            else
            {
                return false;
            }
            // BLコード関連の情報を設定する。
            this.SetSalesDtlBLGoodsInfo(salesRowNo, bLGoodsCdUMnt, bLGroupU, goodsGroupU, userGdBdU, goodsUnitData);
            return true;
        }

        /// <summary>
        /// 売上明細行オブジェクトにBLコード関連の情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <param name="bLGoodsCdUMnt">BLコードマスタ</param>
        /// <param name="bLGroupU">グループコードマスタ</param>
        /// <param name="goodsGroupU">中分類マスタ</param>
        /// <param name="userGdBdU">ユーザーガイドマスタ（大分類情報）</param>
        /// <param name="goodsUnitData">商品情報</param>
        /// <remarks>
        /// <br>Note       : 売上明細行オブジェクトにBLコード関連の情報を設定します。</br>
        /// <br>Programmer : 陳艶丹</br>
        /// <br>Date       : 2021/03/16</br>
        /// </remarks>
        private void SetSalesDtlBLGoodsInfo(int salesRowNo, BLGoodsCdUMnt bLGoodsCdUMnt, BLGroupU bLGroupU, GoodsGroupU goodsGroupU, UserGdBdU userGdBdU, GoodsUnitData goodsUnitData)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            // 明細データあるの場合、再設定処理
            if (row != null)
            {
                row.PrtBLGoodsCode = bLGoodsCdUMnt.BLGoodsCode;
                row.PrtBLGoodsName = bLGoodsCdUMnt.BLGoodsHalfName;

                row.BLGoodsCode = bLGoodsCdUMnt.BLGoodsCode;
                row.BLGoodsFullName = bLGoodsCdUMnt.BLGoodsHalfName;

                row.BLGroupCode = bLGroupU.BLGroupCode;
                row.BLGroupName = bLGroupU.BLGroupName;

                row.GoodsMGroup = goodsGroupU.GoodsMGroup;
                row.GoodsMGroupName = goodsGroupU.GoodsMGroupName;

                row.GoodsLGroup = userGdBdU.GuideCode;
                row.GoodsLGroupName = userGdBdU.GuideName;

                row.RateBLGoodsCode = bLGoodsCdUMnt.BLGoodsCode;                // BL商品コード（掛率）
                row.RateBLGoodsName = bLGoodsCdUMnt.BLGoodsFullName;            // BL商品コード名称（掛率）
                row.RateGoodsRateGrpCd = bLGoodsCdUMnt.GoodsRateGrpCode;        // 商品掛率グループコード（掛率）
                row.RateGoodsRateGrpNm = goodsGroupU.GoodsMGroupName;           // 商品掛率グループ名称（掛率）
                row.RateBLGroupCode = bLGroupU.BLGroupCode;                     // BLグループコード（掛率）
                row.RateBLGroupName = bLGroupU.BLGroupName;                     // BLグループ名称（掛率）
                row.MakerName = goodsUnitData.MakerName;                        // メーカー名
                row.MakerKanaName = goodsUnitData.MakerKanaName;                // メーカーカナ名
                row.SupplierCd = goodsUnitData.SupplierCd;                      // 仕入先コード

                if (this._originalBLGoodsCodeMap.ContainsKey(salesRowNo))
                {
                    this._originalBLGoodsCodeMap[salesRowNo] = bLGoodsCdUMnt.BLGoodsCode;
                }
                else
                {
                    this._originalBLGoodsCodeMap.Add(salesRowNo, bLGoodsCdUMnt.BLGoodsCode);
                }
            }
        }

        /// <summary>
        /// ログ内容を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <remarks>
        /// <br>Note       : ログ内容を設定します。</br>
        /// <br>Programmer : 陳艶丹</br>
        /// <br>Date       : 2021/03/16</br>
        /// </remarks>
        public string GetLogInfo(int salesRowNo)
        {
            string logMsg = string.Empty;
            // 売上明細データ行を取得
            SalesInputDataSet.SalesDetailRow salesDetailRow = this.GetSalesDetailRow(salesRowNo);
            // 商品情報を取得
            GoodsUnitData goodsUnitData = null;
            GoodsInfoKey goodsInfoKey = new GoodsInfoKey(salesDetailRow.GoodsNo, salesDetailRow.GoodsMakerCd);
            if (this._goodsUnitDataInfo.ContainsKey(goodsInfoKey))
            {
                goodsUnitData = this._goodsUnitDataInfo[goodsInfoKey];
            }
            // 商品情報取得の場合、ログ内容を作成
            if (goodsUnitData != null)
            {
                logMsg = LogInfo(goodsUnitData);
            }
            return logMsg;
        }
        // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133--------<<<<<

        /// <summary>
        /// 売上明細行オブジェクトにBLコード関連の情報を設定します。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <param name="bLGoodsCdUMnt">BLコードマスタ</param>
        /// <param name="beforeBlCode">変更前BLコード</param>
        public void SettingSalesDetailBLGoodsInfo(int salesRowNo, BLGoodsCdUMnt bLGoodsCdUMnt)
        {
            BLGoodsCdUMnt bLGoodsCdUMntWk = new BLGoodsCdUMnt();
            BLGroupU bLGroupU = new BLGroupU();
            GoodsGroupU goodsGroupU = new GoodsGroupU();
            UserGdBdU userGdBdU = new UserGdBdU();

            // BLグループ、中分類、大分類情報を取得
            this._salesSlipInputInitDataAcs.GetBLGoodsRelation(bLGoodsCdUMnt.BLGoodsCode, out bLGoodsCdUMntWk, out bLGroupU, out goodsGroupU, out userGdBdU);

            SalesInputDataSet.SalesDetailRow salesDetailRow = this.GetSalesDetailRow(salesRowNo);

            bool changeGoodsName = false;
            if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().GoodsNmReDispDivCd == 1) ||
                ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().GoodsNmReDispDivCd == 0) &&
                 (string.IsNullOrEmpty(salesDetailRow.GoodsName)))) changeGoodsName = true; // 品名再表示区分 0:しない 1:する

            //>>>2010/09/14
            if ((!string.IsNullOrEmpty(salesDetailRow.GoodsName)) &&
                (salesDetailRow.BLGoodsCode == 0)) changeGoodsName = false;
            //<<<2010/09/14

            this.SettingSalesDetailBLGoodsInfo(salesRowNo, bLGoodsCdUMnt, bLGroupU, goodsGroupU, userGdBdU, changeGoodsName);
        }

        /// <summary>
        /// 売上明細行オブジェクトのBLコード関連の情報をクリアします。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <returns></returns>
        public void ClearBLGoodsInfo(int salesRowNo)
        {
            this.SettingSalesDetailBLGoodsInfo(salesRowNo, new BLGoodsCdUMnt(), new BLGroupU(), new GoodsGroupU(), new UserGdBdU(), false);
        }

        /// <summary>
        /// 売上明細行オブジェクトにBLコード関連の情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <param name="bLGoodsCdUMnt">BLコードマスタ</param>
        /// <param name="bLGroupU">グループコードマスタ</param>
        /// <param name="goodsGroupU">中分類マスタ</param>
        /// <param name="userGdBdU">ユーザーガイドマスタ（大分類情報）</param>
        /// <param name="changeGoodsName">True:品名を変更する</param>
        /// <br>Note       : 2010/06/02 高峰 PM.NS障害・改良対応（７月リリース案件）No.28</br>
        private void SettingSalesDetailBLGoodsInfo(int salesRowNo, BLGoodsCdUMnt bLGoodsCdUMnt, BLGroupU bLGroupU, GoodsGroupU goodsGroupU, UserGdBdU userGdBdU, bool changeGoodsName)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                row.PrtBLGoodsCode = bLGoodsCdUMnt.BLGoodsCode;
                // --- UPD 2010/06/02 ---------->>>>>
                //row.PrtBLGoodsName = bLGoodsCdUMnt.BLGoodsFullName;
                row.PrtBLGoodsName = bLGoodsCdUMnt.BLGoodsHalfName;
                // --- UPD 2010/06/02----------<<<<<


                row.BLGoodsCode = bLGoodsCdUMnt.BLGoodsCode;
                // --- UPD 2010/06/02 ---------->>>>>
                //row.BLGoodsFullName = bLGoodsCdUMnt.BLGoodsFullName;
                row.BLGoodsFullName = bLGoodsCdUMnt.BLGoodsHalfName;
                // --- UPD 2010/06/02----------<<<<<

                row.BLGroupCode = bLGroupU.BLGroupCode;
                row.BLGroupName = bLGroupU.BLGroupName;

                row.GoodsMGroup = goodsGroupU.GoodsMGroup;
                row.GoodsMGroupName = goodsGroupU.GoodsMGroupName;

                row.GoodsLGroup = userGdBdU.GuideCode;
                row.GoodsLGroupName = userGdBdU.GuideName;

                if (changeGoodsName)
                {
                    // --- UPD 2010/06/02 ---------->>>>>
                    //row.GoodsName = bLGoodsCdUMnt.BLGoodsFullName;
                    row.GoodsName = bLGoodsCdUMnt.BLGoodsHalfName;
                    // --- UPD 2010/06/02----------<<<<<
                    row.GoodsNameKana = bLGoodsCdUMnt.BLGoodsHalfName;
                }

                //>>>2010/10/04
                row.RateBLGoodsCode = bLGoodsCdUMnt.BLGoodsCode;                // BL商品コード（掛率）
                row.RateBLGoodsName = bLGoodsCdUMnt.BLGoodsFullName;            // BL商品コード名称（掛率）
                //<<<2010/10/04

                //>>>2013/04/06
                if (this._originalBLGoodsCodeMap.ContainsKey(salesRowNo))
                {
                    this._originalBLGoodsCodeMap[salesRowNo] = bLGoodsCdUMnt.BLGoodsCode;
                }
                else
                {
                    this._originalBLGoodsCodeMap.Add(salesRowNo, bLGoodsCdUMnt.BLGoodsCode);
                }
                //<<<2013/04/06

            }
        }

        /// <summary>
        /// 売上明細行オブジェクトに仕入先情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <param name="supplier">仕入先情報</param>
        public void SettingSalesDetailSupplierInfo(int salesRowNo, Supplier supplier)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row == null) return;

            if (supplier.SupplierCd == 0)
            {
                row.SupplierCd = 0;
                row.SupplierSnm = string.Empty;
                row.SupplierCdForStock = 0;
            }
            else
            {
                row.SupplierCd = supplier.SupplierCd;
                row.SupplierSnm = supplier.SupplierSnm;
                row.SupplierCdForStock = supplier.SupplierCd;
            }
            row.AcceptChanges();
        }

        /// <summary>
        /// 売上明細行オブジェクトの数量を設定します。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingSalesDetailShipmentCnt(List<SalesDetail> salesDetailList)
        {
            foreach (SalesDetail salesDetail in salesDetailList)
            {
                this.SettingSalesDetailShipmentCnt(salesDetail.SalesRowNo);
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトの数量を設定します。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingSalesDetailShipmentCnt(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row == null) return;

            double shipmentCntRealValue = row.ShipmentCntDisplay;
            if (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) shipmentCntRealValue *= -1;

            //--------------------------------------------
            // 新規登録行
            //--------------------------------------------
            if (row.SalesSlipDtlNum == 0)
            {
                if ((this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp))
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                    row.AcptAnOdrAdjustCnt = 0;
                    row.AcptAnOdrRemainCnt = row.AcceptAnOrderCnt - shipmentCntRealValue;
                }
                else
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCntDisplay;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCntDisplay;
                    row.AcptAnOdrAdjustCnt = 0;
                    //row.AcptAnOdrRemainCnt = row.AcceptAnOrderCntDisplay - shipmentCntRealValue;
                    row.AcptAnOdrRemainCnt = 0;
                }
            }
            //--------------------------------------------
            // 既存修正行
            //--------------------------------------------
            else
            {
                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlip.AcptAnOdrStatus)
                {
                    case AcptAnOdrStatusState.Estimate:
                    case AcptAnOdrStatusState.UnitPriceEstimate:
                    case AcptAnOdrStatusState.Sales:
                    case AcptAnOdrStatusState.Shipment:
                        double shipmentAdjustCnt = shipmentCntRealValue - row.ShipmentCnt;// 入力前との差分を計算
                        row.ShipmentCnt = shipmentCntRealValue;
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        row.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt + shipmentAdjustCnt;
                        row.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt + shipmentAdjustCnt;
                        break;
                    case AcptAnOdrStatusState.AcceptAnOrder:
                        double acptAdjustCnt = row.AcceptAnOrderCntDisplay - row.AcceptAnOrderCnt;// 入力前との差分を計算
                        row.ShipmentCnt = shipmentCntRealValue;
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        row.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt + acptAdjustCnt;
                        row.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt + acptAdjustCnt;
                        break;
                }
            }

            // ----UPD 2011/11/02------->>>>>
            //// 現在庫数調整
            //if (!(string.IsNullOrEmpty(row.WarehouseCode.Trim()))) this.SalesDetailStockInfoAdjust();

            // 現在庫数調整
            if (this._salesSlipInputInitDataAcs.GetAllDefSet().DtlCalcStckCntDsp == 0)
            {
                //検索後反映
                if (!(string.IsNullOrEmpty(row.WarehouseCode.Trim()))) this.SalesDetailStockInfoAdjust();
            }
            else
            {
                //行移動時反映の場合、調整しない
            }
            // ----UPD 2011/11/02-------<<<<<

            // 掛率から単価を再計算
            this.SalesDetailRowGoodsPriceSetting(ref row);
        }

        //>>>2011/10/29
        /// <summary>
        /// 売上明細行オブジェクトの数量を設定します。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingSalesDetailShipmentCnt2(List<SalesDetail> salesDetailList)
        {
            foreach (SalesDetail salesDetail in salesDetailList)
            {
                this.SettingSalesDetailShipmentCnt2(salesDetail.SalesRowNo);
            }
        }
        //<<<2011/10/29

        // ADD 2010/08/13 --- >>>
        /// <summary>
        /// 売上明細行オブジェクトの数量を設定します。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingSalesDetailShipmentCnt2(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row == null) return;

            double shipmentCntRealValue = row.ShipmentCntDisplay;
            if (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) shipmentCntRealValue *= -1;

            //--------------------------------------------
            // 新規登録行
            //--------------------------------------------
            if (row.SalesSlipDtlNum == 0)
            {
                if ((this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp))
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                    row.AcptAnOdrAdjustCnt = 0;
                    row.AcptAnOdrRemainCnt = row.AcceptAnOrderCnt - shipmentCntRealValue;
                }
                else
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCntDisplay;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCntDisplay;
                    row.AcptAnOdrAdjustCnt = 0;
                    //row.AcptAnOdrRemainCnt = row.AcceptAnOrderCntDisplay - shipmentCntRealValue;
                    row.AcptAnOdrRemainCnt = 0;
                }
            }
            //--------------------------------------------
            // 既存修正行
            //--------------------------------------------
            else
            {
                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlip.AcptAnOdrStatus)
                {
                    case AcptAnOdrStatusState.Estimate:
                    case AcptAnOdrStatusState.UnitPriceEstimate:
                    case AcptAnOdrStatusState.Sales:
                    case AcptAnOdrStatusState.Shipment:
                        double shipmentAdjustCnt = shipmentCntRealValue - row.ShipmentCnt;// 入力前との差分を計算
                        row.ShipmentCnt = shipmentCntRealValue;
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        row.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt + shipmentAdjustCnt;
                        row.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt + shipmentAdjustCnt;
                        break;
                    case AcptAnOdrStatusState.AcceptAnOrder:
                        double acptAdjustCnt = row.AcceptAnOrderCntDisplay - row.AcceptAnOrderCnt;// 入力前との差分を計算
                        row.ShipmentCnt = shipmentCntRealValue;
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        row.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt + acptAdjustCnt;
                        row.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt + acptAdjustCnt;
                        break;
                }
            }

            // ----UPD 2011/11/02------->>>>>
            //// 現在庫数調整
            //if (!(string.IsNullOrEmpty(row.WarehouseCode.Trim()))) this.SalesDetailStockInfoAdjust();

            // 現在庫数調整
            if (this._salesSlipInputInitDataAcs.GetAllDefSet().DtlCalcStckCntDsp == 0)
            {
                //検索後反映
                if (!(string.IsNullOrEmpty(row.WarehouseCode.Trim()))) this.SalesDetailStockInfoAdjust();
            }
            else
            {
                //行移動時反映の場合、調整しない
            }
            // ----UPD 2011/11/02-------<<<<<
        }
        // ADD 2010/08/13 --- <<<

        // --- ADD m.suzuki 2011/02/16 ---------->>>>>
        /// <summary>
        /// 出荷数変更時の処理（売上）
        /// </summary>
        /// <param name="salesRowNo">売上行№</param>
        /// <param name="beforeAcptAnOdrCnt">変更前出荷数</param>
        public void SettingSalesDetailShipmentCntOnChange(int salesRowNo, double beforeShipmentCnt) 
        {
            # region [SettingSalesDetailShipmentCntと同様]
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row == null) return;

            double shipmentCntRealValue = row.ShipmentCntDisplay;
            if (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) shipmentCntRealValue *= -1;

            //--------------------------------------------
            // 新規登録行
            //--------------------------------------------
            if (row.SalesSlipDtlNum == 0)
            {
                if ((this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp))
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                    row.AcptAnOdrAdjustCnt = 0;
                    row.AcptAnOdrRemainCnt = row.AcceptAnOrderCnt - shipmentCntRealValue;
                }
                else
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCntDisplay;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCntDisplay;
                    row.AcptAnOdrAdjustCnt = 0;
                    //row.AcptAnOdrRemainCnt = row.AcceptAnOrderCntDisplay - shipmentCntRealValue;
                    row.AcptAnOdrRemainCnt = 0;
                }
            }
            //--------------------------------------------
            // 既存修正行
            //--------------------------------------------
            else
            {
                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlip.AcptAnOdrStatus)
                {
                    case AcptAnOdrStatusState.Estimate:
                    case AcptAnOdrStatusState.UnitPriceEstimate:
                    case AcptAnOdrStatusState.Sales:
                    case AcptAnOdrStatusState.Shipment:
                        double shipmentAdjustCnt = shipmentCntRealValue - row.ShipmentCnt;// 入力前との差分を計算
                        row.ShipmentCnt = shipmentCntRealValue;
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        row.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt + shipmentAdjustCnt;
                        row.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt + shipmentAdjustCnt;
                        break;
                    case AcptAnOdrStatusState.AcceptAnOrder:
                        double acptAdjustCnt = row.AcceptAnOrderCntDisplay - row.AcceptAnOrderCnt;// 入力前との差分を計算
                        row.ShipmentCnt = shipmentCntRealValue;
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        row.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt + acptAdjustCnt;
                        row.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt + acptAdjustCnt;
                        break;
                }
            }

            // ----ADD 2011/07/20------->>>>>
            // 現在庫数調整
            if (this._salesSlipInputInitDataAcs.GetAllDefSet().DtlCalcStckCntDsp == 0)
            {
                //検索後反映
                if (!(string.IsNullOrEmpty(row.WarehouseCode.Trim()))) this.SalesDetailStockInfoAdjust();
            }
            else
            {
                //行移動時反映の場合、調整しない
            }
            // ----ADD 2011/07/20-------<<<<<
            //if (!(string.IsNullOrEmpty(row.WarehouseCode.Trim()))) this.SalesDetailStockInfoAdjust();  //DEL 2011/07/20

            //// 掛率から単価を再計算
            //this.SalesDetailRowGoodsPriceSetting(ref row);
            # endregion

            # region [売単価のみ掛率に基づき再計算]
            //if ( row.SalesRate != 0 )
            {
                if (beforeShipmentCnt < 0) beforeShipmentCnt *= -1;

                // goodsUnitDataを取得
                GoodsUnitData goodsUnitData = this.GetGoodsUnitDataDic(row.GoodsMakerCd, row.GoodsNo, row);

                // 売単価のみの単価取得リスト生成（ロット範囲が変わるものだけ対象にする）
                List<UnitPriceCalcRet> wkList = this.CalclationUnitPrice(row, goodsUnitData);
                List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>(
                                        wkList.FindAll(
                                            delegate(UnitPriceCalcRet calcRet)
                                            {
                                                return (calcRet.UnitPriceKind == UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice &&
                                                        (beforeShipmentCnt < calcRet.LotSt || calcRet.LotEd < beforeShipmentCnt));
                                            }
                                        ));

                if (unitPriceCalcRetList != null && unitPriceCalcRetList.Count > 0)
                {
                    // 価格再設定
                    _noneResettingListPriceFlag = true;
                    _noneResettingUnitCostFlag = true;
                    this.SalesDetailRowGoodsPriceSetting(ref row, goodsUnitData, false, unitPriceCalcRetList);
                    _noneResettingListPriceFlag = false;
                    _noneResettingUnitCostFlag = false;
                }
            }
            # endregion
        }

        // ADD 2011/08/15 -------------- >>>>>>
        /// <summary>
        /// 価格変更時の処理（売上）
        /// </summary>
        /// <param name="salesRowNo">売上行№</param>
        /// <param name="goodsUnitData">価格対象</param>
        public void SettingSalesDetailGoodsPriceOnChange(int salesRowNo, GoodsUnitData goodsUnitData)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row == null) return;

            List<UnitPriceCalcRet> unitPriceCalcRetList = this.CalclationUnitPrice(row, goodsUnitData);

            if (unitPriceCalcRetList != null && unitPriceCalcRetList.Count > 0)
            {
                // 価格再設定
                _noneResettingListPriceFlag = true;
                _noneResettingUnitCostFlag = true;
                this.SalesDetailRowGoodsPriceSetting(ref row, goodsUnitData, false, unitPriceCalcRetList);
                _noneResettingListPriceFlag = false;
                _noneResettingUnitCostFlag = false;
            }

            //>>>2011/08/15
            // 売上金額計算処理
            this.CalculationSalesMoney(salesRowNo - 1);
            //<<<2011/08/15
        }
        // ADD 2011/08/15 -------------- <<<<<<<

        //---ADD 鄧潘ハン 2012/02/28 Redmine#27385------>>>>>
        /// <summary>
        /// キャンペーン価格変更時の処理（売上）
        /// </summary>
        /// <param name="salesRowNo">売上行№</param>
        /// <param name="goodsUnitData">価格対象</param>
        public void SettingSalesDetailGoodsCampaignPriceOnChange(int salesRowNo, GoodsUnitData goodsUnitData)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row == null) return;

            List<UnitPriceCalcRet> unitPriceCalcRetList = this.CalclationUnitPrice(row, goodsUnitData);

            List<UnitPriceCalcRet> tempunitPriceCalcRetList = new List<UnitPriceCalcRet>();
            foreach (UnitPriceCalcRet unitPriceCalcRet in unitPriceCalcRetList)
            {
                if (unitPriceCalcRet.UnitPriceKind == UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice)
                 {
                     tempunitPriceCalcRetList.Add(unitPriceCalcRet);
                 }
                 
            }
            unitPriceCalcRetList = tempunitPriceCalcRetList;
            
            if (unitPriceCalcRetList != null && unitPriceCalcRetList.Count > 0)
            {
                // 価格再設定
                _noneResettingListPriceFlag = true;
                _noneResettingUnitCostFlag = true;
                this.SalesDetailRowGoodsPriceSetting(ref row, goodsUnitData, false, unitPriceCalcRetList);
                _noneResettingListPriceFlag = false;
                _noneResettingUnitCostFlag = false;
            }

            // 売上金額計算処理
            this.CalculationSalesMoney(salesRowNo - 1);
        }
        //---ADD 鄧潘ハン 2012/02/28 Redmine#27385------<<<<<

        /// <summary>
        /// 受注数変更時の処理（受注）
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="beforeAcptAnOdrCnt">変更前受注数</param>
        public void SettingAcptAnOdrDetailRowShipmentCntOnChange(int salesRowNo, double beforeAcptAnOdrCnt)
        {
            # region [SettingAcptAnOdrDetailRowShipmentCntと同様]
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.SalesDetailAcceptAnOrderRow row = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            if (row == null) return;

            double shipmentCntRealValue = row.ShipmentCntDisplay;
            if (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) shipmentCntRealValue *= -1;

            //--------------------------------------------
            // 新規登録行
            //--------------------------------------------
            if (row.SalesSlipDtlNum == 0)
            {
                if ((this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp))
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                    row.AcptAnOdrAdjustCnt = 0;
                    row.AcptAnOdrRemainCnt = row.AcceptAnOrderCnt - shipmentCntRealValue;
                }
                else
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCntDisplay;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCntDisplay;
                    row.AcptAnOdrAdjustCnt = 0;
                    row.AcptAnOdrRemainCnt = row.AcceptAnOrderCntDisplay - shipmentCntRealValue;
                }
            }
            //--------------------------------------------
            // 既存修正行
            //--------------------------------------------
            else
            {
                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlip.AcptAnOdrStatus)
                {
                    case AcptAnOdrStatusState.AcceptAnOrder:
                        double acptAdjustCnt = row.AcceptAnOrderCntDisplay - row.AcceptAnOrderCnt;// 入力前との差分を計算
                        row.ShipmentCnt = shipmentCntRealValue;
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        row.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt + acptAdjustCnt;
                        row.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt + acptAdjustCnt;
                        break;
                    default:
                        break;
                }
            }

            // ----UPD 2011/07/20------->>>>>
            // 現在庫数調整
            if (this._salesSlipInputInitDataAcs.GetAllDefSet().DtlCalcStckCntDsp == 0)
            {
                //検索後反映
                if (!(string.IsNullOrEmpty(row.WarehouseCode.Trim())))
                {
                    this.AcptAnOdrDetailStockInfoAdjust();
                    this.SalesDetailStockInfoAdjust();
                }
            }
            else
            {
                //行移動時反映の場合、調整しない
                if (this._shipmentCntOnChange == true)
                {
                    this._shipmentCntOnChange = false;

                    // 現在庫数調整
                    if (!(string.IsNullOrEmpty(row.WarehouseCode.Trim())))
                    {
                        this.AcptAnOdrDetailStockInfoAdjust();
                        this.SalesDetailStockInfoAdjust();
                    }
                }
            }
            // ----UPD 2011/07/20-------<<<<<

            //// 掛率から単価を再計算
            //this.SalesDetailRowGoodsPriceSetting( ref row );
            # endregion

            # region [売単価のみ掛率に基づき再計算]
            //if ( row.SalesRate != 0 )
            {
                if (beforeAcptAnOdrCnt < 0) beforeAcptAnOdrCnt *= -1;

                // goodsUnitDataを取得
                SalesInputDataSet.SalesDetailRow wkRow = this._salesDetailDataTable.NewSalesDetailRow();
                this.CopySalesDetailFromAcceptAnOrder(row, wkRow); // 受注→売上
                GoodsUnitData goodsUnitData = this.GetGoodsUnitDataDic(row.GoodsMakerCd, row.GoodsNo, wkRow);

                // 売単価のみの単価取得リスト生成（ロット範囲が変わるものだけ対象にする）
                List<UnitPriceCalcRet> wkList = this.CalclationUnitPriceForAcptAnOdr(row, goodsUnitData);
                List<UnitPriceCalcRet> unitPriceCalcRetList = new List<UnitPriceCalcRet>(
                                        wkList.FindAll(
                                            delegate(UnitPriceCalcRet calcRet)
                                            {
                                                return (calcRet.UnitPriceKind == UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice &&
                                                     (beforeAcptAnOdrCnt < calcRet.LotSt || calcRet.LotEd < beforeAcptAnOdrCnt));
                                            }
                                        ));
                if (unitPriceCalcRetList != null && unitPriceCalcRetList.Count > 0)
                {
                    // 価格再設定
                    _noneResettingListPriceFlag = true;
                    _noneResettingUnitCostFlag = true;
                    this.SalesDetailRowGoodsPriceSetting(ref row, goodsUnitData, false, unitPriceCalcRetList);
                    _noneResettingListPriceFlag = false;
                    _noneResettingUnitCostFlag = false;
                }
            }
            # endregion
        }
        // --- ADD m.suzuki 2011/02/06 ----------<<<<<

        //>>>2010/06/10
        /// <summary>
        /// 売上明細行オブジェクトの数量を設定します。（受注情報のみ）
        /// </summary>
        /// <param name="salesRowNo"></param>
        public void SettingSalesDetailShipmentCntForAcpt(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row == null) return;

            double shipmentCntRealValue = row.ShipmentCntDisplay;
            if (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) shipmentCntRealValue *= -1;

            //--------------------------------------------
            // 新規登録行
            //--------------------------------------------
            if (row.SalesSlipDtlNum == 0)
            {
                if ((this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp))
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                    row.AcptAnOdrAdjustCnt = 0;
                    row.AcptAnOdrRemainCnt = row.AcceptAnOrderCnt - shipmentCntRealValue;
                }
                else
                {
                    row.ShipmentCnt = shipmentCntRealValue;
                    row.AcceptAnOrderCntDefault = row.AcceptAnOrderCntDisplay;
                    row.AcceptAnOrderCnt = row.AcceptAnOrderCntDisplay;
                    row.AcptAnOdrAdjustCnt = 0;
                    row.AcptAnOdrRemainCnt = 0;
                }
            }
            //--------------------------------------------
            // 既存修正行
            //--------------------------------------------
            else
            {
                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlip.AcptAnOdrStatus)
                {
                    case AcptAnOdrStatusState.Estimate:
                    case AcptAnOdrStatusState.UnitPriceEstimate:
                    case AcptAnOdrStatusState.Sales:
                    case AcptAnOdrStatusState.Shipment:
                        double shipmentAdjustCnt = shipmentCntRealValue - row.ShipmentCnt;// 入力前との差分を計算
                        row.ShipmentCnt = shipmentCntRealValue;
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        row.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt + shipmentAdjustCnt;
                        row.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt + shipmentAdjustCnt;
                        break;
                    case AcptAnOdrStatusState.AcceptAnOrder:
                        double acptAdjustCnt = row.AcceptAnOrderCntDisplay - row.AcceptAnOrderCnt;// 入力前との差分を計算
                        row.ShipmentCnt = shipmentCntRealValue;
                        row.AcceptAnOrderCntDefault = row.AcceptAnOrderCnt;
                        row.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        row.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt + acptAdjustCnt;
                        row.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt + acptAdjustCnt;
                        break;
                }
            }

            // ----UPD 2011/11/02------->>>>>
            //// 現在庫数調整
            //if (!(string.IsNullOrEmpty(row.WarehouseCode.Trim()))) this.SalesDetailStockInfoAdjust();

            // 現在庫数調整
            if (this._salesSlipInputInitDataAcs.GetAllDefSet().DtlCalcStckCntDsp == 0)
            {
                //検索後反映
                if (!(string.IsNullOrEmpty(row.WarehouseCode.Trim()))) this.SalesDetailStockInfoAdjust();
            }
            else
            {
                //行移動時反映の場合、調整しない
            }
            // ----UPD 2011/11/02-------<<<<<

        }
        //<<<2010/06/10

        /// <summary>
        /// 売上明細行オブジェクトの出荷数、受注数を設定します。
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <br>Update Note: 2010/01/27 張凱 受注数の入力制御を行う対応</br>
        /// <br>Update Note: 2011/10/26   鄧潘ハン Redmine#26224</br>
        /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
        /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
        /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
        /// <br>Update Note: 2011/11/02   yangmj Redmine#26224</br>
        public void SettingSalesDetailRowInputOrderCnt(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);

            double acceptAnOdrCnt = salesDetailRow.AcceptAnOrderCntDisplay;
            double shipmentCnt = salesDetailRow.ShipmentCntDisplay;
            double orderCnt = salesDetailRow.AcceptAnOrderCntForOrder;
            double addUpEnableCnt = salesDetailRow.AddUpEnableCnt;

            if (salesDetailRow.EditStatus != ctEDITSTATUS_AddUpNew)
            {
                if (this._salesSlip.SalesSlipNum != ctDefaultSalesSlipNum)
                {
                    if (orderCnt != 0)
                    {
                        //>>>2011/11/11
                        //salesDetailRow.AcceptAnOrderCntDisplay = shipmentCnt + orderCnt;
                        if (salesDetailRow.BoCode == ctDefaultBoCode)
                        {
                            salesDetailRow.AcceptAnOrderCntDisplay = 0;
                        }
                        else
                        {
                            salesDetailRow.AcceptAnOrderCntDisplay = shipmentCnt + orderCnt;
                        }
                        //<<<2011/11/11
                    }
                    //-----UPD 2011/11/01 ----->>>>>
                    else
                    {
                        //salesDetailRow.AcceptAnOrderCntDisplay = 0;
                        salesDetailRow.ShipmentCntDisplay = acceptAnOdrCnt;
                    }
                    //-----UPD 2011/11/01 -----<<<<<
                }
                else
                {
                    if (acceptAnOdrCnt == 0)
                    {
                        //>>>2011/11/11
                        //salesDetailRow.AcceptAnOrderCntDisplay = shipmentCnt + orderCnt;
                        if (salesDetailRow.BoCode == ctDefaultBoCode)
                        {
                            salesDetailRow.AcceptAnOrderCntDisplay = 0;
                        }
                        else
                        {
                            salesDetailRow.AcceptAnOrderCntDisplay = shipmentCnt + orderCnt;
                        }
                        //<<<2011/11/11
                        // --- ADD 2013/02/26 Y.Wakita ---------->>>>>
                        if (this._salesSlip.EstimateDivide == (int)SalesSlipInputAcs.EstimateDivide.UnitPriceEstimate)
                        {
                            salesDetailRow.AddUpEnableCnt = salesDetailRow.AcceptAnOrderCntDisplay;
                        }
                        // --- ADD 2013/02/26 Y.Wakita ----------<<<<<
                    }
                    else
                    {
                        //---DEL 2011/11/01 -------------------------->>>>>
                        //---ADD 2011/10/26 -------------------------->>>>>
                        //if (shipmentCnt == 0)
                        //{
                        //    salesDetailRow.AcceptAnOrderCntDisplay = orderCnt;
                        //}
                        //else if (acceptAnOdrCnt - orderCnt - shipmentCnt < 0)
                        //---ADD 2011/10/26 --------------------------<<<<<
                        //if (acceptAnOdrCnt - orderCnt - shipmentCnt < 0) // DEL 2011/10/26
                        //---DEL 2011/11/01 --------------------------<<<<<
                        //---DEL 2011/11/02 -------------------------->>>>>
                        //if (acceptAnOdrCnt - orderCnt - shipmentCnt < 0) // ADD 2011/11/01
                        //{
                        //    salesDetailRow.AcceptAnOrderCntDisplay = orderCnt;
                        //    salesDetailRow.ShipmentCntDisplay = 0;
                        //}
                        //else
                        //{
                        //salesDetailRow.ShipmentCntDisplay = acceptAnOdrCnt - orderCnt;
                        //}
                        //---DEL 2011/11/02 --------------------------<<<<<
                        salesDetailRow.ShipmentCntDisplay = acceptAnOdrCnt - orderCnt;//ADD 2011/11/02
                    }

                    // --- ADD 2010/01/27 -------------->>>>>
                    if (orderCnt == 0)
                    {
                        //-----UPD 2011/11/01 ----->>>>>
                        //salesDetailRow.AcceptAnOrderCntDisplay = 0;
                        //salesDetailRow.ShipmentCntDisplay = 0;
                        salesDetailRow.ShipmentCntDisplay = acceptAnOdrCnt;
                        //-----UPD 2011/11/01 -----<<<<<
                    }
                    // --- ADD 2010/01/27 --------------<<<<<
                }
            }
            else
            {
                //salesDetailRow.ShipmentCntDisplay = addUpEnableCnt - orderCnt;
                //salesDetailRow.AcceptAnOrderCntDisplay = addUpEnableCnt;

                // --- DEL 2013/02/08 Y.Wakita ---------->>>>>
                //if ((addUpEnableCnt - orderCnt) < shipmentCnt)
                //{
                // --- DEL 2013/02/08 Y.Wakita ----------<<<<<
                    salesDetailRow.ShipmentCntDisplay = addUpEnableCnt - orderCnt;
                    salesDetailRow.AcceptAnOrderCntDisplay = addUpEnableCnt;
                // --- DEL 2013/02/08 Y.Wakita ---------->>>>>
                //}
                //else
                //{
                //    salesDetailRow.AcceptAnOrderCntDisplay = orderCnt + shipmentCnt;
                //}
                // --- DEL 2013/02/08 Y.Wakita ----------<<<<<

                //if (acceptAnOdrCnt == 0)
                //{
                //    salesDetailRow.ShipmentCntDisplay = remainCnt - orderCnt;
                //    salesDetailRow.AcceptAnOrderCntDisplay = orderCnt;
                //}
                //else
                //{
                //    if (acceptAnOdrCnt - orderCnt - shipmentCnt < 0)
                //    {
                //        salesDetailRow.ShipmentCntDisplay = remainCnt - orderCnt;
                //        salesDetailRow.AcceptAnOrderCntDisplay = orderCnt;
                //    }
                //    else
                //    {
                //        salesDetailRow.ShipmentCntDisplay = acceptAnOdrCnt - orderCnt;
                //    }
                //}
            }
        }

        /// <summary>
        /// 受注ステータス、計上元情報から、表示している現在庫数が、在庫マスタ上の現在庫数と変わるかチェックします。
        /// </summary>
        /// <param name="stockDetailRow"></param>
        /// <returns></returns>
        /// <br>Update Note: K2011/12/22 鄧潘ハン</br>
        /// <br>管理番号   ：10707327-00 2012/01/25配信分NAC個別対応</br>
        /// <br>             Redmine#27446   PMSF連携／PCCforNS BLﾊﾟｰﾂｵｰﾀﾞｰ 障害対応の修正</br>
        public bool SupplierStockCountChangeCheck(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            bool ret = true;

            // 値引きデータは反映させない
            if (salesDetailRow.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Discount)
            {
                ret = false;
            }
            // 見積、単価見積もりは反映させない
            else if ((this._salesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                     (this._salesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate))
            {
                ret = false;
            }
            // 計上元の明細が無い場合は単純に数量を反映させる（新規売上(返品含む)、新規出荷(返品含む))
            else if ((salesDetailRow.SalesSlipDtlNumSrc == 0) ||
                     (string.IsNullOrEmpty(salesDetailRow.WarehouseCode.Trim())) ||
                //(this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_EstimateAddUp)) //DEL 2011/12/22 鄧潘ハン REDMINE#27446
                //---ADD  2011/12/22 鄧潘ハン REDMINE#27446 ------------------------->>>>>
                     (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                     (_scmHeaderIListSvForWebCheck != null && _scmHeaderIListSvForWebCheck.Count > 0 && _scmHeaderIListSvForWebCheck[0].InqOrdDivCd != 0))
            //---ADD  2011/12/22 鄧潘ハン REDMINE#27446 -------------------------<<<<<
            {
                ret = true;
            }
            else
            {
                SalesInputDataSet.AddUpSrcDetailRow addUpSrcDetailRow = this.GetAddUpSrcDataRow(salesDetailRow);

                if (addUpSrcDetailRow != null)
                {
                    // 受注ステータスが計上元明細と同じ場合(元伝有りの返品、赤伝)
                    if (this._salesSlip.AcptAnOdrStatus == addUpSrcDetailRow.AcptAnOdrStatus)
                    {
                        // 出荷、受注計上に対する赤伝、返品は、在庫数は在庫から取得した値のまま
                        if ((addUpSrcDetailRow.SalesSlipDtlNumSrc != 0) &&
                            ((addUpSrcDetailRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment) ||
                             (addUpSrcDetailRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder) ||
                             (addUpSrcDetailRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                             (addUpSrcDetailRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate)))
                        {
                            ret = false;
                        }
                    }
                    // 計上、引当の場合
                    else
                    {
                        // 出荷、受注計上の場合、在庫数は在庫から取得した値のまま
                        if ((addUpSrcDetailRow.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment) ||
                            (addUpSrcDetailRow.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder) ||
                            (addUpSrcDetailRow.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                            (addUpSrcDetailRow.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate))
                        {
                            ret = false;
                        }
                    }
                }
                else
                {
                    if ((this._salesSlip.InputMode != ctINPUTMODE_SalesSlip_Red) && // 赤伝
                        (this._salesSlip.InputMode != ctINPUTMODE_SalesSlip_Return)) // 返品
                    {
                        ret = false;
                    }
                }
            }

            return ret;
        }

        /// <summary>
        /// 受注ステータス、計上元情報から、表示している現在庫数が、在庫マスタ上の現在庫数と変わるかチェックします。
        /// </summary>
        /// <param name="stockDetailRow"></param>
        /// <returns></returns>
        public bool SupplierStockCountChangeCheck(SalesInputDataSet.SalesDetailAcceptAnOrderRow row)
        {
            SalesInputDataSet.SalesDetailRow newSalesDetailRow = this._salesDetailDataTable.NewSalesDetailRow();

            this.CopySalesDetailFromAcceptAnOrder(row, newSalesDetailRow);
            bool ret = this.SupplierStockCountChangeCheck(newSalesDetailRow);
            this.CopyAcceptAnOrderFromSalesDetail(newSalesDetailRow, row);
            return ret;
        }

        /// <summary>
        /// 売上明細行オブジェクトの計上可能数量の値を設定します。
        /// </summary>
        /// <br>Update Note: 2010/03/16 張凱 返品伝票を修正呼出した場合、返品可能数へ返品上限数を反映させる。</br>
        public void SettingSalesDetailAddUpEnableCount()
        {

            // 出荷数(表示用) 受注数(表示用)
            if (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_Normal)
            {
                foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable.Rows)
                {
                    switch ((AcptAnOdrStatusState)this._salesSlip.AcptAnOdrStatus)
                    {
                        case AcptAnOdrStatusState.Estimate:
                        case AcptAnOdrStatusState.UnitPriceEstimate:
                        case AcptAnOdrStatusState.Sales:
                        case AcptAnOdrStatusState.Shipment:
                            row.AcceptAnOrderCntDisplay = 0;
                            break;
                        case AcptAnOdrStatusState.AcceptAnOrder:
                            row.ShipmentCntDisplay = 0;
                            break;
                    }
                }
            }

            // 赤伝区分(0:黒伝 1:赤伝 2:元黒)
            if (this._salesSlip.DebitNoteDiv != 0) return;

            // --- ADD 2010/03/16 -------------->>>>>
            string salesSlipDtlNumSrc = string.Empty;
            //返品上限数マスタリスト
            ArrayList returnUpperStList;
            //返品上限数マスタ
            GoodsNotReturnWork returnUpperSt;
            //返品上限数マスタリスト取得
            if (this._addUpSrcDetailDataTable.Rows.Count > 0)
            {
                salesSlipDtlNumSrc = ((SalesInputDataSet.AddUpSrcDetailRow)this._addUpSrcDetailDataTable.Rows[0]).SalesSlipNum.ToString();
            }

            GetReturnUpperStList(this._enterpriseCode, salesSlipDtlNumSrc, out returnUpperStList);
            // --- ADD 2010/03/16 --------------<<<<<

            SalesInputDataSet.AddUpSrcDetailRow addUpSrcDetailRow;
            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable.Rows)
            {
                switch ((SalesSlipInputAcs.AcptAnOdrStatusState)row.AcptAnOdrStatus)
                {
                    case AcptAnOdrStatusState.Estimate:
                    case AcptAnOdrStatusState.UnitPriceEstimate:
                    case AcptAnOdrStatusState.Sales:
                    case AcptAnOdrStatusState.Shipment:
                        // 計上済数量
                        row.AlreadyAddUpCnt = (row.ShipmentCnt) - (row.AcptAnOdrRemainCnt); // 計上済数量 = 出荷数 - 受注残数

                        // 明細通番チェック
                        if (row.SalesSlipDtlNumSrc == 0) continue;

                        addUpSrcDetailRow = this.GetAddUpSrcDataRow(row);

                        // 計上元データ有無チェック
                        if (addUpSrcDetailRow != null)
                        {
                            row.AddUpEnableCnt = Math.Abs(row.ShipmentCnt) + addUpSrcDetailRow.AcptAnOdrRemainCnt;	// 計上可能数量 = 明細の出荷数(絶対値) + 計上元の受注残数
                        }
                        else
                        {
                            row.AddUpEnableCnt = Math.Abs(row.ShipmentCnt);										// 計上可能数量 = 明細の出荷数(絶対値)
                        }
                        break;
                    case AcptAnOdrStatusState.AcceptAnOrder:
                        // 計上済数量
                        row.AlreadyAddUpCnt = (row.AcceptAnOrderCntDisplay) - (row.AcptAnOdrRemainCnt); // 計上済数量 = 出荷数 - 受注残数

                        // 明細通番チェック
                        if (row.SalesSlipDtlNumSrc == 0) continue;

                        addUpSrcDetailRow = this.GetAddUpSrcDataRow(row);

                        // 計上元データ有無チェック
                        if (addUpSrcDetailRow != null)
                        {
                            row.AddUpEnableCnt = Math.Abs(row.AcceptAnOrderCntDisplay) + addUpSrcDetailRow.AcptAnOdrRemainCnt;	// 計上可能数量 = 明細の出荷数(絶対値) + 計上元の受注残数
                        }
                        else
                        {
                            row.AddUpEnableCnt = Math.Abs(row.AcceptAnOrderCntDisplay);										// 計上可能数量 = 明細の受注数(絶対値)
                        }
                        break;
                }

                // --- ADD 2010/03/16 -------------->>>>>
                //返品上限数マスタ
                GetReturnUpperSt(row.SalesSlipDtlNumSrc, returnUpperStList, out returnUpperSt);

                //売上明細情報.SalesSlipCdDtl = 1:返品
                if (row.SalesSlipCdDtl == 1)
                {
                    if (returnUpperSt != null && returnUpperSt.UpdateDateTime != DateTime.MinValue)
                    {
                        if (row.AddUpEnableCnt > returnUpperSt.RetUpperCnt)
                        {
                            row.AddUpEnableCnt = returnUpperSt.RetUpperCnt;
                        }
                    }
                }
                // --- ADD 2010/03/16 --------------<<<<<
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトの課税区分を設定します。
        /// </summary>
        /// <param name="consTaxLayMethod"></param>
        /// <param name="totalAmountDispWayCd"></param>
        public void SettingSalesDetailTaxationCode(int consTaxLayMethod, int totalAmountDispWayCd)
        {
            for (int i = 0; i < this._salesDetailDataTable.Rows.Count; i++)
            {
                SalesInputDataSet.SalesDetailRow row = (SalesInputDataSet.SalesDetailRow)this._salesDetailDataTable.Rows[i];

                // 行値引き分の課税区分を補正
                if ((row.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount) && (row.ShipmentCntDisplay == 0))
                {
                    // 非課税の仕入先は値引きも非課税にする
                    if (consTaxLayMethod == (int)ConsTaxLayMethod.TaxExempt)
                    {
                        row.TaxationDivCd = (int)CalculateTax.TaxationCode.TaxNone;
                    }
                    else
                    {
                        // 総額表示しない場合は外税、総額表示する場合は内税
                        row.TaxationDivCd = (totalAmountDispWayCd == (int)TotalAmountDispWayCd.NoTotalAmount) ? (int)CalculateTax.TaxationCode.TaxExc : (int)CalculateTax.TaxationCode.TaxInc;
                    }
                }

                if (row.TaxationDivCd == (int)CalculateTax.TaxationCode.TaxNone)
                {
                    row.TaxDiv = 1;
                }
                else
                {
                    row.TaxDiv = 0;
                }


                if (consTaxLayMethod == (int)ConsTaxLayMethod.TaxExempt)
                {
                    row.SalesUnPrcDisplay = row.SalesUnPrcTaxExcFl;
                    row.SalesUnitCost = row.SalesUnitCostTaxExc;
                    row.ListPriceDisplay = row.ListPriceTaxExcFl;
                    row.SalesMoneyDisplay = row.SalesMoneyTaxExc;
                }
                else if (totalAmountDispWayCd == (int)TotalAmountDispWayCd.NoTotalAmount)
                {
                    //----------------------------------------
                    // 0:総額表示しない
                    //----------------------------------------
                    switch (row.TaxationDivCd)
                    {
                        case (int)CalculateTax.TaxationCode.TaxExc:
                        case (int)CalculateTax.TaxationCode.TaxNone:
                            {
                                row.SalesUnPrcDisplay = row.SalesUnPrcTaxExcFl;
                                row.SalesUnitCost = row.SalesUnitCostTaxExc;
                                row.ListPriceDisplay = row.ListPriceTaxExcFl;
                                row.SalesMoneyDisplay = row.SalesMoneyTaxExc;
                                break;
                            }
                        case (int)CalculateTax.TaxationCode.TaxInc:
                            {
                                row.SalesUnPrcDisplay = row.SalesUnPrcTaxIncFl;
                                row.SalesUnitCost = row.SalesUnitCostTaxInc;
                                row.ListPriceDisplay = row.ListPriceTaxIncFl;
                                row.SalesMoneyDisplay = row.SalesMoneyTaxInc;
                                break;
                            }
                    }
                }
                else
                {
                    //----------------------------------------
                    // 1:総額表示する
                    //----------------------------------------
                    row.SalesUnPrcDisplay = row.SalesUnPrcTaxIncFl;
                    row.SalesUnitCost = row.SalesUnitCostTaxInc;
                    row.ListPriceDisplay = row.ListPriceTaxIncFl;
                    row.SalesMoneyDisplay = row.SalesMoneyTaxInc;
                }
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトの得意先掛率グループコードを設定します。
        /// </summary>
        public void SettingSalesDetailCustRateGrpCode()
        {
            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if (row.GoodsMakerCd == 0) continue;

                row.CustRateGrpCode = this.GetCustRateGroupCode(row.GoodsMakerCd);
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトの明細得意先注番に伝票得意先注番を設定します。
        /// </summary>
        /// <param name="salesSlip"></param>
        public void SettingSalesDetailRowPartySaleSlipNum(SalesSlip salesSlip)
        {
            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if (this.ExistSalesDetail(row.SalesRowNo) == true) this.SettingSalesDetailRowPartySaleSlipNum(row, salesSlip);
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトの明細得意先注番に伝票得意先注番を設定します。
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="salesSlip"></param>
        public void SettingSalesDetailRowPartySaleSlipNum(SalesInputDataSet.SalesDetailRow row, SalesSlip salesSlip)
        {
            row.PartySlipNumDtl = salesSlip.PartySaleSlipNum;

            DataRow[] dataRows = row.GetChildRows("SalesDetail_SalesDetailAcceptAnOrder");
            if ((dataRows != null) && (dataRows.Length > 0))
            {
                foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow acptAnOrderRow in dataRows)
                {
                    acptAnOrderRow.PartySlipNumDtl = SalesSlip.PartySaleSlipNum;
                    break;
                }
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトの販売区分情報を設定します。
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="code"></param>
        /// <param name="name"></param>
        public void SettingSalesDetailRowSalesCodeInfo(int salesRowNo, int code, string name)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (row != null)
            {
                row.SalesCode = code;
                row.SalesCdNm = name;
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトの行ステータスに値を設定します。
        /// </summary>
        /// <param name="salesRowNoList">仕入明細行番号リスト</param>
        /// <param name="rowStatus">RowStatus値</param>
        public void SettingSalesDetailRowStatus(List<int> salesRowNoList, int rowStatus)
        {
            this._salesDetailDataTable.BeginLoadData();
            foreach (int salesRowNo in salesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
                if (string.IsNullOrEmpty(row.GoodsName)) continue;

                row.RowStatus = rowStatus;
            }
            this._salesDetailDataTable.EndLoadData();

        }

        /// <summary>
        /// 売上明細行オブジェクトの売仕入同時情報を設定します。
        /// </summary>
        public void SettingSalesDetailRowStockTempInfo()
        {
            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                // --- UPD 2012/10/04 Y.Wakita ---------->>>>>
                //this.SettingSalesDetailRowStockTempInfo(row);
                this.SettingSalesDetailRowStockTempInfo(row, false);
                // --- UPD 2012/10/04 Y.Wakita ----------<<<<<
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトの売仕入同時情報を設定します。
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="copyFlag"></param>
        // --- UPD 2012/10/04 Y.Wakita ---------->>>>>
        //public void SettingSalesDetailRowStockTempInfo(int salesRowNo)
        public void SettingSalesDetailRowStockTempInfo(int salesRowNo, bool copyFlag)
        // --- UPD 2012/10/04 Y.Wakita ----------<<<<<
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            // --- UPD 2012/10/04 Y.Wakita ---------->>>>>
            //this.SettingSalesDetailRowStockTempInfo(salesDetailRow);
            this.SettingSalesDetailRowStockTempInfo(salesDetailRow, copyFlag);
            // --- UPD 2012/10/04 Y.Wakita ----------<<<<<
        }

        /// <summary>
        /// 売上明細行オブジェクトの売仕入同時情報を設定します。
        /// </summary>
        /// <param name="row"></param>
        /// <param name="copyFlag"></param>
        // --- UPD 2012/10/04 Y.Wakita ---------->>>>>
        //private void SettingSalesDetailRowStockTempInfo(SalesInputDataSet.SalesDetailRow row)
        private void SettingSalesDetailRowStockTempInfo(SalesInputDataSet.SalesDetailRow row, bool copyFlag)
        // --- UPD 2012/10/04 Y.Wakita ----------<<<<<
        {
            SalesInputDataSet.StockTempRow stockTempRow = this._stockTempDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);
            if (stockTempRow != null)
            {
                // --- ADD 2012/09/11 Y.Wakita ---------->>>>>
                if (stockTempRow.SupplierCd != 0) row.SupplierCd = stockTempRow.SupplierCd; // 仕入先コード
                if (stockTempRow.SupplierSnm != string.Empty) row.SupplierSnm = stockTempRow.SupplierSnm; // 仕入先略称
                // --- ADD 2012/09/11 Y.Wakita ----------<<<<<
                if (stockTempRow.SupplierCd != 0) row.SupplierCdForStock = stockTempRow.SupplierCd; // 仕入先コード
                if (stockTempRow.StockDate != DateTime.MinValue) row.StockDate = stockTempRow.StockDate; // 仕入日
                row.PartySalesSlipNum = stockTempRow.PartySaleSlipNum;  // 仕入伝票番号
                // --- ADD 2012/10/04 Y.Wakita ---------->>>>>
                if (copyFlag == true && _salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.Shipment)
                {
                    row.RentSyncSupplier = row.SupplierCdForStock;  // 仕入先コード
                    row.RentSyncStockDate = row.StockDate;          // 仕入日
                    row.RentSyncSupSlipNo = row.PartySalesSlipNum;  // 仕入伝票番号
                }
                // --- ADD 2012/10/04 Y.Wakita ----------<<<<<
            }
            else
            {
                row.SupplierCdForStock = row.SupplierCd;       // 仕入先コード
                row.StockDate = this._salesSlip.SalesDate;     // 仕入日
                row.PartySalesSlipNum = string.Empty;          // 仕入伝票番号
            }
            //>>>2012/05/16
            if (_salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.Shipment)
            {
                row.SupplierCdForStock = row.RentSyncSupplier;       // 仕入先コード
                row.StockDate = row.RentSyncStockDate;     // 仕入日
                row.PartySalesSlipNum = row.RentSyncSupSlipNo;          // 仕入伝票番号
            }
            //<<<2012/05/16
        }

        /// <summary>
        /// 売上明細行オブジェクトの発注情報を設定します。
        /// </summary>
        public void SettingSalesDetailRowUOEOrderDtl()
        {
            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this._salesDetailDataTable)
            {
                this.SettingSalesDetailRowUOEOrderDtl(salesDetailRow);
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトの発注情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingSalesDetailRowUOEOrderDtl(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            this.SettingSalesDetailRowUOEOrderDtl(salesDetailRow);
        }

        /// <summary>
        /// 売上明細行オブジェクトの発注情報を設定します。
        /// </summary>
        /// <param name="salesDetailRow"></param>
        private void SettingSalesDetailRowUOEOrderDtl(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            if (uoeOrderDtlRow != null)
            {
                salesDetailRow.BoCode = uoeOrderDtlRow.BoCode;
                salesDetailRow.SupplierCdForOrder = uoeOrderDtlRow.UOESupplierCd;
                salesDetailRow.SupplierSnmForOrder = uoeOrderDtlRow.UOESupplierName;
                salesDetailRow.AcceptAnOrderCntForOrder = uoeOrderDtlRow.AcceptAnOrderCnt;
                salesDetailRow.UOEDeliGoodsDiv = uoeOrderDtlRow.UOEDeliGoodsDiv;
                salesDetailRow.DeliveredGoodsDivNm = uoeOrderDtlRow.DeliveredGoodsDivNm;
                salesDetailRow.DeliveredGoodsDivNmSave = uoeOrderDtlRow.DeliveredGoodsDivNm;
                salesDetailRow.FollowDeliGoodsDiv = uoeOrderDtlRow.FollowDeliGoodsDiv;
                salesDetailRow.FollowDeliGoodsDivNm = uoeOrderDtlRow.FollowDeliGoodsDivNm;
                salesDetailRow.FollowDeliGoodsDivNmSave = uoeOrderDtlRow.FollowDeliGoodsDivNm;
                salesDetailRow.UOEResvdSection = uoeOrderDtlRow.UOEResvdSection;
                salesDetailRow.UOEResvdSectionNm = uoeOrderDtlRow.UOEResvdSectionNm;
                salesDetailRow.UOEResvdSectionNmSave = uoeOrderDtlRow.UOEResvdSectionNm;
            }
            else
            {
                // 発注先情報設定(発注情報)
                UOESupplier uoeSupplier;
                //>>>2010/07/01
                //int st = this._uoeSupplierAcs.Read(out uoeSupplier, this._enterpriseCode, salesDetailRow.SupplierCd, this._salesSlip.SectionCode);
                int st = this._uoeSupplierAcs.ReadCache(out uoeSupplier, this._enterpriseCode, salesDetailRow.SupplierCd, this._salesSlip.SectionCode);
                //<<<2010/07/01
                if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    salesDetailRow.SupplierCdForOrder = uoeSupplier.UOESupplierCd;
                    salesDetailRow.SupplierSnmForOrder = uoeSupplier.UOESupplierName;
                    // ADD 2015/08/07 陳艶丹 For Redmine #47021---------------------->>>>>>
                    salesDetailRow.BoCode = uoeSupplier.BoCode; 										// BO区分
                    salesDetailRow.UOEDeliGoodsDiv = uoeSupplier.UOEDeliGoodsDiv; 						// 納品区分
                    salesDetailRow.UOEResvdSection = uoeSupplier.UOEResvdSection; 						// 指定拠点
                    // ADD 2015/08/07 陳艶丹 For Redmine #47021----------------------<<<<<<
                }
                else
                {
                    salesDetailRow.SupplierCdForOrder = 0;
                    salesDetailRow.SupplierSnmForOrder = string.Empty;
                    // ADD 2015/08/07 陳艶丹 For Redmine #47021---------------------->>>>>>
                    salesDetailRow.BoCode = ctDefaultBoCode;                                    // BO区分
                    salesDetailRow.UOEDeliGoodsDiv = string.Empty;                              // 納品区分
                    salesDetailRow.UOEResvdSection = string.Empty;                              // 指定拠点
                    // ADD 2015/08/07 陳艶丹 For Redmine #47021----------------------<<<<<<
                }
                // キャッシュされていない場合は、初期値設定
                //salesDetailRow.BoCode = ctDefaultBoCode;// DEL 2015/08/07 陳艶丹 For Redmine #47021
                salesDetailRow.AcceptAnOrderCntForOrder = 0;
                //salesDetailRow.UOEDeliGoodsDiv = string.Empty;// DEL 2015/08/07 陳艶丹 For Redmine #47021
                salesDetailRow.DeliveredGoodsDivNm = string.Empty;
                salesDetailRow.DeliveredGoodsDivNmSave = string.Empty;
                salesDetailRow.FollowDeliGoodsDiv = string.Empty;
                salesDetailRow.FollowDeliGoodsDivNm = string.Empty;
                salesDetailRow.FollowDeliGoodsDivNmSave = string.Empty;
                //salesDetailRow.UOEResvdSection = string.Empty;// DEL 2015/08/07 陳艶丹 For Redmine #47021
                salesDetailRow.UOEResvdSectionNm = string.Empty;
                salesDetailRow.UOEResvdSectionNmSave = string.Empty;
            }
        }

        //>>>2011/03/08
        /// <summary>
        /// 受注明細行オブジェクトのSCM受注明細情報を設定します。
        /// </summary>
        public void SettingAcptAnOdrDetailRowSCMAcOdrDtlAs()
        {
            foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow salesDetailRow in this._salesDetailAcceptAnOrderDataTable)
            {
                this.SettingAcptAnOdrDetailRowSCMAcOdrDtlAs(salesDetailRow);
            }
        }

        /// <summary>
        /// 受注明細行オブジェクトのSCM受注明細情報を設定します。
        /// </summary>
        /// <param name="salesDetailRow"></param>
        private void SettingAcptAnOdrDetailRowSCMAcOdrDtlAs(SalesInputDataSet.SalesDetailAcceptAnOrderRow salesDetailRow)
        {
            ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow = null;
            ScmDataSet.SCMAcOdrDtlAsRow[] asRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} and {2}={3}",
                this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesDetailRow.SalesSlipNum,
                this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, salesDetailRow.SalesRowNo));

            if ((asRows != null) && (asRows.Length != 0)) scmAcOdrDtlAsRow = asRows[0];

            if (scmAcOdrDtlAsRow != null)
            {
                salesDetailRow.GoodsMngNo = scmAcOdrDtlAsRow.GoodsMngNo;
                salesDetailRow.InqRowNumber = scmAcOdrDtlAsRow.InqRowNumber;
                salesDetailRow.InqRowNumDerivedNo = scmAcOdrDtlAsRow.InqRowNumDerivedNo;
            }
            else
            {
                salesDetailRow.GoodsMngNo = 0;
                salesDetailRow.InqRowNumber = 0;
                salesDetailRow.InqRowNumDerivedNo = 0;
            }
        }
        //<<<2011/03/08

        //>>>2011/02/01 PS管理番号保持対応
        /// <summary>
        /// 売上明細行オブジェクトのSCM受注明細情報を設定します。
        /// </summary>
        public void SettingSalesDetailRowSCMAcOdrDtlAs()
        {
            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this._salesDetailDataTable)
            {
                this.SettingSalesDetailRowSCMAcOdrDtlAs(salesDetailRow);
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトのSCM受注明細情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        public void SettingSalesDetailRowSCMAcOdrDtlAs(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            this.SettingSalesDetailRowSCMAcOdrDtlAs(salesDetailRow);
        }

        /// <summary>
        /// 売上明細行オブジェクトのSCM受注明細情報を設定します。
        /// </summary>
        /// <param name="salesDetailRow"></param>
        private void SettingSalesDetailRowSCMAcOdrDtlAs(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            //>>>2011/03/05
            //ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow = this._scmAcOdrDtlAsDataTable.FindBySalesSlipNumSalesRowNo(salesDetailRow.SalesSlipNum, salesDetailRow.SalesRowNo);

            ScmDataSet.SCMAcOdrDtlAsRow scmAcOdrDtlAsRow = null;
            ScmDataSet.SCMAcOdrDtlAsRow[] asRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} and {2}={3}",
                this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, salesDetailRow.SalesSlipNum,
                this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, salesDetailRow.SalesRowNo));

            if ((asRows != null) && (asRows.Length != 0)) scmAcOdrDtlAsRow = asRows[0];
            //<<<2011/03/05

            if (scmAcOdrDtlAsRow != null)
            {
                salesDetailRow.GoodsMngNo = scmAcOdrDtlAsRow.GoodsMngNo;
                //>>>2011/03/05
                salesDetailRow.InqRowNumber = scmAcOdrDtlAsRow.InqRowNumber;
                salesDetailRow.InqRowNumDerivedNo = scmAcOdrDtlAsRow.InqRowNumDerivedNo;
                //<<<2011/03/05
            }
            else
            {
                salesDetailRow.GoodsMngNo = 0;
                //>>>2011/03/05
                salesDetailRow.InqRowNumber = 0;
                salesDetailRow.InqRowNumDerivedNo = 0;
                //<<<2011/03/05
            }
        }
        //<<<2011/02/01 PS管理番号保持対応

        /// <summary>
        /// 売上明細行オブジェクトの納品区分名称を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <remarks>ガイド選択後セット専用</remarks>
        public void SettingSalesDetailRowDeliveredGoodsDivNm(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            this.SettingSalesDetailRowDeliveredGoodsDivNm(salesDetailRow);
        }

        /// <summary>
        /// 売上明細行オブジェクトの納品区分名称を設定します。
        /// </summary>
        /// <param name="salesDetailRow"></param>
        /// <remarks>ガイド選択後セット専用</remarks>
        private void SettingSalesDetailRowDeliveredGoodsDivNm(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            if (uoeOrderDtlRow != null)
            {
                salesDetailRow.DeliveredGoodsDivNm = uoeOrderDtlRow.UOEDeliGoodsDiv;
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトのH納品区分名称を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <remarks>ガイド選択後セット専用</remarks>
        public void SettingSalesDetailRowFollowDeliGoodsDivNm(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            this.SettingSalesDetailRowFollowDeliGoodsDivNm(salesDetailRow);
        }

        /// <summary>
        /// 売上明細行オブジェクトのH納品区分名称を設定します。
        /// </summary>
        /// <param name="salesDetailRow"></param>
        /// <remarks>ガイド選択後セット専用</remarks>
        private void SettingSalesDetailRowFollowDeliGoodsDivNm(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            if (uoeOrderDtlRow != null)
            {
                salesDetailRow.FollowDeliGoodsDivNm = uoeOrderDtlRow.FollowDeliGoodsDiv;
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトの指定拠点を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <remarks>ガイド選択後セット専用</remarks>
        public void SettingSalesDetailRowUOEResvdSectionNm(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            this.SettingSalesDetailRowUOEResvdSectionNm(salesDetailRow);
        }

        /// <summary>
        /// 売上明細行オブジェクトの指定拠点を設定します。
        /// </summary>
        /// <param name="salesDetailRow"></param>
        /// <remarks>ガイド選択後セット専用</remarks>
        private void SettingSalesDetailRowUOEResvdSectionNm(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            SalesInputDataSet.UOEOrderDtlRow uoeOrderDtlRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
            if (uoeOrderDtlRow != null)
            {
                salesDetailRow.UOEResvdSectionNm = uoeOrderDtlRow.UOEResvdSection;
            }
        }
        #endregion

        /// <summary>
        /// 売上明細データテーブルの売上行番号を初期化（再採番）します。
        /// </summary>
        public void InitializeSalesDetailStockRowNoColumn()
        {
            this._salesDetailDataTable.BeginLoadData();
            for (int i = 0; i < this._salesDetailDataTable.Rows.Count; i++)
            {
                this._salesDetailDataTable[i].SalesRowNo = i + 1;
            }
            this._salesDetailDataTable.EndLoadData();
        }

        /// <summary>
        /// 指定した売上明細データテーブルの売上行番号を初期化（再採番）します。
        /// </summary>
        public void InitializeSalesDetailStockRowNoColumn(SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            salesDetailDataTable.BeginLoadData();
            for (int i = 0; i < salesDetailDataTable.Rows.Count; i++)
            {
                salesDetailDataTable[i].SalesRowNo = i + 1;
            }
            salesDetailDataTable.EndLoadData();
        }

        /// <summary>
        /// 売上明細データテーブルの行ステータス列の値を初期化します。
        /// </summary>
        public void InitializeSalesDetailRowStatusColumn()
        {
            SalesInputDataSet.SalesDetailRow[] rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(this._salesDetailDataTable.RowStatusColumn.ColumnName + " <> " + ctROWSTATUS_NORMAL.ToString());

            this._salesDetailDataTable.BeginLoadData();
            foreach (SalesInputDataSet.SalesDetailRow row in rows)
            {
                row.RowStatus = 0;
            }
            this._salesDetailDataTable.EndLoadData();
        }

        /// <summary>
        /// 売上明細データテーブルにコピー行が存在するかどうかをチェックします。
        /// </summary>
        /// <returns>true:コピーデータが存在する false:存在しない</returns>
        public bool ExistCopySalesDetailRow()
        {
            object value = this._salesDetailDataTable.Compute("COUNT(" + this._salesDetailDataTable.RowStatusColumn.ColumnName + ")", this._salesDetailDataTable.RowStatusColumn.ColumnName + " <> " + ctROWSTATUS_NORMAL.ToString());
            if (value is System.DBNull) return false;

            int count = (int)value;

            if (count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 売上明細データテーブルにコピー行の売上行番号リストを取得します。
        /// </summary>
        /// <returns>売上行番号リスト</returns>
        public List<int> GetCopySalesDetailRowNo()
        {
            SalesInputDataSet.SalesDetailRow[] rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(this._salesDetailDataTable.RowStatusColumn.ColumnName + " <> " + ctROWSTATUS_NORMAL.ToString());

            if ((rows != null) && (rows.Length > 0))
            {
                List<int> stockRowNoList = new List<int>();
                foreach (SalesInputDataSet.SalesDetailRow row in rows)
                {
                    stockRowNoList.Add(row.SalesRowNo);
                }

                return stockRowNoList;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// 指定したインデックスの売上明細データ行に対して行貼り付けを行う際、確認が必要かどうかをチェックします。
        /// </summary>
        /// <param name="copyStockRowNoList">コピー行売上行番号リスト</param>
        /// <param name="pasteIndex">貼り付け行Index</param>
        /// <returns>0:チェック不要 1:チェック必要 2:貼り付け不可 3:MAX明細数以上</returns>
        public int CheckPasteSalesDetailRow(List<int> copyStockRowNoList, int pasteIndex)
        {
            int check = 0;
            int pasteStockRowNo = this._salesDetailDataTable[pasteIndex].SalesRowNo;

            for (int i = 0; i < copyStockRowNoList.Count; i++)
            {
                SalesInputDataSet.SalesDetailRow sourceRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, copyStockRowNoList[i]);

                if (sourceRow == null) continue;

                if (this._salesSlipInputConstructionAcs.DataInputCountValue < pasteStockRowNo + i)
                {
                    check = 3;
                    break;
                }

                SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, pasteStockRowNo + i);

                if ((row.EditStatus != ctEDITSTATUS_AllOK) &&
                    (row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                    (row.EditStatus != ctEDITSTATUS_GoodsDiscount) &&
                    (row.EditStatus != ctEDITSTATUS_Annotation))
                {
                    check = 2;
                    break;
                }
                else if ((row != null) && (!string.IsNullOrEmpty(row.GoodsName)))
                {
                    check = 1;
                }
            }

            return check;
        }

        /// <summary>
        /// 売上明細データ行オブジェクトの貼り付けを行います。
        /// </summary>
        /// <param name="copyStockRowNoList">コピー行売上行番号リスト</param>
        /// <param name="pasteIndex">貼り付け行Index</param>
        /// <remarks>
        /// <br>Update Note: 2021/05/20 陳艶丹</br>
        /// <br>管理番号   : 11770032-00</br>
        /// <br>           : BLINCIDENT-2978 受注伝票明細金額が0の対応</br> 
        /// </remarks>
        public void PasteSalesDetailRow(List<int> copySalesRowNoList, int pasteIndex)
        {
            int pasteTargetStockRowNo = this._salesDetailDataTable[pasteIndex].SalesRowNo;

            this._salesDetailDataTable.BeginLoadData();
            List<int> cutSalesRowNoList = new List<int>();
            List<int> pasteSalesRowNoList = new List<int>();
            List<int> deleteSalesRowNoList = new List<int>();
            List<SalesInputDataSet.SalesDetailRow> copyStockRowList = new List<SalesInputDataSet.SalesDetailRow>();

            foreach (int salesRowNo in copySalesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

                if (row != null)
                {
                    copyStockRowList.Add(this.CloneSalesDetailRow(row));

                    if (row.RowStatus == ctROWSTATUS_CUT)
                    {
                        cutSalesRowNoList.Add(row.SalesRowNo);
                    }
                }
            }

            if (cutSalesRowNoList.Count > 0)
            {
                // 売上明細行クリア処理
                for (int i = 0; i < cutSalesRowNoList.Count; i++)
                {
                    this.ClearSalesDetailRow(this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, cutSalesRowNoList[i]));
                }
            }

            Dictionary<string, string> newGoodsSetKeyDictionary = new Dictionary<string, string>();
            for (int i = 0; i < copyStockRowList.Count; i++)
            {
                SalesInputDataSet.SalesDetailRow sourceRow = copyStockRowList[i];
                SalesInputDataSet.SalesDetailRow targetRow = null;

                if (this._salesDetailDataTable.Count == (pasteIndex + i))
                {
                    this.AddSalesDetailRow();
                }

                targetRow = this._salesDetailDataTable[pasteIndex + i];
                // --- ADD 2013/10/31 T.Miyamoto ------------------------------>>>>>
                // 受注情報の削除
                this.DeleteSalesDetailAcceptAnOrderRow(targetRow.DtlRelationGuid);
                // --- ADD 2013/10/31 T.Miyamoto ------------------------------<<<<<

                int svRowNo = targetRow.SalesRowNo;
                this.CopyCompleteSalesDetailRow(sourceRow, targetRow);
                targetRow.SalesRowNo = svRowNo;
                targetRow.RowStatus = ctROWSTATUS_NORMAL;

                // コピー＆ペーストの場合、計上情報、同時入力明細情報をクリアする
                if (!cutSalesRowNoList.Contains(copyStockRowList[i].SalesRowNo))
                {
                    targetRow.CommonSeqNo = 0;			// 共通通番
                    targetRow.SalesSlipDtlNum = 0;		// 明細通番
                    targetRow.AcptAnOdrStatusSrc = 0;	// 受注ステータス（元）
                    targetRow.SalesSlipDtlNumSrc = 0;	// 売上明細通番（元）
                    targetRow.SupplierFormalSync = 0;	// 仕入形式（同時）
                    targetRow.StockSlipDtlNumSync = 0;	// 仕入明細通番（同時）
                    targetRow.ShipmentCntDefault = 0;
                    targetRow.AlreadyAddUpCnt = 0;
                    targetRow.AddUpEnableCnt = 0;
                    targetRow.AcceptAnOrderCntDisplay = 0;
                    // ADD 2013/04/09 SCM障害№10507,10508対応 ------------------------------>>>>>
                    // 問合せ行番号、問合せ行番号枝番をクリアする
                    targetRow.InqRowNumber = 0;         // 問合わせ行番号
                    targetRow.InqRowNumDerivedNo = 0;   // 問合せ行番号枝番
                    // ADD 2013/04/09 SCM障害№10507,10508対応 ------------------------------<<<<<
                    this.SettingSalesDetailRowDtlRelationGuid(ref targetRow);
                    this.ClearSalesDetailOrderInfo(targetRow);
                    this.ClearSalesDetailAcceptAnOrderRow(targetRow.SalesRowNo);
                    this.MemoInfoAdjust(ref targetRow);
                }

                pasteSalesRowNoList.Add(targetRow.SalesRowNo);
            }
            this._salesDetailDataTable.EndLoadData();

            // --- ADD 2013/10/21 T.Miyamoto ------------------------------>>>>>
            for (int i = 0; i < copyStockRowList.Count; i++)
            {
                SalesInputDataSet.SalesDetailRow targetRow = null;

                targetRow = this._salesDetailDataTable[pasteIndex + i];
                if (targetRow.AcceptAnOrderCntDisplay != 0)
                {
                    // 受注情報設定
                    this.SettingSalesDetailAcceptAnOrder(targetRow.SalesRowNo);
                    // ---ADD 陳艶丹 2021/05/20 BLINCIDENT-2978 受注伝票明細金額が0の対応 ------>>>>>
                    // 切り取り＆ペースト且つ受注データのみ作成する場合
                    if ((cutSalesRowNoList.Contains(copyStockRowList[i].SalesRowNo))
                       && (targetRow.ShipmentCntDisplay == CtShipmentCntZero))
                    {
                        // 受注売上金額計算処理
                        this.CalculationSalesMoney(targetRow.SalesSlipNum, targetRow.SalesRowNo);

                        // 受注原価金額計算処理
                        this.CalculationCost(targetRow.SalesSlipNum, targetRow.SalesRowNo);
                    }
                    // ---ADD 陳艶丹 2021/05/20 BLINCIDENT-2978 受注伝票明細金額が0の対応 ------<<<<<
                }
            }
            // --- ADD 2013/10/21 T.Miyamoto ------------------------------<<<<<

            // 不要な行を削除する
            this.DeleteSalesDetailRow(deleteSalesRowNoList, true);

            //// 最終行に商品名称が設定されている場合は１行追加
            //if (!string.IsNullOrEmpty(this._salesDetailDataTable[this._salesDetailDataTable.Count - 1].GoodsName))
            //{
            //    this.AddSalesDetailRow();
            //}

            //>>>2013/04/06
            // SCM回答用BLコードリストの更新
            if (copySalesRowNoList != null)
            {
                this.OperateOriginalBLGoodsCodeMap(pasteTargetStockRowNo, "PASTE", copySalesRowNoList[0]);
            }
            //<<<2013/04/06

        }

        /// <summary>
        /// 売上明細行に行挿入可能かどうかチェックします。
        /// </summary>
        /// <param name="message"></param>
        /// <returns>true:挿入可能 false:挿入不可</returns>
        public bool InsertSalesDetailRowCheck(out string message)
        {
            message = string.Empty;
            SalesInputDataSet.SalesDetailRow row = (SalesInputDataSet.SalesDetailRow)this._salesDetailDataTable.Rows[this._salesDetailDataTable.Rows.Count - 1];

            if (row != null)
            {
                if (this.ExistSalesDetailComp(row.SalesRowNo))
                {
                    message = "最終行が入力済みの為、行挿入できません。";
                    return false;
                }
            }
            return true;
        }

        /// <summary>
        /// 削除しようとする売上明細行オブジェクトが削除可能かどうかをチェックします。
        /// </summary>
        /// <param name="stockRowNoList">削除対象売上行番号リスト</param>
        /// <param name="message">メッセージ（out）</param>
        /// <returns>true:削除可能 false:削除不可</returns>
        public bool DeleteSalesDetailRowCheck(List<int> salesRowNoList, out string message)
        {
            bool canDelete = true;
            bool exist = false;
            message = string.Empty;

            // 削除行の存在チェック
            int lastInputSalesRowNo = this.GetLastInputSalesRowNo();

            foreach (int salesRowNo in salesRowNoList)
            {
                if (salesRowNo < lastInputSalesRowNo)
                {
                    exist = true;
                    break;
                }
            }

            if (!exist)
            {
                foreach (int salesRowNo in salesRowNoList)
                {
                    SalesInputDataSet.SalesDetailRow row = this._dataSet.SalesDetail.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);

                    if (((row != null) && ((!string.IsNullOrEmpty(row.GoodsName)) || (!string.IsNullOrEmpty(row.GoodsNo)))) ||
                        ((row != null) && ((row.EditStatus == ctEDITSTATUS_GoodsDiscount) || (row.EditStatus == ctEDITSTATUS_RowDiscount))))
                    {
                        exist = true;
                        break;
                    }
                }
            }

            if (!exist)
            {
                message = "削除対象行が存在しません。";
                canDelete = false;
            }

            // 削除不可行が含まれているかどうかをチェックする。
            if (canDelete)
            {
                foreach (int salesRowNo in salesRowNoList)
                {
                    SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);

                    if ((row != null) && (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_AllReadOnly))
                    {
                        message = "削除不可行が存在する為、削除できません。";
                        canDelete = false;
                        break;
                    }

                    //>>>2011/02/01
                    //if ((row != null) && (row.AlreadyAddUpCnt != 0))
                    if ((this._salesSlip.InquiryNumber == 0) && (row != null) && (row.AlreadyAddUpCnt != 0))
                    //<<<2011/02/01
                    {
                        message = "返品もしくは計上伝票が入力されている為、削除できません。";
                        canDelete = false;
                        break;
                    }
                }
            }

            return canDelete;
        }

        // ---ADD 2011/04/13-------------->>>>>
        /// <summary>
        /// 削除しようとする売上明細行オブジェクトが削除可能かどうかをチェックします。（多行削除場合用）
        /// </summary>
        /// <param name="stockRowNoList">削除対象売上行番号リスト</param>
        /// <param name="message">メッセージ（out）</param>
        /// <returns>true:削除可能 false:削除不可</returns>
        /// <remarks>
        /// <br>Note      : 選択済み売上行番号削除処理</br>
        /// <br>Programer : 曹文傑</br>
        /// <br>Date      : 2011/04/13</br>
        /// <br>Update Note : 2011/05/18 譚洪</br>
        /// <br>                空白行を2行選択して削除すると、「対象行が存在しません」として行削除処理を動作させない</br>
        /// </remarks>
        public bool DeleteDetailRowsCheck(List<int> salesRowNoList, out string message)
        {
            bool canDelete = true;
            message = string.Empty;
            // ---ADD 2011/05/18-------------->>>>>
            bool exist = false;

            // 削除行の存在チェック
            int lastInputSalesRowNo = this.GetLastInputSalesRowNo();

            foreach (int salesRowNo in salesRowNoList)
            {
                if (salesRowNo < lastInputSalesRowNo)
                {
                    exist = true;
                    break;
                }
            }

            if (!exist)
            {
                foreach (int salesRowNo in salesRowNoList)
                {
                    SalesInputDataSet.SalesDetailRow row = this._dataSet.SalesDetail.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);

                    if (((row != null) && ((!string.IsNullOrEmpty(row.GoodsName)) || (!string.IsNullOrEmpty(row.GoodsNo)))) ||
                        ((row != null) && ((row.EditStatus == ctEDITSTATUS_GoodsDiscount) || (row.EditStatus == ctEDITSTATUS_RowDiscount))))
                    {
                        exist = true;
                        break;
                    }
                }
            }

            if (!exist)
            {
                message = "削除対象行が存在しません。";
                canDelete = false;
            }
            // ---ADD 2011/05/18--------------<<<<<

            // 削除不可行が含まれているかどうかをチェックする。
            if (canDelete)
            {
                foreach (int salesRowNo in salesRowNoList)
                {
                    SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);

                    if ((row != null) && (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_AllReadOnly))
                    {
                        message = "削除不可行が存在する為、削除できません。";
                        canDelete = false;
                        break;
                    }

                    if ((this._salesSlip.InquiryNumber == 0) && (row != null) && (row.AlreadyAddUpCnt != 0))
                    {
                        message = "返品もしくは計上伝票が入力されている為、削除できません。";
                        canDelete = false;
                        break;
                    }
                }
            }

            return canDelete;
        }
        // ---ADD 2011/04/13--------------<<<<<

        /// <summary>
        /// 売上明細行オブジェクトの削除を行います。
        /// </summary>
        /// <param name="stockRowNoList">削除行SalesRowNoリスト</param>
        public void DeleteSalesDetailRow(List<int> salesRowNoList)
        {
            this.DeleteSalesDetailRow(salesRowNoList, false);
        }

        /// <summary>
        /// 売上明細行オブジェクトの削除を行います。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNoList">削除行SalesRowNoリスト</param>
        /// <param name="changeRowCount">true:行数を変更する false:行数を変更するは変更しない</param>
        public void DeleteSalesDetailRow(List<int> salesRowNoList, bool changeRowCount)
        {
            if (salesRowNoList.Count == 0) return;

            this._salesDetailDataTable.BeginLoadData();

            // ADD 2013/11/29 商品保証部Redmine#723対応 ---------------------------->>>>>
            // 削除前SCM受注明細データ（回答）バックアップ
            ScmDataSet.SCMAcOdrDtlAsDataTable scmDetailAnsDataTableBackup = new ScmDataSet.SCMAcOdrDtlAsDataTable();
            scmDetailAnsDataTableBackup = (ScmDataSet.SCMAcOdrDtlAsDataTable)this._scmAcOdrDtlAsDataTable.Copy();
            // ADD 2013/11/29 商品保証部Redmine#723対応 ----------------------------<<<<<

            foreach (int salesRowNo in salesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow targetRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
                if (targetRow == null) continue;

                // 在庫行の場合
                if (!string.IsNullOrEmpty(targetRow.WarehouseCode))
                {
                    if (targetRow.SalesSlipDtlNum != 0)
                    {
                        if (this.SupplierStockCountChangeCheck(targetRow))
                        {
                            this.StockInfoAdjustCountSetting(targetRow.WarehouseCode, targetRow.GoodsNo, targetRow.GoodsMakerCd, ((targetRow.ShipmentCntDefault != 0) ? targetRow.ShipmentCntDefault : targetRow.ShipmentCnt) * -1);
                        }
                    }
                }

                // 受注明細削除
                this.DeleteSalesDetailAcceptAnOrderRow(targetRow.DtlRelationGuid);

                // --- ADD 2012/11/13 Y.Wakita ---------->>>>>
                // 仕入明細削除
                this.DeleteStockTempRow(targetRow.DtlRelationGuid);
                // --- ADD 2012/11/13 Y.Wakita ----------<<<<<

                // 計上元明細削除
                this.DeleteAddUpSrcDetail(targetRow);

                //>>>2011/03/05
                // SCM受注明細データ(回答)削除
                if (this._salesSlip.InquiryNumber != 0)
                {
                    ScmDataSet.SCMAcOdrDtlAsRow row = null;
                    // UPD 2013/04/09 SCM障害№10507,10508対応 ------------------------------------>>>>>
                    //ScmDataSet.SCMAcOdrDtlAsRow[] asRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} and {2}={3}",
                    //    this._scmAcOdrDtlAsDataTable.SalesSlipNumColumn.ColumnName, this._salesSlip.SalesSlipNum,
                    //    this._scmAcOdrDtlAsDataTable.SalesRowNoColumn.ColumnName, targetRow.SalesRowNo));
                    ScmDataSet.SCMAcOdrDtlAsRow[] asRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} and {2}={3}",
                        this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, targetRow.InqRowNumber,
                        this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, targetRow.InqRowNumDerivedNo));
                    // UPD 2013/04/09 SCM障害№10507,10508対応 ------------------------------------<<<<<

                    if ((asRows != null) && (asRows.Length != 0)) row = asRows[0];

                    if (row != null) this._scmAcOdrDtlAsDataTable.RemoveSCMAcOdrDtlAsRow(row);
                }
                //<<<2011/03/05

                // 売上明細削除
                this._salesDetailDataTable.RemoveSalesDetailRow(targetRow);

                //>>>2013/04/06
                // SCM回答用BLコードリストの更新
                this.OperateOriginalBLGoodsCodeMap(salesRowNo, "DEL");
                //<<<2013/04/06
            }

            // 売上明細データテーブルStockRowNo列初期化処理
            this.InitializeSalesDetailStockRowNoColumn();

            //>>>2011/03/05
            // SCM受注明細データ(回答)売上行番号再付番処理
            foreach (ScmDataSet.SCMAcOdrDtlAsRow dtlAsRow in this._scmAcOdrDtlAsDataTable)
            {
                foreach (SalesInputDataSet.SalesDetailRow detailRow in this._salesDetailDataTable)
                {
                    if ((dtlAsRow.InqRowNumber == detailRow.InqRowNumber) &&
                        (dtlAsRow.InqRowNumDerivedNo == detailRow.InqRowNumDerivedNo))
                    {
                        dtlAsRow.SalesRowNo = detailRow.SalesRowNo;
                    }
                }
            }
            //<<<2011/03/05

            //>>>2011/05/25
            if (this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) // 新規時のみ
            {
                // SCM受注明細データ(回答)問合せ行番号枝番再付番処理
                // --- ADD 2013/10/18 T.Miyamoto ------------------------------>>>>>
                int ChkInqRowNumber = 0;
                int SetInqRowNumDerivedNo = 0;
                // --- ADD 2013/10/18 T.Miyamoto ------------------------------<<<<<
                ScmDataSet.SCMAcOdrDtlAsDataTable tempTable = (ScmDataSet.SCMAcOdrDtlAsDataTable)this._scmAcOdrDtlAsDataTable.Copy();

                foreach (ScmDataSet.SCMAcOdrDtlAsRow dtlAsRow in tempTable)
                {
                    // UPD 2015/02/09 SCM連携マルチキャスト対応 ------------------------------>>>>>
                    #region 削除
                    //// --- UPD 2013/10/18 T.Miyamoto ------------------------------>>>>>
                    ////ScmDataSet.SCMAcOdrDtlAsRow[] asRowsDerivedZero = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} and {2}<{3}",
                    ////    this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, dtlAsRow.InqRowNumber,
                    ////    this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, 0));
                    ////ScmDataSet.SCMAcOdrDtlAsRow[] asRowsDerivedPosi = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} and {2}>={3}",
                    ////    this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, dtlAsRow.InqRowNumber,
                    ////    this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, 0));

                    ////if (asRowsDerivedZero.Length == 0) break;
                    ////if (asRowsDerivedPosi.Length != 0) break;

                    ////// 売上明細データ問合せ行番号再付番
                    ////SalesInputDataSet.SalesDetailRow[] detailRows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}={1} and {2}={3}",
                    ////    this._salesDetailDataTable.InqRowNumberColumn, asRowsDerivedZero[0].InqRowNumber,
                    ////    this._salesDetailDataTable.InqRowNumDerivedNoColumn, asRowsDerivedZero[0].InqRowNumDerivedNo));

                    ////detailRows[0].InqRowNumDerivedNo = 1;
                    ////asRowsDerivedZero[0].InqRowNumDerivedNo = 1;

                    //if (ChkInqRowNumber != dtlAsRow.InqRowNumber)
                    //{
                    //    ChkInqRowNumber = dtlAsRow.InqRowNumber;
                    //    // UPD 2013/11/29 商品保証部Redmine#723対応 ---------------------------->>>>>
                    //    //SetInqRowNumDerivedNo = 0;
                    //    ScmDataSet.SCMAcOdrDtlAsRow[] scmDetailRows = (ScmDataSet.SCMAcOdrDtlAsRow[])scmDetailAnsDataTableBackup.Select(string.Format("{0}={1} and {2}>{3}",
                    //    scmDetailAnsDataTableBackup.InqRowNumberColumn.ColumnName, ChkInqRowNumber,
                    //    scmDetailAnsDataTableBackup.InqRowNumDerivedNoColumn.ColumnName, 0));
                    //    if (scmDetailRows.Length == 0)
                    //    {
                    //        SetInqRowNumDerivedNo = 0;
                    //    }
                    //    else
                    //    {
                    //        SetInqRowNumDerivedNo = scmDetailRows[0].InqRowNumDerivedNo - 1;
                    //    }
                    //    // UPD 2013/11/29 商品保証部Redmine#723対応 ----------------------------<<<<<
                    //}
                    //ScmDataSet.SCMAcOdrDtlAsRow[] asRowsDerivedPosi = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} and {2}>{3}",
                    //    this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName      , dtlAsRow.InqRowNumber,
                    //    this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, SetInqRowNumDerivedNo));

                    //if (asRowsDerivedPosi.Length == 0) continue;
                    //SetInqRowNumDerivedNo++;

                    //// 売上明細データ問合せ行番号再付番
                    //SalesInputDataSet.SalesDetailRow[] detailRows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}={1} and {2}={3}",
                    //    this._salesDetailDataTable.InqRowNumberColumn      , asRowsDerivedPosi[0].InqRowNumber,
                    //    this._salesDetailDataTable.InqRowNumDerivedNoColumn, asRowsDerivedPosi[0].InqRowNumDerivedNo));

                    //detailRows[0].InqRowNumDerivedNo = SetInqRowNumDerivedNo;
                    //asRowsDerivedPosi[0].InqRowNumDerivedNo = SetInqRowNumDerivedNo;
                    //// --- UPD 2013/10/18 T.Miyamoto ------------------------------<<<<<
                    #endregion

                    if (ChkInqRowNumber != dtlAsRow.InqRowNumber)
                    {
                        ChkInqRowNumber = dtlAsRow.InqRowNumber;
                        // 削除前に先頭行が存在していたかチェック
                        ScmDataSet.SCMAcOdrDtlAsRow[] scmDetailRows = (ScmDataSet.SCMAcOdrDtlAsRow[])scmDetailAnsDataTableBackup.Select(string.Format("{0}={1} and {2}>{3}",
                        scmDetailAnsDataTableBackup.InqRowNumberColumn.ColumnName, ChkInqRowNumber,
                        scmDetailAnsDataTableBackup.InqRowNumDerivedNoColumn.ColumnName, 0));
                        if (scmDetailRows.Length == 0) continue;
                        else
                        {
                            SetInqRowNumDerivedNo = scmDetailRows[0].InqRowNumDerivedNo;
                            // 存在していた場合、削除後に先頭行が存在しているかチェック
                            ScmDataSet.SCMAcOdrDtlAsRow[] asRowsDerivedPosi = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} and {2}={3}",
                                this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, dtlAsRow.InqRowNumber,
                                this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, SetInqRowNumDerivedNo));
                            // 削除後のテーブルに存在していない場合、マイナス値の枝番中で最大の行を先頭行とする
                            if (asRowsDerivedPosi.Length == 0)
                            {
                                ScmDataSet.SCMAcOdrDtlAsRow[] searchRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} and {2}<{3} and {4} = MAX({5})",
                                    this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, dtlAsRow.InqRowNumber,
                                    this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, 0,
                                    this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName));
                                if (searchRows.Length == 0) continue;
                                else
                                {
                                    // 売上明細データ問合せ行番号再付番
                                    SalesInputDataSet.SalesDetailRow[] detailRows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}={1} and {2}={3}",
                                        this._salesDetailDataTable.InqRowNumberColumn, searchRows[0].InqRowNumber,
                                        this._salesDetailDataTable.InqRowNumDerivedNoColumn, searchRows[0].InqRowNumDerivedNo));

                                    detailRows[0].InqRowNumDerivedNo = SetInqRowNumDerivedNo;
                                    searchRows[0].InqRowNumDerivedNo = SetInqRowNumDerivedNo;
                                }
                            }
                        }
                    }
                    // UPD 2015/02/09 SCM連携マルチキャスト対応 ------------------------------<<<<<
                }
            }
            //<<<2011/05/25

            if (!changeRowCount)
            {
                // 削除した分だけ新規に行を追加する
                for (int i = 0; i < salesRowNoList.Count; i++)
                {
                    this.AddSalesDetailRow();
                }
            }
            this._salesDetailDataTable.EndLoadData();

        }

        /// <summary>
        /// 売上明細行オブジェクトの削除を行います。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNoList">削除行SalesRowNoリスト</param>
        /// <param name="changeRowCount">true:行数を変更する false:行数を変更しない</param>
        /// <param name="salesDetailDataTable">売上データテーブル</param>
        public void DeleteSalesDetailRow(List<int> salesRowNoList, bool changeRowCount, ref SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            if (salesRowNoList.Count == 0) return;

            salesDetailDataTable.BeginLoadData();
            //acptDetailDataTable.BeginLoadData();

            foreach (int salesRowNo in salesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow targetRow = salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
                if (targetRow == null) targetRow = salesDetailDataTable.FindBySalesSlipNumSalesRowNo(ctDefaultSalesSlipNum, salesRowNo);
                if (targetRow == null) continue;

                //// 受注明細削除
                //this.DeleteSalesDetailAcceptAnOrderRow(targetRow.DtlRelationGuid, ref acptDetailDataTable);

                // 売上明細削除
                salesDetailDataTable.RemoveSalesDetailRow(targetRow);
            }

            // 売上明細データテーブルStockRowNo列初期化処理
            this.InitializeSalesDetailStockRowNoColumn(salesDetailDataTable);

            if (!changeRowCount)
            {
                // 削除した分だけ新規に行を追加する
                for (int i = 0; i < salesRowNoList.Count; i++)
                {
                    this.AddSalesDetailRow();
                }
            }

            salesDetailDataTable.EndLoadData();
            //acptDetailDataTable.EndLoadData();

        }

        /// <summary>
        /// 売上明細行オブジェクトの削除を行います。（受注明細のみ）
        /// </summary>
        /// <param name="salesRowNoList">削除行SalesRowNoリスト</param>
        /// <param name="changeRowCount">true:行数を変更する false:行数を変更するは変更しない</param>
        public void DeleteSalesDetailRowOnlyAcptAnOdr(List<int> salesRowNoList, bool changeRowCount)
        {
            if (salesRowNoList.Count == 0) return;

            this._salesDetailDataTable.BeginLoadData();
            foreach (int salesRowNo in salesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow targetRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
                if (targetRow == null) continue;

                // 受注明細削除
                this.DeleteSalesDetailAcceptAnOrderRow(targetRow.DtlRelationGuid);

            }
            this._salesDetailDataTable.EndLoadData();

        }

        /// <summary>
        /// 売上明細行オブジェクトの削除を行います。（受注明細のみ）
        /// </summary>
        /// <param name="salesRowNoList">削除行SalesRowNoリスト</param>
        /// <param name="changeRowCount">true:行数を変更する false:行数を変更するは変更しない</param>
        public void DeleteSalesDetailRowOnlyAcptAnOdr(List<int> salesRowNoList, bool changeRowCount, ref SalesInputDataSet.SalesDetailDataTable salesDetailDataTable, ref SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTable)
        {
            if (salesRowNoList.Count == 0) return;

            salesDetailDataTable.BeginLoadData();
            acptDetailDataTable.BeginLoadData();
            foreach (int salesRowNo in salesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow targetRow = salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
                if (targetRow == null) continue;

                // 受注明細削除
                this.DeleteSalesDetailAcceptAnOrderRow(targetRow.DtlRelationGuid, ref acptDetailDataTable);

            }
            salesDetailDataTable.EndLoadData();
            acptDetailDataTable.EndLoadData();

        }

        /// <summary>
        /// 売上明細行オブジェクトの削除を行います。（売上明細、伝票メモ、計上元のみ）
        /// </summary>
        /// <param name="salesRowNoList">削除行SalesRowNoリスト</param>
        /// <param name="changeRowCount">true:行数を変更する false:行数を変更するは変更しない</param>
        public void DeleteSalesDetailRowOnlySalesDetail(List<int> salesRowNoList, bool changeRowCount)
        {
            if (salesRowNoList.Count == 0) return;

            this._salesDetailDataTable.BeginLoadData();
            foreach (int salesRowNo in salesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow targetRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
                if (targetRow == null) continue;

                // 計上元明細削除
                this.DeleteAddUpSrcDetail(targetRow);

                // 売上明細削除
                this._salesDetailDataTable.RemoveSalesDetailRow(targetRow);
            }

            // 売上明細データテーブルStockRowNo列初期化処理
            this.InitializeSalesDetailStockRowNoColumn();

            if (!changeRowCount)
            {
                // 削除した分だけ新規に行を追加する
                for (int i = 0; i < salesRowNoList.Count; i++)
                {
                    this.AddSalesDetailRow();
                }
            }
            this._salesDetailDataTable.EndLoadData();

        }

        /// <summary>
        /// 売上明細行オブジェクトの削除を行います。
        /// </summary>
        /// <param name="salesRowNoList"></param>
        /// <param name="changeRowCount"></param>
        /// <param name="salesDetailDataTable"></param>
        public void DeleteSalesDetailRowOnlySalesDetail(List<int> salesRowNoList, bool changeRowCount, ref SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            if (salesRowNoList.Count == 0) return;

            salesDetailDataTable.BeginLoadData();
            foreach (int salesRowNo in salesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow targetRow = salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
                if (targetRow == null) continue;

                // 売上明細削除
                salesDetailDataTable.RemoveSalesDetailRow(targetRow);
            }

            // 売上明細データテーブルStockRowNo列初期化処理
            this.InitializeSalesDetailStockRowNoColumn(salesDetailDataTable);

            if (!changeRowCount)
            {
                // 削除した分だけ新規に行を追加する
                for (int i = 0; i < salesRowNoList.Count; i++)
                {
                    this.AddSalesDetailRow();
                }
            }
            salesDetailDataTable.EndLoadData();

        }

        /// <summary>
        /// 売上明細行オブジェクトの追加を行います。
        /// </summary>
        public void AddSalesDetailRow()
        {

            int rowCount = this._salesDetailDataTable.Rows.Count;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.NewSalesDetailRow();
            row.SalesSlipNum = this._currentSalesSlipNum;
            row.SalesRowNo = rowCount + 1;
            this.SettingSalesDetailRowDtlRelationGuid(ref row);
            row.CarRelationGuid = Guid.Empty;
            row.SalesDate = this._salesSlip.SalesDate;
            row.StockDate = this._salesSlip.SalesDate;
            row.BoCode = ctDefaultBoCode;
            this._salesDetailDataTable.AddSalesDetailRow(row);

        }

        /// <summary>
        /// 売上明細データテーブルに初期表示行数分の行を追加します。
        /// </summary>
        public void AddSalesDetailRowInitialRowCount()
        {
            SalesInputDataSet.SalesDetailRow[] salesDetailRowArray = this.SelectSalesDetailRows(string.Empty, this._salesDetailDataTable);

            int count = 1;
            if ((salesDetailRowArray != null) && (salesDetailRowArray.Length > 0))
            {
                count = salesDetailRowArray.Length;
            }

            if (count < this._salesSlipInputConstructionAcs.DataInputCountValue)
            {
                for (int i = count; i < this._salesSlipInputConstructionAcs.DataInputCountValue; i++)
                {
                    this.AddSalesDetailRow();
                }
            }
            else
            {
                //this.AddSalesDetailRow();
            }
        }

        // 2009/12/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 売上明細データテーブルを指定行数へ変更
        /// </summary>
        /// <param name="rowCount"></param>
        public void SettingSalesDetailRowInputRowCount(int inputCnt)
        {
            this._salesDetailDataTable.BeginLoadData();

            List<int> deleteRowNoList = new List<int>();
            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this._salesDetailDataTable)
            {
                // 指定行数以上の明細を削除
                if (salesDetailRow.SalesRowNo > inputCnt)
                {
                    // 有効行の場合、削除無し
                    if (this.ExistSalesDetail(salesDetailRow))
                    {
                        continue;
                    }
                    else
                    {
                        deleteRowNoList.Add(salesDetailRow.SalesRowNo);
                    }
                }
            }

            // 不要明細削除
            if (deleteRowNoList.Count != 0) this.DeleteSalesDetailRow(deleteRowNoList, true);

            this._salesDetailDataTable.EndLoadData();
        }
        // 2009/12/17 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// 表示用の売上行番号を再採番します。
        /// </summary>
        public void AdjustRowNo()
        {
            int no = 1;
            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if (row != null)
                {
                    row.SalesRowNoDisplay = no;
                    no++;
                }
            }
        }

        /// <summary>
        /// 指定した売上行番号から売上明細データ行オブジェクトのＩｎｄｅｘを取得します。
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>売上明細データ行オブジェクトのＩｎｄｅｘ</returns>
        public int GetIndexFromSalesRowNo(int salesRowNo)
        {
            int index = this._salesDetailDataTable.Count - 1;

            for (int i = 0; i < this._salesDetailDataTable.Count; i++)
            {
                if (this._salesDetailDataTable[i].SalesRowNo == salesRowNo)
                {
                    index = i;
                    break;
                }
            }

            return index;
        }

        /// <summary>
        /// 売上明細行オブジェクトの挿入を行います。
        /// </summary>
        /// <param name="insertIndex">挿入行Index</param>
        public void InsertSalesDetailRow(int insertIndex)
        {
            this.InsertSalesDetailRow(insertIndex, 1);
        }

        /// <summary>
        /// 売上明細行オブジェクトの挿入を行います。（オーバーロード）
        /// </summary>
        /// <param name="insertIndex">挿入行Index</param>
        /// <param name="line">挿入段数</param>
        public void InsertSalesDetailRow(int insertIndex, int line)
        {
            if (line == 0) return;

            this._salesDetailDataTable.BeginLoadData();
            int lastRowIndex = this._salesDetailDataTable.Rows.Count - 1;
            int stockRowNo = this._salesDetailDataTable[insertIndex].SalesRowNo;

            // 2009/12/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //// 売上明細行追加処理
            //for (int i = 0; i < line; i++)
            //{
            //    if (this._salesDetailDataTable.Rows.Count < this._salesSlipInputConstructionAcs.DataInputCountValue)
            //    {
            //        this.AddSalesDetailRow();
            //    }
            //}

            int maxCnt = this._salesSlipInputConstructionAcs.DataInputCountValue;
            if ((this._salesSlip.SalesSlipNum != ctDefaultSalesSlipNum) &&
                (this._salesSlip.DetailRowCountForReadSlip != 0))
            {
                maxCnt = this._salesSlip.DetailRowCountForReadSlip;
            }

            // 売上明細行追加処理
            for (int i = 0; i < line; i++)
            {
                if (this._salesDetailDataTable.Rows.Count < maxCnt)
                {
                    this.AddSalesDetailRow();
                }
            }
            // 2009/12/17 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


            // 最終行から挿入対象行までの行情報を指定段ずつ下にコピーする
            for (int i = lastRowIndex; i >= insertIndex; i--)
            {
                if ((i + line) < this._salesDetailDataTable.Rows.Count)
                {
                    SalesInputDataSet.SalesDetailRow sourceRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, this._salesDetailDataTable[i].SalesRowNo);
                    SalesInputDataSet.SalesDetailRow targetRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, this._salesDetailDataTable[i + line].SalesRowNo);

                    this.CopySalesDetailRowForInsert(sourceRow, targetRow);
                }
            }

            // 挿入対象行をクリアする
            SalesInputDataSet.SalesDetailRow clearRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, this._salesDetailDataTable[insertIndex].SalesRowNo);
            // UPD 2010/09/26 --- >>>
            //this.ClearSalesDetailRow(clearRow);
            this.ClearSalesDetailRowForInsert(clearRow);
            // UPD 2010/09/26 --- <<<
            this._salesDetailDataTable.EndLoadData();

        }

        /// <summary>
        /// 行取得処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        public SalesInputDataSet.SalesDetailRow GetSalesDetailRow(int salesRowNo)
        {
            return this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
        }

        #region 各種条件に該当する売上明細データの存在チェック
        /// <summary>
        /// 品名、品番のいずれかが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetail()
        {
            bool exist = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                // --- UPD 2012/06/28 No.317 T.Nishi ---------->>>>>
                //// --- UPD 2012/05/24 No.317 ---------->>>>>
                ////if ((row.EditStatus == ctEDITSTATUS_RowDiscount) ||
                ////    (row.EditStatus == ctEDITSTATUS_Annotation) ||
                ////    (!string.IsNullOrEmpty(row.GoodsName)) ||
                ////    (!string.IsNullOrEmpty(row.GoodsNo)))
                //if ((row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                //    (row.EditStatus != ctEDITSTATUS_Annotation) &&
                //    (!string.IsNullOrEmpty(row.GoodsName)) &&
                //    (!string.IsNullOrEmpty(row.GoodsNo)))
                //// --- UPD 2012/05/24 No.317 ----------<<<<<
                if ((row.EditStatus == ctEDITSTATUS_RowDiscount) ||
                    (row.EditStatus == ctEDITSTATUS_Annotation) ||
                    (!string.IsNullOrEmpty(row.GoodsName)) ||
                    (!string.IsNullOrEmpty(row.GoodsNo)))
                // --- UPD 2012/06/28 No.317 T.Nishi ----------<<<<<
                {
                    exist = true;
                    break;
                }
            }

            return exist;
        }

        //>>>2010/09/27
        /// <summary>
        /// 品名、品番のいずれかが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetail(int salesRowNo, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            bool exist = false;
            SalesInputDataSet.SalesDetailRow row = salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                if ((row.EditStatus == ctEDITSTATUS_RowDiscount) || (row.EditStatus == ctEDITSTATUS_Annotation)) return exist;
                if ((!string.IsNullOrEmpty(row.GoodsName)) || (!string.IsNullOrEmpty(row.GoodsNo))) exist = true;
            }

            return exist;
        }
        //<<<2010/09/27

        /// <summary>
        /// 品名、品番のいずれかが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <param name="salesDetailRow"></param>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetail(SalesInputDataSet.SalesDetailRow salesDetailRow)
        {
            bool exist = false;

            if ((salesDetailRow.EditStatus == ctEDITSTATUS_RowDiscount) ||
                (salesDetailRow.EditStatus == ctEDITSTATUS_Annotation) ||
                (!string.IsNullOrEmpty(salesDetailRow.GoodsName)) ||
                (!string.IsNullOrEmpty(salesDetailRow.GoodsNo)))
            {
                exist = true;
            }

            return exist;
        }

        /// <summary>
        /// 品名、品番のいずれかが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        /// <remarks>Call:・数量情報クリア判定
        ///               ・フッタ情報Enabled設定判定
        ///               ・得意先注番明細展開判定
        ///               ・車両共通キーセット判定</remarks>
        public bool ExistSalesDetail(int salesRowNo)
        {
            bool exist = false;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                if ((row.EditStatus == ctEDITSTATUS_RowDiscount) || (row.EditStatus == ctEDITSTATUS_Annotation)) return exist;
                if ((!string.IsNullOrEmpty(row.GoodsName)) || (!string.IsNullOrEmpty(row.GoodsNo))) exist = true;
            }

            return exist;
        }

        /// <summary>
        /// 品名、品番のいずれかが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(全て対象)
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailComp(int salesRowNo)
        {
            bool exist = false;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                if ((!string.IsNullOrEmpty(row.GoodsName)) || (!string.IsNullOrEmpty(row.GoodsNo))) exist = true;
            }

            return exist;
        }

        /// <summary>
        /// 品名、品番のいずれかが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(注釈のみ対象外)
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        /// <br>Update Note: 2010/05/04 王海立 1行目以外で注釈行を入力した場合に注釈行の車輌情報が空白になる障害の修正</br>        
        public bool ExistSalesDetailOutAnnotation(int salesRowNo)
        {
            bool exist = false;
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                // --- UPD 2010/05/04 ---------->>>>>
                //if (row.EditStatus == ctEDITSTATUS_Annotation) return exist;
                if (row.EditStatus == ctEDITSTATUS_Annotation) exist = true;
                // --- UPD 2010/05/04 ----------<<<<<
                if ((!string.IsNullOrEmpty(row.GoodsName)) || (!string.IsNullOrEmpty(row.GoodsNo))) exist = true;
            }

            return exist;
        }

        /// <summary>
        /// 出荷数が入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <param name="RowNoList"></param>
        /// <returns>true:存在する false:存在しない</returns>
        /// <remarks>Call:・一式制御判定</remarks>
        public bool ExistSalesDetailShipmentCnt(List<int> RowNoList)
        {
            bool exist = false;
            foreach (int rowNo in RowNoList)
            {
                SalesInputDataSet.SalesDetailRow[] rows = (SalesInputDataSet.SalesDetailRow[])this._salesDetailDataTable.Select(string.Format("{0}={1}", this._salesDetailDataTable.SalesRowNoColumn.ColumnName, rowNo));
                if ((rows[0].EditStatus != ctEDITSTATUS_RowDiscount) &&
                    (rows[0].EditStatus != ctEDITSTATUS_Annotation) &&
                    (rows[0].ShipmentCntDisplay != 0))
                {
                    exist = true;
                    break;
                }
            }
            return exist;
        }

        /// <summary>
        /// 出荷数が入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailShipmentCnt(int salesRowNo)
        {
            bool exist = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);
            if ((row != null) &&
                (row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                (row.EditStatus != ctEDITSTATUS_Annotation) &&
                (row.ShipmentCntDisplay != 0))
            {
                exist = true;
            }
            return exist;
        }

        /// <summary>
        /// 仕入情報が入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailStockInfo(SalesInputDataSet.SalesDetailRow row)
        {
            bool exist = false;

            if (row != null)
            {
                if ((row.SupplierCdForStock != 0) &&
                    (row.StockDate != DateTime.MinValue) &&
                    (!string.IsNullOrEmpty(row.PartySalesSlipNum.Trim())))
                {
                    exist = true;
                }
            }

            return exist;
        }

        /// <summary>
        /// 倉庫コードが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <param name="index"></param>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailWarehouseCode(int salesRowNo)
        {
            bool exist = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);
            if ((row != null) &&
                (row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                (row.EditStatus != ctEDITSTATUS_Annotation) &&
                (row.WarehouseCode.Trim() != string.Empty))
            {
                exist = true;
            }
            return exist;
        }

        /// <summary>
        /// 倉庫コードが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="salesDetailDataTable"></param>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailWarehouseCode(int salesRowNo, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            bool exist = false;

            SalesInputDataSet.SalesDetailRow row = salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);
            if ((row != null) &&
                (row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                (row.EditStatus != ctEDITSTATUS_Annotation) &&
                (row.WarehouseCode.Trim() != string.Empty))
            {
                exist = true;
            }
            return exist;
        }

        /// <summary>
        /// 品番・メーカーが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <param name="index"></param>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailGoodsNoAndGoodsMakerCd(int salesRowNo)
        {
            bool exist = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);
            if ((row != null) &&
                (row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                (row.EditStatus != ctEDITSTATUS_Annotation) &&
                (row.GoodsNo != string.Empty) &&
                (row.GoodsMakerCd != 0))
            {
                exist = true;
            }
            return exist;
        }

        /// <summary>
        /// 品番・メーカーが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="salesDetailDataTable"></param>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailGoodsNoAndGoodsMakerCd(int salesRowNo, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            bool exist = false;

            SalesInputDataSet.SalesDetailRow row = salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);
            if ((row != null) &&
                (row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                (row.EditStatus != ctEDITSTATUS_Annotation) &&
                (row.GoodsNo != string.Empty) &&
                (row.GoodsMakerCd != 0))
            {
                exist = true;
            }
            return exist;
        }

        /// <summary>
        /// 仕入先コードが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <param name="index"></param>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailSupplierCd(int salesRowNo)
        {
            bool exist = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);
            if ((row != null) &&
                (row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                (row.EditStatus != ctEDITSTATUS_Annotation) &&
                (row.SupplierCd != 0))
            {
                exist = true;
            }
            return exist;
        }

        /// <summary>
        /// 発注可能メーカーが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <param name="index"></param>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailEnableOdrMakerCd(int salesRowNo)
        {
            bool exist = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);
            UOESupplier uoeSupplier;
            int supplierCd = row.SupplierCdForOrder;
            if (supplierCd == 0) supplierCd = row.SupplierCd;

            if ((row != null) &&
                (row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                (row.EditStatus != ctEDITSTATUS_Annotation) &&
                (supplierCd != 0) &&
                (row.GoodsMakerCd != 0))
            {
                //>>>2010/07/01
                //int st = this._uoeSupplierAcs.Read(out uoeSupplier, this._enterpriseCode, supplierCd, this._salesSlip.SectionCode);
                int st = this._uoeSupplierAcs.ReadCache(out uoeSupplier, this._enterpriseCode, supplierCd, this._salesSlip.SectionCode);
                //<<<2010/07/01
                if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 純正発注先のみチェック対象
                    if (this.CheckPureCodeUOESupplier(uoeSupplier.CommAssemblyId) == UOESupplierAcs.PureCodeDiv.Pure)
                    {
                        if (this.CheckEnableOdrMakerCd(uoeSupplier, row.GoodsMakerCd)) exist = true;
                    }
                    else
                    {
                        exist = true;
                    }
                }
            }
            return exist;
        }

        /// <summary>
        /// 発注可能メーカーが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="supplierCd"></param>
        /// <returns></returns>
        public bool ExistSalesDetailEnableOdrMakerCd(int salesRowNo, int supplierCd)
        {
            bool exist = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);
            UOESupplier uoeSupplier;
            if ((row != null) &&
                (row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                (row.EditStatus != ctEDITSTATUS_Annotation) &&
                (supplierCd != 0) &&
                (row.GoodsMakerCd != 0))
            {
                //>>>2010/07/01
                //int st = this._uoeSupplierAcs.Read(out uoeSupplier, this._enterpriseCode, supplierCd, this._salesSlip.SectionCode);
                int st = this._uoeSupplierAcs.ReadCache(out uoeSupplier, this._enterpriseCode, supplierCd, this._salesSlip.SectionCode);
                //<<<2010/07/01
                if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 純正発注先のみチェック対象
                    if (this.CheckPureCodeUOESupplier(uoeSupplier.CommAssemblyId) == UOESupplierAcs.PureCodeDiv.Pure)
                    {
                        if (this.CheckEnableOdrMakerCd(uoeSupplier, row.GoodsMakerCd)) exist = true;
                    }
                    else
                    {
                        exist = true;
                    }
                }
            }
            return exist;
        }

        /// <summary>
        /// 出荷数が入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        /// <remarks>Call:・締チェック対象判定</remarks>
        public bool ExistSalesDetailShipmentCnt()
        {
            bool exist = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if ((row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                    (row.EditStatus != ctEDITSTATUS_Annotation) &&
                    (row.ShipmentCntDisplay != 0))
                {
                    exist = true;
                    break;
                }
            }

            return exist;
        }

        //>>>2010/04/21
        /// <summary>
        /// 受注数のみ入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        /// <remarks>Call:・締チェック対象判定</remarks>
        public bool ExistSalesDetailAcptCntOnly()
        {
            bool exist = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if ((row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                    (row.EditStatus != ctEDITSTATUS_Annotation) &&
                    (row.ShipmentCntDisplay == 0) &&
                    (!this.ExistOrderInfo(row)) && // 2010/07/06
                    (row.AcceptAnOrderCntDisplay != 0))
                {
                    exist = true;
                    break;
                }
            }

            return exist;
        }
        //<<<2010/04/21

        /// <summary>
        /// 商品価格の再設定を行う必要がある商品が入力されている売上明細行オブジェクトが存在するかどうかをチェックします。
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailCanGoodsPriceReSettingData()
        {
            bool exist = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if (((row.EditStatus == ctEDITSTATUS_AllOK) || (row.EditStatus == ctEDITSTATUS_AddUpEdit) || (row.EditStatus == ctEDITSTATUS_AddUpNew) || (row.EditStatus == ctEDITSTATUS_GoodsDiscount)) &&
                    (!string.IsNullOrEmpty(row.GoodsNo)) && (row.GoodsMakerCd != 0))
                {
                    exist = true;
                    break;
                }
            }

            return exist;
        }

        // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ---------->>>>>
        /// <summary>
        /// 価格・売価を変更するかどうかチェック処理
        /// </summary>
        /// <returns>true:価格・売価を変更 false:変更しない</returns>
        /// <remarks>
        /// <br>Note       : 価格・売価を変更するかどうかチェック処理を行う。</br>
        /// <br>Programmer : 時シン</br>
        /// <br>Date       : K2016/12/14</br>
        /// <br>管理番号   : 11202330-00</br>
        /// </remarks>
        public bool CheckWhetherSalesPriceChange()
        {
            // 山形部品㈱ 売上伝票入力(価格・売価変更ロック)(個別)オプションが有効 & 通常伝票の修正や返品伝票の修正の場合
            if (this._salesSlipInputInitDataAcs.Opt_YamagataCustom == (int)SalesSlipInputInitDataAcs.Option.ON && this.SalesSlip.SalesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ----------<<<<<

        /// <summary>
        /// 計上元売上明細行オブジェクトが存在するかどうかをチェックします。
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailAddUpSrcData()
        {
            bool exist = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if (((row.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                     (row.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder) ||
                     (row.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment))
                    && (row.SalesSlipDtlNumSrc != 0))
                {
                    exist = true;
                    break;
                }
            }

            return exist;
        }

        /// <summary>
        /// 計上元売上明細が存在するかどうかをチェックします。
        /// </summary>
        /// <param name="salesDetailList"></param>
        /// <returns></returns>
        public bool ExistSalesDetailAddUpSrcDataDBList(List<SalesDetail> salesDetailList)
        {
            bool exist = false;

            foreach (SalesDetail row in salesDetailList)
            {
                if (((row.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                     (row.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder) ||
                     (row.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment))
                    && (row.SalesSlipDtlNumSrc != 0))
                {
                    exist = true;
                    break;
                }
            }

            return exist;
        }

        /// <summary>
        /// 値引き行が売上明細行オブジェクトが存在するかどうかをチェックします。
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailDiscountData()
        {
            bool exist = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if ((!string.IsNullOrEmpty(row.GoodsName)) && (row.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount))
                {
                    exist = true;
                    break;
                }
            }

            return exist;
        }

        //>>>2010/02/26
        /// <summary>
        /// 値引き行が売上明細行オブジェクトが存在するかどうかをチェックします。
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDiscountData()
        {
            bool exist = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if (row.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount)
                {
                    exist = true;
                    break;
                }
            }

            return exist;
        }
        //<<<2010/02/26

        /// <summary>
        /// 出荷数マイナス行が売上明細行オブジェクトが存在するかどうかをチェックします。
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailMinusCount()
        {
            bool exist = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if (row.ShipmentCntDisplay < 0)
                {
                    exist = true;
                    break;
                }
            }

            return exist;
        }

        // ADD 2013/04/02③ T.Miyamoto ------------------------------>>>>>
        /// <summary>
        /// 出荷数にマイナスが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailShipmentCntMinus(int salesRowNo)
        {
            bool exist = false;

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum, salesRowNo);
            if ((row != null) &&
                (row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                (row.EditStatus != ctEDITSTATUS_Annotation) &&
                (row.ShipmentCntDisplay < 0))
            {
                exist = true;
            }
            return exist;
        }
        // ADD 2013/04/02③ T.Miyamoto ------------------------------<<<<<

        /// <summary>
        /// 売上明細データテーブル上に注釈行以外が存在するかどうかをチェックします。
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailExceptAnnotation()
        {
            bool exist = false;
            bool annotationFlg = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if (row.EditStatus == ctEDITSTATUS_Annotation) annotationFlg = true;

                if ((row.ShipmentCntDisplay != 0) &&
                    (!string.IsNullOrEmpty(row.GoodsName)) &&
                    (row.EditStatus != ctEDITSTATUS_Annotation))
                {
                    exist = true;
                    break;
                }
            }

            if ((exist == false) && (annotationFlg == true))
            {
                exist = false;
            }
            else
            {
                exist = true;
            }

            return exist;
        }
        // --- ADD 2012/06/28 No.317 T.Nishi ---------->>>>>
        /// <summary>
        /// 品名、品番のいずれかが入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(注釈は対象外)
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailOtherAnnotation()

        {
            bool exist = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if ((!string.IsNullOrEmpty(row.GoodsName)) ||
                   (!string.IsNullOrEmpty(row.GoodsNo)))
                {
                    if (row.EditStatus != ctEDITSTATUS_Annotation)
                    {
                        exist = true;
                        break;
                    }
                }
            }
            return exist;
        }
        // --- ADD 2012/06/28 No.317 T.Nishi ----------<<<<<

        #endregion

        /// <summary>
        /// 指定したフィルタ文字列を使用して売上明細データテーブルの選択を行い、該当する売上明細行オブジェクト配列を取得します。
        /// </summary>
        /// <param name="filterExpression">フィルタをかけるための基準となる文字列</param>
        /// <param name="salesDetailDataTable">売上明細データテーブルオブジェクト</param>
        /// <returns>売上明細行オブジェクト配列</returns>
        public SalesInputDataSet.SalesDetailRow[] SelectSalesDetailRows(string filterExpression, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            SalesInputDataSet.SalesDetailRow[] salesDetailRowArray = null;

            try
            {
                DataRow[] rowArray = salesDetailDataTable.Select(filterExpression);

                if (rowArray != null)
                {
                    salesDetailRowArray = (SalesInputDataSet.SalesDetailRow[])rowArray;
                }
            }
            catch { }

            return salesDetailRowArray;
        }

        /// <summary>
        /// 指定したフィルタ文字列を使用して売上明細データテーブルの選択を行い、該当する売上明細行オブジェクト配列を取得します。(受注情報用)
        /// </summary>
        /// <param name="filterExpression">フィルタをかけるための基準となる文字列</param>
        /// <param name="salesDetailDataTable">売上明細データテーブルオブジェクト</param>
        /// <returns>売上明細行オブジェクト配列</returns>
        public SalesInputDataSet.SalesDetailAcceptAnOrderRow[] SelectSalesDetailAcptAnOdrRows(string filterExpression, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable salesDetailAcceptAnOrderDataTable)
        {
            SalesInputDataSet.SalesDetailAcceptAnOrderRow[] salesDetailAcceptAnOrderRowArray = null;

            try
            {
                DataRow[] rowArray = salesDetailAcceptAnOrderDataTable.Select(filterExpression);

                if (rowArray != null)
                {
                    salesDetailAcceptAnOrderRowArray = (SalesInputDataSet.SalesDetailAcceptAnOrderRow[])rowArray;
                }
            }
            catch { }

            return salesDetailAcceptAnOrderRowArray;
        }

        /// <summary>
        /// 商品が入力されている最終行の売上行番号を取得します。
        /// </summary>
        /// <returns>商品が入力されている最終行の売上行番号</returns>
        public int GetLastInputSalesRowNo()
        {
            DataRow[] rows = this._salesDetailDataTable.Select(this._salesDetailDataTable.GoodsNameColumn.ColumnName + " <> " + "''", this._salesDetailDataTable.SalesRowNoColumn.ColumnName + " ASC");

            if ((rows == null) || (rows.Length == 0))
            {
                return 0;
            }
            else
            {
                SalesInputDataSet.SalesDetailRow row = (SalesInputDataSet.SalesDetailRow)rows[rows.Length - 1];
                return row.SalesRowNo;
            }
        }

        /// <summary>
        /// 入力済行数取得処理
        /// </summary>
        /// <returns>入力済行数</returns>
        public int GetAlreadyInputRowCount()
        {
            int count = 0;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if (!string.IsNullOrEmpty(row.GoodsName))
                {
                    count++;
                }
            }

            return count;
        }

        /// <summary>
        /// 売上明細行オブジェクトのクリアを行います。
        /// </summary>
        /// <param name="stockRowNoList">クリア対象仕入行番号リスト</param>
        public void ClearSalesDetailRow(List<int> stockRowNoList)
        {
            foreach (int stockRowNo in stockRowNoList)
            {
                // 売上明細行クリア処理
                this.ClearSalesDetailRow(stockRowNo);
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">クリア対象仕入行番号</param>
        public void ClearSalesDetailRow(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow row = this.SalesDetailDataTable.FindBySalesSlipNumSalesRowNo(this.SalesSlip.SalesSlipNum.PadLeft(9, '0'), salesRowNo);

            if (row != null)
            {
                this.ClearSalesDetailRow(row);
            }
        }

        /// <summary>
        /// 売上明細行オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNo">クリア対象売上行番号</param>
        /// <param name="clearEditStatus">EditStatusクリアフラグ</param>
        public void ClearSalesDetailRow(int salesRowNo, bool clearEditStatus)
        {
            SalesInputDataSet.SalesDetailRow row = this.SalesDetailDataTable.FindBySalesSlipNumSalesRowNo(this.SalesSlip.SalesSlipNum.PadLeft(9, '0'), salesRowNo);

            if (row != null)
            {
                this.ClearSalesDetailRow(row, clearEditStatus);
            }
        }

        #region ●ツールチップ生成処理
        /// <summary>
        /// 入力可能数量情報ツールチップ文字列を生成します。
        /// </summary>
        /// <param name="stockRowNo">仕入行番号</param>
        /// <returns>入力可能数量情報ツールチップ文字列</returns>
        public string CreateStockCountInfoString(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum.PadLeft(9, '0'), salesRowNo);
            if ((salesDetailRow == null) ||
                (string.IsNullOrEmpty(salesDetailRow.GoodsName)) ||
                ((salesDetailRow.ShipmentCnt == 0) && (salesDetailRow.SalesSlipCdDtl == (int)SalesSlipCdDtl.Discount)) || // 行値引
                (salesDetailRow.SalesSlipCdDtl == (int)SalesSlipCdDtl.Annotation) || // 注釈
                (string.IsNullOrEmpty(salesDetailRow.GoodsNo)) ||
                (salesDetailRow.GoodsMakerCd == 0)) return string.Empty;

            //>>>2011/02/01
            if ((salesDetailRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) &&
                (this._salesSlip.InquiryNumber != 0) &&
                (this._salesSlip.OnlineKindDiv == (int)SalesSlipInputAcs.OnlineKindDiv.SCM))
            {
                return string.Empty;
            }
            //<<<2011/02/01

            int totalWidth = 4;

            StringBuilder toolTip = new StringBuilder();

            if ((salesDetailRow.SalesSlipDtlNumSrc != 0) && (salesDetailRow.AddUpEnableCnt != 0))
            {
                toolTip.Append("　");
                toolTip.Append("\r\n");

                string name = string.Empty;
                int sign = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;
                double addUpEnableCnt = salesDetailRow.AddUpEnableCnt * sign;

                if ((salesDetailRow.SalesSlipCdDtl == (int)SalesSlipCdDtl.RetGoods) ||
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Return))// 返品
                {
                    name = "返品可能数";
                }
                else if (salesDetailRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) // 
                {
                    name = "見積残";
                }
                else if (salesDetailRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder) // 
                {
                    name = "受注残";
                }
                else
                {
                    name = "出荷残";
                }

                toolTip.Append(string.Format("{0}", name.PadRight(totalWidth, '　') + "：" + addUpEnableCnt.ToString("#0.00")));
                toolTip.Append("\r\n");
            }

            if (salesDetailRow.AlreadyAddUpCnt != 0)
            {
                if (String.IsNullOrEmpty(toolTip.ToString().Trim()))
                {
                    toolTip.Append("　");
                    toolTip.Append("\r\n");
                }
                toolTip.Append("最低入力数".PadRight(totalWidth, '　') + "：" + salesDetailRow.AlreadyAddUpCnt.ToString() + "\r\n");
            }
            // --- ADD 2016/01/21 Y.Wakita ---------->>>>>
            if ((salesDetailRow.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment ||          // 受注ステータス＝40:貸出
                 salesDetailRow.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder) &&    // 受注ステータス＝20:受注
                (salesDetailRow.AcptAnOdrStatusSrc == 0) &&                                                         // 受注ステータス(元)＝0→元伝
                (salesDetailRow.SalesSlipDtlNum != 0))                                                              // 売上明細通番≠0→既存明細
            {
                toolTip = new StringBuilder();
                toolTip.Append("\r\n");
                if (salesDetailRow.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment)
                {
                    toolTip.Append("貸出数".PadRight(totalWidth, '　') + "：" + salesDetailRow.ShipmentCnt.ToString("#0.00") + "\r\n");         // 貸出数
                    // --- ADD 2016/02/26 Y.Wakita ---------->>>>>
                    toolTip.Append("計上数".PadRight(totalWidth, '　') + "：" + salesDetailRow.AlreadyAddUpCnt.ToString("#0.00") + "\r\n");         // 計上済数
                    toolTip.Append("未計上数".PadRight(totalWidth, '　') + "：" + salesDetailRow.AcptAnOdrRemainCnt.ToString("#0.00") + "\r\n");    // 受注残数
                    // --- ADD 2016/02/26 Y.Wakita ----------<<<<<
                }
                else if (salesDetailRow.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
                {
                    // --- UPD 2016/02/26 Y.Wakita ---------->>>>>
                    //toolTip.Append("受注数".PadRight(totalWidth, '　') + "：" + salesDetailRow.AcceptAnOrderCnt.ToString("#0.00") + "\r\n");    // 受注数
                    toolTip.Append("受注数".PadRight(totalWidth, '　') + "：" + salesDetailRow.AcceptAnOrderCntDisplay.ToString("#0.00") + "\r\n");    // 受注数
                    // --- UPD 2016/02/26 Y.Wakita ----------<<<<<
                    // --- ADD 2016/02/26 Y.Wakita ---------->>>>>
                    toolTip.Append("計上数".PadRight(totalWidth, '　') + "：" + salesDetailRow.AlreadyAddUpCnt.ToString("#0.00") + "\r\n");         // 計上済数
                    toolTip.Append("未計上数".PadRight(totalWidth, '　') + "：" + (salesDetailRow.AcceptAnOrderCntDisplay - salesDetailRow.AlreadyAddUpCnt).ToString("#0.00") + "\r\n");    // 受注残数
                    // --- ADD 2016/02/26 Y.Wakita ----------<<<<<
                }
                // --- DEL 2016/02/26 Y.Wakita ---------->>>>>
                //toolTip.Append("計上数".PadRight(totalWidth, '　') + "：" + salesDetailRow.AlreadyAddUpCnt.ToString("#0.00") + "\r\n");         // 計上済数
                //toolTip.Append("未計上数".PadRight(totalWidth, '　') + "：" + salesDetailRow.AcptAnOdrRemainCnt.ToString("#0.00") + "\r\n");    // 受注残数
                // --- DEL 2016/02/26 Y.Wakita ----------<<<<<
            }
            // --- ADD 2016/01/21 Y.Wakita ----------<<<<<

            return toolTip.ToString();

        }
        #endregion

        /// <summary>
        /// 読み取り専用行の存在チェックを行います。
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistAllReadonlyRow()
        {
            object value = this._salesDetailDataTable.Compute(
                            "COUNT(" + this._salesDetailDataTable.RowStatusColumn.ColumnName + ")",
                            this._salesDetailDataTable.EditStatusColumn.ColumnName + " = " + ctEDITSTATUS_AllReadOnly
                            );

            if (value is System.DBNull) return false;

            int count = (int)value;

            if (count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        #region ●売上明細より対象行番号リスト取得
        /// <summary>
        /// 売上明細データテーブル内で売上数量が０の売上明細行オブジェクトの売上行番号リストを取得します。
        /// </summary>
        /// <returns>売上行番号リスト</returns>
        public List<int> GetShipmentCntZeroSalesRowNoList()
        {
            List<int> deleteSalesRowNoList = new List<int>();

            DataRow[] rows = this._salesDetailDataTable.Select(string.Format("{0}='{1}' AND {2}<>{3}",
                                                               this._salesDetailDataTable.ShipmentCntColumn.ColumnName, "0", // 出荷数ゼロ
                                                               this._salesDetailDataTable.SalesSlipCdDtlColumn.ColumnName, (int)SalesSlipCdDtl.Annotation)); // 注釈以外

            if ((rows != null) && (rows.Length > 0))
            {
                SalesInputDataSet.SalesDetailRow[] salesDetailRows = (SalesInputDataSet.SalesDetailRow[])rows;

                foreach (SalesInputDataSet.SalesDetailRow row in salesDetailRows)
                {
                    deleteSalesRowNoList.Add(row.SalesRowNo);
                }
            }

            return deleteSalesRowNoList;
        }

        /// <summary>
        /// 売上明細データテーブル内で受注残数が０の売上明細行オブジェクトの売上行番号リストを取得します。
        /// </summary>
        /// <returns>売上行番号リスト</returns>
        public List<int> GetAcptAnOdrRemainCntZeroSalesRowNoList()
        {
            List<int> deleteSalesRowNoList = new List<int>();
            DataRow[] rows = this._salesDetailDataTable.Select(
                this._salesDetailDataTable.AcptAnOdrRemainCntColumn.ColumnName + " = 0");

            if ((rows != null) && (rows.Length > 0))
            {
                SalesInputDataSet.SalesDetailRow[] salesDetailRows = (SalesInputDataSet.SalesDetailRow[])rows;

                foreach (SalesInputDataSet.SalesDetailRow row in salesDetailRows)
                {
                    deleteSalesRowNoList.Add(row.SalesRowNo);
                }
            }

            return deleteSalesRowNoList;
        }

        /// <summary>
        /// 売上明細データテーブル内で商品名称が空白の売上明細行オブジェクトの売上行番号リストを取得します。
        /// </summary>
        /// <returns>売上行番号リスト</returns>
        public List<int> GetEmptySalesRowNoList()
        {
            List<int> deleteStockRowNoList = new List<int>();

            DataRow[] rows = this._salesDetailDataTable.Select(
                this._salesDetailDataTable.GoodsNameColumn.ColumnName + " = ''");

            if ((rows != null) && (rows.Length > 0))
            {
                SalesInputDataSet.SalesDetailRow[] salesDetailRows = (SalesInputDataSet.SalesDetailRow[])rows;

                foreach (SalesInputDataSet.SalesDetailRow row in salesDetailRows)
                {
                    deleteStockRowNoList.Add(row.SalesRowNo);
                }
            }

            return deleteStockRowNoList;
        }

        /// <summary>
        /// 売上明細データテーブル内で仕入同時可能な売上明細行オブジェクトの売上行番号リストを取得します。
        /// </summary>
        /// <returns>売上行番号リスト</returns>
        public List<int> GetInputStockInfoSalesRowNoList()
        {
            List<int> salesRowNoList = new List<int>();

            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in this._salesDetailDataTable)
            {
                if ((this.ExistOrderInfo(salesDetailRow.SalesRowNo)) ||
                    (this.ExistSalesDetailWarehouseCode(salesDetailRow.SalesRowNo)) ||
                    //(!this.ExistSalesDetailGoodsNoAndGoodsMakerCd(salesDetailRow.SalesRowNo)) || // 2010/09/27
                    (!this.ExistSalesDetail(salesDetailRow.SalesRowNo)) || // 2010/09/27
                    (salesDetailRow.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount))
                {
                }
                else
                {
                    salesRowNoList.Add(salesDetailRow.SalesRowNo);
                }

            }

            return salesRowNoList;
        }

        /// <summary>
        /// 売上明細データテーブル内で仕入同時可能な売上明細行オブジェクトの売上行番号を取得します。
        /// </summary>
        /// <param name="targetRowNo"></param>
        /// <returns></returns>
        /// <remarks>targetRowNoから降順にチェック</remarks>
        public int GetInputStockInfoSalesRowNo(int targetRowNo)
        {
            List<int> salesRowNoList = this.GetInputStockInfoSalesRowNoList();
            int retRowNo = -1;
            for (int index = salesRowNoList.Count - 1; index >= 0; index--)
            {
                if (salesRowNoList[index] < targetRowNo)
                {
                    retRowNo = salesRowNoList[index];
                    break;
                }
            }

            return retRowNo;
        }
        #endregion

        /// <summary>
        /// 率算定処理
        /// </summary>
        /// <param name="numerator">数値(分子)</param>
        /// <param name="denominator">数値(分母)</param>
        /// <param name="rate">率</param>
        public void GetRate(double numerator, double denominator, out double rate)
        {
            rate = this._salesPriceCalculate.CalculateMarginRate(numerator, denominator);
        }

        /// <summary>
        /// 単価情報確認用オブジェクト取得
        /// </summary>
        /// <param name="stockRowNo">行番号</param>
        /// <returns>単価情報確認用オブジェクト</returns>
        public UnPrcInfoConf GetUnitPriceInfoConf(int salesRowNo, string unitPriceKind)
        {
            UnPrcInfoConf unPrcInfoConf = new UnPrcInfoConf();

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlip.SalesSlipNum.PadLeft(9, '0'), salesRowNo);

            if (row != null)
            {
                // 共通項目
                //unPrcInfoConf.SectionCode = this._salesSlip.ResultsAddUpSecCd;     		// 拠点コード // 2009/09/09 DEL
                unPrcInfoConf.CustomerCode = this._salesSlip.CustomerCode;  			// 得意先コード
                unPrcInfoConf.CustomerSnm = this._salesSlip.CustomerSnm;				// 得意先略称
                unPrcInfoConf.SupplierCd = row.SupplierCd;				                // 仕入先コード
                unPrcInfoConf.SupplierSnm = row.SupplierSnm;			            	// 仕入先略称
                unPrcInfoConf.CustRateGrpCode = row.CustRateGrpCode;            		// 得意先掛率グループコード
                unPrcInfoConf.GoodsNo = row.GoodsNo;									// 商品番号
                unPrcInfoConf.GoodsName = row.GoodsName;								// 商品名称
                unPrcInfoConf.GoodsMakerCd = row.GoodsMakerCd;							// 商品メーカーコード
                unPrcInfoConf.MakerName = row.MakerName;								// メーカー名称
                unPrcInfoConf.BLGoodsCode = row.RateBLGoodsCode;						// BL商品コード
                unPrcInfoConf.BLGoodsFullName = row.RateBLGoodsName;					// BL商品コード名称（全角）
                unPrcInfoConf.BLGroupCode = row.RateBLGroupCode;
                unPrcInfoConf.BLGroupName = row.RateBLGroupName;
                unPrcInfoConf.GoodsRateGrpCode = row.RateGoodsRateGrpCd;
                unPrcInfoConf.GoodsRateGrpCodeNm = row.RateGoodsRateGrpNm;
                unPrcInfoConf.GoodsRateRank = row.GoodsRateRank;						// 商品掛率ランク
                unPrcInfoConf.TaxationDivCd = row.TaxationDivCd;                        // 課税区分
                unPrcInfoConf.TotalAmountDispWayCd = this._salesSlip.TotalAmountDispWayCd; // 総額表示区分
                unPrcInfoConf.TtlAmntDspRateDivCd = this._salesSlipInputInitDataAcs.GetAllDefSet().TtlAmntDspRateDivCd; // 総額表示掛率適用区分

                //unPrcInfoConf.PriceApplyDate = this._salesSlip.AddUpADate;
                unPrcInfoConf.PriceApplyDate = this._salesSlip.SalesDate;
                unPrcInfoConf.CountFl = row.ShipmentCnt;    							// 数量

                if (UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice == unitPriceKind)
                {
                    unPrcInfoConf.SectionCode = row.RateSectSalUnPrc;        		// 拠点コード // 2009/09/09 ADD
                    unPrcInfoConf.RateSettingDivide = row.RateDivSalUnPrc;			// 掛率設定区分
                    unPrcInfoConf.UnitPrcCalcDiv = row.UnPrcCalcCdSalUnPrc;			// 単価算出区分
                    switch ((UnitPriceCalculation.UnitPrcCalcDiv)row.UnPrcCalcCdSalUnPrc)
                    {
                        case UnitPriceCalculation.UnitPrcCalcDiv.RateVal:
                            unPrcInfoConf.RateVal = row.SalesRate;                          // 売価率
                            unPrcInfoConf.StdUnitPrice = row.StdUnPrcSalUnPrc;				// 基準単価
                            break;
                        case UnitPriceCalculation.UnitPrcCalcDiv.UpRate:
                            unPrcInfoConf.RateVal = row.CostUpRate;                         // 原価ＵＰ率
                            unPrcInfoConf.StdUnitPrice = row.StdUnPrcSalUnPrc;				// 基準単価
                            break;
                        case UnitPriceCalculation.UnitPrcCalcDiv.GrsProfitSecureRate:
                            unPrcInfoConf.RateVal = row.GrossProfitSecureRate;              // 粗利確保率(粗利率)
                            unPrcInfoConf.StdUnitPrice = row.StdUnPrcSalUnPrc;				// 基準単価
                            break;
                        case UnitPriceCalculation.UnitPrcCalcDiv.Price:
                            unPrcInfoConf.RateVal = row.SalesRate;                          // 売価率
                            // --- UPD m.suzuki 2011/02/16 ---------->>>>>
                            //unPrcInfoConf.StdUnitPrice = 0;
                            unPrcInfoConf.StdUnitPrice = row.ListPriceDisplay;
                            // --- UPD m.suzuki 2011/02/16 ----------<<<<<
                            break;
                    }

                    // --- ADD yangyi K2014/02/09 ------->>>>>>>>>>>
                    unPrcInfoConf.RateUpdateTimeSales = row.RateUpdateTimeSales;             //掛率更新日
                    // --- ADD yangyi K2014/02/09 -------<<<<<<<<<<<
                    unPrcInfoConf.UnPrcFracProcUnit = row.FracProcUnitSalUnPrc;		// 単価端数処理単位
                    unPrcInfoConf.UnPrcFracProcDiv = row.FracProcSalUnPrc;			// 単価端数処理区分
                    unPrcInfoConf.UnitPriceTaxExcFl = row.SalesUnPrcTaxExcFl;  		// 単価（税抜）
                    unPrcInfoConf.UnitPriceTaxIncFl = row.SalesUnPrcTaxIncFl;       // 単価（税込）
                    unPrcInfoConf.ListPriceTaxExcFl = row.ListPriceTaxExcFl;        // 定価（税抜）
                    unPrcInfoConf.ListPriceTaxIncFl = row.ListPriceTaxIncFl;        // 定価（税込）
                    unPrcInfoConf.SalesUnitCostTaxExcFl = row.CostTaxExc;           // 原価単価（税抜）
                    unPrcInfoConf.SalesUnitCostTaxIncFl = row.CostTaxInc;           // 原価単価（税込）
                }
                else if (UnitPriceCalculation.ctUnitPriceKind_UnitCost == unitPriceKind)
                {
                    unPrcInfoConf.SectionCode = row.RateSectCstUnPrc;        		// 拠点コード // 2009/09/09 ADD
                    unPrcInfoConf.RateSettingDivide = row.RateDivUnCst;		    	// 掛率設定区分
                    unPrcInfoConf.UnitPrcCalcDiv = row.UnPrcCalcCdUnCst;			// 単価算出区分
                    unPrcInfoConf.RateVal = row.CostRate;						    // 掛率
                    unPrcInfoConf.UnPrcFracProcUnit = row.FracProcUnitUnCst;    	// 単価端数処理単位
                    unPrcInfoConf.UnPrcFracProcDiv = row.FracProcUnCst; 			// 単価端数処理区分
                    // --- UPD m.suzuki 2011/02/16 ---------->>>>>
                    //unPrcInfoConf.StdUnitPrice = row.StdUnPrcUnCst; 				// 基準単価
                    if ((UnitPriceCalculation.UnitPrcCalcDiv)row.UnPrcCalcCdUnCst == UnitPriceCalculation.UnitPrcCalcDiv.Price &&
                        row.StdUnPrcUnCst == 0)
                    {
                        unPrcInfoConf.StdUnitPrice = row.ListPriceDisplay;
                    }
                    else
                    {
                        unPrcInfoConf.StdUnitPrice = row.StdUnPrcUnCst;
                    }
                    // --- UPD m.suzuki 2011/02/16 ----------<<<<<
                    unPrcInfoConf.UnitPriceTaxExcFl = row.SalesUnitCostTaxExc;      // 単価（税抜）
                    unPrcInfoConf.UnitPriceTaxIncFl = row.SalesUnitCostTaxInc;      // 単価（税込）
                    // --- ADD yangyi K2014/02/09 ------->>>>>>>>>>>
                    unPrcInfoConf.RateUpdateTimeUnit = row.RateUpdateTimeUnit;   //掛率更新日
                    // --- ADD yangyi K2014/02/09 -------<<<<<<<<<<<
                }
                else if (UnitPriceCalculation.ctUnitPriceKind_ListPrice == unitPriceKind)
                {
                    unPrcInfoConf.SectionCode = row.RateSectPriceUnPrc;        		// 拠点コード // 2009/09/09 ADD
                    unPrcInfoConf.PriceSelectDiv = row.PriceSelectDiv;              // 標準価格選択区分 // ADD 2013/01/24 鄧潘ハン REDMINE#34605
                    unPrcInfoConf.RateSettingDivide = row.RateDivLPrice;			// 掛率設定区分
                    unPrcInfoConf.UnitPrcCalcDiv = row.UnPrcCalcCdLPrice;			// 単価算出区分
                    unPrcInfoConf.RateVal = row.ListPriceRate;						// 掛率
                    unPrcInfoConf.UnPrcFracProcUnit = row.FracProcUnitLPrice;		// 単価端数処理単位
                    unPrcInfoConf.UnPrcFracProcDiv = row.FracProcLPrice;			// 単価端数処理区分
                    unPrcInfoConf.StdUnitPrice = row.StdUnPrcLPrice;				// 基準単価
                    unPrcInfoConf.UnitPriceTaxExcFl = row.ListPriceTaxExcFl;        // 単価（税抜）
                    unPrcInfoConf.UnitPriceTaxIncFl = row.ListPriceTaxIncFl;        // 単価（税込）
                }
                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34605-------- >>>>>
                //拠点情報を取得
                SecInfoSet　secInfoSet = this._salesSlipInputInitDataAcs.GetSecInfo(unPrcInfoConf.SectionCode.Trim());
                if (secInfoSet != null)
                {
                    //拠点ガイド名称セット
                    unPrcInfoConf.SectionGuideNm = secInfoSet.SectionGuideNm;
                    //掛率Infoがある場合、価格表示区分は空白を表示
                    unPrcInfoConf.PriceSelectDiv = -1;
                }
                else
                {
                    if (unPrcInfoConf.SectionCode.Trim() == "00")
                    {
                        unPrcInfoConf.SectionGuideNm = "全社共通";
                        //掛率Infoがある場合、価格表示区分は空白を表示
                        unPrcInfoConf.PriceSelectDiv = -1;
                    }
                    else
                    {
                        unPrcInfoConf.SectionGuideNm = string.Empty;
                    }
                }

                //売上全体設定で、表示区分プロセスはしない場合、またこの商品の商品属性は純正である場合、価格表示区分は空白を表示
                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().PriceSelectDispDiv == 0 || row.GoodsMakerCd < 1000)
                {
                    unPrcInfoConf.PriceSelectDiv = -1;
                }
                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34605-------- <<<<<
            }
            return unPrcInfoConf;
        }

        /// <summary>
        /// 明細粗利率設定処理
        /// </summary>
        /// <param name="salesDetailList">売上明細データオブジェクト</param>
        public void SettingSalesDetailRowGrossProfitRate(List<SalesDetail> salesDetailList)
        {
            foreach (SalesDetail salesDetail in salesDetailList)
            {
                this.SettingSalesDetailRowGrossProfitRate(salesDetail.SalesRowNo);
            }
        }

        /// <summary>
        /// 明細粗利率設定処理（オーバーロード）
        /// </summary>
        public void SettingSalesDetailRowGrossProfitRate(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            double detailGrossProfitRate = 0;
            detailGrossProfitRate = this.SettingSalesDetailRowGrossProfitRate(row);
            if (row != null) row.DetailGrossProfitRate = detailGrossProfitRate;
        }

        /// <summary>
        /// 明細粗利率設定処理（オーバーロード）
        /// </summary>
        public double SettingSalesDetailRowGrossProfitRate(SalesInputDataSet.SalesDetailRow row)
        {
            double detailGrossProfitRate = 0;
            //if ((row != null) && (row.EditStatus != ctEDITSTATUS_RowDiscount))
            if (row != null)
            {
                int sign = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;

                // 粗利率は常に税抜きで算出
                detailGrossProfitRate = this.CalcGrossProfitRate(row.SalesMoneyTaxExc * sign, row.Cost * sign); // 小数第３位を四捨五入固定

            }
            return detailGrossProfitRate;
        }

        /// <summary>
        /// 明細粗利率設定処理
        /// </summary>
        public void SettingSalesDetailRowGrossProfitRateByIndex(int index)
        {
            this.SettingSalesDetailRowGrossProfitRate(this._salesDetailDataTable[index].SalesRowNo);
        }

        /// <summary>
        /// 粗利率算出処理
        /// </summary>
        /// <param name="salesMoney">売上金額</param>
        /// <param name="cost">原価金額</param>
        /// <returns></returns>
        public double CalcGrossProfitRate(long salesMoney, long cost)
        {
            double retRate = 0;
            if (salesMoney != 0)
            {
                this.GetRate((salesMoney - cost), salesMoney, out retRate); // 小数第３位を四捨五入固定
            }
            return retRate;
        }

        /// <summary>
        /// 粗利チェック
        /// </summary>
        /// <returns>0:適正,1:下限値未満,2:上限値以上</returns>
        public int MarginCheck(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {

                // 出荷数入力時のみチェック
                if (row.ShipmentCntDisplay == 0) return 0;

                // 原単価or売単価が入力されているときのみチェック
                if ((row.SalesUnitCost == 0) && (row.SalesUnPrcDisplay == 0)) return 0;


                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt() == null) return 0;

                // 下限値設定有り
                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().GrsProfitCheckLower != 0)
                {
                    if (row.DetailGrossProfitRate < this._salesSlipInputInitDataAcs.GetSalesTtlSt().GrsProfitCheckLower)
                    {
                        return 1;
                    }
                }

                // 上限値設定有り
                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().GrsProfitCheckUpper != 0)
                {
                    if (row.DetailGrossProfitRate >= this._salesSlipInputInitDataAcs.GetSalesTtlSt().GrsProfitCheckUpper)
                    {
                        return 2;
                    }
                }
            }

            return 0;
        }

        /// <summary>
        /// 共通キーセット処理
        /// </summary>
        /// <param name="row"></param>
        private void SettingSalesDetailRowDtlRelationGuid(ref SalesInputDataSet.SalesDetailRow row)
        {
            row.DtlRelationGuid = Guid.NewGuid();
        }

        /// <summary>
        /// BLコードガイド起動処理
        /// </summary>
        /// <param name="bLGoodsCdUMntList"></param>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.15 DEL
        //public int ExecuteBLGoodsCd(out List<BLGoodsCdUMnt> bLGoodsCdUMntList, int salesRowNo)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.15 DEL
        // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.15 ADD
        public int ExecuteBLGoodsCd(out List<BLGoodsCdUMnt> bLGoodsCdUMntList, int salesRowNo, GoodsAcs.BLGuideMode blGuideMode)
        // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.15 ADD
        {
            bLGoodsCdUMntList = new List<BLGoodsCdUMnt>();
            PMKEN01010E carInfo = new PMKEN01010E();
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if ((row != null) && (row.CarRelationGuid != Guid.Empty))
                carInfo = this.GetCarInfoFromDic(row.CarRelationGuid);
            else
                carInfo = this.GetCarInfoFromDic(this._beforeCarRelationGuid);
            if (carInfo == null) return -3; // 車輌情報なし
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.15 DEL
            //return this._salesSlipInputInitDataAcs.ExecuteBLGoodsCd(out bLGoodsCdUMntList, carInfo, this._salesSlip.CustomerCode);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.15 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.15 ADD
            return this._salesSlipInputInitDataAcs.ExecuteBLGoodsCd(out bLGoodsCdUMntList, carInfo, this._salesSlip.CustomerCode, blGuideMode);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.15 ADD
        }

        // --- ADD 2010/03/01 ---------->>>>>
        /// <summary>
        /// 削除対象伝票情報リストの取り込処理
        /// </summary>
        /// <param name="salesInfoList">削除対象伝票情報リスト</param>
        /// <returns>status</returns>
        /// <remarks>
        /// <br>Note       : 削除対象伝票情報リストの取り込処理を行います。</br>
        /// <br>Programmer : 李占川</br>
        /// <br>Date       : 2010/03/01</br>
        /// <br>Update Note: 2011/11/10 yangmj redmine#26413 計上残区分による伝票削除の変更</br>
        /// </remarks>
        public int GetSalesInfoList(out ArrayList salesInfoMsgList, out ArrayList salesInfoList)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            salesInfoMsgList = new ArrayList();
            salesInfoList = new ArrayList();

            // 計上元明細存在しない場合
            if (this._addUpOrgSalesDetailWorkList == null || this._addUpOrgSalesDetailWorkList.Count == 0)
            {
                return status;
            }

            Dictionary<string, List<AddUpOrgSalesDetailWork>> dic = new Dictionary<string, List<AddUpOrgSalesDetailWork>>();

            foreach (AddUpOrgSalesDetailWork addUpOrgSalesDetailWork in this._addUpOrgSalesDetailWorkList)
            {
                // --- ADD m.suzuki 2011/04/21 ---------->>>>>
                // 既に削除済みの計上元データは削除対象外
                if (addUpOrgSalesDetailWork.LogicalDeleteCode != (int)ConstantManagement.LogicalMode.GetData0) continue;
                // --- ADD m.suzuki 2011/04/21 ----------<<<<<

                string key = addUpOrgSalesDetailWork.AcptAnOdrStatus.ToString() + addUpOrgSalesDetailWork.SalesSlipNum;
                if (dic.ContainsKey(key))
                {
                    continue;
                }
                else
                {
                    dic.Add(key, new List<AddUpOrgSalesDetailWork>());
                }

                // 処理対象判定
                if (this.CheckInputMode(addUpOrgSalesDetailWork))
                {
                    // 計上元伝票読込
                    SalesSlip salesSlip;
                    List<SalesDetail> salesDetailList;
                    SearchDepsitMain depsitMain;
                    SearchDepositAlw depositAlw;
                    //----- UPD 2011/11/10 ------>>>>>
                    List<UOEOrderDtlWork> uoeOrderDtlWorkList;
                    //status = this.ReadDBDataForDelete(addUpOrgSalesDetailWork, out salesDetailList, out salesSlip, out depsitMain, out depositAlw);
                    status = this.ReadDBDataForDelete(addUpOrgSalesDetailWork, out salesDetailList, out salesSlip, out depsitMain, out depositAlw, out uoeOrderDtlWorkList);
                    //----- UPD 2011/11/10 ------<<<<<

                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        // 削除対象チェック
                        if (this.CheckDeleteData(addUpOrgSalesDetailWork, salesDetailList))
                        {
                            // 削除対象伝票情報保持
                            ArrayList salesDetailInfoList = new ArrayList();
                            salesDetailInfoList.Add(salesSlip);
                            salesDetailInfoList.Add(salesDetailList);
                            salesDetailInfoList.Add(uoeOrderDtlWorkList);//ADD 2011/11/10
                            salesDetailInfoList.Add(depsitMain);
                            salesDetailInfoList.Add(depositAlw);
                            salesInfoMsgList.Add(salesDetailInfoList);
                        }
                        else
                        {
                            // 削除対象伝票情報保持
                            ArrayList salesDetailInfoList = new ArrayList();
                            salesDetailInfoList.Add(salesSlip);
                            salesDetailInfoList.Add(salesDetailList);
                            salesDetailInfoList.Add(uoeOrderDtlWorkList);//ADD 2011/11/10
                            salesDetailInfoList.Add(depsitMain);
                            salesDetailInfoList.Add(depositAlw);
                            salesInfoList.Add(salesDetailInfoList);
                        }
                    }
                }
            }

            return status;
        }

        /// <summary>
        /// 伝票削除処理
        /// </summary>
        /// <param name="salesInfoList">削除対象伝票情報リスト</param>
        /// <param name="retMessage">結果メッセージ</param>
        /// <returns>status</returns>
        /// <remarks>
        /// <br>Note       : 伝票削除処理を行います。</br>
        /// <br>Programmer : 李占川</br>
        /// <br>Date       : 2010/03/01</br>
        /// <br>Update Note: 2011/11/10 yangmj redmine#26413 計上残区分による伝票削除の変更</br>
        /// <br>Update Note: 2012/02/07 鄧潘ハン</br>
        /// <br>管理番号   : 10707327-00 2012/03/28配信分</br>
        /// <br>             Redmine#28292 UOE売上伝票保存時エラーの変更</br>
        /// </remarks>
        public int DeleteDBData(ArrayList salesInfoList, out string retMessage)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            // 統合リスト
            CustomSerializeArrayList paraList = new CustomSerializeArrayList();

            foreach (ArrayList list in salesInfoList)
            {
                CustomSerializeArrayList paraDetailList = new CustomSerializeArrayList();

                SalesSlip salesSlip = list[0] as SalesSlip;
                //-----ADD 2011/11/10 ----->>>>>
                bool flag = false;
                List<UOEOrderDtlWork> uoeDetailList = list[2] as List<UOEOrderDtlWork>;
                if (uoeDetailList != null && uoeDetailList.Count != 0)
                {
                    foreach (UOEOrderDtlWork uoeDtlWork in uoeDetailList)
                    {
                        if (uoeDtlWork.SalesSlipNum.Equals(salesSlip.SalesSlipNum.PadLeft(9, '0'))
                            && uoeDtlWork.SectionCode.Equals(salesSlip.SectionCode))
                        {
                            flag = true;
                            break;
                        }
                    }
                    if (flag)
                    {
                        continue;
                    }
                }
                //-----ADD 2011/11/10 -----<<<<<
                IOWriteMAHNBDeleteWork deleteWork = new IOWriteMAHNBDeleteWork();
                deleteWork.EnterpriseCode = salesSlip.EnterpriseCode; // 企業コード
                deleteWork.UpdateDateTime = salesSlip.UpdateDateTime; // 更新日時
                deleteWork.AcptAnOdrStatus = salesSlip.AcptAnOdrStatus; // 受注ステータス
                deleteWork.SalesSlipNum = salesSlip.SalesSlipNum.PadLeft(9, '0');
                deleteWork.DebitNoteDiv = salesSlip.DebitNoteDiv; // 赤伝区分
                paraDetailList.Add(deleteWork);       // 売上データ

                List<SalesDetail> salesDetailList = list[1] as List<SalesDetail>;

                // --- ADD K2014/06/12 Y.Wakita ---------->>>>>
                #region フタバ個別対応
                if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaSlipPrtCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    for (int i = 0; i < salesDetailList.Count; i++)
                    {
                        salesDetailList[i].DtlRelationGuid = this._salesDetailDBDataList[i].DtlRelationGuid;    // 共通キー
                    }
                }
                #endregion
                // --- ADD K2014/06/12 Y.Wakita ----------<<<<<

                CustomSerializeArrayList salesDetailWorkList = new CustomSerializeArrayList();
                foreach (SalesDetail salesDetail in salesDetailList)
                {
                    SalesDetailWork salesDetailWork = new SalesDetailWork();
                    salesDetailWork = ConvertSalesSlip.ParamDataFromUIData(salesDetail); // 明細情報
                    salesDetailWorkList.Add(salesDetailWork);
                }
                paraDetailList.Add(salesDetailWorkList); // 売上明細データ

                // --- ADD K2014/06/12 Y.Wakita ---------->>>>>
                #region フタバ個別対応
                if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaSlipPrtCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    this._deleteFlg = true; // 削除フラグ
                    this._deleteAcptAnOdrStatus = deleteWork.AcptAnOdrStatus; // 受注ステータス

                    ArrayList salesDataList = new ArrayList();  // 売上データリスト
                    ArrayList acptDataList = new ArrayList();   // 受注データリスト
                    CustomSerializeArrayList salesData = new CustomSerializeArrayList();                    // 伝票情報クリア

                    salesData.Add(this._salesSlip);
                    salesData.Add(this._salesDetailDBDataList);

                    salesDataList.Add(salesData);

                    #region ●伝票明細追加情報
                    //---------------------------------------------------------------
                    // 伝票明細追加情報
                    //---------------------------------------------------------------
                    this.SettingSlipDetailAddInfoForSalesData(ref salesDataList, ref acptDataList);
                    #endregion

                    #region ●売上情報
                    //------------------------------------------------------
                    // 売上情報
                    //------------------------------------------------------
                    foreach (CustomSerializeArrayList list2 in salesDataList)
                    {
                        #region 元データ用変数
                        List<SlipDetailAddInfoWork> sourceSlipDetailAddInfoWorkList = new List<SlipDetailAddInfoWork>();
                        #endregion

                        #region データ格納用変数
                        ArrayList slipDetailAddInfoWorkList = new ArrayList();                          // 伝票明細追加情報リスト
                        #endregion

                        #region 元データ分解
                        //------------------------------------------------------
                        // 元データ分解
                        //------------------------------------------------------
                        foreach (object obj in list2)
                        {
                            if (obj is List<SlipDetailAddInfoWork>)
                            {
                                sourceSlipDetailAddInfoWorkList = (List<SlipDetailAddInfoWork>)obj;
                            }
                        }
                        #endregion

                        if (sourceSlipDetailAddInfoWorkList.Count != 0)
                        {
                            #region 伝票明細追加情報
                            slipDetailAddInfoWorkList.AddRange(sourceSlipDetailAddInfoWorkList);
                            #endregion

                            #region データセット
                            // 伝票明細追加情報リストセット
                            if (slipDetailAddInfoWorkList.Count > 0) paraDetailList.Add(slipDetailAddInfoWorkList);
                            #endregion

                        }
                    }
                    #endregion
                }
                #endregion

                this._deleteFlg = false; // 削除フラグ
                // --- ADD K2014/06/12 Y.Wakita ----------<<<<<

                // 入金情報
                SearchDepsitMain depositMain = list[2] as SearchDepsitMain;
                SearchDepositAlw depositAlw = list[3] as SearchDepositAlw;
                if (depositMain != null && depositMain.DepositSlipNo != 0)// ADD 2011/11/10
                //if (depositMain.DepositSlipNo != 0)// DEL 2011/11/10
                {
                    DepsitDataWork depositWork = ConvertSalesSlip.ParamDataFromUIData(depositMain);
                    paraDetailList.Add(depositWork);      // 入金データ
                    DepositAlwWork depositAlwWork = (DepositAlwWork)DBAndXMLDataMergeParts.CopyPropertyInClass(depositAlw, typeof(DepositAlwWork));
                    paraDetailList.Add(depositAlwWork);   // 入金引当データ
                }

                paraList.Add(paraDetailList);
            }

            //---ADD 鄧潘ハン 2012/02/07 Redmine#28292------>>>>>
            if (paraList.Count > 0 && paraList != null)
            {
            //---ADD 鄧潘ハン 2012/02/07 Redmine#28292------<<<<<
                //------------------------------------------------------
                // リモート参照用パラメータ
                //------------------------------------------------------
                IOWriteCtrlOptWork iOWriteCtrlOptWork = new IOWriteCtrlOptWork();                   // リモート参照用パラメータ
                this.SettingIOWriteCtrlOptWork(SalesSlipInputAcs.OptWorkSettingType.Delete, out iOWriteCtrlOptWork);                             // リモート参照用パラメータ設定処理
                paraList.Add(iOWriteCtrlOptWork);

                object dataObj = (object)paraList;

                retMessage = string.Empty;
                string retItemInfo;
                status = this._iIOWriteControlDB.Delete(ref dataObj, out retMessage, out retItemInfo);
            //---ADD 鄧潘ハン 2012/02/07 Redmine#28292------>>>>>
            }
            else
            {
                retMessage = string.Empty;
            }
            //---ADD 鄧潘ハン 2012/02/07 Redmine#28292------<<<<<
            
            return status;
        }
        // --- ADD 2010/03/01 ----------<<<<<

        //>>>2010/04/28
        /// <summary>
        /// アクセスクラスキャッシュ情報クリア
        /// </summary>
        public void AcsCacheClear()
        {
            this._supplierAcs.DeleteAllFromCache();
            this._uoeSupplierAcs.DeleteAllFromCache();
        }
        //<<<2010/04/28

        // 2010/06/12 Add >>>
        /// <summary>
        /// メール用初期データ生成処理
        /// </summary>
        /// <param name="fileName"></param>
        public void MakeMailDefaultData(out string fileName)
        {
            fileName = string.Empty;
            // ヘッダ
            MailDefaultHeader header = MailDefaultDataConverter.ConverToMailDefaultHeader(this._salesSlip);
            header.Mode = 0;

            // 車両情報
            MailDefaultCar car = new MailDefaultCar();
            ArrayList carArrayList;
            this.GetCurrentCarManagementWorkList(out carArrayList);
            if (carArrayList != null && carArrayList.Count > 0 && carArrayList[0] is CarManagementWork)
            {
                car = MailDefaultDataConverter.ConverToMailDefaultCar(carArrayList[0] as CarManagementWork);
            }

            // 明細
            List<MailDefaultDetail> detailList = new List<MailDefaultDetail>();
            List<SalesDetail> salesDetailList;
            this.GetUIDataFromTable(this._salesSlip, this._salesDetailDataTable, out salesDetailList);
            if (salesDetailList != null && salesDetailList.Count > 0)
            {
                foreach (SalesDetail detail in salesDetailList)
                {
                    detailList.Add(MailDefaultDataConverter.ConverToMailDefaultDetail(detail));
                }
            }

            MailDefaultDataAcs mailDefaultDataAcs = new MailDefaultDataAcs();
            mailDefaultDataAcs.Write(header, car, detailList, out fileName);
        }
        // 2010/06/12 Add <<<

        // 2010/06/15 Add >>>
        /// <summary>
        /// 連携フォルダに対し、CSV出力を行います。
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="linkDir">連携フォルダ</param>
        /// <returns>MethodResult</returns>
        public int CopyToRC(int salesRowNo)
        {
            string linkDir;
            linkDir = this._salesSlipInputConstructionAcs.SalesInputConstruction.RCLinkDirectoryValue;

            const string ctFileName = "PMRCINFO";

            string filepath = System.IO.Path.Combine(linkDir, ctFileName + "." + Environment.MachineName);

            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row == null || string.IsNullOrEmpty(row.GoodsName)) return 5;

            SalesInputDataSet.CarInfoRow carInfoRow = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);

            #region 出力用データテーブルの生成

            DataTable dt = new DataTable();
            dt.Columns.Add(this._carInfoDataTable.ModelDesignationNoColumn.ColumnName, typeof(int));    // 型式指定番号
            dt.Columns.Add(this._carInfoDataTable.CategoryNoColumn.ColumnName, typeof(int));            // 類別区分番号
            dt.Columns.Add(this._carInfoDataTable.FullModelColumn.ColumnName, typeof(string));          // 型式(フル型式)
            dt.Columns.Add(this._carInfoDataTable.MakerCodeColumn.ColumnName, typeof(int));             // カーメーカーコード
            dt.Columns.Add(this._carInfoDataTable.ModelCodeColumn.ColumnName, typeof(int));             // 車種コード
            dt.Columns.Add(this._carInfoDataTable.ModelSubCodeColumn.ColumnName, typeof(int));          // 車種サブコード
            dt.Columns.Add(this._carInfoDataTable.ModelHalfNameColumn.ColumnName, typeof(string));      // 車種名称
            dt.Columns.Add(this._carInfoDataTable.FirstEntryDateColumn.ColumnName, typeof(int));        // 年式
            dt.Columns.Add(this._carInfoDataTable.FrameNoColumn.ColumnName, typeof(int));               // 車台番号
            dt.Columns.Add(this._carInfoDataTable.ColorCodeColumn.ColumnName, typeof(string));          // カラー№
            dt.Columns.Add(this._carInfoDataTable.TrimCodeColumn.ColumnName, typeof(string));           // トリム№
            dt.Columns.Add(this._salesDetailDataTable.GoodsNoColumn.ColumnName, typeof(string));        // 品番(ハイフン付き)
            dt.Columns.Add(this._salesDetailDataTable.GoodsNameKanaColumn.ColumnName, typeof(string));  // 品名

            #endregion

            #region データテーブルへデータセット

            DataRow dr = dt.NewRow();

            if (carInfoRow != null)
            {
                dr[this._carInfoDataTable.ModelDesignationNoColumn.ColumnName] = carInfoRow.ModelDesignationNo;     // 型式指定番号
                dr[this._carInfoDataTable.CategoryNoColumn.ColumnName] = carInfoRow.CategoryNo;                     // 類別区分番号
                dr[this._carInfoDataTable.FullModelColumn.ColumnName] = carInfoRow.FullModel;                       // 型式(フル型式)
                dr[this._carInfoDataTable.MakerCodeColumn.ColumnName] = carInfoRow.MakerCode;                       // カーメーカーコード
                dr[this._carInfoDataTable.ModelCodeColumn.ColumnName] = carInfoRow.ModelCode;                       // 車種コード
                dr[this._carInfoDataTable.ModelSubCodeColumn.ColumnName] = carInfoRow.ModelSubCode;                 // 車種サブコード
                dr[this._carInfoDataTable.ModelHalfNameColumn.ColumnName] = carInfoRow.ModelHalfName;               // 車種名称
                dr[this._carInfoDataTable.FirstEntryDateColumn.ColumnName] = carInfoRow.ProduceTypeOfYearInput * 100; // 年式
                dr[this._carInfoDataTable.FrameNoColumn.ColumnName] = TStrConv.StrToIntDef(carInfoRow.FrameNo, 0);  // 車台番号
                dr[this._carInfoDataTable.ColorCodeColumn.ColumnName] = carInfoRow.ColorCode;                       // カラー№
                dr[this._carInfoDataTable.TrimCodeColumn.ColumnName] = carInfoRow.TrimCode;                         // トリム№
            }
            dr[this._salesDetailDataTable.GoodsNoColumn.ColumnName] = row.GoodsNo;                  // 品番(ハイフン付き)
            dr[this._salesDetailDataTable.GoodsNameKanaColumn.ColumnName] = row.GoodsNameKana;      // 品名

            dt.Rows.Add(dr);
            #endregion

            #region 出力するカラムの指定

            List<string> columnList = new List<string>();

            columnList.Add(this._carInfoDataTable.ModelDesignationNoColumn.ColumnName);     // 型式指定番号
            columnList.Add(this._carInfoDataTable.CategoryNoColumn.ColumnName);             // 類別区分番号
            columnList.Add(this._carInfoDataTable.FullModelColumn.ColumnName);              // 型式(フル型式)
            columnList.Add(this._carInfoDataTable.MakerCodeColumn.ColumnName);              // カーメーカーコード
            columnList.Add(this._carInfoDataTable.ModelCodeColumn.ColumnName);              // 車種コード
            columnList.Add(this._carInfoDataTable.ModelSubCodeColumn.ColumnName);           // 車種サブコード
            columnList.Add(this._carInfoDataTable.ModelHalfNameColumn.ColumnName);          // 車種名称
            columnList.Add(this._carInfoDataTable.FirstEntryDateColumn.ColumnName);         // 年式
            columnList.Add(this._carInfoDataTable.FrameNoColumn.ColumnName);                // 車台番号
            columnList.Add(this._carInfoDataTable.ColorCodeColumn.ColumnName);              // カラー№
            columnList.Add(this._carInfoDataTable.TrimCodeColumn.ColumnName);               // トリム№
            columnList.Add(this._salesDetailDataTable.GoodsNoColumn.ColumnName);            // 品番(ハイフン付き)
            columnList.Add(this._salesDetailDataTable.GoodsNameKanaColumn.ColumnName);      // 品名

            #endregion

            #region テキスト出力部品のプロパティ設定

            FormattedTextWriter ftw = new FormattedTextWriter();
            List<Type> typeList = new List<Type>();
            typeList.Add(typeof(string));
            ftw.DataSource = dt;
            ftw.OutputFileName = filepath;
            ftw.SchemeList = columnList;
            ftw.Splitter = ",";
            ftw.Encloser = @"""";
            ftw.EnclosingTypeList = typeList;
            ftw.CaptionOutput = false;
            ftw.FixedLength = false;

            int cnt;
            int status = ftw.TextOut(out cnt);
            #endregion

            return (status == 0) ? 0 : -1;
        }
        // 2010/06/15 Add <<<

        // ADD 2012/08/17 SCM障害№154 --------------->>>>>
        #region ●PCC接続設定（企業・拠点連結設定）情報の取得
        /// <summary>
        /// PCC接続設定（企業・拠点連結設定）情報の取得
        /// </summary>
        /// <param name="sourceSalesSlip"></param>
        /// <returns>(0:連結設定なし, 1:連結設定あり)</returns>
        public int GetCommMethod(SalesSlip sourceSalesSlip)
        {
            ScmEpScCnt scmEpScCnt = null;
            string customerEnterpriseCode;
            string customerSectionCode;
            int result = 0;
            int customerCode = sourceSalesSlip.CustomerCode;
            int status = -1;

            customerEnterpriseCode = sourceSalesSlip.InqOriginalEpCd.Trim();//@@@@20230303
            customerSectionCode = sourceSalesSlip.InqOriginalSecCd;
            // 得意先の企業・拠点コードが未設定ならば0:連結設定なしで返す。
            if (string.IsNullOrEmpty(customerEnterpriseCode) || string.IsNullOrEmpty(customerSectionCode))
            {
                return result;
            }

            bool msgDiv;
            string errMsg;
            ScmEpScCntAcs scmEpScCntAcs = new ScmEpScCntAcs();
            //ＰＣＣ接続情報の取得
            status = scmEpScCntAcs.ReadScmEpScCnt(customerEnterpriseCode, customerSectionCode, this._enterpriseCode, this._loginSectionCode, out scmEpScCnt, out msgDiv, out errMsg);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                // 「部品問合・発注」「BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑ」の何れかにチェックが付いている場合に1:連携設定ありとする
                if (scmEpScCnt.PccUoeCommMethod == 1 || scmEpScCnt.ScmCommMethod == 1)
                {
                    result = 1;
                }
                else
                {
                    //0:通常
                    result = 0;
                }
            }
            else
            {
                //ＰＣＣ接続情報が取得されない場合、0:連携設定なし
                result = 0;
            }
            return result;
        }
        #endregion
        // ADD 2012/08/17 SCM障害№154 ---------------<<<<<

        # endregion

        // ===================================================================================== //
        // スタティックメソッド
        // ===================================================================================== //
        # region Static Method
        #region ●伝票区分関係
        /// <summary>
        /// 表示用伝票区分より、データ用の伝票区分、売掛区分をセットします
        /// </summary>
        /// <param name="salesSlip">売上オブジェクト</param>
        static public void SetSlipCdAndAccRecDivCdFromDisplay(ref SalesSlip salesSlip)
        {
            int salesSlipCd;
            int accRecDivCd;

            GetSlipCdAndAccPayDivCdFromSupplierSlipDisplay(salesSlip.SalesSlipDisplay, out salesSlipCd, out accRecDivCd);
            salesSlip.SalesSlipCd = salesSlipCd;
            salesSlip.AccRecDivCd = accRecDivCd;
        }

        /// <summary>
        /// 表示用売上伝票区分より、売上伝票区分、売掛区分を取得します。
        /// </summary>
        /// <param name="salesSlipDisplay">表示用売上伝票区分</param>
        /// <param name="salesSlipCd">売上伝票区分</param>
        /// <param name="accRecDivCd">売掛区分</param>
        static public void GetSlipCdAndAccPayDivCdFromSupplierSlipDisplay(int salesSlipDisplay, out int salesSlipCd, out int accRecDivCd)
        {
            // 初期値は掛売上
            salesSlipCd = (int)SalesSlipCd.Sales;
            accRecDivCd = (int)AccRecDivCd.AccRec;
            switch ((SalesSlipDisplay)salesSlipDisplay)
            {
                case SalesSlipDisplay.AccRec:                // 掛売上
                    {
                        salesSlipCd = (int)SalesSlipCd.Sales;
                        accRecDivCd = (int)AccRecDivCd.AccRec;
                        break;
                    }
                case SalesSlipDisplay.AccRecRetGoods:        // 掛返品
                    {
                        salesSlipCd = (int)SalesSlipCd.RetGoods;
                        accRecDivCd = (int)AccRecDivCd.AccRec;
                        break;
                    }
                case SalesSlipDisplay.Cash:                  // 現金売上
                    {
                        salesSlipCd = (int)SalesSlipCd.Sales;
                        accRecDivCd = (int)AccRecDivCd.NonAccRec;
                        break;
                    }
                case SalesSlipDisplay.CashRetGoods:          // 現金返品
                    {
                        salesSlipCd = (int)SalesSlipCd.RetGoods;
                        accRecDivCd = (int)AccRecDivCd.NonAccRec;
                        break;
                    }
            } // end switch
        }

        /// <summary>
        /// データの伝票区分、売掛区分より、表示用伝票区分をセットします
        /// </summary>
        /// <param name="salesSlip">売上オブジェクト</param>
        static public void SetDisplayFromSlipCdAndAccPayDivCd(ref SalesSlip salesSlip)
        {
            salesSlip.SalesSlipDisplay = GetSupplierSlipDisplayFromSlipCdAndAccPayDivCd(salesSlip.SalesSlipCd, salesSlip.AccRecDivCd);
        }

        /// <summary>
        /// 売上伝票区分、売掛区分より、表示用売上伝票区分を取得します。
        /// </summary>
        /// <param name="salesSlipCd">売上伝票区分</param>
        /// <param name="accRecDivCd">売掛区分</param>
        /// <returns>表示用売上伝票区分</returns>
        static public int GetSupplierSlipDisplayFromSlipCdAndAccPayDivCd(int salesSlipCd, int accRecDivCd)
        {
            int value = 0;
            switch (salesSlipCd)
            {
                case (int)SalesSlipCd.Sales: // 売上
                    {
                        value = 10;
                        break;
                    }
                case (int)SalesSlipCd.RetGoods: // 返品
                    {
                        value = 20;
                        break;
                    }
            }
            switch (accRecDivCd)
            {
                case (int)AccRecDivCd.NonAccRec: // 売掛なし
                    {
                        value += 20;
                        break;
                    }
                case (int)AccRecDivCd.AccRec: // 売掛あり
                    {
                        break;
                    }
            }
            return value;
        }
        #endregion

        #region ●受注ステータス関係
        /// <summary>
        /// 表示用受注ステータスより、データ用の受注ステータスおよび見積区分をセットします
        /// </summary>
        /// <param name="salesSlip">売上オブジェクト</param>
        static public void SetAcptAnOdrStatusAndEstimateDivideFromDisplay(ref SalesSlip salesSlip)
        {
            int acptAnOdrStatus = salesSlip.AcptAnOdrStatus;
            int estimateDivide;

            GetAcptAnOdrStatusAndEstimateDivideFromDisplay(salesSlip.AcptAnOdrStatusDisplay, ref acptAnOdrStatus, out estimateDivide);
            salesSlip.AcptAnOdrStatus = acptAnOdrStatus;
            salesSlip.EstimateDivide = estimateDivide;
        }

        /// <summary>
        /// 表示用受注ステータスより、データ用の受注ステータスおよび見積区分を取得します
        /// </summary>
        /// <param name="acptAnOdrStatusDisplay">表示用受注ステータス</param>
        /// <param name="acptAnOdrStatus">受注ステータス</param>
        /// <param name="estimateDivide">見積区分</param>
        static public void GetAcptAnOdrStatusAndEstimateDivideFromDisplay(int acptAnOdrStatusDisplay, ref int acptAnOdrStatus, out int estimateDivide)
        {
            acptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales;
            estimateDivide = (int)SalesSlipInputAcs.EstimateDivide.None;
            switch ((AcptAnOdrStatusState)acptAnOdrStatusDisplay)
            {
                case AcptAnOdrStatusState.Estimate:
                    acptAnOdrStatus = (int)AcptAnOdrStatusState.Estimate;
                    estimateDivide = (int)EstimateDivide.Estimate;
                    break;
                case AcptAnOdrStatusState.UnitPriceEstimate:
                    acptAnOdrStatus = (int)AcptAnOdrStatusState.Estimate;
                    estimateDivide = (int)EstimateDivide.UnitPriceEstimate;
                    break;
                case AcptAnOdrStatusState.SearchEstimate:
                    acptAnOdrStatus = (int)AcptAnOdrStatusState.Estimate;
                    estimateDivide = (int)EstimateDivide.SearchEstimate;
                    break;
                case AcptAnOdrStatusState.Sales:
                    if (acptAnOdrStatus != (int)AcptAnOdrStatusState.AcceptAnOrder)
                    {
                        acptAnOdrStatus = (int)AcptAnOdrStatusState.Sales;
                        estimateDivide = (int)EstimateDivide.None;
                    }
                    else
                    {
                        acptAnOdrStatus = (int)AcptAnOdrStatusState.AcceptAnOrder;
                        estimateDivide = (int)EstimateDivide.None;
                    }
                    break;
                case AcptAnOdrStatusState.Shipment:
                    acptAnOdrStatus = (int)AcptAnOdrStatusState.Shipment;
                    estimateDivide = (int)EstimateDivide.None;
                    break;
                // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                //// ADD 2013/02/05 T.Miyamoto ------------------------------>>>>>
                //case AcptAnOdrStatusState.AcceptAnOrder:
                //    acptAnOdrStatus = (int)AcptAnOdrStatusState.AcceptAnOrder;
                //    estimateDivide = (int)EstimateDivide.None;
                //    break;
                //// ADD 2013/02/05 T.Miyamoto ------------------------------<<<<<
                // --- DEL 2013/04/18 T.Nishi ----------<<<<<
            }
        }

        /// <summary>
        /// データの受注ステータス、見積区分より、表示用受注ステータスをセットします
        /// </summary>
        /// <param name="salesSlip">売上オブジェクト</param>
        static public void SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref SalesSlip salesSlip)
        {
            salesSlip.AcptAnOdrStatusDisplay = GetDisplayFromAcptAnOdrStatusAndEstimateDivide(salesSlip.AcptAnOdrStatus, salesSlip.EstimateDivide);
        }

        /// <summary>
        /// データの受注ステータス、見積区分より、表示用受注ステータスを取得します
        /// </summary>
        /// <param name="acptAnOdrStatus">受注ステータス</param>
        /// <param name="estimateDivide">見積区分</param>
        /// <returns></returns>
        static public int GetDisplayFromAcptAnOdrStatusAndEstimateDivide(int acptAnOdrStatus, int estimateDivide)
        {
            int value = 0;
            switch ((AcptAnOdrStatusState)acptAnOdrStatus)
            {
                case AcptAnOdrStatusState.Estimate:
                    if (estimateDivide == (int)EstimateDivide.Estimate)
                    {
                        // 通常見積
                        value = 10;
                    }
                    else
                    {
                        // 単価見積
                        value = 15;
                    }
                    break;
                case AcptAnOdrStatusState.AcceptAnOrder:
                    // --- UPD 2013/04/18 T.Nishi ---------->>>>>
                    //// UPD 2013/02/05 T.Miyamoto ------------------------------>>>>>
                    ////value = 30;
                    //value = 20;
                    //// UPD 2013/02/05 T.Miyamoto ------------------------------<<<<<
                    value = 30;
                    // --- UPD 2013/04/18 T.Nishi ----------<<<<<
                    break;
                case AcptAnOdrStatusState.Sales:
                    value = 30;
                    break;
                case AcptAnOdrStatusState.Shipment:
                    value = 40;
                    break;
            }
            return value;
        }
        #endregion

        #region ●締日計算関連
        /// <summary>
        /// 計上日計算処理
        /// </summary>
        /// <param name="targetDate">対象日</param>
        /// <param name="totalDay">締日</param>
        /// <param name="nTimeCalcStDate">来月勘定開始日</param>
        /// <param name="addUpADate">計上日(算出結果)</param>
        /// <param name="delayPaymentDiv">来勘区分(算出	結果)</param>
        public static void CalcAddUpDate(DateTime targetDate, int totalDay, int nTimeCalcStDate, out DateTime addUpADate, out int delayPaymentDiv)
        {
            // 基本的に対象日が計上日で当月請求
            addUpADate = targetDate;
            delayPaymentDiv = 0;

            // 締日、来月勘定開始日が設定されていない場合はそのまま終了
            if ((totalDay == 0) || (nTimeCalcStDate == 0))
                return;

            DateTime thisTimeAddUpDate = GetNextTotalDate(0, targetDate, totalDay);
            // 来月請求の場合は、今回請求日の翌日が計上日
            DateTime nextTimeAddUpDate = thisTimeAddUpDate.AddDays(1);


            // 来月勘定開始日 ≦ 締日
            if (nTimeCalcStDate <= totalDay)
            {
                // 対象日の日付が来月勘定開始日～締日の場合に来月勘定
                if ((nTimeCalcStDate <= targetDate.Day) && (targetDate.Day <= totalDay))
                {
                    addUpADate = nextTimeAddUpDate;
                    delayPaymentDiv = 1;
                }
            }
            // 来月勘定開始日 ＞ 締日
            else
            {
                // 対象日の日付が1日～締日、来月勘定開始日～末日の場合に来月勘定
                if ((1 <= targetDate.Day) && (targetDate.Day <= totalDay) ||
                    (nTimeCalcStDate <= targetDate.Day))
                {
                    addUpADate = nextTimeAddUpDate;
                    delayPaymentDiv = 1;
                }
            }
        }

        /// <summary>
        /// 指定日付の次回以降の締日を算出します。
        /// </summary>
        /// <param name="loopCnt">0:当月,1:翌月,2:翌々月...</param>
        /// <param name="targetdate">対象日</param>
        /// <param name="totalDay">締日</param>
        /// <returns></returns>
        private static DateTime GetNextTotalDate(int loopCnt, DateTime targetdate, int totalDay)
        {

            DateTime retDate = targetdate;

            // 対象月の実際の締日を取得
            int totalDayR = GetRealTotalDay(retDate, totalDay);

            // 対象日が実際の締日より大きい場合は1ヵ月加算
            if (targetdate.Day > totalDayR)
            {
                retDate = retDate.AddMonths(1);

                totalDayR = GetRealTotalDay(retDate, totalDay);
            }
            retDate = new DateTime(retDate.Year, retDate.Month, totalDayR);

            return (loopCnt == 0) ? retDate : GetNextTotalDate(loopCnt - 1, retDate.AddDays(1), totalDay);
        }

        /// <summary>
        /// 対象年月日、締日から、実際に締対象となる日付を算出します。
        /// </summary>
        /// <param name="targetDate">対象年月日</param>
        /// <param name="totalDay">設定上の締日</param>
        /// <returns>対象月の実際の締日</returns>
        private static int GetRealTotalDay(DateTime targetDate, int totalDay)
        {
            int retValue = totalDay;
            // 対象月の末日取得
            int lastDayofMonth = DateTime.DaysInMonth(targetDate.Year, targetDate.Month);

            if (lastDayofMonth < totalDay) retValue = lastDayofMonth;

            return retValue;
        }
        #endregion

        #region ●その他補助メソッド
        /// <summary>
        /// 比較関数
        /// </summary>
        /// <typeparam name="T">型指定</typeparam>
        /// <param name="condition">条件</param>
        /// <param name="valueOnTrue">Trueの時の値</param>
        /// <param name="valueOnFalse">Falseの時の値</param>
        /// <returns>条件により選択された値</returns>
        static public T diverge<T>(bool condition, T valueOnTrue, T valueOnFalse)
        {
            if (condition)
            {
                return valueOnTrue;
            }
            else
            {
                return valueOnFalse;
            }
        }
        #endregion
        # endregion

        // ===================================================================================== //
        // プライベートメソッド
        // ===================================================================================== //
        # region Private Methods
        // zhouzy add 20110919 begin
        /// <summary>
        /// PCC接続設定（企業・拠点連結設定）情報の取得
        /// </summary>
        /// <param name="sourceSalesSlip"></param>
        /// <returns>(0:SCM, 1:PCCUOE)</returns>
        private int GetCommethod(SalesSlip sourceSalesSlip)
        {
            ScmEpScCnt scmEpScCnt = null;
            string customerEnterpriseCode;
            string customerSectionCode;
            int result = 0;
            int customerCode = sourceSalesSlip.CustomerCode;
            int status = -1;
            //ＰＣＣ自社設定情報を取得
            //>>>2011/09/30
            //if (this._customerHTable == null)
            //{
            //GetCustomerHTable();
            //}
            //if (this._customerHTable != null && this._customerHTable.ContainsKey(customerCode))
            //{
            //<<<2011/09/30

            //>>>2011/09/30
            //PccCmpnySt parsePccCmpnySt = (PccCmpnySt)this._customerHTable[customerCode];
            //customerEnterpriseCode = parsePccCmpnySt.InqOriginalEpCd;
            //customerSectionCode = parsePccCmpnySt.InqOriginalSecCd;
            customerEnterpriseCode = sourceSalesSlip.InqOriginalEpCd.Trim();//@@@@20230303
            customerSectionCode = sourceSalesSlip.InqOriginalSecCd;
            //<<<2011/09/30
            // --- ADD m.suzuki 2011/10/20 ---------->>>>>
            // 得意先の企業・拠点コードが未設定ならば0:通常で返す。
            if (string.IsNullOrEmpty(customerEnterpriseCode) || string.IsNullOrEmpty(customerSectionCode))
            {
                return result;
            }
            // --- ADD m.suzuki 2011/10/20 ----------<<<<<

            bool msgDiv;
            string errMsg;
            // --- DEL 2011/11/12---------->>>>>
            //List<ScmEpCnect> scmEpCnectList;
            //List<ScmEpScCnt> scmEpScCntList;
            // --- DEL 2011/11/12----------<<<<<
            ScmEpScCntAcs scmEpScCntAcs = new ScmEpScCntAcs();
            //ＰＣＣ接続情報の取得
            //status = scmEpScCntAcs.SearchAll(customerEnterpriseCode, customerSectionCode, ConstantManagement.LogicalMode.GetData0, out scmEpCnectList, out scmEpScCntList, out msgDiv, out errMsg);// 2011.08.31 chenyd ADD  // DEL 2011/11/12
            status = scmEpScCntAcs.ReadScmEpScCnt(customerEnterpriseCode, customerSectionCode, this._enterpriseCode, this._loginSectionCode, out scmEpScCnt, out msgDiv, out errMsg);  // ADD 2011/11/12
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                // --- UPD 2011/11/12---------->>>>>
                //・「BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑ」にチェックが付いていない場合　⇒　0:通常
                //※「部品問合・発注」と「BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑ」の両方にチェックが付いている場合も1:PCC-UOE
                //if (scmEpScCntList != null && scmEpScCntList.Count > 0) 
                //{
                //    scmEpScCnt = scmEpScCntList[0];
                //    if (scmEpScCnt.PccUoeCommMethod == 1)
                //    {
                //        //1:PCC-UOE
                //        result = 1;
                //    }
                //    else
                //    {
                //        //0:通常
                //        result = 0;
                //    }
                //}
                //else
                //{
                //    //0:通常
                //    result = 0;
                //}
                //if (scmEpScCnt.PccUoeCommMethod == 1)//DEL 鄧潘ハン 2012/01/12   Redmine#27954
                if (scmEpScCnt.PccUoeCommMethod == 1 && this._salesSlip.AutoAnswerDivSCM != 0)//ADD 鄧潘ハン 2012/01/12   Redmine#27954
                {
                    //1:PCC-UOE
                    result = 1;
                }
                else
                {
                    //0:通常
                    result = 0;
                }
                // --- UPD 2011/11/12----------<<<<<
            }
            else
            {
                //ＰＣＣ接続情報が取得されない場合、0:通常
                result = 0;
            }
            //>>>2011/09/30
            //}
            //else 
            //{
            //    //ＰＣＣ自社設定情報が取得されない場合、0:通常
            //    result = 0;
            //}
            //<<<2011/09/30
            return result;
        }

        // 2012/08/30 ADD T.Yoshioka 2012/10月配信予定 SCM障害№10345 --------->>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// PCC接続設定（企業・拠点連結設定）情報の取得（売伝直接起動時用）
        /// </summary>
        /// <param name="sourceSalesSlip"></param>
        /// <returns>0:SCM(PCC for NS), 1:PCCUOE(BLP)</returns>
        private int GetCommethodDirect(SalesSlip sourceSalesSlip)
        {
            ScmEpScCnt scmEpScCnt = null;
            string customerEnterpriseCode;
            string customerSectionCode;
            int result = 0;
            int customerCode = sourceSalesSlip.CustomerCode;
            int status = -1;

            customerEnterpriseCode = sourceSalesSlip.InqOriginalEpCd.Trim();//@@@@20230303
            customerSectionCode = sourceSalesSlip.InqOriginalSecCd;
            // 得意先の企業・拠点コードが未設定ならば0:通常で返す。
            if (string.IsNullOrEmpty(customerEnterpriseCode) || string.IsNullOrEmpty(customerSectionCode))
            {
                return result;
            }

            bool msgDiv;
            string errMsg;
            ScmEpScCntAcs scmEpScCntAcs = new ScmEpScCntAcs();
            //ＰＣＣ接続情報の取得
            status = scmEpScCntAcs.ReadScmEpScCnt(customerEnterpriseCode, customerSectionCode, this._enterpriseCode, this._loginSectionCode, out scmEpScCnt, out msgDiv, out errMsg);  // ADD 2011/11/12
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                //・「BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑ」にチェックが付いていない場合　⇒　0:通常
                //※「部品問合・発注」と「BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑ」の両方にチェックが付いている場合も1:PCC-UOE
                if (scmEpScCnt.PccUoeCommMethod == 1)
                {
                    //1:PCC-UOE
                    result = 1;
                }
                else
                {
                    //0:通常
                    result = 0;
                }
            }
            else
            {
                //ＰＣＣ接続情報が取得されない場合、0:通常
                result = 0;
            }

            return result;
        }
        // 2012/08/30 ADD T.Yoshioka 2012/10月配信予定 SCM障害№10345 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// 自社設定得意先設定マスタ取得処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 自社設定得意先設定マスタを取得します。</br>
        /// <br>Programmer : 黄海霞</br>
        /// <br>Date       : 2011.09.14</br>
        /// </remarks>
        public void GetCustomerHTable()
        {
            if (this._pccCmpnyStAcs == null)
            {
                _pccCmpnyStAcs = new PccCmpnyStAcs();
            }
            PccCmpnySt parsePccCmpnySt = new PccCmpnySt();
            parsePccCmpnySt.InqOtherEpCd = this._enterpriseCode;
            parsePccCmpnySt.InqOtherSecCd = LoginInfoAcquisition.Employee.BelongSectionCode;
            List<PccCmpnySt> pccCmpnyStList = null;
            if (this._customerHTable == null)
            {
                this._customerHTable = new Dictionary<int, PccCmpnySt>();
            }
            else
            {
                this._customerHTable.Clear();
            }
            int status = this._pccCmpnyStAcs.Search(out pccCmpnyStList, parsePccCmpnySt, 0, ConstantManagement.LogicalMode.GetData0);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                foreach (PccCmpnySt pccCmpnySt in pccCmpnyStList)
                {
                    if (!this._customerHTable.ContainsKey(pccCmpnySt.PccCompanyCode))
                    {
                        this._customerHTable.Add(pccCmpnySt.PccCompanyCode, pccCmpnySt);
                    }
                }
            }
        }
        // zhouzy add 20110919 end
        /// <summary>
        /// 伝票印刷スレッド
        /// </summary>
        /// <remarks>
        /// <br>Date         : 2021/07/16</br>
        /// <br>Update Note  : PMKOBETSU-4154 売上伝票印刷エラー対応</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// </remarks>
        // zhouzy update 20110919 begin
        //private void PrintSlipThread()
        public void PrintSlipThread()
        // zhouzy update 20110919 end
        {
            // 印刷処理
            this._printThreadOverFlag = false;  // ADD 2012/02/09 李占川 Redmine#28289
            // --- UPD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----->>>>>
            //this.PrintSlip(true);
            this.PrintSlip(true, false);
            // --- UPD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 -----<<<<<
            this._printThreadOverFlag = true;  // ADD 2012/02/09 李占川 Redmine#28289
            SalesSlipInputInitDataAcs.LogWrite("MAHNB01012AA", "PrintSlipThread", "終了");
        }


        // --- ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----->>>>>
        /// <summary>
        /// 伝票印刷リトライスレッド
        /// </summary>
        /// <remarks>
        /// <br>Date         : 2021/07/16</br>
        /// <br>Update Note  : PMKOBETSU-4154 売上伝票印刷エラー対応</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// </remarks>
        public void PrintSlipThreadRetry()
        {
            // 印刷処理
            this._printThreadOverFlag = false;
            this.PrintSlip(true, true);
            this._printThreadOverFlag = true;
            SalesSlipInputInitDataAcs.LogWrite("MAHNB01012AA", "PrintSlipThreadRetry", "終了");
        }
        // --- ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 -----<<<<<

        /// <summary>
        /// 売上明細行オブジェクトのコピーを行います。
        /// </summary>
        /// <param name="sourceRow">コピー元売上明細行オブジェクト</param>
        /// <param name="targetRow">コピー先売上明細行オブジェクト</param>
        private void CopySalesDetailRow(SalesInputDataSet.SalesDetailRow sourceRow, SalesInputDataSet.SalesDetailRow targetRow)
        {
            if ((sourceRow == null) || (targetRow == null)) return;

            //targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo; // 受注番号
            targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus; // 受注ステータス
            //targetRow.SalesSlipNum = sourceRow.SalesSlipNum; // 売上伝票番号
            //targetRow.SalesRowNo = sourceRow.SalesRowNo; // 売上行番号
            //targetRow.SalesRowDerivNo = sourceRow.SalesRowDerivNo; // 売上行番号枝番
            targetRow.SectionCode = sourceRow.SectionCode; // 拠点コード
            targetRow.SubSectionCode = sourceRow.SubSectionCode; // 部門コード
            targetRow.SalesDate = sourceRow.SalesDate; // 売上日付
            //targetRow.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            //targetRow.SalesSlipDtlNum = sourceRow.SalesSlipDtlNum; // 売上明細通番
            //targetRow.AcptAnOdrStatusSrc = sourceRow.AcptAnOdrStatusSrc; // 受注ステータス（元）
            //targetRow.SalesSlipDtlNumSrc = sourceRow.SalesSlipDtlNumSrc; // 売上明細通番（元）
            //targetRow.SupplierFormalSync = sourceRow.SupplierFormalSync; // 仕入形式（同時）
            //targetRow.StockSlipDtlNumSync = sourceRow.StockSlipDtlNumSync; // 仕入明細通番（同時）
            targetRow.SalesSlipCdDtl = sourceRow.SalesSlipCdDtl; // 売上伝票区分（明細）
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate; // 納品完了予定日
            targetRow.GoodsKindCode = sourceRow.GoodsKindCode; // 商品属性
            targetRow.GoodsSearchDivCd = sourceRow.GoodsSearchDivCd; // 商品検索区分
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd; // 商品メーカーコード
            targetRow.MakerName = sourceRow.MakerName; // メーカー名称
            targetRow.MakerKanaName = sourceRow.MakerKanaName; // メーカーカナ名称
            targetRow.GoodsNo = sourceRow.GoodsNo; // 商品番号
            targetRow.GoodsName = sourceRow.GoodsName; // 商品名称
            targetRow.GoodsNameKana = sourceRow.GoodsNameKana; // 商品名称カナ
            targetRow.GoodsLGroup = sourceRow.GoodsLGroup; // 商品大分類コード
            targetRow.GoodsLGroupName = sourceRow.GoodsLGroupName; // 商品大分類名称
            targetRow.GoodsMGroup = sourceRow.GoodsMGroup; // 商品中分類コード
            targetRow.GoodsMGroupName = sourceRow.GoodsMGroupName; // 商品中分類名称
            targetRow.BLGroupCode = sourceRow.BLGroupCode; // BLグループコード
            targetRow.BLGroupName = sourceRow.BLGroupName; // BLグループコード名称
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode; // BL商品コード
            targetRow.BLGoodsFullName = sourceRow.BLGoodsFullName; // BL商品コード名称（全角）
            targetRow.EnterpriseGanreCode = sourceRow.EnterpriseGanreCode; // 自社分類コード
            targetRow.EnterpriseGanreName = sourceRow.EnterpriseGanreName; // 自社分類名称
            targetRow.WarehouseCode = sourceRow.WarehouseCode; // 倉庫コード
            targetRow.WarehouseName = sourceRow.WarehouseName; // 倉庫名称
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo; // 倉庫棚番
            targetRow.SalesOrderDivCd = sourceRow.SalesOrderDivCd; // 売上在庫取寄せ区分
            targetRow.OpenPriceDiv = sourceRow.OpenPriceDiv; // オープン価格区分
            targetRow.GoodsRateRank = sourceRow.GoodsRateRank; // 商品掛率ランク
            targetRow.CustRateGrpCode = sourceRow.CustRateGrpCode; // 得意先掛率グループコード
            targetRow.ListPriceRate = sourceRow.ListPriceRate; // 定価率
            targetRow.RateSectPriceUnPrc = sourceRow.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            targetRow.RateDivLPrice = sourceRow.RateDivLPrice; // 掛率設定区分（定価）
            targetRow.PriceSelectDiv = sourceRow.PriceSelectDiv; // 標準価格選択区分（定価） // ADD 2013/01/24 鄧潘ハン REDMINE#34605
            targetRow.UnPrcCalcCdLPrice = sourceRow.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            targetRow.PriceCdLPrice = sourceRow.PriceCdLPrice; // 価格区分（定価）
            targetRow.StdUnPrcLPrice = sourceRow.StdUnPrcLPrice; // 基準単価（定価）
            targetRow.FracProcUnitLPrice = sourceRow.FracProcUnitLPrice; // 端数処理単位（定価）
            targetRow.FracProcLPrice = sourceRow.FracProcLPrice; // 端数処理（定価）
            targetRow.ListPriceTaxIncFl = sourceRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            targetRow.ListPriceTaxExcFl = sourceRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            targetRow.ListPriceChngCd = sourceRow.ListPriceChngCd; // 定価変更区分
            targetRow.SalesRate = sourceRow.SalesRate; // 売価率
            targetRow.RateSectSalUnPrc = sourceRow.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            targetRow.RateDivSalUnPrc = sourceRow.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            targetRow.UnPrcCalcCdSalUnPrc = sourceRow.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            targetRow.PriceCdSalUnPrc = sourceRow.PriceCdSalUnPrc; // 価格区分（売上単価）
            targetRow.StdUnPrcSalUnPrc = sourceRow.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            targetRow.FracProcUnitSalUnPrc = sourceRow.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            targetRow.FracProcSalUnPrc = sourceRow.FracProcSalUnPrc; // 端数処理（売上単価）
            targetRow.SalesUnPrcTaxIncFl = sourceRow.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            targetRow.SalesUnPrcTaxExcFl = sourceRow.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            targetRow.SalesUnPrcChngCd = sourceRow.SalesUnPrcChngCd; // 売上単価変更区分
            targetRow.CostRate = sourceRow.CostRate; // 原価率
            targetRow.RateSectCstUnPrc = sourceRow.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            targetRow.RateDivUnCst = sourceRow.RateDivUnCst; // 掛率設定区分（原価単価）
            targetRow.UnPrcCalcCdUnCst = sourceRow.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            targetRow.PriceCdUnCst = sourceRow.PriceCdUnCst; // 価格区分（原価単価）
            targetRow.StdUnPrcUnCst = sourceRow.StdUnPrcUnCst; // 基準単価（原価単価）
            targetRow.FracProcUnitUnCst = sourceRow.FracProcUnitUnCst; // 端数処理単位（原価単価）
            targetRow.FracProcUnCst = sourceRow.FracProcUnCst; // 端数処理（原価単価）
            targetRow.SalesUnitCost = sourceRow.SalesUnitCost; // 原価単価
            targetRow.SalesUnitCostChngDiv = sourceRow.SalesUnitCostChngDiv; // 原価単価変更区分
            targetRow.RateBLGoodsCode = sourceRow.RateBLGoodsCode; // BL商品コード（掛率）
            targetRow.RateBLGoodsName = sourceRow.RateBLGoodsName; // BL商品コード名称（掛率）
            targetRow.RateGoodsRateGrpCd = sourceRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            targetRow.RateGoodsRateGrpNm = sourceRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            targetRow.RateBLGroupCode = sourceRow.RateBLGroupCode; // BLグループコード（掛率）
            targetRow.RateBLGroupName = sourceRow.RateBLGroupName; // BLグループ名称（掛率）
            targetRow.PrtBLGoodsCode = sourceRow.PrtBLGoodsCode; // BL商品コード（印刷）
            targetRow.PrtBLGoodsName = sourceRow.PrtBLGoodsName; // BL商品コード名称（印刷）
            targetRow.SalesCode = sourceRow.SalesCode; // 販売区分コード
            targetRow.SalesCdNm = sourceRow.SalesCdNm; // 販売区分名称
            targetRow.WorkManHour = sourceRow.WorkManHour; // 作業工数
            targetRow.ShipmentCnt = sourceRow.ShipmentCnt; // 出荷数
            targetRow.AcceptAnOrderCnt = sourceRow.AcceptAnOrderCnt; // 受注数量
            targetRow.AcptAnOdrAdjustCnt = sourceRow.AcptAnOdrAdjustCnt; // 受注調整数
            targetRow.AcptAnOdrRemainCnt = sourceRow.AcptAnOdrRemainCnt; // 受注残数
            targetRow.RemainCntUpdDate = sourceRow.RemainCntUpdDate; // 残数更新日
            targetRow.SalesMoneyTaxInc = sourceRow.SalesMoneyTaxInc; // 売上金額（税込み）
            targetRow.SalesMoneyTaxExc = sourceRow.SalesMoneyTaxExc; // 売上金額（税抜き）
            targetRow.Cost = sourceRow.Cost; // 原価
            targetRow.GrsProfitChkDiv = sourceRow.GrsProfitChkDiv; // 粗利チェック区分
            targetRow.SalesGoodsCd = sourceRow.SalesGoodsCd; // 売上商品区分
            targetRow.SalesPriceConsTax = sourceRow.SalesPriceConsTax; // 売上金額消費税額
            targetRow.TaxationDivCd = sourceRow.TaxationDivCd; // 課税区分
            targetRow.PartySlipNumDtl = sourceRow.PartySlipNumDtl; // 相手先伝票番号（明細）
            targetRow.DtlNote = sourceRow.DtlNote; // 明細備考
            targetRow.SupplierCd = sourceRow.SupplierCd; // 仕入先コード
            targetRow.SupplierSnm = sourceRow.SupplierSnm; // 仕入先略称
            targetRow.OrderNumber = sourceRow.OrderNumber; // 発注番号
            targetRow.WayToOrder = sourceRow.WayToOrder; // 注文方法
            targetRow.SlipMemo1 = sourceRow.SlipMemo1; // 伝票メモ１
            targetRow.SlipMemo2 = sourceRow.SlipMemo2; // 伝票メモ２
            targetRow.SlipMemo3 = sourceRow.SlipMemo3; // 伝票メモ３
            targetRow.InsideMemo1 = sourceRow.InsideMemo1; // 社内メモ１
            targetRow.InsideMemo2 = sourceRow.InsideMemo2; // 社内メモ２
            targetRow.InsideMemo3 = sourceRow.InsideMemo3; // 社内メモ３
            targetRow.BfListPrice = sourceRow.BfListPrice; // 変更前定価
            targetRow.BfSalesUnitPrice = sourceRow.BfSalesUnitPrice; // 変更前売価
            targetRow.BfUnitCost = sourceRow.BfUnitCost; // 変更前原価
            targetRow.CmpltSalesRowNo = sourceRow.CmpltSalesRowNo; // 一式明細番号
            targetRow.CmpltGoodsMakerCd = sourceRow.CmpltGoodsMakerCd; // メーカーコード（一式）
            targetRow.CmpltMakerName = sourceRow.CmpltMakerName; // メーカー名称（一式）
            targetRow.CmpltGoodsName = sourceRow.CmpltGoodsName; // 商品名称（一式）
            targetRow.CmpltShipmentCnt = sourceRow.CmpltShipmentCnt; // 数量（一式）
            targetRow.CmpltSalesUnPrcFl = sourceRow.CmpltSalesUnPrcFl; // 売上単価（一式）
            targetRow.CmpltSalesMoney = sourceRow.CmpltSalesMoney; // 売上金額（一式）
            targetRow.CmpltSalesUnitCost = sourceRow.CmpltSalesUnitCost; // 原価単価（一式）
            targetRow.CmpltCost = sourceRow.CmpltCost; // 原価金額（一式）
            targetRow.CmpltPartySalSlNum = sourceRow.CmpltPartySalSlNum; // 相手先伝票番号（一式）
            targetRow.CmpltNote = sourceRow.CmpltNote; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            targetRow.SelectedGoodsNoDiv = sourceRow.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            targetRow.PrtGoodsNo = sourceRow.PrtGoodsNo; // 印刷用品番
            targetRow.PrtMakerCode = sourceRow.PrtMakerCode; // 印刷用メーカーコード
            targetRow.PrtMakerName = sourceRow.PrtMakerName; // 印刷用メーカー名称
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid; // 共通キー
            targetRow.CarRelationGuid = sourceRow.CarRelationGuid; // 車両情報共通キー
            //targetRow.SalesRowNoDisplay = sourceRow.SalesRowNoDisplay; // 行番号（表示用）
            targetRow.SupplierStock = sourceRow.SupplierStock; // 現在庫数
            targetRow.SupplierStockDisplay = sourceRow.SupplierStockDisplay; // 現在庫数（表示用）
            targetRow.OpenPriceDivDisplay = sourceRow.OpenPriceDivDisplay; // オープン価格区分（表示用）
            targetRow.ListPriceDisplay = sourceRow.ListPriceDisplay; // 定価（表示用）
            targetRow.SalesUnPrcDisplay = sourceRow.SalesUnPrcDisplay; // 売上単価（表示用）
            targetRow.SalesUnitCostTaxExc = sourceRow.SalesUnitCostTaxExc; // 原価単価（税抜）
            targetRow.SalesUnitCostTaxInc = sourceRow.SalesUnitCostTaxInc; // 原価単価（税込）
            targetRow.ShipmentCntDisplay = sourceRow.ShipmentCntDisplay; // 出荷数（表示用）
            targetRow.AddUpEnableCnt = sourceRow.AddUpEnableCnt; // 計上可能数
            targetRow.AlreadyAddUpCnt = sourceRow.AlreadyAddUpCnt; // 計上済数
            targetRow.ShipmentCntDefault = sourceRow.ShipmentCntDefault; // 出荷数（初期値）
            targetRow.SalesMoneyDisplay = sourceRow.SalesMoneyDisplay; // 売上金額（表示用）
            targetRow.CostTaxInc = sourceRow.CostTaxInc; // 原価金額（税込）
            targetRow.CostTaxExc = sourceRow.CostTaxExc; // 原価金額（税抜）
            targetRow.AcceptAnOrderCntDisplay = sourceRow.AcceptAnOrderCntDisplay; // 受注数（表示用）
            targetRow.AcceptAnOrderCntDefault = sourceRow.AcceptAnOrderCntDefault; // 受注数（初期値）
            targetRow.TaxDiv = sourceRow.TaxDiv; // 課税区分（UI用）
            targetRow.CanTaxDivChange = sourceRow.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            targetRow.RowStatus = ctROWSTATUS_NORMAL; // 行ステータス
            targetRow.EditStatus = sourceRow.EditStatus; // エディットステータス
            targetRow.SlipMemoExist = sourceRow.SlipMemoExist; // メモ存在フラグ
            targetRow.SupplierSlipExist = sourceRow.SupplierSlipExist; // 仕入情報存在フラグ
            targetRow.DetailGrossProfitRate = sourceRow.DetailGrossProfitRate; // 明細粗利率
            targetRow.CostUpRate = sourceRow.CostUpRate; // 原価アップ率
            targetRow.GrossProfitSecureRate = sourceRow.GrossProfitSecureRate; // 粗利確保率
            targetRow.SupplierCdForStock = sourceRow.SupplierCdForStock; // 仕入先コード
            targetRow.StockDate = sourceRow.StockDate; // 仕入日
            targetRow.PartySalesSlipNum = sourceRow.PartySalesSlipNum; // 仕入伝票番号
            targetRow.BoCode = sourceRow.BoCode; // BO区分
            targetRow.SupplierCdForOrder = sourceRow.SupplierCdForOrder; // 発注先
            targetRow.AcceptAnOrderCntForOrder = sourceRow.AcceptAnOrderCntForOrder; // 発注数
            targetRow.SupplierSnmForOrder = sourceRow.SupplierSnmForOrder; // 発注先名称
            targetRow.UOEDeliGoodsDiv = sourceRow.UOEDeliGoodsDiv; // 納品区分
            targetRow.DeliveredGoodsDivNm = sourceRow.DeliveredGoodsDivNm; // 納品区分名称
            targetRow.DeliveredGoodsDivNmSave = sourceRow.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            targetRow.FollowDeliGoodsDiv = sourceRow.FollowDeliGoodsDiv; // H納品区分
            targetRow.FollowDeliGoodsDivNm = sourceRow.FollowDeliGoodsDivNm; // H納品区分名称
            targetRow.FollowDeliGoodsDivNmSave = sourceRow.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            targetRow.UOEResvdSection = sourceRow.UOEResvdSection; // 指定拠点
            targetRow.UOEResvdSectionNm = sourceRow.UOEResvdSectionNm; // 指定拠点名称
            targetRow.UOEResvdSectionNmSave = sourceRow.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            targetRow.PriceStartDate = sourceRow.PriceStartDate; // 価格開始日
            targetRow.Dummy = sourceRow.Dummy; // ダミー（空欄表示用）
            targetRow.SearchPartsModeState = sourceRow.SearchPartsModeState; // 部品検索状態
            targetRow.SalesMoneyInputDiv = sourceRow.SalesMoneyInputDiv; // 売上金額手入力区分
            targetRow.SalesUnPrcTaxExcFlDefault = sourceRow.SalesUnPrcTaxExcFlDefault; // 売上単価（税込，浮動）初期値
            targetRow.SalesUnPrcTaxIncFlDefault = sourceRow.SalesUnPrcTaxIncFlDefault; // 売上単価（税抜，浮動）初期値
            targetRow.SalesUnitCostTaxExcDefault = sourceRow.SalesUnitCostTaxExcDefault; // 原価単価（税抜）初期値
            targetRow.SalesUnitCostTaxIncDefault = sourceRow.SalesUnitCostTaxIncDefault; // 原価単価（税込）初期値
            targetRow.ShipmentCntDefForChk = sourceRow.ShipmentCntDefForChk; // 出荷数初期値（変更チェック用）
            targetRow.AcceptAnOrderCntDefForChk = sourceRow.AcceptAnOrderCntDefForChk; // 受注数初期値（変更チェック用）
            //>>>2010/02/26
            targetRow.CampaignCode = sourceRow.CampaignCode; // キャンペーンコード
            targetRow.CampaignName = sourceRow.CampaignName; // キャンペーン名称
            targetRow.GoodsDivCd = sourceRow.GoodsDivCd; // 商品種別
            targetRow.RecycleDiv = sourceRow.RecycleDiv; // リサイクル区分
            targetRow.RecycleDivNm = sourceRow.RecycleDivNm; // リサイクル区分名称
            targetRow.RecycleDivNmSave = sourceRow.RecycleDivNmSave; // リサイクル区分名称
            targetRow.WayToAcptOdr = sourceRow.WayToAcptOdr; // 受注方法
            targetRow.GoodsMngNo = sourceRow.GoodsMngNo; // 商品管理番号
            targetRow.InqRowNumber = sourceRow.InqRowNumber; // 問合せ行番号
            targetRow.InqRowNumDerivedNo = sourceRow.InqRowNumDerivedNo; // 問合せ行番号枝番
            //<<<2010/02/26
            // 2012/01/16 Add >>>
            targetRow.GoodsSpecialNote = sourceRow.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<
            //>>>2012/05/02
            targetRow.RentSyncStockDate = sourceRow.RentSyncStockDate;
            targetRow.RentSyncSupplier = sourceRow.RentSyncSupplier;
            targetRow.RentSyncSupSlipNo = sourceRow.RentSyncSupSlipNo;
            //<<<2012/05/02
        }

        /// <summary>
        /// 売上明細行オブジェクトのコピーを行います。(挿入用)
        /// </summary>
        /// <param name="sourceRow">コピー元売上明細行オブジェクト</param>
        /// <param name="targetRow">コピー先売上明細行オブジェクト</param>
        private void CopySalesDetailRowForInsert(SalesInputDataSet.SalesDetailRow sourceRow, SalesInputDataSet.SalesDetailRow targetRow)
        {
            if ((sourceRow == null) || (targetRow == null)) return;

            //targetRow.CreateDateTime = sourceRow.CreateDateTime; // 作成日時
            //targetRow.UpdateDateTime = sourceRow.UpdateDateTime; // 更新日時
            //targetRow.EnterpriseCode = sourceRow.EnterpriseCode; // 企業コード
            //targetRow.FileHeaderGuid = sourceRow.FileHeaderGuid; // GUID
            //targetRow.UpdEmployeeCode = sourceRow.UpdEmployeeCode; // 更新従業員コード
            //targetRow.UpdAssemblyId1 = sourceRow.UpdAssemblyId1; // 更新アセンブリID1
            //targetRow.UpdAssemblyId2 = sourceRow.UpdAssemblyId2; // 更新アセンブリID2
            //targetRow.LogicalDeleteCode = sourceRow.LogicalDeleteCode; // 論理削除区分
            targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo; // 受注番号
            targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus; // 受注ステータス
            targetRow.SalesSlipNum = sourceRow.SalesSlipNum; // 売上伝票番号
            //targetRow.SalesRowNo = sourceRow.SalesRowNo; // 売上行番号
            targetRow.SalesRowDerivNo = sourceRow.SalesRowDerivNo; // 売上行番号枝番
            targetRow.SectionCode = sourceRow.SectionCode; // 拠点コード
            targetRow.SubSectionCode = sourceRow.SubSectionCode; // 部門コード
            targetRow.SalesDate = sourceRow.SalesDate; // 売上日付
            targetRow.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            targetRow.SalesSlipDtlNum = sourceRow.SalesSlipDtlNum; // 売上明細通番
            targetRow.AcptAnOdrStatusSrc = sourceRow.AcptAnOdrStatusSrc; // 受注ステータス（元）
            targetRow.SalesSlipDtlNumSrc = sourceRow.SalesSlipDtlNumSrc; // 売上明細通番（元）
            targetRow.SupplierFormalSync = sourceRow.SupplierFormalSync; // 仕入形式（同時）
            targetRow.StockSlipDtlNumSync = sourceRow.StockSlipDtlNumSync; // 仕入明細通番（同時）
            targetRow.SalesSlipCdDtl = sourceRow.SalesSlipCdDtl; // 売上伝票区分（明細）
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate; // 納品完了予定日
            targetRow.GoodsKindCode = sourceRow.GoodsKindCode; // 商品属性
            targetRow.GoodsSearchDivCd = sourceRow.GoodsSearchDivCd; // 商品検索区分
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd; // 商品メーカーコード
            targetRow.MakerName = sourceRow.MakerName; // メーカー名称
            targetRow.MakerKanaName = sourceRow.MakerKanaName; // メーカーカナ名称
            targetRow.GoodsNo = sourceRow.GoodsNo; // 商品番号
            targetRow.GoodsName = sourceRow.GoodsName; // 商品名称
            targetRow.GoodsNameKana = sourceRow.GoodsNameKana; // 商品名称カナ
            targetRow.GoodsLGroup = sourceRow.GoodsLGroup; // 商品大分類コード
            targetRow.GoodsLGroupName = sourceRow.GoodsLGroupName; // 商品大分類名称
            targetRow.GoodsMGroup = sourceRow.GoodsMGroup; // 商品中分類コード
            targetRow.GoodsMGroupName = sourceRow.GoodsMGroupName; // 商品中分類名称
            targetRow.BLGroupCode = sourceRow.BLGroupCode; // BLグループコード
            targetRow.BLGroupName = sourceRow.BLGroupName; // BLグループコード名称
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode; // BL商品コード
            targetRow.BLGoodsFullName = sourceRow.BLGoodsFullName; // BL商品コード名称（全角）
            targetRow.EnterpriseGanreCode = sourceRow.EnterpriseGanreCode; // 自社分類コード
            targetRow.EnterpriseGanreName = sourceRow.EnterpriseGanreName; // 自社分類名称
            targetRow.WarehouseCode = sourceRow.WarehouseCode; // 倉庫コード
            targetRow.WarehouseName = sourceRow.WarehouseName; // 倉庫名称
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo; // 倉庫棚番
            targetRow.SalesOrderDivCd = sourceRow.SalesOrderDivCd; // 売上在庫取寄せ区分
            targetRow.OpenPriceDiv = sourceRow.OpenPriceDiv; // オープン価格区分
            targetRow.GoodsRateRank = sourceRow.GoodsRateRank; // 商品掛率ランク
            targetRow.CustRateGrpCode = sourceRow.CustRateGrpCode; // 得意先掛率グループコード
            targetRow.ListPriceRate = sourceRow.ListPriceRate; // 定価率
            targetRow.RateSectPriceUnPrc = sourceRow.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            targetRow.RateDivLPrice = sourceRow.RateDivLPrice; // 掛率設定区分（定価）
            targetRow.PriceSelectDiv = sourceRow.PriceSelectDiv; // 標準価格選択区分（定価）// ADD 2013/01/24 鄧潘ハン REDMINE#34605
            targetRow.UnPrcCalcCdLPrice = sourceRow.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            targetRow.PriceCdLPrice = sourceRow.PriceCdLPrice; // 価格区分（定価）
            targetRow.StdUnPrcLPrice = sourceRow.StdUnPrcLPrice; // 基準単価（定価）
            targetRow.FracProcUnitLPrice = sourceRow.FracProcUnitLPrice; // 端数処理単位（定価）
            targetRow.FracProcLPrice = sourceRow.FracProcLPrice; // 端数処理（定価）
            targetRow.ListPriceTaxIncFl = sourceRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            targetRow.ListPriceTaxExcFl = sourceRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            targetRow.ListPriceChngCd = sourceRow.ListPriceChngCd; // 定価変更区分
            targetRow.SalesRate = sourceRow.SalesRate; // 売価率
            targetRow.RateSectSalUnPrc = sourceRow.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            targetRow.RateDivSalUnPrc = sourceRow.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            targetRow.UnPrcCalcCdSalUnPrc = sourceRow.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            targetRow.PriceCdSalUnPrc = sourceRow.PriceCdSalUnPrc; // 価格区分（売上単価）
            targetRow.StdUnPrcSalUnPrc = sourceRow.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            targetRow.FracProcUnitSalUnPrc = sourceRow.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            targetRow.FracProcSalUnPrc = sourceRow.FracProcSalUnPrc; // 端数処理（売上単価）
            targetRow.SalesUnPrcTaxIncFl = sourceRow.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            targetRow.SalesUnPrcTaxExcFl = sourceRow.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            targetRow.SalesUnPrcChngCd = sourceRow.SalesUnPrcChngCd; // 売上単価変更区分
            targetRow.CostRate = sourceRow.CostRate; // 原価率
            targetRow.RateSectCstUnPrc = sourceRow.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            targetRow.RateDivUnCst = sourceRow.RateDivUnCst; // 掛率設定区分（原価単価）
            targetRow.UnPrcCalcCdUnCst = sourceRow.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            targetRow.PriceCdUnCst = sourceRow.PriceCdUnCst; // 価格区分（原価単価）
            targetRow.StdUnPrcUnCst = sourceRow.StdUnPrcUnCst; // 基準単価（原価単価）
            targetRow.FracProcUnitUnCst = sourceRow.FracProcUnitUnCst; // 端数処理単位（原価単価）
            targetRow.FracProcUnCst = sourceRow.FracProcUnCst; // 端数処理（原価単価）
            targetRow.SalesUnitCost = sourceRow.SalesUnitCost; // 原価単価
            targetRow.SalesUnitCostChngDiv = sourceRow.SalesUnitCostChngDiv; // 原価単価変更区分
            targetRow.RateBLGoodsCode = sourceRow.RateBLGoodsCode; // BL商品コード（掛率）
            targetRow.RateBLGoodsName = sourceRow.RateBLGoodsName; // BL商品コード名称（掛率）
            targetRow.RateGoodsRateGrpCd = sourceRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            targetRow.RateGoodsRateGrpNm = sourceRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            targetRow.RateBLGroupCode = sourceRow.RateBLGroupCode; // BLグループコード（掛率）
            targetRow.RateBLGroupName = sourceRow.RateBLGroupName; // BLグループ名称（掛率）
            targetRow.PrtBLGoodsCode = sourceRow.PrtBLGoodsCode; // BL商品コード（印刷）
            targetRow.PrtBLGoodsName = sourceRow.PrtBLGoodsName; // BL商品コード名称（印刷）
            targetRow.SalesCode = sourceRow.SalesCode; // 販売区分コード
            targetRow.SalesCdNm = sourceRow.SalesCdNm; // 販売区分名称
            targetRow.WorkManHour = sourceRow.WorkManHour; // 作業工数
            targetRow.ShipmentCnt = sourceRow.ShipmentCnt; // 出荷数
            targetRow.AcceptAnOrderCnt = sourceRow.AcceptAnOrderCnt; // 受注数量
            targetRow.AcptAnOdrAdjustCnt = sourceRow.AcptAnOdrAdjustCnt; // 受注調整数
            targetRow.AcptAnOdrRemainCnt = sourceRow.AcptAnOdrRemainCnt; // 受注残数
            targetRow.RemainCntUpdDate = sourceRow.RemainCntUpdDate; // 残数更新日
            targetRow.SalesMoneyTaxInc = sourceRow.SalesMoneyTaxInc; // 売上金額（税込み）
            targetRow.SalesMoneyTaxExc = sourceRow.SalesMoneyTaxExc; // 売上金額（税抜き）
            targetRow.Cost = sourceRow.Cost; // 原価
            targetRow.GrsProfitChkDiv = sourceRow.GrsProfitChkDiv; // 粗利チェック区分
            targetRow.SalesGoodsCd = sourceRow.SalesGoodsCd; // 売上商品区分
            targetRow.SalesPriceConsTax = sourceRow.SalesPriceConsTax; // 売上金額消費税額
            targetRow.TaxationDivCd = sourceRow.TaxationDivCd; // 課税区分
            targetRow.PartySlipNumDtl = sourceRow.PartySlipNumDtl; // 相手先伝票番号（明細）
            targetRow.DtlNote = sourceRow.DtlNote; // 明細備考
            targetRow.SupplierCd = sourceRow.SupplierCd; // 仕入先コード
            targetRow.SupplierSnm = sourceRow.SupplierSnm; // 仕入先略称
            targetRow.OrderNumber = sourceRow.OrderNumber; // 発注番号
            targetRow.WayToOrder = sourceRow.WayToOrder; // 注文方法
            targetRow.SlipMemo1 = sourceRow.SlipMemo1; // 伝票メモ１
            targetRow.SlipMemo2 = sourceRow.SlipMemo2; // 伝票メモ２
            targetRow.SlipMemo3 = sourceRow.SlipMemo3; // 伝票メモ３
            targetRow.InsideMemo1 = sourceRow.InsideMemo1; // 社内メモ１
            targetRow.InsideMemo2 = sourceRow.InsideMemo2; // 社内メモ２
            targetRow.InsideMemo3 = sourceRow.InsideMemo3; // 社内メモ３
            targetRow.BfListPrice = sourceRow.BfListPrice; // 変更前定価
            targetRow.BfSalesUnitPrice = sourceRow.BfSalesUnitPrice; // 変更前売価
            targetRow.BfUnitCost = sourceRow.BfUnitCost; // 変更前原価
            targetRow.CmpltSalesRowNo = sourceRow.CmpltSalesRowNo; // 一式明細番号
            targetRow.CmpltGoodsMakerCd = sourceRow.CmpltGoodsMakerCd; // メーカーコード（一式）
            targetRow.CmpltMakerName = sourceRow.CmpltMakerName; // メーカー名称（一式）
            targetRow.CmpltMakerKanaName = sourceRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            targetRow.CmpltGoodsName = sourceRow.CmpltGoodsName; // 商品名称（一式）
            targetRow.CmpltShipmentCnt = sourceRow.CmpltShipmentCnt; // 数量（一式）
            targetRow.CmpltSalesUnPrcFl = sourceRow.CmpltSalesUnPrcFl; // 売上単価（一式）
            targetRow.CmpltSalesMoney = sourceRow.CmpltSalesMoney; // 売上金額（一式）
            targetRow.CmpltSalesUnitCost = sourceRow.CmpltSalesUnitCost; // 原価単価（一式）
            targetRow.CmpltCost = sourceRow.CmpltCost; // 原価金額（一式）
            targetRow.CmpltPartySalSlNum = sourceRow.CmpltPartySalSlNum; // 相手先伝票番号（一式）
            targetRow.CmpltNote = sourceRow.CmpltNote; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            targetRow.SelectedGoodsNoDiv = sourceRow.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            targetRow.PrtGoodsNo = sourceRow.PrtGoodsNo; // 印刷用品番
            targetRow.PrtMakerCode = sourceRow.PrtMakerCode; // 印刷用メーカーコード
            targetRow.PrtMakerName = sourceRow.PrtMakerName; // 印刷用メーカー名称
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid; // 共通キー
            targetRow.CarRelationGuid = sourceRow.CarRelationGuid; // 車両情報共通キー
            //targetRow.SalesRowNoDisplay = sourceRow.SalesRowNoDisplay; // 行番号（表示用）
            targetRow.SupplierStock = sourceRow.SupplierStock; // 現在庫数
            targetRow.SupplierStockDisplay = sourceRow.SupplierStockDisplay; // 現在庫数（表示用）
            targetRow.OpenPriceDivDisplay = sourceRow.OpenPriceDivDisplay; // オープン価格区分（表示用）
            targetRow.ListPriceDisplay = sourceRow.ListPriceDisplay; // 定価（表示用）
            targetRow.SalesUnPrcDisplay = sourceRow.SalesUnPrcDisplay; // 売上単価（表示用）
            targetRow.SalesUnitCostTaxExc = sourceRow.SalesUnitCostTaxExc; // 原価単価（税抜）
            targetRow.SalesUnitCostTaxInc = sourceRow.SalesUnitCostTaxInc; // 原価単価（税込）
            targetRow.ShipmentCntDisplay = sourceRow.ShipmentCntDisplay; // 出荷数（表示用）
            targetRow.AddUpEnableCnt = sourceRow.AddUpEnableCnt; // 計上可能数
            targetRow.AlreadyAddUpCnt = sourceRow.AlreadyAddUpCnt; // 計上済数
            targetRow.ShipmentCntDefault = sourceRow.ShipmentCntDefault; // 出荷数（初期値）
            targetRow.SalesMoneyDisplay = sourceRow.SalesMoneyDisplay; // 売上金額（表示用）
            targetRow.CostTaxInc = sourceRow.CostTaxInc; // 原価金額（税込）
            targetRow.CostTaxExc = sourceRow.CostTaxExc; // 原価金額（税抜）
            targetRow.AcceptAnOrderCntDisplay = sourceRow.AcceptAnOrderCntDisplay; // 受注数（表示用）
            targetRow.AcceptAnOrderCntDefault = sourceRow.AcceptAnOrderCntDefault; // 受注数（初期値）
            targetRow.TaxDiv = sourceRow.TaxDiv; // 課税区分（UI用）
            targetRow.CanTaxDivChange = sourceRow.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            targetRow.RowStatus = sourceRow.RowStatus; // 行ステータス
            targetRow.EditStatus = sourceRow.EditStatus; // エディットステータス
            targetRow.SlipMemoExist = sourceRow.SlipMemoExist; // メモ存在フラグ
            targetRow.SupplierSlipExist = sourceRow.SupplierSlipExist; // 仕入情報存在フラグ
            targetRow.DetailGrossProfitRate = sourceRow.DetailGrossProfitRate; // 明細粗利率
            targetRow.CostUpRate = sourceRow.CostUpRate; // 原価アップ率
            targetRow.GrossProfitSecureRate = sourceRow.GrossProfitSecureRate; // 粗利確保率
            targetRow.SupplierCdForStock = sourceRow.SupplierCdForStock; // 仕入先コード
            targetRow.StockDate = sourceRow.StockDate; // 仕入日
            targetRow.PartySalesSlipNum = sourceRow.PartySalesSlipNum; // 仕入伝票番号
            targetRow.BoCode = sourceRow.BoCode; // BO区分
            targetRow.SupplierCdForOrder = sourceRow.SupplierCdForOrder; // 発注先
            targetRow.AcceptAnOrderCntForOrder = sourceRow.AcceptAnOrderCntForOrder; // 発注数
            targetRow.SupplierSnmForOrder = sourceRow.SupplierSnmForOrder; // 発注先名称
            targetRow.UOEDeliGoodsDiv = sourceRow.UOEDeliGoodsDiv; // 納品区分
            targetRow.DeliveredGoodsDivNm = sourceRow.DeliveredGoodsDivNm; // 納品区分名称
            targetRow.DeliveredGoodsDivNmSave = sourceRow.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            targetRow.FollowDeliGoodsDiv = sourceRow.FollowDeliGoodsDiv; // H納品区分
            targetRow.FollowDeliGoodsDivNm = sourceRow.FollowDeliGoodsDivNm; // H納品区分名称
            targetRow.FollowDeliGoodsDivNmSave = sourceRow.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            targetRow.UOEResvdSection = sourceRow.UOEResvdSection; // 指定拠点
            targetRow.UOEResvdSectionNm = sourceRow.UOEResvdSectionNm; // 指定拠点名称
            targetRow.UOEResvdSectionNmSave = sourceRow.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            targetRow.PriceStartDate = sourceRow.PriceStartDate; // 新定価適用日
            targetRow.Dummy = sourceRow.Dummy; // ダミー（空欄表示用）
            targetRow.SearchPartsModeState = sourceRow.SearchPartsModeState; // 部品検索状態
            targetRow.SalesMoneyInputDiv = sourceRow.SalesMoneyInputDiv; // 売上金額手入力区分
            targetRow.SalesUnPrcTaxIncFlDefault = sourceRow.SalesUnPrcTaxIncFlDefault; // 売上単価（税込，浮動）
            targetRow.SalesUnPrcTaxExcFlDefault = sourceRow.SalesUnPrcTaxExcFlDefault; // 売上単価（税抜，浮動）
            targetRow.SalesUnitCostTaxExcDefault = sourceRow.SalesUnitCostTaxExcDefault; // 原価単価（税抜）
            targetRow.SalesUnitCostTaxIncDefault = sourceRow.SalesUnitCostTaxIncDefault; // 原価単価（税込）
            targetRow.ShipmentCntDefForChk = sourceRow.ShipmentCntDefForChk; // 出荷数初期値（変更チェック用）
            targetRow.AcceptAnOrderCntDefForChk = sourceRow.AcceptAnOrderCntDefForChk; // 受注数初期値（変更チェック用）
            //>>>2010/02/26
            targetRow.CampaignCode = sourceRow.CampaignCode; // キャンペーンコード
            targetRow.CampaignName = sourceRow.CampaignName; // キャンペーン名称
            targetRow.GoodsDivCd = sourceRow.GoodsDivCd; // 商品種別
            targetRow.RecycleDiv = sourceRow.RecycleDiv; // リサイクル区分
            targetRow.RecycleDivNm = sourceRow.RecycleDivNm; // リサイクル区分名称
            targetRow.RecycleDivNmSave = sourceRow.RecycleDivNmSave; // リサイクル区分名称
            targetRow.WayToAcptOdr = sourceRow.WayToAcptOdr; // 受注方法
            targetRow.GoodsMngNo = sourceRow.GoodsMngNo; // 商品管理番号
            targetRow.InqRowNumber = sourceRow.InqRowNumber; // 問合せ行番号
            targetRow.InqRowNumDerivedNo = sourceRow.InqRowNumDerivedNo; // 問合せ行番号枝番
            //<<<2010/02/26
            // 2012/01/16 Add >>>
            targetRow.GoodsSpecialNote = sourceRow.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<
            //>>>2012/05/02
            targetRow.RentSyncStockDate = sourceRow.RentSyncStockDate;
            targetRow.RentSyncSupplier = sourceRow.RentSyncSupplier;
            targetRow.RentSyncSupSlipNo = sourceRow.RentSyncSupSlipNo;
            //<<<2012/05/02
        }

        /// <summary>
        /// 売上明細行オブジェクトのコピーを行います。
        /// </summary>
        /// <param name="sourceRow">コピー元売上明細行オブジェクト</param>
        /// <param name="targetRow">コピー先売上明細行オブジェクト</param>
        private void CopyCompleteSalesDetailRow(SalesInputDataSet.SalesDetailRow sourceRow, SalesInputDataSet.SalesDetailRow targetRow)
        {
            //targetRow.CreateDateTime = sourceRow.CreateDateTime; // 作成日時
            //targetRow.UpdateDateTime = sourceRow.UpdateDateTime; // 更新日時
            //targetRow.EnterpriseCode = sourceRow.EnterpriseCode; // 企業コード
            //targetRow.FileHeaderGuid = sourceRow.FileHeaderGuid; // GUID
            //targetRow.UpdEmployeeCode = sourceRow.UpdEmployeeCode; // 更新従業員コード
            //targetRow.UpdAssemblyId1 = sourceRow.UpdAssemblyId1; // 更新アセンブリID1
            //targetRow.UpdAssemblyId2 = sourceRow.UpdAssemblyId2; // 更新アセンブリID2
            //targetRow.LogicalDeleteCode = sourceRow.LogicalDeleteCode; // 論理削除区分
            targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo; // 受注番号
            targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus; // 受注ステータス
            targetRow.SalesSlipNum = sourceRow.SalesSlipNum; // 売上伝票番号
            targetRow.SalesRowNo = sourceRow.SalesRowNo; // 売上行番号
            targetRow.SalesRowDerivNo = sourceRow.SalesRowDerivNo; // 売上行番号枝番
            targetRow.SectionCode = sourceRow.SectionCode; // 拠点コード
            targetRow.SubSectionCode = sourceRow.SubSectionCode; // 部門コード
            targetRow.SalesDate = sourceRow.SalesDate; // 売上日付
            targetRow.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            targetRow.SalesSlipDtlNum = sourceRow.SalesSlipDtlNum; // 売上明細通番
            targetRow.AcptAnOdrStatusSrc = sourceRow.AcptAnOdrStatusSrc; // 受注ステータス（元）
            targetRow.SalesSlipDtlNumSrc = sourceRow.SalesSlipDtlNumSrc; // 売上明細通番（元）
            targetRow.SupplierFormalSync = sourceRow.SupplierFormalSync; // 仕入形式（同時）
            targetRow.StockSlipDtlNumSync = sourceRow.StockSlipDtlNumSync; // 仕入明細通番（同時）
            targetRow.SalesSlipCdDtl = sourceRow.SalesSlipCdDtl; // 売上伝票区分（明細）
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate; // 納品完了予定日
            targetRow.GoodsKindCode = sourceRow.GoodsKindCode; // 商品属性
            targetRow.GoodsSearchDivCd = sourceRow.GoodsSearchDivCd; // 商品検索区分
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd; // 商品メーカーコード
            targetRow.MakerName = sourceRow.MakerName; // メーカー名称
            targetRow.MakerKanaName = sourceRow.MakerKanaName; // メーカーカナ名称
            targetRow.GoodsNo = sourceRow.GoodsNo; // 商品番号
            targetRow.GoodsName = sourceRow.GoodsName; // 商品名称
            targetRow.GoodsNameKana = sourceRow.GoodsNameKana; // 商品名称カナ
            targetRow.GoodsLGroup = sourceRow.GoodsLGroup; // 商品大分類コード
            targetRow.GoodsLGroupName = sourceRow.GoodsLGroupName; // 商品大分類名称
            targetRow.GoodsMGroup = sourceRow.GoodsMGroup; // 商品中分類コード
            targetRow.GoodsMGroupName = sourceRow.GoodsMGroupName; // 商品中分類名称
            targetRow.BLGroupCode = sourceRow.BLGroupCode; // BLグループコード
            targetRow.BLGroupName = sourceRow.BLGroupName; // BLグループコード名称
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode; // BL商品コード
            targetRow.BLGoodsFullName = sourceRow.BLGoodsFullName; // BL商品コード名称（全角）
            targetRow.EnterpriseGanreCode = sourceRow.EnterpriseGanreCode; // 自社分類コード
            targetRow.EnterpriseGanreName = sourceRow.EnterpriseGanreName; // 自社分類名称
            targetRow.WarehouseCode = sourceRow.WarehouseCode; // 倉庫コード
            targetRow.WarehouseName = sourceRow.WarehouseName; // 倉庫名称
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo; // 倉庫棚番
            targetRow.SalesOrderDivCd = sourceRow.SalesOrderDivCd; // 売上在庫取寄せ区分
            targetRow.OpenPriceDiv = sourceRow.OpenPriceDiv; // オープン価格区分
            targetRow.GoodsRateRank = sourceRow.GoodsRateRank; // 商品掛率ランク
            targetRow.CustRateGrpCode = sourceRow.CustRateGrpCode; // 得意先掛率グループコード
            targetRow.ListPriceRate = sourceRow.ListPriceRate; // 定価率
            targetRow.RateSectPriceUnPrc = sourceRow.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            targetRow.RateDivLPrice = sourceRow.RateDivLPrice; // 掛率設定区分（定価）
            targetRow.PriceSelectDiv = sourceRow.PriceSelectDiv; // 標準価格選択区分（定価）// ADD 2013/01/24 鄧潘ハン REDMINE#34605
            targetRow.UnPrcCalcCdLPrice = sourceRow.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            targetRow.PriceCdLPrice = sourceRow.PriceCdLPrice; // 価格区分（定価）
            targetRow.StdUnPrcLPrice = sourceRow.StdUnPrcLPrice; // 基準単価（定価）
            targetRow.FracProcUnitLPrice = sourceRow.FracProcUnitLPrice; // 端数処理単位（定価）
            targetRow.FracProcLPrice = sourceRow.FracProcLPrice; // 端数処理（定価）
            targetRow.ListPriceTaxIncFl = sourceRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            targetRow.ListPriceTaxExcFl = sourceRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            targetRow.ListPriceChngCd = sourceRow.ListPriceChngCd; // 定価変更区分
            targetRow.SalesRate = sourceRow.SalesRate; // 売価率
            targetRow.RateSectSalUnPrc = sourceRow.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            targetRow.RateDivSalUnPrc = sourceRow.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            targetRow.UnPrcCalcCdSalUnPrc = sourceRow.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            targetRow.PriceCdSalUnPrc = sourceRow.PriceCdSalUnPrc; // 価格区分（売上単価）
            targetRow.StdUnPrcSalUnPrc = sourceRow.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            targetRow.FracProcUnitSalUnPrc = sourceRow.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            targetRow.FracProcSalUnPrc = sourceRow.FracProcSalUnPrc; // 端数処理（売上単価）
            targetRow.SalesUnPrcTaxIncFl = sourceRow.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            targetRow.SalesUnPrcTaxExcFl = sourceRow.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            targetRow.SalesUnPrcChngCd = sourceRow.SalesUnPrcChngCd; // 売上単価変更区分
            targetRow.CostRate = sourceRow.CostRate; // 原価率
            targetRow.RateSectCstUnPrc = sourceRow.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            targetRow.RateDivUnCst = sourceRow.RateDivUnCst; // 掛率設定区分（原価単価）
            targetRow.UnPrcCalcCdUnCst = sourceRow.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            targetRow.PriceCdUnCst = sourceRow.PriceCdUnCst; // 価格区分（原価単価）
            targetRow.StdUnPrcUnCst = sourceRow.StdUnPrcUnCst; // 基準単価（原価単価）
            targetRow.FracProcUnitUnCst = sourceRow.FracProcUnitUnCst; // 端数処理単位（原価単価）
            targetRow.FracProcUnCst = sourceRow.FracProcUnCst; // 端数処理（原価単価）
            targetRow.SalesUnitCost = sourceRow.SalesUnitCost; // 原価単価
            targetRow.SalesUnitCostChngDiv = sourceRow.SalesUnitCostChngDiv; // 原価単価変更区分
            targetRow.RateBLGoodsCode = sourceRow.RateBLGoodsCode; // BL商品コード（掛率）
            targetRow.RateBLGoodsName = sourceRow.RateBLGoodsName; // BL商品コード名称（掛率）
            targetRow.RateGoodsRateGrpCd = sourceRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            targetRow.RateGoodsRateGrpNm = sourceRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            targetRow.RateBLGroupCode = sourceRow.RateBLGroupCode; // BLグループコード（掛率）
            targetRow.RateBLGroupName = sourceRow.RateBLGroupName; // BLグループ名称（掛率）
            targetRow.PrtBLGoodsCode = sourceRow.PrtBLGoodsCode; // BL商品コード（印刷）
            targetRow.PrtBLGoodsName = sourceRow.PrtBLGoodsName; // BL商品コード名称（印刷）
            targetRow.SalesCode = sourceRow.SalesCode; // 販売区分コード
            targetRow.SalesCdNm = sourceRow.SalesCdNm; // 販売区分名称
            targetRow.WorkManHour = sourceRow.WorkManHour; // 作業工数
            targetRow.ShipmentCnt = sourceRow.ShipmentCnt; // 出荷数
            targetRow.AcceptAnOrderCnt = sourceRow.AcceptAnOrderCnt; // 受注数量
            targetRow.AcptAnOdrAdjustCnt = sourceRow.AcptAnOdrAdjustCnt; // 受注調整数
            targetRow.AcptAnOdrRemainCnt = sourceRow.AcptAnOdrRemainCnt; // 受注残数
            targetRow.RemainCntUpdDate = sourceRow.RemainCntUpdDate; // 残数更新日
            targetRow.SalesMoneyTaxInc = sourceRow.SalesMoneyTaxInc; // 売上金額（税込み）
            targetRow.SalesMoneyTaxExc = sourceRow.SalesMoneyTaxExc; // 売上金額（税抜き）
            targetRow.Cost = sourceRow.Cost; // 原価
            targetRow.GrsProfitChkDiv = sourceRow.GrsProfitChkDiv; // 粗利チェック区分
            targetRow.SalesGoodsCd = sourceRow.SalesGoodsCd; // 売上商品区分
            targetRow.SalesPriceConsTax = sourceRow.SalesPriceConsTax; // 売上金額消費税額
            targetRow.TaxationDivCd = sourceRow.TaxationDivCd; // 課税区分
            targetRow.PartySlipNumDtl = sourceRow.PartySlipNumDtl; // 相手先伝票番号（明細）
            targetRow.DtlNote = sourceRow.DtlNote; // 明細備考
            targetRow.SupplierCd = sourceRow.SupplierCd; // 仕入先コード
            targetRow.SupplierSnm = sourceRow.SupplierSnm; // 仕入先略称
            targetRow.OrderNumber = sourceRow.OrderNumber; // 発注番号
            targetRow.WayToOrder = sourceRow.WayToOrder; // 注文方法
            targetRow.SlipMemo1 = sourceRow.SlipMemo1; // 伝票メモ１
            targetRow.SlipMemo2 = sourceRow.SlipMemo2; // 伝票メモ２
            targetRow.SlipMemo3 = sourceRow.SlipMemo3; // 伝票メモ３
            targetRow.InsideMemo1 = sourceRow.InsideMemo1; // 社内メモ１
            targetRow.InsideMemo2 = sourceRow.InsideMemo2; // 社内メモ２
            targetRow.InsideMemo3 = sourceRow.InsideMemo3; // 社内メモ３
            targetRow.BfListPrice = sourceRow.BfListPrice; // 変更前定価
            targetRow.BfSalesUnitPrice = sourceRow.BfSalesUnitPrice; // 変更前売価
            targetRow.BfUnitCost = sourceRow.BfUnitCost; // 変更前原価
            targetRow.CmpltSalesRowNo = sourceRow.CmpltSalesRowNo; // 一式明細番号
            targetRow.CmpltGoodsMakerCd = sourceRow.CmpltGoodsMakerCd; // メーカーコード（一式）
            targetRow.CmpltMakerName = sourceRow.CmpltMakerName; // メーカー名称（一式）
            targetRow.CmpltMakerKanaName = sourceRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            targetRow.CmpltGoodsName = sourceRow.CmpltGoodsName; // 商品名称（一式）
            targetRow.CmpltShipmentCnt = sourceRow.CmpltShipmentCnt; // 数量（一式）
            targetRow.CmpltSalesUnPrcFl = sourceRow.CmpltSalesUnPrcFl; // 売上単価（一式）
            targetRow.CmpltSalesMoney = sourceRow.CmpltSalesMoney; // 売上金額（一式）
            targetRow.CmpltSalesUnitCost = sourceRow.CmpltSalesUnitCost; // 原価単価（一式）
            targetRow.CmpltCost = sourceRow.CmpltCost; // 原価金額（一式）
            targetRow.CmpltPartySalSlNum = sourceRow.CmpltPartySalSlNum; // 相手先伝票番号（一式）
            targetRow.CmpltNote = sourceRow.CmpltNote; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            targetRow.SelectedGoodsNoDiv = sourceRow.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            targetRow.PrtGoodsNo = sourceRow.PrtGoodsNo; // 印刷用品番
            targetRow.PrtMakerCode = sourceRow.PrtMakerCode; // 印刷用メーカーコード
            targetRow.PrtMakerName = sourceRow.PrtMakerName; // 印刷用メーカー名称
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid; // 共通キー
            targetRow.CarRelationGuid = sourceRow.CarRelationGuid; // 車両情報共通キー
            targetRow.SalesRowNoDisplay = sourceRow.SalesRowNoDisplay; // 行番号（表示用）
            targetRow.SupplierStock = sourceRow.SupplierStock; // 現在庫数
            targetRow.SupplierStockDisplay = sourceRow.SupplierStockDisplay; // 現在庫数（表示用）
            targetRow.OpenPriceDivDisplay = sourceRow.OpenPriceDivDisplay; // オープン価格区分（表示用）
            targetRow.ListPriceDisplay = sourceRow.ListPriceDisplay; // 定価（表示用）
            targetRow.SalesUnPrcDisplay = sourceRow.SalesUnPrcDisplay; // 売上単価（表示用）
            targetRow.SalesUnitCostTaxExc = sourceRow.SalesUnitCostTaxExc; // 原価単価（税抜）
            targetRow.SalesUnitCostTaxInc = sourceRow.SalesUnitCostTaxInc; // 原価単価（税込）
            targetRow.ShipmentCntDisplay = sourceRow.ShipmentCntDisplay; // 出荷数（表示用）
            targetRow.AddUpEnableCnt = sourceRow.AddUpEnableCnt; // 計上可能数
            targetRow.AlreadyAddUpCnt = sourceRow.AlreadyAddUpCnt; // 計上済数
            targetRow.ShipmentCntDefault = sourceRow.ShipmentCntDefault; // 出荷数（初期値）
            targetRow.SalesMoneyDisplay = sourceRow.SalesMoneyDisplay; // 売上金額（表示用）
            targetRow.CostTaxInc = sourceRow.CostTaxInc; // 原価金額（税込）
            targetRow.CostTaxExc = sourceRow.CostTaxExc; // 原価金額（税抜）
            targetRow.AcceptAnOrderCntDisplay = sourceRow.AcceptAnOrderCntDisplay; // 受注数（表示用）
            targetRow.AcceptAnOrderCntDefault = sourceRow.AcceptAnOrderCntDefault; // 受注数（初期値）
            targetRow.TaxDiv = sourceRow.TaxDiv; // 課税区分（UI用）
            targetRow.CanTaxDivChange = sourceRow.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            targetRow.RowStatus = sourceRow.RowStatus; // 行ステータス
            targetRow.EditStatus = sourceRow.EditStatus; // エディットステータス
            targetRow.SlipMemoExist = sourceRow.SlipMemoExist; // メモ存在フラグ
            targetRow.SupplierSlipExist = sourceRow.SupplierSlipExist; // 仕入情報存在フラグ
            targetRow.DetailGrossProfitRate = sourceRow.DetailGrossProfitRate; // 明細粗利率
            targetRow.CostUpRate = sourceRow.CostUpRate; // 原価アップ率
            targetRow.GrossProfitSecureRate = sourceRow.GrossProfitSecureRate; // 粗利確保率
            targetRow.SupplierCdForStock = sourceRow.SupplierCdForStock; // 仕入先コード
            targetRow.StockDate = sourceRow.StockDate; // 仕入日
            targetRow.PartySalesSlipNum = sourceRow.PartySalesSlipNum; // 仕入伝票番号
            targetRow.BoCode = sourceRow.BoCode; // BO区分
            targetRow.SupplierCdForOrder = sourceRow.SupplierCdForOrder; // 発注先
            targetRow.AcceptAnOrderCntForOrder = sourceRow.AcceptAnOrderCntForOrder; // 発注数
            targetRow.SupplierSnmForOrder = sourceRow.SupplierSnmForOrder; // 発注先名称
            targetRow.UOEDeliGoodsDiv = sourceRow.UOEDeliGoodsDiv; // 納品区分
            targetRow.DeliveredGoodsDivNm = sourceRow.DeliveredGoodsDivNm; // 納品区分名称
            targetRow.DeliveredGoodsDivNmSave = sourceRow.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            targetRow.FollowDeliGoodsDiv = sourceRow.FollowDeliGoodsDiv; // H納品区分
            targetRow.FollowDeliGoodsDivNm = sourceRow.FollowDeliGoodsDivNm; // H納品区分名称
            targetRow.FollowDeliGoodsDivNmSave = sourceRow.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            targetRow.UOEResvdSection = sourceRow.UOEResvdSection; // 指定拠点
            targetRow.UOEResvdSectionNm = sourceRow.UOEResvdSectionNm; // 指定拠点名称
            targetRow.UOEResvdSectionNmSave = sourceRow.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            targetRow.PriceStartDate = sourceRow.PriceStartDate; // 新定価適用日
            targetRow.Dummy = sourceRow.Dummy; // ダミー（空欄表示用）
            targetRow.SearchPartsModeState = sourceRow.SearchPartsModeState; // 部品検索状態
            targetRow.SalesMoneyInputDiv = sourceRow.SalesMoneyInputDiv; // 売上金額手入力区分
            targetRow.SalesUnPrcTaxIncFlDefault = sourceRow.SalesUnPrcTaxIncFlDefault; // 売上単価（税込，浮動）
            targetRow.SalesUnPrcTaxExcFlDefault = sourceRow.SalesUnPrcTaxExcFlDefault; // 売上単価（税抜，浮動）
            targetRow.SalesUnitCostTaxExcDefault = sourceRow.SalesUnitCostTaxExcDefault; // 原価単価（税抜）
            targetRow.SalesUnitCostTaxIncDefault = sourceRow.SalesUnitCostTaxIncDefault; // 原価単価（税込）
            targetRow.ShipmentCntDefForChk = sourceRow.ShipmentCntDefForChk; // 出荷数初期値（変更チェック用）
            targetRow.AcceptAnOrderCntDefForChk = sourceRow.AcceptAnOrderCntDefForChk; // 受注数初期値（変更チェック用）
            //>>>2010/02/26
            targetRow.CampaignCode = sourceRow.CampaignCode; // キャンペーンコード
            targetRow.CampaignName = sourceRow.CampaignName; // キャンペーン名称
            targetRow.GoodsDivCd = sourceRow.GoodsDivCd; // 商品種別
            targetRow.RecycleDiv = sourceRow.RecycleDiv; // リサイクル区分
            targetRow.RecycleDivNm = sourceRow.RecycleDivNm; // リサイクル区分名称
            targetRow.RecycleDivNmSave = sourceRow.RecycleDivNmSave; // リサイクル区分名称
            targetRow.WayToAcptOdr = sourceRow.WayToAcptOdr; // 受注方法
            targetRow.GoodsMngNo = sourceRow.GoodsMngNo; // 商品管理番号
            targetRow.InqRowNumber = sourceRow.InqRowNumber; // 問合せ行番号
            targetRow.InqRowNumDerivedNo = sourceRow.InqRowNumDerivedNo; // 問合せ行番号枝番
            //<<<2010/02/26
            // 2012/01/16 Add >>>
            targetRow.GoodsSpecialNote = sourceRow.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<
            //>>>2012/05/02
            targetRow.RentSyncStockDate = sourceRow.RentSyncStockDate;
            targetRow.RentSyncSupplier = sourceRow.RentSyncSupplier;
            targetRow.RentSyncSupSlipNo = sourceRow.RentSyncSupSlipNo;
            //<<<2012/05/02
        }

        // ADD 2013/12/19 SCM仕掛一覧№10615対応 ------------------------------------------------->>>>>
        /// <summary>
        ///  SCM受注データオブジェクトのコピーを行います
        /// </summary>
        /// <param name="sourceRow">コピー元SCM受注データオブジェクト</param>
        /// <param name="targetRow">コピー先SCM受注データオブジェクト</param>
        private void CopyCompleteSCMAcOdrDataRow(ScmDataSet.SCMAcOdrDataRow sourceRow, ScmDataSet.SCMAcOdrDataRow targetRow)
        {
            targetRow.CreateDateTime = sourceRow.CreateDateTime;
            targetRow.UpdateDateTime = sourceRow.UpdateDateTime;
            targetRow.EnterpriseCode = sourceRow.EnterpriseCode;
            targetRow.FileHeaderGuid = sourceRow.FileHeaderGuid;
            targetRow.UpdEmployeeCode = sourceRow.UpdEmployeeCode;
            targetRow.UpdAssemblyId1 = sourceRow.UpdAssemblyId1;
            targetRow.UpdAssemblyId2 = sourceRow.UpdAssemblyId2;
            targetRow.LogicalDeleteCode = sourceRow.LogicalDeleteCode;
            targetRow.InqOriginalEpCd = sourceRow.InqOriginalEpCd.Trim();//@@@@20230303
            targetRow.InqOriginalSecCd = sourceRow.InqOriginalSecCd;
            targetRow.InqOtherEpCd = sourceRow.InqOtherEpCd;
            targetRow.InqOtherSecCd = sourceRow.InqOtherSecCd;
            targetRow.InquiryNumber = sourceRow.InquiryNumber;
            targetRow.CustomerCode = sourceRow.CustomerCode;
            targetRow.UpdateDate = sourceRow.UpdateDate;
            targetRow.UpdateTime = sourceRow.UpdateTime;
            targetRow.AnswerDivCd = sourceRow.AnswerDivCd;
            targetRow.JudgementDate = sourceRow.JudgementDate;
            targetRow.InqOrdNote = sourceRow.InqOrdNote;
            targetRow.AppendingFile = sourceRow.AppendingFile;
            targetRow.AppendingFileNm = sourceRow.AppendingFileNm;
            targetRow.InqEmployeeCd = sourceRow.InqEmployeeCd;
            targetRow.InqEmployeeNm = sourceRow.InqEmployeeNm;
            targetRow.AnsEmployeeCd = sourceRow.AnsEmployeeCd;
            targetRow.AnsEmployeeNm = sourceRow.AnsEmployeeNm;
            targetRow.InquiryDate = sourceRow.InquiryDate;
            targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus;
            targetRow.SalesSlipNum = sourceRow.SalesSlipNum;
            targetRow.SalesTotalTaxInc = sourceRow.SalesTotalTaxInc;
            targetRow.SalesSubtotalTax = sourceRow.SalesSubtotalTax;
            targetRow.InqOrdDivCd = sourceRow.InqOrdDivCd;
            targetRow.InqOrdAnsDivCd = sourceRow.InqOrdAnsDivCd;
            targetRow.ReceiveDateTime = sourceRow.ReceiveDateTime;
            targetRow.AnswerCreateDiv = sourceRow.AnswerCreateDiv;
            targetRow.CancelDiv = sourceRow.CancelDiv;
            targetRow.CMTCooprtDiv = sourceRow.CMTCooprtDiv;
            targetRow.SfPmCprtInstSlipNo = sourceRow.SfPmCprtInstSlipNo;
            targetRow.TabUseDiv = sourceRow.TabUseDiv;
            targetRow.CarMngCode = sourceRow.CarMngCode;

        }

        /// <summary>
        ///  SCM受注データ（車両情報）オブジェクトのコピーを行います
        /// </summary>
        /// <param name="sourceRow">コピー元SCM受注データ（車両情報）オブジェクト</param>
        /// <param name="targetRow">コピー先SCM受注データ（車両情報）オブジェクト</param>
        private void CopyCompleteSCMAcOdrDtCarRow(ScmDataSet.SCMAcOdrDtCarRow sourceRow, ScmDataSet.SCMAcOdrDtCarRow targetRow)
        {
            targetRow.CreateDateTime = sourceRow.CreateDateTime;
            targetRow.UpdateDateTime = sourceRow.UpdateDateTime;
            targetRow.EnterpriseCode = sourceRow.EnterpriseCode;
            targetRow.FileHeaderGuid = sourceRow.FileHeaderGuid;
            targetRow.UpdEmployeeCode = sourceRow.UpdEmployeeCode;
            targetRow.UpdAssemblyId1 = sourceRow.UpdAssemblyId1;
            targetRow.UpdAssemblyId2 = sourceRow.UpdAssemblyId2;
            targetRow.LogicalDeleteCode = sourceRow.LogicalDeleteCode;
            targetRow.InqOriginalEpCd = sourceRow.InqOriginalEpCd.Trim();//@@@@20230303
            targetRow.InqOriginalSecCd = sourceRow.InqOriginalSecCd;
            targetRow.InquiryNumber = sourceRow.InquiryNumber;
            targetRow.NumberPlate1Code = sourceRow.NumberPlate1Code;
            targetRow.NumberPlate1Name = sourceRow.NumberPlate1Name;
            targetRow.NumberPlate2 = sourceRow.NumberPlate2;
            targetRow.NumberPlate3 = sourceRow.NumberPlate3;
            targetRow.NumberPlate4 = sourceRow.NumberPlate4;
            targetRow.ModelDesignationNo = sourceRow.ModelDesignationNo;
            targetRow.CategoryNo = sourceRow.CategoryNo;
            targetRow.MakerCode = sourceRow.MakerCode;
            targetRow.ModelCode = sourceRow.ModelCode;
            targetRow.ModelSubCode = sourceRow.ModelSubCode;
            targetRow.ModelName = sourceRow.ModelName;
            targetRow.CarInspectCertModel = sourceRow.CarInspectCertModel;
            targetRow.FullModel = sourceRow.FullModel;
            targetRow.FrameNo = sourceRow.FrameNo;
            targetRow.FrameModel = sourceRow.FrameModel;
            targetRow.ChassisNo = sourceRow.ChassisNo;
            targetRow.CarProperNo = sourceRow.CarProperNo;
            targetRow.ProduceTypeOfYearNum = sourceRow.ProduceTypeOfYearNum;
            targetRow.Comment = sourceRow.Comment;
            targetRow.RpColorCode = sourceRow.RpColorCode;
            targetRow.ColorName1 = sourceRow.ColorName1;
            targetRow.TrimCode = sourceRow.TrimCode;
            targetRow.TrimName = sourceRow.TrimName;
            targetRow.Mileage = sourceRow.Mileage;
            targetRow.EquipObj = sourceRow.EquipObj;
            targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus;
            targetRow.SalesSlipNum = sourceRow.SalesSlipNum;
            targetRow.TransmissionNm = sourceRow.TransmissionNm;
            targetRow.ShiftNm = sourceRow.ShiftNm;
            targetRow.CarNo = sourceRow.CarNo;
            targetRow.MakerName = sourceRow.MakerName;
            targetRow.GradeName = sourceRow.GradeName;
            targetRow.BodyName = sourceRow.BodyName;
            targetRow.DoorCount = sourceRow.DoorCount;
            targetRow.EngineModelNm = sourceRow.EngineModelNm;
            targetRow.CmnNmEngineDisPlace = sourceRow.CmnNmEngineDisPlace;
            targetRow.EngineModel = sourceRow.EngineModel;
            targetRow.NumberOfGear = sourceRow.NumberOfGear;
            targetRow.GearNm = sourceRow.GearNm;
            targetRow.EDivNm = sourceRow.EDivNm;
            targetRow.FirstEntryDateNumTyp = sourceRow.FirstEntryDateNumTyp;
            targetRow.CarAddInf = sourceRow.CarAddInf;
            targetRow.EquipPrtsObj = sourceRow.EquipPrtsObj;
            targetRow.GradeFullName = sourceRow.GradeFullName;
            targetRow.CarMngCode = sourceRow.CarMngCode;
            targetRow.ExpectedCeDate = sourceRow.ExpectedCeDate;
        }

        /// <summary>
        ///  SCM受注明細データ（問合せ・発注）オブジェクトのコピーを行います
        /// </summary>
        /// <param name="sourceRow">コピー元SCM受注明細データ（問合せ・発注）オブジェクト</param>
        /// <param name="targetRow">コピー先SCM受注明細データ（問合せ・発注）オブジェクト</param>
        private void CopyCompleteSCMAcOdrDtlIqRow(ScmDataSet.SCMAcOdrDtlIqRow sourceRow, ScmDataSet.SCMAcOdrDtlIqRow targetRow)
        {
            targetRow.CreateDateTime = sourceRow.CreateDateTime;
            targetRow.UpdateDateTime = sourceRow.UpdateDateTime;
            targetRow.EnterpriseCode = sourceRow.EnterpriseCode;
            targetRow.FileHeaderGuid = sourceRow.FileHeaderGuid;
            targetRow.UpdEmployeeCode = sourceRow.UpdEmployeeCode;
            targetRow.UpdAssemblyId1 = sourceRow.UpdAssemblyId1;
            targetRow.UpdAssemblyId2 = sourceRow.UpdAssemblyId2;
            targetRow.LogicalDeleteCode = sourceRow.LogicalDeleteCode;
            targetRow.InqOriginalEpCd = sourceRow.InqOriginalEpCd.Trim();//@@@@20230303
            targetRow.InqOriginalSecCd = sourceRow.InqOriginalSecCd;
            targetRow.InqOtherEpCd = sourceRow.InqOtherEpCd;
            targetRow.InqOtherSecCd = sourceRow.InqOtherSecCd;
            targetRow.InquiryNumber = sourceRow.InquiryNumber;
            targetRow.UpdateDate = sourceRow.UpdateDate;
            targetRow.UpdateTime = sourceRow.UpdateTime;
            targetRow.InqRowNumber = sourceRow.InqRowNumber;
            targetRow.InqRowNumDerivedNo = sourceRow.InqRowNumDerivedNo;
            targetRow.InqOrgDtlDiscGuid = sourceRow.InqOrgDtlDiscGuid;
            targetRow.InqOthDtlDiscGuid = sourceRow.InqOthDtlDiscGuid;
            targetRow.GoodsDivCd = sourceRow.GoodsDivCd;
            targetRow.RecyclePrtKindCode = sourceRow.RecyclePrtKindCode;
            targetRow.RecyclePrtKindName = sourceRow.RecyclePrtKindName;
            targetRow.DeliveredGoodsDiv = sourceRow.DeliveredGoodsDiv;
            targetRow.HandleDivCode = sourceRow.HandleDivCode;
            targetRow.GoodsShape = sourceRow.GoodsShape;
            targetRow.DelivrdGdsConfCd = sourceRow.DelivrdGdsConfCd;
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate;
            targetRow.AnswerDeliveryDate = sourceRow.AnswerDeliveryDate;
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode;
            targetRow.BLGoodsDrCode = sourceRow.BLGoodsDrCode;
            targetRow.InqGoodsName = sourceRow.InqGoodsName;
            targetRow.AnsGoodsName = sourceRow.AnsGoodsName;
            targetRow.SalesOrderCount = sourceRow.SalesOrderCount;
            targetRow.DeliveredGoodsCount = sourceRow.DeliveredGoodsCount;
            targetRow.GoodsNo = sourceRow.GoodsNo;
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd;
            targetRow.GoodsMakerNm = sourceRow.GoodsMakerNm;
            targetRow.PureGoodsMakerCd = sourceRow.PureGoodsMakerCd;
            targetRow.InqPureGoodsNo = sourceRow.InqPureGoodsNo;
            targetRow.AnsPureGoodsNo = sourceRow.AnsPureGoodsNo;
            targetRow.ListPrice = sourceRow.ListPrice;
            targetRow.UnitPrice = sourceRow.UnitPrice;
            targetRow.GoodsAddInfo = sourceRow.GoodsAddInfo;
            targetRow.RoughRrofit = sourceRow.RoughRrofit;
            targetRow.RoughRate = sourceRow.RoughRate;
            targetRow.AnswerLimitDate = sourceRow.AnswerLimitDate;
            targetRow.CommentDtl = sourceRow.CommentDtl;
            targetRow.AppendingFileDtl = sourceRow.AppendingFileDtl;
            targetRow.AppendingFileNmDtl = sourceRow.AppendingFileNmDtl;
            targetRow.ShelfNo = sourceRow.ShelfNo;
            targetRow.AdditionalDivCd = sourceRow.AdditionalDivCd;
            targetRow.CorrectDivCD = sourceRow.CorrectDivCD;
            targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus;
            targetRow.SalesSlipNum = sourceRow.SalesSlipNum;
            targetRow.InqOrdDivCd = sourceRow.InqOrdDivCd;
            targetRow.DisplayOrder = sourceRow.DisplayOrder;
            targetRow.CancelCndtinDiv = sourceRow.CancelCndtinDiv;
            targetRow.SalesRowNo = sourceRow.SalesRowNo;
            targetRow.WarehouseCode = sourceRow.WarehouseCode;
            targetRow.WarehouseName = sourceRow.WarehouseName;
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo;
            targetRow.PmPrsntCount = sourceRow.PmPrsntCount;
            targetRow.SetPartsNumber = sourceRow.SetPartsNumber;
            targetRow.SetPartsMainSubNo = sourceRow.SetPartsMainSubNo;
            targetRow.CampaignCode = sourceRow.CampaignCode;
            targetRow.GoodsSpecialNote = sourceRow.GoodsSpecialNote;
            targetRow.AutoEstimatePartsCd = sourceRow.AutoEstimatePartsCd;
            targetRow.SalesTotalTaxInc = sourceRow.SalesTotalTaxInc;
            targetRow.SalesTotalTaxExc = sourceRow.SalesTotalTaxExc;
            targetRow.ScmConsTaxLayMethod = sourceRow.ScmConsTaxLayMethod;
            targetRow.ConsTaxRate = sourceRow.ConsTaxRate;
            targetRow.ScmFractionProcCd = sourceRow.ScmFractionProcCd;
            targetRow.AccRecConsTax = sourceRow.AccRecConsTax;
            targetRow.PMSalesDate = sourceRow.PMSalesDate;
            targetRow.SuppSlpPrtTime = sourceRow.SuppSlpPrtTime;
            targetRow.SalesMoneyTaxInc = sourceRow.SalesMoneyTaxInc;
            targetRow.SalesMoneyTaxExc = sourceRow.SalesMoneyTaxExc;
            targetRow.DataInputSystem = sourceRow.DataInputSystem;
            // ADD 2014/07/23 Redmine#43080の2の対応--------------------->>>>>
            targetRow.PrmSetDtlNo2 = sourceRow.PrmSetDtlNo2;
            targetRow.PrmSetDtlName2 = sourceRow.PrmSetDtlName2;
            // ADD 2014/07/23 Redmine#43080の2の対応---------------------<<<<<
        }

        /// <summary>
        ///  SCM受注明細データ（回答）オブジェクトのコピーを行います
        /// </summary>
        /// <param name="sourceRow">コピー元SCM受注明細データ（回答）オブジェクト</param>
        /// <param name="targetRow">コピー先SCM受注明細データ（回答）オブジェクト</param>
        /// <remarks>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SCM受注明細データ（回答）オブジェクトコピー処理に新BLコード等を追加する。</br>
        /// </remarks>
        private void CopyCompleteSCMAcOdrDtlAsRow(ScmDataSet.SCMAcOdrDtlAsRow sourceRow, ScmDataSet.SCMAcOdrDtlAsRow targetRow)
        {
            targetRow.CreateDateTime = sourceRow.CreateDateTime;
            targetRow.UpdateDateTime = sourceRow.UpdateDateTime;
            targetRow.EnterpriseCode = sourceRow.EnterpriseCode;
            targetRow.FileHeaderGuid = sourceRow.FileHeaderGuid;
            targetRow.UpdEmployeeCode = sourceRow.UpdEmployeeCode;
            targetRow.UpdAssemblyId1 = sourceRow.UpdAssemblyId1;
            targetRow.UpdAssemblyId2 = sourceRow.UpdAssemblyId2;
            targetRow.LogicalDeleteCode = sourceRow.LogicalDeleteCode;
            targetRow.InqOriginalEpCd = sourceRow.InqOriginalEpCd.Trim();//@@@@20230303
            targetRow.InqOriginalSecCd = sourceRow.InqOriginalSecCd;
            targetRow.InqOtherEpCd = sourceRow.InqOtherEpCd;
            targetRow.InqOtherSecCd = sourceRow.InqOtherSecCd;
            targetRow.InquiryNumber = sourceRow.InquiryNumber;
            targetRow.UpdateDate = sourceRow.UpdateDate;
            targetRow.UpdateTime = sourceRow.UpdateTime;
            targetRow.InqRowNumber = sourceRow.InqRowNumber;
            targetRow.InqRowNumDerivedNo = sourceRow.InqRowNumDerivedNo;
            targetRow.InqOrgDtlDiscGuid = sourceRow.InqOrgDtlDiscGuid;
            targetRow.InqOthDtlDiscGuid = sourceRow.InqOthDtlDiscGuid;
            targetRow.GoodsDivCd = sourceRow.GoodsDivCd;
            targetRow.RecyclePrtKindCode = sourceRow.RecyclePrtKindCode;
            targetRow.RecyclePrtKindName = sourceRow.RecyclePrtKindName;
            targetRow.DeliveredGoodsDiv = sourceRow.DeliveredGoodsDiv;
            targetRow.HandleDivCode = sourceRow.HandleDivCode;
            targetRow.GoodsShape = sourceRow.GoodsShape;
            targetRow.DelivrdGdsConfCd = sourceRow.DelivrdGdsConfCd;
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate;
            targetRow.AnswerDeliveryDate = sourceRow.AnswerDeliveryDate;
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode;
            targetRow.BLGoodsDrCode = sourceRow.BLGoodsDrCode;
            targetRow.InqGoodsName = sourceRow.InqGoodsName;
            targetRow.AnsGoodsName = sourceRow.AnsGoodsName;
            targetRow.SalesOrderCount = sourceRow.SalesOrderCount;
            targetRow.DeliveredGoodsCount = sourceRow.DeliveredGoodsCount;
            targetRow.GoodsNo = sourceRow.GoodsNo;
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd;
            targetRow.GoodsMakerNm = sourceRow.GoodsMakerNm;
            targetRow.PureGoodsMakerCd = sourceRow.PureGoodsMakerCd;
            targetRow.InqPureGoodsNo = sourceRow.InqPureGoodsNo;
            targetRow.AnsPureGoodsNo = sourceRow.AnsPureGoodsNo;
            targetRow.ListPrice = sourceRow.ListPrice;
            targetRow.UnitPrice = sourceRow.UnitPrice;
            targetRow.GoodsAddInfo = sourceRow.GoodsAddInfo;
            targetRow.RoughRrofit = sourceRow.RoughRrofit;
            targetRow.RoughRate = sourceRow.RoughRate;
            targetRow.AnswerLimitDate = sourceRow.AnswerLimitDate;
            targetRow.CommentDtl = sourceRow.CommentDtl;
            targetRow.AppendingFileDtl = sourceRow.AppendingFileDtl;
            targetRow.AppendingFileNmDtl = sourceRow.AppendingFileNmDtl;
            targetRow.ShelfNo = sourceRow.ShelfNo;
            targetRow.AdditionalDivCd = sourceRow.AdditionalDivCd;
            targetRow.CorrectDivCD = sourceRow.CorrectDivCD;
            targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus;
            targetRow.SalesSlipNum = sourceRow.SalesSlipNum;
            targetRow.SalesRowNo = sourceRow.SalesRowNo;
            targetRow.CampaignCode = sourceRow.CampaignCode;
            targetRow.StockDiv = sourceRow.StockDiv;
            targetRow.InqOrdDivCd = sourceRow.InqOrdDivCd;
            targetRow.DisplayOrder = sourceRow.DisplayOrder;
            targetRow.GoodsMngNo = sourceRow.GoodsMngNo;
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid;
            targetRow.CancelCndtinDiv = sourceRow.CancelCndtinDiv;
            targetRow.WarehouseCode = sourceRow.WarehouseCode;
            targetRow.WarehouseName = sourceRow.WarehouseName;
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo;
            targetRow.PmPrsntCount = sourceRow.PmPrsntCount;
            targetRow.SetPartsNumber = sourceRow.SetPartsNumber;
            targetRow.SetPartsMainSubNo = sourceRow.SetPartsMainSubNo;
            targetRow.GoodsSpecialNote = sourceRow.GoodsSpecialNote;
            targetRow.AutoEstimatePartsCd = sourceRow.AutoEstimatePartsCd;
            targetRow.SalesTotalTaxInc = sourceRow.SalesTotalTaxInc;
            targetRow.SalesTotalTaxExc = sourceRow.SalesTotalTaxExc;
            targetRow.ScmConsTaxLayMethod = sourceRow.ScmConsTaxLayMethod;
            targetRow.ConsTaxRate = sourceRow.ConsTaxRate;
            targetRow.ScmFractionProcCd = sourceRow.ScmFractionProcCd;
            targetRow.AccRecConsTax = sourceRow.AccRecConsTax;
            targetRow.PMSalesDate = sourceRow.PMSalesDate;
            targetRow.SuppSlpPrtTime = sourceRow.SuppSlpPrtTime;
            targetRow.SalesMoneyTaxInc = sourceRow.SalesMoneyTaxInc;
            targetRow.SalesMoneyTaxExc = sourceRow.SalesMoneyTaxExc;
            targetRow.DataInputSystem = sourceRow.DataInputSystem;
            targetRow.PmMainMngWarehouseCd = sourceRow.PmMainMngWarehouseCd;
            targetRow.PmMainMngWarehouseName = sourceRow.PmMainMngWarehouseName;
            targetRow.PmMainMngShelfNo = sourceRow.PmMainMngShelfNo;
            targetRow.PmMainMngPrsntCount = sourceRow.PmMainMngPrsntCount;
            // ADD 2014/07/23 Redmine#43080の2の対応--------------------->>>>>
            targetRow.PrmSetDtlNo2 = sourceRow.PrmSetDtlNo2;
            targetRow.PrmSetDtlName2 = sourceRow.PrmSetDtlName2;
            // ADD 2014/07/23 Redmine#43080の2の対応---------------------<<<<<
            // ADD 2014/11/14 SCM仕掛一覧№10694対応 ---------------------------------------->>>>>
            targetRow.SetPartsMkrCd = sourceRow.SetPartsMkrCd;         // セット部品メーカーコード 
            targetRow.SetPartsNumber = sourceRow.SetPartsNumber;       // セット部品番号
            targetRow.SetPartsMainSubNo = sourceRow.SetPartsMainSubNo; // セット部品親子番号
            // ADD 2014/11/14 SCM仕掛一覧№10694対応 ----------------------------------------<<<<<
            //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ---------->>>>>
            targetRow.InqBlUtyPtThCd = sourceRow.InqBlUtyPtThCd;     // 問発BL統一部品コード(スリーコード版)
            targetRow.InqBlUtyPtSbCd = sourceRow.InqBlUtyPtSbCd;     // 問発BL統一部品サブコード
            targetRow.AnsBlUtyPtThCd = sourceRow.AnsBlUtyPtThCd;     // 回答BL統一部品コード(スリーコード版)
            targetRow.AnsBlUtyPtSbCd = sourceRow.AnsBlUtyPtSbCd;     // 回答BL統一部品サブコード
            targetRow.AnsBLGoodsCode = sourceRow.AnsBLGoodsCode;     // 回答BL商品コード
            targetRow.AnsBLGoodsDrCode = sourceRow.AnsBLGoodsDrCode; // 回答BL商品コード枝番
            //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ----------<<<<<
        }

        // ADD 2013/12/19 SCM仕掛一覧№10615対応 -------------------------------------------------<<<<<


        /// <summary>
        /// ＤＢから読み込んだ売上データオブジェクトをインスタンス変数にキャッシュします。
        /// </summary>
        /// <param name="source">売上データオブジェクト</param>
        private void CacheDBData(SalesSlip source)
        {
            this._salesSlipDBData = source.Clone();
        }

        /// <summary>
        /// 明細データテーブル退避処理
        /// </summary>
        public void SaveDataTable()
        {
            this._salesDetailDataTableSave = (SalesInputDataSet.SalesDetailDataTable)this._salesDetailDataTable.Copy();
            this._salesDetailAcceptAnOrderDataTableSave = (SalesInputDataSet.SalesDetailAcceptAnOrderDataTable)this._salesDetailAcceptAnOrderDataTable.Copy();
            this._uoeOrderDtlDataTableSave = (SalesInputDataSet.UOEOrderDtlDataTable)this._uoeOrderDtlDataTable.Copy();
            this._stockTempDataTableSave = (SalesInputDataSet.StockTempDataTable)this._stockTempDataTable.Copy();
            this._carInfoDataTableSave = (SalesInputDataSet.CarInfoDataTable)this._carInfoDataTable.Copy(); // 2010/02/26
            //>>>2010/04/08
            foreach (Guid key in this._colorInfoDic.Keys)
            {
                if (!this._colorInfoDicSave.ContainsKey(key))
                {
                    this._colorInfoDicSave.Add(key, (PMKEN01010E.ColorCdInfoDataTable)this._colorInfoDic[key].Copy());
                }
            }

            foreach (Guid key in this._trimInfoDic.Keys)
            {
                if (!this._trimInfoDicSave.ContainsKey(key))
                {
                    this._trimInfoDicSave.Add(key, (PMKEN01010E.TrimCdInfoDataTable)this._trimInfoDic[key].Copy());
                }
            }
            foreach (Guid key in this._cEqpDspInfoDic.Keys)
            {
                if (!this._cEqpDspInfoDicSave.ContainsKey(key))
                {
                    this._cEqpDspInfoDicSave.Add(key, (PMKEN01010E.CEqpDefDspInfoDataTable)this._cEqpDspInfoDic[key].Copy());
                }
            }
            //<<<2010/04/08

            // ADD 2013/12/19 SCM仕掛一覧№10615対応 ------------------------------>>>>>
            this._scmAcOdrDataDataTableInputSave = (ScmDataSet.SCMAcOdrDataDataTable)this._scmAcOdrDataDataTable.Copy();
            this._scmAcOdrDtCarDataTableInputSave = (ScmDataSet.SCMAcOdrDtCarDataTable)this._scmAcOdrDtCarDataTable.Copy();
            this._scmAcOdrDtlIqDataTableInputSave = (ScmDataSet.SCMAcOdrDtlIqDataTable)this._scmAcOdrDtlIqDataTable.Copy();
            this._scmAcOdrDtlAsDataTableInputSave = (ScmDataSet.SCMAcOdrDtlAsDataTable)this._scmAcOdrDtlAsDataTable.Copy();
            // ADD 2013/12/19 SCM仕掛一覧№10615対応 ------------------------------<<<<<
        }

        //>>>2010/04/08
        /// <summary>
        /// 明細データテーブル復活処理
        /// </summary>
        public void RevivalDataTable()
        {
            this.RevivalDataTable(false);
        }
        //<<<2010/04/08

        /// <summary>
        /// 明細データテーブル復活処理
        /// </summary>
        //>>>2010/04/08
        //public void RevivalDataTable()
        public void RevivalDataTable(bool scmFlg)
        //<<<2010/04/08
        {
            SalesInputDataSet.SalesDetailDataTable tempSalesDetailDataTable = (SalesInputDataSet.SalesDetailDataTable)this._salesDetailDataTable.Copy(); // 2010/04/08

            this._salesDetailDataTable.Rows.Clear();
            foreach (SalesInputDataSet.SalesDetailRow sourceRow in this._salesDetailDataTableSave)
            {
                SalesInputDataSet.SalesDetailRow targetRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(sourceRow.SalesSlipNum, sourceRow.SalesRowNo);
                if (targetRow != null)
                {
                    this.CopyCompleteSalesDetailRow(sourceRow, targetRow);
                }
                else
                {
                    targetRow = this._salesDetailDataTable.NewSalesDetailRow();
                    this.CopyCompleteSalesDetailRow(sourceRow, targetRow);
                    this._salesDetailDataTable.AddSalesDetailRow(targetRow);
                }
            }
            if (this._salesSlip.InputMode == ctINPUTMODE_SalesSlip_Normal) this.AddSalesDetailRowInitialRowCount();
            this._salesDetailDataTableSave.Rows.Clear();

            this._salesDetailAcceptAnOrderDataTable.Rows.Clear();
            foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow sourceRow in this._salesDetailAcceptAnOrderDataTableSave)
            {
                SalesInputDataSet.SalesDetailAcceptAnOrderRow targetRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(sourceRow.DtlRelationGuid);
                if (targetRow != null)
                {
                    this.CopyCompleteAcceptAnOrderRow(sourceRow, targetRow);
                }
                else
                {
                    targetRow = this._salesDetailAcceptAnOrderDataTable.NewSalesDetailAcceptAnOrderRow();
                    this.CopyCompleteAcceptAnOrderRow(sourceRow, targetRow);
                    this._salesDetailAcceptAnOrderDataTable.AddSalesDetailAcceptAnOrderRow(targetRow);
                }
            }
            this._salesDetailAcceptAnOrderDataTableSave.Rows.Clear();

            this._stockTempDataTable.Rows.Clear();
            foreach (SalesInputDataSet.StockTempRow sourceRow in this._stockTempDataTableSave)
            {
                SalesInputDataSet.StockTempRow targetRow = this._stockTempDataTable.FindByDtlRelationGuid(sourceRow.DtlRelationGuid);
                if (targetRow != null)
                {
                    this.CopyCompleteStockTempRow(sourceRow, targetRow);
                }
                else
                {
                    targetRow = this._stockTempDataTable.NewStockTempRow();
                    this.CopyCompleteStockTempRow(sourceRow, targetRow);
                    this._stockTempDataTable.AddStockTempRow(targetRow);
                }
            }
            this._stockTempDataTableSave.Rows.Clear();
            this._stockTempDataTableDelete.Rows.Clear(); // ADD 2012/11/27 Y.Wakita

            this._uoeOrderDtlDataTable.Rows.Clear();
            foreach (SalesInputDataSet.UOEOrderDtlRow sourceRow in this._uoeOrderDtlDataTableSave)
            {
                SalesInputDataSet.UOEOrderDtlRow targetRow = this._uoeOrderDtlDataTable.FindByDtlRelationGuid(sourceRow.DtlRelationGuid);
                if (targetRow != null)
                {
                    this.CopyCompleteUOEOrderDtlRow(sourceRow, targetRow);
                }
                else
                {
                    targetRow = this._uoeOrderDtlDataTable.NewUOEOrderDtlRow();
                    this.CopyCompleteUOEOrderDtlRow(sourceRow, targetRow);
                    this._uoeOrderDtlDataTable.AddUOEOrderDtlRow(targetRow);
                }
            }
            this._uoeOrderDtlDataTableSave.Rows.Clear();

            //>>>2010/02/26
            this._carInfoDataTable.Rows.Clear();
            foreach (SalesInputDataSet.CarInfoRow sourceRow in this._carInfoDataTableSave)
            {
                SalesInputDataSet.CarInfoRow targetRow = this._carInfoDataTable.FindByCarRelationGuid(sourceRow.CarRelationGuid);
                if (targetRow != null)
                {
                    this.CopyCompleteCarInfoRow(sourceRow, targetRow);
                }
                else
                {
                    targetRow = this._carInfoDataTable.NewCarInfoRow();
                    this.CopyCompleteCarInfoRow(sourceRow, targetRow);
                    if (scmFlg) targetRow.AcceptAnOrderNo = -1; // 2010/04/08
                    this._carInfoDataTable.AddCarInfoRow(targetRow);
                }
            }
            this._carInfoDataTableSave.Rows.Clear();
            //<<<2010/02/26

            //>>>2010/04/08
            this._colorInfoDic.Clear();
            this._trimInfoDic.Clear();
            this._cEqpDspInfoDic.Clear();
            foreach (Guid key in this._colorInfoDicSave.Keys) this._colorInfoDic.Add(key, (PMKEN01010E.ColorCdInfoDataTable)this._colorInfoDicSave[key].Copy());
            foreach (Guid key in this._trimInfoDicSave.Keys) this._trimInfoDic.Add(key, (PMKEN01010E.TrimCdInfoDataTable)this._trimInfoDicSave[key].Copy());
            foreach (Guid key in this._cEqpDspInfoDicSave.Keys) this._cEqpDspInfoDic.Add(key, (PMKEN01010E.CEqpDefDspInfoDataTable)this._cEqpDspInfoDicSave[key].Copy());
            //<<<2010/04/08

            // ADD 2013/12/19 SCM仕掛一覧№10615対応 ------------------------------>>>>>
            // SCM受注データ復活
            this._scmAcOdrDataDataTable.Rows.Clear();
            foreach (ScmDataSet.SCMAcOdrDataRow sourceRow in this._scmAcOdrDataDataTableInputSave)
            {
                // 直前で_scmAcOdrDataDataTableがClearされるためtargetRowは常にNullになります          ADD 2015/06/25 コメント追加 yugami 
                ScmDataSet.SCMAcOdrDataRow targetRow = this._scmAcOdrDataDataTable.FindByInquiryNumber(sourceRow.InquiryNumber);
                if (targetRow != null)
                {
                    this.CopyCompleteSCMAcOdrDataRow(sourceRow, targetRow);
                }
                else
                {
                    targetRow = this._scmAcOdrDataDataTable.NewSCMAcOdrDataRow();
                    this.CopyCompleteSCMAcOdrDataRow(sourceRow, targetRow);
                    this._scmAcOdrDataDataTable.AddSCMAcOdrDataRow(targetRow);
                }
            }
            this._scmAcOdrDataDataTableInputSave.Rows.Clear();

            // SCM受注データ（車両情報）復活
            this._scmAcOdrDtCarDataTable.Rows.Clear();
            foreach (ScmDataSet.SCMAcOdrDtCarRow sourceRow in this._scmAcOdrDtCarDataTableInputSave)
            {
                // 直前で_scmAcOdrDtCarDataTableがClearされるためtargetRowは常にNullになります          ADD 2015/06/25 コメント追加 yugami
                ScmDataSet.SCMAcOdrDtCarRow targetRow = this._scmAcOdrDtCarDataTable.FindByInquiryNumber(sourceRow.InquiryNumber);
                if (targetRow != null)
                {
                    this.CopyCompleteSCMAcOdrDtCarRow(sourceRow, targetRow);
                }
                else
                {
                    targetRow = this._scmAcOdrDtCarDataTable.NewSCMAcOdrDtCarRow();
                    this.CopyCompleteSCMAcOdrDtCarRow(sourceRow, targetRow);
                    this._scmAcOdrDtCarDataTable.AddSCMAcOdrDtCarRow(targetRow);
                }
            }
            this._scmAcOdrDtCarDataTableInputSave.Rows.Clear();

            // SCM受注明細データ（問合せ・発注）復活
            this._scmAcOdrDtlIqDataTable.Rows.Clear();
            foreach (ScmDataSet.SCMAcOdrDtlIqRow sourceRow in this._scmAcOdrDtlIqDataTableInputSave)
            {
                // 直前で_scmAcOdrDtlIqDataTableがClearされるためtargetRowは常にNullになります          ADD 2015/06/25 コメント追加 yugami
                // 本来であれば問合せ番号・問合せ行番号・問合せ行番号枝番で検索を行う必要があります     ADD 2015/06/25 コメント追加 yugami
                ScmDataSet.SCMAcOdrDtlIqRow targetRow = this._scmAcOdrDtlIqDataTable.FindByInquiryNumberInqRowNumber(sourceRow.InquiryNumber, sourceRow.InqRowNumber);
                if (targetRow != null)
                {
                    this.CopyCompleteSCMAcOdrDtlIqRow(sourceRow, targetRow);
                }
                else
                {
                    targetRow = this._scmAcOdrDtlIqDataTable.NewSCMAcOdrDtlIqRow();
                    this.CopyCompleteSCMAcOdrDtlIqRow(sourceRow, targetRow);
                    this._scmAcOdrDtlIqDataTable.AddSCMAcOdrDtlIqRow(targetRow);
                }
            }
            this._scmAcOdrDtlIqDataTableInputSave.Rows.Clear();

            // SCM受注明細データ（回答）復活
            this._scmAcOdrDtlAsDataTable.Rows.Clear();
            foreach (ScmDataSet.SCMAcOdrDtlAsRow sourceRow in this._scmAcOdrDtlAsDataTableInputSave)
            {
                // 直前で_scmAcOdrDtlAsDataTableがClearされるためscmAcOdrDtlAsRowsは常にNullになります          ADD 2015/06/25 コメント追加 yugami 
                ScmDataSet.SCMAcOdrDtlAsRow[] scmAcOdrDtlAsRows = (ScmDataSet.SCMAcOdrDtlAsRow[])this._scmAcOdrDtlAsDataTable.Select(string.Format("{0}={1} AND {2}={3}",
                    this._scmAcOdrDtlAsDataTable.InqRowNumberColumn.ColumnName, sourceRow.InqRowNumber,
                    this._scmAcOdrDtlAsDataTable.InqRowNumDerivedNoColumn.ColumnName, sourceRow.InqRowNumDerivedNo));
                ScmDataSet.SCMAcOdrDtlAsRow targetRow = null;
                if (scmAcOdrDtlAsRows != null && scmAcOdrDtlAsRows.Length != 0)
                {
                    targetRow = scmAcOdrDtlAsRows[0];
                }
                if (targetRow != null)
                {
                    this.CopyCompleteSCMAcOdrDtlAsRow(sourceRow, targetRow);
                }
                else
                {
                    targetRow = this._scmAcOdrDtlAsDataTable.NewSCMAcOdrDtlAsRow();
                    this.CopyCompleteSCMAcOdrDtlAsRow(sourceRow, targetRow);
                    this._scmAcOdrDtlAsDataTable.AddSCMAcOdrDtlAsRow(targetRow);
                }
            }
            this._scmAcOdrDtlAsDataTableInputSave.Rows.Clear();

            // ADD 2013/12/19 SCM仕掛一覧№10615対応 ------------------------------<<<<<
        }

        /// <summary>
        /// 売上データオブジェクトの見積情報クリアします。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        private void ClearEstimateInfo(ref SalesSlip salesSlip)
        {
            switch ((SalesSlipInputAcs.AcptAnOdrStatusState)salesSlip.AcptAnOdrStatus)
            {
                case AcptAnOdrStatusState.Estimate:
                case AcptAnOdrStatusState.UnitPriceEstimate:
                    break;
                case AcptAnOdrStatusState.AcceptAnOrder:
                case AcptAnOdrStatusState.Sales:
                case AcptAnOdrStatusState.Shipment:
                    salesSlip.EstimaTaxDivCd = 0;
                    salesSlip.EstimateFormPrtCd = 0;
                    salesSlip.EstimateSubject = string.Empty;
                    salesSlip.Footnotes1 = string.Empty;
                    salesSlip.Footnotes2 = string.Empty;
                    salesSlip.EstimateTitle1 = string.Empty;
                    salesSlip.EstimateTitle2 = string.Empty;
                    salesSlip.EstimateTitle3 = string.Empty;
                    salesSlip.EstimateTitle4 = string.Empty;
                    salesSlip.EstimateTitle5 = string.Empty;
                    salesSlip.EstimateNote1 = string.Empty;
                    salesSlip.EstimateNote2 = string.Empty;
                    salesSlip.EstimateNote3 = string.Empty;
                    salesSlip.EstimateNote4 = string.Empty;
                    salesSlip.EstimateNote5 = string.Empty;
                    break;
            }
        }

        /// <summary>
        /// 売上明細データオブジェクトの一式情報をクリアします。
        /// </summary>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        private void ClearCmpltInfo(ref  List<SalesDetail> salesDetailList)
        {
            foreach (SalesDetail salesDetail in salesDetailList)
            {
                // --- UPD 2014/01/15 T.Miyamoto ------------------------------>>>>>
                //salesDetail.CmpltSalesRowNo = 0;
                //salesDetail.CmpltGoodsMakerCd = 0;
                //salesDetail.CmpltMakerName = string.Empty;
                //salesDetail.CmpltGoodsName = string.Empty;
                //salesDetail.CmpltShipmentCnt = 0;
                //salesDetail.CmpltSalesUnPrcFl = 0;
                salesDetail.CmpltMakerName = string.Empty;
                salesDetail.CmpltShipmentCnt = 0;
                // --- UPD 2014/01/15 T.Miyamoto ------------------------------<<<<<
                salesDetail.CmpltSalesMoney = 0;
                salesDetail.CmpltSalesUnitCost = 0;
                salesDetail.CmpltCost = 0;
                salesDetail.CmpltPartySalSlNum = string.Empty;
                salesDetail.CmpltNote = string.Empty;
            }
        }

        /// <summary>
        /// 各種データをクリアします。
        /// </summary>
        /// <remarks>受注データはクリアしません。</remarks>
        public void ClearData()
        {
            this._salesDetailDataTable.Rows.Clear();
            this._salesDetailDataTableBeforeAddUp.Rows.Clear();
            this._addUpSrcDetailDataTable.Rows.Clear();
            this._completeInfoDataTable.Rows.Clear();
            this._depsitMain = new SearchDepsitMain();
            this._depositAlw = new SearchDepositAlw();
            this._stockSlipDataTable.Rows.Clear();
            this._stockDetailDataTable.Rows.Clear();
            this._stockSlipForReadDataTable.Rows.Clear();
            this._stockDetailForReadDataTable.Rows.Clear();
            this._stockTempDataTable.Rows.Clear();
            this._stockTempDataTableForSet.Rows.Clear();
            this._stockTempDataTableDelete.Rows.Clear(); // ADD 2012/11/27 Y.Wakita
            this._addUpOrgStockDetailDataTable.Rows.Clear();
            this._paymentSlpDataTable.Rows.Clear();
            this._carInfoDataTable.Rows.Clear();
            this._cEqpDspInfoDic.Clear();
            this._colorInfoDic.Clear();
            this._trimInfoDic.Clear();
            this._carInfo.Clear();
            this._carRelationDic.Clear();
            this._goodsUnitDataInfo.Clear();
            this._mkrSuggestRtPricList.Clear();    // ADD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応
            this._mkrSuggestRtPricUList.Clear();    // ADD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応
            this._stockInfoDataTable.Rows.Clear();
            this._uoeOrderDtlDataTable.Rows.Clear();
            this._uoeOrderDtlDataTableCalc.Rows.Clear();
            //>>>2010/02/26
            this._scmAcOdrDataDataTable.Rows.Clear();
            this._scmAcOdrDtCarDataTable.Rows.Clear();
            this._scmAcOdrDtlAsDataTable.Rows.Clear();
            // ADD 2012/07/11 №35 T.Yoshioka ------------------------------>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            this._scmAcOdrDtlAsDataTableReturn.Rows.Clear();
            // ADD 2012/07/11 №35 T.Yoshioka ------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            if (null != this._scmAcOdrDtlAsDataTableBackup) this._scmAcOdrDtlAsDataTableBackup.Rows.Clear(); // ADD qijh 2013/02/27 #34752
            this._scmAcOdrDtlIqDataTable.Rows.Clear();
            //<<<2010/02/26
            //>>>2010/05/30
            this._colorInfoDicSave.Clear();
            this._trimInfoDicSave.Clear();
            this._cEqpDspInfoDicSave.Clear();
            //<<<2010/05/30
            //>>>2011/02/01 一部回答判定対応
            this._scmAcOdrDtlAsDataTableSave.Rows.Clear();
            //<<<2011/02/01 一部回答判定対応
            // ADD 2013/04/19 SCM障害№10522対応 ---------------------------------->>>>>
            if (this._originalBLGoodsCodeMap != null && this._originalBLGoodsCodeMap.Count != 0)
            {
                this._originalBLGoodsCodeMap.Clear();
            }
            // ADD 2013/04/19 SCM障害№10522対応 ----------------------------------<<<<<
        }

        /// <summary>
        /// 受注データをクリアします。
        /// </summary>
        /// <remarks>受注データのみクリアします。</remarks>
        public void ClearAcptAnOrderData()
        {
            this._salesSlipAcptAnOdr = new SalesSlip();
            this._salesDetailAcceptAnOrderDataTable.Rows.Clear();
            this._salesDetailAcceptAnOrderDataTableForOrder.Rows.Clear();
            this._salesDetailAcceptAnOrderDataTableForAdd.Rows.Clear();
        }

        // ----  ADD 2011/07/25 ------>>>>
        /// <summary>
        /// 掛率優先区分をセットします。
        /// </summary>
        /// <remarks>掛率優先区分をセットします。</remarks>
        public void SetUnitPriceCalculation()
        {
            if (this._salesSlipInputInitDataAcs.GetCompanyInf() != null)
            {
                this._unitPriceCalculation.RatePriorityDiv = this._salesSlipInputInitDataAcs.GetCompanyInf().RatePriorityDiv;
            }
        }
        // ----  ADD 2011/07/25 ------<<<<

        /// <summary>
        /// 各種データをクリアします。
        /// </summary>
        public void ClearDataForNew()
        {
            this._addUpSrcDetailDataTable.Rows.Clear();
            this._depsitMain = new SearchDepsitMain();
            this._depositAlw = new SearchDepositAlw();
            this._salesSlipAcptAnOdr = new SalesSlip();
            this._salesDetailAcceptAnOrderDataTable.Rows.Clear();
            this._salesDetailAcceptAnOrderDataTableForOrder.Rows.Clear();
            this._salesDetailAcceptAnOrderDataTableForAdd.Rows.Clear();
            this._stockSlipDataTable.Rows.Clear();
            this._stockDetailDataTable.Rows.Clear();
            this._stockSlipForReadDataTable.Rows.Clear();
            this._stockDetailForReadDataTable.Rows.Clear();
            this._stockTempDataTable.Rows.Clear();
            this._stockTempDataTableForSet.Rows.Clear();
            this._stockTempDataTableDelete.Rows.Clear(); // ADD 2012/11/27 Y.Wakita
            this._addUpOrgStockDetailDataTable.Rows.Clear();
            this._paymentSlpDataTable.Rows.Clear();
            this._carInfoDataTable.Rows.Clear();
            this._cEqpDspInfoDic.Clear();
            this._colorInfoDic.Clear();
            this._trimInfoDic.Clear();
            this._carInfo.Clear();
            this._carRelationDic.Clear();
            this._goodsUnitDataInfo.Clear();
            this._mkrSuggestRtPricList.Clear();    // ADD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応
            this._mkrSuggestRtPricUList.Clear();    // ADD 2015/03/18 豊沢 SCM高速化 メーカー希望小売価格対応
            this._stockInfoDataTable.Rows.Clear();
            this._uoeOrderDtlDataTable.Rows.Clear();
            this._uoeOrderDtlDataTableCalc.Rows.Clear();
            //>>>2010/02/26
            this._scmAcOdrDataDataTable.Rows.Clear();
            this._scmAcOdrDtCarDataTable.Rows.Clear();
            this._scmAcOdrDtlAsDataTable.Rows.Clear();
            // ADD 2012/07/11 №35 T.Yoshioka ------------------------------>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            this._scmAcOdrDtlAsDataTableReturn.Rows.Clear();
            // ADD 2012/07/11 №35 T.Yoshioka ------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            this._scmAcOdrDtlIqDataTable.Rows.Clear();
            //<<<2010/02/26
            //>>>2010/05/30
            this._colorInfoDicSave.Clear();
            this._trimInfoDicSave.Clear();
            this._cEqpDspInfoDicSave.Clear();
            //<<<2010/05/30
            //>>>2011/02/01 一部回答判定対応
            this._scmAcOdrDtlAsDataTableSave.Rows.Clear();
            if (this._scmHeaderIListSvForWebCheck != null) this._scmHeaderIListSvForWebCheck.Clear();
            if (this._scmDetailIListSvForWebCheck != null) this._scmDetailIListSvForWebCheck.Clear();
            if (this._scmDetailIAllListSv != null) this._scmDetailIAllListSv.Clear();
            if (this._scmAnswerIListSv != null) this._scmAnswerIListSv.Clear();
            if (this._scmAnswerIListSvForCancelCheck != null) this._scmAnswerIListSvForCancelCheck.Clear(); // 2011/03/06
            if (this._changeRowNoList != null) this._changeRowNoList = new ArrayList();
            if (this._dtlNumDic != null) this._dtlNumDic = new Dictionary<int, string>();
            if (this._scmDetailIAllList != null) this._scmDetailIAllList.Clear();
            //<<<2011/02/01 一部回答判定対応
            // ADD 2014/09/19 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応 ---------------------------------->>>>>
            this._acceptAnOrderAddupFlag = false;
            if (this._acptSCMHeader != null) this._acptSCMHeader = null;
            // ADD 2014/09/19 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応 ----------------------------------<<<<<
            // --- ADD 2016/12/07 T.Nishi ----->>>>>
            this._printSalesKeyInfo.Clear();
            this._printAcptKeyInfo.Clear();
            // --- ADD 2016/12/07 T.Nishi -----<<<<<

            this.CustSlipNoDic.Clear();// ADD 陳艶丹 2020/09/01 PMKOBETSU-4076の対応
        }

        /// <summary>
        /// 数量クリア処理
        /// </summary>
        /// <param name="iMode">0:全てクリア 1:受注数のみクリア</param>
        public void SettingClearCount(int iMode)
        {
            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if (this.ExistSalesDetail(row.SalesRowNo) == true)
                {
                    // 数量クリア
                    this.ClearCount(iMode, row);

                    //>>>2010/06/10
                    //// 数量設定処理
                    //this.SettingSalesDetailShipmentCnt(row.SalesRowNo);
                    // --- UPD 2013/04/18 T.Nishi ---------->>>>>
                    //// UPD 2013/02/05 T.Miyamoto ------------------------------>>>>>
                    ////if (iMode != 1)
                    //if (iMode == 0)
                    //// UPD 2013/02/05 T.Miyamoto ------------------------------<<<<<
                    if (iMode != 1)
                    // --- UPD 2013/04/18 T.Nishi ----------<<<<<
                    {
                        // 数量設定処理
                        this.SettingSalesDetailShipmentCnt(row.SalesRowNo);
                    }
                    else
                    {
                        this.SettingSalesDetailShipmentCntForAcpt(row.SalesRowNo);
                        this._shipmentCntOnChange = true;  //ADD 2011/07/20
                        this.SettingAcptAnOdrDetailRowShipmentCntOnChange(row.SalesRowNo, 0); // 2011/03/16
                    }
                    //<<<2010/06/10

                    // 売上金額計算処理
                    this.CalculationSalesMoney(row.SalesSlipNum, row.SalesRowNo);

                    // 原価金額計算処理
                    this.CalculationCost(row.SalesSlipNum, row.SalesRowNo);

                    // 明細粗利率設定処理
                    this.SettingSalesDetailRowGrossProfitRate(row.SalesRowNo);

                    // 一式情報設定処理
                    this.ConstructionCompleteInfo(row.SalesRowNo);
                }
            }
        }

        /// <summary>
        /// 売上データテーブルの各種数量をクリアします。
        /// </summary>
        /// <param name="iMode">0:全てクリア 1:受注数のみクリア</param>
        /// <param name="row">売上明細データ行オブジェクト</param>
        public void ClearCount(int iMode, SalesInputDataSet.SalesDetailRow row)
        {
            if (iMode == 0)
            {
                row.ShipmentCnt = 0;
                row.ShipmentCntDefault = 0;
                row.ShipmentCntDisplay = 0;
                row.AcceptAnOrderCnt = 0;
                row.AcceptAnOrderCntDefault = 0;
                row.AcceptAnOrderCntDisplay = 0;
            }
            // --- DEL 2013/04/18 T.Nishi ---------->>>>>
            //// ADD 2013/02/05 T.Miyamoto ------------------------------>>>>>
            //else
            //if (iMode == 2)
            //{
            //    row.ShipmentCntDisplay = 0;
            //}
            //// ADD 2013/02/05 T.Miyamoto ------------------------------<<<<<
            // --- DEL 2013/04/18 T.Nishi ----------<<<<<
            else
            {
                row.AcceptAnOrderCntDisplay = 0;
            }

            //>>>2011/03/16
            SalesInputDataSet.SalesDetailAcceptAnOrderRow acptRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);
            if (acptRow != null)
            {
                acptRow.ShipmentCnt = 0;
                acptRow.ShipmentCntDefault = 0;
                acptRow.ShipmentCntDisplay = 0;
                acptRow.AcceptAnOrderCnt = 0;
                acptRow.AcceptAnOrderCntDefault = 0;
                acptRow.AcceptAnOrderCntDisplay = 0;
            }
            //<<<2011/03/16
        }

        /// <summary>
        /// 売上明細データと計上元売上明細データを各データテーブルにキャッシュします。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="baseSalesSlip">処理元売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        /// <param name="addUpSrcDetailList">計上元売上明細データリスト</param>
        /// <param name="salesDetailDataTable">売上明細データテーブルオブジェクト</param>
        private void CacheSalesDetail(SalesSlip salesSlip, SalesSlip baseSalesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            //-----------------------------------------------------------------------------
            // 売上明細データをキャッシュ
            //-----------------------------------------------------------------------------
            foreach (SalesDetail salesDetail in salesDetailList)
            {
                this.CacheSalesDetailDataTable(salesSlip, salesDetail, salesDetailDataTable);
            }

            //-----------------------------------------------------------------------------
            // 検索見積データの見積計上時、行番号再設定(純正／優良明細が存在する為)
            //-----------------------------------------------------------------------------
            if ((salesSlip.InputMode == ctINPUTMODE_SalesSlip_EstimateAddUp) &&
                (baseSalesSlip.EstimateDivide == (int)SalesSlipInputAcs.EstimateDivide.SearchEstimate))
            {
                this.InitializeSalesDetailStockRowNoColumn(this._salesDetailDataTable);
            }
            //-----------------------------------------------------------------------------
            // 商品情報キャッシュ
            //-----------------------------------------------------------------------------
            List<List<GoodsUnitData>> goodsUnitDataListList;
            string msg;
            this.SearchPartsFromGoodsNoNonVariousSearchWholeWord(salesSlip, salesDetailList, out goodsUnitDataListList, out msg);

            //-----------------------------------------------------------------------------
            // 在庫情報キャッシュ
            //-----------------------------------------------------------------------------
            List<GoodsUnitData> goodsUnitDataList;
            this._salesSlipInputInitDataAcs.GetGoodsUnitDataListFromListList(goodsUnitDataListList, out goodsUnitDataList);
            this.CacheStockInfo(goodsUnitDataList);

            //-----------------------------------------------------------------------------
            // 計上元売上明細データをキャッシュ
            //-----------------------------------------------------------------------------
            if (addUpSrcDetailList != null)
            {
                foreach (SalesDetail salesDetail in addUpSrcDetailList)
                {
                    this.CacheLnkSalesDetailDataTable(salesDetail, this._addUpSrcDetailDataTable);
                }
            }

            //-----------------------------------------------------------------------------
            // 仕入情報データテーブルデフォルト情報キャッシュ
            //-----------------------------------------------------------------------------
            foreach (SalesInputDataSet.SalesDetailRow row in salesDetailDataTable)
            {
                this.SettingStockTempInfo(row.SalesRowNo);
            }

            //-----------------------------------------------------------------------------
            // 売上明細行オブジェクトの残数の値を設定する。
            //-----------------------------------------------------------------------------
            this.SettingSalesDetailAddUpEnableCount();
        }

        /// <summary>
        /// ＤＢから取得した売上明細データをデータテーブルにキャッシュします。
        /// </summary>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        private void CacheSalesDetailDBData(List<SalesDetail> salesDetailList)
        {
            this._salesDetailDBDataList.Clear();

            foreach (SalesDetail salesDetail in salesDetailList)
            {
                //>>>2010/02/26
                SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesDetail.SalesSlipNum, salesDetail.SalesRowNo);
                if (row != null) salesDetail.DtlRelationGuid = row.DtlRelationGuid;
                //<<<2010/02/26
                this._salesDetailDBDataList.Add(salesDetail.Clone());
            }
        }

        /// <summary>
        /// ＤＢから取得した売上データを調整します。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        private void AdjustSalesReadDBData(ref SalesSlip salesSlip, ref List<SalesDetail> salesDetailList)
        {
            // 得意先情報
            CustomerInfo customer;
            int status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, salesSlip.EnterpriseCode, salesSlip.CustomerCode, true, false, out customer);
            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) customer = new CustomerInfo();
            salesSlip.CarMngDivCd = customer.CarMngDivCd;           // 車両管理区分(0:しない 1:登録(確認) 2:登録(自動) 3:登録無)
            salesSlip.CustOrderNoDispDiv = (customer.CustSlipNoMngCd == 0) ? this._salesSlipInputInitDataAcs.GetSalesTtlSt().CustOrderNoDispDiv : (customer.CustSlipNoMngCd == 1) ? 0 : 1; // 得意先注番表示区分(0:しない 1:する)
            salesSlip.CustWarehouseCd = customer.CustWarehouseCd;   // 得意先優先倉庫コード
            salesSlip.TransStopDate = customer.TransStopDate; // 取引中止日
            //>>>2010/02/26
            salesSlip.InqOriginalEpCd = customer.CustomerEpCode.Trim(); // 得意先企業コード//@@@@20230303
            salesSlip.InqOriginalSecCd = customer.CustomerSecCode; // 得意先拠点コード
            salesSlip.OnlineKindDiv = customer.OnlineKindDiv; // オンライン種別
            //<<<2010/02/26

            // 2009/12/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            int maxRowCount = 0;
            maxRowCount = this.GetMaxRowCount(salesSlip.AcptAnOdrStatus, salesSlip);
            if (maxRowCount == 0) maxRowCount = this._salesSlipInputConstructionAcs.DataInputCountValue;
            salesSlip.DetailRowCountForReadSlip = maxRowCount;
            // 2009/12/17 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

            // 請求先情報
            CustomerInfo claim;
            status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, salesSlip.EnterpriseCode, salesSlip.ClaimCode, true, false, out claim);
            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL) claim = new CustomerInfo();
            salesSlip.ClaimName = claim.Name;                   // 請求先名称
            salesSlip.ClaimName2 = claim.Name2;                 // 請求先名称２
            salesSlip.CreditMngCode = claim.CreditMngCode;      // 与信管理区分
            salesSlip.TotalDay = claim.TotalDay;				// 締日
            salesSlip.NTimeCalcStDate = claim.NTimeCalcStDate;	// 次回勘定開始日
            salesSlip.ConsTaxLayMethod = (claim.CustCTaXLayRefCd == 0) ? this._salesSlipInputInitDataAcs.GetConsTaxLayMethod(0) : claim.ConsTaxLayMethod; // 消費税転嫁方式

            // 伝票検索日
            salesSlip.SearchSlipDate = DateTime.Today;

            // 粗利計算用売上金額計
            long totalMoneyForGrossProfit = 0;
            foreach (SalesDetail salesDetail in salesDetailList)
            {
                switch ((CalculateTax.TaxationCode)salesDetail.TaxationDivCd)
                {
                    case CalculateTax.TaxationCode.TaxExc:
                        totalMoneyForGrossProfit += salesDetail.SalesMoneyTaxExc;
                        break;
                    case CalculateTax.TaxationCode.TaxInc:
                        totalMoneyForGrossProfit += salesDetail.SalesMoneyTaxInc;
                        break;
                    case CalculateTax.TaxationCode.TaxNone:
                        totalMoneyForGrossProfit += salesDetail.SalesMoneyTaxExc;
                        break;
                }
            }
            salesSlip.TotalMoneyForGrossProfit = totalMoneyForGrossProfit;
        }

        /// <summary>
        /// 売上明細データオブジェクトをデータテーブルにキャッシュします。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetail">売上明細データオブジェクト</param>
        /// <param name="salesDetailDataTable">売上明細データテーブルオブジェクト</param>
        private void CacheSalesDetailDataTable(SalesSlip salesSlip, SalesDetail salesDetail, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            try
            {
                salesDetailDataTable.AddSalesDetailRow(this.CreateRowFromUIData(salesSlip, salesDetail, salesDetailDataTable));
            }
            catch (ConstraintException)
            {
                SalesInputDataSet.SalesDetailRow row = salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesDetail.SalesSlipNum, salesDetail.SalesRowNo);
                this.SetRowFromUIData(ref row, ref salesSlip, salesDetail);
            }
        }

        /// <summary>
        /// 売上明細データテーブルを生成し、データをキャッシュします。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        private SalesInputDataSet.SalesDetailDataTable CreateSalesDetailDataTable(SalesSlip salesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList)
        {
            SalesInputDataSet.SalesDetailDataTable salesDetailDataTable = new SalesInputDataSet.SalesDetailDataTable();
            this.CacheSalesDetail(salesSlip, salesSlip, salesDetailList, addUpSrcDetailList, salesDetailDataTable);
            return salesDetailDataTable;
        }

        /// <summary>
        /// 売上明細データオブジェクトから売上明細データ行オブジェクトに項目を設定します。
        /// </summary>
        /// <param name="row">売上明細データ行オブジェクト</param>
        /// <param name="salesDetail">売上明細データオブジェクト</param>
        /// <br>UpdateNote : 2011/07/20 譚洪 Redmine#22829「掛率マスタ/売価率」と「キャンペーン/売価率」が両方ヒットする場合、明細部も水色になりますの対応</br>
        private void SetRowFromUIData(ref SalesInputDataSet.SalesDetailRow row, ref SalesSlip salesSlip, SalesDetail salesDetail)
        {
            row.AcceptAnOrderNo = salesDetail.AcceptAnOrderNo; // 受注番号
            row.AcptAnOdrStatus = salesDetail.AcptAnOdrStatus; // 受注ステータス
            row.SalesSlipNum = salesDetail.SalesSlipNum; // 売上伝票番号
            row.SalesRowNo = salesDetail.SalesRowNo; // 売上行番号
            row.SalesRowDerivNo = salesDetail.SalesRowDerivNo; // 売上行番号枝番
            row.SectionCode = salesDetail.SectionCode; // 拠点コード
            row.SubSectionCode = salesDetail.SubSectionCode; // 部門コード
            row.SalesDate = salesDetail.SalesDate; // 売上日付
            row.CommonSeqNo = salesDetail.CommonSeqNo; // 共通通番
            row.SalesSlipDtlNum = salesDetail.SalesSlipDtlNum; // 売上明細通番
            row.AcptAnOdrStatusSrc = salesDetail.AcptAnOdrStatusSrc; // 受注ステータス（元）
            row.SalesSlipDtlNumSrc = salesDetail.SalesSlipDtlNumSrc; // 売上明細通番（元）
            row.SupplierFormalSync = salesDetail.SupplierFormalSync; // 仕入形式（同時）
            row.StockSlipDtlNumSync = salesDetail.StockSlipDtlNumSync; // 仕入明細通番（同時）
            row.SalesSlipCdDtl = salesDetail.SalesSlipCdDtl; // 売上伝票区分（明細）
            //>>>2010/02/26
            //row.DeliGdsCmpltDueDate = salesDetail.DeliGdsCmpltDueDate; // 納品完了予定日
            row.DeliGdsCmpltDueDate = salesDetail.AnswerDelivDate; // 納品完了予定日
            //<<<2010/02/26
            row.GoodsKindCode = salesDetail.GoodsKindCode; // 商品属性
            row.GoodsSearchDivCd = salesDetail.GoodsSearchDivCd; // 商品検索区分
            row.GoodsMakerCd = salesDetail.GoodsMakerCd; // 商品メーカーコード
            row.MakerName = salesDetail.MakerName; // メーカー名称
            row.MakerKanaName = salesDetail.MakerKanaName; // メーカーカナ名称
            row.GoodsNo = salesDetail.GoodsNo; // 商品番号
            row.GoodsName = salesDetail.GoodsName; // 商品名称
            row.GoodsNameKana = salesDetail.GoodsNameKana; // 商品名称カナ
            row.GoodsLGroup = salesDetail.GoodsLGroup; // 商品大分類コード
            row.GoodsLGroupName = salesDetail.GoodsLGroupName; // 商品大分類名称
            row.GoodsMGroup = salesDetail.GoodsMGroup; // 商品中分類コード
            row.GoodsMGroupName = salesDetail.GoodsMGroupName; // 商品中分類名称
            row.BLGroupCode = salesDetail.BLGroupCode; // BLグループコード
            row.BLGroupName = salesDetail.BLGroupName; // BLグループコード名称
            row.BLGoodsCode = salesDetail.BLGoodsCode; // BL商品コード
            row.BLGoodsFullName = salesDetail.BLGoodsFullName; // BL商品コード名称（全角）
            row.EnterpriseGanreCode = salesDetail.EnterpriseGanreCode; // 自社分類コード
            row.EnterpriseGanreName = salesDetail.EnterpriseGanreName; // 自社分類名称
            row.WarehouseCode = salesDetail.WarehouseCode; // 倉庫コード
            row.WarehouseName = salesDetail.WarehouseName; // 倉庫名称
            row.WarehouseShelfNo = salesDetail.WarehouseShelfNo; // 倉庫棚番
            row.SalesOrderDivCd = salesDetail.SalesOrderDivCd; // 売上在庫取寄せ区分
            row.OpenPriceDiv = salesDetail.OpenPriceDiv; // オープン価格区分
            row.GoodsRateRank = salesDetail.GoodsRateRank; // 商品掛率ランク
            row.CustRateGrpCode = salesDetail.CustRateGrpCode; // 得意先掛率グループコード
            row.ListPriceRate = salesDetail.ListPriceRate; // 定価率
            row.RateSectPriceUnPrc = salesDetail.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            row.RateDivLPrice = salesDetail.RateDivLPrice; // 掛率設定区分（定価）
            row.PriceSelectDiv = salesDetail.PriceSelectDiv; // 標準価格選択区分（定価）// ADD 2013/01/24 鄧潘ハン REDMINE#34605
            row.UnPrcCalcCdLPrice = salesDetail.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            row.PriceCdLPrice = salesDetail.PriceCdLPrice; // 価格区分（定価）
            row.StdUnPrcLPrice = salesDetail.StdUnPrcLPrice; // 基準単価（定価）
            row.FracProcUnitLPrice = salesDetail.FracProcUnitLPrice; // 端数処理単位（定価）
            row.FracProcLPrice = salesDetail.FracProcLPrice; // 端数処理（定価）
            row.ListPriceTaxIncFl = salesDetail.ListPriceTaxIncFl; // 定価（税込，浮動）
            row.ListPriceTaxExcFl = salesDetail.ListPriceTaxExcFl; // 定価（税抜，浮動）
            row.ListPriceChngCd = salesDetail.ListPriceChngCd; // 定価変更区分
            row.SalesRate = salesDetail.SalesRate; // 売価率
            row.RateSectSalUnPrc = salesDetail.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            row.RateDivSalUnPrc = salesDetail.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            row.UnPrcCalcCdSalUnPrc = salesDetail.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            row.PriceCdSalUnPrc = salesDetail.PriceCdSalUnPrc; // 価格区分（売上単価）
            row.StdUnPrcSalUnPrc = salesDetail.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            row.FracProcUnitSalUnPrc = salesDetail.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            row.FracProcSalUnPrc = salesDetail.FracProcSalUnPrc; // 端数処理（売上単価）
            row.SalesUnPrcTaxIncFl = salesDetail.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            row.SalesUnPrcTaxExcFl = salesDetail.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            row.SalesUnPrcChngCd = salesDetail.SalesUnPrcChngCd; // 売上単価変更区分
            row.CostRate = salesDetail.CostRate; // 原価率
            row.RateSectCstUnPrc = salesDetail.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            row.RateDivUnCst = salesDetail.RateDivUnCst; // 掛率設定区分（原価単価）
            row.UnPrcCalcCdUnCst = salesDetail.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            row.PriceCdUnCst = salesDetail.PriceCdUnCst; // 価格区分（原価単価）
            row.StdUnPrcUnCst = salesDetail.StdUnPrcUnCst; // 基準単価（原価単価）
            row.FracProcUnitUnCst = salesDetail.FracProcUnitUnCst; // 端数処理単位（原価単価）
            row.FracProcUnCst = salesDetail.FracProcUnCst; // 端数処理（原価単価）
            row.SalesUnitCost = salesDetail.SalesUnitCost; // 原価単価
            row.SalesUnitCostChngDiv = salesDetail.SalesUnitCostChngDiv; // 原価単価変更区分
            row.RateBLGoodsCode = salesDetail.RateBLGoodsCode; // BL商品コード（掛率）
            row.RateBLGoodsName = salesDetail.RateBLGoodsName; // BL商品コード名称（掛率）
            row.RateGoodsRateGrpCd = salesDetail.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            row.RateGoodsRateGrpNm = salesDetail.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            row.RateBLGroupCode = salesDetail.RateBLGroupCode; // BLグループコード（掛率）
            row.RateBLGroupName = salesDetail.RateBLGroupName; // BLグループ名称（掛率）
            row.PrtBLGoodsCode = salesDetail.PrtBLGoodsCode; // BL商品コード（印刷）
            row.PrtBLGoodsName = salesDetail.PrtBLGoodsName; // BL商品コード名称（印刷）
            row.SalesCode = salesDetail.SalesCode; // 販売区分コード
            row.SalesCdNm = salesDetail.SalesCdNm; // 販売区分名称
            row.WorkManHour = salesDetail.WorkManHour; // 作業工数
            row.ShipmentCnt = salesDetail.ShipmentCnt; // 出荷数
            row.AcceptAnOrderCnt = salesDetail.AcceptAnOrderCnt; // 受注数量
            row.AcptAnOdrAdjustCnt = salesDetail.AcptAnOdrAdjustCnt; // 受注調整数
            row.AcptAnOdrRemainCnt = salesDetail.AcptAnOdrRemainCnt; // 受注残数
            row.RemainCntUpdDate = salesDetail.RemainCntUpdDate; // 残数更新日
            row.SalesMoneyTaxInc = salesDetail.SalesMoneyTaxInc; // 売上金額（税込み）
            row.SalesMoneyTaxExc = salesDetail.SalesMoneyTaxExc; // 売上金額（税抜き）
            row.Cost = salesDetail.Cost; // 原価
            row.GrsProfitChkDiv = salesDetail.GrsProfitChkDiv; // 粗利チェック区分
            row.SalesGoodsCd = salesDetail.SalesGoodsCd; // 売上商品区分
            row.SalesPriceConsTax = salesDetail.SalesPriceConsTax; // 売上金額消費税額
            row.TaxationDivCd = salesDetail.TaxationDivCd; // 課税区分
            row.PartySlipNumDtl = salesDetail.PartySlipNumDtl; // 相手先伝票番号（明細）
            row.DtlNote = salesDetail.DtlNote; // 明細備考
            row.SupplierCd = salesDetail.SupplierCd; // 仕入先コード
            row.SupplierSnm = salesDetail.SupplierSnm; // 仕入先略称
            row.OrderNumber = salesDetail.OrderNumber; // 発注番号
            row.WayToOrder = salesDetail.WayToOrder; // 注文方法
            row.SlipMemo1 = salesDetail.SlipMemo1; // 伝票メモ１
            row.SlipMemo2 = salesDetail.SlipMemo2; // 伝票メモ２
            row.SlipMemo3 = salesDetail.SlipMemo3; // 伝票メモ３
            row.InsideMemo1 = salesDetail.InsideMemo1; // 社内メモ１
            row.InsideMemo2 = salesDetail.InsideMemo2; // 社内メモ２
            row.InsideMemo3 = salesDetail.InsideMemo3; // 社内メモ３
            row.BfListPrice = salesDetail.BfListPrice; // 変更前定価
            row.BfSalesUnitPrice = salesDetail.BfSalesUnitPrice; // 変更前売価
            row.BfUnitCost = salesDetail.BfUnitCost; // 変更前原価
            row.CmpltSalesRowNo = salesDetail.CmpltSalesRowNo; // 一式明細番号
            row.CmpltGoodsMakerCd = salesDetail.CmpltGoodsMakerCd; // メーカーコード（一式）
            row.CmpltMakerName = salesDetail.CmpltMakerName; // メーカー名称（一式）
            row.CmpltMakerKanaName = salesDetail.CmpltMakerKanaName; // メーカーカナ名称（一式）
            row.CmpltGoodsName = salesDetail.CmpltGoodsName; // 商品名称（一式）
            row.CmpltShipmentCnt = salesDetail.CmpltShipmentCnt; // 数量（一式）
            row.CmpltSalesUnPrcFl = salesDetail.CmpltSalesUnPrcFl; // 売上単価（一式）
            row.CmpltSalesMoney = salesDetail.CmpltSalesMoney; // 売上金額（一式）
            row.CmpltSalesUnitCost = salesDetail.CmpltSalesUnitCost; // 原価単価（一式）
            row.CmpltCost = salesDetail.CmpltCost; // 原価金額（一式）
            row.CmpltPartySalSlNum = salesDetail.CmpltPartySalSlNum; // 相手先伝票番号（一式）
            row.CmpltNote = salesDetail.CmpltNote; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            row.SelectedGoodsNoDiv = salesDetail.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            row.PrtGoodsNo = salesDetail.PrtGoodsNo; // 印刷用品番
            row.PrtMakerCode = salesDetail.PrtMakerCode; // 印刷用メーカーコード
            row.PrtMakerName = salesDetail.PrtMakerName; // 印刷用メーカー名称

            row.DtlRelationGuid = salesDetail.DtlRelationGuid; // 共通キー
            row.CarRelationGuid = salesDetail.CarRelationGuid; // 車両情報共通キー
            //row.SalesRowNoDisplay = salesDetail.SalesRowNoDisplay; // 行番号（表示用）
            //row.SupplierStock = salesDetail.SupplierStock; // 現在庫数
            //row.SupplierStockDisplay = salesDetail.SupplierStockDisplay; // 現在庫数（表示用）
            //row.OpenPriceDivDisplay = salesDetail.OpenPriceDivDisplay; // オープン価格区分（表示用）
            //row.ListPriceDisplay = salesDetail.ListPriceDisplay; // 定価（表示用）
            //row.SalesUnPrcDisplay = salesDetail.SalesUnPrcDisplay; // 売上単価（表示用）
            //row.SalesUnitCostTaxExc = salesDetail.SalesUnitCostTaxExc; // 原価単価（税抜）
            //row.SalesUnitCostTaxInc = salesDetail.SalesUnitCostTaxInc; // 原価単価（税込）
            //row.ShipmentCntDisplay = salesDetail.ShipmentCntDisplay; // 出荷数（表示用）
            //row.AddUpEnableCnt = salesDetail.AddUpEnableCnt; // 計上可能数
            //row.AlreadyAddUpCnt = salesDetail.AlreadyAddUpCnt; // 計上済数
            //row.ShipmentCntDefault = salesDetail.ShipmentCntDefault; // 出荷数（初期値）
            //row.SalesMoneyDisplay = salesDetail.SalesMoneyDisplay; // 売上金額（表示用）
            //row.CostTaxInc = salesDetail.CostTaxInc; // 原価金額（税込）
            //row.CostTaxExc = salesDetail.CostTaxExc; // 原価金額（税抜）
            //row.AcceptAnOrderCntDisplay = salesDetail.AcceptAnOrderCntDisplay; // 受注数（表示用）
            //row.AcceptAnOrderCntDefault = salesDetail.AcceptAnOrderCntDefault; // 受注数（初期値）
            //row.TaxDiv = salesDetail.TaxDiv; // 課税区分（UI用）
            //row.CanTaxDivChange = salesDetail.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            //row.RowStatus = salesDetail.RowStatus; // 行ステータス
            //row.EditStatus = salesDetail.EditStatus; // エディットステータス
            //row.SlipMemoExist = salesDetail.SlipMemoExist; // メモ存在フラグ
            //row.SupplierSlipExist = salesDetail.SupplierSlipExist; // 仕入情報存在フラグ
            //row.DetailGrossProfitRate = salesDetail.DetailGrossProfitRate; // 明細粗利率
            //row.CostUpRate = salesDetail.CostUpRate; // 原価アップ率
            //row.GrossProfitSecureRate = salesDetail.GrossProfitSecureRate; // 粗利確保率
            //row.SupplierCdForStock = salesDetail.SupplierCdForStock; // 仕入先コード
            //row.StockDate = salesSlip.StockDate; // 仕入日
            //row.PartySalesSlipNum = salesDetail.PartySalesSlipNum; // 仕入伝票番号
            row.BoCode = ctDefaultBoCode; // BO区分
            //row.SupplierCdForOrder = salesDetail.SupplierCdForOrder; // 発注先
            //row.AcceptAnOrderCntForOrder = salesDetail.AcceptAnOrderCntForOrder; // 発注数
            //row.SupplierSnmForOrder = salesDetail.SupplierSnmForOrder; // 発注先名称
            //row.DeliveredGoodsDiv = salesDetail.DeliveredGoodsDiv; // 納品区分
            //row.DeliveredGoodsDivNm = salesDetail.DeliveredGoodsDivNm; // 納品区分名称
            //row.DeliveredGoodsDivNmSave = salesDetail.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            //row.FollowDeliGoodsDiv = salesDetail.FollowDeliGoodsDiv; // H納品区分
            //row.FollowDeliGoodsDivNm = salesDetail.FollowDeliGoodsDivNm; // H納品区分名称
            //row.FollowDeliGoodsDivNmSave = salesDetail.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            //row.UOEResvdSection = salesDetail.UOEResvdSection; // 指定拠点
            //row.UOEResvdSectionNm = salesDetail.UOEResvdSectionNm; // 指定拠点名称
            //row.UOEResvdSectionNmSave = salesDetail.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            //row.PriceStartDate = salesDetail.PriceStartDate; // 新定価適用日
            //row.Dummy = salesDetail.Dummy; // ダミー（空欄表示用）
            //row.SearchPartsModeState = salesDetail.SearchPartsModeState; // 部品検索状態
            row.CampaignCode = salesDetail.CampaignCode; // キャンペーン管理    // ADD 2011/07/20
            //>>>2011/02/01
            row.RecycleDiv = salesDetail.RecycleDiv; // リサイクル区分
            row.RecycleDivNm = salesDetail.RecycleDivNm; // リサイクル区分名称
            //<<<2011/02/01
            // 2012/01/16 Add >>>
            row.GoodsSpecialNote = salesDetail.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<
            //>>>2012/05/02
            row.RentSyncStockDate = salesDetail.RentSyncStockDate;
            row.RentSyncSupplier = salesDetail.RentSyncSupplier;
            row.RentSyncSupSlipNo = salesDetail.RentSyncSupSlipNo;
            //<<<2012/05/02
            // --- DEL 2012/09/20 三戸 №35の戻し --------->>>>>>>>>>>>>>>>>>>>>>>>
            //// ADD 2012/08/23 2012/09/12配信システムテスト障害№14対応 --------------------->>>>>
            //row.AcceptOrOrderKind = salesDetail.AcceptOrOrderKind;  // 受発注種別
            //// ADD 2012/08/23 2012/09/12配信システムテスト障害№14対応 ---------------------<<<<<
            // --- DEL 2012/09/20 三戸 №35の戻し ---------<<<<<<<<<<<<<<<<<<<<<<<<

            int sign = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;

            //-----------------------------------------------------------------------------
            // 原価、原価金額再計算(テーブル上に税込、税抜項目が無い為)
            //-----------------------------------------------------------------------------
            double costTaxExc = 0;
            double costTaxInc = 0;
            double salesUnitCostTaxExc = 0;
            double salesUnitCostTaxInc = 0;
            this.CalcTaxExcAndTaxIncForStock(salesDetail.TaxationDivCd, row.SupplierCd, salesSlip.ConsTaxRate, salesSlip.TotalAmountDispWayCd, salesDetail.Cost, out costTaxExc, out costTaxInc);
            this.CalcTaxExcAndTaxIncForStock(salesDetail.TaxationDivCd, row.SupplierCd, salesSlip.ConsTaxRate, salesSlip.TotalAmountDispWayCd, salesDetail.SalesUnitCost, out salesUnitCostTaxExc, out salesUnitCostTaxInc);
            row.CostTaxExc = (long)costTaxExc;
            row.CostTaxInc = (long)costTaxInc;
            row.SalesUnitCostTaxExc = salesUnitCostTaxExc;
            row.SalesUnitCostTaxInc = salesUnitCostTaxInc;

            //-----------------------------------------------------------------------------
            // 売単価、定価（表示用）
            //-----------------------------------------------------------------------------
            if (salesSlip.TotalAmountDispWayCd == 0)
            {
                // 総額表示しない
                switch ((CalculateTax.TaxationCode)salesDetail.TaxationDivCd)
                {
                    case CalculateTax.TaxationCode.TaxExc:
                        row.SalesUnPrcDisplay = salesDetail.SalesUnPrcTaxExcFl;
                        row.ListPriceDisplay = salesDetail.ListPriceTaxExcFl;
                        break;
                    case CalculateTax.TaxationCode.TaxInc:
                        row.SalesUnPrcDisplay = salesDetail.SalesUnPrcTaxIncFl;
                        row.ListPriceDisplay = salesDetail.ListPriceTaxIncFl;
                        break;
                    case CalculateTax.TaxationCode.TaxNone:
                        row.SalesUnPrcDisplay = salesDetail.SalesUnPrcTaxExcFl;
                        row.ListPriceDisplay = salesDetail.ListPriceTaxExcFl;
                        break;
                }
            }
            else
            {
                // 総額表示する
                switch ((CalculateTax.TaxationCode)salesDetail.TaxationDivCd)
                {
                    case CalculateTax.TaxationCode.TaxExc:
                        row.SalesUnPrcDisplay = salesDetail.SalesUnPrcTaxIncFl;
                        row.ListPriceDisplay = salesDetail.ListPriceTaxIncFl;
                        break;
                    case CalculateTax.TaxationCode.TaxInc:
                        row.SalesUnPrcDisplay = salesDetail.SalesUnPrcTaxIncFl;
                        row.ListPriceDisplay = salesDetail.ListPriceTaxIncFl;
                        break;
                    case CalculateTax.TaxationCode.TaxNone:
                        row.SalesUnPrcDisplay = salesDetail.SalesUnPrcTaxIncFl;
                        row.ListPriceDisplay = salesDetail.ListPriceTaxIncFl;
                        break;
                }
            }

            //-----------------------------------------------------------------------------
            // 売上金額（表示用）
            //-----------------------------------------------------------------------------
            switch ((SalesGoodsCd)salesDetail.SalesGoodsCd)
            {
                // 商品、商品外
                case SalesGoodsCd.Goods:
                case SalesGoodsCd.NonGoods:
                    {
                        if (salesSlip.TotalAmountDispWayCd == (int)TotalAmountDispWayCd.NoTotalAmount)
                        {
                            // 総額表示なし
                            switch ((CalculateTax.TaxationCode)salesDetail.TaxationDivCd)
                            {
                                case CalculateTax.TaxationCode.TaxExc:
                                    row.SalesMoneyDisplay = salesDetail.SalesMoneyTaxExc * sign;
                                    break;
                                case CalculateTax.TaxationCode.TaxInc:
                                    row.SalesMoneyDisplay = salesDetail.SalesMoneyTaxInc * sign;
                                    break;
                                case CalculateTax.TaxationCode.TaxNone:
                                    row.SalesMoneyDisplay = salesDetail.SalesMoneyTaxExc * sign;
                                    break;
                            }
                        }
                        else
                        {
                            // 総額表示あり
                            row.SalesMoneyDisplay = salesDetail.SalesMoneyTaxInc * sign;
                        }
                        break;
                    }
                // 消費税調整
                case SalesGoodsCd.ConsTaxAdjust:
                case SalesGoodsCd.AccRecConsTaxAdjust:
                    {
                        row.SalesMoneyDisplay = salesDetail.SalesMoneyTaxInc * sign;
                        break;
                    }
                // 残高調整
                case SalesGoodsCd.BalanceAdjust:
                case SalesGoodsCd.AccRecBalanceAdjust:
                    {
                        row.SalesMoneyDisplay = salesDetail.SalesMoneyTaxInc * sign;
                        break;
                    }
            }

            //-----------------------------------------------------------------------------
            // 数量関係
            //-----------------------------------------------------------------------------
            if (row.AcptAnOdrStatus != (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
            {
                row.ShipmentCnt = salesDetail.ShipmentCnt;
                row.ShipmentCntDisplay = salesDetail.ShipmentCnt * sign;
                row.ShipmentCntDefault = salesDetail.ShipmentCnt;
                row.AcceptAnOrderCnt = salesDetail.AcceptAnOrderCnt;
                row.AcceptAnOrderCntDisplay = 0;
                row.AcceptAnOrderCntDefault = salesDetail.AcceptAnOrderCnt;
            }
            else
            {
                if (this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum)
                {
                    row.ShipmentCnt = salesDetail.ShipmentCnt;
                    row.ShipmentCntDisplay = salesDetail.ShipmentCnt * sign;
                    row.ShipmentCntDefault = salesDetail.ShipmentCnt;
                    row.AcceptAnOrderCnt = salesDetail.AcceptAnOrderCnt;
                    row.AcceptAnOrderCntDisplay = salesDetail.AcceptAnOrderCnt * sign;
                    row.AcceptAnOrderCntDefault = salesDetail.AcceptAnOrderCnt;
                }
                else
                {
                    row.ShipmentCnt = 0;
                    row.ShipmentCntDisplay = 0;
                    row.ShipmentCntDefault = 0;
                    row.AcceptAnOrderCnt = salesDetail.AcceptAnOrderCnt;
                    row.AcceptAnOrderCntDisplay = salesDetail.ShipmentCnt * sign;
                    row.AcceptAnOrderCntDefault = salesDetail.AcceptAnOrderCnt;
                }
            }

            //-----------------------------------------------------------------------------
            // その他補正
            //-----------------------------------------------------------------------------
            // 明細共通キー
            this.SettingSalesDetailRowDtlRelationGuid(ref row);

            // 車両情報共通キー
            row.CarRelationGuid = Guid.Empty;

            // 原価アップ率、粗利確保率
            switch ((UnitPriceCalculation.UnitPrcCalcDiv)row.UnPrcCalcCdSalUnPrc)
            {
                case UnitPriceCalculation.UnitPrcCalcDiv.RateVal:
                    break;
                case UnitPriceCalculation.UnitPrcCalcDiv.UpRate:
                    row.CostUpRate = salesDetail.SalesRate;
                    break;
                case UnitPriceCalculation.UnitPrcCalcDiv.GrsProfitSecureRate:
                    row.GrossProfitSecureRate = salesDetail.SalesRate;
                    break;
                case UnitPriceCalculation.UnitPrcCalcDiv.Price:
                    break;
            }

            // EditStatus
            switch ((SalesSlipInputAcs.SalesSlipCdDtl)row.SalesSlipCdDtl)
            {
                case SalesSlipCdDtl.Sales:
                case SalesSlipCdDtl.RetGoods:
                    if (salesSlip.SalesSlipNum != ctDefaultSalesSlipNum)
                    {
                        row.EditStatus = ctEDITSTATUS_ExistSlip;
                    }
                    else
                    {
                        row.EditStatus = ctEDITSTATUS_AllOK;
                    }
                    // 計上元明細通番が入っていて受注ステータスが計上元と異なる場合は計上明細
                    if ((salesDetail.SalesSlipDtlNumSrc != 0) && (salesDetail.AcptAnOdrStatusSrc != salesDetail.AcptAnOdrStatus))
                    {
                        if (salesSlip.SalesSlipNum != ctDefaultSalesSlipNum)
                        {
                            row.EditStatus = ctEDITSTATUS_AddUpEdit;
                        }
                        else
                        {
                            row.EditStatus = ctEDITSTATUS_AddUpNew;
                        }
                    }
                    break;
                case SalesSlipCdDtl.Discount:
                    row.EditStatus = (row.ShipmentCntDisplay == 0) ? ctEDITSTATUS_RowDiscount : ctEDITSTATUS_GoodsDiscount;
                    break;
                case SalesSlipCdDtl.Annotation:
                    row.EditStatus = ctEDITSTATUS_Annotation;
                    break;
            }

            // RowStatus
            row.RowStatus = ctROWSTATUS_NORMAL;

            // 課税非課税区分
            if (salesDetail.TaxationDivCd == 1)
            {
                row.TaxDiv = 1;						// 非課税
            }
            else
            {
                row.TaxDiv = 0;						// 課税
            }

            // 課税非課税区分変更可能フラグ
            if (salesDetail.SalesGoodsCd == (int)SalesGoodsCd.NonGoods)
            {
                row.CanTaxDivChange = true;
            }
            else
            {
                row.CanTaxDivChange = false;
            }

            // 部品検索状態
            switch (salesDetail.GoodsSearchDivCd)
            {
                case 0: // BLコード検索
                    row.SearchPartsModeState = (int)SearchPartsModeState.BLCodeSearch;
                    break;
                case 1: // 品番検索
                    row.SearchPartsModeState = (int)SearchPartsModeState.GoodsNoSearch;
                    break;
                case 2: //手入力
                    row.SearchPartsModeState = (int)SearchPartsModeState.NonSearch;
                    break;
            }

            // 金額手入力区分
            if ((row.SalesUnPrcDisplay == 0) && (row.SalesMoneyDisplay != 0))
            {
                row.SalesMoneyInputDiv = (int)SalesMoneyInputDiv.Input;
            }
            else
            {
                row.SalesMoneyInputDiv = (int)SalesMoneyInputDiv.Calculate;
            }

            // 売単価、原単価初期値
            row.SalesUnPrcTaxExcFlDefault = row.SalesUnPrcTaxExcFl;
            row.SalesUnPrcTaxIncFlDefault = row.SalesUnPrcTaxIncFl;
            row.SalesUnitCostTaxExcDefault = row.SalesUnitCostTaxExc;
            row.SalesUnitCostTaxIncDefault = row.SalesUnitCostTaxInc;

            // 数量初期値
            row.ShipmentCntDefForChk = row.ShipmentCnt;
            row.AcceptAnOrderCntDefForChk = row.AcceptAnOrderCnt;

            //-----------------------------------------------------------------------------
            // 仕入情報
            //-----------------------------------------------------------------------------
            // 仕入日
            row.StockDate = salesSlip.SalesDate;
            // 仕入先
            row.SupplierCdForStock = salesDetail.SupplierCd;

            //-----------------------------------------------------------------------------
            // 検索見積データ
            //-----------------------------------------------------------------------------
            if (salesSlip.EstimateDivide == (int)SalesSlipInputAcs.EstimateDivide.SearchEstimate)
            {
                if (row.SalesRowDerivNo != 0)
                {
                    row.SalesRowNo += salesSlip.DetailRowCount + row.SalesRowDerivNo - 1;
                }
            }
        }

        /// <summary>
        /// 売上明細データテーブルより売上明細データオブジェクトリストを取得します。
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesDetailDataTable"></param>
        /// <param name="salesDetailList"></param>
        private void GetUIDataFromTable(SalesSlip salesSlip, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable, out List<SalesDetail> salesDetailList)
        {
            salesDetailList = new List<SalesDetail>();

            foreach (SalesInputDataSet.SalesDetailRow row in salesDetailDataTable)
            {
                if (this.ExistSalesDetail(row))
                {
                    SalesDetail salesDetail = this.GetUIDataFromRow(salesSlip, row);

                    if (salesDetail != null)
                    {
                        salesDetailList.Add(salesDetail);
                    }
                }
            }
        }

        /// <summary>
        /// 売上データリストおよび受注データリストを取得します。
        /// </summary>
        /// <param name="defSalesSlip"></param>
        /// <param name="salesDetailDataTable"></param>
        /// <param name="defAcptSlip"></param>
        /// <param name="acptDetailDataTable"></param>
        /// <param name="acptDetailDataTableForOrder"></param>
        /// <param name="acptDetailDataTableForAdd"></param>
        /// <param name="salesSlipBeforeAddUp"></param>
        /// <param name="salesDataList"></param>
        /// <param name="acptDataList"></param>
        /// <param name="stockSyncInfoKeyList"></param>
        //>>>2010/02/26
        //private void GetUIDataFromTable(SalesSlip defSalesSlip, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable, SalesSlip defAcptSlip, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTable, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTableForOrder, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTableForAdd, SalesSlip acptSlipBeforeAddUp, out ArrayList salesDataList, out ArrayList acptDataList, out List<StockSyncInfoKey> stockSyncInfoKeyList)
        private void GetUIDataFromTable(SalesSlip defSalesSlip, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable, SalesSlip defAcptSlip, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTable, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTableForOrder, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTableForAdd, SalesSlip acptSlipBeforeAddUp, out ArrayList salesDataList, out ArrayList acptDataList, out List<StockSyncInfoKey> stockSyncInfoKeyList, bool scmFlg)
        //<<<2010/02/26
        {

            //------------------------------------------------------------------------------------
            // 本処理は、売上データと受注データが補正処理されていないことを前提とする。(不要明細削除前状態)
            //------------------------------------------------------------------------------------

            //------------------------------------------------------------------------------------
            // salesDataList の構成(分割方法に従い、入力情報を１伝票単位に分割保持)
            //------------------------------------------------------------------------------------
            //  CustomSerializeArrayList →１伝票目
            //      --SalesSlip
            //      --List<SalesDetail>
            //  CustomSerializeArrayList →２伝票目
            //      --SalesSlip
            //      --List<SalesDetail>
            //  CustomSerializeArrayList →３伝票目
            //      --SalesSlip
            //      --List<SalesDetail>
            //------------------------------------------------------------------------------------

            salesDataList = new ArrayList(); // 売上データリスト
            acptDataList = new ArrayList(); // 受注データリスト
            stockSyncInfoKeyList = new List<StockSyncInfoKey>();

            #region ●売上情報
            //-----------------------------------------------------------------------------
            // 明細補正(不要明細削除)
            //-----------------------------------------------------------------------------
            this.AdjustSalesSaveData(salesDetailDataTable);

            if (salesDetailDataTable.Count != 0)
            {
                SalesInputDataSet.SalesDetailDataTable salesDetailDataTableCompute = this._dataSetCompute.SalesDetail;  // 伝票金額算出用売上明細データテーブル
                SlipKey saveSlipKey = new SlipKey();                                                                    // 前回データ作成ブレイクキー
                SlipKey slipKey = new SlipKey();                                                                        // データ作成ブレイクキー

                salesDetailDataTableCompute.Clear();

                int maxRowCount = ctMaxRowCount;
                if (defSalesSlip.SalesSlipNum == ctDefaultSalesSlipNum) maxRowCount = this.GetMaxRowCount(defSalesSlip);
                int rowCount = 1;
                string salesSlipNum = string.Empty;

                DataView salesDetailView = new DataView(salesDetailDataTable);

                this._lastRowNumber = -1;   // ADD 2014/11/10 k.toyosawa 20141126全体配信 障害対応

                // --- ADD 2012/07/03 No.964 Y.Wakita ---------->>>>>
                // --- UPD 2012/10/22 T.Nishi ---------->>>>>
                //if ((this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) &&
                //    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal)) // 新規且つ入力モード（通常）
                if ((this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) // 新規且つ
                 && (this._salesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AddUp)  // 入力モード（締め済み）
                 && (this._salesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ReadOnly)  // 入力モード（読取専用）
                 && (this._salesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Red))  // 入力モード（赤伝）
                // --- UPD 2012/10/22 T.Nishi ----------<<<<<
                {
                    // --- ADD 2012/07/03 No.964 Y.Wakita ----------<<<<<
                    //-----------------------------------------------------------------------------
                    // ソート順指定
                    //-----------------------------------------------------------------------------
                    salesDetailView.Sort = this.MakeSalesSlipSort(salesDetailDataTable);
                    // --- ADD 2012/07/03 No.964 Y.Wakita ---------->>>>>
                }
                // --- ADD 2012/07/03 No.964 Y.Wakita ----------<<<<<

                salesDetailDataTable.BeginLoadData();
                foreach (DataRowView rowView in salesDetailView)
                {
                    //-----------------------------------------------------------------------------
                    // 初期取得
                    //-----------------------------------------------------------------------------
                    if (rowCount == 1)
                    {
                        // 初期ブレイクキー取得
                        saveSlipKey = this.MakeSlipKey((int)rowView[salesDetailDataTable.SalesOrderDivCdColumn.ColumnName], (string)rowView[salesDetailDataTable.WarehouseCodeColumn.ColumnName]);
                    }
                    // 今回ブレイクキー取得
                    slipKey = this.MakeSlipKey((int)rowView[salesDetailDataTable.SalesOrderDivCdColumn.ColumnName], (string)rowView[salesDetailDataTable.WarehouseCodeColumn.ColumnName]);

                    // --- UPD 2012/07/03 No.964 Y.Wakita ---------->>>>>
                    //// --- ADD 2012/06/26 No.964 Y.Wakita ---------->>>>>
                    //if ((this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) &&
                    //    (this._salesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Red)) // 新規時且つ赤伝以外
                    //{
                    //    // --- ADD 2012/06/26 No.964 Y.Wakita ----------<<<<<
                    // --- UPD 2012/10/22 T.Nishi ---------->>>>>
                    //if ((this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) &&
                    //    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal)) // 新規且つ入力モード（通常）
                    if ((this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) // 新規且つ
                     && (this._salesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AddUp)  // 入力モード（締め済み）
                     && (this._salesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ReadOnly)  // 入力モード（読取専用）
                     && (this._salesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Red))  // 入力モード（赤伝）
                    // --- UPD 2012/10/22 T.Nishi ----------<<<<<
                    {
                        // --- UPD 2012/07/03 No.964 Y.Wakita ----------<<<<<
                        //-----------------------------------------------------------------------------
                        // ブレイクチェック(指定明細数or指定キー)
                        //-----------------------------------------------------------------------------
                        if ((rowCount > maxRowCount) || (!slipKey.Equals(saveSlipKey)))
                        {
                            // 明細カウントクリア
                            rowCount = 1;

                            //-----------------------------------------------------------------------------
                            // 伝票情報設定
                            //-----------------------------------------------------------------------------
                            if ((salesDetailDataTableCompute != null) && (salesDetailDataTableCompute.Count != 0))
                            {
                                // 各種伝票情報設定処理
                                //>>>2010/02/26
                                //this.SettingVariousSalesSlipInfo(ref defSalesSlip, ref salesDetailDataTableCompute, ref salesDataList, ref stockSyncInfoKeyList);
                                this.SettingVariousSalesSlipInfo(ref defSalesSlip, ref salesDetailDataTableCompute, ref salesDataList, ref stockSyncInfoKeyList, scmFlg);
                                //<<<2010/02/26
                            }
                        }
                    // --- ADD 2012/06/26 No.964 Y.Wakita ---------->>>>>
                    }
                    // --- ADD 2012/06/26 No.964 Y.Wakita ----------<<<<<

                    //-----------------------------------------------------------------------------
                    // 伝票金額算出用売上明細データテーブル追加
                    //-----------------------------------------------------------------------------
                    SalesInputDataSet.SalesDetailRow sourceRow = this.GetSalesDetailRow((int)rowView[salesDetailDataTable.SalesRowNoColumn.ColumnName]);
                    SalesInputDataSet.SalesDetailRow salesDetailRowCompute = this.GetSalesDetailRowCompute(rowCount, sourceRow, salesDetailDataTableCompute); // 金額算出用売上明細データテーブル追加
                    salesDetailDataTableCompute.AddSalesDetailRow(salesDetailRowCompute);

                    // 前回ブレイクキー取得
                    saveSlipKey = this.MakeSlipKey((int)rowView[salesDetailDataTable.SalesOrderDivCdColumn.ColumnName], (string)rowView[salesDetailDataTable.WarehouseCodeColumn.ColumnName]);
                    rowCount++;
                }

                //-----------------------------------------------------------------------------
                // 伝票情報設定
                //-----------------------------------------------------------------------------
                if ((salesDetailDataTableCompute != null) && (salesDetailDataTableCompute.Count != 0))
                {
                    // 各種伝票情報設定処理
                    //>>>2010/02/26
                    //this.SettingVariousSalesSlipInfo(ref defSalesSlip, ref salesDetailDataTableCompute, ref salesDataList, ref stockSyncInfoKeyList);
                    this.SettingVariousSalesSlipInfo(ref defSalesSlip, ref salesDetailDataTableCompute, ref salesDataList, ref stockSyncInfoKeyList, scmFlg);
                    //<<<2010/02/26
                }
                salesDetailDataTable.EndLoadData();
            }
            #endregion

            #region ●通常受注情報
            //-----------------------------------------------------------------------------
            // 明細補正(不要明細削除)
            //-----------------------------------------------------------------------------
            this.AdjustAcptSaveData(acptDetailDataTable);

            if (acptDetailDataTable.Count != 0)
            {
                int sflg = (scmFlg) ? 1 : 0; // 2010/02/26

                #region 受注情報取得
                SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTableCompute = this._dataSetCompute.SalesDetailAcceptAnOrder; // 伝票金額算出用受注明細データ
                SlipKey saveSlipKey = new SlipKey();                                                                    // 前回データ作成ブレイクキー
                SlipKey slipKey = new SlipKey();                                                                        // データ作成ブレイクキー

                acptDetailDataTableCompute.Clear();

                int maxRowCount = ctMaxRowCount;
                if (defAcptSlip.SalesSlipNum == ctDefaultSalesSlipNum) maxRowCount = this.GetMaxRowCount(defAcptSlip);
                int rowCount = 1;

                DataView acptDetailView = new DataView(acptDetailDataTable);

                // --- ADD 2012/07/03 No.964 Y.Wakita ---------->>>>>
                if ((this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) &&
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal)) // 新規且つ入力モード（通常）
                {
                    // --- ADD 2012/07/03 No.964 Y.Wakita ----------<<<<<
                    //-----------------------------------------------------------------------------
                    // ソート順指定
                    //-----------------------------------------------------------------------------
                    acptDetailView.Sort = this.MakeAcptSlipSort(acptDetailDataTable);
                    // --- ADD 2012/07/03 No.964 Y.Wakita ---------->>>>>
                }
                // --- ADD 2012/07/03 No.964 Y.Wakita ----------<<<<<

                acptDetailDataTable.BeginLoadData();
                foreach (DataRowView rowView in acptDetailView)
                {

                    //-----------------------------------------------------------------------------
                    // 初期取得
                    //-----------------------------------------------------------------------------
                    if (rowCount == 1)
                    {
                        // 初期ブレイクキー取得
                        saveSlipKey = this.MakeSlipKey((int)rowView[acptDetailDataTable.SalesOrderDivCdColumn.ColumnName], (string)rowView[acptDetailDataTable.WarehouseCodeColumn.ColumnName]);
                    }
                    // 今回ブレイクキー取得
                    slipKey = this.MakeSlipKey((int)rowView[acptDetailDataTable.SalesOrderDivCdColumn.ColumnName], (string)rowView[acptDetailDataTable.WarehouseCodeColumn.ColumnName]);

                    // --- UPD 2012/07/03 No.964 Y.Wakita ---------->>>>>
                    //// --- ADD 2012/06/26 No.964 Y.Wakita ---------->>>>>
                    //if (this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) // 新規時のみ
                    //{
                    //// --- ADD 2012/06/26 No.964 Y.Wakita ----------<<<<<
                    if ((this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) &&
                        // (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal)) // 新規且つ入力モード（通常）// DEL BY 宋剛 2015/07/28 Redmine#46997 2伝票に分かれるはずのUOE伝票が１伝票で作成された件
                        (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal// 新規且つ入力モード（通常）// ADD BY 宋剛 2015/07/28 Redmine#46997 2伝票に分かれるはずのUOE伝票が１伝票で作成された件
                        || this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp))// 新規且つ入力モード（見積計上）// ADD BY 宋剛 2015/07/28 Redmine#46997 2伝票に分かれるはずのUOE伝票が１伝票で作成された件
                    {
                    // --- UPD 2012/07/03 No.964 Y.Wakita ----------<<<<<
                        //-----------------------------------------------------------------------------
                        // ブレイクチェック(指定明細数or指定キー)
                        //-----------------------------------------------------------------------------
                        if ((rowCount > maxRowCount) || (!slipKey.Equals(saveSlipKey)))
                        {
                            // 明細カウントクリア
                            rowCount = 1;

                            //-----------------------------------------------------------------------------
                            // 伝票情報設定
                            //-----------------------------------------------------------------------------
                            if ((acptDetailDataTableCompute != null) && (acptDetailDataTableCompute.Count != 0))
                            {
                                if (((defAcptSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                                     (defAcptSlip.InputMode == ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                                     (defAcptSlip.InputMode == ctINPUTMODE_SalesSlip_ShipmentAddUp)) &&
                                    (acptDetailDataTableCompute[0].SalesSlipNum != ctDefaultSalesSlipNum))
                                {
                                    // 各種伝票情報設定処理
                                    //>>>2010/02/26
                                    //this.SettingVariousAcptSlipInfo(ref acptSlipBeforeAddUp, ref acptDetailDataTableCompute, ref acptDataList);
                                    this.SettingVariousAcptSlipInfo(ref acptSlipBeforeAddUp, ref acptDetailDataTableCompute, ref acptDataList, sflg);
                                    //<<<2010/02/26
                                }
                                else
                                {
                                    // 各種伝票情報設定処理
                                    //>>>2010/02/26
                                    //this.SettingVariousAcptSlipInfo(ref defAcptSlip, ref acptDetailDataTableCompute, ref acptDataList);
                                    this.SettingVariousAcptSlipInfo(ref defAcptSlip, ref acptDetailDataTableCompute, ref acptDataList, sflg);
                                    //<<<2010/02/26
                                }
                            }
                        }
                    // --- ADD 2012/06/26 No.964 Y.Wakita ---------->>>>>
                    }
                    // --- ADD 2012/06/26 No.964 Y.Wakita ----------<<<<<

                    //-----------------------------------------------------------------------------
                    // 受注明細データリスト追加
                    //-----------------------------------------------------------------------------
                    SalesInputDataSet.SalesDetailAcceptAnOrderRow sourceAcptRow = this.GetSalesDetailAcceptAnOrderRow((Guid)rowView[acptDetailDataTable.DtlRelationGuidColumn.ColumnName]);
                    if (sourceAcptRow != null)
                    {
                        SalesInputDataSet.SalesDetailAcceptAnOrderRow acptDetailRowCompute = this.GetAcptDetailRowCompute(rowCount, sourceAcptRow, acptDetailDataTableCompute, (Guid)rowView[acptDetailDataTable.DtlRelationGuidColumn.ColumnName]);
                        acptDetailDataTableCompute.AddSalesDetailAcceptAnOrderRow(acptDetailRowCompute);
                    }

                    // 前回ブレイクキー取得
                    saveSlipKey = this.MakeSlipKey((int)rowView[acptDetailDataTable.SalesOrderDivCdColumn.ColumnName], (string)rowView[acptDetailDataTable.WarehouseCodeColumn.ColumnName]);
                    rowCount++;
                }

                //-----------------------------------------------------------------------------
                // 伝票情報設定
                //-----------------------------------------------------------------------------
                if ((acptDetailDataTableCompute != null) && (acptDetailDataTableCompute.Count != 0))
                {
                    //if (((defAcptSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                    //     (defAcptSlip.InputMode == ctINPUTMODE_SalesSlip_EstimateAddUp) ||
                    //     (defAcptSlip.InputMode == ctINPUTMODE_SalesSlip_ShipmentAddUp)) &&
                    if ((defAcptSlip.InputMode == ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) &&
                        (acptDetailDataTableCompute[0].SalesSlipNum != ctDefaultSalesSlipNum))
                    {
                        // 各種伝票情報設定処理
                        //>>>2010/02/26
                        //this.SettingVariousAcptSlipInfo(ref acptSlipBeforeAddUp, ref acptDetailDataTableCompute, ref acptDataList);
                        this.SettingVariousAcptSlipInfo(ref acptSlipBeforeAddUp, ref acptDetailDataTableCompute, ref acptDataList, sflg);
                        //<<<2010/02/26
                    }
                    else
                    {
                        // 各種伝票情報設定処理
                        //>>>2010/02/26
                        //this.SettingVariousAcptSlipInfo(ref defAcptSlip, ref acptDetailDataTableCompute, ref acptDataList);
                        this.SettingVariousAcptSlipInfo(ref defAcptSlip, ref acptDetailDataTableCompute, ref acptDataList, sflg);
                        //<<<2010/02/26
                    }
                }
                acptDetailDataTable.EndLoadData();
                #endregion
            }

            #endregion

            #region ●発注受注情報
            //-----------------------------------------------------------------------------
            // 明細補正(不要明細削除)
            //-----------------------------------------------------------------------------
            this.AdjustAcptSaveData(acptDetailDataTableForOrder);

            if (acptDetailDataTableForOrder.Count != 0)
            {
                int sflg = (scmFlg) ? 2 : 0; // 2010/02/26

                #region 受注情報取得
                SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTableCompute = this._dataSetCompute.SalesDetailAcceptAnOrder; // 伝票金額算出用受注明細データ
                SlipKey saveSlipKey = new SlipKey();                                                                    // 前回データ作成ブレイクキー
                SlipKey slipKey = new SlipKey();                                                                        // データ作成ブレイクキー

                acptDetailDataTableCompute.Clear();

                int maxRowCount = ctMaxRowCount;
                if (defAcptSlip.SalesSlipNum == ctDefaultSalesSlipNum) maxRowCount = this.GetMaxRowCount(defAcptSlip);
                int rowCount = 1;

                DataView acptDetailView = new DataView(acptDetailDataTableForOrder);

                // --- ADD 2012/07/03 No.964 Y.Wakita ---------->>>>>
                if ((this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) &&
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal)) // 新規且つ入力モード（通常）
                {
                    // --- ADD 2012/07/03 No.964 Y.Wakita ----------<<<<<
                    //-----------------------------------------------------------------------------
                    // ソート順指定
                    //-----------------------------------------------------------------------------
                    acptDetailView.Sort = this.MakeAcptSlipSort(acptDetailDataTableForOrder);
                    // --- ADD 2012/07/03 No.964 Y.Wakita ---------->>>>>
                }
                // --- ADD 2012/07/03 No.964 Y.Wakita ----------<<<<<

                acptDetailDataTableForOrder.BeginLoadData();
                foreach (DataRowView rowView in acptDetailView)
                {

                    //-----------------------------------------------------------------------------
                    // 初期取得
                    //-----------------------------------------------------------------------------
                    if (rowCount == 1)
                    {
                        // 初期ブレイクキー取得
                        saveSlipKey = this.MakeSlipKey((int)rowView[acptDetailDataTableForOrder.SalesOrderDivCdColumn.ColumnName], (string)rowView[acptDetailDataTableForOrder.WarehouseCodeColumn.ColumnName]);
                    }
                    // 今回ブレイクキー取得
                    slipKey = this.MakeSlipKey((int)rowView[acptDetailDataTableForOrder.SalesOrderDivCdColumn.ColumnName], (string)rowView[acptDetailDataTableForOrder.WarehouseCodeColumn.ColumnName]);

                    // --- UPD 2012/07/03 No.964 Y.Wakita ---------->>>>>
                    //// --- ADD 2012/06/26 No.964 Y.Wakita ---------->>>>>
                    //if (this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) // 新規時のみ
                    //{
                    //// --- ADD 2012/06/26 No.964 Y.Wakita ----------<<<<<
                    if ((this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) &&
                        (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal)) // 新規且つ入力モード（通常）
                    {
                        // --- UPD 2012/07/03 No.964 Y.Wakita ----------<<<<<
                        //-----------------------------------------------------------------------------
                        // ブレイクチェック(指定明細数or指定キー)
                        //-----------------------------------------------------------------------------
                        if ((rowCount > maxRowCount) || (!slipKey.Equals(saveSlipKey)))
                        {
                            // 明細カウントクリア
                            rowCount = 1;

                            //-----------------------------------------------------------------------------
                            // 伝票情報設定
                            //-----------------------------------------------------------------------------
                            if ((acptDetailDataTableCompute != null) && (acptDetailDataTableCompute.Count != 0))
                            {
                                // 各種伝票情報設定処理
                                //>>>2010/02/26
                                //this.SettingVariousAcptSlipInfo(ref defAcptSlip, ref acptDetailDataTableCompute, ref acptDataList);
                                this.SettingVariousAcptSlipInfo(ref defAcptSlip, ref acptDetailDataTableCompute, ref acptDataList, sflg);
                                //<<<2010/02/26
                            }
                        }
                    // --- ADD 2012/06/26 No.964 Y.Wakita ---------->>>>>
                    }
                    // --- ADD 2012/06/26 No.964 Y.Wakita ----------<<<<<
                    //-----------------------------------------------------------------------------
                    // 受注明細データリスト追加
                    //-----------------------------------------------------------------------------
                    SalesInputDataSet.SalesDetailAcceptAnOrderRow sourceAcptRow = this._salesDetailAcceptAnOrderDataTableForOrder.FindByDtlRelationGuid((Guid)rowView[acptDetailDataTableForOrder.DtlRelationGuidColumn.ColumnName]);
                    if (sourceAcptRow != null)
                    {
                        SalesInputDataSet.SalesDetailAcceptAnOrderRow acptDetailRowCompute = this.GetAcptDetailRowCompute(rowCount, sourceAcptRow, acptDetailDataTableCompute, (Guid)rowView[acptDetailDataTableForOrder.DtlRelationGuidColumn.ColumnName]);
                        acptDetailDataTableCompute.AddSalesDetailAcceptAnOrderRow(acptDetailRowCompute);
                    }

                    // 前回ブレイクキー取得
                    saveSlipKey = this.MakeSlipKey((int)rowView[acptDetailDataTableForOrder.SalesOrderDivCdColumn.ColumnName], (string)rowView[acptDetailDataTableForOrder.WarehouseCodeColumn.ColumnName]);
                    rowCount++;
                }

                //-----------------------------------------------------------------------------
                // 伝票情報設定
                //-----------------------------------------------------------------------------
                if ((acptDetailDataTableCompute != null) && (acptDetailDataTableCompute.Count != 0))
                {
                    // 各種伝票情報設定処理
                    //>>>2010/02/26
                    //this.SettingVariousAcptSlipInfo(ref defAcptSlip, ref acptDetailDataTableCompute, ref acptDataList);
                    this.SettingVariousAcptSlipInfo(ref defAcptSlip, ref acptDetailDataTableCompute, ref acptDataList, sflg);
                    //<<<2010/02/26
                }
                acptDetailDataTableForOrder.EndLoadData();
                #endregion
            }
            #endregion

            #region ●追加受注情報
            //-----------------------------------------------------------------------------
            // 明細補正(不要明細削除)
            //-----------------------------------------------------------------------------
            this.AdjustAcptSaveData(acptDetailDataTableForAdd);

            if (acptDetailDataTableForAdd.Count != 0)
            {
                #region 受注情報取得
                SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTableCompute = this._dataSetCompute.SalesDetailAcceptAnOrder; // 伝票金額算出用受注明細データ
                SlipKey saveSlipKey = new SlipKey();                                                                    // 前回データ作成ブレイクキー
                SlipKey slipKey = new SlipKey();                                                                        // データ作成ブレイクキー

                acptDetailDataTableCompute.Clear();

                int maxRowCount = ctMaxRowCount;
                if (defAcptSlip.SalesSlipNum == ctDefaultSalesSlipNum) maxRowCount = this.GetMaxRowCount(defAcptSlip);
                int rowCount = 1;

                DataView acptDetailView = new DataView(acptDetailDataTableForAdd);

                // --- ADD 2012/07/03 No.964 Y.Wakita ---------->>>>>
                if ((this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) &&
                    (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal)) // 新規且つ入力モード（通常）
                {
                    // --- ADD 2012/07/03 No.964 Y.Wakita ----------<<<<<
                    //-----------------------------------------------------------------------------
                    // ソート順指定
                    //-----------------------------------------------------------------------------
                    acptDetailView.Sort = this.MakeAcptSlipSort(acptDetailDataTableForAdd);
                    // --- ADD 2012/07/03 No.964 Y.Wakita ---------->>>>>
                }
                // --- ADD 2012/07/03 No.964 Y.Wakita ----------<<<<<

                acptDetailDataTableForAdd.BeginLoadData();
                foreach (DataRowView rowView in acptDetailView)
                {

                    //-----------------------------------------------------------------------------
                    // 初期取得
                    //-----------------------------------------------------------------------------
                    if (rowCount == 1)
                    {
                        // 初期ブレイクキー取得
                        saveSlipKey = this.MakeSlipKey((int)rowView[acptDetailDataTableForAdd.SalesOrderDivCdColumn.ColumnName], (string)rowView[acptDetailDataTableForAdd.WarehouseCodeColumn.ColumnName]);
                    }
                    // 今回ブレイクキー取得
                    slipKey = this.MakeSlipKey((int)rowView[acptDetailDataTableForAdd.SalesOrderDivCdColumn.ColumnName], (string)rowView[acptDetailDataTableForAdd.WarehouseCodeColumn.ColumnName]);

                    // --- UPD 2012/07/03 No.964 Y.Wakita ---------->>>>>
                    //// --- ADD 2012/06/26 No.964 Y.Wakita ---------->>>>>
                    //if (this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) // 新規時のみ
                    //{
                    //// --- ADD 2012/06/26 No.964 Y.Wakita ----------<<<<<
                    if ((this._salesSlip.SalesSlipNum == ctDefaultSalesSlipNum) &&
                        (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal)) // 新規且つ入力モード（通常）
                    {
                        // --- UPD 2012/07/03 No.964 Y.Wakita ----------<<<<<
                        //-----------------------------------------------------------------------------
                        // ブレイクチェック(指定明細数or指定キー)
                        //-----------------------------------------------------------------------------
                        if ((rowCount > maxRowCount) || (!slipKey.Equals(saveSlipKey)))
                        {
                            // 明細カウントクリア
                            rowCount = 1;

                            //-----------------------------------------------------------------------------
                            // 伝票情報設定
                            //-----------------------------------------------------------------------------
                            if ((acptDetailDataTableCompute != null) && (acptDetailDataTableCompute.Count != 0))
                            {
                                // 各種伝票情報設定処理
                                this.SettingVariousAcptSlipInfo(ref defAcptSlip, ref acptDetailDataTableCompute, ref acptDataList);
                            }
                        }
                    // --- ADD 2012/06/26 No.964 Y.Wakita ---------->>>>>
                    }
                    // --- ADD 2012/06/26 No.964 Y.Wakita ----------<<<<<

                    //-----------------------------------------------------------------------------
                    // 受注明細データリスト追加
                    //-----------------------------------------------------------------------------
                    SalesInputDataSet.SalesDetailAcceptAnOrderRow sourceAcptRow = this._salesDetailAcceptAnOrderDataTableForAdd.FindByDtlRelationGuid((Guid)rowView[acptDetailDataTableForAdd.DtlRelationGuidColumn.ColumnName]);
                    if (sourceAcptRow != null)
                    {
                        SalesInputDataSet.SalesDetailAcceptAnOrderRow acptDetailRowCompute = this.GetAcptDetailRowCompute(rowCount, sourceAcptRow, acptDetailDataTableCompute, (Guid)rowView[acptDetailDataTableForAdd.DtlRelationGuidColumn.ColumnName]);
                        acptDetailDataTableCompute.AddSalesDetailAcceptAnOrderRow(acptDetailRowCompute);
                    }

                    // 前回ブレイクキー取得
                    saveSlipKey = this.MakeSlipKey((int)rowView[acptDetailDataTableForAdd.SalesOrderDivCdColumn.ColumnName], (string)rowView[acptDetailDataTableForAdd.WarehouseCodeColumn.ColumnName]);
                    rowCount++;
                }

                //-----------------------------------------------------------------------------
                // 伝票情報設定
                //-----------------------------------------------------------------------------
                if ((acptDetailDataTableCompute != null) && (acptDetailDataTableCompute.Count != 0))
                {
                    // 各種伝票情報設定処理
                    this.SettingVariousAcptSlipInfo(ref defAcptSlip, ref acptDetailDataTableCompute, ref acptDataList);
                }
                acptDetailDataTableForAdd.EndLoadData();
                #endregion
            }
            #endregion
        }

        // 2009/12/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 明細最大行数取得処理
        /// </summary>
        /// <param name="slipInfo"></param>
        private int GetMaxRowCount(SalesSlip slipInfo)
        {
            return GetMaxRowCount(slipInfo.AcptAnOdrStatusDisplay, slipInfo);
        }
        // 2009/12/17 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        // 2009/12/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 明細最大行数取得処理
        /// </summary>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="slipInfo"></param>
        /// <returns></returns>
        //private int GetMaxRowCount(SalesSlip slipInfo)
        private int GetMaxRowCount(int acptAnOdrStatus, SalesSlip slipInfo)
        // 2009/12/17 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        {
            int maxRowCount = ctMaxRowCount;
            SlipPrtSet slipPrtSet = new SlipPrtSet();
            // 2009/12/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            //switch ((AcptAnOdrStatusState)slipInfo.AcptAnOdrStatusDisplay)
            switch ((AcptAnOdrStatusState)acptAnOdrStatus)
            // 2009/12/17 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            {
                case AcptAnOdrStatusState.Estimate:
                case AcptAnOdrStatusState.UnitPriceEstimate:
                    slipPrtSet = this.GetPrtSlipSet(SlipTypeController.SlipKind.EstimateSlip, slipInfo.SectionCode.Trim(), slipInfo.CustomerCode);
                    break;
                case AcptAnOdrStatusState.AcceptAnOrder:
                    slipPrtSet = this.GetPrtSlipSet(SlipTypeController.SlipKind.AcceptSlip, slipInfo.SectionCode.Trim(), slipInfo.CustomerCode);
                    break;
                case AcptAnOdrStatusState.Sales:
                    slipPrtSet = this.GetPrtSlipSet(SlipTypeController.SlipKind.SalesSlip, slipInfo.SectionCode.Trim(), slipInfo.CustomerCode);
                    break;
                case AcptAnOdrStatusState.Shipment:
                    slipPrtSet = this.GetPrtSlipSet(SlipTypeController.SlipKind.LoanSlip, slipInfo.SectionCode.Trim(), slipInfo.CustomerCode);
                    break;
            }
            if ((slipPrtSet != null) && (slipPrtSet.DetailRowCount != 0)) maxRowCount = slipPrtSet.DetailRowCount;
            return maxRowCount;
        }

        // --- ADD 2009/12/23 ---------->>>>>
        /// <summary>
        /// 伝票備考、伝票備考２、伝票備考３の入力桁数取得処理
        /// </summary>
        /// <param name="slipInfo"></param>
        public void GetNoteCharCnt()
        {
            SalesSlip slipInfo = this._salesSlip.Clone();
            if (slipInfo == null) return;

            SlipPrtSet slipPrtSet = new SlipPrtSet();
            switch ((AcptAnOdrStatusState)slipInfo.AcptAnOdrStatusDisplay)
            {
                case AcptAnOdrStatusState.Estimate:
                case AcptAnOdrStatusState.UnitPriceEstimate:
                    slipPrtSet = this.GetPrtSlipSet(SlipTypeController.SlipKind.EstimateSlip, slipInfo.SectionCode.Trim(), slipInfo.CustomerCode);
                    break;
                case AcptAnOdrStatusState.AcceptAnOrder:
                    slipPrtSet = this.GetPrtSlipSet(SlipTypeController.SlipKind.AcceptSlip, slipInfo.SectionCode.Trim(), slipInfo.CustomerCode);
                    break;
                case AcptAnOdrStatusState.Sales:
                    slipPrtSet = this.GetPrtSlipSet(SlipTypeController.SlipKind.SalesSlip, slipInfo.SectionCode.Trim(), slipInfo.CustomerCode);
                    break;
                case AcptAnOdrStatusState.Shipment:
                    slipPrtSet = this.GetPrtSlipSet(SlipTypeController.SlipKind.LoanSlip, slipInfo.SectionCode.Trim(), slipInfo.CustomerCode);
                    break;
            }

            if (slipPrtSet != null)
            {
                this._salesSlipInputInitDataAcs.SlipNoteCharCnt = slipPrtSet.SlipNoteCharCnt;
                this._salesSlipInputInitDataAcs.SlipNote2CharCnt = slipPrtSet.SlipNote2CharCnt;
                this._salesSlipInputInitDataAcs.SlipNote3CharCnt = slipPrtSet.SlipNote3CharCnt;
            }
        }
        // --- ADD 2009/12/23 ----------<<<<<

        /// <summary>
        /// 伝票印刷設定用帳票ＩＤ取得処理
        /// </summary>
        /// <param name="slipInfo"></param>
        /// <returns></returns>
        private string GetSlipPrtSetPaperId(SalesSlip slipInfo)
        {
            string slipPrtSetPaperId = string.Empty;

            SlipPrtSet slipPrtSet = new SlipPrtSet();
            switch ((AcptAnOdrStatusState)slipInfo.AcptAnOdrStatusDisplay)
            {
                case AcptAnOdrStatusState.Estimate:
                case AcptAnOdrStatusState.UnitPriceEstimate:
                    //>>>2011/07/14
                    //slipPrtSet = this.GetPrtSlipSet(SlipTypeController.SlipKind.EstimateForm, slipInfo.SectionCode.Trim(), slipInfo.CustomerCode);
                    slipPrtSet = this.GetPrtSlipSet(SlipTypeController.SlipKind.EstimateSlip, slipInfo.SectionCode.Trim(), slipInfo.CustomerCode);
                    //<<<2011/07/14
                    break;
                case AcptAnOdrStatusState.AcceptAnOrder:
                case AcptAnOdrStatusState.Sales:
                case AcptAnOdrStatusState.Shipment:
                    slipPrtSet = this.GetPrtSlipSet(SlipTypeController.SlipKind.SalesSlip, slipInfo.SectionCode.Trim(), slipInfo.CustomerCode);
                    break;
            }
            if (slipPrtSet != null) slipPrtSetPaperId = slipPrtSet.SlipPrtSetPaperId;
            return slipPrtSetPaperId;
        }

        /// <summary>
        /// 伝票印刷設定情報取得処理
        /// </summary>
        /// <param name="slipKind"></param>
        /// <param name="sectionCode"></param>
        /// <param name="customerCode"></param>
        /// <returns></returns>
        private SlipPrtSet GetPrtSlipSet(SlipTypeController.SlipKind slipKind, string sectionCode, int customerCode)
        {
            SlipTypeController stc = new SlipTypeController();
            stc.EnterpriseCode = this._enterpriseCode;
            stc.SlipPrtSetList = this._salesSlipInputInitDataAcs.SlipPrtSetList;
            stc.CustSlipMngList = this._salesSlipInputInitDataAcs.CustSlipMngList;

            SlipPrtSet slipPrtSet;
            int status = stc.GetSlipType(slipKind, out slipPrtSet, sectionCode, customerCode);

            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                slipPrtSet = null;
            }
            return slipPrtSet;
        }

        /// <summary>
        /// 各種売上伝票情報取得処理
        /// </summary>
        /// <param name="defSalesSlip"></param>
        /// <param name="salesDetailDataTableCompute"></param>
        /// <param name="salesDataList"></param>
        /// <param name="stockSyncInfoKeyList"></param>
        //>>>2010/02/26
        //private void SettingVariousSalesSlipInfo(ref SalesSlip defSalesSlip, ref SalesInputDataSet.SalesDetailDataTable salesDetailDataTableCompute, ref ArrayList salesDataList, ref List<StockSyncInfoKey> stockSyncInfoKeyList)
        private void SettingVariousSalesSlipInfo(ref SalesSlip defSalesSlip, ref SalesInputDataSet.SalesDetailDataTable salesDetailDataTableCompute, ref ArrayList salesDataList, ref List<StockSyncInfoKey> stockSyncInfoKeyList, bool scmFlg)
        //<<<2010/02/26
        {
            SalesSlip salesSlip;                                            // 売上データクラス
            List<SalesDetail> salesDetailList = new List<SalesDetail>();    // 売上明細データクラスリスト
            SearchDepsitMain depsitMain = null;                             // 入金データオブジェクト
            SearchDepositAlw depositAlw = null;                             // 入金引当データオブジェクト
            //>>>2010/02/26
            SCMAcOdrDataWork scmAcOdrDataWork = null;                       // SCM受注データワークオブジェクト
            SCMAcOdrDtCarWork scmAcOdrDtCarWork = null;                     // SCM受注データ(車両情報)ワークオブジェクト
            ArrayList scmAcOdrDtlIqWorkList = null;                         // SCM受注明細データ(問合せ・発注)ワークオブジェクトリスト(SCMAcOdrDtlIqWork)
            ArrayList scmAcOdrDtlAsWorkList = null;                         // SCM受注明細データ(回答)ワークオブジェクトリスト(SCMAcOdrDtlAsWork)
            //<<<2010/02/26

            //-----------------------------------------------------------------------------
            // 売仕入同時入力データキーリスト作成
            //-----------------------------------------------------------------------------
            this.MakeStockSyncInfoKeyList(salesDetailDataTableCompute, ref stockSyncInfoKeyList);

            //-----------------------------------------------------------------------------
            // 売上情報
            //-----------------------------------------------------------------------------
            this.GetUIDataFromTable(defSalesSlip, salesDetailDataTableCompute, out salesDetailList);// 売上明細リスト作成
            this.CollectSalesSlipUnit(defSalesSlip, salesDetailDataTableCompute, out salesSlip);    // 売上データ集計
            if (salesSlip != null) this.ClearEstimateInfo(ref salesSlip);                           // 見積情報クリア
            this.CorrectSalesMoney(ref salesSlip, salesDetailDataTableCompute);                     // 売上金額補正処理
            CustomSerializeArrayList salesData = new CustomSerializeArrayList();                    // 伝票情報クリア
            salesData.Add(salesSlip);                                                               // 売上データ追加
            salesData.Add(salesDetailList);                                                         // 売上明細リスト追加
            salesData.Add(salesDetailDataTableCompute.Copy());                                      // 売上明細データテーブル追加

            //-----------------------------------------------------------------------------
            // 入金情報
            //-----------------------------------------------------------------------------
            if ((salesDetailList != null) && (salesDetailList.Count != 0))
            {
                this.GetCurrentDepsitMain(ref salesSlip, out depsitMain, out depositAlw);
            }
            if (salesSlip.AccRecDivCd == 0)
            {
                salesData.Add(depsitMain); // 入金データ追加
                salesData.Add(depositAlw); // 入金引当データ追加
            }

            //>>>2010/02/26
            //-----------------------------------------------------------------------------
            // SCM情報
            //-----------------------------------------------------------------------------
            if ((salesDetailList != null) && (salesDetailList.Count != 0) && (scmFlg))
            {
                this.GetCurrentSCM(0, salesSlip, salesDetailList, out scmAcOdrDataWork, out scmAcOdrDtCarWork, out scmAcOdrDtlIqWorkList, out scmAcOdrDtlAsWorkList);
                if (scmAcOdrDataWork != null)
                {
                    salesData.Add(scmAcOdrDataWork);                                            // SCM受注データ
                    if (scmAcOdrDtCarWork != null) salesData.Add(scmAcOdrDtCarWork);            // SCM受注データ(車両情報)
                    if (scmAcOdrDtlIqWorkList.Count != 0) salesData.Add(scmAcOdrDtlIqWorkList); // SCM受注明細データ(問合せ・発注)
                    if (scmAcOdrDtlAsWorkList.Count != 0) salesData.Add(scmAcOdrDtlAsWorkList); // SCM受注明細データ(回答)
                }
            }
            //<<<2010/02/26
            //>>>2010/03/30
            //MessageBox.Show(this._scmAcOdrDataDataTable.Count.ToString());
            if ((this._scmAcOdrDataDataTable != null) &&
                (this._scmAcOdrDataDataTable.Count != 0) &&
                // 2011/02/18 >>>
                //( this._scmAcOdrDataDataTable[0].AnswerDivCd == 99 )
                (this._scmAcOdrDataDataTable[0].CancelDiv == 1)
                // 2011/02/18 <<<
            )
            {
                // SCM情報保存用オブジェクトを各種SCMデータテーブルより取得
                this.GetParamDataFromSCMDataTableForCancel(0, salesSlip, salesDetailList, out scmAcOdrDataWork, out scmAcOdrDtCarWork, out scmAcOdrDtlIqWorkList, out scmAcOdrDtlAsWorkList);
                if (scmAcOdrDataWork != null)
                {
                    salesData.Add(scmAcOdrDataWork);                                            // SCM受注データ
                    if (scmAcOdrDtCarWork != null) salesData.Add(scmAcOdrDtCarWork);            // SCM受注データ(車両情報)
                    if (scmAcOdrDtlIqWorkList.Count != 0) salesData.Add(scmAcOdrDtlIqWorkList); // SCM受注明細データ(問合せ・発注)
                    if (scmAcOdrDtlAsWorkList.Count != 0) salesData.Add(scmAcOdrDtlAsWorkList); // SCM受注明細データ(回答)
                }
            }
            //<<<2010/03/30

            //-----------------------------------------------------------------------------
            // 伝票情報
            //-----------------------------------------------------------------------------
            salesDataList.Add(salesData);               // 伝票情報追加
            salesDetailList = new List<SalesDetail>();  // 売上明細リストクリア
            salesDetailDataTableCompute.Clear();        // 金額算出用売上明細テーブルクリア
        }

        //>>>2010/02/26
        /// <summary>
        /// 各種受注伝票情報取得処理
        /// </summary>
        /// <param name="defAcptSlip"></param>
        /// <param name="acptDetailDataTableCompute"></param>
        /// <param name="acptDataList"></param>
        private void SettingVariousAcptSlipInfo(ref SalesSlip defAcptSlip, ref SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTableCompute, ref ArrayList acptDataList)
        {
            this.SettingVariousAcptSlipInfo(ref defAcptSlip, ref acptDetailDataTableCompute, ref acptDataList, 0);
        }
        //<<<2010/02/26

        /// <summary>
        /// 各種受注伝票情報取得処理
        /// </summary>
        /// <param name="defAcptSlip"></param>
        /// <param name="acptDetailDataTableCompute"></param>
        /// <param name="acptDataList"></param>
        //>>>2010/02/26
        //private void SettingVariousAcptSlipInfo(ref SalesSlip defAcptSlip, ref SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTableCompute, ref ArrayList acptDataList)
        private void SettingVariousAcptSlipInfo(ref SalesSlip defAcptSlip, ref SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTableCompute, ref ArrayList acptDataList, int scmFlg)
        //<<<2010/02/26
        {
            SalesSlip acptSlip;                                         // 受注データクラス
            List<SalesDetail> acptDetailList = new List<SalesDetail>(); // 受注明細データクラスリスト
            //>>>2010/02/26
            SCMAcOdrDataWork scmAcOdrDataWork = null;                       // SCM受注データワークオブジェクト
            SCMAcOdrDtCarWork scmAcOdrDtCarWork = null;                     // SCM受注データ(車両情報)ワークオブジェクト
            ArrayList scmAcOdrDtlIqWorkList = null;                         // SCM受注明細データ(問合せ・発注)ワークオブジェクトリスト(SCMAcOdrDtlIqWork)
            ArrayList scmAcOdrDtlAsWorkList = null;                         // SCM受注明細データ(回答)ワークオブジェクトリスト(SCMAcOdrDtlAsWork)
            //<<<2010/02/26

            //-----------------------------------------------------------------------------
            // 補正
            //-----------------------------------------------------------------------------
            defAcptSlip.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder;

            //-----------------------------------------------------------------------------
            // 受注情報
            //-----------------------------------------------------------------------------
            this.UpdateAcptAnOrdDetailDT(acptDetailDataTableCompute, defAcptSlip); // ADD 陳健 2013/12/19 Redmine#41550 No.1
            this.GetUIDataFromTable(defAcptSlip, acptDetailDataTableCompute, out acptDetailList);   // 売上明細リスト作成
            this.CollectAcptSlipUnit(defAcptSlip, acptDetailDataTableCompute, out acptSlip);        // 受注データ集計
            if (acptSlip != null) this.ClearEstimateInfo(ref acptSlip);                             // 見積情報クリア
            if (acptDetailList != null) this.ClearCmpltInfo(ref acptDetailList);                    // 一式情報クリア
            this.CorrectAcptMoney(ref acptSlip, acptDetailDataTableCompute);                        // 受注金額補正処理
            CustomSerializeArrayList acptData = new CustomSerializeArrayList();                     // 伝票情報クリア
            acptData.Add(acptSlip);                                                                 // 受注データ追加
            acptData.Add(acptDetailList);                                                           // 受注明細リスト追加
            acptData.Add(acptDetailDataTableCompute.Copy());                                        // 受注明細データテーブル追加

            //>>>2010/02/26
            //-----------------------------------------------------------------------------
            // SCM情報
            //-----------------------------------------------------------------------------
            if ((acptDetailList != null) && (acptDetailList.Count != 0) && (scmFlg != 0))
            {
                this.GetCurrentSCM(scmFlg, acptSlip, acptDetailList, out scmAcOdrDataWork, out scmAcOdrDtCarWork, out scmAcOdrDtlIqWorkList, out scmAcOdrDtlAsWorkList);
                if (scmAcOdrDataWork != null)
                {
                    acptData.Add(scmAcOdrDataWork);                                             // SCM受注データ
                    if (scmAcOdrDtCarWork != null) acptData.Add(scmAcOdrDtCarWork);             // SCM受注データ(車両情報)
                    if (scmAcOdrDtlIqWorkList.Count != 0) acptData.Add(scmAcOdrDtlIqWorkList);  // SCM受注明細データ(問合せ・発注)
                    if (scmAcOdrDtlAsWorkList.Count != 0) acptData.Add(scmAcOdrDtlAsWorkList);  // SCM受注明細データ(回答)
                }
            }
            //<<<2010/02/26

            //-----------------------------------------------------------------------------
            // 伝票情報追加
            //-----------------------------------------------------------------------------
            acptDataList.Add(acptData); // 伝票情報追加
            acptDetailList = new List<SalesDetail>(); // 受注明細リストクリア
            acptDetailDataTableCompute.Clear(); // 金額算出用受注明細テーブルクリア
        }

        /// <summary>
        /// 売上データ作成ソート順生成処理
        /// </summary>
        /// <param name="SalesDetailDataTable"></param>
        /// <returns></returns>
        private string MakeSalesSlipSort(SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            string sortString = string.Empty;
            switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipCreateProcess)
            {
                case 0:
                    // 入力順(行番号順)
                    sortString = string.Format("{0}", salesDetailDataTable.SalesRowNoColumn.ColumnName);
                    break;
                case 1:
                    // 在庫・取寄順(在庫取寄区分(0:取寄 1:在庫)・行番号順)
                    sortString = string.Format("{0} DESC,{1}", salesDetailDataTable.SalesOrderDivCdColumn.ColumnName,
                                                               salesDetailDataTable.SalesRowNoColumn.ColumnName);
                    break;
                case 2:
                    // 倉庫順(倉庫・行番号順)
                    sortString = string.Format("{0},{1}", salesDetailDataTable.WarehouseCodeColumn.ColumnName,
                                                          salesDetailDataTable.SalesRowNoColumn.ColumnName);
                    break;
                case 3:
                    // 出力先別(倉庫・行番号順)
                    sortString = string.Format("{0},{1}", salesDetailDataTable.WarehouseCodeColumn.ColumnName,
                                                          salesDetailDataTable.SalesRowNoColumn.ColumnName);
                    break;
            }
            return sortString;
        }

        /// <summary>
        /// 受注データ作成ソート順生成処
        /// </summary>
        /// <param name="acptDetailDataTable"></param>
        /// <returns></returns>
        private string MakeAcptSlipSort(SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTable)
        {
            string sortString = string.Empty;
            switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipCreateProcess)
            {
                case 0:
                    // 入力順(行番号順)
                    sortString = string.Format("{0}", acptDetailDataTable.SalesRowNoColumn.ColumnName);
                    break;
                case 1:
                    // 在庫・取寄順(在庫取寄区分(0:取寄 1:在庫)・行番号順)
                    sortString = string.Format("{0} DESC,{1}", acptDetailDataTable.SalesOrderDivCdColumn.ColumnName,
                                                               acptDetailDataTable.SalesRowNoColumn.ColumnName);
                    break;
                case 2:
                    // 倉庫順(倉庫・行番号順)
                    sortString = string.Format("{0},{1}", acptDetailDataTable.WarehouseCodeColumn.ColumnName,
                                                          acptDetailDataTable.SalesRowNoColumn.ColumnName);
                    break;
                case 3:
                    // 出力先別(倉庫・行番号順)
                    sortString = string.Format("{0},{1}", acptDetailDataTable.WarehouseCodeColumn.ColumnName,
                                                          acptDetailDataTable.SalesRowNoColumn.ColumnName);
                    break;
            }
            return sortString;
        }

        /// <summary>
        /// データ作成ブレイクキー作成処理
        /// </summary>
        /// <param name="salesOrderDivCd"></param>
        /// <param name="warehouseCode"></param>
        /// <returns></returns>
        private SlipKey MakeSlipKey(int salesOrderDivCd, string warehouseCode)
        {
            SlipKey slipKey = new SlipKey();
            switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipCreateProcess)
            {
                case 0:
                    // 入力順(行番号順)
                    slipKey = new SlipKey();
                    break;
                case 1:
                    // 在庫・取寄順(在庫取寄区分(0:取寄 1:在庫)・行番号順)
                    slipKey = new SlipKey(salesOrderDivCd, string.Empty);
                    break;
                case 2:
                    // 倉庫順(倉庫・行番号順)
                    slipKey = new SlipKey(0, warehouseCode);
                    break;
                case 3:
                    // 出力先別(倉庫・行番号順)
                    slipKey = new SlipKey(0, warehouseCode);
                    break;
            }
            return slipKey;
        }

        /// <summary>
        /// 金額算出用売上明細データテーブル取得処理
        /// </summary>
        /// <param name="rowCount">設定行番号</param>
        /// <param name="sourceRow">設定元売上明細行オブジェクト</param>
        /// <param name="salesDetailDataTableCompute">金額算出用売上明細データテーブル</param>
        /// <returns></returns>
        private SalesInputDataSet.SalesDetailRow GetSalesDetailRowCompute(int rowCount, SalesInputDataSet.SalesDetailRow sourceRow, SalesInputDataSet.SalesDetailDataTable salesDetailDataTableCompute)
        {
            SalesInputDataSet.SalesDetailRow row = salesDetailDataTableCompute.NewSalesDetailRow();

            this.CopySalesDetailRow(sourceRow, row);    // 各種項目コピー

            row.SalesSlipNum = ctDefaultSalesSlipNum;   // 売上伝票番号
            row.SalesRowNo = rowCount;                  // 売上行番号
            row.DtlRelationGuid = sourceRow.DtlRelationGuid;

            row.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo; // 受注番号
            row.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            row.SalesSlipDtlNum = sourceRow.SalesSlipDtlNum; // 売上明細通番
            row.SalesRowDerivNo = sourceRow.SalesRowDerivNo; // 売上行番号枝番
            row.AcptAnOdrStatusSrc = sourceRow.AcptAnOdrStatusSrc; // 受注ステータス（元）
            row.SalesSlipDtlNumSrc = sourceRow.SalesSlipDtlNumSrc; // 売上明細通番（元）
            row.SupplierFormalSync = sourceRow.SupplierFormalSync; // 仕入形式（同時）
            row.StockSlipDtlNumSync = sourceRow.StockSlipDtlNumSync; // 仕入明細通番（同時）
            // 2012/06/15 ADD T.Yoshioka 90 ---------------->>>>>>>>>>>>>>>>>>>>>>>>> 
            row.AnsPureGoodsNo = sourceRow.AnsPureGoodsNo;      // 回答純正商品番号
            row.PureGoodsMakerCd = sourceRow.PureGoodsMakerCd;  // 純正商品メーカーコード
            // 2012/06/15 ADD T.Yoshioka 90 ----------------<<<<<<<<<<<<<<<<<<<<<<<<<<<

            return row;
        }

        /// <summary>
        /// 金額算出用受注明細データテーブル取得処理
        /// </summary>
        /// <param name="rowCount">設定行番号</param>
        /// <param name="sourceRow">設定元受注明細行オブジェクト</param>
        /// <param name="acptDetailDataTableCompute">金額算出用受注明細行オブジェクト</param>
        /// <param name="dtlRelationGuid">共通キー</param>
        /// <returns></returns>
        private SalesInputDataSet.SalesDetailAcceptAnOrderRow GetAcptDetailRowCompute(int rowCount, SalesInputDataSet.SalesDetailAcceptAnOrderRow sourceRow, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTableCompute, Guid dtlRelationGuid)
        {
            SalesInputDataSet.SalesDetailAcceptAnOrderRow row = acptDetailDataTableCompute.NewSalesDetailAcceptAnOrderRow();

            this.CopyAcceptAnOrderFromAcceptAnOrder(sourceRow, row); // 各種項目コピー

            //row.SalesSlipNum = ctDefaultSalesSlipNum;   // 売上伝票番号
            row.SalesRowNo = rowCount;                  // 売上行番号
            row.DtlRelationGuid = dtlRelationGuid;      // 共通キー

            return row;
        }

        /// <summary>
        /// 売上データ金額集計処理
        /// </summary>
        /// <param name="defSalesSlip"></param>
        /// <param name="salesDetailDataTableCompute"></param>
        /// <param name="salesSlip"></param>
        private void CollectSalesSlipUnit(SalesSlip defSalesSlip, SalesInputDataSet.SalesDetailDataTable salesDetailDataTableCompute, out SalesSlip salesSlip)
        {
            salesSlip = defSalesSlip.Clone();
            this.TotalPriceSetting(ref salesSlip, salesDetailDataTableCompute);
        }

        /// <summary>
        /// 受注データ金額集計処理
        /// </summary>
        /// <param name="defAcptSlip"></param>
        /// <param name="acptDetailDataTableCompute"></param>
        /// <param name="acptSlip"></param>
        private void CollectAcptSlipUnit(SalesSlip defAcptSlip, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTableCompute, out SalesSlip acptSlip)
        {
            acptSlip = defAcptSlip.Clone();
            this.TotalPriceSettingForAcptAnOdr(ref acptSlip, acptDetailDataTableCompute);
        }

        /// <summary>
        /// 受注明細データテーブルより受注明細データオブジェクトリストを取得します。
        /// </summary>
        /// <param name="acptSlip">受注データオブジェクト</param>
        /// <param name="acptDetailDataTable">受注明細データテーブルオブジェクト</param>
        /// <param name="acptDetailList">受注明細データオブジェクトリスト</param>
        private void GetUIDataFromTable(SalesSlip acptSlip, SalesInputDataSet.SalesDetailAcceptAnOrderDataTable acptDetailDataTable, out List<SalesDetail> acptDetailList)
        {
            acptDetailList = new List<SalesDetail>();

            foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow row in acptDetailDataTable)
            {
                SalesDetail acptDetail = this.GetUIDataFromAcptAnOdrRow(acptSlip, row);

                if (acptDetail != null)
                {
                    acptDetailList.Add(acptDetail);
                }
            }
        }

        /// <summary>
        /// 売上明細データ行オブジェクトより売上明細データオブジェクトを取得します。
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="row"></param>
        /// <returns></returns>
        /// <br>Update Note: 2011/09/21 Redmine#25210 返品時は回答納期をセットしないの対応 </br>
        private SalesDetail GetUIDataFromRow(SalesSlip salesSlip, SalesInputDataSet.SalesDetailRow row)
        {
            //-----------------------------------------------------------------------------
            // 売上明細データを取得
            //-----------------------------------------------------------------------------
            SalesDetail salesDetail = new SalesDetail();

            //-----------------------------------------------------------------------------
            // 各種テーブル情報取得
            //-----------------------------------------------------------------------------
            SalesInputDataSet.CompleteInfoRow completeInfoRow = this._completeInfoDataTable.FindByCmpltSalesRowNo(row.CmpltSalesRowNo);
            SalesInputDataSet.StockTempRow stockTempRow = this._stockTempDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);

            //-----------------------------------------------------------------------------
            // 共通ファイルヘッダ情報
            //-----------------------------------------------------------------------------
            //salesDetail.CreateDateTime = row.CreateDateTime; // 作成日時
            //salesDetail.UpdateDateTime = row.UpdateDateTime; // 更新日時
            //salesDetail.EnterpriseCode = row.EnterpriseCode; // 企業コード
            //salesDetail.FileHeaderGuid = row.FileHeaderGuid; // GUID
            //salesDetail.UpdEmployeeCode = row.UpdEmployeeCode; // 更新従業員コード
            //salesDetail.UpdAssemblyId1 = row.UpdAssemblyId1; // 更新アセンブリID1
            //salesDetail.UpdAssemblyId2 = row.UpdAssemblyId2; // 更新アセンブリID2
            //salesDetail.LogicalDeleteCode = row.LogicalDeleteCode; // 論理削除区分

            //-----------------------------------------------------------------------------
            // テーブル項目
            //-----------------------------------------------------------------------------
            salesDetail.AcceptAnOrderNo = row.AcceptAnOrderNo; // 受注番号
            salesDetail.AcptAnOdrStatus = row.AcptAnOdrStatus; // 受注ステータス
            salesDetail.SalesSlipNum = row.SalesSlipNum; // 売上伝票番号
            salesDetail.SalesRowNo = row.SalesRowNo; // 売上行番号
            salesDetail.SalesRowDerivNo = row.SalesRowDerivNo; // 売上行番号枝番
            salesDetail.SectionCode = row.SectionCode; // 拠点コード
            salesDetail.SubSectionCode = row.SubSectionCode; // 部門コード
            salesDetail.SalesDate = row.SalesDate; // 売上日付
            salesDetail.CommonSeqNo = row.CommonSeqNo; // 共通通番
            salesDetail.SalesSlipDtlNum = row.SalesSlipDtlNum; // 売上明細通番
            salesDetail.AcptAnOdrStatusSrc = row.AcptAnOdrStatusSrc; // 受注ステータス（元）
            salesDetail.SalesSlipDtlNumSrc = row.SalesSlipDtlNumSrc; // 売上明細通番（元）
            salesDetail.SupplierFormalSync = row.SupplierFormalSync; // 仕入形式（同時）
            salesDetail.StockSlipDtlNumSync = row.StockSlipDtlNumSync; // 仕入明細通番（同時）
            salesDetail.SalesSlipCdDtl = row.SalesSlipCdDtl; // 売上伝票区分（明細）
            //>>>2010/02/26
            //salesDetail.DeliGdsCmpltDueDate = row.DeliGdsCmpltDueDate; // 納品完了予定日
            salesDetail.AnswerDelivDate = row.DeliGdsCmpltDueDate; // 納品完了予定日
            //<<<2010/02/26
            salesDetail.GoodsKindCode = row.GoodsKindCode; // 商品属性
            salesDetail.GoodsSearchDivCd = row.GoodsSearchDivCd; // 商品検索区分
            salesDetail.GoodsMakerCd = row.GoodsMakerCd; // 商品メーカーコード
            salesDetail.MakerName = row.MakerName; // メーカー名称
            salesDetail.MakerKanaName = row.MakerKanaName; // メーカーカナ名称
            salesDetail.CmpltMakerKanaName = row.CmpltMakerKanaName; // メーカーカナ名称（一式）
            salesDetail.GoodsNo = row.GoodsNo; // 商品番号
            salesDetail.GoodsName = row.GoodsName; // 商品名称
            salesDetail.GoodsNameKana = row.GoodsNameKana; // 商品名称カナ
            salesDetail.GoodsLGroup = row.GoodsLGroup; // 商品大分類コード
            salesDetail.GoodsLGroupName = row.GoodsLGroupName; // 商品大分類名称
            salesDetail.GoodsMGroup = row.GoodsMGroup; // 商品中分類コード
            salesDetail.GoodsMGroupName = row.GoodsMGroupName; // 商品中分類名称
            salesDetail.BLGroupCode = row.BLGroupCode; // BLグループコード
            salesDetail.BLGroupName = row.BLGroupName; // BLグループコード名称
            salesDetail.BLGoodsCode = row.BLGoodsCode; // BL商品コード
            salesDetail.BLGoodsFullName = row.BLGoodsFullName; // BL商品コード名称（全角）
            salesDetail.EnterpriseGanreCode = row.EnterpriseGanreCode; // 自社分類コード
            salesDetail.EnterpriseGanreName = row.EnterpriseGanreName; // 自社分類名称
            salesDetail.WarehouseCode = row.WarehouseCode; // 倉庫コード
            salesDetail.WarehouseName = row.WarehouseName; // 倉庫名称
            salesDetail.WarehouseShelfNo = row.WarehouseShelfNo; // 倉庫棚番
            salesDetail.SalesOrderDivCd = row.SalesOrderDivCd; // 売上在庫取寄せ区分
            salesDetail.OpenPriceDiv = row.OpenPriceDiv; // オープン価格区分
            salesDetail.GoodsRateRank = row.GoodsRateRank; // 商品掛率ランク
            salesDetail.CustRateGrpCode = row.CustRateGrpCode; // 得意先掛率グループコード
            salesDetail.ListPriceRate = row.ListPriceRate; // 定価率
            salesDetail.RateSectPriceUnPrc = row.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            salesDetail.RateDivLPrice = row.RateDivLPrice; // 掛率設定区分（定価）
            salesDetail.PriceSelectDiv = row.PriceSelectDiv; // 標準価格選択区分（定価）// ADD 2013/01/24 鄧潘ハン REDMINE#34605
            salesDetail.UnPrcCalcCdLPrice = row.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            salesDetail.PriceCdLPrice = row.PriceCdLPrice; // 価格区分（定価）
            salesDetail.StdUnPrcLPrice = row.StdUnPrcLPrice; // 基準単価（定価）
            salesDetail.FracProcUnitLPrice = row.FracProcUnitLPrice; // 端数処理単位（定価）
            salesDetail.FracProcLPrice = row.FracProcLPrice; // 端数処理（定価）
            salesDetail.ListPriceTaxIncFl = row.ListPriceTaxIncFl; // 定価（税込，浮動）
            salesDetail.ListPriceTaxExcFl = row.ListPriceTaxExcFl; // 定価（税抜，浮動）
            salesDetail.ListPriceChngCd = row.ListPriceChngCd; // 定価変更区分
            salesDetail.SalesRate = row.SalesRate; // 売価率
            salesDetail.RateSectSalUnPrc = row.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            salesDetail.RateDivSalUnPrc = row.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            salesDetail.UnPrcCalcCdSalUnPrc = row.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            salesDetail.PriceCdSalUnPrc = row.PriceCdSalUnPrc; // 価格区分（売上単価）
            salesDetail.StdUnPrcSalUnPrc = row.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            salesDetail.FracProcUnitSalUnPrc = row.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            salesDetail.FracProcSalUnPrc = row.FracProcSalUnPrc; // 端数処理（売上単価）
            salesDetail.SalesUnPrcTaxIncFl = row.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            salesDetail.SalesUnPrcTaxExcFl = row.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            salesDetail.SalesUnPrcChngCd = row.SalesUnPrcChngCd; // 売上単価変更区分
            salesDetail.CostRate = row.CostRate; // 原価率
            salesDetail.RateSectCstUnPrc = row.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            salesDetail.RateDivUnCst = row.RateDivUnCst; // 掛率設定区分（原価単価）
            salesDetail.UnPrcCalcCdUnCst = row.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            salesDetail.PriceCdUnCst = row.PriceCdUnCst; // 価格区分（原価単価）
            salesDetail.StdUnPrcUnCst = row.StdUnPrcUnCst; // 基準単価（原価単価）
            salesDetail.FracProcUnitUnCst = row.FracProcUnitUnCst; // 端数処理単位（原価単価）
            salesDetail.FracProcUnCst = row.FracProcUnCst; // 端数処理（原価単価）
            salesDetail.SalesUnitCost = row.SalesUnitCost; // 原価単価
            salesDetail.SalesUnitCostChngDiv = row.SalesUnitCostChngDiv; // 原価単価変更区分
            salesDetail.RateBLGoodsCode = row.RateBLGoodsCode; // BL商品コード（掛率）
            salesDetail.RateBLGoodsName = row.RateBLGoodsName; // BL商品コード名称（掛率）
            salesDetail.RateGoodsRateGrpCd = row.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            salesDetail.RateGoodsRateGrpNm = row.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            salesDetail.RateBLGroupCode = row.RateBLGroupCode; // BLグループコード（掛率）
            salesDetail.RateBLGroupName = row.RateBLGroupName; // BLグループ名称（掛率）
            salesDetail.PrtBLGoodsCode = row.PrtBLGoodsCode; // BL商品コード（印刷）
            salesDetail.PrtBLGoodsName = row.PrtBLGoodsName; // BL商品コード名称（印刷）
            salesDetail.SalesCode = row.SalesCode; // 販売区分コード
            salesDetail.SalesCdNm = row.SalesCdNm; // 販売区分名称
            salesDetail.WorkManHour = row.WorkManHour; // 作業工数
            salesDetail.ShipmentCnt = row.ShipmentCnt; // 出荷数
            salesDetail.AcceptAnOrderCnt = row.AcceptAnOrderCnt; // 受注数量
            salesDetail.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt; // 受注調整数
            salesDetail.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt; // 受注残数
            salesDetail.RemainCntUpdDate = row.RemainCntUpdDate; // 残数更新日
            salesDetail.SalesMoneyTaxInc = row.SalesMoneyTaxInc; // 売上金額（税込み）
            salesDetail.SalesMoneyTaxExc = row.SalesMoneyTaxExc; // 売上金額（税抜き）
            salesDetail.Cost = row.Cost; // 原価
            salesDetail.GrsProfitChkDiv = row.GrsProfitChkDiv; // 粗利チェック区分
            salesDetail.SalesGoodsCd = row.SalesGoodsCd; // 売上商品区分
            salesDetail.SalesPriceConsTax = row.SalesPriceConsTax; // 売上金額消費税額
            salesDetail.TaxationDivCd = row.TaxationDivCd; // 課税区分
            salesDetail.PartySlipNumDtl = row.PartySlipNumDtl; // 相手先伝票番号（明細）
            salesDetail.DtlNote = row.DtlNote; // 明細備考
            salesDetail.SupplierCd = row.SupplierCd; // 仕入先コード
            salesDetail.SupplierSnm = row.SupplierSnm; // 仕入先略称
            salesDetail.OrderNumber = row.OrderNumber; // 発注番号
            salesDetail.WayToOrder = row.WayToOrder; // 注文方法
            salesDetail.SlipMemo1 = row.SlipMemo1; // 伝票メモ１
            salesDetail.SlipMemo2 = row.SlipMemo2; // 伝票メモ２
            salesDetail.SlipMemo3 = row.SlipMemo3; // 伝票メモ３
            salesDetail.InsideMemo1 = row.InsideMemo1; // 社内メモ１
            salesDetail.InsideMemo2 = row.InsideMemo2; // 社内メモ２
            salesDetail.InsideMemo3 = row.InsideMemo3; // 社内メモ３
            salesDetail.BfListPrice = row.BfListPrice; // 変更前定価
            salesDetail.BfSalesUnitPrice = row.BfSalesUnitPrice; // 変更前売価
            salesDetail.BfUnitCost = row.BfUnitCost; // 変更前原価
            if (completeInfoRow != null) // 一式情報
            {
                salesDetail.CmpltSalesRowNo = completeInfoRow.CmpltSalesRowNo; // 一式明細番号
                salesDetail.CmpltGoodsMakerCd = completeInfoRow.CmpltGoodsMakerCd; // メーカーコード（一式）
                salesDetail.CmpltMakerName = completeInfoRow.CmpltGoodsMakerNm; // メーカー名称（一式）
                salesDetail.CmpltGoodsName = completeInfoRow.CmpltGoodsName; // 商品名称（一式）
                salesDetail.CmpltShipmentCnt = completeInfoRow.CmpltShipmentCnt; // 数量（一式）
                salesDetail.CmpltSalesUnPrcFl = completeInfoRow.CmpltSalesUnPrcFl; // 売上単価（一式）
                salesDetail.CmpltSalesMoney = completeInfoRow.CmpltSalesMoney; // 売上金額（一式）
                salesDetail.CmpltSalesUnitCost = completeInfoRow.CmpltSalesUnitCost; // 原価単価（一式）
                salesDetail.CmpltCost = completeInfoRow.CmpltCost; // 原価金額（一式）
                salesDetail.CmpltPartySalSlNum = completeInfoRow.CmpltPartySalSlNum; // 相手先伝票番号（一式）
                salesDetail.CmpltNote = completeInfoRow.CmpltNote; // 一式備考
            }
            // --- ADD 2014/01/15 T.Miyamoto ------------------------------<<<<<
            salesDetail.CmpltSalesRowNo = row.CmpltSalesRowNo;    // 一式明細番号⇒純正-BL商品コード
            salesDetail.CmpltGoodsMakerCd = row.CmpltGoodsMakerCd; // メーカーコード（一式）⇒純正-メーカー
            salesDetail.CmpltGoodsName = row.CmpltGoodsName;         // 商品名称（一式）⇒純正-商品番号
            salesDetail.CmpltSalesUnPrcFl = row.CmpltSalesUnPrcFl;  // 売上単価（一式）⇒純正-定価
            // --- ADD 2014/01/15 T.Miyamoto ------------------------------<<<<<

            // --- ADD 2009/10/19 ---------->>>>>
            salesDetail.SelectedGoodsNoDiv = row.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            salesDetail.PrtGoodsNo = row.PrtGoodsNo; // 印刷用品番
            salesDetail.PrtMakerCode = row.PrtMakerCode; // 印刷用メーカーコード
            salesDetail.PrtMakerName = row.PrtMakerName; // 印刷用メーカー名称
            // 2012/01/16 Add >>>
            salesDetail.GoodsSpecialNote = row.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<
            // 2012/06/15 ADD T.Yoshioka 90 ---------------->>>>>>>>>>>>>>>>>>>>>>>>> 
            salesDetail.AnsPureGoodsNo = row.AnsPureGoodsNo;        // 回答純正商品番号
            salesDetail.PureGoodsMakerCd = row.PureGoodsMakerCd;    // 純正商品メーカーコード
            // 2012/06/15 ADD T.Yoshioka 90 ----------------<<<<<<<<<<<<<<<<<<<<<<<<<

            //-----------------------------------------------------------------------------
            // ＰＧ間使用項目
            //-----------------------------------------------------------------------------
            salesDetail.DtlRelationGuid = row.DtlRelationGuid; // 共通キー
            salesDetail.CarRelationGuid = row.CarRelationGuid; // 車両情報共通キー
            //salesDetail.SalesRowNoDisplay = row.SalesRowNoDisplay; // 行番号（表示用）
            //salesDetail.SupplierStock = row.SupplierStock; // 現在庫数
            //salesDetail.SupplierStockDisplay = row.SupplierStockDisplay; // 現在庫数（表示用）
            //salesDetail.OpenPriceDivDisplay = row.OpenPriceDivDisplay; // オープン価格区分（表示用）
            //salesDetail.ListPriceDisplay = row.ListPriceDisplay; // 定価（表示用）
            //salesDetail.SalesUnPrcDisplay = row.SalesUnPrcDisplay; // 売上単価（表示用）
            //salesDetail.SalesUnitCostTaxExc = row.SalesUnitCostTaxExc; // 原価単価（税抜）
            //salesDetail.SalesUnitCostTaxInc = row.SalesUnitCostTaxInc; // 原価単価（税込）
            //salesDetail.ShipmentCntDisplay = row.ShipmentCntDisplay; // 出荷数（表示用）
            //salesDetail.AddUpEnableCnt = row.AddUpEnableCnt; // 計上可能数
            //salesDetail.AlreadyAddUpCnt = row.AlreadyAddUpCnt; // 計上済数
            //salesDetail.ShipmentCntDefault = row.ShipmentCntDefault; // 出荷数（初期値）
            //salesDetail.SalesMoneyDisplay = row.SalesMoneyDisplay; // 売上金額（表示用）
            //salesDetail.CostTaxInc = row.CostTaxInc; // 原価金額（税込）
            //salesDetail.CostTaxExc = row.CostTaxExc; // 原価金額（税抜）
            //salesDetail.AcceptAnOrderCntDisplay = row.AcceptAnOrderCntDisplay; // 受注数（表示用）
            //salesDetail.AcceptAnOrderCntDefault = row.AcceptAnOrderCntDefault; // 受注数（初期値）
            //salesDetail.TaxDiv = row.TaxDiv; // 課税区分（UI用）
            //salesDetail.CanTaxDivChange = row.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            //salesDetail.RowStatus = row.RowStatus; // 行ステータス
            //salesDetail.EditStatus = row.EditStatus; // エディットステータス
            //salesDetail.SlipMemoExist = row.SlipMemoExist; // メモ存在フラグ
            //salesDetail.SupplierSlipExist = row.SupplierSlipExist; // 仕入情報存在フラグ
            //salesDetail.DetailGrossProfitRate = row.DetailGrossProfitRate; // 明細粗利率
            //salesDetail.CostUpRate = row.CostUpRate; // 原価アップ率
            //salesDetail.GrossProfitSecureRate = row.GrossProfitSecureRate; // 粗利確保率
            //salesDetail.SupplierCdForStock = row.SupplierCdForStock; // 仕入先コード
            //salesDetail.StockDate = row.StockDate; // 仕入日
            //salesDetail.PartySalesSlipNum = row.PartySalesSlipNum; // 仕入伝票番号
            //salesDetail.BoCode = row.BoCode; // BO区分
            //salesDetail.SupplierCdForOrder = row.SupplierCdForOrder; // 発注先
            //salesDetail.AcceptAnOrderCntForOrder = row.AcceptAnOrderCntForOrder; // 発注数
            //salesDetail.SupplierSnmForOrder = row.SupplierSnmForOrder; // 発注先名称
            //salesDetail.DeliveredGoodsDiv = row.DeliveredGoodsDiv; // 納品区分
            //salesDetail.DeliveredGoodsDivNm = row.DeliveredGoodsDivNm; // 納品区分名称
            //salesDetail.DeliveredGoodsDivNmSave = row.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            //salesDetail.FollowDeliGoodsDiv = row.FollowDeliGoodsDiv; // H納品区分
            //salesDetail.FollowDeliGoodsDivNm = row.FollowDeliGoodsDivNm; // H納品区分名称
            //salesDetail.FollowDeliGoodsDivNmSave = row.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            //salesDetail.UOEResvdSection = row.UOEResvdSection; // 指定拠点
            //salesDetail.UOEResvdSectionNm = row.UOEResvdSectionNm; // 指定拠点名称
            //salesDetail.UOEResvdSectionNmSave = row.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            //salesDetail.PriceStartDate = row.PriceStartDate; // 新定価適用日
            //salesDetail.Dummy = row.Dummy; // ダミー（空欄表示用）
            //salesDetail.SearchPartsModeState = row.SearchPartsModeState; // 部品検索状態
            salesDetail.ShipmentCntDefault = row.ShipmentCntDefault; // 出荷数初期値
            salesDetail.ShipmentCntDefForChk = row.ShipmentCntDefForChk; // 出荷数初期値（変更チェック用）
            salesDetail.AcceptAnOrderCntDefault = row.AcceptAnOrderCntDefault; // 受注数量初期値
            salesDetail.AcceptAnOrderCntDefForChk = row.AcceptAnOrderCntDefForChk; // 受注数初期値（変更チェック用）
            salesDetail.SalesUnPrcTaxExcFlDefault = row.SalesUnPrcTaxExcFlDefault; // 売上単価（税抜，浮動）初期値
            salesDetail.SalesUnPrcTaxIncFlDefault = row.SalesUnPrcTaxIncFlDefault; // 売上単価（税込，浮動）初期値
            salesDetail.SalesUnitCostTacExcDefault = row.SalesUnitCostTaxExcDefault; // 原価単価（税抜）初期値
            salesDetail.SalesUnitCostTaxIncDefault = row.SalesUnitCostTaxIncDefault; // 原価単価（税込）初期値
            //>>>2010/02/26
            salesDetail.CampaignCode = row.CampaignCode; // キャンペーンコード
            salesDetail.CampaignName = row.CampaignName; // キャンペーン名称
            salesDetail.GoodsDivCd = row.GoodsDivCd; // 商品種別
            //salesDetail.AnswerDelivDate; // 回答納期
            salesDetail.RecycleDiv = row.RecycleDiv; // リサイクル区分
            salesDetail.RecycleDivNm = row.RecycleDivNm; // リサイクル区分名称
            salesDetail.WayToAcptOdr = row.WayToAcptOdr; // 受注方法
            salesDetail.GoodsMngNo = row.GoodsMngNo; // 商品管理番号
            salesDetail.InqRowNumber = row.InqRowNumber; // 問合せ行番号
            salesDetail.InqRowNumDerivedNo = row.InqRowNumDerivedNo; // 問合せ行番号枝番
            //<<<2010/02/26
            //>>>2012/05/02
            if (salesSlip.AcptAnOdrStatus == (int)AcptAnOdrStatusState.Shipment)
            {
                salesDetail.RentSyncSupplier = row.SupplierCdForStock; // 仕入先コード
                salesDetail.RentSyncStockDate = row.StockDate; // 仕入日
                salesDetail.RentSyncSupSlipNo = row.PartySalesSlipNum; // 仕入伝票番号
            }
            //<<<2012/05/02

            //-----------------------------------------------------------------------------
            // 補正
            //-----------------------------------------------------------------------------
            salesDetail.AcptAnOdrStatus = salesSlip.AcptAnOdrStatus;  // 受注ステータス
            salesDetail.SalesSlipNum = salesSlip.SalesSlipNum;        // 売上伝票番号
            salesDetail.SectionCode = salesSlip.SectionCode;          // 拠点コード
            salesDetail.SubSectionCode = salesSlip.SubSectionCode;    // 部門コード
            salesDetail.SalesDate = salesSlip.SalesDate;              // 売上日付

            // 受注ステータス（元）
            if (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_AddUpNew) // 計上新規
            {
                // --- DEL 2014/11/25 T.Miyamoto 仕掛一覧№2521 ------------------------------>>>>>
                #region ●旧ソース
                // 計上時は計上元から売上明細データを作成
                //if (this._salesDetailAcceptAnOrderDataTable.Count != 0)
                //{
                //    SalesInputDataSet.SalesDetailAcceptAnOrderRow acptRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);
                //    if (acptRow != null)
                //    {
                //        salesDetail.AcptAnOdrStatusSrc = (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder; // 受注同時入力
                //        //salesDetail.SalesSlipDtlNumSrc = row.SalesSlipDtlNumSrc;
                //        if (acptRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate)
                //        {
                //            salesDetail.SalesSlipDtlNumSrc = row.SalesSlipDtlNum; // 明細通番(元)←元伝票明細通番
                //            salesDetail.SalesSlipNum = ctDefaultSalesSlipNum;
                //            salesDetail.SalesSlipDtlNum = 0; // 売上明細通番
                //        }
                //    }
                //    else
                //    {
                //        salesDetail.AcptAnOdrStatusSrc = row.AcptAnOdrStatusSrc;
                //    }
                //}
                //else
                //{
                //    salesDetail.AcptAnOdrStatusSrc = row.AcptAnOdrStatusSrc;
                //}
                #endregion
                // --- DEL 2014/11/25 T.Miyamoto 仕掛一覧№2521 ------------------------------<<<<<
                // --- ADD 2014/12/24 Y.Wakita ---------->>>>>
                // 計上時は計上元から売上明細データを作成
                if (this._salesDetailAcceptAnOrderDataTable.Count != 0)
                {
                    // 明細部計上の場合
                    SalesInputDataSet.SalesDetailAcceptAnOrderRow acptRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);
                    if (acptRow != null)
                    {
                        // --- UPD 2015/08/28 T.Miyamoto システムテスト障害№6 ------------------------------>>>>>
                        //// SCM連携の場合、受注ステータス(元)に「受注」を設定
                        //if (SalesSlip.InquiryNumber != 0)
                        //salesDetail.AcptAnOdrStatusSrc = (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder; // 受注同時入力

                        //if (acptRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate)
                        //{
                        //    salesDetail.SalesSlipDtlNumSrc = row.SalesSlipDtlNum; // 明細通番(元)←元伝票明細通番
                        //    salesDetail.SalesSlipNum = ctDefaultSalesSlipNum;
                        //    salesDetail.SalesSlipDtlNum = 0; // 売上明細通番
                        //}

                        // 見積計上で受注数が入力されている場合（受発注同時入力）に受注ステータス(元)と売上明細通番(元)の補正を行う
                        // ※売上明細の計上元が見積ではなく受注になるように補正する
                        // ※通常の見積計上の場合は不要（仕掛一覧№2521の対応で削除したが受発注同時入力の場合に必要）
                        if ((acptRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) &&
                            (row.AcceptAnOrderCntDisplay != 0))
                        {
                            // 受注ステータス(元)に「受注」を設定
                            salesDetail.AcptAnOdrStatusSrc = (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder;
                            // 売上明細通番(元)をクリア･･･※受注明細の通番は未確定の為⇒IOWriterで同じ通番がセットされる
                            salesDetail.SalesSlipDtlNumSrc = row.SalesSlipDtlNum; // 明細通番(元)←元伝票明細通番
                            salesDetail.SalesSlipNum = ctDefaultSalesSlipNum;
                            salesDetail.SalesSlipDtlNum = 0; // 売上明細通番
                        }
                        // --- UPD 2015/08/28 T.Miyamoto システムテスト障害№6 ------------------------------<<<<<
                    }
                    else
                    {
                        salesDetail.AcptAnOdrStatusSrc = row.AcptAnOdrStatusSrc;
                    }
                }
                else
                {
                    // ヘッダー部計上の場合
                    salesDetail.AcptAnOdrStatusSrc = row.AcptAnOdrStatusSrc;
                }
                // --- ADD 2014/12/24 Y.Wakita ----------<<<<<
            }
            else if ((row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount) || // 行値引き
                     (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_Annotation))    // 注釈
            {
                salesDetail.AcptAnOdrStatusSrc = 0;
            }
            else
            {
                if (this._salesDetailAcceptAnOrderDataTable.Count != 0)
                {
                    SalesInputDataSet.SalesDetailAcceptAnOrderRow acptRow = this._salesDetailAcceptAnOrderDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);
                    if ((acptRow != null) && (acptRow.AcceptAnOrderCntDefault != 0))
                    {
                        salesDetail.AcptAnOdrStatusSrc = (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder; // 受注同時入力
                        if (acptRow.AcptAnOdrStatusSrc == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate)
                        {
                            salesDetail.SalesSlipDtlNumSrc = row.SalesSlipDtlNum; // 明細通番(元)←元伝票明細通番
                            salesDetail.SalesSlipNum = ctDefaultSalesSlipNum;
                            salesDetail.SalesSlipDtlNum = 0; // 売上明細通番
                        }
                    }
                    else
                    {
                        salesDetail.AcptAnOdrStatusSrc = row.AcptAnOdrStatusSrc;
                    }
                }
                else if ((SalesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Return) || // 返品
                         (SalesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Red))      // 赤伝
                {
                    salesDetail.AcptAnOdrStatusSrc = salesDetail.AcptAnOdrStatus;
                }
            }

            // 仕入形式(同時)、仕入明細通番(同時)
            salesDetail.SupplierFormalSync = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Non; // 初期値-1
            salesDetail.StockSlipDtlNumSync = 0;

            // --- UPD 2012/10/23 Y.Wakita ---------->>>>>
            ////>>>2010/09/24
            ////if ((this.ExistStockTemp(row.SalesRowNo) == true) &&
            ////    (stockTempRow.SupplierFormal != (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order))
            //if ((stockTempRow != null) &&
            //    (this.ExistStockTemp(row.SalesRowNo) == true) &&
            //    (stockTempRow.SupplierFormal != (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order))
            ////<<<2010/09/24
            if ((stockTempRow != null) &&
                (this.ExistStockTemp(row) == true) &&
                (stockTempRow.SupplierFormal != (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order))
            // --- UPD 2012/10/23 Y.Wakita ----------<<<<<
            {
                salesDetail.SupplierFormalSync = stockTempRow.SupplierFormal;
                salesDetail.StockSlipDtlNumSync = stockTempRow.StockSlipDtlNum;
            }

            // 売上伝票区分(明細)
            if ((salesDetail.SalesSlipCdDtl == 0) && (salesSlip.SalesSlipCd == 1)) salesDetail.SalesSlipCdDtl = (int)SalesSlipInputAcs.SalesSlipCdDtl.RetGoods; // ヘッダが返品の場合、明細は常に返品

            // ADD 2011/09/21 --- >>>>>
            if (salesDetail.SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.RetGoods)
            {
                salesDetail.AnswerDelivDate = string.Empty;
            }
            // ADD 2011/09/21 --- <<<<<

            // 商品検索区分
            switch ((SearchPartsModeState)row.SearchPartsModeState)
            {
                case SearchPartsModeState.NonSearch:
                    salesDetail.GoodsSearchDivCd = 2; // 手入力
                    break;
                case SearchPartsModeState.BLCodeSearch:
                    salesDetail.GoodsSearchDivCd = 0; // BLコード検索
                    break;
                case SearchPartsModeState.GoodsNoSearch:
                    salesDetail.GoodsSearchDivCd = 1; // 品番検索
                    break;
            }

            // 受注数量
            salesDetail.AcceptAnOrderCnt = (salesDetail.SalesSlipDtlNum == 0) ? row.ShipmentCnt : row.AcceptAnOrderCntDefault; // 新規作成or既存修正

            // 売上金額消費税額
            switch ((SalesGoodsCd)salesSlip.SalesGoodsCd)
            {
                case SalesGoodsCd.Goods:
                    salesDetail.SalesPriceConsTax = row.SalesMoneyTaxInc - row.SalesMoneyTaxExc;
                    break;
                case SalesGoodsCd.ConsTaxAdjust:
                case SalesGoodsCd.AccRecConsTaxAdjust:
                    salesDetail.SalesPriceConsTax = row.SalesMoneyDisplay;
                    break;
                case SalesGoodsCd.BalanceAdjust:
                case SalesGoodsCd.AccRecBalanceAdjust:
                    salesDetail.SalesPriceConsTax = 0;
                    break;
                default:
                    break;
            }
            // --- ADD 2013/12/10 Y.Wakita ---------->>>>>
            if (row.CmpltGoodsMakerCd != 0)
            {
                salesDetail.CmpltSalesRowNo = row.CmpltSalesRowNo;      // 純正-BL商品コード
                salesDetail.CmpltGoodsMakerCd = row.CmpltGoodsMakerCd;  // 純正-メーカー
                salesDetail.CmpltGoodsName = row.CmpltGoodsName;        // 純正-商品番号
                salesDetail.CmpltSalesUnPrcFl = row.CmpltSalesUnPrcFl;  // 純正-定価
            }
            // --- ADD 2013/12/10 Y.Wakita ----------<<<<<

            return salesDetail;

        }

        /// <summary>
        /// 受注明細データ行オブジェクトより受注明細データオブジェクトを取得します。
        /// </summary>
        /// <param name="acptSlip">受注データオブジェクト</param>
        /// <param name="row">受注明細データ行オブジェクト</param>
        /// <returns>受注明細データオブジェクト</returns>
        private SalesDetail GetUIDataFromAcptAnOdrRow(SalesSlip acptSlip, SalesInputDataSet.SalesDetailAcceptAnOrderRow row)
        {
            //-----------------------------------------------------------------------------
            // 売上明細データを取得
            //-----------------------------------------------------------------------------
            SalesDetail salesDetail = new SalesDetail();

            //-----------------------------------------------------------------------------
            // 各種テーブル情報取得
            //-----------------------------------------------------------------------------
            SalesInputDataSet.CompleteInfoRow completeInfoRow = this._completeInfoDataTable.FindByCmpltSalesRowNo(row.CmpltSalesRowNo);
            SalesInputDataSet.StockTempRow stockTempRow = this._stockTempDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);

            //-----------------------------------------------------------------------------
            // 共通ファイルヘッダ情報
            //-----------------------------------------------------------------------------
            //salesDetail.CreateDateTime = row.CreateDateTime; // 作成日時
            //salesDetail.UpdateDateTime = row.UpdateDateTime; // 更新日時
            //salesDetail.EnterpriseCode = row.EnterpriseCode; // 企業コード
            //salesDetail.FileHeaderGuid = row.FileHeaderGuid; // GUID
            //salesDetail.UpdEmployeeCode = row.UpdEmployeeCode; // 更新従業員コード
            //salesDetail.UpdAssemblyId1 = row.UpdAssemblyId1; // 更新アセンブリID1
            //salesDetail.UpdAssemblyId2 = row.UpdAssemblyId2; // 更新アセンブリID2
            //salesDetail.LogicalDeleteCode = row.LogicalDeleteCode; // 論理削除区分

            //-----------------------------------------------------------------------------
            // テーブル項目
            //-----------------------------------------------------------------------------
            salesDetail.AcceptAnOrderNo = row.AcceptAnOrderNo; // 受注番号
            salesDetail.AcptAnOdrStatus = row.AcptAnOdrStatus; // 受注ステータス
            salesDetail.SalesSlipNum = row.SalesSlipNum; // 売上伝票番号
            salesDetail.SalesRowNo = row.SalesRowNo; // 売上行番号
            salesDetail.SalesRowDerivNo = row.SalesRowDerivNo; // 売上行番号枝番
            salesDetail.SectionCode = row.SectionCode; // 拠点コード
            salesDetail.SubSectionCode = row.SubSectionCode; // 部門コード
            salesDetail.SalesDate = row.SalesDate; // 売上日付
            salesDetail.CommonSeqNo = row.CommonSeqNo; // 共通通番
            salesDetail.SalesSlipDtlNum = row.SalesSlipDtlNum; // 売上明細通番
            salesDetail.AcptAnOdrStatusSrc = row.AcptAnOdrStatusSrc; // 受注ステータス（元）
            salesDetail.SalesSlipDtlNumSrc = row.SalesSlipDtlNumSrc; // 売上明細通番（元）
            salesDetail.SupplierFormalSync = row.SupplierFormalSync; // 仕入形式（同時）
            salesDetail.StockSlipDtlNumSync = row.StockSlipDtlNumSync; // 仕入明細通番（同時）
            salesDetail.SalesSlipCdDtl = row.SalesSlipCdDtl; // 売上伝票区分（明細）
            //salesDetail.DeliGdsCmpltDueDate = row.DeliGdsCmpltDueDate; // 納品完了予定日 // 2010/02/26
            salesDetail.GoodsKindCode = row.GoodsKindCode; // 商品属性
            salesDetail.GoodsSearchDivCd = row.GoodsSearchDivCd; // 商品検索区分
            salesDetail.GoodsMakerCd = row.GoodsMakerCd; // 商品メーカーコード
            salesDetail.MakerName = row.MakerName; // メーカー名称
            salesDetail.MakerKanaName = row.MakerKanaName; // メーカーカナ名称
            salesDetail.CmpltMakerKanaName = row.CmpltMakerKanaName; // メーカーカナ名称（一式）
            salesDetail.GoodsNo = row.GoodsNo; // 商品番号
            salesDetail.GoodsName = row.GoodsName; // 商品名称
            salesDetail.GoodsNameKana = row.GoodsNameKana; // 商品名称カナ
            salesDetail.GoodsLGroup = row.GoodsLGroup; // 商品大分類コード
            salesDetail.GoodsLGroupName = row.GoodsLGroupName; // 商品大分類名称
            salesDetail.GoodsMGroup = row.GoodsMGroup; // 商品中分類コード
            salesDetail.GoodsMGroupName = row.GoodsMGroupName; // 商品中分類名称
            salesDetail.BLGroupCode = row.BLGroupCode; // BLグループコード
            salesDetail.BLGroupName = row.BLGroupName; // BLグループコード名称
            salesDetail.BLGoodsCode = row.BLGoodsCode; // BL商品コード
            salesDetail.BLGoodsFullName = row.BLGoodsFullName; // BL商品コード名称（全角）
            salesDetail.EnterpriseGanreCode = row.EnterpriseGanreCode; // 自社分類コード
            salesDetail.EnterpriseGanreName = row.EnterpriseGanreName; // 自社分類名称
            salesDetail.WarehouseCode = row.WarehouseCode; // 倉庫コード
            salesDetail.WarehouseName = row.WarehouseName; // 倉庫名称
            salesDetail.WarehouseShelfNo = row.WarehouseShelfNo; // 倉庫棚番
            salesDetail.SalesOrderDivCd = row.SalesOrderDivCd; // 売上在庫取寄せ区分
            salesDetail.OpenPriceDiv = row.OpenPriceDiv; // オープン価格区分
            salesDetail.GoodsRateRank = row.GoodsRateRank; // 商品掛率ランク
            salesDetail.CustRateGrpCode = row.CustRateGrpCode; // 得意先掛率グループコード
            salesDetail.ListPriceRate = row.ListPriceRate; // 定価率
            salesDetail.RateSectPriceUnPrc = row.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            salesDetail.RateDivLPrice = row.RateDivLPrice; // 掛率設定区分（定価）
            salesDetail.UnPrcCalcCdLPrice = row.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            salesDetail.PriceCdLPrice = row.PriceCdLPrice; // 価格区分（定価）
            salesDetail.StdUnPrcLPrice = row.StdUnPrcLPrice; // 基準単価（定価）
            salesDetail.FracProcUnitLPrice = row.FracProcUnitLPrice; // 端数処理単位（定価）
            salesDetail.FracProcLPrice = row.FracProcLPrice; // 端数処理（定価）
            salesDetail.ListPriceTaxIncFl = row.ListPriceTaxIncFl; // 定価（税込，浮動）
            salesDetail.ListPriceTaxExcFl = row.ListPriceTaxExcFl; // 定価（税抜，浮動）
            salesDetail.ListPriceChngCd = row.ListPriceChngCd; // 定価変更区分
            salesDetail.SalesRate = row.SalesRate; // 売価率
            salesDetail.RateSectSalUnPrc = row.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            salesDetail.RateDivSalUnPrc = row.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            salesDetail.UnPrcCalcCdSalUnPrc = row.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            salesDetail.PriceCdSalUnPrc = row.PriceCdSalUnPrc; // 価格区分（売上単価）
            salesDetail.StdUnPrcSalUnPrc = row.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            salesDetail.FracProcUnitSalUnPrc = row.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            salesDetail.FracProcSalUnPrc = row.FracProcSalUnPrc; // 端数処理（売上単価）
            salesDetail.SalesUnPrcTaxIncFl = row.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            salesDetail.SalesUnPrcTaxExcFl = row.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            salesDetail.SalesUnPrcChngCd = row.SalesUnPrcChngCd; // 売上単価変更区分
            salesDetail.CostRate = row.CostRate; // 原価率
            salesDetail.RateSectCstUnPrc = row.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            salesDetail.RateDivUnCst = row.RateDivUnCst; // 掛率設定区分（原価単価）
            salesDetail.UnPrcCalcCdUnCst = row.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            salesDetail.PriceCdUnCst = row.PriceCdUnCst; // 価格区分（原価単価）
            salesDetail.StdUnPrcUnCst = row.StdUnPrcUnCst; // 基準単価（原価単価）
            salesDetail.FracProcUnitUnCst = row.FracProcUnitUnCst; // 端数処理単位（原価単価）
            salesDetail.FracProcUnCst = row.FracProcUnCst; // 端数処理（原価単価）
            salesDetail.SalesUnitCost = row.SalesUnitCost; // 原価単価
            salesDetail.SalesUnitCostChngDiv = row.SalesUnitCostChngDiv; // 原価単価変更区分
            salesDetail.RateBLGoodsCode = row.RateBLGoodsCode; // BL商品コード（掛率）
            salesDetail.RateBLGoodsName = row.RateBLGoodsName; // BL商品コード名称（掛率）
            salesDetail.RateGoodsRateGrpCd = row.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            salesDetail.RateGoodsRateGrpNm = row.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            salesDetail.RateBLGroupCode = row.RateBLGroupCode; // BLグループコード（掛率）
            salesDetail.RateBLGroupName = row.RateBLGroupName; // BLグループ名称（掛率）
            salesDetail.PrtBLGoodsCode = row.PrtBLGoodsCode; // BL商品コード（印刷）
            salesDetail.PrtBLGoodsName = row.PrtBLGoodsName; // BL商品コード名称（印刷）
            salesDetail.SalesCode = row.SalesCode; // 販売区分コード
            salesDetail.SalesCdNm = row.SalesCdNm; // 販売区分名称
            salesDetail.WorkManHour = row.WorkManHour; // 作業工数
            salesDetail.ShipmentCnt = row.ShipmentCnt; // 出荷数
            salesDetail.AcceptAnOrderCnt = row.AcceptAnOrderCnt; // 受注数量
            salesDetail.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt; // 受注調整数
            salesDetail.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt; // 受注残数
            salesDetail.RemainCntUpdDate = row.RemainCntUpdDate; // 残数更新日
            salesDetail.SalesMoneyTaxInc = row.SalesMoneyTaxInc; // 売上金額（税込み）
            salesDetail.SalesMoneyTaxExc = row.SalesMoneyTaxExc; // 売上金額（税抜き）
            salesDetail.Cost = row.Cost; // 原価
            salesDetail.GrsProfitChkDiv = row.GrsProfitChkDiv; // 粗利チェック区分
            salesDetail.SalesGoodsCd = row.SalesGoodsCd; // 売上商品区分
            salesDetail.SalesPriceConsTax = row.SalesPriceConsTax; // 売上金額消費税額
            salesDetail.TaxationDivCd = row.TaxationDivCd; // 課税区分
            salesDetail.PartySlipNumDtl = row.PartySlipNumDtl; // 相手先伝票番号（明細）
            salesDetail.DtlNote = row.DtlNote; // 明細備考
            salesDetail.SupplierCd = row.SupplierCd; // 仕入先コード
            salesDetail.SupplierSnm = row.SupplierSnm; // 仕入先略称
            salesDetail.OrderNumber = row.OrderNumber; // 発注番号
            salesDetail.WayToOrder = row.WayToOrder; // 注文方法
            salesDetail.SlipMemo1 = row.SlipMemo1; // 伝票メモ１
            salesDetail.SlipMemo2 = row.SlipMemo2; // 伝票メモ２
            salesDetail.SlipMemo3 = row.SlipMemo3; // 伝票メモ３
            salesDetail.InsideMemo1 = row.InsideMemo1; // 社内メモ１
            salesDetail.InsideMemo2 = row.InsideMemo2; // 社内メモ２
            salesDetail.InsideMemo3 = row.InsideMemo3; // 社内メモ３
            salesDetail.BfListPrice = row.BfListPrice; // 変更前定価
            salesDetail.BfSalesUnitPrice = row.BfSalesUnitPrice; // 変更前売価
            salesDetail.BfUnitCost = row.BfUnitCost; // 変更前原価
            if (completeInfoRow != null) // 一式情報
            {
                salesDetail.CmpltSalesRowNo = completeInfoRow.CmpltSalesRowNo; // 一式明細番号
                salesDetail.CmpltGoodsMakerCd = completeInfoRow.CmpltGoodsMakerCd; // メーカーコード（一式）
                salesDetail.CmpltMakerName = completeInfoRow.CmpltGoodsMakerNm; // メーカー名称（一式）
                salesDetail.CmpltGoodsName = completeInfoRow.CmpltGoodsName; // 商品名称（一式）
                salesDetail.CmpltShipmentCnt = completeInfoRow.CmpltShipmentCnt; // 数量（一式）
                salesDetail.CmpltSalesUnPrcFl = completeInfoRow.CmpltSalesUnPrcFl; // 売上単価（一式）
                salesDetail.CmpltSalesMoney = completeInfoRow.CmpltSalesMoney; // 売上金額（一式）
                salesDetail.CmpltSalesUnitCost = completeInfoRow.CmpltSalesUnitCost; // 原価単価（一式）
                salesDetail.CmpltCost = completeInfoRow.CmpltCost; // 原価金額（一式）
                salesDetail.CmpltPartySalSlNum = completeInfoRow.CmpltPartySalSlNum; // 相手先伝票番号（一式）
                salesDetail.CmpltNote = completeInfoRow.CmpltNote; // 一式備考
            }
            // --- ADD 2014/01/15 T.Miyamoto ------------------------------<<<<<
            salesDetail.CmpltSalesRowNo = row.CmpltSalesRowNo;    // 一式明細番号⇒純正-BL商品コード
            salesDetail.CmpltGoodsMakerCd = row.CmpltGoodsMakerCd; // メーカーコード（一式）⇒純正-メーカー
            salesDetail.CmpltGoodsName = row.CmpltGoodsName;         // 商品名称（一式）⇒純正-商品番号
            salesDetail.CmpltSalesUnPrcFl = row.CmpltSalesUnPrcFl;  // 売上単価（一式）⇒純正-定価
            // --- ADD 2014/01/15 T.Miyamoto ------------------------------<<<<<

            // --- ADD 2009/10/19 ---------->>>>>
            salesDetail.SelectedGoodsNoDiv = row.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            salesDetail.PrtGoodsNo = row.PrtGoodsNo; // 印刷用品番
            salesDetail.PrtMakerCode = row.PrtMakerCode; // 印刷用メーカーコード
            salesDetail.PrtMakerName = row.PrtMakerName; // 印刷用メーカー名称

            //>>>2010/02/26
            salesDetail.CampaignCode = row.CampaignCode;
            salesDetail.CampaignName = row.CampaignName;
            salesDetail.GoodsDivCd = row.GoodsDivCd;
            salesDetail.AnswerDelivDate = row.DeliGdsCmpltDueDate; // 納品完了予定日
            salesDetail.RecycleDiv = row.RecycleDiv;
            salesDetail.RecycleDivNm = row.RecycleDivNm;
            salesDetail.WayToAcptOdr = row.WayToAcptOdr;
            salesDetail.GoodsMngNo = row.GoodsMngNo;
            salesDetail.InqRowNumber = row.InqRowNumber;
            salesDetail.InqRowNumDerivedNo = row.InqRowNumDerivedNo;
            //<<<2010/02/26
            // 2012/01/16 Add >>>
            salesDetail.GoodsSpecialNote = row.GoodsSpecialNote; // 特記事項
            // 2012/01/16 Add <<<

            //-----------------------------------------------------------------------------
            // ＰＧ間使用項目
            //-----------------------------------------------------------------------------
            salesDetail.DtlRelationGuid = row.DtlRelationGuid; // 共通キー
            salesDetail.CarRelationGuid = row.CarRelationGuid; // 車両情報共通キー
            //salesDetail.SalesRowNoDisplay = row.SalesRowNoDisplay; // 行番号（表示用）
            //salesDetail.SupplierStock = row.SupplierStock; // 現在庫数
            //salesDetail.SupplierStockDisplay = row.SupplierStockDisplay; // 現在庫数（表示用）
            //salesDetail.OpenPriceDivDisplay = row.OpenPriceDivDisplay; // オープン価格区分（表示用）
            //salesDetail.ListPriceDisplay = row.ListPriceDisplay; // 定価（表示用）
            //salesDetail.SalesUnPrcDisplay = row.SalesUnPrcDisplay; // 売上単価（表示用）
            //salesDetail.SalesUnitCostTaxExc = row.SalesUnitCostTaxExc; // 原価単価（税抜）
            //salesDetail.SalesUnitCostTaxInc = row.SalesUnitCostTaxInc; // 原価単価（税込）
            //salesDetail.ShipmentCntDisplay = row.ShipmentCntDisplay; // 出荷数（表示用）
            //salesDetail.AddUpEnableCnt = row.AddUpEnableCnt; // 計上可能数
            //salesDetail.AlreadyAddUpCnt = row.AlreadyAddUpCnt; // 計上済数
            //salesDetail.ShipmentCntDefault = row.ShipmentCntDefault; // 出荷数（初期値）
            //salesDetail.SalesMoneyDisplay = row.SalesMoneyDisplay; // 売上金額（表示用）
            //salesDetail.CostTaxInc = row.CostTaxInc; // 原価金額（税込）
            //salesDetail.CostTaxExc = row.CostTaxExc; // 原価金額（税抜）
            //salesDetail.AcceptAnOrderCntDisplay = row.AcceptAnOrderCntDisplay; // 受注数（表示用）
            //salesDetail.AcceptAnOrderCntDefault = row.AcceptAnOrderCntDefault; // 受注数（初期値）
            //salesDetail.TaxDiv = row.TaxDiv; // 課税区分（UI用）
            //salesDetail.CanTaxDivChange = row.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            //salesDetail.RowStatus = row.RowStatus; // 行ステータス
            //salesDetail.EditStatus = row.EditStatus; // エディットステータス
            //salesDetail.SlipMemoExist = row.SlipMemoExist; // メモ存在フラグ
            //salesDetail.SupplierSlipExist = row.SupplierSlipExist; // 仕入情報存在フラグ
            //salesDetail.DetailGrossProfitRate = row.DetailGrossProfitRate; // 明細粗利率
            //salesDetail.CostUpRate = row.CostUpRate; // 原価アップ率
            //salesDetail.GrossProfitSecureRate = row.GrossProfitSecureRate; // 粗利確保率
            //salesDetail.SupplierCdForStock = row.SupplierCdForStock; // 仕入先コード
            //salesDetail.StockDate = row.StockDate; // 仕入日
            //salesDetail.PartySalesSlipNum = row.PartySalesSlipNum; // 仕入伝票番号
            //salesDetail.BoCode = row.BoCode; // BO区分
            //salesDetail.SupplierCdForOrder = row.SupplierCdForOrder; // 発注先
            //salesDetail.AcceptAnOrderCntForOrder = row.AcceptAnOrderCntForOrder; // 発注数
            //salesDetail.SupplierSnmForOrder = row.SupplierSnmForOrder; // 発注先名称
            //salesDetail.DeliveredGoodsDiv = row.DeliveredGoodsDiv; // 納品区分
            //salesDetail.DeliveredGoodsDivNm = row.DeliveredGoodsDivNm; // 納品区分名称
            //salesDetail.DeliveredGoodsDivNmSave = row.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            //salesDetail.FollowDeliGoodsDiv = row.FollowDeliGoodsDiv; // H納品区分
            //salesDetail.FollowDeliGoodsDivNm = row.FollowDeliGoodsDivNm; // H納品区分名称
            //salesDetail.FollowDeliGoodsDivNmSave = row.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            //salesDetail.UOEResvdSection = row.UOEResvdSection; // 指定拠点
            //salesDetail.UOEResvdSectionNm = row.UOEResvdSectionNm; // 指定拠点名称
            //salesDetail.UOEResvdSectionNmSave = row.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            //salesDetail.PriceStartDate = row.PriceStartDate; // 新定価適用日
            //salesDetail.Dummy = row.Dummy; // ダミー（空欄表示用）
            //salesDetail.SearchPartsModeState = row.SearchPartsModeState; // 部品検索状態

            //-----------------------------------------------------------------------------
            // 補正
            //-----------------------------------------------------------------------------
            salesDetail.AcptAnOdrStatus = acptSlip.AcptAnOdrStatus;  // 受注ステータス
            salesDetail.SalesSlipNum = acptSlip.SalesSlipNum;        // 売上伝票番号
            salesDetail.SectionCode = acptSlip.SectionCode;          // 拠点コード
            salesDetail.SubSectionCode = acptSlip.SubSectionCode;    // 部門コード
            salesDetail.SalesDate = acptSlip.SalesDate;              // 売上日付

            // 受注ステータス（元）
            if (row.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_AddUpNew)
            {
                salesDetail.AcptAnOdrStatusSrc = 0;
                salesDetail.SalesSlipDtlNumSrc = 0;
            }

            // 仕入形式(同時)、仕入明細通番(同時)
            salesDetail.SupplierFormalSync = (int)SalesSlipStockInfoInputAcs.SupplierFormal.Non; // 初期値-1
            salesDetail.StockSlipDtlNumSync = 0;
            if ((stockTempRow != null) &&
                (stockTempRow.SupplierCd != 0) &&
                (stockTempRow.StockDate != DateTime.MinValue) &&
                (stockTempRow.PartySaleSlipNum != string.Empty) &&
                (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order))
            {
                salesDetail.SupplierFormalSync = stockTempRow.SupplierFormal;
                salesDetail.StockSlipDtlNumSync = stockTempRow.StockSlipDtlNum;
            }

            if (salesDetail.SupplierFormalSync == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order)
            {
                salesDetail.WayToOrder = 2; // 2:オンライン発注
            }

            // 売上伝票区分(明細)
            if ((salesDetail.SalesSlipCdDtl == 0) && (acptSlip.SalesSlipCd == 1)) salesDetail.SalesSlipCdDtl = (int)SalesSlipInputAcs.SalesSlipCdDtl.RetGoods; // ヘッダが返品の場合、明細は常に返品

            // 商品検索区分
            switch ((SearchPartsModeState)row.SearchPartsModeState)
            {
                case SearchPartsModeState.NonSearch:
                    salesDetail.GoodsSearchDivCd = 2; // 手入力
                    break;
                case SearchPartsModeState.BLCodeSearch:
                    salesDetail.GoodsSearchDivCd = 0; // BLコード検索
                    break;
                case SearchPartsModeState.GoodsNoSearch:
                    salesDetail.GoodsSearchDivCd = 1; // 品番検索
                    break;
            }

            // 各種数量、売上伝票番号、売上明細通番、受注番号
            switch ((SalesSlipInputAcs.AcptAnOdrStatusState)SalesSlip.AcptAnOdrStatus)
            {
                case AcptAnOdrStatusState.Estimate:
                case AcptAnOdrStatusState.UnitPriceEstimate:
                case AcptAnOdrStatusState.Sales:
                case AcptAnOdrStatusState.Shipment:
                    // 新規作成
                    salesDetail.ShipmentCnt = row.AcceptAnOrderCntDisplay;
                    salesDetail.AcceptAnOrderCnt = row.AcceptAnOrderCntDisplay;
                    salesDetail.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt;
                    salesDetail.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt;

                    salesDetail.SalesSlipNum = ctDefaultSalesSlipNum;
                    salesDetail.SalesSlipDtlNum = 0;
                    salesDetail.AcceptAnOrderNo = 0;
                    break;
                case AcptAnOdrStatusState.AcceptAnOrder:
                    if (row.SalesSlipDtlNum == 0)
                    {
                        // 新規作成(受注計上)
                        // UPD 2010/09/21 --- >>>>
                        //salesDetail.ShipmentCnt = row.ShipmentCnt;
                        salesDetail.ShipmentCnt = row.AcceptAnOrderCntDisplay;
                        // UPD 2010/09/21 --- <<<<
                        salesDetail.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        salesDetail.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt;
                        salesDetail.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt;

                        salesDetail.SalesSlipNum = ctDefaultSalesSlipNum;
                        salesDetail.SalesSlipDtlNum = 0;
                    }
                    else
                    {
                        // 既存更新
                        salesDetail.ShipmentCnt = row.AcceptAnOrderCntDisplay;
                        salesDetail.AcceptAnOrderCnt = row.AcceptAnOrderCnt;
                        salesDetail.AcptAnOdrAdjustCnt = row.AcptAnOdrAdjustCnt;
                        salesDetail.AcptAnOdrRemainCnt = row.AcptAnOdrRemainCnt;
                    }
                    break;
            }
            // 売上金額消費税額
            switch ((SalesSlipInputAcs.SalesGoodsCd)acptSlip.SalesGoodsCd)
            {
                case SalesGoodsCd.Goods:
                    salesDetail.SalesPriceConsTax = row.SalesMoneyTaxInc - row.SalesMoneyTaxExc;
                    break;
                case SalesGoodsCd.ConsTaxAdjust:
                case SalesGoodsCd.AccRecConsTaxAdjust:
                    salesDetail.SalesPriceConsTax = row.SalesMoneyDisplay;
                    break;
                case SalesGoodsCd.BalanceAdjust:
                case SalesGoodsCd.AccRecBalanceAdjust:
                    salesDetail.SalesPriceConsTax = 0;
                    break;
                default:
                    break;
            }

            // 数量初期値（変更チェック用）
            salesDetail.ShipmentCntDefForChk = salesDetail.ShipmentCnt;
            salesDetail.AcceptAnOrderCntDefForChk = salesDetail.ShipmentCnt;

            return salesDetail;

        }

        /// <summary>
        /// 売仕入同時入力データキーリスト作成
        /// </summary>
        /// <param name="salesDetailDataTableCompute"></param>
        /// <param name="stockSyncInfoKeyList"></param>
        private void MakeStockSyncInfoKeyList(SalesInputDataSet.SalesDetailDataTable salesDetailDataTableCompute, ref List<StockSyncInfoKey> stockSyncInfoKeyList)
        {
            //>>>2010/09/27
            //if (this._stockTempDataTableForSet == null) return;
            if (this._stockTempDataTable == null) return;
            //<<<2010/09/27
            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in salesDetailDataTableCompute)
            {
                //>>>2010/09/27
                //SalesInputDataSet.StockTempRow stockTempRow = this._stockTempDataTableForSet.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
                SalesInputDataSet.StockTempRow stockTempRow = this._stockTempDataTable.FindByDtlRelationGuid(salesDetailRow.DtlRelationGuid);
                //<<<2010/09/27
                if (stockTempRow != null)
                {
                    if (salesDetailRow.SupplierFormalSync == -1) continue;
                    StockSyncInfoKey stockSyncInfoKey = new StockSyncInfoKey(stockTempRow.EnterpriseCode,
                                                                             salesDetailRow.SupplierFormalSync,
                                                                             stockTempRow.SupplierSlipNo,
                                                                             stockTempRow.UpdateDateTime,
                                                                             stockTempRow.DebitNoteDiv,
                                                                             salesDetailRow.StockSlipDtlNumSync);
                    if (!stockSyncInfoKeyList.Contains(stockSyncInfoKey)) stockSyncInfoKeyList.Add(stockSyncInfoKey);
                }
            }
        }

        /// <summary>
        /// 売仕入同時入力データキーリスト作成(既存仕入情報追加用)
        /// </summary>
        /// <param name="stockTemp"></param>
        /// <param name="stockSyncInfoKeyList"></param>
        private void MakeStockSyncInfoKeyListForStockInput(StockTemp stockTemp, ref List<StockSyncInfoKey> stockSyncInfoKeyList)
        {
            if (this._stockTempDataTableForSet == null) return;

            if (stockTemp != null)
            {
                StockSyncInfoKey stockSyncInfoKey = new StockSyncInfoKey(stockTemp.EnterpriseCode,
                                                                         stockTemp.SupplierFormal,
                                                                         stockTemp.SupplierSlipNo,
                                                                         stockTemp.UpdateDateTime,
                                                                         stockTemp.DebitNoteDiv,
                                                                         stockTemp.StockSlipDtlNum);
                bool flg = false;
                foreach (StockSyncInfoKey key in stockSyncInfoKeyList)
                {
                    if ((key.EnterpriseCode == stockTemp.EnterpriseCode) &&
                        (key.SupplierFormalSync == stockTemp.SupplierFormal) &&
                        (key.SupplierSlipNo == stockTemp.SupplierSlipNo) &&
                        (key.DebitNoteDiv == stockTemp.DebitNoteDiv) &&
                        (key.StockSlipDtlNumSync == stockTemp.StockSlipDtlNum))
                    {
                        flg = true;
                        break;
                    }
                }
                if (!flg)
                {
                    stockSyncInfoKeyList.Add(stockSyncInfoKey);
                }
            }
        }

        /// <summary>
        /// 指定した売上明細データを元に売上明細データテーブル行オブジェクトを生成します。
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetail">売上明細データオブジェクト</param>
        /// <param name="salesDetailDataTable">売上明細データテーブルオブジェクト</param>
        /// <returns>売上明細データ行オブジェクト</returns>
        private SalesInputDataSet.SalesDetailRow CreateRowFromUIData(SalesSlip salesSlip, SalesDetail salesDetail, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
        {
            SalesInputDataSet.SalesDetailRow row = salesDetailDataTable.NewSalesDetailRow();

            this.SetRowFromUIData(ref row, ref salesSlip, salesDetail);
            return row;
        }

        /// <summary>
        /// 売上明細行オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="row">売上明細行オブジェクト</param>
        private void ClearSalesDetailRow(SalesInputDataSet.SalesDetailRow row)
        {
            this.ClearSalesDetailRow(row, true);
        }

        // ADD 2010/09/26 --- >>>
        /// <summary>
        /// 売上明細行オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="row">売上明細行オブジェクト</param>
        private void ClearSalesDetailRowForInsert(SalesInputDataSet.SalesDetailRow row)
        {
            this.ClearSalesDetailRowForInsert(row, true);
        }
        // ADD 2010/09/26 --- <<<

        /// <summary>
        /// 売上明細行オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="row">売上明細行オブジェクト</param>
        /// <param name="clearEditStatus">EditStatusクリアフラグ</param>
        /// <br>Update Note: 2010/03/22 李侠 標準価格選択使用区分をクリアする。</br>
        /// <br>Update Note: 2012/04/09 yangmj Redmine#29313 売上伝票入力 商品価格の再取得で販売区分が初期値に戻る</br>
        private void ClearSalesDetailRow(SalesInputDataSet.SalesDetailRow row, bool clearEditStatus)
        {
            if (row == null) return;

            this.DeleteSalesDetailAcceptAnOrderRow(row.DtlRelationGuid);
            this.SettingSalesDetailRowDtlRelationGuid(ref row);

            row.AcceptAnOrderNo = 0; // 受注番号
            row.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales; // 受注ステータス
            //row.SalesSlipNum = string.empty; // 売上伝票番号
            //row.SalesRowNo = 0; // 売上行番号
            //row.SalesRowDerivNo = 0; // 売上行番号枝番
            row.SectionCode = string.Empty; // 拠点コード
            row.SubSectionCode = 0; // 部門コード
            row.SalesDate = this._salesSlip.SalesDate; // 売上日付
            row.CommonSeqNo = 0; // 共通通番
            row.SalesSlipDtlNum = 0; // 売上明細通番
            row.AcptAnOdrStatusSrc = 0; // 受注ステータス（元）
            row.SalesSlipDtlNumSrc = 0; // 売上明細通番（元）
            row.SupplierFormalSync = -1; // 仕入形式（同時）
            row.StockSlipDtlNumSync = 0; // 仕入明細通番（同時）
            row.SalesSlipCdDtl = 0; // 売上伝票区分（明細）
            //>>>2010/02/26
            //row.DeliGdsCmpltDueDate = DateTime.MinValue; // 納品完了予定日
            row.DeliGdsCmpltDueDate = string.Empty; // 納品完了予定日
            //<<<2010/02/26
            //row.GoodsKindCode = 0; // 商品属性             // DEL 2010/09/19 
            row.GoodsSearchDivCd = 0; // 商品検索区分
            //row.GoodsMakerCd = 0; // 商品メーカーコード    // DEL 2010/09/19 

            // ADD 2010/09/19 --- >>>
            if (!this._clearFlgForMaker)
            {
                row.GoodsMakerCd = 0;
                row.SupplierCd = 0;
                row.GoodsKindCode = 0;
            }
            // ADD 2010/09/19 --- <<<

            row.MakerName = string.Empty; // メーカー名称
            row.MakerKanaName = string.Empty; // メーカーカナ名称 ADD 2012/09/05 Y.Wakita
            row.GoodsNo = string.Empty; // 商品番号
            row.GoodsName = string.Empty; // 商品名称
            row.GoodsNameKana = string.Empty; // 商品名略称
            row.GoodsLGroup = 0; // 商品大分類コード
            row.GoodsLGroupName = string.Empty; // 商品大分類名称
            row.GoodsMGroup = 0; // 商品中分類コード
            row.GoodsMGroupName = string.Empty; // 商品中分類名称
            row.BLGroupCode = 0; // BLグループコード
            row.BLGroupName = string.Empty; // BLグループコード名称
            row.BLGoodsCode = 0; // BL商品コード
            row.BLGoodsFullName = string.Empty; // BL商品コード名称（全角）
            row.EnterpriseGanreCode = 0; // 自社分類コード
            row.EnterpriseGanreName = string.Empty; // 自社分類名称
            row.WarehouseCode = string.Empty; // 倉庫コード
            row.WarehouseName = string.Empty; // 倉庫名称
            row.WarehouseShelfNo = string.Empty; // 倉庫棚番
            row.SalesOrderDivCd = 0; // 売上在庫取寄せ区分
            row.OpenPriceDiv = 0; // オープン価格区分
            row.GoodsRateRank = string.Empty; // 商品掛率ランク
            row.CustRateGrpCode = 0; // 得意先掛率グループコード
            row.ListPriceRate = 0; // 定価率
            row.RateSectPriceUnPrc = string.Empty; // 掛率設定拠点（定価）
            row.RateDivLPrice = string.Empty; // 掛率設定区分（定価）
            row.PriceSelectDiv = -1; // 標準価格選択区分 // ADD 2013/01/24 鄧潘ハン REDMINE#34605
            row.UnPrcCalcCdLPrice = 0; // 単価算出区分（定価）
            row.PriceCdLPrice = 0; // 価格区分（定価）
            row.StdUnPrcLPrice = 0; // 基準単価（定価）
            row.FracProcUnitLPrice = 0; // 端数処理単位（定価）
            row.FracProcLPrice = 0; // 端数処理（定価）
            row.ListPriceTaxIncFl = 0; // 定価（税込，浮動）
            row.ListPriceTaxExcFl = 0; // 定価（税抜，浮動）
            row.ListPriceChngCd = 0; // 定価変更区分
            row.SalesRate = 0; // 売価率
            row.RateSectSalUnPrc = string.Empty; // 掛率設定拠点（売上単価）
            row.RateDivSalUnPrc = string.Empty; // 掛率設定区分（売上単価）
            row.UnPrcCalcCdSalUnPrc = 0; // 単価算出区分（売上単価）
            row.PriceCdSalUnPrc = 0; // 価格区分（売上単価）
            row.StdUnPrcSalUnPrc = 0; // 基準単価（売上単価）
            row.FracProcUnitSalUnPrc = 0; // 端数処理単位（売上単価）
            row.FracProcSalUnPrc = 0; // 端数処理（売上単価）
            row.SalesUnPrcTaxIncFl = 0; // 売上単価（税込，浮動）
            row.SalesUnPrcTaxExcFl = 0; // 売上単価（税抜，浮動）
            row.SalesUnPrcChngCd = 0; // 売上単価変更区分
            row.CostRate = 0; // 原価率
            row.RateSectCstUnPrc = string.Empty; // 掛率設定拠点（原価単価）
            row.RateDivUnCst = string.Empty; // 掛率設定区分（原価単価）
            row.UnPrcCalcCdUnCst = 0; // 単価算出区分（原価単価）
            row.PriceCdUnCst = 0; // 価格区分（原価単価）
            row.StdUnPrcUnCst = 0; // 基準単価（原価単価）
            row.FracProcUnitUnCst = 0; // 端数処理単位（原価単価）
            row.FracProcUnCst = 0; // 端数処理（原価単価）
            row.SalesUnitCost = 0; // 原価単価
            row.SalesUnitCostChngDiv = 0; // 原価単価変更区分
            row.RateBLGoodsCode = 0; // BL商品コード（掛率）
            row.RateBLGoodsName = string.Empty; // BL商品コード名称（掛率）
            row.RateGoodsRateGrpCd = 0; // 商品掛率グループコード（掛率）
            row.RateGoodsRateGrpNm = string.Empty; // 商品掛率グループ名称（掛率）
            row.RateBLGroupCode = 0; // BLグループコード（掛率）
            row.RateBLGroupName = string.Empty; // BLグループ名称（掛率）
            row.PrtBLGoodsCode = 0; // BL商品コード（印刷）
            row.PrtBLGoodsName = string.Empty; // BL商品コード名称（印刷）
            //row.SalesCode = 0; // 販売区分コード// DEL 2012/04/09 yangmj redmine#29313
            //row.SalesCdNm = string.Empty; // 販売区分名称// DEL 2012/04/09 yangmj redmine#29313

            //--- ADD 2012/04/09 yangmj redmine#29313 ----->>>>>
            if (!_salesCodeChgFlag)
            {
                row.SalesCode = 0;
                row.SalesCdNm = string.Empty; // 販売区分名称
            }
            //--- ADD 2012/04/09 yangmj redmine#29313 -----<<<<<
            row.WorkManHour = 0; // 作業工数
            row.ShipmentCnt = 0; // 出荷数
            row.AcceptAnOrderCnt = 0; // 受注数量
            row.AcptAnOdrAdjustCnt = 0; // 受注調整数
            row.AcptAnOdrRemainCnt = 0; // 受注残数
            row.RemainCntUpdDate = DateTime.MinValue; // 残数更新日
            row.SalesMoneyTaxInc = 0; // 売上金額（税込み）
            row.SalesMoneyTaxExc = 0; // 売上金額（税抜き）
            row.Cost = 0; // 原価
            row.GrsProfitChkDiv = 0; // 粗利チェック区分
            row.SalesGoodsCd = 0; // 売上商品区分
            row.SalesPriceConsTax = 0; // 売上金額消費税額
            row.TaxationDivCd = 0; // 課税区分
            row.PartySlipNumDtl = string.Empty; // 相手先伝票番号（明細）
            row.DtlNote = string.Empty; // 明細備考
            //row.SupplierCd = 0; // 仕入先コード   // DEL 2010/09/19 
            row.SupplierSnm = string.Empty; // 仕入先略称
            row.OrderNumber = string.Empty; // 発注番号
            row.WayToOrder = 0; // 注文方法
            row.SlipMemo1 = string.Empty; // 伝票メモ１
            row.SlipMemo2 = string.Empty; // 伝票メモ２
            row.SlipMemo3 = string.Empty; // 伝票メモ３
            row.InsideMemo1 = string.Empty; // 社内メモ１
            row.InsideMemo2 = string.Empty; // 社内メモ２
            row.InsideMemo3 = string.Empty; // 社内メモ３
            row.BfListPrice = 0; // 変更前定価
            row.BfSalesUnitPrice = 0; // 変更前売価
            row.BfUnitCost = 0; // 変更前原価
            row.CmpltSalesRowNo = 0; // 一式明細番号
            row.CmpltGoodsMakerCd = 0; // メーカーコード（一式）
            row.CmpltMakerName = string.Empty; // メーカー名称（一式）
            row.CmpltGoodsName = string.Empty; // 商品名称（一式）
            row.CmpltShipmentCnt = 0; // 数量（一式）
            row.CmpltSalesUnPrcFl = 0; // 売上単価（一式）
            row.CmpltSalesMoney = 0; // 売上金額（一式）
            row.CmpltSalesUnitCost = 0; // 原価単価（一式）
            row.CmpltCost = 0; // 原価金額（一式）
            row.CmpltPartySalSlNum = string.Empty; // 相手先伝票番号（一式）
            row.CmpltNote = string.Empty; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            row.SelectedGoodsNoDiv = 0; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            row.PrtGoodsNo = string.Empty; // 印刷用品番
            row.PrtMakerCode = 0; // 印刷用メーカーコード
            row.PrtMakerName = string.Empty; // 印刷用メーカー名称
            //row.DtlRelationGuid = Guid.Empty; // 共通キー
            //row.SalesRowNoDisplay = 0; // 行番号（表示用）
            row.SupplierStock = 0; // 現在庫数
            row.SupplierStockDisplay = 0; // 現在庫数（表示用）
            row.OpenPriceDivDisplay = string.Empty; // オープン価格区分（表示用）
            row.ListPriceDisplay = 0; // 定価（表示用）
            row.SalesUnPrcDisplay = 0; // 売上単価（表示用）
            row.SalesUnitCostTaxExc = 0; // 原価単価（税抜）
            row.SalesUnitCostTaxInc = 0; // 原価単価（税込）
            row.ShipmentCntDisplay = 0; // 出荷数（表示用）
            row.AddUpEnableCnt = 0; // 計上可能数
            row.AlreadyAddUpCnt = 0; // 計上済数
            row.ShipmentCntDefault = 0; // 出荷数（初期値）
            row.SalesMoneyDisplay = 0; // 売上金額（表示用）
            row.CostTaxInc = 0; // 原価金額（税込）
            row.CostTaxExc = 0; // 原価金額（税抜）
            row.AcceptAnOrderCntDisplay = 0; // 受注数（表示用）
            row.AcceptAnOrderCntDefault = 0; // 受注数（初期値）
            row.TaxDiv = 0; // 課税区分（UI用）
            row.CanTaxDivChange = false; // 課税非課税区分変更可能フラグ
            row.RowStatus = ctROWSTATUS_NORMAL; // 行ステータス
            if (clearEditStatus) row.EditStatus = ctEDITSTATUS_AllOK; // エディットステータス
            row.SlipMemoExist = string.Empty; // メモ存在フラグ
            row.SupplierSlipExist = string.Empty; // 仕入情報存在フラグ
            row.DetailGrossProfitRate = 0; // 明細粗利率
            row.CostUpRate = 0; // 原価アップ率
            row.GrossProfitSecureRate = 0; // 粗利確保率
            row.SupplierCdForStock = 0; // 仕入先コード
            row.StockDate = row.SalesDate; // 仕入日
            row.PartySalesSlipNum = string.Empty; // 仕入伝票番号
            row.BoCode = ctDefaultBoCode; // BO区分
            row.SupplierCdForOrder = 0; // 発注先
            row.AcceptAnOrderCntForOrder = 0; // 発注数
            row.SupplierSnmForOrder = string.Empty; // 発注先名称
            row.UOEDeliGoodsDiv = string.Empty; // 納品区分
            row.DeliveredGoodsDivNm = string.Empty; // 納品区分名称
            row.DeliveredGoodsDivNmSave = string.Empty; // 納品区分名称（保存用）
            row.FollowDeliGoodsDiv = string.Empty; // H納品区分
            row.FollowDeliGoodsDivNm = string.Empty; // H納品区分名称
            row.FollowDeliGoodsDivNmSave = string.Empty; // H納品区分名称（保存用）
            row.UOEResvdSection = string.Empty; // 指定拠点
            row.UOEResvdSectionNm = string.Empty; // 指定拠点名称
            row.UOEResvdSectionNmSave = string.Empty; // 指定拠点名称（保存用）
            row.PriceStartDate = DateTime.MinValue; // 価格開始日
            row.Dummy = string.Empty; // ダミー（空欄表示用）
            row.SearchPartsModeState = (int)SearchPartsModeState.NonSearch; // 部品検索状態
            row.SalesMoneyInputDiv = (int)SalesMoneyInputDiv.Calculate; // 売上金額手入力区分
            row.SalesUnitCostTaxExcDefault = 0;
            row.SalesUnitCostTaxIncDefault = 0;
            row.SalesUnPrcTaxExcFlDefault = 0;
            row.SalesUnPrcTaxIncFlDefault = 0;
            row.ShipmentCntDefForChk = 0;
            row.AcceptAnOrderCntDefForChk = 0;
            //>>>2010/02/26
            row.CampaignCode = 0; // キャンペーンコード
            row.CampaignName = string.Empty; // キャンペーン名称
            row.GoodsDivCd = 0; // 商品種別
            row.RecycleDiv = 0; // リサイクル区分
            row.RecycleDivNm = string.Empty; // リサイクル区分名称
            row.RecycleDivNmSave = string.Empty; // リサイクル区分名称
            row.WayToAcptOdr = 0; // 受注方法
            row.GoodsMngNo = 0; // 商品管理番号
            row.InqRowNumber = 0; // 問合せ行番号
            row.InqRowNumDerivedNo = 0; // 問合せ行番号枝番
            //<<<2010/02/26
            // --- ADD 2010/03/22 -------------->>>>>
            row.SelectedListPriceDiv = 0;
            // --- ADD 2010/03/22 --------------<<<<<
            // 2012/01/16 Add >>>
            row.GoodsSpecialNote = string.Empty;
            // 2012/01/16 Add <<<
            //>>>2012/05/02
            row.RentSyncStockDate = DateTime.MinValue;
            row.RentSyncSupplier = 0;
            row.RentSyncSupSlipNo = string.Empty;
            //<<<2012/05/02

            row.AnsDeliDateDiv = 0;// 回答納期区分   // ADD 2015/02/10 吉岡 SCM高速化 回答納期区分対応

            // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ---------->>>>>>>>>>
            row.GoodsSpecialNtForFac = string.Empty;  // 商品規格・特記事項(工場向け)
            row.GoodsSpecialNtForCOw = string.Empty;  // 商品規格・特記事項(カーオーナー向け)
            row.PrmSetDtlName2ForFac = string.Empty;  // 優良設定詳細名称２(工場向け)
            row.PrmSetDtlName2ForCOw = string.Empty;  // 優良設定詳細名称２(カーオーナー向け)
            // 2015/02/23 ADD TAKAGAWA SCM高速化 C向け種別・特記事項対応 ----------<<<<<<<<<<

        }

        // ADD 2010/09/26 --- >>>
        /// <summary>
        /// 売上明細行オブジェクトのクリアを行います。（オーバーロード）
        /// </summary>
        /// <param name="row">売上明細行オブジェクト</param>
        /// <param name="clearEditStatus">EditStatusクリアフラグ</param>
        /// <br>Update Note: 2010/03/22 李侠 標準価格選択使用区分をクリアする。</br>
        private void ClearSalesDetailRowForInsert(SalesInputDataSet.SalesDetailRow row, bool clearEditStatus)
        {
            if (row == null) return;

            //this.DeleteSalesDetailAcceptAnOrderRow(row.DtlRelationGuid);
            this.SettingSalesDetailRowDtlRelationGuid(ref row);

            row.AcceptAnOrderNo = 0; // 受注番号
            row.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales; // 受注ステータス
            //row.SalesSlipNum = string.empty; // 売上伝票番号
            //row.SalesRowNo = 0; // 売上行番号
            //row.SalesRowDerivNo = 0; // 売上行番号枝番
            row.SectionCode = string.Empty; // 拠点コード
            row.SubSectionCode = 0; // 部門コード
            row.SalesDate = this._salesSlip.SalesDate; // 売上日付
            row.CommonSeqNo = 0; // 共通通番
            row.SalesSlipDtlNum = 0; // 売上明細通番
            row.AcptAnOdrStatusSrc = 0; // 受注ステータス（元）
            row.SalesSlipDtlNumSrc = 0; // 売上明細通番（元）
            row.SupplierFormalSync = -1; // 仕入形式（同時）
            row.StockSlipDtlNumSync = 0; // 仕入明細通番（同時）
            row.SalesSlipCdDtl = 0; // 売上伝票区分（明細）
            //>>>2010/02/26
            //row.DeliGdsCmpltDueDate = DateTime.MinValue; // 納品完了予定日
            row.DeliGdsCmpltDueDate = string.Empty; // 納品完了予定日
            //<<<2010/02/26
            //row.GoodsKindCode = 0; // 商品属性             // DEL 2010/09/19 
            row.GoodsSearchDivCd = 0; // 商品検索区分
            //row.GoodsMakerCd = 0; // 商品メーカーコード    // DEL 2010/09/19 

            // ADD 2010/09/19 --- >>>
            if (!this._clearFlgForMaker)
            {
                row.GoodsMakerCd = 0;
                row.SupplierCd = 0;
                row.GoodsKindCode = 0;
            }
            // ADD 2010/09/19 --- <<<

            row.MakerName = string.Empty; // メーカー名称
            row.MakerKanaName = string.Empty; // メーカーカナ名称 ADD 2012/09/05 Y.Wakita
            row.GoodsNo = string.Empty; // 商品番号
            row.GoodsName = string.Empty; // 商品名称
            row.GoodsNameKana = string.Empty; // 商品名略称
            row.GoodsLGroup = 0; // 商品大分類コード
            row.GoodsLGroupName = string.Empty; // 商品大分類名称
            row.GoodsMGroup = 0; // 商品中分類コード
            row.GoodsMGroupName = string.Empty; // 商品中分類名称
            row.BLGroupCode = 0; // BLグループコード
            row.BLGroupName = string.Empty; // BLグループコード名称
            row.BLGoodsCode = 0; // BL商品コード
            row.BLGoodsFullName = string.Empty; // BL商品コード名称（全角）
            row.EnterpriseGanreCode = 0; // 自社分類コード
            row.EnterpriseGanreName = string.Empty; // 自社分類名称
            row.WarehouseCode = string.Empty; // 倉庫コード
            row.WarehouseName = string.Empty; // 倉庫名称
            row.WarehouseShelfNo = string.Empty; // 倉庫棚番
            row.SalesOrderDivCd = 0; // 売上在庫取寄せ区分
            row.OpenPriceDiv = 0; // オープン価格区分
            row.GoodsRateRank = string.Empty; // 商品掛率ランク
            row.CustRateGrpCode = 0; // 得意先掛率グループコード
            row.ListPriceRate = 0; // 定価率
            row.RateSectPriceUnPrc = string.Empty; // 掛率設定拠点（定価）
            row.RateDivLPrice = string.Empty; // 掛率設定区分（定価）
            row.PriceSelectDiv = -1; // 標準価格選択区分 // ADD 2013/01/24 鄧潘ハン REDMINE#34605
            row.UnPrcCalcCdLPrice = 0; // 単価算出区分（定価）
            row.PriceCdLPrice = 0; // 価格区分（定価）
            row.StdUnPrcLPrice = 0; // 基準単価（定価）
            row.FracProcUnitLPrice = 0; // 端数処理単位（定価）
            row.FracProcLPrice = 0; // 端数処理（定価）
            row.ListPriceTaxIncFl = 0; // 定価（税込，浮動）
            row.ListPriceTaxExcFl = 0; // 定価（税抜，浮動）
            row.ListPriceChngCd = 0; // 定価変更区分
            row.SalesRate = 0; // 売価率
            row.RateSectSalUnPrc = string.Empty; // 掛率設定拠点（売上単価）
            row.RateDivSalUnPrc = string.Empty; // 掛率設定区分（売上単価）
            row.UnPrcCalcCdSalUnPrc = 0; // 単価算出区分（売上単価）
            row.PriceCdSalUnPrc = 0; // 価格区分（売上単価）
            row.StdUnPrcSalUnPrc = 0; // 基準単価（売上単価）
            row.FracProcUnitSalUnPrc = 0; // 端数処理単位（売上単価）
            row.FracProcSalUnPrc = 0; // 端数処理（売上単価）
            row.SalesUnPrcTaxIncFl = 0; // 売上単価（税込，浮動）
            row.SalesUnPrcTaxExcFl = 0; // 売上単価（税抜，浮動）
            row.SalesUnPrcChngCd = 0; // 売上単価変更区分
            row.CostRate = 0; // 原価率
            row.RateSectCstUnPrc = string.Empty; // 掛率設定拠点（原価単価）
            row.RateDivUnCst = string.Empty; // 掛率設定区分（原価単価）
            row.UnPrcCalcCdUnCst = 0; // 単価算出区分（原価単価）
            row.PriceCdUnCst = 0; // 価格区分（原価単価）
            row.StdUnPrcUnCst = 0; // 基準単価（原価単価）
            row.FracProcUnitUnCst = 0; // 端数処理単位（原価単価）
            row.FracProcUnCst = 0; // 端数処理（原価単価）
            row.SalesUnitCost = 0; // 原価単価
            row.SalesUnitCostChngDiv = 0; // 原価単価変更区分
            row.RateBLGoodsCode = 0; // BL商品コード（掛率）
            row.RateBLGoodsName = string.Empty; // BL商品コード名称（掛率）
            row.RateGoodsRateGrpCd = 0; // 商品掛率グループコード（掛率）
            row.RateGoodsRateGrpNm = string.Empty; // 商品掛率グループ名称（掛率）
            row.RateBLGroupCode = 0; // BLグループコード（掛率）
            row.RateBLGroupName = string.Empty; // BLグループ名称（掛率）
            row.PrtBLGoodsCode = 0; // BL商品コード（印刷）
            row.PrtBLGoodsName = string.Empty; // BL商品コード名称（印刷）
            row.SalesCode = 0; // 販売区分コード
            row.SalesCdNm = string.Empty; // 販売区分名称
            row.WorkManHour = 0; // 作業工数
            row.ShipmentCnt = 0; // 出荷数
            row.AcceptAnOrderCnt = 0; // 受注数量
            row.AcptAnOdrAdjustCnt = 0; // 受注調整数
            row.AcptAnOdrRemainCnt = 0; // 受注残数
            row.RemainCntUpdDate = DateTime.MinValue; // 残数更新日
            row.SalesMoneyTaxInc = 0; // 売上金額（税込み）
            row.SalesMoneyTaxExc = 0; // 売上金額（税抜き）
            row.Cost = 0; // 原価
            row.GrsProfitChkDiv = 0; // 粗利チェック区分
            row.SalesGoodsCd = 0; // 売上商品区分
            row.SalesPriceConsTax = 0; // 売上金額消費税額
            row.TaxationDivCd = 0; // 課税区分
            row.PartySlipNumDtl = string.Empty; // 相手先伝票番号（明細）
            row.DtlNote = string.Empty; // 明細備考
            //row.SupplierCd = 0; // 仕入先コード   // DEL 2010/09/19 
            row.SupplierSnm = string.Empty; // 仕入先略称
            row.OrderNumber = string.Empty; // 発注番号
            row.WayToOrder = 0; // 注文方法
            row.SlipMemo1 = string.Empty; // 伝票メモ１
            row.SlipMemo2 = string.Empty; // 伝票メモ２
            row.SlipMemo3 = string.Empty; // 伝票メモ３
            row.InsideMemo1 = string.Empty; // 社内メモ１
            row.InsideMemo2 = string.Empty; // 社内メモ２
            row.InsideMemo3 = string.Empty; // 社内メモ３
            row.BfListPrice = 0; // 変更前定価
            row.BfSalesUnitPrice = 0; // 変更前売価
            row.BfUnitCost = 0; // 変更前原価
            row.CmpltSalesRowNo = 0; // 一式明細番号
            row.CmpltGoodsMakerCd = 0; // メーカーコード（一式）
            row.CmpltMakerName = string.Empty; // メーカー名称（一式）
            row.CmpltGoodsName = string.Empty; // 商品名称（一式）
            row.CmpltShipmentCnt = 0; // 数量（一式）
            row.CmpltSalesUnPrcFl = 0; // 売上単価（一式）
            row.CmpltSalesMoney = 0; // 売上金額（一式）
            row.CmpltSalesUnitCost = 0; // 原価単価（一式）
            row.CmpltCost = 0; // 原価金額（一式）
            row.CmpltPartySalSlNum = string.Empty; // 相手先伝票番号（一式）
            row.CmpltNote = string.Empty; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            row.SelectedGoodsNoDiv = 0; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            row.PrtGoodsNo = string.Empty; // 印刷用品番
            row.PrtMakerCode = 0; // 印刷用メーカーコード
            row.PrtMakerName = string.Empty; // 印刷用メーカー名称
            //row.DtlRelationGuid = Guid.Empty; // 共通キー
            //row.SalesRowNoDisplay = 0; // 行番号（表示用）
            row.SupplierStock = 0; // 現在庫数
            row.SupplierStockDisplay = 0; // 現在庫数（表示用）
            row.OpenPriceDivDisplay = string.Empty; // オープン価格区分（表示用）
            row.ListPriceDisplay = 0; // 定価（表示用）
            row.SalesUnPrcDisplay = 0; // 売上単価（表示用）
            row.SalesUnitCostTaxExc = 0; // 原価単価（税抜）
            row.SalesUnitCostTaxInc = 0; // 原価単価（税込）
            row.ShipmentCntDisplay = 0; // 出荷数（表示用）
            row.AddUpEnableCnt = 0; // 計上可能数
            row.AlreadyAddUpCnt = 0; // 計上済数
            row.ShipmentCntDefault = 0; // 出荷数（初期値）
            row.SalesMoneyDisplay = 0; // 売上金額（表示用）
            row.CostTaxInc = 0; // 原価金額（税込）
            row.CostTaxExc = 0; // 原価金額（税抜）
            row.AcceptAnOrderCntDisplay = 0; // 受注数（表示用）
            row.AcceptAnOrderCntDefault = 0; // 受注数（初期値）
            row.TaxDiv = 0; // 課税区分（UI用）
            row.CanTaxDivChange = false; // 課税非課税区分変更可能フラグ
            row.RowStatus = ctROWSTATUS_NORMAL; // 行ステータス
            if (clearEditStatus) row.EditStatus = ctEDITSTATUS_AllOK; // エディットステータス
            row.SlipMemoExist = string.Empty; // メモ存在フラグ
            row.SupplierSlipExist = string.Empty; // 仕入情報存在フラグ
            row.DetailGrossProfitRate = 0; // 明細粗利率
            row.CostUpRate = 0; // 原価アップ率
            row.GrossProfitSecureRate = 0; // 粗利確保率
            row.SupplierCdForStock = 0; // 仕入先コード
            row.StockDate = row.SalesDate; // 仕入日
            row.PartySalesSlipNum = string.Empty; // 仕入伝票番号
            row.BoCode = ctDefaultBoCode; // BO区分
            row.SupplierCdForOrder = 0; // 発注先
            row.AcceptAnOrderCntForOrder = 0; // 発注数
            row.SupplierSnmForOrder = string.Empty; // 発注先名称
            row.UOEDeliGoodsDiv = string.Empty; // 納品区分
            row.DeliveredGoodsDivNm = string.Empty; // 納品区分名称
            row.DeliveredGoodsDivNmSave = string.Empty; // 納品区分名称（保存用）
            row.FollowDeliGoodsDiv = string.Empty; // H納品区分
            row.FollowDeliGoodsDivNm = string.Empty; // H納品区分名称
            row.FollowDeliGoodsDivNmSave = string.Empty; // H納品区分名称（保存用）
            row.UOEResvdSection = string.Empty; // 指定拠点
            row.UOEResvdSectionNm = string.Empty; // 指定拠点名称
            row.UOEResvdSectionNmSave = string.Empty; // 指定拠点名称（保存用）
            row.PriceStartDate = DateTime.MinValue; // 価格開始日
            row.Dummy = string.Empty; // ダミー（空欄表示用）
            row.SearchPartsModeState = (int)SearchPartsModeState.NonSearch; // 部品検索状態
            row.SalesMoneyInputDiv = (int)SalesMoneyInputDiv.Calculate; // 売上金額手入力区分
            row.SalesUnitCostTaxExcDefault = 0;
            row.SalesUnitCostTaxIncDefault = 0;
            row.SalesUnPrcTaxExcFlDefault = 0;
            row.SalesUnPrcTaxIncFlDefault = 0;
            row.ShipmentCntDefForChk = 0;
            row.AcceptAnOrderCntDefForChk = 0;
            //>>>2010/02/26
            row.CampaignCode = 0; // キャンペーンコード
            row.CampaignName = string.Empty; // キャンペーン名称
            row.GoodsDivCd = 0; // 商品種別
            row.RecycleDiv = 0; // リサイクル区分
            row.RecycleDivNm = string.Empty; // リサイクル区分名称
            row.RecycleDivNmSave = string.Empty; // リサイクル区分名称
            row.WayToAcptOdr = 0; // 受注方法
            row.GoodsMngNo = 0; // 商品管理番号
            row.InqRowNumber = 0; // 問合せ行番号
            row.InqRowNumDerivedNo = 0; // 問合せ行番号枝番
            //<<<2010/02/26
            // --- ADD 2010/03/22 -------------->>>>>
            row.SelectedListPriceDiv = 0;
            // --- ADD 2010/03/22 --------------<<<<<
            // 2012/01/16 Add >>>
            row.GoodsSpecialNote = string.Empty;
            // 2012/01/16 Add <<<
            //>>>2012/05/02
            row.RentSyncStockDate = DateTime.MinValue;
            row.RentSyncSupplier = 0;
            row.RentSyncSupSlipNo = string.Empty;
            //<<<2012/05/02
            // ADD 2013/04/16 SCM障害№10515対応 --------------------------->>>>>
            row.CarRelationGuid = Guid.Empty;
            // ADD 2013/04/16 SCM障害№10515対応 ---------------------------<<<<<
        }
        // ADD 2010/09/26 --- <<<

        /// <summary>
        /// 売上明細行オブジェクトを複製します。
        /// </summary>
        /// <param name="sourceRow">売上明細行オブジェクト</param>
        /// <returns>複製後売上明細行オブジェクト</returns>
        private SalesInputDataSet.SalesDetailRow CloneSalesDetailRow(SalesInputDataSet.SalesDetailRow sourceRow)
        {
            SalesInputDataSet.SalesDetailRow targetRow = this._salesDetailDataTable.NewSalesDetailRow();
            this.SettingSalesDetailRowDtlRelationGuid(ref targetRow);

            targetRow.AcceptAnOrderNo = sourceRow.AcceptAnOrderNo; // 受注番号
            targetRow.AcptAnOdrStatus = sourceRow.AcptAnOdrStatus; // 受注ステータス
            targetRow.SalesSlipNum = sourceRow.SalesSlipNum; // 売上伝票番号
            targetRow.SalesRowNo = sourceRow.SalesRowNo; // 売上行番号
            targetRow.SalesRowDerivNo = sourceRow.SalesRowDerivNo; // 売上行番号枝番
            targetRow.SectionCode = sourceRow.SectionCode; // 拠点コード
            targetRow.SubSectionCode = sourceRow.SubSectionCode; // 部門コード
            targetRow.SalesDate = sourceRow.SalesDate; // 売上日付
            targetRow.CommonSeqNo = sourceRow.CommonSeqNo; // 共通通番
            targetRow.SalesSlipDtlNum = sourceRow.SalesSlipDtlNum; // 売上明細通番
            targetRow.AcptAnOdrStatusSrc = sourceRow.AcptAnOdrStatusSrc; // 受注ステータス（元）
            targetRow.SalesSlipDtlNumSrc = sourceRow.SalesSlipDtlNumSrc; // 売上明細通番（元）
            targetRow.SupplierFormalSync = sourceRow.SupplierFormalSync; // 仕入形式（同時）
            targetRow.StockSlipDtlNumSync = sourceRow.StockSlipDtlNumSync; // 仕入明細通番（同時）
            targetRow.SalesSlipCdDtl = sourceRow.SalesSlipCdDtl; // 売上伝票区分（明細）
            targetRow.DeliGdsCmpltDueDate = sourceRow.DeliGdsCmpltDueDate; // 納品完了予定日
            targetRow.GoodsKindCode = sourceRow.GoodsKindCode; // 商品属性
            targetRow.GoodsSearchDivCd = sourceRow.GoodsSearchDivCd; // 商品検索区分
            targetRow.GoodsMakerCd = sourceRow.GoodsMakerCd; // 商品メーカーコード
            targetRow.MakerName = sourceRow.MakerName; // メーカー名称
            targetRow.MakerKanaName = sourceRow.MakerKanaName; // メーカーカナ名称
            targetRow.GoodsNo = sourceRow.GoodsNo; // 商品番号
            targetRow.GoodsName = sourceRow.GoodsName; // 商品名称
            targetRow.GoodsNameKana = sourceRow.GoodsNameKana; // 商品名称カナ
            targetRow.GoodsLGroup = sourceRow.GoodsLGroup; // 商品大分類コード
            targetRow.GoodsLGroupName = sourceRow.GoodsLGroupName; // 商品大分類名称
            targetRow.GoodsMGroup = sourceRow.GoodsMGroup; // 商品中分類コード
            targetRow.GoodsMGroupName = sourceRow.GoodsMGroupName; // 商品中分類名称
            targetRow.BLGroupCode = sourceRow.BLGroupCode; // BLグループコード
            targetRow.BLGroupName = sourceRow.BLGroupName; // BLグループコード名称
            targetRow.BLGoodsCode = sourceRow.BLGoodsCode; // BL商品コード
            targetRow.BLGoodsFullName = sourceRow.BLGoodsFullName; // BL商品コード名称（全角）
            targetRow.EnterpriseGanreCode = sourceRow.EnterpriseGanreCode; // 自社分類コード
            targetRow.EnterpriseGanreName = sourceRow.EnterpriseGanreName; // 自社分類名称
            targetRow.WarehouseCode = sourceRow.WarehouseCode; // 倉庫コード
            targetRow.WarehouseName = sourceRow.WarehouseName; // 倉庫名称
            targetRow.WarehouseShelfNo = sourceRow.WarehouseShelfNo; // 倉庫棚番
            targetRow.SalesOrderDivCd = sourceRow.SalesOrderDivCd; // 売上在庫取寄せ区分
            targetRow.OpenPriceDiv = sourceRow.OpenPriceDiv; // オープン価格区分
            targetRow.GoodsRateRank = sourceRow.GoodsRateRank; // 商品掛率ランク
            targetRow.CustRateGrpCode = sourceRow.CustRateGrpCode; // 得意先掛率グループコード
            targetRow.ListPriceRate = sourceRow.ListPriceRate; // 定価率
            targetRow.RateSectPriceUnPrc = sourceRow.RateSectPriceUnPrc; // 掛率設定拠点（定価）
            targetRow.RateDivLPrice = sourceRow.RateDivLPrice; // 掛率設定区分（定価）
            targetRow.PriceSelectDiv = sourceRow.PriceSelectDiv; // 標準価格選択区分（定価）// ADD 2013/01/24 鄧潘ハン REDMINE#34605
            targetRow.UnPrcCalcCdLPrice = sourceRow.UnPrcCalcCdLPrice; // 単価算出区分（定価）
            targetRow.PriceCdLPrice = sourceRow.PriceCdLPrice; // 価格区分（定価）
            targetRow.StdUnPrcLPrice = sourceRow.StdUnPrcLPrice; // 基準単価（定価）
            targetRow.FracProcUnitLPrice = sourceRow.FracProcUnitLPrice; // 端数処理単位（定価）
            targetRow.FracProcLPrice = sourceRow.FracProcLPrice; // 端数処理（定価）
            targetRow.ListPriceTaxIncFl = sourceRow.ListPriceTaxIncFl; // 定価（税込，浮動）
            targetRow.ListPriceTaxExcFl = sourceRow.ListPriceTaxExcFl; // 定価（税抜，浮動）
            targetRow.ListPriceChngCd = sourceRow.ListPriceChngCd; // 定価変更区分
            targetRow.SalesRate = sourceRow.SalesRate; // 売価率
            targetRow.RateSectSalUnPrc = sourceRow.RateSectSalUnPrc; // 掛率設定拠点（売上単価）
            targetRow.RateDivSalUnPrc = sourceRow.RateDivSalUnPrc; // 掛率設定区分（売上単価）
            targetRow.UnPrcCalcCdSalUnPrc = sourceRow.UnPrcCalcCdSalUnPrc; // 単価算出区分（売上単価）
            targetRow.PriceCdSalUnPrc = sourceRow.PriceCdSalUnPrc; // 価格区分（売上単価）
            targetRow.StdUnPrcSalUnPrc = sourceRow.StdUnPrcSalUnPrc; // 基準単価（売上単価）
            targetRow.FracProcUnitSalUnPrc = sourceRow.FracProcUnitSalUnPrc; // 端数処理単位（売上単価）
            targetRow.FracProcSalUnPrc = sourceRow.FracProcSalUnPrc; // 端数処理（売上単価）
            targetRow.SalesUnPrcTaxIncFl = sourceRow.SalesUnPrcTaxIncFl; // 売上単価（税込，浮動）
            targetRow.SalesUnPrcTaxExcFl = sourceRow.SalesUnPrcTaxExcFl; // 売上単価（税抜，浮動）
            targetRow.SalesUnPrcChngCd = sourceRow.SalesUnPrcChngCd; // 売上単価変更区分
            targetRow.CostRate = sourceRow.CostRate; // 原価率
            targetRow.RateSectCstUnPrc = sourceRow.RateSectCstUnPrc; // 掛率設定拠点（原価単価）
            targetRow.RateDivUnCst = sourceRow.RateDivUnCst; // 掛率設定区分（原価単価）
            targetRow.UnPrcCalcCdUnCst = sourceRow.UnPrcCalcCdUnCst; // 単価算出区分（原価単価）
            targetRow.PriceCdUnCst = sourceRow.PriceCdUnCst; // 価格区分（原価単価）
            targetRow.StdUnPrcUnCst = sourceRow.StdUnPrcUnCst; // 基準単価（原価単価）
            targetRow.FracProcUnitUnCst = sourceRow.FracProcUnitUnCst; // 端数処理単位（原価単価）
            targetRow.FracProcUnCst = sourceRow.FracProcUnCst; // 端数処理（原価単価）
            targetRow.SalesUnitCost = sourceRow.SalesUnitCost; // 原価単価
            targetRow.SalesUnitCostChngDiv = sourceRow.SalesUnitCostChngDiv; // 原価単価変更区分
            targetRow.RateBLGoodsCode = sourceRow.RateBLGoodsCode; // BL商品コード（掛率）
            targetRow.RateBLGoodsName = sourceRow.RateBLGoodsName; // BL商品コード名称（掛率）
            targetRow.RateGoodsRateGrpCd = sourceRow.RateGoodsRateGrpCd; // 商品掛率グループコード（掛率）
            targetRow.RateGoodsRateGrpNm = sourceRow.RateGoodsRateGrpNm; // 商品掛率グループ名称（掛率）
            targetRow.RateBLGroupCode = sourceRow.RateBLGroupCode; // BLグループコード（掛率）
            targetRow.RateBLGroupName = sourceRow.RateBLGroupName; // BLグループ名称（掛率）
            targetRow.PrtBLGoodsCode = sourceRow.PrtBLGoodsCode; // BL商品コード（印刷）
            targetRow.PrtBLGoodsName = sourceRow.PrtBLGoodsName; // BL商品コード名称（印刷）
            targetRow.SalesCode = sourceRow.SalesCode; // 販売区分コード
            targetRow.SalesCdNm = sourceRow.SalesCdNm; // 販売区分名称
            targetRow.WorkManHour = sourceRow.WorkManHour; // 作業工数
            targetRow.ShipmentCnt = sourceRow.ShipmentCnt; // 出荷数
            targetRow.AcceptAnOrderCnt = sourceRow.AcceptAnOrderCnt; // 受注数量
            targetRow.AcptAnOdrAdjustCnt = sourceRow.AcptAnOdrAdjustCnt; // 受注調整数
            targetRow.AcptAnOdrRemainCnt = sourceRow.AcptAnOdrRemainCnt; // 受注残数
            targetRow.RemainCntUpdDate = sourceRow.RemainCntUpdDate; // 残数更新日
            targetRow.SalesMoneyTaxInc = sourceRow.SalesMoneyTaxInc; // 売上金額（税込み）
            targetRow.SalesMoneyTaxExc = sourceRow.SalesMoneyTaxExc; // 売上金額（税抜き）
            targetRow.Cost = sourceRow.Cost; // 原価
            targetRow.GrsProfitChkDiv = sourceRow.GrsProfitChkDiv; // 粗利チェック区分
            targetRow.SalesGoodsCd = sourceRow.SalesGoodsCd; // 売上商品区分
            targetRow.SalesPriceConsTax = sourceRow.SalesPriceConsTax; // 売上金額消費税額
            targetRow.TaxationDivCd = sourceRow.TaxationDivCd; // 課税区分
            targetRow.PartySlipNumDtl = sourceRow.PartySlipNumDtl; // 相手先伝票番号（明細）
            targetRow.DtlNote = sourceRow.DtlNote; // 明細備考
            targetRow.SupplierCd = sourceRow.SupplierCd; // 仕入先コード
            targetRow.SupplierSnm = sourceRow.SupplierSnm; // 仕入先略称
            targetRow.OrderNumber = sourceRow.OrderNumber; // 発注番号
            targetRow.WayToOrder = sourceRow.WayToOrder; // 注文方法
            targetRow.SlipMemo1 = sourceRow.SlipMemo1; // 伝票メモ１
            targetRow.SlipMemo2 = sourceRow.SlipMemo2; // 伝票メモ２
            targetRow.SlipMemo3 = sourceRow.SlipMemo3; // 伝票メモ３
            targetRow.InsideMemo1 = sourceRow.InsideMemo1; // 社内メモ１
            targetRow.InsideMemo2 = sourceRow.InsideMemo2; // 社内メモ２
            targetRow.InsideMemo3 = sourceRow.InsideMemo3; // 社内メモ３
            targetRow.BfListPrice = sourceRow.BfListPrice; // 変更前定価
            targetRow.BfSalesUnitPrice = sourceRow.BfSalesUnitPrice; // 変更前売価
            targetRow.BfUnitCost = sourceRow.BfUnitCost; // 変更前原価
            targetRow.CmpltSalesRowNo = sourceRow.CmpltSalesRowNo; // 一式明細番号
            targetRow.CmpltGoodsMakerCd = sourceRow.CmpltGoodsMakerCd; // メーカーコード（一式）
            targetRow.CmpltMakerName = sourceRow.CmpltMakerName; // メーカー名称（一式）
            targetRow.CmpltMakerKanaName = sourceRow.CmpltMakerKanaName; // メーカーカナ名称（一式）
            targetRow.CmpltGoodsName = sourceRow.CmpltGoodsName; // 商品名称（一式）
            targetRow.CmpltShipmentCnt = sourceRow.CmpltShipmentCnt; // 数量（一式）
            targetRow.CmpltSalesUnPrcFl = sourceRow.CmpltSalesUnPrcFl; // 売上単価（一式）
            targetRow.CmpltSalesMoney = sourceRow.CmpltSalesMoney; // 売上金額（一式）
            targetRow.CmpltSalesUnitCost = sourceRow.CmpltSalesUnitCost; // 原価単価（一式）
            targetRow.CmpltCost = sourceRow.CmpltCost; // 原価金額（一式）
            targetRow.CmpltPartySalSlNum = sourceRow.CmpltPartySalSlNum; // 相手先伝票番号（一式）
            targetRow.CmpltNote = sourceRow.CmpltNote; // 一式備考
            // --- ADD 2009/10/19 ---------->>>>>
            targetRow.SelectedGoodsNoDiv = sourceRow.SelectedGoodsNoDiv; // 印刷用品番有効区分
            // --- ADD 2009/10/19 ----------<<<<<
            targetRow.PrtGoodsNo = sourceRow.PrtGoodsNo; // 印刷用品番
            targetRow.PrtMakerCode = sourceRow.PrtMakerCode; // 印刷用メーカーコード
            targetRow.PrtMakerName = sourceRow.PrtMakerName; // 印刷用メーカー名称
            targetRow.DtlRelationGuid = sourceRow.DtlRelationGuid; // 共通キー
            targetRow.CarRelationGuid = sourceRow.CarRelationGuid; // 車両情報共通キー
            targetRow.SalesRowNoDisplay = sourceRow.SalesRowNoDisplay; // 行番号（表示用）
            targetRow.SupplierStock = sourceRow.SupplierStock; // 現在庫数
            targetRow.SupplierStockDisplay = sourceRow.SupplierStockDisplay; // 現在庫数（表示用）
            targetRow.OpenPriceDivDisplay = sourceRow.OpenPriceDivDisplay; // オープン価格区分（表示用）
            targetRow.ListPriceDisplay = sourceRow.ListPriceDisplay; // 定価（表示用）
            targetRow.SalesUnPrcDisplay = sourceRow.SalesUnPrcDisplay; // 売上単価（表示用）
            targetRow.SalesUnitCostTaxExc = sourceRow.SalesUnitCostTaxExc; // 原価単価（税抜）
            targetRow.SalesUnitCostTaxInc = sourceRow.SalesUnitCostTaxInc; // 原価単価（税込）
            targetRow.ShipmentCntDisplay = sourceRow.ShipmentCntDisplay; // 出荷数（表示用）
            targetRow.AddUpEnableCnt = sourceRow.AddUpEnableCnt; // 計上可能数
            targetRow.AlreadyAddUpCnt = sourceRow.AlreadyAddUpCnt; // 計上済数
            targetRow.ShipmentCntDefault = sourceRow.ShipmentCntDefault; // 出荷数（初期値）
            targetRow.SalesMoneyDisplay = sourceRow.SalesMoneyDisplay; // 売上金額（表示用）
            targetRow.CostTaxInc = sourceRow.CostTaxInc; // 原価金額（税込）
            targetRow.CostTaxExc = sourceRow.CostTaxExc; // 原価金額（税抜）
            targetRow.AcceptAnOrderCntDisplay = sourceRow.AcceptAnOrderCntDisplay; // 受注数（表示用）
            targetRow.AcceptAnOrderCntDefault = sourceRow.AcceptAnOrderCntDefault; // 受注数（初期値）
            targetRow.TaxDiv = sourceRow.TaxDiv; // 課税区分（UI用）
            targetRow.CanTaxDivChange = sourceRow.CanTaxDivChange; // 課税非課税区分変更可能フラグ
            targetRow.RowStatus = sourceRow.RowStatus; // 行ステータス
            targetRow.EditStatus = sourceRow.EditStatus; // エディットステータス
            targetRow.SlipMemoExist = sourceRow.SlipMemoExist; // メモ存在フラグ
            targetRow.SupplierSlipExist = sourceRow.SupplierSlipExist; // 仕入情報存在フラグ
            targetRow.DetailGrossProfitRate = sourceRow.DetailGrossProfitRate; // 明細粗利率
            targetRow.CostUpRate = sourceRow.CostUpRate; // 原価アップ率
            targetRow.GrossProfitSecureRate = sourceRow.GrossProfitSecureRate; // 粗利確保率
            targetRow.SupplierCdForStock = sourceRow.SupplierCdForStock; // 仕入先コード
            targetRow.StockDate = sourceRow.StockDate; // 仕入日
            targetRow.PartySalesSlipNum = sourceRow.PartySalesSlipNum; // 仕入伝票番号
            targetRow.BoCode = sourceRow.BoCode; // BO区分
            targetRow.SupplierCdForOrder = sourceRow.SupplierCdForOrder; // 発注先
            targetRow.AcceptAnOrderCntForOrder = sourceRow.AcceptAnOrderCntForOrder; // 発注数
            targetRow.SupplierSnmForOrder = sourceRow.SupplierSnmForOrder; // 発注先名称
            targetRow.UOEDeliGoodsDiv = sourceRow.UOEDeliGoodsDiv; // 納品区分
            targetRow.DeliveredGoodsDivNm = sourceRow.DeliveredGoodsDivNm; // 納品区分名称
            targetRow.DeliveredGoodsDivNmSave = sourceRow.DeliveredGoodsDivNmSave; // 納品区分名称（保存用）
            targetRow.FollowDeliGoodsDiv = sourceRow.FollowDeliGoodsDiv; // H納品区分
            targetRow.FollowDeliGoodsDivNm = sourceRow.FollowDeliGoodsDivNm; // H納品区分名称
            targetRow.FollowDeliGoodsDivNmSave = sourceRow.FollowDeliGoodsDivNmSave; // H納品区分名称（保存用）
            targetRow.UOEResvdSection = sourceRow.UOEResvdSection; // 指定拠点
            targetRow.UOEResvdSectionNm = sourceRow.UOEResvdSectionNm; // 指定拠点名称
            targetRow.UOEResvdSectionNmSave = sourceRow.UOEResvdSectionNmSave; // 指定拠点名称（保存用）
            targetRow.PriceStartDate = sourceRow.PriceStartDate; // 新定価適用日
            targetRow.Dummy = sourceRow.Dummy; // ダミー（空欄表示用）
            targetRow.SearchPartsModeState = sourceRow.SearchPartsModeState; // 部品検索状態
            targetRow.SalesMoneyInputDiv = sourceRow.SalesMoneyInputDiv; // 売上金額手入力区分
            targetRow.SalesUnPrcTaxExcFlDefault = sourceRow.SalesUnPrcTaxExcFlDefault; // 売上単価（税込，浮動）初期値
            targetRow.SalesUnPrcTaxIncFlDefault = sourceRow.SalesUnPrcTaxIncFlDefault; // 売上単価（税抜，浮動）初期値
            targetRow.SalesUnitCostTaxExcDefault = sourceRow.SalesUnitCostTaxExcDefault; // 原価単価（税抜）初期値
            targetRow.SalesUnitCostTaxIncDefault = sourceRow.SalesUnitCostTaxIncDefault; // 原価単価（税込）初期値
            targetRow.ShipmentCntDefForChk = sourceRow.ShipmentCntDefForChk; // 出荷数初期値（変更チェック用）
            targetRow.AcceptAnOrderCntDefForChk = sourceRow.AcceptAnOrderCntDefForChk; // 受注数初期値（変更チェック用）
            //>>>2010/02/26
            targetRow.CampaignCode = sourceRow.CampaignCode; // キャンペーンコード
            targetRow.CampaignName = sourceRow.CampaignName; // キャンペーン名称
            targetRow.GoodsDivCd = sourceRow.GoodsDivCd; // 商品種別
            targetRow.RecycleDiv = sourceRow.RecycleDiv; // リサイクル区分
            targetRow.RecycleDivNm = sourceRow.RecycleDivNm; // リサイクル区分名称
            targetRow.RecycleDivNmSave = sourceRow.RecycleDivNmSave; // リサイクル区分名称
            targetRow.WayToAcptOdr = sourceRow.WayToAcptOdr; // 受注方法
            targetRow.GoodsMngNo = sourceRow.GoodsMngNo; // 商品管理番号
            targetRow.InqRowNumber = sourceRow.InqRowNumber; // 問合せ行番号
            targetRow.InqRowNumDerivedNo = sourceRow.InqRowNumDerivedNo; // 問合せ行番号枝番
            //<<<2010/02/26
            // 2012/01/16 Add >>>
            targetRow.GoodsSpecialNote = sourceRow.GoodsSpecialNote;
            // 2012/01/16 Add <<<
            //>>>2012/05/02
            targetRow.RentSyncStockDate = sourceRow.RentSyncStockDate;
            targetRow.RentSyncSupplier = sourceRow.RentSyncSupplier;
            targetRow.RentSyncSupSlipNo = sourceRow.RentSyncSupSlipNo;
            //<<<2012/05/02

            return targetRow;
        }

        /// <summary>
        /// 文字列の右詰処理を行います。
        /// </summary>
        /// <param name="sjisEnc">エンコード</param>
        /// <param name="totalLength">最大レングス</param>
        /// <param name="sourceString">元文字列</param>
        /// <param name="paddingChar">追加文字</param>
        /// <returns>編集後文字列</returns>
        private string PadRight(Encoding sjisEnc, int totalLength, string sourceString, char paddingChar)
        {
            int currentLength = sjisEnc.GetByteCount(sourceString.Trim());

            StringBuilder builder = new StringBuilder(sourceString);

            for (int i = currentLength; i < totalLength; i++)
            {
                builder.Append(paddingChar);
            }

            return builder.ToString();
        }

        /// <summary>
        /// 商品連結データリストより、指定された商品の情報を取得します。
        /// </summary>
        /// <param name="goodsNo">商品コード</param>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="goodsUnitDataList">商品連結データリスト</param>
        /// <returns>商品連結データ</returns>
        private GoodsUnitData GetGoodsUnitDataFromList(string goodsNo, int goodsMakerCd, List<GoodsUnitData> goodsUnitDataList)
        {
            foreach (GoodsUnitData goodsUnitData in goodsUnitDataList)
            {
                if ((goodsUnitData.GoodsMakerCd == goodsMakerCd) && (goodsUnitData.GoodsNo == goodsNo))
                {
                    return goodsUnitData;
                }
            }
            return null;
        }

        /// <summary>
        /// 在庫データリストより、指定された商品の情報を取得します。
        /// </summary>
        /// <param name="goodsNo">商品コード</param>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="stockList">在庫データリスト</param>
        /// <returns>商品連結データ</returns>
        private Stock GetStockDataFromList(string goodsNo, int goodsMakerCd, List<Stock> stockList)
        {
            foreach (Stock stock in stockList)
            {
                if ((stock.GoodsMakerCd == goodsMakerCd) && (stock.GoodsNo == goodsNo))
                {
                    return stock;
                }
            }
            return null;
        }

        /// <summary>
        /// 新価格、旧価格、新価格適用日より、対象の価格を取得します。
        /// </summary>
        /// <param name="targetDate">対象日</param>
        /// <param name="newPrice">新価格</param>
        /// <param name="oldPrice">旧価格</param>
        /// <param name="newPriceStartDay">新価格適用日</param>
        /// <returns>価格</returns>
        private double GetPrice(DateTime targetDate, double newPrice, double oldPrice, DateTime newPriceStartDay)
        {
            return this.GetPrice(targetDate, newPrice, oldPrice, newPriceStartDay, 0);
        }

        /// <summary>
        /// 新価格、旧価格、新価格適用日、オープン価格区分より、対象の価格を取得します。
        /// </summary>
        /// <param name="targetDate">対象日付</param>
        /// <param name="newPrice">新価格</param>
        /// <param name="oldPrice">旧価格</param>
        /// <param name="newPriceStartDay">新価格適用日</param>
        /// <param name="openPriceDiv">オープン価格区分(0:通常,1:オープン価格)</param>
        /// <returns>価格</returns>
        private double GetPrice(DateTime targetDate, double newPrice, double oldPrice, DateTime newPriceStartDay, Int32 openPriceDiv)
        {
            if (openPriceDiv == 1) return 0;
            if (newPriceStartDay <= targetDate)
            {
                return newPrice;
            }
            else
            {
                return oldPrice;
            }
        }

        /// <summary>
        /// リモート参照用パラメータ設定処理
        /// </summary>
        /// <param name="optWorkSettinType"></param>
        /// <param name="iOWriteCtrlOptWork"></param>
        /// <remarks>
        /// <br>Update Note: 2021/05/20 陳永康</br>
        /// <br>管理番号   : 11770032-00</br>
        /// <br>           : BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応</br> 
        /// </remarks>
        private void SettingIOWriteCtrlOptWork(SalesSlipInputAcs.OptWorkSettingType optWorkSettinType, out IOWriteCtrlOptWork iOWriteCtrlOptWork)
        {
            iOWriteCtrlOptWork = new IOWriteCtrlOptWork();
            iOWriteCtrlOptWork.CtrlStartingPoint = (int)IOWriteCtrlOptCtrlStartingPoint.Sales;                              // 制御起点(0:売上 1:仕入 2:仕入売上同時計上)
            iOWriteCtrlOptWork.AcpOdrrAddUpRemDiv = this._salesSlipInputInitDataAcs.GetSalesTtlSt().AcpOdrrAddUpRemDiv;     // 受注データ計上残区分(0:残す 1:残さない)
            iOWriteCtrlOptWork.ShipmAddUpRemDiv = this._salesSlipInputInitDataAcs.GetSalesTtlSt().ShipmAddUpRemDiv;         // 出荷データ計上残区分(0:残す 1:残さない)
            iOWriteCtrlOptWork.EstimateAddUpRemDiv = this._salesSlipInputInitDataAcs.GetSalesTtlSt().EstmateAddUpRemDiv;    // 見積データ計上残区分(0:残す 1:残さない)
            iOWriteCtrlOptWork.RetGoodsStockEtyDiv = this._salesSlipInputInitDataAcs.GetSalesTtlSt().RetGoodsStockEtyDiv;   // 返品時在庫登録区分
            iOWriteCtrlOptWork.RemainCntMngDiv = 0;                                                                         // 残数管理区分(0:する 固定とする)
            iOWriteCtrlOptWork.SupplierSlipDelDiv = this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierSlipDelDiv;     // 仕入伝票削除区分
            iOWriteCtrlOptWork.CarMngDivCd = this._salesSlip.CarMngDivCd;                                                   // 車両管理マスタ登録区分(0:登録しない 1:登録する)
            switch (optWorkSettinType)
            {
                case OptWorkSettingType.Write:
                    break;
                case OptWorkSettingType.Read:
                    break;
                case OptWorkSettingType.Delete:
                    // ---UPD 陳永康 2021/05/20 BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応 ------>>>>>
                    //if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierSlipDelDiv == 1)
                    if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierSlipDelDiv == (int)SupplierSlipDelDivEnum.DelQst ||
                        this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierSlipDelDiv == (int)SupplierSlipDelDivEnum.Del)
                    // ---UPD 陳永康 2021/05/20 BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応 ------<<<<<
                    {
                        iOWriteCtrlOptWork.SupplierSlipDelDiv = this._supplierSlipDelDiv; // 仕入伝票削除区分
                    }
                    break;
            }
        }

        //>>>2010/02/26
        /// <summary>
        /// Visible設定イベントコール処理
        /// </summary>
        private void RefreshMainDisplayEventCall()
        {
            if (this.RefreshMainDisplay != null)
            {
                this.RefreshMainDisplay(this, new EventArgs());
            }
        }
        //<<<2010/02/26

        // --- ADD 2010/03/01 ---------->>>>>
        /// <summary>
        /// 処理対象判定
        /// </summary>
        /// <param name="addUpOrgSalesDetailWork">計上元明細</param>
        /// <returns>チェック結果</returns>
        /// <remarks>
        /// <br>Note       : 処理対象判定を行います。</br>
        /// <br>Programmer : 李占川</br>
        /// <br>Date       : 2010/03/01</br>
        /// </remarks>
        private bool CheckInputMode(AddUpOrgSalesDetailWork addUpOrgSalesDetailWork)
        {
            bool isOk = false;

            if ((addUpOrgSalesDetailWork.AcptAnOdrStatus == 40 && this._salesSlipInputInitDataAcs.GetSalesTtlSt().ShipmAddUpRemDiv == 1)
                || (addUpOrgSalesDetailWork.AcptAnOdrStatus == 20 && this._salesSlipInputInitDataAcs.GetSalesTtlSt().AcpOdrrAddUpRemDiv == 1)
                || (addUpOrgSalesDetailWork.AcptAnOdrStatus == 10 && this._salesSlipInputInitDataAcs.GetSalesTtlSt().EstmateAddUpRemDiv == 1))
            {
                isOk = true;
            }

            return isOk;
        }

        /// <summary>
        /// 計上元伝票読込
        /// </summary>
        /// <param name="addUpOrgSalesDetailWork">計上元明細情報</param>
        /// <param name="salesDetailList">売上明細データリス</param>
        /// <param name="salesSlip">売上データ</param>
        /// <param name="depsitMain">入金データ</param>
        /// <param name="depositAlw">入金引当データ</param>
        /// <returns>status</returns>
        /// <remarks>
        /// <br>Note       : 計上元伝票読込を行います。</br>
        /// <br>Programmer : 李占川</br>
        /// <br>Date       : 2010/03/01</br>
        /// <br>Update Note: 2010/03/26 李侠 検索見積データ読込フラグの変更</br>
        /// <br>Update Note: 2011/11/10 yangmj redmine#26413 計上残区分による伝票削除の変更</br>
        /// </remarks>
        private int ReadDBDataForDelete(AddUpOrgSalesDetailWork addUpOrgSalesDetailWork, out List<SalesDetail> salesDetailList, out SalesSlip salesSlip, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw, out List<UOEOrderDtlWork> uoeOrderDtlWorkList)//ADD 2011/11/10
        //private int ReadDBDataForDelete(AddUpOrgSalesDetailWork addUpOrgSalesDetailWork, out List<SalesDetail> salesDetailList, out SalesSlip salesSlip, out SearchDepsitMain depsitMain, out SearchDepositAlw depositAlw)//DEL 2011/11/10
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;

            string enterpriseCode = addUpOrgSalesDetailWork.EnterpriseCode;
            int acptAnOdrStatus = addUpOrgSalesDetailWork.AcptAnOdrStatus;
            string salesSlipNum = addUpOrgSalesDetailWork.SalesSlipNum;

            SalesSlip baseSalesSlip;
            List<SalesDetail> addUpSrcDetailList;
            List<StockWork> stockWorkList;
            List<StockSlipWork> stockSlipWorkList;
            List<StockDetailWork> stockDetailWorkList;
            List<AddUpOrgStockDetailWork> addUpSrcStockDetailWorkList;
            List<AcceptOdrCar> acceptOdrCarList;
            //List<UOEOrderDtlWork> uoeOrderDtlWorkList;//DEL 2011/11/10
            //>>>2010/04/27
            UserSCMOrderHeaderRecord scmHeader;
            UserSCMOrderCarRecord scmCar;
            List<UserSCMOrderDetailRecord> scmDetailList;
            List<UserSCMOrderAnswerRecord> scmAnswerList;
            //<<<2010/04/27

            // 計上元伝票情報を取得する。
            status = this.ReadDBDataProc(
                            ConstantManagement.LogicalMode.GetData0, 		// 固定 ConstantManagement.LogicalMode.GetData0
                            enterpriseCode, 			                    // 企業コード
                            acptAnOdrStatus, 			                    // 受注ステータス
                            salesSlipNum, 			                        // 売上伝票番号
                // --- UPD 2010/03/26 -------------->>>>>
                //false, 			                            // 検索見積データ読込フラグ　固定 false
                            true, 			                                // 検索見積データ読込フラグ　固定 true
                // --- UPD 2010/03/26 --------------<<<<<
                            out salesSlip, 			                        // 売上データ
                            out baseSalesSlip, 			                    // 売上データ
                            out salesDetailList, 		                    // 売上明細データリスト
                            out addUpSrcDetailList, 		                // 計上元売上明細データリスト
                            out depsitMain, 			                    // 入金データ
                            out depositAlw, 			                    // 入金引当データ
                            out stockSlipWorkList, 		                    // 仕入データリスト
                            out stockDetailWorkList, 		                // 仕入明細データリスト
                            out addUpSrcStockDetailWorkList, 	            // 同時入力計上元仕入明細データリスト
                            out stockWorkList, 			                    // 在庫データリスト
                            out acceptOdrCarList, 		                    // 受注マスタ(車輌)リスト
                            out uoeOrderDtlWorkList                         // UOE発注データリスト
                            , out scmHeader // 2010/04/27
                            , out scmCar // 2010/04/27
                            , out scmDetailList // 2010/04/27
                            , out scmAnswerList // 2010/04/27
                            );

            return status;
        }

        /// <summary>
        /// 削除対象チェック
        /// </summary>
        /// <param name="addUpOrgSalesDetailWork">明細データ</param>
        /// <param name="salesDetailList">読み込んだ計上元伝票</param>
        /// <remarks>
        /// <br>Note       : 削除対象チェックを行います。</br>
        /// <br>Programmer : 李占川</br>
        /// <br>Date       : 2010/03/01</br>
        /// </remarks>
        private bool CheckDeleteData(AddUpOrgSalesDetailWork addUpOrgSalesDetailWork, List<SalesDetail> salesDetailList)
        {
            bool isOk = false;

            if (addUpOrgSalesDetailWork == null || salesDetailList == null)
            {
                return isOk;
            }

            foreach (SalesDetail salesDetail in salesDetailList)
            {
                // 計上したデータ
                if (salesDetail.AcptAnOdrRemainCnt == 0)
                {
                    continue;
                }

                List<AddUpOrgSalesDetailWork> dataDetailList = this._addUpOrgSalesDetailWorkList.FindAll(
                                delegate(AddUpOrgSalesDetailWork work)
                                {
                                    if (work.AcptAnOdrStatus == salesDetail.AcptAnOdrStatus
                                        && work.SalesSlipNum == salesDetail.SalesSlipNum
                                        && work.SalesSlipDtlNum == salesDetail.SalesSlipDtlNum
                                        )
                                    {
                                        return true;
                                    }
                                    else
                                    {
                                        return false;
                                    }
                                }
                    );

                // 読み込んだ計上元伝票に計上明細以外の明細が含まれている場合
                if (dataDetailList.Count == 0)
                {
                    isOk = true;
                    break;
                }
            }

            return isOk;
        }
        // --- ADD 2010/03/01 ----------<<<<<


        // --- ADD 譚洪 2013/12/30 ---------->>>>>
        /// <summary>
        /// 消費税転嫁方式編集判断メソッド
        /// </summary>
        /// <param name="salesSlip">売上データ</param>
        /// <remarks>
        /// <br>Note       : 消費税転嫁方式編集判断を行います。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2013/12/30</br>
        /// <br>Note       : 貸出の返品の対応 Redmine#43270。</br>
        /// <br>Programmer : xuyb</br>
        /// <br>Date       : 2014/08/21</br>
        /// </remarks>
        /// <returns>true:存在する false:存在しない</returns>
        private bool CheckConsTaxLayMethod(SalesSlip salesSlip)
        {
            bool consTaxLayMethodFlg = false;

            // ①元黒の消費税転嫁方式が、請求親又は請求子の場合、
            if (salesSlip.ConsTaxLayMethod == 2 || salesSlip.ConsTaxLayMethod == 3)
            {
                // ②税率設定が２件以上ある場合、
                if (this._salesSlipInputInitDataAcs.GetTaxRateSet().TaxRateStartDate2 != DateTime.MinValue
                    || this._salesSlipInputInitDataAcs.GetTaxRateSet().TaxRateStartDate3 != DateTime.MinValue)
                {
                    //double taxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate);  //DEL xuyb 2014/08/21 Redmine#43270
                    // ---------------- ADD xuyb 2014/08/21 Redmine#43270 ------------------->>>>>
                    double taxRate = 0.0;
                    if (this._salesDetailDataTable[0].AcptAnOdrStatusSrc == 40)
                    {
                        // 40：返品-貸出の場合、出荷日で税率を取得する
                        taxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.ShipmentDay);
                    }
                    else
                    {
                        // 30：返品-売上の場合、売上日で税率を取得する
                        taxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate);
                    }
                    // ---------------- ADD xuyb 2014/08/21 Redmine#43270 -------------------<<<<<

                    // ③元黒売上日付と赤伝売上日付で、税率が違う場合、
                    if (salesSlip.ConsTaxRate != taxRate)
                    {
                        consTaxLayMethodFlg = true;
                    }
                }
            }

            return consTaxLayMethodFlg;
        }
        // --- ADD 譚洪 2013/12/30 ----------<<<<<

        # endregion

        #region DELPHI-Methods ---- tanh

        #region 画面初期化処理
        /// <summary>
        /// 画面初期化処理
        /// </summary>
        public void Clear(int dataInputCountValue)
        {
            // 売上明細DataTable行クリア処理
            _salesSlipInputAcs._salesDetailDataTable.Rows.Clear();

            // 一式情報DataTable行クリア処理
            _salesSlipInputAcs._completeInfoDataTable.Rows.Clear();

            // グリッド行初期設定処理
            _salesSlipInputAcs.SalesDetailRowInitialSetting(dataInputCountValue);

            //// 売上金額変更後発生イベントコール処理
            //this.SalesPriceChangedEventCall();
        }


        #endregion

        #endregion

        //>>>2010/07/13
        /// <summary>
        /// 発注選択および出荷数が入力されている売上明細行オブジェクトが存在するかどうかをチェックします。(行値引、注釈は対象外)
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        /// <remarks>Call:・締チェック対象判定</remarks>
        public bool ExistSalesDetailShipmentCntForOrderSave()
        {
            bool exist = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if ((row.EditStatus != ctEDITSTATUS_RowDiscount) &&
                    (row.EditStatus != ctEDITSTATUS_Annotation) &&
                    (row.ShipmentCntDisplay != 0) &&
                    (this.ExistOrderInfo(row)) &&
                    (row.AcceptAnOrderCntDisplay != 0))
                {
                    exist = true;
                    break;
                }
            }

            return exist;
        }
        //<<<2010/07/13

        //>>>2010/07/18
        /// <summary>
        /// 売上明細行オブジェクトにBLグループ、中分類、大分類情報を設定します。
        /// </summary>
        /// <param name="salesRowNo">売上明細行番号</param>
        /// <param name="blCode">BLコード</param>
        /// <returns>False:BLコードマスタ取得失敗</returns>
        public bool SettingSalesDetailBLGoodsInfoPart(int salesRowNo, int blCode)
        {
            BLGoodsCdUMnt bLGoodsCdUMnt = new BLGoodsCdUMnt();
            BLGroupU bLGroupU = new BLGroupU();
            GoodsGroupU goodsGroupU = new GoodsGroupU();
            UserGdBdU userGdBdU = new UserGdBdU();

            if (blCode != 0)
            {
                // BLグループ、中分類、大分類情報を取得
                if (!this._salesSlipInputInitDataAcs.GetBLGoodsRelation(blCode, out bLGoodsCdUMnt, out bLGroupU, out goodsGroupU, out userGdBdU))
                {
                    // 失敗時は
                    return false;
                }
            }

            SalesInputDataSet.SalesDetailRow salesDetailRow = this.GetSalesDetailRow(salesRowNo);

            this.SettingSalesDetailBLGoodsInfoPart(salesRowNo, bLGroupU, goodsGroupU, userGdBdU);

            return true;
        }

        /// <summary>
        /// 売上明細行オブジェクトにBLグループ、中分類、大分類情報を設定します。
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="bLGroupU"></param>
        /// <param name="goodsGroupU"></param>
        /// <param name="userGdBdU"></param>
        private void SettingSalesDetailBLGoodsInfoPart(int salesRowNo, BLGroupU bLGroupU, GoodsGroupU goodsGroupU, UserGdBdU userGdBdU)
        {
            SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);

            if (row != null)
            {
                //>>>2010/07/21
                row.GoodsNameKana = row.GoodsName;
                row.BLGoodsFullName = row.GoodsName;
                row.PrtBLGoodsName = row.GoodsName;
                row.RateBLGoodsCode = 0;
                //<<<2010/07/21

                row.BLGroupCode = bLGroupU.BLGroupCode;
                row.BLGroupName = bLGroupU.BLGroupName;

                row.GoodsMGroup = goodsGroupU.GoodsMGroup;
                row.GoodsMGroupName = goodsGroupU.GoodsMGroupName;

                row.GoodsLGroup = userGdBdU.GuideCode;
                row.GoodsLGroupName = userGdBdU.GuideName;
            }
        }
        //<<<2010/07/18
        // --- ADD 2010/11/25 ---------->>>>>
        /// <summary>
        /// エラー情報を取得
        /// </summary>
        /// <returns>エラー情報</returns>
        /// <br>Programmer : 曹文傑</br>
        /// <br>Date       : 2010/11/25</br>
        public string GetErrorMessage()
        {
            return this._errorMessage;
        }
        // --- ADD 2010/11/25 ----------<<<<<

        // ----- ADD K2011/08/12 --------------------------->>>>>
        /// <summary>
        /// 伝票印刷設定用帳票ＩＤ取得処理を呼び出す
        /// </summary>
        /// <param name="slipInfo"></param>
        /// <returns></returns>
        public string CallGetSlipPrtSetPaperId(SalesSlip slipInfo)
        {
            string slipPrtSetPaperId = string.Empty;

            slipPrtSetPaperId = this.GetSlipPrtSetPaperId(slipInfo);

            return slipPrtSetPaperId;
        }
        // ----- ADD K2011/08/12 ---------------------------<<<<<
        // 2011/08/20 XUJS ADD STA ------>>>>>>
        /// <summary>
        /// 定価変更チェック
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        /// <br>Update Note: 2011/08/20 連番882 徐錦山 10704766-00 </br>
        /// <br>             元定価が表示のを追加</br>
        /// <br>Update Note: 2011/09/01 連番681 yangmj 10704766-00 </br>
        /// <br>             Redmine#23723 提供定価とユーザー定価が一致しない場合、文字色の改修</br>
        /// <br>Update Note: 2011/12/22   李小路</br>
        /// <br>管理番号   : 10707327-00 2012/01/25配信分</br>
        /// <br>             Redmine#27451 売上伝票入力/標準価格の色の修正</br>
        public bool CheckStdPrice(int salesRowNo)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
            if (salesDetailRow != null)
            {
                //return (salesDetailRow.BfListPrice != salesDetailRow.GoodsListPrice);//DEL 2011/09/01
                //return (salesDetailRow.BfListPrice != salesDetailRow.StdUnPrcUnCst);//DEL 2011/12/22 李小路 Redmine#27451
                return (salesDetailRow.RateDivLPrice != string.Empty); //ADD 2011/12/22 李小路 Redmine#27451
            }
            return false;
        }
        // 2011/08/20 XUJS ADD END ------<<<<<<

        //---ADD 鄧潘ハン 2012/04/06 Redmine#29216-------------------->>>>>
        /// <summary>
        /// 得意先掛率グループ情報のクリアメソッド
        /// </summary>
        /// <remarks>
        /// <br>Note       : 得意先掛率グループ情報クリア</br>
        /// <br>Programmer : 鄧潘ハン</br>
        /// <br>Date       : 2012/04/06</br>
        /// <br>管理番号   : 10801804-00 2012/05/24配信分　Redmine#29216   F9/Esc押下時の得意先掛率情報のクリアについての修正</br>
        /// </remarks>
        public void ClearCustRateGroupList()
        {
            //得意先掛率グループ情報をクリアする。
            this._custRateGroupList.Clear();
        }
        //---ADD 鄧潘ハン 2012/04/06 Redmine#29216--------------------<<<<<

        // --- ADD 2012/11/30 Y.Wakita ---------->>>>>
        /// <summary>
        /// 仕入明細行オブジェクトの削除を行います。（オーバーロード）
        /// </summary>
        /// <param name="salesRowNoList">削除行SalesRowNoリスト</param>
        public void DeleteStockDetailRow(List<int> salesRowNoList)
        {
            if (salesRowNoList.Count == 0) return;

            this._salesDetailDataTable.BeginLoadData();
            foreach (int salesRowNo in salesRowNoList)
            {
                SalesInputDataSet.SalesDetailRow targetRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._currentSalesSlipNum, salesRowNo);
                if (targetRow == null) continue;

                // 仕入明細削除
                this.DeleteStockTempRow(targetRow.DtlRelationGuid);
            }

        }
        // --- ADD 2012/11/30 Y.Wakita ----------<<<<<

        // ADD 2013/03/27 T.Miyamoto ------------------------------>>>>>
        /// <summary>
        /// 売上明細行オブジェクトにBLグループ、中分類、大分類情報を設定します。
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="bLGroupU"></param>
        /// <param name="goodsGroupU"></param>
        /// <param name="userGdBdU"></param>
        private void SettingSalesDetailListBLGoodsInfo(SalesDetail salesDetail)
        {
            BLGoodsCdUMnt bLGoodsCdUMnt = new BLGoodsCdUMnt();
            BLGroupU bLGroupU = new BLGroupU();
            GoodsGroupU goodsGroupU = new GoodsGroupU();
            UserGdBdU userGdBdU = new UserGdBdU();

            // BLグループ、中分類、大分類情報を取得
            if (this._salesSlipInputInitDataAcs.GetBLGoodsRelation(salesDetail.BLGoodsCode, out bLGoodsCdUMnt, out bLGroupU, out goodsGroupU, out userGdBdU))
            {
                salesDetail.GoodsLGroup     = userGdBdU.GuideCode;              //商品大分類コード
                salesDetail.GoodsLGroupName = userGdBdU.GuideName;              //商品大分類名称
                salesDetail.GoodsMGroup     = goodsGroupU.GoodsMGroup;          //商品中分類コード
                salesDetail.GoodsMGroupName = goodsGroupU.GoodsMGroupName;      //商品中分類名称
                salesDetail.BLGroupCode     = bLGroupU.BLGroupCode;             //BLグループコード
                salesDetail.BLGroupName     = bLGroupU.BLGroupName;             //BLグループコード名称
                salesDetail.BLGoodsFullName = bLGoodsCdUMnt.BLGoodsHalfName;    //BL商品コード名称（全角）
                salesDetail.RateBLGoodsCode = bLGoodsCdUMnt.BLGoodsCode;        //BL商品コード（掛率）
                salesDetail.RateBLGoodsName = bLGoodsCdUMnt.BLGoodsFullName;    //BL商品コード名称（掛率）
                salesDetail.PrtBLGoodsCode  = bLGoodsCdUMnt.BLGoodsCode;        //BL商品コード（印刷）
                salesDetail.PrtBLGoodsName  = bLGoodsCdUMnt.BLGoodsHalfName;    //BL商品コード名称（印刷）
            }
        }
        // ADD 2013/03/27 T.Miyamoto ------------------------------<<<<<

        // --- DEL 2013/04/18 T.Nishi ---------->>>>>
        //// --- ADD 2013/04/11 Y.Wakita ⑤ ---------->>>>>
        ///// <summary>
        ///// 受注明細データテーブルオブジェクトをソートします。
        ///// </summary>
        //public void salesDetailAcceptAnOrderDataTableSort()
        //{
        //    if (this._salesDetailAcceptAnOrderDataTable.Rows.Count == 0) return;
        //
        //    this._salesDetailAcceptAnOrderDataTable.BeginLoadData();
        //
        //    SalesInputDataSet.SalesDetailAcceptAnOrderDataTable wkTable = new SalesInputDataSet.SalesDetailAcceptAnOrderDataTable();
        //
        //    DataRow[] rows = this._salesDetailAcceptAnOrderDataTable.Select("", string.Format("{0}", this._salesDetailAcceptAnOrderDataTable.SalesRowNoColumn.ColumnName));
        //
        //    foreach (DataRow row in rows)
        //    {
        //        DataRow addRow = wkTable.NewRow();
        //
        //        // カラム情報をコピーします。
        //        addRow.ItemArray = row.ItemArray;
        //
        //        // DataTableに格納します。
        //        wkTable.Rows.Add(addRow);
        //    }
        //    this._salesDetailAcceptAnOrderDataTable = wkTable;
        //
        //    this._salesDetailAcceptAnOrderDataTable.EndLoadData();
        //}
        //// --- ADD 2013/04/11 Y.Wakita ⑤ ----------<<<<<
        // --- DEL 2013/04/18 T.Nishi ----------<<<<<

        //>>>2013/04/06
        /// <summary>
        /// SCM回答用BLコードリスト操作処理
        /// </summary>
        /// <param name="salesRowNoList"></param>
        /// <param name="actionType"></param>
        public void OperateOriginalBLGoodsCodeMap(List<int> salesRowNoList, string actionType)
        {
            foreach (int salesRowNo in salesRowNoList)
            {
                this.OperateOriginalBLGoodsCodeMap(salesRowNo, actionType, 0);
            }
        }
        
        /// <summary>
        /// SCM回答用BLコードリスト操作処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="actionType"></param>
        public void OperateOriginalBLGoodsCodeMap(int salesRowNo, string actionType)
        {
            this.OperateOriginalBLGoodsCodeMap(salesRowNo, actionType, 0);
        }

        /// <summary>
        /// SCM回答用BLコードリスト操作処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="actionType"></param>
        /// <param name="originRowNo"></param>
        public void OperateOriginalBLGoodsCodeMap(int salesRowNo, string actionType, int originRowNo)
        {

            //-----------------------------
            // 行削除
            //-----------------------------
            if ("DEL".Equals(actionType))
            {
                #region ■行削除
                if (this._originalBLGoodsCodeMap.ContainsKey(salesRowNo))
                {
                    // BLコードリストの行番号再付番
                    ReSettingOriginalBLGoodsCodeMapKey(salesRowNo, actionType);
                }
                else
                {
                    // 対象行が存在しない⇒何もしない
                }
                #endregion
            }
            //-----------------------------
            // 行挿入
            //-----------------------------
            else if ("INSERT".Equals(actionType))
            {
                #region ■行挿入
                // BLコードリストの行番号再付番
                ReSettingOriginalBLGoodsCodeMapKey(salesRowNo, actionType);
                #endregion
            }
            //-----------------------------
            // 貼付
            //-----------------------------
            else if ("PASTE".Equals(actionType))
            {
                #region ■貼付
                // BLコードリストの行番号再付番
                ReSettingOriginalBLGoodsCodeMapKey(salesRowNo, actionType, originRowNo);
                #endregion
            }
            //-----------------------------
            // 注釈
            //-----------------------------
            else if ("ANNOTATION".Equals(actionType))
            {
                #region ■注釈
                // BLコードリストの行番号再付番
                ReSettingOriginalBLGoodsCodeMapKey(salesRowNo, actionType);
                #endregion
            }
            //-----------------------------
            // 行値引
            //-----------------------------
            else if ("LINEDISCOUNT".Equals(actionType))
            {
                #region ■行値引
                // BLコードリストの行番号再付番
                ReSettingOriginalBLGoodsCodeMapKey(salesRowNo, actionType);
                #endregion
            }

        }

        /// <summary>
        /// SCM回答用BLコードリスト再設定処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="actionType"></param>
        private void ReSettingOriginalBLGoodsCodeMapKey(int salesRowNo, string actionType)
        {
            this.ReSettingOriginalBLGoodsCodeMapKey(salesRowNo, actionType, 0);
        }

        /// <summary>
        /// SCM回答用BLコードリスト再設定処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="actionType"></param>
        /// <param name="originRowNo"></param>
        private void ReSettingOriginalBLGoodsCodeMapKey(int salesRowNo, string actionType, int originRowNo)
        {
            IDictionary<int, int> tempDic = new Dictionary<int, int>(); // 退避用Dic
            SortedDictionary<int, int> sortedDic = new SortedDictionary<int, int>(); // ソート用Dic

            if ("DEL".Equals(actionType))
            {
                // 対象行削除
                this._originalBLGoodsCodeMap.Remove(salesRowNo);

                foreach (int key in this._originalBLGoodsCodeMap.Keys)
                {
                    sortedDic.Add(key, this._originalBLGoodsCodeMap[key]);
                }

                int i = 1;
                foreach (int key in sortedDic.Keys)
                {
                    tempDic.Add(i, sortedDic[key]);
                    i++;
                }

                if (tempDic != null)
                {
                    this._originalBLGoodsCodeMap.Clear();
                    this._originalBLGoodsCodeMap = tempDic;
                }
            }
            else if ("INSERT".Equals(actionType))
            {
                foreach (int key in this._originalBLGoodsCodeMap.Keys)
                {
                    sortedDic.Add(key, this._originalBLGoodsCodeMap[key]);
                }

                tempDic.Add(salesRowNo, 0);

                int i = 1;
                foreach (int key in sortedDic.Keys)
                {
                    if (tempDic.ContainsKey(i))
                    {
                        // レコードが存在する場合、挿入行なので次行へセット
                        i++;
                        tempDic.Add(i, sortedDic[key]);
                    }
                    else
                    {
                        tempDic.Add(i, sortedDic[key]);
                    }
                    i++;
                }

                if (tempDic != null)
                {
                    this._originalBLGoodsCodeMap.Clear();
                    this._originalBLGoodsCodeMap = tempDic;
                }
            }
            else if ("PASTE".Equals(actionType))
            {
                if (this._originalBLGoodsCodeMap.ContainsKey(salesRowNo))
                {
                    if (this._originalBLGoodsCodeMap.ContainsKey(originRowNo))
                    {
                        this._originalBLGoodsCodeMap[salesRowNo] = this._originalBLGoodsCodeMap[originRowNo];
                    }
                }
                else
                {
                    if (this._originalBLGoodsCodeMap.ContainsKey(originRowNo))
                    {
                        this._originalBLGoodsCodeMap.Add(salesRowNo, this._originalBLGoodsCodeMap[originRowNo]);
                    }
                }
            }
            else if ("ANNOTATION".Equals(actionType))
            {
                if (this._originalBLGoodsCodeMap.ContainsKey(salesRowNo))
                {
                    this._originalBLGoodsCodeMap[salesRowNo] = 0;
                }
                else
                {
                    this._originalBLGoodsCodeMap.Add(salesRowNo, 0);
                }
                
            }
            else if ("LINEDISCOUNT".Equals(actionType))
            {
                if (this._originalBLGoodsCodeMap.ContainsKey(salesRowNo))
                {
                    this._originalBLGoodsCodeMap[salesRowNo] = 0;
                }
                else
                {
                    this._originalBLGoodsCodeMap.Add(salesRowNo, 0);
                }
            }

        }

        // ADD 2013/04/09 SCM障害№10507,10508対応 ------------------------------------>>>>>
        /// <summary>
        /// SCM回答用BLコードリスト操作処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="actionType"></param>
        public void SettingOriginalBLGoodsCodeMapKey(List<SalesDetail> salesDetailList)
        {
            // SCM回答用BLコードリストクリア
            this._originalBLGoodsCodeMap.Clear();


            for (int i = 0; i < salesDetailList.Count; i++)
            {
                int row = i + 1;     // 明細行番号
                if (this._originalBLGoodsCodeMap.ContainsKey(row))
                {
                    this._originalBLGoodsCodeMap[row] = salesDetailList[i].BLGoodsCode;
                }
                else
                {
                    this._originalBLGoodsCodeMap.Add(row, salesDetailList[i].BLGoodsCode);
                }
            }
        }
        // ADD 2013/04/09 SCM障害№10507,10508対応 ------------------------------------<<<<<

        // ADD 2013/04/19 SCM障害№10522対応 --------------------------------------------------->>>>>
        /// <summary>
        /// SCM回答用BLコードリスト操作処理（オーバーロード）
        /// </summary>
        /// <param name="scmAnswerList"></param>
        public void SettingOriginalBLGoodsCodeMapKey(List<UserSCMOrderAnswerRecord> scmAnswerList)
        {
            // SCM回答用BLコードリストクリア
            this._originalBLGoodsCodeMap.Clear();


            for (int i = 0; i < scmAnswerList.Count; i++)
            {
                int row = i + 1;     // 明細行番号
                if (this._originalBLGoodsCodeMap.ContainsKey(row))
                {
                    this._originalBLGoodsCodeMap[row] = scmAnswerList[i].BLGoodsCode;
                }
                else
                {
                    this._originalBLGoodsCodeMap.Add(row, scmAnswerList[i].BLGoodsCode);
                }
            }
        }
        /// <summary>
        /// SCM回答用BLコードリストクリア処理
        /// </summary>
        /// <param name=""></param>
        public void ClearOriginalBLGoodsCodeMapKey()
        {
            // SCM回答用BLコードリストクリア
            this._originalBLGoodsCodeMap.Clear();
        }
        // ADD 2013/04/19 SCM障害№10522対応 ---------------------------------------------------<<<<<

        // --- ADD 2013/11/15 Y.Wakita ---------->>>>>
        /// <summary>
        /// 出荷数マイナス行が売上明細行オブジェクトが存在するかどうかをチェックします。
        /// </summary>
        /// <returns>true:存在する false:存在しない</returns>
        public bool ExistSalesDetailMinusCount_Estimate()
        {
            bool exist = false;

            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                if ((row.EditStatus != ctEDITSTATUS_GoodsDiscount) && (row.ShipmentCntDisplay < 0))
                {
                    exist = true;
                    break;
                }
            }

            return exist;
        }
        // --- ADD 2013/11/15 Y.Wakita ----------<<<<<
        // --- ADD K2014/01/14 Y.Wakita ---------->>>>>
        #region フタバ個別対応
        /// <summary>
        /// 特定得意先が在庫マスタに登録されているか判定する。
        /// </summary>
        /// <param name="warehouseCode">倉庫コード</param>
        /// <param name="goodsNo">商品コード</param>
        /// <param name="goodsMakerCode">メーカーコード</param>
        public bool SalesDetailStockInfoCustomer(SalesInputDataSet.SalesDetailDataTable salesDetailDataTable, string custWarehouseCd)
        {
            bool retFlg = false;

            foreach (SalesInputDataSet.SalesDetailRow row in salesDetailDataTable)
            {
                if (row.WarehouseCode.Trim() != string.Empty)
                {
                    // --- ADD K2014/02/18 Y.Wakita ---------->>>>>
                    // 値引きデータの場合、印刷対象外とする
                    if ((row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount) ||
                        (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount))
                    {
                        continue;
                    }
                    // --- ADD K2014/02/18 Y.Wakita ----------<<<<<
                    GoodsUnitData goodsUnitData = this.GetGoodsUnitDataDic(row.GoodsMakerCd, row.GoodsNo, null);

                    // 在庫マスタ
                    foreach (Stock stock in goodsUnitData.StockList)
                    {
                        if (stock.WarehouseCode.Trim() == custWarehouseCd.Trim())
                        {
                            retFlg = true;
                            break;
                        }
                    }
                }
            }

            return retFlg;
        }

        public bool SalesDetailAcceptAnOrderStockInfoCustomer(SalesInputDataSet.SalesDetailAcceptAnOrderDataTable salesDetailAcceptAnOrderDataTable, string custWarehouseCd)
        {
            bool retFlg = false;

            foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow row in salesDetailAcceptAnOrderDataTable)
            {
                if (row.WarehouseCode.Trim() != string.Empty)
                {
                    GoodsUnitData goodsUnitData = this.GetGoodsUnitDataDic(row.GoodsMakerCd, row.GoodsNo, null);

                    // 在庫マスタ
                    foreach (Stock stock in goodsUnitData.StockList)
                    {
                        if (stock.WarehouseCode.Trim() == custWarehouseCd.Trim())
                        {
                            retFlg = true;
                            break;
                        }
                    }
                }
            }

            return retFlg;
        }
        #endregion
        // --- ADD K2014/01/14 Y.Wakita ----------<<<<<

        // --- ADD 2014/09/30 Y.Wakita 仕掛№10667 システムテスト障害№5---------->>>>>
        #region SCM受注明細データ(回答)発注数再設定処理(再問合せ用)
        /// <summary>
        /// 発注数再設定処理(再問合せ用)
        /// </summary>
        /// <param name="scmAnswerList"></param>
        /// <param name="scmDetailIList"></param>
        private void ResettingOrderCount(List<UserSCMOrderAnswerRecord> scmAnswerList, IList<ISCMOrderDetailRecord> scmDetailIList)
        {
            foreach (UserSCMOrderAnswerRecord scmAns in scmAnswerList)
            {
                foreach (ISCMOrderDetailRecord rec in scmDetailIList)
                {
                    // UPD 2015/06/25 商品保証課Redmine#4149①対応 ------------------>>>>>
                    //if ((scmAns.InquiryNumber == rec.InquiryNumber) &&
                    //    (scmAns.InqRowNumber == rec.InqRowNumber))
                    // 問合せ番号・問合せ行番号・問合せ行番号枝番で対象データを検索し発注数を再設定する
                    if ((scmAns.InquiryNumber == rec.InquiryNumber) &&
                        (scmAns.InqRowNumber == rec.InqRowNumber) &&
                        (scmAns.InqRowNumDerivedNo == rec.InqRowNumDerivedNo))
                    // UPD 2015/06/25 商品保証課Redmine#4149①対応 ------------------<<<<<
                    {
                        scmAns.SalesOrderCount = rec.SalesOrderCount;
                        break;
                    }
                }
            }
        }
        #endregion
        // --- ADD 2014/09/30 Y.Wakita 仕掛№10667 システムテスト障害№5----------<<<<<

        // ADD 2015/06/18 豊沢 SCM高速化 Redmine3941対応 --------------------->>>>>
        /// <summary>
        /// 売上データ補正処理
        /// </summary>
        /// <param name="salesDataList">売上データ一覧</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Update Note : 2018/04/16 田建委</br>
        /// <br>管理番号    : 11470007-00</br>
        /// <br>            : SFへの回答データに問い合わせデータの新BLコード等を設定する。</br>
        /// </remarks>
        private void AdjustSCMAnswerData(CustomSerializeArrayList salesDataList)
        {
            ArrayList answerList = null;
            ArrayList dataObjectList;
            bool addFlag = false;
            SCMAcOdrDataWork odrDataWork = null;
            ArrayList tempList = null;
            string key = string.Empty;
            // CM受注データが存在するSCM受注明細データ(問合せ・発注)のマップ
            Dictionary<string, ISCMOrderDetailRecord> autoAnsMthdDetailMap = new Dictionary<string, ISCMOrderDetailRecord>();

            if (this._scmDetailIListSvForWebCheck == null)
            {
                return;
            }

            // SCM受注明細データ(問合せ・発注)単位で処理を行う
            foreach (ISCMOrderDetailRecord detailRecord in this._scmDetailIListSvForWebCheck)
            {
                //key = string.Format("{0}/{1}/{2}", detailRecord.InquiryNumber, detailRecord.InqRowNumber, detailRecord.InqRowNumDerivedNo);//DEL 2015/06/30146 松本 Redmine3941対応
                // UPD 2015/07/08 豊沢 SCM高速化 Redmine4222対応 --------------------->>>>>
                //key = string.Format("{0}/{1}/{2}/{3}/{4}", detailRecord.InquiryNumber, detailRecord.InqRowNumber, detailRecord.InqRowNumDerivedNo, detailRecord.GoodsNo, detailRecord.GoodsMakerCd);//ADD 2015/06/30146 松本 Redmine3941対応
                key = string.Format("{0}/{1}/{2}/{3}/{4}/{5}/{6}/{7}",
                    detailRecord.EnterpriseCode,      // 企業コード
                    detailRecord.InqOriginalEpCd.Trim(),     // 問合せ元企業コード //@@@@20230303
                    detailRecord.InqOriginalSecCd,    // 問合せ元拠点コード
                    detailRecord.InqOtherEpCd,        // 問合せ先企業コード
                    detailRecord.InqOtherSecCd,       // 問合せ先拠点コード
                    detailRecord.InquiryNumber,       // 問合せ番号
                    detailRecord.InqRowNumber,        // 問合せ行番号
                    detailRecord.InqRowNumDerivedNo); // 問合せ行番号枝番
                // UPD 2015/07/08 豊沢 SCM高速化 Redmine4222対応 ---------------------<<<<<

                if (!autoAnsMthdDetailMap.ContainsKey(key))
                {
                    // SCM受注データが存在する場合のみ、SCM受注明細データ(問合せ・発注)を保持する
                    addFlag = false;
                    foreach (ISCMOrderHeaderRecord headerRecord in this._scmHeaderIListSvForWebCheck)
                    {
                        if (headerRecord.InquiryNumber == detailRecord.InquiryNumber &&
                            headerRecord.InqOriginalEpCd.Trim().Equals(detailRecord.InqOriginalEpCd.Trim()) &&
                            headerRecord.InqOriginalSecCd.Trim().Equals(detailRecord.InqOriginalSecCd.Trim()) &&
                            headerRecord.InqOtherEpCd.Trim().Equals(detailRecord.InqOtherEpCd.Trim()) &&
                            // UPD 2015/07/08 豊沢 SCM高速化 Redmine4222対応 --------------------->>>>>
                            //headerRecord.InqOtherSecCd.Trim().Equals(detailRecord.InqOtherSecCd.Trim()) &&
                            //headerRecord.AutoAnsMthd.Equals(1))
                            headerRecord.InqOtherSecCd.Trim().Equals(detailRecord.InqOtherSecCd.Trim()))
                            // UPD 2015/07/08 豊沢 SCM高速化 Redmine4222対応 ---------------------<<<<<
                        {
                            addFlag = true;
                            break;
                        }
                    }
                    if (addFlag)
                    {
                        autoAnsMthdDetailMap.Add(key, detailRecord);
                    }
                }
            }

            foreach (object salesDataObj in salesDataList)
            {
                // 売上データ一覧よりSCM受注明細データ(回答)のリストを検索
                dataObjectList = salesDataObj as ArrayList;
                if (dataObjectList == null)
                {
                    continue;
                }

                answerList = null;
                odrDataWork = null;
                foreach (object obj in dataObjectList)
                {
                    // SCM受注データを検索
                    if (odrDataWork == null)
                    {
                        odrDataWork = obj as SCMAcOdrDataWork;
                    }

                    if (answerList == null)
                    {
                        tempList = obj as ArrayList;
                        if (tempList != null && tempList.Count > 0 && tempList[0] is SCMAcOdrDtlAsWork)
                        {
                            answerList = tempList;
                        }
                    }
                }

                // DEL 2015/07/08 豊沢 SCM高速化 Redmine4222対応 --------------------->>>>>
                // 回答対象のSCM受注データが存在し自動回答方式が新方式の場合のみ処理継続
                //if (odrDataWork == null || !odrDataWork.AutoAnsMthd.Equals(1))
                //{
                //    continue;
                //}
                // DEL 2015/07/08 豊沢 SCM高速化 Redmine4222対応 --------------------->>>>>

                if (answerList != null)
                {
                    foreach (SCMAcOdrDtlAsWork answerWork in answerList)
                    {

                        //key = string.Format("{0}/{1}/{2}", answerWork.InquiryNumber, answerWork.InqRowNumber, answerWork.InqRowNumDerivedNo);//DEL 2015/06/30146 松本 Redmine3941対応
                        // UPD 2015/07/08 豊沢 SCM高速化 Redmine4222対応 --------------------->>>>>
                        //key = string.Format("{0}/{1}/{2}/{3}/{4}", answerWork.InquiryNumber, answerWork.InqRowNumber, answerWork.InqRowNumDerivedNo, answerWork.GoodsNo, answerWork.GoodsMakerCd);//ADD 2015/06/30146 松本 Redmine3941対応
                        key = string.Format("{0}/{1}/{2}/{3}/{4}/{5}/{6}/{7}", 
                            answerWork.EnterpriseCode,      // 企業コード
                            answerWork.InqOriginalEpCd.Trim(),     // 問合せ元企業コード //@@@@20230303
                            answerWork.InqOriginalSecCd,    // 問合せ元拠点コード
                            answerWork.InqOtherEpCd,        // 問合せ先企業コード
                            answerWork.InqOtherSecCd,       // 問合せ先拠点コード
                            answerWork.InquiryNumber,       // 問合せ番号
                            answerWork.InqRowNumber,        // 問合せ行番号
                            answerWork.InqRowNumDerivedNo); // 問合せ行番号枝番
                        // UPD 2015/07/08 豊沢 SCM高速化 Redmine4222対応 ---------------------<<<<<

                        // 品番、メーカーコードが一致するSCM受注データが存在する場合のみ処理継続
                        if (!autoAnsMthdDetailMap.ContainsKey(key))
                        {
                            continue;
                        }

                        answerWork.BLGoodsCode = autoAnsMthdDetailMap[key].BLGoodsCode; // BL商品コード
                        //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ---------->>>>>
                        answerWork.InqBlUtyPtThCd = autoAnsMthdDetailMap[key].InqBlUtyPtThCd; // 問発BL統一部品コード(スリーコード版)
                        answerWork.InqBlUtyPtSbCd = autoAnsMthdDetailMap[key].InqBlUtyPtSbCd; // 問発BL統一部品サブコード
                        //----- ADD 2018/04/16 田建委 SCM新BLコード対応 ----------<<<<<

                        // 回答対象のSCM受注データが存在し自動回答方式が新方式の場合のみ処理継続
                        if (odrDataWork == null || !odrDataWork.AutoAnsMthd.Equals(1))
                        {
                            continue;
                        }
                        // UPD 2015/07/08 豊沢 SCM高速化 Redmine4222対応 ---------------------<<<<<

                        // 品番、メーカーコードが一致するSCM受注明細データ(回答)に
                        // SCM受注明細データ(問合せ・発注)のデータをコピー
                        answerWork.GoodsSpecialNote = autoAnsMthdDetailMap[key].GoodsSpecialNote;
                        answerWork.GoodsSpecialNtForFac = autoAnsMthdDetailMap[key].GoodsSpecialNtForFac;
                        answerWork.GoodsSpecialNtForCOw = autoAnsMthdDetailMap[key].GoodsSpecialNtForCOw;
                        answerWork.PrmSetDtlNo2 = autoAnsMthdDetailMap[key].PrmSetDtlNo2;
                        answerWork.PrmSetDtlName2 = autoAnsMthdDetailMap[key].PrmSetDtlName2;
                        answerWork.PrmSetDtlName2ForFac = autoAnsMthdDetailMap[key].PrmSetDtlName2ForFac;
                        answerWork.PrmSetDtlName2ForCOw = autoAnsMthdDetailMap[key].PrmSetDtlName2ForCOw;
                        answerWork.MkrSuggestRtPric = autoAnsMthdDetailMap[key].MkrSuggestRtPric;
                        answerWork.OpenPriceDiv = autoAnsMthdDetailMap[key].OpenPriceDiv;
                    }
                }
            }
        }
        // ADD 2015/06/18 豊沢 SCM高速化 Redmine3941対応 ---------------------<<<<<
    }
    // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 ----->>>>>
    #region 帳票印刷スレッド情報クラス
    /// <summary>
    /// 帳票印刷スレッド情報クラス
    /// </summary>
    /// <remarks>
    /// <br>Date         : 2021/07/16</br>
    /// <br>Update Note  : PMKOBETSU-4154 売上伝票印刷エラー対応</br>
    /// <br>Programmer   : 陳艶丹</br>
    /// </remarks>
    public class PringThreadInfo
    {
        // 印刷スレッド開始時間
        private Int64 _startTime;
        // 印刷スレッド対象
        private Thread _printThread;
        // 伝票番号リスト
        private List<SalesSlipPrintCndtn.SalesSlipKey> _salesSlipKeyList;
        // --- ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 -----<<<<<
        // リトライ回数
        private Int32 _retryCnt;
        // 印刷情報パラメータ
        private SalesSlipPrintCndtn _salesSlipPrintCndtn;
        // 印刷リトライフラグ
        private bool _printRetryFlg;
        // --- ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 -----<<<<<
        // --- ADD ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
        // PDF印刷ラグ
        private bool _pdfPrintFlg;
        //売上データ
        private Dictionary<string, SalesSlipWork> _salesSlipWorkDic; 
        //売上明細データ
        private Dictionary<string, ArrayList> _salesDetailWorkDic;
        // --- ADD ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<

        // 印刷スレッド開始時間
        public Int64 StartTime
        {
            get { return _startTime; }
            set { _startTime = value; }
        }

        // 印刷スレッド対象
        public Thread PrintThread
        {
            get { return _printThread; }
            set { _printThread = value; }
        }

        // 伝票番号リスト
        public List<SalesSlipPrintCndtn.SalesSlipKey> SalesSlipKeyList
        {
            get { return _salesSlipKeyList; }
            set { _salesSlipKeyList = value; }
        }
        // --- ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 -----<<<<<
        // リトライ回数
        public Int32 RetryCnt
        {
            get { return _retryCnt; }
            set { _retryCnt = value; }
        }

        // 印刷情報パラメータ
        public SalesSlipPrintCndtn SalesSlipPrintCndtn
        {
            get { return _salesSlipPrintCndtn; }
            set { _salesSlipPrintCndtn = value; }
        }

        // 印刷リトライフラグ
        public bool PrintRetryFlg
        {
            get { return _printRetryFlg; }
            set { _printRetryFlg = value; }
        }
        // --- ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 -----<<<<<
        // --- ADD ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
        //売上データ
        public Dictionary<string, SalesSlipWork> SalesSlipWorkDic
        {
            get { return _salesSlipWorkDic; }
            set { _salesSlipWorkDic = value; }
        }

        //売上明細データ
        public Dictionary<string, ArrayList> SalesDetailWorkDic
        {
            get { return _salesDetailWorkDic; }
            set { _salesDetailWorkDic = value; }
        }

        // PDF印刷フラグ
        public bool PdfPrintFlg
        {
            get { return _pdfPrintFlg; }
            set { _pdfPrintFlg = value; }
        }
        // --- ADD ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<
    }
    #endregion
    // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 -----<<<<<

    //----- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応------->>>>>
    /// <summary>
    /// 電子帳簿受け渡し用フォルダ設定クラス
    /// </summary>
    /// <remarks>
    /// <br>Note       : 電子帳簿受け渡し用フォルダ設定クラス</br>
    /// <br>Programmer : 陳艶丹</br>
    /// <br>Date       : 2022/04/26</br>
    /// <br></br>
    /// </remarks>
    [Serializable]
    public class EBooksLinkSetInfo
    {
        // 電子帳簿受け渡しフォルダ
        private string _eBooksFolder;

        // 取引先リスト受け渡しフォルダ
        private string _customFolder;

        /// <summary>
        /// 電子帳簿受け渡し用フォルダ設定クラス
        /// </summary>
        public EBooksLinkSetInfo()
        {

        }

        /// <summary>電子帳簿受け渡しフォルダ</summary>
        public string EBooksFolder
        {
            get { return this._eBooksFolder; }
            set { this._eBooksFolder = value; }
        }

        /// <summary>取引先リスト受け渡しフォルダ</summary>
        public string CustomFolder
        {
            get { return this._customFolder; }
            set { this._customFolder = value; }
        }
    }
    //----- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応-------<<<<<
}