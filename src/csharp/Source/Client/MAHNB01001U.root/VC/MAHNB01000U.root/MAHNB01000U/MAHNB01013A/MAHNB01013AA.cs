using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Collections;
using System.Threading;
using System.Windows.Forms;
using System.Diagnostics; // 2010/05/30

using System.Xml;
using System.Xml.Serialization;
using Broadleaf.Windows.Forms;
using Broadleaf.Library.Windows.Forms;
using Broadleaf.Application.UIData;
using Broadleaf.Library.Resources;
using Broadleaf.Library.Text;
using Broadleaf.Application.Common;
using Broadleaf.Application.Remoting.ParamData;
using System.IO;
using Broadleaf.Application.Resources;
using Broadleaf.Application.Controller.Facade;
using Broadleaf.Application.Remoting;
using Broadleaf.Application.Remoting.Adapter;
using Broadleaf.Library.Globarization;
using System.Runtime.InteropServices; // ADD K2015/04/01 高騁 森川部品個別依頼
using System.Reflection;// ADD 高騁 K2014/02/17
using System.Reflection; // ADD K2015/08/14 黄興貴 Redmine#47213
using System.Timers; //ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応


namespace Broadleaf.Application.Controller
{
    /// <summary>
    /// 売上伝票入力(Delphi)アクセスクラス
    /// </summary>
    /// <remarks>
    /// <br>Note       : 売上伝票入力(Delphi)の制御全般を行います。</br>
    /// <br>Programmer : LDNS</br>
    /// <br>Date       : 2010/05/29</br>
    /// <br></br>
    /// <br>Update Note : 2010/05/30 20056 對馬 大輔 </br>
    /// <br>              成果物統合(６次改良＋７次改良＋自由検索＋SCM)</br>
    /// <br>Update Note:  2010/06/02 譚洪 PM.NS障害・改良対応（７月リリース案件）</br>
    /// <br></br>
    /// <br>Update Note:  2010/06/10 20056 對馬 大輔</br>
    /// <br>           :  ・新規(F9)、伝票発行後、の画面クリア時に検索モードを売上全体設定の初期値に従うように変更</br>
    /// <br>           :  ・標準価格選択にて純正価格を選択し、伝票種別を変更すると優良価格で売価が再計算されてしまう件の対応</br>
    /// <br>           :  ・標準価格選択にて純正価格を選択し、出荷数を変更すると優良価格で売価が再計算されてしまう件の対応</br>
    /// <br>Update Note: 2010/06/12 22018 鈴木 正臣</br>
    /// <br>             携帯メール(QRｺｰﾄﾞ)対応の組み込み</br>
    /// <br></br>
    /// <br>Update Note: 2010/06/16 22018 鈴木 正臣</br>
    /// <br>             オフライン対応の組み込み</br>
    /// <br>Update Note: 2010/06/26 李占川 </br>
    /// <br>             ①BLコード変換処理のロジックの削除</br>
    /// <br>             ②ＡＬＴ＋ＴＡＢで切替えした時のアイコン問題の修正</br>
    /// <br>Update Note : 2010/06/09　20056 對馬 大輔</br>
    /// <br>              仕入先変更時、数量が固定で再セットされる不具合対応</br> 
    /// <br>Update Note: 2010/07/01 張凱 </br>
    /// <br>             入力せずにガイドからBO区分を選択すると、発注データが作成されません。</br>
    /// <br>             納品区分・H納品区分・指定拠点が変更された場合は、すべての同一発注先の明細に対して、設定内容を反映する</br>
    /// <br>Update Note: 2010/07/01 李占川 </br>
    /// <br>             Redmine#10768の対応。</br>
    /// <br>Update Note: 2010/07/01 呉元嘯 Redmine#11016の対応</br>
    /// <br>Update Note: 2010/07/09 呉元嘯 PM.NS障害・改良対応 </br>
    /// <br>             仕入先ガイドを表示して、戻るボタンでキャンセル時は仕入先コードを書き換え無いように修正。</br>
    /// <br>Update Note: 2010/07/14 張凱 PM.NS障害・改良対応 </br>
    /// <br>             削除メッセージに修正。</br>
    /// <br>Update Note: 2010/07/21 20056 對馬 大輔 </br>
    /// <br>             用品入力で品名・メーカー変更時の明細情報クリア処理変更(一部内容をクリアしない)</br>
    /// <br>Update Note: 2010/07/22 20056 對馬 大輔 </br>
    /// <br>             ツールバー設定情報保存ファイル名称を変更</br>
    /// <br>Update Note: 2010/07/30 20056 對馬 大輔 </br>
    /// <br>             SCMクライアント受信対応</br>
    /// <br>Update Note: 2010/08/13 譚洪 </br>
    /// <br>             障害・改良対応(８月リリース案件)</br>
    /// <br>Update Note: 2010/08/17 22018 鈴木 正臣</br>
    /// <br>             締次ロック対応（メッセージ表示）</br>
    /// <br>Update Note: 2010/08/06 20056 對馬 大輔 </br>
    /// <br>             担当者、受注者、発行者の表示制御を変更</br>
    /// <br>Update Note: 2010/08/23 20056 對馬 大輔 </br>
    /// <br>             ①得意先コードをクリアした場合の売掛区分の初期化デフォルト値を変更</br>
    /// <br>             ②得意先ガイドをキャンセルした場合の初期化方法修正</br>
    /// <br>Update Note: 2010/08/30 20056 對馬 大輔 </br>
    /// <br>             税率設定範囲チェック追加</br>
    /// <br>Update Note: 2010/09/06 譚洪 </br>
    /// <br>             売価率変更時の原価チェック変更</br>
    /// <br>Update Note: 2010/09/14 20056 對馬 大輔 </br>
    /// <br>             品名再表示区分の表示仕様変更(再表示するの場合でも、BLコードが未入力時は再表示しない)</br>
    /// <br>Update Note: 2010/09/15 20056 對馬 大輔 </br>
    /// <br>             仕入伝票番号入力時、仕入ヘッダ情報をクリアしないように変更</br>
    /// <br>Update Note: 2010/09/19 譚洪 </br>
    /// <br>             PM.NS障害・改良対応（９月リリース案件）</br>
    /// <br>Update Note: 2010/09/24 20056 對馬 大輔 </br>
    /// <br>             デバッグ起動時、例外エラーが発生しないように修正</br>
    /// <br>Update Note: 2010/09/27 20056 對馬 大輔</br>
    /// <br>             ①売仕入同時入力データの仕入情報を更新した場合、正常に登録できるように修正</br>
    /// <br>             ②メーカー未入力でも「一括複写」「前行複写」を可能とする</br>
    /// <br>Update Note: 2010/10/28 22018 鈴木 正臣</br>
    /// <br>             ①クリア処理時の伝票区分の更新処理を修正。</br>
    /// <br>Update Note: 2010/11/08 20056 對馬 大輔</br>
    /// <br>             ①既に発行済みの売上伝票の内容が別の内容に書き換えられてしまう件の対応</br>
    /// <br>Update Note: 2010/11/19 20056 對馬 大輔</br>
    /// <br>             ①原価率が設定されている状態で定価を変更した場合、原単価が更新されない件の対応</br>
    /// <br>               発生条件：定価が掛率算出されていない状態で定価を変更した場合</br>
    /// <br>Update Note: 2010/11/26 20056 對馬 大輔</br>
    /// <br>             保存直前に消費税転嫁方式が非課税以外で、税率がゼロの場合、税率の再取得および再計算を行う</br>
    /// <br>Update Note: 2010/11/30 20056 對馬 大輔</br>
    /// <br>             商品自動登録時の価格開始日の設定方法変更</br>
    /// <br>Update Note: 2010/12/02 20056 對馬 大輔</br>
    /// <br>             設定(O)の削除変更を取り消し</br>
    /// <br>Update Note: 2011/01/31 21024 佐々木 健</br>
    /// <br>             SCM改良(マーケ検証結果対応)</br>
    /// <br>             ①納期設定マスタのレイアウト変更対応</br>
    /// <br>             ②見積時にも、回答納期を入力出来るように変更</br>
    /// <br>             ③回答送信のユーザーインターフェース変更(保存の流れを修正)</br>
    /// <br>             ④ツールバーの表示制御の修正</br>
    /// <br>Update Note: 2011/02/01 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)一部回答判定対応：SCM回答時、回答明細から判定し、回答区分に一部回答をセットするように変更する</br>
    /// <br>              2)PS管理番号保持対応：PS管理番号を正常にデータ登録／読込するように修正する</br>
    /// <br>              3)追加回答対応：SCM回答時、明細を追加して回答可能とする</br>
    /// <br>              4)値引き回答対応：SCM回答時、行値引き／商品値引き行を含んでいても回答可能とする</br>
    /// <br>Update Note: 2011/02/10 22018 鈴木 正臣</br>
    /// <br>             数量に応じた掛率がヒットしない件の修正</br>
    /// <br>Update Note: 2011/02/11 曹文傑</br>
    /// <br>             伝票内容が差し替わってしまう件の対応</br>
    /// <br>Update Note: 2011/02/16 22018 鈴木 正臣</br>
    /// <br>             ①標準価格ゼロで数量変更時に標準価格が再セットされる件の対応。（⇒再セットしない）</br>
    /// <br>             ②手入力で売価率を変更後、１回目に数量変更時に売価率が再セットされない件の対応。（⇒２回目以降と同様に再セットする）</br>
    /// <br>             ③標準価格ゼロ・売価率ゼロ・売単価ゼロ以外のとき数量変更すると売単価がゼロになる件の対応。（⇒売単価はそのままにする）</br>
    /// <br>             ④売価率を変更後、F5:ガイドで基準定価が表示されない件の対応。（⇒標準価格が変更されていなければ売価率が変更されても基準定価を表示する）</br>
    /// <br>             ⑤標準価格ゼロ・売価率ゼロ以外手入力後、数量を変更しても売価率が再セットされない件の対応。（⇒売価率を再セットする）</br>
    /// <br>Update Note: 2011/02/18 21024 佐々木 健</br>
    /// <br>             SCM対応</br>
    /// <br>Update Note: 2011/03/04 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)CTIによる得意先情報表示時、担当者、受注者、発行者コードがゼロの場合、設定情報を参照しセットを行うように修正</br>
    /// <br>              2)CITからの起動時、初期フォーカス位置を型式指定番号とする</br>
    /// <br>              3)見積伝票呼出時、ＳＣＭデータが存在する場合、全明細を画面表示し、取消明細は送信しないように変更する</br>
    /// <br>                ※既存処理の売上伝票呼出時と同様とする</br>
    /// <br>Update Note: 2011/03/09 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)設定画面に「回答処理」を表示しないように修正</br>
    /// <br>              2)問合せ番号と売上伝票番号が存在する伝票を修正呼出ししても、伝票の対象行数ないで行追加可能とする
    /// <br>Update Note: 2011/03/14 20056 對馬 大輔</br>
    /// <br>             SCM対応</br>
    /// <br>              1)回答送信後の各処理は、送信完了後処理するように修正</br>
    /// <br>Update Note: 2011/03/28 曹文傑</br>
    /// <br>             仕入日変更時の価格再取得および価格再取得メッセージの表示を行わないように修正する</br>
    /// <br>Update Note: 2011/04/13 曹文傑</br>
    /// <br>             明細複数選択行を削除可能とする</br>
    /// <br>Update Note: 2011/05/25 20056 對馬 大輔</br>
    /// <br>             SCM改良</br>
    /// <br>              1)送信確認画面に指示書番号の入力を追加</br>
    /// <br>              2)フッタ部に指示書番号の入力を追加</br>
    /// <br>              3)販売区分の入力を販売区分表示区分で制御</br>
    /// <br>Update Note: 2011/05/30 曹文傑</br>
    /// <br>             キャンペーン売価から算出された明細で「数量のみ」変更した場合は売単価の再計算をしないように変更する。</br>
    /// <br>             キャンペーン売価を取得するように変更</br>
    /// <br>UpdateNote : 2011/07/06 譚洪 Redmine#22777 BLコードを変更時に価格情報の再取得メッセージを出さないように仕様変更</br>
    /// <br>UpdateNote : 2011/07/13 豆昌紅 リサイクル区分はＲＣへ合わせるに仕様変更</br>
    /// <br>UpdateNote : 2011/07/15 陳艶丹 SF連携している見積伝票は削除してた状態で発注または再問合せが来た場合、既存伝票を呼出せずに、通常の連携と同様に展開の対応</br>
    /// <br>UpdateNote : 2011/07/19 張栄波 ＣＭＴ通信状態で売上を送信した場合、落ちるオペレーションが発生対応</br>
    /// <br>UpdateNote : 2011/07/18 朱宝軍 回答区分の追加</br>
    /// <br>UpdateNote : 2011/07/26 朱宝軍 Redmine#23212 プロジェクトNo1 PCC for NS（SCM）改良 プロジェクト課題管理表_No8</br>
    /// <br>UpdateNote : 2011/07/28 豆昌紅 Redmine#23148の⑥対応</br>
    /// <br>UpdateNote : 2011/07/29 譚洪 Redmine#23315 BLコード検索でキャンペーン対象の優良品を選択したとき、値引、売価額が反映しない為の修正</br>
    /// <br>Update Note: 2011/07/20 連番1028 Redmine#22936許雁波</br>
    /// <br>             仕入・出荷後数表示区分(明細算出後在庫数表示区分)について修正</br>
    /// <br>Update Note: 2011/07/25 譚洪 連番No.16 掛率設定に関して、00全社共通 と 拠点の掛率の優先順位の同等化（WAN運用）の対応</br>
    /// <br>Update Note: 2011/07/29 譚洪</br>
    /// <br>             連番1026売上伝票入力（ハイブリッドモード）で入力粗利チェックを”再入力”に設定しているが有る条件（粗利率がマイナス）の場合に伝票発行出来てします</br>
    /// <br>Update Note: 2011/08/09 連番4,979 梁森東</br>
    /// <br>               ユーザー設定の入力制御にアクティブ色項目を追加</br>
    /// <br>Update Note: 2011/08/08 連番1002 許雁波 10704766-00 </br>
    /// <br>             「入力後のカーソル位置」のドロプダアウを追加</br>
    /// <br>Update Note: 2011/08/02 連番1003 許雁波 10704766-00 </br>
    /// <br>             日付修正ファンクションボタンを追加</br>
    /// <br>Update Note: 2011/08/18 連番729 許雁波 10704766-00 </br>
    /// <br>             明細貼付ファンクションボタンを追加</br>
    /// <br>Update Note: 2011/08/20 連番882 徐錦山 10704766-00 </br>
    /// <br>             元定価が表示のを追加</br>
    /// <br>             連番1026 売上伝票入力（ハイブリッドモード）で入力粗利チェックを”再入力”に設定しているが有る条件（粗利率がマイナス）の場合に伝票発行出来てします</br>
    /// <br>UpdateNote : 2011/08/03 豆昌紅 Redmine#23364の対応</br>
    /// <br>Update Note: 2011/08/15 Redmine#23578 譚洪 連番16での掛率算出の修正内容の対応</br>
    /// <br>UpdateNote : 2011/08/12 譚洪 Redmine#23554 キャンペーンの売価「売価率、値引率、売価額」が設定されている場合は、掛率マスタの売価の設定をクリアするように仕様変更の対応</br>
    /// <br>UpdateNote : K2011/08/12 yangyi</br>
    /// <br>管理番号   : 10703874-00</br>
    /// <br>作成内容   : イスコ個別対応</br>  
    /// <br>UpdateNote : 2011/08/15 譚洪 Redmine#23554 キャンペーンの売価「売価率、値引率、売価額」が設定されている場合は、掛率マスタの売価の設定をクリアするように仕様変更の対応</br>
    /// <br>Update Note: 2011/08/24 20056 對馬 大輔</br>
    /// <br>             改良暫定対応</br>
    /// <br>              1)販売区分変更時、再計算確認画面表示せずに再計算を行うように修正</br>
    /// <br>              2)用品入力時、出荷数１を表示するように修正</br>
    /// <br>              3)売単価ゼロの場合、粗利チェックを行わないように修正</br>
    /// <br>Update Note: 2011/08/30 yangmj</br>
    /// <br>             Redmine#24110 伝票備考の文字数の修正内容の対応</br>
    /// <br>UpdateNote : 2011/08/10 qijh SCM対応 - 拠点管理(10704767-00) 送信済のチェック</br>
    /// <br>Update Note: 2011/09/01 連番681 yangmj 10704766-00 </br>
    /// <br>             Redmine#23723 提供定価とユーザー定価が一致しない場合、文字色の改修</br>
    /// <br>UpdateNote : K2011/09/01 yangyi</br>
    /// <br>管理番号   : 10703874-00</br>
    /// <br>作成内容   : Redmine24294対応</br>
    /// <br>Update Note: 2011/09/08 yangmj redmine #24567の対応</br>                       
    /// <br>UpdateNote : 2011/09/05 譚洪 Redmine#23965 販売区分を変更時の価格再取得のメッセージ表示の対応</br>
    /// <br>UpdateNote : 2011/09/08 譚洪 Redmine#23965 販売区分を変更時の価格再取得のメッセージ表示の対応</br>
    /// <br>UpdateNote : 2011/09/14 譚洪 Redmine#25016 販売区分を変更時の価格再取得のメッセージ表示の対応</br>
    /// <br>UpdateNote : 2011/09/16 譚洪 Redmine#25195 売上伝票入力で売単価がクリアされてしまうの対応</br>
    /// <br>                             Redmine#24670 売上伝票入力 ⇔ 得意先電子元帳 の間で行う明細複写機能の対応</br>
    /// <br>Update Note: 2011/09/17 Redmine#25217 登録、データ送信されることもあるが、いずれにしろ時間がかかりすぎるの対応 </br>
    /// <br>UpDateNote : 2011/09/16 鄧潘ハン</br>
    /// <br>           : Redmine 25219 PCCUOE PM側／売上伝票入力 UOE発注時の動作不具合の修正</br>
    /// <br>Update Note: 2011/09/19 Redmine25264 周正雨</br>
    /// <br>             SF側からの発注ではなく、PM側からいきなり回答送信した場合、</br>
    /// <br>             SCM受注データ、売上明細データ、売上履歴明細データの受発注種別(AcceptOrOrderKind)を下記の仕様でセットするよう変更して下さい。</br>
    /// <br>             ・PCC接続設定（企業・拠点連結設定）の通信方式「BLﾊﾟｰﾂｵｰｻｰｼｽﾃﾑ」にチェックが付いている場合 ⇒ 1:PCC-UOE をセット</br>
    /// <br>             ・「BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑ」にチェックが付いていない場合　⇒　0:通常</br>
    /// <br>             ※「部品問合・発注」と「BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑ」の両方にチェックが付いている場合も1:PCC-UOE</br>
    /// <br>             なお、SF側からの問合せや発注で自動回答または手動回答する場合は、SFでセットされた内容のままで良いです。（変更無し）</br>
    /// <br>UpDateNote : 2011/09/29 鄧潘ハン</br>
    /// <br>           : Redmine 25696 ９月分　売上伝票入力　売上全体設定の部品検索区分が機能しないの修正</br>
    /// <br>UpDateNote : 2011/10/10 yangyi</br>
    /// <br>           : Redmine 25681 ９月分　PCCUOE／PM側　UOE送信処理の動作の修正</br>
    /// <br>Update Note: 2011/10/26   鄧潘ハン Redmine#26224</br>
    /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
    /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
    /// <br>             2)F12発注選択後に販売区分を入力し登録すると、受注データ上の販売区分がセットされないので、</br>
    /// <br>             発注選択後に販売区分を入力しても受注データ上の販売区分をセットする様に変更</br>
    /// <br>Update Note: 2011/10/29 鄧潘ハン</br>
    /// <br>             ReadMine#26251 全体初期値設定の明細算出後在庫数表示区分を「行移動時反映」に設定した状態で、</br>
    /// <br>             売上伝票入力で明細を入力して倉庫をガイドから選択、</br>
    /// <br>             又はF8で倉庫切替を行うと、最初から在庫数が変更された状態で表示されるため、</br>
    /// <br>             ガイドからの選択直後は在庫数を変更しないように修正</br>
    /// <br>Update Note: 2011/10/29 yangmj 売上伝票入力／発注の取り消しを行った伝票の削除処理対応</br>
    /// <br>Update Note: 2011/10/29 20056 對馬 大輔</br>
    /// <br>             障害対応</br>
    /// <br>               1)受注伝票を修正呼出した場合、金額情報が再計算される</br>
    /// <br>                 →受注伝票修正呼出時、価格の再計算を行わないように修正</br>
    /// <br>               2)原単価、原価率、売単価、売価率を変更しても発注受注に反映されない</br>
    /// <br>                 →受注データ分割時、価格再計算を行わないように修正</br>
    /// <br>                 →発注数入力時、受注情報の価格再計算を行わないように修正</br>
    /// <br>                 →発注数入力時、売上情報の価格再計算を行わないように修正</br>
    /// <br>               3)発注受注に販売区分が反映されない</br>
    /// <br>                 →販売区分入力時に受注情報を更新</br>
    /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
    /// <br>Update Note: 2011/11/01 鄧潘ハン</br>
    /// <br>             ReadMine#26251 全体初期値設定の明細算出後在庫数表示区分を「行移動時反映」に設定した状態で、</br>
    /// <br>             売上伝票入力で明細を入力して倉庫をガイドから選択、</br>
    /// <br>             又はF8で倉庫切替を行うと、最初から在庫数が変更された状態で表示されるため、</br>
    /// <br>             ガイドからの選択直後は在庫数を変更しないように修正</br>
    /// <br>Update Note: 2011/11/02 鄧潘ハン</br>
    /// <br>             ReadMine#26251 全体初期値設定の明細算出後在庫数表示区分を「行移動時反映」に設定した状態で、</br>
    /// <br>             売上伝票入力で明細を入力して倉庫をガイドから選択、</br>
    /// <br>             又はF8で倉庫切替を行うと、最初から在庫数が変更された状態で表示されるため、</br>
    /// <br>             ガイドからの選択直後は在庫数を変更しないように修正</br>
    /// <br>Update Note: 2011/11/07   鄧潘ハン Redmine#26442 発注選択時のBO区分の初期表示の対応</br>
    /// <br>Update Note: 2011/11/10 yangmj redmine#26413 計上残区分による伝票削除の変更</br>
    /// <br>Update Note: 2011/11/12 李占川 redmine#26532</br>
    /// <br>             ①手動回答時、受発注種別(AcceptOrOrderKind 0:通常 1:PCC-UOE)が正常にセットされない件の対応</br>
    /// <br>             ②BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑの在庫確認で作成された見積伝票を修正呼出しした場合、</br>
    /// <br>                メッセージを表示し、参照モードで画面に表示して下さい。</br>
    /// <br>Update Note: 2011/11/11 20056 對馬 大輔</br>
    /// <br>             障害対応</br>
    /// <br>               1)BO区分に「*」入力時、出荷数←発注数、受注数クリア、発注数クリアする</br>
    /// <br>               2)BO区分が「*」の場合、発注数の入力を不可とする</br>
    /// <br>Update Note: 2011/11/15   鄧潘ハン Redmine#7730 管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
    /// <br>Update Note: 2011/11/17   鄧潘ハン Redmine#7730 管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
    /// <br>Update Note: 2011/11/17 李占川 redmine#26532</br>
    /// <br>             ①手動回答時、受発注種別(AcceptOrOrderKind 0:通常 1:PCC-UOE)が正常にセットされない件の対応</br>
    /// <br>             ②BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑの在庫確認で作成された見積伝票を修正呼出しした場合、</br>
    /// <br>                メッセージを表示し、参照モードで画面に表示して下さい。</br>
    /// <br>Update Note: 2011/11/18 李占川 redmine#26532</br>
    /// <br>             ①手動回答時、受発注種別(AcceptOrOrderKind 0:通常 1:PCC-UOE)が正常にセットされない件の対応</br>
    /// <br>             ②BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑの在庫確認で作成された見積伝票を修正呼出しした場合、</br>
    /// <br>                メッセージを表示し、参照モードで画面に表示して下さい。</br>
    /// <br>Update Note: 2011/11/18   liusy Redmine#7974 売上伝票入力の在庫チェックについて</br> 
    /// <br>Update Note: 2011/11/21   鄧潘ハン Redmine#7730 管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
    /// <br>Update Note: 2011/11/22   鄧潘ハン Redmine#8043 BLﾊﾟｰﾂｵｰﾀﾞｰ在庫確認時の見積伝票対応</br>
    /// <br>Update Note: 2011/11/22   劉思遠 Redmine#8037 在庫確認→発注時のデータセットの仕様変更</br>
    /// <br>Update Note: 2011/11/24   鄧潘ハン Redmine#8081 伝票複写機能の売上日の仕様変更</br>
    /// <br>Update Note: 2011/12/01   許培珠 Redmine#8273 売上伝票入力/BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑ</br>
    /// <br>Update Note: 2011/12/01   liusy Redmine#8379 売上伝票入力の粗利チェックの修正</br>
    /// <br>Update Note: 2011/12/01 　yangmj Redmine#8344 販売区分のチェック対応</br>
    /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
    /// <br>Update Note: 2011/12/13 　譚洪 Redmine#27303 売上伝票入力/伝票区分の変換対応</br>
    /// <br>Update Note: 2011/12/16   liusy Redmine#26917 売上伝票入力の粗利チェックの修正</br>
    /// <br>管理番号   : 10703874-00</br>
    /// <br>作成内容   : イスコ個別対応</br>
    /// <br>Update Note: 2011/12/15 tianjw</br>
    /// <br>             Redmine#27390 拠点管理/売上日のチェック</br>
    /// <br>Update Note: 2011/12/19 tianjw</br>
    /// <br>             Redmine#27390 拠点管理/売上日のチェック</br>
    /// <br>Update Note: 2011/12/14 yangmj</br>
    /// <br>管理番号   : 10707327-00 2012/01/25配信分</br>
    /// <br>             redmine#27359 伝票検索の画面表示の対応</br>
    /// <br>Update Note: 2011/12/22   譚洪 Redmine#27580 ①特定のオペレーションを行うと「数量・単価・金額」が一致しない明細が作成されるの対応</br>
    /// <br>                                              ②データ登録時、「数量・単価・金額」が一致しない場合、再計算するの対応</br>
    /// <br>Update Note: 2011/12/22   李小路</br>
    /// <br>管理番号   : 10707327-00 2012/01/25配信分</br>
    /// <br>             Redmine#27451 売上伝票入力/標準価格の色の修正</br>
    /// <br>Update Note: 2011/12/23 陳建明</br>
    /// <br>管理番号   : 10707327-00 2012/01/25配信分</br> 
    ///                  Redmine#27455 売上伝票入力/ＢＯ区分の表示の対応</br>
    /// <br>Update Note: 2012/01/05 譚洪</br>
    /// <br>管理番号   ：10707327-00 2012/01/25配信分</br>
    /// <br>             Redmine#27526 売上伝票入力/在庫切れのチェック</br>
    /// <br>Update Note: 2012/01/12 鄧潘ハン</br>
    /// <br>管理番号   : 10707327-00 2012/01/18配信分</br>
    /// <br>             Redmine#27954 PMSF連携／PCCforNS BLﾊﾟｰﾂｵｰﾀﾞｰ 障害対応の修正</br>
    /// <br>Update Note: 2012/01/18   liusy Redmine#26917 #26880 ソースマージ</br>
    /// <br>管理番号   : 10707327-00 2012/01/18配信分</br>
    /// <br>             Redmine#27954 PMSF連携／PCCforNS BLﾊﾟｰﾂｵｰﾀﾞｰ 障害対応の修正</br>
    /// <br>Update Note: 2012/01/19 20056 對馬 大輔</br>
    /// <br>             SCM改良</br>
    /// <br>               連携得意先でUOE発注する場合は、SFへの回答を行わないように修正</br>
    /// <br>Update Note: 2012/01/20 20056 對馬 大輔</br>
    /// <br>             障害対応</br>
    /// <br>               送信済みチェックでエラーになった場合、その後の処理が正常に動作しない件の対応</br>
    /// <br>Update Note: 2012/01/21   譚洪 Redmine#28089</br>
    /// <br>管理番号   : 10707327-00 2012/02/23配信分</br>
    /// <br>             Redmine#28089 拠点管理／送信済みエラーの修正</br>
    /// <br>Update Note: 2012/01/17 凌小青</br>
    /// <br>管理番号   ：10707327-00 2012/02/23配信分</br>
    /// <br>             Redmine#27977　売上伝票入力の受注データの保存について（修正呼出モード）の修正</br>
    /// <br>Update Note: 2012/02/27 20056 對馬 大輔</br>
    /// <br>             障害対応</br>
    /// <br>               PMSF連携伝票を修正呼出し、販売区分を入力し登録すると、更新できない件の対応</br>
    /// <br>Update Note: 2012/02/28 鄧潘ハン</br>
    /// <br>管理番号   : 10707327-00 2012/03/28配信分</br>
    /// <br>             Redmine#27385 原価の金額が不正についての対応</br>
    /// <br>Update Note: 2012/04/06 鄧潘ハン</br>
    /// <br>管理番号   : 10801804-00 2012/05/24配信分</br>
    /// <br>             Redmine#29216   F9/Esc押下時の得意先掛率情報のクリアについての修正</br>
    /// <br>Update Note: 2012/04/09 yangmj</br>
    /// <br>管理番号   : 10801804-00 2012/05/24配信分</br>
    /// <br>             Redmine#29313   売上伝票入力 商品価格の再取得で販売区分が初期値に戻る</br>
    /// <br>Update Note: 2012/04/11 No.594 脇田 靖之 </br>
    /// <br>             「商品検索後のフォーカス位置」項目追加</br>
    /// <br>Update Note: 2012/04/10 福田　康夫</br>
    /// <br>管理番号   : №386  </br>
    /// <br>             売上全体設定の計上残区分が「残さない」で、計上時に未計上明細が存在する場合、
    /// <br>             メッセージを表示せず、無条件で削除するよう改良 </br>
    /// <br>Update Note: 2012/04/23 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             粗利条件チェック（警告）に該当した時の挙動修正</br>
    /// <br>Update Note: 2012/05/09 鄧潘ハン</br>
    /// <br>管理番号   : 10801804-00 2012/05/24配信分</br>
    /// <br>             Redmine#29216   F9/Esc押下時の得意先掛率情報のクリアについて一回目フィードバックの修正</br>
    /// <br>Update Note: 2012/05/14 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             粗利条件チェックのメッセージ、挙動修正</br>
    /// <br>Update Note: 2012/05/15 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             粗利条件チェックのメッセージ、不具合修正（原単価）</br>
    /// <br>Update Note: 2012/05/16 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             現単価を変更後、[F10]を押下し、粗利チェックのメッセージで[いいえ]を押下時、</br>
    /// <br>             フッター部の原価金額・粗利金額計が正しく集計されない件の修正</br>
    /// <br>Update Note: 2012/05/17 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             粗利条件チェックのメッセージ、[はい]を押すとメッセージが複数回表示される件の修正</br>
    /// <br>Update Note: 2012/05/21 福田 康夫 </br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             No.594障害対応不備のためもとに戻す</br>
    /// <br>Update Note: 2012/05/31 福田 康夫</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             障害No.282　発注選択の時に「ESC」キーを押下することで発注扱いを解除する</br>
    /// <br>Update Note: 2012/06/26 No.630 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             終了(F1)押下時に編集中データの登録は行わないようにする為、</br>
    /// <br>             「終了してもよろしいですか？」のメッセージを表示するように修正</br>
    /// <br>Update Note: 2012/07/11 No.35 吉岡 孝憲</br>
    /// <br>管理番号   : </br>
    /// <br>             返品時に問合せ番号、問合せ行番号を設定する</br>
    /// <br>Update Note: 2012/07/11 30744 湯上 千加子</br>
    /// <br>           : SCM障害№111</br>
    /// <br>             連携得意先のUOE発注時、SCM受注明細データが作成されない障害の対応</br>
    /// <br>Update Note: 2012/08/17 30744 湯上 千加子</br>
    /// <br>           : SCM障害№154</br>
    /// <br>             連結設定のチェックがない時送信しないようにする対応</br>
    /// <br>Update Note: 2012/08/20  西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM以外の場合は指示書番号の取得を行わないように修正</br>
    /// <br>Update Note: 2012/09/05 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00 2012/09/12配信分</br>
    /// <br>             空商品情報特定項目再設定を品番が変更された場合は行わないように修正</br>
    /// <br>Update Note: 2012/09/20 三戸　伸悟</br>
    /// <br>管理番号   : </br>
    /// <br>             №35の戻し</br>
    /// <br>Update Note: 2012/09/20 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             空商品情報を明細貼付して仕入同時入力した場合、仕入伝票と紐付かない障害の修正</br>
    /// <br>Update Note: 2012/09/11 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             "前行複写"、"一括複写"で仕入先コードが複写されるように修正</br>
    /// <br>Update Note: 2012/10/04 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             伝票種別が貸出の場合の"前行複写"、"一括複写"の障害を修正</br>
    /// <br>Update Note: 2012/10/05 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             仕入同時入力した明細をコピー&貼り付けすると、仕入伝票が登録されない件を修正</br>
    /// <br>Update Note: 2012/10/19 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             メーカー、仕入先変更により発注先情報がクリアされてしまう件の再修正。</br>
    /// <br>Update Note: 2012/10/17 30744 湯上 千加子之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害対応 回答送信処理にてパラメータに売上伝票番号リスト追加 №10414</br>
    /// <br>Update Note: 2012/10/30 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             車輛管理ガイド選択時に拠点コードが変更される障害の修正</br>
    /// <br>             登録後、続けて入力する場合に拠点コードが変更される障害の修正</br>
    /// <br>Update Note: 2012/10/31 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             発注でBO区分に"*"を設定後、明細をコピー&貼り付けすると、</br>
    /// <br>             発注用ダミー仕入伝票番号が設定される障害の修正</br>
    /// <br>Update Note: 2012/10/15 譚洪</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             Redmine#31582 仕入日のエラーメッセージを表示処理する。</br>
    /// <br>Update Note: 2012/11/13 宮本 利明</br>
    /// <br>管理番号   : 10801804-00 №1668</br>
    /// <br>             売上過去日付制御を個別オプション化（イスコまたはオプションありで日付制御）</br>
    /// <br>Update Note: 2012/11/02 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             数量未設定の明細をチェックするように修正</br>
    /// <br>Update Note: 2012/12/14 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             数量未設定の明細をチェックの条件追加</br>
    /// <br>             注釈、行値引き行が存在する場合、有効伝票と見なすように修正</br>
    /// <br>Update Note: 2012/11/30 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             売上仕入同時入力で売上伝票を別々で入力し仕入伝票番号を同一で作成し、</br>
    /// <br>             作成した売上伝票の片方を伝票削除した場合、仕入伝票が呼び出せなくなる件の修正</br>
    /// <br>Update Note: 2012/12/20 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             売上仕入同時入力、伝票削除のソースを一部修正</br>
    /// <br>Update Note: 2012/12/25 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             仕入先を未入力で売上仕入同時入力ができる障害を修正</br>
    /// <br>Update Note: 2013/01/24 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             売上仕入同時入力を売上伝票２伝票で同じ仕入情報で作成し、</br>
    /// <br>             修正呼出しで片方の仕入情報を変更した場合、元の仕入伝票にデータが残ったまま</br>
    /// <br>             新しい仕入伝票が作成される障害を修正</br>
    /// <br>Update Note: 2013/01/23 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             2012/11/02の明細チェック処理の戻し</br>
    /// <br>             ※数量未設定の運用をしているユーザーがいる為（オート部品）</br>
    /// <br>Update Note: 2013/01/24 鄧潘ハン</br>
    /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
    /// <br>             Redmine#34141 一括値引功能を追加についての対応</br>
    /// <br>Update Note: 2013/02/07 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             得意先電子元帳からの明細貼り付け時、品名を変更した明細を貼り付けると、</br>
    /// <br>             変更後の品名が表示されるが納品書には変更前の品名（部品検索結果の品名）が印刷される障害を修正</br>
    /// <br>Update Note: 2013/02/14 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             仕入先(仕入情報)のフォーカス制御を追加</br>
    /// <br>Update Note: 2013/02/15 脇田 靖之</br>
    /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
    /// <br>             「Redmine#34141 一括値引功能を追加についての対応」対応漏れを修正</br>
    /// <br>Update Note: 2013/02/20 脇田 靖之</br>
    /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
    /// <br>             一括値引モードで明細行の切り取り（コピー）元と貼り付け先が同一明細行の場合、</br>
    /// <br>             数量の符号が逆点する（-1が1に）障害を修正</br>
    /// <br>Update Note: 2013/02/20 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             出荷数=0かつ受注数>0の場合は受注数で掛率を算出</br>
    /// <br>Update Note: 2013/01/24 鄧潘ハン</br>
    /// <br>管理番号   : 10900690-00 2013/03/13配信分</br>
    /// <br>           : Redmine#34605 売上画面の価格ｶﾞｲﾄﾞ表示に『拠点』や『表示区分』の追加</br>     
    /// <br>Update Note: 2013/04/06 20056 對馬 大輔</br>
    /// <br>             SCM障害№10504対応によるデグレ対応</br>
    /// <br>               1.品番検索にて部品情報が取得できなかった場合も商品情報クラスを参照する為、不正な動作となる</br>
    /// <br>               2.部品情報入力後、BLコードを変更すると変更後のBLコードで回答されない件の対応</br>
    /// <br>               3.部品情報入力後、行操作を行うと正常にBLコードが回答されない件の対応</br>
    /// <br>Update Note: 2013/04/02 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             ②明細の倉庫コード変更時に原価の再取得を行う</br>
    /// <br>             ③数量マイナス入力明細は仕入情報の入力不可(未入力チェックも無し)</br>
    /// <br>Update Note: 2013/04/10 宮本 利明</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             倉庫をガイド入力した時に原価の再取得を行う</br>
    /// <br>Update Note: 2013/03/08 licb </br>
    /// <br>管理番号   : 10800003-00 2013/05/15配信分</br>
    /// <br>           : Redmine#34831 №980 売上伝票入力</br>
    /// <br>           : 入力モードの表示について修正</br>
    /// <br>Update Note: 2013/02/06 宮本 利明</br>
    /// <br>管理番号   : 10801804-00 受注対応</br>
    /// <br>             売上明細から受注明細のコピー処理を追加</br>
    /// <br>Update Note: 2013/04/11 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             オブジェクト参照エラー障害対応</br>
    /// <br>Update Note: 2013/04/11 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00 受注対応で以下の障害の修正</br>
    /// <br>             ①先頭行以外の行の車輌情報が登録されない</br>
    /// <br>             ②受注数にマイナスを入力するとアラートが出て画面上は元の値に戻るが</br>
    /// <br>               登録するとマイナスで登録される</br>
    /// <br>             ③伝票種別が「売上」で受注伝票を登録した後、続けて入力すると</br>
    /// <br>               伝票種別が「受注」になる</br>
    /// <br>             ④伝票種別が「受注」で受注数が未設定の場合、エラーにする</br>
    /// <br>             ⑤受注伝票を呼出し「挿入」「削除」等を行うと登録明細の順番が変わる</br>
    /// <br>Update Note: 2013/03/01 宮本 利明</br>
    /// <br>管理番号   : 10801804-00 仕掛一覧№1679 </br>
    /// <br>             納入先ガイドの得意先種別を未選択で開くように修正</br>
    /// <br>Update Note: 2013/03/06 宮本 利明</br>
    /// <br>管理番号   : 10801804-00 仕掛一覧№836 </br>
    /// <br>             BLコードガイドからの選択件数が０件の場合はガイドの戻りを-1で返す(フォーカス移動なし)</br>
    /// <br>Update Note: 2013/04/18 西 毅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             受注対応削除</br>
    /// <br>Update Note: 2013/04/22 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             ユーザ設定「入力後のカーソル位置」の設定によるクリア処理の障害対応</br>
    /// <br>Update Note: 2013/04/19 30744 湯上 千加子</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害№10522対応</br>
    /// <br>Update Note: 2013/04/23 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             入力後のカーソル位置項目の順番、値を入れ替えに伴う修正</br>
    /// <br>             ＰＭＮＳタイプ：DataValue　1⇒0</br>
    /// <br>             ＰＭ７タイプ　：DataValue　0⇒1</br>
    /// <br>Update Note: 2013/04/26 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             №980 2013/05/15配信分 Redmine#34831の対応前に戻す</br>
    /// <br>Update Note: 2013/04/19 30744 湯上 千加子</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害№10521対応</br>
    /// <br>Update Note: 2013/05/07 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             №980対応の不具合修正</br>
    /// <br>Update Note: 2013/03/04 脇田 靖之</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             仕入先の決まっていない商品を登録し仕入伝票番号を入力し確定で仕入先未入力エラー表示後、</br>
    /// <br>             仕入先を入力して登録を行うと仕入同時計上されない障害の修正</br>
    /// <br>Update Note: 2013/05/20 宮本 利明</br>
    /// <br>管理番号   : 10902175-00　山形オプション対応</br>
    /// <br>             伝票修正区分(原価)の設定に従って定価変更時に原価率をクリアする</br>
    /// <br>Update Note: 2013/05/24 宮本 利明</br>
    /// <br>管理番号   : 10902175-00　山形オプション対応</br>
    /// <br>             定価変更時の原価率クリア処理を返品入力の場合は返品伝票修正区分(原価)で判定</br>
    /// <br>Update Note: 2013/03/28 30744 湯上 千加子</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             SCM障害№192対応</br>
    /// <br>Update Note: 2013/06/03 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00 2013/06/18配信分</br>
    /// <br>           : 出荷数からのフォーカス移動時に在庫数チェックをするように修正</br>     
    /// <br>Update Note: 2013/07/23 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00 2013/08/09配信分</br>
    /// <br>           : BLコードガイドから商品選択時、在庫調整を行うように修正</br>     
    /// <br>Update Note: 2013/07/24 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00 2013/08/09配信分</br>
    /// <br>           : 計上処理時に受注情報を設定しないように修正</br>     
    /// <br>Update Note: 2013/07/10 譚紅</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             Redmine#37770  存在しないBLｺｰﾄﾞを入力すると、元のBLｺｰﾄﾞに戻す時、</br>
    /// <br>                            元のBLｺｰﾄﾞ関連の情報は削除しないように修正</br>
    /// <br>Update Note: 2013/08/07 liusy</br>
    /// <br>管理番号   : 10801804-00</br>
    /// <br>             Redmine#37770  売上伝票入力 ⇔ 得意先電子元帳 の間で行う明細複写後</br>
    /// <br>                            明細データはBLコードより、BLグループ、中分類、大分類情報を取得</br>
    /// <br>Update Note: 2013/07/29 脇田 靖之</br>
    /// <br>管理番号   : 10902175-00 SCM仕掛一覧 №10555</br>
    /// <br>           : 行追加した再問合せを画面表示する際に新規明細が追加されるように修正</br>     
    /// <br>Update Note: 2013/08/19 宮本 利明</br>
    /// <br>管理番号   : 10902175-00 仕掛一覧 №2003対応を除外(次回対応)</br>
    /// <br>Update Note: 2013/09/27 宮本 利明</br>
    /// <br>管理番号   : 10902175-00 SCM仕掛一覧 №10576</br>
    /// <br>             仕入先・販売区分変更時の受注情報作成処理を受注情報が存在する場合のみに変更</br>
    /// <br>Update Note: K2013/09/11 脇田 靖之</br>
    /// <br>             ㈱フタバ個別 フタバ抽出済みチェック対応</br>
    /// <br>Update Note: K2013/09/20 宮本 利明</br>
    /// <br>             ㈱フタバ個別 本社倉庫優先順位対応</br>
    /// <br>Update Note: 2013/11/05 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>             仕掛一覧№1492(№594)対応</br>
    /// <br>             「商品検索後のフォーカス位置」項目追加し、受注伝票を入力しやすくする</br>
    /// <br>Update Note: 2013/11/13 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : システムテスト一覧№33対応（仕掛一覧 №2119）</br>
    /// <br>Update Note: 2013/11/14 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : 商品保証課用 Redmine#655（仕掛一覧 №2119）</br>
    /// <br>Update Note: 2013/11/26 吉岡</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : 商品保証課用 Redmine#103</br>
    /// <br>Update Note: 2013/11/27 湯上</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : 商品保証課用 Redmine#710</br>
    /// <br>Update Note: 2014/01/23 陳健</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : Redmine#41550 売上伝票入力消費税8%増税対応</br>
    /// <br>Update Note: 2014/04/02 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : 仕掛一覧№2346対応</br>
    /// <br>             消費税の算出がおかしくなる障害。</br>
    /// <br>Update Note: 2013/12/10 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>             純正定価印字対応</br>
    /// <br>Update Note: K2014/01/14 脇田 靖之</br>
    /// <br>             ㈱フタバ個別 伝票印刷機能追加対応</br>
    /// <br>Update Note: K2014/02/06 脇田 靖之</br>
    /// <br>             ㈱フタバ個別 伝票印刷機能追加対応</br>
    /// <br>             値引き明細のみの場合の障害を対応</br>
    /// <br>Update Note: K2014/01/22 譚洪</br>
    /// <br>管理番号   : 10970602-00</br>
    /// <br>             登戸個別特販区分の変更対応</br>
    /// <br>Update Note: K2014/02/10 鄧潘ハン</br>
    /// <br>管理番号   : 10970602-00</br>
    /// <br>             品番検索時、特販区分の対応</br>
    /// <br>Update Note: K2014/02/17 鄧潘ハン</br>
    /// <br>管理番号   : 10970602-00</br>
    /// <br>             ＵＳＢ登戸個別オプションＯＮ ＡＮＤ 特販管理マスタの個別</br>
    /// <br>             アセンブリが動作環境に存在する場合 ⇒オプションＯＮの対応</br>
    /// <br>Update Note: 2014/04/02 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : 仕掛一覧№2346対応</br>
    /// <br>             消費税の算出がおかしくなる障害。</br>
    /// <br>Update Note: K2014/04/03 脇田 靖之</br>
    /// <br>管理番号   : 10970602-00</br>
    /// <br>             ＵＳＢ登戸個別オプションＯＮ ＡＮＤ 特販管理マスタの個別</br>
    /// <br>             販売区分を変更時の価格再取得を行わない対応</br>
    /// <br>Update Note: 2014/02/24 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00 仕掛一覧 №2307</br>
    /// <br>           : ユーザー設定に「伝票種別の記憶」項目追加</br>
    /// <br>Update Note: 2014/03/18 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00 仕掛一覧№2327対応</br>
    /// <br>             受注数入力後、BLコードを変更しても受注伝票に反映されない</br>
    /// <br>Update Note: 2014/03/24 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : システムテスト一覧№3、4対応</br>
    /// <br>           : （仕掛一覧 №2327 既存障害対応漏れ）</br>
    /// <br>Update Note: 2014/03/26 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : システムテスト一覧№7対応</br>
    /// <br>           : （仕掛一覧 №2327 既存障害対応漏れ）</br>
    /// <br>Update Note: 2014/04/07 脇田 靖之</br>
    /// <br>管理番号   : 10904597-00</br>
    /// <br>           : システムテスト一覧№9対応</br>
    /// <br>Update Note: K2014/02/09 yangyi</br>
    /// <br>管理番号   : 10970681-00 前橋京和商会個別個別対応</br>
    /// <br>           : 売上伝票入力の改良対応</br>
    /// <br>Update Note: K2014/02/24 yangyi</br>
    /// <br>管理番号   : 10970681-00 前橋京和商会個別個別対応</br>
    /// <br>           : 障害報告 #42174</br>
    /// <br>Update Note: K2014/02/25 yangyi</br>
    /// <br>管理番号   : 10970681-00 前橋京和商会個別個別対応</br>
    /// <br>           : 障害報告 #42174</br>
    /// <br>Update Note: K2014/05/08 zhujw</br>
    /// <br>管理番号   : 11070071-00 丸徳商会 個別開発</br>
    /// <br>           : 丸徳商会-得意先ガイドの改良対応</br>
    /// <br>Update Note: K2014/06/03 zhujw</br>
    /// <br>管理番号   : 11070071-00 丸徳商会 個別開発</br>
    /// <br>           : RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について</br>
    /// <br>           : ②意先ガイド画面のPGID変更</br>
    /// <br>Update Note: 2014/05/19 宮本 利明</br>
    /// <br>管理番号   : 11070071-00</br>
    /// <br>           : 仕掛一覧№2218 車輌備考欄にコード入力項目を追加</br>
    /// <br>Update Note: 2014/05/28 宮本 利明</br>
    /// <br>管理番号   : 11070071-00</br>
    /// <br>           : 仕掛一覧№2218 車輌備考コード追加時の設定・位置を車輌備考に合わせる</br>
    /// <br>Update Note: 2014/06//02 宮本 利明</br>
    /// <br>管理番号   : 11070071-00</br>
    /// <br>           : システムテスト障害№87 車輌管理ガイドで選択した車輌情報が指定行にセットされるように修正</br>
    /// <br>Update Note: 2014/06/18 30744 湯上 千加子</br>
    /// <br>管理番号   : </br>
    /// <br>           : SCM仕掛一覧№10641対応 システムテスト障害№95,96対応</br>
    /// <br>Update Note: 2014/08/13 宮本 利明</br>
    /// <br>管理番号   : 11070148-00 SCM仕掛一覧 №10643</br>
    /// <br>             返品時にSCM問合せデータを取得して受発注種別を引き継ぐように修正</br>
    /// <br>Update Note: 2014/08/14 陳艶丹 </br>
    /// <br>管理番号   : 11070148-00　仕掛 №10662　RedMine#43047の対応</br>
    /// <br>           : 「新規問合せ」を選択したときは、SCM受注明細データ(問合せ・発注)情報の売上伝票番号をデフォルト「000000000」でセットする</br>
    /// <br>Update Note: 2014/08/28 陳艶丹 </br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>           : RedMine#43336売上伝票入力：BLパーツオーダー問合せ回答の修正を行えるよう変更する</br>
    /// <br>Update Note: 2014/09/01 譚洪</br>
    /// <br>管理番号   : 11070184-00　SCM障害対応 №190　RedMine#43289</br>
    /// <br>         　: SFから問合せの車輌情報・備考を売上伝票入力に表示する</br>
    /// <br>Update Note: 2014/09/16 湯上 千加子</br>
    /// <br>管理番号   : 11000127-00 SCM仕掛一覧 №10677対応</br>
    /// <br>Update Note: 2014/09/18 湯上 千加子</br>
    /// <br>管理番号   : 11000127-00 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応</br>
    /// <br>         　: ・部品問合せ・発注（またはBLパーツオーダー）からの発注データに対して受注計上時に回答送信すると、</br>
    /// <br>         　:   回答結果が「一部回答」となり元の明細とは別に「発完」明細が作成されてしまう障害の対応</br>
    /// <br>         　: ・受注計上での回答送信後、部品問合せ・回答に対する回答送信であっても</br>
    /// <br>         　:   通信方式(SF)、連携対象区分(PM)が「BLパーツオーダー」になる障害の対応</br>
    /// <br>Update Note: 2014/07/15 宮本 利明</br>
    /// <br>管理番号   : 11070100-00</br>
    /// <br>             仕掛一覧 №1912</br>
    /// <br>Update Note: 2014/11/06 陳艶丹</br>
    /// <br>管理番号   : 11070184-00　PM-SCM仕掛一覧No.85　RedMine#43046</br>
    /// <br>             2014/11/26配信システムテスト障害№4対応</br>
    /// <br>             新規回答時、多重回答防止チェック追加(多重回答防止)</br>
    /// <br>Update Note: 2014/11/28 宮本 利明</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>           : 仕掛一覧 №2578</br>
    /// <br>           : 明細貼付時の結合部品選択画面で選択した部品情報を貼付部品の情報で置き換えないように修正</br>
    /// <br>Update Note: 2014/12/01 宮本 利明</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>           : 仕掛一覧 №2608 エラーダイアログ前面表示対応</br>
    /// <br>Update Note: 2015/01/08 宮本 利明</br>
    /// <br>管理番号   : 11070149-00  仕掛一覧 №2606</br>
    /// <br>             明細貼付時に貼付の仕入コードで発注情報を取得する</br>
    /// <br>Update Note: 2015/03/26 脇田 靖之</br>
    /// <br>管理番号   : 11070149-00 仕掛一覧 №2685</br>
    /// <br>           : 修正呼出後に見出貼付した時の障害対応</br>
    /// <br>Update Note: K2015/04/01 高騁 </br>
    /// <br>管理番号   : 11100713-00</br>
    /// <br>           : 森川部品個別依頼の改良作業全拠点在庫情報一覧機能追加</br>
    /// <br>Update Note: 2015/04/06 30757 佐々木 貴英</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>             仕掛№2405 得意先変更時表示区分再取得対応</br>
    /// <br>Update Note: 2015/04/16 30757 佐々木 貴英</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>             社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応</br>
    /// <br>Update Note: K2015/04/29 黄興貴</br>
    /// <br>管理番号   : 11100543-00 富士ジーワイ商事㈱ UOE取込対応</br>
    /// <br>Update Note: 2015/05/12  イン晶晶</br>
    /// <br>管理番号   : 11175123-00</br>
    /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
    /// <br>Update Note: K2015/06/04 河原林　一生</br>
    /// <br>管理番号   : 11100543-00 Redmine#46406対応</br>
    /// <br>             回答取込オプションON場合に、売上伝票入力画面のファンクション制御の項目一覧内に「回答取込」が表示されていない</br>
    /// <br>Update Note: K2015/06/16 黄興貴</br>
    /// <br>管理番号   : 11100543-00 Redmine#46406</br>
    /// <br>             富士ジーワイ商事㈱ Redmine#46406 No.5の対応</br>
    /// <br>             回答データの品名部分に半角全角混在を入力したdatファイルを回答取込させると、全角の文字数分がずれて読み込まれてしまう。</br>
    /// <br>Update Note: K2015/08/03 黄興貴</br>
    /// <br>管理番号   : 11100068-00 Redmine#47083</br>
    /// <br>             富士ジーワイ商事㈱ 明細車両情報不正</br>
    /// <br>Update Note: K2015/08/14 黄興貴</br>
    /// <br>管理番号   : 11100068-00 Redmine#47213</br>
    /// <br>             富士ジーワイ商事㈱ 売上伝票入力の参照不正</br>
    /// <br>Update Note: 2015/06/04  河原林　一生</br>
    /// <br>管理番号   : 11070149-00</br>
    /// <br>             Redmine#46406 XMLに登録がないファンクションが表示されない不具合の対応</br>
    /// <br>Update Note: 2015/08/22 黄興貴</br>
    /// <br>管理番号   : 11170129-00 №836 Redmine#47045 保存時のエラー処理がないの障害対応</br>
    /// <br>Update Note: 2015/09/04 西 毅</br>
    /// <br>管理番号   : 11170139-00</br>
    /// <br>             社内障害№712 掛率未設定時に売上金額計算処理が行われない障害の対応</br>
    /// <br>Update Note: 2015/09/08 黄興貴</br>
    /// <br>管理番号   : 11170129-00 №836 Redmine#47045 連絡した後のソース指摘対応</br>
    ///<br>Update Note: K2015/06/18 紀飛</br>
    /// <br>管理番号   : 11101427-00 ㈱メイゴ　WebUOE発注回答取込対応</br>
    /// <br>Update Note: K2015/08/11 陳亮</br>
    /// <br>管理番号   : 11101427-00 ㈱メイゴ　WebUOE発注回答取込対応</br>
    /// <br>Update Note: K2015/09/18 紀飛</br>
    /// <br>管理番号   : 11101427-00</br>
    ///                : #Redmine47186障害一覧#52  取込後に売上伝票入力の原価金額が合計されていない</br>
    /// <br>Update Note: K2015/09/22 紀飛</br>
    /// <br>管理番号   : 11101427-00</br>
    ///                : #Redmine47186指摘一覧#373 ㈱メイゴ　WebUOE発注回答取込</br>
    /// <br>Update Note: K2015/09/22 紀飛</br>
    /// <br>管理番号   : 11101427-00</br>
    /// <br>           : #Redmine47186指摘一覧#374 ㈱メイゴ　WebUOE発注回答取込</br>
    /// <br>Update Note: K2015/10/05 30757 佐々木　貴英</br>
    /// <br>管理番号   : 11101427-00</br>
    /// <br>           : 営業指摘対応 ヘッダにフォーカスがあるときも[発注回答]は有効とする</br>
    /// <br>Update Note: K2015/10/06 30757 佐々木　貴英</br>
    /// <br>管理番号   : 11101427-00</br>
    /// <br>           : 営業指摘対応</br>
    /// <br>             ②「選択発注回答データを売上明細へ取り込みました。」メッセージ出力タイミング変更</br>
    /// <br>             ⑤提供データに存在する商品がハイフン無しで表示される不具合対応</br>
    /// <br>Update Note: K2015/10/08 30757 佐々木　貴英</br>
    /// <br>管理番号   : 11101427-00</br>
    /// <br>           : 営業指摘対応</br>
    /// <br>             発注明細一覧画面で[確定]実行時の取込成功メッセージを表示させない</br>
    /// <br>Update Note: 2015/10/26 譚洪</br>
    /// <br>管理番号   : 11170188-00 ㈱メイゴ　WebUOE発注回答取込マージ（メイゴ個別と富士ジーワイの個別）対応</br>
    /// <br>Update Note: 2015/11/27 時シン</br>
    /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
    /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
    /// <br>Update Note: 2015/12/09 陳永康</br>
    /// <br>管理番号   : 11170204-00</br>
    /// <br>           : Redmine#47787 最大行を超えて明細を追加すると、画面に表示されない部品が登録される障害の修正</br>
    /// <br>Update Note: 2016/01/21 脇田 靖之</br>
    /// <br>管理番号   : 11270007-00 仕掛一覧№2808 貸出受注対応</br>
    /// <br>           : ①貸出/受注伝票の修正呼出時に計上状況(未計上・一部計上・計上済)を画面表示する</br>
    /// <br>           : ②貸出/受注伝票の修正呼出時に数量情報(貸出/受注数・計上数・未計上数)をバルーン表示する</br>
    /// <br>           : ③計上済みの受注伝票を伝票削除できるようにする</br>
    /// <br>Update Note: 2016/09/12 王漢玉</br>
    /// <br>管理番号   : 11270082-00</br>
    /// <br>           : Redmine#48832 神姫産業　与信限度額警告メッセージの初期フォーカス変更</br>
    /// <br>Update Note: 2016/09/18 譚洪</br>
    /// <br>管理番号   : 11275134-00 売上伝票入力の障害対応</br>
    /// <br>           : Redmine#48851 納入先をガイドから変更した場合、得意先情報の再取得処理は行わず、納入先情報のみを画面へ更新する。</br>
    /// <br>Update Note: 2016/09/27 譚洪</br>
    /// <br>管理番号   : 11275220-00 売上伝票入力の障害対応</br>
    /// <br>           : Redmine#48877 得意先をガイドから変更した場合、得意先情報の再取得処理は行わず、得意先情報のみを画面へ更新する。</br>
    /// <br>Update Note: K2016/11/01 譚洪</br>
    /// <br>管理番号   : 11202099-00 売上伝票入力から外部PGを起動して売単価を算出の対応</br>
    /// <br>Update Note: K2016/12/14  時シン</br>
    /// <br>管理番号   : 11202330-00</br>
    /// <br>           : 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応</br>
    /// <br>Update Note: K2016/12/30 譚洪</br>
    /// <br>管理番号   : 11202452-00</br>
    /// <br>             水野商工様個別変更内容をPM.NSにて実現するため、第二売価の対応行います。</br>
    /// <br>Update Note: 2018/09/04 譚洪</br>
    /// <br>管理番号   : 11470152-00</br>
    /// <br>           : 履歴自動表示機能追加対応</br>
    /// <br>Update Note: 2018/10/01 山本 貴教</br>
    /// <br>管理番号   : 11470152-00 履歴自動表示機能追加対応</br>
    /// <br>           : ST障害対応 売伝画面上の検索項目から伝票検索した場合、拠点名称が取得できず、得意先電子元帳に渡す起動パラメータが不正になる不具合対応</br>
    /// <br>Update Note: 2020/02/24 譚洪</br>
    /// <br>管理番号   : 11570208-00</br>
    /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
    /// <br>Update Note: 2020/09/21 陳艶丹</br>
    /// <br>管理番号   : 11600006-00</br>
    /// <br>           : 東亜商会の数量または売上金額不正の対応</br>
    /// <br>Update Note: K2020/11/09 呉元嘯</br>
    /// <br>管理番号   : 11600946-00 PMKOBETSU-4085対応</br>
    /// <br>Update Note: 2020/11/20 陳艶丹</br>
    /// <br>管理番号   : 11670305-00</br>
    /// <br>           : PMKOBETSU-4097 TSPインライン機能追加対応</br>
    /// <br>Update Note: K2020/12/29 陳艶丹</br>
    /// <br>管理番号   : 11600006-00</br>
    /// <br>           : PMKOBETSU-3786 納品書印刷スレッド順次実行対応</br>
    /// <br>Update Note: 2021/03/16 陳艶丹</br>
    /// <br>管理番号   : 11770032-00</br>
    /// <br>           : PMKOBETSU-4133 売上伝票入力原価0円障害の対応</br>
    /// <br>Update Note: 2021/04/12 陳艶丹</br>
    /// <br>管理番号   : 11770021-00</br>
    /// <br>           : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
    /// <br>Update Note: 2021/05/20 陳艶丹</br>
    /// <br>管理番号   : 11770032-00</br>
    /// <br>           : BLINCIDENT-2978 受注伝票明細金額が0の障害対応</br> 
    /// <br>Update Note: 2021/05/20 陳永康</br>
    /// <br>管理番号   : 11770032-00</br>
    /// <br>           : BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応</br> 
    /// <br>Update Note: 2021/07/16 陳艶丹</br>
    /// <br>管理番号   : 11770021-00</br>
    /// <br>           : PMKOBETSU-4154 売上伝票印刷エラー対応</br>
    /// <br>Update Note: K2021/07/22 陳艶丹</br>
    /// <br>管理番号   : 11601223-00</br>
    /// <br>           : PMKOBETSU-4148 原価0円障害の対応</br>
    /// <br>Update Note: K2021/07/27 譚洪</br>
    /// <br>管理番号   : 11601223-00</br>
    /// <br>           : PMKOBETSU-4148 売上データ原価0円障害（登録時）</br>   
    /// <br>Update Note: K2021/08/23 陳艶丹</br>
    /// <br>管理番号   : 11601223-00</br>
    /// <br>           : PMKOBETSU-4178 税率のログ追加</br> 
    /// <br>Update Note: K2021/09/03 呉元嘯</br>
    /// <br>管理番号   : 11601223-00</br>
    /// <br>           : BLINCIDENT-3095 売上伝票入力の計上日不正対応</br> 
    /// <br>Update Note: 2021/09/10 呉元嘯</br>
    /// <br>管理番号   : 11770032-00</br>
    /// <br>           : PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応</br> 
    /// <br>           :                計上日チェックの制御ファイルの対応</br> 
    /// <br>Update Note: 2021/11/19 田村顕成</br>
    /// <br>管理番号   : 11601223-00</br>
    /// <br>           : BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応（不具合修正）</br> 
    /// <br>Update Note: 2022/01/05 陳艶丹</br>
    /// <br>管理番号   : 11800082-00</br>
    /// <br>           : PMKOBETSU-4148 メーカー名と仕入先名チェック追加</br> 
    /// <br>Update Note: 2022/04/26 陳艶丹</br>
    /// <br>管理番号   : 11870080-00</br>
    /// <br>           : PMKOBETSU-4208 電子帳簿対応</br> 
    /// <br>Update Note: 2022/10/05 田村顕成功</br>
    /// <br>管理番号   : 11870141-00</br>
    /// <br>           : インボイス残対応</br>     
    /// <br>Update Note: 2025/02/03 梶谷貴士</br>
    /// <br>管理番号   : 12100013-00</br>
    /// <br>           : 仕入先コードチェック変更</br> 
    /// </remarks>
    public class DelphiSalesSlipInputAcs
    {
        private static DelphiSalesSlipInputAcs _delphiSalesSlipInputAcs;
        private SalesSlipInputAcs _salesSlipInputAcs;
        private SalesSlipStockInfoInputAcs _salesSlipStockInfoInputAcs;
        private SalesSlipInputConstructionAcs _salesInputConstructionAcs;
        private SalesSlipInputConstruction _salesSlipInputConstruction;
        private SalesSlipInputInitDataAcs _salesSlipInputInitDataAcs;
        private SalesSlipInputInitData _salesSlipInputInitData;
        private CustomerInfoAcs _customerInfoAcs;
        private UOESupplierAcs _uoeSupplierAcs;
        private UOEGuideNameAcs _uoeGuideNameAcs;
        private string _enterpriseCode = LoginInfoAcquisition.EnterpriseCode;
        private SalesInputDataSet.SalesDetailDataTable _salesDetailDataTable;
        private SalesInputDataSet.CompleteInfoDataTable _completeInfoDataTable;
        private SalesSlip _salesSlip;
        private Form _form;
        private CustomerSearchRet customerSearchRet;
        private IWin32Window _owner;
        private Dictionary<string, EnterMoveValue> _enterMoveTable; // 移動先テーブル(key:対象項目 value:移動先情報)
        private Dictionary<string, EnterMoveValue> _enterMoveTableInit; // 初期設定移動先テーブル(key:対象項目 value:移動先項目)
        private ColDisplayStatusList _colDisplayStatusList;	// 列表示状態コレクションクラス
        private ArrayList _effectiveList;
        private string _startKeyName;
        private string _startKeyNameInit;
        private ArrayList _endKeyNameList;
        private ArrayList _endKeyNameListInit;
        private const string ct_FILENAME_COLDISPLAYSTATUS = "MAHNB01010U_ColSetting.xml";				// 列表示状態セッティングXMLファイル名
        private const string XML_FILE_NAME = "MAHNB01012A_Construction.XML";

        // --- ADD 譚洪 K2016/11/01 外部PG売価算出対応_㈱コーエイ --- >>>>>
        /// <summary> 外部PG情報の設定ファイル</summary>
        private const string KOEI_XML_FILE_NAME = "MAHNB01012A_MethodInfo.xml";
        /// <summary> パラメータに埋めるスペース</summary>
        private const char PADDING_CHAR = ' ';
        /// <summary> 売価算出対象外</summary>
        private const string MSG_NOCALC = "選択商品は売単価算出対象外です。";
        /// <summary> 売価算出エラー</summary>
        private const string MSG_CALCERROR = "売価算出中エラーが発生しました。";
        /// <summary> パラメータ数</summary>
        private const int PARAMETER_COUNT = 10;

        /// <summary> アセンブリファイルパス</summary>
        private string AssemblyName = string.Empty;
        /// <summary> クラス名称</summary>
        private string ClassName = string.Empty;
        /// <summary> メソッド名称</summary>
        private string MethodName = string.Empty;
        /// <summary> 外部PG情報</summary>
        private KoeiMethodInfo MethodInfoObj;
        // --- ADD 譚洪 K2016/11/01 外部PG売価算出対応_㈱コーエイ --- <<<<<
        // --- ADD 呉元嘯 K2020/11/09 PMKOBETSU-4085対応 -------->>>>>
        private const int CtCntZero = 0;
        private const string CtNM_AcceptAnOrderCnt = "AcceptAnOrderCntDisplay";
        // --- ADD 呉元嘯 K2020/11/09 PMKOBETSU-4085対応 --------<<<<<
        // --- ADD K2021/08/23 陳艶丹 PMKOBETSU-4178 税率のログ追加--->>>>
        private const string CtTaxRate = "入力税率={0}";
        private const string CtReadDBData = "得意先取得 status:{0},元伝票番号:{1},得意先:{2}";
        // --- ADD K2021/08/23 陳艶丹 PMKOBETSU-4178 税率のログ追加--- <<<<
        private const string CT_DXSTARTFILENAME = "\\eBookLauncher.vbs"; // ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応
        //--- ADD 田村顕成 2022/10/05 インボイス残対応 ----->>>>>
        /// <summary>返品･赤伝制御設定XMLファイル</summary>
        private const string XML_RETURNREDSETTINGS = "MAHNB01001U_ReturnRedSetting.xml";
        /// <summary>返品･赤伝制御 備考欄使用モード</summary>
        private const int ReturnRedNote_BLANK = 0;//空白
        private const int ReturnRedNote_SLIPNUM = 1;//取引日付＋元黒伝票番号
        private const int ReturnRedNote_ORIGINAL = 2;//元黒伝票番号
        private const int ReturnRedNote_OPTIONAL = 3;//任意
        private int _returnRedNote1Mode = ReturnRedNote_ORIGINAL;
        private int _returnRedNote2Mode = ReturnRedNote_ORIGINAL;
        private int _returnRedNote3Mode = ReturnRedNote_ORIGINAL;
        private string _returnRedNote1 = string.Empty;
        private string _returnRedNote2 = string.Empty;
        private string _returnRedNote3 = string.Empty;
        /// <summary>返品･赤伝制御 備考欄空白チェックモード</summary>
        private const int ReturnRedBlankCheck_OFF = 0;//チェック無し
        private const int ReturnRedBlankCheck_ON = 1;//チェックあり
        private int _returnRedBlankCheckMode = ReturnRedBlankCheck_OFF;
        //--- ADD 田村顕成 2022/10/05 インボイス残対応 -----<<<<<

        //>>>2010/07/22
        //private const string ctAssemblyName = "MAHNB01010UA";
        private const string ctAssemblyName = "MAHNB01001U";
        //<<<2010/07/22
        private readonly string ct_CommonFileName = "ToolButtonCustomize";      // ADD 2010/07/06
        private const string SLIPHEADERCOPY_XML_FILE_NAME = "SalesSlipHeaderCopy_PMKAU04000U.xml";
        private const string SALESDTLCOPY_XML_FILE_NAME = "SalesDetailCopy_PMKAU04000U.xml";   // ADD 連番729 2011/08/18
        private const string ENCRYPTION_KEY = "44965615-3203-47ac-a6b0-ea8191390f0b";
        private const int STATUS_CHK_SEND_ERR = -1001; // ADD 2011/08/10 qijh SCM対応 - 拠点管理(10704767-00)
        private const string MSG_CHK_SEND_ERR = "送信済みのデータの為、更新できません。"; // ADD 2011/08/23 qijh SCM対応 - 拠点管理(10704767-00)
        private Dictionary<string, string> _button_captions_dic;// ADD 2010/07/06
        private const int CtDisplayCd = 0; // ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136

        private IOperationAuthority _operationAuthority;    // 操作権限の制御オブジェクト
        private List<UserGdBd> _userGdBdList = null;           // ユーザーガイドマスタリスト
        private string _loginSectionCode;
        private SupplierAcs _supplierAcs;


        // 売上商品区分コンボエディタアイテム設定処理
        private int _setItemtSalesSlipCdDisp = 0;
        private int _setItemtSalesSlipCdFlg = 0;
        private int _ctTabKeyAddInfo = 0;
        private int _settingAddInfoVisibleFlg = 0;

        // 入力モード
        private string _inputModeTitle = "通常";
        // 売上伝票番号Delphi用
        private string _defaultSalesSlipNumDf = "000000000";
        // 品番／ＢＬコード検索モードフラグ
        private int _searchPartsModeFlg = 0;
        // セキュリティ対応フラグ
        private int _operationCodeFlg = 0;

        private int _customerNameFlg = 0;
        private string _totalDayDf = string.Empty;
        private string _collectMoneyDf = string.Empty;

        private string _detailGrossProfitRate;

        private string _addDetailGrossProfitRate;

        private string _itemName = string.Empty;
        private string _tableName = string.Empty;
        private int _status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
        private string _beforeSalesSlipNumText = string.Empty;
        private int _focusPositionValue = 0;
        private bool _canRed = false;
        private string _carMngCode = "";
        private int _redDialogResult = 0;
        private int _taxRateDialogResult = 0;// ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応
        private CarMangInputExtraInfo _selectedInfo;
        private int _searchPartsModeProperty = 0;
        private int _saveStatus = -1;
        private int _onlineKindDiv = (int)SalesSlipInputAcs.OnlineKindDiv.None;     // 2011/01/31 Add
        SFCMN00299CA _processingDialog = new SFCMN00299CA();

        private ToolMenuCustomizeSetting _toolMenuCustomizeSetting;
        private ToolManagerCustomizeSetting _toolManagerCustomizeSetting;
        private bool _toolBarVisible = true;
        private int _toolBarDockedRow = 0;
        private int _toolBarDockedColumn = 0;
        private int _toolBarDockedPosition = 0;
        private int _toolBarCustomizedVisible = 0;
        private bool _toolMenuCustomizeSettingNotNull = false;
        private bool _toolButtonCustomizeSettingNotNull = false;
        ToolManagerCustomizeSetting _saveToolManagerCustomizeSetting = new ToolManagerCustomizeSetting();
        ToolMenuCustomizeSetting _saveToolButtonCustomizeSettings = new ToolMenuCustomizeSetting();
        private bool _afterSaveClearFlg = false;
        private string salesSlipNum = string.Empty;
        private int _acptAnOdrStatus = 0;    // ADD 2013/05/07 Y.Wakita
        private string _startMode = string.Empty;   // 2011/01/31 Add
        // ---ADD 高騁 K2015/04/01--------------->>>>>
        private MethodInfo _myMethodMoriKawaOpen; // 参照用方法コール
        private MethodInfo _myMethodMoriKawaSearch; // 参照用方法コール
        private object _objMoriKawa;          // 参照用object
        // ---ADD 高騁 K2015/04/01---------------<<<<<
        //>>>2010/05/30
        /// <summary>品名MAX桁数</summary>
        public static readonly int ctGoodsNameMaxLength = 40;
        //<<<2010/05/30

        // --- ADD m.suzuki 2010/06/12 ---------->>>>>
        private Thread _makeQRThread;   // QRコード生成スレッド
        // --- ADD m.suzuki 2010/06/12 ----------<<<<<

        // --- ADD 2010/05/31 ---------->>>>>
        CarMangInputExtraInfo _selectedCarMangInputExtraInfo = new CarMangInputExtraInfo();
        // --- ADD 2010/05/31 ----------<<<<<

        //-----ADD 2010/09/08---------->>>>>
        OperationHistoryLog operationHistoryLog = new OperationHistoryLog();
        //-----ADD 2010/09/08----------<<<<<
        // ----- ADD K2011/09/01 --------------------------->>>>>
        private EmployeeAcs _employeeAcs;
        //private IGetServerTime _iGetServerTime; // DEL K2011/12/09
        public bool _slipNote2ErrFlag;
        // ----- ADD K2011/09/01 ---------------------------<<<<<
        private string login_EnterpriseCode = "0123130012020600"; // ADD K2011/12/09

        # region Private Members ---- zhangkai
        private bool _cannotGoodsRead = false;
        private bool _cannotGoodsMakerRead = false;
        private bool _cannotSupplierInfoRead = false;
        private bool _cannotBLGoodsRead = false;
        private bool _cannotListPrice = false;
        private bool _cannotSalesUnitCost = false;
        private bool _cannotCostRate = false;
        private bool _cannotSalesUnitPrice = false;
        private bool _cannotSalesRate = false;
        private bool _isOverFlow = false;
        private bool _cannotSalesCode = false;
        private bool _cannotBoCode = false;
        private bool _cannotUOESupplierCd = false;
        private bool _cannotUOEDeliGoodsDiv = false;
        private bool _cannotFollowDeligoodsDiv = false;
        private bool _cannotUOEResvdSection = false;
        # endregion

        // ADD 2011/09/17 >>>>>>
        private int _result;
        private string _carMngCodeAfter = string.Empty;
        private bool _printSlipFlag = false;
        private bool _isMakeQR = false;
        private bool _scmFlg = false;
        private bool _cmtFlag = false;
        private bool _salesDateErrFlag = false; // ADD K2011/12/09


        // --- ADD K2016/12/30 譚洪 水野商工㈱　第二売価 ---------->>>>>
        // 第二売価ガイドの左位置
        private int _locationLeft;
        // 第二売価ガイドの上位置
        private int _locationTop;
        // --- ADD K2016/12/30 譚洪 水野商工㈱　第二売価 ----------<<<<<

        // ADD 2013/03/28 SCM障害№192対応 --------------------------------->>>>>
        private int _isSCMSave;
        // ADD 2013/03/28 SCM障害№192対応 ---------------------------------<<<<<

        // ADD 2011/09/17 <<<<<<<

        // ---ADD 2011/02/11------------->>>>
        // 調査用操作ログ出力アクセスクラス
        private SurveyUseLogOutputAcs _surveyUseLogOutputAcs = null;
        // ---ADD 2011/02/11-------------<<<<

        // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
        private bool _discountAllLineflag = false;//一括値引フラグ
        private bool _discountAllLinebuttonflag = false;//一括値引ボタンフラグ
        // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<

        private PriceSelectSetAcs _priceSelectSetAcs;// ADD 2013/01/24 鄧潘ハン REDMINE#34605

        // ADD 譚洪 2014/09/01 FOR Redmine#43289 --- >>>
        /// <summary>車両情報を表示用</summary>
        private const string PGID_XML = "MAHNB01001U";
        //Thread中、車両情報SOLT名
        private const string CARINFOSOLT = "CARINFOSOLT";
        private LocalDataStoreSlot carInfoSolt = null;
        // ADD 譚洪 2014/09/01 FOR Redmine#43289 --- <<<

        // --- ADD K2015/04/29 黄興貴 富士ジーワイ商事㈱ UOE取込対応 --->>>>>
        // --- DEL K2015/08/14 黄興貴 Redmine#47213 --->>>>>
        //PMUOE02000UCA _uoeDataSetForm;
        // --- DEL K2015/08/14 黄興貴 Redmine#47213 ---<<<<<
        // --- ADD K2015/08/14 黄興貴 Redmine#47213 --->>>>>
        private object _objUoeDataSetForm;
        // --- ADD K2015/08/14 黄興貴 Redmine#47213 ---<<<<<
        // --- ADD K2015/04/29 黄興貴 富士ジーワイ商事㈱ UOE取込対応 ---<<<<<

        // --- ADD K2015/06/18 紀飛 ㈱メイゴ　WebUOE発注回答取込 --->>>>>
        private object _objMegoSettingForm;          // 参照用object
        // --- ADD K2015/06/18 紀飛 ㈱メイゴ　WebUOE発注回答取込 ---<<<<<

        //private NobutoSpecSalesAcs _noBuToSpecSalesAcs; // ADD 譚洪 K2014/01/22 // DEL 鄧潘ハン K2014/02/17 
        // ---ADD 陳艶丹 2021/02/18 BLINCIDENT-2978 受注伝票明細金額が0の障害対応 ------>>>>>
        //出荷数ゼロ
        private const int CtShipmentCntZero = 0;
        // ---ADD 陳艶丹 2021/02/18 BLINCIDENT-2978 受注伝票明細金額が0の障害対応 ------<<<<<
        // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 ----->>>>>
        // タイマー対象
        private System.Timers.Timer printTimer;
        // --- UPD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----->>>>>
        //// タイマー間隔：5秒
        //private const Int32 TIMERM = 5000;
        // タイマー間隔：1秒
        private const Int32 TIMERM = 1000;
        // --- UPD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 -----<<<<<
        // 印刷スレッドタイムアウト情報クラス
        private ThreadTimeoutSet threadTimeoutInfo = null;
        // 印刷スレッドタイムアウト設定XMLファイル
        private const string xmlFileName = "MAHNB01013A_PrintThreadTimeoutSetting.xml";
        // 印刷タイムアウト デフォルト：360秒
        private const Int32 timeoutSec = 360;
        // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 -----<<<<<
        // --- ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----->>>>>
        // 印刷スレッドリトライ回数 デフォルト：2
        private const Int32 ThreadRetryCntDF = 2;
        private const string RetryLogErr = "伝票発行でエラーが発生しました。";
        private const string RetryLogTimeout = "伝票発行でタイムアウトが発生しました。";
        private const string RetryMsgSlips = "伝票番号：{0}" + "\r\n";
        // --- ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 -----<<<<<
    
        // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133-------->>>>
        private const int CtZero = 0;
        /// <summary> ログ内容</summary>
        private const string LogMessage = "{0} ==> {1}";
        /// <summary>メッセージ内容</summary>
        private const string Msg = "原単価が不正の明細があります。" + "\r\n" + "売上伝票入力を再起動後、再度入力してください。";
        /// <summary>メソッド名</summary>
        private const string MethodNameAfterCell = "uGridDetailsAfterCellUpdate";
        /// <summary>メソッド名</summary>
        private const string MethodNameGuid = "uButtonGuideClick";
        /// <summary>メソッド名</summary>
        private const string MethodNameSave = "Save";
        /// <summary>メソッド名</summary>
        private const string MethodNameGoodsNo = "AfterGoodsNoUpdate";
        /// <summary>ログ出力部品</summary>
        OutLogCommon LogCommon = null;
        // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133--------<<<<<
        private const string AddUpADateMsg = "計上日が不正です。請求先情報の計上日を修正してください。";// ADD K2021/09/03 呉元嘯 BLINCIDENT-3095
        // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）-------->>>>>
        private const string SalesCostErrMsg = "原単価が不正の明細があります。" + "\r\n" + "明細を再度入力し直してください。" + "\r\n" + "不正明細行" + "\r\n";
        private const string StrRow = "行目";
        // ログ内容
        private const string DetailLog = "{0} ==> 手入力区分:{1}、算出原価:{2}、原価単価:{3}、商品情報:{4}";
        // 原価チェック設定XMLファイル
        private const string XmlCostCheck = "MAHNB01013A_CostCheck.xml";
        // 原価チェックフラグ
        private int costCheckFlg;

        /// <summary>
        /// 原価チェックフラグ
        /// </summary>
        public enum CostCheckFlgType : int
        {
            /// <summary>チェックなし</summary>
            noCheck = 0,
            /// <summary>チェックあり</summary>
            Check = 1,
        }
        // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）--------<<<<<
        // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応--->>>>>
        // 原単価チェック設定XMLファイル
        private const string XmlSaveUnitCostCheck = "MAHNB01013A_SaveUnitCostCheck.xml";
        // 原単価チェックフラグ
        private int saveUnitCostCheckFlg;

        /// <summary>
        /// 原単価チェックフラグ
        /// </summary>
        public enum SaveUnitCostCheckFlgType : int
        {
            /// <summary>チェックなし</summary>
            noCheck = 0,
            /// <summary>チェックあり</summary>
            Check = 1,
        }
        // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応---<<<<<

        // --- ADD 2022/01/05 陳艶丹 PMKOBETSU-4148 メーカー名と仕入先名チェック追加 --->>>>>
        private const string SAVEMAKERSUPPLIERERRMSG = "メーカー名/仕入先名が不正の明細があります。" + "\r\n" + "明細を再度入力し直してください。" + "\r\n" + "不正明細行";
        private const string ROWNOFORMAT = "D2";
        // メーカー名と仕入先名チェック設定XMLファイル
        private const string XMLSAVEMAKERSUPPLIERCHECK = "MAHNB01013A_SaveMakerSupplierCheck.xml";
        // メーカー名と仕入先名チェックフラグ
        private int saveMakerSupplierCheckFlg;
        /// <summary>
        /// チェックフラグ
        /// </summary>
        public enum CheckFlgType : int
        {
            /// <summary>チェックなし</summary>
            noCheck = 0,
            /// <summary>チェックあり</summary>
            Check = 1,
        }
        // --- ADD 2022/01/05 陳艶丹 PMKOBETSU-4148 メーカー名と仕入先名チェック追加 ---<<<<<

        private DelphiSalesSlipInputAcs()
        {
            this._salesSlipInputAcs = SalesSlipInputAcs.GetInstance();
            _salesSlipStockInfoInputAcs = SalesSlipStockInfoInputAcs.GetInstance();
            _salesSlipInputAcs.MyOpeCtrl = MyOpeCtrl;
            this._salesInputConstructionAcs = SalesSlipInputConstructionAcs.GetInstance();
            this._salesInputConstructionAcs.EnterpriseCode = this._enterpriseCode;
            this._salesSlipInputInitDataAcs = SalesSlipInputInitDataAcs.GetInstance();
            this._salesSlipInputInitData = new SalesSlipInputInitData();
            this._customerInfoAcs = new CustomerInfoAcs();
            this._uoeSupplierAcs = new UOESupplierAcs();
            this._uoeGuideNameAcs = new UOEGuideNameAcs();
            this._salesDetailDataTable = this._salesSlipInputAcs.SalesDetailDataTable;
            this._completeInfoDataTable = this._salesSlipInputAcs.CompleteInfoDataTable;
            this._salesSlip = new SalesSlip();
            this._form = new Form();
            this._salesSlipInputConstruction = new SalesSlipInputConstruction();
            this._loginSectionCode = LoginInfoAcquisition.Employee.BelongSectionCode;
            this._supplierAcs = new SupplierAcs();
            // ---ADD 2011/02/11------------------->>>>
            this._surveyUseLogOutputAcs = new SurveyUseLogOutputAcs();
            this._salesSlipInputAcs._surveyUseLogOutputAcs = this._surveyUseLogOutputAcs;
            // ---ADD 2011/02/11-------------------<<<<

            _priceSelectSetAcs = new PriceSelectSetAcs();// ADD 2013/01/24 鄧潘ハン REDMINE#34605

            //this._noBuToSpecSalesAcs = NobutoSpecSalesAcs.GetInstance(); // ADD 譚洪 K2014/01/22 // DEL 鄧潘ハン K2014/02/17 

            // add by gaofeng start
            //this._salesSlipInputInitDataAcs = SalesSlipInputInitDataAcs.GetInstance();
            //this._salesInputConstructionAcs = SalesSlipInputConstructionAcs.GetInstance();
            //this._salesDetailDataTable = new SalesInputDataSet.SalesDetailDataTable();
            this._enterMoveTable = new Dictionary<string, EnterMoveValue>(); // 移動先テーブル
            this._enterMoveTableInit = new Dictionary<string, EnterMoveValue>(); // 初期設定移動先テーブル
            //---ADD 2010/07/06---------->>>>>
            this._button_captions_dic = new Dictionary<string, string>();
            this._button_captions_dic.Add("ButtonTool_Close", "終了(F1)");
            this._button_captions_dic.Add("ButtonTool_New", "新規(F9)");
            this._button_captions_dic.Add("ButtonTool_Save", "確定(F10)");
            this._button_captions_dic.Add("ButtonTool_DeleteSlip", "伝票削除(F12)");
            this._button_captions_dic.Add("ButtonTool_Return", "戻る(F2)");
            this._button_captions_dic.Add("ButtonTool_Forward", "進む(F3)");
            this._button_captions_dic.Add("ButtonTool_Guide", "ガイド(F5)");
            this._button_captions_dic.Add("ButtonTool_SearchChange", "検索切替(F4)");
            this._button_captions_dic.Add("ButtonTool_ReadSlip", "伝票呼出(X)");
            this._button_captions_dic.Add("ButtonTool_ShipmentAddUp", "貸出計上(I)");
            this._button_captions_dic.Add("ButtonTool_AcceptAnOrderAddUp", "受注計上(H)");
            this._button_captions_dic.Add("ButtonTool_EstimateAddUp", "見積計上(Q)");
            this._button_captions_dic.Add("ButtonTool_SlipHeaderCopy", "見出貼付(F6)");
            this._button_captions_dic.Add("ButtonTool_Update", "更新(V)");
            this._button_captions_dic.Add("ButtonTool_Retry", "元に戻す(U)");
            this._button_captions_dic.Add("ButtonTool_RedSlip", "赤伝(R)　");
            this._button_captions_dic.Add("ButtonTool_ReturnSlip", "返品(Y)");
            this._button_captions_dic.Add("ButtonTool_CopySlip", "伝票複写(P)");
            //this._button_captions_dic.Add("ButtonTool_Setup", "設定(O)"); // DEL 2010/11/25
            this._button_captions_dic.Add("ButtonTool_Setup", "設定(O)"); // 2010/12/02
            this._button_captions_dic.Add("ButtonTool_ReNewal", "最新情報(A)");
            this._button_captions_dic.Add("ButtonTool_ReferenceList", "問合せ一覧");
            this._button_captions_dic.Add("ButtonTool_DateUpdate", "日付修正(F8)");   // ADD 連番1003 2011/08/02
            this._button_captions_dic.Add("ButtonTool_DetailCopy", "明細貼付(D)");   // ADD 連番729 2011/08/18
            this._button_captions_dic.Add("ButtonTool_DiscountAllLine", "一括値引(E)"); // ADD 2013/01/24 鄧潘ハン REDMINE#34141
            this._button_captions_dic.Add("ButtonTool_AllSecInfo", "在庫情報(S)"); // ADD K2015/04/01 高騁 森川部品個別依頼
            this._button_captions_dic.Add("ButtonTool_UOEDataGet", "回答取込(T)"); // ADD K2015/04/29 黄興貴 富士ジーワイ商事㈱ UOE取込対応
            //this._button_captions_dic.Add("ButtonTool_ReplyTransaction", "回答処理"); // 2011/03/09
            this._button_captions_dic.Add("ButtonTool_Mail", "メール");
            this._button_captions_dic.Add("ButtonTool_HisSearch", "履歴検索(F)");// ADD　2018/09/04 譚洪　履歴自動表示の対応
            //---ADD 2010/07/06----------<<<<<
            this._button_captions_dic.Add("ButtonTool_GetTaxRate", "消費税率(J)");// ADD　譚洪 2020/02/24 PMKOBETSU-2912の対応
            this._button_captions_dic.Add("ButtonTool_EBooks", "電帳.DX(G)");// ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応

            this._effectiveList = new ArrayList();
            this._effectiveList.Add(this._salesDetailDataTable.BLGoodsCodeColumn.ColumnName);               // BLコード
            this._effectiveList.Add(this._salesDetailDataTable.GoodsNameColumn.ColumnName);                 // 品名
            this._effectiveList.Add(this._salesDetailDataTable.GoodsNoColumn.ColumnName);                   // 品番
            this._effectiveList.Add(this._salesDetailDataTable.GoodsKindCodeColumn.ColumnName);             // 商品属性(純正優良)
            this._effectiveList.Add(this._salesDetailDataTable.GoodsMakerCdColumn.ColumnName);              // メーカー
            this._effectiveList.Add(this._salesDetailDataTable.SupplierCdColumn.ColumnName);                // 仕入先
            this._effectiveList.Add(this._salesDetailDataTable.AcceptAnOrderCntDisplayColumn.ColumnName);   // 受注数
            this._effectiveList.Add(this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName);        // 出荷数
            this._effectiveList.Add(this._salesDetailDataTable.SalesCodeColumn.ColumnName);                 // 販売区分
            this._effectiveList.Add(this._salesDetailDataTable.ListPriceDisplayColumn.ColumnName);          // 定価
            this._effectiveList.Add(this._salesDetailDataTable.CostRateColumn.ColumnName);                  // 原価率
            this._effectiveList.Add(this._salesDetailDataTable.SalesUnitCostColumn.ColumnName);             // 原価単価
            this._effectiveList.Add(this._salesDetailDataTable.SalesRateColumn.ColumnName);                 // 売価率
            this._effectiveList.Add(this._salesDetailDataTable.SalesUnPrcDisplayColumn.ColumnName);         // 売上単価
            this._effectiveList.Add(this._salesDetailDataTable.SalesMoneyDisplayColumn.ColumnName);         // 売上金額
            this._effectiveList.Add(this._salesDetailDataTable.WarehouseCodeColumn.ColumnName);             // 倉庫
            this._effectiveList.Add(this._salesDetailDataTable.SupplierCdForStockColumn.ColumnName);        // 仕入先(仕入情報) // ADD 2013/02/14 T.Miyamoto

            this._startKeyName = this._salesDetailDataTable.GoodsNoColumn.ColumnName;
            this._startKeyNameInit = this._salesDetailDataTable.GoodsNoColumn.ColumnName;

            this._endKeyNameList = new ArrayList();

            this._endKeyNameList = new ArrayList();
            this._endKeyNameList.Add(this._salesDetailDataTable.SalesUnPrcDisplayColumn.ColumnName);
            this._endKeyNameList.Add(this._salesDetailDataTable.SalesMoneyDisplayColumn.ColumnName);
            this._endKeyNameList.Add(this._salesDetailDataTable.DtlNoteColumn.ColumnName);
            this._endKeyNameList.Add(this._salesDetailDataTable.DeliGdsCmpltDueDateColumn.ColumnName);
            this._endKeyNameList.Add(this._salesDetailDataTable.SlipMemoExistColumn.ColumnName);
            this._endKeyNameList.Add(this._salesDetailDataTable.SupplierSlipExistColumn.ColumnName);
            this._endKeyNameList.Add(this._salesDetailDataTable.WarehouseCodeColumn.ColumnName);
            this._endKeyNameList.Add(this._salesDetailDataTable.PartySalesSlipNumColumn.ColumnName);
            this._endKeyNameList.Add(this._salesDetailDataTable.GoodsMngNoColumn.ColumnName); // 2010/05/30
            this._endKeyNameList.Add(this._salesDetailDataTable.SupplierCdForStockColumn.ColumnName);

            this._endKeyNameListInit = new ArrayList();
            this._endKeyNameListInit.Add(this._salesDetailDataTable.SalesUnPrcDisplayColumn.ColumnName);
            this._endKeyNameListInit.Add(this._salesDetailDataTable.SalesMoneyDisplayColumn.ColumnName);
            this._endKeyNameListInit.Add(this._salesDetailDataTable.DeliGdsCmpltDueDateColumn.ColumnName);
            this._endKeyNameListInit.Add(this._salesDetailDataTable.SlipMemoExistColumn.ColumnName);
            this._endKeyNameListInit.Add(this._salesDetailDataTable.SupplierSlipExistColumn.ColumnName);
            this._endKeyNameListInit.Add(this._salesDetailDataTable.WarehouseCodeColumn.ColumnName);
            this._endKeyNameListInit.Add(this._salesDetailDataTable.PartySalesSlipNumColumn.ColumnName);
            this._endKeyNameListInit.Add(this._salesDetailDataTable.GoodsMngNoColumn.ColumnName); // 2010/05/30
            // add by gaofeng end

            //>>>2010/11/30
            this._salesSlipInputAcs.GetHisTotalDayMonthly(); // 前回月次更新日設定
            this._salesSlipInputAcs.GetFinancialYearTable(); // 自社テーブル開始日リスト設定
            //<<<2010/11/30
            // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 ----->>>>>
            // タイマー設定
            printTimer = new System.Timers.Timer(TIMERM);
            // タイマーイベント
            printTimer.Elapsed += new ElapsedEventHandler(OnPrintTimedEvent);
            // タイマー開始
            printTimer.Enabled = true;
            // 印刷スレッドタイムアウト時間取得
            GetXmlInfo();
            // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 -----<<<<<
            // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）-------->>>>>
            // 原価チェックファイル取得
            GetCostCheckXmlInfo();
            // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）--------<<<<<
            // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応--->>>>>
            // 原価チェックファイル取得
            GetSaveUnitCostCheckXmlInfo();
            // 制御ファイル取得
            _salesSlipInputInitDataAcs.GetControlXmlInfo();
            // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応---<<<<<
            // --- ADD 2022/01/05 陳艶丹 PMKOBETSU-4148 メーカー名と仕入先名チェック追加 --->>>>>
            // メーカー名と仕入先名チェック制御ファイル取得
            GetSaveMakerSupplierCheckXmlInfo();
            // --- ADD 2022/01/05 陳艶丹 PMKOBETSU-4148 メーカー名と仕入先名チェック追加 ---<<<<<
        }

        public static DelphiSalesSlipInputAcs GetInstance()
        {
            if (_delphiSalesSlipInputAcs == null)
            {
                _delphiSalesSlipInputAcs = new DelphiSalesSlipInputAcs();
            }
            return _delphiSalesSlipInputAcs;
        }

        //>>>2010/05/30
        string _parameter = string.Empty; // 起動パラメータ
        long _scmInquiryNumber = 0;    // 問合せ番号(SCM用)
        int _scmAcptAnOdrStatus = 0;   // 受注ステータス(SCM用)
        string _scmSalesSlipNum = SalesSlipInputAcs.ctDefaultSalesSlipNum;   // 売上伝票番号(SCM用)
        string _inqOriginalEpCd = string.Empty;
        string _inqOriginalSecCd = string.Empty;
        int _inqOrdDivCd = 0;
        int _customerCode = 0;
        // 2011/02/18 >>>
        //int _answerDivCd = 0;
        short _cancelDiv = 0;
        // 2011/02/18 <<<
        //<<<2010/05/30

        // ===================================================================================== //
        // プロパティ
        // ===================================================================================== //
        # region Properties
        /// <summary>
        /// 操作権限の制御オブジェクトを取得します。
        /// </summary>
        /// <value>操作権限の制御オブジェクト</value>
        private IOperationAuthority MyOpeCtrl
        {
            get
            {
                if (_operationAuthority == null)
                {
                    _operationAuthority = OpeAuthCtrlFacade.CreateEntryOperationAuthority("MAHNB01000U", this);
                }
                return _operationAuthority;
            }
        }
        # endregion

        /// <summary>
        /// 元に戻す処理
        /// </summary>
        /// <param name="isConfirm">true:確認ダイアログを表示する false:表示しない</param>
        /// <param name="acptAnOdrStatus">受注ステータス</param>
        /// <param name="salesSlipNum">売上伝票番号</param>
        public void Retry(bool isConfirm, out bool dialogResultFlg)
        {
            dialogResultFlg = true;
            salesSlipNum = this._salesSlipInputAcs.SalesSlip.SalesSlipNum;
            _acptAnOdrStatus = this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay; // ADD 2013/05/07 Y.Wakita
            if ((isConfirm) && (this._salesSlipInputAcs.IsDataChanged))
            {
                DialogResult dialogResult = TMsgDisp.Show(
                    null,
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "todo",
                    "現在、編集中のデータが存在します。" + "\r\n" + "\r\n" +
                    "初期状態に戻しますか？",
                    0,
                    MessageBoxButtons.YesNo,
                    MessageBoxDefaultButton.Button1);

                if (dialogResult != DialogResult.Yes)
                {
                    dialogResultFlg = false;
                }
                // --- ADD yangyi K2014/02/09 ------->>>>>>>>>>> 
                // ------ UPD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
                //if (showEnable())
                if (showEnable() || showCustomerGuid())
                // ------ UPD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
                {
                    //得意先情報ガイドを閉じる
                    if (dialogResult == DialogResult.Yes)
                    {
                        noteInfoClose();
                    }
                }
                // --- ADD yangyi K2014/02/09 -------<<<<<<<<<<<
            }
        }

        // --- ADD yangyi K2014/02/09 ------->>>>>>>>>>> 
        // --- DEL zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 ------->>>>>
        //private const string startExe = "PMKHN02830UC.exe";
        //private const string startExeName = "PMKHN02830UC";
        // --- DEL zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 -------<<<<<
        // --- ADD zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 ------->>>>>
        //private const string startExeName = "PMKHN02840UC"; // DEL zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について②
        // --- ADD zhujw K2014/05/08 丸徳商会-得意先ガイドの改良対応 -------<<<<<
        private const string startExeName = "PMKHN02830UC"; // ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について②
        private bool _afterSettingFlag = false;  //ADD yangyi K2014/02/25

        /// <summary>
        /// 得意先情報ガイドを閉じる
        /// </summary>
        private void noteInfoClose()
        {
            // ------ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について② -------->>>>>
            if (_salesSlipInputAcs != null)
            {
                this._salesSlipInputAcs.PreCustomCd = 0;
            }
            // ------ADD zhujw K2014/06/03 RedMine#42785 ㈱丸徳商会（得意先ガイド）_システムテスト障害について② --------<<<<<
            int startExeId = _salesSlipInputAcs._startExeId;　　//processIDを設定
            Process[] allProgresse = System.Diagnostics.Process.GetProcessesByName(startExeName);
            foreach (Process closeProgress in allProgresse)
            {
                if (closeProgress.ProcessName.Equals(startExeName)
                    && closeProgress.Id == startExeId)
                {
                    closeProgress.Kill();
                    closeProgress.WaitForExit();
                    break;
                }
            }
        }

        /// <summary>
        /// 前橋京和商会個別オプション判定
        /// </summary>
        private bool showEnable()
        {
            Broadleaf.Application.Remoting.ParamData.PurchaseStatus ps;
            ps = LoginInfoAcquisition.SoftwarePurchasedCheckForUSB(ConstantManagement_SF_PRO.SoftwareCode_OPT_CPM_MaehashiKyowaGuideCtl);

            if (ps == Broadleaf.Application.Remoting.ParamData.PurchaseStatus.Contract)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        // --- ADD yangyi K2014/02/09 -------<<<<<<<<<<<

        // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
        /// <summary>
        /// 得意先ガイド表示判定
        /// </summary>
        /// <remarks>
        /// <br>Update Note: 2021/04/12 陳艶丹</br>
        /// <br>管理番号   : 11770021-00</br>
        /// <br>           : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
        /// </remarks>
        private bool showCustomerGuid()
        {
            //売上伝票設定得意先情報ガイド表示=有り、且つ、得意先マスタ.得意先情報ガイド表示=有りの場合、得意先ガイドを表示する
            if ((_salesInputConstructionAcs.CustomerGuidDisplayValue == CtDisplayCd) &&
                 (_salesSlipInputAcs.DisplayDivCode == CtDisplayCd))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<

        /// <summary>
        /// 元に戻す処理
        /// </summary>
        /// <param name="isConfirm">true:確認ダイアログを表示する false:表示しない</param>
        /// <param name="acptAnOdrStatus">受注ステータス</param>
        /// <param name="salesSlipNum">売上伝票番号</param>
        /// <br>Update Note: 2010/06/02 張凱 PM.NS障害・改良対応（７月リリース案件）No.15</br>
        /// <br>             伝票修正呼出し時の入力明細制御、明細数以上は行追加出来ないように修正する。</br>
        public void RetryResult(out bool statusFlg)
        {
            this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay = _acptAnOdrStatus; // ADD 2013/05/07 Y.Wakita
            int acptAnOdrStatus = this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay;
            statusFlg = false;

            if (salesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum)
            {
                SalesSlip baseSalesSlip;

                // データリード処理
                int status = this._salesSlipInputAcs.ReadDBData(this._enterpriseCode, acptAnOdrStatus, salesSlipNum, out baseSalesSlip);

                // --- ADD 2010/06/02 ---------->>>>>
                if (this._salesSlipInputAcs.ReadSlipFlg)
                {
                    // 明細行数制限
                    this._salesSlipInputAcs.SettingSalesDetailRowInputRowCount(this._salesSlipInputAcs.SalesSlip.DetailRowCountForReadSlip);
                }
                // --- ADD 2010/06/02 ----------<<<<<

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;

                    // 表示用受注ステータス設定処理
                    SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

                    // 表示用伝票区分設定処理
                    SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

                    statusFlg = true;

                    // 売上データクラス→画面格納処理
                    //this.SetDisplay(salesSlip);

                    // 明細グリッド設定処理
                    //this._salesSlipDetailInput.SettingGrid();
                }
                else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                {
                    TMsgDisp.Show(
                        null,
                        emErrorLevel.ERR_LEVEL_INFO,
                        "todo",
                        "該当する売上データが存在しません。",
                        -1,
                        MessageBoxButtons.OK);
                }
                else
                {
                    TMsgDisp.Show(
                        null,
                        emErrorLevel.ERR_LEVEL_STOPDISP,
                        "todo",
                        "売上データの取得に失敗しました。",
                        status,
                        MessageBoxButtons.OK);
                }
            }
        }

        //>>>2010/05/30
        public bool Clear(bool isConfirm, bool keepAcptAnOdrStatus, bool keepDate, bool keepFooterInfo, bool keepCustomer, bool keepSalesDate)
        {
            return this.Clear(isConfirm, keepAcptAnOdrStatus, keepDate, keepFooterInfo, keepCustomer, keepSalesDate, false, 0);
        }
        //<<<2010/05/30

        //public bool Clear(bool isConfirm, bool keepAcptAnOdrStatus, bool keepDate, bool keepFooterInfo, bool keepCustomer) // 2009/09/10 ADD //DEL 2010/05/21
        //public bool Clear(bool isConfirm, bool keepAcptAnOdrStatus, bool keepDate, bool keepFooterInfo, bool keepCustomer, bool keepSalesDate) //ADD 2010/05/21 //DEL 2010/06/02
        public bool Clear(bool isConfirm, bool keepAcptAnOdrStatus, bool keepDate, bool keepFooterInfo, bool keepCustomer, bool keepSalesDate, bool keepDetailRowCount, int customerCode) //ADD 2010/06/02
        {
            //dialogResultFlg = true;
            try
            {
                if ((isConfirm) && (this._salesSlipInputAcs.IsDataChanged))
                {
                    DialogResult dialogResult = TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        //this.Name,
                        "tanh",
                        "現在、編集中のデータが存在します。" + "\r\n" + "\r\n" +
                        "初期状態に戻しますか？",
                        0,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button1);

                    if (dialogResult != DialogResult.Yes)
                    {
                        //dialogResultFlg = false;
                        return false;
                    }
                }

                // 受注ステータスを保持
                SalesSlip svSalesSlip = this._salesSlipInputAcs.SalesSlip.Clone();

                // 受注ステータスを再設定
                if (keepAcptAnOdrStatus)
                {
                    // 売上データ初期インスタンス取得処理
                    this._salesSlipInputAcs.CreateSalesSlipInitialData(svSalesSlip.AcptAnOdrStatusDisplay, svSalesSlip.AccRecDivCd, this._salesInputConstructionAcs.SalesInputConstruction.StockGoodsCdValue, keepDate, keepFooterInfo);

                    this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay = svSalesSlip.AcptAnOdrStatusDisplay; // 受注ステータス

                    //this._salesSlipInputAcs.RevivalHeader(svSalesSlip, keepFooterInfo, keepCustomer); // DEL 2010/05/21
                    //this._salesSlipInputAcs.RevivalHeader(svSalesSlip, keepFooterInfo, keepCustomer, keepSalesDate); //ADD 2010/05/21 // 2010/05/30
                    this._salesSlipInputAcs.RevivalHeader(svSalesSlip, keepFooterInfo, keepCustomer, keepSalesDate, customerCode); // 2010/05/30

                    // --- DEL 2013/04/22 Y.Wakita ---------->>>>>
                    ////>>>2010/06/10
                    //if (this._salesSlipInputInitDataAcs.GetSalesTtlSt() != null)
                    //{
                    //    // ------------ UPD 連番1002 2011/08/08 ------------------------ >>>>>
                    //    //if (this._salesInputConstructionAcs.CursorPosValue == 0) // DEL licb 2013/03/08 Redmine#34831
                    //    if (this._salesInputConstructionAcs.CursorPosValue == 1) //ADD licb 2013/03/08 Redmine#34831
                    //    {
                    //    }
                    //    else
                    //    {
                    //        if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().PartsSearchDivCd == 0)
                    //        {
                    //            this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.BLCodeSearch;
                    //        }
                    //        else
                    //        {
                    //            this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch;
                    //        }

                    //    }
                    //    // ------------ UPD 連番1002 2011/08/08 ------------------------ <<<<<
                    //}
                    ////<<<2010/06/10
                    // --- DEL 2013/04/22 Y.Wakita ----------<<<<<
                    // --- ADD 2013/04/26 Y.Wakita ---------->>>>>
                    if (this._salesSlipInputInitDataAcs.GetSalesTtlSt() != null)
                    {
                        if (this._salesInputConstructionAcs.CursorPosValue == 0)
                        {
                        }
                        else
                        {
                            // --- ADD 2013/05/07 Y.Wakita ---------->>>>>
                            if (keepFooterInfo == false)
                            {
                            // --- ADD 2013/05/07 Y.Wakita ----------<<<<<
                                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().PartsSearchDivCd == 0)
                                {
                                    this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.BLCodeSearch;
                                }
                                else
                                {
                                    this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch;
                                }
                            // --- ADD 2013/05/07 Y.Wakita ---------->>>>>
                            }
                            // --- ADD 2013/05/07 Y.Wakita ----------<<<<<
                        }
                    }
                    // --- ADD 2013/04/26 Y.Wakita ----------<<<<<
                }
                else
                {
                    // 売上データ初期インスタンス取得処理
                    this._salesSlipInputAcs.CreateSalesSlipInitialData((int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales, (int)SalesSlipInputAcs.AccRecDivCd.AccRec, this._salesInputConstructionAcs.SalesInputConstruction.StockGoodsCdValue, keepDate, keepFooterInfo);

                    // 前回使用した値を初期表示する
                    SalesSlip tempSalesSlip = this._salesSlipInputAcs.SalesSlip;

                    //>>>2010/05/30
                    //this.SettingInitData(tempSalesSlip, false);
                    if (customerCode != 0)
                    {
                        this.SettingInitData(tempSalesSlip, customerCode);
                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                        this._salesSlipInputInitDataAcs.ConsTaxLayMethod = tempSalesSlip.ConsTaxLayMethod;
                        // 消費税再設定
                        this._salesSlipInputInitDataAcs.GetTaxRate(tempSalesSlip.SalesDate);
                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<

                    }
                    else
                    {
                        this.SettingInitData(tempSalesSlip, false);
                    }
                    //<<<2010/05/30

                    // 部品検索モード
                    // --- DEL 2013/04/22 Y.Wakita ---------->>>>>
                    //this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.BLCodeSearch; // 初期値[部品検索]
                    //_searchPartsModeProperty = (int)SalesSlipInputAcs.SearchPartsMode.BLCodeSearch;
                    // --- DEL 2013/04/22 Y.Wakita ----------<<<<<
                    // --- ADD 2013/04/26 Y.Wakita ---------->>>>>
                    this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.BLCodeSearch; // 初期値[部品検索]
                    _searchPartsModeProperty = (int)SalesSlipInputAcs.SearchPartsMode.BLCodeSearch;
                    // --- ADD 2013/04/26 Y.Wakita ----------<<<<<
                    if (this._salesSlipInputInitDataAcs.GetSalesTtlSt() != null)
                    {
                        // ------------ UPD 連番1002 2011/08/08 ------------------------ >>>>>
                        //---DEL 2011/09/29 -------------------------------->>>>>
                        //if (this._salesInputConstructionAcs.CursorPosValue == 0)
                        //{
                        //}
                        //else
                        //{
                        // --- DEL 2013/04/26 Y.Wakita ---------->>>>>
                        //// --- ADD 2013/04/22 Y.Wakita ---------->>>>>
                        //// --- UPD 2013/04/23 Y.Wakita ---------->>>>>
                        ////if (this._salesInputConstructionAcs.CursorPosValue == 1)
                        //if (this._salesInputConstructionAcs.CursorPosValue == 0)
                        //// --- UPD 2013/04/23 Y.Wakita ----------<<<<<
                        //{
                        //    // 入力後カーソル位置：ＰＭＮＳタイプ
                        //    this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay = svSalesSlip.AcptAnOdrStatusDisplay; // 受注ステータス
                        //    if (_searchPartsModeProperty == 0)
                        //    {
                        //        if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().PartsSearchDivCd == 0)
                        //        {
                        //            this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.BLCodeSearch;
                        //            _searchPartsModeProperty = 1;
                        //        }
                        //        else
                        //        {
                        //            this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch;
                        //            _searchPartsModeProperty = 2;
                        //        }
                        //    }
                        //}
                        //else
                        //{
                        //    // 入力後カーソル位置：ＰＭ７タイプ
                        //    // --- ADD 2013/04/22 Y.Wakita ----------<<<<<
                        //    if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().PartsSearchDivCd == 0)
                        //    //---DEL 2011/09/29 --------------------------------<<<<<
                        //    {
                        //        this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.BLCodeSearch;
                        //        _searchPartsModeProperty = 1;
                        //    }
                        //    else
                        //    {
                        //        this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch;
                        //        _searchPartsModeProperty = 2;
                        //    }
                        //// --- ADD 2013/04/22 Y.Wakita ---------->>>>>
                        //}
                        //// --- ADD 2013/04/22 Y.Wakita ----------<<<<<
                        // --- DEL 2013/04/26 Y.Wakita ----------<<<<<
                        //}// DEL 2011/09/29
                        // ------------ UPD 連番1002 2011/08/08 ------------------------ <<<<<
                        // --- ADD 2013/05/07 Y.Wakita ---------->>>>>
                        if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().PartsSearchDivCd == 0)
                        {
                            this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.BLCodeSearch;
                            _searchPartsModeProperty = 1;
                        }
                        else
                        {
                            this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch;
                            _searchPartsModeProperty = 2;
                        }
                        // --- ADD 2013/05/07 Y.Wakita ----------<<<<<
                    }
                    // --- DEL m.suzuki 2010/10/28 ---------->>>>>
                    //// 伝票区分コンボエディタアイテム設定処理
                    //this.SetItemtSalesSlipCd(ref tempSalesSlip, tempSalesSlip.AcptAnOdrStatusDisplay, !keepAcptAnOdrStatus);
                    // --- DEL m.suzuki 2010/10/28 ----------<<<<<
                }

                SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;

                // 伝票番号
                salesSlip.SalesSlipNum = SalesSlipInputAcs.ctDefaultSalesSlipNum;

                // 受注ステータス、見積区分セット
                SalesSlipInputAcs.SetAcptAnOdrStatusAndEstimateDivideFromDisplay(ref salesSlip);
                // 受注ステータス(表示用)再セット
                SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

                // --- ADD m.suzuki 2010/10/28 ---------->>>>>
                // 伝票区分コンボエディタアイテム設定処理
                this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, !keepAcptAnOdrStatus);
                // --- ADD m.suzuki 2010/10/28 ----------<<<<<

                //---ADD 鄧潘ハン 2012/04/06 Redmine#29216-------------------->>>>>
                //if (customerCode == 0)//DEL 鄧潘ハン 2012/05/09 Redmine#29216
                if (salesSlip.CustomerCode == 0)//ADD 鄧潘ハン 2012/05/09 Redmine#29216
                {
                    //得意先掛率グループ情報をクリアする
                    this._salesSlipInputAcs.ClearCustRateGroupList();
                }
                //---ADD 鄧潘ハン 2012/04/06 Redmine#29216--------------------<<<<<
            }
            catch (ApplicationException ae)
            {
                TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_STOP,
                    "catch",
                    ae.Message,
                    4,
                    MessageBoxButtons.OK);

                return false;
            }

            //// 各種データクリア処理
            this._salesSlipInputAcs.ClearDataForNew();
            //// 売上入力明細クリア処理
            this.Clear();

            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
            this._salesSlipInputInitDataAcs.RentSyncSupFlg = false;
            this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag = false;
            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<

            //// --- ADD 2009/09/08② ---------->>>>>
            ////追加情報タブ項目Visible設定
            //SettingAddInfoVisible();
            //// --- ADD 2009/09/08② ----------<<<<<

            //// 車両情報データ→画面
            SalesInputDataSet.CarInfoRow row = this._salesSlipInputAcs.GetCarInfoRow(1, SalesSlipInputAcs.GetCarInfoMode.NewInsertMode);
            //this.SetDisplayCarInfo(row, CarSearchType.csNone);

            //// 部品検索切替反映処理
            this.ChangeSearchModeReflect();

            // データ変更フラグプロパティをfalseにする
            this._salesSlipInputAcs.IsDataChanged = false;

            // XML読み込み
            GetSetupEnterMoveTable();
            //DeserializeCustomize(ctAssemblyName);     // DEL 2010/07/06
            DeserializeCustomizeForBat(ctAssemblyName); // ADD 2010/07/06
            // --- ADD 2010/05/04 ---------->>>>>
            // --- UPD 2010/06/02 ---------->>>>>
            //this._salesSlipInputAcs.ReadSlipFlg = false;
            if (!keepDetailRowCount)
            {
                this._salesSlipInputAcs.ReadSlipFlg = false;
            }
            // --- UPD 2010/06/02 ----------<<<<<
            // --- ADD 2010/05/04 ----------<<<<<

            // --- ADD yangyi K2014/02/09 ------->>>>>>>>>>>
            //得意先情報ガイドを閉じる
            // ------ UPD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
            //if (showEnable())
            if (showEnable() || showCustomerGuid())
            // ------ UPD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
            {
                if (!_afterSettingFlag) //ADD yangyi K2014/02/25
                {
                    if (!keepCustomer)
                    {
                        noteInfoClose();
                    }
                }
                _afterSettingFlag = false; //ADD yangyi K2014/02/25
            }
            // --- ADD yangyi K2014/02/09 -------<<<<<<<<<<<
            return true;
        }

        /// <summary>
        ///粗利率取得処理
        /// </summary>
        public void GetGrossProfitRateFlg(out bool grossProfitRateFlg)
        {
            grossProfitRateFlg = this._salesSlipInputAcs._grossProfitRateFlg;
        }

        public void GetSearchPartsModeProperty(out int searchPartsModeProperty)
        {
            searchPartsModeProperty = _searchPartsModeProperty;
        }

        // --- ADD 2010/06/02 ---------->>>>>

        // ADD 2010/09/14 --- >>>>
        public void SetHomeKeyFlg(bool homeKeyFlg)
        {
            this._salesSlipInputAcs._homeKeyFlg = homeKeyFlg;
        }
        // ADD 2010/09/14 --- <<<<

        /// <summary>
        /// ReadSlipFlgを取得する
        /// </summary>
        /// <param name="readSlipFlg"></param>
        public void GetReadSlipFlg(out bool readSlipFlg)
        {
            readSlipFlg = this._salesSlipInputAcs.ReadSlipFlg;
        }
        // --- ADD 2010/06/02 ----------<<<<<

        private void ChangeSearchModeReflect()
        {
            if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.BLCodeSearch)
            {
                this._searchPartsModeProperty = 1;
                this._salesSlipInputAcs.SearchCarDiv = true;
            }
            else if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch)
            {
                this._searchPartsModeProperty = 2;
                this._salesSlipInputAcs.SearchCarDiv = false;
            }

            // 売上データクラス→画面格納処理
            this.SetDisplay(this._salesSlipInputAcs.SalesSlip);
            //// 明細フォーカス位置設定
            //if (this._salesSlipDetailInput.ContainsFocus)
            //{
            //    if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch)
            //    {
            //        if (this._salesSlipDetailInput.uGrid_Details.ActiveCell != null) this._salesSlipDetailInput.SettingFocus(this._salesSlipInputAcs.SalesDetailDataTable.GoodsNoColumn.ColumnName);
            //    }
            //    else if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.BLCodeSearch)
            //    {
            //        if (this._salesSlipDetailInput.uGrid_Details.ActiveCell != null) this._salesSlipDetailInput.SettingFocus(this._salesSlipInputAcs.SalesDetailDataTable.BLGoodsCodeColumn.ColumnName);
            //    }
            //}

            //// 移動先テーブル再設定処理
            //this._salesSlipDetailInput.ReSettingEnterMoveTable();

            //this._startKeyName = this._salesDetailDataTable.GoodsNoColumn.ColumnName;
            //this._startKeyNameInit = this._salesDetailDataTable.GoodsNoColumn.ColumnName;
            //this._enterMoveTable.Clear();
            //this._enterMoveTableInit.Clear();

            //GetSetupEnterMoveTable();
            ReSettingEnterMoveTable();
        }

        private void SetDisplay(SalesSlip salesSlip)
        {
            // 画面表示処理（ヘッダ、フッタ情報／売上データより）
            this.SetDisplayHeaderFooterInfo(salesSlip);

            // 画面表示処理（売上金額合計情報）
            //this.SetDisplayTotalPriceInfo(salesSlip);
        }

        //備考検索
        public void GetNoteGuidList(string enterpriseCode)
        {
            ArrayList aList;
            NoteGuidAcs noteGuidAcs = new NoteGuidAcs();
            noteGuidAcs.IsLocalDBRead = false;
            int status = noteGuidAcs.SearchBody(out aList, enterpriseCode);
            List<NoteGuidBd> _noteGuidList = new List<NoteGuidBd>();
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                if (aList != null)
                {
                    _noteGuidList = new List<NoteGuidBd>((NoteGuidBd[])aList.ToArray(typeof(NoteGuidBd)));
                }
            }
            this._salesSlipInputInitDataAcs.SetNoteGuidList(_noteGuidList);
        }

        private void SetDisplayHeaderFooterInfo(SalesSlip salesSlip)
        {
            #region ●売上情報
            if (salesSlip == null) return;
            this._salesSlip = salesSlip;

            // 拠点
            //this.tEdit_SectionCode.Value = salesSlip.ResultsAddUpSecCd.Trim();
            _salesSlip.ResultsAddUpSecCd = salesSlip.ResultsAddUpSecCd.Trim();

            if (string.IsNullOrEmpty(salesSlip.ResultsAddUpSecNm))
            {
                SecInfoSet secInfoSet = this._salesSlipInputInitDataAcs.GetSecInfo(salesSlip.ResultsAddUpSecCd.Trim());
                if (secInfoSet != null)
                {
                    //this.uLabel_SectionNm.Text = secInfoSet.SectionGuideNm;
                    _salesSlip.ResultsAddUpSecNm = secInfoSet.SectionGuideNm;
                }
                else
                {
                    //this.uLabel_SectionNm.Text = string.Empty;
                    _salesSlip.ResultsAddUpSecNm = string.Empty;
                }
            }
            else
            {
                //this.uLabel_SectionNm.Text = salesSlip.ResultsAddUpSecNm;
                _salesSlip.ResultsAddUpSecNm = salesSlip.ResultsAddUpSecNm;
            }

            // 部門
            //this.tNedit_SubSectionCode.SetInt(salesSlip.SubSectionCode);
            _salesSlip.SubSectionCode = salesSlip.SubSectionCode;

            if (string.IsNullOrEmpty(salesSlip.SubSectionName))
            {
                string name = this._salesSlipInputInitDataAcs.GetName_FromSubSection(salesSlip.SubSectionCode);
                if (string.IsNullOrEmpty(name.Trim()))
                {
                    //this.tNedit_SubSectionCode.SetInt(0);
                    _salesSlip.SubSectionCode = 0;
                    //this.uLabel_SubSectionNm.Text = string.Empty;
                    _salesSlip.SubSectionName = string.Empty;
                }
                else
                {
                    //this.uLabel_SubSectionNm.Text = name;
                    _salesSlip.SubSectionName = name;
                }
            }
            else
            {
                //this.uLabel_SubSectionNm.Text = salesSlip.SubSectionName;
                _salesSlip.SubSectionName = salesSlip.SubSectionName;
            }
            // 伝票番号
            //this.tNedit_SalesSlipNum.SetInt(TStrConv.StrToIntDef(salesSlip.SalesSlipNum, 0));
            //_salesSlip.SalesSlipNum = TStrConv.StrToIntDef(salesSlip.SalesSlipNum, 0).ToString();
            _salesSlip.SalesSlipNum = salesSlip.SalesSlipNum;
            // 担当者
            //this.tEdit_SalesEmployeeCd.Text = salesSlip.SalesEmployeeCd.Trim();
            _salesSlip.SalesEmployeeCd = salesSlip.SalesEmployeeCd.Trim();
            //this.uLabel_SalesEmployeeNm.Text = salesSlip.SalesEmployeeNm;
            _salesSlip.SalesEmployeeNm = salesSlip.SalesEmployeeNm;
            // 受注者
            //this.tEdit_FrontEmployeeCd.Text = salesSlip.FrontEmployeeCd.Trim();
            _salesSlip.FrontEmployeeCd = salesSlip.FrontEmployeeCd.Trim();
            //this.uLabel_FrontEmployeeNm.Text = salesSlip.FrontEmployeeNm;
            _salesSlip.FrontEmployeeNm = salesSlip.FrontEmployeeNm;
            // 発行者
            //this.tEdit_SalesInputCode.Text = salesSlip.SalesInputCode.Trim();
            _salesSlip.SalesInputCode = salesSlip.SalesInputCode.Trim();
            //this.uLabel_SalesInputNm.Text = salesSlip.SalesInputName;
            _salesSlip.SalesInputName = salesSlip.SalesInputName;
            // 売上形式(表示用)
            //ComboEditorItemControl.SetComboEditorItemIndex(this.tComboEditor_AcptAnOdrStatusDisplay, salesSlip.AcptAnOdrStatusDisplay, true);
            _salesSlip.AcptAnOdrStatusDisplay = salesSlip.AcptAnOdrStatusDisplay;
            // 売上形式
            //ComboEditorItemControl.SetComboEditorItemIndex(this.tComboEditor_AcptAnOdrStatus, salesSlip.AcptAnOdrStatus, true);
            _salesSlip.AcptAnOdrStatus = salesSlip.AcptAnOdrStatus;
            // 伝票区分(表示用)
            //ComboEditorItemControl.SetComboEditorItemIndex(this.tComboEditor_SalesSlipDisplay, salesSlip.SalesSlipDisplay, true);
            _salesSlip.SalesSlipDisplay = salesSlip.SalesSlipDisplay;
            // 商品区分
            //ComboEditorItemControl.SetComboEditorItemIndex(this.tComboEditor_SalesGoodsCd, salesSlip.SalesGoodsCd, true);
            _salesSlip.SalesGoodsCd = salesSlip.SalesGoodsCd;
            // 得意先
            //this.tNedit_CustomerCode.SetInt(salesSlip.CustomerCode);
            _salesSlip.CustomerCode = salesSlip.CustomerCode;
            //this.tEdit_CustomerName.Text = salesSlip.CustomerSnm;
            _salesSlip.CustomerSnm = salesSlip.CustomerSnm;
            // 納入先
            //this.tNedit_AddresseeCode.SetInt(salesSlip.AddresseeCode);
            //this.tEdit_AddresseeName.Text = salesSlip.AddresseeName + salesSlip.AddresseeName2;
            _salesSlip.AddresseeCode = salesSlip.AddresseeCode;
            _salesSlip.AddresseeName = salesSlip.AddresseeName;
            _salesSlip.AddresseeName2 = salesSlip.AddresseeName2;
            // 売上日
            //this.tDateEdit_SalesDate.SetDateTime(salesSlip.SalesDate);
            _salesSlip.SalesDate = salesSlip.SalesDate;
            // 入力日
            //this.tDateEdit_SearchSlipDate.SetDateTime(salesSlip.SearchSlipDate);
            _salesSlip.SearchSlipDate = salesSlip.SearchSlipDate;
            // 得意先注番
            //this.tEdit_PartySaleSlipNum.Text = salesSlip.PartySaleSlipNum;
            _salesSlip.PartySaleSlipNum = salesSlip.PartySaleSlipNum;
            // 備考１
            //this.tEdit_SlipNote.Text = salesSlip.SlipNote;
            _salesSlip.SlipNote = salesSlip.SlipNote;
            // 備考２
            //this.tEdit_SlipNote2.Text = salesSlip.SlipNote2;
            _salesSlip.SlipNote2 = salesSlip.SlipNote2;
            // 備考３
            //this.tEdit_SlipNote3.Text = salesSlip.SlipNote3;
            _salesSlip.SlipNote3 = salesSlip.SlipNote3;

            // 備考１コード
            //this.tNedit_SlipNoteCode.SetInt(salesSlip.SlipNoteCode);
            _salesSlip.SlipNoteCode = salesSlip.SlipNoteCode;
            // 備考２コード
            //this.tNedit_SlipNote2Code.SetInt(salesSlip.SlipNote2Code);
            _salesSlip.SlipNote2Code = salesSlip.SlipNote2Code;
            // 備考３コード
            //this.tNedit_SlipNote3Code.SetInt(salesSlip.SlipNote3Code);
            _salesSlip.SlipNote3Code = salesSlip.SlipNote3Code;

            // 返品理由
            //this.tEdit_RetGoodsReason.Text = salesSlip.RetGoodsReason;
            _salesSlip.RetGoodsReason = salesSlip.RetGoodsReason;
            // 納品区分
            //ComboEditorItemControl.SetComboEditorItemIndex(this.tComboEditor_DeliveredGoodsDiv, salesSlip.DeliveredGoodsDiv, false);
            _salesSlip.DeliveredGoodsDiv = salesSlip.DeliveredGoodsDiv;

            //>>>2010/05/30
            // 回答区分
            _salesSlip.AnswerDiv = salesSlip.AnswerDiv;
            // 問合せ番号
            _salesSlip.InquiryNumber = salesSlip.InquiryNumber;
            //<<<2010/05/30

            // 入力モード
            if (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Return)
            {
                //this.uLabel_InputModeTitle.Text = "返品";
                this._inputModeTitle = "返品";
            }
            else if (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Red)
            {
                //this.uLabel_InputModeTitle.Text = "赤伝";
                this._inputModeTitle = "赤伝";
            }
            else if (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ReadOnly)
            {
                if (salesSlip.DebitNoteDiv == 2)
                {
                    //this.uLabel_InputModeTitle.Text = "元黒";
                    this._inputModeTitle = "元黒";
                }
                else if (salesSlip.DepositAllowanceTtl != 0)
                {
                    //this.uLabel_InputModeTitle.Text = "入金済み";
                    this._inputModeTitle = "入金済み";
                }
                else if (!this._salesSlipInputAcs.CheckTransStopDate(salesSlip.TransStopDate, salesSlip.SalesDate))
                {
                    //this.uLabel_InputModeTitle.Text = "取引中止";
                    this._inputModeTitle = "取引中止";
                }
                else
                {
                    //this.uLabel_InputModeTitle.Text = "編集不可";
                    this._inputModeTitle = "編集不可";
                }
            }
            else if (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp)
            {
                //this.uLabel_InputModeTitle.Text = "貸出計上";
                this._inputModeTitle = "貸出計上";
            }
            else if (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp)
            {
                //this.uLabel_InputModeTitle.Text = "受注計上";
                this._inputModeTitle = "受注計上";
            }
            else if (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp)
            {
                //this.uLabel_InputModeTitle.Text = "見積計上";
                this._inputModeTitle = "見積計上";
            }
            else if (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AddUp)
            {
                //this.uLabel_InputModeTitle.Text = "締済み";
                this._inputModeTitle = "締済み";
            }
            else
            {
                //this.uLabel_InputModeTitle.Text = "通常";
                // ----UPD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
                //this._inputModeTitle = "通常";
                //一括値引である場合、入力モードは値引に変更
                if (this._discountAllLineflag)
                {
                    this._inputModeTitle = "値引";
                }
                else
                {
                    this._inputModeTitle = "通常";
                }
                // ----UPD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<
            }

            // 伝票種別アイテム再設定
            //this.SetItemtAcptAnOdrStatus(salesSlip.AcptAnOdrStatusDisplay, salesSlip.InputMode, false);
            _salesSlip.InputMode = salesSlip.InputMode;

            #endregion

            SalesSlipDetailInput_DetailChanged(_owner, 1);

            // 車種名称 品番／ＢＬコード検索の切替に連動
            if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.BLCodeSearch)
            {
                //itemDic[this.tEdit_ModelFullName] = false;                    // 車種名称
                _searchPartsModeFlg = 1;
            }

            // セキュリティ対応
            if (MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.Revision))
            {
                _operationCodeFlg = 11;
                //itemDic[this.tNedit_SalesSlipNum] = false;
                //itemDic[this.uButton_SalesSlipGuide] = false;
            }

            #region ●ツールバーボタン設定
            // ツールバーボタン有効無効設定処理
            //this.SettingToolBarButtonEnabled();
            #endregion

        }

        /// <summary>
        /// ユーザーガイドコンボエディタリスト設定処理
        /// </summary>
        /// <param name="sender">対象コンボエディタ</param>
        /// <param name="userGuideDivCd">ユーザーガイド区分</param>
        public void SetUserGdBdComboEditor(out List<string> guideCodeList, out List<string> guideNameList)
        {
            guideCodeList = new List<string>();
            guideNameList = new List<string>();
            List<UserGdBd> userGuideList = null;
            this._salesSlipInputInitDataAcs.GetUserGdBdList(out userGuideList);
            userGuideList = userGuideList.FindAll(
                delegate(UserGdBd uGuide)
                {
                    if (uGuide.UserGuideDivCd == SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_DeliveredGoodsDiv)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            );

            foreach (UserGdBd userGuide in userGuideList)
            {
                guideCodeList.Add(userGuide.GuideCode.ToString());
                guideNameList.Add(userGuide.GuideName);
            }
        }

        public void GetDisplayHeaderFooterInfo(out string inputModeTitle, out string defaultSalesSlipNumDf,
                                                out int searchPartsModeFlg, out int operationCodeFlg)
        {
            inputModeTitle = this._inputModeTitle;
            defaultSalesSlipNumDf = this._defaultSalesSlipNumDf;
            //searchPartsModeFlg = this._searchPartsModeFlg;
            searchPartsModeFlg = this._searchPartsModeProperty;
            operationCodeFlg = this._operationCodeFlg;
        }

        private void SettingInitData(SalesSlip salesSlip, bool keepCustomer) // 2009/09/10 ADD
        {
            #region 見積初期値設定情報
            this._salesSlipInputAcs.SettingSalesSlipEstimateDef(ref salesSlip, this._salesSlipInputInitDataAcs.GetEstimateDefSet());
            #endregion

            if (!keepCustomer)
            {
                #region 前回情報表示有無
                if (this._salesInputConstructionAcs.SaveInfoStoreValue == SalesSlipInputConstructionAcs.SaveInfoStore_OFF) return;
                #endregion
            }

            this._salesSlipInputInitData.Deserialize();

            #region 得意先情報
            //-------------------------------------------------
            // 得意先
            //-------------------------------------------------
            if (this._enterpriseCode == this._salesSlipInputInitData.EnterpriseCode)
            {
                if (this._salesSlipInputInitData.CustomerCode != 0)
                {

                    CustomerInfo customerInfo = null;

                    int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    SalesSlipInputInitDataAcs.LogWrite("▼得意先マスタＲｅａｄ開始");
                    if (this._salesSlipInputInitData.CustomerCode != 0)
                    {
                        status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, this._salesSlipInputInitData.CustomerCode, true, false, out customerInfo);
                    }
                    SalesSlipInputInitDataAcs.LogWrite("▲得意先マスタＲｅａｄ終了");

                    // 得意先チェック
                    if (customerInfo != null)
                    {
                        if (customerInfo.IsCustomer != true)
                        {
                            status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                        }
                    }

                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        // 得意先情報設定処理
                        this._salesSlipInputAcs.SettingSalesSlipFromCustomer(ref salesSlip, customerInfo);

                        // 得意先掛率グループ再セット
                        this._salesSlipInputAcs.SettingSalesDetailCustRateGrpCode();

                        // 売上明細データセッティング処理（課税区分設定）
                        this._salesSlipInputAcs.SettingSalesDetailTaxationCode(salesSlip.ConsTaxLayMethod, salesSlip.TotalAmountDispWayCd);

                        // 得意先情報画面格納処理
                        this.SetDisplayCustomerInfo(customerInfo);

                        // 納入先情報設定処理
                        this._salesSlipInputAcs.SettingSalesSlipAddressee(ref salesSlip, customerInfo);

                        //----- ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応------->>>>>
                        #region 前回情報表示有無
                        if (this._salesInputConstructionAcs.SaveInfoStoreValue == SalesSlipInputConstructionAcs.ClearAfterSave_ON)
                        {
                            this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate);
                        }
                        #endregion
                        //----- ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応------->>>>>
                        //this.SettingVisible();

                        // --- ADD 2009/09/08② ---------->>>>>
                        //追加情報タブ項目Visible設定
                        //SettingAddInfoVisible();
                        // --- ADD 2009/09/08② ----------<<<<<
                    }

                }
            }
            #endregion
        }

        //>>>2010/05/30
        /// <summary>
        /// 初期データ設定処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="keepCustomer"></param>
        private void SettingInitData(SalesSlip salesSlip, int customerCode)
        {
            #region 見積初期値設定情報
            this._salesSlipInputAcs.SettingSalesSlipEstimateDef(ref salesSlip, this._salesSlipInputInitDataAcs.GetEstimateDefSet());
            #endregion

            #region 得意先情報
            //-------------------------------------------------
            // 得意先
            //-------------------------------------------------

            if (customerCode != 0)
            {

                CustomerInfo customerInfo = null;
                //this.Cursor = Cursors.WaitCursor;
                int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

                status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, LoginInfoAcquisition.EnterpriseCode, customerCode, true, false, out customerInfo);

                // 得意先チェック
                if (customerInfo != null)
                {
                    if (customerInfo.IsCustomer != true)
                    {
                        status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    }
                }

                //this.Cursor = Cursors.Default;

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 得意先情報設定処理
                    this._salesSlipInputAcs.SettingSalesSlipFromCustomer(ref salesSlip, customerInfo);

                    // 得意先掛率グループ再セット
                    this._salesSlipInputAcs.SettingSalesDetailCustRateGrpCode();

                    // 売上明細データセッティング処理（課税区分設定）
                    this._salesSlipInputAcs.SettingSalesDetailTaxationCode(salesSlip.ConsTaxLayMethod, salesSlip.TotalAmountDispWayCd);

                    // 得意先情報画面格納処理
                    this.SetDisplayCustomerInfo(customerInfo);

                    // 納入先情報設定処理
                    this._salesSlipInputAcs.SettingSalesSlipAddressee(ref salesSlip, customerInfo);

                    //this.SettingVisible();

                    //// --- ADD 2009/09/08② ---------->>>>>
                    ////追加情報タブ項目Visible設定
                    //SettingAddInfoVisible();
                    //// --- ADD 2009/09/08② ----------<<<<<
                }

            }

            #endregion
        }
        //<<<2010/05/30

        // ----------- ADD 連番729 2011/08/18 -------------------->>>>>
        /// <summary>
        /// XMLから貼り付けるべき品番が存在かとうかチェック
        /// </summary>
        /// <param name="customerInfo"></param>
        private Boolean IsGoodsNoFromXMLExist()
        {
            // 明細貼付データ
            SalesDetail salesDetailCopyData = null;
            // 明細貼付XML
            string xmlFileName = System.IO.Path.Combine(Broadleaf.Application.Resources.ConstantManagement_ClientDirectory.UISettings, SALESDTLCOPY_XML_FILE_NAME);

            //-----------------------------------------------
            // 明細貼付XML読み込み
            //-----------------------------------------------
            # region [salesDetailCopyData←XML]
            // XML存在チェック
            if (!System.IO.File.Exists(xmlFileName))
            {
                return false;
            }

            // XML読み込み
            try
            {
                salesDetailCopyData = UserSettingController.DecryptionDeserializeUserSetting<SalesDetail>(xmlFileName, new string[] { ENCRYPTION_KEY });
            }
            catch
            {
                salesDetailCopyData = null;
            }

            // エラーチェック
            if (salesDetailCopyData == null)
            {
                return false;
            }
            # endregion

            GoodsCndtn cndtn = new GoodsCndtn();
            cndtn.EnterpriseCode = this._enterpriseCode;
            cndtn.SectionCode = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
            cndtn.GoodsMakerCd = salesDetailCopyData.GoodsMakerCd;
            cndtn.GoodsNo = salesDetailCopyData.GoodsNo;
            cndtn.PriceApplyDate = this._salesSlip.SalesDate;
            cndtn.IsSettingSupplier = 1;
            string msg;
            PartsInfoDataSet partsInfoDataSet;
            List<GoodsUnitData> goodsUnitDataList = new List<GoodsUnitData>();
            int status = 99;
            try
            {
                //品番検索
                status = this._salesSlipInputInitDataAcs.SearchPartsFromGoodsNo(cndtn, out partsInfoDataSet, out goodsUnitDataList, out msg);
            }
            catch (Exception e)
            {
                return false;
            }
            if ((status == 0) && (goodsUnitDataList.Count > 0))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        // ----------- ADD 連番729 2011/08/18 --------------------<<<<<

        /// <summary>
        /// 得意先情報画面格納処理
        /// </summary>
        /// <param name="customerInfo"></param>
        private void SetDisplayCustomerInfo(CustomerInfo customerInfo)
        {
            if (customerInfo != null)
            {
                // 得意先名称
                if ((!customerInfo.IsCustomer) || (customerInfo.AccRecDivCd != 0)) // 0:現金 1:売掛
                {
                    this._customerNameFlg = 0;
                }
                else
                {
                    this._customerNameFlg = 1;
                }

                // 締日
                this._totalDayDf = customerInfo.TotalDay.ToString("N0");

                // 集金月日
                this._collectMoneyDf = customerInfo.CollectMoneyName + customerInfo.CollectMoneyDay.ToString("N0");
            }
            else
            {
                // 得意先名称
                this._customerNameFlg = 0;

                // 締日
                this._totalDayDf = string.Empty;

                // 集金月日
                this._collectMoneyDf = string.Empty;
            }
        }

        public void GetDisplayCustomerInfo(out int customerNameFlg, out string totalDayDf, out string collectMoneyDf)
        {
            customerNameFlg = this._customerNameFlg;
            totalDayDf = this._totalDayDf;
            collectMoneyDf = this._collectMoneyDf;
        }

        private void SetItemtSalesSlipCd(ref SalesSlip salesSlip, int acptAnOdrStatus, bool formatFlg)
        {
            switch ((SalesSlipInputAcs.AcptAnOdrStatusState)acptAnOdrStatus)
            {
                case SalesSlipInputAcs.AcptAnOdrStatusState.Estimate: // 10:見積
                case SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate: // 15:単価見積
                    {
                        if (salesSlip.AccRecDivCd != 0)
                        {
                            _setItemtSalesSlipCdDisp = 1;
                        }
                        else
                        {
                            _setItemtSalesSlipCdDisp = 2;
                        }
                        if ((formatFlg == true) || (this._salesSlipInputAcs.SalesSlip.AccRecDivCd != salesSlip.AccRecDivCd))
                        {
                            _setItemtSalesSlipCdFlg = 1;

                            if (salesSlip.AccRecDivCd != 0)
                            {
                                salesSlip.SalesSlipDisplay = 10;
                            }
                            else
                            {
                                salesSlip.SalesSlipDisplay = 30;
                            }
                            SalesSlipInputAcs.SetSlipCdAndAccRecDivCdFromDisplay(ref salesSlip);
                        }

                        break;
                    }
                case SalesSlipInputAcs.AcptAnOdrStatusState.Sales: // 30:売上
                    {
                        if (salesSlip.AccRecDivCd != 0)
                        {
                            _setItemtSalesSlipCdDisp = 3;
                        }
                        else
                        {
                            _setItemtSalesSlipCdDisp = 4;
                        }
                        if ((formatFlg == true) || (this._salesSlipInputAcs.SalesSlip.AccRecDivCd != salesSlip.AccRecDivCd))
                        {
                            _setItemtSalesSlipCdFlg = 1;

                            if (salesSlip.AccRecDivCd != 0)
                            {
                                salesSlip.SalesSlipDisplay = 10;
                            }
                            else
                            {
                                salesSlip.SalesSlipDisplay = 30;
                            }
                            SalesSlipInputAcs.SetSlipCdAndAccRecDivCdFromDisplay(ref salesSlip);
                        }

                        break;
                    }
                case SalesSlipInputAcs.AcptAnOdrStatusState.Shipment: // 40:出荷
                    {
                        if (salesSlip.AccRecDivCd != 0)
                        {
                            _setItemtSalesSlipCdDisp = 5;
                        }
                        else
                        {
                            _setItemtSalesSlipCdDisp = 6;
                        }
                        if ((formatFlg == true) || (this._salesSlipInputAcs.SalesSlip.AccRecDivCd != salesSlip.AccRecDivCd))
                        {
                            _setItemtSalesSlipCdFlg = 1;

                            if (salesSlip.AccRecDivCd != 0)
                            {
                                salesSlip.SalesSlipDisplay = 10;
                            }
                            else
                            {
                                salesSlip.SalesSlipDisplay = 30;
                            }
                            SalesSlipInputAcs.SetSlipCdAndAccRecDivCdFromDisplay(ref salesSlip);
                        }

                        break;
                    }
            }
        }

        public void GetItemtSalesSlipCd(out int setItemtSalesSlipCdDisp, out int setItemtSalesSlipCdFlg)
        {
            setItemtSalesSlipCdDisp = this._setItemtSalesSlipCdDisp;
            //setItemtSalesSlipCdDisp = 1;
            setItemtSalesSlipCdFlg = this._setItemtSalesSlipCdFlg;
        }

        private void SettingAddInfoVisible()
        {
            //if (tNedit_CustomerCode.GetInt() != 0 && this.tEdit_CarMngCode.Text.Trim() != string.Empty)
            if (true)
            {
                //売上明細データ
                SalesInputDataSet.CarInfoDataTable detailtable = this._salesSlipInputAcs.CarInfoDataTable;
                if (this._salesSlipInputAcs.ExistCarInfo() || (detailtable == null || detailtable.Count == 1))
                {
                    CustomerInfo customerInfo = null;
                    SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;
                    int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                    SalesSlipInputInitDataAcs.LogWrite("▼得意先マスタＲｅａｄ開始");
                    status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, salesSlip.CustomerCode, true, false, out customerInfo);
                    SalesSlipInputInitDataAcs.LogWrite("▲得意先マスタＲｅａｄ終了");

                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        // 得意先情報設定処理
                        string customerTemp = this._salesSlipInputAcs.SalesSlip.CustomerSnm;   // ADD 2010/11/02
                        // --- ADD 2012/10/30 T.Nishi ---------->>>>>
                        string ResultsAddUpSecCd = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
                        string ResultsAddUpSecNm = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
                        // --- ADD 2012/10/30 T.Nishi ----------<<<<<
                        this._salesSlipInputAcs.SettingSalesSlipFromCustomer(ref salesSlip, customerInfo);
                        this._salesSlipInputAcs.SalesSlip.CustomerSnm = customerTemp;  // ADD 2010/11/02
                        // --- ADD 2012/10/30 T.Nishi ---------->>>>>
                        this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd = ResultsAddUpSecCd;
                        this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm = ResultsAddUpSecNm;
                        // --- ADD 2012/10/30 T.Nishi ----------<<<<<
                    }
                    // --- ADD K2021/08/23 陳艶丹 PMKOBETSU-4178 税率のログ追加--->>>>
                    else
                    {
                        // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応--->>>>>
                        if (_salesSlipInputInitDataAcs.ProcessControlSetting.RateLogOutFlg == (int)SalesSlipInputInitDataAcs.OutFlgType.Output)
                        {
                        // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応---<<<<<
                            try
                            {
                                // 元伝票取得
                                SalesSlip salesSlipBeforeAddUp = _salesSlipInputAcs.GetSalesSlipBeforeAddUp;
                                // ログ出力
                                string logMsg = string.Format(CtReadDBData, status.ToString(), salesSlipBeforeAddUp.SalesSlipNum, salesSlip.CustomerCode);
                                _salesSlipInputAcs.OutLog(logMsg);
                            }
                            catch
                            {
                                // 既存ロジックに影響無し
                            }
                        }//ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応
                    }
                    // --- ADD K2021/08/23 陳艶丹 PMKOBETSU-4178 税率のログ追加--- <<<<
                    switch (salesSlip.CarMngDivCd)
                    {
                        case 0: // しない
                            //this.uTabControl_Footer.Tabs[ctTAB_KEY_AddInfo].Visible = false;
                            this._ctTabKeyAddInfo = 0;
                            break;
                        case 1: // 登録(確認)
                        case 2: // 登録(自動)
                        case 3: // 登録無
                            //車輌管理オプション
                            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt() != null
                                && this._salesSlipInputInitDataAcs.GetSalesTtlSt().CarMngNoDispDiv == 1)
                            {
                                if (this._salesSlipInputInitDataAcs.Opt_CarMng == (int)SalesSlipInputInitDataAcs.Option.ON)
                                {
                                    //this.uTabControl_Footer.Tabs[ctTAB_KEY_AddInfo].Visible = true;
                                    this._ctTabKeyAddInfo = 1;
                                }
                            }
                            break;
                    }
                }
                else
                {
                    //this.uTabControl_Footer.Tabs[ctTAB_KEY_AddInfo].Visible = false;
                    this._ctTabKeyAddInfo = 0;
                }
            }
            else
            {
                //this.uTabControl_Footer.Tabs[ctTAB_KEY_AddInfo].Visible = false;
                this._ctTabKeyAddInfo = 0;
            }

            if (this._ctTabKeyAddInfo == 0)
            {
                _settingAddInfoVisibleFlg = 1;
                //int salesRowNo = this._salesSlipDetailInput.GetActiveRowSalesRowNo();
                int salesRowNo = -1;

                //車両走行距離
                //this.tEdit_CarSlipNote.Text = string.Empty;
                this._salesSlipInputAcs.SettingCarInfoRowFromCarNote(salesRowNo, string.Empty);

                //車輌備考
                //this.tNedit_Mileage.SetInt(0);
                this._salesSlipInputAcs.SettingCarInfoRowFromMileage(salesRowNo, 0);
            }

        }

        public void GetAddInfoVisible(out int ctTabKeyAddInfo, out int settingAddInfoVisibleFlg)
        {
            ctTabKeyAddInfo = this._ctTabKeyAddInfo;
            settingAddInfoVisibleFlg = this._settingAddInfoVisibleFlg;
        }

        /// <summary>
        /// 初期取得マスタ取得チェック
        /// </summary>
        /// <returns></returns>
        public void InitMstCheck(out bool ret)
        {
            ret = true;
            string mstName = string.Empty;


            if (this._salesSlipInputInitDataAcs.GetAllDefSet() == null) mstName = "全体初期値設定マスタ";
            if (this._salesSlipInputInitDataAcs.GetAcptAnOdrTtlSt() == null) mstName = "受発注管理全体設定マスタ";
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt() == null) mstName = "売上全体設定マスタ";
            if (this._salesSlipInputInitDataAcs.GetEstimateDefSet() == null) mstName = "見積初期値設定マスタ";
            if (this._salesSlipInputInitDataAcs.GetStockTtlSt() == null) mstName = "仕入在庫全体設定マスタ";
            if (this._salesSlipInputInitDataAcs.GetTaxRateSet() == null) mstName = "税率設定マスタ";
            if (this._salesSlipInputInitDataAcs.GetPosTerminalMg() == null) mstName = "端末管理マスタ";
            if (this._salesSlipInputInitDataAcs.ExistUserGuideDivCd_FormUserCd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_DeliveredGoodsDiv) == 0) mstName = "ユーザーガイドマスタ(納品区分)";  // 2010/05/08 ADD
            if (mstName != string.Empty)
            {
                TMsgDisp.Show(
                    null,
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "todo",
                    mstName + "の登録を行って下さい。",
                    0,
                    MessageBoxButtons.OK,
                    MessageBoxDefaultButton.Button1);
                ret = false;
            }
        }

        /// <summary>
        /// 画面初期化処理
        /// </summary>
        private void Clear()
        {
            // 売上明細DataTable行クリア処理
            this._salesDetailDataTable.Rows.Clear();

            // 一式情報DataTable行クリア処理
            this._completeInfoDataTable.Rows.Clear();

            // グリッド行初期設定処理
            this._salesSlipInputAcs.SalesDetailRowInitialSetting(this._salesInputConstructionAcs.SalesInputConstruction.DataInputCountValue);

            // 明細グリッドセル設定処理
            //this.SettingGrid();

            // 売上金額変更後発生イベントコール処理
            //this.SalesPriceChangedEventCall();
        }

        #region add by yangmj

        /// <summary>
        /// 保存確認ダイアログ表示処理
        /// </summary>
        /// <param name="isConfirm">true:確認ダイアログを表示する false:表示しない</param>
        /// <returns>0:保存ok 1:いいえ 2:キャンセル 3:保存失敗 4:ダイアログ表示しない</returns>
        /// <br>UpDateNote : 2011/09/16 鄧潘ハン</br>
        /// <br>           :            Redmine 25219 PCCUOE PM側／売上伝票入力 UOE発注時の動作不具合の修正</br>
        /// <br>UpDateNote : 2011/10/10 yangyi</br>
        /// <br>           : Redmine 25681 ９月分　PCCUOE／PM側　UOE送信処理の動作の修正</br>
        /// <br>Update Note: 2013/01/24 鄧潘ハン</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#34141 一括値引功能を追加についての対応</br>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        // --- UPD m.suzuki 2010/06/12 ---------->>>>>
        //public void ShowSaveCheckDialog(bool isConfirm, out int resultNum, string carMngCode)
        public void ShowSaveCheckDialog(bool isConfirm, out int resultNum, string carMngCode, ref bool isMakeQR)
        // --- UPD m.suzuki 2010/06/12 ----------<<<<<
        {
            // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
            bool saleDetailStatus = (isConfirm) && (this._salesSlipInputAcs.IsDataChanged);
            //一括ボタンを押す、またGridデータがあり
            if (this._discountAllLinebuttonflag == true)
            {
                saleDetailStatus = GridNoNull();
                this._discountAllLinebuttonflag = false;
            }
            // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<

            _carMngCode = carMngCode;
            bool checkedValue = false;
            Form _form = new Form();
            // ----UPD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
            //if ((isConfirm) && (this._salesSlipInputAcs.IsDataChanged))
            if (saleDetailStatus)
            // ----UPD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<
            {
                DialogResult dialogResult = TMsgDisp.Show(
                    _form,
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "todo",
                    "現在、編集中のデータが存在します。" + "\r\n" + "\r\n" +
                    "登録してもよろしいですか？",
                    0,
                    MessageBoxButtons.YesNoCancel,
                    MessageBoxDefaultButton.Button2);

                if (dialogResult == DialogResult.Yes)
                {
                    // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                    bool noSaveFlg = false;
                    if (this._salesSlipInputAcs.TaxRateFlg)
                    {
                        bool rentStockFlg = false;
                        bool shipmentFlg = false;
                        foreach (SalesInputDataSet.StockTempRow stockTempRow in this._salesSlipInputAcs.StockTempDataTable)
                        {
                            // 仕入同時データ
                            if ((stockTempRow != null) &&
                                (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock) &&
                                (stockTempRow.SupplierCd != 0) && (stockTempRow.StockDate != DateTime.MinValue) && (stockTempRow.PartySaleSlipNum != string.Empty))
                            {
                                rentStockFlg = true;
                            }
                            // 発注データ
                            else if ((stockTempRow != null) &&
                                (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order) &&
                                (stockTempRow.SupplierCd != 0) && (stockTempRow.StockDate != DateTime.MinValue) && (stockTempRow.PartySaleSlipNum != string.Empty))
                            {
                                shipmentFlg = true;
                            }
                        }

                        if (rentStockFlg && shipmentFlg)
                        {
                            TMsgDisp.Show(
                                this._form,
                                 emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                 string.Empty,
                                 "税率設定されています。" + "\r\n" + "発注対象、仕入同時計上の明細行があるため、登録できません。",
                                 0,
                                 MessageBoxButtons.OK);
                            noSaveFlg = true;
                        }
                        else if (rentStockFlg)
                        {
                            TMsgDisp.Show(
                                this._form,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                string.Empty,
                                "税率設定されています。" + "\r\n" + "仕入同時計上の明細行があるため、登録できません。",
                                0,
                                MessageBoxButtons.OK);
                            noSaveFlg = true;
                        }
                        else if (shipmentFlg)
                        {
                            TMsgDisp.Show(
                                this._form,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                string.Empty,
                                "税率設定されています。" + "\r\n" + "発注対象の明細行があるため、登録できません。",
                                0,
                                MessageBoxButtons.OK);
                            noSaveFlg = true;
                        }
                    }
                    if (!noSaveFlg)
                    {
                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<

                    // 2011/01/31 Add >>>
                    // はい選択後に送信種別ガイド表示
                    bool scmFlg = false;

                    if ((this._salesSlipInputAcs.SalesSlip.OnlineKindDiv == (int)SalesSlipInputAcs.OnlineKindDiv.SCM) &&
                        (this._salesSlipInputAcs.SalesSlip.DebitNoteDiv == 0) &&
                        ((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                          ((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) &&
                            (this._salesSlipInputAcs.SalesSlip.EstimateDivide == (int)SalesSlipInputAcs.EstimateDivide.Estimate))))
                    {
                        PMKHN05010UA frm = new PMKHN05010UA();
                        frm.SalesSlip = this._salesSlipInputAcs.SalesSlip;
                        // 現在の仕様では、明細は判断材料に含めていないので、とりあえず初期化したリストを設定
                        frm.SalesDetailList = new List<SalesDetail>();
                        CustomerInfo cust;
                        int stCust = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.CustomerCode, true, false, out cust);
                        if (stCust == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            frm.CustomerInfo = cust;
                            //---ADD 2011/09/16 --------------------------->>>>>
                            if (this._salesSlipInputAcs.ExistOrderInfo())
                            {
                                frm.CustomerInfo.OnlineKindDiv = 50;
                            }
                            //---ADD 2011/09/16 ---------------------------<<<<<<
                        }
                        //>>>2011/05/25
                        frm.PartySalesSlipNum = this._salesSlipInputAcs.SalesSlip.PartySaleSlipNum;
                        //<<<2011/05/25

                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                        if (this._salesSlipInputAcs.TaxRateFlg)
                        {
                            frm.ScmTaxRateInput = this._salesSlipInputInitDataAcs.TaxRate;
                        }
                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<

                        string msg = string.Empty;
                        PMKHN05010UA.OptSendTargetDiv div = PMKHN05010UA.OptSendTargetDiv.None;
                        int st;
                        DialogResult ret = frm.ShowDialog(out st, out  msg, out div);
                        if (div == PMKHN05010UA.OptSendTargetDiv.ScmUOE) div = PMKHN05010UA.OptSendTargetDiv.Scm; // ADD yangyi 2011/10/10
                        switch (ret)
                        {
                            case DialogResult.Cancel:
                                resultNum = 4;
                                return;
                            case DialogResult.No:
                                resultNum = 1;
                                return;
                            case DialogResult.OK:
                            case DialogResult.Yes:
                                // SCMの場合はSCMフラグを立てる
                                if (div == PMKHN05010UA.OptSendTargetDiv.Scm) scmFlg = true;
                                this._onlineKindDiv = (int)div;
                                //>>>2011/05/25
                                this._salesSlipInputAcs.SalesSlip.PartySaleSlipNum = frm.PartySalesSlipNum;
                                //<<<2011/05/25
                                this._salesSlipInputAcs.ScmFlg = scmFlg;    // ADD 2013/11/14 Y.Wakita
                                break;
                            default:
                                break;
                        }
                    }
                    // 2011/01/31 Add <<<

                    SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "Save", "▼▼▼保存処理　開始");
                    // --- UPD m.suzuki 2010/06/12 ---------->>>>>
                    //checkedValue = this.Save(true, false);
                    // 2011/01/31 >>>
                    //checkedValue = this.Save( true, false, ref isMakeQR ,false);
                    bool cmtFlg = false;
                    checkedValue = this.Save(true, false, ref isMakeQR, ref scmFlg, ref cmtFlg);
                    // 2011/01/31 <<<
                    // --- UPD m.suzuki 2010/06/12 ----------<<<<<
                    SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "Save", "▲▲▲保存処理　終了");
                    if (checkedValue)
                    {
                        resultNum = 0;
                    }
                    else
                    {
                        resultNum = 3;
                    }

                    //>>>2010/11/08
                    if (checkedValue)
                    {
                        // 全てクリア(初期状態へ)
                        bool keepDate = (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipDateClrDivCd == (int)SalesSlipInputAcs.SlipDateClrDivCd.InputDate) ? true : false;
                        bool keepAcptAnOdrStatus = false; // 受注ステータス保持

                        SalesSlip svSalesSlip = this._salesSlipInputAcs.SalesSlip.Clone();

                        // 担当者
                        String salesEmployeeCd = this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd;
                        String salesEmployeeNm = this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm;

                        // クリア処理
                        this.Clear(false, keepAcptAnOdrStatus, keepDate, false, false, false, false, 0);

                        // 受注者
                        this._salesSlipInputAcs.SalesSlip.FrontEmployeeCd = svSalesSlip.FrontEmployeeCd;
                        this._salesSlipInputAcs.SalesSlip.FrontEmployeeNm = svSalesSlip.FrontEmployeeNm;

                        // 発行者
                        this._salesSlipInputAcs.SalesSlip.SalesInputCode = svSalesSlip.SalesInputCode;
                        this._salesSlipInputAcs.SalesSlip.SalesInputName = svSalesSlip.SalesInputName;

                        // 売上データクラス→画面格納処理
                        this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

                        //追加情報タブ項目Visible設定
                        SettingAddInfoVisible();

                        // 担当者(ログイン担当者)
                        this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd = salesEmployeeCd;
                        this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm = salesEmployeeNm;
                    }
                    //<<<2010/11/08
                    // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                    }
                    else
                    {
                        resultNum = 2;
                    }
                    // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<
                }
                else if (dialogResult == DialogResult.No)
                {
                    resultNum = 1;
                }
                else
                {
                    resultNum = 2;
                }
            }
            else
            {
                resultNum = 4;
            }
        }

        // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
        ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
        ///// <summary>
        ///// IWin32Windowクラスのラッパークラス
        ///// メインウインドウ(delphiの画面　MAHNB01001U.exe)のハンドルを設定するために作成
        ///// 使用箇所はデュアルモニタで使用した際のガイドウィンドの表示位置
        ///// </summary>
        ///// <remarks>
        ///// <br>Note       : 使用箇所はデュアルモニタで使用した際のガイドウィンドの表示位置を設定する。</br>
        ///// <br>Programmer : イン晶晶</br>
        ///// <br>Date       : 2015/05/12</br>
        ///// </remarks>
        //private class IWin32WindowWrapper : System.Windows.Forms.IWin32Window
        //{
        //    private IntPtr _handle;
        //    public IntPtr Handle
        //    {
        //        get { return _handle; }
        //    }

        //    public IWin32WindowWrapper(IntPtr handle)
        //    {
        //        _handle = handle;
        //    }
        //}
        ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
        // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

        #region ●出荷計上処理関係
        /// <summary>
        /// 出荷計上処理
        /// </summary>
        /// <param name="isConfirm">確認ダイアログ表示有無(true:表示する false:表示しない)</param>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2021/04/12 陳艶丹</br>
        /// <br>管理番号   : 11770021-00</br>
        /// <br>           : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
        public void ShipmentAddUp(bool IsDataChanged, out int isSave)
        {
            isSave = 0;
            //bool isConfirm = true;
            //bool canShipmentAddUp = this.ShowSaveCheckDialog(isConfirm, IsDataChanged);

            //if (!canShipmentAddUp)
            //{
            //    isSave = 0;
            //    return;
            //}

            string salesSlipNum = string.Empty;
            if (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment) // 出荷
            {
                salesSlipNum = this._salesSlipInputAcs.SalesSlip.SalesSlipNum;
            }
            MAHNB01010UD salesSlipNumInputDialog = new MAHNB01010UD((int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment, salesSlipNum, MAHNB01010UD.ct_AcptAnOdrStatusEnable_False, MAHNB01010UD.ct_MODE_Normal);
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            //Form _form = new Form();
            //_form.Height = 762;
            //_form.Width = 1018;
            //_form.StartPosition = FormStartPosition.WindowsDefaultLocation;
            ////DialogResult dialogResult = salesSlipNumInputDialog.ShowDialog(_form);// DEL イン晶晶 2015/05/12 for Redmine#45799
            ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dialogResult;
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dialogResult = salesSlipNumInputDialog.ShowDialog(wrp);
            //}
            //else
            //{
            //    dialogResult = salesSlipNumInputDialog.ShowDialog(this._salesSlipInputAcs.Owner);
            //}
            ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            salesSlipNumInputDialog.StartPosition = FormStartPosition.CenterParent;
            DialogResult dialogResult = salesSlipNumInputDialog.ShowDialog(this._salesSlipInputAcs.Owner);
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

            if (dialogResult == DialogResult.OK)
            {
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
                //得意先情報ガイドを閉じる
                if (showEnable() || showCustomerGuid())
                {
                    noteInfoClose();
                }
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
                isSave = 1;
                _salesSlipInputAcs.AddUpOperationFlag = true; // ADD 陳健 2014/01/23 for Redmine#41550のNo.1＆No.2
                SalesSlip salesSlip = salesSlipNumInputDialog.DfSalesSlip;
                List<SalesDetail> salesDetailList = salesSlipNumInputDialog.DfSalesDetailList;
                List<SalesDetail> addUpSrcDetailList = salesSlipNumInputDialog.DfAddUpSrcDetailList;
                SearchDepsitMain depsitMain = salesSlipNumInputDialog.DfDepsitMain;
                SearchDepositAlw depositAlw = salesSlipNumInputDialog.DfDepositAlw;
                List<StockWork> stockWorkList = salesSlipNumInputDialog.DfStockWorkList;
                List<StockSlipWork> stockSlipWorkList = salesSlipNumInputDialog.DfStockSlipWorkList;
                List<StockDetailWork> stockDetailWorkList = salesSlipNumInputDialog.DfStockDetailWorkList;
                List<AddUpOrgStockDetailWork> addUpOrgStockDetailList = salesSlipNumInputDialog.DfaddUpOrgStockDetailList;
                List<AcceptOdrCar> acceptOdrCarList = salesSlipNumInputDialog.DfAcceptOdrCarList;

                // 出荷計上処理
                isSave = this.ShipmentAddUp(salesSlip, salesDetailList, addUpSrcDetailList, depsitMain, depositAlw, stockSlipWorkList, stockDetailWorkList, addUpOrgStockDetailList, stockWorkList, acceptOdrCarList);

                // --- ADD 2009/12/23 ---------->>>>>
                //伝票備考、伝票備考２、伝票備考３の入力桁数を制御する
                this._salesSlipInputAcs.GetNoteCharCnt();
                //SetNoteCharCnt();
                // --- ADD 2009/12/23 ----------<<<<<

            }
            //this._prevControl = this.ActiveControl;
        }

        /// <summary>
        /// 出荷計上処理
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        /// <param name="addUpSrcDetailList">計上元売上明細データオブジェクトリスト</param>
        /// <param name="depsitMain">入金データオブジェクト</param>
        /// <param name="depositAlw">入金引当データオブジェクト</param>
        /// <param name="stockSlipWorkList">仕入データオブジェクトリスト</param>
        /// <param name="stockDetailWorkList">仕入明細データオブジェクトリスト</param>
        /// <param name="addUppOrgStockDetailList">同時入力計上元仕入明細データオブジェクトリスト</param>
        /// <param name="stockWorkList">在庫ワークオブジェクトリスト</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）オブジェクトリスト</param>
        /// <remarks>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        /// </remarks>
        private int ShipmentAddUp(SalesSlip salesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, SearchDepsitMain depsitMain, SearchDepositAlw depositAlw, List<StockSlipWork> stockSlipWorkList, List<StockDetailWork> stockDetailWorkList, List<AddUpOrgStockDetailWork> addUpOrgStockDetailList, List<StockWork> stockWorkList, List<AcceptOdrCar> acceptOdrCarList)
        {
            int isSave = 1;
            Form _form = new Form();

            // 出荷計上情報生成可能チェック処理
            string message;

            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
            this._salesSlipInputInitDataAcs.RentSyncSupFlg = false;
            foreach (SalesDetail detail in salesDetailList)
            {
                if (!string.IsNullOrEmpty(detail.RentSyncSupSlipNo))
                {
                    this._salesSlipInputInitDataAcs.RentSyncSupFlg = true;
                    break;
                }
            }
            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<

            bool created = this._salesSlipInputAcs.CanCreateShipmentAddUpInfo(salesSlip, salesDetailList, out message);
            if (!created)
            {
                TMsgDisp.Show(
                    _form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    message,
                    0,
                    MessageBoxButtons.OK);
                isSave = 0;
                _salesSlipInputAcs.AddUpOperationFlag = false; // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応
                return isSave;
            }

            SalesSlip baseSalesSlip = salesSlip.Clone();

            // 計上初期値セット前情報キャッシュ
            this._salesSlipInputAcs.CacheSalesSlipBeforeAddUp(salesSlip);

            // 出荷計上情報生成処理
            this._salesSlipInputAcs.CreateShipmentAddUpInfo(ref salesSlip);

            // 表示用受注ステータスの設定
            SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

            // 伝票区分コンボエディタアイテム設定処理
            this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, false);

            // 表示用伝票区分設定処理
            SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

            // キャッシュ処理
            this._salesSlipInputAcs.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, acceptOdrCarList);

            // 出荷計上明細情報生成処理
            this._salesSlipInputAcs.CreateShipmentAddUpDetailInfo(stockWorkList);

            // 売上数量０行削除処理
            List<int> deleteStockRowNoList = this._salesSlipInputAcs.GetShipmentCntZeroSalesRowNoList();

            if (deleteStockRowNoList.Count > 0)
            {
                // 売上明細行削除処理
                this._salesSlipInputAcs.DeleteSalesDetailRow(deleteStockRowNoList, false);
            }

            // 空白行削除処理
            List<int> delStockRowNoList = this._salesSlipInputAcs.GetEmptySalesRowNoList();

            if (deleteStockRowNoList.Count > 0)
            {
                // 売上明細行削除処理
                this._salesSlipInputAcs.DeleteSalesDetailRow(delStockRowNoList, true);
            }

            // 売上金額計算処理
            this.CalculationSalesPrice();

            // 売上金額変更後発生イベント処理
            this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());

            // 売上データクラス→画面格納処理
            if (this._salesSlipInputAcs.SalesSlip != null)
            {
                this.SetDisplay(this._salesSlipInputAcs.SalesSlip);
            }

            // 明細粗利率設定処理
            this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesDetailList);

            // 画面に
            //this._salesSlipDetailInput.SettingGrid();

            // 売単価、原単価の初期値設定
            this._salesSlipInputAcs.CacheDefaultValue();

            // 明細グリッドにフォーカスをセット
            //this._salesSlipDetailInput.Focus();
            SalesSlipDetailInput_DetailChanged(_owner, 1);

            // ガイドボタンツール有効無効設定処理
            //this.SettingGuideButtonToolEnabled(this.tComboEditor_SalesGoodsCd);

            // Visible設定
            //this.SettingVisible();

            // --- ADD 2009/09/08② ---------->>>>>
            //追加情報タブ項目Visible設定
            SettingAddInfoVisible();
            // --- ADD 2009/09/08② ----------<<<<<

            // データ変更フラグプロパティをtrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            return isSave;

        }

        /// <summary>
        /// 明細部変更後発生イベント処理
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータクラス</param>
        private void SalesSlipDetailInput_DetailChanged(object sender, Int32 salesRowNo)
        {
            // 伝票情報
            SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;
            if (salesSlip == null) return;

            // 明細情報
            SalesInputDataSet.SalesDetailRow row = this._salesSlipInputAcs.SalesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlipInputAcs.SalesSlip.SalesSlipNum.PadLeft(9, '0'), salesRowNo);

            // 売上データキャッシュ処理
            this._salesSlipInputAcs.Cache(salesSlip);

            // 売上データクラス→画面格納処理（オーバーロード）
            this.SetDisplay(salesSlip, row);
        }

        /// <summary>
        /// 売上データクラス→画面格納処理（オーバーロード）
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        private void SetDisplay(SalesSlip salesSlip, SalesInputDataSet.SalesDetailRow row)
        {
            // 画面表示処理（売上金額合計情報）
            //this.SetDisplayTotalPriceInfo(salesSlip);

            // フッタ画面表示処理（明細情報）
            this.SetDisplayDetailInfo(row);
        }

        /// <summary>
        /// 画面表示処理（明細情報）
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        private void SetDisplayDetailInfo(SalesInputDataSet.SalesDetailRow row)
        {
            if (row == null) return;

            SalesInputDataSet.CarInfoRow carInfoRow = this._salesSlipInputAcs.GetCarInfoRow(row.SalesRowNo, SalesSlipInputAcs.GetCarInfoMode.CarInfoChangeMode);

            this._detailGrossProfitRate = (row.DetailGrossProfitRate / 100).ToString("P");
            this._addDetailGrossProfitRate = (row.DetailGrossProfitRate / 100).ToString("P");

            //-----------------------------------------
            // 明細粗利率
            //-----------------------------------------
            // _detailGrossProfitRate = (row.DetailGrossProfitRate / 100).ToString("P");

        }

        /// <summary>
        /// 売上金額計算処理
        /// </summary>
        public void CalculationSalesPrice()
        {
            try
            {
                // 描画が必要な明細件数を取得する。
                int cnt = this._salesDetailDataTable.Count;

                for (int i = 0; i < cnt; i++)
                {
                    if (!this._salesSlipInputAcs.ExistSalesDetailComp(this._salesSlipInputAcs.SalesDetailDataTable[i].SalesRowNo)) continue;
                    this._salesSlipInputAcs.CalculationSalesMoney(i);
                    this._salesSlipInputAcs.CalculationCost(i);
                    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRateByIndex(i);
                }
            }
            finally
            {
                // 描画を開始
                //this.uGrid_Details.EndUpdate();
            }
        }

        /// <summary>
        /// 売上金額変更後発生イベント処理
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータクラス</param>
        private void SalesSlipDetailInput_SalesPriceChanged(object sender, EventArgs e)
        {
            SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;

            if (salesSlip == null) return;

            // 売上金額合計設定
            this._salesSlipInputAcs.TotalPriceSetting(ref salesSlip);

            // 売上データキャッシュ処理
            this._salesSlipInputAcs.Cache(salesSlip);

            // 売上データクラス→画面格納処理（オーバーロード）
            this.SetDisplay(salesSlip, 1);
        }

        /// <summary>
        /// 売上データクラス→画面格納処理（オーバーロード）
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="mode">表示モード</param>
        private void SetDisplay(SalesSlip salesSlip, int mode)
        {
            switch (mode)
            {
                case 0:
                    {
                        this.SetDisplay(salesSlip);
                        break;
                    }
                case 1:
                    {
                        // 画面表示処理（売上金額合計情報）
                        // this.SetDisplayTotalPriceInfo(salesSlip);
                        break;
                    }
            }
        }

        /// <summary>
        /// 得意先入力チェック処理
        /// </summary>
        /// <returns>true:得意先入力済み false:得意先未入力</returns>
        private bool CheckCustomerCodeInput()
        {
            Form _form = new Form();
            // 得意先入力チェック
            SalesSlip salesSlip = this._salesSlip;
            if (salesSlip == null)
            {
                return false;
            }

            if (salesSlip.CustomerCode == 0)
            {
                TMsgDisp.Show(
                    _form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "得意先が選択されていません。",
                    -1,
                    MessageBoxButtons.OK);

                return false;
            }
            else
            {
                return true;
            }
        }

        // 2011/01/31 Del >>>
        ///// <summary>
        ///// 保存確認ダイアログ表示処理
        ///// </summary>
        ///// <param name="isConfirm">true:確認ダイアログを表示する false:表示しない</param>
        ///// <returns>確認後OK 確認後NG</returns>
        //// --- UPD m.suzuki 2010/06/12 ---------->>>>>
        ////private bool ShowSaveCheckDialog(bool isConfirm, bool IsDataChanged)
        //private bool ShowSaveCheckDialog( bool isConfirm, bool IsDataChanged, ref bool isMakeQR )
        //// --- UPD m.suzuki 2010/06/12 ----------<<<<<
        //{
        //    bool checkedValue = false;
        //    Form _form = new Form();
        //    if ((isConfirm) && (this._salesSlipInputAcs.IsDataChanged))
        //    {
        //        DialogResult dialogResult = TMsgDisp.Show(
        //            _form,
        //            emErrorLevel.ERR_LEVEL_EXCLAMATION,
        //            "todo",
        //            "現在、編集中のデータが存在します。" + "\r\n" + "\r\n" +
        //            "登録してもよろしいですか？",
        //            0,
        //            MessageBoxButtons.YesNoCancel,
        //            MessageBoxDefaultButton.Button2);

        //        if (dialogResult == DialogResult.Yes)
        //        {
        //            SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "Save", "▼▼▼保存処理　開始");
        //            checkedValue = this.Save(true, false);
        //            SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "Save", "▲▲▲保存処理　終了");

        //            //>>>2010/11/08
        //            if (checkedValue)
        //            {
        //                // 全てクリア(初期状態へ)
        //                bool keepDate = (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipDateClrDivCd == (int)SalesSlipInputAcs.SlipDateClrDivCd.InputDate) ? true : false;
        //                bool keepAcptAnOdrStatus = false; // 受注ステータス保持

        //                SalesSlip svSalesSlip = this._salesSlipInputAcs.SalesSlip.Clone();

        //                // 担当者
        //                String salesEmployeeCd = this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd;
        //                String salesEmployeeNm = this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm;

        //                // クリア処理
        //                this.Clear(false, keepAcptAnOdrStatus, keepDate, false, false, false, false, 0);

        //                // 受注者
        //                this._salesSlipInputAcs.SalesSlip.FrontEmployeeCd = svSalesSlip.FrontEmployeeCd;
        //                this._salesSlipInputAcs.SalesSlip.FrontEmployeeNm = svSalesSlip.FrontEmployeeNm;

        //                // 発行者
        //                this._salesSlipInputAcs.SalesSlip.SalesInputCode = svSalesSlip.SalesInputCode;
        //                this._salesSlipInputAcs.SalesSlip.SalesInputName = svSalesSlip.SalesInputName;

        //                // 売上データクラス→画面格納処理
        //                this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

        //                //追加情報タブ項目Visible設定
        //                SettingAddInfoVisible();

        //                // 担当者(ログイン担当者)
        //                this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd = salesEmployeeCd;
        //                this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm = salesEmployeeNm;
        //            }
        //            //<<<2010/11/08
        //        }
        //        else if (dialogResult == DialogResult.No)
        //        {
        //            checkedValue = true;
        //        }
        //        else
        //        {
        //            //
        //        }
        //    }
        //    else
        //    {
        //        checkedValue = true;
        //    }

        //    return checkedValue;
        //}
        // 2011/01/31 Del <<<

        /// <summary>
        /// 終了処理
        /// </summary>
        /// <param name="isConfirm">true:確認ダイアログを表示する false:表示しない</param>
        // --- UPD m.suzuki 2010/06/12 ---------->>>>>
        //public void Close(bool isConfirm, out bool canCloseFlg)
        public void Close(bool isConfirm, out bool canCloseFlg, ref bool isMakeQR)
        // --- UPD m.suzuki 2010/06/12 ----------<<<<<
        {
            // ---UPD 2012/06/26 No.630 Y.Wakita ---------->>>>>
            //// --- UPD m.suzuki 2010/06/12 ---------->>>>>
            ////canCloseFlg = this.ShowSaveCheckDialog(isConfirm);
            //canCloseFlg = this.ShowSaveCheckDialog(isConfirm, ref isMakeQR);
            //// --- UPD m.suzuki 2010/06/12 ----------<<<<<
            canCloseFlg = this.ShowSaveCheckDialog(isConfirm, true, ref isMakeQR);
            // ---UPD 2012/06/26 No.630 Y.Wakita ----------<<<<
        }

        //>>>2010/05/30
        /// <summary>
        /// 保存処理
        /// </summary>
        /// <param name="isShowSaveCompletionDialog"></param>
        /// <param name="isConfirm"></param>
        /// <returns></returns>
        public bool Save(bool isShowSaveCompletionDialog, bool isConfirm)
        {
            bool isMakeQR = false;
            // 2011/01/31 >>>
            //return this.Save(isShowSaveCompletionDialog, isConfirm, ref isMakeQR, false);

            bool isScmFlg = false;
            bool isCmtFlg = false;
            return this.Save(isShowSaveCompletionDialog, isConfirm, ref isMakeQR, ref isScmFlg, ref isCmtFlg);
            // 2011/01/31 <<<
        }
        //<<<2010/05/30

        // 2011/01/31 Add >>>
        /// <summary>
        /// 
        /// </summary>
        /// <param name="isShowSaveCompletionDialog"></param>
        /// <param name="isConfirm"></param>
        /// <param name="isMakeQR"></param>
        /// <returns></returns>
        public bool Save(bool isShowSaveCompletionDialog, bool isConfirm, ref bool isMakeQR)
        {
            bool isScmFlg = false;
            bool isCmtFlg = false;
            return this.Save(isShowSaveCompletionDialog, isConfirm, ref isMakeQR, ref isScmFlg, ref isCmtFlg);
        }
        // 2011/01/31 Add <<<

        /// <summary>
        /// 保存処理
        /// </summary>
        /// <param name="isShowSaveCompletionDialog">保存完了ダイアログ表示フラグ</param>
        /// <param name="isConfirm">true:保存確認ダイアログを表示する false:表示しない</param>
        /// <param name="isMakeQR"></param>
        /// <param name="scmFlg">True:SCM対象（このフラグは、isConfirmがTrueの場合に再セットされます）</param>
        /// <param name="cmtFlg">True:CMT連携中（このフラグは、isConfirmがTrueの場合に再セットされます）</param>
        /// <returns>true:保存完了 false:未保存</returns>
        /// <br>Update Note: 2010/06/02 譚洪 PM.NS障害・改良対応（７月リリース案件）No.6</br>
        /// <br>                        売上全体設定マスタ：「受注者表示区分＝しない」に設定している場合は、受注者は非表示なので、</br>
        /// <br>                        受注者コードに値をセットしないように変更する。</br>
        /// <br>Update Note: 2010/09/08 楊明俊 障害改良対応８月 No.32</br>
        /// <br>                        保存前再計算処理追加。</br>
        /// <br>Update Note: 2011/02/11 曹文傑</br>
        /// <br>                        伝票内容が差し替わってしまう件の対応</br>
        /// <br>Update Note: 2011/08/30 yangmj</br>
        /// <br>                        Redmine#24110 伝票備考の文字数の修正内容の対応</br>
        /// <br>UpDateNote : 2011/09/16 鄧潘ハン</br>
        /// <br>           :            Redmine 25219 PCCUOE PM側／売上伝票入力 UOE発注時の動作不具合の修正</br>
        /// <br>UpDateNote : 2011/10/10 yangyi</br>
        /// <br>           : Redmine 25681 ９月分　PCCUOE／PM側　UOE送信処理の動作の修正</br>
        /// <br>Update Note: 2011/11/10 yangmj redmine#26413 計上残区分による伝票削除の変更</br>
        /// <br>Update Note: 2011/12/15 tianjw</br>
        /// <br>             Redmine#27390 拠点管理/売上日のチェック</br>
        /// <br>Update Note: 2011/12/22   李小路</br>
        /// <br>管理番号   : 10707327-00 2012/01/25配信分</br>
        /// <br>             Redmine#27451 売上伝票入力/標準価格の色の修正</br>
        /// <br>Update Note: 2012/01/05 譚洪</br>
        /// <br>管理番号   ：10707327-00 2012/01/25配信分</br>
        /// <br>             Redmine#27526 売上伝票入力/在庫切れのチェック</br>
        /// <br>Update Note: 2012/01/12 鄧潘ハン</br>
        /// <br>管理番号   : 10707327-00 2012/01/18配信分</br>
        /// <br>             Redmine#27954 PMSF連携／PCCforNS BLﾊﾟｰﾂｵｰﾀﾞｰ 障害対応の修正</br>
        /// <br>Update Note: 2012/04/10 福田　康夫</br>
        /// <br>管理番号   : №386  計上元伝票削除確認ダイアログの抑制</br>
        /// <br>Update Note: 2015/08/22 黄興貴</br>
        /// <br>管理番号   : 11170129-00 №836 Redmine#47045 保存時のエラー処理がないの障害対応</br>
        /// <br>Update Note: 2015/09/08 黄興貴</br>
        /// <br>管理番号   : 11170129-00 №836 Redmine#47045 連絡した後のソース指摘対応</br>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        /// <br>Update Note: 2020/09/21 陳艶丹</br>
        /// <br>管理番号   : 11600006-00</br>
        /// <br>           : 東亜商会の数量または売上金額不正の対応</br>
        /// <br>Update Note: 2021/03/16 陳艶丹</br>
        /// <br>管理番号   : 11770032-00</br>
        /// <br>           : PMKOBETSU-4133 売上伝票入力原価0円障害の対応</br>
        /// <br>Update Note: K2021/07/27 譚洪</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>           : PMKOBETSU-4148 売上データ原価0円障害（登録時）</br>
        /// <br>Update Note: K2021/09/02 呉元嘯</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>           : BLINCIDENT-3095 売上伝票入力の計上日不正対応</br>   
        /// <br>Update Note: 2021/09/10 呉元嘯</br>
        /// <br>管理番号   : 11770032-00</br>
        /// <br>           : PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応</br> 
        /// <br>           :                計上日チェックの制御ファイルの対応</br> 
        // 2011/01/31 >>>
        //// --- UPD m.suzuki 2010/06/12 ---------->>>>>
        ////public bool Save(bool isShowSaveCompletionDialog, bool isConfirm)
        //public bool Save( bool isShowSaveCompletionDialog, bool isConfirm, ref bool isMakeQR , bool scmFlg)
        //// --- UPD m.suzuki 2010/06/12 ----------<<<<<
        public bool Save(bool isShowSaveCompletionDialog, bool isConfirm, ref bool isMakeQR, ref bool scmFlg, ref bool cmtFlg)
        // 2011/01/31 <<<
        {
            bool isSave = false;

            this._salesSlipInputAcs.CheckSaveDataForStock();  // ADD 2012/01/05 Redmine#27526

            // ---ADD 2011/02/11--------------->>>>
            if (this._salesSlipInputAcs._isCanSaveFlg == false)
            {
                DialogResult dialogResult = TMsgDisp.Show(
                                          _form,
                                          emErrorLevel.ERR_LEVEL_INFO,
                                          string.Empty,
                                          "売上データの登録に失敗しました。\r\n" +
                                          "メニューから売上伝票入力を起動して、登録し直して下さい。\r\n\r\n" +
                                          "（詳細：C:\\program files\\partsman\\log\\" + this._salesSlipInputAcs._txtFileName + "）\r\n",
                                          0,
                                          MessageBoxButtons.OK,
                                          MessageBoxDefaultButton.Button1);

                return isSave;
            }
            // ---ADD 2011/02/11---------------<<<<
            this._onlineKindDiv = (int)SalesSlipInputAcs.OnlineKindDiv.None;    // 2011/01/31 Add
            try
            {
                //>>>2010/05/30
                #region ●保存確認
                if (isConfirm == true)
                {
                    // 2011/01/31 >>>
                    //// --- UPD 2010/07/17---------->>>>>
                    ////---------------------------------------------------------------
                    //// 保存確認
                    ////---------------------------------------------------------------
                    ////DialogResult dResult = TMsgDisp.Show(
                    ////    //_form,
                    ////    emErrorLevel.ERR_LEVEL_QUESTION,
                    ////    "todo",
                    ////    "登録してもよろしいですか？",
                    ////    0,
                    ////    MessageBoxButtons.YesNo,
                    ////    MessageBoxDefaultButton.Button1);

                    //DialogResult dResult = MessageBox.Show(this._form,
                    //   "登録してもよろしいですか？",
                    //   "確認－ ＜売上伝票入力＞",
                    //   MessageBoxButtons.YesNo,
                    //   MessageBoxIcon.Question);
                    //// --- UPD 2010/07/17----------<<<<<

                    //if (dResult == DialogResult.No)
                    //{
                    //    return isSave;
                    //}

                    scmFlg = false;
                    cmtFlg = false;
                    this._salesSlipInputAcs.CmtFlg = false; // 2011/02/01
                    bool confCancel = false;

                    // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                    if (this._salesSlipInputAcs.TaxRateFlg)
                    {
                        bool rentStockFlg = false;
                        bool shipmentFlg = false;

                        foreach (SalesInputDataSet.StockTempRow stockTempRow in this._salesSlipInputAcs.StockTempDataTable)
                        {
                            // 仕入同時データ
                            if ((stockTempRow != null) &&
                                (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock) &&
                                (stockTempRow.SupplierCd != 0) && (stockTempRow.StockDate != DateTime.MinValue) && (stockTempRow.PartySaleSlipNum != string.Empty))
                            {
                                rentStockFlg = true;
                            }
                            // 発注データ
                            else if ((stockTempRow != null) &&
                                (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order) &&
                                (stockTempRow.SupplierCd != 0) && (stockTempRow.StockDate != DateTime.MinValue) && (stockTempRow.PartySaleSlipNum != string.Empty))
                            {
                                shipmentFlg = true;
                            }
                        }

                        if (rentStockFlg && shipmentFlg)
                        {
                            TMsgDisp.Show(
                                this._form,
                                 emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                 string.Empty,
                                 "税率設定されています。" + "\r\n" + "発注対象、仕入同時計上の明細行があるため、登録できません。",
                                 0,
                                 MessageBoxButtons.OK);
                            return isSave;
                        }
                        else if (rentStockFlg)
                        {
                            TMsgDisp.Show(
                                this._form,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                string.Empty,
                                "税率設定されています。" + "\r\n" + "仕入同時計上の明細行があるため、登録できません。",
                                0,
                                MessageBoxButtons.OK);
                            return isSave;
                        }
                        else if (shipmentFlg)
                        {
                            TMsgDisp.Show(
                                this._form,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                string.Empty,
                                "税率設定されています。" + "\r\n" + "発注対象の明細行があるため、登録できません。",
                                0,
                                MessageBoxButtons.OK);
                            return isSave;
                        }
                    }
                    // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<

                    //>>>2011/02/01
                    #region 削除
                    //if ((this._salesSlipInputAcs.SalesSlip.OnlineKindDiv == (int)SalesSlipInputAcs.OnlineKindDiv.SCM) &&
                    //    (this._salesSlipInputAcs.SalesSlip.DebitNoteDiv == 0) &&
                    //    ((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                    //      ((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) &&
                    //        (this._salesSlipInputAcs.SalesSlip.EstimateDivide == (int)SalesSlipInputAcs.EstimateDivide.Estimate))))
                    //{
                    //    PMKHN05010UA frm = new PMKHN05010UA();
                    //    frm.SalesSlip = this._salesSlipInputAcs.SalesSlip;
                    //    // 現在の仕様では、明細は判断材料に含めていないので、とりあえず初期化したリストを設定
                    //    frm.SalesDetailList = new List<SalesDetail>();
                    //    CustomerInfo cust;
                    //    int stCust = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.CustomerCode, true, false, out cust);
                    //    if (stCust == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    //    {
                    //        frm.CustomerInfo = cust;
                    //    }
                    //    string msg = string.Empty;
                    //    PMKHN05010UA.OptSendTargetDiv div = PMKHN05010UA.OptSendTargetDiv.None;
                    //    int st;
                    //    DialogResult ret = frm.ShowDialog(out st, out  msg, out div);
                    //    switch (ret)
                    //    {
                    //        case DialogResult.Cancel:
                    //            break;
                    //        case DialogResult.No:
                    //            return isSave;
                    //        case DialogResult.OK:
                    //        case DialogResult.Yes:
                    //            confCancel = true;
                    //            // SCMの場合はSCMフラグを立てる
                    //            if (div == PMKHN05010UA.OptSendTargetDiv.Scm) scmFlg = true;
                    //            this._onlineKindDiv = (int)div;
                    //            break;
                    //        default:
                    //            break;
                    //    }
                    //    // SCM対象の場合に、CMT連携フラグを再取得
                    //    if (scmFlg)
                    //    {
                    //        string cmtCheckMsg;
                    //        int cmtCheckStatus = SimpleInqPMIpcClient.CheckConnect(out cmtFlg, out cmtCheckMsg);
                    //        //cmtFlg = tempCmtFlg;

                    //        this._salesSlipInputAcs.CmtFlg = cmtFlg; // 2011/02/01

                    //        if (cmtCheckStatus != 0)
                    //        {
                    //            SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "", "CMT接続確認でエラー:" + cmtCheckMsg);
                    //        }
                    //    }
                    //}
                    #endregion

                    if ((this._salesSlipInputAcs.SalesSlip.OnlineKindDiv == (int)SalesSlipInputAcs.OnlineKindDiv.SCM) &&
                        (this._salesSlipInputAcs.SalesSlip.DebitNoteDiv == 0) &&
                        ((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                          ((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) &&
                            (this._salesSlipInputAcs.SalesSlip.EstimateDivide == (int)SalesSlipInputAcs.EstimateDivide.Estimate))))
                    {
                        if ((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) &&
                            (this._salesSlipInputAcs.SalesSlip.EstimateDivide == (int)SalesSlipInputAcs.EstimateDivide.Estimate) &&
                            //                            (this._salesSlipInputAcs.SalesSlip.SalesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum) &&
                            (this._salesSlipInputAcs.CheckAnswerList() == 0))
                        {
                            confCancel = false;
                        }
                        else
                        {
                            PMKHN05010UA frm = new PMKHN05010UA();
                            frm.SalesSlip = this._salesSlipInputAcs.SalesSlip;
                            // 現在の仕様では、明細は判断材料に含めていないので、とりあえず初期化したリストを設定
                            frm.SalesDetailList = new List<SalesDetail>();
                            CustomerInfo cust;
                            int stCust = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.CustomerCode, true, false, out cust);
                            if (stCust == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                            {
                                frm.CustomerInfo = cust;
                                //>>>2012/01/19
                                ////---ADD 2011/09/16 --------------------------->>>>>
                                //if (this._salesSlipInputAcs.ExistOrderInfo())
                                //{
                                //    frm.CustomerInfo.OnlineKindDiv = 50;
                                //}
                                ////---ADD 2011/09/16 ---------------------------<<<<<<
                                // UPD 2012/07/11 SCM障害№111 --------------------------------------------->>>>>
                                //if (this._salesSlipInputAcs.ExistOrderInfo())
                                //{
                                //    frm.CustomerInfo.OnlineKindDiv = (int)PMKHN05010UA.OptSendTargetDiv.None;
                                //}
                                //<<<2012/01/19
                                if (this._salesSlipInputAcs.ExistOrderInfo())
                                {
                                    frm.CustomerInfo.OnlineKindDiv = 50;
                                }
                                // UPD 2012/07/11 SCM障害№111 ---------------------------------------------<<<<<
                            }
                            // ADD 2012/08/17 SCM障害№154 --------------->>>>>
                            // PCC接続設定情報を取得し連携設定の有無を確認
                            if (this._salesSlipInputAcs.GetCommMethod(this._salesSlipInputAcs.SalesSlip) == 0)
                            {
                                // 連携設定なしの時、送信チェックボックスは表示しない
                                frm.CustomerInfo.OnlineKindDiv = 60;
                            }
                            // ADD 2012/08/17 SCM障害№154 ---------------<<<<<
                            string msg = string.Empty;
                            //>>>2011/05/25
                            frm.PartySalesSlipNum = this._salesSlipInputAcs.SalesSlip.PartySaleSlipNum;
                            //<<<2011/05/25

                            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                            if (this._salesSlipInputAcs.TaxRateFlg)
                            {
                                frm.ScmTaxRateInput = this._salesSlipInputInitDataAcs.TaxRate;
                            }
                            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<

                            PMKHN05010UA.OptSendTargetDiv div = PMKHN05010UA.OptSendTargetDiv.None;
                            int st;
                            DialogResult ret = frm.ShowDialog(out st, out  msg, out div);
                            if (div == PMKHN05010UA.OptSendTargetDiv.ScmUOE) div = PMKHN05010UA.OptSendTargetDiv.Scm; // ADD yangyi 2011/10/10
                            switch (ret)
                            {
                                case DialogResult.Cancel:
                                    break;
                                case DialogResult.No:
                                    return isSave;
                                case DialogResult.OK:
                                case DialogResult.Yes:
                                    confCancel = true;
                                    // SCMの場合はSCMフラグを立てる
                                    if (div == PMKHN05010UA.OptSendTargetDiv.Scm) scmFlg = true;
                                    this._onlineKindDiv = (int)div;
                                    //>>>2011/05/25
                                    this._salesSlipInputAcs.SalesSlip.PartySaleSlipNum = frm.PartySalesSlipNum;
                                    //<<<2011/05/25
                                    //>>>2011/07/18
                                    if (!scmFlg)
                                    {
                                        // 通常
                                        this._salesSlipInputAcs.SalesSlip.AutoAnswerDivSCM = 0;
                                    }
                                    //---ADD  鄧潘ハン 2012/01/12   Redmine#27954------------->>>>>
                                    else
                                    {
                                        for (int i = 0; i < this._salesSlipInputAcs.SalesDetailDataTable.Count; i++)
                                        {
                                            this._salesSlipInputAcs.SalesDetailDataTable[i].WayToAcptOdr = 1;
                                        }
                                    }
                                    //---ADD  鄧潘ハン 2012/01/12   Redmine#27954-------------<<<<<

                                    //<<<2011/07/18
                                    this._salesSlipInputAcs.ScmFlg = scmFlg;    // ADD 2013/11/14 Y.Wakita
                                    break;
                                default:
                                    break;
                            }
                            // SCM対象の場合に、CMT連携フラグを再取得
                            if (scmFlg)
                            {
                                string cmtCheckMsg;
                                int cmtCheckStatus = SimpleInqPMIpcClient.CheckConnect(out cmtFlg, out cmtCheckMsg);
                                //cmtFlg = tempCmtFlg;

                                this._salesSlipInputAcs.CmtFlg = cmtFlg; // 2011/02/01

                                if (cmtCheckStatus != 0)
                                {
                                    SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "", "CMT接続確認でエラー:" + cmtCheckMsg);
                                }
                            }
                        }
                    }
                    //<<<2011/02/01

                    if (!confCancel)
                    {
                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                        string msg = "登録してもよろしいですか？";
                        if (this._salesSlipInputAcs.TaxRateFlg && 
                            this._salesSlipInputAcs.SalesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Red &&
                            this._salesSlipInputAcs.SalesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Return)
                        {
                            msg = string.Format("税率({0}%)が設定されています。" + "\r\n" + "登録してもよろしいですか？", (this._salesSlipInputInitDataAcs.TaxRate * 100).ToString("#0"));
                        }
                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<
                        DialogResult dResult = MessageBox.Show(//this._form,
                           // UPD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                           //"登録してもよろしいですか？",
                           msg,
                           // UPD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<
                           "確認－ ＜売上伝票入力＞",
                           MessageBoxButtons.YesNo,
                           MessageBoxIcon.Question);

                        if (dResult == DialogResult.No)
                        {
                            return isSave;
                        }
                    }
                    // 2011/01/31 <<<
                }
                #endregion
                //<<<2010/05/30

                // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                //// --- ADD 2013/04/11 Y.Wakita ③ ---------->>>>>
                //// 売上データ退避
                //SalesSlip salesSlipBk = this._salesSlipInputAcs.SalesSlip;
                //// --- ADD 2013/04/11 Y.Wakita ③ ----------<<<<<
                // --- DEL 2013/04/18 T.Nishi ----------<<<<<

                SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "", "▼初期処理　開始");
                #region ●初期処理
                //---------------------------------------------------------------
                // 初期処理
                //---------------------------------------------------------------
                //if (this._prevControl != null)
                //{
                //    this._changeFocusSaveCancel = true;
                //    this.ActiveControl = this._prevControl;
                //    ChangeFocusEventArgs e = new ChangeFocusEventArgs(false, false, false, Keys.Return, this._prevControl, this._prevControl);
                //    this.tArrowKeyControl1_ChangeFocus(this, e);
                //    this._changeFocusSaveCancel = false;
                //}
                //this.Cursor = Cursors.WaitCursor;
                string retMessage;
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "", "▲初期処理　終了");

                SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "CheckCredit", "▼伝票分割前チェック　開始");
                #region ●伝票分割前チェック(与信管理)
                //---------------------------------------------------------------
                // 伝票分割前チェック(与信管理)
                //---------------------------------------------------------------
                if (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales)
                {
                    if (CheckCredit(this._salesSlipInputAcs.SalesSlip)) return isSave;
                }

                //>>>2010/05/30
                if ((scmFlg) &&
                    (this._salesSlipInputAcs.ExistSalesDetailAcptCntOnly()))
                {
                    // 受注数のみの明細が存在する場合、回答不可
                    DialogResult dResult = TMsgDisp.Show(
                        this._form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        "受注数のみ入力された明細を含む為、回答処理できません。",
                        0,
                        MessageBoxButtons.OK,
                        MessageBoxDefaultButton.Button1);

                    return isSave;
                }
                //<<<2010/05/30

                //>>>2010/07/13
                if ((scmFlg) &&
                    (this._salesSlipInputAcs.ExistSalesDetailShipmentCntForOrderSave()))
                {
                    // 受注数のみの明細が存在する場合、回答不可
                    DialogResult dResult = TMsgDisp.Show(
                        this._form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        "出荷数が入力された発注明細を含む為、回答処理できません。",
                        0,
                        MessageBoxButtons.OK,
                        MessageBoxDefaultButton.Button1);

                    return isSave;
                }
                //>>>2010/07/13
                // --- DEL 2013/01/23 T.Nishi ---------->>>>>
                // --- ADD 2012/11/02 Y.Wakita ---------->>>>>
              //  #region ●有効明細の数量チェック処理
                //bool qtyUmuFlag = false;
                //
                //// 出荷数チェック
                //foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
                //{
                //    if (row.ShipmentCnt != 0)
                //    {
                //        qtyUmuFlag = true;
                //        break;
                //    }
                //    // --- ADD 2012/12/14 Y.Wakita ---------->>>>>
                //    // 注釈、行値引きはチェック対象とする
                //    if ((row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_Annotation) ||
                //        (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount))
                //    {
                //        qtyUmuFlag = true;
                //        break;
                //    }
                //    // --- ADD 2012/12/14 Y.Wakita ----------<<<<<
                //}
                //
                //// 受注数チェック
                //foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow row in this._salesSlipInputAcs.AcptDetailDataTable)
                //{
                //    if (row.AcceptAnOrderCntDisplay != 0)
                //    {
                //        qtyUmuFlag = true;
                //        break;
                //    }
                //    // --- ADD 2012/12/14 Y.Wakita ---------->>>>>
                //    // 注釈、行値引きはチェック対象とする
                //    if ((row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_Annotation) ||
                //        (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount))
                //    {
                //        qtyUmuFlag = true;
                //        break;
                //    }
                //    // --- ADD 2012/12/14 Y.Wakita ----------<<<<<
                //}
                //if (qtyUmuFlag)
                //{
                //    string mainMessage = "未入力の項目が存在するため、登録できません。" + "\r\n" + "\r\n";
                //    List<string> itemNameList = new List<string>();
                //    List<string> itemList = new List<string>();
                //    List<int> errorRowNoList = new List<int>();
                //
                //    foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
                //    {
                //        if ((row.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_Annotation) &&
                //            (row.EditStatus != SalesSlipInputAcs.ctEDITSTATUS_RowDiscount))
                //        {
                //            if (row.AcptAnOdrStatus != (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate)
                //            {
                //                // 単価見積以外
                //                if ((!string.IsNullOrEmpty(row.GoodsName)) &&
                //                    ((row.SalesGoodsCd == (int)SalesSlipInputAcs.SalesGoodsCd.Goods) ||
                //                     (row.SalesGoodsCd == (int)SalesSlipInputAcs.SalesGoodsCd.NonGoods))) // 商品or商品外
                //                {
                //                    if ((row.ShipmentCntDisplay == 0) && (row.AcceptAnOrderCntDisplay == 0))
                //                    {
                //                        itemNameList.Add(string.Format("{0}行目の数量", row.SalesRowNo));
                //                        itemList.Add(string.Format("{0},{1}", this._salesDetailDataTable.TableName, this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName));
                //                        if (!errorRowNoList.Contains(row.SalesRowNo)) errorRowNoList.Add(row.SalesRowNo);
                //                    }
                //                }
                //            }
                //        }
                //    }
                //    if ((int)itemNameList.Count != 0)
                //    {
                //        StringBuilder message = new StringBuilder();
                //        message.Append(mainMessage);
                //
                //        if ((int)itemNameList.Count != 0)
                //        {
                //            foreach (string s in itemNameList)
                //            {
                //                message.Append(s + "\r\n");
                //            }
                //        }
                //        if (this._enterpriseCode != login_EnterpriseCode)
                //        {
                //            TMsgDisp.Show(
                //                _form,
                //                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                //                "todo",
                //                message.ToString(),
                //                0,
                //                MessageBoxButtons.OK);
                //        }
                //        else
                //        {
                //            TMsgDisp.Show(
                //               emErrorLevel.ERR_LEVEL_EXCLAMATION,
                //               "todo",
                //               message.ToString(),
                //               0,
                //               MessageBoxButtons.OK);
                //        }
                //        string itemName = string.Empty;
                //        if (itemList.Count > 0)
                //        {
                //            itemName = itemList[0].ToString();
                //        }
                //        return isSave;
                //    }
                //}
              //  #endregion
                //// --- ADD 2012/11/02 Y.Wakita ----------<<<<<
                // --- DEL 2013/01/23 T.Nishi ----------<<<<<
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "CheckCredit", "▲伝票分割前チェック　終了");

                #region ●指示書番号制御区分取得(Webサーバー)
                // ---ADD 2012/08/20 T.Nishi ---------->>>>>
                if (scmFlg == true)
                {
                // ---ADD 2012/08/20 T.Nishi ----------<<<<<
                //>>>2011/05/25
                this._salesSlipInputAcs.GetPartySalesSlipNumCd(this._salesSlipInputAcs.SalesSlip.InqOriginalEpCd.Trim(), this._salesSlipInputAcs.SalesSlip.InqOriginalSecCd);//@@@@20230303
                //<<<2011/05/25
                // ---ADD 2012/08/20 T.Nishi ---------->>>>>
                }
                // ---ADD 2012/08/20 T.Nishi ----------<<<<<
                #endregion

                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▼補正処理　開始");
                #region ●補正処理
                //---------------------------------------------------------------
                // 売上データ補正処理
                //---------------------------------------------------------------
                ArrayList carManagementWorkList;
                ////if ((this._salesSlipInputAcs.CarInfoDataTable != null) && (this._salesSlipInputAcs.CarInfoDataTable.Count != 0))
                ////{
                ////    //-----------------------------------------------------
                ////    // 車両情報リスト取得
                ////    //-----------------------------------------------------
                ////    this._salesSlipInputAcs.GetCarManagementWorkListFromCarInfoTable(this._salesSlipInputAcs.CarInfoDataTable, out carManagementWorkList);
                ////}

                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽売上データ補正　開始");
                //車輌管理区分補正
                int carMngDivCd = this._salesSlipInputAcs.SalesSlip.CarMngDivCd;
                this.ReviseSalesSlip();
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "△売上データ補正　終了");

                //---------------------------------------------------------------
                // 仕入明細データ情報設定
                //---------------------------------------------------------------
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽仕入明細データ補正　開始");
                this._salesSlipInputAcs.SettingStockTempFromSalesDetail();
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "△仕入明細データ補正　終了");

                //---------------------------------------------------------------
                // 受注明細データ情報設定
                //---------------------------------------------------------------
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽受注明細データ補正　開始");
                this._salesSlipInputAcs.SettingSalesDetailAcptAnOdrFromSalesDetail();
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "△受注明細データ補正　終了");

                //---------------------------------------------------------------
                // 保存用仕入データ調整処理(品名数量なし明細削除)
                //---------------------------------------------------------------
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽仕入データ不要明細削除補正　開始");
                this._salesSlipInputAcs.AdjustStockSaveData();
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "△仕入データ不要明細削除補正　終了");

                //---------------------------------------------------------------
                // UOE発注データ情報設定
                //---------------------------------------------------------------
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽UOE発注データ補正　開始");
                this._salesSlipInputAcs.SettingUOEOrderDtlFromSalesDetail();
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "△UOE発注データ補正　終了");

                this._salesSlipInputAcs.SaveDataTable();                                                                    // 明細データテーブル退避 // 2010/05/30

                //>>>2010/05/30
                //---------------------------------------------------------------
                // 保存用車両情報調整処理(全項目初期値明細削除)
                //---------------------------------------------------------------
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽車両情報不要明細削除補正　開始");
                this._salesSlipInputAcs.AdjustCarInfoSaveData();
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "△車両情報不要明細削除補正　終了");
                //<<<2010/05/30
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▲補正処理　終了");

                #region ●受注データテーブル分割処理
                //---------------------------------------------------------------
                // 受注データテーブル分割処理(通常受注データと発注受注データを別テーブルへ分割)
                //---------------------------------------------------------------
                //this._salesSlipInputAcs.SaveDataTable();                                                                    // 明細データテーブル退避 // 2010/05/30
                this._salesSlipInputAcs.DivisionAcceptAnOrderDataTable();
                #endregion

                // --- ADD 2010/09/08 ---------->>>>>
                #region ●得意先再計算
                //新規登録時
                if (this._salesSlipInputAcs.SalesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal
                    && (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum))
                {
                    CustomerInfo customerInfo;
                    int statusCustomerInfo = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.CustomerCode, true, false, out customerInfo);
                    if (statusCustomerInfo == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        //データ保存前に得意先マスタの売掛区分と売上データの売掛区分を比較する
                        if (this._salesSlipInputAcs.SalesSlip.AccRecDivCd != customerInfo.AccRecDivCd)
                        {
                            string dateMessage = "保存時売掛区分不一致 得意先マスタ売掛区分：" + customerInfo.AccRecDivCd
                                                 + "　売上データ売掛区分：" + this._salesSlipInputAcs.SalesSlip.AccRecDivCd;

                            // ログ出力を行う
                            // UPD 2010/09/09 --- >>>>
                            //operationHistoryLog.WriteOperationLog(this, DateTime.Now, LogDataKind.SystemLog,
                            //    "MAHNB01001U", "売上伝票入力", string.Empty, 0, -1, "エラー", dateMessage);
                            operationHistoryLog.WriteOperationLog(this, DateTime.Now, LogDataKind.SystemLog,
                                "MAHNB01001U", "売上伝票入力", string.Empty, 0, -1, "エラー" + " " + dateMessage, dateMessage);
                            // UPD 2010/09/09 --- <<<<

                            //不一致の場合、得意先情報および伝票情報を再計算し、データ保存を行う
                            bool reCalcSalesUnitPrice = true;
                            bool reCalcSalesPrice = true;
                            List<List<GoodsUnitData>> goodsUnitDataListList;
                            string msg;

                            SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;
                            this._salesSlipInputAcs.SalesSlip.StockUpdateFlag = true;

                            // 得意先情報設定処理
                            this._salesSlipInputAcs.SettingSalesSlipFromCustomer(ref salesSlip, customerInfo);

                            // 得意先掛率グループ再セット
                            this._salesSlipInputAcs.SettingSalesDetailCustRateGrpCode();

                            // 計上日の再セット
                            this._salesSlipInputAcs.SettingSalesSlipAddUpDate(ref salesSlip); // 計上日再設定

                            // 担当者情報設定処理
                            this._salesSlipInputAcs.SettingSalesSlipFromEmployeeInfo(ref salesSlip, salesSlip.SalesEmployeeCd);

                            // 納入先情報設定処理
                            this._salesSlipInputAcs.SettingSalesSlipAddressee(ref salesSlip, customerInfo);

                            // 売上明細データセッティング処理（課税区分設定）
                            this._salesSlipInputAcs.SettingSalesDetailTaxationCode(salesSlip.ConsTaxLayMethod, salesSlip.TotalAmountDispWayCd);

                            //---------------------------------------------------------------
                            // 商品情報再取得
                            //---------------------------------------------------------------
                            if (reCalcSalesUnitPrice)
                            {
                                this._salesSlipInputAcs.SearchPartsFromGoodsNoNonVariousSearchWholeWord(out goodsUnitDataListList, out msg);

                                this._salesSlipInputAcs.SalesSlip.StockUpdateFlag = false;
                            }

                            //---------------------------------------------------------------
                            // 売上単価再計算時
                            //---------------------------------------------------------------
                            if (reCalcSalesUnitPrice)
                            {
                                // 消費税再設定
                                //this._salesSlipInputInitDataAcs.GetTaxRate(this._salesSlipInputAcs.SalesSlip.SalesDate);
                                this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate);

                                // 商品情報再取得
                                this._salesSlipInputAcs.SearchPartsFromGoodsNoNonVariousSearchWholeWord(out goodsUnitDataListList, out msg);

                                // 商品価格の再設定を行います。
                                this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(goodsUnitDataListList);

                                // 商品価格の再設定を行います。(受注情報)
                                this._salesSlipInputAcs.AcptAnOdrDetailRowGoodsPriceReSetting(goodsUnitDataListList);

                                // 売上金額変更後発生イベント処理
                                this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());
                            }

                            //---------------------------------------------------------------
                            // 売上金額再計算時
                            //---------------------------------------------------------------
                            if (reCalcSalesPrice)
                            {
                                // 売上金額計算処理
                                this.CalculationSalesPrice();

                                // 売上金額変更後発生イベント処理
                                this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());
                            }

                        }
                    }

                }
                #endregion
                // --- ADD 2010/09/08 ----------<<<<<

                // --- ADD 2011/12/22 ---------->>>>>
                #region ●売上金額再計算
                // 売上金額再計算
                bool settingFlg = false;
                // ADD 陳艶丹 2020/09/21 東亜商会の数量または売上金額不正の対応 ------>>>>>
                // チェックNG行番号リスト
                List<int> errRowNoList = new List<int>();
                // 税込金額
                long salesMoneyTaxInc;
                // 税抜金額
                long salesMoneyTaxExc;
                // 売上金額
                long salesMoneyDisplay;
                // 受注数
                double paraAcceptAnOrderCnt;
                // ADD 陳艶丹 2020/09/21 東亜商会の数量または売上金額不正の対応 ------<<<<<
                foreach (SalesInputDataSet.SalesDetailRow row in this._salesSlipInputAcs.SalesDetailDataTable)
                {
                    if (row.ShipmentCntDisplay != 0
                        && row.SalesUnPrcDisplay != 0
                        && row.ShipmentCntDisplay * row.SalesUnPrcDisplay != row.SalesMoneyDisplay)
                    {
                        settingFlg = true;
                        int salesRowNo = row.SalesRowNo;
                        int rowIndex = salesRowNo - 1;

                        //---------------------------------------------------------------
                        // 売上単価再計算
                        //---------------------------------------------------------------
                        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, row.SalesUnPrcDisplay, 0);

                        //---------------------------------------------------------------
                        // 原単価再計算
                        //---------------------------------------------------------------
                        this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, row.SalesUnitCost);

                        //---DEL  2011/12/22   李小路 REDMINE#27451 ------------------------->>>>>
                        ////---------------------------------------------------------------
                        //// 定価再計算
                        ////---------------------------------------------------------------
                        //this._salesSlipInputAcs.SalesDetailRowListPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, row.ListPriceDisplay);
                        //---DEL  2011/12/22   李小路 REDMINE#27451 -------------------------<<<<<

                        //---------------------------------------------------------------
                        // 売上金額計算処理(明細部)
                        //---------------------------------------------------------------
                        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                        //---------------------------------------------------------------
                        // 明細粗利率設定処理
                        //---------------------------------------------------------------
                        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);
                    }
                    // ADD 陳艶丹 2020/09/21 東亜商会の数量または売上金額不正の対応 ------>>>>>
                    try
                    {
                        // 税込金額
                        salesMoneyTaxInc = 0;
                        // 税抜金額
                        salesMoneyTaxExc = 0;
                        // 売上金額
                        salesMoneyDisplay = 0;

                        // メーカー、品番、品名全て入力なしの明細行はチェック対象外とする。
                        if ((string.IsNullOrEmpty(row.GoodsName)) &&
                            (string.IsNullOrEmpty(row.GoodsNo)) &&
                            (row.GoodsMakerCd == 0))
                        {
                            continue;
                        }

                        // 見積以外の場合
                        if (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay != (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate)
                        {
                            paraAcceptAnOrderCnt = row.AcceptAnOrderCnt;
                            // 発注の場合（貸出分除外）
                            if (this._salesSlipInputAcs.OrderInfoCheck(row)
                                && this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay != (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment)
                            {
                                if (row.AcceptAnOrderCnt == 0) paraAcceptAnOrderCnt = row.AcceptAnOrderCntForOrder;
                                SalesInputDataSet.SalesDetailRow orderRow = this._salesSlipInputAcs.SalesDetailDataTable.NewSalesDetailRow();
                                orderRow.ShipmentCntDisplay = row.AcceptAnOrderCntDisplay;
                                // 課税区分
                                orderRow.TaxationDivCd = row.TaxationDivCd;
                                // 内税
                                orderRow.SalesUnPrcTaxIncFl = row.SalesUnPrcTaxIncFl;
                                // 外税/非課税
                                orderRow.SalesUnPrcTaxExcFl = row.SalesUnPrcTaxExcFl;
                                orderRow.SalesSlipCdDtl = row.SalesSlipCdDtl;
                                orderRow.ShipmentCnt = paraAcceptAnOrderCnt;
                                orderRow.SalesMoneyInputDiv = row.SalesMoneyInputDiv;
                                // 表示用数量と登録用数量が不一致の場合
                                if (Math.Abs(paraAcceptAnOrderCnt) != Math.Abs(row.AcceptAnOrderCntDisplay))
                                {
                                    errRowNoList.Add(row.SalesRowNo);
                                    continue;
                                }
                                // 受注数と売単価入力ありの場合、金額正確性をチェックする
                                else if (row.AcceptAnOrderCntDisplay != 0
                                  && row.ShipmentCntDisplay == 0
                                  && row.SalesUnPrcDisplay != 0
                                    && row.SalesMoneyTaxExc != 0)
                                {
                                    // 金額計算エラー無しの場合
                                    if (this._salesSlipInputAcs.CalculationSalesMoney(this._salesSlipInputAcs.SalesSlip, orderRow, out salesMoneyTaxInc, out salesMoneyTaxExc, out salesMoneyDisplay))
                                    {
                                        // 再計算金額がRowに持っている売上金額と不一致の場合
                                        if (Math.Abs(salesMoneyTaxExc) != Math.Abs(row.SalesMoneyTaxExc))
                                        {
                                            errRowNoList.Add(row.SalesRowNo);
                                            continue;
                                        }
                                    }
                                }
                            }
                        }

                        // 表示用数量と登録用数量が不一致の場合
                        if (Math.Abs(row.ShipmentCnt) != Math.Abs(row.ShipmentCntDisplay))
                        {
                            errRowNoList.Add(row.SalesRowNo);
                        }
                        // 数量と売単価入力ありの場合、金額正確性をチェックする
                        else if (row.ShipmentCntDisplay != 0
                          && row.SalesUnPrcDisplay != 0)
                        {
                            // 金額計算エラー無しの場合
                            if (this._salesSlipInputAcs.CalculationSalesMoney(this._salesSlipInputAcs.SalesSlip, row, out salesMoneyTaxInc, out salesMoneyTaxExc, out salesMoneyDisplay))
                            {
                                // 再計算金額がRowに持っている売上金額と不一致の場合
                                if (Math.Abs(salesMoneyTaxExc) != Math.Abs(row.SalesMoneyTaxExc))
                                {
                                    errRowNoList.Add(row.SalesRowNo);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "Save_Check", ex.Message);
                    }
                    // ADD 陳艶丹 2020/09/21 東亜商会の数量または売上金額不正の対応 ------<<<<<
                }

                // ADD 陳艶丹 2020/09/21 東亜商会の数量または売上金額不正の対応 ------>>>>>
                try
                {
                    // チェックNGの明細行がある場合、メッセージを表示する
                    if (errRowNoList.Count > 0)
                    {
                        // エラー行番号文字列
                        StringBuilder rowMessage = new StringBuilder();

                        // エラー行番号を連結
                        for (int i = 0; i < errRowNoList.Count; i++)
                        {
                            rowMessage.Append(errRowNoList[i].ToString("00") + "行目");

                            // エラー行の間に改行
                            if (i < errRowNoList.Count - 1)
                            {
                                rowMessage.AppendLine();
                            }
                        }

                        // エラーメッセージを表示する
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            string.Empty,
                            "数量または売上金額が不正の明細があります。" + "\r\n" + "行数は下記の通りです。再度数量を入力してください。" + "\r\n" + rowMessage.ToString(),
                            -1,
                            MessageBoxButtons.OK);

                        return isSave;
                    }
                }
                catch (Exception ex)
                {
                    SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "Save_PopMsg", ex.Message);
                }
                // ADD 陳艶丹 2020/09/21 東亜商会の数量または売上金額不正の対応 ------<<<<<

                if (settingFlg)
                {
                    //---------------------------------------------------------------
                    // 売上金額計算
                    //---------------------------------------------------------------
                    // 売上金額計算処理
                    this.CalculationSalesPrice();

                    // 売上金額変更後発生イベント処理
                    this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());
                }
                #endregion

                #region ●原価金額再計算
                // 原価金額再計算
                settingFlg = false;
                // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133-------->>>>
                bool unitCostErr = false;
                //int checkDiv = this._salesInputConstructionAcs.SaveUnitCostCheckDivValue;//DEL 2021/09/10 呉元嘯 PMKOBETSU-4172 原価チェックと税率ログの制御ファイルの対応
                // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133--------<<<<
                // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）-------->>>>>
                // 原価チェックNG行番号リスト
                List<int> unitCostErrRowNoList = new List<int>();
                // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）--------<<<<<
                foreach (SalesInputDataSet.SalesDetailRow row in this._salesSlipInputAcs.SalesDetailDataTable)
                {
                    if (row.ShipmentCntDisplay != 0
                        && row.SalesUnitCost != 0
                        && row.ShipmentCntDisplay * row.SalesUnitCost != row.Cost)
                    {
                        settingFlg = true;
                        int salesRowNo = row.SalesRowNo;
                        int rowIndex = salesRowNo - 1;

                        //---------------------------------------------------------------
                        // 売上単価再計算
                        //---------------------------------------------------------------
                        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, row.SalesUnPrcDisplay, 0);

                        //---------------------------------------------------------------
                        // 原単価再計算
                        //---------------------------------------------------------------
                        this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, row.SalesUnitCost);


                        //---DEL  2011/12/22   李小路 REDMINE#27451 ------------------------->>>>>
                        ////---------------------------------------------------------------
                        //// 定価再計算
                        ////---------------------------------------------------------------
                        //this._salesSlipInputAcs.SalesDetailRowListPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, row.ListPriceDisplay);
                        //---DEL  2011/12/22   李小路 REDMINE#27451 -------------------------<<<<<

                        //---------------------------------------------------------------
                        // 売上金額計算処理(明細部)
                        //---------------------------------------------------------------
                        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                        //---------------------------------------------------------------
                        // 明細粗利率設定処理
                        //---------------------------------------------------------------
                        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);
                    }

                    // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）-------->>>>>
                    // チェックあり且つ売上伝票の場合、チェックする。
                    if (costCheckFlg == (int)CostCheckFlgType.Check &&
                        this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales)
                    {
                        // メーカー、品番、品名全て入力なしの明細行はチェック対象外とする。
                        // 注釈と行値引はチェック対象外とする。
                        if (((string.IsNullOrEmpty(row.GoodsName)) &&
                            (string.IsNullOrEmpty(row.GoodsNo)) &&
                            row.GoodsMakerCd == CtZero) ||
                            row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_Annotation || // 注釈
                            row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount ||  // 行値引
                            this._salesSlipInputAcs.OrderInfoCheck(row) || // 発注
                            (row.ShipmentCntDisplay == CtZero && row.AcceptAnOrderCntDisplay != CtZero)) // 受注
                        {
                            //チェック対象外
                        }
                        else
                        {
                            // 原単価が不正の場合、エラーメッセージを出力する
                            // 原単価が手入力以外　且つ　算出原価！＝0　且つ　原価単価＝0
                            if ((row.SalesUnitCostChngDiv != (int)SalesSlipInputAcs.SalesMoneyInputDiv.Input &&
                                row.BfUnitCost != CtZero && row.SalesUnitCost == CtZero))
                            {
                                unitCostErrRowNoList.Add(row.SalesRowNo);
                            }
                        }
                    }
                    // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）--------<<<<<
                    // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133-------->>>>>
                    //  現単価が不正の場合、判断不要
                    // --- UPD 2021/09/10 呉元嘯 PMKOBETSU-4172 原価チェックと税率ログの制御ファイルの対応 ---->>>>>
                    //if (checkDiv != CtZero && !unitCostErr)
                    if (saveUnitCostCheckFlg == (int)SaveUnitCostCheckFlgType.Check && !unitCostErr)
                    // --- UPD 2021/09/10 呉元嘯 PMKOBETSU-4172 原価チェックと税率ログの制御ファイルの対応 ----<<<<<
                    {
                        // メーカー、品番、品名全て入力なしの明細行はチェック対象外とする。
                        // 注釈と行値引はチェック対象外とする。
                        if (((string.IsNullOrEmpty(row.GoodsName)) &&
                            (string.IsNullOrEmpty(row.GoodsNo)) &&
                            row.GoodsMakerCd == CtZero) ||
                            (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_Annotation || // 注釈
                            row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount))  // 行値引
                        {
                            continue;
                        }
                        // 現単価が不正の場合、エラーメッセージを出力する
                        if (row.SalesUnitCost == CtZero &&            //原単価
                            row.SalesUnitCostChngDiv == CtZero &&     // 原価単価変更区分0:変更なし
                            row.GoodsMakerCd != CtZero &&              // メーカーコード
                            (string.IsNullOrEmpty(row.MakerName) ||     // メーカー名
                            string.IsNullOrEmpty(row.MakerKanaName)))   // メーカーカナ名
                        {
                            unitCostErr = true;
                        }
                    }
                    // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133--------<<<<<
                }
                // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）-------->>>>>
                // エラー行番号を連結
                // チェックNGの明細行がある場合、メッセージを表示する
                if (unitCostErrRowNoList.Count > 0)
                {
                    // エラー行番号文字列
                    StringBuilder rowMessage = new StringBuilder();

                    // エラー行番号を連結
                    for (int i = 0; i < unitCostErrRowNoList.Count; i++)
                    {
                        rowMessage.Append(unitCostErrRowNoList[i].ToString() + StrRow);

                        // エラー行の間に改行
                        if (i < unitCostErrRowNoList.Count - 1)
                        {
                            rowMessage.AppendLine();
                        }
                    }

                    // エラーメッセージを表示する
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        string.Empty,
                        SalesCostErrMsg + rowMessage.ToString(),
                        -1,
                        MessageBoxButtons.OK);

                    return isSave;
                }
                // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）--------<<<<<
                // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133-------->>>>>
                // 現単価が不正の場合、エラーメッセージを出力する
                if (unitCostErr)
                {
                    TMsgDisp.Show(
                            _form,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            string.Empty,
                            Msg,
                            0,
                            MessageBoxButtons.OK);
                    return isSave;
                }
                // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133--------<<<<<

                if (settingFlg)
                {
                    //---------------------------------------------------------------
                    // 売上金額計算
                    //---------------------------------------------------------------
                    // 売上金額計算処理
                    this.CalculationSalesPrice();

                    // 売上金額変更後発生イベント処理
                    this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());
                }
                #endregion
                // --- ADD 2011/12/22 ----------<<<<<

                // --- ADD 2022/01/05 陳艶丹 PMKOBETSU-4148 メーカー名と仕入先名チェック追加 --->>>>>
                #region メーカー名と仕入先名チェック
                // --- UPD 2025/02/03 梶谷貴士 12100013-00 --->>>>>
				//if (saveMakerSupplierCheckFlg == (int)CheckFlgType.Check)
                if ((this._salesSlipInputAcs.SalesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal) &&    //通常入力（返品など以外）
                    (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum) && //新規入力（伝票番号なし）
                    (saveMakerSupplierCheckFlg == (int)CheckFlgType.Check))
                // --- UPD 2025/02/03 梶谷貴士 12100013-00 ---<<<<<
                {
                    List<int> makerSupplierErrRowNoList = new List<int>();
                    string saveNm = string.Empty;
                    string chkNm = string.Empty;
                    // 売上データチェック
                    foreach (SalesInputDataSet.SalesDetailRow row in this._salesSlipInputAcs.SalesDetailDataTable)
                    {
                        // メーカー、品番、品名全て入力なしの明細行はチェック対象外とする。
                        // 注釈と行値引はチェック対象外とする。
                        if (((string.IsNullOrEmpty(row.GoodsName)) &&
                            (string.IsNullOrEmpty(row.GoodsNo)) &&
                            row.GoodsMakerCd == CtZero) ||
                            (row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_Annotation || // 注釈
                            row.EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount))  // 行値引
                        {
                            continue;
                        }
                        //メーカー名チェック
                        saveNm = row.MakerName;
                        chkNm = this._salesSlipInputInitDataAcs.GetName_FromMaker(row.GoodsMakerCd);
                        if (!chkNm.Equals(saveNm))
                        {
                            makerSupplierErrRowNoList.Add(row.SalesRowNo);
                            continue;
                        }

                        //仕入先名チェック
                        saveNm = row.SupplierSnm;
                        chkNm = this._salesSlipInputInitDataAcs.GetName_FromSupplier(row.SupplierCd);
                        if (!chkNm.Equals(saveNm))
                        {
                            makerSupplierErrRowNoList.Add(row.SalesRowNo);
                            continue;
                        }

                        //仕入データの仕入先チェック
                        SalesInputDataSet.StockTempRow stockTempRow = this._salesSlipInputAcs.StockTempDataTable.FindByDtlRelationGuid(row.DtlRelationGuid);
                        if (stockTempRow != null)
                        {
                            saveNm = stockTempRow.SupplierSnm;
                            chkNm = this._salesSlipInputInitDataAcs.GetName_FromSupplier(stockTempRow.SupplierCd);
                            if (!chkNm.Equals(saveNm))
                            {
                                makerSupplierErrRowNoList.Add(row.SalesRowNo);
                            }
                        }
                    }
                    // 受注データチェック
                    foreach (SalesInputDataSet.SalesDetailAcceptAnOrderRow row in this._salesSlipInputAcs.AcptDetailDataTable)
                    {
                        //エラー行番号がある場合、処理しない
                        if (makerSupplierErrRowNoList.Contains(row.SalesRowNo))
                        {
                            continue;
                        }
                        //メーカー名チェック
                        saveNm = row.MakerName;
                        chkNm = this._salesSlipInputInitDataAcs.GetName_FromMaker(row.GoodsMakerCd);
                        if (!chkNm.Equals(saveNm))
                        {
                            makerSupplierErrRowNoList.Add(row.SalesRowNo);
                            continue;
                        }

                        //仕入先名チェック
                        saveNm = row.SupplierSnm;
                        chkNm = this._salesSlipInputInitDataAcs.GetName_FromSupplier(row.SupplierCd);
                        if (!chkNm.Equals(saveNm))
                        {
                            makerSupplierErrRowNoList.Add(row.SalesRowNo);
                        }
                    }
                    // チェックエラーがある場合、メッセージを表示
                    if (makerSupplierErrRowNoList.Count > 0)
                    {
                        // エラー行番号文字列
                        StringBuilder rowMessage = new StringBuilder();

                        // エラー行番号を連結
                        for (int i = 0; i < makerSupplierErrRowNoList.Count; i++)
                        {
                            rowMessage.AppendLine();
                            rowMessage.Append(makerSupplierErrRowNoList[i].ToString(ROWNOFORMAT) + StrRow);
                        }

                        Form form = new Form();
                        form.TopMost = true;
                        // エラーメッセージを表示する
                        TMsgDisp.Show(
                            form,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            string.Empty,
                            SAVEMAKERSUPPLIERERRMSG + rowMessage.ToString(),
                            -1,
                            MessageBoxButtons.OK);
                        form.TopMost = false;

                        return isSave;
                    }
                }
                #endregion
                // --- ADD 2022/01/05 陳艶丹 PMKOBETSU-4148 メーカー名と仕入先名チェック追加 ---<<<<<

                //>>>2010/11/26
                #region ●税率再計算
                // 消費税転嫁方式：非課税 以外で税率がゼロの場合、税率を再取得し金額再計算
                if ((this._salesSlipInputAcs.SalesSlip.ConsTaxLayMethod != (int)SalesSlipInputAcs.ConsTaxLayMethod.TaxExempt) &&
                    (this._salesSlipInputAcs.SalesSlip.ConsTaxRate == 0))
                {
                    //---------------------------------------------------------------
                    // 消費税再設定
                    //---------------------------------------------------------------
                    this._salesSlipInputInitDataAcs.GetTaxRateSet(this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.SalesDate);
                    // --- UPD 2014/04/02 Y.Wakita ---------->>>>>
                    //this._salesSlipInputAcs.SalesSlip.ConsTaxRate = this._salesSlipInputInitDataAcs.TaxRate;
                    this._salesSlipInputAcs.SalesSlip.ConsTaxRate = this._salesSlipInputInitDataAcs.GetTaxRate(this._salesSlipInputAcs.SalesSlip.SalesDate); // 税率
                    // --- UPD 2014/04/02 Y.Wakita ----------<<<<<

                    foreach (SalesInputDataSet.SalesDetailRow row in this._salesSlipInputAcs.SalesDetailDataTable)
                    {
                        int salesRowNo = row.SalesRowNo;
                        int rowIndex = salesRowNo - 1;

                        //---------------------------------------------------------------
                        // 売上単価再計算
                        //---------------------------------------------------------------
                        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, row.SalesUnPrcDisplay, 0);

                        //---------------------------------------------------------------
                        // 原単価再計算
                        //---------------------------------------------------------------
                        this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, row.SalesUnitCost);

                        //---DEL  2011/12/22   李小路 REDMINE#27451 ------------------------->>>>>
                        ////---------------------------------------------------------------
                        //// 定価再計算
                        ////---------------------------------------------------------------
                        //this._salesSlipInputAcs.SalesDetailRowListPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, row.ListPriceDisplay);
                        //---DEL  2011/12/22   李小路 REDMINE#27451 -------------------------<<<<<

                        //---------------------------------------------------------------
                        // 売上金額計算処理(明細部)
                        //---------------------------------------------------------------
                        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                        //---------------------------------------------------------------
                        // 明細粗利率設定処理
                        //---------------------------------------------------------------
                        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);
                    }

                    //---------------------------------------------------------------
                    // 売上金額計算
                    //---------------------------------------------------------------
                    // 売上金額計算処理
                    this.CalculationSalesPrice();

                    // 売上金額変更後発生イベント処理
                    this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());

                }
                #endregion
                //<<<2010/11/26

                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "GetCurrentSalesDetailList", "▼伝票分割　開始");
                #region ●伝票分割
                //---------------------------------------------------------------
                // 伝票分割
                //---------------------------------------------------------------
                this._salesSlipInputAcs.MakeSalesSlipAcptAnOdr();                                                           // 受注データヘッダ情報作成
                ArrayList salesDataList;                                                                                    // 売上データリスト
                ArrayList acptDataList;                                                                                     // 受注データリスト
                List<SalesSlipInputAcs.StockSyncInfoKey> stockSyncInfoKeyList;                                              // 売仕入同時入力データキーリスト
                // --- ADD 2010/06/02 ---------->>>>>
                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().AcpOdrAgentDispDiv == 1)
                {
                    this._salesSlipInputAcs.SalesSlip.FrontEmployeeCd = string.Empty;
                    this._salesSlipInputAcs.SalesSlip.FrontEmployeeNm = string.Empty;
                }
                // --- ADD 2010/06/02 ----------<<<<<

                //>>>2010/05/30
                //this._salesSlipInputAcs.GetCurrentSalesDetailList(out salesDataList, out acptDataList, out stockSyncInfoKeyList);// 売上受注データリスト取得
                this._salesSlipInputAcs.GetCurrentSalesDetailList(out salesDataList, out acptDataList, out stockSyncInfoKeyList, scmFlg);// 売上受注データリスト取得
                //<<<2010/05/30
                // ----- ADD 2011/12/15 ------------------------------>>>>>
                foreach (ArrayList list in salesDataList)
                {
                    foreach (object obj in list)
                    {
                        if (obj is SalesSlip)
                        {
                            ((SalesSlip)obj).PreSalesDate = this._salesSlip.PreSalesDate;
                        }
                    }
                }
                // ----- ADD 2011/12/15 ------------------------------<<<<<
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "GetCurrentSalesDetailList", "▲伝票分割　終了");

                SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "CheckSaveData", "▼保存チェック　開始");
                #region ●保存チェック
                //---------------------------------------------------------------
                // 保存データチェック処理
                //---------------------------------------------------------------
                // --- UPD m.suzuki 2010/06/12 ---------->>>>>
                //bool check = this.CheckSaveData(salesDataList, acptDataList);
                bool check = this.CheckSaveData(salesDataList, acptDataList, ref isMakeQR);
                // --- UPD m.suzuki 2010/06/12 ----------<<<<<
                if (!check)
                {
                    this._salesSlipInputAcs.RevivalDataTable(); // 明細データテーブル復活
                    this.SettingDataTable(this._salesSlipInputAcs.SalesDetailDataTable); // 明細データテーブル設定
                    //this._salesSlipDetailInput.SettingGrid(); // 明細グリッド設定処理

                    //車輌管理区分戻る
                    this._salesSlipInputAcs.SalesSlip.CarMngDivCd = carMngDivCd;
                    return isSave;
                }

                //>>>2010/05/30
                //---------------------------------------------------------------
                // 保存データチェック処理
                //---------------------------------------------------------------
                if (scmFlg)
                {
                    check = this.CheckSaveDataScm(salesDataList, acptDataList);
                    if (!check)
                    {
                        this._salesSlipInputAcs.RevivalDataTable(); // 明細データテーブル復活
                        //this._salesSlipDetailInput.SettingDataTable(this._salesSlipInputAcs.SalesDetailDataTable); // 明細データテーブル設定
                        //this._salesSlipDetailInput.SettingGrid(); // 明細グリッド設定処理

                        return isSave;
                    }
                }

                // ------ ADD K2021/09/03 呉元嘯 BLINCIDENT-3095-------->>>>>
                //  売上伝票、且つ計上日<売上日の場合、エラーメッセージを表示する
                // --- UPD ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 計上日チェックの制御ファイルの対応 ---->>>>>
                //if (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales &&
                if (_salesSlipInputInitDataAcs.ProcessControlSetting.SaveAddUpDateCheckFlg == (int)SalesSlipInputInitDataAcs.OutFlgType.Output &&
                    this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales &&
                // --- UPD ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 計上日チェックの制御ファイルの対応 ----<<<<<
                    salesDataList.Count > 0 &&
                    this._salesSlipInputAcs.SalesSlip.AddUpADate < this._salesSlipInputAcs.SalesSlip.SalesDate)
                {
                    Form addUpDateMsgForm = new Form();
                    addUpDateMsgForm.TopMost = true;
                    TMsgDisp.Show(
                            addUpDateMsgForm,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            string.Empty,
                            AddUpADateMsg,
                            0,
                            MessageBoxButtons.OK);
                    addUpDateMsgForm.TopMost = false;
                    return isSave;
                }
                // ------ ADD K2021/09/03 呉元嘯 BLINCIDENT-3095-------- <<<<<
                //<<<2010/05/30
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "CheckSaveData", "▲保存チェック　終了");

                // --- ADD K2013/09/11 Y.Wakita ---------->>>>>
                #region フタバ個別対応
                if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaOutSlipCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    if (this.isFtSalesMoveOut(this._salesSlipInputAcs.SalesSlip))
                    {
                        return isSave;
                    }
                }
                #endregion
                // --- ADD K2013/09/11 Y.Wakita ----------<<<<<

                // --- ADD m.suzuki 2010/05/13 自由検索---------->>>>>
                #region ●自由検索部品自動登録
                //---------------------------------------------------------------
                // 自由検索部品自動登録 選択
                //---------------------------------------------------------------
                if (!scmFlg) // 2011/02/01
                { // 2011/02/01
                    if (this._salesSlipInputInitDataAcs.Opt_FreeSearch == (int)SalesSlipInputInitDataAcs.Option.ON)
                    {
                        if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().FrSrchPrtAutoEntDiv == (int)SalesSlipInputAcs.FrSrchPrtAutoEntDiv.Write)
                        {
                            PMJKN01000UA autoEntryFSPartsDialog = new PMJKN01000UA();
                            if (autoEntryFSPartsDialog.AutoEntryCheck())
                            {
                                DialogResult dialogResultFS = autoEntryFSPartsDialog.ShowDialog(this._salesSlipInputAcs.Owner);
                            }
                            autoEntryFSPartsDialog.Dispose(); // 2010/06/30
                        }
                    }
                } // <<<2011/02/01
                #endregion
                // --- ADD m.suzuki 2010/05/13 自由検索----------<<<<<

                SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UL", "ShowDialog", "▼商品自動登録　開始");
                #region ●商品自動登録
                //---------------------------------------------------------------
                // 商品自動登録
                //---------------------------------------------------------------
                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().AutoEntryGoodsDivCd == (int)SalesSlipInputAcs.AutoEntryGoodsDivCd.Write)
                {
                    if (this._salesSlipInputAcs.GetAutoEntryGoodsDataTable())
                    {
                        MAHNB01010UL autoEntryGoodsDialog = new MAHNB01010UL();
                        DialogResult dialogResult = autoEntryGoodsDialog.ShowDialog(_form);
                        autoEntryGoodsDialog.Dispose(); // 2010/06/30
                    }
                }
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UL", "ShowDialog", "▲商品自動登録　終了");

                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SettingSlipDetailAddInfoForSalesData", "▼伝票明細追加情報設定　開始");
                #region ●伝票明細追加情報
                //---------------------------------------------------------------
                // 伝票明細追加情報
                //---------------------------------------------------------------
                this._salesSlipInputAcs.SettingSlipDetailAddInfoForSalesData(ref salesDataList, ref acptDataList);
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SettingSlipDetailAddInfoForSalesData", "▲伝票明細追加情報設定　終了");

                #region 削除
                //>>>2010/05/30
                //#region ●保存確認
                //if (isConfirm == true) // ADD 2009/12/23
                //{
                //    //---------------------------------------------------------------
                //    // 保存確認
                //    //---------------------------------------------------------------
                //    DialogResult dResult = TMsgDisp.Show(
                //        _form,
                //        emErrorLevel.ERR_LEVEL_QUESTION,
                //        "",
                //        "登録してもよろしいですか？",
                //        0,
                //        MessageBoxButtons.YesNo,
                //        MessageBoxDefaultButton.Button1);

                //    if (dResult == DialogResult.No)
                //    {
                //        this._salesSlipInputAcs.RevivalDataTable(); // 明細データテーブル復活
                //        //this._salesSlipDetailInput.SettingDataTable(this._salesSlipInputAcs.SalesDetailDataTable); // 明細データテーブル設定
                //        //this._salesSlipDetailInput.SettingGrid(); // 明細グリッド設定処理

                //        //追加情報タブ項目Visible設定
                //        //SettingAddInfoVisible();

                //        return isSave;
                //    }
                //}
                //#endregion
                //<<<2010/05/30
                #endregion

                #region ●SCM Webサーバーデータ更新チェック
                //>>>2011/02/01
                if (scmFlg)
                {
                    if ((salesDataList != null) && (salesDataList.Count != 0))
                    {
                        int st = this._salesSlipInputAcs.CheckWebServer(salesDataList);
                        if (st == (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE)
                        {
                            TMsgDisp.Show(
                                _form,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                "Webサーバーのデータが更新されています。" + "\r\n" +
                                "受信処理実行後、再度処理を行って下さい。" + "\r\n",
                                st,
                                MessageBoxButtons.OK);
                            _saveStatus = st;
                            //this.Clear(false, true, false, false, false, false, false, 0);
                            return isSave;
                        }
                        else if (st == (int)ConstantManagement.DB_Status.ctDB_WARNING)
                        {
                            TMsgDisp.Show(
                                _form,
                                emErrorLevel.ERR_LEVEL_INFO,
                                "",
                                "Webサーバーが更新された可能性があります。" + "\r\n" +
                                "受信処理実行後、再度処理を行って下さい。" + "\r\n",
                                -1,
                                MessageBoxButtons.OK);

                            _saveStatus = st;
                            //this.Clear(false, true, false, false, false, false, false, 0);
                            return isSave;
                        }
                        else if (st != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            TMsgDisp.Show(
                                _form,
                                emErrorLevel.ERR_LEVEL_INFO,
                                "",
                                "Webサーバーの更新に失敗しました。" + "\r\n" +
                                "受信処理実行後、再度処理を行って下さい。" + "\r\n",
                                -1,
                                MessageBoxButtons.OK);

                            _saveStatus = st;
                            //this.Clear(false, true, false, false, false, false, false, 0);
                            return isSave;
                        }
                    }
                }
                //<<<2011/02/01
                #endregion

                #region ●SCM Webサーバー確定済チェック
                //>>>2011/05/25
                if (scmFlg)
                {
                    if ((salesDataList != null) && (salesDataList.Count != 0))
                    {
                        bool isFixed;

                        // DEL 2011/09/21 >>>>>>>>>
                        // ADD 2011/09/17 >>>>>>>>>
                        //int st = 0;

                        //SFCMN00299CA processingDialog = new SFCMN00299CA();
                        //try
                        //{
                        //    processingDialog.Title = "保存処理";
                        //    processingDialog.Message = "現在、データ保存中です。";
                        //    processingDialog.DispCancelButton = false;
                        //    processingDialog.Show(new Form());


                        //    st = this._salesSlipInputAcs.CheckScmOdrDataFixed(salesDataList, out isFixed);

                        //}
                        //finally
                        //{
                        //    processingDialog.Dispose();
                        //}
                        // ADD 2011/09/17 <<<<<<<<<<
                        // DEL 2011/09/21 <<<<<<<<<<

                        int st = this._salesSlipInputAcs.CheckScmOdrDataFixed(salesDataList, out isFixed);  // DEL 2011/09/17  // ADD 2011/09/21

                        if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            if (isFixed)
                            {
                                TMsgDisp.Show(
                                    _form,
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    "",
                                    "Webサーバーのデータが確定済みです。" + "\r\n" +
                                    "この伝票は、登録および送信することはできません。" + "\r\n",
                                    st,
                                    MessageBoxButtons.OK);
                                return isSave;
                            }
                        }
                    }
                }
                //<<<2011/05/25
                #endregion

                // --- ADD K2014/01/14 Y.Wakita ---------->>>>>
                #region フタバ個別対応
                bool custSlipPrtFlg = false;        // 得意先伝票フラグ
                bool custSlipPrtmsgFlg = false;     // 得意先伝票確認メッセージフラグ
                bool nonDiscountFlg = false;        // 値引フラグ
                if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaSlipPrtCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
                {

                    // 「通常」且つ「新規登録」の場合
                    if ((this._salesSlipInputAcs.SalesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal) &&
                        (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum) &&
                        ((((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                          ((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == SalesSlipInputAcs.AcptAnOdrStatusState.Shipment)) &&
                         ((SalesSlipInputAcs.SalesSlipCd)this._salesSlipInputAcs.SalesSlip.SalesSlipCd == SalesSlipInputAcs.SalesSlipCd.Sales))
                       )
                    {
                        #region 得意先伝票出力判定
                        // 得意先情報取得
                        CustomerInfo cust;
                        int stCust = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.CustomerCode, true, false, out cust);

                        if (stCust == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            // 得意先分析コード3(確認メッセージ有無)
                            if (cust.CustAnalysCode3 != 0)
                                custSlipPrtmsgFlg = true;

                            // 特定得意先判定
                            if ((cust.CustAnalysCode1 != 0) && (cust.CustWarehouseCd != string.Empty))
                            {
                                // 在庫情報取得

                                SalesInputDataSet.SalesDetailDataTable salesDetailDataTable = new SalesInputDataSet.SalesDetailDataTable();

                                foreach (ArrayList list in salesDataList)
                                {
                                    foreach (object obj in list)
                                    {
                                        if (obj is SalesInputDataSet.SalesDetailDataTable)
                                        {
                                            salesDetailDataTable = (SalesInputDataSet.SalesDetailDataTable)obj;
                                        }
                                    }

                                    // --- ADD K2014/02/06 Y.Wakita ---------->>>>>
                                    // 全て値引きデータの場合、印刷対象外とする
                                    for (int rowIndexParm = 0; rowIndexParm < salesDetailDataTable.Rows.Count; rowIndexParm++)
                                    {
                                        if ((salesDetailDataTable[rowIndexParm].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_RowDiscount) &&
                                            (salesDetailDataTable[rowIndexParm].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount))
                                        {
                                            nonDiscountFlg = true;
                                            break;
                                        }
                                    }
                                    // --- ADD K2014/02/06 Y.Wakita ----------<<<<<

                                    custSlipPrtFlg = this._salesSlipInputAcs.SalesDetailStockInfoCustomer(salesDetailDataTable, cust.CustWarehouseCd);

                                    if (custSlipPrtFlg)
                                        break;
                                }

                                SalesInputDataSet.SalesDetailAcceptAnOrderDataTable salesDetailAcceptAnOrderDataTable = new SalesInputDataSet.SalesDetailAcceptAnOrderDataTable();

                                foreach (ArrayList list in acptDataList)
                                {
                                    foreach (object obj in list)
                                    {
                                        if (obj is SalesInputDataSet.SalesDetailAcceptAnOrderDataTable)
                                        {
                                            salesDetailAcceptAnOrderDataTable = (SalesInputDataSet.SalesDetailAcceptAnOrderDataTable)obj;
                                        }
                                    }
                                    custSlipPrtFlg = this._salesSlipInputAcs.SalesDetailAcceptAnOrderStockInfoCustomer(salesDetailAcceptAnOrderDataTable, cust.CustWarehouseCd);

                                    if (custSlipPrtFlg)
                                        break;
                                }
                            }
                        }
                        #endregion
                    }
                }
                #endregion
                // --- ADD K2014/01/14 Y.Wakita ----------<<<<<

                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "▼保存処理　開始");
                #region ●保存処理
                //---------------------------------------------------------------
                // 保存処理
                //---------------------------------------------------------------

                // --- ADD 2010/05/04 ---------->>>>>
                if (this._salesSlipInputAcs.ReadSlipFlg && MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.RePrint))
                {
                    _salesSlipInputAcs.PrintSlipFlag = false;
                }
                // --- ADD 2010/05/04 ----------<<<<<

                //this.Cursor = Cursors.WaitCursor;
                // 2011/01/31 >>>
                ////>>>2010/05/30
                ////int status = this._salesSlipInputAcs.SaveDBData(this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.SalesSlipNum, out retMessage, salesDataList, acptDataList, stockSyncInfoKeyList);
                ////int status = this._salesSlipInputAcs.SaveDBData(this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.SalesSlipNum, out retMessage, salesDataList, acptDataList, stockSyncInfoKeyList, scmFlg);
                //int status = this._salesSlipInputAcs.SaveDBData(this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.SalesSlipNum, out retMessage, salesDataList, acptDataList, stockSyncInfoKeyList, scmFlg, isMakeQR);
                ////<<<2010/05/30

                //int status = this._salesSlipInputAcs.SaveDBData(this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.SalesSlipNum, out retMessage, salesDataList, acptDataList, stockSyncInfoKeyList, (scmFlg && cmtFlg), isMakeQR);// DEL 2015/08/22 黄興貴 Redmine#47045
                // --- ADD 2015/08/22 黄興貴 Redmine#47045 -------------->>>>>
                int status;
                try
                {
                    status = this._salesSlipInputAcs.SaveDBData(this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.SalesSlipNum, out retMessage, salesDataList, acptDataList, stockSyncInfoKeyList, (scmFlg && cmtFlg), isMakeQR);
                }
                catch (Exception ex)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
                    retMessage = ex.Message;
                }
                // --- ADD 2015/08/22 黄興貴 Redmine#47045 --------------<<<<<
                // 2011/01/31 <<<
                //this.Cursor = Cursors.Default;
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SaveDBData", "▲保存処理　終了");

                // ---ADD 2011/02/11------------->>>>
                if (status == -1)
                {
                    return false;
                }
                // ---ADD 2011/02/11-------------<<<<
                // --- ADD 2010/03/01 ---------->>>>>
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "DeleteDBData", "▼伝票削除処理　開始");
                #region ●伝票削除処理
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 削除対象伝票情報リストの取り込処理
                    ArrayList salesInfoMsgList;
                    ArrayList salesInfoList;
                    status = this._salesSlipInputAcs.GetSalesInfoList(out salesInfoMsgList, out salesInfoList);

                    if (salesInfoMsgList != null && salesInfoMsgList.Count > 0)
                    {
                        string message = string.Empty;
                        string messagesUoe = string.Empty;// ADD 2011/11/10
                        foreach (ArrayList list in salesInfoMsgList)
                        {
                            SalesSlip salesSlip = list[0] as SalesSlip;

                            // message += "  " + this._salesSlipInputAcs.GetAcptAnOdrStatusName(salesSlip.AcptAnOdrStatus) + ":" + salesSlip.SalesSlipNum + "\r\n";// DEL 2011/11/10
                            //-----ADD 2011/11/10----->>>>>
                            bool flag = false;
                            List<UOEOrderDtlWork> uoeDetailList = list[2] as List<UOEOrderDtlWork>;
                            if (uoeDetailList != null && uoeDetailList.Count != 0)
                            {
                                foreach (UOEOrderDtlWork uoeDetail in uoeDetailList)
                                {
                                    //messagesUoe += "以下の伝票は発注選択を行っている為、削除対象外とします。\r\n";
                                    messagesUoe += "  " + this._salesSlipInputAcs.GetAcptAnOdrStatusName(salesSlip.AcptAnOdrStatus)
                                                + ":" + uoeDetail.SalesSlipNum + "\r\n";
                                    flag = true;
                                    break;
                                }
                            }
                            if (!flag)
                            {
                                message += "  " + this._salesSlipInputAcs.GetAcptAnOdrStatusName(salesSlip.AcptAnOdrStatus) + ":" + salesSlip.SalesSlipNum + "\r\n";
                            }
                            //-----ADD 2011/11/10-----<<<<<
                        }

                        //-----DEL 2012/04/10----->>>>>
                        //-----UPD 2011/11/10----->>>>>
                        //DialogResult dr = new DialogResult();

                        //if (!string.IsNullOrEmpty(message) && !string.IsNullOrEmpty(messagesUoe))
                        //{
                        //    dr = TMsgDisp.Show(
                        //       _form,
                        //       emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        //       "",
                        //       "売上全体設定[計上残区分：残さない]になっている為\r\n" + "元伝票の削除を行います。\r\n\r\n" +
                        //       "以下の伝票は削除対象です。\r\n" +
                        //       message + "\r\n\r\n" +
                        //       "計上していない明細が含まれますが削除してもよろしいですか？\r\n\r\n" +
                        //       "以下の伝票は発注選択を行っている為、削除対象外とします。\r\n" +
                        //       messagesUoe + "\r\n",
                        //       0,
                        //       MessageBoxButtons.YesNo);

                        //}
                        //else if (!string.IsNullOrEmpty(message))
                        //{
                        //    dr = TMsgDisp.Show(
                        //       _form,
                        //       emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        //       "",
                        //       "売上全体設定[計上残区分：残さない]になっている為\r\n" + "元伝票の削除を行います。\r\n\r\n" +
                        //       "以下の伝票は削除対象です。\r\n" +
                        //       message + "\r\n\r\n" +
                        //       "計上していない明細が含まれますが削除してもよろしいですか？\r\n\r\n",
                        //       0,
                        //       MessageBoxButtons.YesNo);
                        //}
                        //else if (!string.IsNullOrEmpty(messagesUoe))
                        //{
                        //    dr = TMsgDisp.Show(
                        //       _form,
                        //       emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        //       "",
                        //       "売上全体設定[計上残区分：残さない]になっている為\r\n" + "元伝票の削除を行います。\r\n\r\n" +
                        //       "以下の伝票は発注選択を行っている為、削除対象外とします。\r\n" +
                        //       messagesUoe + "\r\n",
                        //       0,
                        //       MessageBoxButtons.OK);
                        //}

                        //// 削除確認メッセージ表示
                        //DialogResult dr = TMsgDisp.Show(
                        //        _form,
                        //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        //        "",
                        //        "以下の伝票に計上していない明細が存在します。\r\n\r\n" +
                        //        message + "\r\n" +
                        //        "計上しない明細は削除されますがよろしいですか？",
                        //        0,
                        //        MessageBoxButtons.YesNo);
                        ////-----UPD 2011/11/10-----<<<<<
                        //-----DEL 2012/04/10-----<<<<<

                        //-----UPD 2012/04/10----->>>>>
                        //if (dr == DialogResult.Yes)
                        //{
                        //    // 伝票削除処理
                        //    salesInfoList.AddRange(salesInfoMsgList);
                        //}
                            // 伝票削除処理
                            salesInfoList.AddRange(salesInfoMsgList);
                        //-----UPD 2012/04/10-----<<<<<
                    }

                    if (salesInfoList != null && salesInfoList.Count > 0)
                    {
                        // 伝票削除処理
                        status = this._salesSlipInputAcs.DeleteDBData(salesInfoList, out retMessage);
                    }
                }
                #endregion
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "DeleteDBData", "▲伝票削除処理　終了");
                // --- ADD 2010/03/01 ----------<<<<<

                #region ●保存後処理
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    #region 正常処理
                    //>>>2010/05/30
                    if (isShowSaveCompletionDialog)
                    {
                        SaveCompletionDialog dialog = new SaveCompletionDialog();
                        dialog.ShowDialog(2);
                    }

                    //-----------------------------------------------------------------------------
                    // 回答送信処理(SCM)
                    //-----------------------------------------------------------------------------
                    //>>>2011/02/01
                    //if (scmFlg) Process.Start("PMSCM01100U.EXE", this._parameter + " /A" + " " + this._salesSlipInputAcs.SalesSlip.InquiryNumber + ":" + this._salesSlipInputAcs.SalesSlip.InqOrdDivCd);

                    //>>>2011/03/014
                    //// UOE発注分のみの場合、回答送信処理を行わない
                    //if ((scmFlg) && (salesDataList != null) && (salesDataList.Count != 0)) Process.Start("PMSCM01100U.EXE", this._parameter + " /A" + " " + this._salesSlipInputAcs.SalesSlip.InquiryNumber + ":" + this._salesSlipInputAcs.SalesSlip.InqOrdDivCd);

                    // UOE発注分のみの場合、回答送信処理を行わない
                    if ((scmFlg) && (salesDataList != null) && (salesDataList.Count != 0))
                    {
                        // UPD 2012/10/17 湯上 SCM障害対応 №10414------------------------>>>>>
                        //Process p = Process.Start("PMSCM01100U.EXE", this._parameter + " /A" + " " + this._salesSlipInputAcs.SalesSlip.InquiryNumber + ":" + this._salesSlipInputAcs.SalesSlip.InqOrdDivCd);

                        string salesSlipNumList = string.Empty;
                        // 回答送信処理時に対象となる売上伝票番号リストをパラメータにセットする
                        if (this._salesSlipInputAcs.SalesSlipNumList != null &&
                            this._salesSlipInputAcs.SalesSlipNumList.Count != 0)
                        {
                            for (int i = 0; i < this._salesSlipInputAcs.SalesSlipNumList.Count; i++)
                            {
                                if (i != 0)
                                {
                                    salesSlipNumList += ",";
                                }
                                salesSlipNumList += this._salesSlipInputAcs.SalesSlipNumList[i].ToString();
                            }
                        }

                        Process p = Process.Start("PMSCM01100U.EXE", this._parameter + " /A" + " " + this._salesSlipInputAcs.SalesSlip.InquiryNumber + ":" + this._salesSlipInputAcs.SalesSlip.InqOrdDivCd + ":" + salesSlipNumList);
                        // UPD 2012/10/17 湯上 SCM障害対応 №10414------------------------<<<<<
                        p.WaitForExit();
                    }
                    //<<<2011/03/14
                    //<<<2011/02/01

                    // zhouzy add 20110919 begin
                    SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "PrintSlip", "●印刷処理　開始");
                    if (_salesSlipInputAcs.PrintSlipFlag == true)
                    {
                        // --- ADD K2014/01/14 Y.Wakita ---------->>>>>
                        #region フタバ個別対応
                        // フタバ伝票印刷制御オプション（個別）
                        if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaSlipPrtCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
                        {
                            ArrayList _extrData = new ArrayList();
                            _salesSlipInputAcs.ExtrData = _extrData;
                            // 得意先伝票出力
                            // --- UPD K2014/02/06 Y.Wakita ---------->>>>>
                            //if (custSlipPrtFlg)
                            if (custSlipPrtFlg && nonDiscountFlg)
                            // --- UPD K2014/02/06 Y.Wakita ----------<<<<<
                            {
                                // 得意先伝票確認メッセージフラグ
                                if (custSlipPrtmsgFlg)
                                {
                                    // 確認メッセージ表示ありの場合
                                    DialogResult dResult = TMsgDisp.Show(
                                            _owner,
                                            emErrorLevel.ERR_LEVEL_QUESTION,
                                            "TODO",
                                            "得意先伝票の印刷を行いますか？",
                                            0,
                                            MessageBoxButtons.YesNo,
                                            MessageBoxDefaultButton.Button1);

                                    if (dResult == DialogResult.No)
                                    {
                                        custSlipPrtFlg = false;
                                    }
                                }
                                _extrData.Add(custSlipPrtFlg);
                                _salesSlipInputAcs.ExtrData = _extrData;
                            }
                        }
                        #endregion
                        // --- ADD K2014/01/14 Y.Wakita ----------<<<<<

                        #region 印刷処理
                        //------------------------------------------------------
                        // 伝票印刷処理
                        //------------------------------------------------------
                        _salesSlipInputAcs.ScmFlg = scmFlg;
                        Thread printSlipThread = new Thread(_salesSlipInputAcs.PrintSlipThread);
                        // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 ----->>>>>
                        // 印刷スレッド対象設定
                        PringThreadInfo pringThread = new PringThreadInfo();
                        pringThread.PrintThread = printSlipThread;
                        // 印刷スレッドリストに追加
                        _salesSlipInputAcs._pringThreadList.Add(pringThread);
                        // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 -----<<<<<
                        SalesSlipInputInitDataAcs.LogWrite("MAHNB01012AA", "SaveDBData", "PrintSlipThread 開始");
                        printSlipThread.Start();

                        #endregion
                    }
                    else
                    {
                        _salesSlipInputAcs.PrintSlipFlag = true;
                    }
                    SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "PrintSlip", "○印刷処理　終了");
                    // zhouzy add 20110919 end

                    // 前回伝票番号
                    _beforeSalesSlipNumText = "前回伝票番号：" + this._salesSlipInputAcs.SalesSlip.SalesSlipNum.ToString().PadLeft(9, '0');//ADD 2011/08/03

                    // 2011/01/31 >>>
                    //if (scmFlg)
                    if (scmFlg && cmtFlg)
                    // 2011/01/31 <<<
                    {
                        //this._salesSlipDetailInput.Clear();
                        this._salesSlipInputAcs.CurrentSalesSlipNum = SalesSlipInputAcs.ctDefaultSalesSlipNum;
                        //this._salesSlipInputAcs.SalesSlip.SalesSlipNum = SalesSlipInputAcs.ctDefaultSalesSlipNum;   //DEL 2011/07/19
                        this._salesSlipInputAcs.SalesSlip.SalesSlipNum = SalesSlipInputAcs.ctDefaultSalesSlipNum;   //ADD 2011/08/03
                        this._salesSlipInputAcs.SalesSlip.InputMode = SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ReadOnly;
                        this._salesSlipInputAcs.RevivalDataTable(true); // 明細データテーブル復活
                        //this._salesSlipDetailInput.SettingDataTable(this._salesSlipInputAcs.SalesDetailDataTable); // 明細データテーブル設定
                        //this._salesSlipDetailInput.SettingGrid(); // 明細グリッド設定処理
                    }
                    //<<<2010/05/30

                    // 売上入力明細クリア処理
                    // 2011/01/31 >>>
                    ////>>>2010/05/30
                    ////this.Clear();
                    //if (!scmFlg) this.Clear();
                    ////<<<2010/05/30

                    if (!(scmFlg && cmtFlg)) this.Clear();
                    // 2011/01/31 <<<

                    //>>>2011/03/04
                    // SCM関連情報クリア
                    this._salesSlipInputAcs.ClearSCMInfo();
                    //<<<2011/03/04

                    //---------------------------------------------------------------
                    // 正常処理
                    //---------------------------------------------------------------
                    //this.uLabel_BeforeSalesSlipNum.Text = "前回伝票番号：" + this.SalesSlip.SalesSlipNum.ToString().PadLeft(9, '0');

                    //this._salesSlipDetailInput.uGrid_Details.BeginUpdate();
                    // 前回伝票番号
                    //_beforeSalesSlipNumText = "前回伝票番号：" + this._salesSlipInputAcs.SalesSlip.SalesSlipNum.ToString().PadLeft(9, '0');//DEL 2011/08/03

                    SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;

                    // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                    //// --- ADD 2013/04/11 Y.Wakita ③ ---------->>>>>
                    //// 受注ステータスを戻す
                    //salesSlip.AcptAnOdrStatus = salesSlipBk.AcptAnOdrStatus;
                    //// --- ADD 2013/04/11 Y.Wakita ③ ----------<<<<<
                    // --- DEL 2013/04/18 T.Nishi ----------<<<<<

                    // 表示用受注ステータス設定処理
                    SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

                    // 表示用伝票区分設定処理
                    SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

                    // 売上データクラス→画面格納処理
                    this.SetDisplay(this._salesSlip);

                    // 計上時は空白行を削除する(出荷計上 受注計上 見積計上)
                    if ((this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp) ||
                        (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                        (this._salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp))
                    {
                        this.DeleteEmptyRow(true);
                    }

                    //this._salesSlipDetailInput.uGrid_Details.EndUpdate();

                    // 明細グリッド設定処理
                    //this._salesSlipDetailInput.SettingGrid();

                    //>>>2010/05/30
                    //if (isShowSaveCompletionDialog)
                    //{
                    //    SaveCompletionDialog dialog = new SaveCompletionDialog();
                    //    dialog.ShowDialog(2);
                    //}
                    //<<<2010/05/30

                    if (this._salesInputConstructionAcs.SaveInfoStoreValue == SalesSlipInputConstructionAcs.SaveInfoStore_ON)
                    {
                        if (this._salesSlipInputAcs.SalesSlip.SalesSlipNum.PadLeft(9, '0') != SalesSlipInputAcs.ctDefaultSalesSlipNum)
                        {
                            // 売上入力用初期値クラスをシリアライズ
                            this._salesSlipInputInitData.EnterpriseCode = this._salesSlipInputAcs.SalesSlip.EnterpriseCode;
                            this._salesSlipInputInitData.SectionCode = this._salesSlipInputAcs.SalesSlip.SectionCode;
                            this._salesSlipInputInitData.CustomerCode = this._salesSlipInputAcs.SalesSlip.CustomerCode;
                        }
                        else
                        {
                            // 売上入力用初期値クラスをシリアライズ
                            this._salesSlipInputInitData.EnterpriseCode = this._salesSlipInputAcs.SalesSlipAcptAnOdr.EnterpriseCode;
                            this._salesSlipInputInitData.SectionCode = this._salesSlipInputAcs.SalesSlipAcptAnOdr.SectionCode;
                            this._salesSlipInputInitData.CustomerCode = this._salesSlipInputAcs.SalesSlipAcptAnOdr.CustomerCode;
                        }
                        this._salesSlipInputInitData.Serialize();
                    }

                    // 売上金額計算処理
                    this.CalculationSalesPrice();

                    // 売上金額変更後発生イベント処理
                    this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());

                    //// --- ADD 2009/09/08② ---------->>>>>
                    ////追加情報タブ項目Visible設定
                    //SettingAddInfoVisible();
                    // --- ADD 2009/09/08② ----------<<<<<

                    isSave = true;
                    #endregion
                }
                else if (status == (int)ConstantManagement.DB_Status.ctDB_DUPLICATE)
                {
                    //---------------------------------------------------------------
                    // 重複
                    //---------------------------------------------------------------
                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_STOPDISP,
                        "",
                        "保存に失敗しました。" + "\r\n" + "\r\n" + retMessage,
                        status,
                        MessageBoxButtons.OK);
                }
                else if (status == (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE)				// 排他（別端末更新済）
                {
                    //---------------------------------------------------------------
                    // 別端末更新済み
                    //---------------------------------------------------------------
                    // 担当者にフォーカスをセット（一時的に）
                    //this.tEdit_SalesEmployeeCd.Focus();

                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        "現在、編集中の売上データは既に更新されています。" + "\r\n" + "\r\n" +
                        "最新の情報を取得します。",
                        -1,
                        MessageBoxButtons.OK);

                    // 再読込処理
                    this.ReLoad(this._salesSlipInputAcs.SalesSlip.EnterpriseCode, this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus, this._salesSlipInputAcs.SalesSlip.SalesSlipNum);

                    //this.timer_InitialSetFocus.Enabled = true;
                }
                else if (status == (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE)				// 排他（別端末物理削除済）
                {
                    //---------------------------------------------------------------
                    // 別端末物理削除済み
                    //---------------------------------------------------------------
                    // 担当者にフォーカスをセット（一時的に）
                    //this.tEdit_SalesEmployeeCd.Focus();

                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        "現在、編集中の売上データは既に削除されています。",
                        -1,
                        MessageBoxButtons.OK);

                    //this.Clear(false, true, false, false, false, false);    //DEL 2010/06/02
                    this.Clear(false, true, false, false, false, false, false, 0);   //ADD 2010/06/02

                    //this.timer_InitialSetFocus.Enabled = true;
                }
                else if (status == 999)																// 排他（別端末更新済）
                {
                    //---------------------------------------------------------------
                    // 別端末更新済み
                    //---------------------------------------------------------------
                    // 担当者にフォーカスをセット（一時的に）
                    //this.tEdit_SalesEmployeeCd.Focus();

                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        "保存に失敗しました。" + retMessage + "\r\n" + "\r\n" +
                        "申し訳ありませんが、再度処理を行ってください。",
                        -1,
                        MessageBoxButtons.OK);

                    //this.Clear(false, true, false, false, false, false);   //DEL 2010/06/02
                    this.Clear(false, true, false, false, false, false, false, 0);   //ADD 2010/06/02

                    //this.timer_InitialSetFocus.Enabled = true;
                }
                else if (status == 811)
                {
                    //---------------------------------------------------------------
                    // タイムアウトエラー
                    //---------------------------------------------------------------
                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_STOPDISP,
                        "",
                        "保存に失敗しました。（タイムアウトエラー）" + "\r\n" + "\r\n" + retMessage,
                        status,
                        MessageBoxButtons.OK);
                }
                else if (status == 850)
                {
                    //---------------------------------------------------------------
                    // 企業ロックタイムアウトエラー
                    //---------------------------------------------------------------
                    //>>>2010/06/08
                    //TMsgDisp.Show(
                    //    _form,
                    //    emErrorLevel.ERR_LEVEL_STOPDISP,
                    //    "",
                    //    "保存に失敗しました。" + "\r\n" + "\r\n" +
                    //    "シェアチェックエラー（企業ロック）です。" + "\r\n" +
                    //    "月次処理か、その他の業務を行っているため本処理は行えません。" + "\r\n" +
                    //    "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n",
                    //    status,
                    //    MessageBoxButtons.OK);
                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        "処理が込み合っているため中断しました。" + "\r\n" +
                        "再試行するか、しばらく待ってから再度処理を実行して下さい。" + "\r\n",
                        status,
                        MessageBoxButtons.OK);
                    //<<<2010/06/08

                    this._salesSlipInputAcs.RevivalDataTable(); // 明細データテーブル復活
                    //this._salesSlipDetailInput.SettingDataTable(this._salesSlipInputAcs.SalesDetailDataTable); // 明細データテーブル設定
                    //this._salesSlipDetailInput.SettingGrid(); // 明細グリッド設定処理
                }
                // --- UPD m.suzuki 2010/08/17 ---------->>>>>
                //else if (status == 851)
                else if (status == 851 || status == (int)ConstantManagement.DB_Status.ctDB_ADS_LOCK_TIMEOUT)
                // --- UPD m.suzuki 2010/08/17 ----------<<<<<
                {
                    //---------------------------------------------------------------
                    // 拠点ロックタイムアウトエラー
                    //---------------------------------------------------------------
                    //>>>2010/06/08
                    //TMsgDisp.Show(
                    //    _form,
                    //    emErrorLevel.ERR_LEVEL_STOPDISP,
                    //    "",
                    //    "保存に失敗しました。" + "\r\n" + "\r\n" +
                    //    "シェアチェックエラー（拠点ロック）です。" + "\r\n" +
                    //    "締処理か、処理が込み合っているためタイムアウトしました。" + "\r\n" +
                    //    "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n",
                    //    status,
                    //    MessageBoxButtons.OK);
                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        "処理が込み合っているため中断しました。" + "\r\n" +
                        "再試行するか、しばらく待ってから再度処理を実行して下さい。" + "\r\n",
                        status,
                        MessageBoxButtons.OK);
                    //<<<2010/06/08
                    this._salesSlipInputAcs.RevivalDataTable(); // 明細データテーブル復活
                    //this._salesSlipDetailInput.SettingDataTable(this._salesSlipInputAcs.SalesDetailDataTable); // 明細データテーブル設定
                    //this._salesSlipDetailInput.SettingGrid(); // 明細グリッド設定処理
                }
                else if (status == 852)
                {
                    //---------------------------------------------------------------
                    // 倉庫ロックタイムアウトエラー
                    //---------------------------------------------------------------
                    //>>>2010/06/08
                    //TMsgDisp.Show(
                    //    _form,
                    //    emErrorLevel.ERR_LEVEL_STOPDISP,
                    //    "",
                    //    "保存に失敗しました。" + "\r\n" + "\r\n" +
                    //    "シェアチェックエラー（倉庫ロック）です。" + "\r\n" +
                    //    "棚卸処理か、その他の在庫業務を行っているためタイムアウトしました" + "\r\n" +
                    //    "再試行するか、しばらく待ってから再度処理を行ってください。" + "\r\n",
                    //    status,
                    //    MessageBoxButtons.OK);
                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        "処理が込み合っているため中断しました。" + "\r\n" +
                        "再試行するか、しばらく待ってから再度処理を実行して下さい。" + "\r\n",
                        status,
                        MessageBoxButtons.OK);
                    //<<<2010/06/08
                    this._salesSlipInputAcs.RevivalDataTable(); // 明細データテーブル復活
                    //this._salesSlipDetailInput.SettingDataTable(this._salesSlipInputAcs.SalesDetailDataTable); // 明細データテーブル設定
                    //this._salesSlipDetailInput.SettingGrid(); // 明細グリッド設定処理
                }
                // --- ADD m.suzuki 2010/08/17 ---------->>>>>
                else if (status == (int)ConstantManagement.DB_Status.ctDB_ADU_LOCK_TIMEOUT)
                {
                    //---------------------------------------------------------------
                    // 締次ロックタイムアウトエラー
                    //---------------------------------------------------------------
                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        "対象の期間を集計処理中のため中断しました。" + "\r\n" +
                        "計上日を変更して、再度処理を実行して下さい。" + "\r\n",
                        status,
                        MessageBoxButtons.OK);
                    this._salesSlipInputAcs.RevivalDataTable(); // 明細データテーブル復活
                }
                // --- ADD m.suzuki 2010/08/17 ----------<<<<<
                // ADD 2011/08/23 qijh SCM対応 - 拠点管理(10704767-00) --------->>>>>>>
                else if (status == STATUS_CHK_SEND_ERR)
                {
                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        MSG_CHK_SEND_ERR,
                        status,
                        MessageBoxButtons.OK);

                    this._salesSlipInputAcs.RevivalDataTable(); // 明細データテーブル復活  // ADD 2012/01/21 Redmine28089 
                }
                // ADD 2011/08/23 qijh SCM対応 - 拠点管理(10704767-00) ---------<<<<<<<
                else
                {
                    //---------------------------------------------------------------
                    // その他例外
                    //---------------------------------------------------------------
                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_STOPDISP,
                        "",
                        "保存に失敗しました。" + "\r\n" + "\r\n" + retMessage,
                        status,
                        MessageBoxButtons.OK);
                }
                #endregion
                _saveStatus = status;
            }
            // --- 2015/09/08 黄興貴 Redmine#47045 レビュー指摘対応 ---------->>>>>
            catch(Exception ex)
            {
                TMsgDisp.Show(
                        null,
                        emErrorLevel.ERR_LEVEL_STOPDISP,
                        "",
                        "保存に失敗しました。" + "\r\n" + "\r\n" + ex.Message,
                        1000,
                        MessageBoxButtons.OK);
            }
            // --- 2015/09/08 黄興貴 Redmine#47045 レビュー指摘対応 ----------<<<<<
            finally
            {
                //this.Cursor = Cursors.Default;
                //this._salesSlipDetailInput.uGrid_Details.EndUpdate();
            }

            //if (tEdit_SectionCode.Enabled == true)
            //{
            //    this._prevControl = this.tEdit_SectionCode; // フォーカス位置設定
            //}
            //else
            //{
            //    this._prevControl = this.tEdit_SalesEmployeeCd; // フォーカス位置設定
            //}

            //this.SettingAddUpButtonToolEnabled(this._prevControl);

            //this.SettingToolBarButtonEnabled();

            // フッタタブ位置セット
            //uTabControl_Footer.SelectedTab = uTabControl_Footer.Tabs[0];

            return isSave;
        }

        // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 ----->>>>>
        /// <summary>
        /// 納品書印刷タイムアウト判断
        /// </summary>
        /// <remarks>
        /// <br>Note         : 納品書印刷タイムアウト判断を行う</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : K2020/12/29</br>
        /// <br>Date         : 2021/07/16</br>
        /// <br>Update Note  : PMKOBETSU-4154 売上伝票印刷エラー対応</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// </remarks>
        private void OnPrintTimedEvent(object source, ElapsedEventArgs e)
        {
            try
            {
                // スレッドを実行する場合、タイムアウトになるかを判断
                if (_salesSlipInputAcs._pringThreadList.Count > 0)
                {
                    //---DEL 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ---->>>>>
                    #region DEL
                    //// システム時刻を取得
                    //Int64 timeNow = DateTime.Now.Ticks;
                    //TimeSpan ts = new TimeSpan(timeNow - _salesSlipInputAcs._pringThreadList[0].StartTime);

                    //// 印刷スレッドをタイムアウト時間を超える場合
                    //if (_salesSlipInputAcs._pringThreadList[0].StartTime != 0 && ts.TotalSeconds > threadTimeoutInfo.TimeoutSec)
                    //{
                    //    // 伝票番号取得
                    //    string slipKeySt = string.Empty;
                    //    foreach (SalesSlipPrintCndtn.SalesSlipKey slipKey in _salesSlipInputAcs._pringThreadList[0].SalesSlipKeyList)
                    //    {
                    //        slipKeySt = "伝票番号：" + slipKey.SalesSlipNum + "\r\n";
                    //    }

                    //    // タイムアウトになる場合、スレッドを強制に終了
                    //    _salesSlipInputAcs._pringThreadList[0].PrintThread.Abort();
                    //    _salesSlipInputAcs._pringThreadList.RemoveAt(0);
                    //    // 実行中スレッドがない場合、印刷終了フラグを設定する
                    //    if (_salesSlipInputAcs._pringThreadList.Count == 0)
                    //    {
                    //        _salesSlipInputAcs.PrintThreadOverFlag = true;
                    //    }

                    //    // 警告メッセージを出す
                    //    DialogResult dialogResult = TMsgDisp.Show(
                    //        _form,
                    //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //        "todo",
                    //        "伝票発行が正常に終了しませんでした。   " + "\r\n" +
                    //        "再度発行してください。" + "\r\n" + "\r\n" +
                    //        slipKeySt,
                    //        0,
                    //        MessageBoxButtons.OK,
                    //        MessageBoxDefaultButton.Button1);
                    //}
                    #endregion
                    //---DEl 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----<<<<<
                    //---ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ---->>>>>
                    bool isRetry = false;
                    bool isAbort = false;
                    // タイマー一時停止
                    printTimer.Stop();
                    // 印刷スレッドに例外が発生の場合、リトライ処理を行う。
                    if (_salesSlipInputAcs._pringThreadList[0].PrintRetryFlg == true)
                    {
                        isRetry = true;
                    }
                    else
                    {
                        // システム時刻を取得
                        Int64 timeNow = DateTime.Now.Ticks;
                        TimeSpan ts = new TimeSpan(timeNow - _salesSlipInputAcs._pringThreadList[0].StartTime);

                        // 印刷スレッドをタイムアウト時間を超える場合、リトライ処理を行う。
                        if (_salesSlipInputAcs._pringThreadList[0].StartTime != 0 && ts.TotalSeconds > threadTimeoutInfo.TimeoutSec)
                        {
                            isRetry = true;
                            isAbort = true;
                        }
                    }
                    if (isRetry)
                    {
                        // 伝票番号取得
                        string logMsg = string.Empty;
                        string slipKeySt = string.Empty;
                        foreach (SalesSlipPrintCndtn.SalesSlipKey slipKey in _salesSlipInputAcs._pringThreadList[0].SalesSlipKeyList)
                        {
                            slipKeySt = string.Format(RetryMsgSlips, slipKey.SalesSlipNum);
                        }                        
                        // タイムアウトの場合、アボート
                        if (isAbort)
                        {
                            _salesSlipInputAcs._pringThreadList[0].PrintThread.Abort();
                            logMsg = RetryLogErr + slipKeySt;
                        }
                        else
                        {
                            logMsg = RetryLogTimeout + slipKeySt;
                        }
                        // スレッド情報を一時保持
                        PringThreadInfo retryPringThreadInfo = _salesSlipInputAcs._pringThreadList[0];

                        Form _form = new Form();
                        _form.TopMost = false;
                        if (retryPringThreadInfo.RetryCnt < threadTimeoutInfo.ThreadRetryCnt)
                        {
                            // ログ出力
                            if (LogCommon == null)
                            {
                                LogCommon = new OutLogCommon();
                            }
                            LogCommon.OutputClientLog(ctAssemblyName, logMsg, this._enterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);
                            // メッセージを出す
                            _form.TopMost = true;
                            DialogResult dialogResult = TMsgDisp.Show(
                                _form,
                                emErrorLevel.ERR_LEVEL_QUESTION,
                                "todo",
                                "伝票発行に失敗しました。リトライ処理を行う場合、残りの伝票発行後に再実行されます。   " + "\r\n" +
                                "伝票発行リトライを行いますか？" + "\r\n" + "\r\n" +
                                slipKeySt,
                                0,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button1);
                            _form.TopMost = false;

                            if (dialogResult == DialogResult.Yes)
                            {
                                // スレッド開始時間
                                retryPringThreadInfo.StartTime = 0;
                                retryPringThreadInfo.RetryCnt = retryPringThreadInfo.RetryCnt + 1;
                                retryPringThreadInfo.PrintRetryFlg = false;

                                // 印刷スレッド
                                Thread printSlipThread = new Thread(_salesSlipInputAcs.PrintSlipThreadRetry);
                                // 印刷スレッド対象設定
                                retryPringThreadInfo.PrintThread = printSlipThread;

                                _salesSlipInputAcs._pringThreadList.Add(retryPringThreadInfo);

                                printSlipThread.Start();
                            }
                        }
                        else
                        {
                            // 警告メッセージを出す
                            _form.TopMost = true;
                            DialogResult dialogResult = TMsgDisp.Show(
                                _form,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "todo",
                                "リトライによる伝票発行が正常に終了しませんでした。   " + "\r\n" + 
                                "「再発行」を行ってください。   "+ "\r\n" + "\r\n" +
                                slipKeySt,
                                0,
                                MessageBoxButtons.OK,
                                MessageBoxDefaultButton.Button1);
                            _form.TopMost = false;                                
                        }
                        _salesSlipInputAcs._pringThreadList.RemoveAt(0);

                        // 実行中スレッドがない場合、印刷終了フラグを設定する
                        if (_salesSlipInputAcs._pringThreadList.Count == 0)
                        {
                            _salesSlipInputAcs.PrintThreadOverFlag = true;
                        }
                    }

                    // タイマー再開
                    printTimer.Start();
                    //---ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----<<<<<
                }
            }
            catch (Exception ex)
            {
                SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "", "納品書印刷タイマー例外発生：" + ex.ToString());
                printTimer.Start();//---ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----<<<<<
            }
        }
        // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 -----<<<<<

        /// <summary>
        /// 空白行削除処理
        /// </summary>
        /// <param name="changeRowCount">true:行数を変更する false:行数を変更しない</param>
        internal void DeleteEmptyRow(bool changeRowCount)
        {
            List<int> deleteStockRowNoList = this._salesSlipInputAcs.GetEmptySalesRowNoList();

            if (deleteStockRowNoList.Count > 0)
            {
                // 売上明細行削除処理
                this._salesSlipInputAcs.DeleteSalesDetailRow(deleteStockRowNoList, changeRowCount);
            }
        }

        /// <summary>
        /// データテーブル設定処理
        /// </summary>
        public void SettingDataTable(SalesInputDataSet.SalesDetailDataTable salesDetailDataTableSave)
        {
            this._salesDetailDataTable = salesDetailDataTableSave;
        }
        /// <summary>
        /// 売上データ補正処理
        /// </summary>
        /// <br>Update Note: 2009/09/08② 張凱 車輌管理機能対応</br>
        private void ReviseSalesSlip()
        {
            DialogResult dialogResult;

            #region 車両管理オプション
            if (this._salesSlipInputInitDataAcs.Opt_CarMng == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                #region 車両管理区分(0:しない 1:登録(確認) 2:登録(自動) 3:登録無)
                if (this._salesSlipInputAcs.ExistCarInfo())
                {
                    switch (this._salesSlipInputAcs.SalesSlip.CarMngDivCd)
                    {
                        case 0: // しない
                            this._salesSlipInputAcs.SalesSlip.CarMngDivCd = 0; // しない
                            break;
                        case 1: // 登録(確認)
                            // --- UPD 2009/09/08② -------------->>>
                            if (this._salesSlipInputAcs.ExistCarMngNoInfo())
                            {
                                dialogResult = TMsgDisp.Show(
                                _form,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "todo",
                                "車輌管理マスタに車輌情報を更新します。" + "\r\n" + "\r\n" +
                                "よろしいですか？" + "\r\n" + "\r\n" +
                                "管理番号＝" + _carMngCode,// ADD 2009/09/08②
                                0,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button1);
                                if (dialogResult == DialogResult.Yes)
                                {
                                    this._salesSlipInputAcs.SalesSlip.CarMngDivCd = 1; // する
                                }
                                else
                                {
                                    this._salesSlipInputAcs.SalesSlip.CarMngDivCd = 2; // しない
                                }
                            }
                            else
                            {
                                //新規登録時の処理
                                if (this._salesSlipInputAcs.SalesSlip.InputMode == 0
                                    && (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum))
                                {
                                    dialogResult = TMsgDisp.Show(
                                        _form,
                                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                        "todo",
                                        "車輌管理マスタに車輌情報を登録します。" + "\r\n" + "\r\n" +
                                                "よろしいですか？" + "\r\n" + "\r\n" +
                                                "管理番号＝" + _carMngCode,// TODO
                                        0,
                                        MessageBoxButtons.YesNo,
                                        MessageBoxDefaultButton.Button1);
                                    if (dialogResult == DialogResult.Yes)
                                    {
                                        this._salesSlipInputAcs.SalesSlip.CarMngDivCd = 1; // する
                                    }
                                    else
                                    {
                                        this._salesSlipInputAcs.SalesSlip.CarMngDivCd = 2; // しない
                                    }
                                }
                                else
                                {
                                    //修正呼び出し時の登録パターン
                                    this._salesSlipInputAcs.SalesSlip.CarMngDivCd = 3; // しない
                                }
                            }
                            break;
                        case 2: // 登録(自動)
                            if (this._salesSlipInputAcs.SalesSlip.InputMode == 0
                                    && (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum))
                            {
                                this._salesSlipInputAcs.SalesSlip.CarMngDivCd = 1; // しない
                            }
                            else
                            {
                                //修正呼び出し時の登録パターン
                                this._salesSlipInputAcs.SalesSlip.CarMngDivCd = 3; // する
                            }
                            break;

                        // --- UPD 2009/09/08② --------------<<<
                        case 3: // 登録無
                            this._salesSlipInputAcs.SalesSlip.CarMngDivCd = 0; // しない
                            break;
                    }
                }
                else
                {
                    this._salesSlipInputAcs.SalesSlip.CarMngDivCd = 0; // しない
                }
                #endregion
            }
            else
            {
                this._salesSlipInputAcs.SalesSlip.CarMngDivCd = 0; // しない
            }
            #endregion

            #region 指示書番号
            //>>>2011/05/25
            if (this._salesSlipInputAcs.PMInstNoHdlDivCd == 0) // 伝票番号の場合のみゼロ詰め補正
            {
                if (this._salesSlipInputAcs.CheckNum(this._salesSlipInputAcs.SalesSlip.PartySaleSlipNum) &&
                    this._salesSlipInputAcs.CheckHalfWidth(this._salesSlipInputAcs.SalesSlip.PartySaleSlipNum) &&
                    this._salesSlipInputAcs.CheckLength(this._salesSlipInputAcs.SalesSlip.PartySaleSlipNum, 9))
                {
                    if (TStrConv.StrToIntDef(this._salesSlipInputAcs.SalesSlip.PartySaleSlipNum, 0) != 0)
                    {
                        this._salesSlipInputAcs.SalesSlip.PartySaleSlipNum = string.Format("{0:000000000}", TStrConv.StrToIntDef(this._salesSlipInputAcs.SalesSlip.PartySaleSlipNum, 0));
                    }
                }
            }
            //<<<2011/05/25
            #endregion

        }

        /// <summary>
        /// 保存データチェック処理
        /// </summary>
        /// <returns></returns>
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        // --- UPD m.suzuki 2010/06/12 ---------->>>>>
        //private bool CheckSaveData(ArrayList salesDataList, ArrayList acptDataList)
        private bool CheckSaveData(ArrayList salesDataList, ArrayList acptDataList, ref bool isMakeQR)
        // --- UPD m.suzuki 2010/06/12 ----------<<<<<
        {
            string mainMessage;
            List<string> itemNameList = new List<string>();
            List<string> itemList = new List<string>();
            List<int> errorRowNoList;
            bool check;

            SalesSlip salesSlip = new SalesSlip();
            List<SalesDetail> salesDetailList = new List<SalesDetail>();
            SalesInputDataSet.SalesDetailDataTable salesDetailDataTable = new SalesInputDataSet.SalesDetailDataTable();
            SalesInputDataSet.SalesDetailAcceptAnOrderDataTable salesDetailAcceptAnOrderDataTable = new SalesInputDataSet.SalesDetailAcceptAnOrderDataTable();

            if ((salesDataList.Count == 0) && (acptDataList.Count == 0))
            {
                DialogResult dialogResult = TMsgDisp.Show(
                    //_form, // DEL 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                    null,    // ADD 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "todo",
                    "有効な明細が入力されていません。",
                    0,
                    MessageBoxButtons.OK,
                    MessageBoxDefaultButton.Button1);
                return false;
            }

            #region 売上データ
            foreach (ArrayList list in salesDataList)
            {
                foreach (object obj in list)
                {
                    if (obj is SalesSlip)
                    {
                        salesSlip = (SalesSlip)obj;
                    }
                    else if (obj is List<SalesDetail>)
                    {
                        salesDetailList = (List<SalesDetail>)obj;
                    }
                    else if (obj is SalesInputDataSet.SalesDetailDataTable)
                    {
                        salesDetailDataTable = (SalesInputDataSet.SalesDetailDataTable)obj;
                    }
                }

                #region エラーチェック
                //---------------------------------------------------------------
                // エラーチェック
                //---------------------------------------------------------------
                ////TODO yangmj 
                //salesSlip.CustomerCode = 82003;

                check = this._salesSlipInputAcs.CheckSaveData(out mainMessage, out itemNameList, out itemList, out errorRowNoList, salesSlip, salesDetailDataTable);
                // --- ADD 2010/11/25 ---------->>>>>
                string errorMessage = this._salesSlipInputAcs.GetErrorMessage();
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    TMsgDisp.Show(
                           //_form, // DEL 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                           null,    // ADD 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                           emErrorLevel.ERR_LEVEL_EXCLAMATION,
                           "todo",
                           errorMessage,
                           0,
                           MessageBoxButtons.OK);
                    return false;
                }
                // --- ADD 2010/11/25 ----------<<<<<
                if (!check)
                {
                    StringBuilder message = new StringBuilder();
                    message.Append(mainMessage);

                    if (!check)
                    {
                        foreach (string s in itemNameList)
                        {
                            message.Append(s + "\r\n");
                        }
                    }
                    // ----- ADD K2011/12/09 --------------------------->>>>>
                    if (this._enterpriseCode != login_EnterpriseCode)
                    {
                        TMsgDisp.Show(
                            //_form, // DEL 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                            null,    // ADD 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "todo",
                            message.ToString(),
                            0,
                            MessageBoxButtons.OK);
                    }
                    else
                    {
                        // ----- ADD K2011/12/09 ---------------------------<<<<<
                        TMsgDisp.Show(
                            //_form, // DEL K2011/09/20
                            //new Form(), // ADD K2011/09/20 
                           emErrorLevel.ERR_LEVEL_EXCLAMATION,
                           "todo",
                           message.ToString(),
                           0,
                           MessageBoxButtons.OK);
                    }// ADD K2011/12/09

                    string itemName = string.Empty;
                    if (itemList.Count > 0)
                    {
                        itemName = itemList[0].ToString();

                        // 指定フォーカス設定処理
                        //this.SetControlFocus(itemName, (errorRowNoList.Count > 0) ? errorRowNoList[0] : -1, this._salesSlipInputAcs.SalesDetailDataTableSave);
                    }

                    return false;
                }

                //--- ADD 田村顕成 2022/10/05 インボイス残対応 ----->>>>>
                // 返品・赤伝登録時の備考欄データチェック
                GetReturnRedSettings();
                if (this._returnRedBlankCheckMode == ReturnRedBlankCheck_ON)
                {
                    // 伝票が返品の場合かつ備考欄が空白の場合は警告する
                    if(false == CheckSlipNoteForReturnRed(salesSlip))
                    {
                        Form form = new Form();
                        form.TopMost = true;
                        DialogResult dialogResult = TMsgDisp.Show(
                            form,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            string.Empty,
                            "備考欄に取引日付と元黒伝票番号がありません。\n\nこのまま登録してもよろしいですか？",
                            0,
                            MessageBoxButtons.YesNo,
                            MessageBoxDefaultButton.Button2);
                        form.TopMost = false;
                        if (dialogResult == DialogResult.No)
                        {
                            return false;
                        }
                    }
                }
                //--- ADD 田村顕成 2022/10/05 インボイス残対応 -----<<<<<
                #endregion
            }
            // --- ADD m.suzuki 2010/06/12 ---------->>>>>
            //if ( this.checkBox_MakeQR.Visible && this.checkBox_MakeQR.Checked && salesDataList.Count == 0 )
            if (isMakeQR && salesDataList.Count == 0)
            {
                TMsgDisp.Show(
                    //this,
                        null,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //this.Name,
                        string.Empty,
                        "出荷数が入力された明細が無い為、ＱＲコードの作成はできません。",
                        0,
                        MessageBoxButtons.OK);
                //this.checkBox_MakeQR.Checked = false;
                isMakeQR = false;

                return false;
            }
            // --- ADD m.suzuki 2010/06/12 ----------<<<<<
            #endregion

            #region 受注データ
            foreach (ArrayList list in acptDataList)
            {
                foreach (object obj in list)
                {
                    if (obj is SalesSlip)
                    {
                        salesSlip = (SalesSlip)obj;
                    }
                    else if (obj is List<SalesDetail>)
                    {
                        salesDetailList = (List<SalesDetail>)obj;
                    }
                    else if (obj is SalesInputDataSet.SalesDetailAcceptAnOrderDataTable)
                    {
                        salesDetailAcceptAnOrderDataTable = (SalesInputDataSet.SalesDetailAcceptAnOrderDataTable)obj;
                    }
                }

                #region エラーチェック
                //---------------------------------------------------------------
                // エラーチェック
                //---------------------------------------------------------------
                check = this._salesSlipInputAcs.CheckSaveDataForAcptAnOdr(out mainMessage, out itemNameList, out itemList, out errorRowNoList, salesSlip, salesDetailAcceptAnOrderDataTable);
                // --- ADD 2010/11/25 ---------->>>>>
                string errorMessage = this._salesSlipInputAcs.GetErrorMessage();
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    TMsgDisp.Show(
                           //_form, // DEL 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                           null,    // ADD 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                           emErrorLevel.ERR_LEVEL_EXCLAMATION,
                           "todo",
                           errorMessage,
                           0,
                           MessageBoxButtons.OK);
                    return false;
                }
                // --- ADD 2010/11/25 ----------<<<<<
                if (!check)
                {
                    StringBuilder message = new StringBuilder();
                    message.Append(mainMessage);

                    if (!check)
                    {
                        foreach (string s in itemNameList)
                        {
                            message.Append(s + "\r\n");
                        }
                    }

                    TMsgDisp.Show(
                        //_form, // DEL 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                        null,    // ADD 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        message.ToString(),
                        0,
                        MessageBoxButtons.OK);

                    string itemName = string.Empty;
                    if (itemList.Count > 0)
                    {
                        itemName = itemList[0].ToString();

                        // 指定フォーカス設定処理
                        //this.SetControlFocus(itemName, (errorRowNoList.Count > 0) ? errorRowNoList[0] : -1, this._salesSlipInputAcs.AcptDetailDataTableSave);
                    }

                    return false;
                }
                #endregion
            }
            #endregion

            #region 画面入力値チェック
            //// ※Copy&Pasteで不正文字の入力が可能な為。
            //if (!this.uiSetControl1.CheckMatchingSet(this.tEdit_PartySaleSlipNum))
            //{
            //    DialogResult dialogResult = TMsgDisp.Show(
            //        this,
            //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
            //        this.Name,
            //        "得意先注番に不正な文字が入力されています。",
            //        0,
            //        MessageBoxButtons.OK,
            //        MessageBoxDefaultButton.Button1);

            //    // 指定フォーカス設定処理
            //    this.SetControlFocus(this.tEdit_PartySaleSlipNum.Name, -1, this._salesSlipInputAcs.SalesDetailDataTableSave);

            //    return false;
            //}
            //-----ADD 2011/08/30----->>>>>
            // 備考文字長のチェック処理
            if (salesSlip.SlipNote.Length > 30)
            {
                TMsgDisp.Show(
                    //_form, // DEL 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                    null,    // ADD 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "todo",
                    "備考の入力可能文字数が規定値(30文字)を超えています。",
                    0,
                    MessageBoxButtons.OK);
                return false;
            }
            // 備考1文字長のチェック処理
            if (salesSlip.SlipNote2.Length > 30)
            {
                TMsgDisp.Show(
                    //_form, // DEL 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                    null,    // ADD 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "todo",
                    "備考２の入力可能文字数が規定値(30文字)を超えています。",
                    0,
                    MessageBoxButtons.OK);
                return false;
            }
            // 備考2文字長のチェック処理
            if (salesSlip.SlipNote3.Length > 30)
            {
                TMsgDisp.Show(
                    //_form, // DEL 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                    null,    // ADD 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "todo",
                    "備考３の入力可能文字数が規定値(30文字)を超えています。",
                    0,
                    MessageBoxButtons.OK);
                return false;
            }
            //-----ADD 2011/08/30-----<<<<<
            #endregion
            // ----- ADD K2011/09/01 --------------------------->>>>>
            // ----- ADD K2011/12/09 --------------------------->>>>>
            // --- UPD T.Miyamoto 2012/11/13 ---------->>>>>
            //if (this._enterpriseCode == login_EnterpriseCode)
            if ((this._salesSlipInputInitDataAcs.Opt_DateCtrl == (int)SalesSlipInputInitDataAcs.Option.ON) ||
                (this._enterpriseCode == login_EnterpriseCode))
            // --- UPD T.Miyamoto 2012/11/13 ----------<<<<<
            {
                // ----- ADD K2011/12/09 ---------------------------<<<<<
                #region 売上日付チェック
                if (salesSlip.AcptAnOdrStatus == 30)
                {
                    // ----- DEL K2011/12/09 --------------------------->>>>>
                    //this._iGetServerTime = (IGetServerTime)MediationGetServerTimeDB.GetServerTimeDB();
                    //DateTime serverTime = _iGetServerTime.GetServerNowTime();
                    // ----- DEL K2011/12/09 ---------------------------<<<<<
                    DateTime serverTime = this._salesSlipInputAcs.GetServerNowTime;// ADD K2011/12/09
                    if (_employeeAcs == null)
                    {
                        _employeeAcs = new EmployeeAcs();
                    }
                    Employee employee = new Employee();
                    int status = _employeeAcs.Read(out employee, LoginInfoAcquisition.EnterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);
                    if (employee.AuthorityLevel1 != 99 || employee.AuthorityLevel2 != 99)
                    {
                        if (TDateTime.DateTimeToLongDate(salesSlip.SalesDate) < TDateTime.DateTimeToLongDate(serverTime))
                        {
                            TMsgDisp.Show(
                              //new Form(), // DEL 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                              null,         // ADD 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                              emErrorLevel.ERR_LEVEL_EXCLAMATION,
                              "",
                              "当日以前の伝票日付は入力できません。",
                              -1,
                              MessageBoxButtons.OK);

                            return false;
                        }
                    }
                }
                #endregion
            }// ADD K2011/12/09 
            // ----- ADD K2011/09/01 ---------------------------<<<<<
            // ----- ADD K2011/08/12 --------------------------->>>>>
            // ----- ADD K2011/12/09 --------------------------->>>>>
            if (this._enterpriseCode == login_EnterpriseCode)
            {
                // ----- ADD K2011/12/09 ---------------------------<<<<<
                #region 備考２チェック
                int countNum = 0;
                string comment2 = salesSlip.SlipNote2;
                string PaperId = this._salesSlipInputAcs.CallGetSlipPrtSetPaperId(salesSlip);
                if (PaperId != null && (PaperId == "A995" || PaperId == "A998") && (salesSlip.AcptAnOdrStatus == 30))
                {
                    if (string.IsNullOrEmpty(comment2))
                    {
                        TMsgDisp.Show(
                        //_form, // DEL 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                        null,    // ADD 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        "ドットを２つ以上入力して下さい。",
                        0,
                        MessageBoxButtons.OK);
                        return false;
                    }
                    else
                    {
                        foreach (char car in comment2)
                        {
                            if (car == '.')
                            {
                                ++countNum;
                            }
                        }
                        if (countNum < 2)
                        {
                            TMsgDisp.Show(
                            //_form, // DEL 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                            null,    // ADD 2014/12/01 T.Miyamoto 仕掛一覧 №2608 エラー前面表示
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "todo",
                            "ドットを２つ以上入力して下さい。",
                            0,
                            MessageBoxButtons.OK);
                            return false;
                        }
                    }
                }
                #endregion
            }// ADD K2011/12/09
            // ----- ADD K2011/08/12 ---------------------------<<<<<
            return true;
        }

        //--- ADD 田村顕成 2022/10/05 インボイス残対応 ----->>>>>
        /// <summary>
        /// 返品・赤伝登録時の備考欄空白チェック処理
        /// </summary>
        /// <param name="salesSlip">売上データ</param>
        /// <returns>true:備考欄が空白でない false:備考欄が空白</returns>
        private bool CheckSlipNoteForReturnRed(SalesSlip salesSlip)
        {
            //伝票区分が「返品」または赤伝区分が「赤伝」の場合
            if ((salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ||
               (salesSlip.DebitNoteDiv == 1))
            {
                // 売上伝票入力のユーザ設定で返品･赤伝設定の伝票番号出力指定されていて、該当する備考欄が空白かどうかチェックする
                if ((_returnRedNote1Mode == ReturnRedNote_SLIPNUM && salesSlip.SlipNote == string.Empty) ||
                   (_returnRedNote2Mode == ReturnRedNote_SLIPNUM && salesSlip.SlipNote2 == string.Empty) ||
                   (_returnRedNote3Mode == ReturnRedNote_SLIPNUM && salesSlip.SlipNote3 == string.Empty))
                {
                    // 空欄の場合
                    return false;
                }
            }
            // 空欄でない場合、返品・赤伝でない場合
            return true;
        }
        //--- ADD 田村顕成 2022/10/05 インボイス残対応 -----<<<<<

        //>>>2010/05/30
        /// <summary>
        /// 保存データチェック処理(SCM)
        /// </summary>
        /// <returns></returns>
        private bool CheckSaveDataScm(ArrayList salesDataList, ArrayList acptDataList)
        {
            string mainMessage;
            List<string> itemNameList = new List<string>();
            List<string> itemList = new List<string>();
            List<int> errorRowNoList;
            bool check;

            SalesSlip salesSlip = new SalesSlip();
            List<SalesDetail> salesDetailList = new List<SalesDetail>();
            SalesInputDataSet.SalesDetailDataTable salesDetailDataTable = new SalesInputDataSet.SalesDetailDataTable();
            SalesInputDataSet.SalesDetailAcceptAnOrderDataTable salesDetailAcceptAnOrderDataTable = new SalesInputDataSet.SalesDetailAcceptAnOrderDataTable();

            #region 売上データ
            foreach (ArrayList list in salesDataList)
            {
                foreach (object obj in list)
                {
                    if (obj is SalesSlip)
                    {
                        salesSlip = (SalesSlip)obj;
                    }
                    else if (obj is List<SalesDetail>)
                    {
                        salesDetailList = (List<SalesDetail>)obj;
                    }
                    else if (obj is SalesInputDataSet.SalesDetailDataTable)
                    {
                        salesDetailDataTable = (SalesInputDataSet.SalesDetailDataTable)obj;
                    }
                }

                #region エラーチェック
                //---------------------------------------------------------------
                // エラーチェック
                //---------------------------------------------------------------
                check = this._salesSlipInputAcs.CheckSaveDataScm(out mainMessage, out itemNameList, out itemList, out errorRowNoList, salesSlip, salesDetailList, salesDetailDataTable);
                if (!check)
                {
                    StringBuilder message = new StringBuilder();
                    message.Append(mainMessage);

                    if (!check)
                    {
                        foreach (string s in itemNameList)
                        {
                            message.Append(s + "\r\n");
                        }
                    }

                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        message.ToString(),
                        0,
                        MessageBoxButtons.OK);

                    string itemName = string.Empty;
                    if (itemList.Count > 0)
                    {
                        itemName = itemList[0].ToString();

                        //// 指定フォーカス設定処理
                        //this.SetControlFocus(itemName, (errorRowNoList.Count > 0) ? errorRowNoList[0] : -1, this._salesSlipInputAcs.SalesDetailDataTableSave);
                    }

                    return false;
                }
                #endregion
            }
            #endregion

            return true;
        }
        //<<<2010/05/30

        /// <summary>
        /// 与信額チェック
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <returns>true:処理中止 false:処理続行</returns>
        /// <br>Update Note: 2016/09/12 王漢玉</br>
        /// <br>管理番号   : 11270082-00 Redmine#48832 神姫産業　与信限度額警告メッセージの初期フォーカス変更</br>
        public bool CheckCredit(SalesSlip salesSlip)
        {
            bool ret = false;
            long creditMoney;
            long totalMoney;
            DialogResult dialogResult;

            int st = this._salesSlipInputAcs.CheckCredit(out creditMoney, out totalMoney, salesSlip);

            switch (st)
            {
                case 0:
                    break;
                case 1:
                    dialogResult = TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        "警告与信額を超えています。   " + "\r\n" +
                        "続行してよろしいですか？" + "\r\n" + "\r\n" +
                        "警告与信額：" + string.Format("{0:###,##0}", creditMoney) + "\r\n" +
                        "比較対象額：" + string.Format("{0:###,##0}", totalMoney),
                        0,
                        MessageBoxButtons.YesNo,
                        // MOD BY 王漢玉 2016/09/12 FOR Redmine#48832 神姫産業　与信限度額警告メッセージの初期フォーカス変更 ---->>>>>
                        // MessageBoxDefaultButton.Button1); 
                        MessageBoxDefaultButton.Button2);    // 初期フォーカスが「いいえ」ボタンにセットする
                        // MOD BY 王漢玉 2016/09/12 FOR Redmine#48832 神姫産業　与信限度額警告メッセージの初期フォーカス変更 ----<<<<<
                    if (dialogResult == DialogResult.No)
                    {
                        ret = true;
                    }
                    break;
                case 2:
                    dialogResult = TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        "与信限度額を超えています。   " + "\r\n" +
                        "処理を中止します。" + "\r\n" + "\r\n" +
                        "与信限度額：" + string.Format("{0:###,##0}", creditMoney) + "\r\n" +
                        "比較対象額：" + string.Format("{0:###,##0}", totalMoney),
                        0,
                        MessageBoxButtons.OK,
                        MessageBoxDefaultButton.Button1);
                    ret = true;
                    break;
            }

            return ret;
        }

        /// <summary>
        /// 再読込処理
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="acptAnOdrStatus">受注ステータス</param>
        /// <param name="salesSlipNum">売上伝票番号</param>
        private bool ReLoad(string enterpriseCode, int acptAnOdrStatus, string salesSlipNum)
        {
            bool isSuccess = false;
            SalesSlip baseSalesSlip;

            // データリード処理
            //this.Cursor = Cursors.WaitCursor;
            int status = this._salesSlipInputAcs.ReadDBData(enterpriseCode, acptAnOdrStatus, salesSlipNum, out baseSalesSlip);
            //this.Cursor = Cursors.Default;
            this._status = status;

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip.Clone();

                // 売上データ入力モード設定処理
                //this.SettingStockSlipInputMode(ref salesSlip);

                // 表示用受注ステータス設定処理
                SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

                //// 表示用伝票区分設定処理
                SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

                // 売上データクラス→画面格納処理
                this.SetDisplay(salesSlip);

                // 売上データキャッシュ処理
                this._salesSlipInputAcs.Cache(salesSlip);

                // 計上時は空白行を削除する(出荷計上 受注計上 見積計上)
                if ((salesSlip.InputMode == 3) ||
                    (salesSlip.InputMode == 4) ||
                    (salesSlip.InputMode == 5))
                {
                    List<int> deleteStockRowNoList = this._salesSlipInputAcs.GetEmptySalesRowNoList();

                    if (deleteStockRowNoList.Count > 0)
                    {
                        // 売上明細行削除処理
                        this._salesSlipInputAcs.DeleteSalesDetailRow(deleteStockRowNoList, true);
                    }
                }

                // 明細グリッド設定処理
                //this._salesSlipDetailInput.SettingGrid();

                SalesSlipDetailInput_DetailChanged(_owner, 1);

                isSuccess = true;
            }
            else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
            {
                TMsgDisp.Show(
                    _form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "該当するデータが存在しません。",
                    -1,
                    MessageBoxButtons.OK);
            }
            else
            {
                TMsgDisp.Show(
                    _form,
                    emErrorLevel.ERR_LEVEL_STOPDISP,
                    "",
                    "売上・出荷データの取得に失敗しました。",
                    status,
                    MessageBoxButtons.OK);
            }

            return isSuccess;
        }

        /// <summary>
        /// 売上数量０行削除処理
        /// </summary>
        /// <param name="changeRowCount">true:行数を変更する false:行数を変更しない</param>
        internal void DeleteShipmentCountZeroRow(bool changeRowCount)
        {
            List<int> deleteStockRowNoList = this._salesSlipInputAcs.GetShipmentCntZeroSalesRowNoList();

            if (deleteStockRowNoList.Count > 0)
            {
                // 売上明細行削除処理
                this._salesSlipInputAcs.DeleteSalesDetailRow(deleteStockRowNoList, changeRowCount);
            }
        }

        # endregion

        #region ●出荷照会
        /// <summary>
        /// 出荷照会ボタンクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        public void GetSalesHisGuide(int rowCount, String CustomerCode)
        {
            _saveStatus = 0;
            if (!string.IsNullOrEmpty(CustomerCode.Trim()))
            {
                this._salesSlip.CustomerCode = Int32.Parse(CustomerCode);
            }
            else
            {
                this._salesSlip.CustomerCode = 0;
            }
            // 得意先入力チェック処理
            bool customerCodeCheck = this.CheckCustomerCodeInput();
            if (!customerCodeCheck) return;

            // ActiveRowインデックス取得処理
            //int rowIndex = this.GetActiveRowIndex();
            //if (rowIndex == -1) return;

            List<SalHisRefResultParamWork> salHisRefResultParamWorkList;
            DCHNB04101UA salesHisGuide = new DCHNB04101UA();
            salesHisGuide.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment;
            salesHisGuide.AcptAnOdrStatusFix = true;
            salesHisGuide.AutoSearch = true;
            salesHisGuide.MaxSelectCount = this._salesInputConstructionAcs.DataInputCountValue - rowCount;
            //salesHisGuide.SectionCode = this._salesSlip.ResultsAddUpSecCd;
            //salesHisGuide.SectionName = this._salesSlip.ResultsAddUpSecNm;
            //salesHisGuide.CustomerCodeFix = true;
            //if (!string.IsNullOrEmpty(CustomerCode.Trim()))
            //{
            //    salesHisGuide.CustomerCode = this._salesSlip.CustomerCode;
            //}
            ////salesHisGuide.CustomerCode = this._salesSlipInputAcs.SalesSlip.CustomerCode;
            //salesHisGuide.CustomerName = this._salesSlip.CustomerSnm;
            //salesHisGuide.SalesEmployeeCd = this._salesSlip.SalesEmployeeCd;
            //salesHisGuide.SalesEmployeeName = this._salesSlip.SalesEmployeeNm;
            //salesHisGuide.SalesInputCode = this._salesSlip.SalesInputCode;
            //salesHisGuide.SalesInputName = this._salesSlip.SalesInputName;
            //salesHisGuide.FrontEmployeeCd = this._salesSlip.FrontEmployeeCd;
            //salesHisGuide.FrontEmployeeName = this._salesSlip.FrontEmployeeNm;

            salesHisGuide.SectionCode = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
            salesHisGuide.SectionName = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
            salesHisGuide.CustomerCodeFix = true;
            if (!string.IsNullOrEmpty(CustomerCode.Trim()))
            {
                salesHisGuide.CustomerCode = this._salesSlip.CustomerCode;
            }
            //salesHisGuide.CustomerCode = this._salesSlipInputAcs.SalesSlip.CustomerCode;
            salesHisGuide.CustomerName = this._salesSlipInputAcs.SalesSlip.CustomerSnm;
            salesHisGuide.SalesEmployeeCd = this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd;
            salesHisGuide.SalesEmployeeName = this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm;
            salesHisGuide.SalesInputCode = this._salesSlipInputAcs.SalesSlip.SalesInputCode;
            salesHisGuide.SalesInputName = this._salesSlipInputAcs.SalesSlip.SalesInputName;
            salesHisGuide.FrontEmployeeCd = this._salesSlipInputAcs.SalesSlip.FrontEmployeeCd;
            salesHisGuide.FrontEmployeeName = this._salesSlipInputAcs.SalesSlip.FrontEmployeeNm;

            Form _form = new Form();
            //DialogResult dialogResult = salesHisGuide.ShowDialog(_form, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment, this._salesSlip.CustomerCode);// DEL イン晶晶 2015/05/12 for Redmine#45799
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dialogResult;
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dialogResult = salesHisGuide.ShowDialog(wrp, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment, this._salesSlip.CustomerCode);
            //}
            //else
            //{
            //    dialogResult = salesHisGuide.ShowDialog(this._salesSlipInputAcs.Owner, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment, this._salesSlip.CustomerCode);
            //}
            ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            salesHisGuide.StartPosition = FormStartPosition.CenterParent;
            DialogResult dialogResult = salesHisGuide.ShowDialog(this._salesSlipInputAcs.Owner, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment, this._salesSlip.CustomerCode);
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

            if (dialogResult == DialogResult.OK)
            {
                _saveStatus = 1;
                #region 明細へのデータ展開
                salHisRefResultParamWorkList = salesHisGuide.StcHisRefDataWork;
                int lastInputSalesRow = this._salesSlipInputAcs.GetLastInputSalesRowNo();
                int st = this._salesSlipInputAcs.SalesDetailRowSettingFromSalHisRefResultParamWorkListForAddUp(lastInputSalesRow + 1, salHisRefResultParamWorkList, SalesSlipInputAcs.WayToDetailExpand.AddUp);

                if (st == -1)
                {
                    // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                    if (!this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag)
                    {
                    // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                        TMsgDisp.Show(
                            _form,
                            emErrorLevel.ERR_LEVEL_INFO,
                            "todo",
                            "「計上」済み明細が選択されましたので、" + Environment.NewLine +
                            "明細への展開を行いません。",
                            -1,
                            MessageBoxButtons.OK);
                    // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                    }
                    else
                    {
                        this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag = false;
                    }
                    // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                }
                else
                {
                    // 売上金額計算処理
                    this.CalculationSalesPrice();

                    // データ変更フラグプロパティをTrueにする
                    this._salesSlipInputAcs.IsDataChanged = true;

                    // 売上金額変更後発生イベントコール処理
                    //this.SalesPriceChangedEventCall();

                    // フッタ部明細情報更新イベントコール処理
                    //this.SettingFooterEventCall(this.GetActiveRowSalesRowNo());
                    SalesSlipDetailInput_DetailChanged(_owner, 1);

                    // 車両情報設定イベントコール処理
                    //this.SettingCarInfoEventCall(this.GetActiveRowSalesRowNo());

                    // 明細グリッド設定処理
                    //this.SettingGrid();

                    // 現在庫数調整
                    this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                }
                #endregion
            }
        }

        # endregion

        #region ●受注照会(明細選択)
        /// <summary>
        /// 受注照会ボタンクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        public void AcceptAnOrderReferenceSearch(int rowCount, String CustomerCode)
        {
            _saveStatus = 0;
            if (!string.IsNullOrEmpty(CustomerCode.Trim()))
            {
                this._salesSlip.CustomerCode = Int32.Parse(CustomerCode);
            }
            else
            {
                this._salesSlip.CustomerCode = 0;
            }
            //this._salesDetailDataTable.AcceptChanges();

            // 得意先入力チェック処理
            bool customerCodeCheck = this.CheckCustomerCodeInput();
            if (!customerCodeCheck) return;

            //// ActiveRowインデックス取得処理
            //int rowIndex = this.GetActiveRowIndex();
            //if (rowIndex == -1) return;

            List<AcptAnOdrRemainRefData> acptAnOdrRemainRefList;
            DCJUT04110UA acceptAnOrderGuide = new DCJUT04110UA();
            acceptAnOrderGuide.Standard_UGroupBox_Expand = true;
            acceptAnOrderGuide.AutoSearch = true;
            acceptAnOrderGuide.MaxSelectCount = this._salesInputConstructionAcs.DataInputCountValue - rowCount;

            acceptAnOrderGuide.SearchCndtn.SectionCode = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
            acceptAnOrderGuide.SearchCndtn.SectionName = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
            if (!string.IsNullOrEmpty(CustomerCode.Trim()))
            {
                acceptAnOrderGuide.SearchCndtn.CustomerCode = this._salesSlip.CustomerCode;
            }
            //acceptAnOrderGuide.SearchCndtn.CustomerCode = this._salesSlipInputAcs.SalesSlip.CustomerCode;
            acceptAnOrderGuide.SearchCndtn.CustomerName = this._salesSlipInputAcs.SalesSlip.CustomerSnm;
            acceptAnOrderGuide.SearchCndtn.ArrivalStateDiv = DCJUT04110UA.ArrivalState.NonArrival;
            acceptAnOrderGuide.CustomerCodeFix = true;

            //DialogResult dialogResult = acceptAnOrderGuide.ShowDialog(_form); // DEL イン晶晶 2015/05/12 for Redmine#45799 
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            //// ウィンドの表示位置をセットする
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dialogResult;
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dialogResult = acceptAnOrderGuide.ShowDialog(wrp);
            //}
            //else
            //{
            //    dialogResult = acceptAnOrderGuide.ShowDialog(this._salesSlipInputAcs.Owner);
            //}
            ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            acceptAnOrderGuide.StartPosition = FormStartPosition.CenterParent;
            DialogResult dialogResult = acceptAnOrderGuide.ShowDialog(this._salesSlipInputAcs.Owner);
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

            if (dialogResult == DialogResult.OK)
            {
                _saveStatus = 1;
                #region 明細へのデータ展開
                acptAnOdrRemainRefList = acceptAnOrderGuide.GetSelectDataList();

                int lastInputSalesRow = this._salesSlipInputAcs.GetLastInputSalesRowNo();
                int st = this._salesSlipInputAcs.SalesDetailRowSettingFromAcptAnOdrRemainRefList(lastInputSalesRow + 1, acptAnOdrRemainRefList, SalesSlipInputAcs.WayToDetailExpand.AddUp);

                if (st == -1)
                {
                    TMsgDisp.Show(
                        _form,
                        emErrorLevel.ERR_LEVEL_INFO,
                        "TODO",
                        "「計上」または「発注選択」済み明細がが選択されましたので、" + Environment.NewLine +
                        "明細への展開を行いません。",
                        -1,
                        MessageBoxButtons.OK);
                }
                else
                {
                    // 売上金額計算処理
                    this.CalculationSalesPrice();

                    // データ変更フラグプロパティをTrueにする
                    this._salesSlipInputAcs.IsDataChanged = true;

                    // 売上金額変更後発生イベントコール処理
                    //this.SalesPriceChangedEventCall();

                    // フッタ部明細情報更新イベントコール処理
                    //this.SettingFooterEventCall(this.GetActiveRowSalesRowNo());
                    SalesSlipDetailInput_DetailChanged(_owner, 1);

                    // 車両情報設定イベントコール処理
                    //this.SettingCarInfoEventCall(this.GetActiveRowSalesRowNo());

                    // 明細グリッド設定処理
                    //this.SettingGrid();

                    // 現在庫数調整
                    this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                    #region フォーカス位置
                    //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                    //this.uGrid_Details.ActiveCell = this.uGrid_Details.ActiveRow.Cells[this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName];
                    //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                    #endregion
                }
                #endregion

            }
        }

        #endregion

        #region ●受注計上処理関係
        /// <summary>
        /// 受注計上処理
        /// </summary>
        /// <param name="isConfirm">確認ダイアログ表示有無(true:表示する false:表示しない)</param>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2021/04/12 陳艶丹</br>
        /// <br>管理番号   : 11770021-00</br>
        /// <br>           : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
        public void AcceptAnOrderAddup(bool IsDataChanged, out int IsResult)
        {
            IsResult = 0;

            //bool isConfirm = true;
            //bool canAcceptAnOrderAddUp = this.ShowSaveCheckDialog(isConfirm, IsDataChanged);

            //if (!canAcceptAnOrderAddUp)
            //{
            //    IsResult = 0;
            //    return;
            //}

            //this.tEdit_SalesEmployeeCd.Focus();
            //this.ActiveControl = this.tEdit_SalesEmployeeCd;

            string salesSlipNum = string.Empty;
            if (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder) // 受注
            {
                salesSlipNum = this._salesSlipInputAcs.SalesSlip.SalesSlipNum;
            }
            MAHNB01010UD salesSlipNumInputDialog = new MAHNB01010UD((int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder, salesSlipNum, MAHNB01010UD.ct_AcptAnOdrStatusEnable_False, MAHNB01010UD.ct_MODE_Normal);
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            //Form _form = new Form();
            //_form.Height = 762;
            //_form.Width = 1018;
            //_form.StartPosition = FormStartPosition.WindowsDefaultLocation;
            ////DialogResult dialogResult = salesSlipNumInputDialog.ShowDialog(_form);// DEL イン晶晶 2015/05/12 for Redmine#45799
            ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dialogResult;
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dialogResult = salesSlipNumInputDialog.ShowDialog(wrp);
            //}
            //else
            //{
            //    dialogResult = salesSlipNumInputDialog.ShowDialog(this._salesSlipInputAcs.Owner);
            //}
            ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            salesSlipNumInputDialog.StartPosition = FormStartPosition.CenterParent;
            DialogResult dialogResult = salesSlipNumInputDialog.ShowDialog(this._salesSlipInputAcs.Owner);
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

            if (dialogResult == DialogResult.OK)
            {
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
                //得意先情報ガイドを閉じる
                if (showEnable() || showCustomerGuid())
                {
                    noteInfoClose();
                }
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
                _salesSlipInputAcs.AddUpOperationFlag = true; // ADD 陳健 2014/01/23 for Redmine#41550のNo.1＆No.2
                IsResult = 1;
                SalesSlip salesSlip = salesSlipNumInputDialog.DfSalesSlip;
                List<SalesDetail> salesDetailList = salesSlipNumInputDialog.DfSalesDetailList;
                List<SalesDetail> addUpSrcDetailList = salesSlipNumInputDialog.DfAddUpSrcDetailList;
                SearchDepsitMain depsitMain = salesSlipNumInputDialog.DfDepsitMain;
                SearchDepositAlw depositAlw = salesSlipNumInputDialog.DfDepositAlw;
                List<StockWork> stockWorkList = salesSlipNumInputDialog.DfStockWorkList;
                List<AcceptOdrCar> acceptOdrCarList = salesSlipNumInputDialog.DfAcceptOdrCarList;
                List<StockSlipWork> stockSlipWorkList = salesSlipNumInputDialog.DfStockSlipWorkList;
                List<StockDetailWork> stockDetailWorkList = salesSlipNumInputDialog.DfStockDetailWorkList;
                List<AddUpOrgStockDetailWork> addUpOrgStockDetailList = salesSlipNumInputDialog.DfaddUpOrgStockDetailList;
                List<UOEOrderDtlWork> uoeOrderDtlWorkList = salesSlipNumInputDialog.DfuoeOrderDtlWorkList;
                //>>>2010/05/30
                UserSCMOrderHeaderRecord scmHeader = salesSlipNumInputDialog.scmHeader;
                UserSCMOrderCarRecord scmCar = salesSlipNumInputDialog.scmCar;
                // UPD 2014/09/16 SCM仕掛一覧№10677対応 ------------------------------------->>>>>
                //List<UserSCMOrderAnswerRecord> scmAnswerList = salesSlipNumInputDialog.scmAnswerList;
                List<UserSCMOrderAnswerRecord> scmAnswerList = null;
                // ADD 2014/09/18 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応 --------------------------------->>>>>
                if (salesSlipNumInputDialog.scmAnswerList != null && salesSlipNumInputDialog.scmAnswerList.Count != 0)
                {
                    foreach (UserSCMOrderAnswerRecord rec in salesSlipNumInputDialog.scmAnswerList)
                    {
                        // SCM連携発注時のSCM受注明細回答データのみ対象とする
                        if (rec.InquiryNumber != 0)
                        {
                            if (scmAnswerList == null) scmAnswerList = new List<UserSCMOrderAnswerRecord>();
                            scmAnswerList.Add(rec);
                        }
                    }
                }
                // ADD 2014/09/18 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応 ---------------------------------<<<<<
                // ADD 2014/09/18 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応 --------------------------------->>>>>
                if (scmAnswerList != null && scmAnswerList.Count != 0)
                {
                    // SCM連携発注時のSCM受注明細回答データ存在時、受注計上フラグ設定・ヘッダー情報退避
                    this._salesSlipInputAcs.AcceptAnOrderAddupFlag = true;
                    this._salesSlipInputAcs.AcptSCMHeader = scmHeader;
                }
                // ADD 2014/09/18 SCM仕掛一覧 №10677 ｼｽﾃﾑﾃｽﾄ障害対応 ---------------------------------<<<<<
                // UPD 2014/09/16 SCM仕掛一覧№10677対応 -------------------------------------<<<<<
                //<<<2010/05/30

                // 受注計上処理
                //>>>2010/05/30
                //IsResult = this.AcceptAnOrderAddup(salesSlip, salesDetailList, addUpSrcDetailList, depsitMain, depositAlw, stockSlipWorkList, stockDetailWorkList, addUpOrgStockDetailList, stockWorkList, acceptOdrCarList, uoeOrderDtlWorkList);
                IsResult = this.AcceptAnOrderAddup(salesSlip, salesDetailList, addUpSrcDetailList, depsitMain, depositAlw, stockSlipWorkList, stockDetailWorkList, addUpOrgStockDetailList, stockWorkList, acceptOdrCarList, uoeOrderDtlWorkList, scmHeader, scmCar, scmAnswerList);
                //<<<2010/05/30

                // --- ADD 2009/12/23 ---------->>>>>
                //伝票備考、伝票備考２、伝票備考３の入力桁数を制御する
                this._salesSlipInputAcs.GetNoteCharCnt();
                //SetNoteCharCnt();
                // --- ADD 2009/12/23 ----------<<<<<

            }

            //this._prevControl = this.ActiveControl;
        }

        /// <summary>
        /// 受注計上
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクト</param>
        /// <param name="addUpSrcDetailList">計上元売上明細データオブジェクト</param>
        /// <param name="depsitMain">入金データオブジェクト</param>
        /// <param name="depositAlw">入金引当データオブジェクト</param>
        /// <param name="stockSlipWorkList">仕入ワークデータオブジェクトリスト</param>
        /// <param name="stockDetailWorkList">仕入明細ワークデータオブジェクトリスト</param>
        /// <param name="addUpOrgStockDetailList">同時入力計上元仕入明細ワークデータオブジェクトリスト</param>
        /// <param name="stockWorkList">在庫ワークオブジェクトリスト</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）オブジェクトリスト</param>
        /// <param name="uoeOrderDtlWorkList">UOE発注データワークオブジェクトリスト</param>
        /// <br>Update Note: 2009/09/08② 張凱 車輌管理機能対応</br>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        //>>>2010/05/30
        //private int AcceptAnOrderAddup(SalesSlip salesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, SearchDepsitMain depsitMain, SearchDepositAlw depositAlw, List<StockSlipWork> stockSlipWorkList, List<StockDetailWork> stockDetailWorkList, List<AddUpOrgStockDetailWork> addUpOrgStockDetailList, List<StockWork> stockWorkList, List<AcceptOdrCar> acceptOdrCarList, List<UOEOrderDtlWork> uoeOrderDtlWorkList)
        private int AcceptAnOrderAddup(SalesSlip salesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, SearchDepsitMain depsitMain, SearchDepositAlw depositAlw, List<StockSlipWork> stockSlipWorkList, List<StockDetailWork> stockDetailWorkList, List<AddUpOrgStockDetailWork> addUpOrgStockDetailList, List<StockWork> stockWorkList, List<AcceptOdrCar> acceptOdrCarList, List<UOEOrderDtlWork> uoeOrderDtlWorkList, UserSCMOrderHeaderRecord scmHeader, UserSCMOrderCarRecord scmCar, List<UserSCMOrderAnswerRecord> scmAnswerList)
        //<<<2010/05/30
        {
            int isResult = 1;
            // 受注計上情報生成可能チェック処理
            string message;
            bool created = this._salesSlipInputAcs.CanCreateAcceptAnOrderAddUpInfo(salesSlip, salesDetailList, uoeOrderDtlWorkList, out message);
            if (!created)
            {
                TMsgDisp.Show(
                    _form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "TODO",
                    message,
                    0,
                    MessageBoxButtons.OK);
                isResult = 0;
                _salesSlipInputAcs.AddUpOperationFlag = false; // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応
                return isResult;
            }

            SalesSlip baseSalesSlip = salesSlip.Clone();

            // 計上初期値セット前情報キャッシュ
            this._salesSlipInputAcs.CacheSalesSlipBeforeAddUp(salesSlip);

            // 受注計上情報生成処理
            this._salesSlipInputAcs.CreateAcceptAnOrderAddUpInfo(ref salesSlip);

            // 表示用受注ステータスの設定
            SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

            // 伝票区分コンボエディタアイテム設定処理
            this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, false);

            // 表示用伝票区分設定処理
            SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

            // キャッシュ処理
            //>>>2010/05/30
            //this._salesSlipInputAcs.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, acceptOdrCarList);
            this._salesSlipInputAcs.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, acceptOdrCarList, scmHeader, scmCar, null, scmAnswerList);
            //<<<2010/05/30

            // 受注計上明細情報生成処理
            this._salesSlipInputAcs.CreateAcceptAnOrderAddUpDetailInfo(stockWorkList);

            //>>>2010/05/30
            // SCM情報補正処理
            this._salesSlipInputAcs.AdjustScmInfoForAcceptAnOrderAddup();
            //<<<2010/05/30

            // 売上数量０行削除処理
            this.DeleteShipmentCountZeroRow(false);

            // 空白行削除処理
            this.DeleteEmptyRow(true);

            // 売上金額計算処理
            this.CalculationSalesPrice();

            // 売上金額変更後発生イベント処理
            this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());

            // 売上データクラス→画面格納処理
            this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

            // 明細粗利率設定処理
            this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesDetailList);

            // 明細グリッド設定処理
            //this._salesSlipDetailInput.SettingGrid();

            // 売単価、原単価の初期値設定
            this._salesSlipInputAcs.CacheDefaultValue();

            // 明細グリッドにフォーカスをセット
            //this._salesSlipDetailInput.Focus();
            SalesSlipDetailInput_DetailChanged(_owner, 1);

            // ガイドボタンツール有効無効設定処理
            //this.SettingGuideButtonToolEnabled(this.tComboEditor_SalesGoodsCd);

            // Visible設定
            //this.SettingVisible();

            // --- ADD 2009/09/08② ---------->>>>>
            //追加情報タブ項目Visible設定
            SettingAddInfoVisible();
            // --- ADD 2009/09/08② ----------<<<<<

            // データ変更フラグプロパティをtrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            //this._prevControl = this.ActiveControl;
            return isResult;
        }


        #endregion

        #region ●見積計上(明細選択)

        /// <summary>
        /// 見積照会ボタンクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        public void EstimateReferenceSearch(int rowCount, String CustomerCode)
        {
            _saveStatus = 0;
            if (!string.IsNullOrEmpty(CustomerCode.Trim()))
            {
                this._salesSlip.CustomerCode = Int32.Parse(CustomerCode);
            }
            else
            {
                this._salesSlip.CustomerCode = 0;
            }
            //this._salesDetailDataTable.AcceptChanges();

            // 得意先入力チェック処理
            bool customerCodeCheck = this.CheckCustomerCodeInput();
            if (!customerCodeCheck) return;

            //// ActiveRowインデックス取得処理
            //int rowIndex = this.GetActiveRowIndex();
            //if (rowIndex == -1) return;

            List<SalHisRefResultParamWork> salHisRefResultParamWorkList;
            DCHNB04101UA salesHisGuide = new DCHNB04101UA();
            salesHisGuide.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate;
            salesHisGuide.AcptAnOdrStatusFix = true;
            salesHisGuide.AutoSearch = true;
            salesHisGuide.MaxSelectCount = this._salesInputConstructionAcs.DataInputCountValue - rowCount;
            salesHisGuide.SectionCode = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
            salesHisGuide.SectionName = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
            salesHisGuide.CustomerCodeFix = true;
            if (!string.IsNullOrEmpty(CustomerCode.Trim()))
            {
                salesHisGuide.CustomerCode = this._salesSlip.CustomerCode;
            }

            //salesHisGuide.CustomerCode = this._salesSlipInputAcs.SalesSlip.CustomerCode;
            salesHisGuide.CustomerName = this._salesSlipInputAcs.SalesSlip.CustomerSnm;
            salesHisGuide.SalesEmployeeCd = this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd;
            salesHisGuide.SalesEmployeeName = this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm;
            salesHisGuide.SalesInputCode = this._salesSlipInputAcs.SalesSlip.SalesInputCode;
            salesHisGuide.SalesInputName = this._salesSlipInputAcs.SalesSlip.SalesInputName;
            salesHisGuide.FrontEmployeeCd = this._salesSlipInputAcs.SalesSlip.FrontEmployeeCd;
            salesHisGuide.FrontEmployeeName = this._salesSlipInputAcs.SalesSlip.FrontEmployeeNm;

            //DialogResult dialogResult = salesHisGuide.ShowDialog(_owner, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate, this._salesSlipInputAcs.SalesSlip.CustomerCode);// DEL イン晶晶 2015/05/12 for Redmine#45799
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            //// ウィンドの表示位置をセットする
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dialogResult;
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dialogResult = salesHisGuide.ShowDialog(wrp, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate, this._salesSlipInputAcs.SalesSlip.CustomerCode);
            //}
            //else
            //{
            //    dialogResult = salesHisGuide.ShowDialog(this._salesSlipInputAcs.Owner, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate, this._salesSlipInputAcs.SalesSlip.CustomerCode);
            //}
            ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            salesHisGuide.StartPosition = FormStartPosition.CenterParent;
            DialogResult dialogResult = salesHisGuide.ShowDialog(this._salesSlipInputAcs.Owner, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate, this._salesSlipInputAcs.SalesSlip.CustomerCode);
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

            if (dialogResult == DialogResult.OK)
            {
                _saveStatus = 1;
                #region 明細へのデータ展開
                salHisRefResultParamWorkList = salesHisGuide.StcHisRefDataWork;
                int lastInputSalesRow = this._salesSlipInputAcs.GetLastInputSalesRowNo();
                int st = this._salesSlipInputAcs.SalesDetailRowSettingFromSalHisRefResultParamWorkListForAddUp(lastInputSalesRow + 1, salHisRefResultParamWorkList, SalesSlipInputAcs.WayToDetailExpand.AddUp);

                if (st == -1)
                {
                    TMsgDisp.Show(
                        _owner,
                        emErrorLevel.ERR_LEVEL_INFO,
                        "TODO",
                        "「計上」済み明細が選択されましたので、" + Environment.NewLine +
                        "明細への展開を行いません。",
                        -1,
                        MessageBoxButtons.OK);
                }
                else
                {
                    // 売上金額計算処理
                    this.CalculationSalesPrice();

                    // データ変更フラグプロパティをTrueにする
                    this._salesSlipInputAcs.IsDataChanged = true;

                    // 売上金額変更後発生イベントコール処理
                    //this.SalesPriceChangedEventCall();

                    // フッタ部明細情報更新イベントコール処理
                    //this.SettingFooterEventCall(this.GetActiveRowSalesRowNo());
                    SalesSlipDetailInput_DetailChanged(_owner, 1);

                    // 車両情報設定イベントコール処理
                    //this.SettingCarInfoEventCall(this.GetActiveRowSalesRowNo());

                    // 明細グリッド設定処理
                    //this.SettingGrid();

                    // 現在庫数調整
                    this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                    #region フォーカス位置
                    //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                    //this.uGrid_Details.ActiveCell = this.uGrid_Details.ActiveRow.Cells[this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName];
                    //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                    #endregion
                }
                #endregion
            }
        }
        #endregion

        #region ●見積照会(伝票選択)

        /// <summary>
        /// 見積計上処理
        /// </summary>
        /// <param name="isConfirm">確認ダイアログ表示有無(true:表示する false:表示しない)</param>
        /// <br>Update Note: 2009/12/23 張凱 PM.NS保守依頼④対応</br>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2021/04/12 陳艶丹</br>
        /// <br>管理番号   : 11770021-00</br>
        /// <br>           : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
        public void EstimateAddup(bool IsDataChanged, out int IsResult)
        {
            IsResult = 0;

            //bool isConfirm = true;
            //bool canEstimateAddUp = this.ShowSaveCheckDialog(isConfirm, IsDataChanged);

            //if (!canEstimateAddUp)
            //{
            //    IsResult = 0;
            //    return;
            //}

            //this.tEdit_SalesEmployeeCd.Focus();
            //this.ActiveControl = this.tEdit_SalesEmployeeCd;

            string salesSlipNum = string.Empty;
            if (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) // 見積
            {
                salesSlipNum = this._salesSlipInputAcs.SalesSlip.SalesSlipNum;
            }
            MAHNB01010UD salesSlipNumInputDialog = new MAHNB01010UD((int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate, salesSlipNum, MAHNB01010UD.ct_AcptAnOdrStatusEnable_True, MAHNB01010UD.ct_MODE_Estimate);
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            //Form _form = new Form();
            //_form.Height = 762;
            //_form.Width = 1018;
            //_form.StartPosition = FormStartPosition.WindowsDefaultLocation;
            ////DialogResult dialogResult = salesSlipNumInputDialog.ShowDialog(_form); // DEL イン晶晶 2015/05/12 for Redmine#45799
            ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dialogResult;
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dialogResult = salesSlipNumInputDialog.ShowDialog(wrp);
            //}
            //else
            //{
            //    dialogResult = salesSlipNumInputDialog.ShowDialog(this._salesSlipInputAcs.Owner);
            //}
            ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            salesSlipNumInputDialog.StartPosition = FormStartPosition.CenterParent;
            DialogResult dialogResult = salesSlipNumInputDialog.ShowDialog(this._salesSlipInputAcs.Owner);
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

            if (dialogResult == DialogResult.OK)
            {
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
                //得意先情報ガイドを閉じる
                if (showEnable() || showCustomerGuid())
                {
                    noteInfoClose();
                }
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
                _salesSlipInputAcs.AddUpOperationFlag = true; // ADD 陳健 2014/01/23 for Redmine#41550のNo.1＆No.2
                IsResult = 1;
                SalesSlip salesSlip = salesSlipNumInputDialog.DfSalesSlip;
                List<SalesDetail> salesDetailList = salesSlipNumInputDialog.DfSalesDetailList;
                List<SalesDetail> addUpSrcDetailList = salesSlipNumInputDialog.DfAddUpSrcDetailList;
                SearchDepsitMain depsitMain = salesSlipNumInputDialog.DfDepsitMain;
                SearchDepositAlw depositAlw = salesSlipNumInputDialog.DfDepositAlw;
                List<StockWork> stockWorkList = salesSlipNumInputDialog.DfStockWorkList;
                List<AcceptOdrCar> acceptOdrCarList = salesSlipNumInputDialog.DfAcceptOdrCarList;
                List<StockSlipWork> stockSlipWorkList = salesSlipNumInputDialog.DfStockSlipWorkList;
                List<StockDetailWork> stockDetailWorkList = salesSlipNumInputDialog.DfStockDetailWorkList;
                List<AddUpOrgStockDetailWork> addUpOrgStockDetailList = salesSlipNumInputDialog.DfaddUpOrgStockDetailList;
                //>>>2010/05/30
                UserSCMOrderHeaderRecord scmHeader = salesSlipNumInputDialog.scmHeader;
                UserSCMOrderCarRecord scmCar = salesSlipNumInputDialog.scmCar;
                List<UserSCMOrderAnswerRecord> scmAnswerList = salesSlipNumInputDialog.scmAnswerList;
                //<<<2010/05/30

                // 見積計上処理
                //>>>2010/05/30
                //IsResult = this.EstimateAddup(salesSlip, salesDetailList, addUpSrcDetailList, depsitMain, depositAlw, stockSlipWorkList, stockDetailWorkList, addUpOrgStockDetailList, stockWorkList, acceptOdrCarList);
                IsResult = this.EstimateAddup(salesSlip, salesDetailList, addUpSrcDetailList, depsitMain, depositAlw, stockSlipWorkList, stockDetailWorkList, addUpOrgStockDetailList, stockWorkList, acceptOdrCarList, scmHeader, scmCar, scmAnswerList);
                //<<<2010/05/30

                // --- ADD 2009/12/23 ---------->>>>>
                //伝票備考、伝票備考２、伝票備考３の入力桁数を制御する
                this._salesSlipInputAcs.GetNoteCharCnt();
                //SetNoteCharCnt();
                // --- ADD 2009/12/23 ----------<<<<<

            }

            //this._prevControl = this.ActiveControl;
        }

        /// <summary>
        /// 見積計上処理
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        /// <param name="addUpSrcDetailList">計上元売上明細データオブジェクトリスト</param>
        /// <param name="depsitMain">入金データオブジェクト</param>
        /// <param name="depositAlw">入金引当データオブジェクト</param>
        /// <param name="stockSlipWorkList">仕入ワークデータオブジェクトリスト</param>
        /// <param name="stockDetailWorkList">仕入明細ワークデータオブジェクトリスト</param>
        /// <param name="addUppOrgStockDetailList">同時入力計上元仕入明細ワークデータオブジェクトリスト</param>
        /// <param name="stockWorkList">在庫ワークオブジェクトリスト</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）オブジェクトリスト</param>
        /// <br>Update Note: 2009/09/08② 張凱 車輌管理機能対応</br>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        //>>>2010/05/30
        //private int EstimateAddup(SalesSlip salesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, SearchDepsitMain depsitMain, SearchDepositAlw depositAlw, List<StockSlipWork> stockSlipWorkList, List<StockDetailWork> stockDetailWorkList, List<AddUpOrgStockDetailWork> addUpOrgStockDetailList, List<StockWork> stockWorkList, List<AcceptOdrCar> acceptOdrCarList)
        private int EstimateAddup(SalesSlip salesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, SearchDepsitMain depsitMain, SearchDepositAlw depositAlw, List<StockSlipWork> stockSlipWorkList, List<StockDetailWork> stockDetailWorkList, List<AddUpOrgStockDetailWork> addUpOrgStockDetailList, List<StockWork> stockWorkList, List<AcceptOdrCar> acceptOdrCarList, UserSCMOrderHeaderRecord scmHeader, UserSCMOrderCarRecord scmCar, List<UserSCMOrderAnswerRecord> scmAnswerList)
        //<<<2010/05/30
        {
            int isResult = 1;
            // 見積計上情報生成可能チェック処理
            string message;
            bool created = this._salesSlipInputAcs.CanCreateEstimateAddUpInfo(salesSlip, salesDetailList, out message);
            if (!created)
            {
                TMsgDisp.Show(
                    _owner,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "TODO",
                    message,
                    0,
                    MessageBoxButtons.OK);
                isResult = 0;
                _salesSlipInputAcs.AddUpOperationFlag = false; // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応
                return isResult;
            }

            SalesSlip baseSalesSlip = salesSlip.Clone();

            // 計上初期値セット前情報キャッシュ
            this._salesSlipInputAcs.CacheSalesSlipBeforeAddUp(salesSlip);

            // 見積計上情報生成処理
            this._salesSlipInputAcs.CreateEstimateAddUpInfo(ref salesSlip);

            // 表示用受注ステータスの設定
            SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

            // 伝票区分コンボエディタアイテム設定処理
            this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, false);

            // 表示用伝票区分設定処理
            SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

            // キャッシュ処理
            //>>>2010/05/30
            //this._salesSlipInputAcs.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, acceptOdrCarList);
            this._salesSlipInputAcs.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, acceptOdrCarList, scmHeader, scmCar, null, scmAnswerList);
            //<<<2010/05/30

            // 見積計上明細情報生成処理
            this._salesSlipInputAcs.CreateEstimateAddUpDetailInfo(stockWorkList);

            //>>>2010/05/30
            // SCM情報補正処理
            this._salesSlipInputAcs.AdjustScmInfoForEstimateAddup();
            //<<<2010/05/30

            // 空白行削除処理
            this.DeleteEmptyRow(true);

            // 売上金額計算処理
            this.CalculationSalesPrice();

            // 売上金額変更後発生イベント処理
            this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());

            // 売上データクラス→画面格納処理
            this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

            // 明細粗利率設定処理
            this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesDetailList);

            // 明細グリッド設定処理
            // this._salesSlipDetailInput.SettingGrid();

            // 売単価、原単価の初期値設定
            this._salesSlipInputAcs.CacheDefaultValue();

            // 明細グリッドにフォーカスをセット
            //this._salesSlipDetailInput.Focus();
            SalesSlipDetailInput_DetailChanged(_owner, 1);

            // ガイドボタンツール有効無効設定処理
            //this.SettingGuideButtonToolEnabled(this.tComboEditor_SalesGoodsCd);

            // 伝票区分コンボエディタアイテム設定処理
            this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, true);

            // Visible設定
            //this.SettingVisible();

            // --- ADD 2009/09/08② ---------->>>>>
            //追加情報タブ項目Visible設定
            SettingAddInfoVisible();
            // --- ADD 2009/09/08② ----------<<<<<

            // データ変更フラグプロパティをtrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            //this._prevControl = this.ActiveControl;
            return isResult;
        }
        #endregion

        # region ●履歴照会(売上履歴データから明細選択)
        /// <summary>
        /// 売上履歴ボタンクリックイベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータクラス</param>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        public void SalesReferenceSearch(int rowCount, String CustomerCode)
        {
            _saveStatus = 0;
            if (!string.IsNullOrEmpty(CustomerCode.Trim()))
            {
                this._salesSlip.CustomerCode = Int32.Parse(CustomerCode);
            }
            else
            {
                this._salesSlip.CustomerCode = 0;
            }
            //this._salesDetailDataTable.AcceptChanges();

            // 得意先入力チェック処理
            bool customerCodeCheck = this.CheckCustomerCodeInput();
            if (!customerCodeCheck) return;

            //// ActiveRowインデックス取得処理
            //int rowIndex = this.GetActiveRowIndex();
            //if (rowIndex == -1) return;

            List<SalHisRefResultParamWork> salHisRefResultParamWorkList;
            DCHNB04101UA salesHisGuide = new DCHNB04101UA();
            salesHisGuide.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales;
            salesHisGuide.AutoSearch = true;
            salesHisGuide.MaxSelectCount = this._salesInputConstructionAcs.DataInputCountValue - rowCount;
            salesHisGuide.SectionCode = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
            salesHisGuide.SectionName = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
            salesHisGuide.CustomerCodeFix = true;
            if (!string.IsNullOrEmpty(CustomerCode.Trim()))
            {
                salesHisGuide.CustomerCode = this._salesSlip.CustomerCode;
            }
            //salesHisGuide.CustomerCode = this._salesSlipInputAcs.SalesSlip.CustomerCode;
            salesHisGuide.CustomerName = this._salesSlipInputAcs.SalesSlip.CustomerSnm;
            salesHisGuide.SalesEmployeeCd = this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd;
            salesHisGuide.SalesEmployeeName = this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm;
            salesHisGuide.SalesInputCode = this._salesSlipInputAcs.SalesSlip.SalesInputCode;
            salesHisGuide.SalesInputName = this._salesSlipInputAcs.SalesSlip.SalesInputName;
            salesHisGuide.FrontEmployeeCd = this._salesSlipInputAcs.SalesSlip.FrontEmployeeCd;
            salesHisGuide.FrontEmployeeName = this._salesSlipInputAcs.SalesSlip.FrontEmployeeNm;

            //DialogResult dialogResult = salesHisGuide.ShowDialog(_owner, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales, this._salesSlipInputAcs.SalesSlip.CustomerCode);// DEL イン晶晶 2015/05/12 for Redmine#45799
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            //// ウィンドの表示位置をセットする
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dialogResult;
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dialogResult = salesHisGuide.ShowDialog(wrp, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales, this._salesSlipInputAcs.SalesSlip.CustomerCode);
            //}
            //else
            //{
            //    dialogResult = salesHisGuide.ShowDialog(this._salesSlipInputAcs.Owner, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales, this._salesSlipInputAcs.SalesSlip.CustomerCode);
            //}
            ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            salesHisGuide.StartPosition = FormStartPosition.CenterParent;
            DialogResult dialogResult = salesHisGuide.ShowDialog(this._salesSlipInputAcs.Owner, (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales, this._salesSlipInputAcs.SalesSlip.CustomerCode);
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

            int retSt = 0;

            if (dialogResult == DialogResult.OK)
            {
                _saveStatus = 1;
                #region 明細へのデータ展開
                salHisRefResultParamWorkList = salesHisGuide.StcHisRefDataWork;
                int lastInputSalesRow = this._salesSlipInputAcs.GetLastInputSalesRowNo();
                retSt = this._salesSlipInputAcs.SalesDetailRowSettingFromSalHisRefResultParamWorkList(lastInputSalesRow + 1, salHisRefResultParamWorkList, SalesSlipInputAcs.WayToDetailExpand.Normal);

                if (retSt == -1)
                {
                    // --- UPD 2013/11/13 Y.Wakita ---------->>>>>
                    //TMsgDisp.Show(
                    //    _owner,
                    //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //    "TODO",
                    //    "注釈および行値引き、商品値引きは、売上伝票以外では複写対象外です。    ",
                    //    0,
                    //    MessageBoxButtons.OK,
                    //    MessageBoxDefaultButton.Button1);

                    string message = string.Empty;
                    switch ((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay)
                    {
                        case SalesSlipInputAcs.AcptAnOdrStatusState.Estimate:           // 見積
                            message = "見積伝票では注釈は複写対象外です。";
                            break;
                        case SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate:  // 単価見積
                            message = "単価見積伝票では注釈および商品値引きは複写対象外です。";
                            break;
                        case SalesSlipInputAcs.AcptAnOdrStatusState.Sales:              // 売上
                            if ((SalesSlipInputAcs.AcptAnOdrStatusState)this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
                            {
                                // 受注
                                message = "受注伝票では注釈および行値引き、商品値引きは複写対象外です。";
                            }
                            break;
                        case SalesSlipInputAcs.AcptAnOdrStatusState.Shipment:           // 貸出
                            message = "貸出伝票では注釈および行値引き、商品値引きは複写対象外です。";
                            break;
                    }
                    TMsgDisp.Show(
                        _owner,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "TODO",
                        message,
                        0,
                        MessageBoxButtons.OK,
                        MessageBoxDefaultButton.Button1);
                    // --- UPD 2013/11/13 Y.Wakita ----------<<<<<
                }

                // 売上金額計算処理
                this.CalculationSalesPrice();

                // データ変更フラグプロパティをTrueにする
                this._salesSlipInputAcs.IsDataChanged = true;

                // 売上金額変更後発生イベントコール処理
                //this.SalesPriceChangedEventCall();

                // フッタ部明細情報更新イベントコール処理
                //this.SettingFooterEventCall(this.GetActiveRowSalesRowNo());
                SalesSlipDetailInput_DetailChanged(_owner, 1);

                // 車両情報設定イベントコール処理
                //this.SettingCarInfoEventCall(this.GetActiveRowSalesRowNo());

                // 明細グリッド設定処理
                //this.SettingGrid();

                // 現在庫数調整
                this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                // --- UPD 2009/09/08 ---------->>>>>
                this._salesSlipInputAcs.CreateSlipCopyCarInfo();
                // --- UPD 2009/09/08 ---------->>>>>

                #endregion

                #region フォーカス位置
                //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                #endregion
            }
        }

        #endregion

        #region ●伝票複写
        /// <summary>
        /// 伝票複写処理
        /// </summary>
        /// <param name="isConfirm">確認ダイアログ表示有無(true:表示する false:表示しない)</param>
        /// <br>Update Note: 2009/12/23 張凱 PM.NS保守依頼④対応</br>
        /// <br>Update Note: 2011/11/24   鄧潘ハン Redmine#8081 伝票複写機能の売上日の仕様変更</br>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2021/04/12 陳艶丹</br>
        /// <br>管理番号   : 11770021-00</br>
        /// <br>           : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
        public void CopySlip(bool IsDataChanged, out int IsResult)
        {
            IsResult = 0;

            //bool isConfirm = true;

            //// 伝票複写
            //bool canRed = this.ShowSaveCheckDialog(isConfirm, IsDataChanged);

            //if (!canRed)
            //{
            //    IsResult = 0;
            //    return;
            //}

            //this.tEdit_SalesEmployeeCd.Focus();
            //this.ActiveControl = this.tEdit_SalesEmployeeCd;

            MAHNB01010UD salesSlipNoInputDialog = new MAHNB01010UD(this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay, this._salesSlipInputAcs.SalesSlip.SalesSlipNum, MAHNB01010UD.ct_AcptAnOdrStatusEnable_True, MAHNB01010UD.ct_MODE_Normal);
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            //Form _form = new Form();
            //_form.Height = 762;
            //_form.Width = 1018;
            //_form.StartPosition = FormStartPosition.WindowsDefaultLocation;

            ////DialogResult dialogResult = salesSlipNoInputDialog.ShowDialog(_form); // DEL イン晶晶 2015/05/12 for Redmine#45799
            ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dialogResult;
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dialogResult = salesSlipNoInputDialog.ShowDialog(wrp);
            //}
            //else
            //{
            //    dialogResult = salesSlipNoInputDialog.ShowDialog(this._salesSlipInputAcs.Owner);
            //}
            ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            salesSlipNoInputDialog.StartPosition = FormStartPosition.CenterParent;
            DialogResult dialogResult = salesSlipNoInputDialog.ShowDialog(this._salesSlipInputAcs.Owner);
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

            if (dialogResult == DialogResult.OK)
            {
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
                //得意先情報ガイドを閉じる
                if (showEnable() || showCustomerGuid())
                {
                    noteInfoClose();
                }
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
                IsResult = 1;
                //---ADD 鄧潘ハン 2011/11/24 Redmine#8081-------------------------->>>>>
                salesSlipNoInputDialog.DfSalesSlip.SalesDate = DateTime.Now;
                salesSlipNoInputDialog.DfSalesSlip.ShipmentDay = DateTime.Now;
                //---ADD 鄧潘ハン 2011/11/24 Redmine#8081--------------------------<<<<<
                SalesSlip salesSlip = salesSlipNoInputDialog.DfSalesSlip;
                List<SalesDetail> salesDetailList = salesSlipNoInputDialog.DfSalesDetailList;
                List<SalesDetail> addUpSrcDetailList = salesSlipNoInputDialog.DfAddUpSrcDetailList;
                List<StockWork> stockWorkList = salesSlipNoInputDialog.DfStockWorkList;
                List<AcceptOdrCar> acceptOdrCarList = salesSlipNoInputDialog.DfAcceptOdrCarList;

                IsResult = this.CopySlip(salesSlip, salesDetailList, addUpSrcDetailList, stockWorkList, acceptOdrCarList);

                // --- ADD 2009/12/23 ---------->>>>>
                //伝票備考、伝票備考２、伝票備考３の入力桁数を制御する
                this._salesSlipInputAcs.GetNoteCharCnt();
                //SetNoteCharCnt();
                // --- ADD 2009/12/23 ----------<<<<<

            }

            //this._prevControl = this.ActiveControl;

        }

        /// <summary>
        /// 伝票複写
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        /// <param name="addUpSrcDetailList">計上元売上明細データオブジェクトリスト</param>
        /// <param name="stockWorkList">在庫ワークオブジェクトリスト</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）オブジェクトリスト</param>
        /// <br>Update Note: 2009/09/08② 張凱 車輌管理機能対応</br>
        private int CopySlip(SalesSlip salesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, List<StockWork> stockWorkList, List<AcceptOdrCar> acceptOdrCarList)
        {
            int isResult = 1;
            // 複写情報生成可能チェック処理
            string message;
            bool created = this._salesSlipInputAcs.CanCreateCopySlipInfo(salesSlip, salesDetailList, out message);
            if (!created)
            {
                TMsgDisp.Show(
                    _owner,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "TODO",
                    message,
                    0,
                    MessageBoxButtons.OK);
                isResult = 0;
                return isResult;
            }

            SalesSlip baseSalesSlip = salesSlip.Clone();

            // 複写情報生成処理
            this._salesSlipInputAcs.CreateSlipCopyInfo(ref salesSlip);

            // 表示用受注ステータスの設定
            SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

            // 伝票区分コンボエディタアイテム設定処理
            this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, false);

            // 表示用伝票区分設定処理
            SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

            // キャッシュ処理
            this._salesSlipInputAcs.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, stockWorkList, acceptOdrCarList);

            // コピー伝票明細情報生成処理
            this._salesSlipInputAcs.CreateSlipCopyDetailInfo();

            // コピー伝票車輌情報生成処理
            this._salesSlipInputAcs.CreateSlipCopyCarInfo();

            // 売上金額計算処理
            this.CalculationSalesPrice();

            // 売上金額変更後発生イベント処理
            this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());

            // 売上データクラス→画面格納処理
            this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

            // 明細粗利率設定処理
            this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesDetailList);

            // 明細グリッド設定処理
            //this._salesSlipDetailInput.SettingGrid();

            // ガイドボタンツール有効無効設定処理
            //this.SettingGuideButtonToolEnabled(this.tComboEditor_SalesGoodsCd);

            // Visible設定
            //this.SettingVisible();

            // --- ADD 2009/09/08② ---------->>>>>
            //追加情報タブ項目Visible設定
            SettingAddInfoVisible();
            // --- ADD 2009/09/08② ----------<<<<<

            // データ変更フラグプロパティをtrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            //this._prevControl = this.ActiveControl;
            return isResult;
        }


        #endregion

        #region ●車両管理オプション
        /// <summary>
        /// 車両管理オプション取得処理
        /// </summary>
        /// <param name="OptCarMng">車両管理オプション</param>
        public void GetOptCarMng(out int optCarMng)
        {
            optCarMng = this._salesSlipInputInitDataAcs.Opt_CarMng;
        }
        #endregion

        //>>>2010/05/30
        #region ●SCMオプション
        /// <summary>
        /// SCMオプション取得処理
        /// </summary>
        /// <param name="optSCM"></param>
        public void GetOptSCM(out int optSCM)
        {
            optSCM = this._salesSlipInputInitDataAcs.Opt_SCM;
        }
        #endregion
        //<<<2010/05/30

        // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------>>>>
        /// <summary>
        /// TSPオプション
        /// </summary>
        /// <param name="optSCM"></param>
        public void GetOptTSP(out int optTsp)
        {
            optTsp = this._salesSlipInputInitDataAcs.Opt_TSP;
        }
        // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------<<<<
        // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
        /// <summary>
        /// 電子帳簿連携オプション
        /// </summary>
        /// <param name="optEBooks"></param>
        public void GetOptEBooks(out int optEBooks)
        {
            optEBooks = this._salesSlipInputInitDataAcs.Opt_PM_EBooks;
        }
        // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<

        # region ●伝票備考、伝票備考２、伝票備考３の入力桁数設定処理
        /// <summary>
        /// 伝票備考、伝票備考２、伝票備考３の入力桁数設定処理
        /// </summary>
        public void SetNoteCharCnt(out int slipNoteCharCnt, out int slipNote2CharCnt, out int slipNote3CharCnt)
        {
            this._salesSlipInputAcs.GetNoteCharCnt();

            if (this._salesSlipInputInitDataAcs.SlipNoteCharCnt == 0)
            {
                slipNoteCharCnt = -1;
            }
            else
            {
                slipNoteCharCnt = this._salesSlipInputInitDataAcs.SlipNoteCharCnt;
            }

            if (this._salesSlipInputInitDataAcs.SlipNote2CharCnt == 0)
            {
                slipNote2CharCnt = -1;
            }
            else
            {
                slipNote2CharCnt = this._salesSlipInputInitDataAcs.SlipNote2CharCnt;
            }

            if (this._salesSlipInputInitDataAcs.SlipNote3CharCnt == 0)
            {
                slipNote3CharCnt = -1;
            }
            else
            {
                slipNote3CharCnt = this._salesSlipInputInitDataAcs.SlipNote3CharCnt;
            }
        }

        # endregion

        # region ●返品処理関係
        /// <summary>
        /// 返品計上処理
        /// </summary>
        /// <param name="isConfirm">確認ダイアログ表示有無(true:表示する false:表示しない)</param>
        /// <br>Update Note: 2009/12/23 張凱 PM.NS保守依頼④対応</br>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2021/04/12 陳艶丹</br>
        /// <br>管理番号   : 11770021-00</br>
        /// <br>           : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
        public void ReturnSlip(bool IsDataChanged, out int IsResult)
        {
            IsResult = 0;

            //>>>2010/05/30
            int acptAnOdrStatus = this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay;
            if ((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay != (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) &&
                (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay != (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment))
            {
                acptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales;
            }
            //<<<2010/05/30

            //>>>2010/05/30
            //MAHNB01010UD salesSlipNumInputDialog = new MAHNB01010UD(this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay, this._salesSlipInputAcs.SalesSlip.SalesSlipNum, MAHNB01010UD.ct_AcptAnOdrStatusEnable_True, MAHNB01010UD.ct_MODE_RetGoods);
            MAHNB01010UD salesSlipNumInputDialog = new MAHNB01010UD(acptAnOdrStatus, this._salesSlipInputAcs.SalesSlip.SalesSlipNum, MAHNB01010UD.ct_AcptAnOdrStatusEnable_True, MAHNB01010UD.ct_MODE_RetGoods);
            //<<<2010/05/30
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            //Form _form = new Form();
            //_form.Height = 762;
            //_form.Width = 1018;
            //_form.StartPosition = FormStartPosition.WindowsDefaultLocation;
            ////DialogResult dialogResult = salesSlipNumInputDialog.ShowDialog(_form); // DEL イン晶晶 2015/05/12 for Redmine#45799
            ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dialogResult;
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dialogResult = salesSlipNumInputDialog.ShowDialog(wrp);
            //}
            //else
            //{
            //    dialogResult = salesSlipNumInputDialog.ShowDialog(this._salesSlipInputAcs.Owner);
            //}
            ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            salesSlipNumInputDialog.StartPosition = FormStartPosition.CenterParent;
            DialogResult dialogResult = salesSlipNumInputDialog.ShowDialog(this._salesSlipInputAcs.Owner);
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

            if (dialogResult == DialogResult.OK)
            {
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
                //得意先情報ガイドを閉じる
                if (showEnable() || showCustomerGuid())
                {
                    noteInfoClose();
                }
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
                IsResult = 1;
                SalesSlip salesSlip = salesSlipNumInputDialog.DfSalesSlip;
                SalesSlip baseSalesSlip = salesSlipNumInputDialog.DfBaseSalesSlip;
                List<SalesDetail> salesDetailList = salesSlipNumInputDialog.DfSalesDetailList;
                List<SalesDetail> addUpSrcDetailList = salesSlipNumInputDialog.DfAddUpSrcDetailList;
                SearchDepsitMain depsitMain = salesSlipNumInputDialog.DfDepsitMain;
                SearchDepositAlw depositAlw = salesSlipNumInputDialog.DfDepositAlw;
                List<StockWork> stockWorkList = salesSlipNumInputDialog.DfStockWorkList;
                List<AcceptOdrCar> acceptOdrCarList = salesSlipNumInputDialog.DfAcceptOdrCarList;
                List<StockSlipWork> stockSlipWorkList = salesSlipNumInputDialog.DfStockSlipWorkList;
                List<StockDetailWork> stockDetailWorkList = salesSlipNumInputDialog.DfStockDetailWorkList;
                List<AddUpOrgStockDetailWork> addUpOrgStockDetailList = salesSlipNumInputDialog.DfaddUpOrgStockDetailList;
                List<PaymentSlpWork> paymentSlpWorkList = salesSlipNumInputDialog.DfpaymentSlpWorkList;
                // --- DEL 2012/09/20 三戸 №35の戻し --------->>>>>>>>>>>>>>>>>>>>>>>>
                //// ADD 2012/07/11 №35 T.Yoshioka ------------------------------>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //// 問合せ番号のセット
                //salesSlip.InquiryNumber = salesDetailList[0].InquiryNumber;
                //baseSalesSlip.InquiryNumber = salesDetailList[0].InquiryNumber;
                //if (addUpSrcDetailList != null)
                //{
                //    foreach (SalesDetail sdt in addUpSrcDetailList)
                //    {
                //        sdt.InquiryNumber = salesDetailList[0].InquiryNumber;
                //    }
                //}
                //// ADD 2012/07/11 №35 T.Yoshioka ------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                // --- DEL 2012/09/20 三戸 №35の戻し ---------<<<<<<<<<<<<<<<<<<<<<<<<

                // 返品時は消費税転嫁方式の更新を行わないので、再取得前に戻す
                salesSlip.ConsTaxLayMethod = baseSalesSlip.ConsTaxLayMethod;

                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                if (salesSlip.ConsTaxLayMethod == 0)
                {
                    // 0:伝票転嫁
                    this._salesSlipInputInitDataAcs.ConsTaxLayMethod = 0;
                    // 赤伝の場合、元伝票の税率を利用する。
                    this._salesSlipInputInitDataAcs.TaxRateDiv = 2;
                    // 税率マスタの税率を取得する。
                    this._salesSlipInputInitDataAcs.GetTaxRateMst(salesSlip.SalesDate);
                }
                else
                {
                    this._salesSlipInputInitDataAcs.ConsTaxLayMethod = salesSlip.ConsTaxLayMethod;
                    // 伝票転嫁以外の場合、税率マスタの税率を利用する。
                    this._salesSlipInputInitDataAcs.TaxRateDiv = 0;
                }
                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<

                //--- ADD 田村顕成 2022/10/05 インボイス残対応 ----->>>>>
                SetSlipNoteForReturnRed(ref salesSlip);
                //--- ADD 田村顕成 2022/10/05 インボイス残対応 -----<<<<<

                IsResult = this.ReturnSlip(salesSlip, salesDetailList, addUpSrcDetailList, depsitMain, depositAlw, stockSlipWorkList, stockDetailWorkList, addUpOrgStockDetailList, stockWorkList, acceptOdrCarList);
                // ADD 2012/07/11 №35 T.Yoshioka ------------------------------>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                // 返品用SCM受注明細データ（回答）のキャッシュ
                this._salesSlipInputAcs.CacheSCMAnswerListReturn(salesSlipNumInputDialog.scmAnswerList);
                // ADD 2012/07/11 №35 T.Yoshioka ------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------>>>>>
                // 返品用SCM受注データのキャッシュ
                this._salesSlipInputAcs.CacheSCMHeaderReturn(salesSlipNumInputDialog.scmHeader);
                // --- ADD 2014/08/13 T.Miyamoto SCM仕掛一覧 №10643 ------------------------------<<<<<

                // --- ADD 2009/12/23 ---------->>>>>
                //伝票備考、伝票備考２、伝票備考３の入力桁数を制御する
                this._salesSlipInputAcs.GetNoteCharCnt();
                //SetNoteCharCnt();
                // --- ADD 2009/12/23 ----------<<<<<
                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                if (salesSlip.ConsTaxLayMethod == 0)
                {
                    // 0:伝票転嫁
                    this._salesSlipInputInitDataAcs.ConsTaxLayMethod = 0;
                    // 返品の場合、元伝票の税率を利用する。
                    this._salesSlipInputInitDataAcs.TaxRateDiv = 2;
                    // 税率マスタの税率を取得する。
                    this._salesSlipInputInitDataAcs.GetTaxRateMst(salesSlip.SalesDate);
                }
                else
                {
                    this._salesSlipInputInitDataAcs.ConsTaxLayMethod = salesSlip.ConsTaxLayMethod;
                    //　伝票転嫁以外の場合、税率マスタの税率を利用する。
                    this._salesSlipInputInitDataAcs.TaxRateDiv = 0;
                }
                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<
            }

            //this._prevControl = this.ActiveControl;
        }

        //--- ADD 田村顕成 2022/10/05 インボイス残対応 ----->>>>>
        /// <summary>
        /// 返品・赤伝時の備考欄データ設定処理
        /// </summary>
        /// <param name="salesSlip">返品対象の売上データ</param>
        private void SetSlipNoteForReturnRed(ref SalesSlip salesSlip)
        {
            GetReturnRedSettings();
            //備考1に対する設定を反映
            switch(this._returnRedNote1Mode)
            {

                case ReturnRedNote_ORIGINAL:
                default:
                    // 何も変えない
                    break;
                case ReturnRedNote_BLANK:
                    salesSlip.SlipNote = string.Empty;
                    break;
                case ReturnRedNote_SLIPNUM:
                    salesSlip.SlipNote =
                        salesSlip.SalesDate.ToString("yyyy/MM/dd") + " " +
                        salesSlip.SalesSlipNum;
                    break;
                case ReturnRedNote_OPTIONAL:
                    salesSlip.SlipNote = this._returnRedNote1;
                    break;
            }

            //備考2に対する設定を反映
            switch (this._returnRedNote2Mode)
            {

                case ReturnRedNote_ORIGINAL:
                default:
                    // 何も変えない
                    break;
                case ReturnRedNote_BLANK:
                    salesSlip.SlipNote2 = string.Empty;
                    break;
                case ReturnRedNote_SLIPNUM:
                    salesSlip.SlipNote2 =
                        salesSlip.SalesDate.ToString("yyyy/MM/dd") + " " +
                        salesSlip.SalesSlipNum;
                    break;
                case ReturnRedNote_OPTIONAL:
                    salesSlip.SlipNote2 = this._returnRedNote2;
                    break;
            }

            //備考3に対する設定を反映
            switch (this._returnRedNote3Mode)
            {

                case ReturnRedNote_ORIGINAL:
                default:
                    // 何も変えない
                    break;
                case ReturnRedNote_BLANK:
                    salesSlip.SlipNote3 = string.Empty;
                    break;
                case ReturnRedNote_SLIPNUM:
                    salesSlip.SlipNote3 =
                        salesSlip.SalesDate.ToString("yyyy/MM/dd") + " " +
                        salesSlip.SalesSlipNum;
                    break;
                case ReturnRedNote_OPTIONAL:
                    salesSlip.SlipNote3 = this._returnRedNote3;
                    break;
            }

        }
        //--- ADD 田村顕成 2022/10/05 インボイス残対応 -----<<<<<


        /// <summary>
        /// 返品計上処理
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        /// <param name="addUpSrcDetailList">計上元売上明細データオブジェクトリスト</param>
        /// <param name="depsitMain">入金データオブジェクト</param>
        /// <param name="depositAlw">入金引当データオブジェクト</param>
        /// <param name="stockSlipWorkList">仕入データオブジェクトリスト</param>
        /// <param name="stockDetailWorkList">仕入明明細データオブジェクトリスト</param>
        /// <param name="addUppOrgStockDetailList">同時入力計上元仕入明細データオブジェクトリスト</param>
        /// <param name="stockWorkList">在庫ワークオブジェクトリスト</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）オブジェクトリスト</param>
        /// <br>Update Note: 2009/09/08② 張凱 車輌管理機能対応</br>
        /// <br>Update Note: 2011/10/29 yangmj 売上伝票入力／発注の取り消しを行った伝票の削除処理対応</br>
        private int ReturnSlip(SalesSlip salesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, SearchDepsitMain depsitMain, SearchDepositAlw depositAlw, List<StockSlipWork> stockSlipWorkList, List<StockDetailWork> stockDetailWorkList, List<AddUpOrgStockDetailWork> addUppOrgStockDetailList, List<StockWork> stockWorkList, List<AcceptOdrCar> acceptOdrCarList)
        {
            int isResult = 1;
            // 返品伝票情報生成可能チェック処理
            string message;
            bool created = this._salesSlipInputAcs.CanCreateReturnSlipInfo(salesSlip, salesDetailList, out message);
            if (!created)
            {
                TMsgDisp.Show(
                    _owner,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "TODO",
                    message,
                    0,
                    MessageBoxButtons.OK);
                isResult = 0;
                return isResult;
            }

            // 計上元データ表示テキスト作成
            string addText = string.Empty;
            if (this._salesSlipInputAcs.ExistSalesDetailAddUpSrcDataDBList(salesDetailList))
            {
                // 計上元明細読込
                List<SalesDetail> salesDetailListSrc = this._salesSlipInputAcs.ReadDetailSrc(salesDetailList);

                // -----UPD 2010/11/30----->>>>>
                //// 出力文字列作成処理
                //if (salesDetailListSrc != null) addText = this._salesSlipInputAcs.MakeAddTextSrc(salesDetailList, salesDetailListSrc);

                //DialogResult dr = TMsgDisp.Show(
                //    _owner,
                //    emErrorLevel.ERR_LEVEL_INFO,
                //    "TODO",
                //    "関連するデータが存在します。　　\r\n\r\n" +
                //    addText + "\r\n" +
                //    "返品処理を行ってよろしいですか？",
                //    0,
                //    MessageBoxButtons.YesNo);

                MAHNB01010UP delDetail = new MAHNB01010UP();
                //-----UPD 2011/10/29----->>>>>
                DialogResult dr = DialogResult.OK;
                if (salesDetailList != null && (salesDetailListSrc != null && salesDetailListSrc.Count > 0))
                {
                    dr = delDetail.Show(this._form, salesDetailList, salesDetailListSrc, this._salesSlipInputAcs.SalesDetailDataTable, 1);
                }

                //DialogResult dr = delDetail.Show(this._form, salesDetailList, salesDetailListSrc, this._salesSlipInputAcs.SalesDetailDataTable, 1);
                //-----UPD 2011/10/29-----<<<<<

                // -----UPD 2010/11/30-----<<<<<
                if (dr == DialogResult.No)
                {
                    isResult = 0;
                    return isResult;
                }
            }

            SalesSlip baseSalesSlip = salesSlip.Clone();

            // 返品伝票情報生成処理
            this._salesSlipInputAcs.CreateReturnSlipInfo(ref salesSlip);

            // キャッシュ
            this._salesSlipInputAcs.Cache(salesSlip);

            // 表示用受注ステータスの設定
            SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

            // 伝票区分コンボエディタアイテム設定処理
            this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, false);

            // 表示用伝票区分設定処理
            SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

            // キャッシュ処理
            this._salesSlipInputAcs.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, acceptOdrCarList);

            // 返品伝票明細情報生成処理
            this._salesSlipInputAcs.CreateReturnSlipDetailInfo(stockWorkList);

            // 出荷数０行削除処理
            this.DeleteShipmentCountZeroRow(false);

            // 空白行削除処理
            this.DeleteEmptyRow(true);

            // 売上金額計算処理
            this.CalculationSalesPrice();

            // 売上金額変更後発生イベント処理
            this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());

            // 売上データクラス→画面格納処理
            this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

            // 明細粗利率設定処理
            this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesDetailList);

            // 明細グリッド設定処理
            //this._salesSlipDetailInput.SettingGrid();

            // 売単価、原単価の初期値設定
            this._salesSlipInputAcs.CacheDefaultValue();

            // 明細グリッドにフォーカスをセット
            //this._salesSlipDetailInput.Focus();

            // ガイドボタンツール有効無効設定処理
            //this.SettingGuideButtonToolEnabled(this.tComboEditor_SalesGoodsCd);

            // Visible設定
            //this.SettingVisible();

            // --- ADD 2009/09/08② ---------->>>>>
            //追加情報タブ項目Visible設定
            SettingAddInfoVisible();
            // --- ADD 2009/09/08② ----------<<<<<

            // データ変更フラグプロパティをtrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            //this._prevControl = this.ActiveControl;
            return isResult;
        }

        # endregion

        #region ●保存処理
        /// <summary>
        /// 保存処理
        /// </summary>
        /// <br>Update Note: 2010/06/02 譚洪 PM.NS障害・改良対応（７月リリース案件）</br>
        /// <br>             No.9「続けて入力しますか？」－いいえを選択時、担当者をクリアする。（担当者コード、担当者名を空白にする）</br>      
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        // 2011/01/31 >>>
        //// --- UPD m.suzuki 2010/06/12 ---------->>>>>
        ////public void AfterSave(out int result, string carMngCode, bool printSlipFlag)
        //public void AfterSave( out int result, string carMngCode, bool printSlipFlag, ref bool isMakeQR , bool scmFlg)
        //// --- UPD m.suzuki 2010/06/12 ----------<<<<<
        //public void AfterSave(out int result, string carMngCode, bool printSlipFlag, ref bool isMakeQR, ref bool scmFlg, out bool cmtFlag, out bool slipNote2ErrFlag) // DEL K2011/09/01
        // UPD 2013/03/28 SCM障害№192対応 -------------------------------------------------------->>>>>
        //public void AfterSave(out int result, string carMngCode, bool printSlipFlag, ref bool isMakeQR, ref bool scmFlg, out bool cmtFlag, out bool slipNote2ErrFlag, out bool salesDateErrFlag) // ADD K2011/09/01
        public void AfterSave(out int result, string carMngCode, bool printSlipFlag, ref bool isMakeQR, ref bool scmFlg, out bool cmtFlag, out bool slipNote2ErrFlag, out bool salesDateErrFlag, out int isSCMSave)
        // UPD 2013/03/28 SCM障害№192対応 --------------------------------------------------------<<<<<
        // 2011/01/31 <<<
        {
            // ----- ADD K2011/09/01 --------------------------->>>>>
            // ----- ADD K2011/12/09 --------------------------->>>>>
            slipNote2ErrFlag = false;
            salesDateErrFlag = false;
            // ADD 2013/03/28 SCM障害№192対応 ------------------------------------------->>>>>
            isSCMSave = 0;   // SCM受注データ取得結果
            // ADD 2013/03/28 SCM障害№192対応 -------------------------------------------<<<<<
            if (this._enterpriseCode == login_EnterpriseCode)
            {
                // ----- ADD K2011/12/09 ---------------------------<<<<<
                if (this._salesSlipInputAcs.SalesDateErrFlag)
                {
                    salesDateErrFlag = true;
                    this._salesSlipInputAcs.SalesDateErrFlag = false;
                    result = -1;
                    cmtFlag = false;
                    slipNote2ErrFlag = false;
                    return;
                }
                else
                {
                    salesDateErrFlag = false;
                }
            }//ADD K2011/12/09
            // ----- ADD K2011/09/01 ---------------------------<<<<< 
            // ----- ADD K2011/08/12 --------------------------->>>>>
            // ----- ADD K2011/12/09 --------------------------->>>>>
            if (this._enterpriseCode == login_EnterpriseCode)
            {
                // ----- ADD K2011/12/09 ---------------------------<<<<<
                if (this._salesSlipInputAcs.SlipNote2ErrFlag)
                {
                    slipNote2ErrFlag = true;
                    this._salesSlipInputAcs.SlipNote2ErrFlag = false;
                    result = -1;
                    cmtFlag = false;
                    salesDateErrFlag = false; //ADD K2011/09/01
                    return;
                }
                else
                {
                    slipNote2ErrFlag = false;
                }
            }//ADD K2011/12/09
            // ----- ADD K2011/08/12 ---------------------------<<<<<   

            _carMngCode = carMngCode;
            result = -1;
            this._salesSlipInputAcs.PrintSlipFlag = printSlipFlag;

            SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "Save", "▼▼▼保存処理　開始");
            // --- UPD m.suzuki 2010/06/12 ---------->>>>>
            //bool isSave = this.Save(true, true);
            // 2011/01/31 >>>
            //bool isSave = this.Save( true, true, ref isMakeQR , scmFlg);

            cmtFlag = false;
            bool isSave = this.Save(true, true, ref isMakeQR, ref scmFlg, ref  cmtFlag);
            // 2011/01/31 <<<
            // --- UPD m.suzuki 2010/06/12 ----------<<<<<
            // ----- ADD K2011/09/01 --------------------------->>>>>
            // ----- ADD K2011/12/09 --------------------------->>>>>
            if (this._enterpriseCode == login_EnterpriseCode)
            {
                // ----- ADD K2011/12/09 ---------------------------<<<<<
                if (this._salesSlipInputAcs.SalesDateErrFlag)
                {
                    salesDateErrFlag = true;
                    this._salesSlipInputAcs.SalesDateErrFlag = false;
                }
                else
                {
                    salesDateErrFlag = false;
                }
            }// ADD K2011/12/09
            // ----- ADD K2011/09/01 ---------------------------<<<<< 
            // ----- ADD K2011/08/12 --------------------------->>>>>
            // ----- ADD K2011/12/09 --------------------------->>>>>
            if (this._enterpriseCode == login_EnterpriseCode)
            {
                // ----- ADD K2011/12/09 ---------------------------<<<<<
                if (this._salesSlipInputAcs.SlipNote2ErrFlag)
                {
                    slipNote2ErrFlag = true;
                    this._salesSlipInputAcs.SlipNote2ErrFlag = false;
                }
                else
                {
                    slipNote2ErrFlag = false;
                }
            } // ADD K2011/12/09
            // ----- ADD K2011/08/12 ---------------------------<<<<< 
            SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "Save", "▲▲▲保存処理　終了");

            if (isSave)
            {
                //>>>2010/05/30
                //DialogResult dialogResult = TMsgDisp.Show(
                //    _owner,
                //    emErrorLevel.ERR_LEVEL_QUESTION,
                //    "TODO",
                //    "続けて入力しますか？",
                //    0,
                //    MessageBoxButtons.YesNo,
                //    MessageBoxDefaultButton.Button2);

                //bool keepAcptAnOdrStatus = false;
                //bool keepDate = false;

                //SalesSlip svSalesSlip = this._salesSlipInputAcs.SalesSlip.Clone(); // ADD 2009/11/13

                //if (dialogResult == DialogResult.Yes)
                //{
                //    // ヘッダ情報はクリアしない
                //    keepDate = true; // 日付保持
                //    keepAcptAnOdrStatus = true; // 受注ステータス保持

                //    // クリア処理
                //    this.Clear(false, keepAcptAnOdrStatus, keepDate, true, true, false);

                //    // 見積初期値設定情報
                //    SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;
                //    this._salesSlipInputAcs.SettingSalesSlipEstimateDef(ref salesSlip, this._salesSlipInputInitDataAcs.GetEstimateDefSet());
                //    this._salesSlipInputAcs.Cache(salesSlip);

                //    // 車輌情報キャッシュ
                //    if (this._salesSlipInputAcs.SvAcceptOdrCar != null)
                //    {
                //        this._salesSlipInputAcs.CacheCarInfo(1, null, null, this._salesSlipInputAcs.SvAcceptOdrCar);
                //        this.SetDisplayCarInfo(1, CarSearchType.csNone);
                //        this._salesSlipInputAcs.SearchCarDiv = false;
                //    }

                //    // 担当者(ログイン担当者)
                //    this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd = svSalesSlip.SalesEmployeeCd;
                //    this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm = svSalesSlip.SalesEmployeeNm;

                //    // 売上データクラス→画面格納処理
                //    this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

                //    //this.panel_Detail.Focus();
                //    //this._salesSlipDetailInput.FirstEnter = true;
                //    //this._salesSlipDetailInput.uGrid_Details.Focus();
                //    result = 0;
                //}
                //else
                //{
                //    // 全てクリア(初期状態へ)
                //    keepDate = (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipDateClrDivCd == (int)SalesSlipInputAcs.SlipDateClrDivCd.InputDate) ? true : false;
                //    keepAcptAnOdrStatus = false; // 受注ステータス保持

                //    // クリア処理
                //    this.Clear(false, keepAcptAnOdrStatus, keepDate, false, false, false);

                //    // 担当者(ログイン担当者)
                //    this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd = svSalesSlip.SalesEmployeeCd;
                //    this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm = svSalesSlip.SalesEmployeeNm;

                //    // 受注者
                //    this._salesSlipInputAcs.SalesSlip.FrontEmployeeCd = svSalesSlip.FrontEmployeeCd;
                //    this._salesSlipInputAcs.SalesSlip.FrontEmployeeNm = svSalesSlip.FrontEmployeeNm;

                //    // 発行者
                //    this._salesSlipInputAcs.SalesSlip.SalesInputCode = svSalesSlip.SalesInputCode;
                //    this._salesSlipInputAcs.SalesSlip.SalesInputName = svSalesSlip.SalesInputName;

                // 2011/01/31 >>>
                //if (!scmFlg)
                if (!(scmFlg && cmtFlag))
                // 2011/01/31 <<<
                {
                    // UPD 2013/03/28 SCM障害№192対応 --------------------------------------->>>>>
                    #region 旧ソース
                    //DialogResult dialogResult = TMsgDisp.Show(
                    //    _owner,
                    //    emErrorLevel.ERR_LEVEL_QUESTION,
                    //    "TODO",
                    //    "続けて入力しますか？",
                    //    0,
                    //    MessageBoxButtons.YesNo,
                    //    MessageBoxDefaultButton.Button2);

                    //bool keepAcptAnOdrStatus = false;
                    //bool keepDate = false;

                    //SalesSlip svSalesSlip = this._salesSlipInputAcs.SalesSlip.Clone(); // ADD 2009/11/13

                    //// --- ADD 2010/07/14 ---------->>>>>
                    //// 担当者
                    //String salesEmployeeCd = this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd;
                    //String salesEmployeeNm = this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm;
                    //// --- ADD 2010/07/14 ----------<<<<<

                    //if (dialogResult == DialogResult.Yes)
                    //{
                    //    // ヘッダ情報はクリアしない
                    //    keepDate = true; // 日付保持
                    //    keepAcptAnOdrStatus = true; // 受注ステータス保持

                    //    // --- ADD 2010/07/13 ---------->>>>>
                    //    // 担当者
                    //    //String salesEmployeeCd = this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd;
                    //    //String salesEmployeeNm = this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm;
                    //    // --- ADD 2010/07/13 ----------<<<<<

                    //    // クリア処理
                    //    //this.Clear(false, keepAcptAnOdrStatus, keepDate, true, true, false);   //DEL 2010/06/02
                    //    string customSnmTemp = this._salesSlipInputAcs.SalesSlip.CustomerSnm;    //ADD 2010/11/02
                    //    // --- ADD 2012/10/30 T.Nishi ---------->>>>>
                    //    string ResultsAddUpSecCd = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
                    //    string ResultsAddUpSecNm = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
                    //    // --- ADD 2012/10/30 T.Nishi ----------<<<<<
                    //    this.Clear(false, keepAcptAnOdrStatus, keepDate, true, true, false, false, 0);   //ADD 2010/06/02
                    //    this._salesSlipInputAcs.SalesSlip.CustomerSnm = customSnmTemp;           //ADD 2010/11/02
                    //    // --- ADD 2012/10/30 T.Nishi ---------->>>>>
                    //    this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd = ResultsAddUpSecCd;
                    //    this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm = ResultsAddUpSecNm;
                    //    // --- ADD 2012/10/30 T.Nishi ----------<<<<<
                    //    // 見積初期値設定情報
                    //    SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;
                    //    this._salesSlipInputAcs.SettingSalesSlipEstimateDef(ref salesSlip, this._salesSlipInputInitDataAcs.GetEstimateDefSet());
                    //    this._salesSlipInputAcs.Cache(salesSlip);

                    //    // 車輌情報キャッシュ
                    //    if (this._salesSlipInputAcs.SvAcceptOdrCar != null)
                    //    {
                    //        this._salesSlipInputAcs.CacheCarInfo(1, null, null, this._salesSlipInputAcs.SvAcceptOdrCar);
                    //        this.SetDisplayCarInfo(1, CarSearchType.csNone);
                    //        this._salesSlipInputAcs.SearchCarDiv = false;
                    //    }

                    //    // --- ADD 2010/07/13 ---------->>>>>
                    //    //// 担当者(ログイン担当者)
                    //    //if (this._salesSlipInputAcs.SalesSlip.CustomerCode != 0)
                    //    //{
                    //    //this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd = salesEmployeeCd;
                    //    //this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm = salesEmployeeNm;
                    //    //}
                    //    // --- ADD 2010/07/13 ----------<<<<<

                    //    // 売上データクラス→画面格納処理
                    //    this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

                    //    //this.panel_Detail.Focus();
                    //    //this._salesSlipDetailInput.FirstEnter = true;
                    //    //this._salesSlipDetailInput.uGrid_Details.Focus();
                    //    result = 0;
                    //}
                    //else
                    //{
                    //    // 全てクリア(初期状態へ)
                    //    keepDate = (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipDateClrDivCd == (int)SalesSlipInputAcs.SlipDateClrDivCd.InputDate) ? true : false;
                    //    keepAcptAnOdrStatus = false; // 受注ステータス保持

                    //    // --- ADD 2010/07/13 ---------->>>>>
                    //    // 担当者
                    //    //String salesEmployeeCd = this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd;
                    //    //String salesEmployeeNm = this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm;
                    //    // --- ADD 2010/07/13 ----------<<<<<

                    //    // クリア処理
                    //    //this.Clear(false, keepAcptAnOdrStatus, keepDate, false, false, false);   //DEL 2010/06/02
                    //    this.Clear(false, keepAcptAnOdrStatus, keepDate, false, false, false, false, 0);  //ADD 2010/06/02

                    //    // --- DEL 2010/06/02 ---------->>>>>
                    //    // 担当者(ログイン担当者)
                    //    //this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd = svSalesSlip.SalesEmployeeCd;
                    //    //this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm = svSalesSlip.SalesEmployeeNm;
                    //    // --- DEL 2010/06/02 ----------<<<<<

                    //    // --- ADD 2010/07/13 ---------->>>>>
                    //    //// 担当者(ログイン担当者)
                    //    //if (this._salesSlipInputAcs.SalesSlip.CustomerCode != 0)
                    //    //{
                    //    //this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd = salesEmployeeCd;
                    //    //this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm = salesEmployeeNm;
                    //    //}
                    //    // --- ADD 2010/07/13 ----------<<<<<

                    //    // 受注者
                    //    this._salesSlipInputAcs.SalesSlip.FrontEmployeeCd = svSalesSlip.FrontEmployeeCd;
                    //    this._salesSlipInputAcs.SalesSlip.FrontEmployeeNm = svSalesSlip.FrontEmployeeNm;

                    //    // 発行者
                    //    this._salesSlipInputAcs.SalesSlip.SalesInputCode = svSalesSlip.SalesInputCode;
                    //    this._salesSlipInputAcs.SalesSlip.SalesInputName = svSalesSlip.SalesInputName;

                    //    // 売上データクラス→画面格納処理
                    //    this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

                    //    //this.timer_InitialSetFocus.Enabled = true;
                    //    result = 1;
                    //}
                    #endregion
                    DialogResult dialogResult = new DialogResult();
                    dialogResult = DialogResult.No;

                    bool keepAcptAnOdrStatus = false;
                    bool keepDate = false;

                    SalesSlip svSalesSlip = this._salesSlipInputAcs.SalesSlip.Clone();

                    // 担当者
                    String salesEmployeeCd = this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd;
                    String salesEmployeeNm = this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm;

                    // 未読の問合せ又は発注があるか否か
                    if (this._salesSlipInputAcs._inputOverCountFlag)
                    {
                        dialogResult = TMsgDisp.Show(
                            _owner,
                            emErrorLevel.ERR_LEVEL_QUESTION,
                            "TODO",
                            // UPD 2013/11/27 商品保証課Redmine#710対応 --------------------------------->>>>>
                            //"同一問合せ番号の続きがあります。続けて入力しますか？",
                            "未処理の同一問合せデータがあります。続けて入力しますか？",
                            // UPD 2013/11/27 商品保証課Redmine#710対応 ---------------------------------<<<<<
                            0,
                            MessageBoxButtons.YesNo,
                            // UPD 2013/11/26 吉岡 VSS[019] Redmine103 --------->>>>>>>>>>>>>>>>>>>>>>>>>
                            // MessageBoxDefaultButton.Button2);
                            MessageBoxDefaultButton.Button1);
                            // UPD 2013/11/26 吉岡 VSS[019] Redmine103 ---------<<<<<<<<<<<<<<<<<<<<<<<<<

                        // "はい"選択の場合、クリアしてから未読分の読込
                        if (dialogResult == DialogResult.Yes)
                        {
                            // ヘッダ情報はクリアしない
                            keepDate = true; // 日付保持
                            keepAcptAnOdrStatus = true; // 受注ステータス保持

                            // 未読の問合せ、又は発注がある場合に使用する情報を保持
                            // 未読分が無い場合は使用しない
                            long inquiryNum = this._salesSlip.InquiryNumber;
                            int acptAnOdrStatus = this._salesSlip.AcptAnOdrStatus;
                            string salesSlipNum = this._defaultSalesSlipNumDf;
                            string inqOriginalEpCd = this._salesSlip.InqOriginalEpCd.Trim();//@@@@20230303
                            string inqOriginalSecCd = this._salesSlip.InqOriginalSecCd;
                            int inqOrdDivCd = this._salesSlip.InqOrdDivCd;
                            short cancelDiv = (short)this._salesSlip.SalesSlipCd;

                            // クリア処理
                            string customSnmTemp = this._salesSlipInputAcs.SalesSlip.CustomerSnm;
                            string ResultsAddUpSecCd = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
                            string ResultsAddUpSecNm = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
                            this.Clear(false, keepAcptAnOdrStatus, keepDate, true, true, false, false, 0);
                            this._salesSlipInputAcs.SalesSlip.CustomerSnm = customSnmTemp;
                            this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd = ResultsAddUpSecCd;
                            this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm = ResultsAddUpSecNm;
                            // 見積初期値設定情報
                            SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;
                            this._salesSlipInputAcs.SettingSalesSlipEstimateDef(ref salesSlip, this._salesSlipInputInitDataAcs.GetEstimateDefSet());
                            this._salesSlipInputAcs.Cache(salesSlip);

                            // 車輌情報キャッシュ
                            if (this._salesSlipInputAcs.SvAcceptOdrCar != null)
                            {
                                this._salesSlipInputAcs.CacheCarInfo(1, null, null, this._salesSlipInputAcs.SvAcceptOdrCar);
                                this.SetDisplayCarInfo(1, CarSearchType.csNone);
                                this._salesSlipInputAcs.SearchCarDiv = false;
                            }

                            // 売上データクラス→画面格納処理
                            this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

                            // 未読の問合せ、又は発注がある場合は、未読分を読込む
                            if (this._salesSlipInputAcs._inputOverCountFlag)
                            {
                                isSCMSave = this.SCMRead(inquiryNum, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd.Trim(), inqOriginalSecCd, inqOrdDivCd, cancelDiv);//@@@@20230303
                            }

                            result = 0;
                        }
                    }

                    // 未読分の読込が無い場合
                    if (dialogResult.Equals(DialogResult.No))
                    {
                        dialogResult = new DialogResult();
                        dialogResult = TMsgDisp.Show(
                            _owner,
                            emErrorLevel.ERR_LEVEL_QUESTION,
                            "TODO",
                            "続けて入力しますか？",
                            0,
                            MessageBoxButtons.YesNo,
                            MessageBoxDefaultButton.Button2);

                        if (dialogResult == DialogResult.Yes)
                        {
                            // ヘッダ情報はクリアしない
                            keepDate = true; // 日付保持
                            keepAcptAnOdrStatus = true; // 受注ステータス保持

                            // クリア処理
                            string customSnmTemp = this._salesSlipInputAcs.SalesSlip.CustomerSnm;
                            string ResultsAddUpSecCd = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
                            string ResultsAddUpSecNm = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
                            this.Clear(false, keepAcptAnOdrStatus, keepDate, true, true, false, false, 0);
                            this._salesSlipInputAcs.SalesSlip.CustomerSnm = customSnmTemp;
                            this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd = ResultsAddUpSecCd;
                            this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm = ResultsAddUpSecNm;
                            // 見積初期値設定情報
                            SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;
                            this._salesSlipInputAcs.SettingSalesSlipEstimateDef(ref salesSlip, this._salesSlipInputInitDataAcs.GetEstimateDefSet());
                            this._salesSlipInputAcs.Cache(salesSlip);

                            // 車輌情報キャッシュ
                            if (this._salesSlipInputAcs.SvAcceptOdrCar != null)
                            {
                                this._salesSlipInputAcs.CacheCarInfo(1, null, null, this._salesSlipInputAcs.SvAcceptOdrCar);
                                this.SetDisplayCarInfo(1, CarSearchType.csNone);
                                this._salesSlipInputAcs.SearchCarDiv = false;
                            }

                            // 売上データクラス→画面格納処理
                            this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

                            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                            if (this._salesSlipInputAcs.SalesSlip.ConsTaxLayMethod == 0)
                            {
                                // 0:伝票転嫁
                                this._salesSlipInputInitDataAcs.ConsTaxLayMethod = 0;
                                // 消費税率設定新規画面の税率を利用
                                this._salesSlipInputInitDataAcs.TaxRateDiv = 1;
                                // 消費税再設定
                                double taxRate = 0;
                                taxRate = this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate);
                                this._salesSlipInputAcs.SalesSlip.ConsTaxRate = taxRate;
                            }
                            else
                            {
                                this._salesSlipInputInitDataAcs.ConsTaxLayMethod = this._salesSlipInputAcs.SalesSlip.ConsTaxLayMethod;
                                // 伝票転嫁以外の場合、税率マスタの税率を利用する。
                                this._salesSlipInputInitDataAcs.TaxRateDiv = 0;
                            }
                            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<

                            result = 0;
                        }
                        else
                        {
                            // 全てクリア(初期状態へ)
                            keepDate = (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipDateClrDivCd == (int)SalesSlipInputAcs.SlipDateClrDivCd.InputDate) ? true : false;
                            keepAcptAnOdrStatus = false; // 受注ステータス保持

                            // クリア処理
                            this.Clear(false, keepAcptAnOdrStatus, keepDate, false, false, false, false, 0);  //ADD 2010/06/02

                            // 受注者
                            this._salesSlipInputAcs.SalesSlip.FrontEmployeeCd = svSalesSlip.FrontEmployeeCd;
                            this._salesSlipInputAcs.SalesSlip.FrontEmployeeNm = svSalesSlip.FrontEmployeeNm;

                            // 発行者
                            this._salesSlipInputAcs.SalesSlip.SalesInputCode = svSalesSlip.SalesInputCode;
                            this._salesSlipInputAcs.SalesSlip.SalesInputName = svSalesSlip.SalesInputName;

                            // 売上データクラス→画面格納処理
                            this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

                            result = 1;
                        }
                    }
                    // UPD 2013/03/28 SCM障害№192対応 ---------------------------------------<<<<<
                    //追加情報タブ項目Visible設定
                    SettingAddInfoVisible();
                    // --- ADD 2010/07/14 ---------->>>>>
                    // 担当者(ログイン担当者)
                    this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd = salesEmployeeCd;
                    this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm = salesEmployeeNm;
                    // --- ADD 2010/07/14 ----------<<<<<
                }
            }
        }

        /// <summary>
        /// 保存状態
        /// </summary>
        /// <param name="status">保存状態</param>
        public void GetSaveStatus(out int saveStatus)
        {
            saveStatus = this._saveStatus;
        }

        // 2011/01/31 Add >>>
        /// <summary>
        /// オンライン種別取得
        /// </summary>
        /// <param name="onlineKindDiv"></param>
        public void GetOnlineKindDiv(out int onlineKindDiv)
        {
            onlineKindDiv = this._onlineKindDiv;
        }
        // 2011/01/31 Add <<<


        /// <summary>
        /// 画面表示処理（車両情報）
        /// </summary>
        /// <param name="salesRowNo"></param>
        private void SetDisplayCarInfo(int salesRowNo, CarSearchType searchType)
        {
            SalesInputDataSet.CarInfoRow carInfoRow = this._salesSlipInputAcs.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);

            //if (carInfoRow != null) this.SetDisplayCarInfo(carInfoRow, searchType);
        }

        #endregion


        /// <summary>
        /// 部品検索切替処理
        /// </summary>
        /// <param name="clearCarFlag">カラー、トリム、、装備ガイドの内容もクリア 1:する、0：なし</param>
        /// <br>Update Note: 2009/09/08② 張凱 車輌管理機能対応</br>
        /// <br>Update Note: 2010/01/27 高峰 検索モード切替時のフォーカス制御の変更の対応</br>
        public void ChangeSearchMode(int clearCarFlag, bool CheckRowEffectiveFlg, int salesRowNo, bool ContainsFocusFlg, out bool carMngCodeMode)
        {
            carMngCodeMode = false;
            if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.BLCodeSearch)
            {
                this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch;
                //// ---------- ADD 2010/01/27 ---------->>>>>>>>>>
                //this._carMngCode = this.tEdit_CarMngCode.Text;
                //this._categoryNo = this.tNedit_CategoryNo.GetInt();
                //this._modelDesignationNo = this.tNedit_ModelDesignationNo.GetInt();
                //this._fullModel = this.tEdit_FullModel.Text;
                //this._engineModelNm = this.tEdit_EngineModelNm.Text;
                //// ---------- ADD 2010/01/27 ----------<<<<<<<<<<
            }
            else if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch)
            {
                this._salesSlipInputAcs.SearchPartsModeProperty = SalesSlipInputAcs.SearchPartsMode.BLCodeSearch;

                // ---------- ADD 2010/01/27 ---------->>>>>>>>>>
                if (clearCarFlag == 1)
                {
                    for (int i = 0; i < this._salesSlipInputAcs.SalesDetailDataTable.Count; i++)
                    {
                        if (!this.CheckRowEffective(i))
                        {
                            this._salesSlipInputAcs.ClearSalesDetailRow(i + 1);
                        }
                    }
                    ////無効行の場合、品番検索モード->BLコード検索モード変換すると、無効行の内容をクリア
                    //foreach (Infragistics.Win.UltraWinGrid.UltraGridRow row in this._salesSlipDetailInput.uGrid_Details.Rows)
                    //{
                    //    if (!CheckRowEffectiveFlg)
                    //    {
                    //this._salesSlipInputAcs.ClearSalesDetailRow(row.Index + 1);
                    //    }
                    //}
                    //this._salesSlipDetailInput.uGrid_Details.EndUpdate();
                }
                // ---------- ADD 2010/01/27 ----------<<<<<<<<<<
            }

            this.ChangeSearchModeReflect();

            if (clearCarFlag == 1)
            {
                //int salesRowNo = this._salesSlipDetailInput.GetActiveRowSalesRowNo();
                //this._salesSlipInputAcs.ClearCarRelationGuid(salesRowNo);

                //新規登録時の処理
                if (this._salesSlipInputAcs.SalesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal
                    && (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum))
                {
                    if (!ContainsFocusFlg)
                    {
                        if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch)
                        {
                            this._salesSlipInputAcs.ClearCarInfoByGoodsNoSearch();

                            // 車両情報画面表示処理
                            this.SetDisplayCarInfo(salesRowNo, CarSearchType.csNone);
                        }
                    }

                    if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.BLCodeSearch)
                    {
                        carMngCodeMode = false;

                        if (this._salesSlipInputInitDataAcs.Opt_CarMng == (int)SalesSlipInputInitDataAcs.Option.ON
                            && this._salesSlipInputInitDataAcs.GetSalesTtlSt().CarMngNoDispDiv == 1
                            && (this._salesSlipInputAcs.SalesSlip.CarMngDivCd == 1 ||
                            this._salesSlipInputAcs.SalesSlip.CarMngDivCd == 2))
                        {
                            carMngCodeMode = true;
                        }

                        //if (!this._salesSlipDetailInput.uGrid_Details.ContainsFocus)
                        //{
                        //    if (!string.IsNullOrEmpty(this.tEdit_CarMngCode.Text) && carMngCodeMode)
                        //    {
                        //        // 管理番号
                        //        this.tEdit_CarMngCode.Focus();
                        //    }
                        //    else if (this.tNedit_CategoryNo.GetInt() != 0)
                        //    {
                        //        // 類別番号
                        //        this.tNedit_CategoryNo.Focus();
                        //    }
                        //    else if (this.tNedit_ModelDesignationNo.GetInt() != 0)
                        //    {
                        //        // 型式指定番号
                        //        this.tNedit_ModelDesignationNo.Focus();
                        //    }
                        //    else if (!string.IsNullOrEmpty(this.tEdit_FullModel.Text))
                        //    {
                        //        // フル型式
                        //        this.tEdit_FullModel.Focus();
                        //    }
                        //    else if (!string.IsNullOrEmpty(this.tEdit_EngineModelNm.Text))
                        //    {
                        //        // エンジン型式
                        //        this.tEdit_EngineModelNm.Focus();
                        //    }
                        //}
                        //else
                        //{
                        //    if (this._carMngCode != this.tEdit_CarMngCode.Text
                        //        || this._categoryNo != this.tNedit_CategoryNo.GetInt()
                        //        || this._modelDesignationNo != this.tNedit_ModelDesignationNo.GetInt()
                        //        || this._fullModel != this.tEdit_FullModel.Text
                        //        || this._engineModelNm != this.tEdit_EngineModelNm.Text)
                        //    {
                        //        if (!string.IsNullOrEmpty(this.tEdit_CarMngCode.Text) && carMngCodeMode)
                        //        {
                        //            // 管理番号
                        //            this.tEdit_CarMngCode.Focus();
                        //        }+
                        //        else if (this.tNedit_CategoryNo.GetInt() != 0)
                        //        {
                        //            // 類別番号
                        //            this.tNedit_CategoryNo.Focus();
                        //        }
                        //        else if (this.tNedit_ModelDesignationNo.GetInt() != 0)
                        //        {
                        //            // 型式指定番号
                        //            this.tNedit_ModelDesignationNo.Focus();
                        //        }
                        //        else if (!string.IsNullOrEmpty(this.tEdit_FullModel.Text))
                        //        {
                        //            // フル型式
                        //            this.tEdit_FullModel.Focus();
                        //        }
                        //        else if (!string.IsNullOrEmpty(this.tEdit_EngineModelNm.Text))
                        //        {
                        //            // エンジン型式
                        //            this.tEdit_EngineModelNm.Focus();
                        //        }
                        //    }
                        //}
                    }
                }
            }
        }

        /// <summary>
        /// 移動先テーブル再設定処理
        /// </summary>
        public void ReSettingEnterMoveTable()
        {

            //-----------------------------------------------------------------------------
            // 移動先頭項目再設定
            //-----------------------------------------------------------------------------
            //if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.BLCodeSearch)
            //{
            //    //-----------------------------------------------------------------------------
            //    // BLコード検索時
            //    //-----------------------------------------------------------------------------
            //    this._startKeyName = this._salesDetailDataTable.BLGoodsCodeColumn.ColumnName;
            //    this._startKeyNameInit = this._salesDetailDataTable.BLGoodsCodeColumn.ColumnName;

            //}
            //else
            //{
            //-----------------------------------------------------------------------------
            // 品番検索時
            //-----------------------------------------------------------------------------
            this._startKeyName = this._salesDetailDataTable.GoodsNoColumn.ColumnName;
            this._startKeyNameInit = this._salesDetailDataTable.GoodsNoColumn.ColumnName;
            //}

            //-----------------------------------------------------------------------------
            // 移動先テーブルクリア
            //-----------------------------------------------------------------------------
            this._enterMoveTable.Clear();
            this._enterMoveTableInit.Clear();

            //-----------------------------------------------------------------------------
            // 移動先テーブル作成
            //-----------------------------------------------------------------------------
            // 列表示状態クラスリストXMLファイルをデシリアライズ
            List<ColDisplayStatusExp> colDisplayStatusList = DeserializeColDisplayStatus(ct_FILENAME_COLDISPLAYSTATUS);

            // 列表示状態コレクションクラスをインスタンス化
            this._colDisplayStatusList = new ColDisplayStatusList(colDisplayStatusList, this._salesDetailDataTable);
            EnterMoveValue enterMoveValue = null;

            foreach (ColDisplayStatusExp colDisplayStatus in this._colDisplayStatusList.GetColDisplayStatusList())
            {
                // 明細部フォーカス開始項目
                if (colDisplayStatus.Key == SalesSlipInputConstructionAcs.ct_StartPosittion) this._startKeyName = colDisplayStatus.MoveEnterKeyName;
                // 明細部フォーカス終了項目
                if (colDisplayStatus.Key == SalesSlipInputConstructionAcs.ct_EndPosittion) this._endKeyNameList[0] = colDisplayStatus.MoveEnterKeyName;

                //if (_effectiveList.Contains(colDisplayStatus.Key))
                //{
                // 移動先テーブル
                enterMoveValue = new EnterMoveValue();
                enterMoveValue.Key = colDisplayStatus.MoveEnterKeyName;
                enterMoveValue.Enabled = colDisplayStatus.Enabled;
                enterMoveValue.EnabledControl = colDisplayStatus.EnabledControl;
                enterMoveValue.EnterStopControl = colDisplayStatus.EnterStopControl;
                this._enterMoveTable[colDisplayStatus.Key] = enterMoveValue;
                //}
            }
            // 開始終了項目設定
            enterMoveValue = new EnterMoveValue();
            enterMoveValue.Key = this._startKeyName;
            enterMoveValue.Enabled = true;
            enterMoveValue.EnabledControl = false;
            enterMoveValue.EnterStopControl = false;
            this._enterMoveTable[SalesSlipInputConstructionAcs.ct_StartPosittion] = enterMoveValue;
            enterMoveValue = new EnterMoveValue();
            enterMoveValue.Key = this._endKeyNameList[0].ToString();
            enterMoveValue.Enabled = true;
            enterMoveValue.EnabledControl = false;
            enterMoveValue.EnterStopControl = false;
            this._enterMoveTable[SalesSlipInputConstructionAcs.ct_EndPosittion] = enterMoveValue;

            // ユーザー設定アクセスクラスに反映
            this._salesInputConstructionAcs.EnterMoveTable = this._enterMoveTable;

            //-----------------------------------------------------------------------------
            // 初期設定移動先テーブル作成
            //-----------------------------------------------------------------------------
            Dictionary<string, ColDisplayStatusExp> colDisplayStatusExpDic = this._colDisplayStatusList.GetColDisplayInitDictionary();
            ICollection keys = colDisplayStatusExpDic.Keys;
            foreach (string key in keys)
            {
                enterMoveValue = new EnterMoveValue();
                enterMoveValue.Key = colDisplayStatusExpDic[key].MoveEnterKeyName;
                enterMoveValue.Enabled = colDisplayStatusExpDic[key].Enabled;
                enterMoveValue.EnabledControl = colDisplayStatusExpDic[key].EnabledControl;
                enterMoveValue.EnterStopControl = colDisplayStatusExpDic[key].EnterStopControl;
                this._enterMoveTableInit.Add(colDisplayStatusExpDic[key].Key, enterMoveValue);
                //this._enterMoveTableInit[colDisplayStatusExpDic[key].Key].Key = colDisplayStatusExpDic[key].MoveEnterKeyName;
                //this._enterMoveTableInit[colDisplayStatusExpDic[key].Key].Enabled = colDisplayStatusExpDic[key].Enabled;
            }
            enterMoveValue = new EnterMoveValue();
            enterMoveValue.Key = this._startKeyNameInit;
            enterMoveValue.Enabled = true;
            enterMoveValue.EnabledControl = false;
            enterMoveValue.EnterStopControl = false;
            this._enterMoveTableInit[SalesSlipInputConstructionAcs.ct_StartPosittion] = enterMoveValue;
            enterMoveValue = new EnterMoveValue();
            enterMoveValue.Key = this._endKeyNameListInit[0].ToString();
            enterMoveValue.Enabled = true;
            enterMoveValue.EnabledControl = false;
            enterMoveValue.EnterStopControl = false;
            this._enterMoveTableInit[SalesSlipInputConstructionAcs.ct_EndPosittion] = enterMoveValue;

            // ユーザー設定アクセスクラスに反映
            this._salesInputConstructionAcs.EnterMoveTableInit = this._enterMoveTableInit;

        }

        //----ADD 2010/06/17----->>>>>
        public void SetSalesSlip(SalesSlip paraSalesslip)
        {
            //---DEL 2011/11/17 --------------->>>>>
            //---ADD 2011/11/15 ---------------->>>>>
            //if (!(this._salesSlipInputAcs._scmHeaderIListSvForWebCheck != null && this._salesSlipInputAcs._scmHeaderIListSvForWebCheck.Count > 0 && this._salesSlipInputAcs._scmHeaderIListSvForWebCheck[0].InqOrdDivCd != 0))
            //{
            //---DEL 2011/11/17 ---------------<<<<<
            if (this._salesSlipInputAcs.SalesSlip.CustomerCode == paraSalesslip.CustomerCode)
            {
                this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd = paraSalesslip.SalesEmployeeCd;
                this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm = paraSalesslip.SalesEmployeeNm;
            }
            if (!string.IsNullOrEmpty(paraSalesslip.SlipNote))
            {
                this._salesSlipInputAcs.SalesSlip.SlipNote = paraSalesslip.SlipNote;
            }
            else
            {
                this._salesSlipInputAcs.SalesSlip.SlipNote = string.Empty;
            }
            //}// DEL 2011/11/17
            //---ADD 2011/11/15 ----------------<<<<<
            //---ADD 2011/11/15 ---------------->>>>>
            //if (this._salesSlipInputAcs.SalesSlip.CustomerCode == paraSalesslip.CustomerCode)
            //{
            //    this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd = paraSalesslip.SalesEmployeeCd;
            //    this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm = paraSalesslip.SalesEmployeeNm;
            //}
            ////----ADD 2010/08/13----->>>>>
            //if (!string.IsNullOrEmpty(paraSalesslip.SlipNote))
            //{
            //    this._salesSlipInputAcs.SalesSlip.SlipNote = paraSalesslip.SlipNote;
            //}
            //else
            //{
            //    this._salesSlipInputAcs.SalesSlip.SlipNote = string.Empty;
            //}
            ////----ADD 2010/08/13-----<<<<<
            //---ADD 2011/11/15 ----------------<<<<<
        }
        //----ADD 2010/06/17-----<<<<<

        //----ADD 2010/11/02----->>>>>
        /// <summary>
        /// 売上データのセット処理
        /// </summary>
        /// <param name="salesSlip"></param>
        public void SetSalesSlipByObj(SalesSlip salesSlip)
        {
            this._salesSlipInputAcs.SalesSlip = salesSlip.Clone();
        }
        //----ADD 2010/11/02-----<<<<<

        #endregion

        # region Methods ---- zhangkai
        /// <summary>
        /// セルEnabled設定取得処理
        /// </summary>
        /// <param name="keyName">keyName</param>
        /// <return>checkResultInt(0:false;1:true)</return>
        public int GetCellEnabled(string keyName)
        {
            int checkResult = 0;

            if (this._enterMoveTable.ContainsKey(keyName))
            {
                if (this._enterMoveTable[keyName].Enabled)
                {
                    checkResult = 1;
                }
            }
            return checkResult;
        }

        /// <summary>
        /// 移動位置取得処理(Enterキー移動時)
        /// </summary>
        /// <param name="p"></param>
        /// <param name="afterColKeyName"></param>
        /// <param name="startKeyName"></param>
        /// <returns>0:正常取得 -1:例外</returns>
        public void GetNextMovePosition(string p, out string afterColKeyName)
        {
            afterColKeyName = string.Empty;
            if (this._enterMoveTable[p].Key != null)
            {
                afterColKeyName = this._enterMoveTable[p].Key;
            }

            if (!string.IsNullOrEmpty(afterColKeyName))
            {
                //---------------------------------------------
                // 正常取得
                //---------------------------------------------
                if (SalesSlipInputConstructionAcs.ct_StartPosittion == afterColKeyName) afterColKeyName = this._enterMoveTable[afterColKeyName].Key;

                // ADD 2013/02/14 T.Miyamoto ------------------------------>>>>>
                // ユーザー設定で仕入先(仕入情報)の移動制御がチェックされていない場合、仕入伝票番号の移動先を制御
                if (p == "PartySalesSlipNum")
                {
                    if (this._enterMoveTable[SalesSlipInputConstructionAcs.ct_EndPosittion].Key != "SupplierCdForStock")
                    {
                        afterColKeyName = "PartySalesSlipNum";
                    }
                }
                // ADD 2013/02/14 T.Miyamoto ------------------------------<<<<<
            }
        }

        // --- ADD 2010/06/02 ---------->>>>>
        /// <summary>
        /// 移動位置取得処理(Enterキー移動時)
        /// </summary>
        /// <param name="p"></param>
        /// <param name="afterColKeyName"></param>
        /// <param name="startKeyName"></param>
        public void GetPreMovePosition(string p, out string afterColKeyName)
        {
            Dictionary<string, EnterMoveValue> preEnterMoveTable = new Dictionary<string, EnterMoveValue>();

            foreach (string key in this._enterMoveTable.Keys)
            {
                EnterMoveValue enterMoveValue = this._enterMoveTable[key];
                foreach (string keyTmp in this._enterMoveTable.Keys)
                {
                    EnterMoveValue enterMoveValueTmp = this._enterMoveTable[keyTmp];
                    string afterColKeyNameTmp = null;
                    GetNextMovePosition(keyTmp, out afterColKeyNameTmp);
                    if (afterColKeyNameTmp == key)
                    {
                        preEnterMoveTable[key] = enterMoveValueTmp;
                        break;
                    }
                }
            }

            afterColKeyName = string.Empty;
            if (preEnterMoveTable.ContainsKey(p) && preEnterMoveTable[p].Key != null)
            {
                afterColKeyName = preEnterMoveTable[p].Key;
            }

            if (!string.IsNullOrEmpty(afterColKeyName))
            {
                //---------------------------------------------
                // 正常取得
                //---------------------------------------------
                if (SalesSlipInputConstructionAcs.ct_StartPosittion == afterColKeyName) afterColKeyName = preEnterMoveTable[afterColKeyName].Key;
            }
            else
            {
                afterColKeyName = "PartySalesSlipNum";
            }
        }
        // --- ADD 2010/06/02 ----------<<<<<

        /// <summary>
        ///GetParam
        /// </summary>
        /// <param name="startKeyName"></param>
        public void GetParam(out string startKeyName, out string endKeyNameList)
        {
            startKeyName = string.Empty;
            endKeyNameList = string.Empty;

            startKeyName = this._startKeyName;
            foreach (string str in _endKeyNameList)
            {
                endKeyNameList += str + "-";
            }
        }

        /// <summary>
        /// フォーカス移動対象判定処理
        /// </summary>
        /// <param name="keyName"></param>
        /// <returns>True:移動対象 False:移動対象外</returns>
        public int GetEffectiveJudgment(string keyName)
        {
            ICollection keys = this._enterMoveTable.Keys;
            foreach (object key in keys)
            {
                if (keyName == key.ToString())
                {
                    return 1;
                }
            }
            return 0;
        }

        #region ●ガイドボタンクリックイベント処理
        /// <summary>
        /// ガイドボタンクリックイベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="e">イベントパラメータクラス</param>
        /// <remarks>
        /// <br>Update Note: 2010/07/01 張凱 PM.NS障害・改良対応</br>
        /// <br>             入力せずにガイドからBO区分を選択すると、発注データが作成されません。</br>
        /// <br>             納品区分・H納品区分・指定拠点が変更された場合は、すべての同一発注先の明細に対して、設定内容を反映する</br>
        /// <br>Update Note: 2010/07/09 呉元嘯 PM.NS障害・改良対応 </br>
        /// <br>             仕入先ガイドを表示して、戻るボタンでキャンセル時は仕入先コードを書き換え無いように修正。</br>
        /// <br>Update Note: 2011/05/30 曹文傑</br>
        /// <br>             キャンペーン売価を取得するように変更</br>
        /// <br>UpdateNote :  2011/07/06 譚洪 Redmine#22777 BLコードを変更時に価格情報の再取得メッセージを出さないように仕様変更</br>
        /// <br>UpdateNote : 2011/08/12 譚洪 Redmine#23554 キャンペーンの売価「売価率、値引率、売価額」が設定されている場合は、掛率マスタの売価の設定をクリアするように仕様変更の対応</br>
        /// <br>UpdateNote : 2011/08/15 譚洪 Redmine#23554 キャンペーンの売価「売価率、値引率、売価額」が設定されている場合は、掛率マスタの売価の設定をクリアするように仕様変更の対応</br>
        /// <br>UpdateNote : 2011/09/05 譚洪 Redmine#23965 販売区分を変更時の価格再取得のメッセージ表示の対応</br>
        /// <br>UpdateNote : 2011/09/08 譚洪 Redmine#23965 販売区分を変更時の価格再取得のメッセージ表示の対応</br>
        /// <br>UpdateNote : 2011/09/14 譚洪 Redmine#25016 販売区分を変更時の価格再取得のメッセージ表示の対応</br>
        /// <br>UpdateNote : 2011/09/16 譚洪 Redmine#25195 売上伝票入力で売単価がクリアされてしまうの対応</br>
        /// <br>Update Note: 2011/10/29 鄧潘ハン</br>
        /// <br>             ReadMine#26251 全体初期値設定の明細算出後在庫数表示区分を「行移動時反映」に設定した状態で、</br>
        /// <br>             売上伝票入力で明細を入力して倉庫をガイドから選択、</br>
        /// <br>             又はF8で倉庫切替を行うと、最初から在庫数が変更された状態で表示されるため、</br>
        /// <br>             ガイドからの選択直後は在庫数を変更しないように修正</br>
        /// <br>UpdateNote : 2011/11/01 yangmj Redmine#26224 販売区分の対応</br>
        /// <br>Update Note: 2011/12/23 陳建明</br>
        /// <br>管理番号   : 10707327-00 2012/01/25配信分</br> 
        ///                  Redmine#27455 売上伝票入力/ＢＯ区分の表示の対応</br>
        /// <br>Update Note: 2012/02/28 鄧潘ハン</br>
        /// <br>管理番号   : 10707327-00 2012/03/28配信分</br>
        /// <br>             Redmine#27385 原価の金額が不正についての対応</br>
        /// <br>Update Note: 2015/04/16 30757 佐々木 貴英</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br>             社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応</br>
        /// <br>Update Note: K2016/12/14 時シン</br>
        /// <br>管理番号   : 11202330-00</br>
        /// <br>             山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応</br>
        /// <br>Update Note: K2016/12/30 譚洪</br>
        /// <br>管理番号   : 11202452-00</br>
        /// <br>             水野商工様個別変更内容をPM.NSにて実現するため、第二売価の対応行います。</br>
        /// <br>Update Note: 2021/03/16 陳艶丹</br>
        /// <br>管理番号   : 11770032-00</br>
        /// <br>           : PMKOBETSU-4133 売上伝票入力原価0円障害の対応</br>
        /// <br>Update Note: 2021/05/20 陳艶丹</br>
        /// <br>管理番号   : 11770032-00</br>
        /// <br>           : BLINCIDENT-2978 受注伝票明細金額が0の障害対応</br> 
        /// <br>Update Note: K2021/07/22 陳艶丹</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>           : PMKOBETSU-4148 原価0円障害の対応</br> 
        /// <br>Update Note: K2021/07/27 譚洪</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>           : PMKOBETSU-4148 売上データ原価0円障害（登録時）</br>  
        /// </remarks>
        public int uButtonGuideClick(int rowIndexParm, string columnName)
        {
            this._salesDetailDataTable.AcceptChanges();

            // ActiveRowインデックス取得処理
            int rowIndex = rowIndexParm;
            if (rowIndex == -1) return -1;

            // ガイド入力チェック
            if (columnName == "") return -1;

            // 売上行番号を取得
            int salesRowNo = this._salesDetailDataTable[rowIndex].SalesRowNo;

            #region ●仕入情報設定
            this._salesSlipInputAcs.SettingStockTempInfo(salesRowNo);
            #endregion

            try
            {
                #region 販売区分
                //---------------------------------------------
                // 販売区分
                //---------------------------------------------
                if (columnName == this._salesDetailDataTable.SalesCodeColumn.ColumnName)
                {
                    // --- ADD 譚洪 K2014/01/22 ---------->>>>>
                    if (this._salesSlipInputInitDataAcs.Opt_NoBuTo == (int)SalesSlipInputInitDataAcs.Option.ON)
                    {
                        return 0;
                    }
                    // --- ADD 譚洪 K2014/01/22 ----------<<<<<
                    UserGdHd userGdHd;
                    UserGdBd userGdBd;

                    bool salesCodeMsgFlg = false;  // ADD 2011/09/05

                    UserGuideAcs userGuideAcs = new UserGuideAcs();

                    int st = userGuideAcs.ExecuteGuid(this._enterpriseCode, out userGdHd, out userGdBd, SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_SalesCode);

                    if (st == 0)
                    {
                        // ---ADD 2011/05/30---------------->>>>>
                        SalesInputDataSet.SalesDetailRow row = this._salesSlipInputAcs.GetSalesDetailRow(salesRowNo);
                        int bfSalesCode = row.SalesCode;
                        // ---ADD 2011/05/30----------------<<<<<

                        // ---ADD 2011/11/01---------------->>>>>
                        this._salesDetailDataTable[rowIndexParm].SalesCode = userGdBd.GuideCode;
                        // --- UPD 2013/09/27 T.Miyamoto ------------------------------>>>>>
                        ////>>>2012/02/27
                        ////// 受注情報設定
                        ////this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                        //if ((this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum) ||
                        //    ((this._salesSlipInputAcs.SalesSlip.SalesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum) &&
                        //     (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)))
                        //{
                        //    // 受注情報設定
                        //    this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                        //}
                        ////<<<2012/02/27
                        this._salesSlipInputAcs.ExistSettingSalesDetailAcceptAnOrder(salesRowNo);
                        // --- UPD 2013/09/27 T.Miyamoto ------------------------------<<<<<
                        // ---ADD 2011/11/01---------------->>>>>

                        this._salesSlipInputAcs.SettingSalesDetailRowSalesCodeInfo(salesRowNo, userGdBd.GuideCode, userGdBd.GuideName);

                        // ---ADD 2011/05/30---------------->>>>>
                        if (bfSalesCode != userGdBd.GuideCode)
                        {
                            #region DEL 2011/09/05
                            // ---ADD 2011/08/29--------------------->>>>>
                            //if (this._salesSlipInputAcs.CheckReflectCampaign(salesRowNo))
                            //{
                            // ---ADD 2011/08/29---------------------<<<<<
                            //>>>2011/08/24
                            //DialogResult dialogResult = TMsgDisp.Show(
                            //    this._form,
                            //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            //    "",
                            //    "販売区分が変更されました。" + "\r\n" + "\r\n" +
                            //    "商品価格を再取得しますか？",
                            //    0,
                            //    MessageBoxButtons.YesNo,
                            //    MessageBoxDefaultButton.Button1);

                            //if (dialogResult == DialogResult.Yes)
                            //{
                            //    StockTemp stockTemp = this._salesSlipStockInfoInputAcs.StockTemp.Clone();

                            //    // 価格情報再設定
                            //    this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                            //    // 売上金額計算処理
                            //    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                            //    // 原価金額計算処理
                            //    this._salesSlipInputAcs.CalculationCost(rowIndex);

                            //    // 明細粗利率設定処理
                            //    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                            //    // 一式情報設定処理
                            //    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                            //    // 単価再計算有り(掛率から一括取得)
                            //    this._salesSlipStockInfoInputAcs.CalclationUnitPrice(ref stockTemp);

                            //    // 仕入金額再計算
                            //    this._salesSlipStockInfoInputAcs.CalculationStockPrice(ref stockTemp);

                            //    // メモリ上の内容と比較する
                            //    this._salesSlipStockInfoInputAcs.Cache(stockTemp);
                            //}
                            // 売価率・売価額が異なる、ｷｬﾝﾍﾟｰﾝｺｰﾄﾞが異なるの場合、
                            //DialogResult dialogResult = TMsgDisp.Show(
                            //    this._form,
                            //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            //    "",
                            //    "販売区分が変更されました。" + "\r\n" + "\r\n" +
                            //    "商品価格を再取得しますか？",
                            //    0,
                            //    MessageBoxButtons.YesNo,
                            //    MessageBoxDefaultButton.Button1);

                            //if (dialogResult == DialogResult.Yes)
                            //{
                            //    StockTemp stockTemp = this._salesSlipStockInfoInputAcs.StockTemp.Clone();

                            //    // 価格情報再設定
                            //    this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                            //    // 売上金額計算処理
                            //    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                            //    // 原価金額計算処理
                            //    this._salesSlipInputAcs.CalculationCost(rowIndex);

                            //    // 明細粗利率設定処理
                            //    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                            //    // 一式情報設定処理
                            //    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                            //    // 単価再計算有り(掛率から一括取得)
                            //    this._salesSlipStockInfoInputAcs.CalclationUnitPrice(ref stockTemp);

                            //    // 仕入金額再計算
                            //    this._salesSlipStockInfoInputAcs.CalculationStockPrice(ref stockTemp);

                            //    // メモリ上の内容と比較する
                            //    this._salesSlipStockInfoInputAcs.Cache(stockTemp);
                            //}
                            //<<<2011/08/24
                            //}// ADD 2011/08/29
                            #endregion


                            // ---- UPD 2011/09/14 -------------------------------------- >>>>>>>>>>>
                            int campaignSettingKind = row.CampaignSettingKind;

                            // ADD 2011/09/05 --- >>>>>
                            #region 販売区分を変更時の価格再取得のメッセージ表示の判定方法
                            // 変更前のキャンペーン情報を検索しないの場合
                            if (row != null && row.CampaignCode != 0
                                && (row.CampaignPriceFl != 0 || row.CampaignRate != 0 || row.CampaignDiscountRate != 0))
                            {
                                int campaignCode = row.CampaignCode;
                                double campaignPriceFl = row.CampaignPriceFl;
                                double campaignRate = row.CampaignRate;
                                double campaignDiscountRate = row.CampaignDiscountRate;

                                this._salesSlipInputAcs.CheckReflectCampaign(row, userGdBd.GuideCode);

                                if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                                {
                                    // 変更前キャンペーンの売価率、値引き、売価額は変更後の売価率、値引き、売価額と同じ
                                    if (campaignCode == this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode
                                        && campaignPriceFl == this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl
                                        && campaignRate == this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal
                                        && campaignDiscountRate == this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate)
                                    {
                                        this._salesSlipInputAcs._salesUnitPriceForCheck = 0;
                                        this._salesSlipInputAcs._salesRateForCheck = 0;

                                        // 価格情報再設定
                                        this._salesSlipInputAcs.SalesDetailRowGoodsPriceForSalesCodeCheck(salesRowNo);

                                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0)
                                        {
                                            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate
                                                || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                            {
                                                if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                    || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                    || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                                {
                                                    salesCodeMsgFlg = true;
                                                }
                                            }
                                        }
                                        else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != 0)
                                        {
                                            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != row.CampaignPriceFl
                                                || this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate  // ADD 2011/09/08
                                                || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                            {
                                                if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                    || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                    || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                                {
                                                    salesCodeMsgFlg = true;
                                                }
                                            }
                                        }
                                        else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0)
                                        {
                                            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != row.CampaignDiscountRate
                                                || this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate  // ADD 2011/09/08
                                                || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                            {
                                                if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                    || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                    || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                                {
                                                    salesCodeMsgFlg = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //なし。
                                        }
                                    }
                                    else
                                    {
                                        if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                        {
                                            salesCodeMsgFlg = true;
                                        }
                                    }
                                }
                                else
                                {
                                    if (campaignSettingKind == 6)
                                    {
                                        salesCodeMsgFlg = true;
                                    }

                                    // --- DEL 2011/09/08 --- >>>>>
                                    //row.CampaignCode = 0;
                                    //row.CampaignPriceFl = 0;
                                    //row.CampaignRate = 0;
                                    //row.CampaignDiscountRate = 0;
                                    // --- DEL 2011/09/08 --- <<<<<
                                }
                            }
                            // 変更前のキャンペーン情報を検索するの場合、
                            else
                            {
                                this._salesSlipInputAcs.CheckReflectCampaign(row, bfSalesCode);

                                if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                                {
                                    int campaignCode = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode;
                                    double campaignPriceFl = this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl;
                                    double campaignRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal;
                                    double campaignDiscountRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate;

                                    campaignSettingKind = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind;

                                    row.CampaignCode = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode;
                                    row.CampaignPriceFl = this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl;
                                    row.CampaignRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal;
                                    row.CampaignDiscountRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate;
                                    row.CampaignSettingKind = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind;

                                    this._salesSlipInputAcs.CheckReflectCampaign(row, userGdBd.GuideCode);

                                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                                    {
                                        // 変更前キャンペーンの売価率、値引き、売価額は変更後の売価率、値引き、売価額と同じ
                                        if (campaignCode == this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode
                                            && campaignPriceFl == this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl
                                            && campaignRate == this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal
                                            && campaignDiscountRate == this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate)
                                        {
                                            this._salesSlipInputAcs._salesUnitPriceForCheck = 0;
                                            this._salesSlipInputAcs._salesRateForCheck = 0;

                                            // 価格情報再設定
                                            this._salesSlipInputAcs.SalesDetailRowGoodsPriceForSalesCodeCheck(salesRowNo);

                                            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0)
                                            {
                                                if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate
                                                    || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                                {
                                                    if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                        || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                        || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                                    {
                                                        salesCodeMsgFlg = true;
                                                    }
                                                }
                                            }
                                            else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != 0)
                                            {
                                                if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != row.CampaignPriceFl
                                                    || this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate  // ADD 2011/09/08
                                                    || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                                {
                                                    if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                        || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                        || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                                    {
                                                        salesCodeMsgFlg = true;
                                                    }
                                                }
                                            }
                                            else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0)
                                            {
                                                if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != row.CampaignDiscountRate
                                                    || this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate  // ADD 2011/09/08
                                                    || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                                {
                                                    if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                        || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                        || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                                    {
                                                        salesCodeMsgFlg = true;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //なし。
                                            }
                                        }
                                        // 変更前キャンペーンの売価率、値引き、売価額は変更後の売価率、値引き、売価額と不同じ
                                        else
                                        {
                                            if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                            {
                                                salesCodeMsgFlg = true;
                                            }
                                        }

                                        // --- DEL 2011/09/08 ---- >>>>>
                                        //row.CampaignCode = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode;
                                        //row.CampaignPriceFl = this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl;
                                        //row.CampaignRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal;
                                        //row.CampaignDiscountRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate;
                                        // --- DEL 2011/09/08 ---- <<<<<
                                    }
                                    else
                                    {
                                        if (campaignSettingKind == 6)
                                        {
                                            salesCodeMsgFlg = true;
                                        }

                                        // --- DEL 2011/09/08 --- >>>>>
                                        //row.CampaignCode = 0;
                                        //row.CampaignPriceFl = 0;
                                        //row.CampaignRate = 0;
                                        //row.CampaignDiscountRate = 0;
                                        // --- DEL 2011/09/08 --- <<<<<
                                    }
                                }
                                else
                                {
                                    // --- ADD 2011/09/08 --- >>>>>
                                    row.CampaignCode = 0;
                                    row.CampaignPriceFl = 0;
                                    row.CampaignRate = 0;
                                    row.CampaignDiscountRate = 0;
                                    row.CampaignSettingKind = 0;
                                    // --- ADD 2011/09/08 --- <<<<<

                                    this._salesSlipInputAcs.CheckReflectCampaign(row, userGdBd.GuideCode);

                                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                                    {
                                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                        {
                                            salesCodeMsgFlg = true;
                                        }
                                    }
                                    // --- DEL 2011/09/08 --- >>>>>
                                    //else
                                    //{
                                    //    row.CampaignCode = 0;
                                    //    row.CampaignPriceFl = 0;
                                    //    row.CampaignRate = 0;
                                    //    row.CampaignDiscountRate = 0;
                                    //}
                                    // --- DEL 2011/09/08 --- <<<<<
                                }
                            }
                            #endregion

                            #region 販売区分を変更時の価格再取得のメッセージ表示
                            if (salesCodeMsgFlg)
                            {
                                // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ---------->>>>>
                                if (this._salesSlipInputAcs.CheckWhetherSalesPriceChange())
                                {
                                // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ----------<<<<<
                                    DialogResult dialogResult = TMsgDisp.Show(
                                        this._owner,
                                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                        "",
                                        "販売区分が変更されました。" + "\r\n" + "\r\n" +
                                        "商品価格を再取得しますか？",
                                        0,
                                        MessageBoxButtons.YesNo,
                                        MessageBoxDefaultButton.Button1);

                                    if (dialogResult == DialogResult.Yes)
                                    {
                                        // --- ADD 2011/09/08 ---- >>>>>
                                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                                        {
                                            row.CampaignCode = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode;
                                            row.CampaignPriceFl = this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl;
                                            row.CampaignRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal;
                                            row.CampaignDiscountRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate;
                                            row.CampaignSettingKind = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind;
                                        }
                                        else
                                        {
                                            row.CampaignCode = 0;
                                            row.CampaignPriceFl = 0;
                                            row.CampaignRate = 0;
                                            row.CampaignDiscountRate = 0;
                                            row.CampaignSettingKind = 0;
                                        }
                                        // --- ADD 2011/09/08 ---- <<<<<
                                        // ---- UPD 2011/09/14 -------------------------------------- <<<<<<<

                                        StockTemp stockTemp = this._salesSlipStockInfoInputAcs.StockTemp.Clone();

                                        //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ---------------->>>>>
                                        // 売上明細データセッティング処理（定価設定）用に現在の表示定価金額を一時退避
                                        double tempReturnListPrice = this._salesDetailDataTable[rowIndex].ListPriceDisplay;
                                        //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ----------------<<<<<

                                        // 価格情報再設定
                                        this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                                        // 売上金額計算処理
                                        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                                        // 原価金額計算処理
                                        this._salesSlipInputAcs.CalculationCost(rowIndex);

                                        //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ---------------->>>>>
                                        // 売上明細データセッティング処理（定価設定）
                                        this.SalesDetailRowSalesUnitPriceReSetting(salesRowNo, tempReturnListPrice);
                                        //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ----------------<<<<<

                                        // 明細粗利率設定処理
                                        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                                        // 一式情報設定処理
                                        this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                                        // 単価再計算有り(掛率から一括取得)
                                        this._salesSlipStockInfoInputAcs.CalclationUnitPrice(ref stockTemp);

                                        // 仕入金額再計算
                                        this._salesSlipStockInfoInputAcs.CalculationStockPrice(ref stockTemp);

                                        // メモリ上の内容と比較する
                                        this._salesSlipStockInfoInputAcs.Cache(stockTemp);
                                    }
                                } // ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応
                            }
                            #endregion
                            // ADD 2011/09/05 --- <<<<<

                        }
                        // ---ADD 2011/05/30----------------<<<<<
                        this._salesSlipInputAcs.IsDataChanged = true;

                        //this.MoveReturnCell();

                        return 0;
                    }
                }
                #endregion

                // --- ADD K2016/12/30 譚洪 水野商工㈱  --- >>>>>
                #region 明細備考
                // 明細備考と水野商工㈱の場合、
                if (columnName == this._salesDetailDataTable.DtlNoteColumn.ColumnName 
                               && this._salesSlipInputInitDataAcs.Opt_Mizuno2ndSellPriceCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
                {

                    // 第二売価
                    string secondSalesUnPrc = string.Empty;
                    // 設定フラグ
                    bool isListPriceFlag = false;

                    // インスタンス生成
                    string errMessage = string.Empty;
                    object obj = this.LoadAssembly("PMHNB01901UC", "Broadleaf.Windows.Forms.PMHNB01901UCA", out errMessage);

                    if (obj == null) return -1;

                    Type type = obj.GetType();
                    System.Reflection.PropertyInfo propertyInfoLeft = type.GetProperty("Left");
                    System.Reflection.PropertyInfo propertyInfoTop = type.GetProperty("Top");
                    // 第二売価ガイドの左位置を設定する。
                    propertyInfoLeft.SetValue(obj, this._locationLeft, null);
                    // 第二売価ガイドの上位置を設定する。
                    propertyInfoTop.SetValue(obj, this._locationTop, null);
                    

                    // メソッド取得
                    Type[] paramTypes = new Type[7];
                    paramTypes[0] = typeof(IWin32Window);
                    paramTypes[1] = typeof(string);
                    paramTypes[2] = typeof(double);
                    paramTypes[3] = typeof(string);
                    paramTypes[4] = typeof(int);

                    paramTypes[5] = typeof(string).MakeByRefType();
                    paramTypes[6] = typeof(bool).MakeByRefType();
                    // 第二売価ガイドを起動する。
                    System.Reflection.MethodInfo myMethod = obj.GetType().GetMethod("ShowGuide", paramTypes);

                    // 処理実行
                    object[] paramValue = new object[7];
                    paramValue[0] = _owner;
                    paramValue[1] = this._enterpriseCode;
                    paramValue[2] = this._salesDetailDataTable[rowIndex].ListPriceDisplay;
                    paramValue[3] = this._salesDetailDataTable[rowIndex].DtlNote;
                    paramValue[4] = this._salesSlipInputAcs.SalesSlip.CustomerCode;
                    paramValue[5] = string.Empty;
                    paramValue[6] = false;

                    object retVal = myMethod.Invoke(obj, paramValue);

                    DialogResult status = DialogResult.None;

                    if (retVal != null)
                    {
                        status = (DialogResult)retVal;
                    }

                    switch (status)
                    {
                        case DialogResult.OK:

                            secondSalesUnPrc = (string)paramValue[5];
                            isListPriceFlag = (bool)paramValue[6];

                            string dtlNote = this._salesDetailDataTable[rowIndex].DtlNote.Trim();

                            // 「第二売価の設定フラグ」が「未設定」の場合、第二売価を先頭に追加します。
                            if (isListPriceFlag)
                            {
                                // 空白→[半角\]＋[第二売価]
                                if (string.IsNullOrEmpty(dtlNote))
                                {
                                    this._salesDetailDataTable[rowIndex].DtlNote = "\\" + secondSalesUnPrc.ToString();
                                }
                                // [説明内容]→[半角\]＋[第二売価]＋[半角空白]＋[説明内容]
                                else
                                {
                                    string newDtlNote = "\\" + secondSalesUnPrc.ToString() + " " + this._salesDetailDataTable[rowIndex].DtlNote;

                                    // ＞40桁の場合、40桁を保留する。
                                    if (newDtlNote.Length > 40)
                                    {
                                        newDtlNote = newDtlNote.Substring(0, 40);
                                    }

                                    this._salesDetailDataTable[rowIndex].DtlNote = newDtlNote;
                                }
                            }
                            // 「第二売価の設定フラグ」が「設定済み」の場合、第に売価を切替します。
                            else
                            {
                                // [半角\]＋[第二売価]
                                if (string.IsNullOrEmpty(dtlNote))
                                {
                                    this._salesDetailDataTable[rowIndex].DtlNote = "\\" + secondSalesUnPrc.ToString();
                                }
                                // [半角\]＋[第二売価]＋[半角空白]＋[説明内容]
                                else
                                {
                                    dtlNote = dtlNote.Replace(",", "");
                                    int dtlNoteIndexOne = dtlNote.IndexOf("\\");
                                    int dtlNoteIndexThree = dtlNote.IndexOf(" ");
                                    if (dtlNoteIndexOne == 0)
                                    {
                                        if (dtlNote.IndexOf(" ") > 0)
                                        {
                                            string dtlNoteSecondSalesUnPrc = dtlNote.Substring(1, dtlNoteIndexThree);

                                            string newDtlNote = dtlNote.Substring(0, 1) + secondSalesUnPrc + dtlNote.Substring(dtlNoteIndexThree);

                                            // ＞40桁の場合、40桁を保留する。
                                            if (newDtlNote.Length > 40)
                                            {
                                                newDtlNote = newDtlNote.Substring(0, 40);
                                            }
                                            this._salesDetailDataTable[rowIndex].DtlNote = newDtlNote;
                                        }
                                        else
                                        {
                                            this._salesDetailDataTable[rowIndex].DtlNote = dtlNote.Substring(0, 1) + secondSalesUnPrc;
                                        }
                                    }
                                    else
                                    {
                                        string newDtlNote = "\\" + secondSalesUnPrc.ToString() + " " + this._salesDetailDataTable[rowIndex].DtlNote;

                                        // ＞40桁の場合、40桁を保留する。
                                        if (newDtlNote.Length > 40)
                                        {
                                            newDtlNote = newDtlNote.Substring(0, 40);
                                        }
                                        this._salesDetailDataTable[rowIndex].DtlNote = newDtlNote;
                                    }
                                }
                            }

                            // データ変更フラグプロパティをTrueにする
                            this._salesSlipInputAcs.IsDataChanged = true;

                            return 0;
                        default:
                            break;
                    }
                }
                #endregion
                // --- ADD K2016/12/30 譚洪 水野商工㈱  --- <<<<<


                #region 倉庫
                //---------------------------------------------
                // 倉庫
                //---------------------------------------------
                if ((columnName == this._salesDetailDataTable.WarehouseCodeColumn.ColumnName) ||
                    (columnName == this._salesDetailDataTable.WarehouseNameColumn.ColumnName))
                {
                    MAZAI04117U warehouseGuide = new MAZAI04117U();
                    Stock stock;
                    DialogResult status = warehouseGuide.ShowGuide(_owner, this._enterpriseCode, this._salesDetailDataTable[rowIndex].GoodsNo, this._salesDetailDataTable[rowIndex].GoodsMakerCd, out stock);

                    switch (status)
                    {
                        case DialogResult.OK:
                            if (stock != null)
                            {
                                // --- ADD K2013/09/20 T.Miyamoto ------------------------------>>>>>
                                if ((this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaWarehAlloc == (int)SalesSlipInputInitDataAcs.Option.ON) &&
                                    (!this._salesSlipInputInitDataAcs.CheckMainSection(this._enterpriseCode, this._salesSlipInputAcs.SectionCode)))
                                {
                                    // 営業所での入力時は本社倉庫・自拠点倉庫以外の入力は不可
                                    if (!this._salesSlipInputAcs.CheckPriorWarehouse(stock.WarehouseCode))
                                    {
                                        TMsgDisp.Show(new Form()
                                                     , emErrorLevel.ERR_LEVEL_EXCLAMATION
                                                     , "TODO"
                                                     , "この倉庫は入力できません。"
                                                     , 0
                                                     , MessageBoxButtons.OK);

                                        return -1;
                                    }
                                }
                                // --- ADD K2013/09/20 T.Miyamoto ------------------------------<<<<<

                                // --- ADD 2010/05/20 ---------->>>>>
                                if (!string.IsNullOrEmpty(stock.SectionCode) && !string.IsNullOrEmpty(LoginInfoAcquisition.Employee.BelongSectionCode))
                                {
                                    if (!stock.SectionCode.Trim().Equals(LoginInfoAcquisition.Employee.BelongSectionCode.Trim()))
                                    {
                                        // 入力倉庫チェック区分 0:無視 1:再入力 2:警告
                                        switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpWarehChkDiv)
                                        {
                                            case 0:
                                                break;
                                            case 1:
                                                {
                                                    TMsgDisp.Show(
                                                    new Form(),
                                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                                    "TODO",
                                                    "不正な値が存在するため、登録できません。"
                                                    + "\r\n"
                                                    + "\r\n"
                                                    + salesRowNo
                                                    + "行目の在庫管理拠点とログイン拠点が不一致です。",
                                                    0,
                                                    MessageBoxButtons.OK);
                                                    return -1;
                                                }
                                            case 2:
                                                {
                                                    TMsgDisp.Show(
                                                    new Form(),
                                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                                    "TODO",
                                                    "在庫管理拠点とログイン拠点が不一致です。",
                                                    0,
                                                    MessageBoxButtons.OK);

                                                    break;
                                                }
                                        }
                                    }
                                }
                                // --- ADD 2010/05/20 ----------<<<<<
                            }
                            _salesSlipInputAcs.WarehouseBtnClickFlag = true; // ADD 2011/10/29
                            _salesSlipInputAcs.WarehouseRow = salesRowNo;// ADD 2011/10/29
                            // 現在庫数調整処理
                            this._salesSlipInputAcs.SalesDetailStockInfoAdjust(this._salesDetailDataTable[rowIndex].WarehouseCode.Trim(), this._salesDetailDataTable[rowIndex].GoodsNo, this._salesDetailDataTable[rowIndex].GoodsMakerCd);
                            _salesSlipInputAcs.WarehouseBtnClickFlag = true; // ADD 2011/10/29
                            // 在庫情報設定処理
                            this._salesSlipInputAcs.SettingSalesDetailStockInfo(salesRowNo, stock);

                            // ActiveCellが倉庫コードの場合
                            //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.WarehouseCodeColumn.ColumnName))
                            //{
                            //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                            //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                            //}

                            // 明細グリッド設定処理
                            //this.SettingGridRow(rowIndex, this._salesSlipInputAcs.SalesSlip);

                            // データ変更フラグプロパティをTrueにする
                            this._salesSlipInputAcs.IsDataChanged = true;

                            //this.MoveReturnCell();

                            // ADD 2013/04/10 T.Miyamoto ------------------------------>>>>>
                            if (this._salesSlipInputInitDataAcs.Opt_SalesCostCtrl == (int)SalesSlipInputInitDataAcs.Option.ON)
                            {
                                //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ---------------->>>>>
                                // 売上明細データセッティング処理（定価設定）用に現在の表示定価金額を一時退避
                                double tempReturnListPrice = this._salesDetailDataTable[rowIndex].ListPriceDisplay;
                                //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ----------------<<<<<

                                // 原価再取得
                                this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                                //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ---------------->>>>>
                                // 明細項目変更時の標準価格及び売単価変更処理
                                this.SalesDetailRowSalesUnitPriceReSetting(salesRowNo, tempReturnListPrice);
                                //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ----------------<<<<<
                                //-----ADD K2021/07/22 陳艶丹 PMKOBETSU-4148 ----->>>>>
                                // 原価金額計算処理
                                this._salesSlipInputAcs.CalculationCost(rowIndex);
                                // 明細粗利率設定処理
                                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);
                                //-----ADD K2021/07/22 陳艶丹 PMKOBETSU-4148 -----<<<<<
                            }
                            // ADD 2013/04/10 T.Miyamoto ------------------------------<<<<<

                            return 0;
                        default:
                            break;
                    }
                }
                #endregion

                #region BLコード
                //---------------------------------------------
                // BLコード
                //---------------------------------------------
                else if ((columnName == this._salesDetailDataTable.BLGoodsCodeColumn.ColumnName) ||
                   (columnName == this._salesDetailDataTable.BLGoodsFullNameColumn.ColumnName))
                {

                    if ((this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch) ||
                        (this._salesSlipInputAcs.GetSearchPartsMode(salesRowNo) != SalesSlipInputAcs.SearchPartsModeState.NonSearch))
                    {
                        BLGoodsCdAcs blGoodsCdAcs = new BLGoodsCdAcs();
                        BLGoodsCdUMnt blGoodsCdUMnt;

                        int status = blGoodsCdAcs.ExecuteGuid(this._enterpriseCode, out blGoodsCdUMnt);

                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            // ----- DEL 2011/07/06 ------- >>>>>>>>>
                            // ---ADD 2011/05/30---------------->>>>>
                            //SalesInputDataSet.SalesDetailRow row = this._salesSlipInputAcs.GetSalesDetailRow(salesRowNo);
                            //int bfBLGoodsCode = row.BLGoodsCode;
                            // ---ADD 2011/05/30----------------<<<<<
                            // ----- DEL 2011/07/06 ------- <<<<<<<<<

                            // BLコード関連情報設定
                            //>>>2010/09/14
                            //this._salesSlipInputAcs.SettingSalesDetailBLGoodsInfo(salesRowNo, blGoodsCdUMnt);
                            this._salesSlipInputAcs.SettingSalesDetailBLGoodsInfo(salesRowNo, blGoodsCdUMnt);
                            //<<<2010/09/14

                            // ActiveCellがBLコードの場合
                            //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.BLGoodsCodeColumn.ColumnName))
                            //{
                            //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                            //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                            //}

                            // ----- DEL 2011/07/06 ------- >>>>>>>>>
                            // ---ADD 2011/05/30---------------->>>>>
                            //if (bfBLGoodsCode != blGoodsCdUMnt.BLGoodsCode
                            //    && this._salesSlipInputAcs.GetSearchPartsMode(salesRowNo) != SalesSlipInputAcs.SearchPartsModeState.NonSearch)
                            //{
                            //    DialogResult dialogResult = TMsgDisp.Show(
                            //        this._form,
                            //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            //        "",
                            //        "BLコードが変更されました。" + "\r\n" + "\r\n" +
                            //        "商品価格を再取得しますか？",
                            //        0,
                            //        MessageBoxButtons.YesNo,
                            //        MessageBoxDefaultButton.Button1);

                            //    if (dialogResult == DialogResult.Yes)
                            //    {
                            //        StockTemp stockTemp = this._salesSlipStockInfoInputAcs.StockTemp.Clone();

                            //        // 価格情報再設定
                            //        this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                            //        // 売上金額計算処理
                            //        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                            //        // 原価金額計算処理
                            //        this._salesSlipInputAcs.CalculationCost(rowIndex);

                            //        // 明細粗利率設定処理
                            //        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                            //        // 一式情報設定処理
                            //        this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                            //        // 単価再計算有り(掛率から一括取得)
                            //        this._salesSlipStockInfoInputAcs.CalclationUnitPrice(ref stockTemp);

                            //        // 仕入金額再計算
                            //        this._salesSlipStockInfoInputAcs.CalculationStockPrice(ref stockTemp);

                            //        // メモリ上の内容と比較する
                            //        this._salesSlipStockInfoInputAcs.Cache(stockTemp);
                            //    }
                            //}
                            // ---ADD 2011/05/30----------------<<<<<
                            // ----- DEL 2011/07/06 ------- <<<<<<<<<

                            // --- ADD 2014/03/24 Y.Wakita ---------->>>>>
                            // 受注情報設定
                            this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                            // --- ADD 2014/03/24 Y.Wakita ----------<<<<<

                            // --- ADD 2014/03/26 Y.Wakita ---------->>>>>
                            // 売上金額計算処理
                            this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                            // 原価金額計算処理
                            this._salesSlipInputAcs.CalculationCost(rowIndex);

                            // 明細粗利率設定処理
                            this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                            // 一式情報設定処理
                            this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                            // --- ADD 2014/03/26 Y.Wakita ----------<<<<<

                            // データ変更フラグプロパティをTrueにする
                            this._salesSlipInputAcs.IsDataChanged = true;

                            //this.MoveReturnCell();

                            return 0;
                        }
                        // -------ADD 2010/10/08------->>>>>
                        else
                        {
                            return -1;
                        }
                        // -------ADD 2010/10/08-------<<<<<
                    }
                    else
                    {
                        List<BLGoodsCdUMnt> bLGoodsCdUMntList;

                        // BLコードガイド起動
                        int status = this.ExecuteBLGoodsCd(out bLGoodsCdUMntList, salesRowNo);

                        if (status == -3)
                        {
                            TMsgDisp.Show(
                                this._form,
                                emErrorLevel.ERR_LEVEL_INFO,
                                "",
                                "車輌情報が存在しません。",
                                -1,
                                MessageBoxButtons.OK);
                            return -1;
                        }
                        // -------ADD 2010/06/02------->>>>>
                        else if (status == -1)
                        {
                            return -1;
                        }
                        // -------ADD 2010/06/02-------<<<<<
                        else
                        {
                            //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.UndoCell);

                            // BLコードガイド情報設定
                            this._salesSlipInputInitDataAcs.SettingBLGoodsInfo(ref bLGoodsCdUMntList);

                            int settingRowCnt = 0;
                            foreach (BLGoodsCdUMnt bLGoodsCdUMnt in bLGoodsCdUMntList)
                            {
                                int blCode = bLGoodsCdUMnt.BLGoodsCode;

                                //-----------------------------------------------------------------------------
                                // BLコード検索
                                //-----------------------------------------------------------------------------
                                List<GoodsUnitData> goodsUnitDataList = new List<GoodsUnitData>();
                                List<Stock> stockList = new List<Stock>();

                                object retObj;

                                // --- ADD 2010/01/27 -------------->>>>>
                                //if (this.CheckRowEffective(rowIndex)) return -1; // ddd
                                if (this.CheckRowEffective(rowIndex + settingRowCnt)) return -1; // ddd
                                // --- ADD 2010/01/27 --------------<<<<<

                                switch (this.SearchPartsFromBLCode(salesRowNo, blCode, out retObj))
                                {
                                    case 0:
                                        {
                                            if (retObj != null)
                                            {
                                                // BLコード検索
                                                if (retObj is ArrayList)
                                                {
                                                    ArrayList retList = (ArrayList)retObj;

                                                    for (int cnt = 0; cnt < retList.Count; cnt++)
                                                    {
                                                        // 通常商品情報
                                                        if (retList[cnt] is GoodsUnitData)
                                                        {
                                                            goodsUnitDataList.Clear();
                                                            goodsUnitDataList.Add((GoodsUnitData)retList[cnt]);

                                                            // 商品情報設定処理
                                                            List<int> settingSalesRowNoList;
                                                            // 2009/11/25 >>>
                                                            //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBaseForBLCodeSearch(this.GetActiveRowSalesRowNo(), salesRowNo + settingRowCnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, false);
                                                            // --- UPD 2013/11/05 Y.Wakita ---------->>>>>
                                                            //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBaseForBLCodeSearch(salesRowNo, salesRowNo + settingRowCnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, false, blCode);
                                                            //初期フォーカス位置が受注数の場合は出荷数に値をセットしない
                                                            if (this._salesSlipInputAcs.CheckFocusPositionAfterBLCodeSearch(salesRowNo))
                                                            {
                                                                this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBaseForBLCodeSearch(salesRowNo, salesRowNo + settingRowCnt, goodsUnitDataList, stockList, out settingSalesRowNoList, false, false, blCode);
                                                            }
                                                            else
                                                            {
                                                                this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBaseForBLCodeSearch(salesRowNo, salesRowNo + settingRowCnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, false, blCode);
                                                            }
                                                            // --- UPD 2013/11/05 Y.Wakita ----------<<<<<
                                                            // 2009/11/25 <<<
                                                            settingRowCnt += settingSalesRowNoList.Count;

                                                            foreach (int rowNo in settingSalesRowNoList)
                                                            {
                                                                // 売上金額計算処理
                                                                this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);

                                                                // 原価金額計算処理
                                                                this._salesSlipInputAcs.CalculationCost(rowNo - 1);

                                                                //ADD 2011/12/23　陳建明 Redmine#27455----->>>>>
                                                                // 発注情報設定処理
                                                                this._salesSlipInputAcs.SettingUOEOrderDtlRowForNew(rowNo);
                                                                this._salesSlipInputAcs.SettingSalesDetailRowUOEOrderDtl(rowNo);
                                                                //ADD 2011/12/23　陳建明 Redmine#27455-----<<<<<

                                                                // 2009/12/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                                if (((GoodsUnitData)retList[cnt]).SelectedListPriceDiv == 1)
                                                                {
                                                                    double tempReturnListPrice = ((GoodsUnitData)retList[cnt]).SelectedListPrice;
                                                                    this._salesDetailDataTable[rowNo - 1].ListPriceDisplay = (double)tempReturnListPrice;
                                                                    this._salesDetailDataTable[rowNo - 1].SelectedListPriceDiv = ((GoodsUnitData)retList[cnt]).SelectedListPriceDiv; // 2010/11/19 // 標準価格選択区分をセット
                                                                    // 売上明細データセッティング処理（定価設定）
                                                                    this._salesSlipInputAcs.SalesDetailRowListPriceSetting(rowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowNo - 1].ListPriceDisplay);

                                                                    // ----- ADD 2011/07/29 ----------------------------------->>>>>
                                                                    // ----- UPD 2011/08/15 ----------------------------------->>>>>
                                                                    //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                                                                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null
                                                                        && (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0 ||
                                                                        (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0 && ((this._salesDetailDataTable[rowNo - 1].UnPrcCalcCdSalUnPrcTemp == 1) || (this._salesDetailDataTable[rowNo - 1].UnPrcCalcCdSalUnPrcTemp == -1)))))
                                                                    // ----- UPD 2011/08/15 -----------------------------------<<<<<
                                                                    {
                                                                        // ----- ADD 2011/08/15 ----------------------------------->>>>>
                                                                        GoodsUnitData goodsUnitData = new GoodsUnitData();
                                                                        goodsUnitData = (GoodsUnitData)retList[cnt];
                                                                        if (goodsUnitData.GoodsPriceList != null && goodsUnitData.GoodsPriceList.Count > 0)
                                                                        {
                                                                            List<GoodsPrice> tempGoodsPriceList = new List<GoodsPrice>();
                                                                            foreach (GoodsPrice goodsPrice in goodsUnitData.GoodsPriceList)
                                                                            {
                                                                                goodsPrice.ListPrice = ((GoodsUnitData)retList[cnt]).SelectedListPrice;
                                                                                tempGoodsPriceList.Add(goodsPrice);
                                                                            }
                                                                            goodsUnitData.GoodsPriceList = tempGoodsPriceList;
                                                                        }

                                                                        //this._salesSlipInputAcs.SettingSalesDetailGoodsPriceOnChange(rowNo, (GoodsUnitData)retList[cnt]);//DEL 鄧潘ハン 2012/02/28 Redmine#27385
                                                                        this._salesSlipInputAcs.SettingSalesDetailGoodsCampaignPriceOnChange(rowNo, (GoodsUnitData)retList[cnt]);//ADD 鄧潘ハン 2012/02/28 Redmine#27385
                                                                        // ----- ADD 2011/08/15 -----------------------------------<<<<<

                                                                        // ----- DEL 2011/08/15 ----------------------------------->>>>>
                                                                        // キャンペーン価格適用
                                                                        //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != 0)
                                                                        //{
                                                                        //    // なし
                                                                        //}

                                                                        //// キャンペーン掛率適用
                                                                        //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0)
                                                                        //{
                                                                        //    // 売上明細データセッティング処理（単価設定）
                                                                        //    this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, this._salesDetailDataTable[rowNo - 1].SalesRate, false);

                                                                        //    // 売上金額計算処理
                                                                        //    this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                                        //}

                                                                        //// キャンペーン値引率適用
                                                                        //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0)
                                                                        //{
                                                                        //    if (this._salesDetailDataTable[rowNo - 1].SalesRate != 0)
                                                                        //    {
                                                                        //        double listPriceDisplay = this._salesDetailDataTable[rowNo - 1].ListPriceDisplay;
                                                                        //        double salesRate = this._salesDetailDataTable[rowNo - 1].SalesRate;
                                                                        //        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, this._salesDetailDataTable[rowNo - 1].SalesRate, false);

                                                                        //        this._salesDetailDataTable[rowNo - 1].StdUnPrcSalUnPrc = this._salesDetailDataTable[rowNo - 1].SalesUnPrcDisplay;
                                                                        //        // 売上明細データセッティング処理（単価設定）
                                                                        //        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, 100 - this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate, false);
                                                                        //        this._salesDetailDataTable[rowNo - 1].StdUnPrcSalUnPrc = listPriceDisplay;
                                                                        //        this._salesDetailDataTable[rowNo - 1].SalesRate = salesRate;

                                                                        //        // 売上金額計算処理
                                                                        //        this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                                        //    }
                                                                        //    else
                                                                        //    {
                                                                        //        if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().UnPrcNonSettingDiv == 1)
                                                                        //        {
                                                                        //            this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, 100 - this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate, false);
                                                                        //            this._salesDetailDataTable[rowNo - 1].SalesRate = 0;

                                                                        //            // 売上金額計算処理
                                                                        //            this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                                        //        }
                                                                        //    }
                                                                        //}
                                                                        // ----- DEL 2011/08/15 -----------------------------------<<<<<
                                                                    }
                                                                    else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo == null)
                                                                    {
                                                                        // ----- ADD 2011/07/29 -----------------------------------<<<<<
                                                                        // 売価率が入力されている場合は単価再計算
                                                                        if (this._salesDetailDataTable[rowNo - 1].SalesRate != 0)
                                                                        {
                                                                            // 売上明細データセッティング処理（単価設定）
                                                                            this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, this._salesDetailDataTable[rowNo - 1].SalesRate, false);

                                                                            // 売上金額計算処理
                                                                            this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                                        }
                                                                        else
                                                                        {
                                                                            // 2010/01/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                                            //if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().UnPrcNonSettingDiv == 1) // 売価＝定価
                                                                            //{
                                                                            //    this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(rowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPrice, this._salesDetailDataTable[rowNo - 1].ListPriceDisplay, 0);
                                                                            //}

                                                                            if (string.IsNullOrEmpty(this._salesDetailDataTable[rowNo - 1].RateDivSalUnPrc))
                                                                            {
                                                                                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().UnPrcNonSettingDiv == 1) // 売価＝定価
                                                                                {
                                                                                    this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(rowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPrice, this._salesDetailDataTable[rowNo - 1].ListPriceDisplay, 0);
                                                                                }
                                                                            }
                                                                            // 2010/01/14 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                                                                            // ---- ADD 2015/09/04 T.Nishi 社内障害№712 ---------->>>>>
                                                                            // 売上金額計算処理
                                                                            this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                                            // ---- ADD 2015/09/04 T.Nishi 社内障害№712 ----------<<<<<
                                                                        }
                                                                    } // ADD 2011/07/29
                                                                    this._salesDetailDataTable[rowNo - 1].PrtGoodsNo = ((GoodsUnitData)retList[cnt]).PrtGoodsNo;
                                                                    this._salesDetailDataTable[rowNo - 1].PrtMakerCode = ((GoodsUnitData)retList[cnt]).PrtMakerCode;
                                                                    this._salesDetailDataTable[rowNo - 1].PrtMakerName = ((GoodsUnitData)retList[cnt]).PrtMakerName;
                                                                }
                                                                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34605---- >>>>>
                                                                //売上全体設定で、表示区分プロセスはしない場合、またこの商品の商品属性は純正である場合、価格表示区分は空白を表示
                                                                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().PriceSelectDispDiv == 0 || this._salesDetailDataTable[rowNo - 1].GoodsMakerCd < 1000)
                                                                {
                                                                    this._salesDetailDataTable[rowNo - 1].PriceSelectDiv = -1;
                                                                }
                                                                else
                                                                {
                                                                    //表示区分ﾘｽﾄ
                                                                    List<PriceSelectSet> displayDivList = this._salesSlipInputInitDataAcs.GetDisplayDivList();
                                                                    Int32 priceSelectDiv = -1;
                                                                    //表示区分取得ﾃﾞﾘｹﾞｰﾄ
                                                                    this._priceSelectSetAcs.GetDisplayDiv(displayDivList, this._salesDetailDataTable[rowNo - 1].GoodsMakerCd, this._salesDetailDataTable[rowNo - 1].BLGoodsCode, this._salesSlipInputAcs.SalesSlip.CustomerCode, this._salesDetailDataTable[rowNo - 1].CustRateGrpCode, out priceSelectDiv);
                                                                    this._salesDetailDataTable[rowNo - 1].PriceSelectDiv = priceSelectDiv;
                                                                }
                                                                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34605---- <<<<<

                                                                // ADD 2011/08/12 ---- >>>>>
                                                                if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                                                                {
                                                                    // 掛率算出情報クリア
                                                                    this._salesSlipInputAcs.ClearRateInfo(rowNo, UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice);
                                                                }
                                                                // ADD 2011/08/12 ---- <<<<<

                                                                this._salesDetailDataTable[rowNo - 1].SelectedGoodsNoDiv = ((GoodsUnitData)retList[cnt]).SelectedGoodsNoDiv;
                                                                // 2009/12/17 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                                                                // 明細粗利率設定処理
                                                                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(rowNo);

                                                                // 一式情報設定処理
                                                                this._salesSlipInputAcs.ConstructionCompleteInfo(rowNo);

                                                                // 車両情報設定イベントコール処理
                                                                //this.SettingCarInfoEventCall(rowNo);
                                                                this._salesSlipInputAcs.GetCarInfoRow(rowNo, SalesSlipInputAcs.GetCarInfoMode.CarInfoChangeMode); // 2010/07/13

                                                                // --- ADD 2013/11/05 Y.Wakita ---------->>>>>
                                                                // 受注情報に車両情報設定
                                                                if (this._salesDetailDataTable[rowNo - 1].AcceptAnOrderCnt > 0)
                                                                {
                                                                    // 受注情報設定
                                                                    this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(rowNo);
                                                                    // ---ADD 陳艶丹 2021/05/20 BLINCIDENT-2978 受注伝票明細金額が0の障害対応 ------>>>>>
                                                                    // 受注データのみ作成する場合
                                                                    if (this._salesDetailDataTable[rowNo - 1].ShipmentCntDisplay == CtShipmentCntZero)
                                                                    {
                                                                        // 受注売上金額計算処理
                                                                        this._salesSlipInputAcs.CalculationSalesMoney(this._salesDetailDataTable[rowNo - 1].SalesSlipNum, rowNo - 1);

                                                                        // 受注原価金額計算処理
                                                                        this._salesSlipInputAcs.CalculationCost(this._salesDetailDataTable[rowNo - 1].SalesSlipNum, rowNo - 1);
                                                                    }
                                                                    // ---ADD 陳艶丹 2021/05/20 BLINCIDENT-2978 受注伝票明細金額が0の障害対応 ------<<<<<

                                                                    SalesInputDataSet.SalesDetailAcceptAnOrderRow acceptAnOrderRow = this._salesSlipInputAcs.AcptDetailDataTable.FindByDtlRelationGuid(this._salesDetailDataTable[rowNo - 1].DtlRelationGuid);
                                                                    if (acceptAnOrderRow != null)
                                                                    {
                                                                        acceptAnOrderRow.BfListPrice = 0;
                                                                        acceptAnOrderRow.BfSalesUnitPrice = 0;
                                                                        acceptAnOrderRow.BfUnitCost = 0;
                                                                    }
                                                                }
                                                                // --- ADD 2013/11/05 Y.Wakita ----------<<<<<

                                                                // --- ADD　譚洪 K2014/02/17 ---- >>>>>
                                                                if (this._salesSlipInputInitDataAcs.Opt_NoBuTo == (int)SalesSlipInputInitDataAcs.Option.ON)
                                                                {
                                                                    object retNobuto = this._salesSlipInputInitDataAcs.MyMethodNobuto.Invoke(this._salesSlipInputInitDataAcs.ObjNobuto,
                                                                                       new object[] { this._enterpriseCode, this._salesDetailDataTable[rowNo - 1].GoodsNo, this._salesDetailDataTable[rowNo - 1].GoodsMakerCd });

                                                                    if ((int)retNobuto == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                                                    {
                                                                        this._salesDetailDataTable[rowNo - 1].SalesCode = 1;
                                                                    }
                                                                    else
                                                                    {
                                                                        this._salesDetailDataTable[rowNo - 1].SalesCode = 0;
                                                                    }
                                                                }
                                                                // --- ADD　譚洪 K2014/02/17 ---- <<<<<

                                                                // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133-------->>>>
                                                                // 原価単価が0円の場合、原価単価再取得する
                                                                if (this._salesDetailDataTable[rowNo - 1].SalesUnitCost == CtZero &&
                                                                    this._salesDetailDataTable[rowNo - 1].SalesUnitCostChngDiv == CtZero &&    // 原価単価変更区分0:変更なし
                                                                    this._salesDetailDataTable[rowNo - 1].GoodsMakerCd != CtZero &&            // メーカーコード
                                                                    (string.IsNullOrEmpty(this._salesDetailDataTable[rowNo - 1].MakerName) ||     // メーカー名
                                                                    string.IsNullOrEmpty(this._salesDetailDataTable[rowNo - 1].MakerKanaName)))    // メーカーカナ名
                                                                { 
                                                                    // ログ内容
                                                                    string logMsg = string.Format(LogMessage, MethodNameGuid, this._salesSlipInputAcs.GetLogInfo(rowNo));
                                                                    // ログ出力
                                                                    if (LogCommon == null)
                                                                    {
                                                                        LogCommon = new OutLogCommon();
                                                                    }
                                                                    LogCommon.OutputClientLog(ctAssemblyName, logMsg, this._enterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);
                                                                    
                                                                    // 現単価情報再設定処理
                                                                    this._salesSlipInputAcs.SetSalesDetailBLGoodsInfo(rowNo);
                                                                }
                                                                // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133--------<<<<<
                                                                // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）-------->>>>>
                                                                // 原単価が不正の場合、原単価、原価再計算
                                                                // 原単価が手入力以外　且つ　算出原価！＝0　且つ　原価単価＝0
                                                                if ((this._salesDetailDataTable[rowNo - 1].SalesUnitCostChngDiv != (int)SalesSlipInputAcs.SalesMoneyInputDiv.Input &&
                                                                    this._salesDetailDataTable[rowNo - 1].BfUnitCost != CtZero && this._salesDetailDataTable[rowNo - 1].SalesUnitCost == CtZero))
                                                                {
                                                                    // ログ内容
                                                                    string logMsg = string.Format(DetailLog, MethodNameGuid, this._salesDetailDataTable[rowNo - 1].SalesUnitCostChngDiv,
                                                                                                  this._salesDetailDataTable[rowNo - 1].BfUnitCost, this._salesDetailDataTable[rowNo - 1].SalesUnitCost,
                                                                                                  this._salesSlipInputAcs.GetLogInfo(rowNo));
                                                                    // ログ出力
                                                                    if (LogCommon == null)
                                                                    {
                                                                        LogCommon = new OutLogCommon();
                                                                    }
                                                                    LogCommon.OutputClientLog(ctAssemblyName, logMsg, this._enterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);

                                                                    // 価格情報再設定
                                                                    this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);
                                                                    // 原価金額計算処理
                                                                    this._salesSlipInputAcs.CalculationCost(rowIndex);
                                                                }
                                                                // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）--------<<<<<
                                                            }
                                                        }
                                                        // 受注照会(受注残検索)
                                                        else if (retList[cnt] is AcptAnOdrRemainRefData)
                                                        {
                                                            List<AcptAnOdrRemainRefData> acptAnOdrRemainRefDataList = new List<AcptAnOdrRemainRefData>();
                                                            acptAnOdrRemainRefDataList.Add((AcptAnOdrRemainRefData)retList[cnt]);
                                                            int st = this._salesSlipInputAcs.SalesDetailRowSettingFromAcptAnOdrRemainRefList(salesRowNo + cnt, acptAnOdrRemainRefDataList, SalesSlipInputAcs.WayToDetailExpand.AddUpRemainder);
                                                            if (st == -1)
                                                            {
                                                                TMsgDisp.Show(
                                                                    this._form,
                                                                    emErrorLevel.ERR_LEVEL_INFO,
                                                                    "",
                                                                    "「計上」または「発注選択」済み明細がが選択されましたので、" + Environment.NewLine +
                                                                    "明細への展開を行いません。",
                                                                    -1,
                                                                    MessageBoxButtons.OK);
                                                            }
                                                        }
                                                        // 出荷照会(出荷残検索)
                                                        else if (retList[cnt] is SalHisRefResultParamWork)
                                                        {
                                                            List<SalHisRefResultParamWork> salHisRefResultParamWorkList = new List<SalHisRefResultParamWork>();
                                                            salHisRefResultParamWorkList.Add((SalHisRefResultParamWork)retList[cnt]);
                                                            int st = this._salesSlipInputAcs.SalesDetailRowSettingFromSalHisRefResultParamWorkListForAddUp(salesRowNo + cnt, salHisRefResultParamWorkList, SalesSlipInputAcs.WayToDetailExpand.AddUpRemainder);
                                                            if (st == -1)
                                                            {
                                                                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                                                                if (!this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag)
                                                                {
                                                                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                                                                    TMsgDisp.Show(
                                                                        this._form,
                                                                        emErrorLevel.ERR_LEVEL_INFO,
                                                                        "",
                                                                        "「計上」済み明細が選択されましたので、" + Environment.NewLine +
                                                                        "明細への展開を行いません。",
                                                                        -1,
                                                                        MessageBoxButtons.OK);
                                                                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                                                                }
                                                                else
                                                                {
                                                                    this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag = false;
                                                                }
                                                                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                                                            }
                                                        }

                                                        if (this._salesInputConstructionAcs.DataInputCountValue <= settingRowCnt) break;
                                                    }
                                                }

                                                // 明細グリッド設定処理
                                                //this.SettingGrid();

                                                // --- ADD 2013/07/23 Y.Wakita ---------->>>>>
                                                // 在庫調整
                                                if (this._salesSlipInputInitDataAcs.GetAllDefSet().DtlCalcStckCntDsp == 0)
                                                {
                                                    // 在庫調整
                                                    this._salesSlipInputAcs.SalesDetailStockInfoAdjust();
                                                }
                                                else
                                                {
                                                    //なし。
                                                }
                                                // --- ADD 2013/07/23 Y.Wakita ----------<<<<<

                                                // データ変更フラグプロパティをTrueにする
                                                this._salesSlipInputAcs.IsDataChanged = true;

                                                // 売上金額変更後発生イベントコール処理
                                                //this.SalesPriceChangedEventCall();

                                                // フッタ部明細情報更新イベントコール処理
                                                //this.SettingFooterEventCall(salesRowNo);

                                                // ActiveCellがBLコードの場合
                                                //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.BLGoodsCodeColumn.ColumnName))
                                                //{
                                                //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                                                //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                                                //}

                                                if (this._salesInputConstructionAcs.DataInputCountValue <= settingRowCnt) break;

                                            }

                                            break;
                                        }
                                    case -1:
                                        {
                                            //// 商品コードを元に戻す
                                            //this._salesDetailDataTable[cell.Row.Index].GoodsNo = this._beforeGoodsNo;

                                            //this._cannotGoodsRead = true;
                                            //return;
                                            // --- UPD 2010/09/19 ---------->>>>>
                                            // --- UPD 2010/05/31 ---------->>>>>
                                            //break;
                                            break;
                                            //return -1;
                                            // --- UPD 2010/05/31 ----------<<<<<
                                            // --- UPD 2010/09/19 ---------->>>>>
                                        }
                                    case -3:
                                        {
                                            TMsgDisp.Show(
                                                this._form,
                                                emErrorLevel.ERR_LEVEL_INFO,
                                                "",
                                                "車輌情報が存在しません。",
                                                -1,
                                                MessageBoxButtons.OK);
                                            return -1;
                                        }
                                }

                                if (this._salesInputConstructionAcs.DataInputCountValue <= settingRowCnt)
                                {
                                    //TMsgDisp.Show(
                                    //    this,
                                    //    emErrorLevel.ERR_LEVEL_INFO,
                                    //    this.Name,
                                    //    "選択数が明細行数を超える為、検索を終了します。　",
                                    //    -1,
                                    //    MessageBoxButtons.OK);
                                    return 0;
                                }
                            }
                            // ActiveCellがBLコードの場合
                            //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.BLGoodsCodeColumn.ColumnName))
                            //{
                            //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                            //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                            //}
                            // ADD 2013/03/06 T.Miyamoto ------------------------------>>>>>
                            // BLコード検索の選択件数が０件の場合
                            if (settingRowCnt == 0)
                            {
                                return -1;
                            }
                            // ADD 2013/03/06 T.Miyamoto ------------------------------<<<<<
                        }
                    }
                }
                #endregion

                #region メーカーコード
                //---------------------------------------------
                // メーカーコード
                //---------------------------------------------
                else if ((columnName == this._salesDetailDataTable.GoodsMakerCdColumn.ColumnName) ||
              (columnName == this._salesDetailDataTable.MakerNameColumn.ColumnName))
                {
                    MakerAcs makerAcs = new MakerAcs();
                    makerAcs.IsLocalDBRead = SalesSlipInputInitDataAcs.ctIsLocalDBRead;
                    MakerUMnt makerUMnt;

                    int status = makerAcs.ExecuteGuid(this._enterpriseCode, out makerUMnt);

                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.UndoCell);

                        // メーカー名称設定処理
                        //>>>2010/07/21
                        //bool makerChanged = this._salesSlipInputAcs.SettingSalesDetailMakerInfo(salesRowNo, makerUMnt.GoodsMakerCd, makerUMnt.MakerName);
                        bool makerChanged = this._salesSlipInputAcs.SettingSalesDetailMakerInfo(salesRowNo, makerUMnt.GoodsMakerCd, makerUMnt.MakerName, makerUMnt.MakerKanaName);
                        //<<<2010/07/21

                        // ActiveCellがメーカーコードの場合
                        //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.GoodsMakerCdColumn.ColumnName))
                        //{
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                        //}

                        string goodsNo = this._salesDetailDataTable[rowIndex].GoodsNo;
                        // メーカーが変わった場合は商品を再検索
                        if ((makerChanged) && (!string.IsNullOrEmpty(goodsNo)))
                        {
                            if (!String.IsNullOrEmpty(goodsNo))
                            {
                                switch (this.SearchGoodsAndRemain_And_RowSetting(rowIndex))
                                {
                                    case 0:
                                    case -2: // 2010/07/21
                                        break;
                                    case -1:
                                        //this._salesSlipInputAcs.SettingSalesDetailMakerInfo(salesRowNo, this._beforeGoodsMakerCd, beforeMakerName);
                                        break;
                                }
                                // 売上金額計算処理
                                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                                // 原価金額計算処理
                                this._salesSlipInputAcs.CalculationCost(rowIndex);

                                // 明細粗利率設定処理
                                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                                // 一式情報設定処理
                                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                                // 車両情報設定イベントコール処理
                                //this.SettingCarInfoEventCall(salesRowNo);

                                // 発注情報設定処理
                                this._salesSlipInputAcs.SettingUOEOrderDtlRowForNew(salesRowNo);

                                // 現在庫数調整
                                this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                                // 明細グリッド設定処理
                                //this.SettingGrid();

                                // データ変更フラグプロパティをTrueにする
                                this._salesSlipInputAcs.IsDataChanged = true;

                                // 売上金額変更後発生イベントコール処理
                                //this.SalesPriceChangedEventCall();

                                // フッタ部明細情報更新イベントコール処理
                                //this.SettingFooterEventCall(salesRowNo);
                            }
                        }

                        // データ変更フラグプロパティをTrueにする
                        this._salesSlipInputAcs.IsDataChanged = true;

                        //this.MoveReturnCell();

                        return 0;
                    }
                }
                #endregion

                #region 仕入先
                //---------------------------------------------
                // 仕入先
                //---------------------------------------------
                else if ((columnName == this._salesDetailDataTable.SupplierCdColumn.ColumnName) ||
               (columnName == this._salesDetailDataTable.SupplierCdForStockColumn.ColumnName))
                {
                    this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].SupplierCdChgFlg = 1;  // ADD 2011/09/16

                    SupplierAcs supplierAcs = new SupplierAcs();
                    Supplier supplier;
                    supplierAcs.IsLocalDBRead = SalesSlipInputInitDataAcs.ctIsLocalDBRead;
                    // -------------UPD 2010/07/09----------->>>>>
                    //supplierAcs.ExecuteGuid(out supplier, this._enterpriseCode, string.Empty);
                    int status = supplierAcs.ExecuteGuid(out supplier, this._enterpriseCode, string.Empty);
                    if (status != 0) return -1;
                    // -------------UPD 2010/07/09-----------<<<<<
                    SalesInputDataSet.SalesDetailRow row = this._salesSlipInputAcs.GetSalesDetailRow(salesRowNo);
                    if ((row != null) && (row.SupplierCd != supplier.SupplierCd))
                    {
                        // 仕入先情報設定
                        this._salesSlipInputAcs.SettingSalesDetailSupplierInfo(salesRowNo, supplier);

                        StockTemp stockTemp = this._salesSlipStockInfoInputAcs.StockTemp.Clone();

                        // 仕入先情報設定(仕入情報)
                        this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplier(ref stockTemp, supplier);

                        // 発注先情報設定(発注情報)
                        UOESupplier uoeSupplier;
                        //>>>2010/07/01
                        //int st = this._uoeSupplierAcs.Read(out uoeSupplier, this._enterpriseCode, supplier.SupplierCd, this._salesSlipInputAcs.SalesSlip.SectionCode);
                        int st = this._uoeSupplierAcs.ReadCache(out uoeSupplier, this._enterpriseCode, supplier.SupplierCd, this._salesSlipInputAcs.SalesSlip.SectionCode);
                        //<<<2010/07/01
                        if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOESupplier(salesRowNo, uoeSupplier);
                            this._salesSlipInputAcs.SettingSalesDetailRowUOEOrderDtl(salesRowNo);
                        }
                        // --- ADD 2012/10/19 Y.Wakita ---------->>>>>
                        else
                        {
                            // キャッシュされていない場合は、初期値設定
                            uoeSupplier = new UOESupplier();
                            this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOESupplier(salesRowNo, uoeSupplier);

                            this._salesDetailDataTable[salesRowNo - 1].SupplierCdForOrder = 0;
                            this._salesDetailDataTable[salesRowNo - 1].SupplierSnmForOrder = string.Empty;
                            this._salesDetailDataTable[salesRowNo - 1].BoCode = SalesSlipInputAcs.ctDefaultBoCode;
                            this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCntForOrder = 0;
                            this._salesDetailDataTable[salesRowNo - 1].UOEDeliGoodsDiv = string.Empty;
                            this._salesDetailDataTable[salesRowNo - 1].DeliveredGoodsDivNm = string.Empty;
                            this._salesDetailDataTable[salesRowNo - 1].DeliveredGoodsDivNmSave = string.Empty;
                            this._salesDetailDataTable[salesRowNo - 1].FollowDeliGoodsDiv = string.Empty;
                            this._salesDetailDataTable[salesRowNo - 1].FollowDeliGoodsDivNm = string.Empty;
                            this._salesDetailDataTable[salesRowNo - 1].FollowDeliGoodsDivNmSave = string.Empty;
                            this._salesDetailDataTable[salesRowNo - 1].UOEResvdSection = string.Empty;
                            this._salesDetailDataTable[salesRowNo - 1].UOEResvdSectionNm = string.Empty;
                            this._salesDetailDataTable[salesRowNo - 1].UOEResvdSectionNmSave = string.Empty;
                        }
                        // --- ADD 2012/10/19 Y.Wakita ----------<<<<<

                        // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ---------->>>>>
                        if (this._salesSlipInputAcs.CheckWhetherSalesPriceChange())
                        {
                        // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ----------<<<<<
                            DialogResult dialogResult = TMsgDisp.Show(
                                this._form,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                "仕入先が変更されました。" + "\r\n" + "\r\n" +
                                "商品価格を再取得しますか？",
                                0,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button1);

                            if (dialogResult == DialogResult.Yes)
                            {
                                // 価格情報再設定
                                this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                                // 売上金額計算処理
                                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                                // 原価金額計算処理
                                this._salesSlipInputAcs.CalculationCost(rowIndex);

                                // 明細粗利率設定処理
                                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                                // 一式情報設定処理
                                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                                // 単価再計算有り(掛率から一括取得)
                                this._salesSlipStockInfoInputAcs.CalclationUnitPrice(ref stockTemp);

                                // 仕入金額再計算
                                this._salesSlipStockInfoInputAcs.CalculationStockPrice(ref stockTemp);

                                // メモリ上の内容と比較する
                                this._salesSlipStockInfoInputAcs.Cache(stockTemp);

                                // 売上金額変更後発生イベントコール処理
                                //this.SalesPriceChangedEventCall();
                            }
                            else
                            {
                                this._salesSlipInputAcs.ClearRateInfo(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_ListPrice);
                                this._salesSlipInputAcs.ClearRateInfo(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice);
                                this._salesSlipInputAcs.ClearRateInfo(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_UnitCost);
                            }
                        } // ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応

                        //if ((this.uGrid_Details.ActiveCell != null) &&
                        //    ((this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.SupplierCdColumn.ColumnName) ||
                        //     (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.SupplierCdForStockColumn.ColumnName)))
                        //{
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                        //}

                        //this.SettingGridRow(rowIndex, this._salesSlipInputAcs.SalesSlip);

                        this._salesSlipInputAcs.IsDataChanged = true;

                        //this.MoveReturnCell();

                        return 0;

                    }
                }
                #endregion

                #region 売単価
                //---------------------------------------------
                // 売単価
                //---------------------------------------------
                else if (columnName == this._salesDetailDataTable.SalesUnPrcDisplayColumn.ColumnName)
                {
                    DCKHN01050UA unitPriceInfoGuide = new DCKHN01050UA();

                    // UPD 2010/08/25 ------------>>>>
                    List<UnPrcInfoConf> unPrcInfoConfList = new List<UnPrcInfoConf>();

                    UnPrcInfoConf unPrcInfoConf1 = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_ListPrice);
                    UnPrcInfoConf unPrcInfoConf2 = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice);
                    UnPrcInfoConf unPrcInfoConf3 = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_UnitCost);
                    unPrcInfoConfList.Add(unPrcInfoConf1);
                    unPrcInfoConfList.Add(unPrcInfoConf2);
                    unPrcInfoConfList.Add(unPrcInfoConf3);

                    //>>>2010/10/04
                    //if ((unPrcInfoConf1.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf1.GoodsNo))
                    //     && (unPrcInfoConf2.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf2.GoodsNo))
                    //     && (unPrcInfoConf3.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf3.GoodsNo)))// メーカー・品番未入力時は、表示なし
                    if ((unPrcInfoConf1.GoodsMakerCd != 0)
                         && (unPrcInfoConf2.GoodsMakerCd != 0)
                         && (unPrcInfoConf3.GoodsMakerCd != 0))// メーカー・品番未入力時は、表示なし
                    //<<<2010/10/04
                    {

                        //UnPrcInfoConf unPrcInfoConf = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice);
                        //if ((unPrcInfoConf.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf.GoodsNo)))// メーカー・品番未入力時は、表示なし
                        //{
                        DialogResult dialogResult = unitPriceInfoGuide.ShowDialog(this._owner, DCKHN01050UA.DisplayType.SalesUnitPrice, unPrcInfoConfList);
                        // UPD 2010/08/25 ------------<<<<
                        if (dialogResult == DialogResult.OK)
                        {
                            //this._salesSlipInputAcs.SalesDetailRowUnPrcInfoSetting(salesRowNo, unitPriceInfoGuide.UnPrcInfoConfRet, UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice);

                            //// 売上金額計算処理
                            //this.CalculationSalesPrice();

                            //// 一式情報設定処理
                            //this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                            //// 売上金額変更後発生イベントコール処理
                            //this.SalesPriceChangedEventCall();

                            //// フッタ部明細情報更新イベントコール処理
                            //this.SettingFooterEventCall(salesRowNo);

                            //// 車両情報設定イベントコール処理
                            //this.SettingCarInfoEventCall(salesRowNo);

                            //this._salesSlipInputAcs.IsDataChanged = true;
                        }

                        // ActiveCellが単価の場合
                        //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.SalesUnPrcDisplayColumn.ColumnName))
                        //{
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                        //}
                    }
                    else
                    {
                        DialogResult dialogResult = TMsgDisp.Show(
                            this._form,
                            emErrorLevel.ERR_LEVEL_QUESTION,
                            "",
                            "商品番号およびメーカーが入力されていない為、" + "\r\n" +
                            "単価情報画面を表示できません。",
                            0,
                            MessageBoxButtons.OK,
                            MessageBoxDefaultButton.Button1);
                    }
                }
                #endregion

                #region 原単価
                //---------------------------------------------
                // 原単価
                //---------------------------------------------
                else if (columnName == this._salesDetailDataTable.SalesUnitCostColumn.ColumnName)
                {
                    DCKHN01050UA unitPriceInfoGuide = new DCKHN01050UA();

                    // UPD 2010/08/25 ------------>>>>
                    List<UnPrcInfoConf> unPrcInfoConfList = new List<UnPrcInfoConf>();

                    UnPrcInfoConf unPrcInfoConf1 = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_ListPrice);
                    UnPrcInfoConf unPrcInfoConf2 = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice);
                    UnPrcInfoConf unPrcInfoConf3 = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_UnitCost);
                    unPrcInfoConfList.Add(unPrcInfoConf1);
                    unPrcInfoConfList.Add(unPrcInfoConf2);
                    unPrcInfoConfList.Add(unPrcInfoConf3);

                    //>>>2010/10/04
                    //if ((unPrcInfoConf1.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf1.GoodsNo))
                    //     && (unPrcInfoConf2.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf2.GoodsNo))
                    //     && (unPrcInfoConf3.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf3.GoodsNo)))// メーカー・品番未入力時は、表示なし
                    if ((unPrcInfoConf1.GoodsMakerCd != 0)
                         && (unPrcInfoConf2.GoodsMakerCd != 0)
                         && (unPrcInfoConf3.GoodsMakerCd != 0))// メーカー・品番未入力時は、表示なし
                    //<<<2010/10/04
                    {

                        //UnPrcInfoConf unPrcInfoConf = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_UnitCost);
                        //if ((unPrcInfoConf.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf.GoodsNo)))// メーカー・品番未入力時は、表示なし
                        //{
                        DialogResult dialogResult = unitPriceInfoGuide.ShowDialog(this._owner, DCKHN01050UA.DisplayType.UnitCost, unPrcInfoConfList);
                        // UPD 2010/08/25 ------------<<<<
                        if (dialogResult == DialogResult.OK)
                        {
                            //this._salesSlipInputAcs.SalesDetailRowUnPrcInfoSetting(salesRowNo, unitPriceInfoGuide.UnPrcInfoConfRet, UnitPriceCalculation.ctUnitPriceKind_UnitCost);

                            //// 原価金額計算処理
                            //this._salesSlipInputAcs.CalculationCost(rowIndex);

                            //// 明細粗利率設定処理
                            //this._salesSlipInputAcs.SettingGrossProfitRate(salesRowNo);

                            //// 一式情報設定処理
                            //this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                            //// 売上金額変更後発生イベントコール処理
                            //this.SalesPriceChangedEventCall();

                            //// フッタ部明細情報更新イベントコール処理
                            //this.SettingFooterEventCall(salesRowNo);

                            //// 車両情報設定イベントコール処理
                            //this.SettingCarInfoEventCall(salesRowNo);

                            //this._salesSlipInputAcs.IsDataChanged = true;
                        }

                        //// ActiveCellが単価の場合
                        //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.SalesUnitCostColumn.ColumnName))
                        //{
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                        //}
                    }
                    else
                    {
                        DialogResult dialogResult = TMsgDisp.Show(
                            this._form,
                            emErrorLevel.ERR_LEVEL_QUESTION,
                            "",
                            "商品番号およびメーカーが入力されていない為、" + "\r\n" +
                            "単価情報画面を表示できません。",
                            0,
                            MessageBoxButtons.OK,
                            MessageBoxDefaultButton.Button1);
                    }
                }
                #endregion

                #region 定価
                //---------------------------------------------
                // 定価
                //---------------------------------------------
                else if (columnName == this._salesDetailDataTable.ListPriceDisplayColumn.ColumnName)
                {
                    DCKHN01050UA unitPriceInfoGuide = new DCKHN01050UA();

                    // UPD 2010/08/25 ------------>>>>
                    List<UnPrcInfoConf> unPrcInfoConfList = new List<UnPrcInfoConf>();

                    UnPrcInfoConf unPrcInfoConf1 = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_ListPrice);
                    UnPrcInfoConf unPrcInfoConf2 = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice);
                    UnPrcInfoConf unPrcInfoConf3 = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_UnitCost);
                    unPrcInfoConfList.Add(unPrcInfoConf1);
                    unPrcInfoConfList.Add(unPrcInfoConf2);
                    unPrcInfoConfList.Add(unPrcInfoConf3);

                    if ((unPrcInfoConf1.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf1.GoodsNo))
                         && (unPrcInfoConf2.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf2.GoodsNo))
                         && (unPrcInfoConf3.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf3.GoodsNo)))// メーカー・品番未入力時は、表示なし
                    {

                        //UnPrcInfoConf unPrcInfoConf = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_ListPrice);
                        //if ((unPrcInfoConf.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf.GoodsNo)))// メーカー・品番未入力時は、表示なし
                        //{
                        DialogResult dialogResult = unitPriceInfoGuide.ShowDialog(this._owner, DCKHN01050UA.DisplayType.ListPrice, unPrcInfoConfList);
                        // UPD 2010/08/25 ------------<<<<
                        if (dialogResult == DialogResult.OK)
                        {
                            //this._salesSlipInputAcs.SalesDetailRowUnPrcInfoSetting(salesRowNo, unitPriceInfoGuide.UnPrcInfoConfRet, UnitPriceCalculation.ctUnitPriceKind_ListPrice);

                            //// 売上明細データセッティング処理（定価設定）
                            //this._salesSlipInputAcs.SalesDetailRowListPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].ListPriceDisplay);

                            //// 売価率が入力されている場合は単価再計算
                            //if (this._salesDetailDataTable[rowIndex].SalesRate != 0)
                            //{
                            //    // 売上明細データセッティング処理（単価設定）
                            //    this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].SalesRate);

                            //    // 売上金額計算処理
                            //    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                            //    // 一式情報設定処理
                            //    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                            //}
                            //// 原価率が入力されている場合は単価再計算
                            //if (this._salesDetailDataTable[rowIndex].CostRate != 0)
                            //{
                            //    // 売上明細データセッティング処理（原単価設定）
                            //    this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].CostRate);

                            //    // 原価金額計算処理
                            //    this._salesSlipInputAcs.CalculationCost(rowIndex);

                            //    // 明細粗利率設定処理
                            //    this._salesSlipInputAcs.SettingGrossProfitRate(salesRowNo);

                            //    // 一式情報設定処理
                            //    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                            //}

                            //// 売上金額変更後発生イベントコール処理
                            //this.SalesPriceChangedEventCall();

                            //// フッタ部明細情報更新イベントコール処理
                            //this.SettingFooterEventCall(salesRowNo);

                            //// 車両情報設定イベントコール処理
                            //this.SettingCarInfoEventCall(salesRowNo);

                            //this._salesSlipInputAcs.IsDataChanged = true;
                        }

                        // ActiveCellが単価の場合
                        //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.ListPriceDisplayColumn.ColumnName))
                        //{
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                        //}
                    }
                    else
                    {
                        DialogResult dialogResult = TMsgDisp.Show(
                            this._form,
                            emErrorLevel.ERR_LEVEL_QUESTION,
                            "",
                            "商品番号およびメーカーが入力されていない為、" + "\r\n" +
                            "単価情報画面を表示できません。",
                            0,
                            MessageBoxButtons.OK,
                            MessageBoxDefaultButton.Button1);
                    }
                }
                #endregion

                // ADD 2010/08/13  -------------->>>>
                #region 原価率、売価率
                //---------------------------------------------
                // 原価率、売価率
                //---------------------------------------------
                else if (columnName == this._salesDetailDataTable.CostRateColumn.ColumnName
                        || columnName == this._salesDetailDataTable.SalesRateColumn.ColumnName)
                {
                    DCKHN01050UA unitPriceInfoGuide = new DCKHN01050UA();
                    List<UnPrcInfoConf> unPrcInfoConfList = new List<UnPrcInfoConf>();

                    UnPrcInfoConf unPrcInfoConf1 = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_ListPrice);
                    UnPrcInfoConf unPrcInfoConf2 = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice);
                    UnPrcInfoConf unPrcInfoConf3 = this._salesSlipInputAcs.GetUnitPriceInfoConf(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_UnitCost);
                    unPrcInfoConfList.Add(unPrcInfoConf1);
                    unPrcInfoConfList.Add(unPrcInfoConf2);
                    unPrcInfoConfList.Add(unPrcInfoConf3);

                    //>>>2010/10/04
                    //if ((unPrcInfoConf1.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf1.GoodsNo))
                    //     && (unPrcInfoConf2.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf2.GoodsNo))
                    //     && (unPrcInfoConf3.GoodsMakerCd != 0) && (!string.IsNullOrEmpty(unPrcInfoConf3.GoodsNo)))// メーカー・品番未入力時は、表示なし
                    if ((unPrcInfoConf1.GoodsMakerCd != 0)
                         && (unPrcInfoConf2.GoodsMakerCd != 0)
                         && (unPrcInfoConf3.GoodsMakerCd != 0))// メーカー・品番未入力時は、表示なし
                    //<<<2010/10/04
                    {
                        DialogResult dialogResult = new DialogResult();

                        if (columnName == this._salesDetailDataTable.CostRateColumn.ColumnName)
                        {
                            dialogResult = unitPriceInfoGuide.ShowDialog(this._owner, DCKHN01050UA.DisplayType.UnitCost, unPrcInfoConfList);
                        }
                        else
                        {
                            dialogResult = unitPriceInfoGuide.ShowDialog(this._owner, DCKHN01050UA.DisplayType.SalesUnitPrice, unPrcInfoConfList);
                        }

                        if (dialogResult == DialogResult.OK)
                        {
                            // なし。
                        }
                    }
                    else
                    {
                        DialogResult dialogResult = TMsgDisp.Show(
                            this._form,
                            emErrorLevel.ERR_LEVEL_QUESTION,
                            "",
                            "商品番号およびメーカーが入力されていない為、" + "\r\n" +
                            "単価情報画面を表示できません。",
                            0,
                            MessageBoxButtons.OK,
                            MessageBoxDefaultButton.Button1);
                    }
                }
                #endregion
                // ADD 2010/08/13  --------------<<<<<

                #region BO区分
                if (columnName == this._salesDetailDataTable.BoCodeColumn.ColumnName)
                {
                    UOEGuideName uoeGuideName;
                    UOEGuideName inUOEGuideName = new UOEGuideName();
                    inUOEGuideName.EnterpriseCode = this._enterpriseCode;
                    inUOEGuideName.SectionCode = this._salesSlipInputAcs.SalesSlip.SectionCode;
                    inUOEGuideName.UOESupplierCd = this._salesDetailDataTable[rowIndex].SupplierCdForOrder;
                    inUOEGuideName.UOEGuideDivCd = (int)SalesSlipInputAcs.UOEGuideDivCd.BoCode;
                    int st = this._uoeGuideNameAcs.ExecuteGuid(inUOEGuideName, out uoeGuideName);

                    if (st == 0)
                    {
                        //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.UndoCell);

                        StockTemp stockTemp = this._salesSlipStockInfoInputAcs.StockTemp.Clone();

                        this._salesSlipInputAcs.SettingUOEOrderDtlRowFromBoCode(salesRowNo, uoeGuideName.UOEGuideCode);
                        this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplierFormal(ref stockTemp, (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order); // 仕入形式設定(発注)

                        // --- ADD zhangkai 2010/07/01 ---------->>>>>
                        this._salesSlipStockInfoInputAcs.SettingStockTempFromPartySalesSilpNum(ref stockTemp, SalesSlipStockInfoInputAcs.ctDummyPartySalesSilpNum);
                        this._salesSlipInputAcs.SettingUOEOrderDtlRowFromAcceptAnOrderCnt(salesRowNo); // 発注数設定 
                        // --- ADD zhangkai 2010/07/01 ----------<<<<<

                        this._salesSlipStockInfoInputAcs.Cache(stockTemp);
                        this._salesSlipInputAcs.SettingSalesDetailRowUOEOrderDtl(salesRowNo);

                        //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.BoCodeColumn.ColumnName))
                        //{
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                        //}

                        //this.SettingGridRow(rowIndex, this._salesSlipInputAcs.SalesSlip);

                        this._salesSlipInputAcs.IsDataChanged = true;

                        //this.MoveReturnCell();

                        return 0;
                    }
                }
                #endregion

                #region 発注先
                if (columnName == this._salesDetailDataTable.SupplierCdForOrderColumn.ColumnName)
                {
                    UOESupplier uoeSupplier;
                    int st = this._uoeSupplierAcs.ExecuteGuid(this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.SectionCode, out uoeSupplier);
                    if (st == 0)
                    {
                        if (!this._salesSlipInputAcs.ExistSalesDetailEnableOdrMakerCd(salesRowNo, uoeSupplier.UOESupplierCd)) // 発注可能メーカーチェック
                        {
                            int makerCode = this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].GoodsMakerCd;
                            TMsgDisp.Show(
                                this._form,
                                emErrorLevel.ERR_LEVEL_INFO,
                                "",
                                "発注先コード [" + uoeSupplier.UOESupplierCd.ToString() + "] の発注可能メーカーに  " + Environment.NewLine + Environment.NewLine + "メーカーコード [" + makerCode.ToString() + "] が存在しません。",
                                -1,
                                MessageBoxButtons.OK);
                        }
                        else
                        {
                            this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOESupplier(salesRowNo, uoeSupplier);
                            this._salesSlipInputAcs.SettingSalesDetailRowUOEOrderDtl(salesRowNo);

                            //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.SupplierCdForOrderColumn.ColumnName))
                            //{
                            //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                            //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                            //}

                            this._salesSlipInputAcs.IsDataChanged = true;

                            //this.SettingGridRow(rowIndex, this._salesSlipInputAcs.SalesSlip);

                            //this.MoveReturnCell();
                        }

                        return 0;
                    }
                }
                #endregion

                #region 納品区分
                if (columnName == this._salesDetailDataTable.DeliveredGoodsDivNmColumn.ColumnName)
                {
                    UOEGuideName uoeGuideName;
                    UOEGuideName inUOEGuideName = new UOEGuideName();
                    inUOEGuideName.EnterpriseCode = this._enterpriseCode;
                    inUOEGuideName.SectionCode = this._salesSlipInputAcs.SalesSlip.SectionCode;
                    inUOEGuideName.UOESupplierCd = this._salesDetailDataTable[rowIndex].SupplierCdForOrder;
                    inUOEGuideName.UOEGuideDivCd = (int)SalesSlipInputAcs.UOEGuideDivCd.DeliveredGoodsDiv;
                    int st = _uoeGuideNameAcs.ExecuteGuid(inUOEGuideName, out uoeGuideName);

                    if (st == 0)
                    {
                        //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.UndoCell);

                        this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOEDeliGoodsDiv(salesRowNo, uoeGuideName.UOEGuideCode, uoeGuideName.UOEGuideNm);
                        this._salesSlipInputAcs.SettingSalesDetailRowUOEOrderDtl(salesRowNo);
                        //this._salesSlipInputAcs.SettingSalesDetailRowDeliveredGoodsDivNm(salesRowNo);// DEL 2010/07/01

                        //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.DeliveredGoodsDivNmColumn.ColumnName))
                        //{
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                        //}

                        this._salesSlipInputAcs.IsDataChanged = true;

                        //this.MoveReturnCell();

                        //return 0;//DEL 2010/07/01
                        return 1; //ADD 2010/07/01
                    }
                }
                #endregion

                #region H納品区分
                if (columnName == this._salesDetailDataTable.FollowDeliGoodsDivNmColumn.ColumnName)
                {
                    UOEGuideName uoeGuideName;
                    UOEGuideName inUOEGuideName = new UOEGuideName();
                    inUOEGuideName.EnterpriseCode = this._enterpriseCode;
                    inUOEGuideName.SectionCode = this._salesSlipInputAcs.SalesSlip.SectionCode;
                    inUOEGuideName.UOESupplierCd = this._salesDetailDataTable[rowIndex].SupplierCdForOrder;
                    inUOEGuideName.UOEGuideDivCd = (int)SalesSlipInputAcs.UOEGuideDivCd.DeliveredGoodsDiv;
                    int st = this._uoeGuideNameAcs.ExecuteGuid(inUOEGuideName, out uoeGuideName);

                    if (st == 0)
                    {
                        //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.UndoCell);

                        this._salesSlipInputAcs.SettingUOEOrderDtlRowFromFollowDeliGoodsDiv(salesRowNo, uoeGuideName.UOEGuideCode, uoeGuideName.UOEGuideNm);
                        this._salesSlipInputAcs.SettingSalesDetailRowUOEOrderDtl(salesRowNo);
                        //this._salesSlipInputAcs.SettingSalesDetailRowFollowDeliGoodsDivNm(salesRowNo);// DEL 2010/07/01

                        //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.FollowDeliGoodsDivNmColumn.ColumnName))
                        //{
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                        //}

                        this._salesSlipInputAcs.IsDataChanged = true;

                        //this.MoveReturnCell();

                        //return 0;//DEL 2010/07/01
                        return 1; //ADD 2010/07/01
                    }
                }
                #endregion

                #region 指定拠点
                if (columnName == this._salesDetailDataTable.UOEResvdSectionNmColumn.ColumnName)
                {
                    UOEGuideName uoeGuideName;
                    UOEGuideName inUOEGuideName = new UOEGuideName();
                    inUOEGuideName.EnterpriseCode = this._enterpriseCode;
                    inUOEGuideName.SectionCode = this._salesSlipInputAcs.SalesSlip.SectionCode;
                    inUOEGuideName.UOESupplierCd = this._salesDetailDataTable[rowIndex].SupplierCdForOrder;
                    inUOEGuideName.UOEGuideDivCd = (int)SalesSlipInputAcs.UOEGuideDivCd.UOEResvdSection;
                    int st = this._uoeGuideNameAcs.ExecuteGuid(inUOEGuideName, out uoeGuideName);

                    if (st == 0)
                    {
                        this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOEResvdSection(salesRowNo, uoeGuideName.UOEGuideCode, uoeGuideName.UOEGuideNm);
                        this._salesSlipInputAcs.SettingSalesDetailRowUOEOrderDtl(salesRowNo);
                        //this._salesSlipInputAcs.SettingSalesDetailRowUOEResvdSectionNm(salesRowNo);// DEL 2010/07/01

                        //if ((this.uGrid_Details.ActiveCell != null) && (this.uGrid_Details.ActiveCell.Column.Key == this._salesDetailDataTable.UOEResvdSectionNmColumn.ColumnName))
                        //{
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                        //    this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                        //}

                        this._salesSlipInputAcs.IsDataChanged = true;

                        //this.MoveReturnCell();

                        //return 0;//DEL 2010/07/01
                        return 1; //ADD 2010/07/01
                    }
                }
                #endregion

            }
            finally
            {
                // セルアクティブ時ボタン有効無効コントロール処理
                //this.ActiveCellButtonEnabledControl(rowIndex, this.uGrid_Details.ActiveCell.Column.Key);

                this._salesSlipInputAcs.SalesDetailDataTable.AcceptChanges();
            }

            return 0;

        }

        /// <summary>
        /// BLコードガイド起動処理
        /// </summary>
        /// <param name="bLGoodsCdUMntList"></param>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        private int ExecuteBLGoodsCd(out List<BLGoodsCdUMnt> bLGoodsCdUMntList, int salesRowNo)
        {
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.15 DEL
            //return this._salesSlipInputAcs.ExecuteBLGoodsCd( out bLGoodsCdUMntList, salesRowNo);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.15 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.15 ADD
            return this._salesSlipInputAcs.ExecuteBLGoodsCd(out bLGoodsCdUMntList, salesRowNo, this.GetBLGuideMode(_salesInputConstructionAcs.SalesInputConstruction.BLGuideMode));
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.15 ADD
        }

        /// <summary>
        /// BLガイドモード取得
        /// </summary>
        /// <param name="mode"></param>
        /// <returns></returns>
        private GoodsAcs.BLGuideMode GetBLGuideMode(int mode)
        {
            try
            {
                return (GoodsAcs.BLGuideMode)mode;
            }
            catch
            {
                return GoodsAcs.BLGuideMode.BLCode;
            }
        }

        # endregion

        # endregion ---- zhangkai

        # region Methods ---- gaofeng
        /// <summary>
        /// 拠点ガイドボタンクリックイベント
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="formName">フォーム名称</param>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <remarks>
        /// <br>Update Note: 2011/05/30 曹文傑 キャンペーン売価を取得するように変更</br>
        /// <br>Update Note: 2012/04/09 yangmj Redmine#29313 売上伝票入力 商品価格の再取得で販売区分が初期値に戻る</br>
        /// <br>Update Note: 2015/04/06 30757 佐々木 貴英</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br>             仕掛№2405 得意先変更時表示区分再取得対応</br>
        /// </remarks>
        public void sectionGuide(string enterpriseCode, string formName, out SalesSlip salesSlip)
        {
            SecInfoSetAcs secInfoSetAcs = new SecInfoSetAcs();
            bool reCalcSalesUnitPrice = false;
            SecInfoSet secInfoSet;
            salesSlip = new SalesSlip();

            int status = secInfoSetAcs.ExecuteGuid(enterpriseCode, false, out secInfoSet);

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                salesSlip = this._salesSlipInputAcs.SalesSlip;

                if (salesSlip.ResultsAddUpSecCd.Trim() != secInfoSet.SectionCode.Trim())
                {
                    salesSlip.ResultsAddUpSecCd = secInfoSet.SectionCode.Trim();
                    salesSlip.ResultsAddUpSecNm = secInfoSet.SectionGuideNm;

                    DialogResult dialogResult = DialogResult.No;

                    if ((salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) &&
                        (this._salesSlipInputAcs.ExistSalesDetailCanGoodsPriceReSettingData()))
                    {
                        dialogResult = TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            formName,
                            "拠点が変更されました。" + "\r\n" + "\r\n" +
                            "商品価格を再取得しますか？",
                            0,
                            MessageBoxButtons.YesNo,
                            MessageBoxDefaultButton.Button1);

                        if (dialogResult == DialogResult.Yes)
                        {
                            this._salesSlipInputAcs.SectionCode = secInfoSet.SectionCode.Trim(); // ADD 2011/05/30
                            reCalcSalesUnitPrice = true;
                            this._salesSlipInputAcs.SalesCodeChgFlag = true;// ADD 2012/04/09 yangmj redmine#29313
                        }
                    }
                }

                //---------------------------------------------------------------
                // 売上単価再計算時
                //---------------------------------------------------------------
                if (reCalcSalesUnitPrice)
                {
                    //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ---------------->>>>>
                    if (null != salesSlip && 0 < salesSlip.CustomerCode)
                    {
                        // 得意先コードが設定されている場合、商品情報の再取得処理を行う

                        // 得意先情報の取得
                        CustomerInfo customerInfo = null;
                        int readStatus = this._customerInfoAcs.ReadDBData(
                            ConstantManagement.LogicalMode.GetData0, enterpriseCode, salesSlip.CustomerCode, true, false, out customerInfo);

                        // 商品情報 再取得処理
                        if (null != customerInfo && 0 == status)
                        {
                            this._salesSlipInputAcs.ChangeDetailsFromCustomerCode(customerInfo, salesSlip);
                        }
                    }
                    //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ----------------<<<<<

                    // 消費税再設定
                    this._salesSlipInputInitDataAcs.GetTaxRate(salesSlip.SalesDate);

                    // 商品情報再取得
                    List<List<GoodsUnitData>> goodsUnitDataListList;
                    string msg;
                    this._salesSlipInputAcs.SearchPartsFromGoodsNoNonVariousSearchWholeWord(out goodsUnitDataListList, out msg);

                    // 商品価格の再設定を行います。
                    this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(goodsUnitDataListList);

                    // 商品価格の再設定を行います。(受注情報)
                    this._salesSlipInputAcs.AcptAnOdrDetailRowGoodsPriceReSetting(goodsUnitDataListList);

                    //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ---------------->>>>>

                    //明細行毎の部品価格更新内容格納オブジェクト保持フィールドに格納された情報に従って標準価格情報を更新
                    this._salesSlipInputAcs.SetListPriceDisplayByUpdateDataList();

                    //---ADD 30757 佐々木 貴英 2015/04/06 仕掛№2405 得意先変更時表示区分再取得対応 ----------------<<<<<

                    // 売上金額変更後発生イベント処理
                    this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());
                }

                // ---ADD 2011/05/30--------------->>>>>
                //---------------------------------------------------------------
                // 売上金額再計算時
                //---------------------------------------------------------------
                if (reCalcSalesUnitPrice)
                {
                    this.CalculationSalesPrice();

                    this.SalesPriceChanged();

                    salesSlip = this._salesSlipInputAcs.SalesSlip;
                }
                // ---ADD 2011/05/30---------------<<<<<

                // 売上データクラス→画面格納処理
                this.SetDisplay(salesSlip);

                // 売上データキャッシュ処理
                this._salesSlipInputAcs.Cache(salesSlip);

            }
            //return status;
        }

        /// <summary>
        /// 部門ガイドボタンクリックイベント
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="salesSlip">売上データオブジェクト</param>
        public void subSectionGuide(string enterpriseCode, out SalesSlip salesSlip)
        {
            SubSectionAcs subSectionAcs = new SubSectionAcs();
            SubSection subSection;
            salesSlip = new SalesSlip();

            int status = subSectionAcs.ExecuteGuid(out subSection, enterpriseCode);

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                salesSlip = this._salesSlipInputAcs.SalesSlip;

                if (salesSlip.SubSectionCode != subSection.SubSectionCode)
                {
                    salesSlip.SubSectionCode = subSection.SubSectionCode;
                    salesSlip.SubSectionName = subSection.SubSectionName;
                }

                // 売上データクラス→画面格納処理
                this.SetDisplay(salesSlip);

                // 売上データキャッシュ処理
                this._salesSlipInputAcs.Cache(salesSlip);

                // 次の項目へフォーカス移動
                //ChangeFocusEventArgs changeFocusEventArgs = new ChangeFocusEventArgs(false, false, false, Keys.Return, this.uButton_SubSectionGuide, this.uButton_SubSectionGuide);
                //this.tArrowKeyControl1_ChangeFocus(this, changeFocusEventArgs);
                //if (changeFocusEventArgs.NextCtrl != null)
                //{
                //    changeFocusEventArgs.NextCtrl.Focus();
                //}
            }
        }

        /// <summary>
        /// 従業員ガイドボタンクリックイベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="salesSlip">売上データオブジェクト</param>
        public void employeeGuide(string sender, string enterpriseCode, string salesInputNm, string salesInputCode, out SalesSlip salesSlip, out bool isReInputErr)
        {
            EmployeeAcs employeeAcs = new EmployeeAcs();
            employeeAcs.IsLocalDBRead = SalesSlipInputInitDataAcs.ctIsLocalDBRead;
            Employee employee;
            int status = employeeAcs.ExecuteGuid(enterpriseCode, true, out employee);
            salesSlip = new SalesSlip();

            // --- ADD 2010/05/04 ---------->>>>>
            isReInputErr = false;
            string beforeCode = salesInputCode;
            string beforeName = salesInputNm;
            // --- ADD 2010/05/04 ----------<<<<< 

            this._status = status;
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                salesSlip = this._salesSlipInputAcs.SalesSlip;

                // 担当者
                if (sender == "SalesEmployeeCdBtn")
                {
                    this._salesSlipInputAcs.SettingSalesSlipFromEmployeeInfo(ref salesSlip, employee);
                }
                // 受注者
                else if (sender == "FrontEmployeeCdBtn")
                {
                    salesSlip.FrontEmployeeCd = employee.EmployeeCode.Trim();
                    salesSlip.FrontEmployeeNm = employee.Name;
                    if (salesSlip.FrontEmployeeCd.Length > 16) salesSlip.FrontEmployeeNm = salesSlip.FrontEmployeeNm.Substring(0, 16);
                }
                // 発行者
                else if (sender == "SalesInputCodeBtn")
                {
                    salesSlip.SalesInputCode = employee.EmployeeCode.Trim();
                    salesSlip.SalesInputName = employee.Name;
                    if (salesSlip.SalesInputName.Length > 16) salesSlip.SalesInputName = salesSlip.SalesInputName.Substring(0, 16);
                }

                // 売上データクラス→画面格納処理
                this.SetDisplay(salesSlip);

                // 売上データキャッシュ処理
                this._salesSlipInputAcs.Cache(salesSlip);

                // 発行者
                if (sender == "SalesInputCodeBtn")
                {
                    // --- ADD 2010/05/04 ---------->>>>>

                    string code = employee.EmployeeCode.Trim();

                    if (string.IsNullOrEmpty(code) || string.IsNullOrEmpty(LoginInfoAcquisition.Employee.EmployeeCode))
                        return;
                    if (!code.Equals(LoginInfoAcquisition.Employee.EmployeeCode.Trim()))
                    {
                        // 発行者チェック区分 0:無視 1:再入力 2:警告
                        switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpAgentChkDiv)
                        {
                            case 0:
                                break;
                            case 1:
                                {
                                    TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    "TODO",
                                    "不正な値が存在するため、登録できません。"
                                    + "\r\n"
                                    + "\r\n"
                                    + "発行者とログイン担当者が不一致です。",
                                    0,
                                    MessageBoxButtons.OK);

                                    isReInputErr = true;

                                    break;
                                }
                            case 2:
                                {
                                    TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    "todo",
                                    "発行者とログイン担当者が不一致です。",
                                    0,
                                    MessageBoxButtons.OK);

                                    break;
                                }
                        }
                    }

                    if (isReInputErr)
                    {
                        salesSlip.SalesInputCode = beforeCode;
                        salesSlip.SalesInputName = beforeName;
                        if (salesSlip.SalesInputName.Length > 16) salesSlip.SalesInputName = salesSlip.SalesInputName.Substring(0, 16);

                        // 売上データクラス→画面格納処理
                        this.SetDisplay(salesSlip);

                        // 売上データキャッシュ処理
                        this._salesSlipInputAcs.Cache(salesSlip);

                        //this.tEdit_SalesInputCode.Focus(); // TODO yangmj
                    }
                    else
                    {
                        // TODO: flag = true;
                    }// ADD 2010/05/04
                }
            }
        }

        /// <summary>
        /// 管理番号ガイドボタンクリックイベント
        /// </summary>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="selectedInfo">選択したデータ</param>
        /// <param name="returnStatus">ガイドステータス</param>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="carMngCode">管理番号</param>
        /// <br>Update Note: 2011/11/21   鄧潘ハン  管理番号入力時、PMSF連携伝票の場合の仕様変更</br>
        public void carMngNoGuide(int customerCode, string enterpriseCode, out CarMangInputExtraInfo selectedInfo, out int returnStatus, int salesRowNo, string carMngCode)
        {
            selectedInfo = new CarMangInputExtraInfo();
            CarMngGuideParamInfo paramInfo = new CarMngGuideParamInfo();

            paramInfo.EnterpriseCode = enterpriseCode;

            // ガイドイベントフラグ
            paramInfo.IsGuideClick = true;

            if (customerCode != 0)
            {
                switch (this._salesSlipInputAcs.SalesSlip.CarMngDivCd)
                {
                    case 0: // しない
                        break;
                    case 1: // 登録(確認)
                    case 2: // 登録(自動)
                        // 「新規登録」行表示なし
                        paramInfo.IsDispNewRow = false;
                        // 得意先表示なし
                        paramInfo.IsDispCustomerInfo = false;
                        //得意先コード絞り込み有り
                        paramInfo.IsCheckCustomerCode = true;
                        //得意先コード
                        paramInfo.CustomerCode = this._salesSlipInputAcs.SalesSlip.CustomerCode;
                        // 管理番号絞り込み無し
                        paramInfo.IsCheckCarMngCode = false;
                        // 車輌管理区分チェック有り
                        paramInfo.IsCheckCarMngDivCd = true;
                        break;
                    case 3: // 登録無
                        break;
                }
            }
            else
            {
                // 「新規登録」行表示なし
                paramInfo.IsDispNewRow = false;
                // 得意先表示有り
                paramInfo.IsDispCustomerInfo = true;
                //得意先コード絞り込みなし
                paramInfo.IsCheckCustomerCode = false;
                // 管理番号絞り込み無し
                paramInfo.IsCheckCarMngCode = false;
                // 車輌管理区分チェック有り
                paramInfo.IsCheckCarMngDivCd = true;
            }

            int status = CarMngInputAcs.GetInstance().ExecuteGuid(paramInfo, out selectedInfo);
            //---ADD 2011/11/17---->>>>>
            if (!(this._salesSlipInputAcs._scmHeaderIListSvForWebCheck != null && this._salesSlipInputAcs._scmHeaderIListSvForWebCheck.Count > 0 && this._salesSlipInputAcs._scmHeaderIListSvForWebCheck[0].InqOrdDivCd != 0))
            {
                //---ADD 2011/11/17----<<<<<
                // --- UPD 2010/05/31 ---------->>>>>
                this._selectedCarMangInputExtraInfo = selectedInfo;
                // --- UPD 2010/05/31 ----------<<<<<

                returnStatus = status;

                AfterCarMngNoGuideReturn(status, selectedInfo, 0, salesRowNo, carMngCode);
            }
            //---ADD 2011/11/17---->>>>>
            else
            {
                if (status == 0)
                {
                    string cacheCarMngCode = selectedInfo.CarMngCode;
                    //---ADD 2011/11/21 ------------------------->>>>>
                    int cacheCustomerCode = selectedInfo.CustomerCode;
                    int cacheCarMngNo = selectedInfo.CarMngNo;
                    //---ADD 2011/11/21 ------------------------ <<<<<
                    // ADD 2013/04/19 SCM障害№10521対応 ---------------------------------->>>>>
                    int cacheNumberPlate1Code = selectedInfo.NumberPlate1Code;
                    string cacheNumberPlate1Name = selectedInfo.NumberPlate1Name;
                    string cacheNumberPlate2 = selectedInfo.NumberPlate2;
                    string cacheNumberPlate3 = selectedInfo.NumberPlate3;
                    int cacheNumberPlate4 = selectedInfo.NumberPlate4;
                    // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------<<<<<

                    Guid CarRelationGuid = selectedInfo.CarRelationGuid;
                    selectedInfo = new CarMangInputExtraInfo();
                    selectedInfo.CarMngCode = cacheCarMngCode;
                    selectedInfo.CarRelationGuid = CarRelationGuid;
                    //---ADD 2011/11/21 ------------------------->>>>>
                    selectedInfo.CustomerCode = cacheCustomerCode;
                    selectedInfo.CarMngNo = cacheCarMngNo;
                    //---ADD 2011/11/21 -------------------------<<<<<
                    // ADD 2013/04/19 SCM障害№10521対応 ---------------------------------->>>>>
                    selectedInfo.NumberPlate1Code = cacheNumberPlate1Code;
                    selectedInfo.NumberPlate1Name = cacheNumberPlate1Name;
                    selectedInfo.NumberPlate2 = cacheNumberPlate2;
                    selectedInfo.NumberPlate3 = cacheNumberPlate3;
                    selectedInfo.NumberPlate4 = cacheNumberPlate4;
                    // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------<<<<<
                    returnStatus = 1;

                    SalesInputDataSet.CarInfoDataTable detailtable = this._salesSlipInputAcs.CarInfoDataTable;
                    if (detailtable.Rows.Count > 0)
                    {
                        foreach (SalesInputDataSet.CarInfoRow sourceRow in detailtable)
                        {
                            SalesInputDataSet.CarInfoRow targetRow = detailtable.FindByCarRelationGuid(sourceRow.CarRelationGuid);
                            targetRow.CarMngCode = cacheCarMngCode;
                            //---ADD 2011/11/21 ------------------------->>>>>
                            targetRow.CustomerCode = cacheCustomerCode;
                            targetRow.CarMngNo = cacheCarMngNo;
                            //---ADD 2011/11/21 -------------------------<<<<<
                            // ADD 2013/04/19 SCM障害№10521対応 ---------------------------------->>>>>
                            targetRow.NumberPlate1Code = cacheNumberPlate1Code;
                            targetRow.NumberPlate1Name = cacheNumberPlate1Name;
                            targetRow.NumberPlate2 = cacheNumberPlate2;
                            targetRow.NumberPlate3 = cacheNumberPlate3;
                            targetRow.NumberPlate4 = cacheNumberPlate4;
                            // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------<<<<<
                        }
                    }
                    else
                    {
                        SalesInputDataSet.CarInfoRow carInfoRow = detailtable.NewCarInfoRow();
                        carInfoRow.CarMngCode = cacheCarMngCode;
                        carInfoRow.CarRelationGuid = CarRelationGuid;
                        //---ADD 2011/11/21 ------------------------->>>>>
                        carInfoRow.CustomerCode = cacheCustomerCode;
                        carInfoRow.CarMngNo = cacheCarMngNo;
                        //---ADD 2011/11/21 -------------------------<<<<<
                        // ADD 2013/04/19 SCM障害№10521対応 ---------------------------------->>>>>
                        carInfoRow.NumberPlate1Code = cacheNumberPlate1Code;
                        carInfoRow.NumberPlate1Name = cacheNumberPlate1Name;
                        carInfoRow.NumberPlate2 = cacheNumberPlate2;
                        carInfoRow.NumberPlate3 = cacheNumberPlate3;
                        carInfoRow.NumberPlate4 = cacheNumberPlate4;
                        // ADD 2013/04/19 SCM障害№10521対応 ----------------------------------<<<<<
                        detailtable.AddCarInfoRow(carInfoRow);
                    }
                }
                else
                {
                    returnStatus = -1;
                }
            }
            //---ADD 2011/11/17----<<<<<

            //---DEL 2011/11/17 ------------------------>>>>>
            // --- UPD 2010/05/31 ---------->>>>>
            //this._selectedCarMangInputExtraInfo = selectedInfo;
            // --- UPD 2010/05/31 ----------<<<<<

            //returnStatus = status;

            //AfterCarMngNoGuideReturn(status, selectedInfo, 0, salesRowNo, carMngCode);
            //---DEL 2011/11/17 ------------------------<<<<<

        }

        /// <summary>
        /// 車種ガイドボタンクリックイベント
        /// </summary>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="modelCode">modelCode</param>
        /// <param name="modelSubCode">modelSubCode</param>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="modelNameU">modelNameU</param>
        public int modelFullGuide(int makerCode, int modelCode, int modelSubCode, string enterpriseCode, int salesRowNo, out ModelNameU modelNameU)
        {
            ModelNameUAcs modelNameUAcs = new ModelNameUAcs();
            modelNameU = new ModelNameU();
            int status = modelNameUAcs.ExecuteGuid2(makerCode, modelCode, modelSubCode, enterpriseCode, out modelNameU);

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                //int salesRowNo = this._salesSlipDetailInput.GetActiveRowSalesRowNo();
                this._salesSlipInputAcs.SettingCarInfoRowFromModelInfo(salesRowNo, modelNameU);
                //this.SetDisplayCarInfo(salesRowNo, CarSearchType.csNone);
                this.SetDisplayHeaderFooterInfo(this._salesSlipInputAcs.SalesSlip);

            }
            return status;
        }

        /// <summary>
        /// 備考ガイドボタンクリックイベント
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <br>Update Note: 2010/06/02 譚洪 PM.NS障害・改良対応（７月リリース案件）No.27</br>
        /// <br>                        備考コードの取得変更対応。</br>
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        // --- UPD 2010/07/12 ---------->>>>>
        //public void slipNote(string sender, string enterpriseCode, out SalesSlip salesSlip)
        public int slipNote(string sender, string enterpriseCode, out SalesSlip salesSlip)
        // --- UPD 2010/07/12 ----------<<<<<
        {
            NoteGuidAcs noteGuidAcs = new NoteGuidAcs();
            noteGuidAcs.IsLocalDBRead = SalesSlipInputInitDataAcs.ctIsLocalDBRead;
            NoteGuidBd noteGuidBd;
            salesSlip = this._salesSlipInputAcs.SalesSlip;
            // --- UPD 2010/07/12 ---------->>>>>
            //int status;
            int status = -1;
            // --- UPD 2010/07/12 ----------<<<<<

            // 備考１
            if (sender == "SlipNoteCodeBtn")
            {
                status = noteGuidAcs.ExecuteGuide(out noteGuidBd, enterpriseCode, SalesSlipInputInitDataAcs.ctDIVCODE_NoteGuideDivCd_1);
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (this._salesSlipInputInitDataAcs.SlipNoteCharCnt != 0
                        && this._salesSlipInputInitDataAcs.SlipNoteCharCnt < noteGuidBd.NoteGuideName.Length)
                    {
                        salesSlip.SlipNote = noteGuidBd.NoteGuideName.Substring(0, this._salesSlipInputInitDataAcs.SlipNoteCharCnt);
                    }
                    else
                    {
                        salesSlip.SlipNote = noteGuidBd.NoteGuideName;
                    }

                    salesSlip.SlipNoteCode = noteGuidBd.NoteGuideCode;

                }
            }

            // 備考２
            if (sender == "SlipNote2CodeBtn")
            {
                // -------UPD 2010/06/02------->>>>>
                //status = noteGuidAcs.ExecuteGuide(out noteGuidBd, this._enterpriseCode, SalesSlipInputInitDataAcs.ctDIVCODE_NoteGuideDivCd_2);
                status = noteGuidAcs.ExecuteGuide(out noteGuidBd, this._enterpriseCode, SalesSlipInputInitDataAcs.ctDIVCODE_NoteGuideDivCd_1);
                // -------UPD 2010/06/02-------<<<<<

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (this._salesSlipInputInitDataAcs.SlipNote2CharCnt != 0
                        && this._salesSlipInputInitDataAcs.SlipNote2CharCnt < noteGuidBd.NoteGuideName.Length)
                    {
                        salesSlip.SlipNote2 = noteGuidBd.NoteGuideName.Substring(0, this._salesSlipInputInitDataAcs.SlipNote2CharCnt);
                    }
                    else
                    {
                        salesSlip.SlipNote2 = noteGuidBd.NoteGuideName;
                    }

                    salesSlip.SlipNote2Code = noteGuidBd.NoteGuideCode;

                    // ----- ADD K2011/08/12 --------------------------->>>>>
                    // ----- ADD K2011/12/09 --------------------------->>>>>
                    if (this._enterpriseCode == login_EnterpriseCode)
                    {
                        // ----- ADD K2011/12/09 ---------------------------<<<<<
                        if (this._salesSlipInputAcs == null)
                        {
                            this._salesSlipInputAcs = SalesSlipInputAcs.GetInstance();
                        }
                        int countNum = 0;
                        string PaperId = this._salesSlipInputAcs.CallGetSlipPrtSetPaperId(salesSlip);
                        if (PaperId != null && (PaperId == "A995" || PaperId == "A998") && (salesSlip.AcptAnOdrStatus == 30))
                        {
                            if (string.IsNullOrEmpty(salesSlip.SlipNote2))
                            {
                                TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                "ドットを２つ以上入力して下さい。",
                                -1,
                                MessageBoxButtons.OK);
                            }
                            else
                            {
                                foreach (char car in salesSlip.SlipNote2)
                                {
                                    if (car == '.')
                                    {
                                        ++countNum;
                                    }
                                }
                                if (countNum < 2)
                                {
                                    TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    "",
                                    "ドットを２つ以上入力して下さい。",
                                    -1,
                                    MessageBoxButtons.OK);
                                }
                            }
                        }
                    }// ADD K2011/12/09
                    // ----- ADD K2011/08/12 ---------------------------<<<<<
                }
            }

            // 備考３
            if (sender == "SlipNote3CodeBtn")
            {
                // -------UPD 2010/06/02------->>>>>
                //status = noteGuidAcs.ExecuteGuide(out noteGuidBd, this._enterpriseCode, SalesSlipInputInitDataAcs.ctDIVCODE_NoteGuideDivCd_3);
                status = noteGuidAcs.ExecuteGuide(out noteGuidBd, this._enterpriseCode, SalesSlipInputInitDataAcs.ctDIVCODE_NoteGuideDivCd_1);
                // -------UPD 2010/06/02-------<<<<<

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (this._salesSlipInputInitDataAcs.SlipNote3CharCnt != 0
                        && this._salesSlipInputInitDataAcs.SlipNote3CharCnt < noteGuidBd.NoteGuideName.Length)
                    {
                        salesSlip.SlipNote3 = noteGuidBd.NoteGuideName.Substring(0, this._salesSlipInputInitDataAcs.SlipNote3CharCnt);
                    }
                    else
                    {
                        salesSlip.SlipNote3 = noteGuidBd.NoteGuideName;
                    }

                    salesSlip.SlipNote3Code = noteGuidBd.NoteGuideCode;

                }
            }

            // 売上データクラス→画面格納処理
            this.SetDisplay(salesSlip);

            // 売上データキャッシュ処理
            this._salesSlipInputAcs.Cache(salesSlip);

            return status; // ADD 2010/07/12
        }

        /// <summary>
        /// 返品理由ガイドボタンクリックイベント
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="userGdHd">userGdHd</param>
        /// <param name="UserGdBd">UserGdBd</param>
        /// <param name="salesSlip">売上データオブジェクト</param>
        public void retGoodsReason(string enterpriseCode, out UserGdHd userGdHd, out UserGdBd userGdBd, out SalesSlip salesSlip)
        {
            UserGuideAcs userGuideAcs = new UserGuideAcs();
            salesSlip = new SalesSlip();

            if (userGuideAcs.ExecuteGuid(enterpriseCode, out userGdHd, out userGdBd, SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_RetGoodsReason) == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                salesSlip = this._salesSlipInputAcs.SalesSlip;

                salesSlip.RetGoodsReasonDiv = userGdBd.GuideCode;
                salesSlip.RetGoodsReason = userGdBd.GuideName;
                if (salesSlip.RetGoodsReason.Length > 100)
                {
                    salesSlip.RetGoodsReason = salesSlip.RetGoodsReason.Substring(0, 100);
                }

                // 売上データクラス→画面格納処理
                this.SetDisplay(salesSlip);

                // 売上データキャッシュ処理
                this._salesSlipInputAcs.Cache(salesSlip);

                //// 次の項目へフォーカス移動
                //if (sender is Control)
                //{
                //    // 次の項目へフォーカス移動
                //    Control nextCtrl = this.GetNextControlForFooter(this.tEdit_RetGoodsReason, SalesSlipInputAcs.MoveMethod.NextMove);
                //    if (nextCtrl != null)
                //    {
                //        nextCtrl.Focus();
                //        this._prevControl = nextCtrl;
                //        this.SettingGuideButtonToolEnabled(nextCtrl);
                //    }
                //}
            }
        }

        /// <summary>
        /// 売上伝票ガイドボタンクリックイベント
        /// </summary>
        /// <param name="formName">フォーム名称</param>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="acptAnOdrStatusDisplay">acptAnOdrStatusDisplay</param>
        /// <param name="acptAnOdrStatus">acptAnOdrStatus</param>
        /// <param name="estimateDivide">estimateDivide</param>
        /// <param name="searchResult">searchResult</param>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        /// <br>Update Note: 2011/12/15 tianjw</br>
        /// <br>             Redmine#27390 拠点管理/売上日のチェック</br>
        /// <br>Update Note: 2011/12/14 yangmj</br>
        /// <br>管理番号   : 10707327-00 2012/01/25配信分</br>
        /// <br>             redmine#27359 伝票検索の画面表示の対応</br>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        // --- UPD 2011/11/18---------->>>>>
        //public void salesSlipGuide(string formName, string enterpriseCode, int acptAnOdrStatusDisplay, ref int acptAnOdrStatus, out int estimateDivide, out SalesSlipSearchResult searchResult, out SalesSlip salesSlip, out bool outDialogResult, out bool outStatus, out bool consTaxLayMethodChangedFlg)
        public void salesSlipGuide(string formName, string enterpriseCode, int acptAnOdrStatusDisplay, ref int acptAnOdrStatus, out int estimateDivide, out SalesSlipSearchResult searchResult, out SalesSlip salesSlip, out bool outDialogResult, out bool outStatus, out bool consTaxLayMethodChangedFlg, out bool isPCCUOESaleSlip)
        // --- UPD 2011/11/18----------<<<<<
        {
            outDialogResult = false;
            outStatus = false;
            consTaxLayMethodChangedFlg = false;
            isPCCUOESaleSlip = false; // ADD 2011/11/18
            MAHNB04110UA salesSlipGuide = new MAHNB04110UA();
            try
            {
                salesSlipGuide.TComboEditor_SalesFormalCode = true;
                //salesSlipGuide.AutoSearch = true;//DEL 2011/12/14 YANGMJ REDMINE#27359
                salesSlipGuide.AutoSearch = false;//ADD 2011/12/14 YANGMJ REDMINE#27359
                salesSlipGuide.SectionCode = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
                salesSlipGuide.SectionName = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
                salesSlipGuide.AcptAnOdrStatus = this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay;
                salesSlipGuide.ShowEstimateInput = false;
                salesSlipGuide.StartMode = 1;//ADD 2011/12/14 YANGMJ REDMINE#27359
                salesSlip = new SalesSlip();

                //int acptAnOdrStatusDisplay = (int)this.tComboEditor_AcptAnOdrStatusDisplay.Value;
                //int acptAnOdrStatus = (int)this.tComboEditor_AcptAnOdrStatus.Value;
                SalesSlipInputAcs.GetAcptAnOdrStatusAndEstimateDivideFromDisplay(acptAnOdrStatusDisplay, ref acptAnOdrStatus, out estimateDivide);

                //DialogResult result = salesSlipGuide.ShowGuide(_owner, enterpriseCode, acptAnOdrStatus, estimateDivide, out searchResult);//  DEL イン晶晶 2015/05/12 for Redmine#45799
                //------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
                // ウィンドの表示位置をセットする
                salesSlipGuide.StartPosition = FormStartPosition.CenterScreen;
                // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
                //IntPtr handle;
                //try
                //{
                //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
                //}
                //catch
                //{

                //}
                //DialogResult result;
                //if (handle != null)
                //{
                //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
                //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
                //    result = salesSlipGuide.ShowGuide(wrp, enterpriseCode, acptAnOdrStatus, estimateDivide, out searchResult);
                //}
                //else
                //{
                //    result = salesSlipGuide.ShowGuide(this._salesSlipInputAcs.Owner, enterpriseCode, acptAnOdrStatus, estimateDivide, out searchResult);
                //}
                // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
                //------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
                DialogResult result = salesSlipGuide.ShowGuide(this._salesSlipInputAcs.Owner, enterpriseCode, acptAnOdrStatus, estimateDivide, out searchResult); // ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応

                if (result == DialogResult.OK)
                {
                    if (searchResult != null)
                    {
                        DialogResult dialogResult = DialogResult.Yes;

                        if (this._salesSlipInputAcs.IsDataChanged)
                        {
                            dialogResult = TMsgDisp.Show(
                                this._form,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                formName,
                                "入力中の" + this._salesSlipInputAcs.GetAcptAnOdrStatusName(this._salesSlipInputAcs.SalesSlip) + "情報がクリアされます。" + "\r\n" + "\r\n" +
                                "よろしいですか？",
                                0,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button1);
                        }

                        if (dialogResult == DialogResult.Yes)
                        {
                            outDialogResult = true;
                            //this.tEdit_SalesEmployeeCd.Focus();

                            // 画面初期化処理
                            //this.Clear(false, false, false, false, false, false);  //DEL 2010/06/02
                            this.Clear(false, false, false, false, false, false, false, 0);  //ADD 2010/06/02

                            //// データリード処理
                            //this.Cursor = Cursors.WaitCursor;

                            SalesSlip baseSalesSlip;
                            int status = this._salesSlipInputAcs.ReadDBData(searchResult.EnterpriseCode, searchResult.AcptAnOdrStatus, searchResult.SalesSlipNum, out baseSalesSlip);
                            //this.Cursor = Cursors.Default;

                            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                            {
                                outStatus = true;
                                salesSlip = this._salesSlipInputAcs.SalesSlip.Clone();
                                salesSlip.PreSalesDate = salesSlip.SalesDate; // ADD 2011/12/15

                                // --- ADD 2010/11/25 ---------->>>>>
                                int cusStatus = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                                CustomerInfo customerInfo = null;

                                cusStatus = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, LoginInfoAcquisition.EnterpriseCode, salesSlip.CustomerCode, true, false, out customerInfo);

                                if (cusStatus == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                {
                                    // 得意先情報を再読込し、以下の項目を再セットする。
                                    salesSlip.BusinessTypeCode = customerInfo.BusinessTypeCode; // 業種コード
                                    salesSlip.BusinessTypeName = customerInfo.BusinessTypeName; // 業種名称
                                    salesSlip.SalesAreaCode = customerInfo.SalesAreaCode; // 販売エリアコード
                                    salesSlip.SalesAreaName = customerInfo.SalesAreaName; // 販売エリア名称
                                }

                                // --- ADD 2010/11/25 ----------<<<<<

                                //// 売上データ入力モード設定処理
                                //this.SettingStockSlipInputMode(ref salesSlip);

                                /*----- DEL 2014/08/28 陳艶丹 Redmine#43336 ----->>>>>
                                // --- ADD 2011/11/12---------->>>>>
                                // BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑの在庫確認で作成された見積伝票を修正呼出しした場合
                                if (this.isStockSales(salesSlip))
                                {
                                    // 入力モード設定処理
                                    // 参照モードで画面に表示する
                                    //salesSlip.InputMode = SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Red;//DEL 2011/11/17
                                    salesSlip.InputMode = SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ReadOnly;//ADD 2011/11/17
                                    isPCCUOESaleSlip = true; // ADD 2011/11/18
                                }
                                // --- ADD 2011/11/12----------<<<<<
                                // ----- DEL 2014/08/28 陳艶丹 Redmine#43336 -----<<<<<*/

                                // --- ADD K2013/09/11 Y.Wakita ---------->>>>>
                                #region フタバ個別対応
                                if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaOutSlipCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
                                {
                                    if (this.isFtSalesMoveOut(this._salesSlipInputAcs.SalesSlip))
                                    {
                                        // 入力モード設定処理
                                        // 参照モードで画面に表示する
                                        this._salesSlipInputAcs.SalesSlip.InputMode = SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ReadOnly;
                                    }
                                }
                                #endregion
                                // --- ADD K2013/09/11 Y.Wakita ----------<<<<<

                                // 表示用受注ステータスの設定
                                SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

                                // 伝票区分コンボエディタアイテム設定処理
                                this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatus, false);

                                // 表示用伝票区分の設定
                                SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

                                //// 売上データクラス→画面格納処理
                                this.SetDisplay(salesSlip);

                                // 売上データキャッシュ処理
                                this._salesSlipInputAcs.Cache(salesSlip);

                                if (baseSalesSlip.ConsTaxLayMethod != salesSlip.ConsTaxLayMethod)
                                {
                                    consTaxLayMethodChangedFlg = true;
                                    // 売上金額計算処理
                                    this.CalculationSalesPrice();

                                    // 売上金額変更後発生イベント処理
                                    this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());
                                }

                                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                                if (salesSlip.ConsTaxLayMethod == 0)
                                {
                                    // 0:伝票転嫁
                                    this._salesSlipInputInitDataAcs.ConsTaxLayMethod = 0;
                                    // 既存伝票呼出すの場合、元伝票の税率を利用する。
                                    this._salesSlipInputInitDataAcs.TaxRateDiv = 2;
                                    // 消費税再設定
                                    this._salesSlipInputInitDataAcs.GetTaxRateMst(salesSlip.SalesDate);
                                    this._salesSlipInputInitDataAcs.TaxRate = salesSlip.ConsTaxRate;
                                    if(salesSlip.ConsTaxRate != this._salesSlipInputInitDataAcs.TaxRateMst)
                                    {
                                        this._salesSlipInputInitDataAcs.SlipSrcTaxFlg = true;
                                    }
                                    else
                                    {
                                        this._salesSlipInputInitDataAcs.SlipSrcTaxFlg = false;
                                    }
                                    if ((this._salesSlipInputInitDataAcs.TaxRateInput != salesSlip.ConsTaxRate && this._salesSlipInputInitDataAcs.TaxRateInput != 0.0) ||
                                        (this._salesSlipInputInitDataAcs.TaxRateInput == 0.0 && this._salesSlipInputInitDataAcs.TaxRateMst != salesSlip.ConsTaxRate))
                                    {
                                        TMsgDisp.Show(
                                            new Form(),
                                            emErrorLevel.ERR_LEVEL_INFO,
                                            "",
                                            string.Format("修正元伝票に税率({0}%)が設定されています。" + "\r\n" + "税率({0}%)で設定します。", (salesSlip.ConsTaxRate * 100)),
                                            status,
                                            MessageBoxButtons.OK);
                                        this._salesSlipInputInitDataAcs.TaxRateInput = salesSlip.ConsTaxRate;
                                    }
                                }
                                else
                                {
                                    this._salesSlipInputInitDataAcs.ConsTaxLayMethod = salesSlip.ConsTaxLayMethod;
                                    // 伝票転嫁以外の場合、税率マスタの税率を利用する。
                                    this._salesSlipInputInitDataAcs.TaxRateDiv = 0;
                                }
                                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<

                                // 計上時は空白行を削除する(出荷計上 受注計上 見積計上)
                                if ((salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp) ||
                                    (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                                    (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp))
                                {
                                    this.DeleteEmptyRow(true);
                                }

                                // 明細行数制限
                                this._salesSlipInputAcs.SettingSalesDetailRowInputRowCount(salesSlip.DetailRowCountForReadSlip);

                                //>>>2010/09/27
                                //if (salesSlip.DepositAllowanceTtl != 0)
                                //{
                                //    TMsgDisp.Show(
                                //    this._form,
                                //    emErrorLevel.ERR_LEVEL_INFO,
                                //    formName,
                                //    "入金済み伝票です。" + "\r\n" + "\r\n" +
                                //    "削除する場合は、入金伝票入力より　" + "\r\n" +
                                //    "対象の入金伝票を赤伝処理後、　" + "\r\n" +
                                //    "削除することができます。　",
                                //    -1,
                                //    MessageBoxButtons.OK);
                                //}
                                //<<<2010/09/27

                                //伝票備考、伝票備考２、伝票備考３の入力桁数を制御する
                                this._salesSlipInputAcs.GetNoteCharCnt();
                                //SetNoteCharCnt();

                                // --- ADD 2010/05/04 ---------->>>>>
                                this._salesSlipInputAcs.ReadSlipFlg = true;
                                // --- ADD 2010/05/04 ----------<<<<<
                            }
                            else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                            {
                                // ----- ADD K2011/12/09 --------------------------->>>>>
                                // --- UPD T.Miyamoto 2012/11/13 ---------->>>>>
                                //if (this._enterpriseCode == login_EnterpriseCode)
                                if ((this._salesSlipInputInitDataAcs.Opt_DateCtrl == (int)SalesSlipInputInitDataAcs.Option.ON) ||
                                    (this._enterpriseCode == login_EnterpriseCode))
                                // --- UPD T.Miyamoto 2012/11/13 ----------<<<<<
                                {
                                    if (this._salesSlipInputAcs.SalesSlipCanEditDivCd == false) return;
                                }
                                // ----- ADD K2011/12/09 ---------------------------<<<<<
                                //if (this._salesSlipInputAcs.SalesSlipCanEditDivCd == false) return; // ADD K2011/08/12 // DEL K2011/12/09 
                                TMsgDisp.Show(
                                    this._form,
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    formName,
                                    "該当するデータが存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);

                                return;
                            }
                            else
                            {
                                TMsgDisp.Show(
                                    this._form,
                                    emErrorLevel.ERR_LEVEL_STOPDISP,
                                    formName,
                                    "売上・出荷データの取得に失敗しました。",
                                    status,
                                    MessageBoxButtons.OK);

                                return;
                            }
                        }
                    }
                }
                //this._prevControl = this.ActiveControl;
            }
            finally
            {
                salesSlip = this._salesSlip;
                salesSlipGuide.Dispose();
            }
        }

        /// <summary>
        /// 得意先ガイドボタンクリックイベント（オーバーロード）
        /// </summary>
        /// <param name="customerFlag">TRUE:得意先;False:納入先</param>
        /// <param name="addresseeCode">納入先コード</param>
        /// <param name="customerCode">得意先コード</param>
        /// <param name="customerSearchRet">customerSearchRet</param>
        /// <param name="dialogResultFlag">ガイドステータス</param>
        /// <param name="customerCodeChangedFlg">得意先を変更したフラグ</param>
        /// <param name="OptCarMngFlg">車輌管理オプション有無フラグ</param>
        public void customerGuide(bool customerFlag, int addresseeCode, int customerCode, out CustomerSearchRet customerSearchRet, out int dialogResultFlag, out bool customerCodeChangedFlg, out bool optCarMngFlg)
        {
            // --- ADD 2010/06/21 ---------->>>>>
            this._salesSlipInputAcs.EmployeeFlag = true;
            // --- ADD 2010/06/21 ----------<<<<<

            PMKHN04001UA customerSearchForm = new PMKHN04001UA();
            customerSearchRet = new CustomerSearchRet();
            customerCodeChangedFlg = false;
            optCarMngFlg = false;

            // 得意先
            if (customerFlag)
            {
                customerSearchForm = new PMKHN04001UA(PMKHN04001UA.SEARCHMODE_CUSTOMER_ONLY, PMKHN04001UA.EXECUTEMODE_GUIDE_ONLY);
                customerSearchForm.CustomerSelect += new CustomerSelectEventHandler(this.CustomerSearchForm_CustomerSelect);
                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().CustGuideDispDiv == 1) // 0:全て表示 1:自拠点のみ表示
                {
                    customerSearchForm.MngSectionCode = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
                    customerSearchForm.MngSectionName = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
                }
                customerSearchForm.AutoSearch = true;

                // 納入先未入力時は得意先情報をセット
                if (addresseeCode == 0)
                {
                    customerSearchForm.CustomerSelect += new CustomerSelectEventHandler(this.CustomerSearchForm_AddresseeSelect);
                }
            }
            else
            // 納入先
            {
                // UPD 2013/03/01 T.Miyamoto ------------------------------>>>>>
                //customerSearchForm = new PMKHN04001UA(PMKHN04001UA.SEARCHMODE_RECEIVER, PMKHN04001UA.EXECUTEMODE_GUIDE_ONLY);
                customerSearchForm = new PMKHN04001UA(PMKHN04001UA.SEARCHMODE_NORMAL, PMKHN04001UA.EXECUTEMODE_GUIDE_ONLY);
                // UPD 2013/03/01 T.Miyamoto ------------------------------<<<<<
                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().CustGuideDispDiv == 1) // 0:全て表示 1:自拠点のみ表示
                {
                    customerSearchForm.MngSectionCode = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
                    customerSearchForm.MngSectionName = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
                }
                customerSearchForm.AutoSearch = true;
                customerSearchForm.CustomerSelect += new CustomerSelectEventHandler(this.CustomerSearchForm_AddresseeSelect);
            }


            DialogResult dialogResult = customerSearchForm.ShowDialog(_owner);

            //>>>2010/08/23
            if (dialogResult == DialogResult.Cancel)
            {
                dialogResultFlag = 1;
            }
            else
                //<<<2010/08/23
                if (dialogResult != DialogResult.OK)
                {
                    dialogResultFlag = 1;
                    SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;

                    // 得意先情報設定処理
                    this._salesSlipInputAcs.SettingSalesSlipFromCustomer(ref salesSlip, null);

                    // 得意先掛率グループ再セット
                    this._salesSlipInputAcs.SettingSalesDetailCustRateGrpCode();

                    // 売上明細データセッティング処理（課税区分設定）
                    this._salesSlipInputAcs.SettingSalesDetailTaxationCode(salesSlip.ConsTaxLayMethod, salesSlip.TotalAmountDispWayCd);
                }
                else
                {
                    dialogResultFlag = 0;
                    if (this._salesSlipInputAcs.SalesSlip.CustomerCode != customerCode)
                    {
                        customerCodeChangedFlg = true;
                        // 車輌管理オプション有りの場合
                        if (this._salesSlipInputInitDataAcs.Opt_CarMng == (int)SalesSlipInputInitDataAcs.Option.ON)
                        {
                            optCarMngFlg = true;
                        }

                        //伝票備考、伝票備考２、伝票備考３の入力桁数を制御する
                        this._salesSlipInputAcs.GetNoteCharCnt();
                    }

                    // ADD 2016/09/27 Redmine#48877 譚洪 ------------------ >>>>
                    // 得意先
                    if (customerFlag)
                    {
                        // なし。
                    }
                    // 納入先
                    else
                    {
                        SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;
                        bool reCalcSalesPrice = false;
                        _salesSlipInputAcs.AfterAddresseeCodeFocue(ref salesSlip, this._salesSlipInputAcs.SalesSlip.AddresseeCode, this._enterpriseCode, ref reCalcSalesPrice);
                    }
                    // ADD 2016/09/27 Redmine#48877 譚洪 ------------------ <<<<

                }
            customerSearchRet = this.customerSearchRet;

            // DEL 2016/09/27 Redmine#48877 譚洪 ------------------ >>>>
            // 得意先
            //if (customerFlag)
            //{
            //    //追加情報タブ項目Visible設定
            //    //SettingAddInfoVisible();
            //}
            //// ADD 2016/09/18 Redmine#48851 譚洪 ------------------ >>>>
            //// 納入先
            //else
            //{
            //    SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;
            //    bool reCalcSalesPrice = false;
            //    _salesSlipInputAcs.AfterAddresseeCodeFocue(ref salesSlip, this._salesSlipInputAcs.SalesSlip.AddresseeCode, this._enterpriseCode, ref reCalcSalesPrice);
            //}
            // ADD 2016/09/18 Redmine#48851 譚洪 ------------------ <<<<
            // DEL 2016/09/27 Redmine#48877 譚洪 ------------------ <<<<

            // --- ADD 2010/06/21 ---------->>>>>
            this._salesSlipInputAcs.EmployeeFlag = false;
            // --- ADD 2010/06/21 ----------<<<<<
        }

        public int ShowSalesSlipInputSetup()
        {
            //GetSetupEnterMoveTable();
            SalesSlipInputSetup salesInputSetup = new SalesSlipInputSetup();
            // --- UPD 2010/06/26 ---------->>>>>
            //DialogResult dialogResult = salesInputSetup.ShowDialog(_form);
            DialogResult dialogResult = salesInputSetup.ShowDialog();
            // --- UPD 2010/06/26 ----------<<<<<

            //---ADD 2010/07/06---------->>>>>
            if (dialogResult == DialogResult.OK)
            {
                SaveToolManagerCustomizeInfoForBat();
            }
            //---ADD 2010/07/06----------<<<<<

            _afterSettingFlag = true; //ADD yangyi K2014/02/25

            return (int)dialogResult;
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="customerSearchRet">customerSearchRet</param>
        private void CustomerSearchForm_AddresseeSelect(object sender, CustomerSearchRet customerSearchRet)
        {
            if (customerSearchRet == null) return;

            this.customerSearchRet = customerSearchRet;

            // 納入先設定処理
            //this.SettingAddressee(false, customerSearchRet);
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="sender">対象オブジェクト</param>
        /// <param name="customerSearchRet">customerSearchRet</param>
        private void CustomerSearchForm_CustomerSelect(object sender, CustomerSearchRet customerSearchRet)
        {
            if (customerSearchRet == null) return;

            this.customerSearchRet = customerSearchRet;

            // 得意先設定処理
            //this.SettingCustomer(false, customerSearchRet);

            // 納入先設定処理
            //this.SettingAddressee(false, customerSearchRet);
        }

        /// <summary>
        /// 
        /// </summary>
        private void GetSetupEnterMoveTable()
        {
            this._enterMoveTable.Clear();
            this._enterMoveTableInit.Clear();
            // 列表示状態クラスリストXMLファイルをデシリアライズ
            List<ColDisplayStatusExp> colDisplayStatusList = DeserializeColDisplayStatus(ct_FILENAME_COLDISPLAYSTATUS);

            // 列表示状態コレクションクラスをインスタンス化
            this._colDisplayStatusList = new ColDisplayStatusList(colDisplayStatusList, this._salesDetailDataTable);
            this._salesInputConstructionAcs.NameTable = new Hashtable();
            EnterMoveValue enterMoveValue = null;

            bool stockFlg = false; // ADD 2013/02/14 T.Miyamoto

            foreach (ColDisplayStatusExp colDisplayStatus in this._colDisplayStatusList.GetColDisplayStatusList())
            {
                // 明細部フォーカス開始項目
                if (colDisplayStatus.Key == SalesSlipInputConstructionAcs.ct_StartPosittion) this._startKeyName = colDisplayStatus.MoveEnterKeyName;
                // 明細部フォーカス終了項目
                if (colDisplayStatus.Key == SalesSlipInputConstructionAcs.ct_EndPosittion) this._endKeyNameList[0] = colDisplayStatus.MoveEnterKeyName;

                // ADD 2013/02/14 T.Miyamoto ------------------------------>>>>>
                if (colDisplayStatus.MoveEnterKeyName == this._startKeyName)
                {
                    this._endKeyNameList[0] = colDisplayStatus.Key;
                }
                if (colDisplayStatus.MoveEnterKeyName == "SupplierCdForStock")
                {
                    stockFlg = true;
                }
                // ADD 2013/02/14 T.Miyamoto ------------------------------<<<<<

                // 移動先テーブル
                enterMoveValue = new EnterMoveValue();
                enterMoveValue.Key = colDisplayStatus.MoveEnterKeyName;
                enterMoveValue.Enabled = colDisplayStatus.Enabled;
                enterMoveValue.EnabledControl = colDisplayStatus.EnabledControl;
                enterMoveValue.EnterStopControl = colDisplayStatus.EnterStopControl;
                this._enterMoveTable[colDisplayStatus.Key] = enterMoveValue;

                // 項目名称リスト
                // 有効項目リストに存在する項目のみ対象とする
                if (_effectiveList.Contains(colDisplayStatus.Key))
                {
                    // UPD 2013/02/14 T.Miyamoto ------------------------------>>>>>
                    //this._salesInputConstructionAcs.NameTable[colDisplayStatus.Key] = this._salesDetailDataTable.Columns[colDisplayStatus.Key].Caption;
                    //this._salesInputConstructionAcs.NameTable[this._salesDetailDataTable.Columns[colDisplayStatus.Key].Caption] = colDisplayStatus.Key;
                    if (colDisplayStatus.Key == "SupplierCdForStock")
                    {
                        string _caption = this._salesDetailDataTable.Columns[colDisplayStatus.Key].Caption + "(仕入情報)";
                        this._salesInputConstructionAcs.NameTable[colDisplayStatus.Key] = _caption;
                        this._salesInputConstructionAcs.NameTable[_caption] = colDisplayStatus.Key;
                    }
                    // ADD 譚洪 K2014/01/22 --- >>>>>
                    if (colDisplayStatus.Key == "SalesCode") 
                    {
                        if (this._salesSlipInputInitDataAcs.Opt_NoBuTo == (int)SalesSlipInputInitDataAcs.Option.ON)
                        {
                            this._salesInputConstructionAcs.NameTable[colDisplayStatus.Key] = "特販区分";
                            this._salesInputConstructionAcs.NameTable[this._salesDetailDataTable.Columns[colDisplayStatus.Key].Caption] = colDisplayStatus.Key;
                        }
                        else
                        {
                            this._salesInputConstructionAcs.NameTable[colDisplayStatus.Key] = this._salesDetailDataTable.Columns[colDisplayStatus.Key].Caption;
                            this._salesInputConstructionAcs.NameTable[this._salesDetailDataTable.Columns[colDisplayStatus.Key].Caption] = colDisplayStatus.Key;
                        }
                    }
                    // ADD 譚洪 K2014/01/22 --- <<<<<
                    else
                    {
                        this._salesInputConstructionAcs.NameTable[colDisplayStatus.Key] = this._salesDetailDataTable.Columns[colDisplayStatus.Key].Caption;
                        this._salesInputConstructionAcs.NameTable[this._salesDetailDataTable.Columns[colDisplayStatus.Key].Caption] = colDisplayStatus.Key;
                    }
                    // UPD 2013/02/14 T.Miyamoto ------------------------------<<<<<
                }
            }
            // ADD 2013/02/14 T.Miyamoto ------------------------------>>>>>
            if (stockFlg == true)
            {
                this._endKeyNameList[0] = "SupplierCdForStock";
            }
            // ADD 2013/02/14 T.Miyamoto ------------------------------<<<<<

            // 開始終了項目設定
            enterMoveValue = new EnterMoveValue();
            enterMoveValue.Key = this._startKeyName;
            enterMoveValue.Enabled = true;
            enterMoveValue.EnabledControl = false;
            enterMoveValue.EnterStopControl = false;
            this._enterMoveTable[SalesSlipInputConstructionAcs.ct_StartPosittion] = enterMoveValue;
            enterMoveValue = new EnterMoveValue();
            enterMoveValue.Key = this._endKeyNameList[0].ToString();
            enterMoveValue.Enabled = true;
            enterMoveValue.EnabledControl = false;
            enterMoveValue.EnterStopControl = false;
            this._enterMoveTable[SalesSlipInputConstructionAcs.ct_EndPosittion] = enterMoveValue;

            this._salesInputConstructionAcs.EffectiveList = this._effectiveList;
            this._salesInputConstructionAcs.EnterMoveTable = this._enterMoveTable;
            this._salesInputConstructionAcs.EndKeyNameList = this._endKeyNameList;
            this._salesInputConstructionAcs.EndKeyNameListInit = this._endKeyNameListInit;
            // ユーザー設定アクセスクラスに反映
            this._salesInputConstructionAcs.EnterMoveTable = this._enterMoveTable;

            // 初期設定移動先テーブル作成
            Dictionary<string, ColDisplayStatusExp> colDisplayStatusExpDic = this._colDisplayStatusList.GetColDisplayInitDictionary();
            ICollection keys = colDisplayStatusExpDic.Keys;
            foreach (string key in keys)
            {
                enterMoveValue = new EnterMoveValue();
                enterMoveValue.Key = colDisplayStatusExpDic[key].MoveEnterKeyName;
                enterMoveValue.Enabled = colDisplayStatusExpDic[key].Enabled;
                enterMoveValue.EnabledControl = colDisplayStatusExpDic[key].EnabledControl;
                enterMoveValue.EnterStopControl = colDisplayStatusExpDic[key].EnterStopControl;
                this._enterMoveTableInit.Add(colDisplayStatusExpDic[key].Key, enterMoveValue);
            }
            enterMoveValue = new EnterMoveValue();
            enterMoveValue.Key = this._startKeyName;
            enterMoveValue.Enabled = true;
            enterMoveValue.EnabledControl = false;
            enterMoveValue.EnterStopControl = false;
            this._enterMoveTableInit[SalesSlipInputConstructionAcs.ct_StartPosittion] = enterMoveValue;
            enterMoveValue = new EnterMoveValue();
            enterMoveValue.Key = this._endKeyNameListInit[0].ToString();
            enterMoveValue.Enabled = true;
            enterMoveValue.EnabledControl = false;
            enterMoveValue.EnterStopControl = false;
            this._enterMoveTableInit[SalesSlipInputConstructionAcs.ct_EndPosittion] = enterMoveValue;
            this._salesInputConstructionAcs.EnterMoveTableInit = this._enterMoveTableInit;
        }

        /// <summary>
        /// 列表示状態クラスリストデシリアライズ処理
        /// </summary>
        /// <param name="fileName">デシリアライズ元ファイル名称</param>
        /// <returns>デシリアライズされたColDisplayStatusクラスリストのインスタンス</returns>
        public List<ColDisplayStatusExp> DeserializeColDisplayStatus(string fileName)
        {
            List<ColDisplayStatusExp> retList = new List<ColDisplayStatusExp>();

            if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings_GridInfo, fileName)))
            {
                XmlElement root = null;
                XmlDocument xmldoc = new XmlDocument();
                xmldoc.Load(Path.Combine(ConstantManagement_ClientDirectory.UISettings_GridInfo, fileName));
                root = xmldoc.DocumentElement;

                //列表示状態クラスリストの編集
                XmlNodeList xmlNodeList = root.ChildNodes;
                for (int i = 0; i < xmlNodeList.Count; i++)
                {
                    XmlNode node = xmlNodeList[i];

                    if (node.HasChildNodes)
                    {
                        //列表示状態クラス
                        ColDisplayStatusExp colDisplayStatusExp = new ColDisplayStatusExp();
                        //列表示状態属性の編集
                        for (int n = 0; n < node.ChildNodes.Count; n++)
                        {
                            XmlNode node1 = node.ChildNodes[n];
                            //列ヘッダスパン
                            if (node1.Name.ToLower() == "labelspan")
                            {
                                colDisplayStatusExp.LabelSpan = Int32.Parse(node1.InnerXml);
                            }
                            //水平座標
                            else if (node1.Name.ToLower() == "originx")
                            {
                                colDisplayStatusExp.OriginX = Int32.Parse(node1.InnerXml);
                            }
                            //垂直座標
                            else if (node1.Name.ToLower() == "originy")
                            {
                                colDisplayStatusExp.OriginY = Int32.Parse(node1.InnerXml);
                            }
                            //左右に跨るセル数
                            else if (node1.Name.ToLower() == "spanx")
                            {
                                colDisplayStatusExp.SpanX = Int32.Parse(node1.InnerXml);
                            }
                            //上下に跨るセル数
                            else if (node1.Name.ToLower() == "spany")
                            {
                                colDisplayStatusExp.SpanY = Int32.Parse(node1.InnerXml);
                            }
                            //行移動項目(Rowに無関係に行間を移動する場合の移動先のKeyName)
                            else if (node1.Name.ToLower() == "movelinekeyname")
                            {
                                colDisplayStatusExp.MoveLineKeyName = node1.InnerXml;
                            }
                            //Enterキー入力時移動項目(Enterキー入力時に移動する基本移動項目)
                            else if (node1.Name.ToLower() == "moveenterkeyname")
                            {
                                colDisplayStatusExp.MoveEnterKeyName = node1.InnerXml;
                            }
                            //有効設定
                            else if (node1.Name.ToLower() == "enabled")
                            {
                                colDisplayStatusExp.Enabled = Boolean.Parse(node1.InnerXml);
                            }
                            //表示可否
                            else if (node1.Name.ToLower() == "enabledcontrol")
                            {
                                colDisplayStatusExp.EnabledControl = Boolean.Parse(node1.InnerXml);
                            }
                            //移動可否
                            else if (node1.Name.ToLower() == "enterstopcontrol")
                            {
                                colDisplayStatusExp.EnterStopControl = Boolean.Parse(node1.InnerXml);
                            }
                            //HeaderFixed
                            else if (node1.Name.ToLower() == "headerfixed")
                            {
                                colDisplayStatusExp.HeaderFixed = Boolean.Parse(node1.InnerXml);
                            }
                            //Key
                            else if (node1.Name.ToLower() == "key")
                            {
                                colDisplayStatusExp.Key = node1.InnerXml;
                            }
                            //VisiblePosition
                            else if (node1.Name.ToLower() == "visibleposition")
                            {
                                colDisplayStatusExp.VisiblePosition = Int32.Parse(node1.InnerXml);
                            }
                            //Width
                            else if (node1.Name.ToLower() == "width")
                            {
                                colDisplayStatusExp.Width = Int32.Parse(node1.InnerXml);
                            }
                            else
                            {
                                continue;
                            }
                        }
                        retList.Add(colDisplayStatusExp);
                    }
                }
            }

            return retList;
        }

        /// <summary>
        /// 
        /// </remarks>
        /// <param name="key">キー</param>
        public void setToolMenuCustomizeSetting(string key)
        {
            // --- ADD 2013/04/11 Y.Wakita ---------->>>>>
            if (this._toolManagerCustomizeSetting != null)
            {
            // --- ADD 2013/04/11 Y.Wakita ----------<<<<< 
	            ToolMenuCustomizeSetting toolMenuCustomizeSetting = this._toolManagerCustomizeSetting.GetMenueToolButtonCustomizeSettings(key);
	            this._toolMenuCustomizeSetting = toolMenuCustomizeSetting;

	            if (toolMenuCustomizeSetting != null)
	            {
	                this._toolMenuCustomizeSettingNotNull = true;
	                this._toolBarVisible = toolMenuCustomizeSetting.ToolBarVisible;
	                this._toolBarDockedRow = toolMenuCustomizeSetting.DockedRow;
	                this._toolBarDockedColumn = toolMenuCustomizeSetting.DockedColumn;
	                this._toolBarDockedPosition = toolMenuCustomizeSetting.DockedPosition;
	            }
            // --- ADD 2013/04/11 Y.Wakita ---------->>>>>
            }
            // --- ADD 2013/04/11 Y.Wakita ----------<<<<< 

        }

        /// <summary>
        /// <param name="toolMenuCustomizeSettingNotNull">toolMenuCustomizeSettingNotNull</param>
        /// <param name="toolBarVisible">ツールバーのvisible値</param>
        /// <param name="toolBarDockedRow">toolBarDockedRow</param>
        /// <param name="toolBarDockedColumn">toolBarDockedColumn</param>
        /// <param name="toolBarDockedPosition">toolBarDockedPosition</param>
        /// </remarks>
        public void getToolMenuCustomizeSetting(out bool toolMenuCustomizeSettingNotNull, out bool toolBarVisible, out int toolBarDockedRow, out int toolBarDockedColumn, out int toolBarDockedPosition)
        {
            toolMenuCustomizeSettingNotNull = this._toolMenuCustomizeSettingNotNull;
            toolBarVisible = this._toolBarVisible;
            toolBarDockedRow = this._toolBarDockedRow;
            toolBarDockedColumn = this._toolBarDockedColumn;
            toolBarDockedPosition = this._toolBarDockedPosition;

        }

        /// <summary>
        /// 
        /// </remarks>
        /// <param name="key">キー</param>
        public void setToolButtonCustomizeSetting(string key)
        {
            //>>>2010/12/02
            //// ---------- UPD 2010/11/25 ----------------------------------->>>>>
            ////ToolButtonCustomizeSetting toolButtonCustomizeSetting = this._toolMenuCustomizeSetting.GetToolButtonCustomizeSetting(key);
            //ToolButtonCustomizeSetting toolButtonCustomizeSetting;
            //if (key != "ButtonTool_Setup")
            //{
            //    toolButtonCustomizeSetting = this._toolMenuCustomizeSetting.GetToolButtonCustomizeSetting(key);
            //}
            //else 
            //{
            //    this._toolButtonCustomizeSettingNotNull = false;
            //    return;
            //}
            //// ---------- UPD 2010/11/25 -----------------------------------<<<<<
            // --- ADD 2013/04/11 Y.Wakita ---------->>>>>
            if (this._toolMenuCustomizeSetting != null)
            {
            // --- ADD 2013/04/11 Y.Wakita ----------<<<<< 
		            ToolButtonCustomizeSetting toolButtonCustomizeSetting = this._toolMenuCustomizeSetting.GetToolButtonCustomizeSetting(key);
		            //<<<2010/12/02

		            if (toolButtonCustomizeSetting != null)
		            {
		                this._toolButtonCustomizeSettingNotNull = true;
		                if (toolButtonCustomizeSetting.ToolButtonCustomizeInfo.CustomizedVisible == Infragistics.Win.DefaultableBoolean.Default)
		                {
		                    this._toolBarCustomizedVisible = 0;
		                }
		                if (toolButtonCustomizeSetting.ToolButtonCustomizeInfo.CustomizedVisible == Infragistics.Win.DefaultableBoolean.True)
		                {
		                    this._toolBarCustomizedVisible = 1;
		                }
		                if (toolButtonCustomizeSetting.ToolButtonCustomizeInfo.CustomizedVisible == Infragistics.Win.DefaultableBoolean.False)
		                {
		                    this._toolBarCustomizedVisible = 2;
		                }
		            }

		            //---ADD 2010/07/19---------->>>>>
		            if (key == "ButtonTool_DeleteSlip")
		            {
		                foreach (FunctionConstruction functionConstruction in this._salesInputConstructionAcs.FunctionConstructionListValue.functionConstruction)
		                {
		                    if (functionConstruction.Key == "ButtonTool_DeleteSlip")
		                    {
		                        //---UPD 2010/07/19---------->>>>>
		                        //if (functionConstruction.Checked)
		                        //{
		                        //    this._toolBarCustomizedVisible = 1;
		                        //}
		                        //else
		                        //{
		                        //    this._toolBarCustomizedVisible = 2;
		                        //}

		                        if (toolButtonCustomizeSetting.ToolButtonCustomizeInfo.CustomizedVisible == Infragistics.Win.DefaultableBoolean.Default
		                            || toolButtonCustomizeSetting.ToolButtonCustomizeInfo.CustomizedVisible == Infragistics.Win.DefaultableBoolean.True)
		                        {
		                            functionConstruction.Checked = true;
		                        }
		                        else
		                        {
		                            functionConstruction.Checked = false;
		                        }
		                        //---UPD 2010/07/19----------<<<<<
		                    }
		                }

		            }
		            //---ADD 2010/07/19----------<<<<<
		        // --- ADD 2013/04/11 Y.Wakita ---------->>>>>
		        }
		        // --- ADD 2013/04/11 Y.Wakita ----------<<<<< 

        }

        //---ADD 2010/08/13---------->>>>>
        /// <summary>
        /// BitButton情報取得処理
        /// </remarks>
        /// <param name="key">キー</param>
        public void GetBitButtonCustomizeSetting(string key, out int bitButtonCustomizedVisible)
        {
            bitButtonCustomizedVisible = 0;

            if (string.IsNullOrEmpty(key))
            {
                return;
            }

            foreach (FunctionDetailConstruction functionDetailConstruction in this._salesInputConstructionAcs.FunctionDetailConstructionListValue.functionDetailConstruction)
            {
                if (key.Equals(functionDetailConstruction.Key))
                {
                    if (functionDetailConstruction.Checked == true)
                    {
                        bitButtonCustomizedVisible = 1;
                    }
                    else
                    {
                        bitButtonCustomizedVisible = 2;
                    }
                    return;
                }
            }
        }
        //---ADD 2010/08/13----------<<<<<
        /// <summary>
        /// 
        /// </remarks>
        /// <param name="toolButtonCustomizeSettingNotNull">True:toolButtonCustomizeSetting != null;False:toolButtonCustomizeSetting == null </param>
        /// <param name="toolBarCustomizedVisible">ツールバーのボタンのvisible値</param>
        public void getToolButtonCustomizeSetting(out bool toolButtonCustomizeSettingNotNull, out int toolBarCustomizedVisible)
        {
            toolButtonCustomizeSettingNotNull = this._toolButtonCustomizeSettingNotNull;
            toolBarCustomizedVisible = this._toolBarCustomizedVisible;
        }

        /// <summary>
        /// ツールバーのカスタマイズ設定の取得
        /// </summary>
        /// <param name="key">キー</param>
        /// <param name="customizedVisible">ツールバーのボタンのvisible値</param>
        public void SaveToolbarCustomizeSetting(string key, bool customizedVisible)
        {
            Infragistics.Win.DefaultableBoolean defaultboolean;
            if (customizedVisible)
            {
                defaultboolean = Infragistics.Win.DefaultableBoolean.Default;
            }
            else
            {
                defaultboolean = Infragistics.Win.DefaultableBoolean.False;
            }
            this._saveToolButtonCustomizeSettings.ToolButtonCustomizeSettingsList.Add(new ToolButtonCustomizeSetting(key, new ToolButtonCustomizeInfo(defaultboolean)));

        }

        /// <summary>
        /// ツールバーマネージャーのカスタマイズ情報の保存
        /// </summary>
        /// <param name="key">キー</param>
        /// <param name="visible">visible値</param>
        /// <param name="dockedRow">dockedRow</param>
        /// <param name="dockedColumn">dockedColumn</param>
        /// <param name="dockedPosition">dockedPosition</param>
        public void SaveToolManagerCustomizeInfo(string key, bool visible, int dockedRow, int dockedColumn, int dockedPosition)
        {
            this._saveToolButtonCustomizeSettings.ToolBarKey = key;
            this._saveToolButtonCustomizeSettings.ToolBarVisible = visible;
            this._saveToolButtonCustomizeSettings.DockedRow = dockedRow;
            this._saveToolButtonCustomizeSettings.DockedColumn = dockedColumn;
            this._saveToolButtonCustomizeSettings.DockedPosition = dockedPosition;

            this._saveToolManagerCustomizeSetting.ToolMenuCustomizeSettingList.Add(this._saveToolButtonCustomizeSettings);

        }

        //---ADD 2010/07/06---------->>>>>
        public void SaveToolManagerCustomizeInfoForBat()
        {
            List<ToolButtonCustomizeSetting> toolButtonCustomizeSettingsList = new List<ToolButtonCustomizeSetting>();
            ToolMenuCustomizeSetting toolMenuCustomizeSetting0 = new ToolMenuCustomizeSetting();
            ToolMenuCustomizeSetting toolMenuCustomizeSetting = new ToolMenuCustomizeSetting();
            List<ToolMenuCustomizeSetting> toolMenuCustomizeSettingList = new List<ToolMenuCustomizeSetting>();
            foreach (FunctionConstruction functionConstruction in this._salesInputConstructionAcs.FunctionConstructionListValue.functionConstruction)
            {
                ToolButtonCustomizeSetting toolButtonCustomizeSetting = new ToolButtonCustomizeSetting();
                toolButtonCustomizeSetting.ButtonKey = functionConstruction.Key;
                if (functionConstruction.Checked)
                {
                    toolButtonCustomizeSetting.ToolButtonCustomizeInfo.CustomizedVisible = Infragistics.Win.DefaultableBoolean.Default;
                }
                else
                {
                    toolButtonCustomizeSetting.ToolButtonCustomizeInfo.CustomizedVisible = Infragistics.Win.DefaultableBoolean.False;
                }

                toolButtonCustomizeSettingsList.Add(toolButtonCustomizeSetting);
            }

            toolMenuCustomizeSetting.ToolButtonCustomizeSettingsList = toolButtonCustomizeSettingsList;
            toolMenuCustomizeSetting.ToolBarKey = "UltraToolbar_Standard";
            toolMenuCustomizeSettingList.Add(toolMenuCustomizeSetting0);
            toolMenuCustomizeSettingList.Add(toolMenuCustomizeSetting);

            this._saveToolManagerCustomizeSetting.ToolMenuCustomizeSettingList = toolMenuCustomizeSettingList;
            this._toolMenuCustomizeSetting = toolMenuCustomizeSetting;
            this._toolManagerCustomizeSetting = this._saveToolManagerCustomizeSetting;

            SaveCustomizeXml();

        }
        //---ADD 2010/07/06----------<<<<<

        /// <summary>
        /// ツールバーマネージャーのカスタマイズ情報の保存
        /// </summary>
        public void SaveCustomizeXml()
        {
            //Serialize(ctAssemblyName, this._saveToolManagerCustomizeSetting);         // DEL 2010/07/06
            SerializeForBat(ctAssemblyName, this._saveToolManagerCustomizeSetting);     // ADD 2010/07/06
        }

        /// <summary>
        /// ツールマネージャーのカスタマイズ情報のデシリアライズ
        /// </summary>
        /// <param name="saveFileName">保存ファイル名</param>
        /// <returns>ToolManagerCustomizeSettingオブジェクト</returns>
        private ToolManagerCustomizeSetting DeserializeCustomize(string saveFileName)
        {
            if (string.IsNullOrEmpty(saveFileName)) return null;

            string fileName = string.Format("{0}_{1}.xml", "ToolButtonCustomize", saveFileName);
            try
            {
                if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, fileName)))
                {
                    XmlElement root = null;
                    XmlDocument xmldoc = new XmlDocument();
                    xmldoc.Load(Path.Combine(ConstantManagement_ClientDirectory.UISettings, fileName));
                    root = xmldoc.DocumentElement;

                    XmlNodeList xmlNodeList = root.ChildNodes;

                    ToolManagerCustomizeSetting toolManagerCustomizeSetting = new ToolManagerCustomizeSetting();

                    //ToolMenuCustomizeSetting
                    for (int i = 0; i < xmlNodeList.Count; i++)
                    {
                        XmlNode node = xmlNodeList[i];

                        if (node.HasChildNodes)
                        {
                            List<ToolMenuCustomizeSetting> toolMenuCustomizeSettingList = new List<ToolMenuCustomizeSetting>();
                            //ToolMenuCustomizeSetting
                            for (int n = 0; n < node.ChildNodes.Count; n++)
                            {
                                XmlNode toolMenuCustomizeSettingNode = node.ChildNodes[n];

                                if (toolMenuCustomizeSettingNode.HasChildNodes)
                                {
                                    ToolMenuCustomizeSetting toolMenuCustomizeSetting = new ToolMenuCustomizeSetting();
                                    for (int m = 0; m < toolMenuCustomizeSettingNode.ChildNodes.Count; m++)
                                    {
                                        XmlNode xmlNode = toolMenuCustomizeSettingNode.ChildNodes[m];
                                        // ToolButtonCustomizeSettingsList
                                        if (xmlNode.Name.ToLower() == "toolbarkey")
                                        {
                                            toolMenuCustomizeSetting.ToolBarKey = xmlNode.InnerXml;
                                        }
                                        else if (xmlNode.Name.ToLower() == "toolbarvisible")
                                        {
                                            toolMenuCustomizeSetting.ToolBarVisible = Boolean.Parse(xmlNode.InnerXml);
                                        }
                                        else if (xmlNode.Name.ToLower() == "dockedrow")
                                        {
                                            toolMenuCustomizeSetting.DockedRow = Int32.Parse(xmlNode.InnerXml);
                                        }
                                        else if (xmlNode.Name.ToLower() == "dockedcolumn")
                                        {
                                            toolMenuCustomizeSetting.DockedColumn = Int32.Parse(xmlNode.InnerXml);
                                        }
                                        else if (xmlNode.Name.ToLower() == "dockedposition")
                                        {
                                            toolMenuCustomizeSetting.DockedPosition = Int32.Parse(xmlNode.InnerXml);
                                        }
                                        else
                                        {
                                            List<ToolButtonCustomizeSetting> toolButtonCustomizeSettingList = new List<ToolButtonCustomizeSetting>();

                                            // DOMから、ToolButtonCustomizeSettingの取得
                                            for (int j = 0; j < xmlNode.ChildNodes.Count; j++)
                                            {
                                                XmlNode toolButtonNode = xmlNode.ChildNodes[j];
                                                if (toolButtonNode.HasChildNodes)
                                                {
                                                    //toolButtonCustomizeSetting OBJECTの設定
                                                    ToolButtonCustomizeSetting toolButtonCustomizeSetting = new ToolButtonCustomizeSetting();
                                                    for (int k = 0; k < toolButtonNode.ChildNodes.Count; k++)
                                                    {
                                                        XmlNode tButtonNode = toolButtonNode.ChildNodes[k];

                                                        if (tButtonNode.Name.ToLower() == "buttonkey")
                                                        {
                                                            //toolButtonCustomizeSetting OBJECT にButtonKeyの設定
                                                            toolButtonCustomizeSetting.ButtonKey = tButtonNode.InnerXml;
                                                        }
                                                        else
                                                        {
                                                            ToolButtonCustomizeInfo toolButtonCustomizeInfo = new ToolButtonCustomizeInfo();
                                                            if (tButtonNode.ChildNodes[0].Name.ToLower() == "customizedvisible")
                                                            {
                                                                String value = tButtonNode.ChildNodes[0].InnerText;
                                                                if (value.ToLower() == "true")
                                                                {
                                                                    //toolButtonCustomizeInfo OBJECT にCustomizedVisibleの設定
                                                                    toolButtonCustomizeInfo.CustomizedVisible = Infragistics.Win.DefaultableBoolean.True;
                                                                }
                                                                else if (value.ToLower() == "false")
                                                                {
                                                                    //toolButtonCustomizeInfo OBJECT にCustomizedVisibleの設定
                                                                    toolButtonCustomizeInfo.CustomizedVisible = Infragistics.Win.DefaultableBoolean.False;
                                                                }
                                                                else
                                                                {
                                                                    //toolButtonCustomizeInfo OBJECT にCustomizedVisibleの設定
                                                                    toolButtonCustomizeInfo.CustomizedVisible = Infragistics.Win.DefaultableBoolean.Default;
                                                                }
                                                            }
                                                            //toolButtonCustomizeSetting OBJECT にtoolButtonCustomizeInfoの設定
                                                            toolButtonCustomizeSetting.ToolButtonCustomizeInfo = toolButtonCustomizeInfo;
                                                        }
                                                    }
                                                    // toolButtonCustomizeSettingList OBJECT にtoolButtonCustomizeSettingの設定
                                                    toolButtonCustomizeSettingList.Add(toolButtonCustomizeSetting);//update
                                                }
                                            }
                                            //toolMenuCustomizeSetting OBJECT にtoolButtonCustomizeSettingListの設定
                                            toolMenuCustomizeSetting.ToolButtonCustomizeSettingsList = toolButtonCustomizeSettingList;
                                        }
                                    }
                                    //toolMenuCustomizeSettingList OBJECT にtoolMenuCustomizeSettingの設定
                                    toolMenuCustomizeSettingList.Add(toolMenuCustomizeSetting);
                                }
                            }
                            //toolManagerCustomizeSetting OBJECT にtoolMenuCustomizeSettingListの設定
                            toolManagerCustomizeSetting.ToolMenuCustomizeSettingList = toolMenuCustomizeSettingList;
                        }
                    }
                    this._toolManagerCustomizeSetting = toolManagerCustomizeSetting;
                    return toolManagerCustomizeSetting;
                }
            }
            catch (System.InvalidOperationException)
            {
                UserSettingController.DeleteUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, fileName));
            }
            return null;
        }

        //---ADD 2010/07/06---------->>>>>
        /// <summary>
        /// ツールマネージャーのカスタマイズ情報のデシリアライズ
        /// </summary>
        /// <param name="saveFileName">保存ファイル名</param>
        /// <returns>ToolManagerCustomizeSettingオブジェクト</returns>
        private void DeserializeCustomizeForBat(string saveFileName)
        {
            this._toolManagerCustomizeSetting = this.DeserializeForBat(saveFileName);

            //  UPD 2010/07/17  ---- >>>>
            //setFunctionConstructionListValue();
            if (this._toolManagerCustomizeSetting != null)
            {
                setFunctionConstructionListValue();
            }
            //  UPD 2010/07/17  ---- <<<<
        }

        /// <summary>
        /// ツールマネージャーのカスタマイズ情報をデシリアライズします。
        /// </summary>
        /// <param name="saveFileName">保存ファイル名</param>
        /// <returns>ToolManagerCustomizeSettingオブジェクト</returns>
        private ToolManagerCustomizeSetting DeserializeForBat(string saveFileName)
        {
            if (string.IsNullOrEmpty(saveFileName)) return null;

            string fileName = string.Format("{0}_{1}.xml", ct_CommonFileName, saveFileName);
            try
            {
                if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, fileName)))
                {
                    return UserSettingController.ByteDeserializeUserSetting<ToolManagerCustomizeSetting>(Path.Combine(ConstantManagement_ClientDirectory.UISettings, fileName));
                }
            }
            catch (System.InvalidOperationException)
            {
                UserSettingController.DeleteUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, fileName));
            }
            return null;
        }

        /// <summary>
        /// ツールマネージャーのカスタマイズ情報のシリアライズ
        /// </summary>
        /// <param name="saveFileName">保存ファイル名</param>
        /// <param name="toolManagerCustomizeSetting">ToolManagerCustomizeSettingオブジェクト</param>
        private void SerializeForBat(string saveFileName, ToolManagerCustomizeSetting toolManagerCustomizeSetting)
        {
            if (string.IsNullOrEmpty(saveFileName)) return;

            string fileName = string.Format("{0}_{1}.xml", ct_CommonFileName, saveFileName);

            UserSettingController.ByteSerializeUserSetting(toolManagerCustomizeSetting, Path.Combine(ConstantManagement_ClientDirectory.UISettings, fileName));
        }
        //---ADD 2010/07/06----------<<<<<

        /// <summary>
        /// ツールマネージャーのカスタマイズ情報のシリアライズ
        /// </summary>
        /// <param name="saveFileName">保存ファイル名</param>
        /// <param name="toolManagerCustomizeSetting">ToolManagerCustomizeSettingオブジェクト</param>
        private void Serialize(string saveFileName, ToolManagerCustomizeSetting toolManagerCustomizeSetting)
        {
            if (string.IsNullOrEmpty(saveFileName)) return;

            string fileName = string.Format("{0}_{1}.xml", "ToolButtonCustomize", saveFileName);

            XmlElement root = null;
            XmlDocument xmldoc = new XmlDocument();
            //ファイルがある場合、ファイルの読み
            if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, fileName)))
            {
                xmldoc.Load(Path.Combine(ConstantManagement_ClientDirectory.UISettings, fileName));
                root = xmldoc.DocumentElement;
                root.RemoveAll();
            }
            //ファイルがない場合、ファイルの作成
            else
            {
                XmlDeclaration xmlDeclaration = xmldoc.CreateXmlDeclaration("1.0", null, null);
                XmlNode xmlNode = xmldoc.CreateNode(XmlNodeType.Element, "ToolManagerCustomizeSetting", "");
                xmldoc.AppendChild(xmlNode);
                xmldoc.InsertBefore(xmlDeclaration, xmlNode);
                root = xmldoc.DocumentElement;
            }

            root.SetAttribute("xmlns:xsi", @"http://www.w3.org/2001/XMLSchema-instance");
            root.SetAttribute("xmlns:xsd", @"http://www.w3.org/2001/XMLSchema");

            XmlNode toolMenuCustomizeSettingListNode = xmldoc.CreateNode(XmlNodeType.Element, "ToolMenuCustomizeSettingList", "");


            // ToolManagerCustomizeSettingオブジェクトから、ToolMenuCustomizeSettingListの取得
            List<ToolMenuCustomizeSetting> toolMenuCustomizeSettingList = toolManagerCustomizeSetting.ToolMenuCustomizeSettingList;

            foreach (ToolMenuCustomizeSetting toolMenuCustomizeSetting in toolMenuCustomizeSettingList)
            {
                XmlNode toolMenuCustomizeSettingNode = xmldoc.CreateNode(XmlNodeType.Element, "ToolMenuCustomizeSetting", "");

                //ToolBarKey
                XmlNode toolBarKeyNode = xmldoc.CreateNode(XmlNodeType.Element, "ToolBarKey", "");
                toolBarKeyNode.InnerXml = toolMenuCustomizeSetting.ToolBarKey;
                //ToolBarVisible
                XmlNode toolBarVisibleNode = xmldoc.CreateNode(XmlNodeType.Element, "ToolBarVisible", "");
                toolBarVisibleNode.InnerXml = toolMenuCustomizeSetting.ToolBarVisible.ToString().ToLower();
                //DockedRow
                XmlNode dockedRowNode = xmldoc.CreateNode(XmlNodeType.Element, "DockedRow", "");
                dockedRowNode.InnerXml = toolMenuCustomizeSetting.DockedRow.ToString();
                //DockedColumn
                XmlNode dockedColumnNode = xmldoc.CreateNode(XmlNodeType.Element, "DockedColumn", "");
                dockedColumnNode.InnerXml = toolMenuCustomizeSetting.DockedColumn.ToString();
                //DockedPosition
                XmlNode dockedPositionNode = xmldoc.CreateNode(XmlNodeType.Element, "DockedPosition", "");
                dockedPositionNode.InnerXml = toolMenuCustomizeSetting.DockedPosition.ToString();

                //ToolButtonCustomizeSettingsList
                XmlNode toolButtonCustomizeSettingsListNode = xmldoc.CreateNode(XmlNodeType.Element, "ToolButtonCustomizeSettingsList", "");

                List<ToolButtonCustomizeSetting> ToolButtonCustomizeSettingList = toolMenuCustomizeSetting.ToolButtonCustomizeSettingsList;
                foreach (ToolButtonCustomizeSetting toolButtonCustomizeSetting in ToolButtonCustomizeSettingList)
                {
                    //ToolButtonCustomizeSetting
                    XmlNode toolButtonCustomizeSettingNode = xmldoc.CreateNode(XmlNodeType.Element, "ToolButtonCustomizeSetting", "");
                    //ButtonKey
                    XmlNode buttonKeyNode = xmldoc.CreateNode(XmlNodeType.Element, "ButtonKey", "");
                    buttonKeyNode.InnerXml = toolButtonCustomizeSetting.ButtonKey;
                    //ToolButtonCustomizeInfo
                    ToolButtonCustomizeInfo toolButtonCustomizeInfo = toolButtonCustomizeSetting.ToolButtonCustomizeInfo;
                    XmlNode toolButtonCustomizeInfoNode = xmldoc.CreateNode(XmlNodeType.Element, "ToolButtonCustomizeInfo", "");
                    // CustomizedVisible
                    XmlNode customizedVisibleNode = xmldoc.CreateNode(XmlNodeType.Element, "CustomizedVisible", "");
                    customizedVisibleNode.InnerXml = toolButtonCustomizeInfo.CustomizedVisible.ToString();

                    // ToolButtonCustomizeInfoにCustomizedVisible設定
                    toolButtonCustomizeInfoNode.AppendChild(customizedVisibleNode);

                    // ToolButtonCustomizeSettingにButtonKey設定
                    toolButtonCustomizeSettingNode.AppendChild(buttonKeyNode);
                    // ToolButtonCustomizeSettingにToolButtonCustomizeInfo設定
                    toolButtonCustomizeSettingNode.AppendChild(toolButtonCustomizeInfoNode);

                    // ToolButtonCustomizeSettingsListにtoolButtonCustomizeSettingNode設定
                    toolButtonCustomizeSettingsListNode.AppendChild(toolButtonCustomizeSettingNode);
                }

                toolMenuCustomizeSettingNode.AppendChild(toolBarKeyNode);
                toolMenuCustomizeSettingNode.AppendChild(toolBarVisibleNode);
                // toolMenuCustomizeSettingNodeにtoolButtonCustomizeSettingsListNode設定
                toolMenuCustomizeSettingNode.AppendChild(toolButtonCustomizeSettingsListNode);

                toolMenuCustomizeSettingNode.AppendChild(dockedRowNode);
                toolMenuCustomizeSettingNode.AppendChild(dockedColumnNode);
                toolMenuCustomizeSettingNode.AppendChild(dockedPositionNode);

                // toolMenuCustomizeSettingListNodeにtoolMenuCustomizeSettingNode設定
                toolMenuCustomizeSettingListNode.AppendChild(toolMenuCustomizeSettingNode);
            }

            // ToolManagerCustomizeSettingにtoolMenuCustomizeSettingListNode設定
            root.AppendChild(toolMenuCustomizeSettingListNode);

            xmldoc.Save(Path.Combine(ConstantManagement_ClientDirectory.UISettings, fileName));
        }

        // ADD 2010/07/01 --------------------->>>>>
        /// <summary>
        /// フォームのカスタマイズ情報のシリアライズ
        /// </summary>
        /// <param name="saveFileName">保存ファイル名</param>
        /// <param name="toolManagerCustomizeSetting">ToolManagerCustomizeSettingオブジェクト</param>
        /// <br>Update Note: K2015/08/14 黄興貴</br>
        /// <br>管理番号   : 11100068-00 Redmine#47213 売上伝票入力の参照不正</br>
        public void FormPosSerialize(int topInt, int leftInt, int heightInt, int widthInt)
        {

            string fileName = string.Format("{0}.pos", "MAHNB01001U");

            XmlElement root = null;
            XmlDocument xmldoc = new XmlDocument();
            //ファイルがある場合、ファイルの読み
            if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings_FormPos, fileName)))
            {
                xmldoc.Load(Path.Combine(ConstantManagement_ClientDirectory.UISettings_FormPos, fileName));
                root = xmldoc.DocumentElement;
                root.RemoveAll();
            }
            //ファイルがない場合、ファイルの作成
            else
            {
                XmlDeclaration xmlDeclaration = xmldoc.CreateXmlDeclaration("1.0", null, null);
                XmlNode xmlNode = xmldoc.CreateNode(XmlNodeType.Element, "ArrayOfFormInfoData", "");
                xmldoc.AppendChild(xmlNode);
                xmldoc.InsertBefore(xmlDeclaration, xmlNode);
                root = xmldoc.DocumentElement;
            }

            root.SetAttribute("xmlns:xsi", @"http://www.w3.org/2001/XMLSchema-instance");
            root.SetAttribute("xmlns:xsd", @"http://www.w3.org/2001/XMLSchema");

            XmlNode formInfoDataNode = xmldoc.CreateNode(XmlNodeType.Element, "FormInfoData", "");

            //formIDNode
            XmlNode formIDNode = xmldoc.CreateNode(XmlNodeType.Element, "FormID", "MAHNB01001UA");
            //topNode
            XmlNode topNode = xmldoc.CreateNode(XmlNodeType.Element, "Top", "");
            topNode.InnerXml = topInt.ToString();
            //leftNode
            XmlNode leftNode = xmldoc.CreateNode(XmlNodeType.Element, "Left", "");
            leftNode.InnerXml = leftInt.ToString();
            //heightNode
            XmlNode heightNode = xmldoc.CreateNode(XmlNodeType.Element, "Height", "");
            heightNode.InnerXml = heightInt.ToString();
            //widthNode
            XmlNode widthNode = xmldoc.CreateNode(XmlNodeType.Element, "Width", "");
            widthNode.InnerXml = widthInt.ToString();
            //windowStateNode
            XmlNode windowStateNode = xmldoc.CreateNode(XmlNodeType.Element, "WindowState", "Normal");

            formInfoDataNode.AppendChild(formIDNode);
            formInfoDataNode.AppendChild(topNode);
            formInfoDataNode.AppendChild(leftNode);
            formInfoDataNode.AppendChild(heightNode);
            formInfoDataNode.AppendChild(widthNode);
            formInfoDataNode.AppendChild(windowStateNode);

            // formInfoDataNode
            root.AppendChild(formInfoDataNode);

            xmldoc.Save(Path.Combine(ConstantManagement_ClientDirectory.UISettings_FormPos, fileName));

            // --- ADD yangyi K2014/02/24  ------->>>>>>>>>>> 
            // ------ UPD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
            //if (showEnable())
            if (showEnable() || showCustomerGuid())
            // ------ UPD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
            {
                noteInfoClose();
            }
            // --- ADD yangyi K2014/02/24  -------<<<<<<<<<<<
            // --- ADD K2015/04/29 黄興貴 富士ジーワイ商事㈱ ----<<<<<
            // UOE取込画面閉じる
            if (this._salesSlipInputInitDataAcs.Opt_ForFuJi == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                // --- DEL K2015/08/14 黄興貴 Redmine#47213 --->>>>>
                //if (this._uoeDataSetForm != null)
                //{
                //    this._uoeDataSetForm.Close();
                //}
                // --- DEL K2015/08/14 黄興貴 Redmine#47213 ---<<<<<

                // --- ADD K2015/08/14 黄興貴 Redmine#47213 --->>>>>
                if (this._objUoeDataSetForm != null)
                {
                    ((Form)this._objUoeDataSetForm).Close();
                }
                // --- ADD K2015/08/14 黄興貴 Redmine#47213 ---<<<<<
            }
            // --- ADD K2015/04/29 黄興貴 富士ジーワイ商事㈱ ----<<<<<

            // --- ADD K2015/06/18 紀飛 ㈱メイゴ　WebUOE発注回答取込 ----<<<<<
            // UOE取込画面閉じる
            if (this._salesSlipInputInitDataAcs.Opt_ForMeiGo == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                if (this._objMegoSettingForm != null)
                {
                    ((Form)_objMegoSettingForm).Close();
                }
            }
            // --- ADD K2015/06/18 紀飛 ㈱メイゴ　WebUOE発注回答取込 ----<<<<<
        }

        /// <summary>
        /// フォームのカスタマイズ情報のデシリアライズ
        /// </summary>
        /// <param name="saveFileName">保存ファイル名</param>
        /// <returns>ToolManagerCustomizeSettingオブジェクト</returns>
        public void FormPosDeserialize(out int topInt, out int leftInt, out int heightInt, out int widthInt)
        {
            string fileName = string.Format("{0}.pos", "MAHNB01001U");
            topInt = 0;
            leftInt = 0;
            heightInt = 0;
            widthInt = 0;

            try
            {
                if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings_FormPos, fileName)))
                {
                    XmlElement root = null;
                    XmlDocument xmldoc = new XmlDocument();
                    xmldoc.Load(Path.Combine(ConstantManagement_ClientDirectory.UISettings_FormPos, fileName));
                    root = xmldoc.DocumentElement;

                    XmlNodeList xmlNodeList = root.ChildNodes;

                    for (int i = 0; i < xmlNodeList.Count; i++)
                    {
                        XmlNode node = xmlNodeList[i];

                        if (node.HasChildNodes)
                        {

                            for (int n = 0; n < node.ChildNodes.Count; n++)
                            {
                                XmlNode xmlNode = node.ChildNodes[n];

                                if (xmlNode.Name.ToLower() == "top")
                                {
                                    int.TryParse(xmlNode.InnerXml, out topInt);
                                }
                                else if (xmlNode.Name.ToLower() == "left")
                                {
                                    int.TryParse(xmlNode.InnerXml, out leftInt);
                                }
                                else if (xmlNode.Name.ToLower() == "height")
                                {
                                    int.TryParse(xmlNode.InnerXml, out heightInt);
                                }
                                else if (xmlNode.Name.ToLower() == "width")
                                {
                                    int.TryParse(xmlNode.InnerXml, out widthInt);
                                }
                            }
                        }
                    }
                }
                else
                {
                    topInt = 0;
                    leftInt = 0;
                    heightInt = 768;
                    widthInt = 1046;
                }
            }
            catch (System.InvalidOperationException)
            {
                topInt = 0;
                leftInt = 0;
                heightInt = 768;
                widthInt = 1046;
            }
        }
        // ADD 2010/07/01 ---------------------<<<<<

        /// <summary>
        /// 画面項目名称取得処理
        /// </summary>
        /// <param name="rateName">rateName</param>
        /// <param name="taxFlg">taxFlg</param>
        /// <remarks>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        /// </remarks>
        // UPD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
        //public void GetDisplayName(out string rateName)
        public void GetDisplayName(out string rateName, out bool taxFlg)
        // UPD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
        {
            taxFlg = false;// ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応
            // 消費税ラベル
            rateName = this._salesSlipInputInitDataAcs.GetTaxRateName();
            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
            if (this._salesSlipInputInitDataAcs.TaxRateDiv == 0 ||
                (this._salesSlipInputInitDataAcs.TaxRateDiv == 1 && this._salesSlipInputInitDataAcs.TaxRateInput == this._salesSlipInputInitDataAcs.TaxRateMst) ||
                (this._salesSlipInputInitDataAcs.TaxRateDiv == 2 && this._salesSlipInputInitDataAcs.TaxRateMst == this._salesSlipInputInitDataAcs.TaxRate))
            {
            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<
                if (rateName.Length > 5) rateName = rateName.Substring(0, 5);
            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                taxFlg = false;
            }
            else
            {
                rateName = string.Format("税({0}%)", (this._salesSlipInputInitDataAcs.TaxRate * 100).ToString("#0"));
                taxFlg = true;
            }
            this._salesSlipInputAcs.TaxRateFlg = taxFlg;
            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<
        }

        /// <summary>
        /// 明細粗利率取得処理
        /// </summary>
        /// <param name="rowNo">rowNo</param>
        /// <param name="detailGrossProfitRate">detailGrossProfitRate</param>
        /// <param name="addDetailGrossProfitRate">addDetailGrossProfitRate</param>
        public void GetDetailGrossProfitRate(int rowNo, out string detailGrossProfitRate, out string addDetailGrossProfitRate)
        {
            SalesSlipDetailInput_DetailChanged(_owner, rowNo);

            detailGrossProfitRate = this._detailGrossProfitRate;
            addDetailGrossProfitRate = this._addDetailGrossProfitRate;
        }

        #region ●削除処理関係
        /// <summary>
        /// 削除処理
        /// </summary>
        /// <param name="outCheck">削除データチェック処理結果</param>
        /// <param name="outDialogResult">画面確認結果</param>
        /// <param name="outStatus">削除処理結果</param>
        /// <br>Update Note: 2010/11/25 yangmj PM.NS障害・改良対応 </br>
        /// <br>Update Note: 2011/10/29 yangmj 売上伝票入力／発注の取り消しを行った伝票の削除処理対応</br>
        /// <br>Update Note: 2015/08/22 黄興貴</br>
        /// <br>管理番号   : 11170129-00 №836 Redmine#47045 保存時のエラー処理がないの障害対応</br>
        /// <br>Update Note: 2021/05/20 陳永康</br>
        /// <br>管理番号   : 11770032-00</br>
        /// <br>           : BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応</br>
        /// <br>Update Note: 2021/09/28 陳艶丹</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>           : PMKOBETSU-4190 マージ指摘対応 TMsgDisp.ShowメソッドをTopMostとなる対応</br>
        /// <br>Update Note: 2021/11/19 田村顕成</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>           : BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応（不具合修正）</br>         
        public void Delete(out bool outCheck, out int outDialogResult, out int outStatus)
        {
            outCheck = false;
            outDialogResult = 0;
            outStatus = 0;
            int result = (int)DialogResult.Yes;
            // 計上元データ表示テキスト作成
            string addText = string.Empty;
            // -----ADD 2011/07/26----->>>>>
            // 売上
            if (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales && this._salesSlipInputAcs.SalesSlip.InquiryNumber != 0)
            {
                List<UserSCMOrderDetailRecord> scmDetailListNew = new List<UserSCMOrderDetailRecord>();
                IList<ISCMOrderHeaderRecord> scmHeaderIList = new List<ISCMOrderHeaderRecord>();
                IList<ISCMOrderCarRecord> scmCarIList = new List<ISCMOrderCarRecord>();
                IList<ISCMOrderDetailRecord> scmDetailIList = new List<ISCMOrderDetailRecord>();
                IList<ISCMOrderDetailRecord> scmDetailIAllList = new List<ISCMOrderDetailRecord>();
                IList<ISCMOrderAnswerRecord> scmAnswerIList = new List<ISCMOrderAnswerRecord>();
                short svCancelDiv;
                // SCM情報取得
                int statusScm = this._salesSlipInputAcs.SCMReadDBDataPProc(this._salesSlipInputAcs.SalesSlip.InquiryNumber, this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus, this._salesSlipInputAcs.SalesSlip.SalesSlipNum, this._salesSlipInputAcs.SalesSlip.InqOriginalEpCd.Trim(), this._salesSlipInputAcs.SalesSlip.InqOriginalSecCd,//@@@@20230303
                    this._salesSlipInputAcs.SalesSlip.InqOrdDivCd, 0,
                    out scmHeaderIList, out scmCarIList, out scmDetailIList, out scmDetailIAllList, out scmAnswerIList, out scmDetailListNew, out svCancelDiv);
                // 取得成功
                if (statusScm == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "連携している売上伝票は削除できません。",
                    0,
                    MessageBoxButtons.OK,
                    MessageBoxDefaultButton.Button1);
                    return;
                }
            }
            // -----ADD 2011/07/26-----<<<<<
            // -----ADD 2010/11/25----->>>>>
            DialogResult dialogResult = DialogResult.Cancel;
            // -----ADD 2010/11/25-----<<<<<
            if (this._salesSlipInputAcs.ExistSalesDetailAddUpSrcData())
            {
                // -----UPD 2010/11/25----->>>>>
                //addText = "関連するデータが存在します。　　\r\n\r\n";
                // 計上元明細読込
                List<SalesDetail> salesDetailListSrc = this._salesSlipInputAcs.ReadDetailSrc();
                // -----UPD 2010/11/25----->>>>>
                MAHNB01010UP delDetail = new MAHNB01010UP();

                // -----UPD 2010/11/30----->>>>>
                //dialogResult = delDetail.Show(this._form, salesDetailListSrc, this._salesSlipInputAcs.SalesDetailDataTable);
                // -----UPD 2011/10/29----->>>>>
                if (salesDetailListSrc != null && salesDetailListSrc.Count > 0)
                {
                    dialogResult = delDetail.Show(this._form, null, salesDetailListSrc, this._salesSlipInputAcs.SalesDetailDataTable, 0);
                }
                else
                {
                    //確認画面
                    dialogResult = TMsgDisp.Show(
                        this._form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        "表示中の" + this._salesSlipInputAcs.GetAcptAnOdrStatusName(this._salesSlipInputAcs.SalesSlip) + "伝票" + "を削除します。" + "\r\n" + "\r\n" + addText +
                        "削除してよろしいですか？",
                        0,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button2);
                }
                //dialogResult = delDetail.Show(this._form, null, salesDetailListSrc, this._salesSlipInputAcs.SalesDetailDataTable, 0);
                // -----UPD 2011/10/29-----<<<<<
                // -----UPD 2010/11/30-----<<<<<

                //// 出力文字列作成処理
                //if (salesDetailListSrc != null) addText = addText + this._salesSlipInputAcs.MakeAddTextSrc(salesDetailListSrc) + "\r\n";
                // -----UPD 2010/11/25-----<<<<<
            }
            // -----UPD 2010/11/25----->>>>>
            else
            {
                //確認画面
                dialogResult = TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "todo",
                    "表示中の" + this._salesSlipInputAcs.GetAcptAnOdrStatusName(this._salesSlipInputAcs.SalesSlip) + "伝票" + "を削除します。" + "\r\n" + "\r\n" + addText +
                    "削除してよろしいですか？",
                    0,
                    MessageBoxButtons.YesNo,
                    MessageBoxDefaultButton.Button2);
            }
            //// 確認画面
            //DialogResult dialogResult = TMsgDisp.Show(
            //    this._form,
            //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
            //    "todo",
            //    "表示中の" + this._salesSlipInputAcs.GetAcptAnOdrStatusName(this._salesSlipInputAcs.SalesSlip) + "伝票" + "を削除します。" + "\r\n" + "\r\n" + addText +
            //    "削除してよろしいですか？",
            //    0,
            //    MessageBoxButtons.YesNo,
            //    MessageBoxDefaultButton.Button2);
            // -----UPD 2010/11/25-----<<<<<
            outDialogResult = (int)dialogResult;
            if (dialogResult != DialogResult.Yes) return;

            // -----ADD 2021/11/19 田村顕成 BLINCIDENT-2425(不具合修正：締め済みでない仕入れ伝票が削除されなくなる) ----->>>>>
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierSlipDelDiv == 2)
            {
                this._salesSlipInputAcs.SupplierSlipDelDiv = 2; // 削除する
            }
            else
            {
                this._salesSlipInputAcs.SupplierSlipDelDiv = 0; // 削除しない
            }
            // -----ADD 2021/11/19 田村顕成 BLINCIDENT-2425(不具合修正：締め済みでない仕入れ伝票が削除されなくなる) -----<<<<<

            // 仕入伝票削除区分
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierSlipDelDiv == 1)
            {
                if (this._salesSlipInputAcs.ExistStockTemp() == true)
                {
                    dialogResult = TMsgDisp.Show(
                        this._form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        "同時入力分の仕入情報も同時に削除します。" + "\r\n" + "\r\n" +
                        "よろしいですか？",
                        0,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button1);
                    if (dialogResult == DialogResult.Yes)
                    {
                        this._salesSlipInputAcs.SupplierSlipDelDiv = 2; // 削除する
                    }
                    else
                    {
                        this._salesSlipInputAcs.SupplierSlipDelDiv = 0; // 削除しない
                    }
                }
            }

            // ---ADD 2021/05/20 陳永康 BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応 ------>>>>>
            string msg = string.Empty;
            int CheckAddUpResult = this._salesSlipInputAcs.CheckAddUpForStock(this._salesSlipInputAcs.StockTempDataTable, out msg);// ---MOD 2021/10/05 田村顕成 BLINCIDENT-2425
            // (仕入伝票削除区分が「確定」 且つ 同時入力分の仕入情報も同時に削除 且つ 仕入伝票締済み)
            // 又は (仕入伝票削除区分が「する」且つ 仕入伝票締済み)の場合
            if (((this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierSlipDelDiv == (int)SalesSlipInputAcs.SupplierSlipDelDivEnum.DelQst && dialogResult == DialogResult.Yes) ||
                this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierSlipDelDiv == (int)SalesSlipInputAcs.SupplierSlipDelDivEnum.Del) &&
                CheckAddUpResult != (int)SalesSlipInputAcs.CheckResultDivEnum.noAddUp) // ---MOD 2021/10/05 田村顕成 BLINCIDENT-2425
            {
                this._salesSlipInputAcs.SupplierSlipDelDiv = (int)SalesSlipInputAcs.SupplierSlipDelDivEnum.NotDel; // 削除しない
                // ---ADD 2021/09/28 陳艶丹 PMKOBETSU-4190対応 ------>>>>>
                Form addUpForStockMsgForm = new Form();
                addUpForStockMsgForm.TopMost = true;
                // ---ADD 2021/09/28 陳艶丹 PMKOBETSU-4190対応 ------<<<<<
                dialogResult = TMsgDisp.Show(
                    // ---UPD 2021/09/28 陳艶丹 PMKOBETSU-4190対応 ------>>>>>
                   //this._form,
                    addUpForStockMsgForm,
                    // ---UPD 2021/09/28 陳艶丹 PMKOBETSU-4190対応 ------<<<<<
                   (CheckAddUpResult == (int)SalesSlipInputAcs.CheckResultDivEnum.AddUp) ? emErrorLevel.ERR_LEVEL_EXCLAMATION : emErrorLevel.ERR_LEVEL_STOP,// ---MOD 2021/10/05 田村顕成 BLINCIDENT-2425
                   string.Empty,
                   msg.ToString(),
                   0,
                   (CheckAddUpResult == (int)SalesSlipInputAcs.CheckResultDivEnum.AddUp) ? MessageBoxButtons.OKCancel : MessageBoxButtons.OK);// ---MOD 2021/10/05 田村顕成 BLINCIDENT-2425
                addUpForStockMsgForm.TopMost = false;// ADD 2021/09/28 陳艶丹 PMKOBETSU-4190対応
                if ((CheckAddUpResult == (int)SalesSlipInputAcs.CheckResultDivEnum.AddUp && dialogResult == DialogResult.Cancel) || //締め済みかつキャンセル　または　例外発生時は仕入も売上も削除しない
                   (CheckAddUpResult == (int)SalesSlipInputAcs.CheckResultDivEnum.Abnormal))// ---MOD 2021/10/05 田村顕成 BLINCIDENT-2425
                {
                    return;
                }
            }
            // ---ADD 2021/05/20 陳永康 BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応 ------<<<<<

            List<string> itemNameList = new List<string>();
            List<string> itemList = new List<string>();
            string mainMessage;

            // 削除データチェック処理
            bool check = this._salesSlipInputAcs.CheckDeleteData(this._salesSlipInputAcs.SalesSlip, out mainMessage, out itemNameList, out itemList);
            outCheck = check;
            if (!check)
            {
                StringBuilder message = new StringBuilder();
                message.Append(mainMessage);

                if (!check)
                {
                    foreach (string s in itemNameList)
                    {
                        message.Append(s + "\r\n");
                    }
                }

                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "todo",
                    message.ToString(),
                    0,
                    MessageBoxButtons.OK);

                string itemName = string.Empty;
                if (itemList.Count > 0)
                {
                    itemName = itemList[0].ToString();
                    this._itemName = itemName;
                    this._tableName = this._salesSlipInputAcs.SalesDetailDataTable.TableName;
                }

                return;
            }

            // --- ADD K2013/09/11 Y.Wakita ---------->>>>>
            #region フタバ個別対応
            if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaOutSlipCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                if (this.isFtSalesMoveOut(this._salesSlipInputAcs.SalesSlip))
                {
                    return;
                }
            }
            #endregion
            // --- ADD K2013/09/11 Y.Wakita ----------<<<<<

            string retMessage;
            this._salesSlipInputAcs.MyOpeCtrl = this._operationAuthority;
            //this.Cursor = Cursors.WaitCursor;
            // --- UPD 2012/11/30 Y.Wakita ---------->>>>>
            //int status = this._salesSlipInputAcs.DeleteDBData(this._salesSlipInputAcs.SalesSlip, this._salesSlipInputAcs.SalesDetailDataTable, this._salesSlipInputAcs.DepsitMain, this._salesSlipInputAcs.DepositAlw, this._salesSlipInputAcs.StockSlipForReadDataTable, this._salesSlipInputAcs.StockDetailForReadDataTable, this._salesSlipInputAcs.PaymentSlpDataTable, out retMessage);
            int status;
            // --- ADD 2015/08/22 黄興貴 Redmine#47045 ---------->>>>>
            try
            {
            // --- ADD 2015/08/22 黄興貴 Redmine#47045 ----------<<<<<
                // 仕入伝票削除区分：削除する
                // ---UPD 2021/05/20 陳永康 BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応 ------>>>>>
                //// --- UPD 2012/12/20 T.Nishi ---------->>>>>
                ////if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierSlipDelDiv == 2) ||
                ////    (this._salesSlipInputAcs.SupplierSlipDelDiv == 2))
                //if (((this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierSlipDelDiv == 2) ||
                //    (this._salesSlipInputAcs.SupplierSlipDelDiv == 2)) &&
                //    (this._salesSlipInputAcs.ExistStockTemp() == true))
                //// --- UPD 2012/12/20 T.Nishi ----------<<<<<
                if ((this._salesSlipInputAcs.SupplierSlipDelDiv == (int)SalesSlipInputAcs.SupplierSlipDelDivEnum.Del) &&
                    (this._salesSlipInputAcs.ExistStockTemp() == true))
                // ---UPD 2021/05/20 陳永康 BLINCIDENT-2425 売仕入同時入力の伝票を削除すると締済みの仕入伝票も削除されるの障害対応 ------<<<<<
                {
                    // 売上行番号リスト取得処理
                    List<int> selectedSalesRowNoList = this.GetSelectedSalesRowNoList(0, this._salesDetailDataTable.Rows.Count - 1);
                    if (!((selectedSalesRowNoList == null) || (selectedSalesRowNoList.Count == 0)))
                    {
                        // 売上明細行仕入情報削除処理
                        this._salesSlipInputAcs.DeleteStockDetailRow(selectedSalesRowNoList);
                    }

                    #region ●伝票分割
                    //---------------------------------------------------------------
                    // 伝票分割
                    //---------------------------------------------------------------
                    this._salesSlipInputAcs.MakeSalesSlipAcptAnOdr();                                                           // 受注データヘッダ情報作成
                    ArrayList salesDataList;                                                                                    // 売上データリスト
                    ArrayList acptDataList;                                                                                     // 受注データリスト
                    List<SalesSlipInputAcs.StockSyncInfoKey> stockSyncInfoKeyList;                                              // 売仕入同時入力データキーリスト
                    if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().AcpOdrAgentDispDiv == 1)
                    {
                        this._salesSlipInputAcs.SalesSlip.FrontEmployeeCd = string.Empty;
                        this._salesSlipInputAcs.SalesSlip.FrontEmployeeNm = string.Empty;
                    }
                    bool scmFlg = false;
                    this._salesSlipInputAcs.GetCurrentSalesDetailList(out salesDataList, out acptDataList, out stockSyncInfoKeyList, scmFlg);// 売上受注データリスト取得
                    foreach (ArrayList list in salesDataList)
                    {
                        foreach (object obj in list)
                        {
                            if (obj is SalesSlip)
                            {
                                ((SalesSlip)obj).PreSalesDate = this._salesSlip.PreSalesDate;
                            }
                        }
                    }
                    #endregion

                    status = this._salesSlipInputAcs.DeleteDBData(this._salesSlipInputAcs.SalesSlip, this._salesSlipInputAcs.SalesDetailDataTable, this._salesSlipInputAcs.DepsitMain, this._salesSlipInputAcs.DepositAlw, this._salesSlipInputAcs.StockSlipForReadDataTable, this._salesSlipInputAcs.StockDetailForReadDataTable, this._salesSlipInputAcs.PaymentSlpDataTable, acptDataList, stockSyncInfoKeyList, out retMessage);
                }
                else
                {
                    status = this._salesSlipInputAcs.DeleteDBData(this._salesSlipInputAcs.SalesSlip, this._salesSlipInputAcs.SalesDetailDataTable, this._salesSlipInputAcs.DepsitMain, this._salesSlipInputAcs.DepositAlw, this._salesSlipInputAcs.StockSlipForReadDataTable, this._salesSlipInputAcs.StockDetailForReadDataTable, this._salesSlipInputAcs.PaymentSlpDataTable, out retMessage);
                }
                // --- UPD 2012/11/30 Y.Wakita ----------<<<<<
                //this.Cursor = Cursors.Default;
            // --- ADD 2015/08/22 黄興貴 Redmine#47045 ---------->>>>>
            }
            catch
            {
                status = (int)ConstantManagement.DB_Status.ctDB_ERROR;
            }
            // --- ADD 2015/08/22 黄興貴 Redmine#47045 ----------<<<<<

            outStatus = status;
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                #region ログ出力
                SortedDictionary<string, ArrayList> logInfoDic = new SortedDictionary<string, ArrayList>();
                this._salesSlipInputAcs.MakeLogInfoForSlip(this._salesSlipInputAcs.SalesSlip, SalesSlipInputAcs.OutPutLogMode.SlipDelete, ref logInfoDic);
                this._salesSlipInputAcs.OutPutLogInfo(logInfoDic);
                #endregion

                this._beforeSalesSlipNumText = "前回伝票番号：" + this._salesSlipInputAcs.SalesSlip.SalesSlipNum.ToString().PadLeft(9, '0');

                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "削除しました。",
                    -1,
                    MessageBoxButtons.OK);

                // 画面初期化処理
                //this.Clear(false, false, false, false, false, false);  //DEL 2010/06/02
                this.Clear(false, false, false, false, false, false, false, 0);  //ADD 2010/06/02

                //this.timer_InitialSetFocus.Enabled = true;
                timer_InitialSetFocus_Tick();
            }
            else if (status == (int)ConstantManagement.DB_Status.ctDB_ALRDY_UPDATE)				// 排他（別端末更新済）
            {
                // 担当者にフォーカスをセット（一時的に）
                //this.tEdit_SalesEmployeeCd.Focus();

                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "現在、編集中の売上データは既に更新されています。" + "\r\n" + "\r\n" +
                    "最新の情報を取得します。",
                    -1,
                    MessageBoxButtons.OK);

                // 再読込処理
                this.ReLoad(this._salesSlipInputAcs.SalesSlip.EnterpriseCode, this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay, this._salesSlipInputAcs.SalesSlip.SalesSlipNum);

                // 明細グリッドにフォーカスをセット
                //this._salesSlipDetailInput.Focus();
            }
            else if (status == (int)ConstantManagement.DB_Status.ctDB_ALRDY_DELETE)				// 排他（別端末物理削除済）
            {
                // 担当者にフォーカスをセット（一時的に）
                //this.tEdit_SalesEmployeeCd.Focus();

                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "現在、編集中の売上データは既に削除されています。",
                    -1,
                    MessageBoxButtons.OK);

                //this.Clear(false, false, false, false, false, false);  //DEL 2010/06/02
                this.Clear(false, false, false, false, false, false, false, 0);  //ADD 2010/06/02

                //this.timer_InitialSetFocus.Enabled = true;
                timer_InitialSetFocus_Tick();
            }
            // ADD 2011/08/10 qijh SCM対応 - 拠点管理(10704767-00) --------->>>>>>>
            else if (status == STATUS_CHK_SEND_ERR)
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    MSG_CHK_SEND_ERR,
                    status,
                    MessageBoxButtons.OK);
            }
            // ADD 2011/08/10 qijh SCM対応 - 拠点管理(10704767-00) ---------<<<<<<<
            else
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_STOPDISP,
                    "todo",
                    this._salesSlipInputAcs.GetAcptAnOdrStatusName(this._salesSlipInputAcs.SalesSlip) + "データの削除に失敗しました。",
                    status,
                    MessageBoxButtons.OK);
            }
        }
        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="itemName">itemName</param>
        /// <param name="tableName">tableName</param>
        public void GetItemName(out string itemName, out string tableName)
        {
            itemName = this._itemName;
            tableName = this._tableName;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="status">ステータス</param>
        public void GetStatus(out int status)
        {
            status = this._status;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="beforeSalesSlipNumText">beforeSalesSlipNumText</param>
        public void GetBeforeSalesSlipNumText(out string beforeSalesSlipNumText)
        {
            beforeSalesSlipNumText = this._beforeSalesSlipNumText;
        }

        /// <summary>
        /// 初期フォーカス設定タイマー起動イベント
        /// </summary>
        private void timer_InitialSetFocus_Tick()
        {
            this._salesSlipInputAcs.PartySaleSlipDiv = this._salesInputConstructionAcs.PartySaleSlipValue;

            //// Enterキー入力時フォーカス移動先テーブル更新
            //this._salesSlipDetailInput.EnterMoveSetting();

            //this._salesSlipDetailInput.FirstEnter = true;

            this._focusPositionValue = this._salesInputConstructionAcs.FocusPositionValue;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="focusPositionValue">focusPositionValue</param>
        public void GetFocusPositionValue(out int focusPositionValue)
        {
            focusPositionValue = this._salesInputConstructionAcs.FocusPositionValue;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="afterSaveClearFlg"></param>
        // --- UPD m.suzuki 2010/06/12 ---------->>>>>
        //public void ShowRedSaveCheckDialog(bool isConfirm, out bool afterSaveClearFlg)
        public void ShowRedSaveCheckDialog(bool isConfirm, out bool afterSaveClearFlg, ref bool isMakeQR)
        // --- UPD m.suzuki 2010/06/12 ----------<<<<<
        {
            // ---UPD 2012/06/26 No.630 Y.Wakita ---------->>>>>
            //// --- UPD m.suzuki 2010/06/12 ---------->>>>>
            ////bool canRed = this.ShowSaveCheckDialog(isConfirm);
            //bool canRed = this.ShowSaveCheckDialog(isConfirm, ref isMakeQR);
            //// --- UPD m.suzuki 2010/06/12 ----------<<<<<
            bool canRed = this.ShowSaveCheckDialog(isConfirm, false, ref isMakeQR);
            // ---UPD 2012/06/26 No.630 Y.Wakita ----------<<<<<
            this._canRed = canRed;
            afterSaveClearFlg = this._afterSaveClearFlg;
        }

        /// <summary>
        /// 赤伝処理
        /// </summary>
        /// <param name="isConfirm">確認ダイアログ表示有無(true:表示する false:表示しない)</param>
        /// <param name="canRed"></param>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        /// <br>Update Note: 2021/04/12 陳艶丹</br>
        /// <br>管理番号   : 11770021-00</br>
        /// <br>           : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
        public void RedSlip(bool isConfirm, bool canRed)
        {
            //afterSaveClearFlg = this._afterSaveClearFlg;
            //bool canRed = this.ShowSaveCheckDialog(isConfirm);
            Form form = new Form();
            form.Height = 762;
            form.Width = 1018;
            form.StartPosition = FormStartPosition.WindowsDefaultLocation;

            //this._canRed = canRed;
            if (!canRed) return;

            //this.tEdit_SalesEmployeeCd.Focus();
            //this.ActiveControl = this.tEdit_SalesEmployeeCd;

            MAHNB01010UD salesSlipNumInputDialog = new MAHNB01010UD((int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales, this._salesSlipInputAcs.SalesSlip.SalesSlipNum, MAHNB01010UD.ct_AcptAnOdrStatusEnable_False, MAHNB01010UD.ct_MODE_RedSlip);
            //this._controlScreenSkin.SettingScreenSkin(salesSlipNumInputDialog);
            //DialogResult dialogResult = salesSlipNumInputDialog.ShowDialog(form); // DEL イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            ////------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dialogResult;
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dialogResult = salesSlipNumInputDialog.ShowDialog(wrp);
            //}
            //else
            //{
            //    dialogResult = salesSlipNumInputDialog.ShowDialog(this._salesSlipInputAcs.Owner);
            //}
            ////------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            salesSlipNumInputDialog.StartPosition = FormStartPosition.CenterParent;
            DialogResult dialogResult = salesSlipNumInputDialog.ShowDialog(this._salesSlipInputAcs.Owner);
            // ----- ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<

            if (dialogResult == DialogResult.OK)
            {
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
                //得意先情報ガイドを閉じる
                if (showEnable() || showCustomerGuid())
                {
                    noteInfoClose();
                }
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
                this._redDialogResult = 1;
                SalesSlip salesSlip = salesSlipNumInputDialog.DfSalesSlip;
                SalesSlip baseSalesSlip = salesSlipNumInputDialog.DfBaseSalesSlip;
                List<SalesDetail> salesDetailList = salesSlipNumInputDialog.DfSalesDetailList;
                List<SalesDetail> addUpSrcDetailList = salesSlipNumInputDialog.DfAddUpSrcDetailList;
                SearchDepsitMain depsitMain = salesSlipNumInputDialog.DfDepsitMain;
                SearchDepositAlw depositAlw = salesSlipNumInputDialog.DfDepositAlw;
                List<StockWork> stockWorkList = salesSlipNumInputDialog.DfStockWorkList;
                List<AcceptOdrCar> acceptOdrCarList = salesSlipNumInputDialog.DfAcceptOdrCarList;
                List<StockSlipWork> stockSlipWorkList = salesSlipNumInputDialog.DfStockSlipWorkList;
                List<StockDetailWork> stockDetailWorkList = salesSlipNumInputDialog.DfStockDetailWorkList;
                List<AddUpOrgStockDetailWork> addUpOrgStockDetailList = salesSlipNumInputDialog.DfaddUpOrgStockDetailList;

                // 赤伝時は消費税転嫁方式の更新を行わないので、再取得前に戻す
                salesSlip.ConsTaxLayMethod = baseSalesSlip.ConsTaxLayMethod;

                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                if (salesSlip.ConsTaxLayMethod == 0)
                {
                    // 0:伝票転嫁
                    this._salesSlipInputInitDataAcs.ConsTaxLayMethod = 0;
                    // 赤伝の場合、元伝票の税率を利用する。
                    this._salesSlipInputInitDataAcs.TaxRateDiv = 2;
                    // 税率マスタの税率を取得する。
                    this._salesSlipInputInitDataAcs.GetTaxRateMst(salesSlip.SalesDate);
                }
                else
                {
                    this._salesSlipInputInitDataAcs.ConsTaxLayMethod = salesSlip.ConsTaxLayMethod;
                    // 伝票転嫁以外の場合、税率マスタの税率を利用する。
                    this._salesSlipInputInitDataAcs.TaxRateDiv = 0;
                }
                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<

                //--- ADD 田村顕成 2022/10/05 インボイス残対応 ----->>>>>
                SetSlipNoteForReturnRed(ref salesSlip);
                //--- ADD 田村顕成 2022/10/05 インボイス残対応 -----<<<<<

                this.RedSlip(salesSlip, salesDetailList, addUpSrcDetailList, depsitMain, depositAlw, stockSlipWorkList, stockDetailWorkList, addUpOrgStockDetailList, stockWorkList, acceptOdrCarList);

                //伝票備考、伝票備考２、伝票備考３の入力桁数を制御する
                this._salesSlipInputAcs.GetNoteCharCnt();
                //SetNoteCharCnt();
            }
            // ----------ADD 2010/07/12--------->>>>>
            else
            {
                this._redDialogResult = 0;
            }
            // ----------ADD 2010/07/12---------<<<<<
            //this._prevControl = this.ActiveControl;
        }

        //----- ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応------->>>>>
        /// <summary>
        /// 税率入力ガイドステータスを取得する
        /// </summary>
        /// <param name="redDialogResult">税率入力ガイドステータス</param>
        /// <remarks>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        /// </remarks>
        public void GetTaxRateDialogResult(out int taxRateDialogResult)
        {
            taxRateDialogResult = this._taxRateDialogResult;
        }

        /// <summary>
        /// 税率入力処理
        /// </summary>
        /// <remarks>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        /// <br>Update Note: K2021/08/23 陳艶丹</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>           : PMKOBETSU-4178 税率のログ追加</br> 
        /// </remarks>
        public void GetTaxRate()
        {
            Form form = new Form();
            form.Height = 762;
            form.Width = 1018;
            form.StartPosition = FormStartPosition.WindowsDefaultLocation;
            double taxRate = this._salesSlipInputInitDataAcs.TaxRateInput;
            if (this._salesSlipInputInitDataAcs.TaxRateInput == 0)
            {
                taxRate = this._salesSlipInputInitDataAcs.GetTaxRateMst(DateTime.Today);
            }

            MAHNB01010UR taxRateDialog = new MAHNB01010UR(taxRate);

            taxRateDialog.StartPosition = FormStartPosition.CenterParent;
            DialogResult dialogResult = taxRateDialog.ShowDialog(this._salesSlipInputAcs.Owner);

            if (dialogResult == DialogResult.OK)
            {
                this._taxRateDialogResult = 1;
                this._salesSlipInputInitDataAcs.TaxRateInput = taxRateDialog.TaxRate;
                // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応--->>>>>
                if (_salesSlipInputInitDataAcs.ProcessControlSetting.RateLogOutFlg == (int)SalesSlipInputInitDataAcs.OutFlgType.Output)
                {
                // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応---<<<<<
                    // --- ADD K2021/08/23 陳艶丹 PMKOBETSU-4178 税率のログ追加--->>>>
                    try
                    {
                        string loggMsg = string.Format(CtTaxRate, taxRateDialog.TaxRate);
                        _salesSlipInputAcs.OutLog(loggMsg);
                    }
                    catch
                    {
                        // 既存ロジックに影響無し
                    }
                    // --- ADD K2021/08/23 陳艶丹 PMKOBETSU-4178 税率のログ追加--- <<<<
                }// ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応
            }
            else
            {
                this._taxRateDialogResult = 0;
            }
        }


        /// <summary>
        /// 発注と仕入判断処理
        /// </summary>
        /// <param name="mode">0：発注、1：仕入</param>
        /// <param name="orderFlg">true：発注と仕入続き、false：発注と仕入不可</param>
        /// <remarks>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        /// </remarks>
        public void OrderCheck(int mode, out bool orderFlg)
        {
            orderFlg = false;
            string msg = string.Empty;
            if (this._salesSlipInputAcs.TaxRateFlg && 
                (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment ||
                this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales))
            {
                if (mode == 0)
                {
                    msg = "税率設定されているため、発注機能は利用できません。";
                }
                else
                {
                    msg = "税率設定されているため、仕入同時計上は利用できません。";
                }
                TMsgDisp.Show(
                      emErrorLevel.ERR_LEVEL_INFO,
                      string.Empty,
                      msg,
                      0,
                      MessageBoxButtons.OK);
                orderFlg = true;
            }
        }
        //----- ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応-------<<<<<

        //----- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応------->>>>>
        /// <summary>
        /// 電帳起動処理
        /// </summary>
        /// <remarks>
        /// <br>Update Note: 2022/04/26 陳艶丹</br>
        /// <br>管理番号   : 11870080-00</br>
        /// <br>           : PMKOBETSU-4208 電子帳簿対応</br> 
        /// </remarks>
        public void StartEBooks()
        {
            //電帳.DX画面起動
            string vbsFile = System.Environment.CurrentDirectory + CT_DXSTARTFILENAME;
            System.Diagnostics.Process p = System.Diagnostics.Process.Start(vbsFile);
            p.WaitForExit();
        }
        //----- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応-------<<<<<

        /// <summary>
        /// 保存確認ダイアログ表示処理
        /// </summary>
        /// <param name="isConfirm">true:確認ダイアログを表示する false:表示しない</param>
        /// <returns>確認後OK 確認後NG</returns>
        /// <br>Update Note: 2011/02/11 曹文傑</br>
        /// <br>                        伝票内容が差し替わってしまう件の対応</br>
        /// <br>UpDateNote : 2011/09/16 鄧潘ハン</br>
        /// <br>           :            Redmine 25219 PCCUOE PM側／売上伝票入力 UOE発注時の動作不具合の修正</br>
        /// <br>UpDateNote : 2011/10/10 yangyi</br>
        /// <br>           : Redmine 25681 ９月分　PCCUOE／PM側　UOE送信処理の動作の修正</br>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        // ---UPD 2012/06/26 No.630 Y.Wakita ---------->>>>>
        //// --- UPD m.suzuki 2010/06/12 ---------->>>>>
        ////private bool ShowSaveCheckDialog(bool isConfirm)
        //private bool ShowSaveCheckDialog(bool isConfirm, ref bool isMakeQR)
        //// --- UPD m.suzuki 2010/06/12 ----------<<<<<
        private bool ShowSaveCheckDialog(bool isConfirm, bool isClose, ref bool isMakeQR)
        // ---UPD 2012/06/26 No.630 Y.Wakita ----------<<<<<
        {
            bool checkedValue = false;

            if ((isConfirm) && (this._salesSlipInputAcs.IsDataChanged))
            {
                // ---ADD 2011/02/11--------------->>>>
                bool isErrorFlag = false;
                this.GetErrorFlag(out isErrorFlag);
                if (isErrorFlag == true)
                {
                    checkedValue = true;
                    this._afterSaveClearFlg = false;

                    return checkedValue;
                }
                // ---ADD 2011/02/11---------------<<<<
                // --- ADD 2012/06/26 No.630 ---------->>>>>
                if (isClose == true)
                {
                    DialogResult dialogResult = TMsgDisp.Show(
                        this._form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        "現在、編集中のデータが存在します。" + "\r\n" + "\r\n" +
                        "終了してもよろしいですか？",
                        0,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button1);

                    if (dialogResult == DialogResult.Yes)
                    {
                        checkedValue = true;
                        this._afterSaveClearFlg = false;
                    }
                    else
                    {
                        this._afterSaveClearFlg = false;
                    }
                }
                else
                {
                // --- ADD 2012/06/26 No.630 ----------<<<<<
                    DialogResult dialogResult = TMsgDisp.Show(
                        this._form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        "現在、編集中のデータが存在します。" + "\r\n" + "\r\n" +
                        "登録してもよろしいですか？",
                        0,
                        MessageBoxButtons.YesNoCancel,
                        MessageBoxDefaultButton.Button2);

                    if (dialogResult == DialogResult.Yes)
                    {
                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                        if (this._salesSlipInputAcs.TaxRateFlg)
                        {
                            bool rentStockFlg = false;
                            bool shipmentFlg = false;

                            foreach (SalesInputDataSet.StockTempRow stockTempRow in this._salesSlipInputAcs.StockTempDataTable)
                            {
                                // 仕入同時データ
                                if ((stockTempRow != null) &&
                                    (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock) &&
                                    (stockTempRow.SupplierCd != 0) && (stockTempRow.StockDate != DateTime.MinValue) && (stockTempRow.PartySaleSlipNum != string.Empty))
                                {
                                    rentStockFlg = true;
                                }
                                // 発注データ
                                else if ((stockTempRow != null) &&
                                    (stockTempRow.SupplierFormal == (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order) &&
                                    (stockTempRow.SupplierCd != 0) && (stockTempRow.StockDate != DateTime.MinValue) && (stockTempRow.PartySaleSlipNum != string.Empty))
                                {
                                    shipmentFlg = true;
                                }
                            }

                            if (rentStockFlg && shipmentFlg)
                            {
                                TMsgDisp.Show(
                                    this._form,
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    string.Empty,
                                    "税率設定されています。" + "\r\n" + "発注対象、仕入同時計上の明細行があるため、登録できません。",
                                    0,
                                    MessageBoxButtons.OK);
                                this._afterSaveClearFlg = false;
                                return checkedValue;
                            }
                            else if (rentStockFlg)
                            {
                                TMsgDisp.Show(
                                    this._form,
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    string.Empty,
                                    "税率設定されています。" + "\r\n" + "仕入同時計上の明細行があるため、登録できません。",
                                    0,
                                    MessageBoxButtons.OK);
                                this._afterSaveClearFlg = false;
                                return checkedValue;
                            }
                            else if (shipmentFlg)
                            {
                                TMsgDisp.Show(
                                    this._form,
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    string.Empty,
                                    "税率設定されています。" + "\r\n" + "発注対象の明細行があるため、登録できません。",
                                    0,
                                    MessageBoxButtons.OK);
                                this._afterSaveClearFlg = false;
                                return checkedValue;
                            }

                        }
                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<
                        // 2011/01/31 Add >>>
                        // はい選択後に送信種別ガイド表示
                        bool scmFlg = false;

                        if ((this._salesSlipInputAcs.SalesSlip.OnlineKindDiv == (int)SalesSlipInputAcs.OnlineKindDiv.SCM) &&
                            (this._salesSlipInputAcs.SalesSlip.DebitNoteDiv == 0) &&
                            ((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                              ((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) &&
                                (this._salesSlipInputAcs.SalesSlip.EstimateDivide == (int)SalesSlipInputAcs.EstimateDivide.Estimate))))
                        {
                            PMKHN05010UA frm = new PMKHN05010UA();
                            frm.SalesSlip = this._salesSlipInputAcs.SalesSlip;
                            // 現在の仕様では、明細は判断材料に含めていないので、とりあえず初期化したリストを設定
                            frm.SalesDetailList = new List<SalesDetail>();
                            CustomerInfo cust;
                            int stCust = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.CustomerCode, true, false, out cust);
                            if (stCust == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                            {
                                frm.CustomerInfo = cust;
                                //---ADD 2011/09/16 --------------------------->>>>>
                                if (this._salesSlipInputAcs.ExistOrderInfo())
                                {
                                    frm.CustomerInfo.OnlineKindDiv = 50;
                                }
                                //---ADD 2011/09/16 ---------------------------<<<<<<
                            }
                            string msg = string.Empty;
                            //>>>2011/05/25
                            frm.PartySalesSlipNum = this._salesSlipInputAcs.SalesSlip.PartySaleSlipNum;
                            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>>
                            if (this._salesSlipInputAcs.TaxRateFlg)
                            {
                                frm.ScmTaxRateInput = this._salesSlipInputInitDataAcs.TaxRate;
                            }
                            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                            //<<<2011/05/25
                            PMKHN05010UA.OptSendTargetDiv div = PMKHN05010UA.OptSendTargetDiv.None;
                            int st;
                            DialogResult ret = frm.ShowDialog(out st, out  msg, out div);
                            if (div == PMKHN05010UA.OptSendTargetDiv.ScmUOE) div = PMKHN05010UA.OptSendTargetDiv.Scm; // ADD yangyi 2011/10/10
                            switch (ret)
                            {
                                case DialogResult.Cancel:
                                case DialogResult.No:
                                    this._afterSaveClearFlg = false;
                                    return checkedValue;
                                case DialogResult.OK:
                                case DialogResult.Yes:
                                    // SCMの場合はSCMフラグを立てる
                                    if (div == PMKHN05010UA.OptSendTargetDiv.Scm) scmFlg = true;
                                    this._onlineKindDiv = (int)div;
                                    //>>>2011/05/25
                                    this._salesSlipInputAcs.SalesSlip.PartySaleSlipNum = frm.PartySalesSlipNum;
                                    //<<<2011/05/25
                                    this._salesSlipInputAcs.ScmFlg = scmFlg;    // ADD 2013/11/14 Y.Wakita
                                    break;
                                default:
                                    break;
                            }
                        }
                        // 2011/01/31 Add <<<

                        this._afterSaveClearFlg = true;
                        SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "Save", "▼▼▼保存処理　開始");
                        // --- UPD m.suzuki 2010/06/12 ---------->>>>>
                        //checkedValue = this.Save(true, false);
                        // 2011/01/31 >>>
                        //checkedValue = this.Save( true, false, ref isMakeQR, false );

                        bool cmtFlg = false;
                        checkedValue = this.Save(true, false, ref isMakeQR, ref scmFlg, ref cmtFlg);
                        // 2011/01/31 <<<
                        // --- UPD m.suzuki 2010/06/12 ----------<<<<<
                        SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "Save", "▲▲▲保存処理　終了");

                        //>>>2010/11/08
                        if (checkedValue)
                        {
                            // 全てクリア(初期状態へ)
                            bool keepDate = (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipDateClrDivCd == (int)SalesSlipInputAcs.SlipDateClrDivCd.InputDate) ? true : false;
                            bool keepAcptAnOdrStatus = false; // 受注ステータス保持

                            SalesSlip svSalesSlip = this._salesSlipInputAcs.SalesSlip.Clone();

                            // 担当者
                            String salesEmployeeCd = this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd;
                            String salesEmployeeNm = this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm;

                            // クリア処理
                            this.Clear(false, keepAcptAnOdrStatus, keepDate, false, false, false, false, 0);

                            // 受注者
                            this._salesSlipInputAcs.SalesSlip.FrontEmployeeCd = svSalesSlip.FrontEmployeeCd;
                            this._salesSlipInputAcs.SalesSlip.FrontEmployeeNm = svSalesSlip.FrontEmployeeNm;

                            // 発行者
                            this._salesSlipInputAcs.SalesSlip.SalesInputCode = svSalesSlip.SalesInputCode;
                            this._salesSlipInputAcs.SalesSlip.SalesInputName = svSalesSlip.SalesInputName;

                            // 売上データクラス→画面格納処理
                            this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

                            //追加情報タブ項目Visible設定
                            SettingAddInfoVisible();

                            // 担当者(ログイン担当者)
                            this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd = salesEmployeeCd;
                            this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm = salesEmployeeNm;
                        }
                        //<<<2010/11/08

                    }
                    else if (dialogResult == DialogResult.No)
                    {
                        checkedValue = true;
                        this._afterSaveClearFlg = false;
                    }
                    else
                    {
                        this._afterSaveClearFlg = false;
                    }
                // --- ADD 2012/06/26 No.630 Y.Wakita ---------->>>>>
                }
                // --- ADD 2012/06/26 No.630 Y.Wakita ----------<<<<<
            }
            else
            {
                checkedValue = true;
            }

            return checkedValue;
        }

        /// <summary>
        /// 赤伝処理
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <param name="salesDetailList">売上明細データオブジェクトリスト</param>
        /// <param name="addUpSrcDetailList">計上元売上明細データオブジェクトリスト</param>
        /// <param name="depsitMain">入金データオブジェクト</param>
        /// <param name="depositAlw">入金引当データオブジェクト</param>
        /// <param name="stockSlipWorkList">仕入データオブジェクトリスト</param>
        /// <param name="stockDetailWorkList">仕入明細データオブジェクトリスト</param>
        /// <param name="addUppOrgStockDetailList">同時入力計上元仕入明細データオブジェクトリスト</param>
        /// <param name="stockWorkList">在庫ワークオブジェクトリスト</param>
        /// <param name="acceptOdrCarList">受注マスタ（車両）オブジェクトリスト</param>
        /// <br>Update Note: 2011/10/29 yangmj 売上伝票入力／発注の取り消しを行った伝票の削除処理対応</br>
        private void RedSlip(SalesSlip salesSlip, List<SalesDetail> salesDetailList, List<SalesDetail> addUpSrcDetailList, SearchDepsitMain depsitMain, SearchDepositAlw depositAlw, List<StockSlipWork> stockSlipWorkList, List<StockDetailWork> stockDetailWorkList, List<AddUpOrgStockDetailWork> addUpOrgStockDetailList, List<StockWork> stockWorkList, List<AcceptOdrCar> acceptOdrCarList)
        {
            // 赤伝票情報生成可能チェック処理
            string message;
            bool created = this._salesSlipInputAcs.CanCreateRedSlipInfo(salesSlip, salesDetailList, out message);

            if (!created)
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    message,
                    0,
                    MessageBoxButtons.OK);
                // --- UPD 2010/06/02 ---------->>>>>
                this._canRed = created;
                // --- UPD 2010/06/02 ----------<<<<<
                return;
            }

            // 計上元データ表示テキスト作成
            string addText = string.Empty;
            if (this._salesSlipInputAcs.ExistSalesDetailAddUpSrcDataDBList(salesDetailList))
            {
                // 計上元明細読込
                List<SalesDetail> salesDetailListSrc = this._salesSlipInputAcs.ReadDetailSrc(salesDetailList);

                // -----UPD 2010/11/30----->>>>>
                //// 出力文字列作成処理
                //if (salesDetailListSrc != null) addText = this._salesSlipInputAcs.MakeAddTextSrc(salesDetailList, salesDetailListSrc);

                //DialogResult dr = TMsgDisp.Show(
                //    _form,
                //    emErrorLevel.ERR_LEVEL_INFO,
                //    "todo",
                //    "関連するデータが存在します。　　\r\n\r\n" +
                //    addText + "\r\n" +
                //    "赤伝処理を行ってよろしいですか？",
                //    0,
                //    MessageBoxButtons.YesNo);

                MAHNB01010UP delDetail = new MAHNB01010UP();
                //-----UPD 2011/10/29----->>>>>
                DialogResult dr = DialogResult.OK;
                if (salesDetailList != null && (salesDetailListSrc != null && salesDetailListSrc.Count > 0))
                {
                    dr = delDetail.Show(this._form, salesDetailList, salesDetailListSrc, this._salesSlipInputAcs.SalesDetailDataTable, 2);
                }
                //DialogResult dr = delDetail.Show(this._form, salesDetailList, salesDetailListSrc, this._salesSlipInputAcs.SalesDetailDataTable, 2);
                //-----UPD 2011/10/29-----<<<<<
                // -----UPD 2010/11/30-----<<<<<

                if (dr == DialogResult.No) return;
            }

            SalesSlip baseSalesSlip = salesSlip.Clone();

            // 赤伝票情報生成処理
            this._salesSlipInputAcs.CreateRedSlipInfo(ref salesSlip);

            // 表示用受注ステータスの設定
            SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

            // 伝票区分コンボエディタアイテム設定処理
            this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, false);

            // 表示用伝票区分設定処理
            SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

            // キャッシュ処理
            this._salesSlipInputAcs.Cache(salesSlip, baseSalesSlip, salesDetailList, addUpSrcDetailList, acceptOdrCarList);

            // 赤伝票明細情報生成処理
            this._salesSlipInputAcs.CreateRedSlipDetailInfo(stockWorkList);

            // 空白行削除処理
            this.DeleteEmptyRow(true);

            // 売上金額計算処理
            this.CalculationSalesPrice();

            // 売上金額変更後発生イベント処理
            this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());

            // 売上データクラス→画面格納処理
            this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

            // 明細粗利率設定処理
            this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesDetailList);

            //追加情報タブ項目Visible設定
            this.SettingAddInfoVisible();

            // データ変更フラグプロパティをtrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            //this._prevControl = this.ActiveControl;
        }

        /// <summary>
        /// 赤伝できるかどうかフラグを取得する
        /// </summary>
        /// <param name="canRed">True: 赤伝できる; False: 赤伝できない</param>
        public void GetCanRed(out bool canRed)
        {
            canRed = this._canRed;
        }

        /// <summary>
        /// 赤伝ガイドステータスを取得する
        /// </summary>
        /// <param name="redDialogResult">赤伝ガイドステータス</param>
        public void GetRedDialogResult(out int redDialogResult)
        {
            redDialogResult = this._redDialogResult;
        }

        /// <summary>
        /// 見出貼付メイン
        /// </summary>
        /// <param name="CopySlipHeader"></param>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="addresseeName">納入先名称</param>
        /// <param name="existSalesDetail">existSalesDetail</param>
        /// <param name="clearDetailFlg">明細クリアフラグ</param>
        /// <param name="searchPartsModeProperty"></param>
        /// <param name="fullModelFixedNoAryFlg"></param>
        /// <param name="errorFlg">エラーフラグ</param>
        /// <param name="outSalesSlipHeaderCopyData"></param>
        /// <param name="copySlipHeaderClearFlg"></param>
        public void CopySlipHeader(bool carInfoEnabledFlg, int salesRowNo, string addresseeName, out bool existSalesDetail, out bool clearDetailFlg, out int searchPartsModeProperty, out bool fullModelFixedNoAryFlg, out bool errorFlg, out SalesSlipHeaderCopyData outSalesSlipHeaderCopyData, out bool copySlipHeaderClearFlg)
        {
            existSalesDetail = false;
            clearDetailFlg = false;
            searchPartsModeProperty = 0;
            fullModelFixedNoAryFlg = false;
            errorFlg = false;
            copySlipHeaderClearFlg = true;
            outSalesSlipHeaderCopyData = new SalesSlipHeaderCopyData();
            // 見出貼付データ
            SalesSlipHeaderCopyData salesSlipHeaderCopyData = null;
            // 見出貼付XML
            string xmlFileName = System.IO.Path.Combine(Broadleaf.Application.Resources.ConstantManagement_ClientDirectory.UISettings, SLIPHEADERCOPY_XML_FILE_NAME);

            //-----------------------------------------------
            // 見出貼付XML読み込み
            //-----------------------------------------------
            # region [salesSlipHeaderCopyData←XML]
            // XML存在チェック
            if (!System.IO.File.Exists(xmlFileName))
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "貼り付ける情報がありません。" + Environment.NewLine +
                    "得意先電子元帳で見出複写を実行して下さい。",
                    -1,
                    MessageBoxButtons.OK);
                errorFlg = true;
                return;
            }

            // XML読み込み
            try
            {
                salesSlipHeaderCopyData = UserSettingController.DecryptionDeserializeUserSetting<SalesSlipHeaderCopyData>(xmlFileName, new string[] { ENCRYPTION_KEY });
            }
            catch
            {
                salesSlipHeaderCopyData = null;
            }

            // エラーチェック
            if (salesSlipHeaderCopyData == null)
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "見出貼付情報の読み込みに失敗しました。" + Environment.NewLine +
                    "得意先電子元帳で見出複写を再度実行して下さい。" + Environment.NewLine,
                    -1,
                    MessageBoxButtons.OK);
                errorFlg = true;
                return;
            }
            outSalesSlipHeaderCopyData = salesSlipHeaderCopyData;
            # endregion

            //-----------------------------------------------
            // 明細入力済み時のクリア確認・クリア処理
            //-----------------------------------------------
            # region [Clear]
            existSalesDetail = this._salesSlipInputAcs.ExistSalesDetail();
            // --- ADD 2015/03/26 Y.Wakita ---------->>>>>
            if ((existSalesDetail == false) && (this._salesSlipInputAcs.SalesSlip.SalesSlipNum != this._defaultSalesSlipNumDf))
                existSalesDetail = true;
            // --- ADD 2015/03/26 Y.Wakita ----------<<<<<
            // --- UPD 2015/03/26 Y.Wakita ---------->>>>>
            //if (this._salesSlipInputAcs.ExistSalesDetail())
            if (existSalesDetail)
            // --- UPD 2015/03/26 Y.Wakita ----------<<<<<
            {
                // 確認ダイアログを出す為、データ変更済みの扱いにする。
                // （修正呼出後に新規ボタンを押した場合、通常はダイアログ表示しない為）
                this._salesSlipInputAcs.IsDataChanged = true;

                bool keepDate = (this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipDateClrDivCd == (int)SalesSlipInputAcs.SlipDateClrDivCd.InputDate) ? true : false;
                clearDetailFlg = keepDate;
                //copySlipHeaderClearFlg = this.Clear(true, true, keepDate, false, false, false);  //DEL 2010/06/02
                copySlipHeaderClearFlg = this.Clear(true, true, keepDate, false, false, false, false, 0); //ADD 2010/06/02
                if (copySlipHeaderClearFlg == false) return;
            }
            else
            {
                clearDetailFlg = true;
                # region [Clear(この時点で明細は無いが関連情報をクリアする為)]
                // 各種データクリア処理
                this._salesSlipInputAcs.ClearDataForNew();

                // 売上入力明細クリア処理
                this.Clear();

                // 部品検索切替反映処理
                this.ChangeSearchModeReflect();

                // データ変更フラグプロパティをfalseにする
                this._salesSlipInputAcs.IsDataChanged = false;
                searchPartsModeProperty = this._searchPartsModeProperty;
                # endregion
            }
            # endregion

            //-----------------------------------------------
            // 見出貼付情報のセット
            //-----------------------------------------------
            // 入力中の売上データ
            //SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip.Clone(); // DEL 2010/10/08
            SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip; // ADD 2010/10/08

            # region [salesSlip(UI表示用)←salesSlipHeaderCopyData]
            // 得意先
            CopySlipHeaderCustomer(ref salesSlip, salesSlipHeaderCopyData); // 得意先・納入先・拠点・担当者・部門 // ADD 2010/07/12

            // 受注者
            try
            {
                if (!string.IsNullOrEmpty(_salesInputConstructionAcs.FrontEmployeeCdValue))
                {
                    //>>>2010/08/06
                    //// 設定UIより
                    //salesSlip.FrontEmployeeCd = _salesInputConstructionAcs.FrontEmployeeCdValue.Trim();
                    //salesSlip.FrontEmployeeNm = this._salesSlipInputInitDataAcs.GetName_FromEmployee(salesSlip.FrontEmployeeCd);

                    switch (this._salesInputConstructionAcs.FrontEmployeeCdDivValue)
                    {
                        // ログイン担当者
                        case 0:
                            Employee emp = this._salesSlipInputInitDataAcs.GetEmployee(LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                            if (emp != null)
                            {
                                salesSlip.FrontEmployeeCd = LoginInfoAcquisition.Employee.EmployeeCode.Trim();  // 担当者コード
                                salesSlip.FrontEmployeeNm = emp.Name;
                                if (salesSlip.FrontEmployeeNm.Length > 16) salesSlip.FrontEmployeeNm = salesSlip.FrontEmployeeNm.Substring(0, 16);
                            }
                            break;
                        // 空白
                        case 1:
                            salesSlip.FrontEmployeeCd = string.Empty;  // 担当者コード
                            salesSlip.FrontEmployeeNm = string.Empty;  // 担当者名称
                            break;
                        // 固定値(設定値)
                        case 2:
                            Employee empp = this._salesSlipInputInitDataAcs.GetEmployee(this._salesInputConstructionAcs.FrontEmployeeCdValue.Trim());
                            if (empp != null)
                            {
                                salesSlip.FrontEmployeeCd = this._salesInputConstructionAcs.FrontEmployeeCdValue.Trim();  // 担当者コード
                                salesSlip.FrontEmployeeNm = empp.Name;
                                if (salesSlip.FrontEmployeeNm.Length > 16) salesSlip.FrontEmployeeNm = salesSlip.FrontEmployeeNm.Substring(0, 16);
                            }
                            break;
                    }
                    //<<<2010/08/06
                }
                else
                {
                    // 見出貼付XMLより
                    salesSlip.FrontEmployeeCd = salesSlipHeaderCopyData.FrontEmployeeCd.Trim();
                    salesSlip.FrontEmployeeNm = this._salesSlipInputInitDataAcs.GetName_FromEmployee(salesSlip.FrontEmployeeCd);
                }
                // 名称の長さチェック
                if (salesSlip.FrontEmployeeNm.Length > 16) salesSlip.FrontEmployeeNm = salesSlip.FrontEmployeeNm.Substring(0, 16);
            }
            catch
            {
            }

            // 発行者
            try
            {
                if (!string.IsNullOrEmpty(_salesInputConstructionAcs.SalesInputCdValue))
                {
                    //>>>2010/08/06
                    //// 設定UIより
                    //salesSlip.SalesInputCode = _salesInputConstructionAcs.SalesInputCdValue.Trim();
                    //salesSlip.SalesInputName = this._salesSlipInputInitDataAcs.GetName_FromEmployee(salesSlip.SalesInputCode);

                    switch (this._salesInputConstructionAcs.SalesInputCdDivValue)
                    {
                        // ログイン担当者
                        case 0:
                            Employee emp = this._salesSlipInputInitDataAcs.GetEmployee(LoginInfoAcquisition.Employee.EmployeeCode.Trim());
                            if (emp != null)
                            {
                                salesSlip.SalesInputCode = LoginInfoAcquisition.Employee.EmployeeCode.Trim();  // 担当者コード
                                salesSlip.SalesInputName = emp.Name;
                                if (salesSlip.SalesInputName.Length > 16) salesSlip.SalesInputName = salesSlip.SalesInputName.Substring(0, 16);
                            }
                            break;
                        // 空白
                        case 1:
                            salesSlip.SalesInputCode = string.Empty;  // 担当者コード
                            salesSlip.SalesInputName = string.Empty;  // 担当者名称
                            break;
                        // 固定値(設定値)
                        case 2:
                            Employee empp = this._salesSlipInputInitDataAcs.GetEmployee(this._salesInputConstructionAcs.SalesInputCdValue.Trim());
                            if (empp != null)
                            {
                                salesSlip.SalesInputCode = this._salesInputConstructionAcs.SalesInputCdValue.Trim();  // 担当者コード
                                salesSlip.SalesInputName = empp.Name;
                                if (salesSlip.SalesInputName.Length > 16) salesSlip.SalesInputName = salesSlip.SalesInputName.Substring(0, 16);
                            }
                            break;
                    }
                    //<<<2010/08/06
                }
                else
                {
                    // 見出貼付XMLより
                    salesSlip.SalesInputCode = salesSlipHeaderCopyData.SalesInputCode.Trim();
                    salesSlip.SalesInputName = this._salesSlipInputInitDataAcs.GetName_FromEmployee(salesSlip.SalesInputCode);
                }
                // 名称の長さチェック
                if (salesSlip.SalesInputName.Length > 16) salesSlip.SalesInputName = salesSlip.SalesInputName.Substring(0, 16);
            }
            catch
            {
            }

            // フッタ
            salesSlip.SlipNote = salesSlipHeaderCopyData.SlipNote; // 備考１
            salesSlip.SlipNote2 = salesSlipHeaderCopyData.SlipNote2; // 備考２
            salesSlip.SlipNote3 = salesSlipHeaderCopyData.SlipNote3; // 備考３
            salesSlip.PartySaleSlipNum = salesSlipHeaderCopyData.PartySaleSlipNum; // 仮伝番号

            salesSlip.AddresseeCode = salesSlipHeaderCopyData.AddresseeCode; // 納入先コード
            salesSlip.AddresseeName = salesSlipHeaderCopyData.AddresseeName.Trim(); // 納入先名１
            salesSlip.AddresseeName2 = salesSlipHeaderCopyData.AddresseeName2.Trim(); // 納入先名２

            //ComboEditorItemControl.SetComboEditorItemIndex(this.tComboEditor_DeliveredGoodsDiv, salesSlipHeaderCopyData.DeliveredGoodsDiv, false); // 納品区分
            salesSlip.DeliveredGoodsDiv = salesSlipHeaderCopyData.DeliveredGoodsDiv;
            //salesSlip.DeliveredGoodsDivNm = this.tComboEditor_DeliveredGoodsDiv.Text;
            if (salesSlip.DeliveredGoodsDivNm.Length > 10) salesSlip.DeliveredGoodsDivNm = salesSlip.DeliveredGoodsDivNm.Substring(0, 10);
            # endregion

            # region [車輌情報セット・検索]
            if (carInfoEnabledFlg)
            {
                // 型式指定番号のイベント処理を一時解除＞＞＞
                //tNedit_ModelDesignationNo.ValueChanged -= this.tNedit_ModelDesignationNo_ValueChanged;

                ClearSlipHeaderCarSearch(ref salesSlipHeaderCopyData);

                // 車輌検索
                this._salesSlipInputAcs.CopySlipHeaderCarSearch(salesSlipHeaderCopyData, salesRowNo);

                // 型式指定番号のイベント処理を再登録＜＜＜
                //tNedit_ModelDesignationNo.ValueChanged += this.tNedit_ModelDesignationNo_ValueChanged;
            }
            # endregion

            //-----------------------------------------------
            // 変更内容の摘要とキャッシュ
            //-----------------------------------------------

            // 売上データキャッシュ処理
            this._salesSlipInputAcs.CacheForChange(salesSlip);
            // 売上データクラス→画面格納処理
            this.SetDisplay(salesSlip);

            // 納入先名 桁数補正
            if (addresseeName.Length > 30)
            {
                salesSlip.AddresseeName = addresseeName.Substring(0, 30);
            }

            // データ変更フラグプロパティをTrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            //-----------------------------------------------
            // フォーカス制御
            //-----------------------------------------------
            # region [フォーカス制御]
            fullModelFixedNoAryFlg = (salesSlipHeaderCopyData.FullModelFixedNoAry == null || salesSlipHeaderCopyData.FullModelFixedNoAry.Length == 0);

            //>>>2010/05/30 自由検索
            //fullModelFixedNoAryFlg = (salesSlipHeaderCopyData.FullModelFixedNoAry == null || salesSlipHeaderCopyData.FullModelFixedNoAry.Length == 0);
            fullModelFixedNoAryFlg = false;
            if ((salesSlipHeaderCopyData.FullModelFixedNoAry == null || salesSlipHeaderCopyData.FullModelFixedNoAry.Length == 0) &&
                (salesSlipHeaderCopyData.FreeSrchMdlFxdNoAry == null || salesSlipHeaderCopyData.FreeSrchMdlFxdNoAry.Length == 0))
            {
                fullModelFixedNoAryFlg = true;
            }
            //<<<2010/05/30 自由検索
            # endregion

            //追加情報タブ項目Visible設定
            SettingAddInfoVisible();

            //伝票備考、伝票備考２、伝票備考３の入力桁数を制御する
            this._salesSlipInputAcs.GetNoteCharCnt();
            //SetNoteCharCnt();
        }

        // ----------- ADD 連番729 2011/08/18 -------------------->>>>>
        /// <summary>
        /// 明細貼付メイン
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <br>UpdateNote : 2011/09/14 譚洪 Redmine#24670 売上伝票入力 ⇔ 得意先電子元帳 の間で行う明細複写機能の対応</br>
        /// <br>UpdateNote : 2013/08/07 liusy Redmine#37770 売上伝票入力 ⇔ 得意先電子元帳 の間で行う明細複写後、
        /// <br>明細データはBLコードより、BLグループ、中分類、大分類情報を取得</br>
        public void CopySlipDetail(int salesRowNo)
        {
            // 明細貼付データ
            SalesDetail salesDetailCopyData = null;
            // 明細貼付XML
            string xmlFileName = System.IO.Path.Combine(Broadleaf.Application.Resources.ConstantManagement_ClientDirectory.UISettings, SALESDTLCOPY_XML_FILE_NAME);

            //-----------------------------------------------
            // 明細貼付XML読み込み
            //-----------------------------------------------
            # region [salesDetailCopyData←XML]
            // XML存在チェック
            if (!System.IO.File.Exists(xmlFileName))
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "貼り付ける情報がありません。" + Environment.NewLine +
                    "得意先電子元帳で明細複写を実行して下さい。",
                    -1,
                    MessageBoxButtons.OK);
                return;
            }

            // XML読み込み
            try
            {
                salesDetailCopyData = UserSettingController.DecryptionDeserializeUserSetting<SalesDetail>(xmlFileName, new string[] { ENCRYPTION_KEY });
                salesDetailCopyData.SalesRowNo = salesRowNo;
            }
            catch
            {
                salesDetailCopyData = null;
            }

            // エラーチェック
            if (salesDetailCopyData == null)
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "明細貼付情報の読み込みに失敗しました。" + Environment.NewLine +
                    "得意先電子元帳で明細複写を再度実行して下さい。" + Environment.NewLine,
                    -1,
                    MessageBoxButtons.OK);
                return;
            }
            # endregion

            AfterGoodsNoUpdate(salesRowNo - 1, salesDetailCopyData.GoodsNo, salesDetailCopyData.GoodsMakerCd, salesRowNo);

            # region [XMLから明細をメモに設定する]
            // --- UPD 2014/11/28 T.Miyamoto 仕掛一覧 №2578 ------------------------------>>>>>
            //this._salesDetailDataTable[salesRowNo - 1].BLGoodsCode = salesDetailCopyData.BLGoodsCode;
            ////add by liusy #37770 2013/08/07 ---->>>>
            //this.SettingSalesDetailListBLGoodsInfo(salesRowNo, salesDetailCopyData.BLGoodsCode);
            ////add by liusy #37770 2013/08/07 ----<<<<

            //this._salesDetailDataTable[salesRowNo - 1].GoodsName = salesDetailCopyData.GoodsName;
            //// --- ADD 2013/02/07 Y.Wakita ---------->>>>>
            //this._salesDetailDataTable[salesRowNo - 1].GoodsNameKana = salesDetailCopyData.GoodsName;
            //// --- ADD 2013/02/07 Y.Wakita ----------<<<<<
            //this._salesDetailDataTable[salesRowNo - 1].GoodsNo = salesDetailCopyData.GoodsNo;
            //this._salesDetailDataTable[salesRowNo - 1].GoodsMakerCd = salesDetailCopyData.GoodsMakerCd;
            //this._salesDetailDataTable[salesRowNo - 1].MakerName = salesDetailCopyData.MakerName;
            //this._salesDetailDataTable[salesRowNo - 1].SupplierCd = salesDetailCopyData.SupplierCd;
            //this._salesDetailDataTable[salesRowNo - 1].SupplierSnm = salesDetailCopyData.SupplierSnm;
            //// DEL 2011/09/14 ---- >>>>>>>>>>>
            ////this._salesDetailDataTable[salesRowNo - 1].ListPriceTaxExcFl = salesDetailCopyData.ListPriceTaxExcFl;
            ////this._salesDetailDataTable[salesRowNo - 1].ListPriceDisplay = salesDetailCopyData.ListPriceDisplay;
            ////this._salesDetailDataTable[salesRowNo - 1].SalesUnitCost = salesDetailCopyData.SalesUnitCost;
            ////this._salesDetailDataTable[salesRowNo - 1].SalesUnPrcTaxExcFl = salesDetailCopyData.SalesUnPrcTaxExcFl;
            ////this._salesDetailDataTable[salesRowNo - 1].CostRate = salesDetailCopyData.CostRate;
            ////this._salesDetailDataTable[salesRowNo - 1].SalesRate = salesDetailCopyData.SalesRate;
            //// DEL 2011/09/14 ---- <<<<<<<<<<<<
            //this._salesDetailDataTable[salesRowNo - 1].SalesRowNo = salesDetailCopyData.SalesRowNo;
            //// --- ADD 2012/09/20 Y.Wakita ---------->>>>>
            //this._salesDetailDataTable[salesRowNo - 1].SupplierCdForStock = salesDetailCopyData.SupplierCd;
            //// --- ADD 2012/09/20 Y.Wakita ----------<<<<<

            if ((this._salesDetailDataTable[salesRowNo - 1].GoodsNo == salesDetailCopyData.GoodsNo) &&
                (this._salesDetailDataTable[salesRowNo - 1].GoodsMakerCd == salesDetailCopyData.GoodsMakerCd))
            {
            this._salesDetailDataTable[salesRowNo - 1].BLGoodsCode = salesDetailCopyData.BLGoodsCode;
            //add by liusy #37770 2013/08/07 ---->>>>
            this.SettingSalesDetailListBLGoodsInfo(salesRowNo, salesDetailCopyData.BLGoodsCode);
            //add by liusy #37770 2013/08/07 ----<<<<

            this._salesDetailDataTable[salesRowNo - 1].GoodsName = salesDetailCopyData.GoodsName;
            // --- ADD 2013/02/07 Y.Wakita ---------->>>>>
            this._salesDetailDataTable[salesRowNo - 1].GoodsNameKana = salesDetailCopyData.GoodsName;
            // --- ADD 2013/02/07 Y.Wakita ----------<<<<<
            this._salesDetailDataTable[salesRowNo - 1].GoodsNo = salesDetailCopyData.GoodsNo;
            this._salesDetailDataTable[salesRowNo - 1].GoodsMakerCd = salesDetailCopyData.GoodsMakerCd;
            this._salesDetailDataTable[salesRowNo - 1].MakerName = salesDetailCopyData.MakerName;
            this._salesDetailDataTable[salesRowNo - 1].SupplierCd = salesDetailCopyData.SupplierCd;
            this._salesDetailDataTable[salesRowNo - 1].SupplierSnm = salesDetailCopyData.SupplierSnm;
            this._salesDetailDataTable[salesRowNo - 1].SalesRowNo = salesDetailCopyData.SalesRowNo;
            // --- ADD 2012/09/20 Y.Wakita ---------->>>>>
            this._salesDetailDataTable[salesRowNo - 1].SupplierCdForStock = salesDetailCopyData.SupplierCd;
            // --- ADD 2012/09/20 Y.Wakita ----------<<<<<
	            // --- ADD 2015/01/08 T.Miyamoto 仕掛 №2606 ------------------------------>>>>>
	            if (this._salesDetailDataTable[salesRowNo - 1].SupplierCdForOrder != salesDetailCopyData.SupplierCd)
	            {
	                // 発注先情報設定
	                UOESupplier uoeSupplier;
	                int st = this._uoeSupplierAcs.ReadCache(out uoeSupplier, this._enterpriseCode, salesDetailCopyData.SupplierCd, this._salesSlip.SectionCode);
	                if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
	                {
	                    this._salesDetailDataTable[salesRowNo - 1].SupplierCdForOrder = uoeSupplier.UOESupplierCd;    // 発注先コード
	                    this._salesDetailDataTable[salesRowNo - 1].SupplierSnmForOrder = uoeSupplier.UOESupplierName; // 発注先名称
	                    this._salesDetailDataTable[salesRowNo - 1].BoCode = uoeSupplier.BoCode;                       // BO区分
	                    this._salesDetailDataTable[salesRowNo - 1].UOEDeliGoodsDiv = uoeSupplier.UOEDeliGoodsDiv;     // 納品区分
	                    this._salesDetailDataTable[salesRowNo - 1].UOEResvdSection = uoeSupplier.UOEResvdSection;     // 指定拠点
	                }
	                this._salesSlipInputAcs.SettingUOEOrderDtlRowForNew(salesRowNo);
	            }
	            // --- ADD 2015/01/08 T.Miyamoto 仕掛 №2606 ------------------------------<<<<<
            }
            // --- UPD 2014/11/28 T.Miyamoto 仕掛一覧 №2578 ------------------------------<<<<<
            # endregion

        }
        //add by liusy #37770 2013/08/07 ---->>>>
        /// <summary>
        ///BLグループ、中分類、大分類情報を取得
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="blGoodsCode">BLコード</param>
        /// <returns></returns>
        private void SettingSalesDetailListBLGoodsInfo(int salesRowNo, int blGoodsCode)
        {
            BLGoodsCdUMnt bLGoodsCdUMnt = new BLGoodsCdUMnt();
            BLGroupU bLGroupU = new BLGroupU();
            GoodsGroupU goodsGroupU = new GoodsGroupU();
            UserGdBdU userGdBdU = new UserGdBdU();
            if (this._salesSlipInputInitDataAcs.GetBLGoodsRelation(blGoodsCode, out bLGoodsCdUMnt, out bLGroupU, out goodsGroupU, out userGdBdU))
            {
                this._salesDetailDataTable[salesRowNo - 1].GoodsLGroup = userGdBdU.GuideCode;              //商品大分類コード
                this._salesDetailDataTable[salesRowNo - 1].GoodsLGroupName = userGdBdU.GuideName;              //商品大分類名称
                this._salesDetailDataTable[salesRowNo - 1].GoodsMGroup = goodsGroupU.GoodsMGroup;          //商品中分類コード
                this._salesDetailDataTable[salesRowNo - 1].GoodsMGroupName = goodsGroupU.GoodsMGroupName;      //商品中分類名称
                this._salesDetailDataTable[salesRowNo - 1].BLGroupCode = bLGroupU.BLGroupCode;             //BLグループコード
                this._salesDetailDataTable[salesRowNo - 1].BLGroupName = bLGroupU.BLGroupName;             //BLグループコード名称
                this._salesDetailDataTable[salesRowNo - 1].BLGoodsFullName = bLGoodsCdUMnt.BLGoodsHalfName;    //BL商品コード名称（全角）
                this._salesDetailDataTable[salesRowNo - 1].PrtBLGoodsCode = bLGoodsCdUMnt.BLGoodsCode;        //BL商品コード（印刷）
                this._salesDetailDataTable[salesRowNo - 1].PrtBLGoodsName = bLGoodsCdUMnt.BLGoodsHalfName;    //BL商品コード名称（印刷）
                this._salesDetailDataTable[salesRowNo - 1].RateBLGoodsCode = bLGoodsCdUMnt.BLGoodsCode;        //BL商品コード（掛率）
                this._salesDetailDataTable[salesRowNo - 1].RateBLGoodsName = bLGoodsCdUMnt.BLGoodsFullName;    //BL商品コード名称（掛率）
                this._salesDetailDataTable[salesRowNo - 1].RateGoodsRateGrpCd = goodsGroupU.GoodsMGroup;       //商品掛率グループコード（掛率）
                this._salesDetailDataTable[salesRowNo - 1].RateGoodsRateGrpNm = goodsGroupU.GoodsMGroupName;   //商品掛率グループ名称（掛率）
                this._salesDetailDataTable[salesRowNo - 1].RateBLGroupCode = bLGroupU.BLGroupCode;             //BLグループコード（掛率）
                this._salesDetailDataTable[salesRowNo - 1].RateBLGroupName = bLGroupU.BLGroupName;             //BLグループ名称（掛率）

            }
        }
        //add by liusy #37770 2013/08/07 ----<<<<

        ///// <summary>
        ///// XMLから明細をメモに設定する
        ///// </summary>
        ///// <param name="salesRowNo">行番号</param>
        ///// <param name="outSalesSlipHeaderCopyData"></param>
        //public void SetDataTableFromCopyData(int salesRowNo, SalesDetail outSalesDetailCopyData)
        //{
        //    this._salesDetailDataTable[salesRowNo].BLGoodsCode = outSalesDetailCopyData.BLGoodsCode;
        //    this._salesDetailDataTable[salesRowNo].GoodsName = outSalesDetailCopyData.GoodsName;
        //    this._salesDetailDataTable[salesRowNo].GoodsNo = outSalesDetailCopyData.GoodsNo;
        //    this._salesDetailDataTable[salesRowNo].GoodsMakerCd = outSalesDetailCopyData.GoodsMakerCd;
        //    this._salesDetailDataTable[salesRowNo].MakerName = outSalesDetailCopyData.MakerName;
        //    this._salesDetailDataTable[salesRowNo].SupplierCd = outSalesDetailCopyData.SupplierCd;
        //    this._salesDetailDataTable[salesRowNo].SupplierSnm = outSalesDetailCopyData.SupplierSnm;
        //    this._salesDetailDataTable[salesRowNo].ListPriceTaxExcFl = outSalesDetailCopyData.ListPriceTaxExcFl;
        //    this._salesDetailDataTable[salesRowNo].SalesUnitCost = outSalesDetailCopyData.SalesUnitCost;
        //    this._salesDetailDataTable[salesRowNo].SalesUnPrcTaxExcFl = outSalesDetailCopyData.SalesUnPrcTaxExcFl;
        //    this._salesDetailDataTable[salesRowNo].CostRate = outSalesDetailCopyData.CostRate;
        //    this._salesDetailDataTable[salesRowNo].SalesRate = outSalesDetailCopyData.SalesRate;
        //    this._salesDetailDataTable[salesRowNo].SalesRowNo = outSalesDetailCopyData.SalesRowNo;

        //}
        // ----------- ADD 連番729 2011/08/18 --------------------<<<<<

        /// <summary>
        ///管理番号ガイド表示後の処理
        /// </summary>
        /// <param name="status">ステータス</param>
        /// <param name="selectedInfo">選択したデータ</param>
        /// <param name="inputflag">管理番号　0:異なる　1:同じ</param>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="carMngCode">車両管理番号</param>
        /// <param name="returnFlag">ガイドステータスフラグ</param>
        /// <param name="clearCarInfoFlag">車両情報クリアフラグ</param>
        /// <returns>フォーカス　0:次項目　1:型式 2:管理番号</returns>
        public int AfterCarMngNoGuideReturn(int status, CarMangInputExtraInfo selectedInfo, int inputflag, int salesRowNo, string carMngCode, out bool returnFlag, out bool clearCarInfoFlag)
        {
            returnFlag = false;
            clearCarInfoFlag = false;
            int flag = 0;
            if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
            {
                returnFlag = true;

                //ガイド表示後のフォーカス制御
                if ("新規登録".Equals(selectedInfo.CarMngCode))
                {
                    flag = 0;
                    inputflag = 0;
                }
                else
                {
                    SalesSlipHeaderCopyData salesSlipHeaderCopyData = this._salesSlipInputAcs.CacheCarInfo(selectedInfo);

                    //// 車輌検索
                    //this._salesSlipInputAcs.CopySlipHeaderCarSearch(salesSlipHeaderCopyData, salesRowNo);

                    ////追加情報タブ項目Visible設定
                    //SettingAddInfoVisible();

                    //フル型式固定番号配列があり
                    // --- UPD 2010/05/31 ---------->>>>>
                    //if (salesSlipHeaderCopyData.FullModelFixedNoAry != null &&
                    //    salesSlipHeaderCopyData.FullModelFixedNoAry.Length > 0)
                    if (this._selectedCarMangInputExtraInfo.FullModelFixedNoAry != null &&
                        this._selectedCarMangInputExtraInfo.FullModelFixedNoAry.Length > 0)
                    // --- UPD 2010/05/31 ----------<<<<<
                    {
                        flag = 1;
                    }
                    else
                    {
                        flag = 0;
                        inputflag = 1;

                    }
                }
            }
            else if (status == (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN && (string.IsNullOrEmpty(selectedInfo.CarMngCode)))
            {
                flag = 0;
            }
            else
            {
                //新規登録
                flag = 2;
            }

            status = flag;

            //車輌情報をクリア処理
            if (flag == 0 && inputflag == 0)
            {
                clearCarInfoFlag = true;
                //string tempCarMngCode = carMngCode;
                //this._salesSlipInputAcs.ClearCarInfo();

                ////管理番号の値をセットする
                //this._salesSlipInputAcs.SettingCarInfoRowFromCarMngCode(salesRowNo, tempCarMngCode);
            }
            return flag;
        }

        //---ADD 2011/11/22 ---------------------->>>>>
        /// <summary>
        /// 連携判断
        /// </summary>
        /// <param name="CooprtFlag">CooprtFlag</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Note       : 連携判断処理。</br>
        /// <br>Programmer : 劉思遠</br>
        /// <br>Date       : 2011/11/22</br>
        /// </remarks>
        public int CooprtKindDiv(out bool CooprtFlag)
        {
            if (!(this._salesSlipInputAcs._scmHeaderIListSvForWebCheck != null && this._salesSlipInputAcs._scmHeaderIListSvForWebCheck.Count > 0 && this._salesSlipInputAcs._scmHeaderIListSvForWebCheck[0].InqOrdDivCd != 0))
            {
                CooprtFlag = false;
            }
            else
            {
                CooprtFlag = true;
            }
            return 0;
        }
        //---ADD 2011/11/22 ----------------------<<<<<

        /// <summary>
        ///管理番号ガイド表示後の処理
        /// </summary>
        /// <param name="status">対象オブジェクト</param>
        /// <param name="selectedInfo">イベントパラメータクラス</param>
        /// <param name="inputflag">管理番号　0:異なる　1:同じ</param>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="carMngCode">車両管理番号</param>
        /// <returns>フォーカス　0:次項目　1:型式 2:管理番号</returns>
        private int AfterCarMngNoGuideReturn(int status, CarMangInputExtraInfo selectedInfo, int inputflag, int salesRowNo, string carMngCode)
        {
            int flag = 0;

            if (status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL)
            {
                // ガイド表示後のフォーカス制御
                if ("新規登録".Equals(selectedInfo.CarMngCode))
                {
                    flag = 0;
                    inputflag = 0;
                }
                else
                {
                    SalesSlipHeaderCopyData salesSlipHeaderCopyData = this._salesSlipInputAcs.CacheCarInfo(selectedInfo);

                    // 車輌検索
                    // --- UPD 2014/06/02 T.Miyamoto システムテスト障害№87 ------------------------------>>>>>
                    //this._salesSlipInputAcs.CopySlipHeaderCarSearch(salesSlipHeaderCopyData, 1);
                    this._salesSlipInputAcs.CopySlipHeaderCarSearch(salesSlipHeaderCopyData, salesRowNo);
                    // --- UPD 2014/06/02 T.Miyamoto システムテスト障害№87 ------------------------------<<<<<

                    // 追加情報タブ項目Visible設定
                    SettingAddInfoVisible();

                    // フル型式固定番号配列があり
                    // --- UPD 2010/05/31 ---------->>>>>
                    //if (salesSlipHeaderCopyData.FullModelFixedNoAry != null &&
                    //    salesSlipHeaderCopyData.FullModelFixedNoAry.Length > 0)
                    if (this._selectedCarMangInputExtraInfo.FullModelFixedNoAry != null &&
                        this._selectedCarMangInputExtraInfo.FullModelFixedNoAry.Length > 0)
                    // --- UPD 2010/05/31 ----------<<<<<
                    {
                        flag = 1;
                    }
                    else
                    {
                        flag = 0;
                        inputflag = 1;
                    }
                }

            }
            else if (status == (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN && (string.IsNullOrEmpty(selectedInfo.CarMngCode)))
            {
                flag = 0;
            }
            else
            {
                // 新規登録
                flag = 2;
            }

            // 車輌情報をクリア処理
            if (flag == 0 && inputflag == 0)
            {
                this._salesSlipInputAcs.ClearCarInfo();
                this._salesSlipInputAcs.SettingCarInfoRowFromCarMngCode(salesRowNo, carMngCode);
            }

            return flag;
        }

        /// <summary>
        /// 車両クリア処理
        /// </summary>
        /// <param name="salesSlipHeaderCopyData"></param>
        private void ClearSlipHeaderCarSearch(ref SalesSlipHeaderCopyData salesSlipHeaderCopyData)
        {
            bool clearflag = false;
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt() != null &&
                    this._salesSlipInputInitDataAcs.GetSalesTtlSt().CarMngNoDispDiv == 1)
            {
                if (this._salesSlipInputInitDataAcs.Opt_CarMng == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    clearflag = false;
                }
                else
                {
                    clearflag = true;
                }
            }
            else
            {
                clearflag = true;
            }

            if (clearflag == true)
            {
                // 車両管理番号
                salesSlipHeaderCopyData.CarMngNo = 0;
                // 車両走行距離
                salesSlipHeaderCopyData.Mileage = 0;
                // 車輌備考
                salesSlipHeaderCopyData.CarNote = string.Empty;
                // 陸運事務所番号
                salesSlipHeaderCopyData.NumberPlate1Code = 0;
                // 陸運事務局名称
                salesSlipHeaderCopyData.NumberPlate1Name = string.Empty;
                // 車両登録番号（種別）
                salesSlipHeaderCopyData.NumberPlate2 = string.Empty;
                // 車両登録番号（カナ）
                salesSlipHeaderCopyData.NumberPlate3 = string.Empty;
                // 車両登録番号（プレート番号）
                salesSlipHeaderCopyData.NumberPlate4 = 0;

                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt() == null ||
                    this._salesSlipInputInitDataAcs.GetSalesTtlSt().CarMngNoDispDiv == 0)
                {
                    salesSlipHeaderCopyData.CarMngCode = string.Empty;
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public int GetUltraOptionSetValue()
        {
            return this._salesInputConstructionAcs.UltraOptionSetValue;
        }

        /// <summary>
        /// 
        /// </summary>
        public void setColDisplayStatusList()
        {
            SalesInputConstructionAcs_DataChanged();

            foreach (string key in this._salesInputConstructionAcs.EnterMoveTable.Keys)
            {
                EnterMoveValue enterMoveValue = this._salesInputConstructionAcs.EnterMoveTable[key];
                foreach (ColDisplayStatusExp colDisplayStatus in this._colDisplayStatusList.GetColDisplayStatusList())
                {
                    if (key == colDisplayStatus.Key)
                    {
                        colDisplayStatus.MoveEnterKeyName = enterMoveValue.Key;
                        colDisplayStatus.Enabled = enterMoveValue.Enabled;
                        colDisplayStatus.EnabledControl = enterMoveValue.EnabledControl;
                        colDisplayStatus.EnterStopControl = enterMoveValue.EnterStopControl;
                        break;
                    }

                }

            }
            // 列表示状態クラスリストをXMLにシリアライズする
            ColDisplayStatusList.Serialize(this._colDisplayStatusList.GetColDisplayStatusList(), ct_FILENAME_COLDISPLAYSTATUS);
        }

        /// <summary>
        /// 列表示状態クラスコレクションクラス
        /// </summary>
        /// <remarks>
        /// <br>Note       : 列表示状態クラスのコレクションクラスです。</br>
        public class ColDisplayStatusList
        {

            #region Constructor
            /// <summary>
            /// 列表示状態クラスコレクションクラスコンストラクタ
            /// </summary>
            /// <param name="colDisplayStatusList">ColDisplayStatusクラスリストのインスタンス</param>
            /// <remarks>
            /// <br>Note       : 列表示状態クラスコレクションクラスの新しいインスタンスを初期化します。</br>
            /// <br>Programmer : 20056 對馬 大輔</br>
            /// <br>Date       : 2007.09.10</br>
            /// </remarks>
            public ColDisplayStatusList(List<ColDisplayStatusExp> colDisplayStatusList, SalesInputDataSet.SalesDetailDataTable salesDetailDataTable)
            {
                // 各種インスタンス化
                this._colDisplayStatusList = colDisplayStatusList;
                this._colDisplayStatusDictionary = new Dictionary<string, ColDisplayStatusExp>();
                this._colDisplayStatusInitDictionary = new Dictionary<string, ColDisplayStatusExp>();
                this._colDisplayStatusKeyList = new List<string>();
                this._salesDetailDataTable = salesDetailDataTable;

                // 初期列表示状態リスト生成
                List<ColDisplayStatusExp> initStatusList = new List<ColDisplayStatusExp>();

                int visiblePosition = 0;

                // 上下１段
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SalesRowNoDisplayColumn.ColumnName, visiblePosition++, true, 44, 2, 0, 0, 44, 4, "", "", false, false, false));                                                    // №

                // 上段
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.BLGoodsCodeColumn.ColumnName, visiblePosition++, true, 73, 2, 44, 0, 73, 2, "GoodsNo", "GoodsName", true, false, false));                                                         // BLコード
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.GoodsNameColumn.ColumnName, visiblePosition++, true, 430, 2, 117, 0, 430, 2, "GoodsNo", "AcceptAnOrderCntDisplay", true, false, false));                                          // 品名
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.AcceptAnOrderCntDisplayColumn.ColumnName, visiblePosition++, true, 90, 2, 547, 0, 90, 2, "ShipmentCntDisplay", "ShipmentCntDisplay", true, false, true));                         // 受注数
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SalesCodeColumn.ColumnName, visiblePosition++, true, 140, 2, 637, 0, 140, 2, "ListPriceDisplay", "ListPriceDisplay", true, true, true));                                          // 販売区分         // 切替項目(基本)
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.CostRateColumn.ColumnName, visiblePosition++, true, 70, 2, 777, 0, 70, 2, "SalesRate", "SalesUnitCost", true, true, true));                                                       // 仕入率           // 切替項目(基本)
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SalesUnitCostColumn.ColumnName, visiblePosition++, true, 140, 2, 847, 0, 140, 2, "SalesUnPrcDisplay", "SalesRate", true, true, true));                                            // 原単価           // 切替項目(基本)
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.DummyColumn.ColumnName, visiblePosition++, true, 130, 2, 987, 0, 130, 2, "SalesMoneyDisplay", "WarehouseCode", true, false, false));                                              // ダミー           // 切替項目(基本) 基本幅合計480
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.DtlNoteColumn.ColumnName, visiblePosition++, true, 405, 2, 1117, 0, 400, 2, "PartySlipNumDtl", "PartySlipNumDtl", true, true, true));                                             // 備考             // 切替項目(切替) 補正+5
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.CmpltSalesRowNoColumn.ColumnName, visiblePosition++, true, 84, 2, 1517, 0, 80, 2, "DeliGdsCmpltDueDate", "PartySlipNumDtl", true, true, true));                                   // 一式             // 切替項目(切替) 補正+4 切替合計480
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SupplierCdForStockColumn.ColumnName, visiblePosition++, true, 132, 2, 1597, 0, 130, 2, "PartySalesSlipNum", "StockDate", true, true, true));                                      // 仕入先           // 切替項目(仕入) 補正+2
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.StockDateColumn.ColumnName, visiblePosition++, true, 166, 2, 1727, 0, 165, 2, "PartySalesSlipNum", "PartySalesSlipNum", true, true, true));                                       // 仕入日           // 切替項目(仕入) 補正+1 仕入合計294
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.BoCodeColumn.ColumnName, visiblePosition++, true, 40, 2, 1892, 0, 40, 2, "SupplierSnmForOrder", "SupplierCdForOrder", true, true, true));                                         // BO               // 切替項目(発注) 
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SupplierCdForOrderColumn.ColumnName, visiblePosition++, true, 120, 2, 1932, 0, 120, 2, "SupplierSnmForOrder", "AcceptAnOrderCntForOrder", true, true, true));                     // 発注先           // 切替項目(発注) 
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName, visiblePosition++, true, 60, 2, 2052, 0, 60, 2, "SupplierSnmForOrder", "SupplierSnmForOrder", true, true, true));                      // 発注数           // 切替項目(発注) 
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.DeliveredGoodsDivNmColumn.ColumnName, visiblePosition++, true, 130, 2, 2112, 0, 130, 2, "UOEResvdSectionNm", "FollowDeliGoodsDivNm", true, true, true));                          // 納品区分         // 切替項目(発注) 
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.FollowDeliGoodsDivNmColumn.ColumnName, visiblePosition++, true, 130, 2, 2242, 0, 130, 2, "UOEResvdSectionNm", "UOEResvdSectionNm", true, true, true));                            // H納品区分        // 切替項目(発注) 発注合計480
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.WarehouseCodeColumn.ColumnName, visiblePosition++, true, 65, 2, 2372, 0, 65, 2, "SupplierStockDisplay", SalesSlipInputConstructionAcs.ct_StartPosittion, true, true, true));      // 倉庫
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.WarehouseShelfNoColumn.ColumnName, visiblePosition++, true, 100, 2, 2437, 0, 100, 2, "SupplierStockDisplay", SalesSlipInputConstructionAcs.ct_StartPosittion, true, true, true)); // 棚番
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SlipMemoExistColumn.ColumnName, visiblePosition++, true, 30, 2, 2537, 0, 30, 2, "SupplierSlipExist", SalesSlipInputConstructionAcs.ct_StartPosittion, true, true, true));         // メモイメージ
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.RecycleDivNmColumn.ColumnName, visiblePosition++, true, 301, 2, 1597, 0, 295, 2, "GoodsMngNo", "GoodsMngNo", true, true, true));                                                  // RC区分           // 切替項目(SCM) 補正 // 2010/05/30

                // 下段
                //initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.GoodsNoColumn.ColumnName, visiblePosition++, true, 273, 2, 44, 2, 273, 2, "BLGoodsCode", "GoodsKindCode", true, false, false));                                                   // 品番
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.GoodsNoColumn.ColumnName, visiblePosition++, true, 273, 2, 44, 2, 273, 2, "BLGoodsCode", "BLGoodsCode", true, false, false));                                                   // 品番
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.GoodsKindCodeColumn.ColumnName, visiblePosition++, true, 50, 2, 317, 2, 50, 2, "GoodsName", "GoodsMakerCd", true, true, true));                                                   // 商品属性(純正優良)
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.GoodsMakerCdColumn.ColumnName, visiblePosition++, true, 80, 2, 367, 2, 80, 2, "GoodsName", "BLGoodsCode", true, true, true));                                                     // メーカー
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SupplierCdColumn.ColumnName, visiblePosition++, true, 100, 2, 447, 2, 100, 2, "GoodsName", "SalesCode", true, true, true));                                                       // 仕入先
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName, visiblePosition++, true, 90, 2, 547, 2, 90, 2, "AcceptAnOrderCntDisplay", "SupplierCd", true, false, true));                                 // 出荷数
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.ListPriceDisplayColumn.ColumnName, visiblePosition++, true, 110, 2, 637, 2, 110, 2, "SalesCode", "CostRate", true, true, true));                                                  // 標準価格         // 切替項目(基本)
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.OpenPriceDivDisplayColumn.ColumnName, visiblePosition++, true, 30, 2, 747, 2, 30, 2, "SalesCode", "CostRate", true, true, true));                                                 // オープンイメージ // 切替項目(基本)
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SalesRateColumn.ColumnName, visiblePosition++, true, 70, 2, 777, 2, 70, 2, "CostRate", "SalesUnPrcDisplay", true, true, true));                                                   // 売価率           // 切替項目(基本)
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SalesUnPrcDisplayColumn.ColumnName, visiblePosition++, true, 140, 2, 847, 2, 140, 2, "SalesUnitCost", SalesSlipInputConstructionAcs.ct_StartPosittion, true, true, true));        // 売単価           // 切替項目(基本)
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SalesMoneyDisplayColumn.ColumnName, visiblePosition++, true, 130, 2, 987, 2, 130, 2, "Dummy", SalesSlipInputConstructionAcs.ct_StartPosittion, true, true, true));                // 売上金額         // 切替項目(基本) 基本幅合計480
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.PartySlipNumDtlColumn.ColumnName, visiblePosition++, true, 285, 2, 1117, 2, 280, 2, "DtlNote", "DeliGdsCmpltDueDate", true, true, true));                                         // 得意先注番       // 切替項目(切替) 補正+5
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.DeliGdsCmpltDueDateColumn.ColumnName, visiblePosition++, true, 204, 2, 1397, 2, 200, 2, "DtlNote", SalesSlipInputConstructionAcs.ct_StartPosittion, true, true, true));           // 納品完了予定日   // 切替項目(切替) 補正+4 切替幅合計480
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.PartySalesSlipNumColumn.ColumnName, visiblePosition++, true, 298, 2, 1597, 2, 295, 2, "SupplierCdForStock", SalesSlipInputConstructionAcs.ct_StartPosittion, true, true, true));  // 仕入伝票番号     // 切替項目(仕入) 補正+3 仕入幅合計294
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SupplierSnmForOrderColumn.ColumnName, visiblePosition++, true, 220, 2, 1892, 2, 220, 2, "BoCode", "DeliveredGoodsDivNm", true, true, true));                                      // 発注先名称       // 切替項目(発注)
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.UOEResvdSectionNmColumn.ColumnName, visiblePosition++, true, 260, 2, 2112, 2, 260, 2, "DeliveredGoodsDivNm", "WarehouseCode", true, true, true));                                 // 指定拠点         // 切替項目(発注) 発注幅合計480
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SupplierStockDisplayColumn.ColumnName, visiblePosition++, true, 165, 2, 2372, 2, 165, 2, "WarehouseCode", SalesSlipInputConstructionAcs.ct_StartPosittion, true, true, true));    // 現在庫数
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.SupplierSlipExistColumn.ColumnName, visiblePosition++, true, 30, 2, 2537, 2, 30, 2, "SlipMemoExist", SalesSlipInputConstructionAcs.ct_StartPosittion, true, true, true));         // 仕入情報イメージ
                initStatusList.Add(new ColDisplayStatusExp(this._salesDetailDataTable.GoodsMngNoColumn.ColumnName, visiblePosition++, true, 301, 2, 1597, 2, 295, 2, "RecycleDivNm", SalesSlipInputConstructionAcs.ct_StartPosittion, true, true, true));               // PS管理番号       // 切替項目(SCM) 補正 // 2010/05/30

                // 初期列表示状態リスト格納処理
                foreach (ColDisplayStatusExp initStatus in initStatusList)
                {
                    this._colDisplayStatusKeyList.Add(initStatus.Key);
                    this._colDisplayStatusInitDictionary.Add(initStatus.Key, initStatus);
                }

                // 列表示状態クラスリストが無効の場合は、初期列表示状態リストを設定
                if ((this._colDisplayStatusList == null) || (this._colDisplayStatusList.Count == 0))
                {
                    foreach (string colKey in this._colDisplayStatusKeyList)
                    {
                        ColDisplayStatusExp colDisplayStatus = null;

                        try
                        {
                            colDisplayStatus = this._colDisplayStatusInitDictionary[colKey];
                        }
                        catch (KeyNotFoundException)
                        {
                            //
                        }

                        if (colDisplayStatus != null)
                        {
                            this._colDisplayStatusList.Add(colDisplayStatus);
                        }
                    }

                    // 列表示状態クラス格納Dictionaryの値を最新情報にて再生成
                    this._colDisplayStatusDictionary = this.ToColStatusDictionaryFromColStatusList(this._colDisplayStatusList);
                }
                else
                {
                    // 列表示状態クラス格納Dictionaryの値を最新情報にて再生成
                    this._colDisplayStatusDictionary = this.ToColStatusDictionaryFromColStatusList(this._colDisplayStatusList);

                    // 初期列表示状態リストと列表示状態クラス格納Dictionaryの値を比較し、不足分を補充する
                    foreach (string colKey in this._colDisplayStatusKeyList)
                    {
                        if (!this.ContainsKey(colKey))
                        {
                            // 存在しなければ追加
                            ColDisplayStatusExp colDisplayStatus = null;

                            try
                            {
                                colDisplayStatus = this._colDisplayStatusInitDictionary[colKey]; // 初期列表示状態クラス格納Dicより取得
                            }
                            catch (KeyNotFoundException)
                            {
                                //
                            }

                            if (colDisplayStatus != null)
                            {
                                colDisplayStatus.VisiblePosition = this._colDisplayStatusList.Count + 1;
                                this.Add(colDisplayStatus);
                            }
                        }
                        else
                        {
                            // 存在していれば初期列表示状態リストの内容で更新
                            ColDisplayStatusExp colDisplayStatusInit = null;
                            ColDisplayStatusExp colDisplayStatus = null;
                            try
                            {
                                colDisplayStatus = this._colDisplayStatusDictionary[colKey]; // 列表示状態クラス格納Dicより取得
                                colDisplayStatusInit = this._colDisplayStatusInitDictionary[colKey]; // 初期列表示状態クラス格納Dicより取得
                            }
                            catch (KeyNotFoundException)
                            {
                                //
                            }

                            if (colDisplayStatus != null)
                            {
                                colDisplayStatus.OriginX = colDisplayStatusInit.OriginX;
                                colDisplayStatus.OriginY = colDisplayStatusInit.OriginY;
                                colDisplayStatus.SpanX = colDisplayStatusInit.SpanX;
                                colDisplayStatus.SpanY = colDisplayStatusInit.SpanY;
                                colDisplayStatus.Width = colDisplayStatusInit.Width;
                            }

                        }
                    }
                }

                // 表示位置によるソート処理
                this.Sort();
            }
            #endregion

            #region Private Members
            /// <summary>列表示状態クラスリスト</summary>
            private List<ColDisplayStatusExp> _colDisplayStatusList = null;

            /// <summary>列表示状態クラス格納Dictionary</summary>
            private Dictionary<string, ColDisplayStatusExp> _colDisplayStatusDictionary = null;

            /// <summary>初期列表示状態クラス格納Dictionary</summary>
            private Dictionary<string, ColDisplayStatusExp> _colDisplayStatusInitDictionary = null;

            /// <summary>列表示状態キーリスト</summary>
            private List<string> _colDisplayStatusKeyList = null;

            /// <summary>売上明細データテーブル</summary>
            SalesInputDataSet.SalesDetailDataTable _salesDetailDataTable;
            #endregion

            #region Public Methods
            /// <summary>
            /// 列表示状態キー格納判断処理
            /// </summary>
            /// <param name="key">対象列表示状態キー</param>
            /// <returns>列表示状態の有無(true:有,false:無)</returns>
            /// <remarks>
            /// <br>Note       : 列表示状態クラス格納Dictionaryに対象のキーが格納されているかどうかを判断します。</br>
            /// <br>Programmer : 20056 對馬 大輔</br>
            /// <br>Date       : 2007.09.10</br>
            /// </remarks>
            public bool ContainsKey(string key)
            {
                return this._colDisplayStatusDictionary.ContainsKey(key);
            }

            /// <summary>
            /// 並べ替え処理
            /// </summary>
            /// <remarks>
            /// <br>Note       : 列表示状態クラスリストを表示位置より並べ替えます。</br>
            /// <br>Programmer : 20056 對馬 大輔</br>
            /// <br>Date       : 2007.09.10</br>
            /// </remarks>
            public void Sort()
            {
                this._colDisplayStatusList.Sort();
            }

            /// <summary>
            /// 列表示状態クラスリスト取得処理
            /// </summary>
            /// <returns>ColDisplayStatusクラスリストのインスタンス</returns>
            /// <remarks>
            /// <br>Note       : 列表示状態クラスリストを取得します。</br>
            /// <br>Programmer : 20056 對馬 大輔</br>
            /// <br>Date       : 2007.09.10</br>
            /// </remarks>
            public List<ColDisplayStatusExp> GetColDisplayStatusList()
            {
                // 表示位置によるソート処理
                this.Sort();

                return this._colDisplayStatusList;
            }

            /// <summary>
            /// 初期列表示状態クラス格納Dictionary取得処理
            /// </summary>
            /// <returns></returns>
            /// <remarks>
            /// <br>Note       : 初期列表示状態クラス格納Dictionaryを取得します。</br>
            /// <br>Programmer : 20056 對馬 大輔</br>
            /// <br>Date       : 2007.09.10</br>
            /// </remarks>
            public Dictionary<string, ColDisplayStatusExp> GetColDisplayInitDictionary()
            {
                return this._colDisplayStatusInitDictionary;
            }

            /// <summary>
            /// 列表示状態クラスリスト設定処理
            /// </summary>
            /// <param name="colDisplayStatusList">設定するColDisplayStatusクラスリストのインスタンス</param>
            /// <remarks>
            /// <br>Note       : 列表示状態クラスリストを設定します。</br>
            /// <br>Programmer : 20056 對馬 大輔</br>
            /// <br>Date       : 2007.09.10</br>
            /// </remarks>
            public void SetColDisplayStatusList(List<ColDisplayStatusExp> colDisplayStatusList)
            {
                this._colDisplayStatusList = colDisplayStatusList;

                // 表示位置によるソート処理
                this.Sort();
            }

            #endregion

            /// <summary>
            /// 列表示状態クラスリストシリアライズ処理
            /// </summary>
            /// <param name="displayStatusList">シリアライズ対象ColDisplayStatusクラスリストのインスタンス</param>
            /// <param name="fileName">シリアライズ先ファイル名称</param>
            /// <remarks>
            /// <br>Note       : 列表示状態クラスリストをシリアライズします。</br>
            /// <br>Programmer : 20056 對馬 大輔</br>
            /// <br>Date       : 2007.09.10</br>
            /// <br>UpdateNote : 2010/03/01 楊明俊 DOMより、読み込み方法を修正します。</br>
            /// </remarks>
            public static void Serialize(List<ColDisplayStatusExp> colDisplayStatusList, string fileName)
            {
                // --- DEL 2010/03/01 ---------->>>>>
                //ColDisplayStatusExp[] colDisplayStatusArray = new ColDisplayStatusExp[colDisplayStatusList.Count];
                //colDisplayStatusList.CopyTo(colDisplayStatusArray);

                //UserSettingController.ByteSerializeUserSetting(colDisplayStatusArray, Path.Combine(ConstantManagement_ClientDirectory.UISettings_GridInfo, fileName));
                // --- DEL 2010/03/01 ---------->>>>>

                // --- ADD 2010/03/01 ---------->>>>>
                XmlElement root = null;
                XmlDocument xmldoc = new XmlDocument();
                //ファイルがある場合、ファイルの読み
                if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings_GridInfo, fileName)))
                {
                    xmldoc.Load(Path.Combine(ConstantManagement_ClientDirectory.UISettings_GridInfo, fileName));
                    root = xmldoc.DocumentElement;
                    root.RemoveAll();
                }
                //ファイルがない場合、ファイルの作成
                else
                {
                    XmlDeclaration xmlDeclaration = xmldoc.CreateXmlDeclaration("1.0", null, null);
                    XmlNode xmlNode = xmldoc.CreateNode(XmlNodeType.Element, "ArrayOfColDisplayStatusExp", "");
                    xmldoc.AppendChild(xmlNode);
                    xmldoc.InsertBefore(xmlDeclaration, xmlNode);
                    root = xmldoc.DocumentElement;
                }

                root.SetAttribute("xmlns:xsi", @"http://www.w3.org/2001/XMLSchema-instance");
                root.SetAttribute("xmlns:xsd", @"http://www.w3.org/2001/XMLSchema");
                //保存データの編集
                foreach (ColDisplayStatusExp colDisplayStatusExp in colDisplayStatusList)
                {
                    XmlNode elementNode = xmldoc.CreateNode(XmlNodeType.Element, "ColDisplayStatusExp", "");
                    //Key
                    XmlNode keyNode = xmldoc.CreateNode(XmlNodeType.Element, "Key", "");
                    keyNode.InnerXml = colDisplayStatusExp.Key;
                    //VisiblePosition
                    XmlNode visiblePositionNode = xmldoc.CreateNode(XmlNodeType.Element, "VisiblePosition", "");
                    visiblePositionNode.InnerXml = colDisplayStatusExp.VisiblePosition.ToString();
                    //HeaderFixed
                    XmlNode headerFixedNode = xmldoc.CreateNode(XmlNodeType.Element, "HeaderFixed", "");
                    headerFixedNode.InnerXml = colDisplayStatusExp.HeaderFixed.ToString().ToLower();
                    //Width
                    XmlNode widthNode = xmldoc.CreateNode(XmlNodeType.Element, "Width", "");
                    widthNode.InnerXml = colDisplayStatusExp.Width.ToString();
                    //列ヘッダスパン
                    XmlNode labelSpanNode = xmldoc.CreateNode(XmlNodeType.Element, "LabelSpan", "");
                    labelSpanNode.InnerXml = colDisplayStatusExp.LabelSpan.ToString();
                    ///水平座標
                    XmlNode originXNode = xmldoc.CreateNode(XmlNodeType.Element, "OriginX", "");
                    originXNode.InnerXml = colDisplayStatusExp.OriginX.ToString();
                    //垂直座標
                    XmlNode originYNode = xmldoc.CreateNode(XmlNodeType.Element, "OriginY", "");
                    originYNode.InnerXml = colDisplayStatusExp.OriginY.ToString();
                    //左右に跨るセル数
                    XmlNode spanXNode = xmldoc.CreateNode(XmlNodeType.Element, "SpanX", "");
                    spanXNode.InnerXml = colDisplayStatusExp.SpanX.ToString();
                    //上下に跨るセル数
                    XmlNode spanYNode = xmldoc.CreateNode(XmlNodeType.Element, "SpanY", "");
                    spanYNode.InnerXml = colDisplayStatusExp.SpanY.ToString();
                    //行移動項目(Rowに無関係に行間を移動する場合の移動先のKeyName)
                    XmlNode moveLineKeyNameNode = xmldoc.CreateNode(XmlNodeType.Element, "MoveLineKeyName", "");
                    moveLineKeyNameNode.InnerXml = colDisplayStatusExp.MoveLineKeyName;
                    //Enterキー入力時移動項目(Enterキー入力時に移動する基本移動項目)
                    XmlNode moveEnterKeyNameNode = xmldoc.CreateNode(XmlNodeType.Element, "MoveEnterKeyName", "");
                    String moveEnterKeyName = "";
                    if (!String.IsNullOrEmpty(colDisplayStatusExp.MoveEnterKeyName))
                    {
                        moveEnterKeyName = colDisplayStatusExp.MoveEnterKeyName;
                    }
                    moveEnterKeyNameNode.InnerXml = moveEnterKeyName;
                    //有効設定
                    XmlNode enabledNode = xmldoc.CreateNode(XmlNodeType.Element, "Enabled", "");
                    enabledNode.InnerXml = colDisplayStatusExp.Enabled.ToString().ToLower();
                    //表示可否
                    XmlNode enabledControlNode = xmldoc.CreateNode(XmlNodeType.Element, "EnabledControl", "");
                    enabledControlNode.InnerXml = colDisplayStatusExp.EnabledControl.ToString().ToLower();
                    //移動可否
                    XmlNode enterStopControlNode = xmldoc.CreateNode(XmlNodeType.Element, "EnterStopControl", "");
                    enterStopControlNode.InnerXml = colDisplayStatusExp.EnterStopControl.ToString().ToLower();

                    elementNode.AppendChild(keyNode);
                    elementNode.AppendChild(visiblePositionNode);
                    elementNode.AppendChild(headerFixedNode);
                    elementNode.AppendChild(widthNode);
                    elementNode.AppendChild(labelSpanNode);
                    elementNode.AppendChild(originXNode);
                    elementNode.AppendChild(originYNode);
                    elementNode.AppendChild(spanXNode);
                    elementNode.AppendChild(spanYNode);
                    elementNode.AppendChild(moveLineKeyNameNode);
                    elementNode.AppendChild(moveEnterKeyNameNode);
                    elementNode.AppendChild(enabledNode);
                    elementNode.AppendChild(enabledControlNode);
                    elementNode.AppendChild(enterStopControlNode);

                    root.AppendChild(elementNode);
                }

                // 指定ファイルにデータの保存
                xmldoc.Save(Path.Combine(ConstantManagement_ClientDirectory.UISettings_GridInfo, fileName));

                // --- ADD 2010/03/01 ----------<<<<<
            }

            #region Private Methods
            /// <summary>
            /// 列表示状態クラス追加処理
            /// </summary>
            /// <param name="colDisplayStatus">追加するColDisplayStatusクラスのインスタンス</param>
            /// <remarks>
            /// <br>Note       : 列表示状態クラスを列表示状態クラス格納Dictionaryに追加します。</br>
            /// <br>Programmer : 20056 對馬 大輔</br>
            /// <br>Date       : 2007.09.10</br>
            /// </remarks>
            private void Add(ColDisplayStatusExp colDisplayStatus)
            {
                // 既に同一キーが存在する場合は処理しない
                if (this._colDisplayStatusDictionary.ContainsKey(colDisplayStatus.Key))
                {
                    return;
                }

                this._colDisplayStatusList.Add(colDisplayStatus);
                this._colDisplayStatusDictionary.Add(colDisplayStatus.Key, colDisplayStatus);

                // 表示位置によるソート処理
                this.Sort();
            }

            /// <summary>
            /// 列表示状態クラス削除処理
            /// </summary>
            /// <param name="colDisplayStatus">削除するColDisplayStatusクラスのインスタンス</param>
            /// <remarks>
            /// <br>Note       : 列表示状態クラスを列表示状態クラス格納Dictionaryから削除します。</br>
            /// <br>Programmer : 20056 對馬 大輔</br>
            /// <br>Date       : 2007.09.10</br>
            /// </remarks>
            private void Remove(ColDisplayStatusExp colDisplayStatus)
            {
                // 同一キーが存在しない場合は処理しない
                if (!(this._colDisplayStatusDictionary.ContainsKey(colDisplayStatus.Key)))
                {
                    return;
                }

                ColDisplayStatusExp status = null;

                try
                {
                    status = this._colDisplayStatusDictionary[colDisplayStatus.Key];
                }
                catch (KeyNotFoundException)
                {
                    //
                }

                if (status == null)
                {
                    return;
                }

                this._colDisplayStatusList.Remove(status);
                this._colDisplayStatusDictionary.Remove(colDisplayStatus.Key);

                // 表示位置によるソート処理
                this.Sort();
            }

            /// <summary>
            /// 列表示状態クラスリスト⇒Dictionary格納処理
            /// </summary>
            /// <param name="colDisplayStatusList">格納するColDisplayStatusクラスのリストのインスタンス</param>
            /// <returns>列表示状態クラス格納Dictionaryのインスタンス</returns>
            /// <remarks>
            /// <br>Note       : 列表示状態クラスを列表示状態クラス格納Dictionaryから削除します。</br>
            /// <br>Programmer : 20056 對馬 大輔</br>
            /// <br>Date       : 2007.09.10</br>
            /// </remarks>
            private Dictionary<string, ColDisplayStatusExp> ToColStatusDictionaryFromColStatusList(List<ColDisplayStatusExp> colDisplayStatusList)
            {
                Dictionary<string, ColDisplayStatusExp> retDictionary = new Dictionary<string, ColDisplayStatusExp>();

                foreach (ColDisplayStatusExp status in colDisplayStatusList)
                {
                    retDictionary.Add(status.Key, status);
                }

                return retDictionary;
            }
            #endregion
        }

        /// <summary>
        /// 車輌備考ガイドボタンクリックイベント
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        public int SlipNoteGuide(int salesRowNo)
        {
            NoteGuidAcs noteGuidAcs = new NoteGuidAcs();
            noteGuidAcs.IsLocalDBRead = SalesSlipInputInitDataAcs.ctIsLocalDBRead;
            NoteGuidBd noteGuidBd;
            SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip; ;
            int status;

            status = noteGuidAcs.ExecuteGuide(out noteGuidBd, this._enterpriseCode, SalesSlipInputInitDataAcs.ctDIVCODE_CarNoteGuideDivCd);
            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                this._salesSlipInputAcs.SettingCarInfoRowFromCarNoteCode(salesRowNo, noteGuidBd.NoteGuideCode, false); // ADD 2014/05/19 T.Miyamoto 仕掛一覧_№2218
                salesSlip.CarSlipNote = noteGuidBd.NoteGuideName;

                this._salesSlipInputAcs.SettingCarInfoRowFromCarNote(salesRowNo, salesSlip.CarSlipNote);
                this.SetDisplayCarInfo(salesRowNo, CarSearchType.csNone);
            }
            return status;
        }

        /// <summary>
        /// 売上金額変更後発生イベント処理
        /// </summary>
        public void SalesPriceChanged()
        {
            SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;

            if (salesSlip == null) return;

            // 売上金額合計設定
            this._salesSlipInputAcs.TotalPriceSetting(ref salesSlip);

            // 売上データキャッシュ処理
            this._salesSlipInputAcs.Cache(salesSlip);

        }

        /// <summary>
        /// 車両情報設定処理
        /// </summary>
        /// <param name="salesRowNo"></param>
        /// <param name="isGoodsFlg"></param>
        /// <param name="carInfoRowFlg"></param>
        public void CarInfoFormSetting(int salesRowNo, out bool isGoodsFlg, out bool carInfoRowFlg)
        {
            carInfoRowFlg = false;
            isGoodsFlg = false;

            SalesInputDataSet.SalesDetailRow salesDetailRow = this._salesSlipInputAcs.GetSalesDetailRow(salesRowNo);

            SalesInputDataSet.CarInfoRow carInfoRow = this._salesSlipInputAcs.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.CarInfoChangeMode);
            if (this._salesSlipInputAcs.SalesSlip.SalesGoodsCd == (int)SalesSlipInputAcs.SalesGoodsCd.Goods)
            {
                isGoodsFlg = true;
                if (carInfoRow != null)
                {
                    carInfoRowFlg = true;
                }

            }
        }

        /// <summary>
        /// 得意先設定処理
        /// </summary>
        /// <param name="isClear">true:クリアする false:クリアしない</param>
        /// <param name="seldata">得意先検索結果クラス</param>
        private void SettingCustomer(bool isClear, CustomerSearchRet seldata)
        {
            if (isClear)
            {
                // 画面初期化処理
                //bool canClear = this.Clear(true, true, false, false, false, false);  //DEL 2010/06/02
                bool canClear = this.Clear(true, true, false, false, false, false, false, 0);//ADD 2010/06/02

                if (!canClear) return;
            }
            else
            {
                //if (!this.tNedit_CustomerCode.Enabled)
                //{
                //    TMsgDisp.Show(
                //        this,
                //        emErrorLevel.ERR_LEVEL_INFO,
                //        this.Name,
                //        "選択中の" + this._salesSlipInputAcs.GetAcptAnOdrStatusName(this._salesSlipInputAcs.SalesSlip) + "伝票に対して得意先を変更することができません。",
                //        -1,
                //        MessageBoxButtons.OK);

                //    return;
                //}
            }

            // 得意先を自動で設定
            SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip.Clone();

            bool reCalcStockUnitPrice = false;
            bool clearRateInfo = false;
            CustomerInfo customerInfo;
            //this.Cursor = Cursors.WaitCursor;
            DialogResult dialogResult = DialogResult.No;
            int status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, seldata.EnterpriseCode, seldata.CustomerCode, true, false, out customerInfo);

            // 得意先チェック
            if (customerInfo != null)
            {
                if (customerInfo.IsCustomer != true)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }

            //this.Cursor = Cursors.Default;

            if ((status == (int)ConstantManagement.DB_Status.ctDB_NORMAL) &&
                (!this._salesSlipInputAcs.CheckTransStopDate(customerInfo.TransStopDate)))
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "取引停止中により設定できません。",
                    -1,
                    MessageBoxButtons.OK);
                return;
            }
            else if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                bool settingFlg = false;
                if ((this._salesSlipInputAcs.ExistSalesDetail()) &&
                    (salesSlip.CustomerCode != 0) &&
                    (customerInfo.AccRecDivCd != salesSlip.AccRecDivCd))
                {
                    dialogResult = TMsgDisp.Show(
                        this._form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        "売掛得意先と現金得意先間のコード変更です。" + "\r\n" + "\r\n" +
                        this._salesSlipInputAcs.GetAcptAnOdrStatusName(this._salesSlipInputAcs.SalesSlip) + "明細情報がクリアされます。" + "\r\n" + "\r\n" +
                        "よろしいですか？",
                        0,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button1);

                    if (dialogResult == DialogResult.Yes)
                    {
                        settingFlg = true;
                        //this._salesSlipDetailInput.Clear();
                        this._salesSlipInputAcs.ClearCarInfo();
                        //this.ClearDisplayCarInfo();
                    }
                }
                else
                {
                    settingFlg = true;
                }

                if (settingFlg)
                {

                    // 得意先情報設定処理
                    this._salesSlipInputAcs.SettingSalesSlipFromCustomer(ref salesSlip, customerInfo);

                    // 得意先掛率グループ再セット
                    this._salesSlipInputAcs.SettingSalesDetailCustRateGrpCode();

                    // 担当者情報設定処理
                    this._salesSlipInputAcs.SettingSalesSlipFromEmployeeInfo(ref salesSlip, salesSlip.SalesEmployeeCd);

                    // 売上明細データセッティング処理（課税区分設定）
                    this._salesSlipInputAcs.SettingSalesDetailTaxationCode(salesSlip.ConsTaxLayMethod, salesSlip.TotalAmountDispWayCd);

                    if ((salesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) &&
                        (this._salesSlipInputAcs.ExistSalesDetailCanGoodsPriceReSettingData()))
                    {
                        dialogResult = TMsgDisp.Show(
                            this._form,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "todo",
                            "得意先が変更されました。" + "\r\n" + "\r\n" +
                            "商品価格を再取得しますか？",
                            0,
                            MessageBoxButtons.YesNo,
                            MessageBoxDefaultButton.Button1);

                        if (dialogResult == DialogResult.Yes)
                        {
                            reCalcStockUnitPrice = true;
                        }
                        else
                        {
                            clearRateInfo = true;
                        }

                    }
                }

            }
            else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "得意先が存在しません。",
                    -1,
                    MessageBoxButtons.OK);
                return;
            }
            else
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_STOPDISP,
                    "todo",
                    "得意先の取得に失敗しました。",
                    status,
                    MessageBoxButtons.OK);
                return;
            }

            // 売上データクラス→画面格納処理
            this.SetDisplay(salesSlip);

            // 得意先情報画面格納処理
            this.SetDisplayCustomerInfo(customerInfo);

            // 伝票区分コンボエディタアイテム設定処理
            this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, false);

            // 売上データキャッシュ処理
            this._salesSlipInputAcs.Cache(salesSlip);

            // 売上データクラス→画面格納処理
            this.SetDisplay(salesSlip);

            // データ変更フラグプロパティをTrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            if (reCalcStockUnitPrice)
            {
                List<List<GoodsUnitData>> goodsUnitDataListList;
                string msg;
                this._salesSlipInputAcs.SearchPartsFromGoodsNoNonVariousSearchWholeWord(out goodsUnitDataListList, out msg);
                this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(goodsUnitDataListList);
            }

            //---------------------------------------------------------------
            // 掛率情報クリア
            //---------------------------------------------------------------
            if (clearRateInfo)
            {
                // 掛率情報クリア
                this._salesSlipInputAcs.ClearAllRateInfo();
            }

            //this._salesSlipDetailInput.SetToolbarButton -= new MAHNB01010UB.SettingToolbarEventHandler(this.ToolButtonSettingDetail);
            //// 明細グリッドセル設定処理
            //this._salesSlipDetailInput.SettingGrid();
            //this._salesSlipDetailInput.SetToolbarButton += new MAHNB01010UB.SettingToolbarEventHandler(this.ToolButtonSettingDetail);

            // 売上金額計算処理
            this.CalculationSalesPrice();

            // 売上金額変更後発生イベント処理
            this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());
        }

        /// <summary>
        /// 納入先設定処理
        /// </summary>
        /// <param name="isClear">true:クリアする false:クリアしない</param>
        /// <param name="seldata">得意先検索結果クラス</param>
        private void SettingAddressee(bool isClear, CustomerSearchRet seldata)
        {
            if (isClear)
            {
                // 画面初期化処理
                //bool canClear = this.Clear(true, true, false, false, false, false);  //DEL 2010/06/02
                bool canClear = this.Clear(true, true, false, false, false, false, false, 0);//ADD 2010/06/02

                if (!canClear) return;
            }
            else
            {
                //if (!this.tNedit_CustomerCode.Enabled)
                //{
                //    TMsgDisp.Show(
                //        this,
                //        emErrorLevel.ERR_LEVEL_INFO,
                //        "todo",
                //        "選択中の" + this._salesSlipInputAcs.GetAcptAnOdrStatusName(this._salesSlipInputAcs.SalesSlip) + "伝票に対して納入先を変更することができません。",
                //        -1,
                //        MessageBoxButtons.OK);

                //    return;
                //}
            }

            // 得意先を自動で設定
            SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip.Clone();

            CustomerInfo customerInfo;
            //this.Cursor = Cursors.WaitCursor;
            int status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, seldata.EnterpriseCode, seldata.CustomerCode, true, false, out customerInfo);

            // 得意先チェック
            if (customerInfo != null)
            {
                if ((customerInfo.IsCustomer != true) && (customerInfo.IsReceiver != true))
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }

            //this.Cursor = Cursors.Default;

            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {

                // 得意先（仕入先）情報設定処理
                this._salesSlipInputAcs.SettingSalesSlipAddressee(ref salesSlip, customerInfo);

            }
            else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "得意先が存在しません。",
                    -1,
                    MessageBoxButtons.OK);

                return;
            }
            else
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_STOPDISP,
                    "todo",
                    "得意先の取得に失敗しました。",
                    status,
                    MessageBoxButtons.OK);

                return;
            }

            // 売上データクラス→画面格納処理
            this.SetDisplay(salesSlip);

            // 売上データキャッシュ処理
            this._salesSlipInputAcs.Cache(salesSlip);

            // 売上データクラス→画面格納処理
            this.SetDisplay(salesSlip);

            // データ変更フラグプロパティをTrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            //this._salesSlipDetailInput.SetToolbarButton -= new MAHNB01010UB.SettingToolbarEventHandler(this.ToolButtonSettingDetail);
            // 明細グリッドセル設定処理
            //this._salesSlipDetailInput.SettingGrid();
            //this._salesSlipDetailInput.SetToolbarButton += new MAHNB01010UB.SettingToolbarEventHandler(this.ToolButtonSettingDetail);

            // 売上金額計算処理
            this.CalculationSalesPrice();

            // 売上金額変更後発生イベント処理
            this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());
        }

        //public void SetItemsDictionary(string headControlNames, string footControlNames)
        public void SetItemsDictionary(string headControlNames, string footControlNames, string functionControlNames, string functionDetailControlNames)
        {
            this._salesInputConstructionAcs.HeaderItemsDictionary.Clear(); // ADD 2010/07/13
            this._salesInputConstructionAcs.FooterItemsDictionary.Clear(); // ADD 2010/07/13
            this._salesInputConstructionAcs.FunctionItemsDictionary.Clear(); // ADD 2010/07/13
            this._salesInputConstructionAcs.FunctionDetailItemsDictionary.Clear(); // ADD 2010/08/13

            string[] headControlNameArray = headControlNames.Split(',');
            string[] footControlNameArray = footControlNames.Split(',');
            string[] functionControlNameArray = functionControlNames.Split(',');// 2010/07/06
            string[] functionDetailControlNameArray = functionDetailControlNames.Split(',');// 2010/08/13

            foreach (string tempName in headControlNameArray)
            {
                string[] name = tempName.Split('&');
                Control control = new Control();
                control.Name = name[0];

                // ヘッダ項目Dictionary作成
                this._salesInputConstructionAcs.HeaderItemsDictionary.Add(name[1], control);
            }
            foreach (string tempName in footControlNameArray)
            {
                string[] name = tempName.Split('&');
                Control control = new Control();
                control.Name = name[0];

                // ヘッダ項目Dictionary作成
                this._salesInputConstructionAcs.FooterItemsDictionary.Add(name[1], control);
            }

            foreach (string tempName in functionControlNameArray)
            {
                string[] name = tempName.Split('&');
                Control control = new Control();
                control.Name = name[0];

            // ----UPD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
                //if ((name[0] != "ButtonTool_ReferenceList" && name[0] != "ButtonTool_ReplyTransaction" && name[0] != "ButtonTool_RedSlip" && name[0] != "ButtonTool_ReadSlip" && name[0] != "ButtonTool_DeleteSlip" && name[0] != "ButtonTool_Mail")
                //if ((name[0] != "ButtonTool_ReferenceList" && name[0] != "ButtonTool_ReplyTransaction" && name[0] != "ButtonTool_RedSlip" && name[0] != "ButtonTool_ReadSlip" && name[0] != "ButtonTool_DeleteSlip" && name[0] != "ButtonTool_Mail" && name[0] != "ButtonTool_DiscountAllLine") // DEL K2015/04/01 高騁 森川部品個別依頼
                //if ((name[0] != "ButtonTool_ReferenceList" && name[0] != "ButtonTool_ReplyTransaction" && name[0] != "ButtonTool_RedSlip" && name[0] != "ButtonTool_ReadSlip" && name[0] != "ButtonTool_DeleteSlip" && name[0] != "ButtonTool_Mail" && name[0] != "ButtonTool_DiscountAllLine" && name[0] != "ButtonTool_AllSecInfo") // ADD K2015/04/01 高騁 森川部品個別依頼 // DEL K2015/04/29 黄興貴 富士ジーワイ商事㈱ UOE取込対応
                //----- UPD　2018/09/04 譚洪　履歴自動表示の対応------->>>>>
                //if ((name[0] != "ButtonTool_ReferenceList" && name[0] != "ButtonTool_ReplyTransaction" && name[0] != "ButtonTool_RedSlip" && name[0] != "ButtonTool_ReadSlip" && name[0] != "ButtonTool_DeleteSlip" && name[0] != "ButtonTool_Mail" && name[0] != "ButtonTool_DiscountAllLine" && name[0] != "ButtonTool_AllSecInfo" && name[0] != "ButtonTool_UOEDataGet")// ADD K2015/04/29 黄興貴 富士ジーワイ商事㈱ UOE取込対応
                if ((name[0] != "ButtonTool_ReferenceList" && name[0] != "ButtonTool_ReplyTransaction" && name[0] != "ButtonTool_RedSlip" && name[0] != "ButtonTool_ReadSlip" && name[0] != "ButtonTool_DeleteSlip" && name[0] != "ButtonTool_Mail" && name[0] != "ButtonTool_DiscountAllLine" && name[0] != "ButtonTool_AllSecInfo" && name[0] != "ButtonTool_UOEDataGet" && name[0] != "ButtonTool_HisSearch")
                //----- UPD　2018/09/04 譚洪　履歴自動表示の対応-------<<<<<
            // ----UPD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<
                   || ((name[0] == "ButtonTool_ReferenceList" || name[0] == "ButtonTool_ReplyTransaction") && _salesSlipInputInitDataAcs.Opt_SCM == (int)Broadleaf.Application.Controller.SalesSlipInputInitDataAcs.Option.ON)
                   || (name[0] == "ButtonTool_RedSlip" && !MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.RedSlip))
                   || (name[0] == "ButtonTool_ReadSlip" && !MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.Revision))
                    //|| (name[0] == "ButtonTool_DeleteSlip" && !MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.Delete)) // DEL 2010/07/13
                   || (name[0] == "ButtonTool_DeleteSlip" && getDeleteVisible()) // ADD 2010/07/13
                   || (name[0] == "ButtonTool_Mail" && _salesSlipInputInitDataAcs.Opt_QRMail != 0) // ADD 2010/07/16
                   || (name[0] == "ButtonTool_UOEDataGet" && this._salesSlipInputInitDataAcs.Opt_ForFuJi == (int)SalesSlipInputInitDataAcs.Option.ON) // ADD K2015/04/29 黄興貴 富士ジーワイ商事㈱ UOE取込対応
                   || (name[0] == "ButtonTool_UOEDataGet" && this._salesSlipInputInitDataAcs.Opt_ForMeiGo == (int)SalesSlipInputInitDataAcs.Option.ON) // ADD  譚洪 2015/10/26 Redmine#47609
                   || (name[0] == "ButtonTool_DiscountAllLine" && !MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.SlipDiscount))// ADD 2013/01/24 鄧潘ハン REDMINE#34141 // DEL K2015/04/01 高騁 森川部品個別依頼
                   || (name[0] == "ButtonTool_AllSecInfo" && this._salesSlipInputInitDataAcs.Opt_MoriKawa == (int)SalesSlipInputInitDataAcs.Option.ON) // ADD K2015/04/01 高騁 森川部品個別依頼
                    || (name[0] == "ButtonTool_HisSearch")// ADD　2018/09/04 譚洪　履歴自動表示の対応
                   || (name[0] == "ButtonTool_GetTaxRate")// ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応
                    || (name[0] == "ButtonTool_EBooks" && this._salesSlipInputInitDataAcs.Opt_PM_EBooks == (int)SalesSlipInputInitDataAcs.Option.ON)// ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応
                   )
                {
                    // ヘッダ項目Dictionary作成
                    this._salesInputConstructionAcs.FunctionItemsDictionary.Add(name[1], control);
                }
            }

            // ADD 2010/08/13 ---- >>>>
            foreach (string tempName in functionDetailControlNameArray)
            {
                string[] name = tempName.Split('&');
                Control control = new Control();
                control.Name = name[0];

                // ヘッダ項目Dictionary作成
                this._salesInputConstructionAcs.FunctionDetailItemsDictionary.Add(name[1], control);
            }
            // ADD 2010/08/13 ---- <<<<

            SettingFocusDictionary();
        }

        public void setFunctionConstructionListValue()
        {
            List<FunctionConstruction> functionConstructionList = new List<FunctionConstruction>();
            for (int i = 0; i < this._toolManagerCustomizeSetting.ToolMenuCustomizeSettingList[1].ToolButtonCustomizeSettingsList.Count; i++)
            {
                ToolButtonCustomizeSetting toolButtonCustomizeSetting = this._toolManagerCustomizeSetting.ToolMenuCustomizeSettingList[1].ToolButtonCustomizeSettingsList[i];
                string key = toolButtonCustomizeSetting.ButtonKey;
            // ----UPD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
                //if ((key != "ButtonTool_ReferenceList" && key != "ButtonTool_ReplyTransaction" && key != "ButtonTool_RedSlip" && key != "ButtonTool_ReadSlip" && key != "ButtonTool_DeleteSlip" && key != "ButtonTool_Mail")
                //if ((key != "ButtonTool_ReferenceList" && key != "ButtonTool_ReplyTransaction" && key != "ButtonTool_RedSlip" && key != "ButtonTool_ReadSlip" && key != "ButtonTool_DeleteSlip" && key != "ButtonTool_Mail" && key != "ButtonTool_DiscountAllLine") // DEL K2015/04/01 高騁 森川部品個別依頼
                //if ((key != "ButtonTool_ReferenceList" && key != "ButtonTool_ReplyTransaction" && key != "ButtonTool_RedSlip" && key != "ButtonTool_ReadSlip" && key != "ButtonTool_DeleteSlip" && key != "ButtonTool_Mail" && key != "ButtonTool_DiscountAllLine" && key != "ButtonTool_AllSecInfo") // ADD K2015/04/01 高騁 森川部品個別依頼 // DEL K2015/04/29 黄興貴 富士ジーワイ商事㈱ UOE取込対応
                //----- UPD　2018/09/04 譚洪　履歴自動表示の対応------->>>>>
                //if ((key != "ButtonTool_ReferenceList" && key != "ButtonTool_ReplyTransaction" && key != "ButtonTool_RedSlip" && key != "ButtonTool_ReadSlip" && key != "ButtonTool_DeleteSlip" && key != "ButtonTool_Mail" && key != "ButtonTool_DiscountAllLine" && key != "ButtonTool_AllSecInfo" && key != "ButtonTool_UOEDataGet")// ADD K2015/04/29 黄興貴 富士ジーワイ商事㈱ UOE取込対応
                if ((key != "ButtonTool_ReferenceList" && key != "ButtonTool_ReplyTransaction" && key != "ButtonTool_RedSlip" && key != "ButtonTool_ReadSlip" && key != "ButtonTool_DeleteSlip" && key != "ButtonTool_Mail" && key != "ButtonTool_DiscountAllLine" && key != "ButtonTool_AllSecInfo" && key != "ButtonTool_UOEDataGet" && key != "ButtonTool_HisSearch")
                //----- UPD　2018/09/04 譚洪　履歴自動表示の対応-------<<<<<
            // ----UPD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<
                   || ((key == "ButtonTool_ReferenceList" || key == "ButtonTool_ReplyTransaction") && _salesSlipInputInitDataAcs.Opt_SCM == (int)Broadleaf.Application.Controller.SalesSlipInputInitDataAcs.Option.ON)
                   || (key == "ButtonTool_RedSlip" && !MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.RedSlip))
                   || (key == "ButtonTool_ReadSlip" && !MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.Revision))
                    //|| (key == "ButtonTool_DeleteSlip" && !MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.Delete)) // DEL 2010/07/13
                   || (key == "ButtonTool_DeleteSlip" && getDeleteVisible()) // ADD 2010/07/13
                   || (key == "ButtonTool_Mail" && _salesSlipInputInitDataAcs.Opt_QRMail != 0) // ADD 2010/07/16
                  || (key == "ButtonTool_DiscountAllLine" && !MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.SlipDiscount))// ADD 2013/01/24 鄧潘ハン REDMINE#34141
                   || (key == "ButtonTool_AllSecInfo" && this._salesSlipInputInitDataAcs.Opt_MoriKawa == (int)SalesSlipInputInitDataAcs.Option.ON)// ADD K2015/04/01 高騁 森川部品個別依頼
                   || (key == "ButtonTool_UOEDataGet" && this._salesSlipInputInitDataAcs.Opt_ForFuJi == (int)SalesSlipInputInitDataAcs.Option.ON)// ADD K2015/04/29 黄興貴 富士ジーワイ商事㈱ UOE取込対応
                   || (key == "ButtonTool_UOEDataGet" && this._salesSlipInputInitDataAcs.Opt_ForMeiGo == (int)SalesSlipInputInitDataAcs.Option.ON)// ADD 譚洪 2015/10/26 Redmine#47609
                   || (key == "ButtonTool_HisSearch")// ADD　2018/09/04 譚洪　履歴自動表示の対応
                   || (key == "ButtonTool_GetTaxRate")// ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応
                   )
                {
                    if (key == "ButtonTool_ReplyTransaction") continue; // 2011/03/09

                    FunctionConstruction functionConstruction = new FunctionConstruction();
                    functionConstruction.Key = toolButtonCustomizeSetting.ButtonKey;
                    functionConstruction.Caption = _button_captions_dic[toolButtonCustomizeSetting.ButtonKey];

                    if (toolButtonCustomizeSetting.ToolButtonCustomizeInfo.CustomizedVisible == Infragistics.Win.DefaultableBoolean.Default || toolButtonCustomizeSetting.ToolButtonCustomizeInfo.CustomizedVisible == Infragistics.Win.DefaultableBoolean.True)
                    {
                        functionConstruction.Checked = true;
                    }
                    if (toolButtonCustomizeSetting.ToolButtonCustomizeInfo.CustomizedVisible == Infragistics.Win.DefaultableBoolean.False)
                    {
                        functionConstruction.Checked = false;
                    }
                    functionConstructionList.Add(functionConstruction);
                }
            }
            // -- ADD K2015/06/04 m.kawarabayashi Redmine#46406 ----->>>>>
            // Function制御リスト初期表示用のFunctionキーと表示フラグのペアを管理
            // 今後Functionキーが新規追加されたら必ず以下のペアに追加する事
            Dictionary<string, bool> initDispFunctionDic = new Dictionary<string, bool>();
            initDispFunctionDic["ButtonTool_AllSecInfo"] = (this._salesSlipInputInitDataAcs.Opt_MoriKawa == (int)SalesSlipInputInitDataAcs.Option.ON);
            //initDispFunctionDic["ButtonTool_UOEDataGet"] = (this._salesSlipInputInitDataAcs.Opt_ForFuJi == (int)SalesSlipInputInitDataAcs.Option.ON);  // DEL  譚洪 2015/10/26 Redmine#47609
            initDispFunctionDic["ButtonTool_UOEDataGet"] = ((this._salesSlipInputInitDataAcs.Opt_ForFuJi == (int)SalesSlipInputInitDataAcs.Option.ON) || (this._salesSlipInputInitDataAcs.Opt_ForMeiGo == (int)SalesSlipInputInitDataAcs.Option.ON));  // ADD  譚洪 2015/10/26 Redmine#47609
            initDispFunctionDic["ButtonTool_HisSearch"] = true;// ADD　2018/09/04 譚洪　履歴自動表示の対応
            // 既存のXMLファイルに存在しないFunctionキーをFunction制御リストに追加
            // ※既にFunction制御リストが設定済みの状態でFuncitonキーが新規追加される事を考慮
            foreach (KeyValuePair<string, bool> pair in initDispFunctionDic)
            {
                // 当該Functionキーが既に追加されていればスキップ
                if (functionConstructionList.Exists(delegate(FunctionConstruction func) { return func.Key == pair.Key; })) continue;

                // 表示するかどうかのチェック
                if (!pair.Value) continue;

                FunctionConstruction functionConstruction = new FunctionConstruction();
                functionConstruction.Key = pair.Key;
                functionConstruction.Caption = _button_captions_dic[pair.Key];
                functionConstruction.Checked = true;
                functionConstructionList.Add(functionConstruction);
            }
            // -- ADD K2015/06/04 m.kawarabayashi Redmine#46406 -----<<<<<

            this._salesInputConstructionAcs.FunctionConstructionListValue.functionConstruction = functionConstructionList;
        }

        /// <summary>
        /// フォーカス移動Dictionary設定処理
        /// </summary>
        private void SettingFocusDictionary()
        {
            HeaderFocusConstructionList headerFocusConstructionList = this._salesInputConstructionAcs.HeaderFocusConstructionListValue;

            // --- ADD 2009/12/23 ---------->>>>>
            int controlIndexForword = 0;
            int controlIndexBack = 99;
            //this._controlIndexForwordDictionary.Clear();
            //this._controlIndexBackDictionary.Clear();
            // --- ADD 2009/12/23 ----------<<<<<

            if ((headerFocusConstructionList.headerFocusConstruction != null) &&
                (headerFocusConstructionList.headerFocusConstruction.Count != 0))
            {

                Dictionary<string, Control> tempDic = new Dictionary<string, Control>();
                foreach (string key in this._salesInputConstructionAcs.HeaderItemsDictionary.Keys)
                {
                    bool flg = false;
                    foreach (HeaderFocusConstruction headerFocusConstruction in headerFocusConstructionList.headerFocusConstruction)
                    {
                        if (headerFocusConstruction.Caption == key)
                        {
                            flg = true;
                            break;
                        }
                    }
                    if (flg != true) tempDic.Add(key, this._salesInputConstructionAcs.HeaderItemsDictionary[key]);
                }

                if (tempDic.Count != 0)
                {
                    foreach (string key in tempDic.Keys)
                    {
                        HeaderFocusConstruction tempHeaderFocusConstruction = new HeaderFocusConstruction();
                        tempHeaderFocusConstruction.Caption = key;
                        tempHeaderFocusConstruction.EnterStop = true;
                        tempHeaderFocusConstruction.Key = tempDic[key].Name;
                        headerFocusConstructionList.headerFocusConstruction.Add(tempHeaderFocusConstruction);
                    }
                }
                this._salesInputConstructionAcs.HeaderFocusConstructionListValue = headerFocusConstructionList;

                List<HeaderFocusConstruction> tempHeaderFocusConstructionList = new List<HeaderFocusConstruction>();

                foreach (HeaderFocusConstruction headerFocusConstruction in headerFocusConstructionList.headerFocusConstruction)
                {
                    if (this._salesInputConstructionAcs.HeaderItemsDictionary.ContainsKey(headerFocusConstruction.Caption) == true)
                    {
                        Control control = this._salesInputConstructionAcs.HeaderItemsDictionary[headerFocusConstruction.Caption];
                        if (headerFocusConstruction.EnterStop == true)
                        {
                            //this._controlIndexForwordDictionary.Add(control.Name, controlIndexForword++);
                            //this._controlIndexBackDictionary.Add(control.Name, controlIndexBack--);
                        }
                    }
                    else
                    {
                        tempHeaderFocusConstructionList.Add(headerFocusConstruction);
                    }
                }

                List<HeaderFocusConstruction> cloneHeaderFocusConstructionList = new List<HeaderFocusConstruction>();
                cloneHeaderFocusConstructionList.AddRange(headerFocusConstructionList.headerFocusConstruction);
                if (tempHeaderFocusConstructionList.Count != 0)
                {
                    foreach (HeaderFocusConstruction tempHeaderFocusConstruction in tempHeaderFocusConstructionList)
                    {
                        foreach (HeaderFocusConstruction headerFocusConstruction in headerFocusConstructionList.headerFocusConstruction)
                        {
                            if ((tempHeaderFocusConstruction.Key == headerFocusConstruction.Key) &&
                                (tempHeaderFocusConstruction.Caption == headerFocusConstruction.Caption))
                            {
                                cloneHeaderFocusConstructionList.Remove(tempHeaderFocusConstruction);
                                break;
                            }
                        }
                    }
                }
                this._salesInputConstructionAcs.HeaderFocusConstructionListValue.headerFocusConstruction = cloneHeaderFocusConstructionList;

            }

            // --- ADD 2009/12/23 ---------->>>>>
            FooterFocusConstructionList footerFocusConstructionList = this._salesInputConstructionAcs.FooterFocusConstructionListValue;

            if ((footerFocusConstructionList.footerFocusConstruction != null) &&
                (footerFocusConstructionList.footerFocusConstruction.Count != 0))
            {

                Dictionary<string, Control> tempDicFooter = new Dictionary<string, Control>();
                foreach (string key in this._salesInputConstructionAcs.FooterItemsDictionary.Keys)
                {
                    bool flg = false;
                    foreach (FooterFocusConstruction footerFocusConstruction in footerFocusConstructionList.footerFocusConstruction)
                    {
                        if (footerFocusConstruction.Caption == key)
                        {
                            flg = true;
                            break;
                        }
                    }
                    if (flg != true) tempDicFooter.Add(key, this._salesInputConstructionAcs.FooterItemsDictionary[key]);
                }

                if (tempDicFooter.Count != 0)
                {
                    // --- UPD 2014/05/28 T.Miyamoto 仕掛一覧 №2218 ------------------------------>>>>>
                    //foreach (string key in tempDicFooter.Keys)
                    //{
                    //    FooterFocusConstruction tempFooterFocusConstruction = new FooterFocusConstruction();
                    //    tempFooterFocusConstruction.Caption = key;
                    //    tempFooterFocusConstruction.EnterStop = true;
                    //    tempFooterFocusConstruction.Key = tempDicFooter[key].Name;
                    //    footerFocusConstructionList.footerFocusConstruction.Add(tempFooterFocusConstruction);
                    //}
                    foreach (string key in tempDicFooter.Keys)
                    {
                        if (key == "車輌備考コード")
                        {
                            int index = 0;
                            foreach (FooterFocusConstruction footerFocusConstruction in footerFocusConstructionList.footerFocusConstruction)
                            {
                                if (footerFocusConstruction.Caption == "車輌備考")
                                {
                                    FooterFocusConstruction tempFooterFocusConstruction = new FooterFocusConstruction();
                                    tempFooterFocusConstruction.Caption = key;
                                    tempFooterFocusConstruction.EnterStop = footerFocusConstruction.EnterStop; //車輌備考と同じ設定値
                                    tempFooterFocusConstruction.Key = tempDicFooter[key].Name;
                                    footerFocusConstructionList.footerFocusConstruction.Insert(index, tempFooterFocusConstruction); //車輌備考の前に表示
                                    break;
                                }
                                index++;
                            }
                        }
                        else
                        {
                            FooterFocusConstruction tempFooterFocusConstruction = new FooterFocusConstruction();
                            tempFooterFocusConstruction.Caption = key;
                            tempFooterFocusConstruction.EnterStop = true;
                            tempFooterFocusConstruction.Key = tempDicFooter[key].Name;
                            footerFocusConstructionList.footerFocusConstruction.Add(tempFooterFocusConstruction);
                        }
                    }
                    // --- UPD 2014/05/28 T.Miyamoto 仕掛一覧 №2218 ------------------------------<<<<<
                }
                this._salesInputConstructionAcs.FooterFocusConstructionListValue = footerFocusConstructionList;

                List<FooterFocusConstruction> tempFooterFocusConstructionList = new List<FooterFocusConstruction>();

                foreach (FooterFocusConstruction footerFocusConstruction in footerFocusConstructionList.footerFocusConstruction)
                {
                    if (this._salesInputConstructionAcs.FooterItemsDictionary.ContainsKey(footerFocusConstruction.Caption) == true)
                    {
                        Control control = this._salesInputConstructionAcs.FooterItemsDictionary[footerFocusConstruction.Caption];
                        if (footerFocusConstruction.EnterStop == true)
                        {
                            //this._controlIndexForwordDictionary.Add(control.Name, controlIndexForword++);
                            //this._controlIndexBackDictionary.Add(control.Name, controlIndexBack--);
                        }
                    }
                    else
                    {
                        tempFooterFocusConstructionList.Add(footerFocusConstruction);
                    }
                }

                List<FooterFocusConstruction> cloneFooterFocusConstructionList = new List<FooterFocusConstruction>();
                cloneFooterFocusConstructionList.AddRange(footerFocusConstructionList.footerFocusConstruction);
                if (tempFooterFocusConstructionList.Count != 0)
                {
                    foreach (FooterFocusConstruction tempFooterFocusConstruction in tempFooterFocusConstructionList)
                    {
                        foreach (FooterFocusConstruction footerFocusConstruction in footerFocusConstructionList.footerFocusConstruction)
                        {
                            if ((tempFooterFocusConstruction.Key == footerFocusConstruction.Key) &&
                                (tempFooterFocusConstruction.Caption == footerFocusConstruction.Caption))
                            {
                                cloneFooterFocusConstructionList.Remove(tempFooterFocusConstruction);
                                break;
                            }
                        }
                    }
                }
                this._salesInputConstructionAcs.FooterFocusConstructionListValue.footerFocusConstruction = cloneFooterFocusConstructionList;

            }
            // --- ADD 2009/12/23 ----------<<<<<


            // --- ADD 2010/08/13 ---------->>>>>
            FunctionDetailConstructionList functionDetailConstructionList = this._salesInputConstructionAcs.FunctionDetailConstructionListValue;

            if ((functionDetailConstructionList.functionDetailConstruction != null) &&
                (functionDetailConstructionList.functionDetailConstruction.Count != 0))
            {

                Dictionary<string, Control> tempDicFunctionDetail = new Dictionary<string, Control>();
                foreach (string key in this._salesInputConstructionAcs.FunctionDetailItemsDictionary.Keys)
                {
                    bool flg = false;
                    foreach (FunctionDetailConstruction functionDetailConstruction in functionDetailConstructionList.functionDetailConstruction)
                    {
                        if (functionDetailConstruction.Caption == key)
                        {
                            flg = true;
                            break;
                        }
                    }
                    if (flg != true) tempDicFunctionDetail.Add(key, this._salesInputConstructionAcs.FunctionDetailItemsDictionary[key]);
                }

                if (tempDicFunctionDetail.Count != 0)
                {
                    foreach (string key in tempDicFunctionDetail.Keys)
                    {
                        FunctionDetailConstruction tempFunctionDetailConstruction = new FunctionDetailConstruction();
                        tempFunctionDetailConstruction.Caption = key;
                        tempFunctionDetailConstruction.Checked = true;
                        tempFunctionDetailConstruction.Key = tempDicFunctionDetail[key].Name;
                        functionDetailConstructionList.functionDetailConstruction.Add(tempFunctionDetailConstruction);
                    }
                }
                this._salesInputConstructionAcs.FooterFocusConstructionListValue = footerFocusConstructionList;

                List<FunctionDetailConstruction> tempFunctionDetailConstructionList = new List<FunctionDetailConstruction>();

                foreach (FunctionDetailConstruction functionDetailConstruction in functionDetailConstructionList.functionDetailConstruction)
                {
                    if (this._salesInputConstructionAcs.FunctionDetailItemsDictionary.ContainsKey(functionDetailConstruction.Caption) == true)
                    {
                        Control control = this._salesInputConstructionAcs.FunctionDetailItemsDictionary[functionDetailConstruction.Caption];
                    }
                    else
                    {
                        tempFunctionDetailConstructionList.Add(functionDetailConstruction);
                    }
                }

                List<FunctionDetailConstruction> cloneFunctionDetailConstructionList = new List<FunctionDetailConstruction>();
                cloneFunctionDetailConstructionList.AddRange(functionDetailConstructionList.functionDetailConstruction);
                if (tempFunctionDetailConstructionList.Count != 0)
                {
                    foreach (FunctionDetailConstruction tempFunctionDetailConstruction in tempFunctionDetailConstructionList)
                    {
                        foreach (FunctionDetailConstruction functionDetailConstruction in functionDetailConstructionList.functionDetailConstruction)
                        {
                            if ((tempFunctionDetailConstruction.Key == functionDetailConstruction.Key) &&
                                (tempFunctionDetailConstruction.Caption == functionDetailConstruction.Caption))
                            {
                                cloneFunctionDetailConstructionList.Remove(tempFunctionDetailConstruction);
                                break;
                            }
                        }
                    }
                }
                this._salesInputConstructionAcs.FunctionDetailConstructionListValue.functionDetailConstruction = cloneFunctionDetailConstructionList;

            }
            // --- ADD 2010/08/13 ----------<<<<<

        }

        /// <summary>
        /// Enterキー移動項目テーブルセット処理
        /// </summary>
        private void SetEnterMoveTable()
        {

            ICollection keys = this._enterMoveTable.Keys;
            EnterMoveValue enterMoveValue = null;
            foreach (object key in keys)
            {
                if (!this._salesInputConstructionAcs.EnterMoveTable.ContainsKey(key.ToString()))
                {
                    enterMoveValue = new EnterMoveValue();
                    enterMoveValue.Key = this._enterMoveTable[key.ToString()].Key;
                    enterMoveValue.Enabled = this._enterMoveTable[key.ToString()].Enabled;
                    this._salesInputConstructionAcs.EnterMoveTable[key.ToString()] = enterMoveValue;
                }
            }

            this._enterMoveTable = this._salesInputConstructionAcs.EnterMoveTable;

        }

        /// <summary>
        /// 明細部開始項目セット処理
        /// </summary>
        private void SetStartKeyNameList()
        {
            this._startKeyName = this._enterMoveTable[SalesSlipInputConstructionAcs.ct_StartPosittion].Key;
        }

        /// <summary>
        /// 明細部最終項目セット処理
        /// </summary>
        private void SetEndKeyNameList()
        {
            this._endKeyNameList[0] = this._enterMoveTable[SalesSlipInputConstructionAcs.ct_EndPosittion].Key;
        }

        /// <summary>
        /// ユーザー設定値変更後発生イベント
        /// </summary>
        /// <remarks>
        /// <br>Update Note: 2021/09/10 呉元嘯</br>
        /// <br>管理番号   : 11770032-00</br>
        /// <br>           : PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応</br> 
        /// </remarks>
        private void SalesInputConstructionAcs_DataChanged()
        {
            this.SetEnterMoveTable();
            this.SetStartKeyNameList();
            this.SetEndKeyNameList();
            this.SettingFocusDictionary();
            // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応--->>>>>
            // 原価チェックファイル取得
            GetSaveUnitCostCheckXmlInfo();
            // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応---<<<<<

            // 明細グリッド設定処理
            //this._salesSlipDetailInput.SettingGrid();

            // 売上データクラス→画面格納処理
            this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

        }

        //---ADD 2010/07/07---------->>>>>
        /// <summary>
        /// 操作権限の制御を開始します。
        /// </summary>
        // ----UPD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
        //public void BeginControllingByOperationAuthority(out bool RevisionVisible, out bool DeleteVisible, out bool RedSlipVisible)
        public void BeginControllingByOperationAuthority(out bool RevisionVisible, out bool DeleteVisible, out bool RedSlipVisible, out bool SlipDiscountVisible)//ADD 2013/01/24 鄧潘ハン REDMINE#34141
        // ----UPD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<
        {
            RevisionVisible = true;
            DeleteVisible = true;
            RedSlipVisible = true;
            SlipDiscountVisible = true;//ADD 2013/01/24 鄧潘ハン REDMINE#34141
            // 伝票修正ボタン
            if (MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.Revision))
            {
                RevisionVisible = false;
            }

            // 伝票削除ボタン
            //---UPD 2010/07/13---------->>>>>
            //if (MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.Delete))
            //{
            //    DeleteVisible = false;
            //}
            DeleteVisible = getDeleteVisible();
            //---UPD 2010/07/13----------<<<<<

            // 赤伝ボタン
            if (MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.RedSlip))
            {
                RedSlipVisible = false;
            }

            // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
            // 伝票値引
            if (MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.SlipDiscount))
            {
                SlipDiscountVisible = false;
            }
            // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<

            //---ADD 2010/07/13---------->>>>>
            if (getDeleteVisible())
            {
                List<FunctionConstruction> functionConstructionList = this._salesInputConstructionAcs.FunctionConstructionListValue.functionConstruction;
                List<FunctionConstruction> functionConstructionListAfter = new List<FunctionConstruction>();
                bool contaisDeleteButton = false;
                foreach (FunctionConstruction var in functionConstructionList)
                {
                    if (var.Key == "ButtonTool_DeleteSlip")
                    {
                        contaisDeleteButton = true;
                    }
                }
                foreach (FunctionConstruction var in functionConstructionList)
                {
                    functionConstructionListAfter.Add(var);
                    if (!contaisDeleteButton && var.Key == "ButtonTool_Save")
                    {
                        FunctionConstruction functionConstruction = new FunctionConstruction();
                        functionConstruction.Key = "ButtonTool_DeleteSlip";
                        functionConstruction.Caption = _button_captions_dic[functionConstruction.Key];
                        functionConstruction.Checked = true;
                        functionConstructionListAfter.Add(functionConstruction);
                    }
                    this._salesInputConstructionAcs.FunctionConstructionListValue.functionConstruction = functionConstructionListAfter;
                }
            }
            //---ADD 2010/07/13----------<<<<<
        }

        //---ADD 2010/07/07----------<<<<<

        //---ADD 2010/07/13---------->>>>>
        /// <summary>
        /// getDeleteVisible
        /// </summary>
        /// <returns></returns>
        private bool getDeleteVisible()
        {
            if (((MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.Delete)) && (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales))
                || (
                    (MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.OtherTypeDelete))
                        && (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder
                        || this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment
                        || this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate
                        || this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate
                        || this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.SearchEstimate
                        )
                    )
                )
            {
                return false;
            }
            return true;
        }
        //---ADD 2010/07/13----------<<<<<

        // --- ADD 2014/07/15 T.Miyamoto 仕掛一覧 №1912 ---------->>>>>
        /// <summary>
        /// 操作権限を判定します。
        /// </summary>
        /// <param name="iOperationCode"></param>
        /// <br>指定したオペレーションコードのシステムロール設定を取得する</br>
        public bool GetOperationSt(int iOperationCode)
        {
            return MyOpeCtrl.Disabled(iOperationCode);
        }
        // --- ADD 2014/07/15 T.Miyamoto 仕掛一覧 №1912 ----------<<<<<

        //---ADD 2010/07/12---------->>>>>
        /// <summary>
        /// 見出貼付（得意先）
        /// </summary>
        /// <param name="_enterpriseCode"></param>
        /// <param name="customerCode"></param>
        /// <remarks>※得意先コード変更時の処理をコピーして一部変更</remarks>
        /// <br>Update Note: 2009/09/08② 張凱 車輌管理機能対応</br>
        /// <br>Update Note: 2012/04/09 yangmj Redmine#29313 売上伝票入力 商品価格の再取得で販売区分が初期値に戻る</br>
        private void CopySlipHeaderCustomer(ref SalesSlip salesSlip, SalesSlipHeaderCopyData salesSlipHeaderCopyData)
        {
            bool reCalcStockUnitPrice = false;
            bool clearRateInfo = false;
            CustomerInfo customerInfo;
            DialogResult dialogResult = DialogResult.No;
            int status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, _enterpriseCode, salesSlipHeaderCopyData.CustomerCode, true, false, out customerInfo);

            // 得意先チェック
            if (customerInfo != null)
            {
                if (customerInfo.IsCustomer != true)
                {
                    status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
            }

            if ((status == (int)ConstantManagement.DB_Status.ctDB_NORMAL) &&
                (!this._salesSlipInputAcs.CheckTransStopDate(customerInfo.TransStopDate)))
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "取引停止中により設定できません。",
                    -1,
                    MessageBoxButtons.OK);
                return;
            }
            else if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                bool settingFlg = false;
                if ((this._salesSlipInputAcs.ExistSalesDetail()) &&
                    (salesSlip.CustomerCode != 0) &&
                    (customerInfo.AccRecDivCd != salesSlip.AccRecDivCd))
                {
                    dialogResult = TMsgDisp.Show(
                        this._form,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "todo",
                        "売掛得意先と現金得意先間のコード変更です。" + "\r\n" + "\r\n" +
                        this._salesSlipInputAcs.GetAcptAnOdrStatusName(this._salesSlipInputAcs.SalesSlip) + "明細情報がクリアされます。" + "\r\n" + "\r\n" +
                        "よろしいですか？",
                        0,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button1);

                    if (dialogResult == DialogResult.Yes)
                    {
                        settingFlg = true;
                        this._salesSlipInputAcs.ClearCarInfo();
                    }
                }
                else
                {
                    settingFlg = true;
                }

                if (settingFlg)
                {
                    // 現金売り得意先(AccRecDivCd = 0:売掛なし)の場合は、見出貼付情報から略称をセットする。
                    if (customerInfo.AccRecDivCd == 0 && !string.IsNullOrEmpty(salesSlipHeaderCopyData.CustomerSnm))
                    {
                        customerInfo.CustomerSnm = salesSlipHeaderCopyData.CustomerSnm.Trim();
                    }
                    if (customerInfo.CustomerSnm.Length > 20) customerInfo.CustomerSnm = customerInfo.CustomerSnm.Substring(0, 20);

                    // 得意先情報設定処理
                    this._salesSlipInputAcs.SettingSalesSlipFromCustomer(ref salesSlip, customerInfo);

                    // 得意先掛率グループ再セット
                    this._salesSlipInputAcs.SettingSalesDetailCustRateGrpCode();

                    // 計上日の再セット
                    this._salesSlipInputAcs.SettingSalesSlipAddUpDate(ref salesSlip); // 計上日再設定

                    // 担当者情報設定処理
                    this._salesSlipInputAcs.SettingSalesSlipFromEmployeeInfo(ref salesSlip, salesSlip.SalesEmployeeCd);

                    // 納入先情報設定処理
                    this._salesSlipInputAcs.SettingSalesSlipAddressee(ref salesSlip, customerInfo);


                    // 売上明細データセッティング処理（課税区分設定）
                    this._salesSlipInputAcs.SettingSalesDetailTaxationCode(salesSlip.ConsTaxLayMethod, salesSlip.TotalAmountDispWayCd);

                    if ((salesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) &&
                        (this._salesSlipInputAcs.ExistSalesDetailCanGoodsPriceReSettingData()))
                    {
                        dialogResult = TMsgDisp.Show(
                            this._form,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "todo",
                            "得意先が変更されました。" + "\r\n" + "\r\n" +
                            "商品価格を再取得しますか？",
                            0,
                            MessageBoxButtons.YesNo,
                            MessageBoxDefaultButton.Button1);

                        if (dialogResult == DialogResult.Yes)
                        {
                            reCalcStockUnitPrice = true;
                            this._salesSlipInputAcs.SalesCodeChgFlag = true;// ADD 2012/04/09 yangmj redmine#29313
                        }
                        else
                        {
                            clearRateInfo = true;
                        }

                    }
                }

            }
            else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "得意先が存在しません。",
                    -1,
                    MessageBoxButtons.OK);
                return;
            }
            else
            {
                TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_STOPDISP,
                    "todo",
                    "得意先の取得に失敗しました。",
                    status,
                    MessageBoxButtons.OK);
                return;
            }

            // 売上データクラス→画面格納処理
            this.SetDisplay(salesSlip);

            // 得意先情報画面格納処理
            this.SetDisplayCustomerInfo(customerInfo);

            // 伝票区分コンボエディタアイテム設定処理
            this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, false);

            // 売上データキャッシュ処理
            this._salesSlipInputAcs.Cache(salesSlip);

            // 売上データクラス→画面格納処理
            this.SetDisplay(salesSlip);

            //// Visible設定
            //this.SettingVisible();

            // データ変更フラグプロパティをTrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            if (reCalcStockUnitPrice)
            {
                List<List<GoodsUnitData>> goodsUnitDataListList;
                string msg;
                this._salesSlipInputAcs.SearchPartsFromGoodsNoNonVariousSearchWholeWord(out goodsUnitDataListList, out msg);
                this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(goodsUnitDataListList);
            }

            //---------------------------------------------------------------
            // 掛率情報クリア
            //---------------------------------------------------------------
            if (clearRateInfo)
            {
                // 掛率情報クリア
                this._salesSlipInputAcs.ClearAllRateInfo();
            }

            //this._salesSlipDetailInput.SetToolbarButton -= new MAHNB01010UB.SettingToolbarEventHandler(this.ToolButtonSettingDetail);
            //// 明細グリッドセル設定処理
            //this._salesSlipDetailInput.SettingGrid();
            //this._salesSlipDetailInput.SetToolbarButton += new MAHNB01010UB.SettingToolbarEventHandler(this.ToolButtonSettingDetail);

            //// 売上金額計算処理
            //this._salesSlipDetailInput.CalculationSalesPrice();

            // 売上金額変更後発生イベント処理
            this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());

            //追加情報タブ項目Visible設定
            SettingAddInfoVisible();
        }
        //---ADD 2010/07/12----------<<<<<

        //---ADD 2010/07/13---------->>>>>
        //MAHNB01012AC.CSから遷移したメソッド
        /// <summary>
        /// 売上伝票番号のフォーカス処理
        /// </summary>
        /// <param name="sectionCode">売上伝票番号</param>
        /// <param name="salesSlip">売上情報</param>
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        /// <br>Update Note: 2011/12/19 tianjw</br>
        /// <br>              Redmine#27390 拠点管理/売上日のチェック</br>
        /// <br>Update Note: 2020/02/24 譚洪</br>
        /// <br>管理番号   : 11570208-00</br>
        /// <br>           : PMKOBETSU-2912消費税税率機能追加対応</br>
        /// <br>Update Note: 2021/04/12 陳艶丹</br>
        /// <br>管理番号   : 11770021-00</br>
        /// <br>           : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
        // --- UPD 2010/07/01 --------->>>>>
        //public void AfterSalesSlipNumFocus(ref SalesSlip salesSlip, ref SalesSlip salesSlipCurrent, string code, string enterpriseCode, out bool equelFlag,
        //        out int readDBDatStatus, ref bool reCalcSalesPrice, out bool deleteEmptyRow)
        public void AfterSalesSlipNumFocus(ref SalesSlip salesSlip, ref SalesSlip salesSlipCurrent, string code, string enterpriseCode, out bool equelFlag,
                out int readDBDatStatus, ref bool reCalcSalesPrice, out bool deleteEmptyRow, out bool findDataFlg)
        // --- UPD 2010/07/01 ----------<<<<<
        {
            readDBDatStatus = -2;
            equelFlag = true;
            deleteEmptyRow = false;
            bool read = false;
            findDataFlg = true;  // ADD 2010/07/01
            code = code.PadLeft(9, '0');

            //if (salesSlipCurrent.SalesSlipNum.PadLeft(9, '0') != code)//DEL 2011/07/19
            //if (salesSlipCurrent.SalesSlipNum.PadLeft(9, '0') != code && !this._salesSlipInputAcs.CmtFlg)//ADD 2011/07/19//DEL 2011/08/03
            if (salesSlipCurrent.SalesSlipNum.PadLeft(9, '0') != code)//ADD 2011/08/03
            {
                equelFlag = false;

                DialogResult dialogResult = DialogResult.Yes;

                if (this._salesSlipInputAcs.IsDataChanged)
                {
                    dialogResult = TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        "入力中の" + this._salesSlipInputAcs.GetAcptAnOdrStatusName(this._salesSlipInputAcs.SalesSlip) + "情報がクリアされます。" + "\r\n" + "\r\n" +
                        "よろしいですか？",
                        0,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button1);
                }

                if (dialogResult == DialogResult.Yes)
                {
                    SalesSlip baseSalesSlip;

                    // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
                    //得意先情報ガイドを閉じる
                    if (showEnable() || showCustomerGuid())
                    {
                        noteInfoClose();
                    }
                    // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<

                    // データリード処理
                    //this.Cursor = Cursors.WaitCursor;
                    int status = this._salesSlipInputAcs.ReadDBData(enterpriseCode, this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus, code, out baseSalesSlip);

                    //this.Cursor = Cursors.Default;

                    if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                    {
                        // ----- ADD K2011/08/12 --------------------------->>>>>
                        // ----- ADD K2011/12/09 --------------------------->>>>>
                        // --- UPD T.Miyamoto 2012/11/13 ---------->>>>>
                        //if (this._enterpriseCode == login_EnterpriseCode)
                        if ((this._salesSlipInputInitDataAcs.Opt_DateCtrl == (int)SalesSlipInputInitDataAcs.Option.ON) ||
                            (this._enterpriseCode == login_EnterpriseCode))
                        // --- UPD T.Miyamoto 2012/11/13 ----------<<<<<
                        {
                            // ----- ADD K2011/12/09 ---------------------------<<<<<
                            if (this._salesSlipInputAcs.SalesSlipCanEditDivCd == false)
                            {
                                findDataFlg = false;
                                return;
                            }
                        }// ADD K2011/12/09
                        // ----- ADD K2011/08/12 ---------------------------<<<<< 
                        int acptAnOdrStatus = this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay;

                        foreach (SalesSlipInputAcs.AcptAnOdrStatusState state in this._salesSlipInputAcs.StateList)
                        {
                            if ((int)state == acptAnOdrStatus) continue;

                            // データが存在しない場合は売上形式を変更して再度読み込み
                            //this.Cursor = Cursors.WaitCursor;
                            status = this._salesSlipInputAcs.ReadDBData(this._enterpriseCode, (int)state, code, out baseSalesSlip);
                            //this.Cursor = Cursors.Default;

                            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL) break;
                        }
                    }

                    readDBDatStatus = status;

                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {

                        // 前回情報再セット
                        //carInfoRowCurrent = this._salesSlipInputAcs.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
                        //inputSalesSlipNum = true;

                        // 売上伝票番号を再設定
                        //this.tNedit_SalesSlipNum.SetInt(TStrConv.StrToIntDef(code, 0));

                        // 売上or出荷の場合、受注データ再読込
                        if ((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                            (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment))
                        {
                            SalesSlip saveSalesSlip = baseSalesSlip;
                            //this.Cursor = Cursors.WaitCursor;

                            status = this._salesSlipInputAcs.ReadDBData(enterpriseCode, (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder, this._salesSlipInputAcs.SalesSlip.SalesSlipNum, out baseSalesSlip);
                            //this.Cursor = Cursors.Default;

                            if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                            {
                                //>>>2010/06/07
                                //string statusName = (salesSlipCurrent.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ? "売上伝票" : "貸出伝票";
                                string statusName = (saveSalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ? "売上伝票" : "貸出伝票";
                                //<<<2010/06/07

                                dialogResult = TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    "",
                                    "同伝票番号で" + statusName + "と受注伝票が存在します。　" + Environment.NewLine + Environment.NewLine +
                                    statusName + "を表示してよろしいですか？" + Environment.NewLine + Environment.NewLine +
                                    "はい：" + statusName + Environment.NewLine +
                                    "いいえ：受注伝票" + Environment.NewLine,
                                    -1,
                                    MessageBoxButtons.YesNo);
                                if (dialogResult == DialogResult.Yes)
                                {
                                    //this.Cursor = Cursors.WaitCursor;
                                    //status = this.ReadDBData(enterpriseCode, salesSlipCurrent.AcptAnOdrStatus, code, out baseSalesSlip);
                                    //>>>2010/06/07
                                    //status = this.ReadDBData(this._enterpriseCode, salesSlipCurrent.AcptAnOdrStatus, code, out baseSalesSlip);
                                    status = this._salesSlipInputAcs.ReadDBData(this._enterpriseCode, saveSalesSlip.AcptAnOdrStatus, code, out baseSalesSlip);
                                    //<<<2010/06/07

                                    //this.Cursor = Cursors.Default;
                                }
                            }
                            else
                            {
                                baseSalesSlip = saveSalesSlip;
                            }
                        }
                        /*----- DEL 2014/08/28 陳艶丹 Redmine#43336 ----->>>>>
                        // --- ADD 2011/11/12---------->>>>>
                        // BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑの在庫確認で作成された見積伝票を修正呼出しした場合
                        if (this.isStockSales(this._salesSlipInputAcs.SalesSlip))
                        {
                            // 入力モード設定処理
                            // 参照モードで画面に表示する
                            //this._salesSlipInputAcs.SalesSlip.InputMode = SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Red;//DEL 2011/11/17
                            this._salesSlipInputAcs.SalesSlip.InputMode = SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ReadOnly;//ADD 2011/11/17
                        }
                        // --- ADD 2011/11/12----------<<<<<
                        //----- DEL 2014/08/28 陳艶丹 Redmine#43336 ----->>>>>*/
                        // --- ADD K2013/09/11 Y.Wakita ---------->>>>>
                        #region フタバ個別対応
                        if (this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaOutSlipCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
                        {
                            if (this.isFtSalesMoveOut(this._salesSlipInputAcs.SalesSlip))
                            {
                                // 入力モード設定処理
                                // 参照モードで画面に表示する
                                this._salesSlipInputAcs.SalesSlip.InputMode = SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ReadOnly;
                            }
                        }
                        #endregion
                        // --- ADD K2013/09/11 Y.Wakita ----------<<<<<

                        salesSlipCurrent = this._salesSlipInputAcs.SalesSlip;
                        salesSlip = salesSlipCurrent.Clone();

                        // --- ADD 2010/11/25 ---------->>>>>
                        int cusStatus = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                        CustomerInfo customerInfo = null;

                        cusStatus = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, LoginInfoAcquisition.EnterpriseCode, salesSlip.CustomerCode, true, false, out customerInfo);

                        if (cusStatus == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            // 得意先情報を再読込し、以下の項目を再セットする。
                            salesSlip.BusinessTypeCode = customerInfo.BusinessTypeCode; // 業種コード
                            salesSlip.BusinessTypeName = customerInfo.BusinessTypeName; // 業種名称
                            salesSlip.SalesAreaCode = customerInfo.SalesAreaCode; // 販売エリアコード
                            salesSlip.SalesAreaName = customerInfo.SalesAreaName; // 販売エリア名称
                        }

                        // --- ADD 2010/11/25 ----------<<<<<


                        //// 2010/06/08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                        //carInfoRowCurrent = this.GetCarInfoRow(salesRowNo, SalesSlipInputAcs.GetCarInfoMode.ExistGetMode);
                        //// 2010/06/08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                        // 売上データ入力モード設定処理
                        //this.SettingStockSlipInputMode(ref salesSlip);

                        // 表示用受注ステータスのS設定
                        SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

                        // 表示用伝票区分の設定
                        SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

                        // 伝票区分コンボエディタアイテム設定処理
                        //this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, false);

                        // フッタタブ位置セット
                        //uTabControl_Footer.SelectedTab = uTabControl_Footer.Tabs[0];

                        if (baseSalesSlip.ConsTaxLayMethod != this._salesSlipInputAcs.SalesSlip.ConsTaxLayMethod)
                        {
                            reCalcSalesPrice = true;
                        }
                        read = true;

                        //伝票備考、伝票備考２、伝票備考３の入力桁数を制御する
                        this._salesSlipInputAcs.GetNoteCharCnt();
                        //SetNoteCharCnt();

                        // --- ADD 2010/05/04 ---------->>>>>
                        this._salesSlipInputAcs.ReadSlipFlg = true;
                        // --- ADD 2010/05/04 ----------<<<<<

                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                        if (salesSlip.ConsTaxLayMethod == 0)
                        {
                            // 0:伝票転嫁
                            this._salesSlipInputInitDataAcs.ConsTaxLayMethod = 0;
                            // 既存伝票呼出すの場合、元伝票の税率を利用する。
                            this._salesSlipInputInitDataAcs.TaxRateDiv = 2;
                            // 税率マスタの税率を取得する。
                            this._salesSlipInputInitDataAcs.GetTaxRateMst(salesSlip.SalesDate);
                            this._salesSlipInputInitDataAcs.TaxRate = salesSlip.ConsTaxRate;
                            if (salesSlip.ConsTaxRate != this._salesSlipInputInitDataAcs.TaxRateMst)
                            {
                                this._salesSlipInputInitDataAcs.SlipSrcTaxFlg = true;
                            }
                            else
                            {
                                this._salesSlipInputInitDataAcs.SlipSrcTaxFlg = false;
                            }
                            if ((this._salesSlipInputInitDataAcs.TaxRateInput != salesSlip.ConsTaxRate && this._salesSlipInputInitDataAcs.TaxRateInput != 0.0) ||
                               (this._salesSlipInputInitDataAcs.TaxRateInput == 0.0 && this._salesSlipInputInitDataAcs.TaxRateMst != salesSlip.ConsTaxRate))
                            {
                                TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    "",
                                    string.Format("修正元伝票に税率({0}%)が設定されています。" + "\r\n" + "税率({0}%)で設定します。", (salesSlip.ConsTaxRate * 100)),
                                    status,
                                    MessageBoxButtons.OK);
                                this._salesSlipInputInitDataAcs.TaxRateInput = salesSlip.ConsTaxRate;
                            }
                        }
                        else
                        {
                            this._salesSlipInputInitDataAcs.ConsTaxLayMethod = salesSlip.ConsTaxLayMethod;
                            // 伝票転嫁以外の場合、税率マスタの税率を利用する。
                            this._salesSlipInputInitDataAcs.TaxRateDiv = 0;
                        }
                        // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<
                    }
                    else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "該当するデータが存在しません。",
                            -1,
                            MessageBoxButtons.OK);
                        findDataFlg = false;  // ADD 2010/07/01
                    }
                    else
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_STOPDISP,
                            "",
                            "売上・出荷データの取得に失敗しました。",
                            status,
                            MessageBoxButtons.OK);
                    }
                }

                salesSlip.PreSalesDate = salesSlip.SalesDate; // ADD 2011/12/19

                // 売上データキャッシュ処理
                this._salesSlipInputAcs.Cache(salesSlip);

                // 計上時は空白行を削除する(出荷計上 受注計上 見積計上)
                if ((salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp) ||
                    (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) ||
                    (salesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp))
                {
                    //this._salesSlipDetailInput.DeleteEmptyRow(true);
                    deleteEmptyRow = true;
                }

                // 売上データクラス→画面格納処理
                this.SetDisplay(salesSlip);

                salesSlipCurrent = salesSlip.Clone();

                // 明細グリッド設定処理
                //this._salesSlipDetailInput.SettingGrid();

                // 明細行数制限
                // -------UPD 2010/06/02-------->>>>>
                //this.SettingSalesDetailRowInputRowCount(salesSlip.DetailRowCountForReadSlip);
                if (readDBDatStatus == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    this._salesSlipInputAcs.SettingSalesDetailRowInputRowCount(salesSlip.DetailRowCountForReadSlip);
                }
                // -------UPD 2010/06/02--------<<<<<

                //this.SettingVisible();

                //>>>2010/09/27
                //if (read)
                //{
                //    if (salesSlip.DepositAllowanceTtl != 0)
                //    {
                //        TMsgDisp.Show(
                //        new Form(),
                //        emErrorLevel.ERR_LEVEL_INFO,
                //        "",
                //        "入金済み伝票です。" + "\r\n" + "\r\n" +
                //        "削除する場合は、入金伝票入力より　" + "\r\n" +
                //        "対象の入金伝票を赤伝処理後、　" + "\r\n" +
                //        "削除することができます。　",
                //        -1,
                //        MessageBoxButtons.OK);
                //    }
                //}
                //<<<2010/09/27

                //追加情報タブ項目Visible設定
                //SettingAddInfoVisible();
            }

        }
        //---ADD 2010/07/13----------<<<<<

        # endregion ---- gaofeng

        # region lizc
        /// <summary>
        /// 最新情報処理
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="loginSectionCode"></param>
        /// <br>Update Note: 2010/06/02 譚洪 PM.NS障害・改良対応（７月リリース案件）</br>
        /// <br>                        No.26「最新情報」を押下すると「納品区分」が追加される不具合対応。</br>
        /// <br>Update Note: 2011/05/30 曹文傑</br>
        /// <br>             キャンペーン売価を取得するように変更</br>
        /// <br>Update Note: 2011/07/25 連番No.16 譚洪 掛率設定に関して、00全社共通 と 拠点の掛率の優先順位の同等化（WAN運用）の対応</br>
        /// <br>Update Note: 2011/08/15 Redmine#23578 譚洪 連番16での掛率算出の修正内容の対応</br>
        /// <br>Update Note: 2020/11/20 陳艶丹</br>
        /// <br>管理番号   : 11670305-00</br>
        /// <br>           : PMKOBETSU-4097 TSPインライン機能追加対応</br>
        public void ReNewalBtnClick(string enterpriseCode, string loginSectionCode)
        {
            _processingDialog.Title = "最新情報取得";
            _processingDialog.Message = "現在、最新情報取得中です。";
            _processingDialog.DispCancelButton = false;
            _processingDialog.Show();

            // -------ADD 2010/06/02------->>>>>
            this._salesSlipInputInitDataAcs.ClearUserGd();
            // -------ADD 2010/06/02-------<<<<<

            this._salesSlipInputAcs.CampaignObjGoodsStAcsInfo = null; // ADD 2011/05/30

            this._salesSlipInputInitDataAcs.ReadInitData(enterpriseCode, loginSectionCode);
            this._salesSlipInputInitDataAcs.ReadInitDataSecond(enterpriseCode, loginSectionCode);
            this._salesSlipInputInitDataAcs.ReadInitDataThird(enterpriseCode, loginSectionCode);

            this._salesSlipInputInitDataAcs.CacheSalesProcMoneyListCall();
            this._salesSlipInputInitDataAcs.CacheStockProcMoneyListCall();
            this._salesSlipInputInitDataAcs.CacheRateProtyMngListCall();

            this._customerInfoAcs.DeleteStaticMemoryData();

            //>>>2010/05/30
            this._salesSlipInputAcs.AcsCacheClear();
            //<<<2010/05/30

            this._salesSlipInputInitDataAcs.GetOwnSectionName();

            // 処理区分マスタリスト設定
            this._salesSlipInputInitDataAcs.SettingProcMoney();

            SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "MAHNB01010UA_Load", "初期値補正");
            #region 初期値補正
            // 部門有無
            if (this._salesSlipInputInitDataAcs.GetCompanyInf().SecMngDiv == 0)
            {
                //if (this._headerItemsDictionary.ContainsKey(this.uLabel_SubSectionCode.Text.Trim()))
                //{
                //    this._headerItemsDictionary.Remove(this.uLabel_SubSectionCode.Text.Trim());
                //}
            }

            // 仕入伝票削除区分
            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt() != null)
            {
                this._salesSlipInputAcs.SupplierSlipDelDiv = this._salesSlipInputInitDataAcs.GetSalesTtlSt().SupplierSlipDelDiv; // 0:しない 1:確認 2:する
            }
            else
            {
                this._salesSlipInputAcs.SupplierSlipDelDiv = 1; // 0:しない 1:確認 2:する
            }

            // 掛率優先区分
            this._salesSlipInputAcs.SetUnitPriceCalculation(); // ADD 2011/07/25
            this._salesSlipStockInfoInputAcs.SetUnitPriceCalculation();  // ADD 2011/08/15

            #endregion

            //>>>2010/11/30
            this._salesSlipInputAcs.GetHisTotalDayMonthly(); // 前回月次更新日設定
            this._salesSlipInputAcs.GetFinancialYearTable(); // 自社テーブル開始日リスト設定
            //<<<2010/11/30

            // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------>>>>
            #region TSP
            if (this._salesSlipInputInitDataAcs.Opt_TSP == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                // 最新ボタンを押下した時、メモリ上に保持した内容があれば破棄
                this._salesSlipInputAcs.TspCprtStList = new ArrayList();
            }
            #endregion
            // ---ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応 ------<<<<
        }

        public void ProcessingDialogDispose()
        {
            _processingDialog.Dispose();

            TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "最新情報を取得しました。　　",
                    0,
                    MessageBoxButtons.OK,
                    MessageBoxDefaultButton.Button1);
        }
        # endregion lizc

        #region tanh

        #region Public Methods

        #region グリッドのチェック
        /// <summary>
        /// GridJoinCheck
        /// </summary>
        /// <param name="salesRowNo">salesRowNo</param>
        /// <param name="rowIndex">rowIndex</param>
        /// <param name="operationCode">車両管理オプション</param>
        /// <param name="mode">mode</param>
        /// <return>checkResultInt(0:false;1:true)</return>
        /// <br>Update Note: 2011/08/20 連番882 徐錦山 10704766-00 </br>
        /// <br>             元定価が表示のを追加</br>
        public int GridJoinCheck(int salesRowNo, int rowIndex, int operationCode, int mode)
        {
            bool checkResult = false;
            int checkResultInt = 0;
            switch (mode)
            {
                case 0:
                    {
                        checkResult = this._salesSlipInputAcs.SlipMemoInputCheck(salesRowNo);
                        break;
                    }
                case 1:
                    {
                        checkResult = this._salesSlipInputAcs.ExistOrderInfo(salesRowNo);
                        break;
                    }
                case 2:
                    {
                        checkResult = this._salesSlipInputAcs.CheckEnabledDeliveredGoodsDiv(salesRowNo);
                        break;
                    }
                case 3:
                    {
                        checkResult = this._salesSlipInputAcs.ExistStockTempForStock(salesRowNo);
                        break;
                    }
                case 4:
                    {
                        checkResult = this._salesSlipInputAcs.ExistSalesDetailSupplierCd(salesRowNo);
                        break;
                    }
                case 5:
                    {
                        checkResult = this._salesSlipInputAcs.ExistSalesDetailEnableOdrMakerCd(salesRowNo);
                        break;
                    }
                case 6:
                    {
                        checkResult = this._salesSlipInputAcs.ExistSalesDetailWarehouseCode(salesRowNo);
                        break;
                    }
                case 7:
                    {
                        checkResult = this._salesSlipInputAcs.ExistSalesDetailShipmentCnt(salesRowNo);
                        break;
                    }
                case 8:
                    {
                        checkResult = this._salesSlipInputAcs.ExistSalesDetail(salesRowNo);
                        break;
                    }
                case 9:
                    {
                        checkResult = this.CheckRowEffective(rowIndex);
                        break;
                    }
                case 10:
                    {
                        checkResult = this._salesSlipInputAcs.CheckChangeColorForSalesUnitCost(salesRowNo);
                        break;
                    }
                case 11:
                    {
                        checkResult = this._salesSlipInputAcs.CheckChangeColorForSalesUnitPrice(salesRowNo);
                        break;
                    }
                case 12:
                    {
                        checkResult = this._salesSlipInputAcs.CheckChangeColorForListPrice(salesRowNo);
                        break;
                    }
                case 13:
                    {
                        checkResult = this.MyOpeCtrl.Disabled(operationCode);
                        break;
                    }
                case 14:
                    {
                        checkResult = this._salesSlipInputAcs.CheckEnabledFollowDeliGoodsDiv(salesRowNo);
                        break;
                    }
                case 15:
                    {
                        checkResult = this._salesSlipInputAcs.CheckEnabledUOEResvdSection(salesRowNo);
                        break;
                    }
                case 16:
                    {
                        //>>>2010/09/27
                        //checkResult = this._salesSlipInputAcs.ExistSalesDetailGoodsNoAndGoodsMakerCd(salesRowNo);
                        checkResult = this._salesSlipInputAcs.ExistSalesDetail(salesRowNo);
                        //<<<2010/09/27
                        break;
                    }
                case 17:
                    {
                        checkResult = this._salesSlipInputAcs.ExistCopySalesDetailRow();
                        break;
                    }
                case 18:
                    {
                        if (this._salesSlipInputAcs.GetSearchPartsMode(salesRowNo) == SalesSlipInputAcs.SearchPartsModeState.BLCodeSearch)
                        {
                            checkResult = true;
                        }
                        else
                        {
                            checkResult = false;
                        }

                        break;
                    }
                // 2011/08/20 XUJS ADD STA ------>>>>>>
                case 19:
                    {
                        //--------------------------------------------
                        // 定価変更なし場合、基準定価が表示
                        //--------------------------------------------
                        checkResult = this._salesSlipInputAcs.CheckChangeColorForListPrice(salesRowNo);
                        if (!checkResult)
                        {
                            checkResult = this._salesSlipInputAcs.CheckStdPrice(salesRowNo);
                        }
                        else
                        {
                            checkResult = false;
                        }

                        break;
                    }
                // 2011/08/20 XUJS ADD END ------<<<<<<
                // ADD 2013/04/02③ T.Miyamoto ------------------------------>>>>>
                case 20:
                    {
                        checkResult = this._salesSlipInputAcs.ExistSalesDetailShipmentCntMinus(salesRowNo);
                        break;
                    }
                // ADD 2013/04/02③ T.Miyamoto ------------------------------<<<<<
                // --- ADD 2016/01/21 Y.Wakita ---------->>>>>
                // 計上情報
                case 21:
                    {
                        //計上状況チェック
                        checkResultInt = this._salesSlipInputAcs.CheckAlreadyAddUp(salesRowNo);
                        return checkResultInt;
                    }
                // --- ADD 2016/01/21 Y.Wakita ----------<<<<<
            }
            if (checkResult)
            {
                checkResultInt = 1;
            }
            else
            {
                checkResultInt = 0;
            }

            return checkResultInt;
        }
        #endregion

        #region 明細取得処理
        /// <summary>
        /// 明細取得処理
        /// <br>Update Note: 2010/07/01 呉元嘯 Redmine#11016の対応</br>
        /// <br>Update Note: 2011/08/20 連番882 徐錦山 10704766-00 </br>
        /// <br>             元定価が表示のを追加</br>
        /// <br>Update Note: 2011/09/01 連番681 yangmj 10704766-00 </br>
        /// <br>             Redmine#23723 提供定価とユーザー定価が一致しない場合、文字色の改修</br>
        /// <br>Update Note: 2011/09/17 Redmine#25210 返品時は回答納期をセットしないの対応 </br>
        /// </summary>
        public void GetSalesDetailDataTable(ref ArrayList salesDetailList, int salesRowNo)
        {
            salesDetailList = new ArrayList();
            SalesDetail salesDetail = new SalesDetail();
            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in _salesDetailDataTable.Rows)
            {
                if (salesDetailRow.SalesRowNo == salesRowNo)
                {
                    salesDetail.GoodsName = salesDetailRow.GoodsName;
                    salesDetail.GoodsNo = salesDetailRow.GoodsNo;
                    salesDetail.BLGoodsCode = salesDetailRow.BLGoodsCode;
                    salesDetail.SalesRowNo = salesDetailRow.SalesRowNo;

                    salesDetail.GoodsKindCode = salesDetailRow.GoodsKindCode;
                    salesDetail.GoodsMakerCd = salesDetailRow.GoodsMakerCd;
                    salesDetail.SupplierCd = salesDetailRow.SupplierCd;
                    salesDetail.ShipmentCnt = salesDetailRow.ShipmentCnt;
                    salesDetail.StdUnPrcLPrice = salesDetailRow.StdUnPrcLPrice;
                    salesDetail.SalesUnitCost = salesDetailRow.SalesUnitCost;
                    salesDetail.EditStatus = salesDetailRow.EditStatus;
                    salesDetail.ShipmentCntDisplay = salesDetailRow.ShipmentCntDisplay;
                    salesDetail.SalesSlipCdDtl = salesDetailRow.SalesSlipCdDtl;
                    salesDetail.WarehouseCode = salesDetailRow.WarehouseCode;
                    salesDetail.SupplierStockDisplay = salesDetailRow.SupplierStockDisplay;
                    salesDetail.ListPriceTaxExcFl = salesDetailRow.ListPriceTaxExcFl;
                    salesDetail.ListPriceDisplay = salesDetailRow.ListPriceDisplay;
                    salesDetail.CostRate = salesDetailRow.CostRate;
                    salesDetail.SalesRate = salesDetailRow.SalesRate;
                    salesDetail.SalesUnPrcTaxExcFl = salesDetailRow.SalesUnPrcDisplay;
                    salesDetail.SalesMoneyTaxExc = salesDetailRow.SalesMoneyDisplay;
                    salesDetail.StockDate = salesDetailRow.StockDate;
                    salesDetail.BoCode = salesDetailRow.BoCode;
                    salesDetail.SupplierCdForOrder = salesDetailRow.SupplierCdForOrder;
                    salesDetail.SupplierSnmForOrder = salesDetailRow.SupplierSnmForOrder;

                    salesDetail.DeliveredGoodsDivNm = salesDetailRow.DeliveredGoodsDivNm;
                    salesDetail.SalesCode = salesDetailRow.SalesCode;
                    salesDetail.AcceptAnOrderCnt = salesDetailRow.AcceptAnOrderCntDisplay;
                    salesDetail.Cost = salesDetailRow.Cost;
                    //salesDetail.DeliGdsCmpltDueDate = salesDetailRow.DeliGdsCmpltDueDate; // 2010/05/30
                    //salesDetail.AnswerDelivDate = salesDetailRow.DeliGdsCmpltDueDate; // 2010/07/01  // DEL 2011/09/17
                    salesDetail.PartySalesSlipNum = salesDetailRow.PartySalesSlipNum;
                    salesDetail.AcptAnOdrRemainCnt = salesDetailRow.AcceptAnOrderCntForOrder;
                    salesDetail.FollowDeliGoodsDivNm = salesDetailRow.FollowDeliGoodsDivNm;
                    salesDetail.UOEResvdSectionNm = salesDetailRow.UOEResvdSectionNm;

                    salesDetail.UOEDeliGoodsDiv = salesDetailRow.UOEDeliGoodsDiv;
                    salesDetail.FollowDeliGoodsDiv = salesDetailRow.FollowDeliGoodsDiv;
                    salesDetail.UOEResvdSection = salesDetailRow.UOEResvdSection;

                    salesDetail.WarehouseShelfNo = salesDetailRow.WarehouseShelfNo;
                    salesDetail.DtlNote = salesDetailRow.DtlNote;
                    salesDetail.PartySlipNumDtl = salesDetailRow.PartySlipNumDtl;

                    salesDetail.RowStatus = salesDetailRow.RowStatus;
                    salesDetail.AcptAnOdrStatusSrc = salesDetailRow.AcptAnOdrStatusSrc;
                    salesDetail.TaxationDivCd = salesDetailRow.TaxDiv;
                    salesDetail.SalesMoneyInputDiv = salesDetailRow.SalesMoneyInputDiv;
                    salesDetail.OpenPriceDiv = salesDetailRow.OpenPriceDiv;
                    salesDetail.SalesSlipDtlNumSrc = salesDetailRow.SalesSlipDtlNumSrc;
                    salesDetail.SalesSlipDtlNum = salesDetailRow.SalesSlipDtlNum;
                    salesDetail.SlipMemo1 = salesDetailRow.SlipMemo1;
                    salesDetail.SlipMemo2 = salesDetailRow.SlipMemo2;
                    salesDetail.SlipMemo3 = salesDetailRow.SlipMemo3;
                    salesDetail.InsideMemo1 = salesDetailRow.InsideMemo1;
                    salesDetail.InsideMemo2 = salesDetailRow.InsideMemo2;
                    salesDetail.InsideMemo3 = salesDetailRow.InsideMemo3;

                    salesDetail.SupplierFormalSync = salesDetailRow.SupplierCdForStock;

                    salesDetail.AcceptAnOrderNo = salesDetailRow.AcceptAnOrderNo;
                    salesDetail.AcptAnOdrStatus = salesDetailRow.AcptAnOdrStatus;
                    salesDetail.SearchPartsModeState = salesDetailRow.SearchPartsModeState;

                    //>>>2010/05/30
                    salesDetail.CampaignCode = salesDetailRow.CampaignCode;
                    salesDetail.CampaignName = salesDetailRow.CampaignName;
                    salesDetail.GoodsDivCd = salesDetailRow.GoodsDivCd;
                    salesDetail.AnswerDelivDate = salesDetailRow.DeliGdsCmpltDueDate;
                    salesDetail.RecycleDiv = salesDetailRow.RecycleDiv;
                    salesDetail.RecycleDivNm = salesDetailRow.RecycleDivNm;
                    salesDetail.WayToAcptOdr = salesDetailRow.WayToAcptOdr;
                    salesDetail.GoodsMngNo = salesDetailRow.GoodsMngNo;
                    //<<<2010/05/30

                    //>>>2011/02/01 PS管理番号保持対応
                    salesDetail.GoodsMngNo = salesDetailRow.GoodsMngNo;
                    //<<<2011/02/01 PS管理番号保持対応

                    // 2011/08/20 XUJS ADD STA ------>>>>>>
                    //salesDetail.StdUnPrcUnCst = salesDetailRow.GoodsListPrice;//DEL 2011/09/01
                    salesDetail.StdUnPrcUnCst = salesDetailRow.StdUnPrcUnCst;//ADD 2011/09/01
                    // 2011/08/20 XUJS ADD END ------<<<<<<

                    // --- ADD 2013/12/10 Y.Wakita ---------->>>>>
                    salesDetail.CmpltSalesRowNo = salesDetailRow.CmpltSalesRowNo;       // 純正-BL商品コード
                    salesDetail.CmpltGoodsMakerCd = salesDetailRow.CmpltGoodsMakerCd;   // 純正-メーカー
                    salesDetail.CmpltGoodsName = salesDetailRow.CmpltGoodsName;         // 純正-商品番号
                    salesDetail.CmpltSalesUnPrcFl = salesDetailRow.CmpltSalesUnPrcFl;   // 純正-定価
                    // --- ADD 2013/12/10 Y.Wakita ----------<<<<<

                    salesDetailList.Add(salesDetail);
                    break;
                }
            }
        }
        #endregion

        #region 明細ALL取得処理
        /// <summary>
        /// 明細取得処理
        /// <br>Update Note: 2010/07/01 呉元嘯 Redmine#11016の対応</br>
        /// <br>Update Note: 2011/08/20 連番882 徐錦山 10704766-00 </br>
        /// <br>             元定価が表示のを追加</br>
        /// <br>Update Note: 2011/09/01 連番681 yangmj 10704766-00 </br>
        /// <br>             Redmine#23723 提供定価とユーザー定価が一致しない場合、文字色の改修</br>
        /// <br>Update Note: 2011/09/17 Redmine#25210 返品時は回答納期をセットしないの対応 </br>
        /// </summary>
        public void GetSalesAllDetailDataTable(ref ArrayList salesDetailList)
        {
            SalesDetail salesDetail;
            salesDetailList = new ArrayList();
            foreach (SalesInputDataSet.SalesDetailRow salesDetailRow in _salesDetailDataTable.Rows)
            {
                salesDetail = new SalesDetail();
                salesDetail.GoodsName = salesDetailRow.GoodsName;
                salesDetail.GoodsNo = salesDetailRow.GoodsNo;
                salesDetail.BLGoodsCode = salesDetailRow.BLGoodsCode;
                salesDetail.SalesRowNo = salesDetailRow.SalesRowNo;

                salesDetail.GoodsKindCode = salesDetailRow.GoodsKindCode;
                salesDetail.GoodsMakerCd = salesDetailRow.GoodsMakerCd;
                salesDetail.SupplierCd = salesDetailRow.SupplierCd;
                salesDetail.ShipmentCnt = salesDetailRow.ShipmentCnt;
                salesDetail.StdUnPrcLPrice = salesDetailRow.StdUnPrcLPrice;
                salesDetail.SalesUnitCost = salesDetailRow.SalesUnitCost;
                salesDetail.EditStatus = salesDetailRow.EditStatus;
                salesDetail.ShipmentCntDisplay = salesDetailRow.ShipmentCntDisplay;
                salesDetail.SalesSlipCdDtl = salesDetailRow.SalesSlipCdDtl;
                salesDetail.WarehouseCode = salesDetailRow.WarehouseCode;
                salesDetail.SupplierStockDisplay = salesDetailRow.SupplierStockDisplay;
                salesDetail.ListPriceTaxExcFl = salesDetailRow.ListPriceTaxExcFl;
                salesDetail.ListPriceDisplay = salesDetailRow.ListPriceDisplay;
                salesDetail.CostRate = salesDetailRow.CostRate;
                salesDetail.SalesRate = salesDetailRow.SalesRate;
                salesDetail.SalesUnPrcTaxExcFl = salesDetailRow.SalesUnPrcDisplay;
                salesDetail.SalesMoneyTaxExc = salesDetailRow.SalesMoneyDisplay;
                salesDetail.StockDate = salesDetailRow.StockDate;
                salesDetail.BoCode = salesDetailRow.BoCode;
                salesDetail.SupplierCdForOrder = salesDetailRow.SupplierCdForOrder;
                salesDetail.SupplierSnmForOrder = salesDetailRow.SupplierSnmForOrder;

                salesDetail.DeliveredGoodsDivNm = salesDetailRow.DeliveredGoodsDivNm;
                salesDetail.SalesCode = salesDetailRow.SalesCode;
                salesDetail.AcceptAnOrderCnt = salesDetailRow.AcceptAnOrderCntDisplay;
                salesDetail.Cost = salesDetailRow.Cost;
                //salesDetail.DeliGdsCmpltDueDate = salesDetailRow.DeliGdsCmpltDueDate; // 2010/05/30
                //salesDetail.AnswerDelivDate = salesDetailRow.DeliGdsCmpltDueDate; // 2010/07/01 // DEL 2011/09/17
                salesDetail.PartySalesSlipNum = salesDetailRow.PartySalesSlipNum;
                salesDetail.AcptAnOdrRemainCnt = salesDetailRow.AcceptAnOrderCntForOrder;
                salesDetail.FollowDeliGoodsDivNm = salesDetailRow.FollowDeliGoodsDivNm;
                salesDetail.UOEResvdSectionNm = salesDetailRow.UOEResvdSectionNm;

                salesDetail.UOEDeliGoodsDiv = salesDetailRow.UOEDeliGoodsDiv;
                salesDetail.FollowDeliGoodsDiv = salesDetailRow.FollowDeliGoodsDiv;
                salesDetail.UOEResvdSection = salesDetailRow.UOEResvdSection;

                salesDetail.WarehouseShelfNo = salesDetailRow.WarehouseShelfNo;

                salesDetail.DtlNote = salesDetailRow.DtlNote;
                salesDetail.PartySlipNumDtl = salesDetailRow.PartySlipNumDtl;

                salesDetail.RowStatus = salesDetailRow.RowStatus;
                salesDetail.AcptAnOdrStatusSrc = salesDetailRow.AcptAnOdrStatusSrc;
                salesDetail.TaxationDivCd = salesDetailRow.TaxDiv;
                salesDetail.SalesMoneyInputDiv = salesDetailRow.SalesMoneyInputDiv;
                salesDetail.OpenPriceDiv = salesDetailRow.OpenPriceDiv;
                salesDetail.SalesSlipDtlNumSrc = salesDetailRow.SalesSlipDtlNumSrc;
                salesDetail.SalesSlipDtlNum = salesDetailRow.SalesSlipDtlNum;
                salesDetail.AcceptAnOrderNo = salesDetailRow.AcceptAnOrderNo;
                salesDetail.AcptAnOdrStatus = salesDetailRow.AcptAnOdrStatus;

                salesDetail.SupplierFormalSync = salesDetailRow.SupplierCdForStock;
                salesDetail.SearchPartsModeState = salesDetailRow.SearchPartsModeState;

                //>>>2010/05/30
                salesDetail.CampaignCode = salesDetailRow.CampaignCode;
                salesDetail.CampaignName = salesDetailRow.CampaignName;
                salesDetail.GoodsDivCd = salesDetailRow.GoodsDivCd;
                salesDetail.AnswerDelivDate = salesDetailRow.DeliGdsCmpltDueDate; // DEL 2011/09/17
                salesDetail.RecycleDiv = salesDetailRow.RecycleDiv;
                salesDetail.RecycleDivNm = salesDetailRow.RecycleDivNm;
                salesDetail.WayToAcptOdr = salesDetailRow.WayToAcptOdr;
                //<<<2010/05/30
                //>>>2011/02/01
                salesDetail.GoodsMngNo = salesDetailRow.GoodsMngNo;
                //<<<2011/02/01

                // 2011/08/20 XUJS ADD STA ------>>>>>>
                //salesDetail.StdUnPrcUnCst = salesDetailRow.GoodsListPrice;//DEL 2011/09/01
                salesDetail.StdUnPrcUnCst = salesDetailRow.StdUnPrcUnCst;//ADD 2011/09/01
                // 2011/08/20 XUJS ADD END ------<<<<<<

                // --- ADD 2013/12/10 Y.Wakita ---------->>>>>
                salesDetail.CmpltSalesRowNo = salesDetailRow.CmpltSalesRowNo;
                salesDetail.CmpltGoodsMakerCd = salesDetailRow.CmpltGoodsMakerCd;
                salesDetail.CmpltGoodsName = salesDetailRow.CmpltGoodsName;
                salesDetail.CmpltSalesUnPrcFl = salesDetailRow.CmpltSalesUnPrcFl;
                // --- ADD 2013/12/10 Y.Wakita ----------<<<<<

                salesDetailList.Add(salesDetail);
            }
        }
        #endregion

        #region 明細部設定処理
        /// <summary>
        /// 明細部設定処理
        /// </summary>
        public int SetSalesDetailData(string inputdata, int inputType)
        {
            if (inputType == 1)
            {
                Guid guid = new Guid(inputdata);
                // 前回車両情報共通キー(保持用)
                this._salesSlipInputAcs.BeforeCarRelationGuid = guid;
            }

            return 0;
        }
        #endregion

        #region 品番
        /// <summary>
        /// ActiveCellが品番の場合
        /// </summary>
        /// <br>Update Note: 2010/06/02 李占川 李占川 PM.NS障害・改良対応（７月リリース案件）</br>
        /// <br>           : No.10 品番入力後に特定操作を行なうと元データが消える不具合対応</br>
        /// <br>Update Note: 2010/07/01 李占川 Redmine#10768の対応</br>
        /// <br>UpdateNote : 2011/08/12 譚洪 Redmine#23554 キャンペーンの売価「売価率、値引率、売価額」が設定されている場合は、掛率マスタの売価の設定をクリアするように仕様変更の対応</br>
        /// <br>UpdateNote : 2011/08/15 譚洪 Redmine#23554 キャンペーンの売価「売価率、値引率、売価額」が設定されている場合は、掛率マスタの売価の設定をクリアするように仕様変更の対応</br>
        /// <br>Update Note: 2012/02/28 鄧潘ハン</br>
        /// <br>管理番号   : 10707327-00 2012/03/28配信分</br>
        /// <br>             Redmine#27385 原価の金額が不正についての対応</br>
        /// <br>Update Note: 2013/01/24 鄧潘ハン</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#34141 一括値引功能を追加についての対応</br>
        /// <br>Update Note: K2014/02/10 鄧潘ハン</br>
        /// <br>管理番号   : 10970602-00</br>
        /// <br>             品番検索時、特販区分の対応</br>
        /// <br>Update Note: K2014/02/17 鄧潘ハン</br>
        /// <br>管理番号   : 10970602-00</br>
        /// <br>             ＵＳＢ登戸個別オプションＯＮ ＡＮＤ 特販管理マスタの個別</br>
        /// <br>             アセンブリが動作環境に存在する場合 ⇒オプションＯＮの対応</br>
        /// <br>Update Note: 2021/03/16 陳艶丹</br>
        /// <br>管理番号   : 11770032-00</br>
        /// <br>           : PMKOBETSU-4133 売上伝票入力原価0円障害の対応</br>
        /// <br>Update Note: K2021/07/27 譚洪</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>           : PMKOBETSU-4148 売上データ原価0円障害（登録時）</br>  
        //public int AfterGoodsNoUpdate(int rowIndex, string cellValue, int salesRowNo)  // DEL 連番729 2011/08/18
        public int AfterGoodsNoUpdate(int rowIndex, string cellValue, int makerCd, int salesRowNo)  // ADD 連番729 2011/08/18
        {
            #region ●倉庫情報取得 MAKHN09332A
            List<Warehouse> warehouseList = null;
            ArrayList aList;
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            this._salesSlipInputInitDataAcs.GetWarehouseList(out warehouseList);
            if (warehouseList == null)
            {
                WarehouseAcs warehouseAcs = new WarehouseAcs();
                status = warehouseAcs.Search(out aList, this._enterpriseCode, _loginSectionCode);
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (aList != null) warehouseList = new List<Warehouse>((Warehouse[])aList.ToArray(typeof(Warehouse)));
                    this._salesSlipInputInitDataAcs.SetWarehouseList(warehouseList);
                }
            }
            #endregion

            string goodsNo = cellValue;
            //string goodsName = this._salesDetailDataTable[rowIndex].GoodsName;
            //int goodsMakerCd = this._salesDetailDataTable[rowIndex].GoodsMakerCd;
            //int blGoodsCode = this._salesDetailDataTable[rowIndex].BLGoodsCode;

            if (!String.IsNullOrEmpty(goodsNo))
            {
                List<GoodsUnitData> goodsUnitDataList = new List<GoodsUnitData>();
                List<Stock> stockList = new List<Stock>();

                object retObj;

                //>>>2010/07/21
                //switch (this.SearchGoodsAndRemain(goodsNo, string.Empty, 0, 0, salesRowNo, out retObj))
                //int ist = this.SearchGoodsAndRemain(goodsNo, string.Empty, 0, 0, salesRowNo, out retObj);     // DEL 連番729 2011/08/18
                int ist = this.SearchGoodsAndRemain(goodsNo, string.Empty, makerCd, 0, salesRowNo, out retObj); // ADD 連番729 2011/08/18
                switch (ist)
                //<<<2010/07/21
                {
                    case 0:
                    case -2: // 2010/07/21
                        {
                            if (retObj != null)
                            {
                                // 品番検索
                                if (retObj is ArrayList)
                                {
                                    ArrayList retList = (ArrayList)retObj;

                                    for (int cnt = 0; cnt < retList.Count; cnt++)
                                    {
                                        // 通常商品情報
                                        if (retList[cnt] is GoodsUnitData)
                                        {
                                            SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UB", "", "●品番検索後　各種設定　開始");
                                            #region 各種設定
                                            goodsUnitDataList.Clear();
                                            goodsUnitDataList.Add((GoodsUnitData)retList[cnt]);
                                            List<int> settingSalesRowNoList;
                                            //>>>2010/07/21
                                            //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(salesRowNo, salesRowNo + cnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true);
                                            if (ist == -2)
                                            {
                                                // --- UPD 2012/09/05 Y.Wakita ---------->>>>>
                                                //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(salesRowNo, salesRowNo + cnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true, true);
                                                this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(salesRowNo, salesRowNo + cnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true, true, false);
                                                // --- UPD 2012/09/05 Y.Wakita ----------<<<<<
                                            }
                                            else
                                            {
                                                // --- UPD 2012/09/05 Y.Wakita ---------->>>>>
                                                //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(salesRowNo, salesRowNo + cnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true, false);
                                                this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(salesRowNo, salesRowNo + cnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true, false, false);
                                                // --- UPD 2012/09/05 Y.Wakita ----------<<<<<
                                            }
                                            //<<<2010/07/21

                                            foreach (int rowNo in settingSalesRowNoList)
                                            {
                                                // 売上金額計算処理
                                                this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);

                                                // 原価金額計算処理
                                                this._salesSlipInputAcs.CalculationCost(rowNo - 1);

                                                if (((GoodsUnitData)retList[cnt]).SelectedListPriceDiv == 1)
                                                {
                                                    double tempReturnListPrice = ((GoodsUnitData)retList[cnt]).SelectedListPrice;
                                                    this._salesDetailDataTable[rowNo - 1].ListPriceDisplay = (double)tempReturnListPrice;
                                                    //this._salesDetailDataTable[rowNo - 1].SelectedListPriceDiv = ((GoodsUnitData)retList[cnt]).SelectedListPriceDiv;
                                                    this._salesDetailDataTable[rowNo - 1].SelectedListPriceDiv = ((GoodsUnitData)retList[cnt]).SelectedListPriceDiv; // 2010/11/19

                                                    // 売上明細データセッティング処理（定価設定）
                                                    this._salesSlipInputAcs.SalesDetailRowListPriceSetting(rowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowNo - 1].ListPriceDisplay);

                                                    // ----- ADD 2011/07/29 ----------------------------------->>>>>
                                                    // ----- UPD 2011/08/15 ----------------------------------->>>>>
                                                    //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                                                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null
                                                        && (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0 ||
                                                        (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0 && ((this._salesDetailDataTable[rowNo - 1].UnPrcCalcCdSalUnPrcTemp == 1) || (this._salesDetailDataTable[rowNo - 1].UnPrcCalcCdSalUnPrcTemp == -1)))))
                                                    // ----- UPD 2011/08/15 -----------------------------------<<<<<
                                                    {
                                                        // ----- ADD 2011/08/15 ----------------------------------->>>>>
                                                        GoodsUnitData goodsUnitData = new GoodsUnitData();
                                                        goodsUnitData = (GoodsUnitData)retList[cnt];
                                                        if (goodsUnitData.GoodsPriceList != null && goodsUnitData.GoodsPriceList.Count > 0)
                                                        {
                                                            List<GoodsPrice> tempGoodsPriceList = new List<GoodsPrice>();
                                                            foreach (GoodsPrice goodsPrice in goodsUnitData.GoodsPriceList)
                                                            {
                                                                goodsPrice.ListPrice = ((GoodsUnitData)retList[cnt]).SelectedListPrice;
                                                                tempGoodsPriceList.Add(goodsPrice);
                                                            }
                                                            goodsUnitData.GoodsPriceList = tempGoodsPriceList;
                                                        }

                                                        //this._salesSlipInputAcs.SettingSalesDetailGoodsPriceOnChange(rowNo, (GoodsUnitData)retList[cnt]);//DEL 鄧潘ハン 2012/02/28 Redmine#27385
                                                        this._salesSlipInputAcs.SettingSalesDetailGoodsCampaignPriceOnChange(rowNo, (GoodsUnitData)retList[cnt]);//ADD 鄧潘ハン 2012/02/28 Redmine#27385
                                                        
                                                        // ----- ADD 2011/08/15 -----------------------------------<<<<<

                                                        // ----- DEL 2011/08/15 ----------------------------------->>>>>
                                                        // キャンペーン価格適用
                                                        //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != 0)
                                                        //{
                                                        //    // なし
                                                        //}

                                                        //// キャンペーン掛率適用
                                                        //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0)
                                                        //{
                                                        //    // 売上明細データセッティング処理（単価設定）
                                                        //    this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, this._salesDetailDataTable[rowNo - 1].SalesRate, false);

                                                        //    // 売上金額計算処理
                                                        //    this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                        //}

                                                        //// キャンペーン値引率適用
                                                        //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0)
                                                        //{
                                                        //    if (this._salesDetailDataTable[rowNo - 1].SalesRate != 0)
                                                        //    {
                                                        //        double listPriceDisplay = this._salesDetailDataTable[rowNo - 1].ListPriceDisplay;
                                                        //        double salesRate = this._salesDetailDataTable[rowNo - 1].SalesRate;
                                                        //        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, this._salesDetailDataTable[rowNo - 1].SalesRate, false);

                                                        //        this._salesDetailDataTable[rowNo - 1].StdUnPrcSalUnPrc = this._salesDetailDataTable[rowNo - 1].SalesUnPrcDisplay;
                                                        //        // 売上明細データセッティング処理（単価設定）
                                                        //        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, 100 - this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate, false);
                                                        //        this._salesDetailDataTable[rowNo - 1].StdUnPrcSalUnPrc = listPriceDisplay;
                                                        //        this._salesDetailDataTable[rowNo - 1].SalesRate = salesRate;

                                                        //        // 売上金額計算処理
                                                        //        this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                        //    }
                                                        //    else
                                                        //    {
                                                        //        if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().UnPrcNonSettingDiv == 1)
                                                        //        {
                                                        //            this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, 100 - this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate, false);
                                                        //            this._salesDetailDataTable[rowNo - 1].SalesRate = 0;

                                                        //            // 売上金額計算処理
                                                        //            this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                        //        }
                                                        //    }
                                                        //}
                                                        // ----- DEL 2011/08/15 -----------------------------------<<<<<
                                                    }
                                                    else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo == null)
                                                    {
                                                        // ----- ADD 2011/07/29 -----------------------------------<<<<<
                                                        // 売価率が入力されている場合は単価再計算
                                                        if (this._salesDetailDataTable[rowNo - 1].SalesRate != 0)
                                                        {
                                                            // 売上明細データセッティング処理（単価設定）
                                                            this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, this._salesDetailDataTable[rowNo - 1].SalesRate, false);

                                                            // 売上金額計算処理
                                                            this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                        }
                                                        else
                                                        {
                                                            if (string.IsNullOrEmpty(this._salesDetailDataTable[rowNo - 1].RateDivSalUnPrc))
                                                            {
                                                                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().UnPrcNonSettingDiv == 1) // 売価＝定価
                                                                {
                                                                    this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(rowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPrice, this._salesDetailDataTable[rowNo - 1].ListPriceDisplay, 0);
                                                                }
                                                            }

                                                            // ---- ADD 2015/09/04 T.Nishi 社内障害№712 ---------->>>>>
                                                            // 売上金額計算処理
                                                            this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                            // ---- ADD 2015/09/04 T.Nishi 社内障害№712 ----------<<<<<
                                                        }
                                                    } // ADD 2011/07/29

                                                    this._salesDetailDataTable[rowNo - 1].PrtGoodsNo = ((GoodsUnitData)retList[cnt]).PrtGoodsNo;
                                                    this._salesDetailDataTable[rowNo - 1].PrtMakerCode = ((GoodsUnitData)retList[cnt]).PrtMakerCode;
                                                    this._salesDetailDataTable[rowNo - 1].PrtMakerName = ((GoodsUnitData)retList[cnt]).PrtMakerName;
                                                }

                                                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34605---- >>>>>
                                                //売上全体設定で、表示区分プロセスはしない場合、またこの商品の商品属性は純正である場合、価格表示区分は空白を表示
                                                if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().PriceSelectDispDiv == 0 || this._salesDetailDataTable[rowNo - 1].GoodsMakerCd < 1000)
                                                {
                                                    this._salesDetailDataTable[rowNo - 1].PriceSelectDiv = -1;
                                                }
                                                else
                                                {
                                                    // 表示区分ﾘｽﾄ
                                                    List<PriceSelectSet> displayDivList = this._salesSlipInputInitDataAcs.GetDisplayDivList();
                                                    Int32 priceSelectDiv = -1;
                                                    // 表示区分取得ﾃﾞﾘｹﾞｰﾄ
                                                    this._priceSelectSetAcs.GetDisplayDiv(displayDivList, this._salesDetailDataTable[rowNo - 1].GoodsMakerCd, this._salesDetailDataTable[rowNo - 1].BLGoodsCode, this._salesSlipInputAcs.SalesSlip.CustomerCode, this._salesDetailDataTable[rowNo - 1].CustRateGrpCode, out priceSelectDiv);
                                                    this._salesDetailDataTable[rowNo - 1].PriceSelectDiv = priceSelectDiv;
                                                }
                                                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34605---- <<<<<
                                                // ADD 2011/08/12 ---- >>>>>
                                                if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                                                {
                                                    // 掛率算出情報クリア
                                                    this._salesSlipInputAcs.ClearRateInfo(rowNo, UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice);
                                                }
                                                // ADD 2011/08/12 ---- <<<<<

                                                this._salesDetailDataTable[rowNo - 1].SelectedGoodsNoDiv = ((GoodsUnitData)retList[cnt]).SelectedGoodsNoDiv;

                                                //品番検索後、検索結果から販売区分が設定された場合(グループコードマスタの販売区分を設定)、販売区分名称がセットされます。
                                                string name = string.Empty;
                                                if (string.IsNullOrEmpty(((GoodsUnitData)retList[cnt]).SalesCodeName))
                                                {
                                                    if (this._salesDetailDataTable[rowNo - 1].SalesCode != 0)
                                                    {
                                                        name = this._salesSlipInputInitDataAcs.GetName_FromUserGdBd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_SalesCode, this._salesDetailDataTable[rowNo - 1].SalesCode);
                                                    }

                                                    if (name != string.Empty)
                                                    {
                                                        this._salesDetailDataTable[rowNo - 1].SalesCdNm = name;
                                                    }
                                                }

                                                // 明細粗利率設定処理
                                                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(rowNo);

                                                // 一式情報設定処理
                                                this._salesSlipInputAcs.ConstructionCompleteInfo(rowNo);

                                                // 車両情報設定イベントコール処理
                                                //this.SettingCarInfoEventCall(rowNo);

                                                // 発注情報設定処理
                                                this._salesSlipInputAcs.SettingUOEOrderDtlRowForNew(rowNo);
                                                this._salesSlipInputAcs.DefaultSettingUOEOrderDtlRow(rowNo);
                                                this._salesSlipInputAcs.SettingSalesDetailRowUOEOrderDtl(salesRowNo); // ADD 2010/07/01

                                                // --- ADD　譚洪 K2014/02/17 ---- >>>>>
                                                if (this._salesSlipInputInitDataAcs.Opt_NoBuTo == (int)SalesSlipInputInitDataAcs.Option.ON)
                                                {
                                                    object retNobuto = this._salesSlipInputInitDataAcs.MyMethodNobuto.Invoke(this._salesSlipInputInitDataAcs.ObjNobuto,
                                                                       new object[] { this._enterpriseCode, this._salesDetailDataTable[rowNo - 1].GoodsNo, this._salesDetailDataTable[rowNo - 1].GoodsMakerCd });

                                                    if ((int)retNobuto == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                                    {
                                                        this._salesDetailDataTable[rowNo - 1].SalesCode = 1;
                                                    }
                                                    else
                                                    {
                                                        this._salesDetailDataTable[rowNo - 1].SalesCode = 0;
                                                    }
                                                }
                                                // --- ADD　譚洪 K2014/02/17 ---- <<<<<
                                                // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133-------->>>>
                                                // 原価単価が0円の場合、原価金額再計算する
                                                if (this._salesDetailDataTable[rowNo - 1].SalesUnitCost == CtZero &&
                                                    this._salesDetailDataTable[rowNo - 1].SalesUnitCostChngDiv == CtZero &&    // 原価単価変更区分0:変更なし
                                                    this._salesDetailDataTable[rowNo - 1].GoodsMakerCd != CtZero &&            // メーカーコード
                                                    (string.IsNullOrEmpty(this._salesDetailDataTable[rowNo - 1].MakerName) ||     // メーカー名
                                                    string.IsNullOrEmpty(this._salesDetailDataTable[rowNo - 1].MakerKanaName)))     // メーカーカナ名
                                                {
                                                    string logMsg = string.Format(LogMessage, MethodNameGoodsNo, this._salesSlipInputAcs.GetLogInfo(rowNo));
                                                    // ログ出力
                                                    if (LogCommon == null)
                                                    {
                                                        LogCommon = new OutLogCommon();
                                                    }
                                                    LogCommon.OutputClientLog(ctAssemblyName, logMsg, this._enterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);
                                                    
                                                    // 現単価情報再設定する
                                                    this._salesSlipInputAcs.SetSalesDetailBLGoodsInfo(rowNo);
                                                }
                                                // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133--------<<<<<
                                                // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）-------->>>>>
                                                // 原単価が不正の場合、原単価、原価再計算
                                                // 原単価が手入力以外　且つ　算出原価！＝0　且つ　原価単価＝0
                                                if ((this._salesDetailDataTable[rowNo - 1].SalesUnitCostChngDiv != (int)SalesSlipInputAcs.SalesMoneyInputDiv.Input &&
                                                    this._salesDetailDataTable[rowNo - 1].BfUnitCost != CtZero && this._salesDetailDataTable[rowNo - 1].SalesUnitCost == CtZero))
                                                {
                                                    // ログ内容
                                                    string logMsg = string.Format(DetailLog, MethodNameGoodsNo, this._salesDetailDataTable[rowNo - 1].SalesUnitCostChngDiv,
                                                                                  this._salesDetailDataTable[rowNo - 1].BfUnitCost, this._salesDetailDataTable[rowNo - 1].SalesUnitCost,
                                                                                  this._salesSlipInputAcs.GetLogInfo(rowNo));
                                                    // ログ出力
                                                    if (LogCommon == null)
                                                    {
                                                        LogCommon = new OutLogCommon();
                                                    }
                                                    LogCommon.OutputClientLog(ctAssemblyName, logMsg, this._enterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);

                                                    // 価格情報再設定
                                                    this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);
                                                    // 原価金額計算処理
                                                    this._salesSlipInputAcs.CalculationCost(rowIndex);
                                                }
                                                // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）--------<<<<<
                                            }
                                            #endregion
                                            SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UB", "", "○品番検索後　各種設定　終了");
                                        }
                                        // 受注照会(受注残検索)
                                        else if (retList[cnt] is AcptAnOdrRemainRefData)
                                        {
                                            List<AcptAnOdrRemainRefData> acptAnOdrRemainRefDataList = new List<AcptAnOdrRemainRefData>();
                                            acptAnOdrRemainRefDataList.Add((AcptAnOdrRemainRefData)retList[cnt]);
                                            int st = this._salesSlipInputAcs.SalesDetailRowSettingFromAcptAnOdrRemainRefList(salesRowNo + cnt, acptAnOdrRemainRefDataList, SalesSlipInputAcs.WayToDetailExpand.AddUpRemainder);
                                            if (st == -1)
                                            {
                                                TMsgDisp.Show(
                                                    new Form(),
                                                    emErrorLevel.ERR_LEVEL_INFO,
                                                    "MAHNB01012A",
                                                    "「計上」または「発注選択」済み明細がが選択されましたので、" + Environment.NewLine +
                                                    "明細への展開を行いません。",
                                                    -1,
                                                    MessageBoxButtons.OK);
                                            }

                                        }
                                        // 出荷照会(出荷残検索)
                                        else if (retList[cnt] is SalHisRefResultParamWork)
                                        {
                                            List<SalHisRefResultParamWork> salHisRefResultParamWorkList = new List<SalHisRefResultParamWork>();
                                            salHisRefResultParamWorkList.Add((SalHisRefResultParamWork)retList[cnt]);
                                            int st = this._salesSlipInputAcs.SalesDetailRowSettingFromSalHisRefResultParamWorkListForAddUp(salesRowNo + cnt, salHisRefResultParamWorkList, SalesSlipInputAcs.WayToDetailExpand.AddUpRemainder);
                                            if (st == -1)
                                            {
                                                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                                                if (!this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag)
                                                {
                                                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                                                    TMsgDisp.Show(
                                                        new Form(),
                                                        emErrorLevel.ERR_LEVEL_INFO,
                                                        "",//this.Name,
                                                        "「計上」済み明細が選択されましたので、" + Environment.NewLine +
                                                        "明細への展開を行いません。",
                                                        -1,
                                                        MessageBoxButtons.OK);
                                                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                                                }
                                                else
                                                {
                                                    this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag = false;
                                                }
                                                // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                                            }
                                        }
                                    }
                                }

                                // 明細グリッド設定処理
                                //this.SettingGrid();

                                // 在庫調整
                                // ----ADD 2011/07/20------->>>>>
                                if (this._salesSlipInputInitDataAcs.GetAllDefSet().DtlCalcStckCntDsp == 0)
                                {
                                    //検索後反映
                                    this._salesSlipInputAcs.SalesDetailStockInfoAdjust();
                                }
                                else
                                {
                                    //行移動時反映の場合、調整しない
                                }
                                // ----ADD 2011/07/20-------<<<<<
                                //this._salesSlipInputAcs.SalesDetailStockInfoAdjust();  //DEL 2011/07/20
                            }


                            // --- ADD 譚洪 K2014/01/22 ---------->>>>>
                            //if (this._salesSlipInputInitDataAcs.Opt_NoBuTo == (int)SalesSlipInputInitDataAcs.Option.ON)
                            //{
                                // --- DEL 鄧潘ハン K2014/02/17 ---------->>>>>
                                //List<SpecSalesDetailWork> retlist = new List<SpecSalesDetailWork>();
                                //ConditionWork conditionWork = new ConditionWork();
                                //conditionWork.EnterpriseCode = this._enterpriseCode;
                                ////conditionWork.GoodsNo = goodsNo;//  DEL 鄧潘ハン K2014/02/10
                                //conditionWork.GoodsNo = this._salesDetailDataTable[salesRowNo - 1].GoodsNo;//  ADD 鄧潘ハン K2014/02/10
                                //conditionWork.GoodsMakerCd = this._salesDetailDataTable[salesRowNo - 1].GoodsMakerCd;
                                //status = this._noBuToSpecSalesAcs.ReadSpecSalesDetail(out retlist, conditionWork);

                                //if (retlist.Count > 0)
                                //{
                                //    this._salesDetailDataTable[salesRowNo - 1].SalesCode = 1;
                                //}
                                // --- DEL 鄧潘ハン K2014/02/17 ----------<<<<<

                                // --- ADD 鄧潘ハン K2014/02/17 ---------->>>>>
                                // 処理実行
                                //object retNobuto = this._salesSlipInputInitDataAcs.MyMethodNobuto.Invoke(this._salesSlipInputInitDataAcs.ObjNobuto, 
                                //    new object[] { this._enterpriseCode, this._salesDetailDataTable[salesRowNo - 1].GoodsNo, this._salesDetailDataTable[salesRowNo - 1].GoodsMakerCd });

                                //if ((int)retNobuto == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                //{
                                //    this._salesDetailDataTable[salesRowNo - 1].SalesCode = 1;
                                //}
                                //else
                                //{
                                //    this._salesDetailDataTable[salesRowNo - 1].SalesCode = 0;
                                //}
                                // --- ADD 鄧潘ハン K2014/02/17 ----------<<<<<
                            //}
                            // --- ADD 譚洪 K2014/01/22 ----------<<<<<

                            break;
                        }
                    case -1:
                        {
                            // キャンセル
                            // --- DEL 2010/06/02 ---------->>>>>
                            //this._salesSlipInputAcs.ClearSalesDetailRow(salesRowNo, false);
                            // --- DEL 2010/06/02 ----------<<<<<
                            //this._cannotGoodsRead = true;
                            return -1;
                        }
                }

            }
            else
            {
                this._salesSlipInputAcs.ClearSalesDetailRow(salesRowNo);

                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
                //入力モードは値引である場合
                if (this._discountAllLineflag)
                {
                    //一括値引Grid行初期化
                    DiscountGridInitial(salesRowNo - 1);
                }
                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<
                //this._cannotGoodsRead = true;
            }

            // 明細グリッド設定処理
            //this.SettingGrid();

            // データ変更フラグプロパティをTrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            // 売上金額変更後発生イベントコール処理
            //this.SalesPriceChangedEventCall();

            // フッタ部明細情報更新イベントコール処理
            //this.SettingFooterEventCall(salesRowNo);

            #region 明細チェック
            bool errorFlg = false;

            // 在庫切れ出荷区分による在庫数チェック
            bool setInputError = false;
            bool showMessage = false;
            if (!this._salesSlipInputAcs.CheckStockCountForShipmentCnt(salesRowNo, out setInputError, out showMessage))
            {
                if (showMessage)
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",//this.Name,
                        "出荷数が在庫数を上回ります。",
                        -1,
                        MessageBoxButtons.OK);
                }
                if (setInputError)
                {
                    //this._cannotGoodsRead = true;
                    errorFlg = true;
                }
            }

            // 在庫切れ出荷区分による在庫数チェック
            setInputError = false;
            showMessage = false;
            if (!this._salesSlipInputAcs.CheckStockCountForAcceptAnOrderCnt(salesRowNo, out setInputError, out showMessage))
            {
                if (showMessage)
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",//this.Name,
                        "受注数が在庫数を上回ります。",
                        -1,
                        MessageBoxButtons.OK);
                }
                if (setInputError)
                {
                    //this._cannotGoodsRead = true;
                    errorFlg = true;
                }
            }

            string errMsg = string.Empty;
            SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckListPrice(salesRowNo, out errMsg);

            if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
            {
                // --- ADD 2012/05/14 ---------->>>>>
                if (checkResult != SalesSlipInputAcs.CheckResult.Error)
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",//this.Name,
                        errMsg,
                        -1,
                        MessageBoxButtons.OK);
                }
                else
                {
                    // --- ADD 2012/05/14 ----------<<<<<
                // --- UPD 2012/04/23 ---------->>>>>
                //TMsgDisp.Show(
                //    new Form(),
                //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                //    "",//this.Name,
                //    errMsg,
                //    -1,
                //    MessageBoxButtons.OK);
                DialogResult dResult = TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                    errMsg,
                    -1,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button2);
                // --- UPD 2012/04/23 ----------<<<<<

                    // --- DEL 2012/05/14 ---------->>>>>
                    //if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                    //{
                        // --- DEL 2012/05/14 ----------<<<<<
                    //this._cannotGoodsRead = true;
                    // --- UPD 2012/04/23 ---------->>>>>
                    //errorFlg = true;
                    if (dResult == DialogResult.No)
                    {
                    errorFlg = true;
                }
                    // --- UPD 2012/04/23 ----------<<<<<
                    // --- DEL 2012/05/14 ---------->>>>>
                    //}
                    // --- DEL 2012/05/14 ----------<<<<<
                    // --- ADD 2012/05/14 ---------->>>>>
                    else
                    {
                        errorFlg = false;
                    }
                }
                // --- ADD 2012/05/14 ----------<<<<<
            }

            ////---2010/07/17-------->>>>>
            //StockTemp stockTempCurrent = new StockTemp();
            //StockTemp stockTemp = new StockTemp();
            //if (this._salesSlipStockInfoInputAcs.StockTemp != null)
            //{
            //    stockTempCurrent = this._salesSlipStockInfoInputAcs.StockTemp.Clone();
            //    stockTemp = stockTempCurrent.Clone();
            //}

            //// メモリ上の内容と比較する
            //if (stockTempCurrent != null)
            //{
            //    ArrayList arRetList = stockTemp.Compare(stockTempCurrent);
            //    if (arRetList.Count > 0)
            //    {
            //        this._salesSlipStockInfoInputAcs.Cache(stockTemp);
            //    }
            //}
            ////---2010/07/17--------<<<<<

            if (errorFlg) return 0;
            #endregion

            return 0;
        }

        /// <summary>
        /// 商品・出荷残・受注残検索処理（オーバーロード）
        /// </summary>
        /// <param name="goodsNo">商品コード</param>
        /// <param name="goodsName">商品名称</param>
        /// <param name="makerCode">メーカーコード</param>
        /// <param name="blGoodsCode">BLコード</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="searchResult">検索結果</param>
        /// <returns></returns>
        /// <remarks>
        /// <br>Note       : 商品検索後、残数自動表示区分に従って受注残照会、出荷残照会を起動します。</br>
        /// <br>             検索結果については、ヒットした処理（商品or出荷残or受注残）によってクラスが異なります。</br>
        /// </remarks>
        private int SearchGoodsAndRemain(string goodsNo, string goodsName, int makerCode, int blGoodsCode, int salesRowNo, out object searchResult)
        {
            //-----------------------------------------------------------------------------
            // 初期処理
            //-----------------------------------------------------------------------------
            searchResult = null;
            List<GoodsUnitData> goodsUnitDataList;
            List<Stock> stockList;
            int searchStatus;
            int retStasus = -1;

            //-----------------------------------------------------------------------------
            // 部品検索
            //-----------------------------------------------------------------------------
            searchStatus = this.SearchPartsFromGoodsNo(goodsNo, makerCode, goodsName, blGoodsCode, salesRowNo, out goodsUnitDataList, out stockList);

            //-----------------------------------------------------------------------------
            // 部品検索でヒットした場合は残検索
            //-----------------------------------------------------------------------------
            if ((searchStatus == 0) && (goodsUnitDataList.Count > 0))
            {
                ArrayList retList = new ArrayList();
                foreach (GoodsUnitData goodsUnitData in goodsUnitDataList)
                {
                    retStasus = 0;
                    object reamainResult;
                    int reamainSearchStatus = this.SearchRemain(goodsUnitData, salesRowNo, out reamainResult);

                    if ((reamainSearchStatus == 0) && (reamainResult != null))
                    {
                        retList.Add(reamainResult);
                    }
                    else
                    {
                        retList.Add(goodsUnitData);
                    }

                    // --- DEL 2010/06/26 ---------->>>>>
                    ////>>>2010/05/30
                    //#region BLコード変換
                    //if ((this._salesSlipInputInitDataAcs.GetScmTtlSt().BLCodeChgDiv == 0) &&
                    //    (this._salesSlipInputAcs.SalesSlip.OnlineKindDiv == (int)SalesSlipInputAcs.OnlineKindDiv.SCM))
                    //{
                    //    // BLコード変換テーブル更新
                    //    this._salesSlipInputAcs.MakeBLCodeChgDataTable(goodsUnitData.BLGoodsCode);

                    //    // BLコード変換選択ウインドウ表示
                    //    if (this._salesSlipInputAcs.GetBLCodeChgCount() > 1)
                    //    {
                    //        // BLコード枝番選択ウインドウ表示
                    //        MAHNB01010UN selectBLCodeChgDialog = new MAHNB01010UN();
                    //        selectBLCodeChgDialog.SettingOrgInfo(goodsUnitData.BLGoodsCode, goodsUnitData.BLGoodsFullName);
                    //        DialogResult dialogResult = selectBLCodeChgDialog.ShowDialog(_form);
                    //        switch (dialogResult)
                    //        {
                    //            case DialogResult.Cancel: // 選択無し
                    //                break;
                    //            case DialogResult.OK: // 通常処理
                    //                int blCode = this._salesSlipInputAcs.GetSelectBLCodeChg();
                    //                goodsUnitData.BLGoodsCodeChange = blCode;
                    //                break;
                    //            default:
                    //                break;
                    //        }
                    //    }
                    //}
                    //#endregion
                    ////<<<2010/05/30
                    // --- DEL 2010/06/26 ----------<<<<<
                }
                searchResult = retList;
            }
            //-----------------------------------------------------------------------------
            // 部品検索でキャンセル場合（空商品を返す）
            //-----------------------------------------------------------------------------
            else if (searchStatus == -1)
            {
                retStasus = -1;
                searchResult = null;
            }
            //-----------------------------------------------------------------------------
            // 部品検索でヒットしなかった場合（空商品を返す）
            //-----------------------------------------------------------------------------
            else if ((searchStatus == -2) && (goodsUnitDataList.Count > 0))
            {
                //>>>2010/07/21
                //retStasus = 0;
                retStasus = -2;
                //<<<2010/07/21

                ArrayList retList = new ArrayList();
                retList.Add(goodsUnitDataList[0]);
                searchResult = retList;
            }

            return retStasus;
        }

        /// <summary>
        /// 品番検索
        /// </summary>
        /// <param name="goodsNo">品番</param>
        /// <param name="goodsMakerCd">メーカーコード</param>
        /// <param name="goodsName">品名</param>
        /// <param name="blGoodsCode">BLコード</param>
        /// <param name="salesRowNo">売上行番号</param>
        /// <returns>0:検索OK -1:キャンセル</returns>
        private int SearchPartsFromGoodsNo(string goodsNo, int goodsMakerCd, string goodsName, int blGoodsCode, int salesRowNo, out List<GoodsUnitData> goodsUnitDataList, out List<Stock> stockList)
        {
            //-------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------
            int status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            goodsUnitDataList = new List<GoodsUnitData>();
            stockList = new List<Stock>();

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SearchPartsFromGoodsNo", "●品番検索　開始");
            #region ●品番検索
            //-------------------------------------------------------------
            // 品番検索
            //-------------------------------------------------------------
            status = this._salesSlipInputAcs.SearchPartsFromGoodsNo(this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd, goodsMakerCd, goodsNo, salesRowNo, out goodsUnitDataList);
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SearchPartsFromGoodsNo", "○品番検索　終了");

            //-------------------------------------------------------------
            // 部品検索後処理
            //-------------------------------------------------------------
            if ((status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL) && (goodsUnitDataList != null) && (goodsUnitDataList.Count > 0))
            {
                return 0;
            }
            else if (status == (int)ConstantManagement.MethodResult.ctFNC_CANCEL)
            {
                // キャンセル
                return -1;
            }
            else
            {
                // 空情報セット
                goodsUnitDataList.Add(this._salesSlipInputAcs.CreateEmptyGoods(goodsNo, goodsName, goodsMakerCd, blGoodsCode));
                return -2;
            }
        }

        /// <summary>
        /// 残検索デリゲート
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <param name="makerCode">検索結果</param>
        /// <returns></returns>
        private delegate int RemainSearchProc(GoodsUnitData goodsUnitData, out object retObj);

        /// <summary>
        /// 残検索
        /// </summary>
        /// <param name="goodsUnitData">商品連結データオブジェクト</param>
        /// <param name="retObj">検索結果</param>
        /// <returns>0:検索OK</returns>
        /// <br>Note       : 残数自動表示区分に従って受注残照会、出荷残照会を起動します。</br>
        /// <br>             検索結果については、ヒットした処理（出荷残or受注残）によってクラスが異なります。</br>
        private int SearchRemain(GoodsUnitData goodsUnitData, int salesRowNo, out object retObj)
        {
            retObj = null;

            int index = salesRowNo - 1;
            if (this._salesDetailDataTable[index].SalesSlipCdDtl == (int)SalesSlipInputAcs.SalesSlipCdDtl.Discount) return -1;
            if (this._salesSlipInputAcs.SalesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) return -1;
            if ((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate) ||
                (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.UnitPriceEstimate) ||
                (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)) return -1;

            List<RemainSearchProc> remainSearchProcList = new List<RemainSearchProc>();

            // 残検索メソッドの設定（全体初期値設定マスタの残数自動表示区分によって分岐）
            switch ((SalesSlipInputAcs.RemCntAutoDspDiv)this._salesSlipInputInitDataAcs.GetAllDefSet().RemCntAutoDspDiv)
            {
                // 出入荷残のみ
                case SalesSlipInputAcs.RemCntAutoDspDiv.ShipmentAndArrivalOnly:
                    remainSearchProcList.Add(this.SearchShipmentRemain);
                    break;
                // 受発注残のみ
                case SalesSlipInputAcs.RemCntAutoDspDiv.AcptAnOrderAndOrderOnly:
                    remainSearchProcList.Add(this.SearchAcceptAnOrderRemain);
                    break;
                // 出入荷残→受発注残
                case SalesSlipInputAcs.RemCntAutoDspDiv.ShipmentAndArrivalNextAcptAnOrderAndOrder:
                    remainSearchProcList.Add(this.SearchShipmentRemain);
                    remainSearchProcList.Add(this.SearchAcceptAnOrderRemain);
                    break;
                // 受発注残→出入荷残
                case SalesSlipInputAcs.RemCntAutoDspDiv.AcptAnOrderAndOrderNextShipmentAndArrival:
                    remainSearchProcList.Add(this.SearchAcceptAnOrderRemain);
                    remainSearchProcList.Add(this.SearchShipmentRemain);
                    break;
            }

            // 出荷伝票の場合は出荷残を検索しない
            if (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment)
            {
                if (remainSearchProcList.Contains(this.SearchShipmentRemain))
                {
                    remainSearchProcList.Remove(this.SearchShipmentRemain);
                }
            }

            foreach (RemainSearchProc remainSearch in remainSearchProcList)
            {
                int st = remainSearch(goodsUnitData, out retObj);
                if ((st == (int)ConstantManagement.DB_Status.ctDB_NORMAL) && (retObj != null))
                {
                    return 0;
                }
            }
            return -1;
        }

        /// <summary>
        /// 出荷残検索
        /// </summary>
        /// <param name="goodsUnitData"></param>
        /// <param name="retObj"></param>
        /// <returns></returns>
        private int SearchShipmentRemain(GoodsUnitData goodsUnitData, out object retObj)
        {
            int retSt;
            retObj = null;
            List<SalHisRefResultParamWork> salHisRefResultParamWorkList;
            DCHNB04101UA salesHisGuide = new DCHNB04101UA();
            try
            {
                salesHisGuide.AcptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment;
                salesHisGuide.AcptAnOdrStatusFix = true;
                salesHisGuide.AutoSearch = true;
                salesHisGuide.MaxSelectCount = 1;
                salesHisGuide.SectionCode = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
                salesHisGuide.SectionName = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
                salesHisGuide.CustomerCodeFix = true;
                salesHisGuide.CustomerCode = this._salesSlipInputAcs.SalesSlip.CustomerCode;
                salesHisGuide.CustomerName = this._salesSlipInputAcs.SalesSlip.CustomerSnm;
                salesHisGuide.SalesEmployeeCd = this._salesSlipInputAcs.SalesSlip.SalesEmployeeCd;
                salesHisGuide.SalesEmployeeName = this._salesSlipInputAcs.SalesSlip.SalesEmployeeNm;
                salesHisGuide.SalesInputCode = this._salesSlipInputAcs.SalesSlip.SalesInputCode;
                salesHisGuide.SalesInputName = this._salesSlipInputAcs.SalesSlip.SalesInputName;
                salesHisGuide.FrontEmployeeCd = this._salesSlipInputAcs.SalesSlip.FrontEmployeeCd;
                salesHisGuide.FrontEmployeeName = this._salesSlipInputAcs.SalesSlip.FrontEmployeeNm;
                salesHisGuide.GoodsNo = goodsUnitData.GoodsNo;
                salesHisGuide.GoodsMakerCd = goodsUnitData.GoodsMakerCd;
                salesHisGuide.GoodsMakerName = goodsUnitData.MakerName;
                salesHisGuide.SalesSlipCd = (this._salesSlipInputAcs.SalesSlip.AccRecDivCd == (int)SalesSlipInputAcs.AccRecDivCd.AccRec) ? 0 : 100; // 0: 掛売上 1:掛返品 100:現金売上 101:現金返品
                salesHisGuide.SalesSlipCdFix = true;

                if (salesHisGuide.SearchData())
                {
                    retSt = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    DialogResult dialogResult = salesHisGuide.ShowDialog(new Form(), (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment, this._salesSlipInputAcs.SalesSlip.CustomerCode);
                    if (dialogResult == DialogResult.OK)
                    {
                        salHisRefResultParamWorkList = salesHisGuide.StcHisRefDataWork;
                        SalHisRefResultParamWork salHisRefResultParamWork = salHisRefResultParamWorkList[0];
                        retObj = salHisRefResultParamWork;
                    }
                }
                else
                {
                    retSt = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }
                return retSt;
            }
            finally
            {
                salesHisGuide.Dispose();
            }

        }

        /// <summary>
        /// 受注残検索
        /// </summary>
        /// <param name="goodsUnitData"></param>
        /// <param name="retObj"></param>
        /// <returns></returns>
        private int SearchAcceptAnOrderRemain(GoodsUnitData goodsUnitData, out object retObj)
        {
            retObj = null;

            DCJUT04110UA acceptAnOrderGuide = new DCJUT04110UA();
            try
            {
                acceptAnOrderGuide.Standard_UGroupBox_Expand = false;
                acceptAnOrderGuide.AutoSearch = false;
                acceptAnOrderGuide.MaxSelectCount = 1;

                acceptAnOrderGuide.SearchCndtn.SectionCode = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
                acceptAnOrderGuide.SearchCndtn.SectionName = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
                acceptAnOrderGuide.SearchCndtn.CustomerCode = this._salesSlipInputAcs.SalesSlip.CustomerCode;
                acceptAnOrderGuide.SearchCndtn.CustomerName = this._salesSlipInputAcs.SalesSlip.CustomerSnm;
                acceptAnOrderGuide.SearchCndtn.GoodsNo = goodsUnitData.GoodsNo;
                acceptAnOrderGuide.SearchCndtn.GoodsMakerCd = goodsUnitData.GoodsMakerCd;
                acceptAnOrderGuide.SearchCndtn.MakerName = goodsUnitData.MakerName;
                acceptAnOrderGuide.SearchCndtn.ArrivalStateDiv = DCJUT04110UA.ArrivalState.NonArrival;
                acceptAnOrderGuide.SearchCndtn.St_SalesDate = this._salesSlipInputAcs.SalesSlip.SalesDate;
                acceptAnOrderGuide.SearchCndtn.Ed_SalesDate = this._salesSlipInputAcs.SalesSlip.SalesDate;

                acceptAnOrderGuide.CustomerCodeFix = true;

                int retSt;
                if (acceptAnOrderGuide.InitialSearch())
                {
                    retSt = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                    DialogResult dialogResult = acceptAnOrderGuide.ShowDialog(new Form());
                    if (DialogResult.OK == dialogResult)
                    {
                        List<AcptAnOdrRemainRefData> acptList = acceptAnOrderGuide.GetSelectDataList();
                        AcptAnOdrRemainRefData acptAnOdrRemainRefData = acptList[0];
                        retObj = acptAnOdrRemainRefData;
                    }
                }
                else
                {
                    retSt = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
                }

                return retSt;
            }
            finally
            {
                acceptAnOrderGuide.Dispose();
            }

        }
        #endregion

        # region 行値引きボタンクリック
        /// <summary>
        /// 行値引きボタンクリックイベント
        /// </summary>
        public int uButtonLineDiscountClick(int parmRowIndex)
        {
            // ActiveRowインデックス取得処理
            int rowIndex = parmRowIndex;
            if (rowIndex == -1) return -1;

            int salesRowNo = this._salesDetailDataTable[rowIndex].SalesRowNo;

            List<int> checkStockRowNoList = new List<int>();
            checkStockRowNoList.Add(salesRowNo);
            int pasteCheck = this._salesSlipInputAcs.CheckPasteSalesDetailRow(checkStockRowNoList, rowIndex);

            if (pasteCheck == 1)
            {
                DialogResult checkDialogResult = TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_QUESTION,
                    "",
                    "対象行に商品が入力されています。" + "\r\n" + "\r\n" +
                    "上書きされますが、よろしいですか？",
                    0,
                    MessageBoxButtons.YesNo,
                    MessageBoxDefaultButton.Button1);

                if (checkDialogResult != DialogResult.Yes)
                {
                    return -1;
                }
            }
            else if (pasteCheck == 2)
            {
                TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "対象行に編集不可商品が存在するため、選択できません。",
                    0,
                    MessageBoxButtons.OK);

                return -1;
            }

            this._salesDetailDataTable.AcceptChanges();

            // 在庫情報のみクリア
            this._salesSlipInputAcs.ClearSalesDetailStockInfo(salesRowNo);

            // 行値引情報をセット
            this._salesSlipInputAcs.SettingSalesDetailRowLineDiscount(salesRowNo);


            // 品名へ移動
            //this.uGrid_Details.ActiveCell = this.uGrid_Details.ActiveRow.Cells[this._salesDetailDataTable.GoodsNameColumn.ColumnName];
            //this.MoveNextAllowEditCell(true);

            // 現在庫数調整
            this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

            // フッタ部明細情報更新イベントコール処理
            //this.SettingFooterEventCall(this.GetActiveRowSalesRowNo());

            // 車両情報設定イベントコール処理
            //this.SettingCarInfoEventCall(this.GetActiveRowSalesRowNo());

            //this.SettingGrid();

            //>>>2013/04/06
            // SCM回答用BLコードリストの更新
            this._salesSlipInputAcs.OperateOriginalBLGoodsCodeMap(salesRowNo, "LINEDISCOUNT");
            //<<<2013/04/06

            return 0;
        }

        # endregion

        # region 商品値引きボタンクリック
        /// <summary>
        /// 商品値引きボタンクリックイベント
        /// </summary>
        public int uButtonGoodsDiscountClick(int parmRowIndex)
        {
            // ----UPD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
            //// ActiveRowインデックス取得処理
            //int rowIndex = parmRowIndex;
            //if (rowIndex == -1) return -1;
            //
            //int salesRowNo = this._salesDetailDataTable[rowIndex].SalesRowNo;
            //
            //List<int> checkStockRowNoList = new List<int>();
            //checkStockRowNoList.Add(salesRowNo);
            //int pasteCheck = this._salesSlipInputAcs.CheckPasteSalesDetailRow(checkStockRowNoList, rowIndex);
            //
            //if (pasteCheck == 1)
            //{
            //    DialogResult checkDialogResult = TMsgDisp.Show(
            //        new Form(),
            //        emErrorLevel.ERR_LEVEL_QUESTION,
            //        "",
            //        "対象行に商品が入力されています。" + "\r\n" + "\r\n" +
            //        "上書きされますが、よろしいですか？",
            //        0,
            //        MessageBoxButtons.YesNo,
            //        MessageBoxDefaultButton.Button1);
            //
            //    if (checkDialogResult != DialogResult.Yes)
            //    {
            //        return -1;
            //    }
            //}
            //else if (pasteCheck == 2)
            //{
            //    TMsgDisp.Show(
            //        new Form(),
            //        emErrorLevel.ERR_LEVEL_INFO,
            //        "",
            //        "対象行に編集不可商品が存在するため、選択できません。",
            //        0,
            //        MessageBoxButtons.OK);
            //
            //    return -1;
            //}
            //
            //this._salesDetailDataTable.AcceptChanges();
            //
            //// 行値引情報をセット
            //this._salesSlipInputAcs.SettingSalesDetailRowGoodsDiscount(salesRowNo);
            //
            ////if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch)
            ////{
            ////    this.uGrid_Details.ActiveCell = this.uGrid_Details.ActiveRow.Cells[this._salesDetailDataTable.GoodsNoColumn.ColumnName];
            ////}
            ////else
            ////{
            ////    this.uGrid_Details.ActiveCell = this.uGrid_Details.ActiveRow.Cells[this._salesDetailDataTable.BLGoodsCodeColumn.ColumnName];
            ////}
            ////this.MoveNextAllowEditCell(true);
            //
            //// 現在庫数調整
            //this._salesSlipInputAcs.SalesDetailStockInfoAdjust();
            //
            //// フッタ部明細情報更新イベントコール処理
            ////this.SettingFooterEventCall(this.GetActiveRowSalesRowNo());
            //
            ////// 車両情報設定イベントコール処理
            ////this.SettingCarInfoEventCall(this.GetActiveRowSalesRowNo());
            //
            ////if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch)
            ////{
            ////    this.SettingFocus(this._salesSlipInputAcs.SalesDetailDataTable.GoodsNoColumn.ColumnName);
            ////}
            ////else if (this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.BLCodeSearch)
            ////{
            ////    this.SettingFocus(this._salesSlipInputAcs.SalesDetailDataTable.BLGoodsCodeColumn.ColumnName);
            ////}
            //
            ////this.SettingGrid();
            //
            ////this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
            ////this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
            //
            //return 0;
            //parmRowIndexは-1000である場合：入力モードが値引き（一括値引ボタンを押し）
            if (parmRowIndex == -1000)
            {
                //行No.
                int indexRow = 1;

                this._discountAllLineflag = true; //一括値引フラグ
                // 売上明細データテーブル更新
                this._salesDetailDataTable.AcceptChanges();

                // 行値引情報をセット
                foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
                {
                    if (row != null)
                    {
                        this._salesSlipInputAcs.ClearSalesDetailRow(indexRow);

                        row.SalesRowNo = indexRow;
                        row.EditStatus = SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount;      // 商品値引ステータス
                        row.SalesSlipCdDtl = (int)SalesSlipInputAcs.SalesSlipCdDtl.Discount;                         // 売上伝票区分(明細)
                        row.ShipmentCntDisplay = -1 * row.ShipmentCntDisplay;
                        row.ShipmentCnt = (this._salesSlipInputAcs.SalesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;

                        if (this._salesSlipInputAcs.SalesSlip.ConsTaxLayMethod == (int)SalesSlipInputAcs.ConsTaxLayMethod.TaxExempt)
                        {
                            row.TaxationDivCd = (int)CalculateTax.TaxationCode.TaxNone; // 非課税
                        }
                        else if (this._salesSlipInputAcs.SalesSlip.TotalAmountDispWayCd == (int)SalesSlipInputAcs.TotalAmountDispWayCd.NoTotalAmount)
                        {
                            row.TaxationDivCd = (int)CalculateTax.TaxationCode.TaxExc; // 外税
                        }
                        else
                        {
                            row.TaxationDivCd = (int)CalculateTax.TaxationCode.TaxInc; // 内税
                        }

                        if (row.TaxationDivCd == (int)CalculateTax.TaxationCode.TaxNone)
                        {
                            row.TaxDiv = 1; // 非課税
                        }
                        else
                        {
                            row.TaxDiv = 0; // 課税
                        }
                        row.SalesMoneyTaxExc = row.SalesMoneyDisplay;   // 売上金額(税抜き)
                        row.SalesMoneyTaxInc = row.SalesMoneyDisplay;   // 売上金額(税込み)
                        row.SalesUnPrcTaxExcFl = row.SalesUnPrcDisplay;// 売単価(税抜き)
                        row.SalesUnPrcTaxIncFl = row.SalesUnPrcDisplay;// 売単価(税込み)
                    }

                    indexRow++;
                }

                // 現在庫数調整
                this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                this._inputModeTitle = "値引";// 入力モード

                return 0;
            }
            else
            {
            　　//行の商品値引
            // ActiveRowインデックス取得処理
            int rowIndex = parmRowIndex;
            if (rowIndex == -1) return -1;

            int salesRowNo = this._salesDetailDataTable[rowIndex].SalesRowNo;

            List<int> checkStockRowNoList = new List<int>();
            checkStockRowNoList.Add(salesRowNo);
            int pasteCheck = this._salesSlipInputAcs.CheckPasteSalesDetailRow(checkStockRowNoList, rowIndex);

            if (pasteCheck == 1)
            {
                DialogResult checkDialogResult = TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_QUESTION,
                    "",
                    "対象行に商品が入力されています。" + "\r\n" + "\r\n" +
                    "上書きされますが、よろしいですか？",
                    0,
                    MessageBoxButtons.YesNo,
                    MessageBoxDefaultButton.Button1);

                if (checkDialogResult != DialogResult.Yes)
                {
                    return -1;
                }
            }
            else if (pasteCheck == 2)
            {
                TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "対象行に編集不可商品が存在するため、選択できません。",
                    0,
                    MessageBoxButtons.OK);

                return -1;
            }

            this._salesDetailDataTable.AcceptChanges();

            // 行値引情報をセット
            this._salesSlipInputAcs.SettingSalesDetailRowGoodsDiscount(salesRowNo);

            // 現在庫数調整
            this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                return 0;
            }
            // ----UPD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<
        }
        # endregion

        # region 注釈ボタンクリックイベント
        /// <summary>
        /// 注釈ボタンクリックイベント
        /// </summary>
        public int uButtonAnnotationClick(int parmRowIndex)
        {
            // ActiveRowインデックス取得処理
            int rowIndex = parmRowIndex;
            if (rowIndex == -1) return -1;

            int salesRowNo = this._salesDetailDataTable[rowIndex].SalesRowNo;

            List<int> checkStockRowNoList = new List<int>();
            checkStockRowNoList.Add(salesRowNo);
            int pasteCheck = this._salesSlipInputAcs.CheckPasteSalesDetailRow(checkStockRowNoList, rowIndex);

            if (pasteCheck == 1)
            {
                DialogResult checkDialogResult = TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_QUESTION,
                    "",
                    "対象行に商品が入力されています。" + "\r\n" + "\r\n" +
                    "上書きされますが、よろしいですか？",
                    0,
                    MessageBoxButtons.YesNo,
                    MessageBoxDefaultButton.Button1);

                if (checkDialogResult != DialogResult.Yes)
                {
                    return -1;
                }
            }
            else if (pasteCheck == 2)
            {
                TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "対象行に編集不可商品が存在するため、選択できません。",
                    0,
                    MessageBoxButtons.OK);

                return -1;
            }

            this._salesDetailDataTable.AcceptChanges();

            // 注釈情報をセット
            this._salesSlipInputAcs.SettingSalesDetailRowAnnotation(salesRowNo);

            // 品名へ移動
            //this.uGrid_Details.ActiveCell = this.uGrid_Details.ActiveRow.Cells[this._salesDetailDataTable.GoodsNameColumn.ColumnName];
            //this.MoveNextAllowEditCell(true);

            // フッタ部明細情報更新イベントコール処理
            //this.SettingFooterEventCall(salesRowNo);

            // 車両情報設定イベントコール処理
            //this.SettingCarInfoEventCall(salesRowNo);

            #region ●注釈行チェック
            CheckOnlyAnnotation();
            #endregion

            //>>>2013/04/06
            // SCM回答用BLコードリストの更新
            this._salesSlipInputAcs.OperateOriginalBLGoodsCodeMap(salesRowNo, "ANNOTATION");
            //<<<2013/04/06

            //this.SettingGrid();
            return 0;
        }

        # endregion

        # region 倉庫切替ボタンクリックイベント
        /// <summary>
        /// 倉庫切替ボタンクリックイベント
        /// </summary>
        public int uButtonChangeWarehouseClick(int parmSalesRowNo)
        {
            //this.ChangeWarehouse(parmSalesRowNo);//DEL 2010/05/04
            // --- ADD 2010/05/04 ---------->>>>>
            string msg = "";
            //---ADD 2011/10/29 ------------------->>>>>
            this._salesSlipInputAcs.WarehouseBtnClickFlag = true;
            this._salesSlipInputAcs.WarehouseRow = parmSalesRowNo;
            //---ADD 2011/10/29 -------------------<<<<<
            this._salesSlipInputAcs.ChangeWarehouse(parmSalesRowNo, out msg);
            if (!string.IsNullOrEmpty(msg))
            {
                // 入力倉庫チェック区分 0:無視 1:再入力 2:警告
                switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpWarehChkDiv)
                {
                    case 0:
                        break;
                    case 1:
                        {
                            TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "TODO",
                            msg,
                            0,
                            MessageBoxButtons.OK);

                            return -1;
                        }
                    case 2:
                        {
                            TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "TODO",
                            msg,
                            0,
                            MessageBoxButtons.OK);

                            break;
                        }
                }
            }
            // --- ADD 2010/05/04 ----------<<<<<

            // 明細グリッド・行単位でのセル設定
            //this.SettingGridRow(this.GetActiveRowIndex(), this._salesSlipInputAcs.SalesSlip);

            return 0;
        }

        # endregion

        # region ＴＢＯボタンクリックイベント
        /// <summary>
        /// ＴＢＯボタンクリックイベント
        /// </summary>
        public int uButtonTBOClick(int parmRowIndex)
        {
            int rowIndex = parmRowIndex;
            int salesRowNo = this._salesDetailDataTable[rowIndex].SalesRowNo;
            List<GoodsUnitData> goodsUnitDataList;
            List<int> settingSalesRowNoList;

            // TBO検索
            int status = this.SearchTBO(salesRowNo, out goodsUnitDataList);

            switch (status)
            {
                case (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN:
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "該当データが存在しません。",
                            -1,
                            MessageBoxButtons.OK);
                        //break;

                        return -1;
                    }
                case -3:
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "車輌情報が存在しません。",
                            -1,
                            MessageBoxButtons.OK);
                        //break;
                        return -1;
                    }
            }

            // 検索結果設定処理
            if ((goodsUnitDataList != null) && (goodsUnitDataList.Count != 0))
            {
                // 2009/11/25 >>>
                //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBaseForBLCodeSearch(this.GetActiveRowSalesRowNo(), salesRowNo, goodsUnitDataList, null, out settingSalesRowNoList, true, false);
                // --- UPD 2013/11/05 Y.Wakita ---------->>>>>
                //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBaseForBLCodeSearch(salesRowNo, salesRowNo, goodsUnitDataList, null, out settingSalesRowNoList, true, false, 0);
                //初期フォーカス位置が受注数の場合は出荷数に値をセットしない
                if (this._salesSlipInputAcs.CheckFocusPositionAfterBLCodeSearch(salesRowNo))
                {
                    this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBaseForBLCodeSearch(salesRowNo, salesRowNo, goodsUnitDataList, null, out settingSalesRowNoList, false, false, 0);
                }
                else
                {
                    this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBaseForBLCodeSearch(salesRowNo, salesRowNo, goodsUnitDataList, null, out settingSalesRowNoList, true, false, 0);
                }
                // --- UPD 2013/11/05 Y.Wakita ----------<<<<<
                // 2009/11/25 <<<

                // 明細グリッド設定処理
                //this.SettingGrid();

                // --- UPD 2010/01/27 -------------->>>>>
                //// 売上金額計算処理
                //this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                //// 原価金額計算処理
                //this._salesSlipInputAcs.CalculationCost(rowIndex);

                //// 明細粗利率設定処理
                //this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                //// 一式情報設定処理
                //this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                //// 車両情報設定イベントコール処理
                //this.SettingCarInfoEventCall(salesRowNo);

                //// 売上金額変更後発生イベントコール処理
                //this.SalesPriceChangedEventCall();

                //// フッタ部明細情報更新イベントコール処理
                //this.SettingFooterEventCall(salesRowNo);
                foreach (int salesRowNoIndex in settingSalesRowNoList)
                {
                    // 売上金額計算処理
                    this._salesSlipInputAcs.CalculationSalesMoney(salesRowNoIndex - 1);

                    // 原価金額計算処理
                    this._salesSlipInputAcs.CalculationCost(salesRowNoIndex - 1);

                    // 明細粗利率設定処理
                    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNoIndex);

                    // 一式情報設定処理
                    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNoIndex);

                    // 車両情報設定イベントコール処理
                    //this.SettingCarInfoEventCall(salesRowNoIndex);

                    // 売上金額変更後発生イベントコール処理
                    //this.SalesPriceChangedEventCall();

                    // フッタ部明細情報更新イベントコール処理
                    //this.SettingFooterEventCall(salesRowNoIndex);

                    // --- ADD 2013/11/05 Y.Wakita ---------->>>>>
                    // 車両情報設定イベントコール処理
                    this._salesSlipInputAcs.GetCarInfoRow(salesRowNoIndex, SalesSlipInputAcs.GetCarInfoMode.CarInfoChangeMode);

                    // 受注情報に車両情報設定
                    if (this._salesDetailDataTable[salesRowNoIndex - 1].AcceptAnOrderCnt > 0)
                    {
                        // 受注情報設定
                        this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNoIndex);

                        SalesInputDataSet.SalesDetailAcceptAnOrderRow acceptAnOrderRow = this._salesSlipInputAcs.AcptDetailDataTable.FindByDtlRelationGuid(this._salesDetailDataTable[salesRowNoIndex - 1].DtlRelationGuid);
                        if (acceptAnOrderRow != null)
                        {
                            acceptAnOrderRow.BfListPrice = 0;
                            acceptAnOrderRow.BfSalesUnitPrice = 0;
                            acceptAnOrderRow.BfUnitCost = 0;
                        }
                    }
                    // --- ADD 2013/11/05 Y.Wakita ----------<<<<<
                }
                // --- UPD 2010/01/27 --------------<<<<<
            }

            return 0;
            //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
        }

        # endregion

        # region 前行複写ボタンクリックイベント
        /// <summary>
        /// 前行複写ボタンクリックイベント
        /// </summary>
        public int uButtonCopyStockBefLineClick(int parmRowIndex)
        {
            #region 初期処理
            bool reCalcUnitPrice = false;
            bool reCalcStockPrice = false;
            bool taxChange = false;

            // ActiveRowインデックス取得処理
            int rowIndex = parmRowIndex;
            if (rowIndex == -1) return -1;
            if (rowIndex == 0) return -1;

            int salesRowNo = this._salesDetailDataTable[rowIndex].SalesRowNo;
            int befSalesRowNo = this._salesSlipInputAcs.GetInputStockInfoSalesRowNo(salesRowNo);

            if (befSalesRowNo == -1)
            {
                DialogResult dialogResult = TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "",
                    "前行情報が存在しない為、複写を行いません。　",
                    0,
                    MessageBoxButtons.OK,
                    MessageBoxDefaultButton.Button1);
                return -1;
            }

            // 売上明細データテーブル更新
            this._salesDetailDataTable.AcceptChanges();

            // 仕入情報取得
            this._salesSlipInputAcs.SettingStockTempInfo(salesRowNo);
            StockTemp stockTempCurrent = new StockTemp();
            StockTemp stockTemp = new StockTemp();
            if (this._salesSlipStockInfoInputAcs.StockTemp != null)
            {
                stockTempCurrent = this._salesSlipStockInfoInputAcs.StockTemp.Clone();
                stockTemp = stockTempCurrent.Clone();
            }

            // 前行売上明細情報取得
            SalesInputDataSet.SalesDetailRow beforeSalesDetailRow = this._salesSlipInputAcs.GetSalesDetailRow(befSalesRowNo);
            #endregion

            #region 前行情報セット
            // --- ADD 2012/09/11 Y.Wakita ---------->>>>>
            stockTemp.SupplierCd = beforeSalesDetailRow.SupplierCd; // 仕入先コード
            stockTemp.SupplierSnm = beforeSalesDetailRow.SupplierSnm; // 仕入先略称
            // --- ADD 2012/09/11 Y.Wakita ----------<<<<<
            stockTemp.StockDate = beforeSalesDetailRow.StockDate; // 仕入日
            stockTemp.PartySaleSlipNum = beforeSalesDetailRow.PartySalesSlipNum; // 仕入伝票番号
            #endregion

            #region 仕入日変更チェック
            if (stockTempCurrent.StockDate != stockTemp.StockDate)
            {
                // 計上日の再セット
                this._salesSlipStockInfoInputAcs.SettingAddUpDate(ref stockTemp);

                // ---DEL 2011/03/28---------------->>>>>
                //DialogResult dialogResult = TMsgDisp.Show(
                //    new Form(),
                //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                //    "",
                //    "仕入日が変更されました。" + "\r\n" + "\r\n" +
                //    "商品価格を再取得しますか？",
                //    0,
                //    MessageBoxButtons.YesNo,
                //    MessageBoxDefaultButton.Button1);

                //if (dialogResult == DialogResult.Yes) reCalcUnitPrice = true;

                //double taxRate = this._salesSlipInputInitDataAcs.GetTaxRate(stockTemp.StockDate);

                //if (taxRate != stockTempCurrent.SupplierConsTaxRate)
                //{
                //    stockTemp.SupplierConsTaxRate = taxRate;
                //    if (!reCalcUnitPrice) taxChange = true;
                //}
                // ---DEL 2011/03/28----------------<<<<<
            }
            #endregion

            #region 各種情報更新
            // 税率変更
            if (taxChange) reCalcStockPrice = true;

            // 単価再計算有り(掛率から一括取得)
            if (reCalcUnitPrice)
            {
                this._salesSlipStockInfoInputAcs.CalclationUnitPrice(ref stockTemp);
                reCalcStockPrice = true;
            }

            // 仕入金額再計算
            if (reCalcStockPrice)
            {
                this._salesSlipStockInfoInputAcs.CalculationStockPrice(ref stockTemp);
            }

            // メモリ上の内容と比較する
            if (stockTempCurrent != null)
            {
                ArrayList arRetList = stockTemp.Compare(stockTempCurrent);
                if (arRetList.Count > 0)
                {
                    this._salesSlipStockInfoInputAcs.Cache(stockTemp);
                    // --- UPD 2012/10/04 Y.Wakita ---------->>>>>
                    //this._salesSlipInputAcs.SettingSalesDetailRowStockTempInfo(salesRowNo);
                    this._salesSlipInputAcs.SettingSalesDetailRowStockTempInfo(salesRowNo, true);
                    // --- UPD 2012/10/04 Y.Wakita ----------<<<<<
                }
            }

            // 明細グリッド・行単位でのセル設定
            //this.SettingGridRow(rowIndex, this._salesSlipInputAcs.SalesSlip);

            // データ変更フラグプロパティをTrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            return 0;
            #endregion
        }
        # endregion

        # region 一括複写ボタンクリックイベント
        /// <summary>
        /// 一括複写ボタンクリックイベント
        /// </summary>
        public int uButtonCopyStockAllLineClick(int parmRowIndex)
        {
            #region 初期処理
            bool reCalcUnitPrice = false;
            bool reCalcStockPrice = false;
            bool taxChange = false;
            bool firstFlg = true;
            DialogResult dialogResult = DialogResult.None;

            // ActiveRowインデックス取得処理
            int rowIndex = parmRowIndex;
            if (rowIndex == -1) return -1;
            if (rowIndex == 0) return -1;

            int salesRowNo = this._salesDetailDataTable[rowIndex].SalesRowNo;
            int befSalesRowNo = this._salesSlipInputAcs.GetInputStockInfoSalesRowNo(salesRowNo);
            if (befSalesRowNo < 0) return -1;

            // 売上明細データテーブル更新
            this._salesDetailDataTable.AcceptChanges();

            // 前行売上明細情報取得
            SalesInputDataSet.SalesDetailRow beforeSalesDetailRow = this._salesSlipInputAcs.GetSalesDetailRow(befSalesRowNo);
            #endregion

            // 複写対象行番号リスト取得
            List<int> salesRowNoList = this._salesSlipInputAcs.GetInputStockInfoSalesRowNoList();

            foreach (int rowNo in salesRowNoList)
            {
                if (rowNo < salesRowNo) continue;

                reCalcUnitPrice = false;
                reCalcStockPrice = false;
                taxChange = false;

                // 仕入情報取得
                this._salesSlipInputAcs.SettingStockTempInfo(rowNo);
                StockTemp stockTempCurrent = new StockTemp();
                StockTemp stockTemp = new StockTemp();
                if (this._salesSlipStockInfoInputAcs.StockTemp != null)
                {
                    stockTempCurrent = this._salesSlipStockInfoInputAcs.StockTemp.Clone();
                    stockTemp = stockTempCurrent.Clone();
                }

                #region 前行情報セット
                // --- ADD 2012/09/11 Y.Wakita ---------->>>>>
                stockTemp.SupplierCd = beforeSalesDetailRow.SupplierCd; // 仕入先コード
                stockTemp.SupplierSnm = beforeSalesDetailRow.SupplierSnm; // 仕入先略称
                // --- ADD 2012/09/11 Y.Wakita ----------<<<<<
                stockTemp.StockDate = beforeSalesDetailRow.StockDate; // 仕入日
                stockTemp.PartySaleSlipNum = beforeSalesDetailRow.PartySalesSlipNum; // 仕入伝票番号
                #endregion

                #region 仕入日変更チェック
                if (stockTempCurrent.StockDate != stockTemp.StockDate)
                {
                    // 計上日の再セット
                    this._salesSlipStockInfoInputAcs.SettingAddUpDate(ref stockTemp);

                    // ---DEL 2011/03/28------------>>>>>
                    //if (firstFlg)
                    //{
                    //    dialogResult = TMsgDisp.Show(
                    //        new Form(),
                    //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //        "",
                    //        "仕入日が変更されました。" + "\r\n" + "\r\n" +
                    //        "商品価格を再取得しますか？",
                    //        0,
                    //        MessageBoxButtons.YesNo,
                    //        MessageBoxDefaultButton.Button1);
                    //    firstFlg = false;
                    //}
                    //if (dialogResult == DialogResult.Yes) reCalcUnitPrice = true;

                    //double taxRate = this._salesSlipInputInitDataAcs.GetTaxRate(stockTemp.StockDate);

                    //if (taxRate != stockTempCurrent.SupplierConsTaxRate)
                    //{
                    //    stockTemp.SupplierConsTaxRate = taxRate;
                    //    if (!reCalcUnitPrice) taxChange = true;
                    //}
                    // ---DEL 2011/03/28------------<<<<<
                }
                #endregion

                #region 各種情報更新
                // 税率変更
                if (taxChange) reCalcStockPrice = true;

                // 単価再計算有り(掛率から一括取得)
                if (reCalcUnitPrice)
                {
                    this._salesSlipStockInfoInputAcs.CalclationUnitPrice(ref stockTemp);
                    reCalcStockPrice = true;
                }

                // 仕入金額再計算
                if (reCalcStockPrice)
                {
                    this._salesSlipStockInfoInputAcs.CalculationStockPrice(ref stockTemp);
                }

                // メモリ上の内容と比較する
                if (stockTempCurrent != null)
                {
                    ArrayList arRetList = stockTemp.Compare(stockTempCurrent);
                    if (arRetList.Count > 0)
                    {
                        this._salesSlipStockInfoInputAcs.Cache(stockTemp);
                        // --- UPD 2012/10/04 Y.Wakita ---------->>>>>
                        //this._salesSlipInputAcs.SettingSalesDetailRowStockTempInfo(rowNo);
                        this._salesSlipInputAcs.SettingSalesDetailRowStockTempInfo(rowNo, true);
                        // --- UPD 2012/10/04 Y.Wakita ----------<<<<<
                    }
                }

                // 明細グリッド・行単位でのセル設定
                //this.SettingGridRow(rowNo - 1, this._salesSlipInputAcs.SalesSlip);

                // データ変更フラグプロパティをTrueにする
                this._salesSlipInputAcs.IsDataChanged = true;
                #endregion
            }
            return 0;
        }
        # endregion

        # region 在庫検索ボタンクリックイベント
        /// <summary>
        /// 在庫検索ボタンクリックイベント
        /// </summary>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        public int uButtonStockSearchClick(int parmRowIndex)
        {
            this._salesDetailDataTable.AcceptChanges();

            // ActiveRowインデックス取得処理
            int rowIndex = parmRowIndex;
            if (rowIndex == -1) return -1;

            // 売上行番号を取得
            int salesRowNo = this._salesDetailDataTable[rowIndex].SalesRowNo;

            // メーカーコード／商品コードを取得
            string goodsCode = this._salesDetailDataTable[rowIndex].GoodsNo;
            int makerCode = this._salesDetailDataTable[rowIndex].GoodsMakerCd;

            // 在庫検索ガイドを起動
            object retObj;
            StockSearchGuide stockSearchGuide = new StockSearchGuide();
            stockSearchGuide.IsMultiSelect = true;
            StockSearchPara para = new StockSearchPara();
            para.EnterpriseCode = this._enterpriseCode;
            para.SectionCode = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.14 DEL
            //DialogResult dialogResult = stockSearchGuide.ShowGuide(this, StockSearchGuide.emSearchMode.GoodsStock, true, para, out retObj);
            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.14 DEL
            // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009.07.14 ADD
            //DialogResult dialogResult = stockSearchGuide.ShowGuide(new Form(), StockSearchGuide.emSearchMode.GoodsStock, false, para, out retObj); // DEL イン晶晶 2015/05/12 for Redmine#45799
            //------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            // ウィンドの表示位置をセットする
            stockSearchGuide.StartPosition = FormStartPosition.CenterScreen;
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dialogResult;
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dialogResult = stockSearchGuide.ShowGuide(wrp, StockSearchGuide.emSearchMode.GoodsStock, false, para, out retObj);
            //}
            //else
            //{
            //    dialogResult = stockSearchGuide.ShowGuide(this._salesSlipInputAcs.Owner, StockSearchGuide.emSearchMode.GoodsStock, false, para, out retObj);
            //}
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            //------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            DialogResult dialogResult = stockSearchGuide.ShowGuide(this._salesSlipInputAcs.Owner, StockSearchGuide.emSearchMode.GoodsStock, false, para, out retObj); // ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応

            // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009.07.14 ADD

            if (dialogResult == DialogResult.OK)
            {
                #region 明細へデータ展開
                List<Stock> stockList = retObj as List<Stock>;

                if ((stockList != null) && (stockList.Count > 0))
                {
                    List<int> makerCodeList = new List<int>();
                    List<string> goodsCodeList = new List<string>();
                    List<GoodsUnitData> goodsUnitDataList;
                    List<List<GoodsUnitData>> goodsUnitDataListList;
                    string msg;

                    foreach (Stock ret in stockList)
                    {
                        makerCodeList.Add(ret.GoodsMakerCd);
                        goodsCodeList.Add(ret.GoodsNo);
                    }

                    this._salesSlipInputAcs.SearchPartsFromGoodsNoNonVariousSearchWholeWord(this._salesSlipInputAcs.SalesSlip, makerCodeList, goodsCodeList, out goodsUnitDataListList, out msg);
                    this._salesSlipInputInitDataAcs.GetGoodsUnitDataListFromListList(goodsUnitDataListList, out goodsUnitDataList);

                    // 商品マスタ情報設定処理
                    List<int> settingSalesRowNoList;
                    int activeSalesRowNo = salesRowNo;
                    this._salesSlipInputAcs.SalesDetailRowGoodsSetting_StockBase(salesRowNo, activeSalesRowNo, goodsUnitDataList, stockList, out settingSalesRowNoList, true, false);

                    // 明細グリッド設定処理
                    //this.SettingGrid();

                    foreach (int rowNo in settingSalesRowNoList)
                    {
                        // 売上金額計算処理
                        this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);

                        // 原価金額計算処理
                        this._salesSlipInputAcs.CalculationCost(rowNo - 1);

                        // 明細粗利率設定処理
                        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(rowNo);

                        // 一式情報設定処理
                        this._salesSlipInputAcs.ConstructionCompleteInfo(rowNo);

                        // 車両情報設定イベントコール処理
                        //this.SettingCarInfoEventCall(rowNo);

                        // --- ADD 2010/07/01 ---------->>>>>
                        // 発注情報設定処理
                        this._salesSlipInputAcs.SettingUOEOrderDtlRowForNew(rowNo);
                        this._salesSlipInputAcs.DefaultSettingUOEOrderDtlRow(rowNo);
                        this._salesSlipInputAcs.SettingSalesDetailRowUOEOrderDtl(salesRowNo);
                        // --- ADD 2010/07/01 ----------<<<<<

                        // --- ADD　譚洪 K2014/02/17 ---- >>>>>
                        if (this._salesSlipInputInitDataAcs.Opt_NoBuTo == (int)SalesSlipInputInitDataAcs.Option.ON)
                        {
                            object retNobuto = this._salesSlipInputInitDataAcs.MyMethodNobuto.Invoke(this._salesSlipInputInitDataAcs.ObjNobuto,
                                               new object[] { this._enterpriseCode, this._salesDetailDataTable[rowNo - 1].GoodsNo, this._salesDetailDataTable[rowNo - 1].GoodsMakerCd });

                            if ((int)retNobuto == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                            {
                                this._salesDetailDataTable[rowNo - 1].SalesCode = 1;
                            }
                            else
                            {
                                this._salesDetailDataTable[rowNo - 1].SalesCode = 0;
                            }
                        }
                        // --- ADD　譚洪 K2014/02/17 ---- <<<<<
                    }

                    // 現在庫数調整
                    this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                    // 売上金額変更後発生イベントコール処理
                    // this.SalesPriceChangedEventCall();

                    // フッタ部明細情報更新イベントコール処理
                    //this.SettingFooterEventCall(salesRowNo);

                    // データ変更フラグプロパティをTrueにする
                    this._salesSlipInputAcs.IsDataChanged = true;
                }
                #endregion

                //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode);
                //this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
            }

            return 0;
        }

        # endregion

        // ADD 2010/09/13 --- >>>>
        /// <summary>
        /// グリッドセルアップデート後イベント
        /// </summary>
        /// <param name="rowIndexParm">売上行番号</param>
        /// <param name="cellValue">セルの値</param>
        /// <param name="beforeCellValue">セルの前回値</param>
        /// <param name="columnName">列名</param>
        /// <returns></returns>
        /// <br>Note       : グリッドセルアップデート後イベントを行います。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2010/11/25</br>
        /// <br></br>
        /// <br>Update Note : 2010/11/25 譚洪 </br>
        /// <br>              数量と金額の符号が異のチェックを追加する</br>
        /// <br>Update Note : 2011/12/01 yangmj </br>
        /// <br>              REDMINE#8344の対応</br>
        public int uGridDetailsAfterCellUpdateProc(int rowIndexParm, string cellValue, string beforeCellValue, string columnName)
        {
            int resultInt = 0;
            int rowIndex = rowIndexParm;
            int salesRowNo = this._salesDetailDataTable[rowIndexParm].SalesRowNo;

            // ADD 2010/11/25 --- >>>>
            SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;
            if (salesSlip == null) return -1;
            // ADD 2010/11/25 --- <<<<


            // 売価率
            #region 売価率
            if (columnName == this._salesDetailDataTable.SalesRateColumn.ColumnName)
            {
                beforeCellValue = this._salesDetailDataTable[rowIndex].SalesRate.ToString();

                this._salesDetailDataTable[rowIndex].SalesRate = TStrConv.StrToDoubleDef(cellValue, 0);

                string salesUnPrcDisplayBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay.ToString();
                string salesUnPrcTaxExcFlBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl.ToString();
                string salesUnPrcTaxIncFlBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl.ToString();
                int salesUnPrcChngCdBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd;
                int salesMoneyInputDivBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv;

                // 売上明細データセッティング処理（売価率より単価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].SalesRate, true);

                if (this._salesDetailDataTable[rowIndex].SalesRate != 0)
                {
                    #region 原価チェック区分
                    string errMsg = string.Empty;

                    int checkResult = this._salesSlipInputAcs.CheckSalesUnitPrice1(salesRowNo, 1, out errMsg);
                    if (checkResult != 0)
                    {
                        if (checkResult == 1)
                        {
                            this._salesDetailDataTable[rowIndex].SalesRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                            this._cannotSalesRate = true;

                            this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(salesUnPrcDisplayBeforeCellValue, 0);
                            this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl = TStrConv.StrToDoubleDef(salesUnPrcTaxExcFlBeforeCellValue, 0);
                            this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl = TStrConv.StrToDoubleDef(salesUnPrcTaxIncFlBeforeCellValue, 0);
                            this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd = salesUnPrcChngCdBeforeCellValue;
                            this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv = salesMoneyInputDivBeforeCellValue;
                            this._cannotSalesUnitPrice = true;
                            return -1;
                        }
                        else if (checkResult == 3)
                        {
                            return 3;
                        }
                    }
                    #endregion
                }

                #region 原価チェック区分
                string errMsgSalesUnPrcDisplay = string.Empty;

                int checkResultSalesUnPrcDisplay = this._salesSlipInputAcs.CheckSalesUnitPrice1(salesRowNo, 0, out errMsgSalesUnPrcDisplay);
                if (checkResultSalesUnPrcDisplay != 0)
                {
                    if (checkResultSalesUnPrcDisplay == 1)
                    {
                        this._salesDetailDataTable[rowIndex].SalesRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotSalesRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(salesUnPrcDisplayBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl = TStrConv.StrToDoubleDef(salesUnPrcTaxExcFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl = TStrConv.StrToDoubleDef(salesUnPrcTaxIncFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd = salesUnPrcChngCdBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv = salesMoneyInputDivBeforeCellValue;
                        this._cannotSalesUnitPrice = true;
                        return -1;
                    }
                    else if (checkResultSalesUnPrcDisplay == 2)
                    {
                        return 1;
                    }
                    else if (checkResultSalesUnPrcDisplay == 3)
                    {
                        return 3;
                    }
                }
                #endregion

                // 売上金額計算処理
                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                // 明細粗利率設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                // 一式情報設定処理
                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

            }
            #endregion

            // 原価率
            #region 原価率
            else if (columnName == this._salesDetailDataTable.CostRateColumn.ColumnName)
            {

                beforeCellValue = this._salesDetailDataTable[rowIndex].CostRate.ToString();

                this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(cellValue, 0);

                string salesUnitCostBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCost.ToString();
                string salesUnitCostTaxExcBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc.ToString();
                string salesUnitCostTaxIncBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc.ToString();
                int salesUnitCostChngDivBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv;

                // 売上明細データセッティング処理（原単価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].CostRate, true);

                #region 原価チェック区分
                string errMsg = string.Empty;

                //int checkResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 1, out errMsg, 0,false);　//del 2012/01/18 liusy ソースマージ
                int checkResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 1, out errMsg, 0); //add 2012/01/18 liusy ソースマージ
                if (checkResult != 0)
                {
                    if (checkResult == 1)
                    {
                        this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotCostRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;
                        this._cannotSalesUnitCost = true;
                        return -1;
                    }
                    else if (checkResult == 3)
                    {
                        return 3;
                    }
                }
                #endregion

                #region 原価チェック区分
                string salesUnitCostErrMsg = string.Empty;
                //int salesUnitCostCheckResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 0, out salesUnitCostErrMsg, 0, false);  //del 2012/01/18 liusy #26917 ソースマージ
                int salesUnitCostCheckResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 0, out salesUnitCostErrMsg, 0);  //add 2012/01/18 liusy #26917 ソースマージ

                if (salesUnitCostCheckResult != 0)
                {
                    if (salesUnitCostCheckResult == 1)
                    {
                        this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotCostRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;
                        this._cannotSalesUnitCost = true;
                        return -1;
                    }
                    else if (salesUnitCostCheckResult == 3)
                    {
                        return 3;
                    }
                }
                #endregion

                // 売上明細データセッティング処理（原価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].SalesUnitCost);

                // 売単価再設定処理
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceReSetting(salesRowNo);

                // 売上明細データセッティング処理（単価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay, 1);

                // 売上金額計算処理
                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                // 原価金額計算処理
                this._salesSlipInputAcs.CalculationCost(rowIndex);

                // 明細粗利率設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                // 一式情報設定処理
                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
            }
            #endregion

            // 定価
            #region 定価
            else if (columnName == this._salesDetailDataTable.ListPriceDisplayColumn.ColumnName)
            {
                long tempListPrice = (long)this._salesDetailDataTable[rowIndex].ListPriceDisplay;

                beforeCellValue = this._salesDetailDataTable[rowIndex].ListPriceDisplay.ToString();

                this._salesDetailDataTable[rowIndex].ListPriceDisplay = (double)tempListPrice;

                double beforeListPrice = TStrConv.StrToDoubleDef(beforeCellValue, 0);

                this._salesDetailDataTable[rowIndex].ListPriceDisplay = TStrConv.StrToDoubleDef(cellValue, 0);

                string listPriceTaxExcFlBeforeCellValue = this._salesDetailDataTable[rowIndex].ListPriceTaxExcFl.ToString();
                string listPriceTaxIncFlBeforeCellValue = this._salesDetailDataTable[rowIndex].ListPriceTaxIncFl.ToString();
                string listPriceRateBeforeCellValue = this._salesDetailDataTable[rowIndex].ListPriceRate.ToString();
                string stdUnPrcLPriceBeforeCellValue = this._salesDetailDataTable[rowIndex].StdUnPrcLPrice.ToString();
                string stdUnPrcSalUnPrcBeforeCellValue = this._salesDetailDataTable[rowIndex].StdUnPrcSalUnPrc.ToString();
                string stdUnPrcUnCstBeforeCellValue = this._salesDetailDataTable[rowIndex].StdUnPrcUnCst.ToString();
                int listPriceChngCdBeforeCellValue = this._salesDetailDataTable[rowIndex].ListPriceChngCd;

                long salesMoneyTaxExcBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesMoneyTaxExc;
                long salesMoneyTaxIncBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesMoneyTaxInc;
                long salesPriceConsTaxBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesPriceConsTax;
                long salesMoneyDisplayBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesMoneyDisplay;

                string salesUnPrcDisplayBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay.ToString();
                string salesUnPrcTaxExcFlBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl.ToString();
                string salesUnPrcTaxIncFlBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl.ToString();
                int salesUnPrcChngCdBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd;
                int salesMoneyInputDivBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv;

                string salesUnitCostBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCost.ToString();
                string salesUnitCostTaxExcBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc.ToString();
                string salesUnitCostTaxIncBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc.ToString();
                int salesUnitCostChngDivBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv;

                long costTaxExcBeforeCellValue = this._salesDetailDataTable[rowIndex].CostTaxExc;
                long costTaxIncBeforeCellValue = this._salesDetailDataTable[rowIndex].CostTaxInc;
                long costBeforeCellValue = this._salesDetailDataTable[rowIndex].Cost;

                // 売上明細データセッティング処理（定価設定）
                this._salesSlipInputAcs.SalesDetailRowListPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].ListPriceDisplay);

                // 売上金額計算処理
                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                // 売価率が入力されている場合は単価再計算
                if (this._salesDetailDataTable[rowIndex].SalesRate != 0)
                {
                    // 売上明細データセッティング処理（単価設定）
                    this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].SalesRate, false);

                    // 売上金額計算処理
                    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);
                }

                // 原価率が入力されている場合は単価再計算
                if (this._salesDetailDataTable[rowIndex].CostRate != 0)
                {
                    // 売上明細データセッティング処理（原単価設定）
                    this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].CostRate, false);

                    // 原価金額計算処理
                    this._salesSlipInputAcs.CalculationCost(rowIndex);
                }

                #region 原価チェック区分
                string errMsg = string.Empty;

                int checkResult = this._salesSlipInputAcs.CheckListPrice1(salesRowNo, out errMsg);

                if (checkResult != 0)
                {
                    if (checkResult == 1)
                    {
                        this._salesDetailDataTable[rowIndex].ListPriceDisplay = beforeListPrice;
                        this._cannotListPrice = true;

                        this._salesDetailDataTable[rowIndex].ListPriceTaxExcFl = TStrConv.StrToDoubleDef(listPriceTaxExcFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].ListPriceTaxIncFl = TStrConv.StrToDoubleDef(listPriceTaxIncFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].ListPriceRate = TStrConv.StrToDoubleDef(listPriceRateBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].StdUnPrcLPrice = TStrConv.StrToDoubleDef(stdUnPrcLPriceBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].StdUnPrcSalUnPrc = TStrConv.StrToDoubleDef(stdUnPrcSalUnPrcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].StdUnPrcUnCst = TStrConv.StrToDoubleDef(stdUnPrcUnCstBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].ListPriceChngCd = listPriceChngCdBeforeCellValue;

                        this._salesDetailDataTable[rowIndex].SalesMoneyTaxExc = salesMoneyTaxExcBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesMoneyTaxInc = salesMoneyTaxIncBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesPriceConsTax = salesPriceConsTaxBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesMoneyDisplay = salesMoneyDisplayBeforeCellValue;

                        this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(salesUnPrcDisplayBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl = TStrConv.StrToDoubleDef(salesUnPrcTaxExcFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl = TStrConv.StrToDoubleDef(salesUnPrcTaxIncFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd = salesUnPrcChngCdBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv = salesMoneyInputDivBeforeCellValue;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;

                        this._salesDetailDataTable[rowIndex].CostTaxExc = costTaxExcBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].CostTaxInc = costTaxIncBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].Cost = costBeforeCellValue;

                        return -1;
                    }
                    else if (checkResult == 3)
                    {
                        return 3;
                    }
                }
                #endregion

                // 標準価格を変更する場合、「ListPriceChngCd = 1:変更あり」を設定する。
                if (this._salesDetailDataTable[rowIndex].ListPriceDisplay != beforeListPrice)
                {
                    this._salesDetailDataTable[rowIndex].ListPriceChngCd = 1;
                    this._salesDetailDataTable[rowIndex].SelectedListPriceDiv = 0;
                }

                // 売単価再設定処理
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceReSetting(salesRowNo);

                // 明細粗利率設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                // 一式情報設定処理
                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
            }
            #endregion

            // 原単価
            #region 原単価
            else if (columnName == this._salesDetailDataTable.SalesUnitCostColumn.ColumnName)
            {
                beforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCost.ToString();

                this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(cellValue, 0);

                #region 原価チェック区分
                string errMsg = string.Empty;
                //int checkResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 0, out errMsg, 0, false); //del 2012/01/18 liusy #26917 ソースマージ
                int checkResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 0, out errMsg, 0); //add 2012/01/18 liusy #26917 ソースマージ

                if (checkResult != 0)
                {
                    if (checkResult == 1)
                    {
                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        return -1;
                    }
                    else if (checkResult == 3)
                    {
                        return 3;
                    }
                }
                #endregion

                // 売上明細データセッティング処理（原価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].SalesUnitCost);

                // 売単価再設定処理
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceReSetting(salesRowNo);

                // 売上明細データセッティング処理（単価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay, 1);

                // 売上金額計算処理
                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                // 原価金額計算処理
                this._salesSlipInputAcs.CalculationCost(rowIndex);

                // 明細粗利率設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                // 一式情報設定処理
                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
            }
            #endregion

            // 売単価
            #region 売単価
            else if (columnName == this._salesDetailDataTable.SalesUnPrcDisplayColumn.ColumnName)
            {
                beforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay.ToString();

                this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(cellValue, 0);

                #region 原価チェック区分
                string errMsg = string.Empty;
                int checkResult = this._salesSlipInputAcs.CheckSalesUnitPrice1(salesRowNo, 0, out errMsg);
                if (checkResult != 0)
                {

                    if (checkResult == 1)
                    {
                        this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        return -1;
                    }
                    else if (checkResult == 2)
                    {
                        return 1;
                    }
                    else if (checkResult == 3)
                    {
                        return 3;
                    }
                }
                #endregion

                // 売上明細データセッティング処理（単価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay, 0);

                // 売上金額計算処理
                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                // 明細粗利率設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                // 一式情報設定処理
                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
            }
            #endregion

            // ADD 2010/11/25 --- >>>>
            // 売上金額
            #region 売上金額
            //------------------------------------------------------------
            // ActiveCellが「売上金額」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.SalesMoneyDisplayColumn.ColumnName)
            {
                beforeCellValue = beforeCellValue.Replace(",", string.Empty);
                cellValue = cellValue.Replace(",", string.Empty);

                this._salesDetailDataTable[rowIndex].SalesMoneyDisplay = TStrConv.StrToIntDef(cellValue, 0);

                if (string.IsNullOrEmpty(beforeCellValue))
                {
                    beforeCellValue = "0";
                }
                if (string.IsNullOrEmpty(cellValue))
                {
                    cellValue = "0";
                }

                if (Convert.ToInt64(beforeCellValue) != Convert.ToInt64(TStrConv.StrToIntDef(cellValue, 0)))
                {

                    // セキュリティの操作権限
                    if (MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.MoneyMinus) && this._salesDetailDataTable[rowIndex].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_RowDiscount && this._salesDetailDataTable[rowIndex].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount) // ADD 2010/07/13
                    {
                        // 金額にマイナスが入力不可
                        if (Convert.ToInt64(cellValue) < 0)
                        {
                            TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "TODO",
                            "マイナス値の入力はできません。",
                            -1,
                            MessageBoxButtons.OK);

                            this._salesDetailDataTable[rowIndex].SalesMoneyDisplay = Convert.ToInt64(beforeCellValue);
                            this._isOverFlow = true;
                            return -1;
                        }
                    }

                    // 売上明細データセッティング処理（売上商品区分設定）
                    this._salesSlipInputAcs.SalesDetailRowSalesGoodsCdSetting(salesRowNo, salesSlip.SalesGoodsCd, true);

                    // 明細粗利率設定処理
                    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                    // 一式情報設定処理
                    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                }
            }
            #endregion

            // 出荷数
            #region 出荷数
            //------------------------------------------------------------
            // ActiveCellが「出荷数」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName)
            {
                double cnt = TStrConv.StrToDoubleDef(cellValue, 0);
                double beforeShipmentCnt = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                this._salesDetailDataTable[rowIndexParm].ShipmentCntDisplay = TStrConv.StrToDoubleDef(cellValue, 0);

                if (cnt != beforeShipmentCnt)
                {

                    #region 数量のチェック
                    string errMsg = string.Empty;
                    SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckShipmentCnt(salesRowNo, out errMsg);

                    if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);

                        if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                        {
                            this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = beforeShipmentCnt;
                            this._isOverFlow = true;
                            return -1;
                        }
                    }

                    // 在庫切れ出荷区分による在庫数チェック
                    bool setInputError = false;
                    bool showMessage = false;
                    if (!this._salesSlipInputAcs.CheckStockCountForShipmentCnt(salesRowNo, out setInputError, out showMessage))
                    {
                        if (showMessage)
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                "出荷数が在庫数を上回ります。",
                                -1,
                                MessageBoxButtons.OK);
                        }
                        if (setInputError)
                        {
                            this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = beforeShipmentCnt;
                            this._isOverFlow = true;
                            return -1;
                        }
                    }
                    #endregion

                    // 数量設定処理
                    // --- UPD m.suzuki 2011/02/16 ---------->>>>>
                    //// --- UPD m.suzuki 2011/02/10 ---------->>>>>
                    ////this._salesSlipInputAcs.SettingSalesDetailShipmentCnt2(salesRowNo);
                    //this._salesSlipInputAcs.SettingSalesDetailShipmentCnt( salesRowNo );
                    //// --- UPD m.suzuki 2011/02/10 ----------<<<<<
                    this._salesSlipInputAcs.SettingSalesDetailShipmentCntOnChange(salesRowNo, beforeShipmentCnt);
                    // --- UPD m.suzuki 2011/02/16 ----------<<<<<

                    //>>>2010/06/10
                    // 売価率が入力されている場合は単価再計算
                    if (this._salesDetailDataTable[rowIndex].SalesRate != 0)
                    {
                        // 売単価算出基準定価を画面定価へ再セット
                        this._salesDetailDataTable[rowIndex].StdUnPrcSalUnPrc = this._salesDetailDataTable[rowIndex].ListPriceDisplay;

                        // 売上明細データセッティング処理（単価設定）
                        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].SalesRate, false);

                        // 売上金額計算処理
                        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);
                    }
                    //<<<2010/06/10

                    // 売上金額計算処理
                    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                    // 原価金額計算処理
                    this._salesSlipInputAcs.CalculationCost(rowIndex);

                    // 明細粗利率設定処理
                    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                    // 一式情報設定処理
                    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                }
            }
            #endregion

            // 受注数
            #region 受注数
            //------------------------------------------------------------
            // ActiveCellが「受注数」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.AcceptAnOrderCntDisplayColumn.ColumnName)
            {
                this._salesDetailDataTable[rowIndexParm].AcceptAnOrderCntDisplay = TStrConv.StrToDoubleDef(cellValue, 0);

                // 受注情報設定
                this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);

                double beforeAcptAnOdrCnt = TStrConv.StrToDoubleDef(beforeCellValue, 0);

                #region 数量のチェック
                string errMsg = string.Empty;
                SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckAcptAnOdrCntCnt(salesRowNo, out errMsg);

                if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        errMsg,
                        -1,
                        MessageBoxButtons.OK);

                    if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                    {
                        this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = beforeAcptAnOdrCnt;
                        this._isOverFlow = true;
                        return -1;
                    }
                }

                // 在庫切れ出荷区分による在庫数チェック
                bool setInputError = false;
                bool showMessage = false;
                if (!this._salesSlipInputAcs.CheckStockCountForAcceptAnOrderCnt(salesRowNo, out setInputError, out showMessage))
                {
                    if (showMessage)
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            "受注数が在庫数を上回ります。",
                            -1,
                            MessageBoxButtons.OK);
                    }
                    if (setInputError)
                    {
                        this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = beforeAcptAnOdrCnt;
                        this._isOverFlow = true;
                        return -1;
                    }
                }
                #endregion

                // 数量設定処理
                // --- UPD m.suzuki 2011/02/16 ---------->>>>>
                //this._salesSlipInputAcs.SettingAcptAnOdrDetailRowShipmentCnt(salesRowNo);
                this._salesSlipInputAcs.SettingAcptAnOdrDetailRowShipmentCntOnChange(salesRowNo, beforeAcptAnOdrCnt);
                // --- UPD m.suzuki 2011/02/16 ----------<<<<<

                // 数量設定処理
                // --- UPD m.suzuki 2011/02/16 ---------->>>>>
                //this._salesSlipInputAcs.SettingSalesDetailShipmentCnt(salesRowNo);
                this._salesSlipInputAcs.SettingSalesDetailShipmentCntOnChange(salesRowNo, this._salesDetailDataTable[rowIndex].ShipmentCnt);
                // --- UPD m.suzuki 2011/02/16 ----------<<<<<

                //>>>2010/06/10
                // 売価率が入力されている場合は単価再計算
                if (this._salesDetailDataTable[rowIndex].SalesRate != 0)
                {
                    // 売単価算出基準定価を画面定価へ再セット
                    this._salesDetailDataTable[rowIndex].StdUnPrcSalUnPrc = this._salesDetailDataTable[rowIndex].ListPriceDisplay;

                    // 売上明細データセッティング処理（単価設定）
                    this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].SalesRate, false);

                    // 売上金額計算処理
                    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);
                }
                //<<<2010/06/10

                //// 受注単価情報設定処理
                //this._salesSlipInputAcs.AcptAnOdrDetailRowGoodsPriceReSetting();

                // 受注売上金額計算処理
                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                // 受注原価金額計算処理
                this._salesSlipInputAcs.CalculationCost(rowIndex);

                // 一式情報設定処理
                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

            }
            #endregion
            // ADD 2010/11/25 --- <<<<
            //del by 2012/01/18 liusy  ソースマージ----->>>>>
            /*
            //----- ADD 2011/12/01 YANGMJ REDMINE#8344----->>>>>
            #region 販売区分
            //-----------------------------------------------------------------------------
            // 販売区分
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.SalesCodeColumn.ColumnName)
            {
                int code = TStrConv.StrToIntDef(cellValue, 0);
                string name = string.Empty;
                int beforeSalesCode = TStrConv.StrToIntDef(beforeCellValue, 0);
                this._salesDetailDataTable[rowIndexParm].SalesCode = TStrConv.StrToIntDef(cellValue, 0);

                bool salesCodeSchFlg = false;
                bool salesCodeMsgFlg = false;

                if ((code != 0) && (beforeSalesCode != code))
                {
                    name = this._salesSlipInputInitDataAcs.GetName_FromUserGdBd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_SalesCode, code);

                    if (name != string.Empty)
                    {
                        this._salesDetailDataTable[rowIndexParm].SalesCode = code;
                        // 受注情報設定
                        this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);

                        this._salesSlipInputAcs.SettingSalesDetailRowSalesCodeInfo(salesRowNo, code, name);

                        salesCodeSchFlg = true;
                    }
                    else
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "販売区分 [" + code + "] に該当するデータが存在しません。",
                            -1,
                            MessageBoxButtons.OK);

                        name = this._salesSlipInputInitDataAcs.GetName_FromUserGdBd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_SalesCode, beforeSalesCode);
                        if (name != string.Empty)
                        {
                            this._salesSlipInputAcs.SettingSalesDetailRowSalesCodeInfo(salesRowNo, beforeSalesCode, name);
                        }
                        else
                        {
                            this._salesSlipInputAcs.SettingSalesDetailRowSalesCodeInfo(salesRowNo, 0, string.Empty);
                        }
                        this._cannotSalesCode = true;
                        resultInt = -1;
                    }
                }

                else if ((code == 0) && (beforeSalesCode != code))
                {
                    this._salesSlipInputAcs.SettingSalesDetailRowSalesCodeInfo(salesRowNo, code, name);

                    salesCodeSchFlg = true;
                }

                SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlipInputAcs.CurrentSalesSlipNum, salesRowNo);  // ADD 2011/09/08

                int campaignSettingKind = row.CampaignSettingKind;

                #region 販売区分を変更時の価格再取得のメッセージ表示の判定方法
                if (salesCodeSchFlg)
                {
                    // 変更前のキャンペーン情報を検索しないの場合
                    if (row != null && row.CampaignCode != 0
                        && (row.CampaignPriceFl != 0 || row.CampaignRate != 0 || row.CampaignDiscountRate != 0))
                    {
                        int campaignCode = row.CampaignCode;
                        double campaignPriceFl = row.CampaignPriceFl;
                        double campaignRate = row.CampaignRate;
                        double campaignDiscountRate = row.CampaignDiscountRate;

                        this._salesSlipInputAcs.CheckReflectCampaign(row, code);

                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                        {
                            // 変更前キャンペーンの売価率、値引き、売価額は変更後の売価率、値引き、売価額と同じ
                            if (campaignCode == this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode
                                && campaignPriceFl == this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl
                                && campaignRate == this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal
                                && campaignDiscountRate == this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate)
                            {
                                this._salesSlipInputAcs._salesUnitPriceForCheck = 0;
                                this._salesSlipInputAcs._salesRateForCheck = 0;

                                // 価格情報再設定
                                this._salesSlipInputAcs.SalesDetailRowGoodsPriceForSalesCodeCheck(salesRowNo);

                                if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0)
                                {
                                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate
                                        || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                    {
                                        if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                        {
                                            salesCodeMsgFlg = true;
                                        }
                                    }
                                }
                                else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != 0)
                                {
                                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != row.CampaignPriceFl
                                        || this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate
                                        || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                    {
                                        if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                        {
                                            salesCodeMsgFlg = true;
                                        }
                                    }
                                }
                                else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0)
                                {
                                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != row.CampaignDiscountRate
                                        || this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate  
                                        || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                    {
                                        if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                        {
                                            salesCodeMsgFlg = true;
                                        }
                                    }
                                }
                                else
                                {
                                    //なし。
                                }
                            }
                            else
                            {
                                if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                    || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                    || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                {
                                    salesCodeMsgFlg = true;
                                }
                            }
                        }
                        else
                        {
                            if (campaignSettingKind == 6)
                            {
                                salesCodeMsgFlg = true;
                            }
                        }
                    }
                    // 変更前のキャンペーン情報を検索するの場合、
                    else
                    {
                        this._salesSlipInputAcs.CheckReflectCampaign(row, beforeSalesCode);

                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                        {
                            int campaignCode = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode;
                            double campaignPriceFl = this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl;
                            double campaignRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal;
                            double campaignDiscountRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate;

                            campaignSettingKind = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind;

                            row.CampaignCode = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode;
                            row.CampaignPriceFl = this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl;
                            row.CampaignRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal;
                            row.CampaignDiscountRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate;

                            row.CampaignSettingKind = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind;

                            this._salesSlipInputAcs.CheckReflectCampaign(row, code);

                            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                            {
                                // 変更前キャンペーンの売価率、値引き、売価額は変更後の売価率、値引き、売価額と同じ
                                if (campaignCode == this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode
                                    && campaignPriceFl == this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl
                                    && campaignRate == this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal
                                    && campaignDiscountRate == this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate)
                                {
                                    this._salesSlipInputAcs._salesUnitPriceForCheck = 0;
                                    this._salesSlipInputAcs._salesRateForCheck = 0;

                                    // 価格情報再設定
                                    this._salesSlipInputAcs.SalesDetailRowGoodsPriceForSalesCodeCheck(salesRowNo);

                                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0)
                                    {
                                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate
                                            || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                        {
                                            if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                            {
                                                salesCodeMsgFlg = true;
                                            }
                                        }
                                    }
                                    else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != 0)
                                    {
                                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != row.CampaignPriceFl
                                            || this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate 
                                            || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                        {
                                            if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                            {
                                                salesCodeMsgFlg = true;
                                            }
                                        }
                                    }
                                    else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0)
                                    {
                                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != row.CampaignDiscountRate
                                            || this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate  
                                            || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                        {
                                            if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                            {
                                                salesCodeMsgFlg = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //なし。
                                    }
                                }
                                // 変更前キャンペーンの売価率、値引き、売価額は変更後の売価率、値引き、売価額と不同じ
                                else
                                {
                                    if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                        || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                        || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                    {
                                        salesCodeMsgFlg = true;
                                    }
                                }
                            }
                            else
                            {
                                if (campaignSettingKind == 6)
                                {
                                    salesCodeMsgFlg = true;
                                }
                            }
                        }
                        else
                        {
                            row.CampaignCode = 0;
                            row.CampaignPriceFl = 0;
                            row.CampaignRate = 0;
                            row.CampaignDiscountRate = 0;
                            row.CampaignSettingKind = 0;

                            this._salesSlipInputAcs.CheckReflectCampaign(row, code);

                            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                            {
                                if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                {
                                    salesCodeMsgFlg = true;
                                }
                            }
                        }
                    }
                }
                #endregion

                #region 販売区分を変更時の価格再取得のメッセージ表示
                if (salesCodeMsgFlg)
                {
                    DialogResult dialogResult = TMsgDisp.Show(
                        this._owner,
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        "販売区分が変更されました。" + "\r\n" + "\r\n" +
                        "商品価格を再取得しますか？",
                        0,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button1);

                    if (dialogResult == DialogResult.Yes)
                    {
                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                        {
                            row.CampaignCode = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode;
                            row.CampaignPriceFl = this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl;
                            row.CampaignRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal;
                            row.CampaignDiscountRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate;
                            row.CampaignSettingKind = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind;
                        }
                        else
                        {
                            row.CampaignCode = 0;
                            row.CampaignPriceFl = 0;
                            row.CampaignRate = 0;
                            row.CampaignDiscountRate = 0;
                            row.CampaignSettingKind = 0;
                        }

                        // 価格情報再設定
                        this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                        // 受注情報設定
                        this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);

                        // 売上金額計算処理
                        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                        // 原価金額計算処理
                        this._salesSlipInputAcs.CalculationCost(rowIndex);

                        // 明細粗利率設定処理
                        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                        // 一式情報設定処理
                        this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                    }
                }
                #endregion
            }
            #endregion
            //----- ADD 2011/12/01 YANGMJ REDMINE#8344-----<<<<<
            */
            //del by 2012/01/18 liusy  ソースマージ-----<<<<< 
            // データ変更フラグプロパティをTrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            return resultInt;
        }
        // ADD 2010/09/13 --- <<<<


        # region グリッドセルアップデート後イベント
        /// <summary>
        /// グリッドセルアップデート後イベント
        /// </summary>
        /// <remarks>
        /// <br>Update Note: 2011/05/30 曹文傑</br>
        /// <br>             キャンペーン売価から算出された明細で「数量のみ」変更した場合は売単価の再計算をしないように変更する</br>
        /// <br>UpdateNote : 2011/07/06 譚洪 Redmine#22777 BLコードを変更時に価格情報の再取得メッセージを出さないように仕様変更</br>
        /// <br>Update Note: 2011/07/13 豆昌紅　リサイクル区分はＲＣへ合わせる</br>
        /// <br>UpdateNote : 2011/07/29 譚洪 Redmine#23315 BLコード検索でキャンペーン対象の優良品を選択したとき、値引、売価額が反映しない為の修正</br>
        /// <br>Update Note: 2011/07/29 譚洪</br>
        /// <br>             売上伝票入力（ハイブリッドモード）で入力粗利チェックを”再入力”に設定しているが有る条件（粗利率がマイナス）の場合に伝票発行出来てします</br>
        /// <br>UpdateNote : 2011/08/12 譚洪 Redmine#23554 キャンペーンの売価「売価率、値引率、売価額」が設定されている場合は、掛率マスタの売価の設定をクリアするように仕様変更の対応</br>
        /// <br>UpdateNote : 2011/08/15 譚洪 Redmine#23554 キャンペーンの売価「売価率、値引率、売価額」が設定されている場合は、掛率マスタの売価の設定をクリアするように仕様変更の対応</br>
        /// <br>UpdateNote : 2011/09/05 譚洪 Redmine#23965 販売区分を変更時の価格再取得のメッセージ表示の対応</br>
        /// <br>UpdateNote : 2011/09/08 譚洪 Redmine#23965 販売区分を変更時の価格再取得のメッセージ表示の対応</br>
        /// <br>UpdateNote : 2011/09/14 譚洪 Redmine#25016 販売区分を変更時の価格再取得のメッセージ表示の対応</br>
        /// <br>UpdateNote : 2011/09/16 譚洪 Redmine#25195 売上伝票入力で売単価がクリアされてしまうの対応</br>
        /// <br>Update Note: 2011/10/26   鄧潘ハン Redmine#26224</br>
        /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
        /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
        /// <br>             2)F12発注選択後に販売区分を入力し登録すると、受注データ上の販売区分がセットされないので、</br>
        /// <br>             発注選択後に販売区分を入力しても受注データ上の販売区分をセットする様に変更</br>
        /// <br>Update Note: 2011/11/07   鄧潘ハン Redmine#26442 発注選択時のBO区分の初期表示の対応</br>
        /// <br>Update Note: 2012/01/17   凌小青 Redmine#27977　売上伝票入力の受注データの保存について（修正呼出モード）の修正</br>
        /// <br>Update Note: 2012/02/28 鄧潘ハン</br>
        /// <br>管理番号   : 10707327-00 2012/03/28配信分</br>
        /// <br>             Redmine#27385 原価の金額が不正についての対応</br>
        /// <br>Update Note: K2014/02/17 鄧潘ハン</br>
        /// <br>管理番号   : 10970602-00</br>
        /// <br>             ＵＳＢ登戸個別オプションＯＮ ＡＮＤ 特販管理マスタの個別</br>
        /// <br>             アセンブリが動作環境に存在する場合 ⇒オプションＯＮの対応</br>
        /// <br>Update Note: 2015/04/16 30757 佐々木 貴英</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br>             社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応</br>
        /// <br>Update Note: K2015/04/29 黄興貴</br>
        /// <br>管理番号   : 11100543-00 富士ジーワイ商事㈱ UOE取込対応</br>
        /// <br>Update Note: K2016/12/14 時シン</br>
        /// <br>管理番号   : 11202330-00</br>
        /// <br>             山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応</br>
        /// <br>Update Note: 2021/03/16 陳艶丹</br>
        /// <br>管理番号   : 11770032-00</br>
        /// <br>           : PMKOBETSU-4133 売上伝票入力原価0円障害の対応</br>
        /// <br>Update Note: 2021/05/20 陳艶丹</br>
        /// <br>管理番号   : 11770032-00</br>
        /// <br>           : BLINCIDENT-2978 受注伝票明細金額が0の障害対応</br> 
        /// <br>Update Note: K2021/07/22 陳艶丹</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>           : PMKOBETSU-4148 原価0円障害の対応</br>
        /// <br>Update Note: K2021/07/27 譚洪</br>
        /// <br>管理番号   : 11601223-00</br>
        /// <br>           : PMKOBETSU-4148 売上データ原価0円障害（登録時）</br> 
        /// </remarks>
        public int uGridDetailsAfterCellUpdate(int rowIndexParm, string cellValue, string beforeCellValue, string columnName)
        {
            int resultInt = 0;
            bool changeStock = false;   // ADD 2013/01/24 Y.Wakita

            // --- ADD 黄興貴 K2015/04/29 ---------------->>>>>
            bool showLog = true;
            if(columnName.Equals(this._salesDetailDataTable.SupplierCdColumn.ColumnName) &&
                (!string.IsNullOrEmpty(beforeCellValue)) &&
                (Convert.ToInt32(beforeCellValue) < 0))
            {
                beforeCellValue = "0";
                showLog = false;
            }
            // --- ADD 黄興貴 K2015/04/29 ----------------<<<<<

            #region ●初期処理
            //if (e.Cell == null) return;

            // 文字列項目ならばゼロ詰め処理実行
            //if (e.Cell.Column.DataType == typeof(string))
            //{
            //    if (e.Cell.Value != null)
            //    {
            //        // セル値更新
            //        this.uGrid_Details.AfterCellUpdate -= this.uGrid_Details_AfterCellUpdate;
            //        this.uGrid_Details.BeforeCellUpdate -= this.uGrid_Details_BeforeCellUpdate;
            //        e.Cell.Value = uiSetControl1.GetZeroPaddedText(e.Cell.Column.Key, e.Cell.Value.ToString().Trim());
            //        this.uGrid_Details.BeforeCellUpdate += this.uGrid_Details_BeforeCellUpdate;
            //        this.uGrid_Details.AfterCellUpdate += this.uGrid_Details_AfterCellUpdate;
            //    }
            //}

            //Infragistics.Win.UltraWinGrid.UltraGridCell cell = e.Cell;
            int salesRowNo = this._salesDetailDataTable[rowIndexParm].SalesRowNo;
            int rowIndex = rowIndexParm;
            this._cannotGoodsRead = false;
            this._cannotGoodsMakerRead = false;
            this._cannotSupplierInfoRead = false;
            this._cannotBLGoodsRead = false;
            this._cannotListPrice = false;
            this._cannotSalesUnitCost = false;
            this._cannotCostRate = false;
            this._cannotSalesUnitPrice = false;
            this._cannotSalesRate = false;
            this._isOverFlow = false;
            bool reCalcUnitPrice = false;		// 掛率による売上単価、定価、売上原価単価再計算有無
            bool reCalcStockPrice = false;		// 売上金額再計算有無
            bool taxChange = false;
            bool changeUOEOrderDtl = false;     // 発注情報項目変更区分

            SalesSlip salesSlip = this._salesSlipInputAcs.SalesSlip;
            if (salesSlip == null) return -1;

            //if (e.Cell.Value is DBNull)
            //{
            //    this.uGrid_Details.AfterCellUpdate -= this.uGrid_Details_AfterCellUpdate;
            //    this.uGrid_Details.BeforeCellUpdate -= this.uGrid_Details_BeforeCellUpdate;
            //    if ((e.Cell.Column.DataType == typeof(Int32)) ||
            //        (e.Cell.Column.DataType == typeof(Int64)) ||
            //        (e.Cell.Column.DataType == typeof(double)))
            //    {
            //        e.Cell.Value = 0;
            //    }
            //    else if (e.Cell.Column.DataType == typeof(string))
            //    {
            //        e.Cell.Value = string.Empty;
            //    }
            //    this.uGrid_Details.BeforeCellUpdate += this.uGrid_Details_BeforeCellUpdate;
            //    this.uGrid_Details.AfterCellUpdate += this.uGrid_Details_AfterCellUpdate;
            //}
            #endregion

            #region ●仕入情報設定
            this._salesSlipInputAcs.SettingStockTempInfo(salesRowNo);
            StockTemp stockTempCurrent = new StockTemp();
            StockTemp stockTemp = new StockTemp();
            if (this._salesSlipStockInfoInputAcs.StockTemp != null)
            {
                stockTempCurrent = this._salesSlipStockInfoInputAcs.StockTemp.Clone();
                stockTemp = stockTempCurrent.Clone();
            }
            #endregion

            #region ●発注情報設定
            this._salesSlipInputAcs.SettingUOEOrderDtlRow(salesRowNo);
            #endregion

            #region ●倉庫情報取得 MAKHN09332A
            List<Warehouse> warehouseList = null;
            ArrayList aList;
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            this._salesSlipInputInitDataAcs.GetWarehouseList(out warehouseList);
            if (warehouseList == null)
            {
                WarehouseAcs warehouseAcs = new WarehouseAcs();
                // 2011/01/31 >>>
                //status = warehouseAcs.Search(out aList, this._enterpriseCode, _loginSectionCode);
                status = warehouseAcs.Search(out aList, this._enterpriseCode);
                // 2011/01/31 <<<
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if (aList != null) warehouseList = new List<Warehouse>((Warehouse[])aList.ToArray(typeof(Warehouse)));
                    this._salesSlipInputInitDataAcs.SetWarehouseList(warehouseList);
                }
            }
            #endregion

            #region 品名
            //------------------------------------------------------------
            // ActiveCellが品名の場合
            //------------------------------------------------------------
            if (columnName == this._salesDetailDataTable.GoodsNameColumn.ColumnName)
            {
                this._salesDetailDataTable[rowIndexParm].GoodsName = cellValue;

                if (((string.IsNullOrEmpty(beforeCellValue)) && (!string.IsNullOrEmpty(cellValue))) ||
                    (string.IsNullOrEmpty(cellValue)))
                {
                    // --- UPD 2009/12/23 ---------->>>>>
                    // 売上明細データセッティング処理（売上商品区分設定）
                    //this._salesSlipInputAcs.SalesDetailRowSalesGoodsCdSetting(salesRowNo, salesSlip.SalesGoodsCd);
                    this._salesSlipInputAcs.SalesDetailRowSalesGoodsCdSetting(salesRowNo, salesSlip.SalesGoodsCd, false);
                    // --- UPD 2009/12/23 ----------<<<<<
                }

                // --- UPD 2009/12/23 ---------->>>>>
                if (string.IsNullOrEmpty(cellValue))
                {
                    this._salesDetailDataTable[rowIndexParm].GoodsName = beforeCellValue.Trim();

                    return -1;
                }
                // --- UPD 2009/12/23 ----------<<<<<

                // 商品名称セット
                // 2010/02/08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                //// 2010/01/28 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                ////if (this._beforeGoodsName.Trim() != e.Cell.Value.ToString().Trim())
                //if ((this._beforeGoodsName.Trim() != e.Cell.Value.ToString().Trim()) &&
                //    (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum))
                //// 2010/01/28 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                if (beforeCellValue.Trim() != cellValue.Trim())
                // 2010/02/08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                {
                    // 2010/01/28 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //// 商品コード、メーカーコードが設定されていない場合は空情報セット(用品入力)
                    //if (((string.IsNullOrEmpty(this._salesDetailDataTable[cell.Row.Index].GoodsNo)) ||
                    //     (this._salesDetailDataTable[cell.Row.Index].GoodsMakerCd == 0)) &&
                    //    ((this._salesDetailDataTable[cell.Row.Index].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_RowDiscount) &&
                    //     (this._salesDetailDataTable[cell.Row.Index].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_Annotation)))
                    //{
                    //    List<GoodsUnitData> goodsUnitDataList = new List<GoodsUnitData>();
                    //    List<Stock> stockList = new List<Stock>();
                    //    List<int> settingSalesRowNoList;
                    //    goodsUnitDataList.Add(this._salesSlipInputAcs.CreateEmptyGoods(this._salesDetailDataTable[cell.Row.Index].GoodsNo, this._salesDetailDataTable[cell.Row.Index].GoodsName, this._salesDetailDataTable[cell.Row.Index].GoodsMakerCd, this._salesDetailDataTable[cell.Row.Index].BLGoodsCode));
                    //    this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(this.GetActiveRowSalesRowNo(), salesRowNo, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true);
                    //}
                    //this._salesDetailDataTable[cell.Row.Index].GoodsNameKana = e.Cell.Value.ToString();


                    // 2010/02/08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    //if ((this._salesSlipInputAcs.SalesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) &&
                    //    (this._salesSlipInputAcs.SalesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp) &&
                    //    (this._salesSlipInputAcs.SalesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp))
                    if ((this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum) &&
                        (this._salesSlipInputAcs.SalesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_AcceptAnOrderAddUp) &&
                        (this._salesSlipInputAcs.SalesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_EstimateAddUp) &&
                        (this._salesSlipInputAcs.SalesSlip.InputMode != SalesSlipInputAcs.ctINPUTMODE_SalesSlip_ShipmentAddUp))
                    // 2010/02/08 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                    {
                        // 商品コード、メーカーコードが設定されていない場合は空情報セット(用品入力)
                        if (((string.IsNullOrEmpty(this._salesDetailDataTable[rowIndexParm].GoodsNo)) ||
                             (this._salesDetailDataTable[rowIndexParm].GoodsMakerCd == 0)) &&
                            ((this._salesDetailDataTable[rowIndexParm].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_RowDiscount) &&
                             (this._salesDetailDataTable[rowIndexParm].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_Annotation)))
                        {
                            List<GoodsUnitData> goodsUnitDataList = new List<GoodsUnitData>();
                            List<Stock> stockList = new List<Stock>();
                            List<int> settingSalesRowNoList;
                            goodsUnitDataList.Add(this._salesSlipInputAcs.CreateEmptyGoods(this._salesDetailDataTable[rowIndexParm].GoodsNo, this._salesDetailDataTable[rowIndexParm].GoodsName, this._salesDetailDataTable[rowIndexParm].GoodsMakerCd, this._salesDetailDataTable[rowIndexParm].BLGoodsCode));
                            //>>>2010/07/21
                            //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(salesRowNo, salesRowNo, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true);
                            // --- DEL 2010/10/08 --------------->>>
                            //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(salesRowNo, salesRowNo, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true, true);
                            // --- DEL 2010/10/08 ---------------<<<
                            //<<<2010/07/21

                            //this._salesSlipInputAcs.SettingSalesDetailBLGoodsInfoPart(salesRowNo, this._salesDetailDataTable[rowIndexParm].BLGoodsCode); // 2010/07/18 // 2010/07/21

                            stockTemp.StockDate = this._salesSlipInputAcs.SalesSlip.SalesDate; // 2010/09/27

                            //>>>2011/08/24
                            if (this._salesDetailDataTable[rowIndexParm].EditStatus == SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount)
                            {
                                // --- ADD 2011/12/22 ---- >>>>>>>>>
                                if (this._salesDetailDataTable[rowIndexParm].ShipmentCntDisplay == 0)
                                {
                                    this._salesDetailDataTable[rowIndexParm].ShipmentCntDisplay = -1;
                                    this._salesDetailDataTable[rowIndexParm].ShipmentCnt = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? 1 : -1;
                                }
                                // --- ADD 2011/12/22 ---- <<<<<<<<<
                                // --- DEL 2011/12/22 ---- >>>>>>>>>
                                //this._salesDetailDataTable[rowIndexParm].ShipmentCntDisplay = -1;
                                //this._salesDetailDataTable[rowIndexParm].ShipmentCnt = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? 1 : -1;
                                // --- DEL 2011/12/22 ---- <<<<<<<<<
                            }
                            else
                            {
                                // --- ADD 2011/12/22 ---- >>>>>>>>>
                                if (this._salesDetailDataTable[rowIndexParm].ShipmentCntDisplay == 0)
                                {
                                    this._salesDetailDataTable[rowIndexParm].ShipmentCntDisplay = 1;
                                    this._salesDetailDataTable[rowIndexParm].ShipmentCnt = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;
                                }
                                // --- ADD 2011/12/22 ---- <<<<<<<<<
                                // --- DEL 2011/12/22 ---- >>>>>>>>>
                                //this._salesDetailDataTable[rowIndexParm].ShipmentCntDisplay = 1;
                                //this._salesDetailDataTable[rowIndexParm].ShipmentCnt = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;
                                // --- DEL 2011/12/22 ---- <<<<<<<<<
                            }

                            this._salesDetailDataTable[rowIndexParm].AcceptAnOrderCntDefault = 0;
                            this._salesDetailDataTable[rowIndexParm].AcceptAnOrderCnt = 0;
                            this._salesDetailDataTable[rowIndexParm].AcptAnOdrAdjustCnt = 0;
                            this._salesDetailDataTable[rowIndexParm].AcptAnOdrRemainCnt = 0;
                            //<<<2011/08/24
                        }

                        //this._salesDetailDataTable[cell.Row.Index].GoodsNameKana = e.Cell.Value.ToString(); // 2010/02/08
                    }

                    this._salesDetailDataTable[rowIndexParm].GoodsNameKana = cellValue; // 2010/02/08
                    // >>>2010/05/30
                    //this._salesDetailDataTable[rowIndexParm].GoodsNameKana = cellValue; // 2010/02/08

                    // 全角⇒半角変換
                    string goodsNameKana = GetKanaString(cellValue);

                    // ガ(1文字)⇒ｶﾞ(2文字)のような変換もあるので、長さをチェックする。
                    int kanaMaxLength = ctGoodsNameMaxLength;
                    if (goodsNameKana.Length > kanaMaxLength)
                    {
                        goodsNameKana = goodsNameKana.Substring(0, kanaMaxLength);
                    }
                    this._salesDetailDataTable[rowIndexParm].GoodsNameKana = goodsNameKana;
                    // <<<2010/05/30
                    // 2010/01/28 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                }
            }
            #endregion

            #region 倉庫コード
            //------------------------------------------------------------
            // ActiveCellが倉庫コードの場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.WarehouseCodeColumn.ColumnName)
            {
                string warehouseCode = cellValue;
                //this._beforeWarehouseCode = uiSetControl1.GetZeroPaddedText(this._salesDetailDataTable.WarehouseCodeColumn.ColumnName, this._beforeWarehouseCode.Trim());
                string beforeWarehouseCode = beforeCellValue;
                this._salesDetailDataTable[rowIndexParm].WarehouseCode = cellValue;

                if (!String.IsNullOrEmpty(warehouseCode))
                {

                    string name = this._salesSlipInputInitDataAcs.GetName_FromWarehouse(warehouseCode);

                    // 在庫情報取得
                    Stock stock = this._salesSlipInputAcs.GetGoodsUnitDataDicStock(this._salesDetailDataTable[rowIndexParm].GoodsMakerCd,
                                                                                   this._salesDetailDataTable[rowIndexParm].GoodsNo,
                                                                                   this._salesDetailDataTable[rowIndexParm].WarehouseCode);

                    if (stock != null)
                    {
                        // --- ADD K2013/09/20 T.Miyamoto ------------------------------>>>>>
                        if ((this._salesSlipInputInitDataAcs.Opt_Cpm_FutabaWarehAlloc == (int)SalesSlipInputInitDataAcs.Option.ON) &&
                            (!this._salesSlipInputInitDataAcs.CheckMainSection(this._enterpriseCode, this._salesSlipInputAcs.SectionCode)))
                        {
                            // 営業所での入力時は本社倉庫・自拠点倉庫以外の入力は不可
                            if (!this._salesSlipInputAcs.CheckPriorWarehouse(warehouseCode))
                            {
                                TMsgDisp.Show(new Form()
                                             , emErrorLevel.ERR_LEVEL_EXCLAMATION
                                             , "TODO"
                                             , "この倉庫は入力できません。"
                                             , 0
                                             , MessageBoxButtons.OK);

                                // 倉庫コードを元に戻す
                                this._salesDetailDataTable[rowIndexParm].WarehouseCode = beforeCellValue;
                                warehouseCode = beforeCellValue;
                                name = this._salesSlipInputInitDataAcs.GetName_FromWarehouse(warehouseCode);
                                // 在庫情報再取得
                                stock = this._salesSlipInputAcs.GetGoodsUnitDataDicStock(this._salesDetailDataTable[rowIndexParm].GoodsMakerCd
                                                                                        , this._salesDetailDataTable[rowIndexParm].GoodsNo
                                                                                        , this._salesDetailDataTable[rowIndexParm].WarehouseCode);
                                resultInt = -1;
                                return resultInt;
                            }
                        }
                        // --- ADD K2013/09/20 T.Miyamoto ------------------------------<<<<<

                        // --- ADD 2010/05/04 ---------->>>>>
                        // 売上行番号を取得
                        if (!string.IsNullOrEmpty(stock.SectionCode) && !string.IsNullOrEmpty(LoginInfoAcquisition.Employee.BelongSectionCode))
                        {
                            if (!stock.SectionCode.Trim().Equals(LoginInfoAcquisition.Employee.BelongSectionCode.Trim()))
                            {
                                // 入力倉庫チェック区分 0:無視 1:再入力 2:警告
                                switch (this._salesSlipInputInitDataAcs.GetSalesTtlSt().InpWarehChkDiv)
                                {
                                    case 0:
                                        break;
                                    case 1:
                                        {
                                            TMsgDisp.Show(
                                            new Form(),
                                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                            "TODO",
                                            "不正な値が存在するため、登録できません。"
                                            + "\r\n"
                                            + "\r\n"
                                            + salesRowNo //this.GetActiveRowSalesRowNo()
                                            + "行目の在庫管理拠点とログイン拠点が不一致です。",
                                            0,
                                            MessageBoxButtons.OK);

                                            // 倉庫コードを元に戻す
                                            this._salesDetailDataTable[rowIndexParm].WarehouseCode = beforeCellValue;
                                            warehouseCode = beforeCellValue;
                                            name = this._salesSlipInputInitDataAcs.GetName_FromWarehouse(warehouseCode);
                                            // 在庫情報再取得
                                            stock = this._salesSlipInputAcs.GetGoodsUnitDataDicStock(this._salesDetailDataTable[rowIndexParm].GoodsMakerCd,
                                                                                                           this._salesDetailDataTable[rowIndexParm].GoodsNo,
                                                                                                           this._salesDetailDataTable[rowIndexParm].WarehouseCode);
                                            resultInt = -1;// ADD 2010/07/14
                                            break;
                                        }
                                    case 2:
                                        {
                                            TMsgDisp.Show(
                                            new Form(),
                                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                            "TODO",
                                            "在庫管理拠点とログイン拠点が不一致です。",
                                            0,
                                            MessageBoxButtons.OK);
                                            resultInt = -1;// ADD 2010/07/14
                                            break;
                                        }
                                }
                            }
                        }
                        // --- ADD 2010/05/04 ----------<<<<<
                        this._salesSlipInputAcs.SettingSalesDetailWarehouseInfo(salesRowNo, warehouseCode, name);
                        this._salesSlipInputAcs.HasStockInfo = true; // ADD 2011/07/20 在庫情報を設定処理場合、現在庫数加算しません。
                        this._salesSlipInputAcs.SettingSalesDetailStockInfo(salesRowNo, stock);
                        // --- ADD 2011/11/18 ----------<<<<<
                        // 受注情報設定
                        this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                        // ---ADD 陳艶丹 2021/05/20 BLINCIDENT-2978 受注伝票明細金額が0の障害対応 ------>>>>>
                        // 受注データのみ作成する場合
                        if (this._salesDetailDataTable[salesRowNo].ShipmentCntDisplay == CtShipmentCntZero)
                        {
                            // 受注売上金額計算処理
                            this._salesSlipInputAcs.CalculationSalesMoney(this._salesDetailDataTable[salesRowNo].SalesSlipNum, salesRowNo);

                            // 受注原価金額計算処理
                            this._salesSlipInputAcs.CalculationCost(this._salesDetailDataTable[salesRowNo].SalesSlipNum, salesRowNo);
                        }
                        // ---ADD 陳艶丹 2021/05/20 BLINCIDENT-2978 受注伝票明細金額が0の障害対応 ------<<<<<

                        // --- ADD 2011/11/18 ----------<<<<<
                        this._salesSlipInputAcs.SalesDetailStockInfoAdjust(beforeWarehouseCode, this._salesDetailDataTable[rowIndexParm].GoodsNo, this._salesDetailDataTable[rowIndexParm].GoodsMakerCd);

                        // ADD 2013/04/02② T.Miyamoto ------------------------------>>>>>
                        if (this._salesSlipInputInitDataAcs.Opt_SalesCostCtrl == (int)SalesSlipInputInitDataAcs.Option.ON)
                        {
                            //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ---------------->>>>>
                            // 売上明細データセッティング処理（定価設定）用に現在の表示定価金額を一時退避
                            double tempReturnListPrice = this._salesDetailDataTable[rowIndexParm].ListPriceDisplay;
                            //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ----------------<<<<<

                            // 原価再取得
                            this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                            //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ---------------->>>>>
                            // 明細項目変更時の標準価格及び売単価変更処理
                            this.SalesDetailRowSalesUnitPriceReSetting(salesRowNo, tempReturnListPrice);
                            //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ----------------<<<<<
                            //-----ADD K2021/07/22 陳艶丹 PMKOBETSU-4148 ----->>>>>
                            // 原価金額計算処理
                            this._salesSlipInputAcs.CalculationCost(rowIndex);
                            // 明細粗利率設定処理
                            this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);
                            //-----ADD K2021/07/22 陳艶丹 PMKOBETSU-4148 -----<<<<<
                        }
                        // ADD 2013/04/02② T.Miyamoto ------------------------------<<<<<
                    }
                    else
                    {
                        if ((this._salesSlipInputAcs.SalesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) &&
                            (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum) &&
                            (this._salesDetailDataTable[rowIndex].SalesSlipDtlNumSrc != 0))
                        {
                            if (name != string.Empty)
                            {
                                this._salesSlipInputAcs.ClearSalesDetailStockInfo(salesRowNo);
                                this._salesSlipInputAcs.SettingSalesDetailWarehouseInfo(salesRowNo, warehouseCode, name);
                            }
                            else
                            {
                                TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    "",
                                    "倉庫コード [" + warehouseCode + "] に該当する倉庫マスタが存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);

                                // 倉庫コードを元に戻す
                                this._salesDetailDataTable[rowIndex].WarehouseCode = beforeWarehouseCode;
                                resultInt = -1;// ADD 2010/07/14
                            }
                        }
                        else
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_INFO,
                                "",
                                "倉庫コード [" + warehouseCode + "] に該当する在庫情報が存在しません。",
                                -1,
                                MessageBoxButtons.OK);

                            // 倉庫コードを元に戻す
                            this._salesDetailDataTable[rowIndex].WarehouseCode = beforeWarehouseCode;
                            resultInt = -1;// ADD 2010/07/14
                        }
                    }
                }
                else
                {
                    // 倉庫名称設定処理
                    this._salesSlipInputAcs.ClearSalesDetailStockInfo(salesRowNo);

                    // 現在庫数調整
                    this._salesSlipInputAcs.SalesDetailStockInfoAdjust();
                }
            }
            #endregion

            #region 商品属性(純正優良)
            else if (columnName == this._salesDetailDataTable.GoodsKindCodeColumn.ColumnName)
            {
                int goodsKindCode = TStrConv.StrToIntDef(cellValue.Trim(), -1);
                int beforegoodsKindCode = TStrConv.StrToIntDef(beforeCellValue.Trim(), 0);
                if ((goodsKindCode != 1) && (goodsKindCode != 0))
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        "[0:純正]または[1:優良]を入力して下さい。",
                        -1,
                        MessageBoxButtons.OK);

                    // 純正優良コードを元に戻す
                    this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].GoodsKindCode = beforegoodsKindCode;
                    resultInt = -1;
                }
                else
                {
                    this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].GoodsKindCode = goodsKindCode;
                }
            }
            #endregion

            #region 販売区分
            //-----------------------------------------------------------------------------
            // 販売区分
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.SalesCodeColumn.ColumnName)
            {
                int code = TStrConv.StrToIntDef(cellValue, 0);
                string name = string.Empty;
                int beforeSalesCode = TStrConv.StrToIntDef(beforeCellValue, 0);
                this._salesDetailDataTable[rowIndexParm].SalesCode = TStrConv.StrToIntDef(cellValue, 0);

                bool salesCodeSchFlg = false; // ADD 2011/09/05
                bool salesCodeMsgFlg = false; // ADD 2011/09/05

                if ((code != 0) && (beforeSalesCode != code))
                {
                    name = this._salesSlipInputInitDataAcs.GetName_FromUserGdBd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_SalesCode, code);

                    if (name != string.Empty)
                    {
                        //>>>2011/10/29
                        this._salesDetailDataTable[rowIndexParm].SalesCode = code;
                        // --- UPD 2013/09/27 T.Miyamoto ------------------------------>>>>>
                        ////>>>2012/02/27
                        ////// 受注情報設定
                        ////this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                        //if ((this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum) ||
                        //    ((this._salesSlipInputAcs.SalesSlip.SalesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum) &&
                        //     (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)))
                        //{
                        //    // --- UPD 2013/07/24 Y.Wakita ---------->>>>>
                        //    //// 受注情報設定
                        //    //this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                        //    if (this._salesDetailDataTable[salesRowNo - 1].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_AddUpNew) // 計上新規
                        //    {
                        //        // 受注情報設定
                        //        this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                        //    }
                        //    // --- UPD 2013/07/24 Y.Wakita ----------<<<<<
                        //}
                        ////<<<2012/02/27
                        this._salesSlipInputAcs.ExistSettingSalesDetailAcceptAnOrder(salesRowNo);
                        // --- UPD 2013/09/27 T.Miyamoto ------------------------------<<<<<
                        //<<<2011/10/29

                        // --- ADD 2014/04/07 Y.Wakita ---------->>>>>
                        // 売上金額計算処理
                        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                        // 原価金額計算処理
                        this._salesSlipInputAcs.CalculationCost(rowIndex);

                        // 明細粗利率設定処理
                        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                        // 一式情報設定処理
                        this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                        // --- ADD 2014/04/07 Y.Wakita ----------<<<<<

                        this._salesSlipInputAcs.SettingSalesDetailRowSalesCodeInfo(salesRowNo, code, name);

                        salesCodeSchFlg = true; // ADD 2011/09/05

                        #region DEL 2011/09/05
                        //キャンペーンの売価率、値引き、売価額変更の場合、メッセージを出力する
                        // ---ADD 2011/08/29--------------------->>>>>
                        //if (this._salesSlipInputAcs.CheckReflectCampaign(salesRowNo))
                        //{
                        //>>>2011/08/24
                        //// ---ADD 2011/05/30--------------------->>>>>
                        //DialogResult dialogResult = TMsgDisp.Show(
                        //    this._owner,
                        //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        //    "",
                        //    "販売区分が変更されました。" + "\r\n" + "\r\n" +
                        //    "商品価格を再取得しますか？",
                        //    0,
                        //    MessageBoxButtons.YesNo,
                        //    MessageBoxDefaultButton.Button1);

                        //if (dialogResult == DialogResult.Yes)
                        //{
                        //    // 価格情報再設定
                        //    this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                        //    // 受注情報設定
                        //    this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);

                        //    // 売上金額計算処理
                        //    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                        //    // 原価金額計算処理
                        //    this._salesSlipInputAcs.CalculationCost(rowIndex);

                        //    // 明細粗利率設定処理
                        //    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                        //    // 一式情報設定処理
                        //    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                        //    reCalcUnitPrice = true;
                        //}
                        //// ---ADD 2011/05/30---------------------<<<<<

                        // ---ADD 2011/08/29---------------------<<<<<
                        // ---ADD 2011/05/30--------------------->>>>>
                        //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                        //{
                        //    SalesCodeMsgFlg = true;
                        //}
                        // ---ADD 2011/05/30---------------------<<<<<
                        //}// ADD 2011/08/29
                        //else
                        //{
                        //    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                        //    {
                        //        this._salesSlipInputAcs._salesUnitPriceForCheck = 0;
                        //        this._salesSlipInputAcs._salesRateForCheck = 0;

                        //        // 価格情報再設定
                        //        this._salesSlipInputAcs.SalesDetailRowGoodsPriceForSalesCodeCheck(salesRowNo);

                        //        SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlipInputAcs.CurrentSalesSlipNum, salesRowNo);

                        //        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0)
                        //        {
                        //            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate
                        //                || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                        //            {
                        //                SalesCodeMsgFlg = true;
                        //            }
                        //        }
                        //        else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != 0)
                        //        {
                        //            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != row.CampaignPriceFl
                        //                || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                        //            {
                        //                SalesCodeMsgFlg = true;
                        //            }
                        //        }
                        //        else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0)
                        //        {
                        //            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != row.CampaignDiscountRate
                        //                || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                        //            {
                        //                SalesCodeMsgFlg = true;
                        //            }
                        //        }
                        //        else
                        //        {
                        //            //なし。
                        //        }
                        //    }

                        //}

                        //if (SalesCodeMsgFlg)
                        //{
                        //    DialogResult dialogResult = TMsgDisp.Show(
                        //    this._owner,
                        //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        //    "",
                        //    "販売区分が変更されました。" + "\r\n" + "\r\n" +
                        //    "商品価格を再取得しますか？",
                        //    0,
                        //    MessageBoxButtons.YesNo,
                        //    MessageBoxDefaultButton.Button1);

                        //    if (dialogResult == DialogResult.Yes)
                        //    {
                        //        // 価格情報再設定
                        //        this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                        //        // 受注情報設定
                        //        this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);

                        //        // 売上金額計算処理
                        //        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                        //        // 原価金額計算処理
                        //        this._salesSlipInputAcs.CalculationCost(rowIndex);

                        //        // 明細粗利率設定処理
                        //        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                        //        // 一式情報設定処理
                        //        this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                        //        reCalcUnitPrice = true;
                        //    }
                        //}
                        //reCalcUnitPrice = true;
                        //<<<2011/08/24
                        #endregion
                    }
                    else
                    {
                        // DEL 譚洪 K2014/01/22 --- >>>>>
                        //TMsgDisp.Show(
                        //    new Form(),
                        //    emErrorLevel.ERR_LEVEL_INFO,
                        //    "",
                        //    "販売区分 [" + code + "] に該当するデータが存在しません。",
                        //    -1,
                        //    MessageBoxButtons.OK);
                        // DEL 譚洪 K2014/01/22 --- <<<<<
                        // ADD 譚洪 K2014/01/22 --- >>>>>
                        if (this._salesSlipInputInitDataAcs.Opt_NoBuTo == (int)SalesSlipInputInitDataAcs.Option.ON)
                        {
                            TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    "",
                                    "特販区分 [" + code + "] に該当するデータが存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);
                        }
                        else
                        {
                            TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    "",
                                    "販売区分 [" + code + "] に該当するデータが存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);
                        }
                        // ADD 譚洪 K2014/01/22 --- <<<<<

                        name = this._salesSlipInputInitDataAcs.GetName_FromUserGdBd(SalesSlipInputInitDataAcs.ctDIVCODE_UserGuideDivCd_SalesCode, beforeSalesCode);
                        if (name != string.Empty)
                        {
                            this._salesSlipInputAcs.SettingSalesDetailRowSalesCodeInfo(salesRowNo, beforeSalesCode, name);
                        }
                        else
                        {
                            this._salesSlipInputAcs.SettingSalesDetailRowSalesCodeInfo(salesRowNo, 0, string.Empty);
                        }
                        this._cannotSalesCode = true;
                        resultInt = -1;// ADD 2010/07/14
                    }
                }
                // ---ADD 2011/05/30--------------------->>>>>
                else if ((code == 0) && (beforeSalesCode != code))
                {
                    this._salesSlipInputAcs.SettingSalesDetailRowSalesCodeInfo(salesRowNo, code, name); // ADD 2011/09/05

                    salesCodeSchFlg = true; // ADD 2011/09/05

                    #region DEL 2011/09/05
                    //キャンペーンの売価率、値引き、売価額変更の場合、メッセージを出力する
                    // ---ADD 2011/08/29--------------------->>>>>
                    //if (SalesCodeMsgFlg)
                    //{

                    //    //>>>2011/08/24
                    //    //DialogResult dialogResult = TMsgDisp.Show(
                    //    //    this._owner,
                    //    //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //    //    "",
                    //    //    "販売区分が変更されました。" + "\r\n" + "\r\n" +
                    //    //    "商品価格を再取得しますか？",
                    //    //    0,
                    //    //    MessageBoxButtons.YesNo,
                    //    //    MessageBoxDefaultButton.Button1);

                    //    //if (dialogResult == DialogResult.Yes)
                    //    //{
                    //    //    // 価格情報再設定
                    //    //    this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                    //    //    // 受注情報設定
                    //    //    this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);

                    //    //    // 売上金額計算処理
                    //    //    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                    //    //    // 原価金額計算処理
                    //    //    this._salesSlipInputAcs.CalculationCost(rowIndex);

                    //    //    // 明細粗利率設定処理
                    //    //    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                    //    //    // 一式情報設定処理
                    //    //    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                    //    //    reCalcUnitPrice = true;
                    //    //}

                    //    // ---ADD 2011/08/29---------------------<<<<<
                    //DialogResult dialogResult = TMsgDisp.Show(
                    //    this._owner,
                    //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //    "",
                    //    "販売区分が変更されました。" + "\r\n" + "\r\n" +
                    //    "商品価格を再取得しますか？",
                    //    0,
                    //    MessageBoxButtons.YesNo,
                    //    MessageBoxDefaultButton.Button1);

                    //if (dialogResult == DialogResult.Yes)
                    //{
                    //    // 価格情報再設定
                    //    this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                    //    // 受注情報設定
                    //    this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);

                    //    // 売上金額計算処理
                    //    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                    //    // 原価金額計算処理
                    //    this._salesSlipInputAcs.CalculationCost(rowIndex);

                    //    // 明細粗利率設定処理
                    //    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                    //    // 一式情報設定処理
                    //    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                    //    reCalcUnitPrice = true;
                    //}
                    //    //<<<2011/08/24
                    //    // ---ADD 2011/05/30---------------------<<<<<
                    //}// ADD 2011/08/29
                    #endregion
                }

                // --- ADD K2014/04/03 Y.Wakita ---------->>>>>
                // ＵＳＢ登戸個別オプションＯＮの場合、価格再取得を行わない
                if (this._salesSlipInputInitDataAcs.Opt_NoBuTo == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    // 販売区分を変更時の価格再取得のメッセージ表示の判定方法 OFF
                    salesCodeSchFlg = false;
                    // 販売区分を変更時の価格再取得のメッセージ表示 OFF
                    salesCodeMsgFlg = false;
                }
                // --- ADD K2014/04/03 Y.Wakita ----------<<<<<

                SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlipInputAcs.CurrentSalesSlipNum, salesRowNo);  // ADD 2011/09/08

                // ---- UPD 2011/09/14 ----------- >>>>>>>>>>>>>>
                int campaignSettingKind = row.CampaignSettingKind;  // ADD 2011/09/14

                // ADD 2011/09/05 --- >>>>>
                #region 販売区分を変更時の価格再取得のメッセージ表示の判定方法
                if (salesCodeSchFlg)
                {
                    //SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlipInputAcs.CurrentSalesSlipNum, salesRowNo);

                    // 変更前のキャンペーン情報を検索しないの場合
                    if (row != null && row.CampaignCode != 0
                        && (row.CampaignPriceFl != 0 || row.CampaignRate != 0 || row.CampaignDiscountRate != 0))
                    {
                        int campaignCode = row.CampaignCode;
                        double campaignPriceFl = row.CampaignPriceFl;
                        double campaignRate = row.CampaignRate;
                        double campaignDiscountRate = row.CampaignDiscountRate;

                        this._salesSlipInputAcs.CheckReflectCampaign(row, code);

                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                        {
                            // 変更前キャンペーンの売価率、値引き、売価額は変更後の売価率、値引き、売価額と同じ
                            if (campaignCode == this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode
                                && campaignPriceFl == this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl
                                && campaignRate == this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal
                                && campaignDiscountRate == this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate)
                            {
                                this._salesSlipInputAcs._salesUnitPriceForCheck = 0;
                                this._salesSlipInputAcs._salesRateForCheck = 0;

                                // 価格情報再設定
                                this._salesSlipInputAcs.SalesDetailRowGoodsPriceForSalesCodeCheck(salesRowNo);

                                if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0)
                                {
                                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate
                                        || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                    {
                                        if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                        {
                                            salesCodeMsgFlg = true;
                                        }
                                    }
                                }
                                else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != 0)
                                {
                                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != row.CampaignPriceFl
                                        || this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate    // ADD 2011/09/08
                                        || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                    {
                                        if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                        {
                                            salesCodeMsgFlg = true;
                                        }
                                    }
                                }
                                else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0)
                                {
                                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != row.CampaignDiscountRate
                                        || this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate    // ADD 2011/09/08
                                        || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                    {
                                        if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                            || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                        {
                                            salesCodeMsgFlg = true;
                                        }
                                    }
                                }
                                else
                                {
                                    //なし。
                                }
                            }
                            else
                            {
                                if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                    || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                    || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                {
                                    salesCodeMsgFlg = true;
                                }
                            }
                        }
                        else
                        {
                            if (campaignSettingKind == 6)
                            {
                                salesCodeMsgFlg = true;
                            }

                            // --- DEL 2011/09/08 --- >>>>>
                            //row.CampaignCode = 0;
                            //row.CampaignPriceFl = 0;
                            //row.CampaignRate = 0;
                            //row.CampaignDiscountRate = 0;
                            // --- DEL 2011/09/08 --- <<<<<
                        }
                    }
                    // 変更前のキャンペーン情報を検索するの場合、
                    else
                    {
                        this._salesSlipInputAcs.CheckReflectCampaign(row, beforeSalesCode);

                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                        {
                            int campaignCode = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode;
                            double campaignPriceFl = this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl;
                            double campaignRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal;
                            double campaignDiscountRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate;

                            campaignSettingKind = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind;  // ADD 2011/09/14

                            row.CampaignCode = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode;
                            row.CampaignPriceFl = this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl;
                            row.CampaignRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal;
                            row.CampaignDiscountRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate;

                            row.CampaignSettingKind = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind;

                            this._salesSlipInputAcs.CheckReflectCampaign(row, code);

                            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                            {
                                // 変更前キャンペーンの売価率、値引き、売価額は変更後の売価率、値引き、売価額と同じ
                                if (campaignCode == this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode
                                    && campaignPriceFl == this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl
                                    && campaignRate == this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal
                                    && campaignDiscountRate == this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate)
                                {
                                    this._salesSlipInputAcs._salesUnitPriceForCheck = 0;
                                    this._salesSlipInputAcs._salesRateForCheck = 0;

                                    // 価格情報再設定
                                    this._salesSlipInputAcs.SalesDetailRowGoodsPriceForSalesCodeCheck(salesRowNo);

                                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0)
                                    {
                                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate
                                            || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                        {
                                            if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                            {
                                                salesCodeMsgFlg = true;
                                            }
                                        }
                                    }
                                    else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != 0)
                                    {
                                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != row.CampaignPriceFl
                                            || this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate    // ADD 2011/09/08
                                            || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                        {
                                            if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                            {
                                                salesCodeMsgFlg = true;
                                            }
                                        }
                                    }
                                    else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0)
                                    {
                                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != row.CampaignDiscountRate
                                            || this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != row.SalesRate    // ADD 2011/09/08
                                            || this._salesSlipInputAcs._salesUnitPriceForCheck != row.SalesUnPrcDisplay)
                                        {
                                            if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                                || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                            {
                                                salesCodeMsgFlg = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //なし。
                                    }
                                }
                                // 変更前キャンペーンの売価率、値引き、売価額は変更後の売価率、値引き、売価額と不同じ
                                else
                                {
                                    if ((campaignSettingKind != 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                        || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind != 6)
                                        || (campaignSettingKind == 6 && this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6))
                                    {
                                        salesCodeMsgFlg = true;
                                    }
                                }

                                // --- DEL 2011/09/08 --- >>>>>
                                //row.CampaignCode = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode;
                                //row.CampaignPriceFl = this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl;
                                //row.CampaignRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal;
                                //row.CampaignDiscountRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate;
                                // --- DEL 2011/09/08 --- <<<<<
                            }
                            else
                            {
                                if (campaignSettingKind == 6)
                                {
                                    salesCodeMsgFlg = true;
                                }

                                // --- DEL 2011/09/08 --- >>>>>
                                //row.CampaignCode = 0;
                                //row.CampaignPriceFl = 0;
                                //row.CampaignRate = 0;
                                //row.CampaignDiscountRate = 0;
                                // --- DEL 2011/09/08 --- <<<<<
                            }
                        }
                        else
                        {
                            // ADD 2011/09/08 --- >>>>
                            row.CampaignCode = 0;
                            row.CampaignPriceFl = 0;
                            row.CampaignRate = 0;
                            row.CampaignDiscountRate = 0;
                            row.CampaignSettingKind = 0;
                            // ADD 2011/09/08 --- <<<<

                            this._salesSlipInputAcs.CheckReflectCampaign(row, code);

                            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                            {
                                if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind == 6)
                                {
                                    salesCodeMsgFlg = true;
                                }
                            }
                            // --- DEL 2011/09/08 --- >>>>>
                            //else
                            //{
                            //    row.CampaignCode = 0;
                            //    row.CampaignPriceFl = 0;
                            //    row.CampaignRate = 0;
                            //    row.CampaignDiscountRate = 0;
                            //}
                            // --- DEL 2011/09/08 --- <<<<<
                        }
                    }
                }
                #endregion

                #region 販売区分を変更時の価格再取得のメッセージ表示
                if (salesCodeMsgFlg)
                {
                    // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ---------->>>>>
                    if (this._salesSlipInputAcs.CheckWhetherSalesPriceChange())
                    {
                    // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ----------<<<<<
                        DialogResult dialogResult = TMsgDisp.Show(
                            this._owner,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            "販売区分が変更されました。" + "\r\n" + "\r\n" +
                            "商品価格を再取得しますか？",
                            0,
                            MessageBoxButtons.YesNo,
                            MessageBoxDefaultButton.Button1);

                        if (dialogResult == DialogResult.Yes)
                        {
                            // --- ADD 2011/09/08 --- >>>>>
                            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                            {
                                row.CampaignCode = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignCode;
                                row.CampaignPriceFl = this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl;
                                row.CampaignRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal;
                                row.CampaignDiscountRate = this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate;
                                row.CampaignSettingKind = this._salesSlipInputAcs.CampaignObjGoodsStInfo.CampaignSettingKind;
                            }
                            else
                            {
                                row.CampaignCode = 0;
                                row.CampaignPriceFl = 0;
                                row.CampaignRate = 0;
                                row.CampaignDiscountRate = 0;
                                row.CampaignSettingKind = 0;
                            }
                            // --- ADD 2011/09/08 --- <<<<<
                            // ---- UPD 2011/09/14 ----------- <<<<<<<<<<<

                            //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ---------------->>>>>
                            // 売上明細データセッティング処理（定価設定）用に現在の表示定価金額を一時退避
                            double tempReturnListPrice = this._salesDetailDataTable[rowIndex].ListPriceDisplay;
                            //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ----------------<<<<<

                            // 価格情報再設定
                            this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                            // --- UPD 2013/09/27 T.Miyamoto ------------------------------>>>>>
                            //// --- UPD 2013/07/24 Y.Wakita ---------->>>>>
                            ////// 受注情報設定
                            ////this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                            //if (this._salesDetailDataTable[salesRowNo - 1].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_AddUpNew) // 計上新規
                            //{
                            //    // 受注情報設定
                            //    this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                            //}
                            //// --- UPD 2013/07/24 Y.Wakita ----------<<<<<
                            this._salesSlipInputAcs.ExistSettingSalesDetailAcceptAnOrder(salesRowNo);
                            // --- UPD 2013/09/27 T.Miyamoto ------------------------------<<<<<

                            // 売上金額計算処理
                            this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                            // 原価金額計算処理
                            this._salesSlipInputAcs.CalculationCost(rowIndex);

                            //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ---------------->>>>>
                            // 明細項目変更時の標準価格及び売単価変更処理
                            this.SalesDetailRowSalesUnitPriceReSetting(salesRowNo, tempReturnListPrice);
                            //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ----------------<<<<<

                            // 明細粗利率設定処理
                            this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                            // 一式情報設定処理
                            this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                            reCalcUnitPrice = true;
                        }
                    } // ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応
                }
                #endregion
                // ADD 2011/09/05 --- <<<<<
            }
            #endregion

            #region 出荷数
            //------------------------------------------------------------
            // ActiveCellが「出荷数」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName)
            {
                double cnt = TStrConv.StrToDoubleDef(cellValue, 0);
                double beforeShipmentCnt = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                this._salesDetailDataTable[rowIndexParm].ShipmentCntDisplay = TStrConv.StrToDoubleDef(cellValue, 0);

                if (cnt != beforeShipmentCnt)
                {

                    #region 数量のチェック
                    string errMsg = string.Empty;
                    SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckShipmentCnt(salesRowNo, out errMsg);

                    if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);

                        if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                        {
                            this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = beforeShipmentCnt;
                            this._isOverFlow = true;
                            return -1;
                        }
                    }

                    // 在庫切れ出荷区分による在庫数チェック
                    bool setInputError = false;
                    bool showMessage = false;
                    if (!this._salesSlipInputAcs.CheckStockCountForShipmentCnt(salesRowNo, out setInputError, out showMessage))
                    {
                        if (showMessage)
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                "出荷数が在庫数を上回ります。",
                                -1,
                                MessageBoxButtons.OK);
                        }
                        if (setInputError)
                        {
                            this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = beforeShipmentCnt;
                            this._isOverFlow = true;
                            return -1;
                        }
                    }
                    #endregion

                    // --- ADD m.suzuki 2011/02/16 ---------->>>>>
                    if (this._salesDetailDataTable[rowIndex].SalesRate != 0)
                    {
                        // 基準価格
                        this._salesDetailDataTable[rowIndex].StdUnPrcSalUnPrc = this._salesDetailDataTable[rowIndex].ListPriceDisplay;
                    }
                    // --- ADD m.suzuki 2011/02/16 ----------<<<<<

                    // 数量設定処理
                    // --- ADD 2013/02/20 T.Miyamoto ------------------------------>>>>>
                    if ((beforeShipmentCnt == 0) && (this._salesDetailDataTable[rowIndexParm].ShipmentCntDisplay != 0))
                    {
                        beforeShipmentCnt = this._salesDetailDataTable[rowIndexParm].AcceptAnOrderCntDisplay;
                    }
                    // --- ADD 2013/02/20 T.Miyamoto ------------------------------<<<<<
                    // --- UPD m.suzuki 2011/02/16 ---------->>>>>
                    //// --- UPD m.suzuki 2011/02/10 ---------->>>>>
                    ////this._salesSlipInputAcs.SettingSalesDetailShipmentCnt2(salesRowNo);
                    //this._salesSlipInputAcs.SettingSalesDetailShipmentCnt( salesRowNo );
                    //// --- UPD m.suzuki 2011/02/10 ----------<<<<<
                    this._salesSlipInputAcs.SettingSalesDetailShipmentCntOnChange(salesRowNo, beforeShipmentCnt);
                    // --- UPD m.suzuki 2011/02/16 ----------<<<<<

                    //>>>2010/06/10
                    // 売価率が入力されている場合は単価再計算
                    if (this._salesDetailDataTable[rowIndex].SalesRate != 0)
                    {
                        // ---UPD 2011/05/30------------>>>>>
                        if (this._salesSlipInputAcs.CampaignObjGoodsStInfo == null)
                        {
                            // 売単価算出基準定価を画面定価へ再セット
                            this._salesDetailDataTable[rowIndex].StdUnPrcSalUnPrc = this._salesDetailDataTable[rowIndex].ListPriceDisplay;

                            // 売上明細データセッティング処理（単価設定）
                            this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].SalesRate, false);

                            // 売上金額計算処理
                            this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);
                        }
                        // ---UPD 2011/05/30------------<<<<<
                    }
                    //<<<2010/06/10

                    // 売上金額計算処理
                    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                    // 原価金額計算処理
                    this._salesSlipInputAcs.CalculationCost(rowIndex);

                    // 明細粗利率設定処理
                    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                    // 一式情報設定処理
                    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                }
                // --- ADD 2012/01/05 Redmine#27526---------- >>>>>>>>
                else
                {
                    #region 在庫切れ出荷区分による在庫数チェック
                    // 在庫切れ出荷区分による在庫数チェック
                    bool setInputError = false;
                    bool showMessage = false;
                    if (this._salesSlipInputAcs.SalesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal
                    && (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum))
                    {
                        if (!this._salesSlipInputAcs.CheckStockCountForShipmentCnt(salesRowNo, out setInputError, out showMessage))
                        {
                            if (showMessage)
                            {
                                TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    "",
                                    "出荷数が在庫数を上回ります。",
                                    -1,
                                    MessageBoxButtons.OK);
                            }
                            if (setInputError)
                            {
                                this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = beforeShipmentCnt;
                                this._isOverFlow = true;
                                return -1;
                            }
                        }
                    }
                    #endregion
                }
                // --- ADD 2012/01/05 Redmine#27526 ---------- <<<<<<<<
            }
            #endregion

            #region 受注数
            //------------------------------------------------------------
            // ActiveCellが「受注数」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.AcceptAnOrderCntDisplayColumn.ColumnName)
            {
                this._salesDetailDataTable[rowIndexParm].AcceptAnOrderCntDisplay = TStrConv.StrToDoubleDef(cellValue, 0);

                double AcceptAnOrderCnt = TStrConv.StrToDoubleDef(cellValue, 0);  // ADD 2012/01/05 Redmine#27526

                // 受注情報設定
                this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);

                double beforeAcptAnOdrCnt = TStrConv.StrToDoubleDef(beforeCellValue, 0);

                if (AcceptAnOrderCnt != beforeAcptAnOdrCnt)   // ADD 2012/01/05 Redmine#27526
                {
                    #region 数量のチェック
                    string errMsg = string.Empty;
                    SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckAcptAnOdrCntCnt(salesRowNo, out errMsg);

                    if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);

                        if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                        {
                            this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = beforeAcptAnOdrCnt;
                            // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                            //// --- ADD 2013/04/11 Y.Wakita ② ---------->>>>>
                            //// 受注情報設定
                            //this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                            //// --- ADD 2013/04/11 Y.Wakita ② ----------<<<<<
                            // --- DEL 2013/04/18 T.Nishi ----------<<<<<
                            this._isOverFlow = true;
                            return -1;
                        }
                    }

                    // 在庫切れ出荷区分による在庫数チェック
                    bool setInputError = false;
                    bool showMessage = false;
                    if (!this._salesSlipInputAcs.CheckStockCountForAcceptAnOrderCnt(salesRowNo, out setInputError, out showMessage))
                    {
                        if (showMessage)
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                "受注数が在庫数を上回ります。",
                                -1,
                                MessageBoxButtons.OK);
                        }
                        if (setInputError)
                        {
                            this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = beforeAcptAnOdrCnt;
                            // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                            //// --- ADD 2013/04/11 Y.Wakita ② ---------->>>>>
                            //// 受注情報設定
                            //this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                            //// --- ADD 2013/04/11 Y.Wakita ② ----------<<<<<
                            // --- DEL 2013/04/18 T.Nishi ----------<<<<<
                            this._isOverFlow = true;
                            return -1;
                        }
                    }
                    #endregion

                    //-----ADD BY 凌小青 on 2012/01/17 for Redmine#27977---->>>>>
                }
                else
                {
                    #region 在庫切れ出荷区分による在庫数チェック
                    // 在庫切れ出荷区分による在庫数チェック
                    bool setInputError = false;
                    bool showMessage = false;
                    if (this._salesSlipInputAcs.SalesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal
                    && (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum))
                    {
                        if (!this._salesSlipInputAcs.CheckStockCountForAcceptAnOrderCnt(salesRowNo, out setInputError, out showMessage))
                        {
                            if (showMessage)
                            {
                                TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    "",
                                    "受注数が在庫数を上回ります。",
                                    -1,
                                    MessageBoxButtons.OK);
                            }
                            if (setInputError)
                            {
                                this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = beforeAcptAnOdrCnt;
                                this._isOverFlow = true;
                                return -1;
                            }
                        }
                    }
                    #endregion
                }
                //-----ADD BY 凌小青 on 2012/01/17 for Redmine#27977----<<<<<
                // --- ADD m.suzuki 2011/02/16 ---------->>>>>
                SalesInputDataSet.SalesDetailAcceptAnOrderRow acceptAnOrderRow = this._salesSlipInputAcs.AcptDetailDataTable.FindByDtlRelationGuid(this._salesDetailDataTable[rowIndex].DtlRelationGuid);
                if (this._salesDetailDataTable[rowIndex].SalesRate != 0)
                {
                    // 基準価格
                    this._salesDetailDataTable[rowIndex].StdUnPrcSalUnPrc = this._salesDetailDataTable[rowIndex].ListPriceDisplay;

                    if (acceptAnOrderRow != null)
                    {
                        acceptAnOrderRow.StdUnPrcSalUnPrc = this._salesDetailDataTable[rowIndex].ListPriceDisplay;
                    }
                }
                // --- ADD m.suzuki 2011/02/16 ----------<<<<<

                // 数量設定処理
                // --- UPD m.suzuki 2011/02/16 ---------->>>>>
                //this._salesSlipInputAcs.SettingAcptAnOdrDetailRowShipmentCnt(salesRowNo);
                this._salesSlipInputAcs.SettingAcptAnOdrDetailRowShipmentCntOnChange(salesRowNo, beforeAcptAnOdrCnt);
                // --- UPD m.suzuki 2011/02/16 ----------<<<<<

                // 数量設定処理
                // --- UPD 2013/02/20 T.Miyamoto ------------------------------>>>>>
                //// --- UPD m.suzuki 2011/02/16 ---------->>>>>
                ////this._salesSlipInputAcs.SettingSalesDetailShipmentCnt(salesRowNo);
                //this._salesSlipInputAcs.SettingSalesDetailShipmentCntOnChange(salesRowNo, this._salesDetailDataTable[rowIndex].ShipmentCnt);
                //// --- UPD m.suzuki 2011/02/16 ----------<<<<<
                if (this._salesDetailDataTable[rowIndex].ShipmentCnt != 0)
                {
                    beforeAcptAnOdrCnt = this._salesDetailDataTable[rowIndex].ShipmentCnt;
                }
                this._salesSlipInputAcs.SettingSalesDetailShipmentCntOnChange(salesRowNo, beforeAcptAnOdrCnt);
                // --- UPD 2013/02/20 T.Miyamoto ------------------------------<<<<<

                //>>>2010/06/10
                // 売価率が入力されている場合は単価再計算
                if (this._salesDetailDataTable[rowIndex].SalesRate != 0)
                {
                    // ---UPD 2011/05/30------------>>>>>
                    if (this._salesSlipInputAcs.CampaignObjGoodsStInfo == null)
                    {
                        // 売単価算出基準定価を画面定価へ再セット
                        this._salesDetailDataTable[rowIndex].StdUnPrcSalUnPrc = this._salesDetailDataTable[rowIndex].ListPriceDisplay;

                        // --- ADD m.suzuki 2011/02/16 ---------->>>>>
                        if (acceptAnOrderRow != null)
                        {
                            acceptAnOrderRow.StdUnPrcSalUnPrc = this._salesDetailDataTable[rowIndex].ListPriceDisplay;
                        }
                        // --- ADD m.suzuki 2011/02/16 ----------<<<<<

                        // 売上明細データセッティング処理（単価設定）
                        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].SalesRate, false);

                        // 売上金額計算処理
                        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);
                    }
                    // ---UPD 2011/05/30------------<<<<<
                }
                //<<<2010/06/10

                //// 受注単価情報設定処理
                //this._salesSlipInputAcs.AcptAnOdrDetailRowGoodsPriceReSetting();

                // 受注売上金額計算処理
                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                // 受注原価金額計算処理
                this._salesSlipInputAcs.CalculationCost(rowIndex);

                // 一式情報設定処理
                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
            }
            //----DEL BY 凌小青 on 2012/01/17 for Redmine#27977 --->>>>>
            //// --- ADD 2012/01/05 Redmine#27526---------- >>>>>>>>
            //else
            //{
            //    #region 在庫切れ出荷区分による在庫数チェック
            //    // 在庫切れ出荷区分による在庫数チェック
            //    bool setInputError = false;
            //    bool showMessage = false;
            //    if (this._salesSlipInputAcs.SalesSlip.InputMode == SalesSlipInputAcs.ctINPUTMODE_SalesSlip_Normal
            //    && (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum))
            //    {
            //        if (!this._salesSlipInputAcs.CheckStockCountForAcceptAnOrderCnt(salesRowNo, out setInputError, out showMessage))
            //        {
            //            if (showMessage)
            //            {
            //                TMsgDisp.Show(
            //                    new Form(),
            //                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
            //                    "",
            //                    "受注数が在庫数を上回ります。",
            //                    -1,
            //                    MessageBoxButtons.OK);
            //            }
            //            if (setInputError)
            //            {
            //                this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = beforeAcptAnOdrCnt;
            //                this._isOverFlow = true;
            //                return -1;
            //            }
            //        }
            //    }
            //    #endregion
            //}
            //// --- ADD 2012/01/05 Redmine#27526 ---------- <<<<<<<<       
            //}
            //-----DEL BY 凌小青 on 2012/01/17 for Redmine#27977 -----<<<<<<<<
            #endregion

            #region 定価
            //------------------------------------------------------------
            // ActiveCellが「定価」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.ListPriceDisplayColumn.ColumnName)
            {
                long tempListPrice = (long)this._salesDetailDataTable[rowIndex].ListPriceDisplay;
                this._salesDetailDataTable[rowIndex].ListPriceDisplay = (double)tempListPrice;

                double beforeListPrice = TStrConv.StrToDoubleDef(beforeCellValue, 0);

                this._salesDetailDataTable[rowIndex].ListPriceDisplay = TStrConv.StrToDoubleDef(cellValue, 0);

                //>>>2010/11/19
                // 定価が手変更された場合、標準価格選択区分をクリア
                if (beforeListPrice != TStrConv.StrToDoubleDef(cellValue, 0)) this._salesDetailDataTable[rowIndex].SelectedListPriceDiv = 0;
                //<<<2010/11/19

                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34605---- >>>>>
                // 定価が手変更された場合 価格表示区分をクリア
                if (beforeListPrice != TStrConv.StrToDoubleDef(cellValue, 0)) this._salesDetailDataTable[rowIndex].PriceSelectDiv = -1;
                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34605---- <<<<<

                // UPD 2010/09/07 --- >>>>
                string listPriceTaxExcFlBeforeCellValue = this._salesDetailDataTable[rowIndex].ListPriceTaxExcFl.ToString();
                string listPriceTaxIncFlBeforeCellValue = this._salesDetailDataTable[rowIndex].ListPriceTaxIncFl.ToString();
                string listPriceRateBeforeCellValue = this._salesDetailDataTable[rowIndex].ListPriceRate.ToString();
                string stdUnPrcLPriceBeforeCellValue = this._salesDetailDataTable[rowIndex].StdUnPrcLPrice.ToString();
                string stdUnPrcSalUnPrcBeforeCellValue = this._salesDetailDataTable[rowIndex].StdUnPrcSalUnPrc.ToString();
                string stdUnPrcUnCstBeforeCellValue = this._salesDetailDataTable[rowIndex].StdUnPrcUnCst.ToString();
                int listPriceChngCdBeforeCellValue = this._salesDetailDataTable[rowIndex].ListPriceChngCd;

                long salesMoneyTaxExcBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesMoneyTaxExc;
                long salesMoneyTaxIncBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesMoneyTaxInc;
                long salesPriceConsTaxBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesPriceConsTax;
                long salesMoneyDisplayBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesMoneyDisplay;

                string salesUnPrcDisplayBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay.ToString();
                string salesUnPrcTaxExcFlBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl.ToString();
                string salesUnPrcTaxIncFlBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl.ToString();
                int salesUnPrcChngCdBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd;
                int salesMoneyInputDivBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv;

                string salesUnitCostBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCost.ToString();
                string salesUnitCostTaxExcBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc.ToString();
                string salesUnitCostTaxIncBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc.ToString();
                int salesUnitCostChngDivBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv;

                long costTaxExcBeforeCellValue = this._salesDetailDataTable[rowIndex].CostTaxExc;
                long costTaxIncBeforeCellValue = this._salesDetailDataTable[rowIndex].CostTaxInc;
                long costBeforeCellValue = this._salesDetailDataTable[rowIndex].Cost;

                // 売上明細データセッティング処理（定価設定）
                this._salesSlipInputAcs.SalesDetailRowListPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].ListPriceDisplay);

                // 売上金額計算処理
                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                // 売価率が入力されている場合は単価再計算
                if (this._salesDetailDataTable[rowIndex].SalesRate != 0)
                {
                    // 売上明細データセッティング処理（単価設定）
                    this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].SalesRate, false);

                    // 売上金額計算処理
                    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);
                }

                // ADD 2013/05/20 T.Miyamoto ------------------------------>>>>>
                // 原価修正制御オプション(OPT-CPM0070)がオンの場合
                if (this._salesSlipInputInitDataAcs.Opt_SalesCostCtrl == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    // UPD 2013/05/24 T.Miyamoto ------------------------------>>>>>
                    //// 売上全体設定･伝票修正区分(原価)が｢1:不可｣または｢3:在庫時不可｣かつ在庫品の場合、定価変更時に原価率をクリア
                    //if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipChngDivCost == 1) ||
                    //    ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipChngDivCost == 3) &&
                    //     (this._salesSlipInputAcs.ExistSalesDetailWarehouseCode(salesRowNo))))
                    //{
                    //    this._salesDetailDataTable[rowIndex].CostRate = 0;
                    //}
                    if (this._salesSlipInputAcs.SalesSlip.SalesSlipCd != (int)SalesSlipInputAcs.SalesSlipCd.RetGoods)
                    {
                        // 売上全体設定･伝票修正区分(原価)が｢1:不可｣または｢3:在庫時不可｣かつ在庫品の場合、定価変更時に原価率をクリア
                        if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipChngDivCost == 1) ||
                            ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().SlipChngDivCost == 3) &&
                             (this._salesSlipInputAcs.ExistSalesDetailWarehouseCode(salesRowNo))))
                        {
                            this._salesDetailDataTable[rowIndex].CostRate = 0;
                        }
                    }
                    else
                    {
                        // 売上全体設定･返品伝票修正区分(原価)が｢1:不可｣または｢3:在庫時不可｣かつ在庫品の場合、定価変更時に原価率をクリア
                        if ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().RetSlipChngDivCost == 1) ||
                            ((this._salesSlipInputInitDataAcs.GetSalesTtlSt().RetSlipChngDivCost == 3) &&
                             (this._salesSlipInputAcs.ExistSalesDetailWarehouseCode(salesRowNo))))
                        {
                            this._salesDetailDataTable[rowIndex].CostRate = 0;
                        }
                    }
                    // UPD 2013/05/24 T.Miyamoto ------------------------------<<<<<
                }
                // ADD 2013/05/20 T.Miyamoto ------------------------------<<<<<

                // 原価率が入力されている場合は単価再計算
                if (this._salesDetailDataTable[rowIndex].CostRate != 0)
                {
                    // 売上明細データセッティング処理（原単価設定）
                    this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].CostRate, false);

                    // 原価金額計算処理
                    this._salesSlipInputAcs.CalculationCost(rowIndex);
                }

                #region 原価チェック区分
                string errMsg = string.Empty;
                //SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckListPrice(salesRowNo, out errMsg);

                //if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                //{
                //    TMsgDisp.Show(
                //        new Form(),
                //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                //        "",
                //        errMsg,
                //        -1,
                //        MessageBoxButtons.OK);

                //    if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                //    {
                //        this._salesDetailDataTable[rowIndex].ListPriceDisplay = beforeListPrice;
                //        this._cannotListPrice = true;
                //        return -1;
                //    }
                //}

                int checkResult = this._salesSlipInputAcs.CheckListPrice1(salesRowNo, out errMsg);

                if (checkResult != 0)
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        errMsg,
                        -1,
                        MessageBoxButtons.OK);

                    if (checkResult == 1)
                    {
                        this._salesDetailDataTable[rowIndex].ListPriceDisplay = beforeListPrice;
                        this._cannotListPrice = true;

                        this._salesDetailDataTable[rowIndex].ListPriceTaxExcFl = TStrConv.StrToDoubleDef(listPriceTaxExcFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].ListPriceTaxIncFl = TStrConv.StrToDoubleDef(listPriceTaxIncFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].ListPriceRate = TStrConv.StrToDoubleDef(listPriceRateBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].StdUnPrcLPrice = TStrConv.StrToDoubleDef(stdUnPrcLPriceBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].StdUnPrcSalUnPrc = TStrConv.StrToDoubleDef(stdUnPrcSalUnPrcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].StdUnPrcUnCst = TStrConv.StrToDoubleDef(stdUnPrcUnCstBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].ListPriceChngCd = listPriceChngCdBeforeCellValue;

                        this._salesDetailDataTable[rowIndex].SalesMoneyTaxExc = salesMoneyTaxExcBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesMoneyTaxInc = salesMoneyTaxIncBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesPriceConsTax = salesPriceConsTaxBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesMoneyDisplay = salesMoneyDisplayBeforeCellValue;

                        this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(salesUnPrcDisplayBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl = TStrConv.StrToDoubleDef(salesUnPrcTaxExcFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl = TStrConv.StrToDoubleDef(salesUnPrcTaxIncFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd = salesUnPrcChngCdBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv = salesMoneyInputDivBeforeCellValue;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;

                        this._salesDetailDataTable[rowIndex].CostTaxExc = costTaxExcBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].CostTaxInc = costTaxIncBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].Cost = costBeforeCellValue;

                        return -1;
                    }
                    else if (checkResult == 3)
                    {
                        // ADD 2010/09/09 ---- >>>>
                        this._salesDetailDataTable[rowIndex].ListPriceDisplay = beforeListPrice;
                        this._cannotListPrice = true;

                        this._salesDetailDataTable[rowIndex].ListPriceTaxExcFl = TStrConv.StrToDoubleDef(listPriceTaxExcFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].ListPriceTaxIncFl = TStrConv.StrToDoubleDef(listPriceTaxIncFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].ListPriceRate = TStrConv.StrToDoubleDef(listPriceRateBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].StdUnPrcLPrice = TStrConv.StrToDoubleDef(stdUnPrcLPriceBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].StdUnPrcSalUnPrc = TStrConv.StrToDoubleDef(stdUnPrcSalUnPrcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].StdUnPrcUnCst = TStrConv.StrToDoubleDef(stdUnPrcUnCstBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].ListPriceChngCd = listPriceChngCdBeforeCellValue;

                        this._salesDetailDataTable[rowIndex].SalesMoneyTaxExc = salesMoneyTaxExcBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesMoneyTaxInc = salesMoneyTaxIncBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesPriceConsTax = salesPriceConsTaxBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesMoneyDisplay = salesMoneyDisplayBeforeCellValue;

                        this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(salesUnPrcDisplayBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl = TStrConv.StrToDoubleDef(salesUnPrcTaxExcFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl = TStrConv.StrToDoubleDef(salesUnPrcTaxIncFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd = salesUnPrcChngCdBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv = salesMoneyInputDivBeforeCellValue;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;

                        this._salesDetailDataTable[rowIndex].CostTaxExc = costTaxExcBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].CostTaxInc = costTaxIncBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].Cost = costBeforeCellValue;
                        // ADD 2010/09/09 ---- <<<<

                        return 3;
                    }
                }
                #endregion
                // UPD 2010/09/07 --- <<<<

                // --- ADD 2010/06/02 -------------->>>>>
                // 標準価格を変更する場合、「ListPriceChngCd = 1:変更あり」を設定する。
                if (this._salesDetailDataTable[rowIndex].ListPriceDisplay != beforeListPrice)
                {
                    this._salesDetailDataTable[rowIndex].ListPriceChngCd = 1;
                    this._salesDetailDataTable[rowIndex].SelectedListPriceDiv = 0;
                }
                // --- ADD 2010/06/02 --------------<<<<<

                // 売上明細データセッティング処理（定価設定）
                //this._salesSlipInputAcs.SalesDetailRowListPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].ListPriceDisplay);

                // 売単価再設定処理
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceReSetting(salesRowNo);

                //// 売上金額計算処理
                //this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                //// 売価率が入力されている場合は単価再計算
                //if (this._salesDetailDataTable[rowIndex].SalesRate != 0)
                //{
                //    // 売上明細データセッティング処理（単価設定）
                //    this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].SalesRate, false);

                //    // 売上金額計算処理
                //    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);
                //}

                //// 原価率が入力されている場合は単価再計算
                //if (this._salesDetailDataTable[rowIndex].CostRate != 0)
                //{
                //    // 売上明細データセッティング処理（原単価設定）
                //    this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].CostRate, false);

                //    // 原価金額計算処理
                //    this._salesSlipInputAcs.CalculationCost(rowIndex);
                //}

                // 明細粗利率設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                // 一式情報設定処理
                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
            }
            #endregion

            #region 売単価
            //------------------------------------------------------------
            // ActiveCellが「売単価」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.SalesUnPrcDisplayColumn.ColumnName)
            {
                this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(cellValue, 0);

                #region 原価チェック区分
                string errMsg = string.Empty;
                // UPD 2010/09/07 --- >>>>
                //SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckSalesUnitPrice(salesRowNo, 0, out errMsg);
                //if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                //{
                //    TMsgDisp.Show(
                //        new Form(),
                //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                //        "",
                //        errMsg,
                //        -1,
                //        MessageBoxButtons.OK);

                //    if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                //    {
                //        this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                //        this._cannotSalesUnitPrice = true;
                //        return -1;
                //    }
                //    else if (checkResult == SalesSlipInputAcs.CheckResult.Warning)
                //    {
                //        return 1; //ADD 2010/07/16
                //    }

                //}
                int checkResult = this._salesSlipInputAcs.CheckSalesUnitPrice1(salesRowNo, 0, out errMsg);
                if (checkResult != 0)
                {
                    // ---------- UPD 2011/07/29 -------- >>>>>>>>>
                    //TMsgDisp.Show(
                    //    new Form(),
                    //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //    "",
                    //    errMsg,
                    //    -1,
                    //    MessageBoxButtons.OK);

                    if (checkResult == 1)
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);

                        this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotSalesUnitPrice = true;
                        return -1;
                    }
                    //else if (checkResult == 2)
                    //{
                    //    return 1;
                    //}
                    else if (checkResult == 3)
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);

                        // ADD 2010/09/09 ---- >>>>
                        this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotSalesUnitPrice = true;
                        // ADD 2010/09/09 ---- <<<<
                        return 3;
                    }
                    // ---------- UPD 2011/07/29 -------- <<<<<<<<<<
                }
                // UPD 2010/09/07 --- <<<<
                #endregion

                // 売上明細データセッティング処理（単価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay, 0);

                // 売上金額計算処理
                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                // 明細粗利率設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                // 一式情報設定処理
                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
            }
            #endregion

            #region 売価率
            //------------------------------------------------------------
            // ActiveCellが「売価率」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.SalesRateColumn.ColumnName)
            {
                this._salesDetailDataTable[rowIndex].SalesRate = TStrConv.StrToDoubleDef(cellValue, 0);

                // --- UPD 2010/09/06 ---------->>>>>
                string salesUnPrcDisplayBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay.ToString();
                string salesUnPrcTaxExcFlBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl.ToString();
                string salesUnPrcTaxIncFlBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl.ToString();
                int salesUnPrcChngCdBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd;
                int salesMoneyInputDivBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv;

                // 売上明細データセッティング処理（売価率より単価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].SalesRate, true);

                // --- UPD 2009/10/19 ---------->>>>>
                if (this._salesDetailDataTable[rowIndex].SalesRate != 0)
                {
                    #region 原価チェック区分
                    string errMsg = string.Empty;
                    // UPD 2010/09/07 ---- >>>>
                    //SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckSalesUnitPrice(salesRowNo, 1, out errMsg);
                    //if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                    //{
                    //    TMsgDisp.Show(
                    //        new Form(),
                    //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //        "",
                    //        errMsg,
                    //        -1,
                    //        MessageBoxButtons.OK);

                    //    if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                    //    {
                    //        this._salesDetailDataTable[rowIndex].SalesRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                    //        this._cannotSalesRate = true;

                    //        this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(salesUnPrcDisplayBeforeCellValue, 0);
                    //        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl = TStrConv.StrToDoubleDef(salesUnPrcTaxExcFlBeforeCellValue, 0);
                    //        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl = TStrConv.StrToDoubleDef(salesUnPrcTaxIncFlBeforeCellValue, 0);
                    //        this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd = salesUnPrcChngCdBeforeCellValue;
                    //        this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv = salesMoneyInputDivBeforeCellValue;
                    //        this._cannotSalesUnitPrice = true;
                    //        return -1;
                    //    }
                    //}
                    int checkResult = this._salesSlipInputAcs.CheckSalesUnitPrice1(salesRowNo, 1, out errMsg);
                    if (checkResult != 0)
                    {
                        // ---------- UPD 2011/07/29 -------- >>>>>>>>>
                        //TMsgDisp.Show(
                        //    new Form(),
                        //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        //    "",
                        //    errMsg,
                        //    -1,
                        //    MessageBoxButtons.OK);

                        if (checkResult == 1)
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.OK);

                            this._salesDetailDataTable[rowIndex].SalesRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                            this._cannotSalesRate = true;

                            this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(salesUnPrcDisplayBeforeCellValue, 0);
                            this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl = TStrConv.StrToDoubleDef(salesUnPrcTaxExcFlBeforeCellValue, 0);
                            this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl = TStrConv.StrToDoubleDef(salesUnPrcTaxIncFlBeforeCellValue, 0);
                            this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd = salesUnPrcChngCdBeforeCellValue;
                            this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv = salesMoneyInputDivBeforeCellValue;
                            this._cannotSalesUnitPrice = true;
                            return -1;
                        }
                        else if (checkResult == 3)
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.OK);

                            // ADD 2010/09/09 ---- >>>>
                            this._salesDetailDataTable[rowIndex].SalesRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                            this._cannotSalesRate = true;

                            this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(salesUnPrcDisplayBeforeCellValue, 0);
                            this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl = TStrConv.StrToDoubleDef(salesUnPrcTaxExcFlBeforeCellValue, 0);
                            this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl = TStrConv.StrToDoubleDef(salesUnPrcTaxIncFlBeforeCellValue, 0);
                            this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd = salesUnPrcChngCdBeforeCellValue;
                            this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv = salesMoneyInputDivBeforeCellValue;
                            this._cannotSalesUnitPrice = true;
                            // ADD 2010/09/09 ---- <<<<

                            return 3;
                        }
                        // ---------- UPD 2011/07/29 -------- <<<<<<<<<<<<<<
                    }
                    // UPD 2010/09/07 ---- <<<<
                    #endregion
                }
                // --- UPD 2009/10/19 ----------<<<<<

                #region 原価チェック区分
                string errMsgSalesUnPrcDisplay = string.Empty;
                // UPD 2010/09/07 ---- >>>>
                //SalesSlipInputAcs.CheckResult checkResultSalesUnPrcDisplay = this._salesSlipInputAcs.CheckSalesUnitPrice(salesRowNo, 0, out errMsgSalesUnPrcDisplay);
                //if (checkResultSalesUnPrcDisplay != SalesSlipInputAcs.CheckResult.Ok)
                //{
                //    TMsgDisp.Show(
                //        new Form(),
                //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                //        "",
                //        errMsgSalesUnPrcDisplay,
                //        -1,
                //        MessageBoxButtons.OK);

                //    if (checkResultSalesUnPrcDisplay == SalesSlipInputAcs.CheckResult.Error)
                //    {
                //        this._salesDetailDataTable[rowIndex].SalesRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                //        this._cannotSalesRate = true;

                //        this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(salesUnPrcDisplayBeforeCellValue, 0);
                //        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl = TStrConv.StrToDoubleDef(salesUnPrcTaxExcFlBeforeCellValue, 0);
                //        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl = TStrConv.StrToDoubleDef(salesUnPrcTaxIncFlBeforeCellValue, 0);
                //        this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd = salesUnPrcChngCdBeforeCellValue;
                //        this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv = salesMoneyInputDivBeforeCellValue;
                //        this._cannotSalesUnitPrice = true;
                //        return -1;
                //    }
                //    else if (checkResultSalesUnPrcDisplay == SalesSlipInputAcs.CheckResult.Warning)
                //    {
                //        return 1; //ADD 2010/07/16
                //    }

                //}
                int checkResultSalesUnPrcDisplay = this._salesSlipInputAcs.CheckSalesUnitPrice1(salesRowNo, 0, out errMsgSalesUnPrcDisplay);
                if (checkResultSalesUnPrcDisplay != 0)
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        errMsgSalesUnPrcDisplay,
                        -1,
                        MessageBoxButtons.OK);

                    if (checkResultSalesUnPrcDisplay == 1)
                    {
                        this._salesDetailDataTable[rowIndex].SalesRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotSalesRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(salesUnPrcDisplayBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl = TStrConv.StrToDoubleDef(salesUnPrcTaxExcFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl = TStrConv.StrToDoubleDef(salesUnPrcTaxIncFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd = salesUnPrcChngCdBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv = salesMoneyInputDivBeforeCellValue;
                        this._cannotSalesUnitPrice = true;
                        return -1;
                    }
                    // DEL 2011/07/29 ---- >>>>
                    //else if (checkResultSalesUnPrcDisplay == 2)
                    //{
                    //    return 1;
                    //}
                    // DEL 2011/07/29 ---- <<<<
                    else if (checkResultSalesUnPrcDisplay == 3)
                    {
                        // ADD 2010/09/09 ---- >>>>
                        this._salesDetailDataTable[rowIndex].SalesRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotSalesRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay = TStrConv.StrToDoubleDef(salesUnPrcDisplayBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl = TStrConv.StrToDoubleDef(salesUnPrcTaxExcFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl = TStrConv.StrToDoubleDef(salesUnPrcTaxIncFlBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnPrcChngCd = salesUnPrcChngCdBeforeCellValue;
                        this._salesDetailDataTable[rowIndex].SalesMoneyInputDiv = salesMoneyInputDivBeforeCellValue;
                        this._cannotSalesUnitPrice = true;
                        // ADD 2010/09/09 ---- <<<<<
                        return 3;
                    }
                }
                // UPD 2010/09/07 ---- <<<<
                #endregion
                // --- UPD 2010/09/06 ----------<<<<<

                // 売上明細データセッティング処理（売価率より単価設定）
                //this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].SalesRate, true);

                // 売上金額計算処理
                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                // 明細粗利率設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                // 一式情報設定処理
                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

            }
            #endregion

            #region 原単価
            //------------------------------------------------------------
            // ActiveCellが「原単価」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.SalesUnitCostColumn.ColumnName)
            {
                this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(cellValue, 0);

                #region 原価チェック区分
                string errMsg = string.Empty;
                // --- UPD 2009/10/19 ---------->>>>>
                //SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckSalesUnitCost(salesRowNo, 0, out errMsg);
                SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckSalesUnitCost(salesRowNo, 0, out errMsg, 0);
                // --- UPD 2009/10/19 ----------<<<<<

                if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                {
                    // --- DEL 2012/05/16 ---------->>>>>
                    /*
                    // --- UPD 2012/05/14 ---------->>>>>
                    // --- UPD 2012/05/15 ---------->>>>>
                    //if (checkResult != SalesSlipInputAcs.CheckResult.Error)
                    if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                    // --- UPD 2012/05/15 ----------<<<<<
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);
                    }
                    else
                    {
                        // --- UPD 2012/05/14 ----------<<<<<
                    // --- UPD 2012/04/23 ---------->>>>>
                    //TMsgDisp.Show(
                    //    new Form(),
                    //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //    "",
                    //    errMsg,
                    //    -1,
                    //    MessageBoxButtons.OK);
                    DialogResult dResult = TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        errMsg,
                        -1,
                            MessageBoxButtons.YesNo,
                            MessageBoxDefaultButton.Button2);
                    // --- UPD 2012/04/23 ----------<<<<<
                        // --- DEL 2012/05/14 ---------->>>>>
                        //if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                        //{
                            // --- DEL 2012/05/14 ----------<<<<<
                    // --- ADD 2012/04/23 ---------->>>>>
                        if (dResult == DialogResult.No)
                        {
                            // --- ADD 2012/04/23 ----------<<<<<
                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotSalesUnitCost = true;
                        return -1;
                            // --- ADD 2012/04/23 ---------->>>>>
                        }
                        // --- ADD 2012/04/23 ----------<<<<<
                        // --- DEL 2012/05/14 ---------->>>>>
                        //}
                        // --- DEL 2012/05/14 ----------<<<<<
                        // --- UPD 2012/05/14 ---------->>>>>
                    }
                    // --- UPD 2012/05/14 ----------<<<<<
                    */
                    // --- DEL 2012/05/16 ---------->>>>>
                    // --- ADD 2012/05/16 ----------<<<<<
                    if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotSalesUnitCost = true;
                        return -1;
                    }
                    else
                    {
                        DialogResult dResult = TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button2);
                        if (dResult == DialogResult.No)
                        {
                            checkResult = SalesSlipInputAcs.CheckResult.Error;

                            this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                            this._cannotSalesUnitCost = true;
                        }
                    }

                    //if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                    //{
                    //    this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                    //    this._cannotSalesUnitCost = true;
                    //    return -1;
                    //}
                    // --- ADD 2012/05/16 ----------<<<<<
                }
                #endregion

                // 売上明細データセッティング処理（原価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].SalesUnitCost);

                // 売単価再設定処理
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceReSetting(salesRowNo);

                // 売上明細データセッティング処理（単価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay, 1);

                // 売上金額計算処理
                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                // 原価金額計算処理
                this._salesSlipInputAcs.CalculationCost(rowIndex);

                // 明細粗利率設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                // 一式情報設定処理
                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                // --- ADD 2012/05/16 ---------->>>>>
                if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                {
                    return -1;
                }
                // --- ADD 2012/05/16 ----------<<<<<

            }
            #endregion

            #region 原価率
            //------------------------------------------------------------
            // ActiveCellが「原価率」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.CostRateColumn.ColumnName)
            {
                this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(cellValue, 0);

                string salesUnitCostBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCost.ToString();
                string salesUnitCostTaxExcBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc.ToString();
                string salesUnitCostTaxIncBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc.ToString();
                int salesUnitCostChngDivBeforeCellValue = this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv;

                // 売上明細データセッティング処理（原単価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].CostRate, true);

                #region 原価チェック区分
                string errMsg = string.Empty;
                // --- UPD 2010/09/07 ---------->>>>>
                // --- UPD 2009/10/19 ---------->>>>>
                //SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckSalesUnitCost(salesRowNo, 1, out errMsg);
                //SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckSalesUnitCost(salesRowNo, 1, out errMsg, 0);
                //// --- UPD 2009/10/19 ----------<<<<<
                //if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                //{
                //    TMsgDisp.Show(
                //        new Form(),
                //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                //        "",
                //        errMsg,
                //        -1,
                //        MessageBoxButtons.OK);

                //    if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                //    {
                //        this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                //        this._cannotCostRate = true;
                //        return -1;
                //    }
                //}
                //int checkResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 1, out errMsg, 0, false); //del 2012/01/18 liusy  ソースマージ 
                int checkResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 1, out errMsg, 0); //add 2012/01/18 liusy  ソースマージ 
                // --- UPD 2009/10/19 ----------<<<<<
                if (checkResult != 0)
                {
                    // --- DEL 2012/05/16 ---------->>>>>
                    /*
                        // --- ADD 2012/05/14 ---------->>>>>
                    if (checkResult == 1)
                    {
                        TMsgDisp.Show(
                            //this,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);
                    }
                    else
                    {
                        // --- ADD 2012/05/14 ----------<<<<<
                    // --- UPD 2012/04/23 ---------->>>>>
                    //add by 2012/01/18 liusy  ソースマージ----->>>>> 
                    //TMsgDisp.Show(
                    //    new Form(),
                    //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //    "",
                    //    errMsg,
                    //    -1,
                    //    MessageBoxButtons.OK);
                    //add by 2012/01/18 liusy  ソースマージ-----<<<<< 
                    DialogResult dResult = TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        "",
                        errMsg,
                        -1,
                            MessageBoxButtons.YesNo,
                            MessageBoxDefaultButton.Button2);

                    if (dResult == DialogResult.Yes)
                    {
                        checkResult = 9;
                    }
                    // --- UPD 2012/04/23 ----------<<<<<
                        // --- ADD 2012/05/14 ---------->>>>>
                        else
                        {
                            checkResult = 1;
                        }
                    }
                    // --- ADD 2012/05/14 ----------<<<<<
                    */
                    // --- DEL 2012/05/16 ----------<<<<<
                    // --- ADD 2012/05/16 ---------->>>>>
                    if (checkResult == 1)
                    {
                        TMsgDisp.Show(
                            //this,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);
                    }
                    else
                    {
                        DialogResult dResult = TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button2);

                        if (dResult == DialogResult.No)
                        {
                            checkResult = 1;
                        }
                    }
                    // --- ADD 2012/05/16 ----------<<<<<
                    
                    //del by 2012/01/18 liusy  ソースマージ----->>>>> 
                    /*
                    // ADD BY liusy 2011/12/16 ----->>>>>
                    if (checkResult == 8)
                    {

                        DialogResult dResult = TMsgDisp.Show(
                            //this,
                            emErrorLevel.ERR_LEVEL_QUESTION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.YesNo, MessageBoxDefaultButton.Button2);
                        if (dResult == DialogResult.Yes)
                        {
                            checkResult = 0;
                        }
                        else
                        {
                            checkResult = 3;
                        }
                    }
                    else
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);
                    }
                    // ADD BY liusy 2011/12/16 -----<<<<<
                    */
                    //del by 2012/01/18 liusy  ソースマージ-----<<<<<

                    if (checkResult == 1)
                    {
                        this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotCostRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;
                        this._cannotSalesUnitCost = true;
                        return -1;
                    }
                    else if (checkResult == 3)
                    {
                        // ADD 2010/09/09 ---- >>>>
                        this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotCostRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;
                        this._cannotSalesUnitCost = true;
                        // ADD 2010/09/09 ---- <<<<
                        return 3;
                    }
                }
                // --- UPD 2010/09/07 ----------<<<<<
                #endregion

                #region 原価チェック区分
                string salesUnitCostErrMsg = string.Empty;

                //int salesUnitCostCheckResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 0, out salesUnitCostErrMsg, 0, false); //del 2012/01/18 liusy  ソースマージ
                int salesUnitCostCheckResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 0, out salesUnitCostErrMsg, 0); //add 2012/01/18 liusy  ソースマージ 

                // --- DEL 2012/05/16 ---------->>>>>
                // --- ADD 2012/04/23 ---------->>>>>
                //if (checkResult == 9)
                //{
                //    salesUnitCostCheckResult = 0;
                //}
                // --- ADD 2012/04/23 ----------<<<<<
                // --- DEL 2012/05/16 ----------<<<<<

                if (salesUnitCostCheckResult != 0)
                {
                    // ---------- UPD 2011/07/29 -------- >>>>>>>>>
                    //TMsgDisp.Show(
                    //    new Form(),
                    //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //    "",
                    //    salesUnitCostErrMsg,
                    //    -1,
                    //    MessageBoxButtons.OK);

                    // --- DEL 2012/05/16 ---------->>>>>
                    /*
                    if (salesUnitCostCheckResult == 1)
                    {
                        // --- UPD 2012/04/23 ---------->>>>>
                        // --- ADD 2012/05/14 ---------->>>>>
                        TMsgDisp.Show(new Form(),
                                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                        "",
                                        salesUnitCostErrMsg,
                                        -1,
                                        MessageBoxButtons.OK);

                        this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotCostRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;
                        this._cannotSalesUnitCost = true;
                        return -1;
                    }
                    else if (salesUnitCostCheckResult == 2)
                    {
                        // --- ADD 2012/05/14 ----------<<<<<

                        //TMsgDisp.Show(new Form(),
                        //                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        //                "",
                        //                salesUnitCostErrMsg,
                        //                -1,
                        //                MessageBoxButtons.OK);
                        DialogResult dResult = TMsgDisp.Show(
                                new Form(),
                                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                        "",
                                        salesUnitCostErrMsg,
                                        -1,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button2);
                        // --- UPD 2012/04/23 ----------<<<<<
                        // --- ADD 2012/04/23 ---------->>>>>
                        if (dResult == DialogResult.No)
                        {
                        // --- ADD 2012/04/23 ----------<<<<<
                        this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotCostRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;
                        this._cannotSalesUnitCost = true;
                        return -1;
                        // --- ADD 2012/04/23 ---------->>>>>
                        }
                        // --- ADD 2012/04/23 ----------<<<<<

                    }
                    else if (salesUnitCostCheckResult == 3)
                    {
                        // --- UPD 2012/04/23 ---------->>>>>
                        //TMsgDisp.Show(new Form(),
                        //                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        //                "",
                        //                salesUnitCostErrMsg,
                        //                -1,
                        //                MessageBoxButtons.OK);
                        DialogResult dResult = TMsgDisp.Show(
                                new Form(),
                                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                        "",
                                        salesUnitCostErrMsg,
                                        -1,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button2);
                        // --- UPD 2012/04/23 ----------<<<<<
                        // --- ADD 2012/04/23 ---------->>>>>
                        if (dResult == DialogResult.No)
                        {
                        // --- ADD 2012/04/23 ----------<<<<<

                        // ADD 2010/09/09 ---- >>>>
                        this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotCostRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;
                        this._cannotSalesUnitCost = true;
                        // ADD 2010/09/09 ---- <<<<
                        return 3;
                        // --- ADD 2012/04/23 ---------->>>>>
                        }
                        // --- ADD 2012/04/23 ----------<<<<<
                    }
                    */
                    // --- DEL 2012/05/16 ---------->>>>>
                    // --- DEL 2012/05/17 ---------->>>>>
                    /*
                    // --- ADD 2012/05/16 ---------->>>>>
                    if (salesUnitCostCheckResult == 1)
                    {
                        TMsgDisp.Show(
                            //this,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);
                    }
                    else
                    {
                        DialogResult dResult = TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button2);

                        if (dResult == DialogResult.No)
                        {
                            salesUnitCostCheckResult = 1;
                        }
                    }


                    if (salesUnitCostCheckResult == 1)
                    {
                        this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotCostRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;
                        this._cannotSalesUnitCost = true;
                        return -1;
                    }
                    else if (salesUnitCostCheckResult == 3)
                    {
                        this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotCostRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;
                        this._cannotSalesUnitCost = true;
                        return 3;
                    }
                    // --- ADD 2012/05/16 ----------<<<<<
                    */
                    // --- DEL 2012/05/17 ----------<<<<<

                    // --- ADD 2012/05/17 ---------->>>>>
                    if (salesUnitCostCheckResult == 1)
                    {
                        TMsgDisp.Show(new Form(),
                                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                        "",
                                        salesUnitCostErrMsg,
                                        -1,
                                        MessageBoxButtons.OK);

                        this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotCostRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;
                        this._cannotSalesUnitCost = true;
                        return -1;
                    }
                    else if (salesUnitCostCheckResult == 3)
                    {
                        TMsgDisp.Show(new Form(),
                                        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                        "",
                                        salesUnitCostErrMsg,
                                        -1,
                                        MessageBoxButtons.OK);

                        this._salesDetailDataTable[rowIndex].CostRate = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                        this._cannotCostRate = true;

                        this._salesDetailDataTable[rowIndex].SalesUnitCost = TStrConv.StrToDoubleDef(salesUnitCostBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxExc = TStrConv.StrToDoubleDef(salesUnitCostTaxExcBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostTaxInc = TStrConv.StrToDoubleDef(salesUnitCostTaxIncBeforeCellValue, 0);
                        this._salesDetailDataTable[rowIndex].SalesUnitCostChngDiv = salesUnitCostChngDivBeforeCellValue;
                        this._cannotSalesUnitCost = true;
                        return 3;
                    }
                    // --- ADD 2012/05/17 ----------<<<<<
                    // ---------- UPD 2011/07/29 -------- <<<<<<<<<<<
                }
                #endregion

                // 売上明細データセッティング処理（原単価設定）
                //this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSettingbyRate(salesRowNo, this._salesDetailDataTable[rowIndex].CostRate, true);

                // 売上明細データセッティング処理（原価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitCostSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].SalesUnitCost);

                // 売単価再設定処理
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceReSetting(salesRowNo);

                // 売上明細データセッティング処理（単価設定）
                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(salesRowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay, 1);

                // 売上金額計算処理
                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                // 原価金額計算処理
                this._salesSlipInputAcs.CalculationCost(rowIndex);

                // 明細粗利率設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                // 一式情報設定処理
                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
            }
            #endregion

            #region 売上金額
            //------------------------------------------------------------
            // ActiveCellが「売上金額」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.SalesMoneyDisplayColumn.ColumnName)
            {
                // --- ADD 2010/06/26 ---------->>>>>
                beforeCellValue = beforeCellValue.Replace(",", string.Empty);
                cellValue = cellValue.Replace(",", string.Empty);
                // --- ADD 2010/06/26 ----------<<<<<
                this._salesDetailDataTable[rowIndex].SalesMoneyDisplay = TStrConv.StrToIntDef(cellValue, 0);

                if (Convert.ToInt64(beforeCellValue) != Convert.ToInt64(TStrConv.StrToIntDef(cellValue, 0)))
                {
                    // --- ADD 2010/05/04 ---------->>>>>
                    // セキュリティの操作権限
                    //if (MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.MoneyMinus)) // DEL 2010/07/13
                    if (MyOpeCtrl.Disabled((int)SalesSlipInputAcs.OperationCode.MoneyMinus) && this._salesDetailDataTable[rowIndex].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_RowDiscount && this._salesDetailDataTable[rowIndex].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount) // ADD 2010/07/13
                    {
                        // 金額にマイナスが入力不可
                        if (Convert.ToInt64(cellValue) < 0)
                        {
                            TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "TODO",
                            "マイナス値の入力はできません。",
                            -1,
                            MessageBoxButtons.OK);

                            this._salesDetailDataTable[rowIndex].SalesMoneyDisplay = Convert.ToInt64(beforeCellValue);
                            this._isOverFlow = true;
                            return -1;
                        }
                    }
                    // --- ADD 2010/05/04 ----------<<<<<

                    // 売上明細データセッティング処理（売上商品区分設定）
                    // --- UPD 2009/12/23 ---------->>>>>
                    //this._salesSlipInputAcs.SalesDetailRowSalesGoodsCdSetting(salesRowNo, salesSlip.SalesGoodsCd);
                    this._salesSlipInputAcs.SalesDetailRowSalesGoodsCdSetting(salesRowNo, salesSlip.SalesGoodsCd, true);
                    // --- UPD 2009/12/23 ----------<<<<<

                    // 明細粗利率設定処理
                    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                    // 一式情報設定処理
                    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                }
            }
            #endregion

            #region 原価金額
            //------------------------------------------------------------
            // ActiveCellが「原価金額」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.CostColumn.ColumnName)
            {
                this._salesDetailDataTable[rowIndex].Cost = TStrConv.StrToIntDef(cellValue, 0);

                if (Convert.ToInt64(beforeCellValue) != Convert.ToInt64(cellValue))
                {
                    // 原価設定処理
                    this._salesSlipInputAcs.SalesDetailRowCostSetting(salesRowNo);

                    // 明細粗利率設定処理
                    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                    // 一式情報設定処理
                    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                }
            }
            #endregion

            #region メーカーコード
            //------------------------------------------------------------
            // ActiveCellが「メーカー」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.GoodsMakerCdColumn.ColumnName)
            {
                int goodsMakerCd = TStrConv.StrToIntDef(cellValue, 0);
                this._salesDetailDataTable[rowIndex].GoodsMakerCd = TStrConv.StrToIntDef(cellValue, 0);
                int beforeGoodsMakerCd = TStrConv.StrToIntDef(beforeCellValue, 0);

                string beforeMakerName = this._salesDetailDataTable[rowIndex].MakerName;
                string beforeMakerKanaName = this._salesDetailDataTable[rowIndex].MakerKanaName; // 2010/07/21
                if (goodsMakerCd != 0)
                {
                    // 先にメーカー情報を取得する
                    string name = this._salesSlipInputInitDataAcs.GetName_FromMaker(goodsMakerCd);
                    string kanaName = this._salesSlipInputInitDataAcs.GetKanaName_FromMaker(goodsMakerCd); // 2010/07/21

                    if (!String.IsNullOrEmpty(name))
                    {
                        //>>>2010/07/21
                        //this._salesSlipInputAcs.SettingSalesDetailMakerInfo(salesRowNo, goodsMakerCd, name);
                        this._salesSlipInputAcs.SettingSalesDetailMakerInfo(salesRowNo, goodsMakerCd, name, kanaName);
                        //<<<2010/07/21
                    }
                    else
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "メーカーコード [" + goodsMakerCd.ToString() + "] に該当するデータが存在しません。",
                            -1,
                            MessageBoxButtons.OK);

                        // メーカーコードを元に戻す
                        this._salesDetailDataTable[rowIndex].GoodsMakerCd = beforeGoodsMakerCd;

                        this._cannotGoodsMakerRead = true;

                        resultInt = -1;// ADD 2010/07/14
                    }
                }
                else
                {
                    // メーカー名称設定処理
                    //>>>2010/07/21
                    //this._salesSlipInputAcs.SettingSalesDetailMakerInfo(salesRowNo, 0, string.Empty);
                    this._salesSlipInputAcs.SettingSalesDetailMakerInfo(salesRowNo, 0, string.Empty, string.Empty);
                    //<<<2010/07/21
                }

                string goodsNo = this._salesDetailDataTable[rowIndex].GoodsNo;

                // 商品コード有りでメーカーが変わった場合
                if ((!this._cannotGoodsMakerRead) && (goodsMakerCd != beforeGoodsMakerCd) && (!String.IsNullOrEmpty(goodsNo)))
                {
                    switch (this.SearchGoodsAndRemain_And_RowSetting(rowIndex))
                    {
                        case 0:
                        case -2: // 2010/07/21
                            break;
                        case -1:
                            //>>>2010/07/21
                            //this._salesSlipInputAcs.SettingSalesDetailMakerInfo(salesRowNo, beforeGoodsMakerCd, beforeMakerName);
                            this._salesSlipInputAcs.SettingSalesDetailMakerInfo(salesRowNo, beforeGoodsMakerCd, beforeMakerName, beforeMakerKanaName);
                            //<<<210/07/21
                            break;
                    }
                    // 売上金額計算処理
                    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                    // 原価金額計算処理
                    this._salesSlipInputAcs.CalculationCost(rowIndex);

                    // 明細粗利率設定処理
                    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                    // 一式情報設定処理
                    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                    // 車両情報設定イベントコール処理
                    //this.SettingCarInfoEventCall(salesRowNo);

                    // 発注情報設定処理
                    this._salesSlipInputAcs.SettingUOEOrderDtlRowForNew(salesRowNo);

                    // ----ADD 2011/07/20------->>>>>
                    // 現在庫数調整
                    if (this._salesSlipInputInitDataAcs.GetAllDefSet().DtlCalcStckCntDsp == 0)
                    {
                        //検索後反映
                        this._salesSlipInputAcs.SalesDetailStockInfoAdjust();
                    }
                    else
                    {
                        //行移動時反映の場合、調整しない
                    }
                    // ----ADD 2011/07/20-------<<<<<
                    //this._salesSlipInputAcs.SalesDetailStockInfoAdjust();  //DEL 2011/07/20

                    // 明細グリッド設定処理
                    //this.SettingGrid();

                    // データ変更フラグプロパティをTrueにする
                    this._salesSlipInputAcs.IsDataChanged = true;

                    // 売上金額変更後発生イベントコール処理
                    //this.SalesPriceChangedEventCall();

                    // フッタ部明細情報更新イベントコール処理
                    //this.SettingFooterEventCall(salesRowNo);

                    //>>>2010/09/27
                    //// --- ADD 2010/01/27 -------------->>>
                    ////発注選択が不可となった場合,受注数と出荷数をクリア
                    //if ((this._salesSlipInputAcs.ExistStockTempForStock(salesRowNo)) ||
                    //    (!this._salesSlipInputAcs.ExistSalesDetailSupplierCd(salesRowNo)) ||
                    //    (!this._salesSlipInputAcs.ExistSalesDetailEnableOdrMakerCd(salesRowNo)))
                    //{
                    //    this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = 0;
                    //    this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = 1;
                    //}
                    //// --- ADD 2010/01/27 --------------<<<
                    //<<<2010/09/27
                }
            }
            #endregion

            #region 納品完了予定日
            //------------------------------------------------------------
            // 納品完了予定日
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.DeliGdsCmpltDueDateColumn.ColumnName)
            {
                //>>>2010/05/30
                //DateTime dt = new DateTime();
                //dt = Convert.ToDateTime(cellValue); ;
                //string shortdt = dt.ToShortDateString().Replace("/", "");
                //int iDate = TStrConv.StrToIntDef(shortdt, 0);

                //this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].DeliGdsCmpltDueDate = Convert.ToDateTime(cellValue);

                //if (iDate == 0)
                //{
                //    this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].DeliGdsCmpltDueDate = this._salesSlipInputAcs.SalesSlip.SalesDate;
                //}
                //<<<2010/05/30

                //>>>2011/02/01 回答納期を入力可能にする
                string deliGdsCmpltDueDate = cellValue.Trim();
                if (deliGdsCmpltDueDate.Length > 10) deliGdsCmpltDueDate = deliGdsCmpltDueDate.Substring(0, 10); // 2011/03/16
                this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].DeliGdsCmpltDueDate = deliGdsCmpltDueDate;
                //<<<2011/02/01 回答納期を入力可能にする
            }
            #endregion

            #region BLコード
            //------------------------------------------------------------
            // ActiveCellが「BLコード」の場合
            //------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.BLGoodsCodeColumn.ColumnName)
            {
                int blCode = TStrConv.StrToIntDef(cellValue, 0);
                int beforeBLGoodsCode = TStrConv.StrToIntDef(beforeCellValue, 0);
                //>>>2011/08/24
                string beforeGoodsNo = this._salesDetailDataTable[rowIndex].GoodsNo;
                string beforeGoodsName = this._salesDetailDataTable[rowIndex].GoodsName;
                //<<<2011/08/24

                if (blCode != 0)
                {
                    if ((this._salesSlipInputAcs.SearchPartsModeProperty == SalesSlipInputAcs.SearchPartsMode.GoodsNoSearch) ||
                        (this._salesSlipInputAcs.GetSearchPartsMode(salesRowNo) != SalesSlipInputAcs.SearchPartsModeState.NonSearch))
                    {
                        //>>>2010/09/14
                        //if (this._salesSlipInputAcs.SettingSalesDetailBLGoodsInfo(salesRowNo, blCode))
                        if (this._salesSlipInputAcs.SettingSalesDetailBLGoodsInfo(salesRowNo, blCode, beforeBLGoodsCode))
                        //<<<2010/09/14
                        {
                            // ----- DEL 2011/07/06 ------- >>>>>>>>>
                            // ---ADD 2011/05/30--------------------->>>>>
                            //if (beforeBLGoodsCode != blCode
                            //    && this._salesSlipInputAcs.GetSearchPartsMode(salesRowNo) != SalesSlipInputAcs.SearchPartsModeState.NonSearch)
                            //{
                            //    DialogResult dialogResult = TMsgDisp.Show(
                            //        this._owner,
                            //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            //        "",
                            //        "BLコードが変更されました。" + "\r\n" + "\r\n" +
                            //        "商品価格を再取得しますか？",
                            //        0,
                            //        MessageBoxButtons.YesNo,
                            //        MessageBoxDefaultButton.Button1);

                            //    if (dialogResult == DialogResult.Yes)
                            //    {
                            //        // 価格情報再設定
                            //        this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                            //        // 受注情報設定
                            //        this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);

                            //        // 売上金額計算処理
                            //        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                            //        // 原価金額計算処理
                            //        this._salesSlipInputAcs.CalculationCost(rowIndex);

                            //        // 明細粗利率設定処理
                            //        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                            //        // 一式情報設定処理
                            //        this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                            //        reCalcUnitPrice = true;
                            //    }
                            //}
                            // ---ADD 2011/05/30---------------------<<<<<
                            // ----- DEL 2011/07/06 ------- <<<<<<<<<

                            // --- ADD 2013/11/05 Y.Wakita ---------->>>>>
                            //初期フォーカス位置が受注数の場合は出荷数に値をセットしない
                            if (this._salesSlipInputAcs.CheckFocusPositionAfterBLCodeSearch(salesRowNo) == false)
                            {
                            // --- ADD 2013/11/05 Y.Wakita ----------<<<<<
                                //>>>2011/08/24
                                if (!this.CheckRowEffectiveForBLInput(rowIndex, beforeGoodsNo, beforeGoodsName))
                                {
                                    if (this._salesDetailDataTable[rowIndexParm].EditStatus == SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount)
                                    {
                                        this._salesDetailDataTable[rowIndexParm].ShipmentCntDisplay = -1;
                                        this._salesDetailDataTable[rowIndexParm].ShipmentCnt = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? 1 : -1;
                                    }
                                    else
                                    {
                                        this._salesDetailDataTable[rowIndexParm].ShipmentCntDisplay = 1;
                                        this._salesDetailDataTable[rowIndexParm].ShipmentCnt = (this._salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;
                                    }

                                    this._salesDetailDataTable[rowIndexParm].AcceptAnOrderCntDefault = 0;
                                    this._salesDetailDataTable[rowIndexParm].AcceptAnOrderCnt = 0;
                                    this._salesDetailDataTable[rowIndexParm].AcptAnOdrAdjustCnt = 0;
                                    this._salesDetailDataTable[rowIndexParm].AcptAnOdrRemainCnt = 0;
                                }
                                //<<<2011/08/24
                            // --- ADD 2013/11/05 Y.Wakita ---------->>>>>
                            }
                            // --- ADD 2013/11/05 Y.Wakita ----------<<<<<

                            // --- ADD 2014/03/18 Y.Wakita ---------->>>>>
                            // 受注情報設定
                            this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                            // --- ADD 2014/03/18 Y.Wakita ----------<<<<<

                            // --- ADD 2014/03/26 Y.Wakita ---------->>>>>
                            // 売上金額計算処理
                            this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                            // 原価金額計算処理
                            this._salesSlipInputAcs.CalculationCost(rowIndex);

                            // 明細粗利率設定処理
                            this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                            // 一式情報設定処理
                            this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                            // --- ADD 2014/03/26 Y.Wakita ----------<<<<<
                        }
                        else
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_INFO,
                                "",
                                "BLコード [" + blCode.ToString() + "] に該当するデータが存在しません。",
                                -1,
                                MessageBoxButtons.OK);

                            // BLコードを元に戻す
                            //this._salesSlipInputAcs.ClearBLGoodsInfo(salesRowNo);  // DEL 譚紅 2013/07/10 Redmine#37770
                            this._salesDetailDataTable[rowIndex].BLGoodsCode = beforeBLGoodsCode;

                            this._cannotBLGoodsRead = true;
                            resultInt = -1;// ADD 2010/07/14
                        }
                    }
                    else
                    {
                        //-----------------------------------------------------------------------------
                        // BLコード検索
                        //-----------------------------------------------------------------------------
                        List<GoodsUnitData> goodsUnitDataList = new List<GoodsUnitData>();
                        List<Stock> stockList = new List<Stock>();

                        object retObj;

                        // --- ADD 2010/01/27 -------------->>>>>
                        if (this.CheckRowEffective(rowIndex))
                        {
                            //>>>2010/09/14
                            //if (this._salesSlipInputAcs.SettingSalesDetailBLGoodsInfo(salesRowNo, blCode))
                            if (this._salesSlipInputAcs.SettingSalesDetailBLGoodsInfo(salesRowNo, blCode, beforeBLGoodsCode))
                            //<<<2010/09/14
                            {

                                // --- ADD 譚洪 K2014/01/22 ---------->>>>>
                                if (this._salesSlipInputInitDataAcs.Opt_NoBuTo == (int)SalesSlipInputInitDataAcs.Option.ON)
                                {
                                    // --- DEL 鄧潘ハン K2014/02/17 ---------->>>>>
                                    //List<SpecSalesDetailWork> retlist = new List<SpecSalesDetailWork>();
                                    //ConditionWork conditionWork = new ConditionWork();
                                    //conditionWork.EnterpriseCode = this._enterpriseCode;
                                    //conditionWork.GoodsNo = this._salesDetailDataTable[salesRowNo - 1].GoodsNo;
                                    //conditionWork.GoodsMakerCd = this._salesDetailDataTable[salesRowNo - 1].GoodsMakerCd;


                                    //status = this._noBuToSpecSalesAcs.ReadSpecSalesDetail(out retlist, conditionWork);

                                    //if (retlist.Count > 0)
                                    //{
                                    //    this._salesDetailDataTable[salesRowNo - 1].SalesCode = 1;
                                    //}
                                    // --- DEL 鄧潘ハン K2014/02/17 ----------<<<<<

                                    // --- ADD 鄧潘ハン K2014/02/17 ---------->>>>>
                                    // 処理実行
                                    object retNobuto = this._salesSlipInputInitDataAcs.MyMethodNobuto.Invoke(this._salesSlipInputInitDataAcs.ObjNobuto,
                                        new object[] { this._enterpriseCode, this._salesDetailDataTable[salesRowNo - 1].GoodsNo, this._salesDetailDataTable[salesRowNo - 1].GoodsMakerCd });

                                    if ((int)retNobuto == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                    {
                                        this._salesDetailDataTable[salesRowNo - 1].SalesCode = 1;
                                    }
                                    else
                                    {
                                        this._salesDetailDataTable[salesRowNo - 1].SalesCode = 0;
                                    }
                                    // --- ADD 鄧潘ハン K2014/02/17 ----------<<<<<
                                }
                                // --- ADD 譚洪 K2014/01/22 ----------<<<<<

                            }
                            else
                            {
                                TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    "",
                                    "BLコード [" + blCode.ToString() + "] に該当するデータが存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);

                                // BLコードを元に戻す
                                //this._salesSlipInputAcs.ClearBLGoodsInfo(salesRowNo); // DEL 譚紅 2013/07/10 Redmine#37770
                                this._salesDetailDataTable[rowIndex].BLGoodsCode = beforeBLGoodsCode;

                                this._cannotBLGoodsRead = true;
                                resultInt = -1;// ADD 2010/07/14
                            }
                        }
                        else
                        {
                            // --- ADD 2010/01/27 --------------<<<<<

                            switch (this.SearchPartsFromBLCode(salesRowNo, blCode, out retObj))
                            {
                                case 0:
                                    {
                                        if (retObj != null)
                                        {
                                            // BLコード検索
                                            if (retObj is ArrayList)
                                            {
                                                ArrayList retList = (ArrayList)retObj;
                                                int settingRowCnt = 0;

                                                for (int cnt = 0; cnt < retList.Count; cnt++)
                                                {
                                                    // 通常商品情報
                                                    if (retList[cnt] is GoodsUnitData)
                                                    {
                                                        // SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UB", "", "●ＢＬコード検索後　各種設定　開始");
                                                        #region ●各種設定
                                                        goodsUnitDataList.Clear();
                                                        goodsUnitDataList.Add((GoodsUnitData)retList[cnt]);

                                                        // 商品情報設定処理
                                                        List<int> settingSalesRowNoList;
                                                        // 2009/11/25 >>>
                                                        //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBaseForBLCodeSearch(this.GetActiveRowSalesRowNo(), salesRowNo + settingRowCnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, false);
                                                        // --- UPD 2013/11/05 Y.Wakita ---------->>>>>
                                                        //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBaseForBLCodeSearch(salesRowNo, salesRowNo + settingRowCnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, false, blCode);
                                                        //初期フォーカス位置が受注数の場合は出荷数に値をセットしない
                                                        if (this._salesSlipInputAcs.CheckFocusPositionAfterBLCodeSearch(salesRowNo))
                                                        {
                                                            this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBaseForBLCodeSearch(salesRowNo, salesRowNo + settingRowCnt, goodsUnitDataList, stockList, out settingSalesRowNoList, false, false, blCode);
                                                        }
                                                        else
                                                        {
                                                            this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBaseForBLCodeSearch(salesRowNo, salesRowNo + settingRowCnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, false, blCode);
                                                        }
                                                        // --- UPD 2013/11/05 Y.Wakita ----------<<<<<
                                                        // 2009/11/25 <<<
                                                        settingRowCnt += settingSalesRowNoList.Count;
                                                        foreach (int rowNo in settingSalesRowNoList)
                                                        {
                                                            // 売上金額計算処理
                                                            this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);

                                                            // 原価金額計算処理
                                                            this._salesSlipInputAcs.CalculationCost(rowNo - 1);

                                                            // --- ADD 2009/10/19 ---------->>>>>
                                                            if (((GoodsUnitData)retList[cnt]).SelectedListPriceDiv == 1)
                                                            {
                                                                double tempReturnListPrice = ((GoodsUnitData)retList[cnt]).SelectedListPrice;
                                                                this._salesDetailDataTable[rowNo - 1].ListPriceDisplay = (double)tempReturnListPrice;
                                                                this._salesDetailDataTable[rowNo - 1].SelectedListPriceDiv = ((GoodsUnitData)retList[cnt]).SelectedListPriceDiv; // 2010/11/19 // 標準価格選択区分をセット
                                                                // 売上明細データセッティング処理（定価設定）
                                                                this._salesSlipInputAcs.SalesDetailRowListPriceSetting(rowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPriceDisplay, this._salesDetailDataTable[rowNo - 1].ListPriceDisplay);

                                                                // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  m.suzuki 2009/11/18 DEL
                                                                //// 売単価再設定処理
                                                                //this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceReSetting(salesRowNo);
                                                                // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  m.suzuki 2009/11/18 DEL

                                                                // ----- ADD 2011/07/29 ----------------------------------->>>>>
                                                                // ----- UPD 2011/08/15 ----------------------------------->>>>>
                                                                //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                                                                if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null
                                                                    && (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0 ||
                                                                    (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0 && ((this._salesDetailDataTable[rowNo - 1].UnPrcCalcCdSalUnPrcTemp == 1) || (this._salesDetailDataTable[rowNo - 1].UnPrcCalcCdSalUnPrcTemp == -1)))))
                                                                // ----- UPD 2011/08/15 -----------------------------------<<<<<
                                                                {
                                                                    // ----- ADD 2011/08/15 ----------------------------------->>>>>
                                                                    GoodsUnitData goodsUnitData = new GoodsUnitData();
                                                                    goodsUnitData = (GoodsUnitData)retList[cnt];
                                                                    if (goodsUnitData.GoodsPriceList != null && goodsUnitData.GoodsPriceList.Count > 0)
                                                                    {
                                                                        List<GoodsPrice> tempGoodsPriceList = new List<GoodsPrice>();
                                                                        foreach (GoodsPrice goodsPrice in goodsUnitData.GoodsPriceList)
                                                                        {
                                                                            goodsPrice.ListPrice = ((GoodsUnitData)retList[cnt]).SelectedListPrice;
                                                                            tempGoodsPriceList.Add(goodsPrice);
                                                                        }
                                                                        goodsUnitData.GoodsPriceList = tempGoodsPriceList;
                                                                    }

                                                                    //this._salesSlipInputAcs.SettingSalesDetailGoodsPriceOnChange(rowNo, (GoodsUnitData)retList[cnt]);//DEL 鄧潘ハン 2012/02/28 Redmine#27385
                                                                    this._salesSlipInputAcs.SettingSalesDetailGoodsCampaignPriceOnChange(rowNo, (GoodsUnitData)retList[cnt]);//ADD 鄧潘ハン 2012/02/28 Redmine#27385
                                                                    // ----- ADD 2011/08/15 -----------------------------------<<<<<

                                                                    // ----- DEL 2011/08/15 ----------------------------------->>>>>
                                                                    // キャンペーン価格適用
                                                                    //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.PriceFl != 0)
                                                                    //{
                                                                    //    // なし
                                                                    //}

                                                                    //// キャンペーン掛率適用
                                                                    //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.RateVal != 0)
                                                                    //{
                                                                    //    // 売上明細データセッティング処理（単価設定）
                                                                    //    this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, this._salesDetailDataTable[rowNo - 1].SalesRate, false);

                                                                    //    // 売上金額計算処理
                                                                    //    this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                                    //}

                                                                    //// キャンペーン値引率適用
                                                                    //if (this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate != 0)
                                                                    //{
                                                                    //    if (this._salesDetailDataTable[rowNo - 1].SalesRate != 0)
                                                                    //    {
                                                                    //        double listPriceDisplay = this._salesDetailDataTable[rowNo - 1].ListPriceDisplay;
                                                                    //        double salesRate = this._salesDetailDataTable[rowNo - 1].SalesRate;
                                                                    //        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, this._salesDetailDataTable[rowNo - 1].SalesRate, false);

                                                                    //        this._salesDetailDataTable[rowNo - 1].StdUnPrcSalUnPrc = this._salesDetailDataTable[rowNo - 1].SalesUnPrcDisplay;
                                                                    //        // 売上明細データセッティング処理（単価設定）
                                                                    //        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, 100 - this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate, false);
                                                                    //        this._salesDetailDataTable[rowNo - 1].StdUnPrcSalUnPrc = listPriceDisplay;
                                                                    //        this._salesDetailDataTable[rowNo - 1].SalesRate = salesRate;

                                                                    //        // 売上金額計算処理
                                                                    //        this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                                    //    }
                                                                    //    else
                                                                    //    {
                                                                    //        if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().UnPrcNonSettingDiv == 1)
                                                                    //        {
                                                                    //            this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, 100 - this._salesSlipInputAcs.CampaignObjGoodsStInfo.DiscountRate, false);
                                                                    //            this._salesDetailDataTable[rowNo - 1].SalesRate = 0;

                                                                    //            // 売上金額計算処理
                                                                    //            this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                                    //        }
                                                                    //    }
                                                                    //}
                                                                    // ----- DEL 2011/08/15 -----------------------------------<<<<<
                                                                }
                                                                else if (this._salesSlipInputAcs.CampaignObjGoodsStInfo == null)
                                                                {
                                                                    // ----- ADD 2011/07/29 -----------------------------------<<<<<
                                                                    // 売価率が入力されている場合は単価再計算
                                                                    if (this._salesDetailDataTable[rowNo - 1].SalesRate != 0)
                                                                    {
                                                                        // 売上明細データセッティング処理（単価設定）
                                                                        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(rowNo, this._salesDetailDataTable[rowNo - 1].SalesRate, false);

                                                                        // 売上金額計算処理
                                                                        this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                                    }
                                                                    // 2009/12/17 ADD >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                                    else
                                                                    {
                                                                        // 2010/01/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                                        //if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().UnPrcNonSettingDiv == 1) // 売価＝定価
                                                                        //{
                                                                        //    this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(rowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPrice, this._salesDetailDataTable[rowNo - 1].ListPriceDisplay, 0);
                                                                        //}

                                                                        // --- UPD 2011/07/29 ------- >>>>>>>
                                                                        //if (string.IsNullOrEmpty(this._salesDetailDataTable[rowNo - 1].RateDivSalUnPrc))
                                                                        //if (string.IsNullOrEmpty(this._salesDetailDataTable[rowNo - 1].RateDivSalUnPrc)
                                                                        //    && this._salesSlipInputAcs.CampaignObjGoodsStInfo == null)
                                                                        if (string.IsNullOrEmpty(this._salesDetailDataTable[rowNo - 1].RateDivSalUnPrc))
                                                                        // --- UPD 2011/07/29 ------- <<<<<<<
                                                                        {
                                                                            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().UnPrcNonSettingDiv == 1) // 売価＝定価
                                                                            {
                                                                                this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSetting(rowNo, SalesSlipInputAcs.SalesUnitPriceInputType.SalesUnitPrice, this._salesDetailDataTable[rowNo - 1].ListPriceDisplay, 0);
                                                                            }
                                                                        }
                                                                        // 2010/01/14 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                                                                        //>>>2010/06/10
                                                                        // 売上金額計算処理
                                                                        this._salesSlipInputAcs.CalculationSalesMoney(rowNo - 1);
                                                                        //<<<2010/06/10
                                                                    }
                                                                } // 2011/07/29
                                                                // 2009/12/17 ADD <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                                                                this._salesDetailDataTable[rowNo - 1].PrtGoodsNo = ((GoodsUnitData)retList[cnt]).PrtGoodsNo;
                                                                this._salesDetailDataTable[rowNo - 1].PrtMakerCode = ((GoodsUnitData)retList[cnt]).PrtMakerCode;
                                                                this._salesDetailDataTable[rowNo - 1].PrtMakerName = ((GoodsUnitData)retList[cnt]).PrtMakerName;

                                                            }

                                                            // ----ADD 2013/01/24 鄧潘ハン REDMINE#34605---- >>>>>
                                                            //売上全体設定で、表示区分プロセスはしない場合、またこの商品の商品属性は純正である場合、価格表示区分は空白を表示
                                                            if (this._salesSlipInputInitDataAcs.GetSalesTtlSt().PriceSelectDispDiv == 0 || this._salesDetailDataTable[rowNo - 1].GoodsMakerCd < 1000)
                                                            {
                                                                this._salesDetailDataTable[rowNo - 1].PriceSelectDiv = -1;
                                                            }
                                                            else
                                                            {
                                                                //表示区分ﾘｽﾄ
                                                                List<PriceSelectSet> displayDivList = this._salesSlipInputInitDataAcs.GetDisplayDivList();
                                                                Int32 priceSelectDiv = -1;
                                                                //表示区分取得ﾃﾞﾘｹﾞｰﾄ
                                                                this._priceSelectSetAcs.GetDisplayDiv(displayDivList, this._salesDetailDataTable[rowNo - 1].GoodsMakerCd, this._salesDetailDataTable[rowNo - 1].BLGoodsCode, this._salesSlipInputAcs.SalesSlip.CustomerCode, this._salesDetailDataTable[rowNo - 1].CustRateGrpCode, out priceSelectDiv);
                                                                this._salesDetailDataTable[rowNo - 1].PriceSelectDiv = priceSelectDiv;
                                                            }
                                                            // ----ADD 2013/01/24 鄧潘ハン REDMINE#34605---- <<<<<
                                                            // ADD 2011/08/12 ---- >>>>>
                                                            if (this._salesSlipInputAcs.CampaignObjGoodsStInfo != null)
                                                            {
                                                                // 掛率算出情報クリア
                                                                this._salesSlipInputAcs.ClearRateInfo(rowNo, UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice);
                                                            }
                                                            // ADD 2011/08/12 ---- <<<<<

                                                            this._salesDetailDataTable[rowNo - 1].SelectedGoodsNoDiv = ((GoodsUnitData)retList[cnt]).SelectedGoodsNoDiv;
                                                            // --- ADD 2009/10/19 ----------<<<<<

                                                            // 明細粗利率設定処理
                                                            this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(rowNo);

                                                            // 一式情報設定処理
                                                            this._salesSlipInputAcs.ConstructionCompleteInfo(rowNo);

                                                            // 車両情報設定イベントコール処理
                                                            //this.SettingCarInfoEventCall(rowNo);

                                                            //>>>2010/07/20
                                                            SalesSlipInputAcs.CarInfo carInfo;
                                                            this._salesSlipInputAcs.GetCarInfoRow(rowNo, (int)SalesSlipInputAcs.GetCarInfoMode.CarInfoChangeMode, out carInfo);
                                                            //<<<2010/07/20

                                                            // 発注情報設定処理
                                                            this._salesSlipInputAcs.SettingUOEOrderDtlRowForNew(rowNo);
                                                            //>>>2010/07/18
                                                            //this._salesSlipInputAcs.SettingSalesDetailRowUOEOrderDtl(salesRowNo); // ADD 2010/07/01
                                                            this._salesSlipInputAcs.SettingSalesDetailRowUOEOrderDtl(rowNo);
                                                            //<<<2010/07/18

                                                            // --- DEL 2013/04/18 T.Nishi ---------->>>>>
                                                            //// --- ADD 2013/04/11 Y.Wakita ① ---------->>>>> 
                                                            //if (this._salesDetailDataTable[rowNo - 1].AcceptAnOrderCnt > 0)
                                                            //{
                                                            //    // 受注情報設定
                                                            //    this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(rowNo);
                                                            //
                                                            //    SalesInputDataSet.SalesDetailAcceptAnOrderRow acceptAnOrderRow = this._salesSlipInputAcs.AcptDetailDataTable.FindByDtlRelationGuid(this._salesDetailDataTable[rowNo - 1].DtlRelationGuid);
                                                            //    if (acceptAnOrderRow != null)
                                                            //    {
                                                            //        acceptAnOrderRow.BfListPrice = 0;
                                                            //        acceptAnOrderRow.BfSalesUnitPrice = 0;
                                                            //        acceptAnOrderRow.BfUnitCost = 0;
                                                            //    }
                                                            //}
                                                            //// --- ADD 2013/04/11 Y.Wakita ① ----------<<<<< 
                                                            // --- DEL 2013/04/18 T.Nishi ----------<<<<<

                                                            // --- ADD 2013/11/05 Y.Wakita ---------->>>>>
                                                            // 受注情報に車両情報設定
                                                            if (this._salesDetailDataTable[rowNo - 1].AcceptAnOrderCnt > 0)
                                                            {
                                                                // 受注情報設定
                                                                this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(rowNo);

                                                                SalesInputDataSet.SalesDetailAcceptAnOrderRow acceptAnOrderRow = this._salesSlipInputAcs.AcptDetailDataTable.FindByDtlRelationGuid(this._salesDetailDataTable[rowNo - 1].DtlRelationGuid);
                                                                if (acceptAnOrderRow != null)
                                                                {
                                                                    acceptAnOrderRow.BfListPrice = 0;
                                                                    acceptAnOrderRow.BfSalesUnitPrice = 0;
                                                                    acceptAnOrderRow.BfUnitCost = 0;
                                                                }
                                                            }
                                                            // --- ADD 2013/11/05 Y.Wakita ----------<<<<<

                                                            // --- ADD　譚洪 K2014/02/17 ---- >>>>>
                                                            if (this._salesSlipInputInitDataAcs.Opt_NoBuTo == (int)SalesSlipInputInitDataAcs.Option.ON)
                                                            {
                                                                object retNobuto = this._salesSlipInputInitDataAcs.MyMethodNobuto.Invoke(this._salesSlipInputInitDataAcs.ObjNobuto,
                                                                                   new object[] { this._enterpriseCode, this._salesDetailDataTable[rowNo - 1].GoodsNo, this._salesDetailDataTable[rowNo - 1].GoodsMakerCd });

                                                                if ((int)retNobuto == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                                                {
                                                                    this._salesDetailDataTable[rowNo - 1].SalesCode = 1;
                                                                }
                                                                else
                                                                {
                                                                    this._salesDetailDataTable[rowNo - 1].SalesCode = 0;
                                                                }
                                                            }
                                                            // --- ADD　譚洪 K2014/02/17 ---- <<<<<

                                                            // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133-------->>>>>
                                                            // 原価単価が0円の場合、原価単価再取得する
                                                            if (this._salesDetailDataTable[rowNo - 1].SalesUnitCost == CtZero &&
                                                                this._salesDetailDataTable[rowNo - 1].SalesUnitCostChngDiv == CtZero &&    // 原価単価変更区分0:変更なし
                                                                this._salesDetailDataTable[rowNo - 1].GoodsMakerCd != CtZero &&            // メーカーコード
                                                                (string.IsNullOrEmpty(this._salesDetailDataTable[rowNo - 1].MakerName) ||     // メーカー名
                                                                string.IsNullOrEmpty(this._salesDetailDataTable[rowNo - 1].MakerKanaName)))     // メーカーカナ名
                                                            {
                                                                // ログ出力
                                                                string logMsg = string.Format(LogMessage, MethodNameAfterCell, this._salesSlipInputAcs.GetLogInfo(rowNo));
                                                                // ログ出力
                                                                if (LogCommon == null)
                                                                {
                                                                    LogCommon = new OutLogCommon();
                                                                }
                                                                LogCommon.OutputClientLog(ctAssemblyName, logMsg, this._enterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);
                                                                
                                                                // 現単価情報再設定処理
                                                                this._salesSlipInputAcs.SetSalesDetailBLGoodsInfo(rowNo);
                                                               
                                                            }
                                                            // ------ ADD 2021/03/16 陳艶丹 FOR PMKOBETSU-4133--------<<<<<
                                                            // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）-------->>>>>
                                                            // 原単価が不正の場合、原単価、原価再計算
                                                            // 原単価が手入力以外　且つ　算出原価！＝0　且つ　原価単価＝0
                                                            if ((this._salesDetailDataTable[rowNo - 1].SalesUnitCostChngDiv != (int)SalesSlipInputAcs.SalesMoneyInputDiv.Input &&
                                                                this._salesDetailDataTable[rowNo - 1].BfUnitCost != CtZero && this._salesDetailDataTable[rowNo - 1].SalesUnitCost == CtZero))
                                                            {
                                                                // ログ内容
                                                                string logMsg = string.Format(DetailLog, MethodNameAfterCell, this._salesDetailDataTable[rowNo - 1].SalesUnitCostChngDiv,
                                                                                              this._salesDetailDataTable[rowNo - 1].BfUnitCost, this._salesDetailDataTable[rowNo - 1].SalesUnitCost,
                                                                                              this._salesSlipInputAcs.GetLogInfo(rowNo));
                                                                // ログ出力
                                                                if (LogCommon == null)
                                                                {
                                                                    LogCommon = new OutLogCommon();
                                                                }
                                                                LogCommon.OutputClientLog(ctAssemblyName, logMsg, this._enterpriseCode, LoginInfoAcquisition.Employee.EmployeeCode);

                                                                // 価格情報再設定
                                                                this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);
                                                                // 原価金額計算処理
                                                                this._salesSlipInputAcs.CalculationCost(rowIndex);
                                                            }
                                                            // ------ ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）--------<<<<<
                                                        }
                                                        #endregion
                                                        //SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UB", "", "○ＢＬコード検索後　各種設定　終了");
                                                    }
                                                    // 受注照会(受注残検索)
                                                    else if (retList[cnt] is AcptAnOdrRemainRefData)
                                                    {
                                                        List<AcptAnOdrRemainRefData> acptAnOdrRemainRefDataList = new List<AcptAnOdrRemainRefData>();
                                                        acptAnOdrRemainRefDataList.Add((AcptAnOdrRemainRefData)retList[cnt]);
                                                        int st = this._salesSlipInputAcs.SalesDetailRowSettingFromAcptAnOdrRemainRefList(salesRowNo + cnt, acptAnOdrRemainRefDataList, SalesSlipInputAcs.WayToDetailExpand.AddUpRemainder);
                                                        if (st == -1)
                                                        {
                                                            TMsgDisp.Show(
                                                                new Form(),
                                                                emErrorLevel.ERR_LEVEL_INFO,
                                                                "",
                                                                "「計上」または「発注選択」済み明細がが選択されましたので、" + Environment.NewLine +
                                                                "明細への展開を行いません。",
                                                                -1,
                                                                MessageBoxButtons.OK);
                                                            resultInt = -1;// ADD 2010/07/14
                                                        }
                                                        else
                                                        {
                                                            settingRowCnt++;
                                                        }
                                                    }
                                                    // 出荷照会(出荷残検索)
                                                    else if (retList[cnt] is SalHisRefResultParamWork)
                                                    {
                                                        List<SalHisRefResultParamWork> salHisRefResultParamWorkList = new List<SalHisRefResultParamWork>();
                                                        salHisRefResultParamWorkList.Add((SalHisRefResultParamWork)retList[cnt]);
                                                        int st = this._salesSlipInputAcs.SalesDetailRowSettingFromSalHisRefResultParamWorkListForAddUp(salesRowNo + cnt, salHisRefResultParamWorkList, SalesSlipInputAcs.WayToDetailExpand.AddUpRemainder);
                                                        if (st == -1)
                                                        {
                                                             // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                                                            if (!this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag)
                                                            {
                                                            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                                                                TMsgDisp.Show(
                                                                    new Form(),
                                                                    emErrorLevel.ERR_LEVEL_INFO,
                                                                    "",
                                                                    "「計上」済み明細が選択されましたので、" + Environment.NewLine +
                                                                    "明細への展開を行いません。",
                                                                    -1,
                                                                    MessageBoxButtons.OK);
                                                                resultInt = -1;// ADD 2010/07/14
                                                            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                                                            }
                                                            else
                                                            {
                                                                this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag = false;
                                                            }
                                                            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                                                        }
                                                        else
                                                        {
                                                            settingRowCnt++;
                                                        }
                                                    }
                                                }
                                            }

                                            // 明細グリッド設定処理
                                            //this.SettingGrid();

                                            // 在庫調整
                                            //this._salesSlipInputAcs.SalesDetailStockInfoAdjust();   //DEL 2011/07/20
                                            // ---ADD 2011/07/20------------->>>>>
                                            if (this._salesSlipInputInitDataAcs.GetAllDefSet().DtlCalcStckCntDsp == 0)
                                            {
                                                // 在庫調整
                                                this._salesSlipInputAcs.SalesDetailStockInfoAdjust();
                                            }
                                            else
                                            {
                                                //なし。
                                            }
                                            // ---ADD 2011/07/20-------------<<<<<


                                            // --- ADD 譚洪 K2014/01/22 ---------->>>>>
                                            //if (this._salesSlipInputInitDataAcs.Opt_NoBuTo == (int)SalesSlipInputInitDataAcs.Option.ON)
                                            //{

                                                // --- DEL 鄧潘ハン K2014/02/17 ---------->>>>>
                                                //List<SpecSalesDetailWork> retlist = new List<SpecSalesDetailWork>();
                                                //ConditionWork conditionWork = new ConditionWork();
                                                //conditionWork.EnterpriseCode = this._enterpriseCode;
                                                //conditionWork.GoodsNo = this._salesDetailDataTable[salesRowNo - 1].GoodsNo;
                                                //conditionWork.GoodsMakerCd = this._salesDetailDataTable[salesRowNo - 1].GoodsMakerCd;
                                                //status = this._noBuToSpecSalesAcs.ReadSpecSalesDetail(out retlist, conditionWork);
                                             
                                                //if (retlist.Count > 0)
                                                //{
                                                //    this._salesDetailDataTable[salesRowNo - 1].SalesCode = 1;
                                                //}
                                                // --- DEL 鄧潘ハン K2014/02/17 ---------->>>>>


                                                // --- ADD 鄧潘ハン K2014/02/17 ---------->>>>>
                                                // 処理実行
                                                //object retNobuto = this._salesSlipInputInitDataAcs.MyMethodNobuto.Invoke(this._salesSlipInputInitDataAcs.ObjNobuto, 
                                                //    new object[] { this._enterpriseCode, this._salesDetailDataTable[salesRowNo - 1].GoodsNo, this._salesDetailDataTable[salesRowNo - 1].GoodsMakerCd });

                                                //if ((int)retNobuto == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                                                //{
                                                //    this._salesDetailDataTable[salesRowNo - 1].SalesCode = 1;
                                                //}
                                                //else
                                                //{
                                                //    this._salesDetailDataTable[salesRowNo - 1].SalesCode = 0;
                                                //}
                                                // --- ADD 鄧潘ハン K2014/02/17 ----------<<<<<
                                            //}
                                            // --- ADD 譚洪 K2014/01/22 ----------<<<<<


                                            // データ変更フラグプロパティをTrueにする
                                            this._salesSlipInputAcs.IsDataChanged = true;

                                            // 売上金額変更後発生イベントコール処理
                                            //this.SalesPriceChangedEventCall();

                                            // フッタ部明細情報更新イベントコール処理
                                            //this.SettingFooterEventCall(salesRowNo);

                                            // --- DEL 2013/08/19 除外(次回対応) ---------->>>>>
                                            //// --- ADD 2013/06/03 Y.Wakita ---------->>>>>
                                            //#region 明細チェック
                                            //bool errorFlg = false;

                                            //// 在庫切れ出荷区分による在庫数チェック
                                            //bool setInputError = false;
                                            //bool showMessage = false;
                                            //if (!this._salesSlipInputAcs.CheckStockCountForShipmentCnt(salesRowNo, out setInputError, out showMessage))
                                            //{
                                            //    if (showMessage)
                                            //    {
                                            //        TMsgDisp.Show(
                                            //            new Form(),
                                            //            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                            //            "",//this.Name,
                                            //            "出荷数が在庫数を上回ります。",
                                            //            -1,
                                            //            MessageBoxButtons.OK);
                                            //    }
                                            //    if (setInputError)
                                            //    {
                                            //        errorFlg = true;
                                            //    }
                                            //}

                                            //// 在庫切れ出荷区分による在庫数チェック
                                            //setInputError = false;
                                            //showMessage = false;
                                            //if (!this._salesSlipInputAcs.CheckStockCountForAcceptAnOrderCnt(salesRowNo, out setInputError, out showMessage))
                                            //{
                                            //    if (showMessage)
                                            //    {
                                            //        TMsgDisp.Show(
                                            //            new Form(),
                                            //            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                            //            "",//this.Name,
                                            //            "受注数が在庫数を上回ります。",
                                            //            -1,
                                            //            MessageBoxButtons.OK);
                                            //    }
                                            //    if (setInputError)
                                            //    {
                                            //        errorFlg = true;
                                            //    }
                                            //}

                                            //string errMsg = string.Empty;
                                            //SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckListPrice(salesRowNo, out errMsg);

                                            //if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                                            //{
                                            //    if (checkResult != SalesSlipInputAcs.CheckResult.Error)
                                            //    {
                                            //        TMsgDisp.Show(
                                            //            new Form(),
                                            //            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                            //            "",//this.Name,
                                            //            errMsg,
                                            //            -1,
                                            //            MessageBoxButtons.OK);
                                            //    }
                                            //    else
                                            //    {
                                            //        DialogResult dResult = TMsgDisp.Show(
                                            //            new Form(),
                                            //            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                            //                "",
                                            //            errMsg,
                                            //            -1,
                                            //                MessageBoxButtons.YesNo,
                                            //                MessageBoxDefaultButton.Button2);
                                            //        if (dResult == DialogResult.No)
                                            //        {
                                            //            errorFlg = true;
                                            //        }
                                            //        else
                                            //        {
                                            //            errorFlg = false;
                                            //        }
                                            //    }
                                            //}

                                            //if (errorFlg) return 0;
                                            //#endregion
                                            //// --- ADD 2013/06/03 Y.Wakita ----------<<<<<
                                            // --- DEL 2013/08/19 除外(次回対応) ----------<<<<<
                                        }

                                        break;
                                    }
                                case -1: // 選択キャンセル
                                    {
                                        // BLコードを元に戻す
                                        this._salesDetailDataTable[rowIndex].BLGoodsCode = beforeBLGoodsCode;

                                        this._cannotBLGoodsRead = true;
                                        return -1;
                                    }
                                case -2: // ヒットなし
                                    {
                                        TMsgDisp.Show(
                                            new Form(),
                                            emErrorLevel.ERR_LEVEL_INFO,
                                            "",
                                            "BLコード [" + blCode.ToString() + "] に該当するデータが存在しません。",
                                            -1,
                                            MessageBoxButtons.OK);

                                        this._cannotBLGoodsRead = true;
                                        this._salesDetailDataTable[rowIndex].BLGoodsCode = beforeBLGoodsCode;
                                        return -1;
                                    }
                                case -3: // 車両情報未設定
                                    {
                                        TMsgDisp.Show(
                                             new Form(),
                                            emErrorLevel.ERR_LEVEL_INFO,
                                            "",
                                            "車輌情報が存在しません。",
                                            -1,
                                            MessageBoxButtons.OK);
                                        this._cannotBLGoodsRead = true;
                                        this._salesDetailDataTable[rowIndex].BLGoodsCode = beforeBLGoodsCode;
                                        return -1;
                                    }
                            }
                        }
                    }
                }
                else
                {
                    // BLコード名称設定処理
                    this._salesSlipInputAcs.SettingSalesDetailBLGoodsInfo(salesRowNo, 0);

                    // ----- DEL 2011/07/06 ------- >>>>>>>>>
                    // ---ADD 2011/05/30--------------------->>>>>
                    //if (beforeBLGoodsCode != blCode
                    //    && this._salesSlipInputAcs.GetSearchPartsMode(salesRowNo) != SalesSlipInputAcs.SearchPartsModeState.NonSearch)
                    //{
                    //    DialogResult dialogResult = TMsgDisp.Show(
                    //        this._owner,
                    //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //        "",
                    //        "BLコードが変更されました。" + "\r\n" + "\r\n" +
                    //        "商品価格を再取得しますか？",
                    //        0,
                    //        MessageBoxButtons.YesNo,
                    //        MessageBoxDefaultButton.Button1);

                    //    if (dialogResult == DialogResult.Yes)
                    //    {
                    //        // 価格情報再設定
                    //        this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                    //        // 受注情報設定
                    //        this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);

                    //        // 売上金額計算処理
                    //        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                    //        // 原価金額計算処理
                    //        this._salesSlipInputAcs.CalculationCost(rowIndex);

                    //        // 明細粗利率設定処理
                    //        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                    //        // 一式情報設定処理
                    //        this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                    //        reCalcUnitPrice = true;
                    //    }
                    //}
                    // ---ADD 2011/05/30---------------------<<<<<
                    // ----- DEL 2011/07/06 ------- <<<<<<<<<

                    // --- ADD 2014/03/24 Y.Wakita ---------->>>>>
                    // 受注情報設定
                    this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                    // --- ADD 2014/03/24 Y.Wakita ----------<<<<<

                    // --- ADD 2014/03/26 Y.Wakita ---------->>>>>
                    // 売上金額計算処理
                    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                    // 原価金額計算処理
                    this._salesSlipInputAcs.CalculationCost(rowIndex);

                    // 明細粗利率設定処理
                    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                    // 一式情報設定処理
                    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                    // --- ADD 2014/03/26 Y.Wakita ----------<<<<<
                }
            }
            #endregion

            #region 仕入先コード(売上情報、仕入情報共通)
            //-----------------------------------------------------------------------------
            // ActiveCellが「仕入先コード」の場合
            //-----------------------------------------------------------------------------
            else if ((columnName == this._salesDetailDataTable.SupplierCdColumn.ColumnName) ||
           (columnName == this._salesDetailDataTable.SupplierCdForStockColumn.ColumnName))
            {
                int code = TStrConv.StrToIntDef(cellValue, 0);

                this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].SupplierCdChgFlg = 1;   // ADD 2011/09/16

                if (columnName == this._salesDetailDataTable.SupplierCdColumn.ColumnName)
                {
                    this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].SupplierCd = code;
                }
                else
                {
                    this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].SupplierCdForStock = code;
                }

                Supplier supplier;
                UOESupplier uoeSupplier;
                int supplierCd = TStrConv.StrToIntDef(cellValue, 0);
                int beforeSupplierCd = TStrConv.StrToIntDef(beforeCellValue, 0);

                if (code != 0)
                {
                    status = this._supplierAcs.Read(out supplier, this._enterpriseCode, code);
                    if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                    {
                        if (beforeSupplierCd != supplierCd)
                        {
                            // 仕入先情報設定
                            this._salesSlipInputAcs.SettingSalesDetailSupplierInfo(salesRowNo, supplier);

                            // 仕入先情報設定(仕入情報)
                            this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplier(ref stockTemp, supplier);

                            // 発注先情報設定(発注情報)
                            //>>>2010/07/01
                            //int st = this._uoeSupplierAcs.Read(out uoeSupplier, this._enterpriseCode, code, salesSlip.SectionCode);
                            int st = this._uoeSupplierAcs.ReadCache(out uoeSupplier, this._enterpriseCode, code, salesSlip.SectionCode);
                            //<<<2010/07/01
                            if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                            {
                                this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOESupplier(salesRowNo, uoeSupplier);
                                changeUOEOrderDtl = true;
                            }
                            // --- ADD 2012/10/19 Y.Wakita ---------->>>>>
                            else
                            {
                                // キャッシュされていない場合は、初期値設定
                                uoeSupplier = new UOESupplier();
                                this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOESupplier(salesRowNo, uoeSupplier);

                                this._salesDetailDataTable[salesRowNo - 1].SupplierCdForOrder = 0;
                                this._salesDetailDataTable[salesRowNo - 1].SupplierSnmForOrder = string.Empty;
                                this._salesDetailDataTable[salesRowNo - 1].BoCode = SalesSlipInputAcs.ctDefaultBoCode;
                                this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCntForOrder = 0;
                                this._salesDetailDataTable[salesRowNo - 1].UOEDeliGoodsDiv = string.Empty;
                                this._salesDetailDataTable[salesRowNo - 1].DeliveredGoodsDivNm = string.Empty;
                                this._salesDetailDataTable[salesRowNo - 1].DeliveredGoodsDivNmSave = string.Empty;
                                this._salesDetailDataTable[salesRowNo - 1].FollowDeliGoodsDiv = string.Empty;
                                this._salesDetailDataTable[salesRowNo - 1].FollowDeliGoodsDivNm = string.Empty;
                                this._salesDetailDataTable[salesRowNo - 1].FollowDeliGoodsDivNmSave = string.Empty;
                                this._salesDetailDataTable[salesRowNo - 1].UOEResvdSection = string.Empty;
                                this._salesDetailDataTable[salesRowNo - 1].UOEResvdSectionNm = string.Empty;
                                this._salesDetailDataTable[salesRowNo - 1].UOEResvdSectionNmSave = string.Empty;
                            }
                            // --- ADD 2012/10/19 Y.Wakita ----------<<<<<
                            // --- ADD 黄興貴 K2015/04/29 ---------------->>>>>
                            DialogResult dialogResult;
                            if (showLog)
                            {
                                // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ---------->>>>>
                                if (this._salesSlipInputAcs.CheckWhetherSalesPriceChange())
                                {
                                // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ----------<<<<<
                                    dialogResult = TMsgDisp.Show(
                                    this._owner,
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    "",
                                    "仕入先が変更されました。" + "\r\n" + "\r\n" +
                                    "商品価格を再取得しますか？",
                                    0,
                                    MessageBoxButtons.YesNo,
                                    MessageBoxDefaultButton.Button1);
                                // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ---------->>>>>
                                }
                                else
                                {
                                    dialogResult = DialogResult.None;
                                }
                                // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ----------<<<<<
                            }
                            else
                            {
                                dialogResult = DialogResult.Yes;
                            }
                            // --- ADD 黄興貴 K2015/04/29 ----------------<<<<<
                            /* --- DEL 黄興貴 K2015/04/29 ---------------->>>>>
                            DialogResult dialogResult = TMsgDisp.Show(
                                this._owner,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                "仕入先が変更されました。" + "\r\n" + "\r\n" +
                                "商品価格を再取得しますか？",
                                0,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button1);
                            // --- DEL 黄興貴 K2015/04/29 ----------------<<<<<*/

                            // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ---------->>>>>
                            if (!showLog || this._salesSlipInputAcs.CheckWhetherSalesPriceChange())
                            {
                            // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ----------<<<<<
                                if (dialogResult == DialogResult.Yes)
                                {
                                    // 価格情報再設定
                                    this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                                    // --------------- ADD 連番721 2011/08/31 ----------------- >>>>>
                                    // 定価の掛率マスタ情報を取得できない場合
                                    // 売上明細データセッティング処理（単価設定）
                                    if (string.IsNullOrEmpty(this._salesDetailDataTable[salesRowNo - 1].RateDivLPrice.Trim()))
                                    {
                                        this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceSettingbyRate(salesRowNo, this._salesDetailDataTable[salesRowNo - 1].SalesRate, false);
                                    }
                                    // --------------- ADD 連番721 2011/08/31 ----------------- <<<<<

                                    // --- UPD 2013/09/27 T.Miyamoto ------------------------------>>>>>
                                    //// --- UPD 2013/07/24 Y.Wakita ---------->>>>>
                                    ////// 受注情報設定
                                    ////this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                                    //if (this._salesDetailDataTable[salesRowNo - 1].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_AddUpNew) // 計上新規
                                    //{
                                    //    // 受注情報設定
                                    //    this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                                    //}
                                    //// --- UPD 2013/07/24 Y.Wakita ----------<<<<<
                                    this._salesSlipInputAcs.ExistSettingSalesDetailAcceptAnOrder(salesRowNo);
                                    // --- UPD 2013/09/27 T.Miyamoto ------------------------------<<<<<

                                    // 売上金額計算処理
                                    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                                    // 原価金額計算処理
                                    this._salesSlipInputAcs.CalculationCost(rowIndex);

                                    // 明細粗利率設定処理
                                    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                                    // 一式情報設定処理
                                    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                                    reCalcUnitPrice = true;
                                }
                                else
                                {
                                    this._salesSlipInputAcs.ClearRateInfo(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_ListPrice);
                                    this._salesSlipInputAcs.ClearRateInfo(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice);
                                    this._salesSlipInputAcs.ClearRateInfo(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_UnitCost);
                                }
                            } // ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応
                            changeStock = true;   // ADD 2013/01/24 Y.Wakita
                        }
                    }
                    else
                    {
                        TMsgDisp.Show(
                            this._owner,
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "仕入先コード [" + code.ToString() + "] に該当するデータが存在しません。",
                            -1,
                            MessageBoxButtons.OK);

                        resultInt = -1;// ADD 2010/07/14

                        // 仕入先情報再設定
                        status = this._supplierAcs.Read(out supplier, this._enterpriseCode, beforeSupplierCd);
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            this._salesSlipInputAcs.SettingSalesDetailSupplierInfo(salesRowNo, supplier);

                            // 仕入先情報設定
                            this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplier(ref stockTemp, supplier);

                            // 発注先情報設定(発注情報)
                            //>>>2010/07/01
                            //int st = this._uoeSupplierAcs.Read(out uoeSupplier, this._enterpriseCode, code, salesSlip.SectionCode);
                            int st = this._uoeSupplierAcs.ReadCache(out uoeSupplier, this._enterpriseCode, code, salesSlip.SectionCode);
                            //<<<2010/07/01
                            if (st == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                            {
                                this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOESupplier(salesRowNo, uoeSupplier);
                                changeUOEOrderDtl = true;
                            }
                        }
                        else
                        {
                            supplier = new Supplier();
                            this._salesSlipInputAcs.SettingSalesDetailSupplierInfo(salesRowNo, supplier);

                            // 仕入先情報設定
                            this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplier(ref stockTemp, supplier);

                            // 発注先情報設定(発注情報)
                            uoeSupplier = new UOESupplier();
                            this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOESupplier(salesRowNo, uoeSupplier);
                            changeUOEOrderDtl = true;
                        }
                        this._cannotSupplierInfoRead = true;

                    }
                }
                else
                {
                    if (beforeSupplierCd != supplierCd)
                    {
                        // --- ADD 2012/12/25 Y.Wakita ---------->>>>>
                        // 仕入先情報設定
                        supplier = new Supplier();
                        this._salesSlipInputAcs.SettingSalesDetailSupplierInfo(salesRowNo, supplier);

                        // 仕入先情報設定
                        this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplier(ref stockTemp, supplier);

                        // 発注先情報設定(発注情報)
                        uoeSupplier = new UOESupplier();
                        this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOESupplier(salesRowNo, uoeSupplier);
                        changeUOEOrderDtl = true;
                        // --- ADD 2012/12/25 Y.Wakita ----------<<<<<

                        // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ---------->>>>>
                        if (this._salesSlipInputAcs.CheckWhetherSalesPriceChange())
                        {
                        // --- ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応 ----------<<<<<
                            DialogResult dialogResult = TMsgDisp.Show(
                                this._owner,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                "仕入先が変更されました。" + "\r\n" + "\r\n" +
                                "商品価格を再取得しますか？",
                                0,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button1);

                            if (dialogResult == DialogResult.Yes)
                            {
                                // --- DEL 2012/12/25 Y.Wakita ---------->>>>>
                                //// 仕入先情報設定
                                //supplier = new Supplier();
                                //this._salesSlipInputAcs.SettingSalesDetailSupplierInfo(salesRowNo, supplier);

                                //// 仕入先情報設定
                                //this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplier(ref stockTemp, supplier);

                                //// 発注先情報設定(発注情報)
                                //uoeSupplier = new UOESupplier();
                                //this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOESupplier(salesRowNo, uoeSupplier);
                                //changeUOEOrderDtl = true;
                                // --- DEL 2012/12/25 Y.Wakita ----------<<<<<

                                // 価格情報再設定
                                this._salesSlipInputAcs.SalesDetailRowGoodsPriceReSetting(salesRowNo);

                                // --- UPD 2013/09/27 T.Miyamoto ------------------------------>>>>>
                                //// --- UPD 2013/07/24 Y.Wakita ---------->>>>>
                                ////// 受注情報設定
                                ////this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                                //if (this._salesDetailDataTable[salesRowNo - 1].EditStatus != SalesSlipInputAcs.ctEDITSTATUS_AddUpNew) // 計上新規
                                //{
                                //    // 受注情報設定
                                //    this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                                //}
                                //// --- UPD 2013/07/24 Y.Wakita ----------<<<<<
                                this._salesSlipInputAcs.ExistSettingSalesDetailAcceptAnOrder(salesRowNo);
                                // --- UPD 2013/09/27 T.Miyamoto ------------------------------<<<<<

                                // 売上金額計算処理
                                this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                                // 原価金額計算処理
                                this._salesSlipInputAcs.CalculationCost(rowIndex);

                                // 明細粗利率設定処理
                                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                                // 一式情報設定処理
                                this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);

                                reCalcUnitPrice = true;
                            }
                            else
                            {
                                this._salesSlipInputAcs.ClearRateInfo(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_ListPrice);
                                this._salesSlipInputAcs.ClearRateInfo(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_SalesUnitPrice);
                                this._salesSlipInputAcs.ClearRateInfo(salesRowNo, UnitPriceCalculation.ctUnitPriceKind_UnitCost);
                            }
                        } // ADD 時シン K2016/12/14 山形部品様 伝票修正での仕入先、販売区分、売上日変更時に価格・売価を変更しない対応
                        changeStock = true;   // ADD 2013/01/24 Y.Wakita
                    }
                }
            }
            #endregion

            #region 仕入日(仕入情報)
            //-----------------------------------------------------------------------------
            // 仕入日(仕入情報)
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.StockDateColumn.ColumnName)
            {
                DateTime dt = new DateTime();
                dt = Convert.ToDateTime(cellValue);
                string shortdt = dt.ToShortDateString().Replace("/", "");
                int iDate = TStrConv.StrToIntDef(shortdt, 0);

                this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].StockDate = dt;

                if (iDate == 0)
                {
                    this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].StockDate = this._salesSlipInputAcs.SalesSlip.SalesDate;
                }

                DateTime stockDate = Convert.ToDateTime(cellValue);

                if (stockTempCurrent.StockDate != stockDate)
                {
                    stockTemp.StockDate = stockDate;

                    // 計上日の再セット
                    this._salesSlipStockInfoInputAcs.SettingAddUpDate(ref stockTemp);

                    // ---DEL 2011/03/28------------>>>>>
                    //DialogResult dialogResult = TMsgDisp.Show(
                    //    new Form(),
                    //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //    "",
                    //    "仕入日が変更されました。" + "\r\n" + "\r\n" +
                    //    "商品価格を再取得しますか？",
                    //    0,
                    //    MessageBoxButtons.YesNo,
                    //    MessageBoxDefaultButton.Button1);

                    //if (dialogResult == DialogResult.Yes)
                    //{
                    //    reCalcUnitPrice = true;
                    //}

                    //double taxRate = this._salesSlipInputInitDataAcs.GetTaxRate(stockDate);

                    //// 税率が変わった場合、商品価格を再取得しない時のみ税率再計算
                    //if (taxRate != stockTempCurrent.SupplierConsTaxRate)
                    //{
                    //    stockTemp.SupplierConsTaxRate = taxRate;

                    //    if (!reCalcUnitPrice)
                    //    {
                    //        taxChange = true;
                    //    }
                    //}
                    // ---DEL 2011/03/28------------<<<<<
                    changeStock = true;   // ADD 2013/01/24 Y.Wakita
                }
            }
            #endregion

            #region 仕入伝票番号(仕入情報)
            //-----------------------------------------------------------------------------
            // 仕入伝票番号(仕入情報)
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.PartySalesSlipNumColumn.ColumnName)
            {
                string partySaleSlipNum = cellValue.Trim();
                this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].PartySalesSlipNum = partySaleSlipNum;

                if (stockTempCurrent.PartySaleSlipNum != partySaleSlipNum)
                {
                    stockTemp.PartySaleSlipNum = partySaleSlipNum;
                    //this._salesSlipInputAcs.ClearStockTempRowForNew(stockTemp); // 2010/09/15
                    changeStock = true;   // ADD 2013/01/24 Y.Wakita
                }
            }
            #endregion

            #region ＢＯ区分(発注情報)
            //-----------------------------------------------------------------------------
            // ＢＯ区分(発注情報)
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.BoCodeColumn.ColumnName)
            {
                string code = cellValue.Trim();
                string name = string.Empty;
                string beforeUOEDeliGoodsDiv = beforeCellValue.Trim();
                string beforeBoCode = beforeCellValue.Trim();

                if (code == SalesSlipInputAcs.ctDefaultBoCode)
                {
                    this._salesSlipInputAcs.SettingUOEOrderDtlRowFromBoCode(salesRowNo, code);
                    changeUOEOrderDtl = true;
                }
                else if (beforeUOEDeliGoodsDiv != code)
                {
                    name = this._salesSlipInputInitDataAcs.GetName_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.BoCode, this._salesDetailDataTable[rowIndex].SupplierCdForOrder, code.ToString());

                    if (name != string.Empty)
                    {
                        this._salesSlipInputAcs.SettingUOEOrderDtlRowFromBoCode(salesRowNo, code);
                        this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplierFormal(ref stockTemp, (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order); // 仕入形式設定(発注)
                        this._salesSlipStockInfoInputAcs.SettingStockTempFromPartySalesSilpNum(ref stockTemp, SalesSlipStockInfoInputAcs.ctDummyPartySalesSilpNum);
                        this._salesSlipInputAcs.SettingUOEOrderDtlRowFromAcceptAnOrderCnt(salesRowNo); // 発注数設定
                        this._salesDetailDataTable[rowIndex].BoCode = code;//ADD 2011/11/02
                        this._salesSlipInputAcs.SettingSalesDetailShipmentCnt2(salesRowNo);//ADD 2011/11/02
                        //---ADD 2011/11/07 ------------------------------------->>>>>
                        // 受注情報設定
                        this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                        //---ADD 2011/11/07 -------------------------------------<<<<<
                    }
                    else
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "ＢＯ区分 [" + code + "] に該当するデータが存在しません。",
                            -1,
                            MessageBoxButtons.OK);

                        if (beforeBoCode == SalesSlipInputAcs.ctDefaultBoCode)
                        {
                            // BO区分情報設定(変更前コードへ)
                            this._salesSlipInputAcs.SettingUOEOrderDtlRowFromBoCode(salesRowNo, beforeBoCode);
                        }
                        else
                        {
                            name = this._salesSlipInputInitDataAcs.GetName_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.BoCode, this._salesDetailDataTable[rowIndex].SupplierCdForOrder, beforeBoCode);
                            if (name != string.Empty)
                            {
                                // BO区分情報設定(変更前コードへ)
                                this._salesSlipInputAcs.SettingUOEOrderDtlRowFromBoCode(salesRowNo, beforeBoCode);
                            }
                            else
                            {
                                // BO区分情報設定(クリア)
                                this._salesSlipInputAcs.SettingUOEOrderDtlRowFromBoCode(salesRowNo, string.Empty);
                                this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplierFormal(ref stockTemp, (int)SalesSlipStockInfoInputAcs.SupplierFormal.Stock); // 仕入形式設定(仕入)
                                this._salesSlipStockInfoInputAcs.SettingStockTempFromPartySalesSilpNum(ref stockTemp, string.Empty);
                            }
                        }
                        this._cannotBoCode = true;
                        resultInt = -1;// ADD 2010/07/14
                    }
                    changeUOEOrderDtl = true;
                }
            }
            #endregion

            #region 発注先(発注情報)
            //-----------------------------------------------------------------------------
            // 発注先(発注情報)
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.SupplierCdForOrderColumn.ColumnName)
            {
                int code = TStrConv.StrToIntDef(cellValue, 0);
                UOESupplier uoeSupplier;
                int beforeUOESupplierCd = TStrConv.StrToIntDef(beforeCellValue, 0);
                this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].SupplierCdForOrder = code;

                if (beforeUOESupplierCd != code)
                {
                    if (code != 0)
                    {
                        //>>>2010/07/01
                        //status = this._uoeSupplierAcs.Read(out uoeSupplier, this._enterpriseCode, code, salesSlip.SectionCode);
                        status = this._uoeSupplierAcs.ReadCache(out uoeSupplier, this._enterpriseCode, code, salesSlip.SectionCode);
                        //<<<2010/07/01
                        if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                        {
                            if (!this._salesSlipInputAcs.ExistSalesDetailEnableOdrMakerCd(salesRowNo)) // 発注可能メーカーチェック
                            {
                                int makerCode = this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].GoodsMakerCd;
                                TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_INFO,
                                    "",
                                    "発注先コード [" + code.ToString() + "] の発注可能メーカーに  " + Environment.NewLine + Environment.NewLine + "メーカーコード [" + makerCode.ToString() + "] が存在しません。",
                                    -1,
                                    MessageBoxButtons.OK);
                                this._salesDetailDataTable[rowIndex].SupplierCdForOrder = beforeUOESupplierCd;
                                this._cannotUOESupplierCd = true;
                                resultInt = -1;// ADD 2010/07/14
                            }
                            else
                            {
                                this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOESupplier(salesRowNo, uoeSupplier);
                                changeUOEOrderDtl = true;
                            }
                        }
                        else
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_INFO,
                                "",
                                "発注先コード [" + code.ToString() + "] に該当するデータが存在しません。",
                                -1,
                                MessageBoxButtons.OK);
                            this._salesDetailDataTable[rowIndex].SupplierCdForOrder = beforeUOESupplierCd;
                            this._cannotUOESupplierCd = true;
                            resultInt = -1;// ADD 2010/07/14
                        }
                    }
                    else
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "発注先が入力されていません。",
                            -1,
                            MessageBoxButtons.OK);
                        uoeSupplier = new UOESupplier();
                        this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOESupplier(salesRowNo, uoeSupplier);
                        this._cannotUOESupplierCd = true;
                    }
                }
            }
            #endregion

            #region 発注数(発注情報)
            //-----------------------------------------------------------------------------
            // 発注数(発注情報)
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName)
            {
                double beforeShipmentCnt = this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].ShipmentCntDisplay;
                double beforeAcceptAnOdrCnt = this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay;
                double beforeAcptAnOdrCntForOrder = TStrConv.StrToDoubleDef(beforeCellValue, 0);
                int count = TStrConv.StrToIntDef(cellValue, 0);

                //>>>2011/11/11
                if (count != beforeAcptAnOdrCntForOrder)
                {
                    //<<<2011/11/11

                    #region 発注数設定
                    //-----------------------------------------------------------------------------
                    // 発注数設定
                    //-----------------------------------------------------------------------------
                    //int count = TStrConv.StrToIntDef(cellValue, 0); // 2011/11/11
                    this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].AcceptAnOrderCntForOrder = TStrConv.StrToDoubleDef(cellValue, 0);

                    #region 数量のチェック
                    string errMsg = string.Empty;
                    SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckAcptAnOdrCntCntForOrder(salesRowNo, out errMsg);

                    if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);

                        if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                        {
                            this._salesDetailDataTable[rowIndex].AcceptAnOrderCntForOrder = beforeAcptAnOdrCntForOrder;
                            this._isOverFlow = true;
                            return -1;
                        }
                    }

                    //>>>2011/11/11
                    // BO区分が「*」の場合、発注数入力不可
                    if (this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].BoCode == SalesSlipInputAcs.ctDefaultBoCode)
                    {
                        if (count != 0)
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_INFO,
                                "",
                                "BO区分を入力して下さい。",
                                -1,
                                MessageBoxButtons.OK);

                            this._salesDetailDataTable[rowIndex].AcceptAnOrderCntForOrder = beforeAcptAnOdrCntForOrder;
                            this._isOverFlow = true;
                            return -1;
                        }
                    }
                    //<<<2011/11/11
                    #endregion

                    // 発注数設定
                    this._salesSlipInputAcs.SettingUOEOrderDtlRowFromAcceptAnOrderCnt(salesRowNo, count);

                    // 出荷数、受注数設定
                    this._salesSlipInputAcs.SettingSalesDetailRowInputOrderCnt(salesRowNo);
                    #endregion

                    #region 受注数設定
                    //-----------------------------------------------------------------------------
                    // 受注数設定
                    //-----------------------------------------------------------------------------
                    if (beforeAcceptAnOdrCnt != this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay)
                    {
                        #region 数量のチェック
                        errMsg = string.Empty;
                        checkResult = this._salesSlipInputAcs.CheckAcptAnOdrCntCnt(salesRowNo, out errMsg);

                        if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.OK);

                            if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                            {
                                this._salesDetailDataTable[rowIndex].AcceptAnOrderCntForOrder = beforeAcptAnOdrCntForOrder;
                                this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = beforeAcceptAnOdrCnt;
                                this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = beforeShipmentCnt;
                                // 発注数設定
                                this._salesSlipInputAcs.SettingUOEOrderDtlRowFromAcceptAnOrderCnt(salesRowNo, beforeAcptAnOdrCntForOrder);
                                // 受注情報設定
                                this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                                // 数量設定処理
                                this._salesSlipInputAcs.SettingAcptAnOdrDetailRowShipmentCnt(salesRowNo);
                                // 数量設定処理
                                this._salesSlipInputAcs.SettingSalesDetailShipmentCnt(salesRowNo);
                                this._isOverFlow = true;
                                return -1;
                            }
                        }
                        #endregion

                        #region 在庫切れチェック
                        // 在庫切れ出荷区分による在庫数チェック
                        bool setInputError = false;
                        bool showMessage = false;
                        if (!this._salesSlipInputAcs.CheckStockCountForAcceptAnOrderCnt(salesRowNo, out setInputError, out showMessage))
                        {
                            if (showMessage)
                            {
                                TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    "",
                                    "受注数が在庫数を上回ります。",
                                    -1,
                                    MessageBoxButtons.OK);
                            }
                            if (setInputError)
                            {
                                this._salesDetailDataTable[rowIndex].AcceptAnOrderCntForOrder = beforeAcptAnOdrCntForOrder;
                                this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = beforeAcceptAnOdrCnt;
                                this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = beforeShipmentCnt;
                                // 発注数設定
                                this._salesSlipInputAcs.SettingUOEOrderDtlRowFromAcceptAnOrderCnt(salesRowNo, beforeAcptAnOdrCntForOrder);
                                // 受注情報設定
                                this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                                // 数量設定処理
                                this._salesSlipInputAcs.SettingAcptAnOdrDetailRowShipmentCnt(salesRowNo);
                                // 数量設定処理
                                this._salesSlipInputAcs.SettingSalesDetailShipmentCnt(salesRowNo);
                                this._isOverFlow = true;
                                return -1;
                            }
                        }
                        #endregion

                        // 受注情報設定
                        this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                        // 数量設定処理
                        //>>>2011/10/29
                        //this._salesSlipInputAcs.SettingAcptAnOdrDetailRowShipmentCnt(salesRowNo);
                        this._salesSlipInputAcs.SettingAcptAnOdrDetailRowShipmentCnt2(salesRowNo);
                        //<<<2011/10/29
                        //// 数量設定処理
                        //this._salesSlipInputAcs.SettingSalesDetailShipmentCnt(salesRowNo);
                    }
                    #endregion

                    #region 出荷数設定
                    //-----------------------------------------------------------------------------
                    // 出荷数設定
                    //-----------------------------------------------------------------------------
                    if (beforeShipmentCnt != this._salesDetailDataTable[rowIndex].ShipmentCntDisplay)
                    {
                        #region 数量のチェック
                        errMsg = string.Empty;
                        checkResult = this._salesSlipInputAcs.CheckShipmentCnt(salesRowNo, out errMsg);

                        if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.OK);

                            if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                            {
                                this._salesDetailDataTable[rowIndex].AcceptAnOrderCntForOrder = beforeAcptAnOdrCntForOrder;
                                this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = beforeAcceptAnOdrCnt;
                                this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = beforeShipmentCnt;
                                // 発注数設定
                                this._salesSlipInputAcs.SettingUOEOrderDtlRowFromAcceptAnOrderCnt(salesRowNo, beforeAcptAnOdrCntForOrder);
                                // 受注情報設定
                                this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                                // 数量設定処理
                                this._salesSlipInputAcs.SettingAcptAnOdrDetailRowShipmentCnt(salesRowNo);
                                // 数量設定処理
                                this._salesSlipInputAcs.SettingSalesDetailShipmentCnt(salesRowNo);
                                this._isOverFlow = true;
                                return -1;
                            }
                        }
                        #endregion

                        #region 在庫切れチェック
                        // 在庫切れ出荷区分による在庫数チェック
                        bool setInputError = false;
                        bool showMessage = false;
                        if (!this._salesSlipInputAcs.CheckStockCountForShipmentCnt(salesRowNo, out setInputError, out showMessage))
                        {
                            if (showMessage)
                            {
                                TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    "",
                                    "出荷数が在庫数を上回ります。",
                                    -1,
                                    MessageBoxButtons.OK);
                            }
                            if (setInputError)
                            {
                                this._salesDetailDataTable[rowIndex].AcceptAnOrderCntForOrder = beforeAcptAnOdrCntForOrder;
                                this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = beforeAcceptAnOdrCnt;
                                this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = beforeShipmentCnt;
                                // 発注数設定
                                this._salesSlipInputAcs.SettingUOEOrderDtlRowFromAcceptAnOrderCnt(salesRowNo, beforeAcptAnOdrCntForOrder);
                                // 受注情報設定
                                this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                                // 数量設定処理
                                this._salesSlipInputAcs.SettingAcptAnOdrDetailRowShipmentCnt(salesRowNo);
                                // 数量設定処理
                                this._salesSlipInputAcs.SettingSalesDetailShipmentCnt(salesRowNo);
                                this._isOverFlow = true;
                                return -1;
                            }
                        }
                        #endregion

                        //// 受注情報設定
                        //this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);
                        //// 数量設定処理
                        //this._salesSlipInputAcs.SettingAcptAnOdrDetailRowShipmentCnt(salesRowNo);
                        // 数量設定処理
                        //>>>2011/10/29
                        //this._salesSlipInputAcs.SettingSalesDetailShipmentCnt(salesRowNo);
                        this._salesSlipInputAcs.SettingSalesDetailShipmentCnt2(salesRowNo);
                        //<<<2011/10/29

                        //>>>2011/10/29
                        //// 売上金額計算処理
                        //this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                        //// 原価金額計算処理
                        //this._salesSlipInputAcs.CalculationCost(rowIndex);
                        //<<<2011/10/29

                        // 明細粗利率設定処理
                        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                        // 一式情報設定処理
                        this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                    }
                    #endregion

                    //>>>2011/10/29
                    // 売上金額計算処理
                    this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                    // 原価金額計算処理
                    this._salesSlipInputAcs.CalculationCost(rowIndex);
                    //<<<2011/10/29

                    changeUOEOrderDtl = true;

                    // ---ADD 2010/07/17---------->>>>>
                    this._salesSlipStockInfoInputAcs.SettingStockTempFromSupplierFormal(ref stockTemp, (int)SalesSlipStockInfoInputAcs.SupplierFormal.Order); // 仕入形式設定(発注)
                    this._salesSlipStockInfoInputAcs.SettingStockTempFromPartySalesSilpNum(ref stockTemp, SalesSlipStockInfoInputAcs.ctDummyPartySalesSilpNum);
                    this._salesSlipInputAcs.SettingUOEOrderDtlRowFromAcceptAnOrderCnt(salesRowNo); // 発注数設定
                    // --- ADD 2010/07/17----------<<<<<

                } // 2011/11/11

            }
            #endregion

            #region 納品区分(発注情報)
            //-----------------------------------------------------------------------------
            // 納品区分(発注情報)
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.DeliveredGoodsDivNmColumn.ColumnName)
            {
                string code = cellValue.Trim();
                UOEGuideName uoeGuideName;
                string beforeUOEDeliGoodsDiv = beforeCellValue.Trim();

                if (beforeUOEDeliGoodsDiv != code)
                {
                    uoeGuideName = this._salesSlipInputInitDataAcs.GetUOEGuideNameRow_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.DeliveredGoodsDiv, this._salesDetailDataTable[rowIndex].SupplierCdForOrder, code.ToString());

                    if (uoeGuideName != null)
                    {
                        // 納品区分情報設定
                        this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOEDeliGoodsDiv(salesRowNo, code, uoeGuideName.UOEGuideNm);
                        changeUOEOrderDtl = true;
                    }
                    else
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "納品区分 [" + code.ToString() + "] に該当するデータが存在しません。",
                            -1,
                            MessageBoxButtons.OK);

                        uoeGuideName = this._salesSlipInputInitDataAcs.GetUOEGuideNameRow_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.DeliveredGoodsDiv, this._salesDetailDataTable[rowIndex].SupplierCdForOrder, beforeUOEDeliGoodsDiv);
                        if (uoeGuideName != null)
                        {
                            // 納品区分情報設定(変更前コードへ)
                            this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOEDeliGoodsDiv(salesRowNo, beforeUOEDeliGoodsDiv, uoeGuideName.UOEGuideNm);
                        }
                        else
                        {
                            // 納品区分情報設定(クリア)
                            this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOEDeliGoodsDiv(salesRowNo, string.Empty, string.Empty);
                            changeUOEOrderDtl = true;
                        }
                        this._cannotUOEDeliGoodsDiv = true;
                        resultInt = -1;// ADD 2010/07/14
                    }
                }
            }
            #endregion

            #region Ｈ納品区分(発注情報)
            //-----------------------------------------------------------------------------
            // Ｈ納品区分(発注情報)
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.FollowDeliGoodsDivNmColumn.ColumnName)
            {
                string code = cellValue.Trim();
                UOEGuideName uoeGuideName;
                string beforeFollowDeliGoodsDiv = beforeCellValue.Trim();

                if (beforeFollowDeliGoodsDiv != code)
                {
                    uoeGuideName = this._salesSlipInputInitDataAcs.GetUOEGuideNameRow_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.DeliveredGoodsDiv, this._salesDetailDataTable[rowIndex].SupplierCdForOrder, code);

                    if (uoeGuideName != null)
                    {
                        // Ｈ納品区分情報設定
                        this._salesSlipInputAcs.SettingUOEOrderDtlRowFromFollowDeliGoodsDiv(salesRowNo, code, uoeGuideName.UOEGuideNm);
                        changeUOEOrderDtl = true;
                    }
                    else
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "Ｈ納品区分 [" + code + "] に該当するデータが存在しません。",
                            -1,
                            MessageBoxButtons.OK);

                        uoeGuideName = this._salesSlipInputInitDataAcs.GetUOEGuideNameRow_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.DeliveredGoodsDiv, this._salesDetailDataTable[rowIndex].SupplierCdForOrder, beforeFollowDeliGoodsDiv);
                        if (uoeGuideName != null)
                        {
                            // Ｈ納品区分情報設定(変更前コードへ)
                            this._salesSlipInputAcs.SettingUOEOrderDtlRowFromFollowDeliGoodsDiv(salesRowNo, beforeFollowDeliGoodsDiv, uoeGuideName.UOEGuideNm);
                        }
                        else
                        {
                            // Ｈ納品区分情報設定(クリア)
                            this._salesSlipInputAcs.SettingUOEOrderDtlRowFromFollowDeliGoodsDiv(salesRowNo, string.Empty, string.Empty);
                            changeUOEOrderDtl = true;
                        }
                        this._cannotFollowDeligoodsDiv = true;
                        resultInt = -1;// ADD 2010/07/14
                    }
                }
            }
            #endregion

            #region 指定拠点(発注情報)
            //-----------------------------------------------------------------------------
            // 指定拠点(発注情報)
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.UOEResvdSectionNmColumn.ColumnName)
            {
                string code = cellValue.Trim();
                UOEGuideName uoeGuideName;
                string beforeUOEResvdSection = beforeCellValue.Trim();

                if (beforeUOEResvdSection != code)
                {
                    uoeGuideName = this._salesSlipInputInitDataAcs.GetUOEGuideNameRow_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.UOEResvdSection, this._salesDetailDataTable[rowIndex].SupplierCdForOrder, code);

                    if (uoeGuideName != null)
                    {
                        // 指定拠点情報設定
                        this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOEResvdSection(salesRowNo, code, uoeGuideName.UOEGuideNm);
                        changeUOEOrderDtl = true;
                    }
                    else
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            "指定拠点 [" + code + "] に該当するデータが存在しません。",
                            -1,
                            MessageBoxButtons.OK);

                        uoeGuideName = this._salesSlipInputInitDataAcs.GetUOEGuideNameRow_FromUOEGuideName((int)SalesSlipInputAcs.UOEGuideDivCd.UOEResvdSection, this._salesDetailDataTable[rowIndex].SupplierCdForOrder, beforeUOEResvdSection);
                        if (uoeGuideName != null)
                        {
                            // 指定拠点設定(変更前コードへ)
                            this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOEResvdSection(salesRowNo, beforeUOEResvdSection, uoeGuideName.UOEGuideNm);
                        }
                        else
                        {
                            // 指定拠点設定(クリア)
                            this._salesSlipInputAcs.SettingUOEOrderDtlRowFromUOEResvdSection(salesRowNo, string.Empty, string.Empty);
                            changeUOEOrderDtl = true;
                        }
                        this._cannotUOEResvdSection = true;
                        resultInt = -1;// ADD 2010/07/14
                    }
                }
            }
            #endregion

            //>>>2010/05/30
            #region RC区分(SCM情報)
            //-----------------------------------------------------------------------------
            // RC区分(SCM情報)
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.RecycleDivNmColumn.ColumnName)
            {
                int code = TStrConv.StrToIntDef(cellValue.Trim(), 0);
                // ---ADD 2011/07/13----------->>>>>
                // ---ADD 2011/07/28----------->>>>>
                if (code == 0)
                {
                    // RC区分名称設定処理
                    this._salesSlipInputAcs.SettingSalesDetailRowRecycleDiv(salesRowNo, 0, string.Empty);
                }
                else
                {
                    // ---ADD 2011/07/28-----------<<<<<
                    int changedCode = 0;
                    int srcCodeFlag = 1;
                    switch (code)
                    {
                        case 1://1:UP = 40:UP
                            changedCode = 40; break;
                        case 2: // 2:RP = 30:RP
                            changedCode = 30; break;
                        case 3: // 3:NP = 10:NP
                            changedCode = 10; break;
                        case 4: // 4:GP = 20:GP
                            changedCode = 20; break;
                        default:
                            {
                                changedCode = code;
                                srcCodeFlag = 0;
                                break;
                            }
                    }
                    // ---ADD 2011/07/13-----------<<<<<

                    // ---UPD 2011/07/13---------->>>>>
                    //string name;
                    string name = string.Empty;
                    // ---UPD 2011/07/13----------<<<<<
                    int beforeRecycleDiv = TStrConv.StrToIntDef(beforeCellValue, 0);

                    // ---UPD 2011/07/13---------->>>>>
                    //if (beforeRecycleDiv != code)
                    if ((beforeRecycleDiv != changedCode && srcCodeFlag == 1) || srcCodeFlag == 0)
                    // ---UPD 2011/07/13----------<<<<<
                    {
                        // ---UPD 2011/07/13---------->>>>>
                        //name = this._salesSlipInputAcs.GetKind_FromSobaInfo(code);
                        if (srcCodeFlag == 1)
                        {
                            name = this._salesSlipInputAcs.GetKind_FromSobaInfo(changedCode);
                        }

                        //if (name != string.Empty)
                        if (name != string.Empty && srcCodeFlag == 1)
                        {
                            // RC区分情報設定
                            //this._salesSlipInputAcs.SettingSalesDetailRowRecycleDiv(salesRowNo, code, name);
                            this._salesSlipInputAcs.SettingSalesDetailRowRecycleDiv(salesRowNo, changedCode, name);
                            // ---UPD 2011/07/13----------<<<<<
                        }
                        else
                        {
                            TMsgDisp.Show(
                                this._form,
                                emErrorLevel.ERR_LEVEL_INFO,
                                "todo",
                                "RC区分[" + code + "] に該当するデータが存在しません。",
                                -1,
                                MessageBoxButtons.OK);

                            name = this._salesSlipInputAcs.GetKind_FromSobaInfo(beforeRecycleDiv);
                            if (name != null)
                            {
                                // 指定拠点設定(変更前コードへ)
                                this._salesSlipInputAcs.SettingSalesDetailRowRecycleDiv(salesRowNo, beforeRecycleDiv, name);
                            }
                            else
                            {
                                // 指定拠点設定(クリア)
                                this._salesSlipInputAcs.SettingSalesDetailRowRecycleDiv(salesRowNo, 0, string.Empty);
                            }
                            //this._cannotRecycleDiv = true;
                        }
                    }
                }
            }// ADD 2011/07/28
            #endregion

            #region PS管理番号(SCM情報)
            //-----------------------------------------------------------------------------
            // PS管理番号(SCM情報)
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.GoodsMngNoColumn.ColumnName)
            {
                int code = TStrConv.StrToIntDef(cellValue.Trim(), 0);

                this._salesSlipInputAcs.SettingSalesDetailRowGoodsMngNo(salesRowNo, code);
            }
            #endregion
            //<<<2010/05/30

            #region 明細備考
            //-----------------------------------------------------------------------------
            // 明細備考
            //-----------------------------------------------------------------------------
            else if (columnName == this._salesDetailDataTable.DtlNoteColumn.ColumnName)
            {
                string dtlNote = cellValue.Trim();
                this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].DtlNote = dtlNote;
            }
            #endregion

            #region 得意先注番
            else if (columnName == this._salesDetailDataTable.PartySlipNumDtlColumn.ColumnName)
            {
                string partySlipNumDtl = cellValue.Trim();
                this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].PartySlipNumDtl = partySlipNumDtl;
            }

            #endregion

            #region 売上情報
            //-----------------------------------------------------------------------------
            // 売上情報
            //-----------------------------------------------------------------------------
            // 売上金額変更後発生イベントコール処理
            //this.SalesPriceChangedEventCall();

            // フッタ部明細情報更新イベントコール処理
            //this.SettingFooterEventCall(salesRowNo);
            #endregion

            #region 仕入情報
            //-----------------------------------------------------------------------------
            // 仕入情報
            //-----------------------------------------------------------------------------
            // --- ADD 2013/03/04 Y.Wakita ---------->>>>>
            #region 仕入情報補正
            if ((columnName == this._salesDetailDataTable.SupplierCdColumn.ColumnName) ||
                (columnName == this._salesDetailDataTable.SupplierCdForStockColumn.ColumnName))
            {
                int supplierCd = TStrConv.StrToIntDef(cellValue, 0);
                int beforeSupplierCd = TStrConv.StrToIntDef(beforeCellValue, 0);

                if ((supplierCd != 0) && (beforeSupplierCd == 0))
                {
                    // 仕入日(仕入情報)
                    stockTemp.StockDate = this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].StockDate;
                    // 計上日の再セット
                    this._salesSlipStockInfoInputAcs.SettingAddUpDate(ref stockTemp);

                    // 仕入伝票番号(仕入情報)
                    stockTemp.PartySaleSlipNum = this._salesSlipInputAcs.SalesDetailDataTable[rowIndex].PartySalesSlipNum;
                }
            }
            #endregion
            // --- ADD 2013/03/04 Y.Wakita ----------<<<<<

            // 税率変更
            if (taxChange) reCalcStockPrice = true;

            // 単価再計算有り(掛率から一括取得)
            if (reCalcUnitPrice)
            {
                this._salesSlipStockInfoInputAcs.CalclationUnitPrice(ref stockTemp);
                reCalcStockPrice = true;
            }

            // 仕入金額再計算
            if (reCalcStockPrice)
            {
                this._salesSlipStockInfoInputAcs.CalculationStockPrice(ref stockTemp);
            }

            // メモリ上の内容と比較する
            if (stockTempCurrent != null)
            {
                ArrayList arRetList = stockTemp.Compare(stockTempCurrent);
                if (arRetList.Count > 0)
                {
                    this._salesSlipStockInfoInputAcs.Cache(stockTemp);
                }
            }

            // --- ADD 2013/01/24 Y.Wakita ---------->>>>>
            if ((changeStock) && (this._salesSlipInputAcs.SalesSlip.SalesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum))
            {
                SalesInputDataSet.SalesDetailRow targetRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlipInputAcs.SalesSlip.SalesSlipNum, salesRowNo);
                if (targetRow != null)
                {
                    // 仕入明細削除
                    this._salesSlipInputAcs.DeleteStockTempRow2(targetRow.DtlRelationGuid);
                }
            }
            // --- ADD 2013/01/24 Y.Wakita ----------<<<<<
            #endregion

            #region 発注情報
            //-----------------------------------------------------------------------------
            // 発注情報
            //-----------------------------------------------------------------------------
            if (changeUOEOrderDtl)
            {
                this._salesSlipInputAcs.SettingSalesDetailRowUOEOrderDtl(salesRowNo);

                //>>>2010/06/09
                //// --- ADD 2010/01/27 -------------->>>
                ////発注選択が不可となった場合,受注数と出荷数をクリア
                //if ((this._salesSlipInputAcs.ExistStockTempForStock(salesRowNo)) ||
                //    (!this._salesSlipInputAcs.ExistSalesDetailSupplierCd(salesRowNo)) ||
                //    (!this._salesSlipInputAcs.ExistSalesDetailEnableOdrMakerCd(salesRowNo)))
                //{
                //    this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = 0;
                //    this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = 1;
                //}
                //// --- ADD 2010/01/27 --------------<<<

                if ((columnName == this._salesDetailDataTable.BoCodeColumn.ColumnName) ||
                    (columnName == this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName))
                {

                    string bo = SalesSlipInputAcs.ctDefaultBoCode;
                    string beforeBoCode = beforeCellValue.Trim();
                    if (columnName == this._salesDetailDataTable.BoCodeColumn.ColumnName)
                    {
                        bo = beforeBoCode;
                    }
                    else
                    {
                        bo = this._salesDetailDataTable[rowIndex].BoCode;
                    }

                    double acptAnOdrCntForOrder = 0;
                    int beforeAcptAnOdrCntForOrder = TStrConv.StrToIntDef(beforeCellValue, 0);
                    if (columnName == this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName)
                    {
                        acptAnOdrCntForOrder = beforeAcptAnOdrCntForOrder;
                    }
                    else
                    {
                        acptAnOdrCntForOrder = this._salesDetailDataTable[rowIndex].AcceptAnOrderCntForOrder;
                    }


                    //発注選択が不可となった場合,受注数と出荷数をクリア
                    if ((this._salesSlipInputAcs.ExistStockTempForStock(salesRowNo)) ||
                        (!this._salesSlipInputAcs.ExistSalesDetailSupplierCd(salesRowNo)) ||
                            (!this._salesSlipInputAcs.ExistSalesDetailEnableOdrMakerCd(salesRowNo)) ||
                            ((!this._salesSlipInputAcs.ExistOrderInfo(salesRowNo)) &&
                             (this._salesSlipInputAcs.ExistOrderInfo(bo, this._salesDetailDataTable[rowIndex].SupplierCdForOrder, acptAnOdrCntForOrder))))
                    {
                        //>>>2011/11/11
                        ////-----UPD 2011/11/01 ----->>>>>
                        //if ((this._salesDetailDataTable[rowIndex].BoCode == SalesSlipInputAcs.ctDefaultBoCode) && this._salesDetailDataTable[rowIndex].AcceptAnOrderCntForOrder != 0)
                        //{
                        //this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = 0;
                        //}
                        ////this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = 0;
                        ////-----UPD 2011/11/01 -----<<<<<
                        if (this._salesDetailDataTable[rowIndex].ShipmentCntDisplay == 0) this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = this._salesDetailDataTable[rowIndex].AcceptAnOrderCntForOrder;
                        this._salesDetailDataTable[rowIndex].AcceptAnOrderCntDisplay = 0;
                        this._salesDetailDataTable[rowIndex].AcceptAnOrderCntForOrder = 0;
                        //<<<2011/11/11

                        //>>>2011/11/11
                        ////this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = this._salesDetailDataTable[rowIndex].ShipmentCntDefForChk; // DEL 2011/10/26
                        ////---ADD 2011/10/26 ---------------------------------------->>>>>
                        ////if ("BoCode" != this._salesDetailDataTable.BoCodeColumn.ColumnName)
                        //if ("BoCode" != this._salesDetailDataTable.BoCodeColumn.ColumnName || (this._salesDetailDataTable[rowIndex].BoCode == SalesSlipInputAcs.ctDefaultBoCode))
                        //{
                        //    this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = this._salesDetailDataTable[rowIndex].ShipmentCntDefForChk;
                        //}
                        ////---ADD 2011/10/26 ----------------------------------------<<<<<
                        //<<<2011/11/11

                        // 受注情報設定
                        this._salesSlipInputAcs.SettingSalesDetailAcceptAnOrder(salesRowNo);

                        // 数量設定処理
                        this._salesSlipInputAcs.SettingAcptAnOdrDetailRowShipmentCnt(salesRowNo);

                        // 数量設定処理
                        this._salesSlipInputAcs.SettingSalesDetailShipmentCnt(salesRowNo);

                        // 売上金額計算処理
                        this._salesSlipInputAcs.CalculationSalesMoney(rowIndex);

                        // 原価金額計算処理
                        this._salesSlipInputAcs.CalculationCost(rowIndex);

                        // 明細粗利率設定処理
                        this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                        // 一式情報設定処理
                        this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                    }
                }
                //<<<2010/06/09
            }
            #endregion

            // データ変更フラグプロパティをTrueにする
            this._salesSlipInputAcs.IsDataChanged = true;

            return resultInt;

        }

        //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ---------------->>>>>
        /// <summary>
        /// 明細項目変更時の標準価格及び売単価変更処理
        /// </summary>
        /// <param name="salesRowNo">明細行番号</param>
        /// <param name="listPriceDisplay">設定する標準価格</param>
        /// <returns>0:成功、0以外:失敗</returns>
        /// <exception cref="ArgumentOutOfRangeException">
        /// パラメータsalesRowNoで設定した番号の明細行番号の明細レコードが存在しない場合に発生します。
        /// </exception>
        /// <remarks>
        /// <br>Note       : 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応</br>
        /// <br>Programmer : 30757 佐々木 貴英</br>
        /// <br>Date       : 2015/04/16</br>
        /// <br>管理番号   : 11070149-00</br>
        /// <br></br>
        /// <br>Update Note: </br>
        /// <br>           : </br>
        /// <br></br>
        /// </remarks>
        private int SalesDetailRowSalesUnitPriceReSetting(int salesRowNo, double listPriceDisplay)
        {
            return this._salesSlipInputAcs.SalesDetailRowSalesUnitPriceReSetting(salesRowNo, listPriceDisplay);
        }
        //---ADD 30757 佐々木 貴英 2015/04/16 社内障害№684 販売区分、倉庫コードを変更すると表示区分に関わらず優良品の標準価格が表示される障害の対応 ----------------<<<<<

        // ADD 2010/08/13 ---->>>>
        /// <summary>
        /// グリッドセルアップデート後小数点表示区分イベント
        /// </summary>
        /// <param name="orgString"></param>
        /// <returns></returns>
        public int SmallPointProc(int rowIndexParm)
        {
            int resultInt = 0;

            double salesUnPrcTaxExcFl = this._salesDetailDataTable[rowIndexParm].SalesUnPrcTaxExcFl;
            double salesUnPrcTaxExcFlOutput;
            FractionCalculate.FracCalcMoney(salesUnPrcTaxExcFl, 1, 2, out salesUnPrcTaxExcFlOutput);
            this._salesDetailDataTable[rowIndexParm].SalesUnPrcTaxExcFl = salesUnPrcTaxExcFlOutput;

            double salesUnPrcTaxIncFl = this._salesDetailDataTable[rowIndexParm].SalesUnPrcTaxIncFl;
            double salesUnPrcTaxIncFlOutput;
            FractionCalculate.FracCalcMoney(salesUnPrcTaxIncFl, 1, 2, out salesUnPrcTaxIncFlOutput);
            this._salesDetailDataTable[rowIndexParm].SalesUnPrcTaxIncFl = salesUnPrcTaxIncFlOutput;

            return resultInt;
        }
        // ADD 2010/08/13 ----<<<<

        // >>>2010/05/30
        /// <summary>
        /// 全角⇒半角変換
        /// </summary>
        /// <param name="orgString"></param>
        /// <returns></returns>
        private string GetKanaString(string orgString)
        {
            // 全角⇒半角変換（途中に含まれる変換できない文字はそのまま）
            return Microsoft.VisualBasic.Strings.StrConv(orgString, Microsoft.VisualBasic.VbStrConv.Narrow, 0);
        }
        // <<<2010/05/30
        # endregion

        #region BLコード検索
        /// <summary>
        /// BLコード検索
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="bLGoodsCode">BLコード</param>
        /// <param name="searchResult">検索結果</param>
        /// <returns></returns>
        public int SearchPartsFromBLCode(int salesRowNo, int bLGoodsCode, out object searchResult)
        {
            //-----------------------------------------------------------------------------
            // 初期処理
            //-----------------------------------------------------------------------------
            searchResult = null;
            List<GoodsUnitData> goodsUnitDataList;
            List<Stock> stockList;
            int searchStatus;
            int retStasus = -1;

            //-----------------------------------------------------------------------------
            // BLコード検索
            //-----------------------------------------------------------------------------
            searchStatus = this.SearchPartsFromBLCodeProc(salesRowNo, bLGoodsCode, out goodsUnitDataList, out stockList);

            //-----------------------------------------------------------------------------
            // BLコード検索でヒットした場合
            //-----------------------------------------------------------------------------
            if ((searchStatus == 0) && (goodsUnitDataList.Count > 0))
            {
                ArrayList retList = new ArrayList();
                foreach (GoodsUnitData goodsUnitData in goodsUnitDataList)
                {
                    if (this._salesInputConstructionAcs.DataInputCountValue <= retList.Count) break;

                    retStasus = 0;
                    object reamainResult;
                    int reamainSearchStatus = this.SearchRemain(goodsUnitData, salesRowNo, out reamainResult);

                    if ((reamainSearchStatus == 0) && (reamainResult != null))
                    {
                        retList.Add(reamainResult);
                    }
                    else
                    {
                        retList.Add(goodsUnitData);
                    }

                    // --- DEL 2010/06/26 ---------->>>>>
                    ////>>>2010/05/30
                    //#region BLコード変換
                    //if ((this._salesSlipInputInitDataAcs.GetScmTtlSt().BLCodeChgDiv != 0) &&
                    //    (this._salesSlipInputAcs.SalesSlip.OnlineKindDiv == (int)SalesSlipInputAcs.OnlineKindDiv.SCM))
                    //{
                    //    goodsUnitData.BLGoodsCodeChange = bLGoodsCode;
                    //}
                    //#endregion
                    ////<<<2010/05/30
                    // --- DEL 2010/06/26 ----------<<<<<
                }
                searchResult = retList;
            }
            //-----------------------------------------------------------------------------
            // BLコード検索でヒットしなかった場合（空商品を返す）
            //-----------------------------------------------------------------------------
            else if ((searchStatus == -2) && (goodsUnitDataList.Count <= 0))
            {
                retStasus = -2;

                ArrayList retList = new ArrayList();
                //retList.Add(goodsUnitDataList[0]);
                searchResult = retList;
            }
            //-----------------------------------------------------------------------------
            // 車両情報無し
            //-----------------------------------------------------------------------------
            else if (searchStatus == -3)
            {
                retStasus = -3;
                ArrayList retList = new ArrayList();
                searchResult = retList;
            }

            return retStasus;
        }
        # endregion

        #region ●商品検索関係
        /// <summary>
        /// 商品・出荷残・受注残検索と行設定処理
        /// </summary>
        /// <param name="rowIndex">行インデックス</param>
        /// <returns></returns>
        public int SearchGoodsAndRemain_And_RowSetting(int rowIndex)
        {
            int salesRowNo = this._salesDetailDataTable[rowIndex].SalesRowNo;
            string goodsName = this._salesDetailDataTable[rowIndex].GoodsName;
            string goodsNo = this._salesDetailDataTable[rowIndex].GoodsNo;
            int makerCode = this._salesDetailDataTable[rowIndex].GoodsMakerCd;
            int blGoodsCode = this._salesDetailDataTable[rowIndex].BLGoodsCode;

            List<GoodsUnitData> goodsUnitDataList = new List<GoodsUnitData>();
            List<Stock> stockList = new List<Stock>();

            object retObj;

            // --- UPD 2009/10/19 ---------->>>>>
            int status = this.SearchGoodsAndRemain(goodsNo, goodsName, makerCode, blGoodsCode, salesRowNo, out retObj);
            // --- UPD 2009/10/19 ----------<<<<<
            switch (status)
            {
                case 0:
                case -2: // 2010/07/21
                    {
                        if (retObj != null)
                        {
                            // 商品検索
                            if (retObj is ArrayList)
                            {
                                ArrayList retList = (ArrayList)retObj;

                                for (int cnt = 0; cnt < retList.Count; cnt++)
                                {
                                    // 通常商品情報
                                    if (retList[cnt] is GoodsUnitData)
                                    {
                                        goodsUnitDataList.Clear();
                                        goodsUnitDataList.Add((GoodsUnitData)retList[cnt]);

                                        List<int> settingSalesRowNoList;
                                        //>>>2010/07/21
                                        //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(salesRowNo, salesRowNo + cnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true);
                                        if (status == -2)
                                        {
                                            this._salesSlipInputAcs._clearFlgForMaker = true;   // ADD 2010/09/19
                                            // --- UPD 2012/09/05 Y.Wakita ---------->>>>>
                                            //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(salesRowNo, salesRowNo + cnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true, true);
                                            this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(salesRowNo, salesRowNo + cnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true, true, true);
                                            // --- UPD 2012/09/05 Y.Wakita ----------<<<<<
                                            this._salesSlipInputAcs._clearFlgForMaker = false;  // ADD 2010/09/19
                                        }
                                        else
                                        {
                                            // --- UPD 2012/09/05 Y.Wakita ---------->>>>>
                                            //this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(salesRowNo, salesRowNo + cnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true, false);
                                            this._salesSlipInputAcs.SalesDetailRowGoodsSetting_GoodsBase(salesRowNo, salesRowNo + cnt, goodsUnitDataList, stockList, out settingSalesRowNoList, true, true, false, false);
                                            // --- UPD 2012/09/05 Y.Wakita ----------<<<<<
                                        }
                                        //<<<2010/07/21
                                    }
                                    // 受注照会(受注残検索)
                                    else if (retList[cnt] is AcptAnOdrRemainRefData)
                                    {
                                        List<AcptAnOdrRemainRefData> acptAnOdrRemainRefDataList = new List<AcptAnOdrRemainRefData>();
                                        acptAnOdrRemainRefDataList.Add((AcptAnOdrRemainRefData)retList[cnt]);
                                        int st = this._salesSlipInputAcs.SalesDetailRowSettingFromAcptAnOdrRemainRefList(salesRowNo + cnt, acptAnOdrRemainRefDataList, SalesSlipInputAcs.WayToDetailExpand.AddUpRemainder);
                                        if (st == -1)
                                        {
                                            TMsgDisp.Show(
                                                new Form(),
                                                emErrorLevel.ERR_LEVEL_INFO,
                                                "",
                                                "「計上」または「発注選択」済み明細がが選択されましたので、" + Environment.NewLine +
                                                "明細への展開を行いません。",
                                                -1,
                                                MessageBoxButtons.OK);
                                        }
                                    }
                                    // 出荷照会(出荷残検索)
                                    else if (retList[cnt] is SalHisRefResultParamWork)
                                    {
                                        List<SalHisRefResultParamWork> salHisRefResultParamWorkList = new List<SalHisRefResultParamWork>();
                                        salHisRefResultParamWorkList.Add((SalHisRefResultParamWork)retList[cnt]);
                                        int st = this._salesSlipInputAcs.SalesDetailRowSettingFromSalHisRefResultParamWorkListForAddUp(salesRowNo + cnt, salHisRefResultParamWorkList, SalesSlipInputAcs.WayToDetailExpand.AddUpRemainder);
                                        if (st == -1)
                                        {
                                             // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                                            if (!this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag)
                                             {
                                             // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                                                TMsgDisp.Show(
                                                    new Form(),
                                                    emErrorLevel.ERR_LEVEL_INFO,
                                                    "",
                                                    "「計上」済み明細が選択されましたので、" + Environment.NewLine +
                                                    "明細への展開を行いません。",
                                                    -1,
                                                    MessageBoxButtons.OK);
                                            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------>>>>
                                            }
                                            else
                                            {
                                                this._salesSlipInputInitDataAcs.RentSyncSupSlipFlag = false;
                                            }
                                            // ADD 譚洪 2020/02/24 PMKOBETSU-2912の対応 ------<<<<<
                                        }
                                    }
                                }
                            }

                            // 明細グリッド設定処理
                            //this.SettingGrid();

                            // 現在庫数調整
                            this._salesSlipInputAcs.SalesDetailStockInfoAdjust();
                        }

                        break;
                    }
                case -1:
                    {
                        break;
                    }
            }
            return status;
        }

        # endregion

        #region ●有効行チェック
        /// <summary>
        /// 有効行チェック
        /// </summary>
        /// <remarks>
        /// <br>Note       : 有効行チェックを行う。。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/12/15</br>
        /// </remarks>
        public bool CheckRowEffective(int rowindex)
        {
            bool checkFlag = false;

            //>>>2011/02/01
            if (this._salesDetailDataTable.Count <= rowindex) return checkFlag;
            //<<<2011/02/01

            int salesRowNo = this._salesDetailDataTable[rowindex].SalesRowNo;

            if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_NecessaryGoodsNo)
            {
                if (!string.IsNullOrEmpty(this._salesDetailDataTable[rowindex].GoodsNo) &&
                    !string.IsNullOrEmpty(this._salesDetailDataTable[rowindex].GoodsName))
                {
                    checkFlag = true;
                }
            }
            else if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_VoluntaryGoodsNo)
            {
                if (!string.IsNullOrEmpty(this._salesDetailDataTable[rowindex].GoodsName))
                {
                    checkFlag = true;
                }
            }

            // --- ADD 2010/06/02 ---------->>>>>
            if (this._salesDetailDataTable[rowindex].EditStatus == SalesSlipInputAcs.ctEDITSTATUS_Annotation ||
                this._salesDetailDataTable[rowindex].EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount)
            {
                checkFlag = true;
            }
            // --- ADD 2010/06/02 ----------<<<<<

            return checkFlag;
        }

        //>>>2011/08/24
        /// <summary>
        /// 有効行チェック(BLコード入力時)
        /// </summary>
        /// <param name="rowindex"></param>
        /// <param name="goodsNo"></param>
        /// <param name="goodsName"></param>
        /// <returns></returns>
        public bool CheckRowEffectiveForBLInput(int rowindex, string goodsNo, string goodsName)
        {
            bool checkFlag = false;

            if (this._salesDetailDataTable.Count <= rowindex) return checkFlag;

            int salesRowNo = this._salesDetailDataTable[rowindex].SalesRowNo;

            if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_NecessaryGoodsNo)
            {
                if (!string.IsNullOrEmpty(goodsNo) &&
                    !string.IsNullOrEmpty(goodsName))
                {
                    checkFlag = true;
                }
            }
            else if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_VoluntaryGoodsNo)
            {
                if (!string.IsNullOrEmpty(goodsName))
                {
                    checkFlag = true;
                }
            }

            if (this._salesDetailDataTable[rowindex].EditStatus == SalesSlipInputAcs.ctEDITSTATUS_Annotation ||
                this._salesDetailDataTable[rowindex].EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount)
            {
                checkFlag = true;
            }

            return checkFlag;
        }
        //<<<2011/08/24

        # endregion

        #region ●Table処理
        /// <summary>
        /// Table処理
        /// </summary>
        /// <param name="rowIndex">行インデックス</param>
        /// <returns></returns>
        public int DeatilActionTable(int salesRowNo, string actionType)
        {
            //削除
            if ("DEL".Equals(actionType))
            {
                if (salesRowNo == -1)
                {
                    this._salesDetailDataTable.Rows.Clear();

                    this._salesSlipInputAcs.ClearAcptAnOrderData();  // ADD 2011/12/13


                    // グリッド行初期設定処理
                    this._salesSlipInputAcs.SalesDetailRowInitialSetting(this._salesInputConstructionAcs.DataInputCountValue);
                }
                else
                {
                    #region 削除
                    this._salesDetailDataTable.AcceptChanges();

                    // ActiveRowインデックス取得処理
                    int rowIndex = salesRowNo - 1;
                    if (rowIndex == -1) return -1;

                    // 選択済み売上行番号リスト取得処理
                    List<int> selectedSalesRowNoList = this.GetSelectedSalesRowNoList(rowIndex);
                    if ((selectedSalesRowNoList == null) || (selectedSalesRowNoList.Count == 0))
                    {
                        return -1;
                    }

                    string message;
                    bool exist = this._salesSlipInputAcs.DeleteSalesDetailRowCheck(selectedSalesRowNoList, out message);

                    if (!exist)
                    {
                        TMsgDisp.Show(
                            new Form(),
                            emErrorLevel.ERR_LEVEL_INFO,
                            "",
                            message,
                            0,
                            MessageBoxButtons.OK);

                        return -1;
                    }

                    DialogResult dialogResult = TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_QUESTION,
                        "",
                        // --- UPD 2010/07/14 ---------->>>>>
                        //"選択行を削除してもよろしいですか？",
                        "明細" + salesRowNo.ToString() + "行目を削除してもよろしいですか？",
                        // --- UPD 2010/07/14 ----------<<<<<
                        0,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button1);

                    if (dialogResult != DialogResult.Yes)
                    {
                        return -1;
                    }

                    // 売上明細行削除処理
                    this._salesSlipInputAcs.DeleteSalesDetailRow(selectedSalesRowNoList, false);

                    // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
                    //入力モードは値引である場合
                    if (this._salesDetailDataTable != null
                          && this._discountAllLineflag)
                    {
                        rowIndex = this._salesDetailDataTable.Rows.Count - 1;
                        //一括値引Grid行初期化
                        DiscountGridInitial(rowIndex);
                    }
                    // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<

                    // 明細グリッドセル設定処理
                    //this.SettingGrid();

                    //if ((this.uGrid_Details.ActiveCell == null) && (this.uGrid_Details.Rows.Count > rowIndex))
                    //{
                    //    if ((this.uGrid_Details.Rows[rowIndex].Cells[this._salesDetailDataTable.GoodsNoColumn.ColumnName].Activation == Infragistics.Win.UltraWinGrid.Activation.Disabled) ||
                    //        (this.uGrid_Details.Rows[rowIndex].Cells[this._salesDetailDataTable.GoodsNoColumn.ColumnName].Activation == Infragistics.Win.UltraWinGrid.Activation.NoEdit) ||
                    //        (this.uGrid_Details.Rows[rowIndex].Cells[this._salesDetailDataTable.GoodsNoColumn.ColumnName].Column.Hidden == true))
                    //    {
                    //        this.uGrid_Details.ActiveCell = this.uGrid_Details.Rows[rowIndex].Cells[this._salesDetailDataTable.GoodsNameColumn.ColumnName];
                    //    }
                    //    else
                    //    {
                    //        this.uGrid_Details.ActiveCell = this.uGrid_Details.Rows[rowIndex].Cells[this._salesDetailDataTable.GoodsNoColumn.ColumnName];
                    //    }

                    //    if ((this.uGrid_Details.ActiveCell.Activation == Infragistics.Win.UltraWinGrid.Activation.AllowEdit) &&
                    //        (this.uGrid_Details.ActiveCell.Column.CellActivation == Infragistics.Win.UltraWinGrid.Activation.AllowEdit))
                    //    {
                    //        this.uGrid_Details.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode);
                    //    }
                    //}

                    // 現在庫数調整
                    this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                    //// 売上金額変更後発生イベントコール処理
                    //this.SalesPriceChangedEventCall();

                    //// フッタ部明細情報更新イベントコール処理
                    //this.SettingFooterEventCall(this.GetActiveRowSalesRowNo());

                    //// 車両情報設定イベントコール処理
                    //this.SettingCarInfoEventCall(this.GetActiveRowSalesRowNo());

                    // データ変更フラグプロパティをTrueにする
                    this._salesSlipInputAcs.IsDataChanged = true;

                    # endregion
                }
            }
            //挿入
            else if ("INSERT".Equals(actionType))
            {
                #region 挿入
                this._salesDetailDataTable.AcceptChanges();

                // ActiveRowインデックス取得処理
                int rowIndex = salesRowNo - 1;
                if (rowIndex == -1) return -1;

                string message;
                bool judge = this._salesSlipInputAcs.InsertSalesDetailRowCheck(out message);

                if (!judge)
                {
                    TMsgDisp.Show(
                         new Form(),
                         emErrorLevel.ERR_LEVEL_INFO,
                         "",
                         message,
                         0,
                         MessageBoxButtons.OK);

                    return -1;
                }

                // 売上明細行挿入処理
                this._salesSlipInputAcs.InsertSalesDetailRow(rowIndex);

                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
                //入力モードは値引である場合
                if (this._discountAllLineflag)
                {
                    //一括値引Grid行初期化
                    DiscountGridInitial(salesRowNo - 1);
                }
                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<
                // 明細グリッドセル設定処理
                //this.SettingGrid();

                // 現在庫数調整
                this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                // 売上金額変更後発生イベントコール処理
                //this.SalesPriceChangedEventCall();

                // フッタ部明細情報更新イベントコール処理
                //this.SettingFooterEventCall(this.GetActiveRowSalesRowNo());

                // 車両情報設定イベントコール処理
                //this.SettingCarInfoEventCall(this.GetActiveRowSalesRowNo());


                // 次入力可能セル移動処理
                //this.MoveNextAllowEditCell(true);

                //>>>2013/04/06
                // SCM回答用BLコードリストの更新
                this._salesSlipInputAcs.OperateOriginalBLGoodsCodeMap(salesRowNo, actionType);
                //<<<2013/04/06

                # endregion
            }
            //切り取り
            else if ("CUT".Equals(actionType))
            {
                #region 切り取り
                this._salesDetailDataTable.AcceptChanges();

                // ActiveRowインデックス取得処理
                int rowIndex = salesRowNo - 1;
                if (rowIndex == -1) return -1;

                // 選択済み仕入行番号リスト取得処理
                List<int> selectedStockRowNoList = this.GetSelectedSalesRowNoList(rowIndex);
                if (selectedStockRowNoList == null) return -1;

                // 売上明細データテーブルRowStatus列初期化処理
                this._salesSlipInputAcs.InitializeSalesDetailRowStatusColumn();

                // 売上明細データテーブルRowStatus列値設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowStatus(selectedStockRowNoList, SalesSlipInputAcs.ctROWSTATUS_CUT);

                // 明細グリッドセル設定処理
                //this.SettingGrid();

                // 次入力可能セル移動処理
                //this.MoveNextAllowEditCell(true);

                # endregion
            }
            //コピー
            else if ("COPY".Equals(actionType))
            {
                #region コピー
                this._salesDetailDataTable.AcceptChanges();


                // ActiveRowインデックス取得処理
                int rowIndex = salesRowNo - 1;
                if (rowIndex == -1) return -1;

                // 選択済み売上行番号リスト取得処理
                List<int> selectedSalesRowNoList = this.GetSelectedSalesRowNoList(rowIndex);
                if (selectedSalesRowNoList == null) return -1;

                // 売上明細データテーブルRowStatus列初期化処理
                this._salesSlipInputAcs.InitializeSalesDetailRowStatusColumn();

                // 売上明細データテーブルRowStatus列値設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowStatus(selectedSalesRowNoList, SalesSlipInputAcs.ctROWSTATUS_COPY);

                // 明細グリッドセル設定処理
                //this.SettingGrid();

                // 次入力可能セル移動処理
                //this.MoveNextAllowEditCell(true);
                # endregion
            }
            //貼り付け
            else if ("PASTE".Equals(actionType))
            {
                #region 貼り付け
                this._salesDetailDataTable.AcceptChanges();

                // ActiveRowインデックス取得処理
                int rowIndex = salesRowNo - 1;
                if (rowIndex == -1) return -1;
                int cutRowIndex = -1;//削除RowNum;// ADD 2013/01/24 鄧潘ハン REDMINE#34141

                // コピー売上明細行番号取得処理
                List<int> copySalesRowNoList = this._salesSlipInputAcs.GetCopySalesDetailRowNo();
                if (copySalesRowNoList == null) return -1;

                int pasteCheck = this._salesSlipInputAcs.CheckPasteSalesDetailRow(copySalesRowNoList, rowIndex);

                if (pasteCheck == 1)
                {
                    DialogResult dialogResult = TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_QUESTION,
                        "",
                        "貼り付け対象行に商品が入力されています。" + "\r\n" + "\r\n" +
                        "上書きされますが、よろしいですか？",
                        0,
                        MessageBoxButtons.YesNo,
                        MessageBoxDefaultButton.Button1);

                    if (dialogResult != DialogResult.Yes)
                    {
                        return -1;
                    }
                }
                else if (pasteCheck == 2)
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        "貼り付け対象行に編集不可商品が存在するため、貼り付け処理を行う事ができません。",
                        0,
                        MessageBoxButtons.OK);

                    return -1;
                }
                else if (pasteCheck == 3)
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        "対象行数が明細最大行数を超える為、貼り付け処理を行う事ができません。",
                        0,
                        MessageBoxButtons.OK);

                    return -1;
                }

                // --- ADD 2013/02/20 Y.Wakita ---------->>>>>
                // 切り取り元又はコピー元と貼り付け先が同一明細行の場合、貼り付け処理を行わない
                if (copySalesRowNoList[0] == salesRowNo)
                {
                    return 0;
                }
                // --- ADD 2013/02/20 Y.Wakita ---------->>>>>

                // 表示行数取得処理
                //int prevVisibleRowCount = this.GetVisibleRowCount();

                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
                //入力モードは値引である場合、切り取り行の取得
                if (this._discountAllLineflag)
                {
                    foreach (int salesRowNoforCut in copySalesRowNoList)
                    {
                        SalesInputDataSet.SalesDetailRow row = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(this._salesSlipInputAcs.CurrentSalesSlipNum, salesRowNoforCut);

                        if (row != null)
                        {
                            if (row.RowStatus == SalesSlipInputAcs.ctROWSTATUS_CUT)
                            {
                                cutRowIndex = salesRowNoforCut;
                                break;
                            }
                        }
                    }
                 }
                 // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<

                // 売上明細行貼り付け処理
                this._salesSlipInputAcs.PasteSalesDetailRow(copySalesRowNoList, rowIndex);

                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
                //入力モードは値引である場合、行値引モードに変更
                if (cutRowIndex != -1 && this._discountAllLineflag)
                {
                    //一括値引Grid行初期化
                    DiscountGridInitial(cutRowIndex - 1);
                }
                // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<

                // 明細グリッドセル設定処理
                //this.SettingGrid();

                // 現在庫数調整
                this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                // 売上金額変更後発生イベントコール処理
                //this.SalesPriceChangedEventCall();

                // フッタ部明細情報更新イベントコール処理
                //this.SettingFooterEventCall(this.GetActiveRowSalesRowNo());

                // 車両情報設定イベントコール処理
                //this.SettingCarInfoEventCall(this.GetActiveRowSalesRowNo());

                // 次入力可能セル移動処理
                //this.MoveNextAllowEditCell(true);

                // 表示行数取得処理
                //int afterVisibleRowCount = this.GetVisibleRowCount();

                //// 表示する行数が減った場合、調整する
                //if (afterVisibleRowCount < prevVisibleRowCount)
                //{
                //    for (int i = afterVisibleRowCount; i < prevVisibleRowCount; i++)
                //    {
                //        this._salesSlipInputAcs.AddSalesDetailRow();
                //    }

                //    // 明細グリッドセル設定処理
                //    this.SettingGrid();
                //}

                // セルの編集モードを一度解除し、再度編集モードに設定する
                //this.CellExitEnterEditEnter();

                // 現在庫数調整
                this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                // --- ADD 2012/10/05 Y.Wakita ---------->>>>>
                // ●仕入情報設定
                SalesInputDataSet.StockTempRow stockTempRow = this._salesSlipInputAcs.GetStockTempRow(copySalesRowNoList[0]);
                if (stockTempRow.PartySaleSlipNum != "")
                {
                    // --- ADD 2012/10/31 Y.Wakita ---------->>>>>
                    if (stockTempRow.PartySaleSlipNum == SalesSlipStockInfoInputAcs.ctDummyPartySalesSilpNum)
                    {
                        stockTempRow.PartySaleSlipNum = string.Empty;
                    }
                    // --- ADD 2012/10/31 Y.Wakita ----------<<<<<
                    uGridDetailsAfterCellUpdate(rowIndex, stockTempRow.PartySaleSlipNum, "", "PartySalesSlipNum");
                }
                // --- ADD 2012/10/05 Y.Wakita ----------<<<<<

                // データ変更フラグプロパティをTrueにする
                this._salesSlipInputAcs.IsDataChanged = true;

                //this.uGrid_Details_AfterCellActivate(this.uGrid_Details, new EventArgs());
                # endregion
            }

            return 0;
        }


        // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
        /// <summary>
        /// 一括値引Grid行初期化
        /// </summary>
        /// <param name="rowIndex">rowIndex</param>
        /// <remarks>
        /// <br>Note       : 一括値引Grid行初期化</br>
        /// <br>Programmer : 鄧潘ハン</br>
        /// <br>Date       : 2013/01/24</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分　Redmine#34141 一括値引功能を追加についての対応</br>
        /// </remarks>
        private void DiscountGridInitial(int rowIndex)
        {
            this._salesDetailDataTable[rowIndex].SalesRowNo = rowIndex + 1;
            this._salesDetailDataTable[rowIndex].EditStatus = SalesSlipInputAcs.ctEDITSTATUS_GoodsDiscount;      // 商品値引ステータス
            this._salesDetailDataTable[rowIndex].SalesSlipCdDtl = (int)SalesSlipInputAcs.SalesSlipCdDtl.Discount;                         // 売上伝票区分(明細)
            this._salesDetailDataTable[rowIndex].ShipmentCntDisplay = -1 * this._salesDetailDataTable[rowIndex].ShipmentCntDisplay;
            this._salesDetailDataTable[rowIndex].ShipmentCnt = (this._salesSlipInputAcs.SalesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ? -1 : 1;

            if (this._salesSlipInputAcs.SalesSlip.ConsTaxLayMethod == (int)SalesSlipInputAcs.ConsTaxLayMethod.TaxExempt)
            {
                this._salesDetailDataTable[rowIndex].TaxationDivCd = (int)CalculateTax.TaxationCode.TaxNone; // 非課税
            }
            else if (this._salesSlipInputAcs.SalesSlip.TotalAmountDispWayCd == (int)SalesSlipInputAcs.TotalAmountDispWayCd.NoTotalAmount)
            {
                this._salesDetailDataTable[rowIndex].TaxationDivCd = (int)CalculateTax.TaxationCode.TaxExc; // 外税
            }
            else
            {
                this._salesDetailDataTable[rowIndex].TaxationDivCd = (int)CalculateTax.TaxationCode.TaxInc; // 内税
            }

            if (this._salesDetailDataTable[rowIndex].TaxationDivCd == (int)CalculateTax.TaxationCode.TaxNone)
            {
                this._salesDetailDataTable[rowIndex].TaxDiv = 1; // 非課税
            }
            else
            {
                this._salesDetailDataTable[rowIndex].TaxDiv = 0; // 課税
            }
            this._salesDetailDataTable[rowIndex].SalesMoneyTaxExc = this._salesDetailDataTable[rowIndex].SalesMoneyDisplay;   // 売上金額(税抜き)
            this._salesDetailDataTable[rowIndex].SalesMoneyTaxInc = this._salesDetailDataTable[rowIndex].SalesMoneyDisplay;   // 売上金額(税込み)
            this._salesDetailDataTable[rowIndex].SalesUnPrcTaxExcFl = this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay;// 売単価(税抜き)
            this._salesDetailDataTable[rowIndex].SalesUnPrcTaxIncFl = this._salesDetailDataTable[rowIndex].SalesUnPrcDisplay;// 売単価(税込み)
        }

        /// <summary>
        /// グリッド値があるかの判断
        /// </summary>
        /// <returns>status</returns>
        /// <remarks>
        /// <br>Note       : グリッド値があるかの判断</br>
        /// <br>Programmer : 鄧潘ハン</br>
        /// <br>Date       : 2013/01/24</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分　Redmine#34141 一括値引功能を追加についての対応</br>
        /// </remarks>
        private bool GridNoNull()
        {
            int flag = -1;
            foreach (SalesInputDataSet.SalesDetailRow row in this._salesDetailDataTable)
            {
                //行中に値があり、また品番或いは品名は非NULL且つ非空
                if (row != null && (!String.IsNullOrEmpty(row.GoodsNo) || !String.IsNullOrEmpty(row.GoodsName)))
                {
                    flag = 1;
                    break;
                }
            }
            if (flag == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<


        // ---ADD 2011/04/13------------------>>>>>
        /// <summary>
        /// 選択済み売上行番号削除処理（多行削除場合用）
        /// </summary>
        /// <param name="startRowIndex">初始行番号</param>
        /// <param name="endRowIndex">最終行番号</param>
        /// <returns>status</returns>
        /// <remarks>
        /// <br>Note      : 選択済み売上行番号削除処理</br>
        /// <br>Programer : 曹文傑</br>
        /// <br>Date      : 2011/04/13</br>
        /// </remarks>
        public int DetailDeleteActionTable(int startRowNo, int endRowNo)
        {
            if (startRowNo == -1)
            {
                this._salesDetailDataTable.Rows.Clear();

                // グリッド行初期設定処理
                this._salesSlipInputAcs.SalesDetailRowInitialSetting(this._salesInputConstructionAcs.DataInputCountValue);
            }
            else
            {
                #region 削除
                this._salesDetailDataTable.AcceptChanges();

                // ActiveRowインデックス取得処理
                int startRowIndex = startRowNo - 1;
                int endRowIndex = endRowNo - 1;
                if (startRowIndex == -1) return -1;

                // 選択済み売上行番号リスト取得処理
                List<int> selectedSalesRowNoList = this.GetSelectedSalesRowNoList(startRowIndex, endRowIndex);
                if ((selectedSalesRowNoList == null) || (selectedSalesRowNoList.Count == 0))
                {
                    return -1;
                }

                string message;
                bool exist = this._salesSlipInputAcs.DeleteDetailRowsCheck(selectedSalesRowNoList, out message);

                if (!exist)
                {
                    TMsgDisp.Show(
                        new Form(),
                        emErrorLevel.ERR_LEVEL_INFO,
                        "",
                        message,
                        0,
                        MessageBoxButtons.OK);

                    return -1;
                }

                DialogResult dialogResult = TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_QUESTION,
                    "",
                    "選択行を削除してもよろしいですか？",
                    0,
                    MessageBoxButtons.YesNo,
                    MessageBoxDefaultButton.Button1);

                if (dialogResult != DialogResult.Yes)
                {
                    return -1;
                }

                // 売上明細行削除処理
                this._salesSlipInputAcs.DeleteSalesDetailRow(selectedSalesRowNoList, false);

                // --- ADD 2013/02/15 Y.Wakita ---------->>>>>
                // REDMINE#34141 対応漏れ
                //入力モードは値引である場合
                if (this._salesDetailDataTable != null
                      && this._discountAllLineflag)
                {
                    int cnt = endRowIndex - startRowIndex;
                    int rowIndex = this._salesDetailDataTable.Rows.Count - 1;
                    for (int i = 0; i <= cnt; i++)
                    {
                        //一括値引Grid行初期化
                        DiscountGridInitial(rowIndex - i);
                    }
                }
                // --- ADD 2013/02/15 Y.Wakita ----------<<<<<

                // 現在庫数調整
                this._salesSlipInputAcs.SalesDetailStockInfoAdjust();

                // データ変更フラグプロパティをTrueにする
                this._salesSlipInputAcs.IsDataChanged = true;

                # endregion
            }

            return 0;
        }

        /// <summary>
        /// 選択済み売上行番号リスト取得処理（多行削除場合用）
        /// </summary>
        /// <param name="startRowIndex">初始行番号</param>
        /// <param name="endRowIndex">最終行番号</param>
        /// <returns>選択済み売上行番号リスト</returns>
        /// <remarks>
        /// <br>Note      : 選択済み売上行番号リスト取得処理</br>
        /// <br>Programer : 曹文傑</br>
        /// <br>Date      : 2011/04/13</br>
        /// </remarks>
        private List<int> GetSelectedSalesRowNoList(int startRowIndex, int endRowIndex)
        {

            List<int> selectedSalesRowNoList = new List<int>();
            List<int> selectedIndexList = new List<int>();

            for (int i = startRowIndex; i <= endRowIndex; i++)
            {
                selectedSalesRowNoList.Add(this._salesDetailDataTable[i].SalesRowNo);
                selectedIndexList.Add(i);
            }

            return selectedSalesRowNoList;
        }
        // ---ADD 2011/04/13------------------<<<<<

        /// <summary>
        /// 選択済み売上行番号リスト取得処理
        /// </summary>
        /// <returns>選択済み売上行番号リスト</returns>
        private List<int> GetSelectedSalesRowNoList(int rowIndex)
        {
            //Infragistics.Win.UltraWinGrid.UltraGridCell cell = this.uGrid_Details.ActiveCell;
            //Infragistics.Win.UltraWinGrid.SelectedRowsCollection rows = this.uGrid_Details.Selected.Rows;
            //if ((cell == null) && (rows == null)) return null;

            List<int> selectedSalesRowNoList = new List<int>();
            List<int> selectedIndexList = new List<int>();

            //if (cell != null)
            //{
            //    selectedSalesRowNoList.Add(this._salesDetailDataTable[cell.Row.Index].SalesRowNo);
            //    selectedIndexList.Add(cell.Row.Index);
            //}
            //else if (rows != null)
            //{
            //    foreach (Infragistics.Win.UltraWinGrid.UltraGridRow row in rows)
            //    {
            //        selectedSalesRowNoList.Add(this._salesDetailDataTable[row.Index].SalesRowNo);
            //        selectedIndexList.Add(row.Index);
            //    }
            //}
            selectedSalesRowNoList.Add(this._salesDetailDataTable[rowIndex].SalesRowNo);
            selectedIndexList.Add(rowIndex);

            return selectedSalesRowNoList;
        }

        # endregion

        #region ●チェック処理
        /// <summary>
        /// 粗利率チェック
        /// </summary>
        /// <br>Update Note: 2011/02/11 曹文傑</br>
        /// <br>                        伝票内容が差し替わってしまう件の対応</br>
        /// <br>Update Note: 2011/09/08 yangmj</br>
        /// <br>                        redmine #24567の対応</br>
        public int CheckDetailAction(int beforeRowIndex, int parmRowIndex, int checkType)
        {
            // ---ADD 2011/02/11---------------->>>>
            if (this._salesDetailDataTable.Count <= beforeRowIndex)
            {
                return 0;
            }
            // ---ADD 2011/02/11----------------<<<<
            //粗利率チェック
            if (checkType == 1)
            {
                // --- UPD 2010/06/02 ---------->>>>>
                //CheckSalesUnitCost(beforeRowIndex);
                // --- UPD 2010/07/19 -------------->>>>>
                //if (!CheckSalesUnitCost(beforeRowIndex))
                //{
                //    return -1;
                //}
                return CheckSalesUnitCost(beforeRowIndex);
                // --- UPD 2010/07/19 --------------<<<<<
                // --- UPD 2010/06/02 ----------<<<<<
            }
            //売価率および売単価が未入力チェック
            else if (checkType == 2)
            {
                // --- UPD 2010/07/19 -------------->>>>>
                //if (!CheckSalesRateAndUnPrcDisplay(beforeRowIndex))
                //{
                //    return -1;
                //}
                return CheckSalesRateAndUnPrcDisplay(beforeRowIndex);
                // --- UPD 2010/07/19 --------------<<<<<

            }
            // ADD 2010/11/25 --- >>>>
            //入力明細で出荷数と売上金額の符号が異なっている明細を含む場合、エラーメッセージを表示
            else if (checkType == 3)
            {
                return CheckShipmentCntPriceNoSame(beforeRowIndex);
            }
            //入力明細で受注数と売上金額の符号が異なっている明細を含む場合、エラーメッセージを表示
            else if (checkType == 4)
            {
                return CheckAcceptAnOrderCntPriceNoSame(beforeRowIndex);
            }
            // ADD 2010/11/25 --- <<<<
            //>>>2011/05/25
            // 販売区分未入力チェック
            else if (checkType == 5)
            {
                return CheckSalesCode(beforeRowIndex);
            }
            //<<<2011/05/25
            // ADD 2011/09/08 --- >>>>
            else if (checkType == 6)
            {
                return CheckSalesUnitCostForF10(beforeRowIndex);
            }
            // ADD 2011/09/08 --- <<<<
            return 0;
        }

        /// <summary>
        /// 粗利率チェック
        /// </summary>
        //public int CheckDetailAction(int beforeRowIndex, int parmRowIndex, int beforeColIndex, string cellValue, int checkType)
        //{
        //    //粗利率チェック
        //    if (checkType == 1)
        //    {
        //        // --- UPD 2010/06/02 ---------->>>>>
        //        //CheckSalesUnitCost(beforeRowIndex);
        //        // --- UPD 2010/07/19 -------------->>>>>
        //        //if (!CheckSalesUnitCost(beforeRowIndex))
        //        //{
        //        //    return -1;
        //        //}
        //        return CheckSalesUnitCostProc(beforeRowIndex, beforeColIndex, cellValue);
        //        // --- UPD 2010/07/19 --------------<<<<<
        //        // --- UPD 2010/06/02 ----------<<<<<
        //    }
        //    //売価率および売単価が未入力チェック
        //    else if (checkType == 2)
        //    {
        //        // --- UPD 2010/07/19 -------------->>>>>
        //        //if (!CheckSalesRateAndUnPrcDisplay(beforeRowIndex))
        //        //{
        //        //    return -1;
        //        //}
        //        return CheckSalesRateAndUnPrcDisplay(beforeRowIndex);
        //        // --- UPD 2010/07/19 --------------<<<<<

        //    }

        //    return 0;
        //}
        // --- ADD 2011/09/08 -------------->>>>>
        /// <summary>
        /// 粗利率チェック
        /// </summary>
        public int CheckSalesUnitCostForF10(int beforeRowIndex)
        {
            int ret = 0;

            #region 粗利率チェック
            string errMsg = string.Empty;
            bool checkFlag = false;
            if (this._salesDetailDataTable != null && beforeRowIndex >= 0)
            {
                int salesRowNo = this._salesDetailDataTable[beforeRowIndex].SalesRowNo;

                if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_NecessaryGoodsNo)
                {
                    if (!string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsNo) &&
                        !string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsName))
                    {
                        checkFlag = true;
                    }
                }
                else if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_VoluntaryGoodsNo)
                {
                    if (!string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsName))
                    {
                        checkFlag = true;
                    }
                }

                if (checkFlag == true)
                {
                    //int checkResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 0, out errMsg, 0, true); //del 2012/01/18 liusy  ソースマージ 
                    int checkResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 0, out errMsg, 0); //add 2012/01/18 liusy  ソースマージ 

                    if (checkResult != 0)
                    {
                        // --- DEL 2012/05/16 ---------->>>>>
                        /*
                        // --- ADD 2012/05/14 ---------->>>>>
                        if (checkResult == 1)
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.OK);
                        }
                        else
                        {
                            // --- ADD 2012/05/14 ----------<<<<<
                        // --- ADD 2012/04/23 ---------->>>>>
                        DialogResult dResult = TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button2);

                        if (dResult == DialogResult.Yes)
                        {
                            checkResult = 0;
                        }
                        // --- ADD 2012/04/23 ----------<<<<<
                            // --- ADD 2012/05/14 ---------->>>>>
                            else
                            {
                                checkResult = 1;
                            }
                        }
                        // --- ADD 2012/05/14 ----------<<<<<
                        */ 
                        // --- DEL 2012/05/16 ----------<<<<<
                        // --- ADD 2012/05/16 ---------->>>>>
                        if (checkResult == 1)
                        {
                            TMsgDisp.Show(
                                new Form(),
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.OK);
                        }
                        else
                        {
                            DialogResult dResult = TMsgDisp.Show(
                                    new Form(),
                                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                    "",
                                    errMsg,
                                    -1,
                                    MessageBoxButtons.YesNo,
                                    MessageBoxDefaultButton.Button2);

                            if (dResult == DialogResult.No)
                            {
                                checkResult = 1;
                            }
                        }
                        // --- ADD 2012/05/16 ----------<<<<<

                        //del by 2012/01/18 liusy  ソースマージ----->>>>> 
                        /*
                        //add 2011/12/01 liusy Redmine#8379  ----->>>>>>
                        if (checkResult == 8)
                        {
                            DialogResult dResult = TMsgDisp.Show(
                                //this,
                                emErrorLevel.ERR_LEVEL_QUESTION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.YesNo,MessageBoxDefaultButton.Button2);
                            if (dResult == DialogResult.Yes)
                            {
                                checkResult = 0;
                            }
                            else
                            {
                                checkResult = 9;
                            }
                        }                     
                        else if (checkResult == 9)
                        {
                            TMsgDisp.Show(
                                //this,
                               emErrorLevel.ERR_LEVEL_EXCLAMATION,
                               "",
                               errMsg,
                               -1,
                               MessageBoxButtons.OK);
                        }
                        // add 2011/12/01 liusy Redmine#8379 -----<<<<<<
                        */
                        //del by 2012/01/18 liusy  ソースマージ-----<<<<<
                        if (checkResult == 1)
                        {
                            ret = -1;
                        }
                        else if (checkResult == 2)
                        {
                            ret = 1;
                        }
                        else if (checkResult == 0)
                        {
                            ret = 0;
                        }
                        else if (checkResult == 3)
                        {
                            ret = 3;
                        }
                        //del by 2012/01/18 liusy  ソースマージ----->>>>> 
                        /*
                        else if (checkResult == 9)
                        {
                            ret = 9;
                        }
                        */
                        //del by 2012/01/18 liusy  ソースマージ-----<<<<<
                    }
                }
            }
            #endregion
            return ret;
        }
        // --- ADD 2011/09/08 --------------<<<<<
        /// <summary>
        /// 粗利率チェック
        /// </summary>
        public int CheckSalesUnitCost(int beforeRowIndex)
        {
            int ret = 0;

            #region 粗利率チェック
            string errMsg = string.Empty;
            bool checkFlag = false;
            if (this._salesDetailDataTable != null && beforeRowIndex >= 0)
            {
                int salesRowNo = this._salesDetailDataTable[beforeRowIndex].SalesRowNo;

                if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_NecessaryGoodsNo)
                {
                    if (!string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsNo) &&
                        !string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsName))
                    {
                        checkFlag = true;
                    }
                }
                else if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_VoluntaryGoodsNo)
                {
                    if (!string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsName))
                    {
                        checkFlag = true;
                    }
                }

                if (checkFlag == true)
                {
                    // UPD 2010/09/13 --- >>>>
                    //this.uGrid_Details.UpdateData();
                    //原単価
                    // --- UPD 2010/09/07 ---------->>>>
                    // --- UPD 2010/09/06 ---------->>>>
                    //SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckSalesUnitCost(salesRowNo, 0, out errMsg, 1);
                    //SalesSlipInputAcs.CheckResult checkResult = this._salesSlipInputAcs.CheckSalesUnitCost(salesRowNo, 0, out errMsg, 0);
                    // --- UPD 2010/09/06 ----------<<<<

                    //if (checkResult != SalesSlipInputAcs.CheckResult.Ok)
                    //{
                    //    TMsgDisp.Show(
                    //        //this,
                    //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    //        "",
                    //        errMsg,
                    //        -1,
                    //        MessageBoxButtons.OK);

                    //    if (checkResult == SalesSlipInputAcs.CheckResult.Error)
                    //    {
                    //        //this.uGrid_Details.ActiveCell = this.uGrid_Details.Rows[_beforeCell.Row.Index].Cells[this._salesDetailDataTable.SalesRateColumn.ColumnName];

                    //        ret = -1;
                    //    }
                    //    else if (checkResult == SalesSlipInputAcs.CheckResult.Warning)
                    //    {
                    //        ret = 1;
                    //    }
                    //    else if (checkResult == SalesSlipInputAcs.CheckResult.Ok)
                    //    {
                    //        ret = 0;
                    //    }
                    //}

                    //int checkResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 0, out errMsg, 0, false); //del 2012/01/18 liusy  ソースマージ 
                    int checkResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 0, out errMsg, 0); //add 2012/01/18 liusy  ソースマージ 

                    if (checkResult != 0)
                    {
                        // --- DEL 2012/05/16 ---------->>>>>
                        /*
                        // --- ADD 2012/05/14 ---------->>>>>
                        if (checkResult == 1)
                        {
                            TMsgDisp.Show(
                                //this,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.OK);
                        }
                        else
                        {
                            // --- ADD 2012/05/14 ----------<<<<<
                        // --- UPD 2012/04/23 ---------->>>>>
                        ////add by 2012/01/18 liusy  ソースマージ----->>>>> 
                        //TMsgDisp.Show(
                        //    //this,
                        //    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                        //    "",
                        //    errMsg,
                        //    -1,
                        //    MessageBoxButtons.OK);
                        ////add by 2012/01/18 liusy  ソースマージ-----<<<<< 
                        DialogResult dResult = TMsgDisp.Show(
                            //this,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                               MessageBoxButtons.YesNo,
                               MessageBoxDefaultButton.Button2);

                        if (dResult == DialogResult.Yes)
                        {
                                // --- UPD 2012/05/14 ---------->>>>>
                                //if (checkResult == 1)
                                //{
                                //    checkResult = 2;
                                //}
                                checkResult = 2;
                                // --- UPD 2012/05/14 ----------<<<<
                            }
                            // --- UPD 2012/04/23 ----------<<<<<
                            // --- ADD 2012/05/14 ---------->>>>>
                            else
                            {
                                checkResult = 1;
                            }
                        }
                        // --- ADD 2012/05/14 ----------<<<<<
                        */
                        // --- DEL 2012/05/16 ----------<<<<<
                        // --- ADD 2012/05/16 ---------->>>>>
                        if (checkResult == 1)
                        {
                            TMsgDisp.Show(
                                //this,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.OK);
                        }
                        else
                        {
                            DialogResult dResult = TMsgDisp.Show(
                                //this,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.YesNo,
                                MessageBoxDefaultButton.Button2);

                            if (dResult == DialogResult.No)
                            {
                                checkResult = 1;
                            }
                        }
                        // --- ADD 2012/05/16 ----------<<<<<
                        
                        //del by 2012/01/18 liusy  ソースマージ----->>>>> 
                        /*
                        //add by liusy #26917 2011/12/16  ------>>>>>>
                        if (checkResult == 8)
                        {
                            DialogResult dResult = TMsgDisp.Show(
                                //this,
                                emErrorLevel.ERR_LEVEL_QUESTION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.YesNo, MessageBoxDefaultButton.Button2);
                            if (dResult == DialogResult.Yes)
                            {
                                checkResult = 0;
                            }
                            else
                            {
                                checkResult = 9;
                            }
                        }
                        else
                        {
                            TMsgDisp.Show(
                                //this,
                                emErrorLevel.ERR_LEVEL_EXCLAMATION,
                                "",
                                errMsg,
                                -1,
                                MessageBoxButtons.OK);
                        }
                        //add by liusy #26917 2011/12/16  ------<<<<<
                        */
                        //del by 2012/01/18 liusy  ソースマージ-----<<<<<
                        if (checkResult == 1)
                        {
                            ret = -1;
                        }
                        else if (checkResult == 2)
                        {
                            ret = 1;
                        }
                        else if (checkResult == 0)
                        {
                            ret = 0;
                        }
                        else if (checkResult == 3)
                        {
                            ret = 3;
                        }
                        //del by 2012/01/18 liusy  ソースマージ----->>>>> 
                        /*
                        //add by liusy #26917 2011/12/16  ------>>>>>
                        else if (checkResult == 9)
                        {
                            ret = 9;
                        }
                        //add by liusy #26917 2011/12/16  ------<<<<<
                        */
                        //del by 2012/01/18 liusy  ソースマージ-----<<<<<
                        // UPD 2010/09/13 --- <<<<
                    }
                }
            }
            #endregion
            return ret;
        }

        /// <summary>
        /// 粗利率チェック
        /// </summary>
        public int CheckSalesUnitCostProc(int beforeRowIndex, int beforeColIndex, string cellValue)
        {
            int ret = 0;

            // 原価率
            if ((beforeRowIndex % 2) == 0 && beforeColIndex == 9)
            {

            }
            // 売価率
            else if ((beforeRowIndex % 2) == 1 && beforeColIndex == 9)
            {

            }

            #region 粗利率チェック
            string errMsg = string.Empty;
            bool checkFlag = false;
            if (this._salesDetailDataTable != null && beforeRowIndex >= 0)
            {
                int salesRowNo = this._salesDetailDataTable[beforeRowIndex].SalesRowNo;

                if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_NecessaryGoodsNo)
                {
                    if (!string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsNo) &&
                        !string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsName))
                    {
                        checkFlag = true;
                    }
                }
                else if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_VoluntaryGoodsNo)
                {
                    if (!string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsName))
                    {
                        checkFlag = true;
                    }
                }

                if (checkFlag == true)
                {

                    //int checkResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 0, out errMsg, 0, false); //del 2012/01/18 liusy  ソースマージ
                    int checkResult = this._salesSlipInputAcs.CheckSalesUnitCost1(salesRowNo, 0, out errMsg, 0); //add 2012/01/18 liusy  ソースマージ

                    if (checkResult != 0)
                    {
                        TMsgDisp.Show(
                            //this,
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);

                        if (checkResult == 1)
                        {
                            //this.uGrid_Details.ActiveCell = this.uGrid_Details.Rows[_beforeCell.Row.Index].Cells[this._salesDetailDataTable.SalesRateColumn.ColumnName];

                            ret = -1;
                        }
                        else if (checkResult == 2)
                        {
                            ret = 1;
                        }
                        else if (checkResult == 0)
                        {
                            ret = 0;
                        }
                        else if (checkResult == 3)
                        {
                            ret = 3;
                        }
                    }
                    // --- UPD 2010/09/07 ----------<<<<
                }
            }
            #endregion
            return ret;
        }

        // ADD 2010/11/25 --- >>>>
        /// <summary>
        /// 出荷数と売上金額の符号が異のチェック
        /// </summary>
        public int CheckShipmentCntPriceNoSame(int beforeRowIndex)
        {
            int ret = 0;

            #region 出荷数と売上金額の符号が異のチェック
            string errMsg = string.Empty;
            bool checkFlag = false;
            if (this._salesDetailDataTable != null && beforeRowIndex >= 0)
            {
                int salesRowNo = this._salesDetailDataTable[beforeRowIndex].SalesRowNo;

                if (this._salesDetailDataTable[beforeRowIndex].ShipmentCntDisplay != 0)
                {
                    checkFlag = true;
                }

                if (checkFlag == true)
                {

                    int checkResult = this._salesSlipInputAcs.CheckCntPrice(salesRowNo, 1, out errMsg);

                    if (checkResult != 0)
                    {
                        TMsgDisp.Show(
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);

                        ret = -1;
                        return ret;
                    }
                }
            }
            #endregion
            return ret;
        }

        /// <summary>
        /// 受注数と売上金額の符号が異のチェック
        /// </summary>
        public int CheckAcceptAnOrderCntPriceNoSame(int beforeRowIndex)
        {
            int ret = 0;

            #region 受注数と売上金額の符号が異のチェック
            string errMsg = string.Empty;
            bool checkFlag = false;
            if (this._salesDetailDataTable != null && beforeRowIndex >= 0)
            {
                int salesRowNo = this._salesDetailDataTable[beforeRowIndex].SalesRowNo;

                if (this._salesDetailDataTable[beforeRowIndex].AcceptAnOrderCntDisplay != 0)
                {
                    checkFlag = true;
                }

                if (checkFlag == true)
                {

                    int checkResult = this._salesSlipInputAcs.CheckCntPrice(salesRowNo, 2, out errMsg);

                    if (checkResult != 0)
                    {
                        TMsgDisp.Show(
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            errMsg,
                            -1,
                            MessageBoxButtons.OK);

                        ret = -1;
                        return ret;
                    }
                }
            }
            #endregion
            return ret;
        }
        // ADD 2010/11/25 --- <<<<

        /// <summary>
        /// 売価率および売単価が未入力チェック
        /// </summary>
        /// <remarks>
        /// <br>Note       : 売価率および売単価が未入力の場合、メッセージ表示を行い、フォーカスの制御を行う。。</br>
        /// <br>Programmer : 張凱</br>
        /// <br>Date       : 2009/11/24</br>
        /// <br>Update Note: 2010/06/02 張凱 PM.NS障害・改良対応（７月リリース案件）No.12</br>
        /// </remarks>
        public int CheckSalesRateAndUnPrcDisplay(int beforeRowIndex)
        {
            int ret = 0;

            #region 売価率および売単価が未入力チェック
            bool checkFlag = false;
            if (this._salesDetailDataTable != null && beforeRowIndex >= 0)
            {
                if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_NecessaryGoodsNo)
                {
                    if (!string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsNo) &&
                        !string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsName))
                    {
                        checkFlag = true;
                    }
                }
                else if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_VoluntaryGoodsNo)
                {
                    if (!string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsName))
                    {
                        checkFlag = true;
                    }
                }

                // --- UPD 2010/06/02 ---------->>>>>
                //>>>2010/02/22
                //if (this._salesDetailDataTable[beforeRowIndex].EditStatus == SalesSlipInputAcs.ctEDITSTATUS_Annotation) checkFlag = false;
                //<<<2010/02/22

                if (this._salesDetailDataTable[beforeRowIndex].EditStatus == SalesSlipInputAcs.ctEDITSTATUS_Annotation ||
                    this._salesDetailDataTable[beforeRowIndex].EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount)
                {
                    checkFlag = false;
                }

                // --- UPD 2010/06/02 ----------<<<<<

                if (checkFlag == true)
                {
                    if (this._salesDetailDataTable[beforeRowIndex].SalesRate == 0 &&
                        this._salesDetailDataTable[beforeRowIndex].SalesUnPrcDisplay == 0)
                    {
                        // --- UPD 2012/04/23 ---------->>>>>
                        //DialogResult dialogResult = TMsgDisp.Show(
                        //    //this,
                        //    emErrorLevel.ERR_LEVEL_QUESTION,
                        //    "",
                        //    "売価率・売単価共に0ですがよろしいですか",
                        //    0,
                        //    MessageBoxButtons.YesNo,
                        //    MessageBoxDefaultButton.Button1);
                        DialogResult dialogResult = TMsgDisp.Show(
                            //this,
                            emErrorLevel.ERR_LEVEL_QUESTION,
                            "",
                            "売価率・売単価共に0ですがよろしいですか？",
                            0,
                            MessageBoxButtons.YesNo,
                            MessageBoxDefaultButton.Button2);
                        // --- UPD 2012/04/23 ----------<<<<<

                        if (dialogResult == DialogResult.Yes)
                        {
                            ret = 1;
                        }
                        else
                        {
                            ret = -1;

                            //this.uGrid_Details.ActiveCell = this.uGrid_Details.Rows[_beforeCell.Row.Index].Cells[this._salesDetailDataTable.SalesRateColumn.ColumnName];
                        }
                    }
                }
            }
            #endregion

            return ret;
        }

        //>>>2011/05/25
        /// <summary>
        /// 販売区分未入力チェック
        /// </summary>
        /// <param name="beforeRowIndex"></param>
        /// <returns></returns>
        public int CheckSalesCode(int beforeRowIndex)
        {
            int ret = 0;

            #region 売価率および売単価が未入力チェック
            bool checkFlag = false;
            if (this._salesDetailDataTable != null && beforeRowIndex >= 0)
            {
                //---------------------------------------------
                // 有効行のみチェック対象とする
                //---------------------------------------------
                if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_NecessaryGoodsNo)
                {
                    if (!string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsNo) &&
                        !string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsName))
                    {
                        checkFlag = true;
                    }
                }
                else if (this._salesSlipInputInitDataAcs.InputMode == SalesSlipInputInitDataAcs.ctINPUTMODE_VoluntaryGoodsNo)
                {
                    if (!string.IsNullOrEmpty(this._salesDetailDataTable[beforeRowIndex].GoodsName))
                    {
                        checkFlag = true;
                    }
                }

                //---------------------------------------------
                // 注釈、行値引きはチェック対象外
                //---------------------------------------------
                if (this._salesDetailDataTable[beforeRowIndex].EditStatus == SalesSlipInputAcs.ctEDITSTATUS_Annotation ||
                    this._salesDetailDataTable[beforeRowIndex].EditStatus == SalesSlipInputAcs.ctEDITSTATUS_RowDiscount)
                {
                    checkFlag = false;
                }

                //---------------------------------------------
                // 販売区分未入力チェック
                //---------------------------------------------
                if (checkFlag == true)
                {
                    if (this._salesDetailDataTable[beforeRowIndex].SalesCode == 0)
                    {
                        DialogResult dialogResult = TMsgDisp.Show(
                            emErrorLevel.ERR_LEVEL_EXCLAMATION,
                            "",
                            "販売区分が入力されていません。",
                            0,
                            MessageBoxButtons.OK,
                            MessageBoxDefaultButton.Button1);
                        ret = -1;
                    }
                }
            }
            #endregion

            return ret;
        }
        //<<<2011/05/25
        # endregion

        #region ●ユーザー設定処理
        public int GetSalesSlipInputConstructionData(out int data, int inputType)
        {
            data = 0;
            //出荷数入力最大桁数
            if (inputType == 1)
            {
                data = _salesInputConstructionAcs.SalesInputConstruction.ShipmentMaxCnt;
            }
            //受注数入力最大桁数
            else if (inputType == 2)
            {
                data = _salesInputConstructionAcs.SalesInputConstruction.AcceptAnOrderMaxCnt;
            }
            //フォントサイズ
            else if (inputType == 3)
            {
                data = _salesInputConstructionAcs.SalesInputConstruction.FontSizeValue;
            }
            // 車両検索後のフォーカス位置
            else if (inputType == 4)
            {
                data = _salesInputConstructionAcs.FocusPositionAfterCarSearchValue;
            }

            // 車両検索後のフォーカス位置
            else if (inputType == 5)
            {
                data = _salesInputConstructionAcs.DataInputCountValue;
            }
            // 得意先注番の明細展開
            else if (inputType == 6)
            {
                data = _salesInputConstructionAcs.PartySaleSlipValue;
            }

            // ADD 2011/08/09-------------------->>>>>>>>>>>
            //アクティブ色項目
            else if (inputType == 7)
            {
                data = _salesInputConstructionAcs.SalesInputConstruction.ColorsValue;
            }
            // ADD 2011/08/09--------------------<<<<<<<<<<<
            //---------------- ADD 連番1002 2011/08/08 ----------------->>>>>
            // 入力後のカーソル位置
            else if (inputType == 8)
            {
                data = _salesInputConstructionAcs.CursorPosValue;
            }
            //---------------- ADD 連番1002 2011/08/08 -----------------<<<<<

            // --- DEL 2012/05/21 ---------->>>>>
            //// --- ADD 2012/04/11 No.594 ---------->>>>>
            //// 商品検索後のカーソル位置
            //else if (inputType == 9)
            //{
            //    data = _salesInputConstructionAcs.FocusPositionAfterBLCodeSearchValue;
            //}
            //// --- ADD 2012/04/11 No.594 ----------<<<<<
            // --- DEL 2012/05/21 ----------<<<<<

            // --- ADD 2013/11/05 Y.Wakita ---------->>>>>
            // 商品検索後のカーソル位置
            else if (inputType == 9)
            {
                data = _salesInputConstructionAcs.FocusPositionAfterBLCodeSearchValue;
            }
            // --- ADD 2013/11/05 Y.Wakita ----------<<<<<

            // --- ADD 2014/02/24 Y.Wakita ---------->>>>>
            // 商品検索後のカーソル位置
            else if (inputType == 10)
            {
                data = _salesInputConstructionAcs.AcptAnOdrStatusMemoryValue;
            }
            // --- ADD 2014/02/24 Y.Wakita ----------<<<<<

            return 0;
        }
        # endregion

        #region 得意先注番
        /// <summary>
        /// 得意先注番のフォーカス処理
        /// </summary>
        /// <param name="salesSlip"></param>
        /// <param name="salesSlipCurrent"></param>
        /// <param name="value"></param>
        public void AfterPartySaleSlipNumFocus(ref SalesSlip salesSlip, SalesSlip salesSlipCurrent, string value, out bool dialogFlag)
        {
            int PartySaleSlipDiv = 0;
            dialogFlag = false;
            if (salesSlipCurrent.PartySaleSlipNum != value)
            {
                //>>>2011/05/25
                //GetSalesSlipInputConstructionData(out PartySaleSlipDiv, 6);
                //this._salesSlipInputAcs.PartySaleSlipDiv = PartySaleSlipDiv;
                //<<<2011/05/25
                salesSlip.PartySaleSlipNum = value;
                //>>>2011/05/25
                //if ((this._salesSlipInputAcs.PartySaleSlipDiv == (int)SalesSlipInputConstructionAcs.PartySaleSlipDiv.On) &&
                //    (this._salesSlipInputAcs.ExistSalesDetailCanGoodsPriceReSettingData()))
                //{
                //    DialogResult dialogResult = TMsgDisp.Show(
                //        new Form(),
                //        emErrorLevel.ERR_LEVEL_EXCLAMATION,
                //        "",
                //        "得意先注番を明細へ展開します。" + "\r\n" +
                //        "よろしいですか？",
                //        0,
                //        MessageBoxButtons.YesNo,
                //        MessageBoxDefaultButton.Button1);
                //    if (dialogResult == DialogResult.Yes)
                //    {
                //        dialogFlag = true;
                //        this._salesSlipInputAcs.SettingSalesDetailRowPartySaleSlipNum(salesSlip);
                //    }
                //}
                //<<<2011/05/25
            }
        }

        #endregion

        #region ●伝票メモ情報設定処理
        public int SetSlipMemo(string slipMemo1, string slipMemo2, string slipMemo3, string insideMemo1, string insideMemo2, string insideMemo3, int salesRowNo)
        {
            List<string> slipMemoList = new List<string>();
            slipMemoList.Add(slipMemo1);
            slipMemoList.Add(slipMemo2);
            slipMemoList.Add(slipMemo3);

            List<string> insideMemoList = new List<string>();
            insideMemoList.Add(insideMemo1);
            insideMemoList.Add(insideMemo2);
            insideMemoList.Add(insideMemo3);

            this._salesSlipInputAcs.SettingSlipMemo(salesRowNo, slipMemoList, insideMemoList);

            return 0;
        }

        # endregion

        #region ●数値入力チェック処理
        /// <summary>
        /// 数値入力チェック処理
        /// </summary>
        /// <param name="keta">桁数(マイナス符号を含まず)</param>
        /// <param name="priod">小数点以下桁数</param>
        /// <param name="prevVal">現在の文字列</param>
        /// <param name="key">入力されたキー値</param>
        /// <param name="selstart">カーソル位置</param>
        /// <param name="sellength">選択文字長</param>
        /// <param name="minusFlg">マイナス入力可？</param>
        /// <returns>1=入力可,0=入力不可</returns>
        public int KeyPressNumCheck(int keta, int priod, string prevVal, string keyStr, int selstart, int sellength, Boolean minusFlg)
        {
            char key = char.MinValue;
            if (!string.IsNullOrEmpty(keyStr))
            {
                key = Char.Parse(keyStr);
            }

            // 制御キーが押された？
            if (Char.IsControl(key))
            {
                return 1;
            }
            // 数値以外は、ＮＧ
            if (!Char.IsDigit(key))
            {
                // 小数点または、マイナス以外
                if ((key != '.') && (key != '-'))
                {
                    return 0;
                }
            }

            // キーが押されたと仮定した場合の文字列を生成する。
            string _strResult = string.Empty;
            if (sellength > 0)
            {
                _strResult = prevVal.Substring(0, selstart) + prevVal.Substring(selstart + sellength, prevVal.Length - (selstart + sellength));
            }
            else
            {
                _strResult = prevVal;
            }

            // マイナスのチェック
            if (key == '-')
            {
                if ((minusFlg == false) || (selstart > 0) || (_strResult.IndexOf('-') != -1))
                {
                    return 0;
                }
            }

            // 小数点のチェック
            if (key == '.')
            {
                if ((priod <= 0) || (_strResult.IndexOf('.') != -1))
                {
                    return 0;
                }
            }
            // キーが押された結果の文字列を生成する。
            _strResult = prevVal.Substring(0, selstart)
                + key
                + prevVal.Substring(selstart + sellength, prevVal.Length - (selstart + sellength));

            // 桁数チェック！
            if (_strResult.Length > keta)
            {
                if (_strResult[0] == '-')
                {
                    if (_strResult.Length > (keta + 1))
                    {
                        return 0;
                    }
                }
                else
                {
                    return 0;
                }
            }

            // 小数点以下のチェック
            if (priod > 0)
            {
                // 小数点の位置決定
                int _pointPos = _strResult.IndexOf('.');

                // 整数部に入力可能な桁数を決定！
                //int _Rketa = (_strResult[0] == '-') ? keta - priod : keta - priod - 1;
                int _Rketa = SalesSlipInputAcs.diverge<int>(_strResult[0] == '-', keta - priod, keta - priod - 1);
                // 整数部の桁数をチェック
                if (_pointPos != -1)
                {
                    if (_pointPos > _Rketa)
                    {
                        return 0;
                    }
                }
                else
                {
                    if (_strResult.Length > _Rketa)
                    {
                        return 0;
                    }
                }

                // 小数部の桁数をチェック
                if (_pointPos != -1)
                {
                    // 小数部の桁数を計算
                    int _priketa = _strResult.Length - _pointPos - 1;
                    if (priod < _priketa)
                    {
                        return 0;
                    }
                }
            }
            return 1;
        }
        #endregion

        /// <summary>
        /// CSV出力先が設定され、フォルダが存在しているかチェックする。
        /// </summary>
        /// <param name="linkDir">CSV出力先</param>
        /// <returns>status</returns>
        public int CsvPassCheck(out string linkDir)
        {
            // CSV出力先
            linkDir = _salesInputConstructionAcs.SalesInputConstruction.RCLinkDirectoryValue;

            if (!string.IsNullOrEmpty(linkDir))
            {
                DirectoryInfo folder = new DirectoryInfo(linkDir);
                if (!folder.Exists)
                {
                    return -1;
                }
            }
            return 0;
        }

        // --- ADD 2010/05/31 ---------->>>>>
        #region ESCボタンクリック
        /// <summary>
        /// ESCボタンクリックイベント
        /// </summary>
        public void uButtonEscClick(out bool escFlg)
        {
            escFlg = false;

            // ボタンは隠れてます
            DialogResult dResult = TMsgDisp.Show(
                new Form(),
                emErrorLevel.ERR_LEVEL_QUESTION,
                "",
                "終了してもよろしいですか？",
                0,
                MessageBoxButtons.YesNo,
                MessageBoxDefaultButton.Button1);

            if (dResult == DialogResult.Yes)
            {
                escFlg = true;
            }
        }
        #endregion
        // --- ADD 2010/05/31 ----------<<<<<

        #endregion

        #region Private Methods

        #region 明細部設定処理
        /// <summary>
        /// 明細部設定処理
        /// </summary>
        private void SetSalesDetailDataTable(ref List<SalesDetail> salesDetailList)
        {
            SalesInputDataSet.SalesDetailRow salesDetailRow;

            foreach (SalesDetail salesDetail in salesDetailList)
            {
                salesDetailRow = this._salesDetailDataTable.FindBySalesSlipNumSalesRowNo(salesDetail.SalesSlipNum, salesDetail.SalesRowNo);

                salesDetailRow.GoodsName = salesDetail.GoodsName;
            }
        }
        #endregion

        #region 注釈行チェック
        /// <summary>
        /// 注釈行チェック
        /// </summary>
        /// <returns></returns>
        private bool CheckOnlyAnnotation()
        {
            if (this._salesSlipInputAcs.ExistSalesDetailExceptAnnotation() != true)
            {
                DialogResult dialogResult = TMsgDisp.Show(
                    new Form(),
                    emErrorLevel.ERR_LEVEL_INFO,
                    "",
                    "売上情報が存在しない明細に注釈を追加します。　　",
                    1,
                    MessageBoxButtons.OK);
            }
            return true;
        }
        #endregion

        #region TBO検索
        /// <summary>
        /// TBO検索
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <returns></returns>
        private int SearchTBO(int salesRowNo, out List<GoodsUnitData> goodsUnitDataList)
        {
            //-------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------
            int status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
            goodsUnitDataList = new List<GoodsUnitData>();

            //-------------------------------------------------------------
            // TBO検索
            //-------------------------------------------------------------
            status = this._salesSlipInputAcs.SearchTBO(salesRowNo, this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd, out goodsUnitDataList);

            //-------------------------------------------------------------
            // TBO検索後処理
            //-------------------------------------------------------------
            if ((status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL) && (goodsUnitDataList != null) && (goodsUnitDataList.Count > 0))
            {
                return 0;
            }
            else if (status == (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN)
            {
                return (int)ConstantManagement.MethodResult.ctFNC_NO_RETURN;
            }
            else if (status == -3)
            {
                // 車両情報無し
                return -3;
            }
            else
            {
                //// 空情報セット
                //goodsUnitDataList.Add(this._salesSlipInputAcs.CreateEmptyGoods(string.Empty));
                return -2;
            }
        }
        #endregion

        #region BLコード検索
        /// <summary>
        /// BLコード検索
        /// </summary>
        /// <param name="salesRowNo">売上行番号</param>
        /// <param name="bLGoodsCode">BLコード</param>
        /// <param name="goodsUnitDataList">商品連結データオブジェクトリスト</param>
        /// <param name="stockList">在庫データオブジェクトリスト</param>
        /// <returns></returns>
        private int SearchPartsFromBLCodeProc(int salesRowNo, int bLGoodsCode, out List<GoodsUnitData> goodsUnitDataList, out List<Stock> stockList)
        {
            //-------------------------------------------------------------
            // 初期処理
            //-------------------------------------------------------------
            int status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            goodsUnitDataList = new List<GoodsUnitData>();
            stockList = new List<Stock>();

            //>>>2010/05/30
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "▽ＢＬコード枝番処理　開始");
            #region ●BLコード枝番処理
            int blGoodsDrCode = 0;

            // BLコード枝番データテーブル反映
            this._salesSlipInputAcs.MakeBLGoodsDrDataTable(bLGoodsCode);
            if ((this._salesSlipInputAcs.BLGoodsDrDataTable != null) &&
                (this._salesSlipInputAcs.BLGoodsDrDataTable.Count != 0) &&
                (this._salesSlipInputAcs.BLGoodsDrDataTable.Count != 1))
            {
                // BLコード枝番選択ウインドウ表示
                MAHNB01010UM selectBLGoodsDrDialog = new MAHNB01010UM();
                DialogResult dialogResult = selectBLGoodsDrDialog.ShowDialog(this._form);
                switch (dialogResult)
                {
                    case DialogResult.Cancel: // 選択無し
                        break;
                    case DialogResult.OK: // 通常処理
                        blGoodsDrCode = this._salesSlipInputAcs.GetSelectBLGoodsDrCd();
                        break;
                    default:
                        break;
                }
            }
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "", "△ＢＬコード枝番処理　終了");
            //<<<2010/05/30

            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SearchPartsFromBLCode", "●BLコード検索　開始");
            #region ●BLコード検索
            //-------------------------------------------------------------
            // BLコード検索
            //-------------------------------------------------------------
            //>>>2010/05/30
            //status = this._salesSlipInputAcs.SearchPartsFromBLCode(salesRowNo, this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd, bLGoodsCode, out goodsUnitDataList);
            status = this._salesSlipInputAcs.SearchPartsFromBLCode(salesRowNo, this._enterpriseCode, this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd, bLGoodsCode, blGoodsDrCode, out goodsUnitDataList);
            //<<<2010/05/30
            #endregion
            SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "SearchPartsFromBLCode", "○BLコード検索　終了");

            //-------------------------------------------------------------
            // 部品検索後処理
            //-------------------------------------------------------------
            if ((status == (int)ConstantManagement.MethodResult.ctFNC_NORMAL) && (goodsUnitDataList != null) && (goodsUnitDataList.Count > 0))
            {
            }
            else if (status == -3)
            {
                // 車両情報無し
                return -3;
            }
            else if (status == -1)
            {
                // キャンセル
                return -1;
            }
            else
            {
                // 該当なし
                return -2;
            }

            return 0;
        }
        #endregion

        #endregion

        #endregion

        #region 2010/05/30
        #region ●SCM
        /// <summary>
        /// SCM問合せ一覧選択
        /// </summary>
        /// <param name="isConfirm"></param>
        /// <br>Update Note: 2015/05/12  イン晶晶</br>
        /// <br>管理番号   : 11175123-00</br>
        /// <br>           : Redmine#45799 アライ商会様 №12 デュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2015/11/27 時シン</br>
        /// <br>管理番号   : 11170204-00 売上伝票入力の障害対応</br>
        /// <br>           : Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応</br>
        /// <br>Update Note: 2021/04/12 陳艶丹</br>
        /// <br>管理番号   : 11770021-00</br>
        /// <br>           : PMKOBETSU-4136 得意先ガイド表示項目設定の追加</br>
        public void SCMReferenceSearch(bool isConfirm, out int isSave)
        {
            //-----------------------------------------------------------------------------
            // 初期化
            //-----------------------------------------------------------------------------
            isSave = 0;
            long inquiryNum = 0;
            int acptAnOdrStatus = 0;
            string salesSlipNum = SalesSlipInputAcs.ctDefaultSalesSlipNum;
            string inqOriginalEpCd = string.Empty;
            string inqOriginalSecCd = string.Empty;
            int inqOrdDivCd = 0;
            // 2011/02/18 >>>
            //int answerDivCd = 0;
            short cancelDiv = 0;
            // 2011/02/18 <<<

            //this.tEdit_SalesEmployeeCd.Focus();
            //this.ActiveControl = this.tEdit_SalesEmployeeCd;

            //-----------------------------------------------------------------------------
            // SCM問合せ一覧起動
            //-----------------------------------------------------------------------------
            PMSCM04001UA SCMReferenceDisp = new PMSCM04001UA(this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd,
                                  this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm,
                                  this._salesSlipInputAcs.SalesSlip.CustomerCode,
                                  this._salesSlipInputAcs.SalesSlip.CustomerSnm);

            //>>>2010/07/30
            string[] strargs = this._parameter.Split(' ');
            SCMReferenceDisp.CommandLineArgs = strargs;
            //<<<2010/07/30

            //-----------------------------------------------------------------------------
            // SCM問合せ一覧画面表示
            //-----------------------------------------------------------------------------

            // 2011/02/18 >>>
            ////>>>2011/02/01 一部回答判定対応
            ////DialogResult dr = SCMReferenceDisp.ShowGuideForSalesSlip(this._form, out inquiryNum, out acptAnOdrStatus, out salesSlipNum, out inqOriginalEpCd, out inqOriginalSecCd, out answerDivCd);
            //DialogResult dr = SCMReferenceDisp.ShowGuideForSalesSlip(this._form, out inquiryNum, out acptAnOdrStatus, out salesSlipNum, out inqOriginalEpCd, out inqOriginalSecCd, out answerDivCd, out inqOrdDivCd);
            ////<<<2011/02/01 一部回答判定対応

            //DialogResult dr = SCMReferenceDisp.ShowGuideForSalesSlip(this._form, out inquiryNum, out acptAnOdrStatus, out salesSlipNum, out inqOriginalEpCd, out inqOriginalSecCd, out cancelDiv, out inqOrdDivCd); // DEL イン晶晶 2015/05/12 for Redmine#45799
            //------ ADD START イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------>>>>>
            // ウィンドの表示位置をセットする
            SCMReferenceDisp.StartPosition = FormStartPosition.CenterScreen; // ADD イン晶晶 2015/06/12 for Redmine#45799 障害No.218の対応
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 ----->>>>>
            //IntPtr handle;
            //try
            //{
            //    handle = System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle;
            //}
            //catch
            //{

            //}
            //DialogResult dr;
            //if (handle != null)
            //{
            //    // IWin32Windowラッパークラスのインスタンスに、メインウィンドウのハンドルを設定
            //    IWin32WindowWrapper wrp = new IWin32WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle);
            //    dr = SCMReferenceDisp.ShowGuideForSalesSlip(wrp, out inquiryNum, out acptAnOdrStatus, out salesSlipNum, out inqOriginalEpCd, out inqOriginalSecCd, out cancelDiv, out inqOrdDivCd);
            //}
            //else
            //{
            //    dr = SCMReferenceDisp.ShowGuideForSalesSlip(this._salesSlipInputAcs.Owner, out inquiryNum, out acptAnOdrStatus, out salesSlipNum, out inqOriginalEpCd, out inqOriginalSecCd, out cancelDiv, out inqOrdDivCd);
            //}
            // ----- DEL 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応 -----<<<<<
            //------ ADD END イン晶晶 2015/05/12 for Redmine#45799のアライ商会No.12  デュアルモニタで使用した際のガイドウィンドの表示位置の対応 ------<<<<<
            DialogResult dr = SCMReferenceDisp.ShowGuideForSalesSlip(this._salesSlipInputAcs.Owner, out inquiryNum, out acptAnOdrStatus, out salesSlipNum, out inqOriginalEpCd, out inqOriginalSecCd, out cancelDiv, out inqOrdDivCd); // ADD 2015/11/27 時シン Redmine#45799 #67でデュアルモニタで使用した際のガイドウィンドの表示位置の対応
            // 2011/02/18 <<<

            //-----------------------------------------------------------------------------
            // データ読み込み
            //-----------------------------------------------------------------------------
            if ((dr == DialogResult.OK) && ((inquiryNum != 0) || (salesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum)))
            {
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136-------->>>>>
                //得意先情報ガイドを閉じる
                if (showEnable() || showCustomerGuid())
                {
                    noteInfoClose();
                }
                // ------ ADD 2021/04/12 陳艶丹 FOR PMKOBETSU-4136--------<<<<<
                // 2011/02/18 >>>
                //isSave = this.SCMRead(inquiryNum, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, answerDivCd);
                isSave = this.SCMRead(inquiryNum, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd.Trim(), inqOriginalSecCd, inqOrdDivCd, cancelDiv);//@@@@20230303
                // 2011/02/18 <<<
            }
        }

        /// <summary>
        /// SCM情報読込処理
        /// </summary>
        /// <param name="inquiryNum"></param>
        /// <param name="acptAnOdrStatus"></param>
        /// <param name="salesSlipNum"></param>
        /// <param name="inqOriginalEpCd"></param>
        /// <param name="inqOriginalSecCd"></param>
        /// <param name="inqOrdDivCd"></param>
        /// <param name="answerDivCd"></param>
        /// <br>Update Note: 2015/12/09 陳永康</br>
        /// <br>管理番号   : 11170204-00</br>
        /// <br>           : Redmine#47787 最大行を超えて明細を追加すると、画面に表示されない部品が登録される障害の修正</br>
        // 2011/02/18 >>>
        //private int SCMRead(long inquiryNum, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, int answerDivCd)
        private int SCMRead(long inquiryNum, int acptAnOdrStatus, string salesSlipNum, string inqOriginalEpCd, string inqOriginalSecCd, int inqOrdDivCd, short cancelDiv)
        // 2011/02/18 <<<
        {
            int isSave = 0;
            SalesSlip salesSlip = null;
            SalesSlip baseSalesSlip;
            List<SalesDetail> salesDetailList = null;
            List<SalesDetail> addUpSrcDetailList;
            SearchDepsitMain depsitMain;
            SearchDepositAlw depositAlw;
            List<StockWork> stockWorkList;
            List<StockSlipWork> stockSlipWorkList;
            List<StockDetailWork> stockDetailWorkList;
            List<AddUpOrgStockDetailWork> addUpOrgStockDetailList;
            List<AcceptOdrCar> acceptOdrCarList;
            List<UOEOrderDtlWork> uoeOrderDtlWorkList;
            UserSCMOrderHeaderRecord scmHeader = new UserSCMOrderHeaderRecord();
            UserSCMOrderCarRecord scmCar;
            List<UserSCMOrderDetailRecord> scmDetailList;
            // UPD 2013/04/19 SCM障害№10522対応 --------------------------------<<<<<
            //List<UserSCMOrderAnswerRecord> scmAnswerList;
            List<UserSCMOrderAnswerRecord> scmAnswerList = new List<UserSCMOrderAnswerRecord>();
            // UPD 2013/04/19 SCM障害№10522対応 -------------------------------->>>>>

            //>>>2011/02/01
            List<UserSCMOrderDetailRecord> scmDetailListNew = new List<UserSCMOrderDetailRecord>();
            IList<ISCMOrderHeaderRecord> scmHeaderIList = new List<ISCMOrderHeaderRecord>();
            IList<ISCMOrderCarRecord> scmCarIList = new List<ISCMOrderCarRecord>();
            IList<ISCMOrderDetailRecord> scmDetailIList = new List<ISCMOrderDetailRecord>();
            IList<ISCMOrderDetailRecord> scmDetailIAllList = new List<ISCMOrderDetailRecord>();
            IList<ISCMOrderAnswerRecord> scmAnswerIList = new List<ISCMOrderAnswerRecord>();
            // 2011/02/18 >>>
            //int svAnswerDivCd;
            short svCancelDiv;
            // 2011/02/18 <<<
            //-----------------------------------------------------------------------
            // SCM情報読込
            //-----------------------------------------------------------------------
            // 2011/02/18 >>>
            //this._salesSlipInputAcs.SCMReadDBDataPProc(inquiryNum, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, answerDivCd, out scmHeaderIList, out scmCarIList, out scmDetailIList, out scmDetailIAllList, out scmAnswerIList, out scmDetailListNew, out svAnswerDivCd);
            this._salesSlipInputAcs.SCMReadDBDataPProc(inquiryNum, acptAnOdrStatus, SalesSlipInputAcs.ctDefaultSalesSlipNum, inqOriginalEpCd.Trim(), inqOriginalSecCd, inqOrdDivCd, cancelDiv, out scmHeaderIList, out scmCarIList, out scmDetailIList, out scmDetailIAllList, out scmAnswerIList, out scmDetailListNew, out svCancelDiv);//@@@@20230303
            // 2011/02/18 <<<

            // --- ADD 譚洪 2014/09/01 Redmine#43289 -------------------- >>>
            // 車両情報
            if (scmHeaderIList != null && scmHeaderIList.Count > 0)
            {
                // 回答区分
                this._salesSlipInputAcs.AnswerDivCode = scmHeaderIList[0].AnswerDivCd;  // ADD 2014/11/06 chenyd For PM-SCM仕掛一覧№85 ｼｽﾃﾑﾃｽﾄ障害№4対応

                // TLS用の変数
                CarInfoThreadData carInfoThreadData = new CarInfoThreadData();

                // 備考(SFの情報)
                carInfoThreadData.Note = scmHeaderIList[0].InqOrdNote;
                // XMLファイル保存用
                carInfoThreadData.Pgid = PGID_XML;
                // 年式区分
                if (this._salesSlipInputInitDataAcs.GetAllDefSet() != null)
                carInfoThreadData.FirstEntryDateKubun = this._salesSlipInputInitDataAcs.GetAllDefSet().EraNameDispCd1;

                if(scmCarIList != null && scmCarIList.Count > 0)
                {
                    // 年式(SF)
                    carInfoThreadData.FirstEntryDateSF = scmCarIList[0].ProduceTypeOfYearNum;
                    // 車台番号(SF)
                    carInfoThreadData.FrameNoSF = scmCarIList[0].FrameNo;
                    // シャシー№(SF)
                    carInfoThreadData.ChassisNoSF = scmCarIList[0].ChassisNo;
                    // 車検証型式(SF)
                    carInfoThreadData.CarInspectCertModelSF = scmCarIList[0].CarInspectCertModel;
                    // 類別
                    carInfoThreadData.ModelDesignationNoSF = scmCarIList[0].ModelDesignationNo;
                    // 番号
                    carInfoThreadData.CategoryNoSF = scmCarIList[0].CategoryNo;
                    // メーカー
                    carInfoThreadData.MakerCodeSF = scmCarIList[0].MakerCode;
                    // 車種コード
                    carInfoThreadData.ModelCodeSF = scmCarIList[0].ModelCode;
                    // 車種サブコード
                    carInfoThreadData.ModelSubCodeSF = scmCarIList[0].ModelSubCode;
                    // 車種名
                    carInfoThreadData.ModelFullNameSF = scmCarIList[0].ModelName;
                }

                // SOLTを使う前に、FREE処理を実行します。
                Thread.FreeNamedDataSlot(CARINFOSOLT);
                carInfoSolt = Thread.AllocateNamedDataSlot(CARINFOSOLT);
                Thread.SetData(carInfoSolt, carInfoThreadData);
            }
            // --- ADD 譚洪 2014/09/01 Redmine#43289 -------------------- <<<

            //-----------------------------------------------------------------------
            // 再問合せチェック処理(既存伝票がある場合、修正呼出しとする)
            //-----------------------------------------------------------------------
            ArrayList salesSlipNumList = new ArrayList();
            salesSlipNumList = this._salesSlipInputAcs.GetSalesSlipNumList(scmDetailIList, scmAnswerIList);

            //-----------------------------------------------------------------------
            // 伝票番号設定
            //-----------------------------------------------------------------------
            if (salesSlipNumList.Count != 0)
            {
                if (salesSlipNumList.Count == 1)
                {
                    // 伝票番号設定
                    salesSlipNum = (string)salesSlipNumList[0];
                    acptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate;
                }
                else
                {
                    // 伝票番号選択画面表示
                    MAHNB01010UQ salesSlipNumDlg = new MAHNB01010UQ();
                    salesSlipNumDlg.SalesSlipNumList = salesSlipNumList;
                    salesSlipNumDlg.InqueryNumber = inquiryNum;

                    DialogResult ret = salesSlipNumDlg.ShowDialog();

                    if (ret == DialogResult.OK)
                    {
                        salesSlipNum = salesSlipNumDlg.SalesSlipNum;
                        acptAnOdrStatus = (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate;
                        // --- ADD　2014/08/14 陳艶丹 仕掛№10662---------->>>>>
                        // 「新規問合せ」を選択したときは、SCM受注明細データ(問合せ・発注)情報の売上伝票番号をデフォルト「000000000」でセットする
                        if (salesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum)
                        {
                            foreach (ISCMOrderDetailRecord rec in scmDetailIList)
                            {
                                rec.SalesSlipNum = salesSlipNum;
                            }
                        }
                        // --- ADD　2014/08/14 陳艶丹 仕掛№10662----------<<<<<
                    }
                    else
                    {
                        return 0;
                    }
                }
            }
            //<<<2011/02/01

            //this.Cursor = Cursors.WaitCursor;
            int status = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;
            bool flg = true; // ADD 2011/07/15
            if (salesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum)
            {
                // --- DEL 2013/07/29 Y.Wakita ---------->>>>>
                //status = this._salesSlipInputAcs.ReadDBData(this._enterpriseCode, acptAnOdrStatus, salesSlipNum, true, out salesSlip, out baseSalesSlip, out salesDetailList, out addUpSrcDetailList, out depsitMain, out depositAlw, out stockSlipWorkList, out stockDetailWorkList, out addUpOrgStockDetailList, out stockWorkList, out acceptOdrCarList, out uoeOrderDtlWorkList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
                // --- DEL 2013/07/29 Y.Wakita ----------<<<<<

                // --- ADD 2013/07/29 Y.Wakita ---------->>>>>
                List<SalesDetail> salesDetailListNew = null;
                List<UserSCMOrderAnswerRecord> scmAnswerListNew = null;

                // 新規を読み込む
                status = this._salesSlipInputAcs.SCMReadDBData(
                      inquiryNum
                    , acptAnOdrStatus
                    , SalesSlipInputAcs.ctDefaultSalesSlipNum
                    , inqOriginalEpCd.Trim()	//@@@@20230303
                    , inqOriginalSecCd
                    , inqOrdDivCd
                    , cancelDiv
                    , scmDetailListNew
                    , scmHeaderIList
                    , scmCarIList
                    , scmDetailIList
                    , scmDetailIAllList
                    , scmAnswerIList
                    , svCancelDiv
                    , out salesSlip
                    , out salesDetailList
                    , out scmHeader
                    , out scmCar
                    , out scmDetailList
                    , out scmAnswerList);

                salesDetailListNew = salesDetailList;
                scmAnswerListNew = scmAnswerList;

                // 既存を読み込む
                status = this._salesSlipInputAcs.ReadDBDataNew(
                    this._enterpriseCode
                    , acptAnOdrStatus
                    , salesSlipNum
                    , true
                    , salesDetailListNew
                    , scmAnswerListNew
                    , out salesSlip
                    , out baseSalesSlip
                    , out salesDetailList
                    , out addUpSrcDetailList
                    , out depsitMain
                    , out depositAlw
                    , out stockSlipWorkList
                    , out stockDetailWorkList
                    , out addUpOrgStockDetailList
                    , out stockWorkList
                    , out acceptOdrCarList
                    , out uoeOrderDtlWorkList
                    , out scmHeader
                    , out scmCar
                    , out scmDetailList
                    , out scmAnswerList);
                // --- ADD 2013/07/29 Y.Wakita ----------<<<<<
                // --- ADD 2015/12/09 陳永康 For Redmine#47787 最大行を超えて明細を追加すると、画面に表示されない部品が登録される障害の修正 ---------->>>>>
                // 明細行数制限
                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    this._salesSlipInputAcs.SettingSalesDetailRowInputRowCount(salesSlip.DetailRowCountForReadSlip);
                }
                // --- ADD 2015/12/09 陳永康 For Redmine#47787 最大行を超えて明細を追加すると、画面に表示されない部品が登録される障害の修正 ----------<<<<<

                // ---ADD 2011/07/15----------->>>>>
                if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                {
                    flg = false;
                }
                // ---ADD 2011/07/15-----------<<<<<
                //>>>2011/02/01
                //this._salesSlipInputAcs.ClearDetailListForBeforeSave();
                //<<<2011/02/01
            }
            //else  // DEL 2011/07/15
            if (salesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum || (salesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum && !flg)) // ADD 2011/07/15
            {
                //using (NowRunningProgress nowRunningProgress = new NowRunningProgress(
                //    this.uStatusBar_Main.Panels[0],   // 1パラ目：ステータスバーのテキストパネル
                //    this.uStatusBar_Main.Panels[1]    // 2パラ目：ステータスバーの進捗バーパネル
                //))
                //{
                //>>>2011/02/01
                //status = this._salesSlipInputAcs.SCMReadDBData(inquiryNum, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, answerDivCd, out salesSlip, out salesDetailList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
                // 2011/02/18 >>>
                //status = this._salesSlipInputAcs.SCMReadDBData(inquiryNum, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd, inqOriginalSecCd, inqOrdDivCd, answerDivCd, scmDetailListNew, scmHeaderIList, scmCarIList, scmDetailIList, scmDetailIAllList, scmAnswerIList, svAnswerDivCd, out salesSlip, out salesDetailList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);
                status = this._salesSlipInputAcs.SCMReadDBData(inquiryNum, acptAnOdrStatus, salesSlipNum, inqOriginalEpCd.Trim(), inqOriginalSecCd, inqOrdDivCd, cancelDiv, scmDetailListNew, scmHeaderIList, scmCarIList, scmDetailIList, scmDetailIAllList, scmAnswerIList, svCancelDiv, out salesSlip, out salesDetailList, out scmHeader, out scmCar, out scmDetailList, out scmAnswerList);//@@@@20230303
                // 2011/02/18 <<<
                //<<<2011/02/01
                //}
            }

            if (status != (int)ConstantManagement.DB_Status.ctDB_NORMAL)
            {
                isSave = 0;
                DialogResult dResult = TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "対象となるデータが存在しません。",
                    0,
                    MessageBoxButtons.OK,
                    MessageBoxDefaultButton.Button1);
            }
            else
            {
                isSave = 1;

                //this._scmSave = false;

                // キャンセル時は返品として展開
                // 2011/02/18 >>>
                //if (scmHeader.AnswerDivCd == 99)
                if (scmHeader.CancelDiv == 1)
                // 2011/02/18 <<<
                {
                    salesSlip.SalesSlipCd = (int)SalesSlipInputAcs.SalesSlipCd.RetGoods;
                    //this._scmSave = true;
                }

                // 表示用受注ステータスの設定
                SalesSlipInputAcs.SetDisplayFromAcptAnOdrStatusAndEstimateDivide(ref salesSlip);

                // 伝票区分コンボエディタアイテム設定処理
                this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatusDisplay, false);

                // 表示用伝票区分設定処理
                SalesSlipInputAcs.SetDisplayFromSlipCdAndAccPayDivCd(ref salesSlip);

                // ----- ADD 2011/12/01xupz redmine#8273 ---------->>>>> 
                //初期データ設定処理
                this.SettingInitData(salesSlip, salesSlip.CustomerCode);
                // ----- ADD 2011/12/01xupz redmine#8273 ----------<<<<<

                this._salesSlipInputAcs.Cache(salesSlip);

                //// 売上金額計算処理
                //this._salesSlipDetailInput.CalculationSalesPrice();
                this.CalculationSalesPrice();

                // 売上金額変更後発生イベント処理
                this.SalesSlipDetailInput_SalesPriceChanged(this, new EventArgs());

                // 売上データクラスキャッシュ
                this._salesSlipInputAcs.Cache(this._salesSlipInputAcs.SalesSlip);

                // 売上データクラス→画面格納処理
                this.SetDisplay(this._salesSlipInputAcs.SalesSlip);

                // 明細粗利率設定処理
                this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesDetailList);

                // 明細グリッド設定処理
                //this._salesSlipDetailInput.SettingGrid();

                // 売単価、原単価の初期値設定
                this._salesSlipInputAcs.CacheDefaultValue();

                //// 明細グリッドにフォーカスをセット
                //this._salesSlipDetailInput.Focus();

                //// ガイドボタンツール有効無効設定処理
                //this.SettingGuideButtonToolEnabled(this.tComboEditor_SalesGoodsCd);

                // 伝票区分コンボエディタアイテム設定処理
                this.SetItemtSalesSlipCd(ref salesSlip, salesSlip.AcptAnOdrStatus, false);

                // Visible設定
                //this.SettingVisible();

                // UPD 2013/04/19 SCM障害№10522対応 ---------------------------------->>>>>
                //// ADD 2013/04/09 SCM障害№10507,10508対応 ---------------------------->>>>>
                //// SCM回答用BLコードリスト設定
                //SettingOriginalBLGoodsCodeMapKey(salesDetailList);
                //// ADD 2013/04/09 SCM障害№10507,10508対応 ----------------------------<<<<<
                // SCM回答用BLコードリスト設定
                if (scmAnswerList != null && scmAnswerList.Count != 0)
                {
                    // SCM連携データが存在する時はSCM受注明細データ（回答）よりセット
                    SettingOriginalBLGoodsCodeMapKey(scmAnswerList);
                }
                // SCM連携データが存在しない時は売上明細データよりセット
                else if (salesDetailList != null && salesDetailList.Count != 0)
                {
                SettingOriginalBLGoodsCodeMapKey(salesDetailList);
                }
                else
                {
                    this._salesSlipInputAcs.ClearOriginalBLGoodsCodeMapKey();
                }
                // UPD 2013/04/19 SCM障害№10522対応 ----------------------------------<<<<<

                // データ変更フラグプロパティをtrueにする
                this._salesSlipInputAcs.IsDataChanged = true;

                //>>>2011/02/01 追加回答対応
                //// 明細行数制限
                //this._salesSlipInputAcs.SettingSalesDetailRowInputRowCount(salesDetailList.Count);

                // 明細行数制限
                //>>>2011/03/09
                //if ((salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods) ||
                //    ((salesSlip.InquiryNumber != 0) && (salesSlip.SalesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum)))
                if (salesSlip.SalesSlipCd == (int)SalesSlipInputAcs.SalesSlipCd.RetGoods)
                //<<<2011/03/09
                {
                    // 返品時のみ明細行数制限を行う
                    this._salesSlipInputAcs.SettingSalesDetailRowInputRowCount(salesDetailList.Count);
                }
                //<<<2011/02/01 追加回答対応
            }
            //this._prevControl = this.ActiveControl;
            //this.Cursor = Cursors.Default;

            return isSave;
        }

        // ADD 2013/04/09 SCM障害№10507,10508対応 ---------------------------->>>>>
        /// <summary>
        /// SCM回答用BLコードリスト設定処理
        /// </summary>
        /// <param name="salesDetailList"></param>
        private void SettingOriginalBLGoodsCodeMapKey(List<SalesDetail> salesDetailList)
        {
            // SCM回答用BLコードリスト設定処理
            this._salesSlipInputAcs.SettingOriginalBLGoodsCodeMapKey(salesDetailList);
        }
        // ADD 2013/04/09 SCM障害№10507,10508対応 ----------------------------<<<<<

        // ADD 2013/04/19 SCM障害№10522対応 ---------------------------->>>>>
        /// <summary>
        /// SCM回答用BLコードリスト設定処理
        /// </summary>
        /// <param name="salesDetailList"></param>
        private void SettingOriginalBLGoodsCodeMapKey(List<UserSCMOrderAnswerRecord> scmAnswerList)
        {
            // SCM回答用BLコードリスト設定処理
            this._salesSlipInputAcs.SettingOriginalBLGoodsCodeMapKey(scmAnswerList);
        }
        // ADD 2013/04/19 SCM障害№10522対応 ----------------------------<<<<<

        /// <summary>
        /// 起動パラメータ設定処理
        /// </summary>
        /// <param name="param1"></param>
        /// <param name="param2"></param>
        // 2011/01/31 >>>
        //public void SettingParameter(string param1, string param2)
        public void SettingParameter(string param1, string param2, string param3)
        // 2011/01/31 <<<
        {
            this._parameter = string.Empty;
            this._scmInquiryNumber = 0;
            this._scmAcptAnOdrStatus = 0;
            this._scmSalesSlipNum = SalesSlipInputAcs.ctDefaultSalesSlipNum;
            this._inqOriginalEpCd = string.Empty;
            this._inqOriginalSecCd = string.Empty;
            this._inqOrdDivCd = 0;
            this._customerCode = 0;
            // 2011/02/18 >>>
            //this._answerDivCd = 0;
            this._cancelDiv = 0;
            // 2011/02/18 <<<

            this._parameter = param1; // 起動パラメータ
            this._salesSlipInputAcs.LoginParameter = this._parameter; // 起動パラメータ // ADD 陳艶丹 2020/11/20 PMKOBETSU-4097の対応

            // 2011/01/31 >>>
            //// 文字列分割
            //string[] strargs = param2.Trim().Split(',');

            //if (strargs.Length == 1)
            //{
            //    //>>>2010/09/24
            //    //this._customerCode = int.Parse(strargs[0].ToString()); // 得意先コード
            //    try
            //    {
            //        this._customerCode = int.Parse(strargs[0].ToString()); // 得意先コード
            //    }
            //    catch (Exception e)
            //    {
            //        this._customerCode = 0;
            //    }
            //    //<<<2010/09/24
            //}
            //else
            //{
            //    this._scmInquiryNumber = long.Parse(strargs[0].ToString()); // 問合せ番号
            //    this._scmAcptAnOdrStatus = int.Parse(strargs[1].ToString()); // 受注ステータス
            //    this._scmSalesSlipNum = strargs[2].ToString().Trim(); // 売上伝票番号
            //    this._inqOriginalEpCd = strargs[3].ToString().Trim(); // 問合元企業コード
            //    this._inqOriginalSecCd = strargs[4].ToString().Trim(); // 問合元拠点コード
            //    if (strargs.Length >= 6) this._inqOrdDivCd = int.Parse(strargs[5].ToString()); // 問合せ・発注種別
            //    if (strargs.Length >= 7) this._answerDivCd = int.Parse(strargs[6].ToString()); // 回答区分
            //}

            this._startMode = param2.Trim();
            string[] strargs = param3.Trim().Split(',');

            // CTIから起動時
            switch (this._startMode)
            {
                // SCM関連PGからの修正
                case SalesSlipInputAcs.ctStartMode_SCM:
                    // PG固有のパラメータの数が6つ以上の場合のみパラメータからセット
                    if (strargs.Length > 6)
                    {
                        long.TryParse(strargs[0].Trim(), out this._scmInquiryNumber);   // 問合せ番号
                        this._scmAcptAnOdrStatus = TStrConv.StrToIntDef(strargs[1].Trim(), 0);  // 受注ステータス
                        this._scmSalesSlipNum = strargs[2].Trim(); // 売上伝票番号
                        this._inqOriginalEpCd = strargs[3].Trim(); // 問合元企業コード
                        this._inqOriginalSecCd = strargs[4].Trim(); // 問合元拠点コード
                        this._inqOrdDivCd = TStrConv.StrToIntDef(strargs[5].Trim(), 0); // 問合せ・発注種別
                        // 2011/02/18 >>>
                        //this._answerDivCd = TStrConv.StrToIntDef(strargs[6].Trim(), 0); // 回答区分
                        this._cancelDiv = (short)TStrConv.StrToIntDef(strargs[6].Trim(), 0); // キャンセル区分
                        // 2011/02/18 <<<
                    }
                    break;
                // CTIからの起動
                case SalesSlipInputAcs.ctStartMode_CTI:
                    if (strargs.Length > 0)
                    {
                        this._customerCode = TStrConv.StrToIntDef(strargs[0].Trim(), 0);
                    }
                    break;
                // CMTからの起動
                case SalesSlipInputAcs.ctStartMode_CMT:
                    // PG固有のパラメータの数が6つ以上の場合のみパラメータからセット
                    if (strargs.Length > 6)
                    {
                        long.TryParse(strargs[0].Trim(), out this._scmInquiryNumber);   // 問合せ番号
                        this._scmAcptAnOdrStatus = TStrConv.StrToIntDef(strargs[1].Trim(), 0);  // 受注ステータス
                        this._scmSalesSlipNum = strargs[2].Trim(); // 売上伝票番号
                        this._inqOriginalEpCd = strargs[3].Trim(); // 問合元企業コード
                        this._inqOriginalSecCd = strargs[4].Trim(); // 問合元拠点コード
                        this._inqOrdDivCd = TStrConv.StrToIntDef(strargs[5].Trim(), 0); // 問合せ・発注種別
                        // 2011/02/18 >>>
                        //this._answerDivCd = TStrConv.StrToIntDef(strargs[6].Trim(), 0); // 回答区分
                        this._cancelDiv = (short)TStrConv.StrToIntDef(strargs[6].Trim(), 0); // キャンセル区分
                        // 2011/02/18 <<<
                    }
                    break;
            }
            // 2011/01/31 <<<
        }

        /// <summary>
        /// SCM情報読込タイマー起動イベント処理
        /// </summary>
        /// <param name="ret"></param>
        /// <param name="customerCode"></param>
        public void TimerSCMReadTick(out bool ret, out int customerCode)
        {
            ret = false;
            customerCode = 0;

            if (this._customerCode == 0)
            {
                //-----------------------------------------------------------------------------
                // SCM情報読込
                //-----------------------------------------------------------------------------
                if ((this._scmInquiryNumber != 0) ||
                    ((this._scmSalesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum) &&
                     (this._scmSalesSlipNum != string.Empty) &&
                     (this._scmSalesSlipNum != null)))
                {
                    this.InputInquiryNumber(false, out ret);
                }
            }
            else
            {
                //-----------------------------------------------------------------------------
                // 得意先情報読込
                //-----------------------------------------------------------------------------
                //this.LinkCommunicationTool(false, out ret); // 売伝起動時→確認画面を表示しない
                ret = true;
                customerCode = this._customerCode;
            }
        }

        /// <summary>
        /// 得意先情報表示
        /// </summary>
        /// <param name="isConfirm"></param>
        /// <returns></returns>
        private void LinkCommunicationTool(bool isConfirm, out bool ret)
        {
            ret = false;

            bool read = false;
            if (isConfirm)
            {
                //this.Activate();

                DialogResult dialogResult = TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "コミュニケーションツールの接続がありました。" + Environment.NewLine +
                    "得意先情報を読み込んでもよろしいですか？" + Environment.NewLine,
                    0,
                    MessageBoxButtons.YesNo,
                    MessageBoxDefaultButton.Button1);
                if (dialogResult == DialogResult.Yes)
                {
                    read = true;
                }
            }
            else
            {
                read = true;
            }
            if (read)
            {
                ret = true;
                if (!isConfirm)
                {
                    this.Clear(false, false, false, false, true, false, false, this._customerCode);
                }
                else
                {
                    this.Clear(false, true, false, false, true, false, false, this._customerCode);
                    //this.timer_InitialSetFocus.Enabled = true;
                }
            }
        }

        /// <summary>
        /// SCM情報読込処理
        /// </summary>
        /// <param name="isConfirm"></param>
        /// <returns></returns>
        private bool InputInquiryNumber(bool isConfirm, out bool ret)
        {
            ret = false;

            bool read = false;
            if (isConfirm)
            {
                string inqString = string.Empty;
                if (this._inqOrdDivCd == 1)
                {
                    inqString = "問合せ";
                }
                else
                {
                    inqString = "発注";
                }

                //this.Activate();

                DialogResult dialogResult = TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    inqString + "があります。" + Environment.NewLine +
                    inqString + "情報を読み込んでもよろしいですか？" + Environment.NewLine,
                    0,
                    MessageBoxButtons.OKCancel,
                    MessageBoxDefaultButton.Button1);
                if (dialogResult == DialogResult.OK)
                {
                    read = true;
                }
            }
            else
            {
                read = true;
            }

            if (read)
            {
                ret = true;

                if ((this._scmInquiryNumber != 0) ||
                    ((this._scmSalesSlipNum != SalesSlipInputAcs.ctDefaultSalesSlipNum) &&
                     (this._scmSalesSlipNum != string.Empty) &&
                     (this._scmSalesSlipNum != null)))
                {
                    // 2011/02/18 >>>
                    //this.SCMRead(this._scmInquiryNumber, this._scmAcptAnOdrStatus, this._scmSalesSlipNum, this._inqOriginalEpCd, this._inqOriginalSecCd, this._inqOrdDivCd, this._answerDivCd);
                    this.SCMRead(this._scmInquiryNumber, this._scmAcptAnOdrStatus, this._scmSalesSlipNum, this._inqOriginalEpCd.Trim(), this._inqOriginalSecCd, this._inqOrdDivCd, this._cancelDiv);//@@@@20230303
                    // 2011/02/18 <<<
                }
            }

            return ret;
        }

        /// <summary>
        /// 相場価格種別取得
        /// </summary>
        public void GetSobaInfo()
        {
            if (this._salesSlipInputInitDataAcs.Opt_SCM == (int)SalesSlipInputInitDataAcs.Option.ON) this._salesSlipInputAcs.GetSobaInfo();
        }

        //>>>2011/02/01
        /// <summary>
        ///  SCM情報存在チェック
        /// </summary>
        /// <param name="salesSlipNum"></param>
        /// <param name="salesRowNo"></param>
        /// <returns></returns>
        public void ExistSCMInfo(out bool ret, string salesSlipNum, int salesRowNo)
        {
            ret = this._salesSlipInputAcs.ExistSCMInfo(salesSlipNum, salesRowNo);
        }
        //<<<2011/02/01

        //>>>2011/03/04
        /// <summary>
        /// 従業員情報再設定処理
        /// </summary>
        /// <param name="salesSlip"></param>
        public void SettingEmpInfo()
        {
            this._salesSlipInputAcs.SettingEmpInfo();
        }
        //<<<2011/03/04
        #endregion

        /// <summary>
        /// QR作成スレッド起動
        /// </summary>
        public void MakeQR(string parameter)
        {
            this._makeQRThread = new Thread(new ParameterizedThreadStart(MakeQRThread));
            this._makeQRThread.Start(parameter);
        }
        /// <summary>
        /// QRコード生成スレッド
        /// </summary>
        private void MakeQRThread(object parameter)
        {
            if (parameter is string)
            {
                SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "MakeQRThread", "○ＱＲ生成スレッド 開始");
                if (this._salesSlipInputAcs.JustBeforeSavedQRMakeCndtn != null && this._salesSlipInputAcs.JustBeforeSavedQRMakeCndtn.SalesSlipKeyList.Count > 0)
                {
                    // カレントディレクトリ設定
                    //System.Environment.CurrentDirectory = ConstantManagement_ClientDirectory.NSCurrentDirectory; // ... Delphiエントリから起動時はエラーになる
                    System.Environment.CurrentDirectory = Path.GetDirectoryName(System.Windows.Forms.Application.ExecutablePath);

                    // Aクラスで作成するパラメータは、起動パラメータ以外の項目が全てセットされている
                    SalesQRSendCtrlCndtn cndtn = this._salesSlipInputAcs.JustBeforeSavedQRMakeCndtn;
                    cndtn.ProgramParameter = (parameter as string);

                    SalesQRSendController salesQRSendController = new SalesQRSendController();
                    SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "MakeQRThread", "QR作成処理 開始");
                    salesQRSendController.Execute(cndtn);
                    SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "MakeQRThread", "QR作成処理 終了");
                }
                else
                {
                    SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "MakeQRThread", "該当データ無し");
                }
                SalesSlipInputInitDataAcs.LogWrite("MAHNB01010UA", "MakeQRThread", "○ＱＲ生成スレッド 終了");
            }
        }
        # endregion
        // --- ADD m.suzuki 2010/06/12 ----------<<<<<

        // --- ADD m.suzuki 2010/06/16 ---------->>>>>
        # region [オフライン対応]
        /// <summary>
        /// オンラインフラグ取得処理
        /// </summary>
        /// <returns>ログイン情報のオンラインフラグ</returns>
        public bool GetOnlineFlag()
        {
            // オンラインフラグを返す
            return (LoginInfoAcquisition.OnlineFlag);
        }
        # endregion
        // --- ADD m.suzuki 2010/06/16 ----------<<<<<

        //>>>2010/08/30
        /// <summary>
        /// 
        /// </summary>
        /// <param name="salesdate"></param>
        /// <returns></returns>
        public int ExistTaxRateRangeMethod(int salesdate)
        {
            int yy = salesdate / 10000;
            int mm = salesdate / 100 % 100;
            int dd = salesdate % 100;

            DateTime dt = new DateTime(yy, mm, dd);

            #region ●税率設定範囲チェック
            if (!this._salesSlipInputInitDataAcs.ExistTaxRateRange(dt))
            {
                DialogResult dResult = TMsgDisp.Show(
                    this._form,
                    emErrorLevel.ERR_LEVEL_EXCLAMATION,
                    "todo",
                    "売上日が税率設定マスタの範囲外です。",
                    0,
                    MessageBoxButtons.OK,
                    MessageBoxDefaultButton.Button1);
                return -1;
            }

            return 0;
            #endregion
        }
        //<<<2010/08/30

        // ---ADD 2011/02/11---------------->>>>
        /// <summary>
        /// ログを内部保持するログリストに追加
        /// </summary>
        /// <param name="logNo">ログ番号</param>
        /// <param name="slipNo">伝票番号など</param>
        /// <param name="acptAnOdrStatus">受注ステータス</param>
        /// <remarks>
        /// <br>Note       : ログを内部保持するログリストに追加する。</br>
        /// <br>Programmer : 曹文傑</br>
        /// <br>Date       : 2011/02/11</br>
        /// <br>Update Note: 2011/10/26   鄧潘ハン Redmine#26224</br>
        /// <br>             1)F12発注選択時に、BO区分に関しては、発注先マスタ上の初期値設定項目（BO区分）を表示していますが、</br>
        /// <br>             初期値設定項目がスペースで設定されている場合、「*」が表示されるのでスペースとする</br>
        /// <br>Update Note: 2011/11/01   yangmj Redmine#26224</br>
        /// <br>Update Note: 2011/11/01 鄧潘ハン</br>
        /// <br>             ReadMine#26251 全体初期値設定の明細算出後在庫数表示区分を「行移動時反映」に設定した状態で、</br>
        /// <br>             売上伝票入力で明細を入力して倉庫をガイドから選択、</br>
        /// <br>             又はF8で倉庫切替を行うと、最初から在庫数が変更された状態で表示されるため、</br>
        /// <br>             ガイドからの選択直後は在庫数を変更しないように修正</br>
        /// <br>Update Note: 2011/11/02 鄧潘ハン</br>
        /// <br>             ReadMine#26251 全体初期値設定の明細算出後在庫数表示区分を「行移動時反映」に設定した状態で、</br>
        /// <br>             売上伝票入力で明細を入力して倉庫をガイドから選択、</br>
        /// <br>             又はF8で倉庫切替を行うと、最初から在庫数が変更された状態で表示されるため、</br>
        /// <br>             ガイドからの選択直後は在庫数を変更しないように修正</br>
        /// <br>Update Note: 2011/11/07   鄧潘ハン Redmine#26442 発注選択時のBO区分の初期表示の対応</br>
        /// <br>Update Note: 2013/01/24 鄧潘ハン</br>
        /// <br>管理番号   : 10806793-00 2013/03/13配信分</br>
        /// <br>             Redmine#34141 一括値引功能を追加についての対応</br>
        /// </remarks>
        public void DoAddLine(int logNo, int slipNo, int acptAnOdrStatus)
        {
            // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- >>>>>
            //「logNo=-1」である場合、「一括値引」→「売上」
            if (logNo == -1)
            {
                this._discountAllLineflag = false;// 一括値引フラグ
                this._inputModeTitle = "通常";// 入力モード　 
                return;
            }
            else if (logNo == 50)
            {
                //一括値引ボタン押す
                this._discountAllLinebuttonflag = true;
            }
            else if (logNo == -999)
            {
                // 売上入力明細クリア処理
                this.Clear();
            }
            // ----ADD 2013/01/24 鄧潘ハン REDMINE#34141---- <<<<<
            this._surveyUseLogOutputAcs.AddLine(logNo, slipNo, acptAnOdrStatus);
            //---ADD 2011/10/26------------------------->>>>>
            if (logNo == 30)
            {
                //_salesSlipInputAcs.WarehouseBtnClickFlag = true; // ADD 2011/11/01 // DEL 2011/11/02
                for (int i = 0; i < this._salesDetailDataTable.Rows.Count; i++)
                {
                    double shipmentCntDisplays = this._salesDetailDataTable[i].ShipmentCntDisplay;
                    double AcceptAnOrderCntDisplay = this._salesDetailDataTable[i].AcceptAnOrderCntDisplay;

                    if (this._salesDetailDataTable[i].SalesSlipDtlNum != 0 ||
                        ((this._salesSlipInputAcs.ExistStockTempForStock(i + 1))
                        || (!this._salesSlipInputAcs.ExistSalesDetailSupplierCd(i + 1))
                        || (this._salesDetailDataTable[i].BoCode == SalesSlipInputAcs.ctDefaultBoCode)
                        || (!this._salesSlipInputAcs.ExistSalesDetailEnableOdrMakerCd(i + 1))
                        || (this._salesDetailDataTable[i].EditStatus == 8)))//this._salesSlipInputAcs.ExistOrderInfo(i))
                    {
                        continue;
                    }

                    //---ADD 2011/11/07 -------------------------------->>>>>
                    if (!string.Empty.Equals(this._salesDetailDataTable[i].WarehouseCode.Trim()))
                    {
                        if (this._salesDetailDataTable[i].AcceptAnOrderCntForOrder == 0)
                        {
                            this._salesDetailDataTable[i].BoCode = "*";
                            continue;
                        }
                    }
                    //---ADD 2011/11/07 --------------------------------<<<<<

                    if (this._salesDetailDataTable[i].AcceptAnOrderCntDisplay != 0 && this._salesDetailDataTable[i].ShipmentCntDisplay != 0)
                    {
                        //-----UPD 2011/11/01----->>>>>
                        double temp = AcceptAnOrderCntDisplay - shipmentCntDisplays;
                        if (temp > 999)
                        {
                            uGridDetailsAfterCellUpdate(i, (AcceptAnOrderCntDisplay - 999).ToString(), this._salesDetailDataTable[i].ShipmentCntDisplay.ToString(), this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName);
                            uGridDetailsAfterCellUpdate(i, "999", this._salesDetailDataTable[i].AcceptAnOrderCntForOrder.ToString(), this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName);
                        }
                        else
                        {
                            uGridDetailsAfterCellUpdate(i, temp.ToString(), this._salesDetailDataTable[i].AcceptAnOrderCntForOrder.ToString(), this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName);
                        }
                        //uGridDetailsAfterCellUpdate(i, (this._salesDetailDataTable[i].AcceptAnOrderCntDisplay - this._salesDetailDataTable[i].ShipmentCntDisplay).ToString(), this._salesDetailDataTable[i].AcceptAnOrderCntForOrder.ToString(), this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName);
                        //-----UPD 2011/11/01-----<<<<<
                    }
                    else if (this._salesDetailDataTable[i].ShipmentCntDisplay != 0)
                    {
                        //-----UPD 2011/11/01----->>>>>
                        if (shipmentCntDisplays > 999)
                        {
                            uGridDetailsAfterCellUpdate(i, (shipmentCntDisplays - 999).ToString(), this._salesDetailDataTable[i].ShipmentCntDisplay.ToString(), this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName);
                            uGridDetailsAfterCellUpdate(i, shipmentCntDisplays.ToString(), this._salesDetailDataTable[i].AcceptAnOrderCntDisplay.ToString(), this._salesDetailDataTable.AcceptAnOrderCntDisplayColumn.ColumnName);
                            uGridDetailsAfterCellUpdate(i, "999", this._salesDetailDataTable[i].AcceptAnOrderCntForOrder.ToString(), this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName);
                        }
                        else
                        {
                            uGridDetailsAfterCellUpdate(i, "0.0", this._salesDetailDataTable[i].ShipmentCntDisplay.ToString(), this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName);
                            uGridDetailsAfterCellUpdate(i, shipmentCntDisplays.ToString(), this._salesDetailDataTable[i].AcceptAnOrderCntDisplay.ToString(), this._salesDetailDataTable.AcceptAnOrderCntDisplayColumn.ColumnName);
                            uGridDetailsAfterCellUpdate(i, shipmentCntDisplays.ToString(), this._salesDetailDataTable[i].AcceptAnOrderCntForOrder.ToString(), this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName);
                        }
                        //uGridDetailsAfterCellUpdate(i, "0.0", this._salesDetailDataTable[i].ShipmentCntDisplay.ToString(), this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName);
                        //uGridDetailsAfterCellUpdate(i, shipmentCntDisplays.ToString(), this._salesDetailDataTable[i].AcceptAnOrderCntDisplay.ToString(), this._salesDetailDataTable.AcceptAnOrderCntDisplayColumn.ColumnName);
                        //uGridDetailsAfterCellUpdate(i, shipmentCntDisplays.ToString(), this._salesDetailDataTable[i].AcceptAnOrderCntForOrder.ToString(), this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName);
                        //-----UPD 2011/11/01-----<<<<<
                    }
                    else if (this._salesDetailDataTable[i].AcceptAnOrderCntDisplay != 0)
                    {
                        //-----UPD 2011/11/01----->>>>>
                        if (AcceptAnOrderCntDisplay > 999)
                        {
                            uGridDetailsAfterCellUpdate(i, (AcceptAnOrderCntDisplay - 999).ToString(), this._salesDetailDataTable[i].ShipmentCntDisplay.ToString(), this._salesDetailDataTable.ShipmentCntDisplayColumn.ColumnName);
                            uGridDetailsAfterCellUpdate(i, "999", this._salesDetailDataTable[i].AcceptAnOrderCntForOrder.ToString(), this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName);
                        }
                        else
                        {
                            uGridDetailsAfterCellUpdate(i, this._salesDetailDataTable[i].AcceptAnOrderCntDisplay.ToString(), this._salesDetailDataTable[i].AcceptAnOrderCntForOrder.ToString(), this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName);
                        }
                        //uGridDetailsAfterCellUpdate(i, this._salesDetailDataTable[i].AcceptAnOrderCntDisplay.ToString(), this._salesDetailDataTable[i].AcceptAnOrderCntForOrder.ToString(), this._salesDetailDataTable.AcceptAnOrderCntForOrderColumn.ColumnName);
                        //-----UPD 2011/11/01-----<<<<<

                    }
                    this._salesSlipInputAcs.SettingSalesDetailShipmentCnt2(i + 1); // ADD 2011/11/02
                }

            }
            //---ADD 2011/10/26-------------------------<<<<<
        }

        // ---  ADD 2011/07/25 ------- >>>>>
        /// <summary>
        /// 掛率優先区分に追加
        /// </summary>
        /// <remarks>
        /// <br>Note       : 掛率優先区分に追加する。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2011/07/26</br>
        /// </remarks>
        /// <br>Update Note: 2011/08/15 Redmine#23578 譚洪 連番16での掛率算出の修正内容の対応</br>
        /// <br>Update Note: 2011/08/18 連番729 許雁波</br>
        public void SetInitData(out bool existFlg)
        {
            // 掛率優先区分
            this._salesSlipInputAcs.SetUnitPriceCalculation();
            this._salesSlipStockInfoInputAcs.SetUnitPriceCalculation();   // ADD 2011/08/15
            existFlg = IsGoodsNoFromXMLExist();  // ADD 連番729 2011/08/18
        }
        // ---  ADD 2011/07/25 ------- <<<<<

        /// <summary>
        /// 画面内容をキャプチャして内部保持
        /// </summary>
        /// <remarks>
        /// <br>Note       : 画面内容をキャプチャして内部保持する。</br>
        /// <br>Programmer : 曹文傑</br>
        /// <br>Date       : 2011/02/11</br>
        /// </remarks>
        public void DoCacheImage()
        {
            this._surveyUseLogOutputAcs.CacheImage();
        }

        // ADD 2011/09/17 >>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 保存処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 画面内容を保存処理する。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2011/09/17</br>
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        /// </remarks>
        public void DoAfterSave()
        {
            //this.AfterSave(out this._result, this._carMngCodeAfter, this._printSlipFlag, ref this._isMakeQR, ref this._scmFlg, out this._cmtFlag); //DEL K2011/12/09
            // UPD 2013/03/28 SCM障害№192対応 ----------------------------------->>>>>
            //this.AfterSave(out this._result, this._carMngCodeAfter, this._printSlipFlag, ref this._isMakeQR, ref this._scmFlg, out this._cmtFlag, out this._slipNote2ErrFlag, out this._salesDateErrFlag); //ADD K2011/12/09
            this.AfterSave(out this._result, this._carMngCodeAfter, this._printSlipFlag, ref this._isMakeQR, ref this._scmFlg, out this._cmtFlag, out this._slipNote2ErrFlag, out this._salesDateErrFlag, out this._isSCMSave);
            // UPD 2013/03/28 SCM障害№192対応 -----------------------------------<<<<<
        }

        /// <summary>
        /// 保存処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 画面内容を保存処理する。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2011/09/17</br>
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        /// </remarks>
        //public void SetAfterSaveData(int result, string carMngCode, bool printSlipFlag, bool isMakeQR, bool scmFlg, bool cmtFlag)//DEL K2011/12/09
        // UPD 2013/03/28 SCM障害№192対応 ---------------------------------->>>>>
        //public void SetAfterSaveData(int result, string carMngCode, bool printSlipFlag, bool isMakeQR, bool scmFlg, bool cmtFlag, bool slipNote2ErrFlag, bool salesDateErrFlag)//ADD K2011/12/09  
        public void SetAfterSaveData(int result, string carMngCode, bool printSlipFlag, bool isMakeQR, bool scmFlg, bool cmtFlag, bool slipNote2ErrFlag, bool salesDateErrFlag, int isSCMSave)
        // UPD 2013/03/28 SCM障害№192対応 ----------------------------------<<<<<
        {
            this._result = result;
            this._carMngCodeAfter = carMngCode;
            this._printSlipFlag = printSlipFlag;
            this._isMakeQR = isMakeQR;
            this._scmFlg = scmFlg;
            this._cmtFlag = cmtFlag;
            // ----- ADD K2011/12/09 --------------------------->>>>>
            if (this._enterpriseCode == login_EnterpriseCode)
            {
                this._slipNote2ErrFlag = slipNote2ErrFlag;
                this._salesDateErrFlag = salesDateErrFlag;
            }
            // ----- ADD K2011/12/09 ---------------------------<<<<<
            // ADD 2013/03/28 SCM障害№192対応 ---------------------------->>>>>
            this._isSCMSave = isSCMSave;
            // ADD 2013/03/28 SCM障害№192対応 ----------------------------<<<<<

            //// ----- DEL K2011/12/09 --------------------------->>>>>
            //this._slipNote2ErrFlag = slipNote2ErrFlag;
            //this._salesDateErrFlag = salesDateErrFlag;
            // ----- DEL K2011/12/09 ---------------------------<<<<<
        }

        /// <summary>
        /// 保存処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : 画面内容を保存処理する。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2011/09/17</br>
        /// <br>Update Note: K2011/12/09 鄧潘ハン</br>
        /// <br>管理番号   : 10703874-00</br>
        /// <br>作成内容   : イスコ個別対応</br>
        /// </remarks>
        //public void GetAfterSaveData(out int result, out bool isMakeQR, out bool scmFlg, out bool cmtFlag)// DEL K2011/12/09
        // UPD 2013/03/28 SCM障害№192対応 -------------------------------->>>>>
        //public void GetAfterSaveData(out int result, out bool isMakeQR, out bool scmFlg, out bool cmtFlag, out bool slipNote2ErrFlag, out bool salesDateErrFlag)// ADD K2011/12/09
        public void GetAfterSaveData(out int result, out bool isMakeQR, out bool scmFlg, out bool cmtFlag, out bool slipNote2ErrFlag, out bool salesDateErrFlag, out int isSCMSave)
        // UPD 2013/03/28 SCM障害№192対応 --------------------------------<<<<<
        {
            result = this._result;
            isMakeQR = this._isMakeQR;
            scmFlg = this._scmFlg;
            cmtFlag = this._cmtFlag;
            // ----- ADD K2011/12/09 --------------------------->>>>>
            slipNote2ErrFlag = this._slipNote2ErrFlag;
            salesDateErrFlag = this._salesDateErrFlag;
            // ----- ADD K2011/12/09 ---------------------------<<<<<
            // ADD 2013/03/28 SCM障害№192対応 ---------------------------->>>>>
            isSCMSave = this._isSCMSave;
            // ADD 2013/03/28 SCM障害№192対応 ----------------------------<<<<<
        }
        // ADD 2011/09/17 <<<<<<<<<<<<<<<<<<<

        // ADD 2012/10/15 >>>>>>>>>>>>>>>>>>>
        /// <summary>
        /// 仕入日のエラーメッセージが表示される
        /// </summary>
        /// <remarks>
        /// <br>Note       : 仕入日のエラーメッセージを表示処理する。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2012/10/15</br>
        /// </remarks>
        public void ShowStockDateMsg()
        {
            TMsgDisp.Show(
            emErrorLevel.ERR_LEVEL_EXCLAMATION,
            string.Empty,
            "仕入日の入力が不正です。",
            0,
            MessageBoxButtons.OK);
        }
        // ADD 2012/10/15 <<<<<<<<<<<<<<<<<<<

        /// <summary>
        /// 不正更新防止のメッセージが表示されるフラグを取る
        /// </summary>
        /// <param name="errorFlag">フラグ</param>
        /// <remarks>
        /// <br>Note       : 不正更新防止のメッセージが表示されるフラグを取る。</br>
        /// <br>Programmer : 曹文傑</br>
        /// <br>Date       : 2011/02/11</br>
        /// </remarks>
        public void GetErrorFlag(out bool errorFlag)
        {
            errorFlag = this._surveyUseLogOutputAcs._isErrorFlag;
        }
        // ---ADD 2011/02/11----------------<<<<

        // ---ADD 2011/05/30-------------->>>>>
        /// <summary>
        /// 画面の拠点コード変化時（キャンペーン情報取得用）
        /// </summary>
        /// <param name="sectionCode">拠点コード</param>
        /// <remarks>
        /// <br>Note       : 画面の拠点コード変化時（キャンペーン情報取得用）</br>
        /// <br>Programmer : 曹文傑</br>
        /// <br>Date       : 2011/05/30</br>
        /// </remarks>
        public void SetSectionCode(string sectionCode)
        {
            this._salesSlipInputAcs.SectionCode = sectionCode.Trim();
        }
        // ---ADD 2011/05/30--------------<<<<<

        // ---ADD 2011/07/20-------------->>>>>
        /// <summary>
        /// 現在庫数を調整します
        /// </summary>
        /// <remarks>
        /// <br>Note       : 現在庫数を調整します</br>
        /// <br>Programmer : 曹文傑</br>
        /// <br>Date       : 2011/07/20</br>
        /// </remarks>
        public void StockInfoAdjust()
        {
            this._salesSlipInputAcs.AcptAnOdrDetailStockInfoAdjust();
            this._salesSlipInputAcs.SalesDetailStockInfoAdjust();
        }
        // ---ADD 2011/07/20--------------<<<<<

        // --- ADD K2015/08/14 黄興貴 Redmine#47213 ---------------->>>>>
        /// <summary>
        /// アセンブリインスタンス化(UOEデータ取込)
        /// </summary>
        /// <param name="objMegoType">タイプ名称</param>
        /// <param name="asmname">アセンブリ名称</param>
        /// <param name="classname">クラス名称</param>
        /// <returns>インスタンス化されたクラス</returns>
        /// <remarks>
        /// <br>Note       : 指定されたアセンブリ及びクラス名より、クラスをインスタンス化します。</br>
        /// <br>Programmer : 黄興貴</br>
        /// <br>Date       : K2015/08/14</br>
        /// </remarks>
        private object LoadAssemblyObjUoe(ref Type objMegoType, string asmname, string classname)
        {
            object objMego = null;
            try
            {
                System.Reflection.Assembly asm = System.Reflection.Assembly.Load(asmname);
                Type objType = asm.GetType(classname);

                if (objType != null)
                {
                    objMego = Activator.CreateInstance(objType);
                    objMegoType = objType;
                }
            }
            catch (Exception)
            {
                //なし
            }

            return objMego;
        }
        // --- ADD K2015/08/14 黄興貴 Redmine#47213 ----------------<<<<<

        // --- ADD 陳亮 K2015/08/11 ---------------->>>>>
        /// <summary>
        /// アセンブリインスタンス化(UOEデータ取込)
        /// </summary>
        /// <param name="objMegoType">タイプ名称</param>
        /// <param name="asmname">アセンブリ名称</param>
        /// <param name="classname">クラス名称</param>
        /// <returns>インスタンス化されたクラス</returns>
        /// <remarks>
        /// <br>Note       : 指定されたアセンブリ及びクラス名より、クラスをインスタンス化します。</br>
        /// <br>Programmer : 陳亮</br>
        /// <br>Date       : K2015/08/11</br>
        /// <br>Update Note: K2015/09/22 紀飛</br>
        /// <br>管理番号   : 11101427-00</br>
        /// <br>           : #Redmine47186指摘一覧#374 ㈱メイゴ　WebUOE発注回答取込</br>
        /// </remarks>
        private object LoadAssemblyObjMego(ref Type objMegoType, string asmname, string classname)
        {
            object objMego = null;
            try
            {
                System.Reflection.Assembly asm = System.Reflection.Assembly.Load(asmname);
                Type objType = asm.GetType(classname);

                if (objType != null)
                {
                    objMego = Activator.CreateInstance(objType);
                    objMegoType = objType;
                }
            }
            // --- DEL K2015/09/22 紀飛 #Redmine47186指摘一覧#374 ㈱メイゴ　WebUOE発注回答取込----->>>>>
            //catch (Exception)
            //{
            //    //なし
            //}
            // --- DEL K2015/09/22 紀飛 #Redmine47186指摘一覧#374 ㈱メイゴ　WebUOE発注回答取込-----<<<<<
            // --- ADD K2015/09/22 紀飛 #Redmine47186指摘一覧#374 ㈱メイゴ　WebUOE発注回答取込----->>>>>
            catch (Exception ex)
            {
                objMego = null;
                SalesSlipInputInitDataAcs.LogWrite("SalesSlipInputAcs", "LoadAssemblyObjMego", ex.Message);
            }
            // --- ADD K2015/09/22 紀飛 #Redmine47186指摘一覧#374 ㈱メイゴ　WebUOE発注回答取込-----<<<<<

            return objMego;
        }
        // --- ADD 陳亮 K2015/08/11 ----------------<<<<<

        // --- ADD 黄興貴 K2015/04/29 ---------------->>>>>
        /// <summary>
        /// UOEデータ取込
        /// </summary>
        /// <param name="enterpriseCode">企業コード</param>
        /// <param name="message">エラーメッセージ</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note       : UOEデータ取込。</br>
        /// <br>Programmer : 黄興貴</br>
        /// <br>Date       : K2015/04/29</br>
        /// <br>Update Note: K2015/06/16 黄興貴</br>
        /// <br>管理番号   : 11100543-00 Redmine#46406 No.5の対応</br>
        /// <br>Update Note: K2015/08/03 黄興貴</br>
        /// <br>管理番号   : 11100068-00 Redmine#47083 明細車両情報不正</br>
        /// <br>Update Note: K2015/08/14 黄興貴</br>
        /// <br>管理番号   : 11100068-00 Redmine#47213 売上伝票入力の参照不正</br>
        /// <br>Update Note: 2015/10/26 譚洪</br>
        /// <br>管理番号   : 11170188-00 ㈱メイゴ　WebUOE発注回答取込マージ（メイゴ個別と富士ジーワイの個別）対応</br>
        /// <br>Update Note: K2020/11/09 呉元嘯</br>
        /// <br>管理番号   : 11600946-00 PMKOBETSU-4085対応</br>
        /// </remarks>
        //public int ReadUoeData(int salesRowNo) // DEL  譚洪 2015/10/26 Redmine#47609
        public int ReadFujiUoeData(int salesRowNo) // ADD  譚洪 2015/10/26 Redmine#47609
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            string message = null;

            // --- ADD K2015/08/14 黄興貴 Redmine#47213 --->>>>>
            List<SalesDetail> salesDetailList = new List<SalesDetail>();
            // 参照用方法コール
            MethodInfo _methodObjOpen; 
            Type uoeType = (new object()).GetType();
            // --- ADD K2015/08/14 黄興貴 Redmine#47213 ---<<<<<

            try
            {
                //UOEデータ取込
                status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

                // --- DEL K2015/08/14 黄興貴 Redmine#47213 --->>>>>
                //_uoeDataSetForm = new PMUOE02000UCA();
                //_uoeDataSetForm.Title = "WebUOE発注データ取込";
                // --- DEL K2015/08/14 黄興貴 Redmine#47213 ---<<<<<

                // --- ADD K2015/08/14 黄興貴 Redmine#47213 --->>>>>
                //アセンブリインスタンスを取得
                _objUoeDataSetForm = this.LoadAssemblyObjUoe(ref uoeType, "PMUOE02000UC", "Broadleaf.Windows.Forms.PMUOE02000UCA");
                // --- ADD K2015/08/14 黄興貴 Redmine#47213 ---<<<<<

                //結果を戻す
                # region[ファイルからデータを取り込み]
                // UOEファイル読み込み
                try
                {
                    // 設定画面を表示する

                    // --- DEL K2015/08/14 黄興貴 Redmine#47213 --->>>>>
                    //_uoeDataSetForm.ShowDialog(this._salesDetailDataTable.Count, salesRowNo);
                    // --- DEL K2015/08/14 黄興貴 Redmine#47213 ---<<<<<

                    // --- ADD K2015/08/14 黄興貴 Redmine#47213 --->>>>>
                    if (_objUoeDataSetForm!=null)
                    {
                        FieldInfo fieldTitle = uoeType.GetField("Title");
                        fieldTitle.SetValue(_objUoeDataSetForm, "WebUOE発注データ取込");

                        // 設定画面を表示する
                        _methodObjOpen = this._objUoeDataSetForm.GetType().GetMethod("ShowDialog", new Type[] { typeof(int), typeof(int) });
                        _methodObjOpen.Invoke(_objUoeDataSetForm, new object[] { this._salesDetailDataTable.Count, salesRowNo });

                        // 明細データを取得
                        PropertyInfo propertyInfo = uoeType.GetProperty("SalesDetailList");
                        salesDetailList = (List<SalesDetail>)propertyInfo.GetValue(_objUoeDataSetForm, null);

                    }
                    // --- ADD K2015/08/14 黄興貴 Redmine#47213 ---<<<<<

                    // --- DEL K2015/08/14 黄興貴 Redmine#47213 --->>>>>
                    //if (_uoeDataSetForm.SalesDetailList != null && _uoeDataSetForm.SalesDetailList.Count != 0)
                    // --- DEL K2015/08/14 黄興貴 Redmine#47213 ---<<<<<
                    if (salesDetailList != null && salesDetailList.Count != 0)
                    {
                        // 売上明細データを作成する
                        // --- DEL K2015/08/14 黄興貴 Redmine#47213 --->>>>>
                        //foreach (SalesDetail salesDetailFUoe in _uoeDataSetForm.SalesDetailList)
                        // --- DEL K2015/08/14 黄興貴 Redmine#47213 ---<<<<<

                        foreach (SalesDetail salesDetailFUoe in salesDetailList) // ADD K2015/08/14 黄興貴 Redmine#47213
                        {
                            // --- DEL 黄興貴 K2015/06/16 Redmine#46406 No.5の対応 ---------->>>>>
                            //if (string.IsNullOrEmpty(salesDetailFUoe.GoodsNo))
                            //{
                            //    continue;
                            //}
                            // --- DEL 黄興貴 K2015/06/16 Redmine#46406 No.5の対応 ----------<<<<<
                            this.AfterGoodsNoUpdate(salesRowNo - 1, salesDetailFUoe.GoodsNo, salesDetailFUoe.GoodsMakerCd, salesRowNo);

                            double bakStockCnt = this._salesDetailDataTable[salesRowNo - 1].SupplierStock;

                            // 品番
                            this._salesDetailDataTable[salesRowNo - 1].GoodsNo = salesDetailFUoe.GoodsNo;
                            // 品名
                            this._salesDetailDataTable[salesRowNo - 1].GoodsName = salesDetailFUoe.GoodsName;
                            // 商品属性(0:純正,1:優良)
                            this._salesDetailDataTable[salesRowNo - 1].GoodsKindCode = 0;
                            // 受注数
                            // --- UPD 呉元嘯 K2020/11/09 PMKOBETSU-4085対応 -------->>>>>
                            //this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCnt = 0;
                            // 見積と単価見積の場合、受注数を入力不可のため、売上と貸出のみの場合にセットする
                            if (((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                                (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment))
                                && (salesDetailFUoe.AcceptAnOrderCnt != CtCntZero))
                            {
                                if (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum)
                                {
                                    this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCnt = salesDetailFUoe.AcceptAnOrderCnt;
                                    this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCntDisplay = salesDetailFUoe.AcceptAnOrderCnt;
                                }
                                else
                                {
                                    // 修正モードの時、受注伝票以外の場合、回答取込で受注数をセットしない
                                    if (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
                                    {
                                        this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCnt = salesDetailFUoe.AcceptAnOrderCnt;
                                        this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCntDisplay = salesDetailFUoe.AcceptAnOrderCnt;
                                    }
                                }
                                this.uGridDetailsAfterCellUpdate(salesRowNo - 1, this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCnt.ToString(), CtCntZero.ToString(), CtNM_AcceptAnOrderCnt);
                            }
                            else
                            {
                                this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCnt = CtCntZero;
                                this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCntDisplay = CtCntZero;
                            }
                            // 明細備考
                            this._salesDetailDataTable[salesRowNo - 1].DtlNote = salesDetailFUoe.DtlNote;
                            // --- UPD 呉元嘯 K2020/11/09 PMKOBETSU-4085対応 --------<<<<<
                            // 仕入先
                            this._salesDetailDataTable[salesRowNo - 1].SupplierCd = salesDetailFUoe.SupplierCd;
                            this._salesDetailDataTable[salesRowNo - 1].SupplierCdForStock = salesDetailFUoe.SupplierCd;

                            // 価格情報再設定(仕入先手入力と同じ)
                            uGridDetailsAfterCellUpdate(salesRowNo - 1, salesDetailFUoe.SupplierCd.ToString(), "-1", "SupplierCd");

                            // メーカー
                            this._salesDetailDataTable[salesRowNo - 1].GoodsMakerCd = salesDetailFUoe.GoodsMakerCd;
                            // 行番号
                            this._salesDetailDataTable[salesRowNo - 1].SalesRowNo = salesDetailFUoe.SalesRowNo;
                            // 出荷数
                            // --- UPD 呉元嘯 K2020/11/09 PMKOBETSU-4085対応 -------->>>>>
                            //if (salesDetailFUoe.ShipmentCntDisplay != 0)
                            //{
                            //    this._salesDetailDataTable[salesRowNo - 1].ShipmentCntDisplay = salesDetailFUoe.ShipmentCntDisplay;
                            //    this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt = salesDetailFUoe.ShipmentCntDisplay;
                            //}
                            // 単価見積の場合、出荷数を入力不可のため、売上と貸出と見積のみの場合にセットする
                            if (((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                                (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment) ||
                                (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate))
                                && (salesDetailFUoe.ShipmentCntDisplay != CtCntZero))
                            {
                                if (this._salesSlipInputAcs.SalesSlip.SalesSlipNum == SalesSlipInputAcs.ctDefaultSalesSlipNum)
                                {
                                    this._salesDetailDataTable[salesRowNo - 1].ShipmentCntDisplay = salesDetailFUoe.ShipmentCntDisplay;
                                    this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt = salesDetailFUoe.ShipmentCntDisplay;
                                }
                                else
                                {
                                    //修正モードの時、受注伝票の場合、回答取込で出荷数をセットしない
                                    if (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatus != (int)SalesSlipInputAcs.AcptAnOdrStatusState.AcceptAnOrder)
                                    {
                                        this._salesDetailDataTable[salesRowNo - 1].ShipmentCntDisplay = salesDetailFUoe.ShipmentCntDisplay;
                                        this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt = salesDetailFUoe.ShipmentCntDisplay;
                                    }
                                    else
                                    {
                                        this._salesDetailDataTable[salesRowNo - 1].ShipmentCntDisplay = CtCntZero;
                                        this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt = CtCntZero;
                                    }
                                }
                            }
                            else
                            {
                                this._salesDetailDataTable[salesRowNo - 1].ShipmentCntDisplay = CtCntZero;
                                this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt = CtCntZero;
                            }
                            // --- UPD 呉元嘯 K2020/11/09 PMKOBETSU-4085対応 --------<<<<<
                            this._salesDetailDataTable[salesRowNo - 1].SupplierStock = bakStockCnt - this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt;
                            this._salesDetailDataTable[salesRowNo - 1].SupplierStockDisplay = this._salesDetailDataTable[salesRowNo - 1].SupplierStock;

                            if (salesDetailFUoe.SalesUnitCost != 0)
                            {
                                // 原価
                                this._salesDetailDataTable[salesRowNo - 1].CostRate = 0;
                                // 原価
                                this._salesDetailDataTable[salesRowNo - 1].SalesUnitCost = salesDetailFUoe.SalesUnitCost;
                                this._salesDetailDataTable[salesRowNo - 1].SalesUnitCostTaxExc = salesDetailFUoe.SalesUnitCost;
                            }

                            // 定価
                            if (salesDetailFUoe.ListPriceDisplay != 0.0)
                            {
                                this._salesDetailDataTable[salesRowNo - 1].ListPriceDisplay = salesDetailFUoe.ListPriceDisplay;
                                this._salesDetailDataTable[salesRowNo - 1].ListPriceTaxExcFl = salesDetailFUoe.ListPriceDisplay;
                                // 出荷数戻す変数
                                double shipMentCntbak = this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt;
                                // 売単価のみを算出、出荷数をクリアする。
                                if (salesDetailFUoe.ShipmentCntDisplay == 0)
                                {
                                    this._salesDetailDataTable[salesRowNo - 1].ShipmentCntDisplay = 0;
                                    this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt = 0;
                                }
                                // 売上単価
                                this.uGridDetailsAfterCellUpdate(salesRowNo - 1, salesDetailFUoe.ListPriceDisplay.ToString(), "0", "ListPriceDisplay");
                                // 出荷数戻す
                                this._salesDetailDataTable[salesRowNo - 1].ShipmentCntDisplay = shipMentCntbak;
                                this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt = shipMentCntbak;
                            }

                            if (salesDetailFUoe.ListPriceDisplay != 0.0 || salesDetailFUoe.ShipmentCntDisplay != 0.0)
                            {
                                //売上金額
                                this._salesSlipInputAcs.CalculationSalesMoney(salesRowNo - 1);
                            }

                            // --- ADD 黄興貴 K2015/08/03 Redmine#47083 明細車両情報不正 ---------->>>>>
                            this.SalesSlipDetailInput_DetailChanged(this._owner, salesRowNo);
                            // --- ADD 黄興貴 K2015/08/03 Redmine#47083 明細車両情報不正 ----------<<<<<
                            // --- ADD 呉元嘯 K2020/11/09 PMKOBETSU-4085対応 -------->>>>>
                            // 車両情報設定のため、受注数変更処理を再実行する
                            if (((this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales) ||
                                (this._salesSlipInputAcs.SalesSlip.AcptAnOdrStatusDisplay == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Shipment))
                                && (salesDetailFUoe.AcceptAnOrderCnt != CtCntZero))
                            {
                                this.uGridDetailsAfterCellUpdate(salesRowNo - 1, this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCnt.ToString(), CtCntZero.ToString(), CtNM_AcceptAnOrderCnt);
                            }
                            // --- ADD 呉元嘯 K2020/11/09 PMKOBETSU-4085対応 --------<<<<<

                            salesRowNo++;
                        }
                    }


                    status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                }
                catch
                {
                    status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
                }
                # endregion
            }
            catch (Exception ex)
            {
                message = ex.Message;
                status = -1;
            }

            return status;
        }

        /// <summary>
        /// 富士ジーワイ商事㈱オプション判定
        /// </summary>
        /// <param name="optPermitForFuJi">オプションフラグ</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note       : 富士ジーワイ商事㈱オプション判定。</br>
        /// <br>Programmer : 黄興貴</br>
        /// <br>Date       : K2015/04/29</br>
        /// </remarks>
        public int OptPermitForFuJi(out bool optPermitForFuJi)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            optPermitForFuJi = false;
            try
            {
                //富士ジーワイ商事㈱オプション判定
                if (this._salesSlipInputInitDataAcs.Opt_ForFuJi == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    optPermitForFuJi = true;
                }
                else
                {
                    optPermitForFuJi = false;
                }
                status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }
            return status;
        }
        // --- ADD 黄興貴 K2015/04/29 ----------------<<<<<
        // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応--->>>>>
        /// <summary>
        /// 電子帳簿連携オプションプション判定
        /// </summary>
        /// <param name="optPermitForEBooks">オプションフラグ</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note       : 電子帳簿連携オプションプション判定。</br>
        /// <br>Programmer : 陳艶丹</br>
        /// <br>Date       : 2022/04/26</br>
        /// </remarks>
        public int OptPermitForEBooks(out bool optPermitForEBooks)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            optPermitForEBooks = false;
            try
            {
                //電子帳簿連携オプション判定
                if (this._salesSlipInputInitDataAcs.Opt_PM_EBooks == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    optPermitForEBooks = true;
                }
                else
                {
                    optPermitForEBooks = false;
                }
                status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }
            return status;
        }
        // --- ADD 陳艶丹 2022/04/26 PMKOBETSU-4208 電子帳簿対応---<<<<<

        // --- ADD 紀飛 K2015/06/18 ㈱メイゴ　WebUOE発注回答取込---------------->>>>>
        /// <summary>
        /// UOEデータ取込
        /// </summary>
        /// <param name="salesRowNo">ライン指定</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note       : WebUOE発注回答取込。</br>
        /// <br>Programmer : 紀飛</br>
        /// <br>Date       : K2015/06/18</br>
        /// <br>Update Note: K2015/09/18 紀飛</br>
        /// <br>管理番号   : 11101427-00</br>
        /// <br>           : #Redmine47186障害一覧#52  取込後に売上伝票入力の原価金額が合計されていない</br>
        /// <br>Update Note: K2015/10/05 30757 佐々木　貴英</br>
        /// <br>管理番号   : 11101427-00</br>
        /// <br>           : 営業指摘対応 ヘッダにフォーカスがあるときも[発注回答]は有効とする</br>
        /// <br>Update Note: K2015/10/06 30757 佐々木　貴英</br>
        /// <br>管理番号   : 11101427-00</br>
        /// <br>             ②「選択発注回答データを売上明細へ取り込みました。」メッセージ出力タイミング変更</br>
        /// <br>             ⑤提供データに存在する商品がハイフン無しで表示される不具合対応</br>
        /// <br>Update Note: K2015/10/08 30757 佐々木　貴英</br>
        /// <br>管理番号   : 11101427-00</br>
        /// <br>           : 営業指摘対応</br>
        /// <br>             発注明細一覧画面で[確定]実行時の取込成功メッセージを表示させない</br>
        /// <br>Update Note: 2015/10/26 譚洪</br>
        /// <br>管理番号   : 11170188-00 ㈱メイゴ　WebUOE発注回答取込マージ（メイゴ個別と富士ジーワイの個別）対応</br>
        /// </remarks>
        //public int ReadUoeData(int salesRowNo)   // DEL  譚洪 2015/10/26 Redmine#47609
        public int ReadMeiGoUoeData(int salesRowNo)   // ADD  譚洪 2015/10/26 Redmine#47609
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            string message = null;
            SalesSlip sSlip=null;

            // 取込リスト
            List<SalesDetail> salesDetailList=new List<SalesDetail>();  
            try
            {
                //UOEデータ取込
                status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;

                //結果を戻す
                # region[ファイルからデータを取り込み]
                // UOEファイル読み込み
                try
                {
                    // 全画面データかどうかを判断し
                    bool salesDetailDataTableFull = true;
                    for (int i = 0; i < this._salesDetailDataTable.Count; i++)
                    {
                        string goodsName = this._salesDetailDataTable[i].GoodsName;
                        if (string.IsNullOrEmpty(goodsName))
                        {
                            salesDetailDataTableFull = false;
                            break;
                        }
                    }
                    
                    Type megoType = (new object()).GetType();
                    MethodInfo _methodMegoOpen; // 参照用方法コール

                    //アセンブリインスタンスを取得
                    this._objMegoSettingForm = this.LoadAssemblyObjMego(ref megoType, "PMUOE02030UC", "Broadleaf.Windows.Forms.PMUOE02030UCA");

                    if (_objMegoSettingForm != null)
                    {
                        // 現在の売上データオブジェクトの取得
                        sSlip = this._salesSlipInputAcs.SalesSlip;
                        // 発注明細一覧画面表示
                        // --- DEL K2015/10/05 30757 佐々木　貴英 ----->>>>>
                        //_methodMegoOpen = this._objMegoSettingForm.GetType().GetMethod("ShowDialog", new Type[] { typeof(int), typeof(int), typeof(SalesSlip), typeof(bool) });
                        //_methodMegoOpen.Invoke(_objMegoSettingForm, new object[] { this._salesDetailDataTable.Count, salesRowNo, sSlip, salesDetailDataTableFull });
                        // --- DEL K2015/10/05 30757 佐々木　貴英 -----<<<<<
                        // --- ADD K2015/10/05 30757 佐々木　貴英 ----->>>>>
                        _methodMegoOpen = this._objMegoSettingForm.GetType().GetMethod("ShowDialog", new Type[] { typeof(int), typeof(int), typeof(SalesSlip), typeof(bool), typeof(bool) });
                        _methodMegoOpen.Invoke(_objMegoSettingForm, new object[] { this._salesDetailDataTable.Count, salesRowNo, sSlip, salesDetailDataTableFull, this._salesSlipInputAcs.SearchCarDiv });
                        // --- ADD K2015/10/05 30757 佐々木　貴英 -----<<<<<

                        // 取込リストを取得
                        PropertyInfo propertyInfo = megoType.GetProperty("SalesDetailList");
                        salesDetailList = (List<SalesDetail>)propertyInfo.GetValue(_objMegoSettingForm, null);
                    }

                    if (salesDetailList != null && salesDetailList.Count != 0)
                    {
                        if (!salesDetailDataTableFull)
                        {
                            // 売上明細データを作成する
                            foreach (SalesDetail salesDetailFUoe in salesDetailList)
                            {
                                this.AfterGoodsNoUpdate(salesRowNo - 1, salesDetailFUoe.GoodsNo, salesDetailFUoe.GoodsMakerCd, salesRowNo);

                                if (this._salesDetailDataTable[salesRowNo - 1].GoodsMakerCd <= 0 && string.IsNullOrEmpty(this._salesDetailDataTable[salesRowNo - 1].GoodsNo))
                                {
                                    salesRowNo++;
                                    continue;
                                }

                                double bakStockCnt = this._salesDetailDataTable[salesRowNo - 1].SupplierStock;
                                // 品番
                                // --- DEL K2015/10/06⑤ 30757 佐々木　貴英 ----->>>>>
                                //this._salesDetailDataTable[salesRowNo - 1].GoodsNo = salesDetailFUoe.GoodsNo;
                                // --- DEL K2015/10/06⑤ 30757 佐々木　貴英 -----<<<<<
                                // --- ADD K2015/10/06⑤ 30757 佐々木　貴英 ----->>>>>
                                if (string.IsNullOrEmpty(this._salesDetailDataTable[salesRowNo - 1].GoodsNo))
                                {
                                    // 品番検索にて品番がセットされなかったときのみ受注回答データの品番をセットする。
                                    this._salesDetailDataTable[salesRowNo - 1].GoodsNo = salesDetailFUoe.GoodsNo;
                                }
                                // --- ADD K2015/10/06⑤ 30757 佐々木　貴英 -----<<<<<
                                // 品名
                                this._salesDetailDataTable[salesRowNo - 1].GoodsName = salesDetailFUoe.GoodsName;
                                // 商品属性(0:純正,1:優良)
                                this._salesDetailDataTable[salesRowNo - 1].GoodsKindCode = 0;
                                // 仕入先
                                this._salesDetailDataTable[salesRowNo - 1].SupplierCd = salesDetailFUoe.SupplierCd;
                                this._salesDetailDataTable[salesRowNo - 1].SupplierCdForStock = salesDetailFUoe.SupplierCd;

                                // 価格情報再設定(仕入先手入力と同じ)
                                uGridDetailsAfterCellUpdate(salesRowNo - 1, salesDetailFUoe.SupplierCd.ToString(), "-1", "SupplierCd");

                                // 行番号
                                this._salesDetailDataTable[salesRowNo - 1].SalesRowNo = salesDetailFUoe.SalesRowNo;
                                // 出荷数
                                if (salesDetailFUoe.ShipmentCntDisplay != 0)
                                {
                                    this._salesDetailDataTable[salesRowNo - 1].ShipmentCntDisplay = salesDetailFUoe.ShipmentCntDisplay;
                                    this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt = salesDetailFUoe.ShipmentCntDisplay;
                                }

                                // 現在庫数
                                if (this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt > this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCntDisplay)
                                {
                                    this._salesDetailDataTable[salesRowNo - 1].SupplierStock = bakStockCnt - this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt;
                                }
                                else
                                {
                                    this._salesDetailDataTable[salesRowNo - 1].SupplierStock = bakStockCnt - this._salesDetailDataTable[salesRowNo - 1].AcceptAnOrderCntDisplay;
                                }
                                this._salesDetailDataTable[salesRowNo - 1].SupplierStockDisplay = this._salesDetailDataTable[salesRowNo - 1].SupplierStock;

                                // 標準価格
                                if (salesDetailFUoe.ListPriceTaxExcFl != 0.0)
                                {
                                    this._salesDetailDataTable[salesRowNo - 1].ListPriceTaxExcFl = salesDetailFUoe.ListPriceTaxExcFl;
                                    this._salesDetailDataTable[salesRowNo - 1].ListPriceDisplay = salesDetailFUoe.ListPriceTaxExcFl;

                                    // 出荷数戻す変数
                                    double shipMentCntbak = this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt;
                                    // 売単価のみを算出、出荷数をクリアする。
                                    this._salesDetailDataTable[salesRowNo - 1].ShipmentCntDisplay = 0;
                                    this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt = 0;
                                    
                                    // 売上単価、原単価
                                    this.uGridDetailsAfterCellUpdate(salesRowNo - 1, salesDetailFUoe.ListPriceTaxExcFl.ToString(), "0", "ListPriceDisplay");
                                    // 出荷数戻す
                                    this._salesDetailDataTable[salesRowNo - 1].ShipmentCntDisplay = shipMentCntbak;
                                    this._salesDetailDataTable[salesRowNo - 1].ShipmentCnt = shipMentCntbak;
                                }

                                // 売単価
                                if (salesDetailFUoe.SalesUnPrcTaxExcFl != 0.0)
                                {
                                    this._salesDetailDataTable[salesRowNo - 1].SalesUnPrcTaxExcFl = salesDetailFUoe.SalesUnPrcTaxExcFl;
                                    this._salesDetailDataTable[salesRowNo - 1].SalesUnPrcDisplay = salesDetailFUoe.SalesUnPrcTaxExcFl;
                                }

                                if (salesDetailFUoe.SalesUnitCost != 0)
                                {
                                    // 原価率
                                    this._salesDetailDataTable[salesRowNo - 1].CostRate = 0;
                                    // 原単価
                                    this._salesDetailDataTable[salesRowNo - 1].SalesUnitCost = salesDetailFUoe.SalesUnitCost;
                                    this._salesDetailDataTable[salesRowNo - 1].SalesUnitCostTaxExc = salesDetailFUoe.SalesUnitCost;
                                }

                                // --- ADD K2015/09/18 紀飛 #Redmine47186障害一覧#52  取込後に売上伝票入力の原価金額が合計されていない----->>>>>
                                if (this._salesDetailDataTable[salesRowNo - 1].SalesUnitCostTaxExc != 0 && this._salesDetailDataTable[salesRowNo - 1].ShipmentCntDisplay != 0)
                                {
                                    // 原価金額
                                    this._salesSlipInputAcs.CalculationCost(salesRowNo - 1);
                                }
                                // --- ADD K2015/09/18 紀飛 #Redmine47186障害一覧#52  取込後に売上伝票入力の原価金額が合計されていない-----<<<<<

                                if (this._salesDetailDataTable[salesRowNo - 1].SalesUnPrcTaxExcFl != 0.0 && this._salesDetailDataTable[salesRowNo - 1].ShipmentCntDisplay != 0.0)
                                {
                                    //売上金額
                                    this._salesSlipInputAcs.CalculationSalesMoney(salesRowNo - 1);
                                }

                                // 車両情報取得
                                SalesSlipDetailInput_DetailChanged(this._owner, salesRowNo);

                                salesRowNo++;
                            }
                            // --- DEL K2015/10/08 30757 佐々木　貴英 ----->>>>>
                            //// --- ADD K2015/10/06② 30757 佐々木　貴英 ----->>>>>
                            //string messagePgid = "PMUOE02030UCA";
                            //string messageStr = "選択発注回答データを売上明細へ取り込みました。";
                            //int statusNum = -1;
                            //TMsgDisp.Show(
                            //    null,
                            //    emErrorLevel.ERR_LEVEL_INFO,
                            //    messagePgid,
                            //    messageStr,
                            //    statusNum,
                            //    MessageBoxButtons.OK);
                            //// --- ADD K2015/10/06② 30757 佐々木　貴英 -----<<<<<
                            // --- DEL K2015/10/08 30757 佐々木　貴英 -----<<<<<
                        }
                    }

                    status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                }
                catch
                {
                    status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
                }
                # endregion
            }
            catch (Exception ex)
            {
                message = ex.Message;
                status = -1;
            }

            return status;
        }

        /// <summary>
        /// ㈱メイゴオプション判定
        /// </summary>
        /// <param name="optPermitForMeiGo">オプションフラグ</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note       : ㈱メイゴオプション判定。</br>
        /// <br>Programmer : 紀飛</br>
        /// <br>Date       : K2015/06/18</br>
        /// </remarks>
        public int OptPermitForMeiGo(out bool optPermitForMeiGo)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            optPermitForMeiGo = false;
            try
            {
                //㈱メイゴオプション判定
                if (this._salesSlipInputInitDataAcs.Opt_ForMeiGo == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    optPermitForMeiGo = true;
                }
                else
                {
                    optPermitForMeiGo = false;
                }
                status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }
            return status;
        }
        // --- ADD 紀飛 K2015/06/18 ㈱メイゴ　WebUOE発注回答取込----------------<<<<<


        // --- ADD K2016/12/30 譚洪 水野商工㈱　第二売価 ---------->>>>>
        /// <summary>
        /// 水野商工㈱オプション判定
        /// </summary>
        /// <param name="optPermitForMizuno2ndSellPriceCtl">オプションフラグ</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note       : 水野商工㈱オプション判定。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : K2016/12/30</br>
        /// </remarks>
        public int OptPermitForMizuno2ndSellPriceCtl(out bool optPermitForMizuno2ndSellPriceCtl)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            optPermitForMizuno2ndSellPriceCtl = false;
            try
            {
                //㈱メイゴオプション判定
                if (this._salesSlipInputInitDataAcs.Opt_Mizuno2ndSellPriceCtl == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    optPermitForMizuno2ndSellPriceCtl = true;
                }
                else
                {
                    optPermitForMizuno2ndSellPriceCtl = false;
                }
                status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }
            return status;
        }


        /// <summary>
        /// 第二売価ガイドの位置を設定する。
        /// </summary>
        /// <param name="locationLeft">左</param>
        /// <param name="locationTop">上</param>
        /// <returns>なし</returns>
        /// <remarks>
        /// <br>Note       : 第二売価ガイドの位置を設定する。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : K2016/12/30</br>
        /// </remarks>
        public void SetSecondSalesUnPrcGideLocation(int locationLeft, int locationTop)
        {
            this._locationLeft = locationLeft;
            this._locationTop = locationTop;
        }
        // --- ADD K2016/12/30 譚洪 水野商工㈱　第二売価 ----------<<<<<

        // --- ADD 譚洪 2015/10/26 Redmine#47609 ------------------>>>>>
        /// <summary>
        /// UOEデータ取込
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note       : UOEデータ取込。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2015/10/26</br>
        /// </remarks>
        public int ReadUoeData(int salesRowNo)
        {
            //㈱メイゴオプション判定
            if (this._salesSlipInputInitDataAcs.Opt_ForFuJi == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                return this.ReadFujiUoeData(salesRowNo);
            }
            else if (this._salesSlipInputInitDataAcs.Opt_ForMeiGo == (int)SalesSlipInputInitDataAcs.Option.ON)
            {
                return this.ReadMeiGoUoeData(salesRowNo);
            }
            else
            {
                return (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            }
        }
        // --- ADD  譚洪 2015/10/26 Redmine#47609 ------------------<<<<<

        /*----- DEL 2014/08/28 陳艶丹 Redmine#43336 ----->>>>>
        // --- ADD 2011/11/12---------->>>>>
        /// <summary>
        /// BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑの在庫確認で作成された見積伝票の判断
        /// </summary>
        /// <param name="salesSlip">仕入データオブジェクト</param>
        /// <returns>判断結果</returns>
        /// <remarks>
        /// <br>Note       : BLﾊﾟｰﾂｵｰﾀﾞｰｼｽﾃﾑの在庫確認で作成された見積伝票の判断処理</br>
        /// <br>Programmer : 李占川</br>
        /// <br>Date       : 2011/11/12</br>
        /// <br>Update Note: 2011/11/22   鄧潘ハン BLﾊﾟｰﾂｵｰﾀﾞｰ在庫確認時の見積伝票対応</br>
        /// </remarks>
        private bool isStockSales(SalesSlip salesSlip)
        {
            if (this._salesSlipInputAcs.SalesDetailList.Count == 0)
            {
                return false;
            }

            // 10：見積 と1:BLﾊﾟｰﾂｵｰﾀﾞｰ
            if (salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Estimate
                //&& this._salesSlipInputAcs.SalesDetailList[0].AcceptOrOrderKind == 1) // DEL 2011/11/22
                //---ADD 2011/11/22 ----------------------------------->>>>>
                && this._salesSlipInputAcs.SalesDetailList[0].AcceptOrOrderKind == 1
                // UPD 2014/06/18 SCM仕掛一覧№10641 ｼｽﾃﾑﾃｽﾄ障害№95,96対応 --------------------------->>>>>
                //&& this._salesSlipInputAcs.SalesDetailList[0].InqRowNumber != 0)
                && this._salesSlipInputAcs.SalesDetailList[0].InqRowNumber > 0
                && this._salesSlipInputAcs.SalesDetailList[0].AutoAnswerDivSCM == 2)
                // UPD 2014/06/18 SCM仕掛一覧№10641 ｼｽﾃﾑﾃｽﾄ障害№95,96対応 ---------------------------<<<<<
            //---ADD 2011/11/22 -----------------------------------<<<<<
            {
                // メッセージを表示
                TMsgDisp.Show(
                    null,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    "指定した伝票は、BLﾊﾟｰﾂｵｰﾀﾞｰの在庫確認で" + "\r\n" + "\r\n" +
                    "作成された伝票なので、修正できません。",
                    -1,
                    MessageBoxButtons.OK);

                return true;
            }

            return false;
        }
        // --- ADD 2011/11/12----------<<<<<
        //----- DEL 2014/08/28 陳艶丹 Redmine#43336 -----<<<<<*/

        //----- ADD　2018/09/04 譚洪　履歴自動表示の対応------->>>>>
        /// <summary>
        /// 履歴検索ボタンで得意先電子元帳の起動
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <remarks>
        /// <br>Note       : 履歴自動表示機能追加対応</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : 2018/09/04</br>
        /// </remarks>
        public void CustomerProcess(int salesRowNo)
        {
            string pgID = ctAssemblyName;
            // --- UPD 2018/10/01 T.Yamamoto ---------------------------->>>>>
            //string secCd = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd;
            //string secNm = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
            string secCd = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd.TrimEnd();
            // 売上伝票の拠点名称が無い場合、再取得する
            string secNm = string.Empty;
            if (string.IsNullOrEmpty(this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm))
            {
                SecInfoSet secInfoSet = this._salesSlipInputInitDataAcs.GetSecInfo(this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecCd.TrimEnd());
                if (secInfoSet != null)
                {
                    secNm = secInfoSet.SectionGuideNm;
                }
            }
            else
            {
                secNm = this._salesSlipInputAcs.SalesSlip.ResultsAddUpSecNm;
            }
            // --- UPD 2018/10/01 T.Yamamoto ----------------------------<<<<<
            string customerCode = this._salesSlipInputAcs.SalesSlip.CustomerCode.ToString();
            string inputMonth = this._salesInputConstructionAcs.SalesInputConstruction.InputMonthValue.ToString();
            string goodsNo = string.Empty;
            SalesInputDataSet.SalesDetailRow row = this._salesSlipInputAcs.GetSalesDetailRow(salesRowNo);
            goodsNo = row.GoodsNo;
            // 得意先電子元帳の起動
            Process p = Process.Start("PMKAU04000U.EXE", this._parameter + " " + pgID + " " + secCd + ":" + secNm + ":" + customerCode + ":" + inputMonth + ":" + goodsNo);

        }
        //----- ADD　2018/09/04 譚洪　履歴自動表示の対応-------<<<<<

        //--- ADD 2012/05/31 No.282　---------->>>>>
        #region ESCボタンクリック2
        /// <summary>
        /// ESCボタンクリック2（発注キャンセル用）
        /// </summary>
        public void uButtonEscClick2(out bool escFlg)
        {
            escFlg = false;

            DialogResult dResult = TMsgDisp.Show(
                new Form(),
                emErrorLevel.ERR_LEVEL_QUESTION,
                "",
                "発注を解除してよろしいですか？",
                0,
                MessageBoxButtons.YesNo,
                MessageBoxDefaultButton.Button1);

            if (dResult == DialogResult.Yes)
            {
                escFlg = true;
                // 明細データテーブル復活
                this._salesSlipInputAcs.RevivalDataTable();

                // 売上明細データテーブル復活 
                for (int rowIndexParm = 0; rowIndexParm < this._salesDetailDataTable.Rows.Count; rowIndexParm++)
                {
                    int salesRowNo = this._salesDetailDataTable[rowIndexParm].SalesRowNo;

                    // 明細粗利率設定処理
                    this._salesSlipInputAcs.SettingSalesDetailRowGrossProfitRate(salesRowNo);

                    // 一式情報設定処理
                    this._salesSlipInputAcs.ConstructionCompleteInfo(salesRowNo);
                }

            }
        }
        #endregion

        #region 発注キャンセル退避処理
        /// <summary>
        /// 発注キャンセル退避処理
        /// </summary>
        public void SaveOrderInfo(out bool escFlg)
        {
            escFlg = false;

            // 明細データテーブル退避処理
            this._salesSlipInputAcs.SaveDataTable();
 
            escFlg = true;
        }

        #endregion
        //--- ADD 2012/05/31 No.282　----------<<<<<

        // --- ADD K2013/09/11 Y.Wakita ---------->>>>>
        #region フタバ個別対応　フタバテキスト変換抽出済みの判断
        /// <summary>
        /// フタバ個別対応　フタバテキスト変換抽出済みの判断
        /// </summary>
        /// <param name="salesSlip">売上データオブジェクト</param>
        /// <returns>判断結果</returns>
        /// <remarks>
        /// <br>Note       : フタバテキスト変換で抽出された伝票の判断処理</br>
        /// <br>Programmer : 脇田 靖之</br>
        /// <br>Date       : K2013/09/11</br>
        /// <br>Update Note: </br>
        /// </remarks>
        private bool isFtSalesMoveOut(SalesSlip salesSlip)
        {
            try
            {
                // チェック対象の判定
                // 受注ステータスは「30：売上」以外の伝票はチェック対象外
                // 赤伝区分が「2:元黒」の伝票はチェック対象外
                if (salesSlip.AcptAnOdrStatus == (int)SalesSlipInputAcs.AcptAnOdrStatusState.Sales)
                {
                    // 受注ステータスが「30：売上」の場合
                    if (salesSlip.DebitNoteDiv == 3)
                    {
                        // 赤伝区分が「2:元黒」の場合
                        return false;
                    }
                }
                else
                {
                    // 受注ステータスが「30：売上」以外の場合
                    return false;
                }

                int ftbStatus = (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND;

                // インスタンス生成
                object obj = this.LoadAssembly("PMKHN01712AC", "Broadleaf.Application.Controller.FuTaBaSalesHistoryAcs");

                // メソッド取得
                System.Reflection.MethodInfo myMethod = obj.GetType().GetMethod("SearchSalesMoveExistenceCheck", new Type[] { typeof(string), typeof(int), typeof(string) });

                // 処理実行
                object ret = myMethod.Invoke(obj, new object[] { _enterpriseCode, salesSlip.AcptAnOdrStatus, salesSlip.SalesSlipNum });

                ftbStatus = (int)ret;

                string message = string.Empty;
                switch (ftbStatus)
                {
                    case (int)ConstantManagement.DB_Status.ctDB_NORMAL:
                        message = "テキスト変換済みのデータの為、更新できません。";
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND:
                        break;
                    case (int)ConstantManagement.DB_Status.ctDB_ERROR:
                        message = "フタバテキスト変換抽出済判断処理でエラーが発生しました。";
                        break;
                }

                if (message != string.Empty)
                {
                    // メッセージを表示
                    TMsgDisp.Show(
                        null,
                        emErrorLevel.ERR_LEVEL_INFO,
                        "todo",
                        message,
                        -1,
                        MessageBoxButtons.OK);

                    return true;
                }
            }
            catch (Exception ex)
            {
                // メッセージを表示
                TMsgDisp.Show(
                    null,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    ex.Message,
                    -1,
                    MessageBoxButtons.OK);
            }
            return false;
        }

        /// <summary>
        /// アセンブリインスタンス化
        /// </summary>
        /// <param name="asmname">アセンブリ名称</param>
        /// <param name="classname">クラス名称</param>
        /// <returns>インスタンス化されたクラス</returns>
        /// <remarks>
        /// <br>Note       : 指定されたアセンブリ及びクラス名より、クラスをインスタンス化します。</br>
        /// <br>Programmer : 脇田 靖之</br>
        /// <br>Date       : K2013/09/11</br>
        /// </remarks>
        private object LoadAssembly(string asmname, string classname)
        {
            object obj = null;
            try
            {
                System.Reflection.Assembly asm = System.Reflection.Assembly.Load(asmname);
                Type objType = asm.GetType(classname);
                if (objType != null)
                {
                    obj = Activator.CreateInstance(objType);
                }
            }
            catch (Exception ex)
            {
                // メッセージを表示
                TMsgDisp.Show(
                    null,
                    emErrorLevel.ERR_LEVEL_INFO,
                    "todo",
                    ex.Message,
                    -1,
                    MessageBoxButtons.OK);
            }
            return obj;
        }
        #endregion
        // --- ADD K2013/09/11 Y.Wakita ---------->>>>>

        // --- ADD K2015/04/01 高騁 森川部品個別依頼---------->>>>>
        #region ●全拠点在庫情報一覧
        /// <summary>
        /// 全拠点在庫情報一覧
        /// </summary>
        /// <param name="titleCnt">ウィンドウNo.</param>
        /// <param name="makerCd">企業コード</param>
        /// <param name="goodsNo">品番</param>
        /// <param name="goodsName">品名</param>
        /// <param name="isButtonPressed">全拠点在庫ボタン選択フラグ</param>
        /// <param name="isClose">全拠点在庫閉じるフラグ</param>
        /// <param name="message">エラーメッセージ</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note       : 全拠点在庫情報一覧。</br>
        /// <br>Programmer : 高騁</br>
        /// <br>Date       : K2015/04/01</br>
        /// </remarks>
        public int ReadAllSecStockInfo(int makerCd, string goodsNo, string goodsName, bool isButtonPressed, bool isClose, out string message)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_EOF;
            message = string.Empty;
            try
            {
                if (_objMoriKawa == null && isButtonPressed || isButtonPressed && !isClose && !((Form)_objMoriKawa).Visible)
                {
                    this._objMoriKawa = this.LoadAssemblyMoriKawa("PMZAI02000UC", "Broadleaf.Windows.Forms.PMZAI02000UCA");
                    if (_objMoriKawa != null)
                    {
                        this._myMethodMoriKawaOpen = this._objMoriKawa.GetType().GetMethod("ShowGuide", new Type[] { typeof(IWin32Window), typeof(int), typeof(string), typeof(string) });
                        this._myMethodMoriKawaOpen.Invoke(_objMoriKawa, new object[] { new WindowWrapper(System.Diagnostics.Process.GetCurrentProcess().MainWindowHandle), makerCd, goodsNo, goodsName });
                    }
                }
                else if (isButtonPressed && isClose && ((Form)_objMoriKawa).Visible)
                {
                    ((Form)_objMoriKawa).Close();
                }

                else
                {
                    this._myMethodMoriKawaSearch = this._objMoriKawa.GetType().GetMethod("Search", new Type[] { typeof(int), typeof(string), typeof(string) });
                    this._myMethodMoriKawaSearch.Invoke(_objMoriKawa, new object[] { makerCd, goodsNo, goodsName });
                }
                status = 0;
            }
            catch (Exception ex)
            {
                message = ex.Message;
                status = -1;
            }
            return status;
        }

        /// <summary>
        /// 森川個別オプション判定
        /// </summary>
        /// <param name="optPermitForMoriKawa">オプションフラグ</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note       : 森川個別オプション判定。</br>
        /// <br>Programmer : 高騁</br>
        /// <br>Date       : K2015/04/01</br>
        /// </remarks>
        public int OptPermitForMoriKawa(out bool optPermitForMoriKawa)
        {
            int status = (int)ConstantManagement.DB_Status.ctDB_EOF;
            optPermitForMoriKawa = false;
            try
            {
                //森川個別オプション判定              
                if (this._salesSlipInputInitDataAcs.Opt_MoriKawa == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    optPermitForMoriKawa = true;
                }
                else
                {
                    optPermitForMoriKawa = false;
                }
                status = 0;
            }
            catch (Exception)
            {
                status = -1;
            }
            return status;
        }

        #endregion
        
        /// <summary>
        /// アセンブリインスタンス化
        /// </summary>
        /// <param name="asmname">アセンブリ名称</param>
        /// <param name="classname">クラス名称</param>
        /// <returns>インスタンス化されたクラス</returns>
        /// <remarks>
        /// <br>Note       : 指定されたアセンブリ及びクラス名より、クラスをインスタンス化します。</br>
        /// <br>Programmer : 高騁</br>
        /// <br>Date       : K2015/04/01</br>
        /// </remarks>
        public object LoadAssemblyMoriKawa(string asmname, string classname)
        {
            object obj = null;
            try
            {
                System.Reflection.Assembly asm = System.Reflection.Assembly.Load(asmname);
                Type objType = asm.GetType(classname);
                if (objType != null)
                {
                    obj = Activator.CreateInstance(objType);
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString();
            }
            return obj;
        }
        // 全拠点在庫情報一覧オーナークラス
        private class WindowWrapper : IWin32Window
        {
            private IntPtr _hwnd;
            public WindowWrapper(IntPtr handle)
            {
                _hwnd = handle;
            }
            public IntPtr Handle
            {
                get { return _hwnd; }
            }            
        }
        // --- ADD K2015/04/01 高騁 森川部品個別依頼----------<<<<<

       // --- ADD K2016/12/30 譚洪 水野商工㈱　第二売価 ---------->>>>>
        /// <summary>
        /// アセンブリインスタンス化
        /// </summary>
        /// <param name="asmname">アセンブリ名称</param>
        /// <param name="classname">クラス名称</param>
        /// <returns>インスタンス化されたクラス</returns>
        /// <remarks>
        /// <br>Note       : 指定されたアセンブリ及びクラス名より、クラスをインスタンス化します。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : K2016/12/30</br>
        /// </remarks>
        private object LoadAssembly(string asmname, string classname, out string errMessage)
        {
            object obj = null;
            errMessage = string.Empty;

            try
            {
                System.Reflection.Assembly asm = System.Reflection.Assembly.Load(asmname);
                Type objType = asm.GetType(classname);
                if (objType != null)
                {
                    obj = Activator.CreateInstance(objType);
                }
            }
            catch (Exception ex)
            {
                errMessage = ex.Message;
            }
            return obj;
        }
        // --- ADD K2016/12/30 譚洪 水野商工㈱　第二売価 ----------<<<<<


        // --- ADD 譚洪 K2016/11/01 外部PG売価算出対応_㈱コーエイ --- >>>>>
        #region 外部PG売価算出対応_㈱コーエイ
        /// <summary>
        /// デシリアライズ処理
        /// </summary>
        /// <remarks>
        /// <br>Note       : デシリアライズ処理を行う。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : K2016/11/01</br>
        /// </remarks>
        public void Deserialize()
        {
            if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, KOEI_XML_FILE_NAME)))
            {
                try
                {
                    this.MethodInfoObj = UserSettingController.DeserializeUserSetting<KoeiMethodInfo>(Path.Combine(ConstantManagement_ClientDirectory.UISettings, KOEI_XML_FILE_NAME));
                }
                catch
                {
                    this.MethodInfoObj = null;
                }
            }
        }

        /// <summary>
        /// ㈱コーエイオプション判定
        /// </summary>
        /// <param name="optPermitForMeiGo">オプションフラグ</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note       : ㈱コーエイオプション判定。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : K2016/11/01</br>
        /// </remarks>
        public int OptPermitForKoei(out bool optPermitForKoei)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            optPermitForKoei = false;
            try
            {
                //㈱コーエイオプション判定
                if (this._salesSlipInputInitDataAcs.Opt_PermitForKoei == (int)SalesSlipInputInitDataAcs.Option.ON)
                {
                    optPermitForKoei = true;

                    // 設定ファイルから外部PG情報の取得
                    this.Deserialize();

                    if (MethodInfoObj != null)
                    {
                        this.AssemblyName = MethodInfoObj.AssemblyName;
                        this.ClassName = MethodInfoObj.ClassName;
                        this.MethodName = MethodInfoObj.MethodName;
                    }
                }
                else
                {
                    optPermitForKoei = false;
                }
                status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
            }
            catch (Exception)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;
            }
            return status;
        }

        /// <summary>
        /// 売価算出
        /// </summary>
        /// <param name="salesRowNo">行番号</param>
        /// <param name="salesUnPrice">売価</param>
        /// <returns>ステータス</returns>
        /// <remarks>
        /// <br>Note       : 売価算出。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : K2016/11/01</br>
        /// </remarks>
        public int SalesUnPrcCalc(int salesRowNo, out string salesUnPrice)
        {
            int status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;

            // 算出売単価
            salesUnPrice = string.Empty;
            // 請求拠点コード
            long claimSectionCode = 0L;
            // 得意先コード
            long customerCode = 0L;
            // 得意先掛率グループ（純正）
            long goodsKindForPure = 0L;
            // 得意先掛率グループ（優良）
            long goodsKindForGood = 0L;
            // メーカーコード
            long goodsMakerCd = 0L;
            // BLコード
            long blGoodsCode = 0L;
            // 分析コード５（端数処理区分）
            long custAnalysCode5 = 0L;
            // 分析コード６(端数除外区分)
            long custAnalysCode6 = 0L;
            // 標準価格
            long listPrice = 0L;
            // 原単価
            long salesUnitCost = 0L;

            try
            {
                #region ●得意先マスタの取得 PMKHN09012A(キャッシュなし)
                CustomerInfo customerInfo = null;

                status = this._customerInfoAcs.ReadDBData(ConstantManagement.LogicalMode.GetData0, LoginInfoAcquisition.EnterpriseCode, this._salesSlipInputAcs.SalesSlip.CustomerCode, true, false, out customerInfo);

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    // 得意先情報を再読込し、以下の項目を再セットする。
                    claimSectionCode = long.Parse(customerInfo.ClaimSectionCode);
                    customerCode = long.Parse(this._salesSlipInputAcs.SalesSlip.CustomerCode.ToString());
                    custAnalysCode5 = long.Parse(customerInfo.CustAnalysCode5.ToString());
                    custAnalysCode6 = long.Parse(customerInfo.CustAnalysCode6.ToString());
                }
                else
                {
                    // メッセージを表示
                    this.MessageShow(emErrorLevel.ERR_LEVEL_STOPDISP, MSG_CALCERROR);

                    return status;
                }
                #endregion

                #region ●得意先掛率ｸﾞﾙｰﾌﾟの全件取得 PMKHN09172A(キャッシュなし)
                CustRateGroupAcs custRateGroupAcs = new CustRateGroupAcs();
                ArrayList allCustRateGroupArrayList = new ArrayList();
                status = custRateGroupAcs.Search(out allCustRateGroupArrayList, LoginInfoAcquisition.EnterpriseCode, this._salesSlipInputAcs.SalesSlip.CustomerCode, ConstantManagement.LogicalMode.GetData0);

                if (status == (int)ConstantManagement.DB_Status.ctDB_NORMAL)
                {
                    if ((allCustRateGroupArrayList != null) && (allCustRateGroupArrayList.Count != 0))
                    {
                        List<CustRateGroup> allCustRateGroupList = new List<CustRateGroup>((CustRateGroup[])allCustRateGroupArrayList.ToArray(typeof(CustRateGroup)));

                        // 純正 && メーカーコード != 0
                        CustRateGroup custRateGroup = allCustRateGroupList.Find(
                            delegate(CustRateGroup custRate)
                            {
                                if ((custRate.PureCode == 0) && (custRate.GoodsMakerCd != 0))
                                {
                                    return true;
                                }
                                else
                                {
                                    return false;
                                }
                            }
                        );

                        if (custRateGroup == null)
                        {
                            // 純正 && メーカーコード == 0
                            custRateGroup = allCustRateGroupList.Find(
                                delegate(CustRateGroup custRate)
                                {
                                    if ((custRate.PureCode == 0) && (custRate.GoodsMakerCd == 0))
                                    {
                                        return true;
                                    }
                                    else
                                    {
                                        return false;
                                    }
                                }
                            );

                            if (custRateGroup == null || custRateGroup.CustRateGrpCode == -1)
                            {
                                goodsKindForPure = 0L;
                            }
                            else
                            {
                                goodsKindForPure = long.Parse(custRateGroup.CustRateGrpCode.ToString());
                            }
                        }
                        else
                        {
                            goodsKindForPure = -1L;
                        }

                        // 優良 && メーカーコード != 0
                        custRateGroup = allCustRateGroupList.Find(
                            delegate(CustRateGroup custRate)
                            {
                                if (custRate.PureCode == 1)
                                {
                                    return true;
                                }
                                else
                                {
                                    return false;
                                }
                            }
                        );

                        if (custRateGroup == null || custRateGroup.CustRateGrpCode == -1)
                        {
                            goodsKindForGood = 0L;
                        }
                        else
                        {
                            goodsKindForGood = long.Parse(custRateGroup.CustRateGrpCode.ToString());
                        }
                    }
                }
                else if (status == (int)ConstantManagement.DB_Status.ctDB_NOT_FOUND)
                {
                    goodsKindForPure = 0L;
                    goodsKindForGood = 0L;
                    status = (int)ConstantManagement.DB_Status.ctDB_NORMAL;
                }
                else
                {
                    // メッセージを表示
                    this.MessageShow(emErrorLevel.ERR_LEVEL_STOPDISP, MSG_CALCERROR);

                    return status;
                }
                #endregion

                goodsMakerCd = long.Parse(this._salesDetailDataTable[salesRowNo - 1].GoodsMakerCd.ToString());
                blGoodsCode = long.Parse(this._salesDetailDataTable[salesRowNo - 1].BLGoodsCode.ToString());
                listPrice = long.Parse(((int)this._salesDetailDataTable[salesRowNo - 1].ListPriceDisplay).ToString());
                salesUnitCost = long.Parse(((int)this._salesDetailDataTable[salesRowNo - 1].SalesUnitCost).ToString());

                // 外部PG情報の取得に成功した場合
                if (MethodInfoObj != null)
                {
                    // パラメータのセット
                    List<long> list = new List<long>();
                    // 請求拠点コード
                    list.Add(claimSectionCode);
                    // 得意先コード
                    list.Add(customerCode);
                    // 掛率Ｇ純正
                    list.Add(goodsKindForPure);
                    // 掛率Ｇ優良
                    list.Add(goodsKindForGood);
                    // メーカー
                    list.Add(goodsMakerCd);
                    // ＢＬコード
                    list.Add(blGoodsCode);
                    // 分析コード５（端数処理区分）
                    list.Add(custAnalysCode5);
                    // 分析コード６（端数除外区分）
                    list.Add(custAnalysCode6);
                    // 標準価格
                    list.Add(listPrice);
                    // 原単価
                    list.Add(salesUnitCost);

                    object[] paramValue = new object[PARAMETER_COUNT];
                    for (int i = 0; i < list.Count; i++)
                    {
                        if (i < PARAMETER_COUNT)
                        {
                            paramValue[i] = list[i];
                        }
                    }

                    // 売価算出処理実行
                    // 外部のVB6のPGを動的にコール
                    string progId = string.Format("{0}.{1}", AssemblyName, ClassName); // 「ExtCalcSalesPrice.Class1」の様
                    Type classType = Type.GetTypeFromProgID(progId);
                    Object mainClass = Activator.CreateInstance(classType);
                    object retVal = classType.InvokeMember(MethodName, System.Reflection.BindingFlags.InvokeMethod, null, mainClass, paramValue);

                    // 処理結果
                    long retSalesPrice = 0;
                    if (retVal != null)
                    {
                        long.TryParse(retVal.ToString(), out retSalesPrice);
                    }

                    if (retSalesPrice == 0)
                    {
                        status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;

                        // メッセージを表示
                        this.MessageShow(emErrorLevel.ERR_LEVEL_INFO, MSG_NOCALC);

                        return status;
                    }
                    else if (retSalesPrice == -1)
                    {
                        status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;

                        // メッセージを表示
                        this.MessageShow(emErrorLevel.ERR_LEVEL_STOPDISP, MSG_CALCERROR);

                        return status;
                    }
                    else if (retSalesPrice > 0)
                    {
                        salesUnPrice = retSalesPrice.ToString();
                        status = (int)ConstantManagement.MethodResult.ctFNC_NORMAL;
                    }
                }
                else
                {
                    status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;

                    // メッセージを表示
                    this.MessageShow(emErrorLevel.ERR_LEVEL_STOPDISP, MSG_CALCERROR);

                    return status;
                }
            }
            catch (Exception ex)
            {
                status = (int)ConstantManagement.MethodResult.ctFNC_ERROR;

                // メッセージを表示
                this.MessageShow(emErrorLevel.ERR_LEVEL_STOPDISP, MSG_CALCERROR);
            }

            return status;
        }

        /// <summary>
        /// エラーメッセージ処理
        /// </summary>
        /// <param name="errorLevel">エラーレベル</param>
        /// <param name="message">エラーメッセージ</param>
        /// <remarks>
        /// <br>Note       : エラーメッセージ処理です。</br>
        /// <br>Programmer : 譚洪</br>
        /// <br>Date       : K2016/11/01</br>
        /// </remarks>
        private void MessageShow(emErrorLevel errorLevel, string message)
        {
            // メッセージを表示
            TMsgDisp.Show(
                _owner,
                errorLevel,
                string.Empty,
                message,
                -1,
                MessageBoxButtons.OK);
        }
        #endregion
        // --- ADD 譚洪 K2016/11/01 外部PG売価算出対応_㈱コーエイ --- <<<<<

        // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 ----->>>>>
        /// <summary>
        /// XML情報取得
        /// </summary>
        /// <remarks>
        /// <br>Note         : XML情報取得処理を行う</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : K2020/12/29</br>
        /// </remarks>
        private void GetXmlInfo()
        {
            try
            {
                threadTimeoutInfo = new ThreadTimeoutSet();

                if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, xmlFileName)))
                {
                    // XMLからリトライ回数とタイムアウト時間を取得する
                    threadTimeoutInfo = UserSettingController.DeserializeUserSetting<ThreadTimeoutSet>(Path.Combine(ConstantManagement_ClientDirectory.UISettings, xmlFileName));
                }
                else
                {
                    // タイムアウト-デフォルト：360秒
                    threadTimeoutInfo.TimeoutSec = timeoutSec;
                    //---ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ---->>>>>
                    // スレッドリトライ回数-デフォルト：2
                    threadTimeoutInfo.ThreadRetryCnt = ThreadRetryCntDF;
                    //---ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----<<<<<
                }
            }
            catch
            {
                if (threadTimeoutInfo == null) threadTimeoutInfo = new ThreadTimeoutSet();
                // タイムアウト-デフォルト：360秒
                threadTimeoutInfo.TimeoutSec = timeoutSec;
                //---ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ---->>>>>
                // スレッドリトライ回数-デフォルト：2
                threadTimeoutInfo.ThreadRetryCnt = ThreadRetryCntDF;
                //---ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----<<<<<
            }
        }
        // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 -----<<<<<
        // --- ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時） ----->>>>>
        /// <summary>
        /// 原価チェックXMLファイル取得
        /// </summary>
        /// <remarks>
        /// <br>Note         : 原価チェックXMLファイル取得処理を行う</br>
        /// <br>Programmer   : 譚洪</br>
        /// <br>Date         : K2021/07/27</br>
        /// </remarks>
        private void GetCostCheckXmlInfo()
        {
            try
            {
                CostCheckXmlInfo costCheckXmlInfo = new CostCheckXmlInfo();
                if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, XmlCostCheck)))
                {
                    // XMLから原価チェック区分を取得する
                    costCheckXmlInfo = UserSettingController.DeserializeUserSetting<CostCheckXmlInfo>(Path.Combine(ConstantManagement_ClientDirectory.UISettings, XmlCostCheck));
                    costCheckFlg = costCheckXmlInfo.CostCheckFlg;
                }
                else
                {
                    costCheckFlg = (int)CostCheckFlgType.noCheck;
                }
            }
            catch
            {
                costCheckFlg = (int)CostCheckFlgType.noCheck;
            }
        }
        // --- ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時） -----<<<<<        
        
        // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応--->>>>>
        /// <summary>
        /// 原単価チェックXMLファイル取得
        /// </summary>
        /// <remarks>
        /// <br>Note         : 原単価チェックXMLファイル取得処理を行う</br>
        /// <br>Programmer   : 呉元嘯</br>
        /// <br>Date         : 2021/09/10</br>
        /// </remarks>
        private void GetSaveUnitCostCheckXmlInfo()
        {
            try
            {
                SaveUnitCostCheckXmlInfo saveUnitCostCheckXmlInfo = new SaveUnitCostCheckXmlInfo();
                if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, XmlSaveUnitCostCheck)))
                {
                    // XMLから原価チェック区分を取得する
                    saveUnitCostCheckXmlInfo = UserSettingController.DeserializeUserSetting<SaveUnitCostCheckXmlInfo>(Path.Combine(ConstantManagement_ClientDirectory.UISettings, XmlSaveUnitCostCheck));
                    saveUnitCostCheckFlg = saveUnitCostCheckXmlInfo.SaveUnitCostCheckFlg;
                }
                else
                {
                    saveUnitCostCheckFlg = (int)SaveUnitCostCheckFlgType.noCheck;
                }
            }
            catch
            {
                saveUnitCostCheckFlg = (int)SaveUnitCostCheckFlgType.noCheck;
            }
        }
        // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応---<<<<<

        // --- ADD 2022/01/05 陳艶丹 PMKOBETSU-4148 メーカー名と仕入先名チェック追加 --->>>>>
        /// <summary>
        /// メーカー名と仕入先名チェックXMLファイル取得
        /// </summary>
        /// <remarks>
        /// <br>Note         : メーカー名と仕入先名チェックXMLファイル取得処理を行う</br>
        /// <br>Programmer   : 陳艶丹</br>
        /// <br>Date         : 2022/01/05</br>
        /// </remarks>
        private void GetSaveMakerSupplierCheckXmlInfo()
        {
            try
            {
                SaveMakerSupplierCheckXmlInfo saveMakerSupplierCheckXmlInfo = new SaveMakerSupplierCheckXmlInfo();
                if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, XMLSAVEMAKERSUPPLIERCHECK)))
                {
                    // XMLからチェック区分を取得する
                    saveMakerSupplierCheckXmlInfo = UserSettingController.DeserializeUserSetting<SaveMakerSupplierCheckXmlInfo>(Path.Combine(ConstantManagement_ClientDirectory.UISettings, XMLSAVEMAKERSUPPLIERCHECK));
                    saveMakerSupplierCheckFlg = saveMakerSupplierCheckXmlInfo.SaveMakerSupplierCheckFlg;
                }
                else
                {
                    saveMakerSupplierCheckFlg = (int)CheckFlgType.noCheck;
                }
            }
            catch
            {
                saveMakerSupplierCheckFlg = (int)CheckFlgType.noCheck;
            }
        }
        // --- ADD 2022/01/05 陳艶丹 PMKOBETSU-4148 メーカー名と仕入先名チェック追加 ---<<<<<

        //--- ADD 田村顕成 2022/10/05 インボイス残対応 ----->>>>>
        /// <summary>
        /// 返品･赤伝制御設定ファイル取得
        /// </summary>
        /// <remarks>
        /// <br>Note         : 返品･赤伝制御設定ファイル取得</br>
        /// <br>Programmer   : 田村顕成</br>
        /// <br>Date         : 2022/10/05</br>
        /// </remarks>
        private void GetReturnRedSettings()
        {
            try
            {
                ReturnRedControlSetting returnRedSetting = new ReturnRedControlSetting();
                if (UserSettingController.ExistUserSetting(Path.Combine(ConstantManagement_ClientDirectory.UISettings, XML_RETURNREDSETTINGS)))
                {
                    // 返品･赤伝制御設定を取得する
                    returnRedSetting = UserSettingController.DeserializeUserSetting<ReturnRedControlSetting>(Path.Combine(ConstantManagement_ClientDirectory.UISettings, XML_RETURNREDSETTINGS));

                    // 伝票備考1設定
                    this._returnRedNote1Mode = returnRedSetting.ReturnRedNote1Mode;
                    this._returnRedNote1 = returnRedSetting.ReturnRedNote1;
                    // 伝票備考2設定
                    this._returnRedNote2Mode = returnRedSetting.ReturnRedNote2Mode;
                    this._returnRedNote2 = returnRedSetting.ReturnRedNote2;
                    // 伝票備考3設定
                    this._returnRedNote3Mode = returnRedSetting.ReturnRedNote3Mode;
                    this._returnRedNote3 = returnRedSetting.ReturnRedNote3;
                    // 備考空欄チェック設定
                    this._returnRedBlankCheckMode = returnRedSetting.ReturnRedBlankCheckMode;
                }
                else
                {
                    this._returnRedNote1Mode = ReturnRedNote_ORIGINAL;
                    this._returnRedNote2Mode = ReturnRedNote_ORIGINAL;
                    this._returnRedNote3Mode = ReturnRedNote_ORIGINAL;
                    this._returnRedBlankCheckMode = ReturnRedBlankCheck_OFF;
                }
            }
            catch
            {
                this._returnRedNote1Mode = ReturnRedNote_ORIGINAL;
                this._returnRedNote2Mode = ReturnRedNote_ORIGINAL;
                this._returnRedNote3Mode = ReturnRedNote_ORIGINAL;
                this._returnRedBlankCheckMode = ReturnRedBlankCheck_OFF;
            }
        }
        //--- ADD 田村顕成 2022/10/05 インボイス残対応 -----<<<<<
    }

    // --- ADD 譚洪 K2016/11/01 外部PG売価算出対応_㈱コーエイ --- >>>>>
    #region 外部PG情報クラス
    /// <summary>
    /// 外部PG情報クラス
    /// </summary>
    /// <remarks>
    /// <br>Note       : 外部PG情報クラスです。</br>
    /// <br>Programmer : 譚洪</br>
    /// <br>Date       : K2016/11/01</br>
    /// </remarks>
    public class KoeiMethodInfo
    {
        /// <summary>アセンブリファイルパス </summary>
        private string AssemblyNm;
        /// <summary>クラス名称 </summary>
        private string ClsNm;
        /// <summary>メソッド名称 </summary>
        private string MethodNm;

        /// <summary>
        /// アセンブリファイルパス
        /// </summary>
        public string AssemblyName
        {
            get { return AssemblyNm; }
            set { AssemblyNm = value; }
        }

        /// <summary>
        /// クラス名称
        /// </summary>
        public string ClassName
        {
            get { return ClsNm; }
            set { ClsNm = value; }
        }

        /// <summary>
        /// メソッド名称
        /// </summary>
        public string MethodName
        {
            get { return MethodNm; }
            set { MethodNm = value; }
        }
    }
    #endregion
    // --- ADD 譚洪 K2016/11/01 外部PG売価算出対応_㈱コーエイ --- <<<<<

    // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 ----->>>>>
    # region
    /// <summary>
    /// スレッドタイムアウト設定クラス
    /// </summary>
    /// <remarks>
    /// <br>Note       : スレッドタイムアウト設定クラス</br>
    /// <br>Programmer : 陳艶丹</br>
    /// <br>Date       : K2020/12/29</br>
    /// <br></br>
    /// </remarks>
    [Serializable]
    public class ThreadTimeoutSet
    {
        // スレッドタイムアウト
        private int _timeoutSec;
        //---ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ---->>>>>
        // スレッドリトライ回数
        private int _threadRetryCnt;
        //---ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----<<<<<

        /// <summary>
        /// リトライ設定クラス
        /// </summary>
        public ThreadTimeoutSet()
        {

        }

        /// <summary>タイムアウト時間</summary>
        public Int32 TimeoutSec
        {
            get { return this._timeoutSec; }
            set { this._timeoutSec = value; }
        }
        //---ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ---->>>>>
        /// <summary>スレッドリトライ回数</summary>
        public Int32 ThreadRetryCnt
        {
            get { return this._threadRetryCnt; }
            set { this._threadRetryCnt = value; }
        }
        //---ADD 2021/07/16 陳艶丹 PMKOBETSU-4154 売上伝票印刷エラー対応 ----<<<<<
    }
    # endregion
    // --- ADD K2020/12/29 陳艶丹 PMKOBETSU-3786 納品書印刷スレッド順次実行対応 -----<<<<<

    // --- ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）----->>>>>
    # region
    /// <summary>
    /// 原価チェック設定クラス
    /// </summary>
    /// <remarks>
    /// <br>Note       : 原価チェック設定クラス</br>
    /// <br>Programmer : 陳艶丹</br>
    /// <br>Date       : K2020/12/29</br>
    /// <br></br>
    /// </remarks>
    [Serializable]
    public class CostCheckXmlInfo
    {
        // 原価チェック区分
        private int _costCheckFlg;

        /// <summary>
        /// 原価チェック設定クラス
        /// </summary>
        public CostCheckXmlInfo()
        {

        }

        /// <summary>原価チェック区分</summary>
        public Int32 CostCheckFlg
        {
            get { return this._costCheckFlg; }
            set { this._costCheckFlg = value; }
        }
    }
    # endregion
    // --- ADD 2021/07/27 譚洪 PMKOBETSU-4148 売上データ原価0円障害（登録時）-----<<<<<

    // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応--->>>>>
    # region
    /// <summary>
    /// 原単価チェック設定クラス
    /// </summary>
    /// <remarks>
    /// <br>Note       : 原単価チェック設定クラス</br>
    /// <br>Programmer : 呉元嘯</br>
    /// <br>Date       : 2021/09/10</br>
    /// <br></br>
    /// </remarks>
    [Serializable]
    public class SaveUnitCostCheckXmlInfo
    {
        // 原単価チェック区分
        private int _saveUnitCostCheckFlg;

        /// <summary>
        /// 原単価チェック設定クラス
        /// </summary>
        public SaveUnitCostCheckXmlInfo()
        {

        }

        /// <summary>原単価チェック区分</summary>
        public Int32 SaveUnitCostCheckFlg
        {
            get { return this._saveUnitCostCheckFlg; }
            set { this._saveUnitCostCheckFlg = value; }
        }
    }
    # endregion
    // --- ADD 2021/09/10 呉元嘯 PMKOBETSU-4172 原単価チェックと税率ログの制御ファイルの対応---<<<<<

    // --- ADD 2022/01/05 陳艶丹 PMKOBETSU-4148 メーカー名と仕入先名チェック追加 --->>>>>
    # region
    /// <summary>
    /// メーカー名と仕入先名チェック設定クラス
    /// </summary>
    /// <remarks>
    /// <br>Note       : メーカー名と仕入先名チェック設定クラス</br>
    /// <br>Programmer : 呉元嘯</br>
    /// <br>Date       : 2022/01/05</br>
    /// <br></br>
    /// </remarks>
    [Serializable]
    public class SaveMakerSupplierCheckXmlInfo
    {
        // メーカー名と仕入先名チェック区分
        private int _saveMakerSupplierCheckFlg;

        /// <summary>
        /// メーカー名と仕入先名チェック設定クラス
        /// </summary>
        public SaveMakerSupplierCheckXmlInfo()
        {

        }

        /// <summary>メーカー名と仕入先名チェック区分</summary>
        public Int32 SaveMakerSupplierCheckFlg
        {
            get { return this._saveMakerSupplierCheckFlg; }
            set { this._saveMakerSupplierCheckFlg = value; }
        }
    }
    # endregion
    // --- ADD 2022/01/05 陳艶丹 PMKOBETSU-4148 メーカー名と仕入先名チェック追加 ---<<<<<

    //--- ADD 田村顕成 2022/10/05 インボイス残対応 ----->>>>>
    # region
    /// <summary>
    /// 返品・赤伝制御設定情報
    /// </summary>
    /// <remarks>
    /// <br>Note       : 返品・赤伝制御設定情報</br>
    /// <br>Programmer : 田村顕成</br>
    /// <br>Date       : 2022/10/05</br>
    /// <br></br>
    /// </remarks>
    [Serializable]
    public class ReturnRedControlSetting
    {
        /// <summary>返品・赤伝制御設定情報</summary>
        public ReturnRedControlSetting()
        {
            //処理無し
        }

        /// <summary>返品・赤伝時備考1使用モード</summary>
        private int _returnRedNote1Mode;
        private string _returnRedNote1;
        /// <summary>返品・赤伝時備考2使用モード</summary>
        private int _returnRedNote2Mode;
        private string _returnRedNote2;
        /// <summary>返品・赤伝時備考3使用モード</summary>
        private int _returnRedNote3Mode;
        private string _returnRedNote3;
        /// <summary>返品・赤伝時備考欄ブランクチェックモード</summary>
        private int _returnRedBlankCheckMode;

        /// <summary>返品・赤伝時備考1使用モード</summary>
        public int ReturnRedNote1Mode
        {
            get { return _returnRedNote1Mode; }
            set { _returnRedNote1Mode = value; }
        }
        public string ReturnRedNote1
        {
            get { return _returnRedNote1; }
            set { _returnRedNote1 = value; }
        }
        /// <summary>返品・赤伝時備考2使用モード</summary>
        public int ReturnRedNote2Mode
        {
            get { return _returnRedNote2Mode; }
            set { _returnRedNote2Mode = value; }
        }
        public string ReturnRedNote2
        {
            get { return _returnRedNote2; }
            set { _returnRedNote2 = value; }
        }
        /// <summary>返品・赤伝時備考3使用モード</summary>
        public int ReturnRedNote3Mode
        {
            get { return _returnRedNote3Mode; }
            set { _returnRedNote3Mode = value; }
        }
        public string ReturnRedNote3
        {
            get { return _returnRedNote3; }
            set { _returnRedNote3 = value; }
        }
        /// <summary>返品・赤伝時備考欄ブランクチェックモード</summary>
        public int ReturnRedBlankCheckMode
        {
            get { return _returnRedBlankCheckMode; }
            set { _returnRedBlankCheckMode = value; }
        }
    }
    # endregion
    //--- ADD 田村顕成 2022/10/05 インボイス残対応 -----<<<<<
}